uint64_t Heap._UnsafeHandle._trickleDownMin(node:value:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(void, void);
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t result;
  Swift::Int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  char *v53;
  void (*v54)(uint64_t, uint64_t);
  Swift::Int *v55;
  Swift::Int v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  CollectionsInternal::_HeapNode v61;
  CollectionsInternal::_HeapNode v62;
  uint64_t v63;
  Swift::Int v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  char v67;
  uint64_t v68;
  char v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t (*v72)(char *, uint64_t);
  Swift::Int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  Swift::Int *v77;
  Swift::Int v78;
  Swift::Int offset;
  uint64_t v80;
  char *v81;
  char v82;
  uint64_t v83;
  char v84;
  Swift::Int v85;
  char *v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  Swift::Int v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  void (**v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  Swift::Int *v104;
  void (*v105)(char *, char *, uint64_t);
  Swift::Int level;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  uint64_t (*v110)(char *, uint64_t);
  uint64_t v111;

  v110 = a6;
  v6 = a5;
  v105 = a2;
  v9 = *(void *)(a5 - 8);
  v10 = MEMORY[0x270FA5388](a1);
  v92 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x270FA5388](v10);
  v13 = MEMORY[0x270FA5388](v12);
  v95 = (char *)&v91 - v14;
  v15 = MEMORY[0x270FA5388](v13);
  v96 = (char *)&v91 - v16;
  v17 = (Swift::Int *)MEMORY[0x270FA5388](v15);
  v103 = (char *)&v91 - v18;
  v104 = v17;
  v19 = *v17;
  v20 = 4 * *v17;
  v21 = v20 | 3;
  v108 = v17[1] + 2;
  v22 = v20 + 6;
  v102 = v23;
  v111 = v24;
  v93 = v25;
  v94 = v9;
  if (v20 + 6 >= v23)
  {
    v42 = a3;
LABEL_22:
    result = (2 * v19) | 1;
    if (result >= a4) {
      return result;
    }
    v60 = v104[1] + 1;
    v61.offset = v21;
    v61.level = v108;
    v62 = Heap._UnsafeHandle._minDescendant(c0:gc0:)(*(CollectionsInternal::_HeapNode *)&result, v61);
    v63 = v94;
    v64 = *(void *)(v94 + 72);
    level = v62.level;
    v107 = v64;
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
    v108 = v94 + 16;
    v66 = v103;
    v65(v103, v42 + v62.offset * v64, v6);
    v67 = sub_24A5BB420();
    v68 = v111;
    v69 = v67;
    v70 = v66;
    v71 = v65;
    v72 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
    v94 = v63 + 8;
    result = v72(v70, v111);
    if ((v69 & 1) == 0) {
      return result;
    }
    v73 = *v104;
    result = sub_24A5BB540();
    if (result)
    {
      v74 = v93;
      sub_24A5BBD10();
      v109 = v42;
      result = sub_24A5BB540();
      if (result)
      {
        v75 = result + v73 * v107;
        v76 = (uint64_t)v103;
        v71(v103, (uint64_t)v74, v68);
        sub_24A544CAC(v76, v75, v68);
        result = v72(v74, v68);
        v77 = v104;
        v78 = level;
        *v104 = v62.offset;
        v77[1] = v78;
        if (v62.offset < v21) {
          return result;
        }
        offset = v62.offset - 1;
        if (v62.offset - 1 < 0) {
          offset = v62.offset;
        }
        v80 = offset >> 1;
        v81 = v103;
        v71(v103, v109 + (offset >> 1) * v107, v68);
        v82 = sub_24A5BB420();
        v83 = v111;
        v84 = v82;
        result = v72(v81, v111);
        if ((v84 & 1) == 0) {
          return result;
        }
        v110 = v72;
        v85 = *v104;
        result = sub_24A5BB540();
        if (result)
        {
          v105 = (void (*)(char *, char *, uint64_t))v71;
          v86 = v92;
          sub_24A5BBD10();
          result = sub_24A5BB540();
          if (result)
          {
            v87 = level - 1;
            v88 = result + v85 * v107;
            v89 = (uint64_t)v103;
            v105(v103, v86, v83);
            sub_24A544CAC(v89, v88, v83);
            result = v110(v86, v83);
            v90 = v104;
            *v104 = v80;
            v90[1] = v87;
            return result;
          }
LABEL_39:
          __break(1u);
          return result;
        }
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
LABEL_36:
      __break(1u);
    }
    __break(1u);
    goto LABEL_38;
  }
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v98 = v9 + 16;
  v99 = v26;
  v27 = *(void *)(v9 + 72);
  v100 = (void (**)(char *, uint64_t))(v9 + 8);
  v101 = v27;
  v109 = a3;
  while (1)
  {
    level = v22;
    v28 = v101;
    v29 = v103;
    v30 = v99;
    v99(v103, a3 + v101 * v21, v6);
    v31 = v96;
    v30(v96, a3 + v28 * (v21 + 1), v6);
    v32 = sub_24A5BB420();
    v33 = *v100;
    (*v100)(v31, v111);
    v33(v29, v111);
    v34 = (void (*)(void, void))((v32 & 1) != 0 ? v21 : v21 + 1);
    v107 = (Swift::Int)v34;
    v97 = v21 + 2;
    v35 = v109;
    v30(v29, v109 + v28 * (v21 + 2), v111);
    v30(v31, v35 + v28 * level, v111);
    LOBYTE(v35) = sub_24A5BB420();
    v33(v31, v111);
    v33(v29, v111);
    v36 = (v35 & 1) != 0 ? v97 : level;
    level = v36;
    v37 = v109;
    v30(v29, v109 + v107 * v28, v111);
    v30(v31, v37 + v36 * v28, v111);
    LOBYTE(v37) = sub_24A5BB420();
    v38 = v30;
    v39 = v29;
    v33(v31, v111);
    v33(v29, v111);
    v40 = (v37 & 1) != 0 ? v107 : level;
    v41 = v40 * v28;
    v42 = v109;
    v38(v39, v109 + v41, v111);
    v43 = sub_24A5BB420();
    v44 = v111;
    v45 = v43;
    v107 = (Swift::Int)v33;
    result = ((uint64_t (*)(char *, uint64_t))v33)(v39, v111);
    if ((v45 & 1) == 0) {
      return result;
    }
    v47 = *v104;
    result = sub_24A5BB540();
    if (!result)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v48 = v95;
    sub_24A5BBD10();
    result = sub_24A5BB540();
    if (!result) {
      goto LABEL_35;
    }
    v49 = v101;
    v50 = result + v47 * v101;
    v51 = (uint64_t)v103;
    v52 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    v99(v103, (uint64_t)v48, v44);
    sub_24A544CAC(v51, v50, v44);
    v53 = v48;
    v54 = (void (*)(uint64_t, uint64_t))v107;
    ((void (*)(char *, uint64_t))v107)(v53, v44);
    v55 = v104;
    v56 = v108;
    *v104 = v40;
    v55[1] = v56;
    v57 = v40 - 1;
    if (v40 - 1 < 0) {
      v57 = v40;
    }
    v52(v51, v42 + (v57 >> 1) * v49, v44);
    v58 = sub_24A5BB420();
    v6 = v111;
    v59 = v58;
    v54(v51, v111);
    a4 = v102;
    a3 = v42;
    if (v59)
    {
      sub_24A5BB540();
      sub_24A5BC5A0();
    }
    v21 = (4 * v40) | 3;
    v22 = 4 * v40 + 6;
    v108 += 2;
    if (v22 >= a4)
    {
      v19 = *v104;
      goto LABEL_22;
    }
  }
}

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle._minDescendant(c0:gc0:)(CollectionsInternal::_HeapNode c0, CollectionsInternal::_HeapNode gc0)
{
  uint64_t v5 = v4;
  Swift::Int v6 = v3;
  uint64_t v7 = v2;
  Swift::Int offset = gc0.offset;
  Swift::Int v9 = c0.offset;
  v10 = *(void **)(v4 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](c0.offset);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v18 = (char *)&v41 - v17;
  if (v19 >= v20)
  {
    if (v9 + 1 < v6)
    {
      uint64_t v29 = v10[9];
      Swift::Int v45 = v14;
      v30 = (void (*)(char *, uint64_t, uint64_t))v10[2];
      uint64_t v48 = v16;
      v30((char *)&v41 - v17, v7 + v29 * v9, v5);
      v30(v13, v7 + v29 * (v9 + 1), v5);
      LOBYTE(v29) = sub_24A5BB420();
      v31 = (void (*)(char *, uint64_t))v10[1];
      v31(v13, v5);
      v31(v18, v5);
      if ((v29 & 1) == 0) {
        ++v9;
      }
      Swift::Int v14 = v45;
    }
  }
  else
  {
    v23 = (void (*)(char *, uint64_t, uint64_t))v10[2];
    v22 = v10 + 2;
    v21 = v23;
    uint64_t v24 = v22[7];
    v46 = (void (**)(char *, uint64_t))(v22 - 1);
    Swift::Int v47 = v15;
    uint64_t v48 = v16;
    if (offset + 2 >= v6)
    {
      Swift::Int v45 = v14;
      v21((char *)&v41 - v17, v7 + v24 * (v9 + 1), v5);
      uint64_t v42 = v7;
      uint64_t v43 = v24;
      v44 = v21;
      v21(v13, v7 + v24 * offset, v5);
      char v32 = sub_24A5BB420();
      v33 = *v46;
      (*v46)(v13, v5);
      v33(v18, v5);
      if (v32) {
        ++v9;
      }
      else {
        Swift::Int v9 = offset;
      }
      Swift::Int v34 = v47;
      if (v32) {
        Swift::Int v34 = v45;
      }
      Swift::Int v35 = offset + 1;
      if (v35 >= v6)
      {
        Swift::Int v14 = v34;
      }
      else
      {
        uint64_t v37 = v42;
        uint64_t v36 = v43;
        v38 = v44;
        Swift::Int v45 = v34;
        v44(v18, v42 + v9 * v43, v5);
        v38(v13, v37 + v36 * v35, v5);
        LOBYTE(v38) = sub_24A5BB420();
        v33(v13, v5);
        v33(v18, v5);
        Swift::Int v14 = v47;
        if (v38) {
          Swift::Int v14 = v45;
        }
        else {
          Swift::Int v9 = v35;
        }
      }
    }
    else
    {
      Swift::Int v45 = offset + 2;
      v21((char *)&v41 - v17, v7 + v24 * offset, v5);
      v21(v13, v7 + v24 * (offset + 1), v5);
      LODWORD(v44) = sub_24A5BB420();
      v25 = *v46;
      (*v46)(v13, v5);
      v25(v18, v5);
      if (v44) {
        Swift::Int v26 = offset;
      }
      else {
        Swift::Int v26 = offset + 1;
      }
      v44 = (void (*)(char *, uint64_t, uint64_t))v26;
      v21(v18, v7 + v26 * v24, v5);
      Swift::Int v27 = v45;
      v21(v13, v7 + v24 * v45, v5);
      char v28 = sub_24A5BB420();
      v25(v13, v5);
      v25(v18, v5);
      Swift::Int v14 = v47;
      if (v28) {
        Swift::Int v9 = (Swift::Int)v44;
      }
      else {
        Swift::Int v9 = v27;
      }
    }
  }
  Swift::Int v39 = v9;
  result.level = v14;
  result.Swift::Int offset = v39;
  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.trickleDownMax(_:)(CollectionsInternal::_HeapNode a1)
{
  uint64_t v108 = v3;
  uint64_t v4 = v1;
  Swift::Int level = a1.level;
  Swift::Int offset = a1.offset;
  uint64_t v7 = *(void **)(v2 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1.offset);
  v88 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v87 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  v89 = (char *)&v87 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v93 = (char *)&v87 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v94 = (char *)&v87 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v96 = (char *)&v87 - v20;
  MEMORY[0x270FA5388](v19);
  v22 = (char *)&v87 - v21;
  uint64_t v97 = v23;
  uint64_t v109 = v24;
  if (!sub_24A5BB540())
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v25 = v7[9];
  sub_24A5BBD10();
  uint64_t v26 = (4 * offset) | 3;
  uint64_t v27 = 4 * offset + 6;
  uint64_t v103 = v4;
  uint64_t v104 = v25;
  if (v27 < v4)
  {
    v91 = v12;
    v92 = v7;
    uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    Swift::Int v28 = (Swift::Int)(v7 + 2);
    v95 = v29;
    v99 = (void (**)(char *, uint64_t))(v28 - 8);
    Swift::Int v107 = v28;
    unint64_t v90 = v28 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v102 = v22;
    while (1)
    {
      Swift::Int v100 = v26;
      Swift::Int v101 = offset;
      uint64_t v105 = v27;
      Swift::Int v98 = level;
      uint64_t v30 = v26 + 1;
      uint64_t v32 = (uint64_t)v96;
      uint64_t v31 = v97;
      uint64_t v33 = v109;
      Swift::Int v34 = v95;
      v95(v96, v97 + v26 * v25, v109);
      Swift::Int v35 = v94;
      v34(v94, v31 + v30 * v25, v33);
      LOBYTE(v30) = sub_24A5BB420();
      uint64_t v36 = *v99;
      (*v99)(v35, v109);
      v36((char *)v32, v109);
      Swift::Int v37 = v100;
      if (v30) {
        v38 = (void (*)(void, void))(v100 + 1);
      }
      else {
        v38 = (void (*)(void, void))v100;
      }
      uint64_t v106 = (uint64_t)v38;
      v100 += 2;
      v34((char *)v32, v31 + (v37 + 2) * v25, v109);
      v34(v35, v31 + v105 * v25, v109);
      char v39 = sub_24A5BB420();
      v36(v35, v109);
      v36((char *)v32, v109);
      uint64_t v40 = v25;
      if (v39) {
        uint64_t v41 = v105;
      }
      else {
        uint64_t v41 = v100;
      }
      v34((char *)v32, v31 + v106 * v40, v109);
      v34(v35, v31 + v41 * v40, v109);
      char v42 = sub_24A5BB420();
      v36(v35, v109);
      v36((char *)v32, v109);
      if (v42) {
        uint64_t v43 = v41;
      }
      else {
        uint64_t v43 = v106;
      }
      v34((char *)v32, v31 + v43 * v40, v109);
      char v44 = sub_24A5BB420();
      v36((char *)v32, v109);
      if ((v44 & 1) == 0)
      {
        uint64_t v12 = v91;
        uint64_t v7 = v92;
        v22 = v102;
        uint64_t v55 = v104;
        Swift::Int offset = v101;
        goto LABEL_33;
      }
      v46 = v36;
      if (!sub_24A5BB540()) {
        break;
      }
      Swift::Int v47 = v93;
      sub_24A5BBD10();
      uint64_t v48 = sub_24A5BB540();
      if (!v48) {
        goto LABEL_44;
      }
      uint64_t v49 = v104;
      uint64_t v50 = v48 + v101 * v104;
      v34((char *)v32, (uint64_t)v47, v109);
      sub_24A544CAC(v32, v50, v109);
      v46(v47, v109);
      uint64_t v51 = v43 - 1;
      if (v43 - 1 < 0) {
        uint64_t v51 = v43;
      }
      v34((char *)v32, v31 + (v51 >> 1) * v49, v109);
      v22 = v102;
      char v52 = sub_24A5BB420();
      v46((char *)v32, v109);
      uint64_t v53 = v103;
      if (v52)
      {
        sub_24A5BB540();
        sub_24A5BC5A0();
      }
      uint64_t v26 = (4 * v43) | 3;
      uint64_t v27 = 4 * v43 + 6;
      Swift::Int level = v98 + 2;
      Swift::Int offset = v43;
      uint64_t v25 = v104;
      if (v27 >= v53)
      {
        Swift::Int v54 = v98 + 4;
        Swift::Int offset = v43;
        uint64_t v12 = v91;
        uint64_t v7 = v92;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  Swift::Int v54 = level + 2;
LABEL_24:
  uint64_t v56 = (2 * offset) | 1;
  if (v56 >= v103)
  {
    Swift::Int v34 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    uint64_t v55 = v104;
    ((void (*)(char *, char *, uint64_t, Swift::Int))v34)(v12, v22, v109, v54);
    goto LABEL_34;
  }
  Swift::Int v100 = v26;
  Swift::Int v101 = offset;
  v91 = v12;
  Swift::Int v57 = level + 1;
  uint64_t v58 = v97;
  uint64_t v59 = v109;
  Swift::Int v60 = Heap._UnsafeHandle._maxDescendant(c0:gc0:)(*(CollectionsInternal::_HeapNode *)&v56, *(CollectionsInternal::_HeapNode *)&v26).offset;
  Swift::Int v107 = v60 * v104;
  v61 = (void (*)(char *, uint64_t, uint64_t))v7[2];
  unint64_t v90 = (unint64_t)(v7 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v62 = v96;
  v95 = v61;
  v61(v96, v58 + v60 * v104, v59);
  v102 = v22;
  char v63 = sub_24A5BB420();
  v92 = v7;
  v64 = (void (*)(char *, uint64_t))v7[1];
  v64(v62, v109);
  if ((v63 & 1) == 0)
  {
    uint64_t v12 = v91;
    uint64_t v7 = v92;
    Swift::Int offset = v101;
    v22 = v102;
    goto LABEL_32;
  }
  if (!sub_24A5BB540())
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v106 = (uint64_t)v64;
  v65 = v89;
  sub_24A5BBD10();
  uint64_t v66 = sub_24A5BB540();
  if (!v66)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v55 = v104;
  uint64_t v67 = v66 + v101 * v104;
  v68 = v95;
  uint64_t v69 = (uint64_t)v96;
  uint64_t v70 = v109;
  v95(v96, (uint64_t)v65, v109);
  sub_24A544CAC(v69, v67, v70);
  v71 = v65;
  v72 = (void (*)(uint64_t, uint64_t))v106;
  ((void (*)(char *, uint64_t))v106)(v71, v70);
  if (v60 < v100)
  {
    Swift::Int offset = v60;
    uint64_t v12 = v91;
    uint64_t v7 = v92;
    v22 = v102;
    Swift::Int v34 = v68;
    ((void (*)(char *, char *, uint64_t, uint64_t))v68)(v91, v102, v109, v73);
    goto LABEL_34;
  }
  uint64_t v80 = v60 - 1;
  if (v60 - 1 < 0) {
    uint64_t v80 = v60;
  }
  Swift::Int offset = v80 >> 1;
  v68((char *)v69, v97 + (v80 >> 1) * v55, v109);
  char v81 = sub_24A5BB420();
  v72(v69, v109);
  if ((v81 & 1) == 0)
  {
    Swift::Int offset = v60;
    uint64_t v12 = v91;
    uint64_t v7 = v92;
    v22 = v102;
LABEL_32:
    uint64_t v55 = v104;
    Swift::Int v34 = v95;
LABEL_33:
    ((void (*)(char *, char *, uint64_t, uint64_t))v34)(v12, v22, v109, v45);
LABEL_34:
    uint64_t v74 = sub_24A5BB540();
    if (v74)
    {
      v75 = v22;
      uint64_t v76 = v74 + offset * v55;
      uint64_t v77 = (uint64_t)v96;
      uint64_t v78 = v109;
      v34(v96, (uint64_t)v12, v109);
      sub_24A544CAC(v77, v76, v78);
      v79 = (void (*)(char *, uint64_t))v7[1];
      v79(v12, v78);
      v79(v75, v78);
      return;
    }
    goto LABEL_46;
  }
  if (!sub_24A5BB540())
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v82 = v88;
  sub_24A5BBD10();
  uint64_t v83 = sub_24A5BB540();
  if (v83)
  {
    uint64_t v84 = v83 + v107;
    uint64_t v85 = v109;
    Swift::Int v34 = v95;
    v95((char *)v69, (uint64_t)v82, v109);
    sub_24A544CAC(v69, v84, v85);
    ((void (*)(char *, uint64_t))v106)(v82, v85);
    uint64_t v12 = v91;
    uint64_t v7 = v92;
    v22 = v102;
    uint64_t v55 = v104;
    ((void (*)(char *, char *, uint64_t, uint64_t))v34)(v91, v102, v109, v86);
    goto LABEL_34;
  }
LABEL_50:
  __break(1u);
}

uint64_t Heap._UnsafeHandle._trickleDownMax(node:value:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t))
{
  v110 = a6;
  uint64_t v6 = a5;
  uint64_t v105 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  v92 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  v95 = (char *)&v91 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v96 = (char *)&v91 - v16;
  uint64_t v17 = (Swift::Int *)MEMORY[0x270FA5388](v15);
  uint64_t v103 = (char *)&v91 - v18;
  uint64_t v104 = v17;
  Swift::Int v19 = *v17;
  uint64_t v20 = 4 * *v17;
  Swift::Int v21 = v20 | 3;
  Swift::Int v108 = v17[1] + 2;
  uint64_t v22 = v20 + 6;
  uint64_t v102 = v23;
  uint64_t v111 = v24;
  v93 = v25;
  uint64_t v94 = v9;
  if (v20 + 6 >= v23)
  {
    uint64_t v42 = a3;
LABEL_22:
    uint64_t result = (2 * v19) | 1;
    if (result >= a4) {
      return result;
    }
    uint64_t v60 = v104[1] + 1;
    v61.Swift::Int offset = v21;
    v61.Swift::Int level = v108;
    CollectionsInternal::_HeapNode v62 = Heap._UnsafeHandle._maxDescendant(c0:gc0:)(*(CollectionsInternal::_HeapNode *)&result, v61);
    uint64_t v63 = v94;
    Swift::Int v64 = *(void *)(v94 + 72);
    Swift::Int level = v62.level;
    Swift::Int v107 = v64;
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
    Swift::Int v108 = v94 + 16;
    uint64_t v66 = v103;
    v65(v103, v42 + v62.offset * v64, v6);
    char v67 = sub_24A5BB420();
    uint64_t v68 = v111;
    char v69 = v67;
    uint64_t v70 = v66;
    v71 = v65;
    v72 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
    uint64_t v94 = v63 + 8;
    uint64_t result = v72(v70, v111);
    if ((v69 & 1) == 0) {
      return result;
    }
    Swift::Int v73 = *v104;
    uint64_t result = sub_24A5BB540();
    if (result)
    {
      uint64_t v74 = v93;
      sub_24A5BBD10();
      uint64_t v109 = v42;
      uint64_t result = sub_24A5BB540();
      if (result)
      {
        uint64_t v75 = result + v73 * v107;
        uint64_t v76 = (uint64_t)v103;
        v71(v103, (uint64_t)v74, v68);
        sub_24A544CAC(v76, v75, v68);
        uint64_t result = v72(v74, v68);
        uint64_t v77 = v104;
        Swift::Int v78 = level;
        *uint64_t v104 = v62.offset;
        v77[1] = v78;
        if (v62.offset < v21) {
          return result;
        }
        Swift::Int offset = v62.offset - 1;
        if (v62.offset - 1 < 0) {
          Swift::Int offset = v62.offset;
        }
        uint64_t v80 = offset >> 1;
        char v81 = v103;
        v71(v103, v109 + (offset >> 1) * v107, v68);
        char v82 = sub_24A5BB420();
        uint64_t v83 = v111;
        char v84 = v82;
        uint64_t result = v72(v81, v111);
        if ((v84 & 1) == 0) {
          return result;
        }
        v110 = v72;
        Swift::Int v85 = *v104;
        uint64_t result = sub_24A5BB540();
        if (result)
        {
          uint64_t v105 = (void (*)(char *, char *, uint64_t))v71;
          uint64_t v86 = v92;
          sub_24A5BBD10();
          uint64_t result = sub_24A5BB540();
          if (result)
          {
            Swift::Int v87 = level - 1;
            uint64_t v88 = result + v85 * v107;
            uint64_t v89 = (uint64_t)v103;
            v105(v103, v86, v83);
            sub_24A544CAC(v89, v88, v83);
            uint64_t result = v110(v86, v83);
            unint64_t v90 = v104;
            *uint64_t v104 = v80;
            v90[1] = v87;
            return result;
          }
LABEL_39:
          __break(1u);
          return result;
        }
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
LABEL_36:
      __break(1u);
    }
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v98 = v9 + 16;
  v99 = v26;
  uint64_t v27 = *(void *)(v9 + 72);
  Swift::Int v100 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v101 = v27;
  uint64_t v109 = a3;
  while (1)
  {
    Swift::Int level = v22;
    uint64_t v28 = v101;
    uint64_t v29 = v103;
    uint64_t v30 = v99;
    v99(v103, a3 + v101 * v21, v6);
    uint64_t v31 = v96;
    v30(v96, a3 + v28 * (v21 + 1), v6);
    char v32 = sub_24A5BB420();
    uint64_t v33 = *v100;
    (*v100)(v31, v111);
    v33(v29, v111);
    uint64_t v34 = (v32 & 1) != 0 ? v21 + 1 : v21;
    Swift::Int v107 = v34;
    Swift::Int v97 = v21 + 2;
    uint64_t v35 = v109;
    v30(v29, v109 + v28 * (v21 + 2), v111);
    v30(v31, v35 + v28 * level, v111);
    LOBYTE(v35) = sub_24A5BB420();
    v33(v31, v111);
    v33(v29, v111);
    Swift::Int v36 = (v35 & 1) != 0 ? level : v97;
    Swift::Int level = v36;
    uint64_t v37 = v109;
    v30(v29, v109 + v107 * v28, v111);
    v30(v31, v37 + v36 * v28, v111);
    LOBYTE(v37) = sub_24A5BB420();
    v38 = v30;
    char v39 = v29;
    v33(v31, v111);
    v33(v29, v111);
    uint64_t v40 = (v37 & 1) != 0 ? level : v107;
    uint64_t v41 = v40 * v28;
    uint64_t v42 = v109;
    v38(v39, v109 + v41, v111);
    char v43 = sub_24A5BB420();
    uint64_t v44 = v111;
    char v45 = v43;
    Swift::Int v107 = (Swift::Int)v33;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v39, v111);
    if ((v45 & 1) == 0) {
      return result;
    }
    Swift::Int v47 = *v104;
    uint64_t result = sub_24A5BB540();
    if (!result)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v48 = v95;
    sub_24A5BBD10();
    uint64_t result = sub_24A5BB540();
    if (!result) {
      goto LABEL_35;
    }
    uint64_t v49 = v101;
    uint64_t v50 = result + v47 * v101;
    uint64_t v51 = (uint64_t)v103;
    char v52 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    v99(v103, (uint64_t)v48, v44);
    sub_24A544CAC(v51, v50, v44);
    uint64_t v53 = v48;
    Swift::Int v54 = (void (*)(uint64_t, uint64_t))v107;
    ((void (*)(char *, uint64_t))v107)(v53, v44);
    uint64_t v55 = v104;
    Swift::Int v56 = v108;
    *uint64_t v104 = v40;
    v55[1] = v56;
    uint64_t v57 = v40 - 1;
    if (v40 - 1 < 0) {
      uint64_t v57 = v40;
    }
    v52(v51, v42 + (v57 >> 1) * v49, v44);
    char v58 = sub_24A5BB420();
    uint64_t v6 = v111;
    char v59 = v58;
    v54(v51, v111);
    a4 = v102;
    a3 = v42;
    if (v59)
    {
      sub_24A5BB540();
      sub_24A5BC5A0();
    }
    Swift::Int v21 = (4 * v40) | 3;
    uint64_t v22 = 4 * v40 + 6;
    v108 += 2;
    if (v22 >= a4)
    {
      Swift::Int v19 = *v104;
      goto LABEL_22;
    }
  }
}

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle._maxDescendant(c0:gc0:)(CollectionsInternal::_HeapNode c0, CollectionsInternal::_HeapNode gc0)
{
  uint64_t v5 = v4;
  Swift::Int v6 = v3;
  uint64_t v7 = v2;
  Swift::Int offset = gc0.offset;
  Swift::Int v9 = c0.offset;
  uint64_t v10 = *(void **)(v4 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](c0.offset);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v18 = (char *)&v41 - v17;
  if (v19 >= v20)
  {
    if (v9 + 1 < v6)
    {
      uint64_t v29 = v10[9];
      Swift::Int v45 = v14;
      uint64_t v30 = (void (*)(char *, uint64_t, uint64_t))v10[2];
      uint64_t v48 = v16;
      v30((char *)&v41 - v17, v7 + v29 * v9, v5);
      v30(v13, v7 + v29 * (v9 + 1), v5);
      LOBYTE(v29) = sub_24A5BB420();
      uint64_t v31 = (void (*)(char *, uint64_t))v10[1];
      v31(v13, v5);
      v31(v18, v5);
      if (v29) {
        ++v9;
      }
      Swift::Int v14 = v45;
    }
  }
  else
  {
    uint64_t v23 = (void (*)(char *, uint64_t, uint64_t))v10[2];
    uint64_t v22 = v10 + 2;
    Swift::Int v21 = v23;
    uint64_t v24 = v22[7];
    v46 = (void (**)(char *, uint64_t))(v22 - 1);
    Swift::Int v47 = v15;
    uint64_t v48 = v16;
    if (offset + 2 >= v6)
    {
      Swift::Int v45 = v14;
      v21((char *)&v41 - v17, v7 + v24 * (v9 + 1), v5);
      uint64_t v42 = v7;
      uint64_t v43 = v24;
      uint64_t v44 = v21;
      v21(v13, v7 + v24 * offset, v5);
      char v32 = sub_24A5BB420();
      uint64_t v33 = *v46;
      (*v46)(v13, v5);
      v33(v18, v5);
      if (v32) {
        Swift::Int v9 = offset;
      }
      else {
        ++v9;
      }
      Swift::Int v34 = v47;
      if ((v32 & 1) == 0) {
        Swift::Int v34 = v45;
      }
      Swift::Int v35 = offset + 1;
      if (v35 >= v6)
      {
        Swift::Int v14 = v34;
      }
      else
      {
        uint64_t v37 = v42;
        uint64_t v36 = v43;
        v38 = v44;
        Swift::Int v45 = v34;
        v44(v18, v42 + v9 * v43, v5);
        v38(v13, v37 + v36 * v35, v5);
        LOBYTE(v38) = sub_24A5BB420();
        v33(v13, v5);
        v33(v18, v5);
        Swift::Int v14 = v47;
        if (v38) {
          Swift::Int v9 = v35;
        }
        else {
          Swift::Int v14 = v45;
        }
      }
    }
    else
    {
      Swift::Int v45 = offset + 2;
      v21((char *)&v41 - v17, v7 + v24 * offset, v5);
      v21(v13, v7 + v24 * (offset + 1), v5);
      LODWORD(v44) = sub_24A5BB420();
      uint64_t v25 = *v46;
      (*v46)(v13, v5);
      v25(v18, v5);
      if (v44) {
        Swift::Int v26 = offset + 1;
      }
      else {
        Swift::Int v26 = offset;
      }
      uint64_t v44 = (void (*)(char *, uint64_t, uint64_t))v26;
      v21(v18, v7 + v26 * v24, v5);
      Swift::Int v27 = v45;
      v21(v13, v7 + v24 * v45, v5);
      char v28 = sub_24A5BB420();
      v25(v13, v5);
      v25(v18, v5);
      Swift::Int v14 = v47;
      if (v28) {
        Swift::Int v9 = v27;
      }
      else {
        Swift::Int v9 = (Swift::Int)v44;
      }
    }
  }
  Swift::Int v39 = v9;
  result.Swift::Int level = v14;
  result.Swift::Int offset = v39;
  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.heapify()()
{
  if (v0 >= 0) {
    uint64_t v3 = v0;
  }
  else {
    uint64_t v3 = v0 + 1;
  }
  if (v0 < 2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = v1;
    uint64_t v18 = v2;
    uint64_t v4 = v3 >> 1;
    uint64_t v5 = (v3 >> 1) - 1;
    unint64_t v6 = 64 - __clz(v3 >> 1);
    do
    {
      uint64_t v7 = v6 - 1;
      uint64_t v8 = -1 << (v6 - 1);
      uint64_t v9 = ~v8;
      uint64_t v10 = (1 << v6) - 2;
      if (v10 >= v4) {
        uint64_t v10 = v5;
      }
      BOOL v11 = v4 <= v9;
      if (v4 > v9) {
        uint64_t v12 = ~v8;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v4 > v9) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v11) {
        uint64_t v10 = 0;
      }
      v15[0] = v12;
      v15[1] = v13;
      char v14 = v11;
      v15[2] = v10;
      v15[3] = v13;
      char v16 = v14;
      Heap._UnsafeHandle._heapify(_:_:)(v7, (uint64_t)v15);
      unint64_t v6 = v7;
    }
    while (v7 > 0);
  }
}

void Heap._UnsafeHandle._heapify(_:_:)(char a1, uint64_t a2)
{
  sub_24A512A70(a2, (uint64_t)v8);
  if ((v10 & 1) == 0)
  {
    Swift::Int v3 = v8[0];
    Swift::Int v4 = v8[1];
    Swift::Int v5 = v9;
    if (a1)
    {
      if (v9 >= v8[0])
      {
        do
        {
          v7.Swift::Int offset = v3;
          v7.Swift::Int level = v4;
          Heap._UnsafeHandle.trickleDownMax(_:)(v7);
          ++v3;
        }
        while (v5 >= v3);
      }
    }
    else if (v9 >= v8[0])
    {
      do
      {
        v6.Swift::Int offset = v3;
        v6.Swift::Int level = v4;
        Heap._UnsafeHandle.trickleDownMin(_:)(v6);
        ++v3;
      }
      while (v5 >= v3);
    }
  }
}

uint64_t sub_24A512A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_26979B8D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Heap._UnsafeHandle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t BitArray.init(stringLiteral:)(unint64_t a1, unint64_t a2)
{
  uint64_t result = _s19CollectionsInternal8BitArrayVyACSgSScfC_0(a1, a2);
  if (!result)
  {
    uint64_t result = sub_24A5BC340();
    __break(1u);
  }
  return result;
}

uint64_t sub_24A512B64@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _s19CollectionsInternal8BitArrayVyACSgSScfC_0(*a1, a1[1]);
  if (result)
  {
    *a2 = result;
    a2[1] = v4;
  }
  else
  {
    uint64_t result = sub_24A5BC340();
    __break(1u);
  }
  return result;
}

unint64_t sub_24A512BF0()
{
  unint64_t result = qword_26979B958;
  if (!qword_26979B958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B958);
  }
  return result;
}

unint64_t sub_24A512C48()
{
  unint64_t result = qword_26979B960;
  if (!qword_26979B960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B960);
  }
  return result;
}

uint64_t _HashNode.intersection<A>(_:_:)(unsigned int a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v34 = a5;
  uint64_t v35 = a8;
  char v32 = a3;
  uint64_t v33 = a4;
  uint64_t v31 = a2;
  unsigned int v30 = a1;
  uint64_t v11 = type metadata accessor for _HashNode.Builder();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  Swift::Int v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v29 = (char *)&v28 - v16;
  uint64_t v17 = sub_24A5BBD20();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  Swift::Int v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v28 - v22;
  _HashNode._intersection<A>(_:_:)(v30, v31, v32, v33, v34, a6, a7, v35, (unsigned char *)&v28 - v22, a9);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v21, 1, v11) == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v18 + 8);
    v24(v23, v17);
    v24(v21, v17);
    return 0;
  }
  else
  {
    Swift::Int v26 = v29;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v29, v21, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v26, v11);
    uint64_t v25 = sub_24A5566C8(v11);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v11);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  }
  return v25;
}

uint64_t _HashNode._intersection<A>(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  if (a4 == a2)
  {
    uint64_t v20 = type metadata accessor for _HashNode.Builder();
    Swift::Int v21 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
    return v21(a9, 1, 1, v20);
  }
  else if (_HashNode.isCollisionNode.getter(a4, a5, a6, (uint64_t)a7, a10) {
         || _HashNode.isCollisionNode.getter(a2, (uint64_t)a3, a6, a8, a10))
  }
  {
    return _HashNode._intersection_slow<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else
  {
    uint64_t v22 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
    return sub_24A5132AC(v22, v23, a2, a1, a6, (uint64_t)a9, (uint64_t)a7, a8, a10);
  }
}

uint64_t _HashNode._intersection_slow<A>(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  BOOL v17 = _HashNode.isCollisionNode.getter(a4, a5, a6, (uint64_t)a7, a10);
  BOOL v18 = _HashNode.isCollisionNode.getter(a2, (uint64_t)a3, a6, a8, a10);
  uint64_t v19 = (void (*)(uint64_t, char *, uint64_t))nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  if (!v17) {
    return sub_24A51505C(v19, (uint64_t)v20, a2, a3, a6, (uint64_t)a7, a8, a9, a10);
  }
  if (!v18) {
    return sub_24A5148B0((char *)v19, v20, a2, a1, a4, a5, a6, a9, a7, a8, a10);
  }
  Swift::Int v21 = (unsigned int *)v19;
  uint64_t v22 = v20;
  uint64_t v23 = nullsub_1(a2 + 16, a2 + 32, a6, a8, a10);
  return sub_24A514338(v23, v24, a1, v21, v22, a6, (uint64_t)a9, (uint64_t)a7, a8, a10);
}

uint64_t sub_24A5132AC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (_DWORD *)nullsub_1(a3 + 16, a3 + 32, a5, a8, a9);
  return sub_24A513358(v14, v15, a4, a1, a2, a5, a6, a7, a8, a9);
}

uint64_t sub_24A513358@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v172 = a1;
  uint64_t v173 = a5;
  uint64_t v167 = a2;
  uint64_t v171 = a9;
  uint64_t v13 = type metadata accessor for _HashNode.Builder();
  uint64_t v146 = sub_24A5BBD20();
  v142 = *(void (***)(char *, uint64_t))(v146 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v146);
  v145 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  v150 = (char *)&v135 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v144 = *(void (***)(char *, char *, uint64_t))(TupleTypeMetadata2 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v148 = (uint64_t)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v151 = (char *)&v135 - v20;
  Swift::Int v21 = *(unsigned int (***)(char *, uint64_t, uint64_t))(a6 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  v155 = (void (*)(char *, uint64_t, uint64_t))((char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v22);
  v164 = (char *)&v135 - v24;
  uint64_t v25 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v135 - v27;
  uint64_t v161 = v13;
  uint64_t v136 = *(void *)(v13 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  v141 = (char *)&v135 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v140 = (char *)&v135 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v135 - v33;
  swift_storeEnumTagMultiPayload();
  v165 = v34;
  uint64_t v175 = a6;
  LODWORD(a6) = a3;
  uint64_t v169 = a10;
  _HashNode.Builder.init(_:_:)(a3, (uint64_t)v28, v34);
  unsigned int v37 = *a4;
  v168 = a4;
  unsigned int v162 = a3;
  uint64_t v170 = a8;
  if (!v37)
  {
    unsigned int v70 = a4[1];
    if (v70)
    {
      uint64_t v135 = a7;
      int v71 = 0;
      unsigned int v157 = a3 + 5;
      goto LABEL_31;
    }
    goto LABEL_61;
  }
  uint64_t v135 = a7;
  LODWORD(v38) = 0;
  unsigned int v39 = 0;
  v158 = (void (**)(char *, uint64_t, uint64_t))(v21 + 2);
  v143 = v21;
  v159 = (void (**)(uint64_t, uint64_t))(v21 + 1);
  unsigned int v157 = a3 + 5;
  v147 = (void (**)(uint64_t, uint64_t))(a8 - 8);
  while (1)
  {
    while (1)
    {
      unsigned int v40 = __clz(__rbit32(v37));
      v37 &= v37 - 1;
      uint64_t v41 = v169;
      uint64_t v42 = _HashNode.UnsafeHandle.itemPtr(at:)(v39, (uint64_t)a4, v173);
      uint64_t v43 = v172;
      int v44 = *v172;
      int v45 = 1 << v40;
      unsigned int v174 = v39;
      uint64_t v166 = v42;
      if (((1 << v40) & v44) != 0) {
        break;
      }
      int v55 = v172[1];
      if ((v55 & v45) != 0)
      {
        v36.i32[0] = v55 & (v45 - 1);
        uint8x8_t v56 = (uint8x8_t)vcnt_s8(v36);
        v56.i16[0] = vaddlv_u8(v56);
        uint64_t v57 = v56.u32[0];
        char v58 = *v158;
        uint64_t v59 = (uint64_t)v164;
        unsigned int v163 = v38;
        uint64_t v38 = v175;
        v58(v164, v166, v175);
        uint64_t v60 = v169;
        v153 = (void (**)(uint64_t, uint64_t))sub_24A5B85E4();
        v160 = *v159;
        v160(v59, v38);
        uint64_t v61 = v171;
        CollectionsInternal::_HeapNode v62 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v57, v172, v167, v38, v171, v60);
        uint64_t v63 = *v62;
        uint64_t v149 = v62[1];
        v156 = (void (**)(char *, uint64_t, uint64_t))v58;
        v58((char *)v59, v166, v38);
        swift_retain();
        BOOL v64 = _HashNode.containsKey(_:_:_:)(v157, v59, (uint64_t)v153, v63, v149, v38, v61, v60);
        swift_release();
        uint64_t v65 = v38;
        LOBYTE(v38) = v163;
        v160(v59, v65);
        if (v64) {
          goto LABEL_11;
        }
      }
LABEL_14:
      if (v38)
      {
        if (!v37)
        {
          a4 = v168;
          unsigned int v70 = v168[1];
          LODWORD(a6) = v162;
          if (v70)
          {
            int v71 = 1;
            uint64_t v72 = v161;
LABEL_25:
            Swift::Int v73 = v172;
            Swift::Int v21 = v143;
            goto LABEL_32;
          }
LABEL_59:
          a7 = v135;
          uint64_t v130 = v136;
          uint64_t v131 = v161;
          (*(void (**)(uint64_t, unsigned char *, uint64_t))(v136 + 32))(v135, v165, v161);
          uint64_t v132 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 56))(a7, v132, 1, v131);
        }
LABEL_4:
        LODWORD(v38) = 1;
        a4 = v168;
        goto LABEL_5;
      }
      a4 = v168;
      _HashNode.Builder.copyItems(_:from:upTo:)(v162, v168, v173, v40, v161);
      if (!v37)
      {
        unsigned int v70 = a4[1];
        if (v70)
        {
          int v71 = 1;
          uint64_t v72 = v161;
          LODWORD(a6) = v162;
          goto LABEL_25;
        }
        goto LABEL_59;
      }
      LODWORD(v38) = 1;
LABEL_5:
      unsigned int v39 = v174 + 1;
    }
    v36.i32[0] = (v45 - 1) & v44;
    uint8x8_t v46 = (uint8x8_t)vcnt_s8(v36);
    v46.i16[0] = vaddlv_u8(v46);
    uint64_t v47 = v46.u32[0];
    uint64_t v48 = *v158;
    uint64_t v49 = v164;
    unsigned int v163 = v37;
    LODWORD(v160) = v40;
    char v50 = v38;
    uint64_t v38 = v175;
    v48(v164, v42, v175);
    uint64_t v51 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v47, v43, v167, v38, v171, v41);
    char v52 = v155;
    v156 = (void (**)(char *, uint64_t, uint64_t))v48;
    v48((char *)v155, v51, v38);
    LOBYTE(v47) = sub_24A5BB530();
    uint64_t v53 = *v159;
    (*v159)((uint64_t)v52, v38);
    uint64_t v54 = v38;
    LOBYTE(v38) = v50;
    unsigned int v40 = v160;
    unsigned int v37 = v163;
    v53((uint64_t)v49, v54);
    if ((v47 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    if (v38)
    {
      uint64_t v66 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v67 = (uint64_t)v151;
      uint64_t v68 = (uint64_t)&v151[v66];
      uint64_t v69 = v166 + v66;
      ((void (*)(char *))v156)(v151);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v170 - 8) + 16))(v68, v69);
      _HashNode.Builder.addNewItem(_:_:at:)(v162, v67, v68, v40, v161);
      if (!v37)
      {
        a4 = v168;
        unsigned int v70 = v168[1];
        Swift::Int v73 = v172;
        Swift::Int v21 = v143;
        if (v70)
        {
          int v71 = 1;
          uint64_t v72 = v161;
          LODWORD(a6) = v162;
          goto LABEL_32;
        }
        goto LABEL_59;
      }
      goto LABEL_4;
    }
    if (!v37) {
      break;
    }
    LODWORD(v38) = 0;
    a4 = v168;
    unsigned int v39 = v174 + 1;
  }
  a4 = v168;
  unsigned int v70 = v168[1];
  LODWORD(a6) = v162;
  Swift::Int v21 = v143;
  if (v70)
  {
    int v71 = 0;
LABEL_31:
    uint64_t v72 = v161;
    Swift::Int v73 = v172;
LABEL_32:
    unsigned int v174 = 0;
    v156 = (void (**)(char *, uint64_t, uint64_t))(v21 + 2);
    v153 = (void (**)(uint64_t, uint64_t))(v21 + 1);
    uint64_t v149 = v170 - 8;
    v147 = (void (**)(uint64_t, uint64_t))(v144 + 1);
    v144 = (void (**)(char *, char *, uint64_t))(v142 + 2);
    v143 = (unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48);
    v139 = (void (**)(char *, char *, uint64_t))(v136 + 32);
    v138 = (void (**)(char *, char *, uint64_t))(v136 + 16);
    v137 = (void (**)(char *, uint64_t))(v136 + 8);
    ++v142;
    while (2)
    {
      uint64_t v74 = __clz(__rbit32(v70));
      v70 &= v70 - 1;
      int v75 = *v73;
      int v76 = 1 << v74;
      if (((1 << v74) & *v73) != 0)
      {
        LODWORD(v166) = v70;
        if ((v71 & 1) == 0)
        {
          _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(a6, a4, v173, v74, v72);
          Swift::Int v73 = v172;
          int v75 = *v172;
        }
        unsigned int v163 = v74;
        v36.i32[0] = v75 & (v76 - 1);
        uint8x8_t v77 = (uint8x8_t)vcnt_s8(v36);
        v77.i16[0] = vaddlv_u8(v77);
        uint64_t v78 = v175;
        uint64_t v79 = v169;
        uint64_t v80 = _HashNode.UnsafeHandle.itemPtr(at:)(v77.u32[0], (uint64_t)v73, v167);
        char v81 = *v156;
        uint64_t v82 = (uint64_t)v164;
        (*v156)(v164, v80, v78);
        uint64_t v83 = (void (**)(uint64_t, uint64_t))sub_24A5B85E4();
        char v84 = *v153;
        v159 = v83;
        v160 = v84;
        v84(v82, v78);
        Swift::Int v85 = a4;
        uint64_t v86 = v170;
        Swift::Int v87 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v174, v85, v173, v78, v170, v79);
        uint64_t v88 = *v87;
        v158 = (void (**)(char *, uint64_t, uint64_t))v87[1];
        v155 = v81;
        v81((char *)v82, v80, v78);
        swift_retain();
        uint64_t v89 = _HashNode.lookup(_:_:_:)(v157, v82, (uint64_t)v159, v88, (uint64_t)v158, v78, v86, v79);
        uint64_t v91 = v90;
        swift_release();
        v160(v82, v78);
        if (v89)
        {
          uint64_t v92 = v175;
          uint64_t v93 = nullsub_1(v89 + 16, v89 + 32, v175, v86, v79);
          uint64_t v94 = v148;
          uint64_t v95 = v154;
          sub_24A514288(v93, v96, v91, v92, v86, v79, v148);
          uint64_t v154 = v95;
          uint64_t v97 = TupleTypeMetadata2;
          uint64_t v98 = *(int *)(TupleTypeMetadata2 + 48);
          uint64_t v99 = v94 + v98;
          Swift::Int v100 = v151;
          uint64_t v101 = (uint64_t)&v151[v98];
          v155(v151, v94, v92);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(v101, v99, v86);
          LODWORD(a6) = v162;
          uint64_t v102 = (uint64_t)v100;
          uint64_t v72 = v161;
          _HashNode.Builder.addNewItem(_:_:at:)(v162, v102, v101, v163, v161);
          (*v147)(v94, v97);
          unsigned int v70 = v166;
          if (!v166) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v72 = v161;
          LODWORD(a6) = v162;
          unsigned int v70 = v166;
          if (!v166) {
            goto LABEL_59;
          }
        }
        int v71 = 1;
        a4 = v168;
        Swift::Int v73 = v172;
        goto LABEL_36;
      }
      int v103 = v73[1];
      if ((v103 & v76) != 0)
      {
        LODWORD(v160) = v71;
        unsigned int v163 = v74;
        LODWORD(v166) = v70;
        v36.i32[0] = v103 & (v76 - 1);
        uint8x8_t v104 = (uint8x8_t)vcnt_s8(v36);
        v104.i16[0] = vaddlv_u8(v104);
        uint64_t v105 = v104.u32[0];
        uint64_t v106 = v73;
        Swift::Int v107 = a4;
        uint64_t v108 = v175;
        uint64_t v109 = v169;
        uint64_t v110 = v170;
        uint64_t v111 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v174, v107, v173, v175, v170, v169);
        uint64_t v112 = *v111;
        uint64_t v113 = v111[1];
        v114 = v106;
        uint64_t v115 = v171;
        v116 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v105, v114, v167, v108, v171, v109);
        uint64_t v118 = *v116;
        uint64_t v117 = v116[1];
        swift_retain();
        swift_retain();
        uint64_t v134 = v109;
        v119 = v150;
        _HashNode._intersection<A>(_:_:)(v157, v118, v117, v112, v113, v108, v110, v115, v134);
        swift_release();
        swift_release();
        v120 = v145;
        v121 = v119;
        uint64_t v122 = v146;
        (*v144)(v145, v121, v146);
        if ((*v143)(v120, 1, v72) == 1)
        {
          v123 = *v142;
          (*v142)(v120, v122);
          a6 = v162;
          int v124 = v163;
          if (v160)
          {
            uint64_t v126 = *v111;
            uint64_t v125 = v111[1];
            swift_retain();
            _HashNode.Builder.addNewChildNode(_:_:at:)(a6, v126, v125, v124, v72);
            v123(v150, v122);
            a4 = v168;
            unsigned int v70 = v166;
            if (!v166) {
              goto LABEL_59;
            }
            break;
          }
          v123(v150, v122);
          a4 = v168;
          unsigned int v70 = v166;
          if (!v166) {
            goto LABEL_60;
          }
          int v71 = 0;
LABEL_35:
          Swift::Int v73 = v172;
LABEL_36:
          ++v174;
          continue;
        }
        v127 = v140;
        (*v139)(v140, v120, v72);
        a4 = v168;
        a6 = v162;
        int v128 = v163;
        if ((v160 & 1) == 0) {
          _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(v162, v168, v173, v163, v72);
        }
        uint64_t v129 = (uint64_t)v141;
        (*v138)(v141, v127, v72);
        _HashNode.Builder.addNewChildBranch(_:_:at:)(a6, v129, v128, v72);
        (*v137)(v127, v72);
        (*v142)(v150, v146);
        unsigned int v70 = v166;
        if (!v166) {
          goto LABEL_59;
        }
      }
      else
      {
        if (v71)
        {
          if (!v70) {
            goto LABEL_59;
          }
          int v71 = 1;
          goto LABEL_36;
        }
        _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(a6, a4, v173, v74, v72);
        if (!v70) {
          goto LABEL_59;
        }
      }
      break;
    }
    int v71 = 1;
    goto LABEL_35;
  }
LABEL_60:
  a7 = v135;
LABEL_61:
  uint64_t v130 = v136;
  uint64_t v131 = v161;
  (*(void (**)(unsigned char *, uint64_t))(v136 + 8))(v165, v161);
  uint64_t v132 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 56))(a7, v132, 1, v131);
}

uint64_t sub_24A514288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, a2, a4, a5, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 16))(a7, v8, TupleTypeMetadata2);
}

uint64_t sub_24A514338@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v49 = a3;
  uint64_t v60 = a2;
  uint64_t v56 = a1;
  uint64_t v45 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v59 = (uint64_t)&v44 - v13;
  uint64_t v14 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v44 - v15;
  uint64_t v50 = type metadata accessor for _HashNode.Builder();
  uint64_t v17 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v19 = (char *)&v44 - v18;
  char v20 = v49;
  swift_storeEnumTagMultiPayload();
  _HashNode.Builder.init(_:_:)(v20, (uint64_t)v16, v19);
  if (*a5 == *v60)
  {
    uint64_t v48 = v19;
    uint64_t v44 = v17;
    uint64_t v58 = a8;
    uint64_t v54 = a9;
    uint64_t v21 = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v52 = v22;
    uint64_t v53 = v21;
    unsigned int v23 = *a4;
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)*a4);
    v24.i16[0] = vaddlv_u8(v24);
    if (*a4 != a4[1]) {
      unsigned int v23 = v24.i32[0];
    }
    unsigned int v55 = v23;
    if (v23)
    {
      uint64_t v51 = a10;
      LODWORD(v56) = 0;
      uint64_t v25 = 0;
      uint64_t v26 = v58;
      uint64_t v46 = v58 - 8;
      uint64_t v47 = a6 - 8;
      do
      {
        while (1)
        {
          uint64_t v27 = v25;
          while (1)
          {
            uint64_t v25 = (v27 + 1);
            uint64_t v28 = v51;
            uint64_t v29 = _HashNode.UnsafeHandle.itemPtr(at:)(v27, (uint64_t)a4, (uint64_t)a5);
            uint64_t v60 = &v44;
            uint64_t v61 = v53;
            uint64_t v62 = v52;
            uint64_t v30 = MEMORY[0x270FA5388](v29);
            *(&v44 - 6) = a6;
            *(&v44 - 5) = v26;
            *(&v44 - 4) = v54;
            *(&v44 - 3) = v28;
            *(&v44 - 2) = v30;
            swift_getTupleTypeMetadata2();
            sub_24A5BBDB0();
            swift_getWitnessTable();
            uint64_t v31 = v63;
            char v32 = sub_24A5BB900();
            uint64_t v63 = v31;
            if ((v32 & 1) == 0) {
              break;
            }
            if (v56)
            {
              uint64_t v33 = *(int *)(TupleTypeMetadata2 + 48);
              uint64_t v34 = v59 + v33;
              uint64_t v35 = v29 + v33;
              (*(void (**)(void))(*(void *)(a6 - 8) + 16))();
              uint64_t v26 = v58;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v34, v35, v58);
              _HashNode.Builder.addNewCollision(_:_:_:)((char *)v49, v59, v34, *a5, v50);
              uint64_t v27 = v25;
              if (v25 >= v55) {
                goto LABEL_16;
              }
            }
            else
            {
              uint64_t v27 = (v27 + 1);
              uint64_t v26 = v58;
              if (v25 >= v55) {
                goto LABEL_18;
              }
            }
          }
          if ((v56 & 1) == 0) {
            break;
          }
          LODWORD(v56) = 1;
          uint64_t v26 = v58;
          if (v25 >= v55) {
            goto LABEL_16;
          }
        }
        _HashNode.Builder.copyCollisions(from:upTo:)((uint64_t)a4, a5, v27, v50);
        LODWORD(v56) = 1;
        uint64_t v26 = v58;
      }
      while (v25 < v55);
LABEL_16:
      uint64_t v37 = v44;
      uint64_t v36 = v45;
      uint64_t v38 = v50;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v44 + 32))(v45, v48, v50);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v36, 0, 1, v38);
    }
    else
    {
LABEL_18:
      uint64_t v42 = v44;
      uint64_t v43 = v50;
      (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v48, v50);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v45, 1, 1, v43);
    }
  }
  else
  {
    uint64_t v40 = v45;
    uint64_t v41 = v50;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v17 + 32))(v45, v19, v50);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v40, 0, 1, v41);
  }
}

uint64_t sub_24A5148B0@<X0>(char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned char *a8@<X8>, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = nullsub_1(a3 + 16, a3 + 32, a7, a10, a11);
  return sub_24A51495C(v17, v18, a1, a2, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_24A51495C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v64 = a6;
  uint64_t v65 = a7;
  unsigned int v70 = a3;
  uint64_t v74 = (void (*)(char *, char *, uint64_t))a1;
  uint64_t v75 = a2;
  uint8x8_t v77 = a9;
  uint64_t v76 = a11;
  uint64_t v15 = type metadata accessor for _HashNode.Builder();
  uint64_t v16 = sub_24A5BBD20();
  uint64_t v66 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v64 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v67 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v69 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v68 = (char *)&v64 - v21;
  uint64_t v22 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v64 - v25;
  Swift::Int v73 = a4;
  unint64_t v27 = *a4;
  uint64_t v78 = a5;
  unint64_t v28 = v27 >> a5;
  int v29 = *(_DWORD *)v74;
  int v30 = 1 << (v27 >> a5);
  if ((v30 & *(_DWORD *)v74) != 0)
  {
    uint64_t v66 = v23;
    uint64_t v71 = v15;
    v24.i32[0] = (v30 - 1) & v29;
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v24);
    v31.i16[0] = vaddlv_u8(v31);
    uint64_t v32 = v76;
    uint64_t v33 = _HashNode.UnsafeHandle.itemPtr(at:)(v31.u32[0], (uint64_t)v74, v75);
    uint64_t v34 = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v79 = v34;
    uint64_t v80 = v35;
    MEMORY[0x270FA5388](v34);
    *(&v64 - 6) = a8;
    *(&v64 - 5) = (uint64_t)a10;
    *(&v64 - 4) = v32;
    *(&v64 - 3) = a12;
    uint64_t v63 = v33;
    sub_24A5BBDB0();
    swift_getWitnessTable();
    uint64_t v36 = v83;
    sub_24A5BBB60();
    uint64_t v83 = v36;
    if (v82 != 1)
    {
      uint64_t v75 = v78 & 0x3F;
      uint64_t v76 = a12;
      uint64_t v52 = TupleTypeMetadata2;
      uint64_t v53 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v54 = v68;
      unsigned int v55 = &v68[v53];
      unsigned int v70 = &v68[v53];
      uint64_t v56 = v34 + *(void *)(v67 + 72) * v81 + v53;
      uint64_t v57 = *(void *)(a8 - 8);
      (*(void (**)(char *))(v57 + 16))(v68);
      uint64_t v58 = *(a10 - 1);
      (*(void (**)(char *, uint64_t, void *))(v58 + 16))(v55, v56, a10);
      LODWORD(v75) = (*v73 >> v75) & 0x1F;
      uint64_t v59 = v69;
      uint64_t v60 = &v69[*(int *)(v52 + 48)];
      uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v74(v69, v54, a8);
      uint64_t v61 = *(void (**)(char *, char *, void *))(v58 + 32);
      v61(v60, v70, a10);
      Swift::Int v73 = (void *)*(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v62 = &v26[*(int *)(v52 + 48)];
      v74(v26, v59, a8);
      v61(v62, v60, a10);
      *((unsigned char *)v73 + (void)v26) = v75;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = v77;
    _HashNode.Builder.init(_:_:)(v78, (uint64_t)v26, v77);
    return (*(uint64_t (**)(unsigned char *, void, uint64_t))(*(void *)(v71 - 8) + 56))(v37, 0, 1);
  }
  else
  {
    uint64_t v38 = v76;
    unsigned int v39 = v77;
    TupleTypeMetadata2 = (uint64_t)v18;
    Swift::Int v73 = a10;
    int v40 = *((_DWORD *)v74 + 1);
    if ((v40 & v30) != 0)
    {
      LODWORD(v70) = v28 & 0x1F;
      v24.i32[0] = v40 & (v30 - 1);
      uint8x8_t v41 = (uint8x8_t)vcnt_s8(v24);
      v41.i16[0] = vaddlv_u8(v41);
      uint64_t v71 = v15;
      int v42 = v78;
      uint64_t v43 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v41.u32[0], v74, v75, a8, v76, a12);
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      swift_retain();
      uint64_t v47 = TupleTypeMetadata2;
      uint64_t v46 = v73;
      _HashNode._intersection<A>(_:_:)((v42 + 5), v45, v44, v64, v65, a8, v73, v38, a12);
      uint64_t v48 = swift_release();
      MEMORY[0x270FA5388](v48);
      *(&v64 - 6) = a8;
      *(&v64 - 5) = (uint64_t)v46;
      *(&v64 - 4) = v38;
      *(&v64 - 3) = a12;
      LOBYTE(v63) = v42;
      BYTE1(v63) = (_BYTE)v70;
      uint64_t v49 = v83;
      sub_24A4C10F8((void (*)(char *, char *))sub_24A5159FC, (uint64_t)(&v64 - 8), MEMORY[0x263F8E628], v71, v50, (uint64_t)v77);
      uint64_t v83 = v49;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v47, v16);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
      _HashNode.Builder.init(_:_:)(v78, (uint64_t)v26, v39);
      return (*(uint64_t (**)(unsigned char *, void, uint64_t))(*(void *)(v15 - 8) + 56))(v39, 0, 1);
    }
  }
}

uint64_t sub_24A51505C@<X0>(void (*a1)(uint64_t, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned char *a8@<X8>, uint64_t a9)
{
  uint64_t v16 = (char *)nullsub_1(a3 + 16, a3 + 32, a5, a7, a9);
  return sub_24A51510C(v16, v17, a1, a2, a3, a4, a5, a8, a6, a7, a9);
}

uint64_t sub_24A51510C@<X0>(char *a1@<X0>, void *a2@<X1>, void (*a3)(uint64_t, char *, uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X6>, uint64_t a7@<X7>, unsigned char *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v85 = a5;
  uint64_t v86 = a6;
  uint64_t v93 = a8;
  uint64_t v94 = a4;
  uint64_t v88 = a1;
  uint64_t v95 = a10;
  uint64_t v96 = a3;
  uint64_t v13 = type metadata accessor for _HashNode.Builder();
  uint64_t v97 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v82 - v14;
  uint64_t v92 = v16;
  uint64_t v17 = sub_24A5BBD20();
  uint64_t v84 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v82 - v21;
  uint64_t v98 = a11;
  uint64_t v90 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v90);
  uint64_t v91 = (uint64_t *)((char *)&v82 - v23);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v25 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v32 = (char *)&v82 - v31;
  uint64_t v33 = (*a2 >> v28) & 0x1FLL;
  int v34 = *v27;
  int v35 = 1 << (*a2 >> v28);
  if ((v35 & *v27) != 0)
  {
    uint64_t v85 = v26;
    uint64_t v86 = v29;
    int v87 = v33;
    uint64_t v89 = v28;
    v30.i32[0] = (v35 - 1) & v34;
    uint8x8_t v36 = (uint8x8_t)vcnt_s8(v30);
    v36.i16[0] = vaddlv_u8(v36);
    uint64_t v37 = v98;
    uint64_t v38 = _HashNode.UnsafeHandle.itemPtr(at:)(v36.u32[0], (uint64_t)v27, v94);
    uint64_t v39 = v95;
    uint64_t v99 = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v100 = v40;
    MEMORY[0x270FA5388](v99);
    *(&v82 - 6) = a7;
    *(&v82 - 5) = a9;
    *(&v82 - 4) = v39;
    *(&v82 - 3) = v37;
    uint64_t v81 = v38;
    swift_getTupleTypeMetadata2();
    sub_24A5BBDB0();
    swift_getWitnessTable();
    uint64_t v41 = v101;
    char v42 = sub_24A5BB900();
    uint64_t v101 = v41;
    if (v42)
    {
      uint64_t v43 = v85;
      uint64_t v44 = *(int *)(v85 + 48);
      uint64_t v45 = &v32[v44];
      uint64_t v46 = v38 + v44;
      uint64_t v47 = *(void *)(a7 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v32, v38, a7);
      uint64_t v48 = *(void *)(a9 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v45, v46, a9);
      uint64_t v49 = v86;
      uint64_t v50 = &v86[*(int *)(v43 + 48)];
      uint64_t v96 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 32);
      v96((uint64_t)v86, v32, a7);
      uint64_t v51 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
      v51((uint64_t)v50, v45, a9);
      uint64_t v95 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v52 = v91;
      uint64_t v53 = (char *)v91 + *(int *)(v43 + 48);
      v96((uint64_t)v91, v49, a7);
      v51((uint64_t)v53, v50, a9);
      *((unsigned char *)v52 + v95) = v87;
    }
    else
    {
      uint64_t v52 = v91;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v69 = v93;
    uint64_t v74 = v93;
    char v75 = v89;
    uint64_t v76 = (uint64_t)v52;
    goto LABEL_9;
  }
  uint64_t v88 = v20;
  uint64_t v54 = v95;
  uint64_t v83 = v15;
  uint64_t v55 = v98;
  int v56 = v27[1];
  if ((v56 & v35) == 0)
  {
    uint64_t v78 = v91;
    char v79 = v28;
    swift_storeEnumTagMultiPayload();
    uint64_t v69 = v93;
    uint64_t v74 = v93;
    char v75 = v79;
    uint64_t v76 = (uint64_t)v78;
LABEL_9:
    _HashNode.Builder.init(_:_:)(v75, v76, v74);
    uint64_t v67 = v92;
    uint64_t v66 = v97;
    return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v66 + 56))(v69, 0, 1, v67);
  }
  uint64_t v57 = v22;
  int v87 = v33;
  v30.i32[0] = v56 & (v35 - 1);
  uint8x8_t v58 = (uint8x8_t)vcnt_s8(v30);
  v58.i16[0] = vaddlv_u8(v58);
  uint64_t v59 = v28;
  uint64_t v82 = a9;
  uint64_t v60 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v58.u32[0], v27, v94, a7, a9, v98);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  uint64_t v89 = v59;
  swift_retain();
  _HashNode._intersection<A>(_:_:)((v59 + 5), v85, v86, v62, v61, a7, a9, v54, v55);
  swift_release();
  uint64_t v63 = v84;
  uint64_t v64 = v88;
  uint64_t v65 = v57;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v88, v57, v17);
  uint64_t v66 = v97;
  uint64_t v67 = v92;
  int v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48))(v64, 1, v92);
  uint64_t v69 = v93;
  if (v68 == 1)
  {
    unsigned int v70 = *(void (**)(char *, uint64_t))(v63 + 8);
    v70(v64, v17);
    uint64_t v72 = *v60;
    uint64_t v71 = v60[1];
    swift_retain();
    v70(v65, v17);
    uint64_t v66 = v97;
    uint64_t v73 = (uint64_t)v91;
    void *v91 = v72;
    *(void *)(v73 + 8) = v71;
    swift_storeEnumTagMultiPayload();
    _HashNode.Builder.init(_:_:)(v89, v73, v69);
  }
  else
  {
    uint64_t v80 = (uint64_t)v83;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v83, v64, v67);
    static _HashNode.Builder.childBranch(_:_:at:)(v89, v80, v87, a7, v82, v98, v69);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v80, v67);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v17);
  }
  return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v66 + 56))(v69, 0, 1, v67);
}

uint64_t sub_24A5158B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  CollectionsInternal::_HeapNode v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  char v7 = sub_24A5BB530();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v7 & 1;
}

uint64_t sub_24A5159B8(uint64_t a1)
{
  return sub_24A5159D4(a1) & 1;
}

uint64_t sub_24A5159D4(uint64_t a1)
{
  return sub_24A5158B8(a1, *(void *)(v1 + 48), *(void *)(v1 + 16)) & 1;
}

uint64_t sub_24A5159FC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return static _HashNode.Builder.childBranch(_:_:at:)(*(unsigned __int8 *)(v2 + 48), a1, *(unsigned __int8 *)(v2 + 49), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), a2);
}

uint64_t Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_24A5BB9F0() == a3) {
    sub_24A5BC560();
  }
  return sub_24A5BB880();
}

uint64_t static Array._isWCSIABroken()()
{
  return 0;
}

uint64_t sub_24A515B08()
{
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  uint64_t v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v4 = 7;
  if (((v1 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = sub_24A497020(v4 | (v3 << 16), *v0, v0[1]);
  if (v5 < 0x4000) {
    goto LABEL_25;
  }
  unint64_t v6 = v5;
  if ((v1 & 0x1000000000000000) == 0)
  {
    if ((v1 & 0x2000000000000000) != 0)
    {
      v18[0] = v2;
      v18[1] = v1 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v12 = (char *)v18 + (v5 >> 16);
      if ((*(v12 - 1) & 0xC0) == 0x80)
      {
        uint64_t v9 = 0;
        uint64_t v13 = v12 - 2;
        do
          int v14 = v13[v9--] & 0xC0;
        while (v14 == 128);
        goto LABEL_18;
      }
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0) {
        uint64_t v7 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v7 = sub_24A5BC120();
      }
      uint64_t v8 = (v6 >> 16) + v7;
      if ((*(unsigned char *)(v8 - 1) & 0xC0) == 0x80)
      {
        uint64_t v9 = 0;
        uint64_t v10 = v8 - 2;
        do
          int v11 = *(unsigned char *)(v10 + v9--) & 0xC0;
        while (v11 == 128);
LABEL_18:
        uint64_t v15 = 1 - v9;
LABEL_20:
        unint64_t v16 = (v6 - (v15 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_21;
      }
    }
    uint64_t v15 = 1;
    goto LABEL_20;
  }
LABEL_26:
  unint64_t v16 = sub_24A5BB5E0();
LABEL_21:
  return sub_24A5168B0(v16);
}

uint64_t sub_24A515C68(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v84 = a3;
  uint64_t v81 = sub_24A5BC780();
  uint64_t v9 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v89 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = HIBYTE(a2) & 0xF;
  uint64_t v70 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
      return 11;
    }
    else {
      return 7;
    }
  }
  unint64_t v12 = v5[1];
  if ((v12 & 0x1000000000000000) != 0)
  {
LABEL_121:
    uint64_t v13 = sub_24A5BB710();
  }
  else if ((v12 & 0x2000000000000000) != 0)
  {
    uint64_t v13 = HIBYTE(v12) & 0xF;
  }
  else
  {
    uint64_t v13 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v78 = v13;
  uint64_t v79 = 0;
  unint64_t v80 = 4 * v11;
  uint64_t v74 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v75 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v69 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v64 = (void (**)(char *, uint64_t))(v9 + 8);
  char v16 = 1;
  unint64_t v14 = 15;
  uint64_t v77 = (v13 << 16) | 4;
  int v68 = v5;
  unint64_t v67 = a1;
  unint64_t v66 = a4;
  unint64_t v65 = a2;
  while (1)
  {
    if (v80 <= v14 >> 14) {
      return v14;
    }
    sub_24A48E614(v14, a1, a2);
    unint64_t v85 = v14;
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v17 = sub_24A5BC060();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v91 = a1;
        uint64_t v92 = v75;
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((a1 & 0x1000000000000000) == 0) {
          sub_24A5BC120();
        }
        swift_bridgeObjectRetain();
      }
      unsigned int v17 = sub_24A5BC130();
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = sub_24A5BC790();
    uint64_t v9 = v19;
    if (v16) {
      break;
    }
LABEL_81:
    if (v17 > 0x7F)
    {
      int v60 = (v17 & 0x3F) << 8;
      if (v17 >= 0x800)
      {
        int v61 = (v60 | (v17 >> 6) & 0x3F) << 8;
        int v62 = (((v61 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
        unsigned int v41 = (v61 | (v17 >> 12)) + 8487393;
        if (HIWORD(v17)) {
          unsigned int v41 = v62;
        }
      }
      else
      {
        unsigned int v41 = (v60 | (v17 >> 6)) + 33217;
      }
    }
    else
    {
      unsigned int v41 = v17 + 1;
    }
    uint64_t v91 = (v41 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v41) >> 3))));
    if (v18 == MEMORY[0x24C5C6960](&v91) && v9 == v42) {
      char v44 = 1;
    }
    else {
      char v44 = sub_24A5BC510();
    }
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    unint64_t v45 = sub_24A5BB830();
    unint64_t v47 = v46;
    unint64_t v49 = v48;
    unint64_t v51 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_24A58B060(v45, v47, v49, v51);
    swift_bridgeObjectRelease_n();
    unint64_t v52 = sub_24A48E614(v85, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t v14 = sub_24A5BB5D0();
      unint64_t v54 = v78;
    }
    else
    {
      unint64_t v53 = v52 >> 16;
      unint64_t v54 = v78;
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v91 = a1;
        uint64_t v92 = v75;
        int v56 = *((unsigned __int8 *)&v91 + v53);
      }
      else
      {
        uint64_t v55 = v74;
        if ((a1 & 0x1000000000000000) == 0) {
          uint64_t v55 = sub_24A5BC120();
        }
        int v56 = *(unsigned __int8 *)(v55 + v53);
      }
      int v57 = (char)v56;
      unsigned int v58 = __clz(v56 ^ 0xFF) - 24;
      if (v57 >= 0) {
        LOBYTE(v58) = 1;
      }
      unint64_t v14 = ((v53 + v58) << 16) | 5;
    }
    uint64_t v9 = *v5;
    unint64_t v11 = v5[1];
    if ((v11 & 0x1000000000000000) != 0)
    {
      MEMORY[0x24C5C6A60](15, v54, *v5, v5[1]);
    }
    else
    {
      if ((v54 & 0x8000000000000000) != 0)
      {
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      if ((v11 & 0x2000000000000000) != 0) {
        unint64_t v59 = HIBYTE(v11) & 0xF;
      }
      else {
        unint64_t v59 = v9 & 0xFFFFFFFFFFFFLL;
      }
      if (v59 < v54) {
        goto LABEL_119;
      }
    }
    char v16 = v44 ^ 1;
    if (sub_24A5BB770() >= (uint64_t)a4) {
      return v14;
    }
  }
  unsigned int v76 = v17;
  (*v69)(v89, v84, v81);
  swift_bridgeObjectRetain();
  a4 = sub_24A5BB830();
  unint64_t v21 = v20;
  unint64_t v23 = v22;
  a1 = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = v79;
  uint64_t v26 = sub_24A498004(a4, v21, v23, a1);
  uint64_t v79 = v25;
  if ((v27 & 0x100) == 0)
  {
    if ((v27 & 1) == 0)
    {
      a2 = v26;
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_24A5BBE70();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v11 = sub_24A5BBE70();
      swift_bridgeObjectRelease_n();
      a4 = v28;
      if (v11 >> 14 < v28 >> 14) {
        goto LABEL_120;
      }
LABEL_78:
      unsigned int v17 = v76;
      if (a4 < 0x4000) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
LABEL_76:
    swift_bridgeObjectRelease();
    unsigned int v17 = v76;
LABEL_79:
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_24A5BC790();
    uint64_t v9 = v40;
LABEL_80:
    (*v64)(v89, v81);
    unint64_t v5 = v68;
    a1 = v67;
    a4 = v66;
    a2 = v65;
    goto LABEL_81;
  }
  int v87 = (void *)(a4 >> 14);
  unint64_t v90 = v21 >> 14;
  if (a4 >> 14 >= v21 >> 14) {
    goto LABEL_76;
  }
  uint64_t v29 = (v23 >> 59) & 1;
  if ((a1 & 0x1000000000000000) == 0) {
    LOBYTE(v29) = 1;
  }
  uint64_t v30 = 4 << v29;
  uint64_t v31 = HIBYTE(a1) & 0xF;
  uint64_t v73 = v31;
  uint64_t v72 = v23 & 0xFFFFFFFFFFFFLL;
  if ((a1 & 0x2000000000000000) == 0) {
    uint64_t v31 = v23 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v86 = v31;
  uint64_t v82 = (a1 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v83 = a1 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v5 = v87;
  uint64_t v88 = v30;
  while (1)
  {
    unint64_t v32 = a4 & 0xC;
    BOOL v33 = (a4 & 1) == 0 || v32 == v30;
    a2 = v33;
    if (v33)
    {
      unint64_t v11 = a4;
      if (v32 == v30) {
        unint64_t v11 = sub_24A4DFD84(a4, v23, a1);
      }
      if (v86 <= v11 >> 16)
      {
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      if ((v11 & 1) == 0) {
        unint64_t v11 = v11 & 0xC | sub_24A4971A8(v11, v23, a1) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else
    {
      unint64_t v11 = a4;
      if (v86 <= a4 >> 16) {
        goto LABEL_115;
      }
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v36 = sub_24A5BB5D0();
      if (!a2) {
        goto LABEL_53;
      }
    }
    else
    {
      v11 >>= 16;
      if ((a1 & 0x2000000000000000) != 0)
      {
        uint64_t v91 = v23;
        uint64_t v92 = v83;
        int v35 = *((unsigned __int8 *)&v91 + v11);
      }
      else
      {
        uint64_t v34 = v82;
        if ((v23 & 0x1000000000000000) == 0) {
          uint64_t v34 = sub_24A5BC120();
        }
        int v35 = *(unsigned __int8 *)(v34 + v11);
      }
      int v37 = (char)v35;
      unsigned int v38 = __clz(v35 ^ 0xFF) - 24;
      if (v37 >= 0) {
        LOBYTE(v38) = 1;
      }
      unint64_t v36 = ((v11 + v38) << 16) | 5;
      if (!a2)
      {
LABEL_53:
        if (a4 >> 14 < (unint64_t)v87 || a4 >> 14 >= v90) {
          goto LABEL_116;
        }
LABEL_65:
        if ((a1 & 0x1000000000000000) != 0) {
          goto LABEL_73;
        }
        goto LABEL_66;
      }
    }
    unint64_t v39 = a4;
    if (v32 == v88) {
      unint64_t v39 = sub_24A4DFD84(a4, v23, a1);
    }
    if (v39 >> 14 < (unint64_t)v87 || v39 >> 14 >= v90) {
      goto LABEL_117;
    }
    if (v39) {
      goto LABEL_65;
    }
    sub_24A4971A8(v39, v23, a1);
    if ((a1 & 0x1000000000000000) != 0)
    {
LABEL_73:
      sub_24A5BC060();
      goto LABEL_74;
    }
LABEL_66:
    if ((a1 & 0x2000000000000000) != 0)
    {
      uint64_t v91 = v23;
      uint64_t v92 = v83;
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v23 & 0x1000000000000000) == 0) {
        sub_24A5BC120();
      }
      swift_bridgeObjectRetain();
    }
    sub_24A5BC130();
    swift_bridgeObjectRelease();
LABEL_74:
    if (sub_24A5BC760()) {
      break;
    }
    unint64_t v5 = (void *)(v36 >> 14);
    a4 = v36;
    uint64_t v30 = v88;
    if (v36 >> 14 >= v90) {
      goto LABEL_76;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((unint64_t)v5 <= v36 >> 14) {
    goto LABEL_78;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5165E0(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = *v2;
  unint64_t v5 = v3[1];
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (v6)
  {
    do
    {
      swift_bridgeObjectRetain();
      unint64_t v7 = sub_24A586D60(a1, a2);
      swift_bridgeObjectRelease();
      if ((v7 & 0x100000000) != 0) {
        break;
      }
      sub_24A5BB610();
      unint64_t v8 = v5;
      uint64_t v9 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v9 = v4;
      }
      if (((v5 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0) {
        uint64_t v10 = 11;
      }
      else {
        uint64_t v10 = 7;
      }
      unint64_t v11 = v10 | (v9 << 16);
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_24A5BB680();
      swift_bridgeObjectRelease();
      if (sub_24A491A60(v12, v11, v4, v8) == 1)
      {
        swift_bridgeObjectRetain();
        sub_24A516B40(1, a1, a2);
        swift_bridgeObjectRelease();
        sub_24A516BF0();
        sub_24A5BB600();
        swift_bridgeObjectRelease();
        *uint64_t v3 = v4;
        v3[1] = v8;
        return swift_bridgeObjectRelease();
      }
      sub_24A515B08();
      sub_24A515B08();
      *uint64_t v3 = v4;
      v3[1] = v8;
      sub_24A5BC790();
      sub_24A5167EC();
      sub_24A5BB700();
      swift_bridgeObjectRelease();
      unint64_t v4 = *v3;
      unint64_t v5 = v3[1];
      uint64_t v13 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v13 = *v3 & 0xFFFFFFFFFFFFLL;
      }
    }
    while (v13);
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_24A5167EC()
{
  unint64_t result = qword_26979B968;
  if (!qword_26979B968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B968);
  }
  return result;
}

unint64_t sub_24A516840(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_24A4DFD84(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A5168B0(unint64_t a1)
{
  unint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v5 = *v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v1 = a1;
  unint64_t v6 = sub_24A48E614(a1, *v2, v2[1]);
  if ((v3 & 0x1000000000000000) != 0)
  {
LABEL_34:
    uint64_t v9 = sub_24A5BC060();
    goto LABEL_22;
  }
  unint64_t v7 = v6 >> 16;
  if ((v3 & 0x2000000000000000) != 0)
  {
    unint64_t v27 = v4;
    uint64_t v28 = v3 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = *((unsigned __int8 *)&v27 + v7);
    if (*((char *)&v27 + v7) < 0)
    {
      switch(__clz(v9 ^ 0xFF))
      {
        case 0x1Au:
          uint64_t v10 = (char *)&v27 + v7;
LABEL_14:
          uint64_t v9 = v10[1] & 0x3F | ((v9 & 0x1F) << 6);
          break;
        case 0x1Bu:
          unint64_t v11 = (char *)&v27 + v7;
LABEL_18:
          char v13 = v11[1];
          char v14 = v11[2];
          int v15 = ((v9 & 0xF) << 12) | ((v13 & 0x3F) << 6);
          goto LABEL_21;
        case 0x1Cu:
          unint64_t v12 = (char *)&v27 + v7;
LABEL_20:
          char v16 = v12[1];
          char v17 = v12[2];
          char v14 = v12[3];
          int v15 = ((v9 & 0xF) << 18) | ((v16 & 0x3F) << 12) | ((v17 & 0x3F) << 6);
LABEL_21:
          uint64_t v9 = v15 & 0xFFFFFFC0 | v14 & 0x3F;
          break;
        default:
          goto LABEL_22;
      }
    }
    goto LABEL_22;
  }
  if ((v4 & 0x1000000000000000) == 0) {
    goto LABEL_37;
  }
  for (uint64_t i = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = sub_24A5BC120())
  {
    uint64_t v9 = *(unsigned __int8 *)(i + v7);
    if (*(char *)(i + v7) < 0)
    {
      switch(__clz(v9 ^ 0xFF))
      {
        case 0x1Au:
          uint64_t v10 = (char *)(v7 + i);
          goto LABEL_14;
        case 0x1Bu:
          unint64_t v11 = (char *)(v7 + i);
          goto LABEL_18;
        case 0x1Cu:
          unint64_t v12 = (char *)(v7 + i);
          goto LABEL_20;
        default:
          break;
      }
    }
LABEL_22:
    unint64_t v7 = *v2;
    unint64_t v18 = v2[1];
    unint64_t v19 = sub_24A48E614(v1, *v2, v18);
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v25 = sub_24A5BB5D0();
    }
    else
    {
      unint64_t v20 = v19 >> 16;
      if ((v18 & 0x2000000000000000) != 0)
      {
        unint64_t v27 = v7;
        uint64_t v28 = v18 & 0xFFFFFFFFFFFFFFLL;
        int v22 = *((unsigned __int8 *)&v27 + v20);
      }
      else
      {
        uint64_t v21 = (v7 & 0x1000000000000000) != 0 ? (v18 & 0xFFFFFFFFFFFFFFFLL) + 32 : sub_24A5BC120();
        int v22 = *(unsigned __int8 *)(v21 + v20);
      }
      int v23 = (char)v22;
      unsigned int v24 = __clz(v22 ^ 0xFF) - 24;
      if (v23 >= 0) {
        LOBYTE(v24) = 1;
      }
      unint64_t v25 = ((v20 + v24) << 16) | 5;
    }
    if (v25 >> 14 >= v1 >> 14) {
      break;
    }
    __break(1u);
LABEL_37:
    ;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979B978);
  sub_24A516C44();
  sub_24A5BB5F0();
  return v9;
}

uint64_t sub_24A516B40(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return MEMORY[0x270F9D6A0]();
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  unint64_t v6 = sub_24A4B2248(0xFuLL, a1, v5, a2, a3);
  if (v7) {
    unint64_t v6 = v5;
  }
  if (4 * v3 < v6 >> 14) {
    goto LABEL_14;
  }
  return MEMORY[0x270F9D6A0]();
}

unint64_t sub_24A516BF0()
{
  unint64_t result = qword_26979B970;
  if (!qword_26979B970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B970);
  }
  return result;
}

unint64_t sub_24A516C44()
{
  unint64_t result = qword_26979B980[0];
  if (!qword_26979B980[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B978);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979B980);
  }
  return result;
}

void BitArray.fill(in:with:)(unint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v8 = *v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v8 = sub_24A499D60((uint64_t)v8);
    *uint64_t v4 = v8;
  }
  if (a3) {
    sub_24A5AC4B8(a1, a2);
  }
  else {
    sub_24A5AC5E8(a1, a2);
  }
  *uint64_t v4 = v8;
}

Swift::Void __swiftcall BitArray.fill(with:)(Swift::Bool with)
{
  uint64_t v3 = (char **)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v1) = with;
    unint64_t v2 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v3 = v2;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  unint64_t v2 = sub_24A499D60((uint64_t)v2);
  *uint64_t v3 = v2;
LABEL_3:
  if (v1) {
    sub_24A5AC4B8(0, v4);
  }
  else {
    sub_24A5AC5E8(0, v4);
  }
  *uint64_t v3 = v2;
}

void BitArray.fill<A>(in:with:)(uint64_t a1, char a2)
{
  unint64_t v4 = *v2;
  sub_24A50D0D0();
  sub_24A5BB930();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v4 = sub_24A499D60((uint64_t)v4);
    *unint64_t v2 = v4;
  }
  if (a2) {
    sub_24A5AC4B8(v6, v7);
  }
  else {
    sub_24A5AC5E8(v6, v7);
  }
  *unint64_t v2 = v4;
}

void (*sub_24A516EC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = sub_24A5BC5E0();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  char v13 = malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = sub_24A5BBCC0();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  sub_24A545DF4(a2, a3, a4, (uint64_t)v13);
  return sub_24A517094;
}

void sub_24A517094(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  unint64_t v5 = *(void **)(*(void *)a1 + 72);
  unint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void *, void *, void))(v4 + 16))(v3, v7, v2[3]);
    swift_getWitnessTable();
    sub_24A5BC420();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    v9(v7, v8);
  }
  else
  {
    swift_getWitnessTable();
    sub_24A5BC420();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v8);
  }
  free(v5);
  free(v7);
  free(v3);
  free(v2);
}

uint64_t OrderedDictionary.Values._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Values._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Values._base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Values.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  uint64_t v3 = type metadata accessor for OrderedDictionary.Values();
  swift_getWitnessTable();
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)v5, 0, 0, 0, v3);
}

uint64_t type metadata accessor for OrderedDictionary.Values()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A517390(void *a1, uint64_t a2)
{
  return sub_24A517514(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.Values.description.getter);
}

uint64_t OrderedDictionary.Values.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  sub_24A5BC7E0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC7E0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t v3 = type metadata accessor for OrderedDictionary.Values();
  swift_getWitnessTable();
  uint64_t v4 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v6, 1, 0xD000000000000012, 0x800000024A5C4140, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A5174FC(void *a1, uint64_t a2)
{
  return sub_24A517514(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.Values.debugDescription.getter);
}

uint64_t sub_24A517514(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t OrderedDictionary.Values.elements.getter()
{
  return sub_24A5BBA00();
}

uint64_t OrderedDictionary.Values.withUnsafeBufferPointer<A>(_:)()
{
  return sub_24A5BC1A0();
}

void *OrderedDictionary.Values.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[3] = a4;
  uint64_t v6 = *(void *)(a3 + 24);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  v11[0] = v7
         + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));
  uint64_t v9 = v11[0];
  v11[1] = v8;
  a1(v11);
  return sub_24A4BEFBC(v11, v9, v8);
}

uint64_t sub_24A5176CC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_24A517720(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_24A517774@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = sub_24A5BC1A0();
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
  }
  return result;
}

uint64_t OrderedDictionary.Values.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  uint64_t result = sub_24A5BC1A0();
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
  }
  return result;
}

uint64_t OrderedDictionary.Values.startIndex.getter()
{
  return 0;
}

uint64_t OrderedDictionary.Values.endIndex.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

Swift::Int __swiftcall OrderedDictionary.Values.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedDictionary.Values.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Values.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

void (*sub_24A51794C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 24);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  sub_24A5BC260();
  return sub_24A50EF90;
}

uint64_t sub_24A517A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_24A545DF4(a1, a2, WitnessTable, a3);
}

uint64_t sub_24A517A70()
{
  swift_getWitnessTable();
  return sub_24A5BBAC0();
}

uint64_t OrderedDictionary.Values.subscript.getter()
{
  return sub_24A5BC260();
}

void (*OrderedDictionary.Values.subscript.modify(void *a1))(void *)
{
  BOOL v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_24A5BC210();
  v2[4] = sub_24A5BC250();
  return sub_24A517B80;
}

uint64_t OrderedDictionary.Values.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v8 = *(void *)(v3 + 16);
  sub_24A5303D4(a2, v8);
  uint64_t v15 = *(void *)(v6 - 8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 24))(v8+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * a2, a1, v6);
  nullsub_1(v7, v9, v10, v11, v12);
  char v13 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  return v13(a1, v6);
}

Swift::Void __swiftcall OrderedDictionary.Values.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
}

uint64_t OrderedDictionary.Values.partition(by:)()
{
  sub_24A5BC210();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t result = sub_24A5BB4E0();
  if (!v0) {
    return v2;
  }
  return result;
}

void *OrderedDictionary.Values.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v15 = a3;
  uint64_t v8 = *(void *)(a2 + 24);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v9 + 16);
  v14[0] = v9
         + ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80));
  uint64_t v11 = v14[0];
  v14[1] = v10;
  a1(v14);
  if (v5) {
    return sub_24A4BEFBC(v14, v11, v10);
  }
  uint64_t v13 = v15;
  sub_24A4BEFBC(v14, v11, v10);
  return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a4, 0, 1, v13);
}

uint64_t sub_24A517F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  sub_24A5BC210();
  uint64_t v5 = (void (*)(uint64_t *, void))sub_24A5BC250();
  uint64_t v6 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v7, a1, v4);
  v5(&v9, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
}

void (*sub_24A517FE4(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_24A5BC210();
  v2[4] = sub_24A5BC250();
  return sub_24A517B80;
}

uint64_t sub_24A51806C()
{
  return swift_release();
}

void (*sub_24A5180BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_24A516EC8(v8, a2, a3, a4);
  return sub_24A50C880;
}

uint64_t sub_24A518134@<X0>(void *a1@<X8>)
{
  sub_24A5BC210();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t result = sub_24A5BB4E0();
  if (!v1) {
    *a1 = v4;
  }
  return result;
}

uint64_t sub_24A5181F4()
{
  return sub_24A5BB4B0();
}

void *sub_24A518268@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v8 = *(void *)(a3 + 24);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v9 + 16);
  v14[0] = v9
         + ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80));
  uint64_t v11 = v14[0];
  v14[1] = v10;
  a1(v14);
  if (v5) {
    return sub_24A4BEFBC(v14, v11, v10);
  }
  uint64_t v13 = v15;
  sub_24A4BEFBC(v14, v11, v10);
  return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a4, 0, 1, v13);
}

uint64_t static OrderedDictionary.Values<>.== infix(_:_:)()
{
  return sub_24A5BB910() & 1;
}

uint64_t sub_24A518440()
{
  return static OrderedDictionary.Values<>.== infix(_:_:)() & 1;
}

uint64_t OrderedDictionary.Values<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = v11;
  void v18[2] = v12;
  v18[3] = v13;
  type metadata accessor for OrderedDictionary.Values();
  swift_getWitnessTable();
  sub_24A5BBB90();
  sub_24A5BC630();
  v18[0] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  if (_s19CollectionsInternal4HeapV5countSivg_0())
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      uint64_t result = sub_24A5BC260();
      uint64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        break;
      }
      sub_24A5BB380();
      (*v15)(v10, a6);
      ++v14;
      if (v17 == _s19CollectionsInternal4HeapV5countSivg_0()) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.Values<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A5BC610();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_24A5BC690();
}

uint64_t sub_24A5186E8(uint64_t a1)
{
  return OrderedDictionary.Values<>.hashValue.getter(*v1, v1[1], v1[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_24A518704(uint64_t a1, uint64_t a2)
{
  return OrderedDictionary.Values<>.hash(into:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A518720(uint64_t a1, uint64_t a2)
{
  sub_24A5BC610();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v5, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
  return sub_24A5BC690();
}

uint64_t sub_24A518780()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A51879C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A5187B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A51881C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A518838()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A51889C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A5188B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A51891C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A518964()
{
  sub_24A5BC5E0();
  swift_getWitnessTable();
  return sub_24A5BC420();
}

uint64_t TreeSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *(void *)(a2 - 8);
  uint64_t v34 = a1;
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t AssociatedConformanceWitness = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v37 = (char *)&v29 - v17;
  uint64_t v18 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for TreeSet();
  if (v21 == a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v20, v34, a3);
    swift_dynamicCast();
  }
  else
  {
    uint64_t v31 = v15;
    uint64_t v36 = v21;
    uint64_t v38 = TreeSet.init()(a2, a4);
    uint64_t v39 = v22;
    uint64_t v40 = v23;
    uint64_t v30 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v34, a3);
    sub_24A5BB840();
    uint64_t v32 = a3;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_24A5BBEE0();
    unsigned int v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    uint64_t v25 = AssociatedTypeWitness;
    if (v24(v13, 1, a2) != 1)
    {
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      unint64_t v27 = (void (**)(char *, uint64_t))(v33 + 8);
      do
      {
        v26(v10, v13, a2);
        sub_24A4B37BC((uint64_t)v10);
        (*v27)(v10, a2);
        sub_24A5BBEE0();
      }
      while (v24(v13, 1, a2) != 1);
    }
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v32);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v25);
  }
  return v38;
}

uint64_t TreeSet.init()(uint64_t a1, uint64_t a2)
{
  if (qword_26979ACF0 != -1) {
    swift_once();
  }
  uint64_t v4 = _HashNode.init(storage:count:)(_emptySingleton, 0, a1, MEMORY[0x263F8EE60] + 8, a2);
  uint64_t v6 = TreeSet.init(_new:)(v4, v5, a1, a2);
  swift_retain();
  return v6;
}

uint64_t TreeSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  _HashNode.mapValues<A>(_:)((void (*)(char *, char *))sub_24A519094, (uint64_t)v13, a1, a2, a4, a5, MEMORY[0x263F8EE60] + 8, a6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_release();
  return TreeSet.init(_new:)(v9, v11, a4, a6);
}

uint64_t sub_24A518F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v13 - v10, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
}

uint64_t sub_24A519094(uint64_t a1, uint64_t a2)
{
  return sub_24A518F38(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t TreeDictionary.Keys._base.getter()
{
  return swift_retain();
}

uint64_t TreeDictionary.Keys._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_release();
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*TreeDictionary.Keys._base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t TreeDictionary.keys.getter()
{
  return swift_retain();
}

uint64_t TreeDictionary.Keys.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  uint64_t v3 = type metadata accessor for TreeDictionary.Keys();
  swift_getWitnessTable();
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)v5, 0, 0, 0, v3);
}

uint64_t type metadata accessor for TreeDictionary.Keys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A51920C(void *a1, uint64_t a2)
{
  return sub_24A51931C(a1, a2, (uint64_t (*)(void, void, void, void, void, void))TreeDictionary.Keys.description.getter);
}

uint64_t TreeDictionary.Keys.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  uint64_t v7 = sub_24A5681FC();
  uint64_t v8 = v3;
  sub_24A5BB6F0();
  uint64_t v4 = type metadata accessor for TreeDictionary.Keys();
  swift_getWitnessTable();
  uint64_t v5 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v9, 1, v7, v8, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_24A519304(void *a1, uint64_t a2)
{
  return sub_24A51931C(a1, a2, (uint64_t (*)(void, void, void, void, void, void))TreeDictionary.Keys.debugDescription.getter);
}

uint64_t sub_24A51931C(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t TreeDictionary.Keys.Iterator._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TreeDictionary.Iterator();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

__n128 TreeDictionary.Keys.Iterator._base.setter(uint64_t a1)
{
  long long v3 = v1[7];
  v11[6] = v1[6];
  v12[0] = v3;
  *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v1 + 123);
  long long v4 = v1[3];
  v11[2] = v1[2];
  v11[3] = v4;
  long long v5 = v1[5];
  void v11[4] = v1[4];
  v11[5] = v5;
  long long v6 = v1[1];
  v11[0] = *v1;
  v11[1] = v6;
  sub_24A4A2BC4((uint64_t)v11);
  long long v7 = *(_OWORD *)(a1 + 112);
  v1[6] = *(_OWORD *)(a1 + 96);
  v1[7] = v7;
  *(_OWORD *)((char *)v1 + 123) = *(_OWORD *)(a1 + 123);
  long long v8 = *(_OWORD *)(a1 + 48);
  v1[2] = *(_OWORD *)(a1 + 32);
  v1[3] = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  v1[4] = *(_OWORD *)(a1 + 64);
  v1[5] = v9;
  __n128 result = *(__n128 *)(a1 + 16);
  *uint64_t v1 = *(_OWORD *)a1;
  v1[1] = result;
  return result;
}

uint64_t (*TreeDictionary.Keys.Iterator._base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

__n128 TreeDictionary.Keys.Iterator.init(_base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 123) = *(_OWORD *)(a1 + 123);
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TreeDictionary.Keys.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = sub_24A5BBD20();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v14 - v8;
  uint64_t v10 = (void *)type metadata accessor for TreeDictionary.Iterator();
  TreeDictionary.Iterator.next()(v10, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v9, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1, v3);
  }
  else
  {
    uint64_t v12 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v13 = *(void *)(v3 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v9, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v3);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v12, v4);
  }
}

uint64_t TreeDictionary.Keys.makeIterator()@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  TreeDictionary.makeIterator()(a1, (uint64_t)v8);
  long long v3 = v9[0];
  a2[6] = v8[6];
  a2[7] = v3;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)((char *)v9 + 11);
  long long v4 = v8[3];
  a2[2] = v8[2];
  a2[3] = v4;
  long long v5 = v8[5];
  a2[4] = v8[4];
  a2[5] = v5;
  long long v6 = v8[1];
  *a2 = v8[0];
  a2[1] = v6;
  return swift_retain();
}

BOOL TreeDictionary.Keys._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_24A5B85E4();
  return _HashNode.containsKey(_:_:_:)(0, a1, v13, a2, a3, a5, a6, a7);
}

BOOL TreeDictionary.Keys.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_24A5B85E4();
  return _HashNode.containsKey(_:_:_:)(0, a1, v13, a2, a3, a5, a6, a7);
}

__n128 sub_24A51982C@<Q0>(uint64_t a1@<X8>)
{
  TreeDictionary.Keys.makeIterator()(*v1, v7);
  swift_release();
  long long v3 = v8[0];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 123) = *(_OWORD *)((char *)v8 + 11);
  long long v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v5;
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a1 = v7[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24A5198A8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

BOOL sub_24A5198FC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return TreeDictionary.Keys._customContainsEquatableElement(_:)(a1, *v4, v4[1], a4, a2[2], a2[3], a2[4]);
}

uint64_t sub_24A519910(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

double TreeDictionary.Keys.startIndex.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_24A51999C((void (*)(long long *__return_ptr))TreeDictionary.startIndex.getter, a1);
}

double TreeDictionary.Keys.endIndex.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_24A51999C((void (*)(long long *__return_ptr))TreeDictionary.endIndex.getter, a1);
}

double sub_24A51999C@<D0>(void (*a1)(long long *__return_ptr)@<X6>, uint64_t a2@<X8>)
{
  a1(&v5);
  double result = *(double *)&v5;
  long long v4 = *(_OWORD *)v6;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 30) = *(void *)&v6[14];
  return result;
}

uint64_t TreeDictionary.Keys.subscript.getter@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a2);
  long long v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TreeDictionary.subscript.getter(v4, (uint64_t)v6, v7, v8, v9, v10, v12, a1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a1);
}

__n128 TreeDictionary.Keys.index(after:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a1;
  *(_OWORD *)&v12[16] = v6;
  *(void *)&v12[30] = *(void *)(a1 + 30);
  TreeDictionary.formIndex(after:)((uint64_t)v12, a2, a3, a4);
  uint64_t v7 = *(void *)&v12[24];
  int v8 = *(_DWORD *)&v12[32];
  char v9 = v12[36];
  char v10 = v12[37];
  __n128 result = *(__n128 *)&v12[8];
  *(void *)a5 = *(void *)v12;
  *(__n128 *)(a5 + 8) = result;
  *(void *)(a5 + 24) = v7;
  *(_DWORD *)(a5 + 32) = v8;
  *(unsigned char *)(a5 + 36) = v9;
  *(unsigned char *)(a5 + 37) = v10;
  return result;
}

double TreeDictionary.Keys.index(_:offsetBy:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  TreeDictionary.index(_:offsetBy:)(a1, a2, a3, a4, (uint64_t)&v8);
  double result = *(double *)&v8;
  long long v7 = *(_OWORD *)v9;
  *(_OWORD *)a5 = v8;
  *(_OWORD *)(a5 + 16) = v7;
  *(void *)(a5 + 30) = *(void *)&v9[14];
  return result;
}

uint64_t TreeDictionary.Keys.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  TreeDictionary.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, a5, (uint64_t)v9);
  type metadata accessor for TreeDictionary.Index();
  uint64_t v7 = sub_24A5BBD20();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a6, v9, v7);
}

double sub_24A519C1C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A519C4C(a1, (void (*)(long long *__return_ptr, void, void, void, void, void, void))TreeDictionary.Keys.startIndex.getter, a2);
}

double sub_24A519C34@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A519C4C(a1, (void (*)(long long *__return_ptr, void, void, void, void, void, void))TreeDictionary.Keys.endIndex.getter, a2);
}

double sub_24A519C4C@<D0>(void *a1@<X0>, void (*a2)(long long *__return_ptr, void, void, void, void, void, void)@<X2>, uint64_t a3@<X8>)
{
  a2(&v7, *v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
  double result = *(double *)&v7;
  long long v6 = *(_OWORD *)v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 30) = *(void *)&v8[14];
  return result;
}

void (*sub_24A519CAC(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  long long v7 = (char *)malloc(0x50uLL);
  *a1 = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v8;
  *(void *)(v7 + 30) = *(void *)(a2 + 30);
  *((void *)v7 + 9) = sub_24A519D3C((void *)v7 + 5, (uint64_t)v7, *v3, v3[1], v3[2], *(void *)(a3 + 16), *(void *)(a3 + 24));
  return sub_24A50EE74;
}

void (*sub_24A519D3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(void *a1)
{
  uint64_t v9 = *(void *)(a6 - 8);
  *a1 = a6;
  a1[1] = v9;
  char v10 = malloc(*(void *)(v9 + 64));
  a1[2] = v10;
  TreeDictionary.Keys.subscript.getter(a7, (uint64_t)v10);
  return sub_24A50EF90;
}

uint64_t sub_24A519E28(void *a1)
{
  return TreeDictionary.Keys.isEmpty.getter(*v1, v1[1], v1[2], a1[2], a1[3], a1[4]);
}

uint64_t sub_24A519E40(void *a1)
{
  return TreeDictionary.Keys.count.getter(*v1, v1[1], v1[2], a1[2], a1[3], a1[4]);
}

void sub_24A519E58(void *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(void *)((char *)a1 + 30) = 0;
}

double sub_24A519E6C@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = a1[1];
  long long v10 = *a1;
  v11[0] = v5;
  *(void *)((char *)v11 + 14) = *(void *)((char *)a1 + 30);
  TreeDictionary.Keys.index(_:offsetBy:)((uint64_t)&v10, a2, *v3, v3[2], (uint64_t)&v8);
  double result = *(double *)&v8;
  long long v7 = *(_OWORD *)v9;
  *(_OWORD *)a3 = v8;
  *(_OWORD *)(a3 + 16) = v7;
  *(void *)(a3 + 30) = *(void *)&v9[14];
  return result;
}

uint64_t sub_24A519ED8@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  long long v6 = a1[1];
  long long v11 = *a1;
  v12[0] = v6;
  *(void *)((char *)v12 + 14) = *(void *)((char *)a1 + 30);
  long long v7 = a3[1];
  long long v13 = *a3;
  v14[0] = v7;
  *(void *)((char *)v14 + 14) = *(void *)((char *)a3 + 30);
  TreeDictionary.Keys.index(_:offsetBy:limitedBy:)((uint64_t)&v11, a2, (uint64_t)&v13, *v4, v4[2], (uint64_t)v10);
  type metadata accessor for TreeDictionary.Index();
  uint64_t v8 = sub_24A5BBD20();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a4, v10, v8);
}

uint64_t sub_24A519FAC(long long *a1, long long *a2, void *a3)
{
  long long v4 = a1[1];
  long long v7 = *a1;
  v8[0] = v4;
  *(void *)((char *)v8 + 14) = *(void *)((char *)a1 + 30);
  long long v5 = a2[1];
  long long v9 = *a2;
  v10[0] = v5;
  *(void *)((char *)v10 + 14) = *(void *)((char *)a2 + 30);
  return ((uint64_t (*)(long long *, long long *, void, void, void, void, void, void))TreeDictionary.Keys.distance(from:to:))(&v7, &v9, *v3, v3[1], v3[2], a3[2], a3[3], a3[4]);
}

double sub_24A51A008@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TreeDictionary.Keys.index(after:)(a1, *v2, v2[1], v2[2], (uint64_t)&v6);
  double result = *(double *)&v6;
  long long v5 = *(_OWORD *)v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 30) = *(void *)&v7[14];
  return result;
}

uint64_t sub_24A51A060(uint64_t a1, void *a2)
{
  return TreeDictionary.Keys.formIndex(after:)(a1, *v2, v2[1], v2[2], a2[2], a2[3], a2[4]);
}

uint64_t TreeDictionary.Keys.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_24A51A128(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.intersection<A>(_:_:));
}

uint64_t TreeDictionary.Keys.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_24A51A208(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.intersection<A>(_:_:));
}

uint64_t TreeDictionary.Keys.subtracting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_24A51A128(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.subtracting<A>(_:_:));
}

uint64_t sub_24A51A128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = a4;
  uint64_t v14 = a11(0, a1, a2, a4, a5, a7, a8, a9, a10);
  if (v14) {
    return TreeDictionary.init(_new:)(v14, v15, a7, a8, a10);
  }
  swift_retain();
  return v13;
}

uint64_t TreeDictionary.Keys.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_24A51A208(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.subtracting<A>(_:_:));
}

uint64_t sub_24A51A208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = a4;
  uint64_t v13 = a10(0, a1, a2, a4, a5, a7, a8, MEMORY[0x263F8EE60] + 8, a9);
  if (v13) {
    return TreeDictionary.init(_new:)(v13, v14, a7, a8, a9);
  }
  swift_retain();
  return v12;
}

uint64_t sub_24A51A2B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A51A2D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A51A2F0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TreeDictionary.Keys.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _UnsafeBitSet.isSuperset(of:)(uint64_t result, unint64_t a2, uint64_t a3, int64_t a4)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v5 = result;
  double result = 0;
  if (v4 >= v5 && v4 >= a2)
  {
    unint64_t v6 = v5 >> 6;
    unint64_t v7 = a2 >> 6;
    char v8 = v5 & 0x3F;
    if (v6 == a2 >> 6)
    {
      uint64_t v9 = (-1 << a2) ^ (-1 << v8);
      long long v10 = (void *)(a3 + 8 * v6);
      return (v9 & ~*v10) == 0;
    }
    if (~*(void *)(a3 + 8 * v6) >> v8) {
      return 0;
    }
    if (v7 > v6)
    {
      if (v6 + 1 == v7)
      {
LABEL_13:
        if ((uint64_t)v7 >= a4) {
          return 1;
        }
        uint64_t v9 = ~(-1 << a2);
        long long v10 = (void *)(a3 + 8 * v7);
        return (v9 & ~*v10) == 0;
      }
      if (v6 + 1 < v7)
      {
        if (*(void *)(a3 + 8 * (v6 + 1)) == -1)
        {
          long long v11 = (uint64_t *)(a3 + 8 * v6 + 16);
          for (uint64_t i = v7 - v6 - 2; i; --i)
          {
            double result = 0;
            uint64_t v13 = *v11++;
            if (v13 != -1) {
              return result;
            }
          }
          goto LABEL_13;
        }
        return 0;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeBitSet.combineSharedPrefix(with:using:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (v3[1] >= a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = v3[1];
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else if (v4)
  {
    unint64_t v6 = (uint64_t *)result;
    uint64_t v7 = *v3;
    do
    {
      uint64_t v8 = *v6++;
      double result = a3(v7, v8);
      v7 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t _UnsafeBitSet.formUnion(_:)(unint64_t result, unint64_t a2)
{
  char v3 = a2;
  unint64_t v4 = result >> 6;
  unint64_t v5 = a2 >> 6;
  if (result >> 6 == a2 >> 6)
  {
    if ((uint64_t)v4 >= v2[1]) {
      return result;
    }
    uint64_t v6 = (-1 << a2) ^ (-1 << result);
    uint64_t v7 = (void *)(*v2 + 8 * v4);
    goto LABEL_10;
  }
  uint64_t v8 = *v2;
  *(void *)(*v2 + 8 * v4) |= -1 << result;
  if (v5 <= v4)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v4 + 1 != v5)
  {
    if (v4 + 1 < v5)
    {
      double result = (unint64_t)memset((void *)(v8 + 8 * v4 + 8), 255, 8 * (v5 + ~v4));
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    return result;
  }
LABEL_8:
  if ((uint64_t)v5 >= v2[1]) {
    return result;
  }
  uint64_t v6 = ~(-1 << v3);
  uint64_t v7 = (void *)(v8 + 8 * v5);
LABEL_10:
  *v7 |= v6;
  return result;
}

void _UnsafeBitSet.formIntersection(_:)(unint64_t a1, unint64_t a2)
{
  int64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = v3 << 6;
  if (v3 << 6 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v4 >= a1) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = v3 << 6;
  }
  if (v4 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = v3 << 6;
  }
  int64_t v7 = v5 >> 6;
  uint64_t v8 = 8 * (v5 >> 6);
  if (v5 >= 0x40) {
    bzero(*(void **)v2, 8 * (v5 >> 6));
  }
  int64_t v9 = v6 >> 6;
  if (v7 == v6 >> 6)
  {
    if (v7 < v3) {
      *(void *)(*(void *)v2 + v8) &= (-1 << v6) ^ (-1 << v5);
    }
    return;
  }
  long long v10 = *(void **)v2;
  *(void *)(*(void *)v2 + v8) &= -1 << v5;
  if (v9 < v3)
  {
    v10[v9] &= ~(-1 << v6);
    if (v10)
    {
      uint64_t v11 = v9 + 1;
      uint64_t v12 = v3 - v11;
      if (v3 != v11)
      {
        if (v12 >= 1)
        {
          bzero(&v10[v11], 8 * v12);
          return;
        }
LABEL_22:
        __break(1u);
      }
    }
  }
}

unint64_t _UnsafeBitSet.formSymmetricDifference(_:)(unint64_t result, unint64_t a2)
{
  unint64_t v3 = result >> 6;
  unint64_t v4 = a2 >> 6;
  if (result >> 6 == a2 >> 6)
  {
    if ((uint64_t)v3 < v2[1]) {
      *(void *)(*v2 + 8 * v3) ^= (-1 << a2) ^ (-1 << result);
    }
    return result;
  }
  uint64_t v5 = *v2;
  *(void *)(*v2 + 8 * v3) ^= -1 << result;
  if (v4 <= v3)
  {
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v6 = v3 + 1;
  if (v3 + 1 != v4)
  {
    if (v3 + 1 < v4)
    {
      unint64_t v7 = v4 + ~v3;
      if (v7 < 4) {
        goto LABEL_11;
      }
      v6 += v7 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v8 = (int8x16_t *)(v5 + 8 * v3 + 24);
      unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v10 = vmvnq_s8(*v8);
        v8[-1] = vmvnq_s8(v8[-1]);
        *uint64_t v8 = v10;
        v8 += 2;
        v9 -= 4;
      }
      while (v9);
      if (v7 != (v7 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_11:
        unint64_t v11 = v4 - v6;
        uint64_t v12 = (void *)(v5 + 8 * v6);
        do
        {
          *uint64_t v12 = ~*v12;
          ++v12;
          --v11;
        }
        while (v11);
      }
      goto LABEL_13;
    }
LABEL_17:
    __break(1u);
    return result;
  }
LABEL_13:
  if ((uint64_t)v4 < v2[1]) {
    *(void *)(v5 + 8 * v4) = (-1 << a2) ^ ~*(void *)(v5 + 8 * v4);
  }
  return result;
}

void _UnsafeBitSet.subtract(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2[1];
  unint64_t v4 = v3 << 6;
  if (v3 << 6 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v4 >= a1) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = v3 << 6;
  }
  if (v4 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = v3 << 6;
  }
  unint64_t v7 = v5 >> 6;
  unint64_t v8 = v6 >> 6;
  if (v5 >> 6 == v6 >> 6)
  {
    if ((uint64_t)v7 >= v3) {
      return;
    }
    unint64_t v9 = (void *)(*v2 + 8 * v7);
    uint64_t v10 = (-1 << v5) ^ ~(-1 << v6);
    goto LABEL_19;
  }
  uint64_t v11 = *v2;
  *(void *)(v11 + 8 * v7) &= ~(-1 << v5);
  if (!v11)
  {
    if (v8 > v7) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  if (v8 <= v7)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v12 = v7 + 1;
  uint64_t v13 = v8 - v12;
  if (v8 != v12)
  {
    if (v13 >= 1)
    {
      bzero((void *)(v11 + 8 * v12), 8 * v13);
      goto LABEL_17;
    }
LABEL_24:
    __break(1u);
    return;
  }
LABEL_17:
  if ((uint64_t)v8 >= v3) {
    return;
  }
  uint64_t v10 = -1 << v6;
  unint64_t v9 = (void *)(v11 + 8 * v8);
LABEL_19:
  *v9 &= v10;
}

BOOL _UnsafeBitSet.isDisjoint(with:)(BOOL result, unint64_t a2, void *a3, int64_t a4)
{
  if (!a4) {
    return 1;
  }
  unint64_t v4 = result;
  if (!*a3)
  {
    if (a4 == 1) {
      return 1;
    }
    if (!a3[1])
    {
      int64_t v11 = a4 - 2;
      if (a4 == 2) {
        return 1;
      }
      unint64_t v12 = a3 + 2;
      double result = 1;
      while (!*v12++)
      {
        if (!--v11) {
          return result;
        }
      }
    }
  }
  unint64_t v5 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    return result;
  }
  if (v5 >= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = a4 << 6;
  }
  if (v5 >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = a4 << 6;
  }
  if (v6 == v7) {
    return 1;
  }
  int64_t v8 = v6 >> 6;
  unint64_t v9 = v7 >> 6;
  if (v6 >> 6 == v7 >> 6)
  {
    if (v8 < a4)
    {
      uint64_t v10 = -1 << v6;
      return (a3[v8] & ((-1 << v7) ^ v10)) == 0;
    }
    return 1;
  }
  if (a3[v8] >> v6) {
    return 0;
  }
  unint64_t v14 = v9 - v8;
  if (v9 <= v8) {
    goto LABEL_37;
  }
  if (v8 + 1 == v9) {
    goto LABEL_27;
  }
  if (v8 + 1 >= v9) {
    goto LABEL_38;
  }
  if (!a3[v8 + 1])
  {
    uint64_t v15 = &a3[v8 + 2];
    unint64_t v16 = v14 - 2;
    double result = 0;
    while (v16)
    {
      uint64_t v17 = *v15++;
      --v16;
      if (v17) {
        return result;
      }
    }
LABEL_27:
    if ((uint64_t)v9 < a4)
    {
      uint64_t v10 = -1;
      int64_t v8 = v7 >> 6;
      return (a3[v8] & ((-1 << v7) ^ v10)) == 0;
    }
    return 1;
  }
  return 0;
}

unint64_t _UnsafeBitSet.isSubset(of:)(unint64_t result, unint64_t a2, void *a3, int64_t a4)
{
  if (result == a2)
  {
    if (!a4) {
      return 1;
    }
    if (*a3) {
      return 0;
    }
    if (a4 == 1) {
      return 1;
    }
    if (a3[1]) {
      return 0;
    }
    if (a4 == 2) {
      return 1;
    }
    int64_t v12 = a4 - 3;
    uint64_t v13 = a3 + 2;
    do
    {
      uint64_t v15 = *v13++;
      uint64_t v14 = v15;
      double result = v15 == 0;
      BOOL v17 = v12-- != 0;
    }
    while (!v14 && v17);
  }
  else
  {
    if (!a4) {
      return 1;
    }
    unint64_t v4 = a4 << 6;
    if (((a4 << 6) & 0x8000000000000000) == 0)
    {
      if (v4 >= result) {
        unint64_t v5 = result;
      }
      else {
        unint64_t v5 = a4 << 6;
      }
      if (v4 >= a2) {
        unint64_t v4 = a2;
      }
      unint64_t v6 = v5 >> 6;
      if (v5 >= 0x40)
      {
        if (*a3) {
          return 0;
        }
        unint64_t v7 = v6 - 1;
        if (v6 <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v5 >> 6;
        }
        uint64_t v9 = v8 - 1;
        uint64_t v10 = a3 + 1;
        double result = 0;
        while (v7)
        {
          if (!v9)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v11 = *v10++;
          --v9;
          --v7;
          if (v11) {
            return result;
          }
        }
      }
      if ((uint64_t)v6 < a4)
      {
        if ((a3[v6] & ~(-1 << v5)) != 0) {
          return 0;
        }
        if ((uint64_t)(v4 >> 6) < a4) {
          return a3[v4 >> 6] >> v4 == 0;
        }
      }
      return 1;
    }
LABEL_42:
    __break(1u);
  }
  return result;
}

unint64_t _UnsafeBitSet.isEqualSet(to:)(unint64_t result, unint64_t a2, void *a3, uint64_t a4)
{
  if (result == a2)
  {
    if (!a4) {
      return 1;
    }
    if (!*a3)
    {
      if (a4 == 1) {
        return 1;
      }
      if (!a3[1])
      {
        if (a4 == 2) {
          return 1;
        }
        uint64_t v18 = a4 - 3;
        uint64_t v19 = a3 + 2;
        do
        {
          uint64_t v21 = *v19++;
          uint64_t v20 = v21;
          BOOL v5 = v21 == 0;
          BOOL v23 = v18-- != 0;
        }
        while (!v20 && v23);
        return v5;
      }
    }
    return 0;
  }
  unint64_t v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  BOOL v5 = 0;
  if (v4 < result || v4 < a2) {
    return v5;
  }
  int64_t v6 = a2 >> 6;
  unint64_t v7 = a2 & 0x3F;
  if (a2 < 0x40 || (a2 & 0x3F) != 0)
  {
    if (v6 != a4 - 1) {
      return 0;
    }
  }
  else
  {
    if (v6 != a4) {
      return 0;
    }
    --v6;
    unint64_t v7 = 64;
  }
  unint64_t v8 = result >> 6;
  if (result >= 0x40)
  {
    if (*a3) {
      return 0;
    }
    unint64_t v13 = v8 - 1;
    if (v8 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = result >> 6;
    }
    uint64_t v15 = v14 - 1;
    unint64_t v16 = a3 + 1;
    BOOL v5 = 0;
    while (v13)
    {
      if (!v15) {
        goto LABEL_54;
      }
      uint64_t v17 = *v16++;
      --v15;
      --v13;
      if (v17) {
        return v5;
      }
    }
  }
  char v9 = result & 0x3F;
  if (v8 == v6)
  {
    if (v7 < 0x40) {
      uint64_t v10 = ~(-1 << v7);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = (-1 << v9) ^ ~v10;
    int64_t v12 = &a3[v8];
    return *v12 == v11;
  }
  if (a3[v8] != -1 << v9) {
    return 0;
  }
  unint64_t v24 = v6 - v8;
  if (v6 <= (uint64_t)v8) {
    goto LABEL_55;
  }
  if (v8 + 1 == v6)
  {
LABEL_41:
    uint64_t v11 = -1;
    if (v7 < 0x40) {
      uint64_t v11 = ~(-1 << v7);
    }
    int64_t v12 = &a3[v6];
    return *v12 == v11;
  }
  if ((uint64_t)(v8 + 1) < v6)
  {
    if (a3[v8 + 1] == -1)
    {
      uint64_t v25 = &a3[v8 + 2];
      for (unint64_t i = v24 - 2; i; --i)
      {
        BOOL v5 = 0;
        uint64_t v27 = *v25++;
        if (v27 != -1) {
          return v5;
        }
      }
      goto LABEL_41;
    }
    return 0;
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t BitSet.Index._value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*BitSet.Index._value.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t BitSet.Index.description.getter()
{
  return sub_24A5BC430();
}

uint64_t sub_24A51AD10()
{
  return sub_24A5BC430();
}

uint64_t BitSet.Index.debugDescription.getter()
{
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "BitSet.Index(");
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  return v1[0];
}

uint64_t sub_24A51AE00()
{
  return BitSet.Index.debugDescription.getter();
}

BOOL static BitSet.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL static BitSet.Index.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

uint64_t BitSet.Index.hash(into:)()
{
  return sub_24A5BC630();
}

uint64_t BitSet.Index.hashValue.getter()
{
  return sub_24A5BC690();
}

unint64_t sub_24A51AE94()
{
  unint64_t result = qword_26979BB08;
  if (!qword_26979BB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979BB08);
  }
  return result;
}

ValueMetadata *type metadata accessor for BitSet.Index()
{
  return &type metadata for BitSet.Index;
}

uint64_t sub_24A51AEFC(unint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = _s7BuilderVMa();
  uint64_t result = MEMORY[0x270FA5388](v6);
  char v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = *v3;
  uint64_t v11 = *((void *)v3 + 4);
  unint64_t v12 = a1[4];
  unint64_t v13 = 2 * (v11 & 0x1FFFFFFFFFFFFFLL);
  if (!*(void *)v3) {
    unint64_t v13 = 0;
  }
  if (v13 < v12 >> 10)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v14 = *a1;
  unint64_t v15 = a1[1];
  unint64_t v16 = a1[2];
  unint64_t v17 = a1[3];
  if (v12 >> 10 == *a1 >> 10)
  {
    long long v18 = a2[1];
    *(_OWORD *)unint64_t v45 = *a2;
    *(_OWORD *)&v45[16] = v18;
    *(_OWORD *)&v45[32] = a2[2];
    sub_24A4974C4((uint64_t)v45, (uint64_t)v57);
    sub_24A497498((uint64_t)v57);
    return _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(a2, v14, v15, v16, v17);
  }
  long long v19 = v3[1];
  *(void *)&long long v44 = a1[5];
  *(void *)&long long v43 = a1[6];
  unint64_t v42 = a1[7];
  unint64_t v41 = v14 >> 11;
  unint64_t v40 = v12 >> 11;
  uint64_t v20 = *((void *)v3 + 5);
  v57[0] = v10;
  v57[1] = v19;
  uint64_t v58 = v11;
  uint64_t v59 = v20;
  uint64_t v21 = (uint64_t)&v9[*(int *)(v6 + 24)];
  v45[0] = 1;
  sub_24A48D2C8(v14, v15, v16, v17, (uint64_t *)0x100000000, v21);
  uint64_t v22 = (uint64_t)&v9[*(int *)(v6 + 20)];
  v45[0] = 1;
  sub_24A48D2C8(v12, v44, v43, v42, (uint64_t *)0x100000000, v22);
  uint64_t result = v41;
  if (v40 < v41) {
    goto LABEL_10;
  }
  sub_24A57660C(v41, v40, v23, (uint64_t)v45);
  uint64_t v24 = v46;
  int v25 = v47;
  __int16 v26 = v48;
  int v27 = v50;
  __int16 v28 = v51;
  uint64_t v29 = v52;
  long long v30 = *(_OWORD *)&v45[8];
  long long v31 = *(_OWORD *)&v45[24];
  long long v32 = *(_OWORD *)&v45[40];
  long long v33 = v49;
  *(void *)char v9 = *(void *)v45;
  *(_OWORD *)(v9 + 8) = v30;
  *(_OWORD *)(v9 + 24) = v31;
  *(_OWORD *)(v9 + 40) = v32;
  *((void *)v9 + 7) = v24;
  *((_WORD *)v9 + 34) = v26;
  *((_DWORD *)v9 + 16) = v25;
  *(_OWORD *)(v9 + 72) = v33;
  *((_WORD *)v9 + 46) = v28;
  *((_DWORD *)v9 + 22) = v27;
  *((void *)v9 + 12) = v29;
  long long v34 = *a2;
  long long v35 = a2[1];
  *(_OWORD *)&v45[32] = a2[2];
  *(_OWORD *)&v45[16] = v35;
  *(_OWORD *)unint64_t v45 = v34;
  sub_24A4974C4((uint64_t)v45, (uint64_t)v56);
  sub_24A497498((uint64_t)v56);
  sub_24A56EF34(a2);
  sub_24A4EF384((uint64_t)v9, (uint64_t)v9);
  sub_24A491510((uint64_t *)v53);
  long long v44 = v53[0];
  long long v43 = v53[1];
  uint64_t v36 = v54;
  uint64_t v37 = v55;
  sub_24A51B224((uint64_t)v9);
  uint64_t result = swift_unknownObjectRelease();
  long long v38 = v43;
  *uint64_t v3 = v44;
  v3[1] = v38;
  *((void *)v3 + 4) = v36;
  *((void *)v3 + 5) = v37;
  return result;
}

uint64_t sub_24A51B224(uint64_t a1)
{
  uint64_t v2 = _s7BuilderVMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static BitSet._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

uint64_t static TreeDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = a7;
  uint64_t v13 = a8;
  uint64_t v14 = a9;
  uint64_t v15 = a10;
  return _HashNode.isEqualSet<A>(to:by:)(a4, a5, (uint64_t)sub_24A51B2F0, (uint64_t)v11, a1, a2, a7, a8, a8, a9) & 1;
}

uint64_t sub_24A51B2F0()
{
  return sub_24A5BB530() & 1;
}

uint64_t sub_24A51B320(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static TreeDictionary<>.== infix(_:_:)(*a1, a1[1], (uint64_t)a3, *a2, a2[1], a6, a3[2], a3[3], a3[4], *(void *)(a4 - 8)) & 1;
}

uint64_t Deque.Iterator._storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Deque.Iterator._storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Deque.Iterator._nextSlot.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Deque.Iterator._nextSlot.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Deque.Iterator._nextSlot.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Deque.Iterator._endSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t Deque.Iterator._endSlot.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*Deque.Iterator._endSlot.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Deque.Iterator.init(_base:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_24A520E84(a1, a2);
  swift_release();
  return v2;
}

uint64_t Deque.Iterator.init(_base:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_24A5216C0(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t sub_24A51B4B0@<X0>(Swift::Int forOffset@<X2>, CollectionsInternal::_DequeSlot *a2@<X0>, Swift::Int a3@<X3>, CollectionsInternal::_DequeSlot *a4@<X8>)
{
  v8.Swift::Int position = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  Swift::Int position = v8.position;
  Swift::Int v10 = a2[1].position;
  if (v10 != forOffset)
  {
    v8.Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)(a2[2], v10).position;
    if (position >= v8.position) {
      v8.Swift::Int position = a2->position;
    }
  }
  a4->Swift::Int position = a3;
  a4[1].Swift::Int position = position;
  a4[2].Swift::Int position = v8.position;
  return swift_retain();
}

Swift::Bool __swiftcall Deque.Iterator._swapSegment()()
{
  uint64_t v2 = *v1;
  uint64_t v6 = *(void *)(v0 + 16);
  unint64_t v7 = sub_24A52178C;
  CollectionsInternal::_DequeSlot v8 = &v9;
  swift_retain();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A5217F8, (uint64_t)v5, v2, (uint64_t)&type metadata for _DequeBufferHeader, v6, v3, MEMORY[0x263F8D4F8], MEMORY[0x263F8E4E0], (uint64_t)v10);
  swift_release();
  return v10[15];
}

uint64_t Deque.Iterator.next()@<X0>(BOOL a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v5 = v2[1];
  if (v5 != v2[2]) {
    goto LABEL_4;
  }
  a1 = Deque.Iterator._swapSegment()();
  if (a1)
  {
    uint64_t v5 = v2[1];
LABEL_4:
    v2[1] = v5 + 1;
    uint64_t v6 = *v2;
    uint64_t v7 = MEMORY[0x270FA5388](a1);
    uint64_t v19 = *(void *)(v3 + 16);
    uint64_t v8 = v19;
    uint64_t v20 = v9;
    MEMORY[0x270FA5388](v7);
    uint64_t v15 = v19;
    uint64_t v16 = v19;
    unint64_t v17 = sub_24A521824;
    uint64_t v18 = v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A521880, (uint64_t)&v14, v6, (uint64_t)&type metadata for _DequeBufferHeader, v15, v11, v15, MEMORY[0x263F8E4E0], (uint64_t)v21);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 0, 1, v8);
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 16) - 8) + 56);
  return v13(a2, 1, 1);
}

uint64_t Deque.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_24A520E84(v3, a2);
  swift_release();
  return v4;
}

uint64_t Deque._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_24A521030(a1, a2);
  swift_release();
  return v2;
}

uint64_t sub_24A51B868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v9 = a4;
  uint64_t v10 = sub_24A522654;
  uint64_t v11 = &v12;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4((uint64_t)sub_24A521D30, (uint64_t)v8, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v6, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v16);
}

uint64_t sub_24A51B920(void *a1, uint64_t a2, _OWORD *a3, void *a4, uint64_t a5)
{
  long long v30 = a4;
  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v26);
  uint64_t v7 = v26;
  uint64_t v8 = v27;
  v29[0] = *a3;
  v21[0] = v27;
  sub_24A5BBDB0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979BB10);
  swift_getWitnessTable();
  sub_24A5225DC();
  sub_24A5BB4C0();
  *(void *)&v29[0] = v7;
  *((void *)&v29[0] + 1) = v8;
  uint64_t v9 = sub_24A5BB580();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = v30;
  uint64_t result = sub_24A509644((uint64_t)v29, v22, v23, v24, v25, a5, v9, WitnessTable);
  if (__OFADD__(*v11, v8))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *v11 += v8;
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v14 = *(void (**)(_OWORD *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v29, &v28, v13);
  uint64_t result = ((uint64_t (*)(uint64_t *, _OWORD *, uint64_t))v14)(&v22, v29, v13);
  if (v24) {
    return result;
  }
  uint64_t v15 = v23;
  if (__OFADD__(v8, v23)) {
    goto LABEL_9;
  }
  if (v8 + v23 < v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v16 = v22;
  uint64_t v17 = sub_24A5BBDC0();
  v21[0] = v16;
  v21[1] = v15;
  uint64_t result = sub_24A509644((uint64_t)v21, v17, v18, v19, v20, a5, v9, WitnessTable);
  if (__OFADD__(*v11, v15))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *v11 += v15;
  return result;
}

uint64_t sub_24A51BB60()
{
  sub_24A5BB9A0();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_24A5BC090();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_24A5BB9F0();
      swift_getWitnessTable();
      uint64_t v1 = sub_24A5BC570();
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t Deque._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_24A520F48(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t sub_24A51BC6C@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v41);
  uint64_t v8 = v42;
  if (v42 >= a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = v42;
  }
  *(void *)&long long v37 = a2;
  *((void *)&v37 + 1) = a3;
  sub_24A5BBDB0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979BB10);
  swift_getWitnessTable();
  sub_24A5225DC();
  sub_24A5BB4C0();
  uint64_t v45 = *((void *)&v39 + 1);
  sub_24A5BB580();
  swift_getWitnessTable();
  sub_24A5BBBB0();
  long long v35 = v37;
  long long v36 = v38;
  uint64_t v10 = sub_24A5BC5E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = v45;
  uint64_t v13 = a4;
  uint64_t v45 = v10;
  uint64_t v34 = WitnessTable;
  sub_24A509644((uint64_t)&v35, v39, v12, v40, *((uint64_t *)&v40 + 1), a4, v10, WitnessTable);
  if (v8 >= a3) {
    goto LABEL_13;
  }
  uint64_t v14 = sub_24A5BBD20();
  uint64_t v15 = *(uint64_t (**)(long long *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15((long long *)v44, &v43, v14);
  uint64_t result = v15(&v35, (uint64_t *)v44, v14);
  if (v36) {
    goto LABEL_13;
  }
  if (__OFSUB__(a3, v9))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v17 = *((void *)&v35 + 1);
  if (a3 - v9 >= *((uint64_t *)&v35 + 1)) {
    uint64_t v18 = *((void *)&v35 + 1);
  }
  else {
    uint64_t v18 = a3 - v9;
  }
  if (__OFADD__(v9, v18)) {
    goto LABEL_15;
  }
  if (v9 + v18 >= v9)
  {
    uint64_t v19 = v35;
    v9 += v18;
    uint64_t v32 = sub_24A5BBDC0();
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    *(void *)&long long v37 = v19;
    *((void *)&v37 + 1) = v17;
    sub_24A5BBBB0();
    long long v37 = v39;
    long long v38 = v40;
    sub_24A509644((uint64_t)&v37, v32, v21, v23, v25, v13, v45, v34);
LABEL_13:
    uint64_t v26 = swift_retain();
    uint64_t v27 = sub_24A5216C0(v26, v9, v13);
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    uint64_t result = swift_release();
    *a5 = v27;
    a5[1] = v29;
    a5[2] = v31;
    a5[3] = v9;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t Deque.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a2;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a1;
  uint64_t v10 = a4;
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = sub_24A5218A8;
  uint64_t v13 = &v14;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4((uint64_t)sub_24A5218C8, (uint64_t)v9, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v7, v11, MEMORY[0x263F8E4E0], (uint64_t)&v19);
}

uint64_t sub_24A51C044@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t result = a1[2];
  uint64_t v10 = a1[1] + result;
  if (*a1 < v10)
  {
    uint64_t v11 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v11, 1, a3);
  }
  if (v10 < result)
  {
    __break(1u);
    return result;
  }
  uint64_t v12 = Deque._UnsafeHandle.buffer(for:)(result, v10);
  uint64_t result = a2(v12);
  if (!v4)
  {
    uint64_t v11 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v11, 1, a3);
  }
  return result;
}

uint64_t sub_24A51C10C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = Deque.makeIterator()(*v2, *(void *)(a1 + 16));
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  return result;
}

uint64_t sub_24A51C168(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_24A51C1BC(uint64_t a1)
{
  uint64_t v2 = sub_24A521030(*v1, *(void *)(a1 + 16));
  swift_release();
  return v2;
}

uint64_t sub_24A51C1F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_24A520F48(a2, a3, *v4, *(void *)(a4 + 16));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  swift_release();
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v10;
  return v12;
}

uint64_t sub_24A51C264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.withContiguousStorageIfAvailable<A>(_:)(a1, a2, *v4, *(void *)(a4 + 16), a3);
}

uint64_t Deque.count.getter(uint64_t a1, uint64_t a2)
{
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v3);
  return v4;
}

uint64_t Deque.startIndex.getter()
{
  return 0;
}

uint64_t Deque.endIndex.getter(uint64_t a1, uint64_t a2)
{
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v3);
  return v4;
}

uint64_t Deque.indices.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v3);
  if ((v4 & 0x8000000000000000) == 0) {
    return 0;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall Deque.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Deque.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Int __swiftcall Deque.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Deque.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall Deque.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall Deque.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = sub_24A50CF14(_, offsetBy, limitedBy);
  Swift::Bool v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

Swift::Int __swiftcall Deque.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t Deque.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    Swift::Int result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v10);
    if (v12 > v5)
    {
      uint64_t v6 = MEMORY[0x270FA5388](result);
      uint64_t v10 = a3;
      uint64_t v11 = v5;
      MEMORY[0x270FA5388](v6);
      _OWORD v9[2] = a3;
      void v9[3] = a3;
      v9[4] = sub_24A5218EC;
      v9[5] = v7;
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
      return sub_24A4AFEA4((uint64_t)sub_24A5226E8, (uint64_t)v9, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, v8, a3, MEMORY[0x263F8E4E0], (uint64_t)&v12);
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A5210D8(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v5(a1);
}

void (*Deque.subscript.modify(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = (uint64_t)v3;
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  Swift::Int result = (void (*)(uint64_t))malloc(*(void *)(v9 + 64));
  v7[5] = (uint64_t)result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = (uint64_t)result;
    Swift::Int result = (void (*)(uint64_t))sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v12);
    if (*v7 > a2)
    {
      v7[1] = Deque._prepareForModify(at:)(v11, a2, a3);
      return sub_24A51C798;
    }
  }
  __break(1u);
  return result;
}

void sub_24A51C798(uint64_t a1)
{
  BOOL v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  BOOL v2 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  sub_24A51C9E0(*(void *)(*(void *)a1 + 16), *(void *)a1 + 8, (uint64_t)v2, v4);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v2, v4);
  free(v2);
  free(v1);
}

uint64_t Deque._prepareForModify(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = &v18[-v7 - 8];
  sub_24A5BC3C0();
  uint64_t v9 = sub_24A5BC3B0();
  if ((v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v10 = *v3;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v11);
  *(&v17 - 4) = v5;
  *(&v17 - 3) = TupleTypeMetadata2;
  uint64_t v16 = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A5218C8, (uint64_t)(&v17 - 6), v10, (uint64_t)&type metadata for _DequeBufferHeader, v5, v13, TupleTypeMetadata2, MEMORY[0x263F8E4E0], (uint64_t)v18);
  uint64_t v14 = *(void *)v8;
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, &v8[*(int *)(TupleTypeMetadata2 + 48)], v5);
  return v14;
}

uint64_t sub_24A51C9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v11);
  uint64_t v12 = type metadata accessor for Deque();
  Deque._finalizeModify(_:_:)(v9, (uint64_t)v7, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a4);
}

uint64_t sub_24A51CADC@<X0>(Swift::Int forOffset@<X2>, Swift::Int *a2@<X8>)
{
  Swift::Int position = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  swift_getTupleTypeMetadata2();
  *a2 = position;
  return sub_24A5BBD10();
}

uint64_t Deque._finalizeModify(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v13 = v5;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v9 = v5;
  uint64_t v10 = sub_24A521988;
  uint64_t v11 = &v12;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v8, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, v6, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v16);
}

uint64_t sub_24A51CC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v9 + *(void *)(v8 + 72) * v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v12, v13);
  return sub_24A544CAC((uint64_t)v7, v11, a5);
}

uint64_t Deque.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::Int result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v5);
    if (v6 >= a2)
    {
      type metadata accessor for Deque();
      swift_retain();
      swift_getWitnessTable();
      sub_24A5BC5C0();
      return v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6)
{
  sub_24A5219A8(a1, a2, a3, a4, a5, a6);
  return swift_release();
}

uint64_t Deque.replaceSubrange<A>(_:with:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24A521274(a1, a2, a3, a4, a5, a6);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);
  return v8(a3, a5);
}

void (*Deque.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[5] = a4;
  v9[6] = v4;
  void v9[3] = a2;
  v9[4] = a3;
  *uint64_t v9 = Deque.subscript.getter(a2, a3, *v4, *(void *)(a4 + 16));
  v9[1] = v10;
  _OWORD v9[2] = v11;
  return sub_24A51CF34;
}

void sub_24A51CF34(uint64_t **a1, char a2)
{
  BOOL v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[5];
  uint64_t v7 = (*a1)[3];
  Swift::Int v6 = (*a1)[4];
  uint64_t v8 = (*a1)[2];
  if (a2)
  {
    swift_retain();
    sub_24A5219A8(v3, v4, v8, v7, v6, v5);
    swift_release();
  }
  else
  {
    sub_24A5219A8(**a1, v4, v8, v7, v6, v5);
  }
  swift_release();
  free(v2);
}

uint64_t sub_24A51CFEC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, *(void *)(a1 + 16), MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v5);
  *a2 = v6;
  return result;
}

void (*sub_24A51D070(uint64_t **a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)sub_24A51D12C(v7, *a2, *v3, *(void *)(a3 + 16));
  return sub_24A51D0E4;
}

void sub_24A51D0E4(void *a1)
{
  BOOL v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_24A51D12C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v7 = *(void *)(a4 - 8);
  *a1 = a4;
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(void *)(v7 + 64));
  Deque.subscript.getter(a2, a3, a4);
  return sub_24A50EF90;
}

uint64_t sub_24A51D1E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Deque.subscript.getter(*a1, a1[1], *v3, *(void *)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t sub_24A51D228@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, *(void *)(a1 + 16), MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v5);
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = 0;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_24A51D2B4(uint64_t a1)
{
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v1, (uint64_t)&type metadata for _DequeBufferHeader, *(void *)(a1 + 16), MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v3);
  return v4;
}

Swift::Void __swiftcall Deque.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(v2 + 16);
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v14);
  if (a2 < 0 || v15 <= a1) {
    goto LABEL_9;
  }
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v14);
  if (v15 <= a2)
  {
LABEL_10:
    __break(1u);
    return;
  }
  sub_24A5BC3C0();
  uint64_t v8 = sub_24A5BC3B0();
  if ((v8 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v9 = *v3;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v13[8] = v7;
  v13[9] = a1;
  Swift::Int v14 = a2;
  MEMORY[0x270FA5388](v10);
  v13[2] = v7;
  v13[3] = sub_24A521AD0;
  v13[4] = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v13, v9, (uint64_t)&type metadata for _DequeBufferHeader, v7, v12, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v15);
}

uint64_t sub_24A51D528(int a1, int a2, Swift::Int forOffset, Swift::Int a4)
{
  return sub_24A5BBD60();
}

uint64_t Deque.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 + 16);
  sub_24A5BC3C0();
  uint64_t v9 = sub_24A5BC3B0();
  if ((v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v10 = *v4;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  void v18[2] = v8;
  v18[3] = a4;
  void v18[4] = a1;
  v18[5] = a2;
  MEMORY[0x270FA5388](v11);
  _OWORD v14[2] = v8;
  uint64_t v15 = sub_24A5BBD20();
  uint64_t v16 = sub_24A521AF0;
  uint64_t v17 = v18;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4((uint64_t)sub_24A5226D0, (uint64_t)v14, v10, (uint64_t)&type metadata for _DequeBufferHeader, v8, v12, v15, MEMORY[0x263F8E4E0], (uint64_t)&v19);
}

uint64_t sub_24A51D72C@<X0>(uint64_t *a1@<X0>, void (*a2)(void *)@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t result = a1[2];
  uint64_t v10 = a1[1] + result;
  if (*a1 < v10) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 1, 1, a3);
  }
  if (v10 < result)
  {
    __break(1u);
  }
  else
  {
    Deque._UnsafeHandle.buffer(for:)(result, v10);
    uint64_t v11 = sub_24A5BBD90();
    uint64_t v13 = v12;
    v14[0] = v11;
    v14[1] = v12;
    a2(v14);
    if (!v4) {
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 0, 1, a3);
    }
    return sub_24A51D870((uint64_t)v14, v11, v13);
  }
  return result;
}

uint64_t sub_24A51D870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_24A5BB540();
  uint64_t result = sub_24A5BB540();
  if (!v5)
  {
LABEL_5:
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (!result) {
    goto LABEL_8;
  }
  if (v5 != result)
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  if (*(void *)(a1 + 8) == a3) {
    return result;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a3, a4);
}

uint64_t sub_24A51D914(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_24A520CD4(a1, a2, a3, a4, (void (*)(uint64_t, void))sub_24A5210D8);
}

void (*sub_24A51D92C(uint64_t **a1, uint64_t *a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = (uint64_t)v3;
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  uint64_t result = (void (*)(uint64_t))malloc(*(void *)(v9 + 64));
  v7[5] = (uint64_t)result;
  uint64_t v11 = *a2;
  if (v11 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = (uint64_t)result;
    uint64_t result = (void (*)(uint64_t))sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v13);
    if (v11 < *v7)
    {
      v7[1] = Deque._prepareForModify(at:)(v12, v11, a3);
      return sub_24A51C798;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A51DA74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_24A5219A8(*a1, a1[1], a1[2], *a2, a2[1], a3);
  return swift_release();
}

void (*sub_24A51DAC4(void *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[3] = v3;
  v7[4] = a3;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  v7[5] = *a2;
  v7[6] = v9;
  *uint64_t v7 = Deque.subscript.getter(v8, v9, *v3, *(void *)(a3 + 16));
  v7[1] = v10;
  v7[2] = v11;
  return sub_24A51DB48;
}

void sub_24A51DB48(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v6 = (*a1)[5];
  Swift::Int v5 = (*a1)[6];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[2];
  if (a2)
  {
    swift_retain();
    sub_24A5219A8(v3, v4, v8, v6, v5, v7);
    swift_release();
  }
  else
  {
    sub_24A5219A8(**a1, v4, v8, v6, v5, v7);
  }
  swift_release();
  free(v2);
}

uint64_t sub_24A51DC00()
{
  return sub_24A5BB4E0();
}

void sub_24A51DC80(Swift::Int *a1, Swift::Int *a2)
{
}

uint64_t sub_24A51DC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_24A51DCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

Swift::Void __swiftcall Deque.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  sub_24A5BC3C0();
  char v5 = sub_24A5BC3B0();
  sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v6);
  if (v7 < a1 || (v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, 1);
  }
}

Swift::Int sub_24A51DDA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v50 = a8;
  uint64_t v56 = a6;
  uint64_t v42 = a4;
  uint64_t v59 = (char *)a3;
  uint64_t v52 = a2;
  uint64_t v58 = (CollectionsInternal::_DequeSlot *)a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = sub_24A5BC290();
  uint64_t v48 = *(void *)(v17 - 8);
  uint64_t v49 = v17;
  MEMORY[0x270FA5388](v17);
  int v47 = (char *)&v41 - v18;
  uint64_t v55 = a13;
  uint64_t v53 = a12;
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v21 = (char *)&v41 - v20;
  uint64_t v22 = sub_24A5BC2A0();
  uint64_t v23 = *(void *)(v22 - 8);
  Swift::Int result = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v41 - v25;
  uint64_t v51 = a5;
  if (a5 < (uint64_t)v59)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v27 = *(void *)(AssociatedConformanceWitness + 8);
  Swift::Int result = sub_24A5BB530();
  if ((result & 1) == 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v45 = v27;
  uint64_t v57 = a11;
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v46 = a7;
  uint64_t v43 = v28 + 16;
  long long v44 = v29;
  v29(v26, a7, AssociatedTypeWitness);
  swift_getWitnessTable();
  sub_24A5BBBE0();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  uint64_t v30 = v54;
  uint64_t v31 = swift_getAssociatedConformanceWitness();
  uint64_t v33 = v51;
  uint64_t v32 = v52;
  Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)((uint64_t)v59, v51, (uint64_t)v21, &v58->position, v52, v57, v30, v31);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  uint64_t v59 = v21;
  Swift::Int result = v34(v21, v30);
  uint64_t v35 = v50;
  if (v50 < 0)
  {
    if (v42 < v33)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    return Deque._UnsafeHandle.uncheckedRemove(offsets:)(v33, v42, v58, v32, v57);
  }
  else if (v50)
  {
    uint64_t v36 = v46;
    Swift::Int result = sub_24A5BB530();
    if (result)
    {
      uint64_t v37 = v31;
      long long v38 = v47;
      v44(v47, v36, AssociatedTypeWitness);
      uint64_t v39 = v49;
      swift_getWitnessTable();
      uint64_t v40 = (uint64_t)v59;
      sub_24A5BBBE0();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v39);
      return Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)(v40, v35, v33, (uint64_t)v58, v32, v57, v54, v37);
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t Deque.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_24A521B10(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  return v5;
}

uint64_t Deque.init<A>(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = sub_24A521C30(a1, a2, a3, a4);
  (*(void (**)(uint64_t, void *))(*(a3 - 1) + 8))(a1, a3);
  return v6;
}

uint64_t Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v54 = (char *)&v40 - v10;
  uint64_t v57 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v55 = (char *)&v40 - v13;
  uint64_t v58 = v7;
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  int v61 = v4;
  Swift::Int v14 = v4;
  if ((void *)sub_24A5BB9F0() == a3) {
    sub_24A5BC560();
  }
  uint64_t result = sub_24A5BB880();
  if (v62[0] == 1)
  {
    uint64_t v41 = v8;
    uint64_t v16 = sub_24A5BB860();
    uint64_t v17 = *v14;
    swift_retain();
    sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v17, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v38);
    uint64_t result = swift_release();
    Swift::Int v18 = *(void *)v62 + v16;
    if (!__OFADD__(*(void *)v62, v16))
    {
      uint64_t v53 = a4;
      uint64_t v51 = sub_24A5BC3C0();
      char v19 = sub_24A5BC3B0();
      uint64_t v20 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v14, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v38);
      if (*(uint64_t *)v62 < v18 || (v19 & 1) == 0)
      {
        type metadata accessor for Deque._Storage();
        Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v18, 0);
      }
      uint64_t v52 = &v40;
      uint64_t v21 = *v14;
      uint64_t v22 = MEMORY[0x270FA5388](v20);
      *(&v40 - 4) = v7;
      *(&v40 - 3) = (uint64_t)a3;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = AssociatedTypeWitness;
      *(&v40 - 4) = v7;
      *(&v40 - 3) = v23;
      uint64_t v39 = v24;
      swift_retain();
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
      sub_24A4AFEA4((uint64_t)sub_24A5226D0, (uint64_t)(&v40 - 6), v21, (uint64_t)&type metadata for _DequeBufferHeader, v7, v50, v23, MEMORY[0x263F8E4E0], (uint64_t)v62);
      swift_release();
      uint64_t v52 = a3;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v26 = v54;
      uint64_t v49 = AssociatedConformanceWitness;
      sub_24A5BBEE0();
      int v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
      uint64_t v48 = v57 + 48;
      if (v47(v26, 1, v7) == 1)
      {
LABEL_9:
        (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v55, AssociatedTypeWitness);
      }
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      uint64_t v27 = MEMORY[0x263F8E628];
      v57 += 32;
      uint64_t v45 = (void (**)(char *, uint64_t))(v57 - 24);
      uint64_t v28 = MEMORY[0x263F8E658];
      uint64_t v44 = MEMORY[0x263F8EE60] + 8;
      v46(v12, v26, v7);
      while (1)
      {
        uint64_t v34 = *v14;
        swift_retain();
        uint64_t v35 = MEMORY[0x263F8D6C8];
        sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v34, (uint64_t)&type metadata for _DequeBufferHeader, v7, v27, MEMORY[0x263F8D6C8], v28, v38);
        uint64_t result = swift_release();
        Swift::Int v36 = *(void *)v62 + 1;
        if (__OFADD__(*(void *)v62, 1)) {
          break;
        }
        char v37 = sub_24A5BC3B0();
        uint64_t v29 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v14, (uint64_t)&type metadata for _DequeBufferHeader, v7, v27, v35, v28, v38);
        if (*(uint64_t *)v62 < v36 || (v37 & 1) == 0)
        {
          type metadata accessor for Deque._Storage();
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v36, 0);
        }
        uint64_t v30 = *v14;
        uint64_t v31 = MEMORY[0x270FA5388](v29);
        uint64_t v32 = v52;
        *(&v40 - 6) = v7;
        *(&v40 - 5) = (uint64_t)v32;
        *(&v40 - 4) = v53;
        *(&v40 - 3) = (uint64_t)v12;
        MEMORY[0x270FA5388](v31);
        *(&v40 - 4) = v7;
        *(&v40 - 3) = (uint64_t)sub_24A521CE0;
        swift_retain();
        sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)(&v40 - 6), v30, (uint64_t)&type metadata for _DequeBufferHeader, v7, v50, v44, MEMORY[0x263F8E4E0], (uint64_t)v62);
        swift_release();
        (*v45)(v12, v7);
        uint64_t v26 = v54;
        sub_24A5BBEE0();
        unsigned int v33 = v47(v26, 1, v7);
        uint64_t v27 = MEMORY[0x263F8E628];
        uint64_t v28 = MEMORY[0x263F8E658];
        if (v33 == 1) {
          goto LABEL_9;
        }
        v46(v12, v26, v7);
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_24A5BBAF0();
  if (v8 < 1)
  {
    uint64_t v15 = Deque._Storage.init()();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    return v15;
  }
  else
  {
    uint64_t v9 = v8;
    uint64_t v10 = Deque._Storage.init(minimumCapacity:)();
    uint64_t v11 = MEMORY[0x270FA5388](v10);
    unsigned char v16[8] = a2;
    v16[9] = a3;
    v16[10] = a4;
    v16[11] = v9;
    v16[12] = a1;
    MEMORY[0x270FA5388](v11);
    v16[2] = a2;
    v16[3] = sub_24A521D04;
    v16[4] = v12;
    swift_retain();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A521D30, (uint64_t)v16, v10, (uint64_t)&type metadata for _DequeBufferHeader, a2, v13, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v17);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    return v10;
  }
}

uint64_t sub_24A51EC68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = result;
    Deque._UnsafeHandle.buffer(for:)(0, a3);
    uint64_t v12 = sub_24A5BBD90();
    uint64_t v14 = v13;
    MEMORY[0x270FA5388](v12);
    if (sub_24A5BB9F0() == a6) {
      sub_24A5BC560();
    }
    uint64_t result = sub_24A5BB880();
    if (v16 == 1) {
      uint64_t result = UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a4, v12, v14, a5, a6, a7);
    }
    *(void *)(v15 + 8) = a3;
  }
  return result;
}

uint64_t sub_24A51EDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[1] = a2;
  v11[0] = a1;
  uint64_t v8 = sub_24A5BB580();
  uint64_t WitnessTable = swift_getWitnessTable();
  return UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)((uint64_t)v11, a3, a4, a5, v8, WitnessTable);
}

uint64_t Deque.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v14);
  Swift::Int v6 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    sub_24A5BC3C0();
    char v7 = sub_24A5BC3B0();
    uint64_t v8 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v14);
    if (v16 < v6 || (v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v6, 0);
    }
    uint64_t v9 = *v2;
    uint64_t v10 = MEMORY[0x270FA5388](v8);
    uint64_t v14 = v4;
    uint64_t v15 = a1;
    MEMORY[0x270FA5388](v10);
    v13[2] = v4;
    v13[3] = sub_24A521D60;
    v13[4] = v11;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    return sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v13, v9, (uint64_t)&type metadata for _DequeBufferHeader, v4, v12, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v16);
  }
  return result;
}

uint64_t sub_24A51F048(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a3;
  swift_retain();
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v22);
  uint64_t result = swift_release();
  Swift::Int v14 = v24 + a2;
  if (__OFADD__(v24, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = a1;
    sub_24A5BC3C0();
    char v15 = sub_24A5BC3B0();
    uint64_t v16 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v22);
    if (v24 < v14 || (v15 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
    }
    uint64_t v17 = *a3;
    uint64_t v18 = MEMORY[0x270FA5388](v16);
    unsigned char v21[8] = a4;
    v21[9] = a5;
    v21[10] = a6;
    v21[11] = v23;
    uint64_t v22 = a2;
    MEMORY[0x270FA5388](v18);
    void v21[2] = a4;
    v21[3] = sub_24A522434;
    v21[4] = v19;
    swift_retain();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v21, v17, (uint64_t)&type metadata for _DequeBufferHeader, a4, v20, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v24);
    return swift_release();
  }
  return result;
}

uint64_t sub_24A51F2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = (Swift::Int *)MEMORY[0x270FA5388](a1);
  uint64_t v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Deque._UnsafeHandle.availableSegments()(v11, (uint64_t)v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
  Swift::Int v14 = (void (*)(void, void))type metadata accessor for _UnsafeMutableWrappedBuffer();
  uint64_t result = _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(a5, v13, v14, a3, a4);
  uint64_t v16 = *(void *)(a1 + 8);
  BOOL v17 = __OFADD__(v16, result);
  uint64_t v18 = v16 + result;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(a1 + 8) = v18;
  }
  return result;
}

uint64_t sub_24A51F3DC(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Deque._UnsafeHandle.uncheckedAppend(_:)(a3, (uint64_t)a1, a2, a5);
  Deque._UnsafeHandle.availableSegments()(a1, (uint64_t)v14);
  uint64_t v7 = type metadata accessor for _UnsafeMutableWrappedBuffer();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(a4, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  Swift::Int v11 = a1[1];
  BOOL v12 = __OFADD__(v11, result);
  Swift::Int v13 = v11 + result;
  if (v12) {
    __break(1u);
  }
  else {
    a1[1] = v13;
  }
  return result;
}

uint64_t Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v22 = v9;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  if (sub_24A5BB9F0() == a3) {
    sub_24A5BC560();
  }
  uint64_t result = sub_24A5BB880();
  if (LOBYTE(v25[0]) == 1)
  {
    uint64_t result = sub_24A5BBAF0();
    if (result >= 1)
    {
      uint64_t v11 = result;
      uint64_t v12 = *v4;
      swift_retain();
      sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v21);
      uint64_t result = swift_release();
      Swift::Int v13 = v25[0] + v11;
      if (__OFADD__(v25[0], v11))
      {
        __break(1u);
      }
      else
      {
        sub_24A5BC3C0();
        char v14 = sub_24A5BC3B0();
        uint64_t v15 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v21);
        if (v25[0] < v13 || (v14 & 1) == 0)
        {
          type metadata accessor for Deque._Storage();
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v13, 0);
        }
        uint64_t v16 = *v5;
        uint64_t v17 = MEMORY[0x270FA5388](v15);
        v20[8] = v9;
        v20[9] = a3;
        v20[10] = a4;
        v20[11] = v11;
        uint64_t v21 = a1;
        MEMORY[0x270FA5388](v17);
        v20[2] = v9;
        v20[3] = sub_24A521D94;
        v20[4] = v18;
        swift_retain();
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
        sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v20, v16, (uint64_t)&type metadata for _DequeBufferHeader, v9, v19, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v25);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_24A51F7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)(a6 - 8);
  Swift::Int v13 = (Swift::Int *)MEMORY[0x270FA5388](a1);
  uint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Deque._UnsafeHandle.availableSegments()(v13, (uint64_t)v21);
  uint64_t v16 = type metadata accessor for _UnsafeMutableWrappedBuffer();
  _UnsafeMutableWrappedBuffer.prefix(_:)(a3, (uint64_t)v22);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v15, a4, a6);
  uint64_t result = _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v15, v16, a6, a7);
  uint64_t v18 = *(void *)(a1 + 8);
  BOOL v19 = __OFADD__(v18, a3);
  uint64_t v20 = v18 + a3;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(a1 + 8) = v20;
  }
  return result;
}

uint64_t Deque.insert(_:at:)(uint64_t result, Swift::Int a2, uint64_t a3)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = result;
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(a3 + 16);
  swift_retain();
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v16);
  uint64_t result = swift_release();
  if (v18 < a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_retain();
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v16);
  uint64_t result = swift_release();
  Swift::Int v8 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  sub_24A5BC3C0();
  char v9 = sub_24A5BC3B0();
  uint64_t v10 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v16);
  if (v18 < v8 || (v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v8, 0);
  }
  uint64_t v11 = *v3;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v15[8] = v7;
  v15[9] = a2;
  uint64_t v16 = v5;
  uint64_t v17 = v3;
  MEMORY[0x270FA5388](v12);
  v15[2] = v7;
  v15[3] = sub_24A521DEC;
  void v15[4] = v13;
  swift_retain();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v15, v11, (uint64_t)&type metadata for _DequeBufferHeader, v7, v14, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v18);
  return swift_release();
}

uint64_t sub_24A51FB9C(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v15) {
    return Deque._UnsafeHandle.uncheckedPrepend(_:)(a4, a1, a2, a6);
  }
  uint64_t v16 = *v12;
  swift_retain();
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v16, (uint64_t)&type metadata for _DequeBufferHeader, a6, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v19);
  swift_release();
  if (v21 == a3) {
    return Deque._UnsafeHandle.uncheckedAppend(_:)(a4, (uint64_t)a1, a2, a6);
  }
  Deque._UnsafeHandle.openGap(ofSize:atOffset:)(1, a3, a1, (uint64_t)&v21);
  uint64_t result = sub_24A5BB540();
  if (result)
  {
    uint64_t v18 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, a6);
    return sub_24A544CAC((uint64_t)v14, v18, a6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Deque.insert<A>(contentsOf:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A521E0C(a1, a2, a3, a4, a5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);
  return v7(a1, a4);
}

uint64_t sub_24A51FDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v18, v19);
  return Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v16, a4, a5, a1, a2, a6, a7, a8);
}

uint64_t Deque.remove(at:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = result;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a2 + 16);
  swift_retain();
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v12);
  uint64_t result = swift_release();
  if (v13 <= v3)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_24A5BC3C0();
  uint64_t v6 = sub_24A5BC3B0();
  if ((v6 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v7 = *v2;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v11[8] = v5;
  v11[9] = v2;
  uint64_t v12 = v3;
  MEMORY[0x270FA5388](v8);
  void v11[2] = v5;
  v11[3] = v5;
  void v11[4] = sub_24A5220B4;
  v11[5] = v9;
  swift_retain();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A521880, (uint64_t)v11, v7, (uint64_t)&type metadata for _DequeBufferHeader, v5, v10, v5, MEMORY[0x263F8E4E0], (uint64_t)&v13);
  return swift_release();
}

Swift::Int sub_24A5200A8(CollectionsInternal::_DequeSlot *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  Swift::Int result = Deque.subscript.getter(a4, *a3, a5);
  uint64_t v10 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
    __break(1u);
  }
  else if (v10 >= a4)
  {
    return Deque._UnsafeHandle.uncheckedRemove(offsets:)(a4, v10, a1, a2, a5);
  }
  __break(1u);
  return result;
}

uint64_t Deque.removeSubrange(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a3 + 16);
  Swift::Int result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v13);
  if (v14 < a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_24A5BC3C0();
  uint64_t v7 = sub_24A5BC3B0();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v12[8] = v6;
  v12[9] = v5;
  uint64_t v13 = a2;
  MEMORY[0x270FA5388](v9);
  _OWORD v12[2] = v6;
  v12[3] = sub_24A5220D4;
  v12[4] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v12, v8, (uint64_t)&type metadata for _DequeBufferHeader, v6, v11, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v14);
}

uint64_t Deque._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *v2;
  swift_getWitnessTable();
  uint64_t result = sub_24A5BBBC0();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    sub_24A5BC3C0();
    uint64_t v7 = sub_24A5BC3B0();
    if ((v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._makeUniqueCopy()();
    }
    uint64_t v8 = *v2;
    uint64_t v9 = MEMORY[0x270FA5388](v7);
    v12[8] = v6;
    MEMORY[0x270FA5388](v9);
    _OWORD v12[2] = v6;
    v12[3] = v6;
    v12[4] = sub_24A52210C;
    v12[5] = v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A5226E8, (uint64_t)v12, v8, (uint64_t)&type metadata for _DequeBufferHeader, v6, v11, v6, MEMORY[0x263F8E4E0], (uint64_t)&v13);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 0, 1, v6);
  }
  return result;
}

Swift::Bool __swiftcall Deque._customRemoveLast(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  Swift::Int v3 = a1;
  uint64_t v4 = *(void *)(v1 + 16);
  LOBYTE(a1) = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v12);
  if (v14 < v3)
  {
LABEL_7:
    __break(1u);
    return a1;
  }
  sub_24A5BC3C0();
  uint64_t v5 = sub_24A5BC3B0();
  if ((v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v12 = v4;
  Swift::Int v13 = v3;
  MEMORY[0x270FA5388](v7);
  void v11[2] = v4;
  v11[3] = sub_24A522138;
  void v11[4] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v11, v6, (uint64_t)&type metadata for _DequeBufferHeader, v4, v9, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v14);
  LOBYTE(a1) = 1;
  return a1;
}

uint64_t Deque.removeFirst()(uint64_t a1)
{
  uint64_t v11 = *v1;
  swift_getWitnessTable();
  uint64_t result = sub_24A5BBBC0();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 16);
    sub_24A5BC3C0();
    uint64_t v5 = sub_24A5BC3B0();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._makeUniqueCopy()();
    }
    uint64_t v6 = *v1;
    uint64_t v7 = MEMORY[0x270FA5388](v5);
    v10[8] = v4;
    MEMORY[0x270FA5388](v7);
    _OWORD v10[2] = v4;
    v10[3] = v4;
    v10[4] = sub_24A52216C;
    v10[5] = v8;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    return sub_24A4AFEA4((uint64_t)sub_24A5226E8, (uint64_t)v10, v6, (uint64_t)&type metadata for _DequeBufferHeader, v4, v9, v4, MEMORY[0x263F8E4E0], (uint64_t)&v11);
  }
  return result;
}

Swift::Void __swiftcall Deque.removeFirst(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(v1 + 16);
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v11);
  if (v13 < a1)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_24A5BC3C0();
  uint64_t v5 = sub_24A5BC3B0();
  if ((v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v11 = v4;
  Swift::Int v12 = a1;
  MEMORY[0x270FA5388](v7);
  _OWORD v10[2] = v4;
  v10[3] = sub_24A522198;
  v10[4] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v10, v6, (uint64_t)&type metadata for _DequeBufferHeader, v4, v9, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v13);
}

Swift::Void __swiftcall Deque.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  if (keepingCapacity)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    sub_24A5BC3C0();
    uint64_t v4 = sub_24A5BC3B0();
    if ((v4 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._makeUniqueCopy()();
    }
    uint64_t v5 = *v2;
    uint64_t v6 = MEMORY[0x270FA5388](v4);
    void v9[8] = v3;
    MEMORY[0x270FA5388](v6);
    _OWORD v9[2] = v3;
    void v9[3] = sub_24A5221CC;
    v9[4] = v7;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v9, v5, (uint64_t)&type metadata for _DequeBufferHeader, v3, v8, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v10);
  }
  else
  {
    swift_release();
    *uint64_t v2 = Deque._Storage.init()();
  }
}

uint64_t sub_24A520A34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Deque.init()(*(void *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_24A520A60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A521274(*a1, a1[1], a2, a5, a3, a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v7(a2, a3);
}

uint64_t sub_24A520AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = sub_24A521B10(a1, a2, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t sub_24A520B58@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = sub_24A521C30(a1, *(void *)(a4 + 16), a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(a2 - 1) + 8))(a1, a2);
  *a5 = v8;
  return result;
}

uint64_t sub_24A520BD4(uint64_t a1, uint64_t a2)
{
  Deque.append(_:)(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v4(a1);
}

uint64_t sub_24A520C40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  Deque.append<A>(contentsOf:)(a1, a4, a2, a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void *))(*(a2 - 1) + 8);
  return v6(a1, a2);
}

uint64_t sub_24A520CBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_24A520CD4(a1, a2, a3, a4, (void (*)(uint64_t, void))Deque.insert(_:at:));
}

uint64_t sub_24A520CD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void))
{
  a5(a1, *a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v7(a1);
}

uint64_t sub_24A520D48(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A521E0C(a1, *a2, a5, a3, a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v7(a1, a3);
}

uint64_t sub_24A520DC8(uint64_t *a1, uint64_t a2)
{
  return Deque.remove(at:)(*a1, a2);
}

uint64_t sub_24A520DD0(uint64_t *a1, uint64_t a2)
{
  return Deque.removeSubrange(_:)(*a1, a1[1], a2);
}

uint64_t sub_24A520DE4(Swift::Int a1)
{
  return 1;
}

uint64_t sub_24A520E0C()
{
  return sub_24A5BBCA0();
}

uint64_t sub_24A520E84(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  uint64_t v7 = a2;
  uint64_t v8 = type metadata accessor for Deque.Iterator();
  uint64_t v9 = sub_24A522694;
  uint64_t v10 = &v11;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A5226D0, (uint64_t)v6, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, v4, v8, MEMORY[0x263F8E4E0], (uint64_t)v14);
  return v15;
}

uint64_t sub_24A520F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v9 = a4;
  type metadata accessor for Deque.Iterator();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  char v11 = sub_24A5225BC;
  uint64_t v12 = &v13;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A5218C8, (uint64_t)v8, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v6, TupleTypeMetadata2, MEMORY[0x263F8E4E0], (uint64_t)v18);
  return v19;
}

uint64_t sub_24A521030(uint64_t a1, uint64_t a2)
{
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v3);
  return sub_24A51BB60();
}

uint64_t sub_24A5210D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v13);
  if (v14 <= a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_24A5BC3C0();
  uint64_t v7 = sub_24A5BC3B0();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._makeUniqueCopy()();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v12[8] = v6;
  v12[9] = a2;
  uint64_t v13 = v5;
  MEMORY[0x270FA5388](v9);
  _OWORD v12[2] = v6;
  v12[3] = sub_24A52253C;
  v12[4] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v12, v8, (uint64_t)&type metadata for _DequeBufferHeader, v6, v11, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v14);
}

void sub_24A521274(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = a3;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void **)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v44 = (char *)v39 - v15;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v48 = v6;
  uint64_t v16 = *v6;
  uint64_t v17 = *(void *)(a4 + 16);
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v17, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v38);
  if (v49 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  Swift::Int v43 = a2;
  BOOL v18 = __OFSUB__(a2, a1);
  Swift::Int v19 = a2 - a1;
  if (v18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v42 = v11;
  uint64_t v20 = sub_24A5BBAF0();
  uint64_t v21 = v20 - v19;
  if (__OFSUB__(v20, v19))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v22 = v20;
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v16, (uint64_t)&type metadata for _DequeBufferHeader, v17, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v38);
  Swift::Int v23 = v49 + v21;
  if (__OFADD__(v49, v21))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v40 = v21;
  uint64_t v41 = AssociatedTypeWitness;
  sub_24A5BC3C0();
  uint64_t v24 = v48;
  char v25 = sub_24A5BC3B0();
  sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v24, (uint64_t)&type metadata for _DequeBufferHeader, v17, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v38);
  if (v49 < v23 || (v25 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v23, 0);
  }
  if (v22 >= v19) {
    uint64_t v22 = v19;
  }
  if (!__OFADD__(a1, v22))
  {
    v39[0] = a1 + v22;
    v39[1] = v19;
    uint64_t v26 = v45;
    uint64_t v27 = v46;
    uint64_t v28 = a1;
    v39[2] = 0;
    uint64_t v29 = v47;
    sub_24A5BBAD0();
    uint64_t v30 = v44;
    sub_24A5BBB10();
    uint64_t v31 = (uint64_t (*)(char *, uint64_t))v42[1];
    uint64_t v32 = v14;
    uint64_t v33 = v41;
    uint64_t v34 = v31(v32, v41);
    uint64_t v42 = v39;
    uint64_t v48 = (uint64_t *)*v48;
    uint64_t v35 = MEMORY[0x270FA5388](v34);
    v39[-12] = v17;
    v39[-11] = v27;
    v39[-10] = v29;
    v39[-9] = v28;
    uint64_t v36 = v39[0];
    v39[-8] = v43;
    v39[-7] = v36;
    v39[-6] = v26;
    v39[-5] = v30;
    v39[-4] = v40;
    v39[-3] = v22;
    MEMORY[0x270FA5388](v35);
    v39[-4] = v17;
    v39[-3] = sub_24A5224FC;
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)&v39[-6], (uint64_t)v48, (uint64_t)&type metadata for _DequeBufferHeader, v17, v37, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v49);
    v31(v30, v33);
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_24A5216C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  uint64_t v8 = a3;
  uint64_t v9 = type metadata accessor for Deque.Iterator();
  uint64_t v10 = sub_24A522674;
  uint64_t v11 = &v12;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A5218C8, (uint64_t)v7, a1, (uint64_t)&type metadata for _DequeBufferHeader, a3, v5, v9, MEMORY[0x263F8E4E0], (uint64_t)v16);
  return v17;
}

CollectionsInternal::_DequeSlot sub_24A52178C@<X0>(CollectionsInternal::_DequeSlot *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(CollectionsInternal::_DequeSlot **)(v2 + 24);
  result.Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1].position).position;
  if (result.position && result.position != v4[1].position)
  {
    v4[1].Swift::Int position = 0;
    v4[2].Swift::Int position = result.position;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_24A5217F8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A4AFE8C(a1, a2, *(uint64_t (**)(void))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 16), MEMORY[0x263F8D4F8], a3);
}

uint64_t sub_24A521824@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1 + *(void *)(*(void *)(*(void *)(v2 + 16) - 8) + 72) * *(void *)(v2 + 24));
}

uint64_t sub_24A521880(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A4AFE8C(a1, a2, *(uint64_t (**)(void))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 24), *(void *)(v3 + 24), a3);
}

uint64_t sub_24A5218A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A51C044(a1, *(uint64_t (**)(uint64_t))(v2 + 32), *(void *)(v2 + 24), a2);
}

uint64_t sub_24A5218C8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A4AFE8C(a1, a2, *(uint64_t (**)(void))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t sub_24A5218EC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  v6.Swift::Int position = Deque._UnsafeHandle.slot(forOffset:)(*(void *)(v2 + 24)).position;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1 + *(void *)(*(void *)(v5 - 8) + 72) * v6.position, v5);
}

uint64_t sub_24A52196C@<X0>(Swift::Int *a1@<X8>)
{
  return sub_24A51CADC(*(void *)(v1 + 24), a1);
}

uint64_t sub_24A521988(uint64_t a1, uint64_t a2)
{
  return sub_24A51CC30(a1, a2, v2[3], v2[4], v2[2]);
}

void sub_24A5219A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6)
{
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, *(void *)(a6 + 16), MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v15);
    if (v16[0] >= a5)
    {
      v16[0] = a1;
      v16[1] = a2;
      v16[2] = a3;
      swift_getWitnessTable();
      uint64_t v13 = sub_24A5BC5E0();
      uint64_t WitnessTable = swift_getWitnessTable();
      sub_24A521274(a4, a5, (uint64_t)v16, a6, v13, WitnessTable);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_24A521AD0(int a1, int a2)
{
  return sub_24A51D528(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_24A521AF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A51D72C(a1, *(void (**)(void *))(v2 + 32), *(void *)(v2 + 24), a2);
}

uint64_t sub_24A521B10(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    uint64_t v6 = Deque.init(minimumCapacity:)(a2, a3);
    uint64_t v7 = MEMORY[0x270FA5388](v6);
    unsigned char v10[8] = a3;
    v10[9] = a2;
    v10[10] = v5;
    MEMORY[0x270FA5388](v7);
    _OWORD v10[2] = a3;
    v10[3] = sub_24A5224A8;
    v10[4] = v8;
    swift_retain();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v10, v6, (uint64_t)&type metadata for _DequeBufferHeader, a3, v9, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v11);
    swift_release();
    return v6;
  }
  return result;
}

uint64_t sub_24A521C30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = Deque._Storage.init()();
  uint64_t v7 = type metadata accessor for Deque();
  Deque.append<A>(contentsOf:)(a1, v7, a3, a4);
  return v9;
}

uint64_t sub_24A521CA0(uint64_t a1, uint64_t a2)
{
  return sub_24A51F048(a1, a2, *(uint64_t **)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_24A521CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A51F2A8(a1, v2[5], v2[3], v2[4], a2);
}

uint64_t sub_24A521CE0(Swift::Int *a1, uint64_t a2)
{
  return sub_24A51F3DC(a1, a2, v2[5], v2[6], v2[2]);
}

uint64_t sub_24A521D04(uint64_t a1, uint64_t a2)
{
  return sub_24A521DC0(a1, a2, sub_24A51EC68);
}

uint64_t sub_24A521D30(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A4AFE8C(a1, a2, *(uint64_t (**)(void))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 16), MEMORY[0x263F8EE60] + 8, a3);
}

uint64_t sub_24A521D60(uint64_t a1, uint64_t a2)
{
  return Deque._UnsafeHandle.uncheckedAppend(_:)(*(void *)(v2 + 24), a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_24A521D94(uint64_t a1, uint64_t a2)
{
  return sub_24A521DC0(a1, a2, sub_24A51F7B4);
}

uint64_t sub_24A521DC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[5], v3[6], v3[2], v3[3], v3[4]);
}

uint64_t sub_24A521DEC(Swift::Int *a1, uint64_t a2)
{
  return sub_24A51FB9C(a1, a2, v2[3], v2[4], v2[5], v2[2]);
}

uint64_t sub_24A521E0C(uint64_t result, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = v5;
  uint64_t v10 = result;
  uint64_t v11 = *v6;
  uint64_t v12 = *(void *)(a3 + 16);
  CollectionsInternal::_DequeSlot result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v22);
  if (v25 < a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = sub_24A5BBAF0();
  CollectionsInternal::_DequeSlot result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v11, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v22);
  Swift::Int v14 = v25 + v13;
  if (__OFADD__(v25, v13))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v24 = v10;
  sub_24A5BC3C0();
  char v15 = sub_24A5BC3B0();
  uint64_t v16 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v22);
  if (v25 < v14 || (v15 & 1) == 0)
  {
    type metadata accessor for Deque._Storage();
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
  }
  uint64_t v17 = *v6;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unsigned char v21[8] = v12;
  v21[9] = a4;
  v21[10] = a5;
  v21[11] = v24;
  uint64_t v22 = v13;
  Swift::Int v23 = a2;
  MEMORY[0x270FA5388](v18);
  void v21[2] = v12;
  v21[3] = sub_24A522410;
  v21[4] = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v21, v17, (uint64_t)&type metadata for _DequeBufferHeader, v12, v20, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v25);
}

Swift::Int sub_24A5220B4(CollectionsInternal::_DequeSlot *a1, uint64_t a2)
{
  return sub_24A5200A8(a1, a2, *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16));
}

Swift::Int sub_24A5220D4(CollectionsInternal::_DequeSlot *a1, uint64_t a2)
{
  return Deque._UnsafeHandle.uncheckedRemove(offsets:)(v2[3], v2[4], a1, a2, v2[2]);
}

uint64_t sub_24A52210C(uint64_t a1)
{
  return Deque._UnsafeHandle.uncheckedRemoveLast()(a1);
}

void sub_24A522138()
{
  Deque._UnsafeHandle.uncheckedRemoveLast(_:)(*(void *)(v0 + 24));
}

uint64_t sub_24A52216C(void *a1)
{
  return Deque._UnsafeHandle.uncheckedRemoveFirst()(a1);
}

void sub_24A522198()
{
  Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(*(void *)(v0 + 24));
}

void sub_24A5221CC()
{
}

uint64_t sub_24A5221F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A522214()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A522230()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A522294()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A5222B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A522314()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A522330()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A522394()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for Deque.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A522410(uint64_t a1, uint64_t a2)
{
  return sub_24A51FDE0(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t sub_24A522434(uint64_t *a1, uint64_t a2)
{
  return sub_24A522470(a1, a2);
}

uint64_t sub_24A52244C(uint64_t a1, uint64_t a2)
{
  return sub_24A51EDB8(a1, a2, v2[5], v2[6], v2[2]);
}

uint64_t sub_24A522470(uint64_t *a1, uint64_t a2)
{
  return Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(v2[5], v2[6], a1, a2, v2[2]);
}

uint64_t sub_24A5224A8(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 >= 1) {
    CollectionsInternal::_DequeSlot result = sub_24A5BBCE0();
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

Swift::Int sub_24A5224FC(uint64_t *a1, uint64_t a2)
{
  return sub_24A51DDA8(a1, a2, v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[2], v2[3], v2[4]);
}

uint64_t sub_24A52253C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  Swift::Int v4 = v2[3];
  uint64_t v6 = v2[4];
  v7.Swift::Int position = Deque._UnsafeHandle.slot(forOffset:)(v4).position;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2 + *(void *)(*(void *)(v5 - 8) + 72) * v7.position, v6, v5);
}

uint64_t sub_24A5225BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A51BC6C(a1, v2[3], v2[4], v2[2], a2);
}

unint64_t sub_24A5225DC()
{
  unint64_t result = qword_26979BB18[0];
  if (!qword_26979BB18[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979BB10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979BB18);
  }
  return result;
}

uint64_t sub_24A522638(uint64_t a1, uint64_t a2)
{
  return sub_24A51B868(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_24A522654(void *a1, uint64_t a2)
{
  return sub_24A51B920(a1, a2, *(_OWORD **)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t sub_24A522674@<X0>(CollectionsInternal::_DequeSlot *a1@<X0>, CollectionsInternal::_DequeSlot *a2@<X8>)
{
  return sub_24A51B4B0(*(void *)(v2 + 24), a1, *(void *)(v2 + 32), a2);
}

uint64_t sub_24A522694@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[1] + v3;
  if (*a1 < v4) {
    uint64_t v4 = *a1;
  }
  *a2 = *(void *)(v2 + 24);
  a2[1] = v3;
  a2[2] = v4;
  return swift_retain();
}

uint64_t sub_24A5226D0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A5218C8(a1, a2, a3);
}

uint64_t sub_24A5226E8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A521880(a1, a2, a3);
}

uint64_t sub_24A522700(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A521D30(a1, a2, a3);
}

uint64_t OrderedSet.count.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t OrderedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedSet.isEmpty.getter()
{
  return sub_24A5BBBC0() & 1;
}

uint64_t OrderedSet.subscript.getter()
{
  return sub_24A5BC260();
}

BOOL OrderedSet._customContainsEquatableElement(_:)()
{
  OrderedSet._find(_:)();
  return (v0 & 1) == 0;
}

uint64_t OrderedSet._copyToContiguousArray()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_24A5230F8(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

uint64_t OrderedSet._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A5BC210();
  swift_getWitnessTable();
  uint64_t v4 = sub_24A5BBBC0();
  if ((v4 & 1) == 0)
  {
    MEMORY[0x270FA5388](v4);
    sub_24A5BC1A0();
  }
  return a3;
}

uint64_t sub_24A522914@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t result = sub_24A5BB540();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = sub_24A5BB540();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (a2 >= a1) {
    a2 = a1;
  }
  uint64_t result = sub_24A5BBCD0();
  *a3 = a2;
  return result;
}

uint64_t OrderedSet.withContiguousStorageIfAvailable<A>(_:)()
{
  return sub_24A5BC140();
}

uint64_t sub_24A5229D8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

BOOL sub_24A522A2C()
{
  return OrderedSet._customContainsEquatableElement(_:)();
}

uint64_t sub_24A522A3C(uint64_t a1)
{
  uint64_t v2 = sub_24A5230F8(*v1, v1[1], *(void *)(a1 + 16));
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_24A522A8C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = OrderedSet._copyContents(initializing:)(a2, a3, *v3);
  a1[1] = v5;
  a1[2] = v6;
  return v7;
}

uint64_t sub_24A522AD4()
{
  return OrderedSet.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedSet.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t OrderedSet.indices.getter()
{
  sub_24A5BC210();
  swift_getWitnessTable();
  sub_24A5BBAC0();
  return v1;
}

Swift::Int __swiftcall OrderedSet.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedSet.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedSet.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedSet.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedSet.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedSet.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedSet.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedSet._customIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (void *)(a2 + 16);
  uint64_t v9 = a2 + 32;
  swift_retain();
  sub_24A522CF8(v8, v9, a1, a3, a5, (uint64_t)&v11);
  swift_release();
  return v11;
}

uint64_t sub_24A522CF8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v15 = a4;
  uint64_t v11 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = _HashTable.UnsafeHandle._find<A>(_:in:)(a3, (uint64_t)&v15, a1, a2, v11, WitnessTable, a5);
  *(void *)a6 = result;
  *(unsigned char *)(a6 + 8) = v14 & 1;
  *(unsigned char *)(a6 + 9) = 0;
  return result;
}

uint64_t OrderedSet._customLastIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OrderedSet._customIndexOfEquatableElement(_:)(a1, a2, a3, a4, a5);
}

uint64_t OrderedSet._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = a3;
  uint64_t v5 = a1;
  v4[0] = a2;
  sub_24A5BC210();
  swift_getWitnessTable();
  return sub_24A4E7F28((uint64_t)&v5, (uint64_t)v4);
}

void sub_24A522E3C(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 8) + 16);
}

void (*sub_24A522E4C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  sub_24A5BC260();
  return sub_24A50EF90;
}

uint64_t sub_24A522F08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = OrderedSet.subscript.getter(*a1, a1[1], *v2);
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

double sub_24A522F40@<D0>(_OWORD *a1@<X8>)
{
  sub_24A5BC210();
  swift_getWitnessTable();
  sub_24A5BBAC0();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_24A522FC8()
{
  return sub_24A5BBBC0() & 1;
}

uint64_t sub_24A523034()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t sub_24A523044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = OrderedSet._customIndexOfEquatableElement(_:)(a1, *v3, v3[1], *(void *)(a2 + 16), *(void *)(a2 + 24));
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 9) = v7 & 1;
  return result;
}

uint64_t sub_24A523084(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  long long v3 = *a2;
  sub_24A5BC210();
  swift_getWitnessTable();
  return sub_24A4E7F28((uint64_t)&v4, (uint64_t)&v3);
}

uint64_t sub_24A5230F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = swift_retain();
  return MEMORY[0x270F9EBB0](v4, a3);
}

uint64_t sub_24A523134@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_24A522914(a1, *(void *)(v2 + 40), a2);
}

uint64_t sub_24A523154()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A523170()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A52318C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A5231A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A5231C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A5231E0()
{
  return swift_getWitnessTable();
}

uint64_t OrderedSet.UnorderedView._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedSet.UnorderedView._base.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet.UnorderedView._base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedSet.unordered.getter(uint64_t a1)
{
  return a1;
}

void (*OrderedSet.unordered.modify(void *a1, uint64_t a2))(void **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  v5[2] = v2;
  void v5[3] = v7;
  v5[4] = v8;
  *uint64_t v2 = OrderedSet.init()();
  v2[1] = v9;
  return sub_24A523348;
}

void sub_24A523348(void **a1)
{
  uint64_t v1 = *a1;
  sub_24A52339C((void *)(*a1)[2], *a1);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_24A52339C(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.unordered.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_retain();
  uint64_t v5 = OrderedSet.init()();
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  *uint64_t v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  sub_24A52339C(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_24A5234B4(uint64_t a1)
{
  return OrderedSet.UnorderedView.description.getter(*v1, v1[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t OrderedSet.UnorderedView.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  v8[0] = a1;
  v8[1] = a2;
  swift_retain();
  swift_retain();
  sub_24A5BC070();
  uint64_t v2 = sub_24A5A95FC();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t v5 = type metadata accessor for OrderedSet();
  swift_getWitnessTable();
  uint64_t v6 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v8, 1, v2, v4, v5);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24A5235F8()
{
  return OrderedSet.UnorderedView.debugDescription.getter(*v0, v0[1]);
}

uint64_t OrderedSet.UnorderedView.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A5BC6B0();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v14[2] = a1;
  void v14[3] = a2;
  v14[1] = a2;
  uint64_t v10 = *MEMORY[0x263F8E7E8];
  uint64_t v11 = sub_24A5BC6A0();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  type metadata accessor for OrderedSet.UnorderedView();
  sub_24A5BC210();
  swift_getWitnessTable();
  sub_24A4D1B3C((uint64_t)v6);
  swift_retain();
  swift_retain_n();
  return sub_24A5BC6C0();
}

uint64_t type metadata accessor for OrderedSet.UnorderedView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A523820()
{
  return OrderedSet.UnorderedView.customMirror.getter(*v0, v0[1]);
}

uint64_t static OrderedSet.UnorderedView.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v21[1] = a6;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11 && a3 && a1 == a3) {
    return 1;
  }
  uint64_t v15 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v15 != _s19CollectionsInternal4HeapV5countSivg_0()) {
    return 0;
  }
  v21[0] = *(void *)(a2 + 16);
  if (!v21[0]) {
    return 1;
  }
  swift_retain();
  swift_retain();
  sub_24A5BC260();
  BOOL v16 = OrderedSet.contains(_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, a5);
  if (v16)
  {
    uint64_t v18 = 1;
    while (v21[0] != v18)
    {
      sub_24A5BC260();
      ++v18;
      BOOL v19 = OrderedSet.contains(_:)();
      v17(v13, a5);
      if (!v19) {
        goto LABEL_11;
      }
    }
    swift_release();
    uint64_t v14 = 1;
  }
  else
  {
LABEL_11:
    swift_release();
    uint64_t v14 = 0;
  }
  swift_release();
  return v14;
}

uint64_t sub_24A523A28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.UnorderedView.== infix(_:_:)(*a1, a1[1], *a2, a2[1], *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t OrderedSet.UnorderedView.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = *(_OWORD *)(v9 + 48);
  long long v23 = *(_OWORD *)(v9 + 32);
  long long v24 = v12;
  uint64_t v25 = *(void *)(v9 + 64);
  long long v13 = *(_OWORD *)(v9 + 16);
  long long v21 = *(_OWORD *)v9;
  long long v22 = v13;
  sub_24A5BC680();
  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    v20[0] = a2;
    v20[1] = a1;
    uint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
    swift_retain();
    swift_retain();
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    do
    {
      sub_24A5BC260();
      ++v17;
      uint64_t v18 = sub_24A5BB370();
      (*v15)(v11, a4);
      v16 ^= v18;
    }
    while (v14 != v17);
    swift_release();
    swift_release();
  }
  return sub_24A5BC630();
}

uint64_t OrderedSet.UnorderedView.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A5BC610();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v7, a1, a2, a3);
  return sub_24A5BC690();
}

uint64_t sub_24A523C38(uint64_t a1)
{
  return OrderedSet.UnorderedView.hashValue.getter(*v1, v1[1], *(void *)(a1 + 16));
}

uint64_t sub_24A523C48(uint64_t a1, uint64_t a2)
{
  return OrderedSet.UnorderedView.hash(into:)(a1, *v2, v2[1], *(void *)(a2 + 16));
}

uint64_t sub_24A523C58(uint64_t a1, uint64_t a2)
{
  sub_24A5BC610();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v5, *v2, v2[1], *(void *)(a2 + 16));
  return sub_24A5BC690();
}

uint64_t OrderedSet.UnorderedView.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = sub_24A5BB9F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, WitnessTable);
}

uint64_t sub_24A523D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = sub_24A5BB9F0();
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = OrderedSet.init<A>(_:)((uint64_t)&v11, v5, v6, v7, WitnessTable);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t sub_24A523DA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OrderedSet.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_24A523DD4()
{
  return OrderedSet.contains(_:)();
}

uint64_t sub_24A523DE8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_24A524CB4(*a1, a1[1], *v3, v3[1], *(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v7 = v6;
  swift_release();
  uint64_t result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_24A524CB4(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_24A523E9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_24A524CB8(*a1, a1[1], *v3, v3[1], *(void *)(a2 + 16));
  uint64_t v7 = v6;
  swift_release();
  uint64_t result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_24A524CB8(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

uint64_t sub_24A523F58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_24A524D48();
  uint64_t v4 = v3;
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t OrderedSet.UnorderedView.symmetricDifference(_:)()
{
  uint64_t v0 = sub_24A524D48();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.UnorderedView.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  type metadata accessor for OrderedSet();
  char v5 = OrderedSet._append(_:)(a2);
  sub_24A5BC260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
  return v5 & 1;
}

uint64_t sub_24A5240EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OrderedSet();
  return OrderedSet.remove(_:)(v2, a1);
}

uint64_t OrderedSet.UnorderedView.remove(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OrderedSet();
  return OrderedSet.remove(_:)(v2, a1);
}

uint64_t OrderedSet.UnorderedView.update(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  type metadata accessor for OrderedSet();
  if (OrderedSet._append(_:)(a1))
  {
    uint64_t v18 = *(void *)(v6 - 8);
    uint64_t v8 = 1;
  }
  else
  {
    unint64_t v9 = v7;
    sub_24A5BC260();
    uint64_t v10 = sub_24A5BC210();
    sub_24A5BC190();
    uint64_t v11 = *(void *)(v3 + 8);
    sub_24A5303D4(v9, v11);
    uint64_t v18 = *(void *)(v6 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 24))(v11+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v9, a1, v6);
    nullsub_1(v10, v12, v13, v14, v15);
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v6);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  return v16(a3, v8, 1, v6);
}

uint64_t sub_24A524348(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = type metadata accessor for OrderedSet();
  sub_24A4B4438(v1, v2, v3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formUnion(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  sub_24A4B4438(a1, a2, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_24A524410(uint64_t *a1)
{
  return OrderedSet.UnorderedView.formIntersection(_:)(*a1, a1[1]);
}

uint64_t OrderedSet.UnorderedView.formIntersection(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  return OrderedSet.formIntersection(_:)(a1, a2, v4);
}

uint64_t sub_24A524474()
{
  sub_24A524D4C();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference(_:)()
{
  sub_24A524D4C();
  swift_release();
  return swift_release();
}

uint64_t sub_24A524514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OrderedSet.UnorderedView.subtracting(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t OrderedSet.UnorderedView.subtracting(_:)()
{
  return OrderedSet._subtracting<A>(_:)();
}

uint64_t sub_24A5245E8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A524638(a1, a2, a3, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.UnorderedView.isSubset(of:));
}

uint64_t sub_24A524604(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A524638(a1, a2, a3, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.UnorderedView.isDisjoint(with:));
}

uint64_t sub_24A524620(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A524638(a1, a2, a3, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.UnorderedView.isSuperset(of:));
}

uint64_t sub_24A524638(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void, void, void, void))
{
  return a4(*a1, a1[1], *v4, v4[1], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A524660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  uint64_t v13 = OrderedSet.init<A>(_:)((uint64_t)v12, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
  uint64_t v15 = v14;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
  *a5 = v13;
  a5[1] = v15;
  return result;
}

uint64_t OrderedSet.UnorderedView.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  uint64_t v13 = OrderedSet.init<A>(_:)((uint64_t)v12, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  return v13;
}

uint64_t sub_24A524884()
{
  return OrderedSet.UnorderedView.subtract(_:)();
}

uint64_t OrderedSet.UnorderedView.subtract(_:)()
{
  type metadata accessor for OrderedSet();
  swift_getWitnessTable();
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t OrderedSet.UnorderedView.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_24A4B3F34(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.UnorderedView.init<A>(_:)()
{
  uint64_t v0 = sub_24A4B4068();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OrderedSet.UnorderedView.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A524B90(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))j___s19CollectionsInternal10OrderedSetV6append10contentsOfyqd___t7ElementQyd__RszSTRd__lF);
}

uint64_t OrderedSet.UnorderedView.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = sub_24A5523C0(a1, a2, a3, a4, a5, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v9;
}

uint64_t OrderedSet.UnorderedView.intersection<A>(_:)()
{
  uint64_t v0 = sub_24A53A8E8();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.UnorderedView.formIntersection<A>(_:)()
{
  type metadata accessor for OrderedSet();
  return OrderedSet.formIntersection<A>(_:)();
}

uint64_t OrderedSet.UnorderedView.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_24A55CB90();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v7;
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A524B90(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A4A0A24);
}

uint64_t sub_24A524B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for OrderedSet();
  a5(a1, v9, a3, a4);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v10(a1, a3);
}

uint64_t OrderedSet.UnorderedView.subtract<A>(_:)()
{
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t OrderedSet.UnorderedView.isEqualSet(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static OrderedSet.UnorderedView.== infix(_:_:)(a3, a4, a1, a2, a5, a6);
}

uint64_t sub_24A524CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  swift_retain();
  uint64_t v10 = sub_24A53A724(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v10;
}

uint64_t sub_24A524D4C()
{
  type metadata accessor for OrderedSet();
  return sub_24A4A09C8();
}

uint64_t sub_24A524DA0()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A524DBC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A524DDC()
{
  swift_release();
  return swift_release();
}

void *sub_24A524E18(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_24A524E50(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_24A524EB0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_24A524EF0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24A524F38(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _UnsafePath.isOnItem.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (a3 >> 40) & 1;
}

uint64_t _UnsafePath.currentItemSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _HashNode.path(to:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = 0;
  for (uint64_t i = 0; ; uint64_t i = (i + 5))
  {
    uint64_t v15 = nullsub_1(a3 + 16, a3 + 32, a5, a6, a7);
    unint64_t v17 = _HashNode.UnsafeHandle.find(_:_:_:)(i, a1, a2, v15, v16, a5, a6, a7);
    if (v17 == 2) {
      break;
    }
    unint64_t v18 = HIDWORD(v17);
    if ((v17 & 1) == 0) {
      return v13;
    }
    a3 = *(void *)(a3 + 32 + 16 * v18);
    v13 |= v18 << i;
  }
  return 0;
}

uint64_t _UnsafePath.childSlot(at:)(char a1, unint64_t a2)
{
  return (a2 >> a1) & 0x1F;
}

uint64_t _UnsafePath.init(root:)()
{
  return 0;
}

uint64_t _UnsafePath.selectItem(at:)(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(unsigned char *)(v1 + 21) = 1;
  return result;
}

Swift::Void __swiftcall _UnsafePath.selectEnd()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_beginAccess();
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v1 + 20));
  v2.i16[0] = vaddlv_u8(v2);
  __int32 v3 = v2.i32[0];
  if (*(_DWORD *)(v1 + 16) == *(_DWORD *)(v1 + 20)) {
    __int32 v3 = 0;
  }
  *(_DWORD *)(v0 + 16) = v3;
  *(unsigned char *)(v0 + 21) = 0;
}

uint64_t _UnsafePath.descendToChild(_:at:)(uint64_t a1, unsigned int a2)
{
  char v4 = *(unsigned char *)(v2 + 20);
  *(void *)v2 |= (unint64_t)a2 << v4;
  *(void *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = 0;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v2 + 21) = *(_DWORD *)(a1 + 16) != 0;
  *(unsigned char *)(v2 + 20) = v4 + 5;
  return result;
}

unint64_t static _UnsafePath.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a3 & 0xFFFFFFFFFFLL) == (a6 & 0xFFFFFFFFFFLL) && a1 == a4) {
    return ((a3 & 0x10000000000) == 0) ^ (a6 >> 40) & 1;
  }
  else {
    return 0;
  }
}

BOOL static _UnsafePath.< infix(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A527694(a1, a3, BYTE4(a3), BYTE5(a3) & 1, a4, a6, BYTE4(a6), BYTE5(a6) & 1);
}

uint64_t _UnsafePath.description.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (BYTE4(a3))
  {
    int v4 = 0;
    unint64_t v5 = HIDWORD(a3);
    do
    {
      sub_24A5BC430();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      v4 += 5;
    }
    while (v4 < v5);
  }
  if ((a3 & 0x10000000000) != 0)
  {
    swift_beginAccess();
    goto LABEL_12;
  }
  swift_beginAccess();
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 20))
  {
    v6.i32[0] = *(_DWORD *)(a2 + 20);
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (a3 < (unint64_t)v7.u32[0])
    {
      sub_24A5BC430();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
LABEL_13:
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      return 64;
    }
    if (v7.i32[0] != a3) {
      return 64;
    }
LABEL_12:
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_12;
  }
  return 64;
}

Swift::Void __swiftcall _UnsafePath.descendToLeftMostItem()()
{
  if ((*(unsigned char *)(v0 + 21) & 1) == 0)
  {
    uint64_t v1 = *(unsigned int *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 8);
    swift_beginAccess();
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v2 + 20));
    v3.i16[0] = vaddlv_u8(v3);
    if (*(_DWORD *)(v2 + 16) != *(_DWORD *)(v2 + 20) && v1 < v3.i32[0])
    {
      uint64_t v5 = *(void *)(v2 + 16 * v1 + 32);
      char v6 = *(unsigned char *)(v0 + 20);
      *(void *)v0 |= v1 << v6;
      *(void *)(v0 + 8) = v5;
      *(_DWORD *)(v0 + 16) = 0;
      swift_beginAccess();
      int v7 = *(_DWORD *)(v5 + 16);
      *(unsigned char *)(v0 + 21) = v7 != 0;
      *(unsigned char *)(v0 + 20) = v6 + 5;
      if (!v7)
      {
        do
        {
          swift_beginAccess();
          int v8 = *(_DWORD *)(v5 + 20);
          if (*(_DWORD *)(v5 + 16) == v8 || v8 == 0) {
            break;
          }
          uint64_t v5 = *(void *)(v5 + 32);
          *(void *)(v0 + 8) = v5;
          char v10 = *(unsigned char *)(v0 + 20);
          *(_DWORD *)(v0 + 16) = 0;
          swift_beginAccess();
          int v11 = *(_DWORD *)(v5 + 16);
          *(unsigned char *)(v0 + 21) = v11 != 0;
          *(unsigned char *)(v0 + 20) = v10 + 5;
        }
        while (!v11);
      }
    }
  }
}

uint64_t _UnsafePath.findSuccessorItem(under:)(uint64_t a1)
{
  uint64_t v2 = *((unsigned __int8 *)v1 + 21);
  if (v2 == 1)
  {
    unsigned int v4 = *((_DWORD *)v1 + 4) + 1;
    *((_DWORD *)v1 + 4) = v4;
    uint64_t v5 = v1[1];
    swift_beginAccess();
    unsigned int v6 = *(_DWORD *)(v5 + 16);
    int v7 = *(_DWORD *)(v5 + 20);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    unsigned int v9 = v8.i32[0];
    if (v6 == v7) {
      unsigned int v9 = *(_DWORD *)(v5 + 16);
    }
    if (v4 >= v9)
    {
      *((_DWORD *)v1 + 4) = 0;
      *((unsigned char *)v1 + 21) = 0;
      BOOL v10 = v6 == v7 || v7 == 0;
      if (v10)
      {
        unsigned int v11 = *((unsigned __int8 *)v1 + 20);
        if (!*((unsigned char *)v1 + 20)) {
          goto LABEL_42;
        }
        int v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        int v16 = 0;
        uint64_t v41 = a1;
        unint64_t v42 = *v1;
        do
        {
          uint64_t v17 = v13;
          swift_beginAccess();
          int8x8_t v18 = (int8x8_t)*(unsigned int *)(a1 + 20);
          if (v12 < 0x40u) {
            uint64_t v19 = ~(-1 << (v12 & 0x3F));
          }
          else {
            uint64_t v19 = -1;
          }
          uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
          v20.i16[0] = vaddlv_u8(v20);
          BOOL v21 = *(_DWORD *)(a1 + 16) == v18.i32[0] || ((v42 >> v12) & 0x1F) + 1 >= v20.i32[0];
          if (!v21) {
            uint64_t v17 = v19 & v42;
          }
          uint64_t v13 = v17;
          if (!v21)
          {
            uint64_t v14 = a1;
            unsigned int v15 = (v42 >> v12) & 0x1F;
            int v16 = v12;
          }
          a1 = *(void *)(a1 + 16 * ((v42 >> v12) & 0x1F) + 32);
          v12 += 5;
        }
        while (v11 > v12);
        uint64_t v2 = 1;
        a1 = v41;
        if (v14)
        {
          *uint64_t v1 = v17;
          v1[1] = v14;
          *((_DWORD *)v1 + 4) = v15;
          *((unsigned char *)v1 + 20) = v16;
          *((unsigned char *)v1 + 21) = 0;
          swift_beginAccess();
          int8x8_t v22 = (int8x8_t)*(unsigned int *)(v14 + 20);
          if (*(_DWORD *)(v14 + 16) != v22.i32[0])
          {
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
            v23.i16[0] = vaddlv_u8(v23);
            if (v15 < v23.i32[0]) {
              *((_DWORD *)v1 + 4) = ++v15;
            }
          }
          swift_beginAccess();
          int8x8_t v24 = (int8x8_t)*(unsigned int *)(v14 + 20);
          if (*(_DWORD *)(v14 + 16) != v24.i32[0])
          {
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
            v25.i16[0] = vaddlv_u8(v25);
            if (v15 < v25.i32[0])
            {
              uint64_t v26 = *(void *)(v14 + 16 * v15 + 32);
              unint64_t v27 = ((unint64_t)v15 << v16) | v17;
              *uint64_t v1 = v27;
              v1[1] = v26;
              *((_DWORD *)v1 + 4) = 0;
              swift_beginAccess();
              int v28 = *(_DWORD *)(v26 + 16);
              *((unsigned char *)v1 + 21) = v28 != 0;
              int v29 = v16 + 5;
              *((unsigned char *)v1 + 20) = v16 + 5;
              if (!v28)
              {
                do
                {
                  swift_beginAccess();
                  int v30 = *(_DWORD *)(v26 + 20);
                  if (*(_DWORD *)(v26 + 16) == v30 || v30 == 0) {
                    break;
                  }
                  uint64_t v26 = *(void *)(v26 + 32);
                  *uint64_t v1 = v27;
                  v1[1] = v26;
                  *((_DWORD *)v1 + 4) = 0;
                  swift_beginAccess();
                  int v32 = *(_DWORD *)(v26 + 16);
                  *((unsigned char *)v1 + 21) = v32 != 0;
                  v29 += 5;
                  *((unsigned char *)v1 + 20) = v29;
                }
                while (!v32);
              }
            }
          }
        }
        else
        {
LABEL_42:
          swift_beginAccess();
          int v37 = *(_DWORD *)(a1 + 16);
          *uint64_t v1 = 0;
          v1[1] = a1;
          *((_DWORD *)v1 + 4) = 0;
          *((unsigned char *)v1 + 20) = 0;
          *((unsigned char *)v1 + 21) = v37 != 0;
          BOOL v10 = v37 == *(_DWORD *)(a1 + 20);
          uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
          v38.i16[0] = vaddlv_u8(v38);
          __int32 v39 = v38.i32[0];
          if (v10) {
            __int32 v39 = 0;
          }
          *((_DWORD *)v1 + 4) = v39;
          *((unsigned char *)v1 + 21) = 0;
        }
      }
      else
      {
        do
        {
          swift_beginAccess();
          int v33 = *(_DWORD *)(v5 + 20);
          if (*(_DWORD *)(v5 + 16) == v33 || v33 == 0) {
            break;
          }
          uint64_t v5 = *(void *)(v5 + 32);
          v1[1] = v5;
          char v35 = *((unsigned char *)v1 + 20);
          *((_DWORD *)v1 + 4) = 0;
          swift_beginAccess();
          int v36 = *(_DWORD *)(v5 + 16);
          *((unsigned char *)v1 + 21) = v36 != 0;
          *((unsigned char *)v1 + 20) = v35 + 5;
        }
        while (!v36);
      }
    }
  }
  return v2;
}

uint64_t _RawHashNode.distance(_:from:to:)(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  int v16 = result;
  uint64_t v17 = a9;
  if ((a4 & 0x10000000000) == 0)
  {
    uint64_t result = swift_beginAccess();
    LODWORD(v20) = *(_DWORD *)(a3 + 16);
    if (v20 == *(_DWORD *)(a3 + 20))
    {
      if (a4) {
        goto LABEL_4;
      }
LABEL_20:
      if ((a7 & 0x10000000000) != 0) {
        goto LABEL_36;
      }
      swift_beginAccess();
      LODWORD(v20) = *(_DWORD *)(a6 + 16);
      __int32 v24 = *(_DWORD *)(a6 + 20);
      if (v20 != v24) {
        goto LABEL_35;
      }
      if (a7) {
        goto LABEL_36;
      }
      goto LABEL_39;
    }
    v19.i32[0] = *(_DWORD *)(a3 + 20);
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(v19);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] == a4) {
      goto LABEL_20;
    }
  }
LABEL_4:
  if ((a7 & 0x10000000000) == 0)
  {
    uint64_t result = swift_beginAccess();
    if (*(_DWORD *)(a6 + 16) == *(_DWORD *)(a6 + 20))
    {
      if (a7) {
        goto LABEL_7;
      }
    }
    else
    {
      v21.i32[0] = *(_DWORD *)(a6 + 20);
      uint8x8_t v25 = (uint8x8_t)vcnt_s8(v21);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.i32[0] != a7) {
        goto LABEL_7;
      }
    }
    if ((a4 & 0x10000000000) == 0)
    {
      swift_beginAccess();
      if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(a3 + 20))
      {
        if (!a4) {
          goto LABEL_49;
        }
      }
      else
      {
        v26.i32[0] = *(_DWORD *)(a3 + 20);
        uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.i32[0] == a4) {
          goto LABEL_49;
        }
      }
    }
    if (BYTE4(a4) <= v16)
    {
      uint64_t v17 = a4;
    }
    else
    {
      sub_24A526968((unsigned int *)(a8 + 16), a8 + 32, (a2 >> v16) & 0x1F, v16, a2, a3, a4 & 0x1FFFFFFFFFFLL, &v31);
      uint64_t v17 = v31;
    }
LABEL_49:
    uint64_t result = a9 - v17;
    if (__OFSUB__(a9, v17))
    {
      __break(1u);
      goto LABEL_52;
    }
    return result;
  }
LABEL_7:
  unint64_t v20 = HIDWORD(a7);
  if (BYTE4(a4) == BYTE4(a7) && a2 == a5)
  {
    if (a3 == a6)
    {
      if (a4 >= a7) {
        return -(uint64_t)(a4 - a7);
      }
      else {
        return (a7 - a4);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    unint64_t v18 = HIDWORD(a4);
    if (BYTE4(a4) >= BYTE4(a7))
    {
      if (BYTE4(a7)) {
        goto LABEL_30;
      }
      goto LABEL_32;
    }
    if (!BYTE4(a4)) {
      goto LABEL_56;
    }
    if ((a4 & 0xC000000000) == 0) {
      goto LABEL_55;
    }
    if (a2 == a5)
    {
LABEL_56:
      sub_24A526ECC((unsigned int *)(a3 + 16), a3 + 32, a4, v18, a5, a6, a7 & 0x1FFFFFFFFFFLL, v32);
      return v32[0];
    }
    else
    {
      if ((a7 & 0xC000000000) != 0) {
        goto LABEL_43;
      }
LABEL_42:
      while (a2 << -(char)v20 == a5 << -(char)v20)
      {
LABEL_32:
        sub_24A526ECC((unsigned int *)(a6 + 16), a6 + 32, a7, v20, a2, a3, a4 & 0x1FFFFFFFFFFLL, v32);
        __int32 v24 = v32[0];
        uint64_t result = -v32[0];
        if (!__OFSUB__(0, v32[0])) {
          return result;
        }
        __break(1u);
LABEL_35:
        v23.i32[0] = v24;
        uint8x8_t v27 = (uint8x8_t)vcnt_s8(v23);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.i32[0] != a7)
        {
LABEL_36:
          if (BYTE4(a7) <= v16)
          {
            uint64_t v17 = a7;
          }
          else
          {
            sub_24A526968((unsigned int *)(a8 + 16), a8 + 32, (a5 >> v16) & 0x1F, v16, a5, a6, a7 & 0x1FFFFFFFFFFLL, v32);
            uint64_t v17 = v32[0];
          }
        }
LABEL_39:
        uint64_t result = v17 - a9;
        if (!__OFSUB__(v17, a9)) {
          return result;
        }
        __break(1u);
      }
LABEL_43:
      while (!sub_24A527694(a2, a4, v18, BYTE5(a4) & 1, a5, a7, v20, BYTE5(a7) & 1))
      {
LABEL_52:
        uint64_t v29 = sub_24A526C68(v16, a5, a6, a7 & 0x1FFFFFFFFFFLL, a2, a3, a4 & 0x1FFFFFFFFFFLL, a8);
        BOOL v30 = __OFSUB__(0, v29);
        uint64_t result = -v29;
        if (!v30) {
          return result;
        }
        __break(1u);
LABEL_55:
        if (a2 << -(char)v18 == a5 << -(char)v18) {
          goto LABEL_56;
        }
LABEL_30:
        if ((a7 & 0xC000000000) == 0) {
          goto LABEL_42;
        }
        if (a2 == a5) {
          goto LABEL_32;
        }
      }
      return sub_24A526C68(v16, a2, a3, a4 & 0x1FFFFFFFFFFLL, a5, a6, a7 & 0x1FFFFFFFFFFLL, a8);
    }
  }
  return result;
}

BOOL _RawHashNode.seek(_:_:offsetBy:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a3;
  if (sub_24A526FA8(a1, a2, &v7, a4)) {
    return 1;
  }
  return a3 > 0 && v7 == 0;
}

uint64_t _RawHashNode.seek(_:_:offsetBy:limitedBy:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  unsigned int v8 = a6;
  unint64_t v14 = HIDWORD(a6);
  uint64_t v15 = a6 & 0x10000000000;
  if (a3 < 1)
  {
    if (a3 < 0)
    {
      if (sub_24A527694(*(void *)a2, *(_DWORD *)(a2 + 16), *(unsigned char *)(a2 + 20), *(unsigned char *)(a2 + 21), a4, a6, BYTE4(a6), v15 != 0))
      {
        goto LABEL_3;
      }
      uint64_t v33 = a3;
      if (sub_24A526FA8(a1, a2, &v33, a7))
      {
        unsigned __int8 v20 = v15 != 0;
        unint64_t v22 = *(void *)a2;
        unsigned int v23 = *(_DWORD *)(a2 + 16);
        unsigned __int8 v17 = *(unsigned char *)(a2 + 21);
        unsigned __int8 v24 = *(unsigned char *)(a2 + 20);
        unint64_t v18 = a4;
        unsigned int v19 = v8;
        unsigned __int8 v21 = v14;
        goto LABEL_10;
      }
      char v25 = 1;
LABEL_12:
      BOOL v16 = 0;
      *(void *)a2 = a4;
      *(void *)(a2 + 8) = a5;
      *(_DWORD *)(a2 + 16) = v8;
      *(unsigned char *)(a2 + 20) = v14;
      *(unsigned char *)(a2 + 21) = BYTE5(v15);
      if ((v25 & 1) == 0 && !v33 && !v15)
      {
        swift_beginAccess();
        uint64_t v27 = 0;
        if (*(_DWORD *)(a5 + 16) != *(_DWORD *)(a5 + 20))
        {
          v26.i32[0] = *(_DWORD *)(a5 + 20);
          uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26);
          v28.i16[0] = vaddlv_u8(v28);
          uint64_t v27 = v28.u32[0];
        }
        BOOL v16 = v27 == v8;
      }
      goto LABEL_18;
    }
    uint64_t v33 = a3;
    if (sub_24A526FA8(a1, a2, &v33, a7))
    {
      BOOL v16 = 1;
LABEL_18:
      int v29 = 256;
      return v29 | v16;
    }
LABEL_11:
    char v25 = 0;
    goto LABEL_12;
  }
  if (!sub_24A527694(a4, a6, BYTE4(a6), v15 != 0, *(void *)a2, *(_DWORD *)(a2 + 16), *(unsigned char *)(a2 + 20), *(unsigned char *)(a2 + 21)))
  {
    uint64_t v33 = a3;
    if (sub_24A526FA8(a1, a2, &v33, a7))
    {
      unsigned __int8 v17 = v15 != 0;
      unint64_t v18 = *(void *)a2;
      unsigned int v19 = *(_DWORD *)(a2 + 16);
      unsigned __int8 v20 = *(unsigned char *)(a2 + 21);
      unsigned __int8 v21 = *(unsigned char *)(a2 + 20);
      unint64_t v22 = a4;
      unsigned int v23 = v8;
      unsigned __int8 v24 = v14;
LABEL_10:
      BOOL v16 = !sub_24A527694(v22, v23, v24, v17, v18, v19, v21, v20);
      goto LABEL_18;
    }
    goto LABEL_11;
  }
LABEL_3:
  v32[0] = a3;
  BOOL v16 = (sub_24A526FA8(a1, a2, v32, a7) & 1) != 0 || a3 > 0 && v32[0] == 0;
  int v29 = 0;
  return v29 | v16;
}

uint64_t _UnsafePath.ancestors.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_UnsafePath.ancestors.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _UnsafePath.node.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _UnsafePath.node.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_UnsafePath.node.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _UnsafePath.nodeSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _UnsafePath.nodeSlot.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_UnsafePath.nodeSlot.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

unint64_t _UnsafePath.level.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIDWORD(a3);
}

uint64_t _UnsafePath.level.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 20) = result;
  return result;
}

uint64_t (*_UnsafePath.level.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _UnsafePath._isItem.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (a3 >> 40) & 1;
}

uint64_t _UnsafePath._isItem.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 21) = result;
  return result;
}

uint64_t (*_UnsafePath._isItem.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _UnsafePath.init(_:_:_:itemSlot:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A52605C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20)
    && *(void *)a1 == *(void *)a2
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v4 & (*(unsigned __int8 *)(a2 + 21) ^ *(unsigned __int8 *)(a1 + 21) ^ 1u);
}

uint64_t _UnsafePath.hash(into:)()
{
  return sub_24A5BC640();
}

uint64_t _UnsafePath.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A526168()
{
  return sub_24A5BC690();
}

uint64_t sub_24A5261F0()
{
  return sub_24A5BC640();
}

uint64_t sub_24A526250()
{
  return sub_24A5BC690();
}

BOOL sub_24A5262D4(uint64_t a1, uint64_t a2)
{
  return sub_24A527694(*(void *)a1, *(_DWORD *)(a1 + 16), *(unsigned char *)(a1 + 20), *(unsigned char *)(a1 + 21), *(void *)a2, *(_DWORD *)(a2 + 16), *(unsigned char *)(a2 + 20), *(unsigned char *)(a2 + 21));
}

BOOL sub_24A526300(uint64_t a1, uint64_t a2)
{
  return !sub_24A527694(*(void *)a2, *(_DWORD *)(a2 + 16), *(unsigned char *)(a2 + 20), *(unsigned char *)(a2 + 21), *(void *)a1, *(_DWORD *)(a1 + 16), *(unsigned char *)(a1 + 20), *(unsigned char *)(a1 + 21));
}

BOOL sub_24A526348(uint64_t a1, uint64_t a2)
{
  return !sub_24A527694(*(void *)a1, *(_DWORD *)(a1 + 16), *(unsigned char *)(a1 + 20), *(unsigned char *)(a1 + 21), *(void *)a2, *(_DWORD *)(a2 + 16), *(unsigned char *)(a2 + 20), *(unsigned char *)(a2 + 21));
}

BOOL sub_24A526390(uint64_t a1, uint64_t a2)
{
  return sub_24A527694(*(void *)a2, *(_DWORD *)(a2 + 16), *(unsigned char *)(a2 + 20), *(unsigned char *)(a2 + 21), *(void *)a1, *(_DWORD *)(a1 + 16), *(unsigned char *)(a1 + 20), *(unsigned char *)(a1 + 21));
}

BOOL _UnsafePath.isPlaceholder.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x10000000000) == 0) {
    return 0;
  }
  int v4 = a3;
  swift_beginAccess();
  unsigned __int32 v6 = *(_DWORD *)(a2 + 16);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v6 != *(_DWORD *)(a2 + 20)) {
    unsigned __int32 v6 = v7.i32[0];
  }
  return v6 == v4;
}

BOOL _UnsafePath.isOnChild.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x10000000000) != 0) {
    return 0;
  }
  unsigned int v3 = a3;
  swift_beginAccess();
  unint64_t v6 = 0;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 20))
  {
    v5.i32[0] = *(_DWORD *)(a2 + 20);
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v6 = v7.u32[0];
  }
  return v6 > v3;
}

BOOL _UnsafePath.isOnNodeEnd.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x10000000000) != 0) {
    return 0;
  }
  int v3 = a3;
  swift_beginAccess();
  uint64_t v6 = 0;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 20))
  {
    v5.i32[0] = *(_DWORD *)(a2 + 20);
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    uint64_t v6 = v7.u32[0];
  }
  return v6 == v3;
}

uint64_t sub_24A526520()
{
  uint64_t v1 = 0x10000000000;
  if (!*(unsigned char *)(v0 + 21)) {
    uint64_t v1 = 0;
  }
  return _UnsafePath.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32) | v1);
}

uint64_t _UnsafePath.currentChild.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(void *)(a2 + 16 * a3 + 32);
}

uint64_t _UnsafePath.selectChild(at:)(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(unsigned char *)(v1 + 21) = 0;
  return result;
}

Swift::Void __swiftcall _UnsafePath.descend()()
{
  uint64_t v1 = *(unsigned int *)(v0 + 16);
  uint64_t v2 = *(void *)(*(void *)(v0 + 8) + 16 * v1 + 32);
  char v3 = *(unsigned char *)(v0 + 20);
  *(void *)v0 |= v1 << v3;
  *(void *)(v0 + 8) = v2;
  *(_DWORD *)(v0 + 16) = 0;
  swift_beginAccess();
  *(unsigned char *)(v0 + 21) = *(_DWORD *)(v2 + 16) != 0;
  *(unsigned char *)(v0 + 20) = v3 + 5;
}

uint64_t _UnsafePath.findPredecessorItem(under:)(uint64_t a1)
{
  __int32 v3 = *((_DWORD *)v1 + 4);
  if (*((unsigned char *)v1 + 21) == 1)
  {
    if (v3)
    {
LABEL_28:
      *((_DWORD *)v1 + 4) = v3 - 1;
      uint64_t result = 1;
      *((unsigned char *)v1 + 21) = 1;
      return result;
    }
  }
  else
  {
    if (v3)
    {
      uint64_t v4 = (v3 - 1);
      *((_DWORD *)v1 + 4) = v4;
      *((unsigned char *)v1 + 21) = 0;
      char v5 = *((unsigned char *)v1 + 20);
      uint64_t v6 = *(void *)(v1[1] + 16 * v4 + 32);
      uint64_t i = (v4 << v5) | *v1;
      swift_beginAccess();
      unsigned __int8 v9 = v5 + 5;
      __int32 v3 = *(_DWORD *)(v6 + 16);
      __int32 v10 = *(_DWORD *)(v6 + 20);
      if (v3 != v10)
      {
        if (!v10)
        {
LABEL_27:
          *((unsigned char *)v1 + 20) = v9;
          *uint64_t v1 = i;
          v1[1] = v6;
          v8.i32[0] = v3;
          uint8x8_t v26 = (uint8x8_t)vcnt_s8(v8);
          v26.i16[0] = vaddlv_u8(v26);
          __int32 v3 = v26.i32[0];
          goto LABEL_28;
        }
        while (1)
        {
          v8.i32[0] = v10;
          uint8x8_t v24 = (uint8x8_t)vcnt_s8(v8);
          v24.i16[0] = vaddlv_u8(v24);
          uint64_t v25 = (v24.i32[0] - 1);
          uint64_t v6 = *(void *)(v6 + 16 * v25 + 32);
          i |= v25 << v9;
          swift_beginAccess();
          v9 += 5;
          __int32 v3 = *(_DWORD *)(v6 + 16);
          __int32 v10 = *(_DWORD *)(v6 + 20);
          if (v3 == v10) {
            break;
          }
          if (!v10) {
            goto LABEL_27;
          }
        }
      }
      goto LABEL_6;
    }
    uint64_t v11 = v1[1];
    swift_beginAccess();
    __int32 v3 = *(_DWORD *)(v11 + 16);
    if (v3)
    {
LABEL_8:
      v12.i32[0] = v3;
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v3 != *(_DWORD *)(v11 + 20)) {
        __int32 v3 = v13.i32[0];
      }
      goto LABEL_28;
    }
  }
  if (*((unsigned char *)v1 + 20))
  {
    unsigned __int8 v14 = 0;
    uint64_t v15 = 0;
    uint64_t v11 = 0;
    int v16 = 0;
    unsigned __int8 v9 = 0;
    unsigned int v28 = *((unsigned __int8 *)v1 + 20);
    unint64_t v17 = *v1;
    do
    {
      swift_beginAccess();
      if (v14 < 0x40u) {
        uint64_t v18 = ~(-1 << (v14 & 0x3F));
      }
      else {
        uint64_t v18 = -1;
      }
      uint64_t v19 = v18 & v17;
      if (*(_DWORD *)(a1 + 16) | (v17 >> v14) & 0x1F)
      {
        uint64_t v15 = v19;
        uint64_t v11 = a1;
        int v16 = (v17 >> v14) & 0x1F;
        unsigned __int8 v9 = v14;
      }
      a1 = *(void *)(a1 + 16 * ((v17 >> v14) & 0x1F) + 32);
      v14 += 5;
    }
    while (v28 > v14);
    if (v11)
    {
      *uint64_t v1 = v15;
      v1[1] = v11;
      *((_DWORD *)v1 + 4) = v16;
      *((unsigned char *)v1 + 20) = v9;
      *((unsigned char *)v1 + 21) = 0;
      if (v16)
      {
        uint64_t v20 = (v16 - 1);
        *((_DWORD *)v1 + 4) = v20;
        uint64_t v6 = *(void *)(v11 + 16 * v20 + 32);
        for (uint64_t i = (v20 << v9) | v15; ; i |= v23 << v9)
        {
          swift_beginAccess();
          v9 += 5;
          __int32 v3 = *(_DWORD *)(v6 + 16);
          int v21 = *(_DWORD *)(v6 + 20);
          if (v3 == v21) {
            break;
          }
          if (!v21) {
            goto LABEL_27;
          }
          v8.i32[0] = *(_DWORD *)(v6 + 20);
          uint8x8_t v22 = (uint8x8_t)vcnt_s8(v8);
          v22.i16[0] = vaddlv_u8(v22);
          uint64_t v23 = (v22.i32[0] - 1);
          uint64_t v6 = *(void *)(v6 + 16 * v23 + 32);
        }
LABEL_6:
        *((unsigned char *)v1 + 20) = v9;
        *uint64_t v1 = i;
        v1[1] = v6;
        goto LABEL_28;
      }
      swift_beginAccess();
      __int32 v3 = *(_DWORD *)(v11 + 16);
      if (v3) {
        goto LABEL_8;
      }
    }
  }
  return 0;
}

uint64_t sub_24A526894(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a4 & 0x10000000000) == 0)
  {
    swift_beginAccess();
    if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(a3 + 20))
    {
      if (!a4) {
        return a6;
      }
    }
    else
    {
      v12.i32[0] = *(_DWORD *)(a3 + 20);
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.i32[0] == a4) {
        return a6;
      }
    }
  }
  if (BYTE4(a4) <= a1) {
    return a4;
  }
  sub_24A526968(&v15, a5 + 16, a5 + 32, (a2 >> a1) & 0x1F, a1, a2, a3, a4 & 0x1FFFFFFFFFFLL);
  return v15;
}

unsigned int *sub_24A526968@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)*result);
  v11.i16[0] = vaddlv_u8(v11);
  if (*result == result[1]) {
    uint64_t v12 = *result;
  }
  else {
    uint64_t v12 = v11.u32[0];
  }
  if (a3)
  {
    uint8x8_t v13 = (uint64_t *)(a2 + 8);
    uint64_t v14 = a3;
    while (1)
    {
      uint64_t v15 = *v13;
      v13 += 2;
      BOOL v16 = __OFADD__(v12, v15);
      v12 += v15;
      if (v16) {
        break;
      }
      if (!--v14) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    unint64_t v17 = (uint64_t *)(a2 + 16 * a3);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = (a4 + 5);
    uint64_t v21 = a7 & 0x1FFFFFFFFFFLL;
    swift_retain();
    uint64_t v22 = sub_24A526894(v20, a5, a6, v21, v18, v19);
    uint64_t result = (unsigned int *)swift_release();
    if (!__OFADD__(v12, v22))
    {
      *a8 = v12 + v22;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A526A3C(uint64_t a1)
{
  uint64_t v3 = v1[1];
  unsigned int v4 = *((unsigned __int8 *)v1 + 20);
  uint64_t result = swift_beginAccess();
  int8x8_t v7 = (int8x8_t)*(unsigned int *)(v3 + 16);
  __int32 v6 = *(_DWORD *)(v3 + 20);
  BOOL v8 = v7.i32[0] == v6;
  int8x8_t v9 = vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
  if (v7.i32[0] == v6) {
    int8x8_t v7 = (int8x8_t)v7.u32[0];
  }
  else {
    int8x8_t v7 = (int8x8_t)v9.u32[0];
  }
  if (*(void *)&v7 <= a1)
  {
    uint64_t v10 = v3;
    unsigned int v11 = v4;
    while (1)
    {
      a1 -= *(void *)&v7;
      if (v8 || !v6) {
        break;
      }
      uint64_t v12 = *(void *)(v10 + 40);
      if (a1 >= v12)
      {
        uint64_t v13 = 0;
        v9.i32[0] = v6;
        uint8x8_t v14 = (uint8x8_t)vcnt_s8(v9);
        v14.i16[0] = vaddlv_u8(v14);
        uint64_t v15 = v14.u32[0];
        if (v14.u32[0] <= 1uLL) {
          uint64_t v15 = 1;
        }
        uint64_t v16 = v15 - 1;
        unint64_t v17 = (uint64_t *)(v10 + 56);
        while (1)
        {
          a1 -= v12;
          if (v14.u32[0] - 1 == v13) {
            goto LABEL_22;
          }
          if (v16 == v13)
          {
            __break(1u);
            return result;
          }
          uint64_t v18 = *v17;
          v17 += 2;
          uint64_t v12 = v18;
          ++v13;
          if (a1 < v18) {
            goto LABEL_17;
          }
        }
      }
      uint64_t v13 = 0;
LABEL_17:
      uint64_t v10 = *(void *)(v10 + 32 + 16 * v13);
      *v1 |= (unint64_t)v13 << v11;
      v1[1] = v10;
      *((_DWORD *)v1 + 4) = 0;
      swift_beginAccess();
      *((unsigned char *)v1 + 21) = *(_DWORD *)(v10 + 16) != 0;
      v11 += 5;
      *((unsigned char *)v1 + 20) = v11;
      uint64_t result = swift_beginAccess();
      int8x8_t v7 = (int8x8_t)*(unsigned int *)(v10 + 16);
      __int32 v6 = *(_DWORD *)(v10 + 20);
      BOOL v8 = v7.i32[0] == v6;
      int8x8_t v9 = vcnt_s8(v7);
      v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
      if (v7.i32[0] == v6) {
        int8x8_t v7 = (int8x8_t)v7.u32[0];
      }
      else {
        int8x8_t v7 = (int8x8_t)v9.u32[0];
      }
      if (a1 < *(void *)&v7) {
        goto LABEL_5;
      }
    }
LABEL_22:
    if (*((unsigned __int8 *)v1 + 20) == v4)
    {
      uint64_t v3 = v1[1];
    }
    else
    {
      *((unsigned char *)v1 + 20) = v4;
      v1[1] = v3;
      uint64_t v19 = *v1;
      *((_DWORD *)v1 + 4) = ((unint64_t)*v1 >> v4) & 0x1F;
      if (v4 <= 0x3F) {
        *uint64_t v1 = v19 & ~(-1 << (v4 & 0x3F));
      }
      *((unsigned char *)v1 + 21) = 0;
    }
    swift_beginAccess();
    uint64_t result = 0;
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v3 + 20));
    v20.i16[0] = vaddlv_u8(v20);
    __int32 v21 = v20.i32[0];
    if (*(_DWORD *)(v3 + 16) == *(_DWORD *)(v3 + 20)) {
      __int32 v21 = 0;
    }
    *((_DWORD *)v1 + 4) = v21;
    *((unsigned char *)v1 + 21) = 0;
  }
  else
  {
LABEL_5:
    *((_DWORD *)v1 + 4) = a1;
    uint64_t result = 1;
    *((unsigned char *)v1 + 21) = 1;
  }
  return result;
}

uint64_t sub_24A526C68(int a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = (a2 >> a1) & 0x1F;
  uint64_t v14 = (a5 >> a1) & 0x1F;
  if (v13 == v14)
  {
    uint64_t v15 = *(void *)(a8 + 16 * ((a2 >> a1) & 0x1F) + 32);
    uint64_t v16 = (a1 + 5);
    uint64_t v17 = a4 & 0x1FFFFFFFFFFLL;
    uint64_t v18 = a7 & 0x1FFFFFFFFFFLL;
    swift_retain();
    uint64_t v19 = sub_24A526C68(v16, a2, a3, v17, a5, a6, v18, v15);
    swift_release();
    return v19;
  }
  else
  {
    sub_24A526D60(a8 + 32, v13, a1, a2, a3, a4 & 0x1FFFFFFFFFFLL, v14, &v21, a5, a6, a7 & 0x1FFFFFFFFFFLL);
    return v21;
  }
}

uint64_t sub_24A526D60@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, int a3@<W3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unsigned int a7@<W7>, void *a8@<X8>, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = 16 * a2;
  uint64_t v17 = *(void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a1 + v16 + 8);
  uint64_t v19 = *v18;
  uint64_t v20 = (a3 + 5);
  uint64_t v21 = a6 & 0x1FFFFFFFFFFLL;
  swift_retain();
  uint64_t v22 = sub_24A526894(v20, a4, a5, v21, v17, v19);
  uint64_t result = swift_release();
  if (a2 >= a7)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a2 + 1 != a7)
  {
    uint64_t v24 = 0;
    unint64_t v25 = ~(unint64_t)a2 + a7;
    uint8x8_t v26 = (uint64_t *)(a1 + 16 * a2 + 24);
    while (1)
    {
      uint64_t v27 = *v26;
      v26 += 2;
      BOOL v28 = __OFADD__(v24, v27);
      v24 += v27;
      if (v28) {
        break;
      }
      if (!--v25) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v24 = 0;
LABEL_7:
  int v29 = (uint64_t *)(a1 + 16 * a7);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  swift_retain();
  uint64_t v32 = sub_24A526894(v20, a9, a10, a11 & 0x1FFFFFFFFFFLL, v30, v31);
  uint64_t result = swift_release();
  uint64_t v33 = *v18 - v22;
  if (__OFSUB__(*v18, v22)) {
    goto LABEL_13;
  }
  BOOL v28 = __OFADD__(v33, v24);
  uint64_t v34 = v33 + v24;
  if (v28)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  BOOL v28 = __OFADD__(v34, v32);
  uint64_t v35 = v34 + v32;
  if (!v28)
  {
    *a8 = v35;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

unsigned int *sub_24A526ECC@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  LODWORD(v11) = *result;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*result);
  v12.i16[0] = vaddlv_u8(v12);
  if (*result == result[1]) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = v12.u32[0];
  }
  uint64_t v13 = v11 - a3;
  uint64_t v14 = (a5 >> a4) & 0x1F;
  if (v14)
  {
    uint64_t v15 = (uint64_t *)(a2 + 8);
    uint64_t v16 = (a5 >> a4) & 0x1F;
    while (1)
    {
      uint64_t v17 = *v15;
      v15 += 2;
      BOOL v18 = __OFADD__(v13, v17);
      v13 += v17;
      if (v18) {
        break;
      }
      if (!--v16) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    uint64_t v19 = (uint64_t *)(a2 + 16 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = (a4 + 5);
    uint64_t v23 = a7 & 0x1FFFFFFFFFFLL;
    swift_retain();
    uint64_t v24 = sub_24A526894(v22, a5, a6, v23, v20, v21);
    uint64_t result = (unsigned int *)swift_release();
    if (!__OFADD__(v13, v24))
    {
      *a8 = v13 + v24;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A526FA8(int a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  if (!*a3) {
    return 1;
  }
  if (v4 < 1)
  {
    uint64_t v12 = *(unsigned int *)(a2 + 16);
    if ((*(unsigned char *)(a2 + 21) & 1) == 0)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      swift_beginAccess();
      if (*(_DWORD *)(v13 + 16) == *(_DWORD *)(v13 + 20))
      {
        if (!v12) {
          goto LABEL_16;
        }
      }
      else
      {
        v14.i32[0] = *(_DWORD *)(v13 + 20);
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v12 == v15.i32[0])
        {
LABEL_16:
          sub_24A5273E4(a4 + 16, a4 + 32, a1, (uint64_t *)a2, a3, a4, (char *)&v19);
          return v19;
        }
      }
    }
    *a3 = v4 + v12;
    if (v4 + v12 >= 0)
    {
      *(_DWORD *)(a2 + 16) = v4 + v12;
      uint64_t result = 1;
      *(unsigned char *)(a2 + 21) = 1;
      *a3 = 0;
      return result;
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(a2 + 21) != 1) {
    return 0;
  }
  if (sub_24A526A3C(v4 + *(unsigned int *)(a2 + 16))) {
    return 1;
  }
  *a3 = v9;
  if (*(unsigned __int8 *)(a2 + 20) <= a1)
  {
    uint64_t v16 = *(void *)(a2 + 8);
    swift_beginAccess();
    uint64_t result = 0;
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v16 + 20));
    v17.i16[0] = vaddlv_u8(v17);
    __int32 v18 = v17.i32[0];
    if (*(_DWORD *)(v16 + 16) == *(_DWORD *)(v16 + 20)) {
      __int32 v18 = 0;
    }
    *(_DWORD *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 21) = 0;
  }
  else
  {
    sub_24A52714C((_DWORD *)(a4 + 16), a4 + 32, (uint64_t *)a2, a1, a3, a4, v20, v10);
    return v20[0];
  }
  return result;
}

uint64_t sub_24A52714C@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>, int8x8_t a8@<D0>)
{
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  unsigned __int8 v10 = a4;
  uint64_t v12 = a2;
  a8.i32[0] = a1[1];
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(a8);
  v14.i16[0] = vaddlv_u8(v14);
  if (*a1 == a1[1]) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v14.u32[0];
  }
  uint64_t v16 = ((unint64_t)*a3 >> a4) & 0x1F;
  LOBYTE(v17) = a4 + 5;
  if (*((unsigned __int8 *)a3 + 20) <= (a4 + 5))
  {
    uint64_t v30 = a3[1];
    swift_beginAccess();
    uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v30 + 20));
    v31.i16[0] = vaddlv_u8(v31);
    __int32 v32 = v31.i32[0];
    if (*(_DWORD *)(v30 + 16) == *(_DWORD *)(v30 + 20)) {
      __int32 v32 = 0;
    }
    *((_DWORD *)a3 + 4) = v32;
    *((unsigned char *)a3 + 21) = 0;
  }
  else
  {
    __int32 v18 = (uint64_t *)(a2 + 16 * v16);
    uint64_t v47 = a7;
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = ((unint64_t)*a3 >> a4) & 0x1F;
    uint64_t v23 = (a4 + 5);
    uint64_t v24 = *v18 + 16;
    uint64_t v25 = *v18 + 32;
    swift_retain();
    uint64_t v26 = v24;
    uint64_t v17 = v23;
    uint64_t v9 = a5;
    uint64_t v16 = v21;
    uint64_t v27 = v19;
    a7 = v47;
    uint64_t v12 = a2;
    sub_24A52714C(v49, v26, v25, a3, v17, v9, v20, v27);
    uint64_t v8 = a6;
    uint64_t result = swift_release();
    if (v49[0])
    {
      char v29 = 1;
LABEL_25:
      *a7 = v29;
      return result;
    }
  }
  char v33 = v10 & 0x3F;
  if (*((unsigned __int8 *)a3 + 20) != v10)
  {
    *((unsigned char *)a3 + 20) = v10;
    a3[1] = v8;
    uint64_t v34 = *a3;
    *((_DWORD *)a3 + 4) = ((unint64_t)*a3 >> v33) & 0x1F;
    if (v10 <= 0x3Fu) {
      *a3 = v34 & ~(-1 << v33);
    }
    *((unsigned char *)a3 + 21) = 0;
  }
  uint64_t v35 = v16 + 1;
  if (v16 + 1 >= v15)
  {
LABEL_22:
    uint64_t v43 = a3[1];
    uint64_t result = swift_beginAccess();
    char v29 = 0;
    uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v43 + 20));
    v44.i16[0] = vaddlv_u8(v44);
    __int32 v45 = v44.i32[0];
    if (*(_DWORD *)(v43 + 16) == *(_DWORD *)(v43 + 20)) {
      __int32 v45 = 0;
    }
    *((_DWORD *)a3 + 4) = v45;
    *((unsigned char *)a3 + 21) = 0;
    goto LABEL_25;
  }
  uint64_t v36 = *(void *)(v12 + 16 * v35 + 8);
  uint64_t v37 = *v9;
  if (*v9 >= v36)
  {
    uint64_t v38 = v16 + 2;
    __int32 v39 = (uint64_t *)(v12 + 16 * v16 + 40);
    while (1)
    {
      v37 -= v36;
      *uint64_t v9 = v37;
      if (v15 == v38) {
        goto LABEL_22;
      }
      uint64_t v40 = *v39;
      v39 += 2;
      uint64_t v36 = v40;
      ++v38;
      if (v37 < v40)
      {
        char v41 = *((unsigned char *)a3 + 20);
        char v33 = v41 & 0x3F;
        LOBYTE(v17) = v41 + 5;
        uint64_t v35 = v38 - 1;
        break;
      }
    }
  }
  uint64_t v42 = *(void *)(v12 + 16 * v35);
  *a3 |= (unint64_t)v35 << v33;
  a3[1] = v42;
  *((_DWORD *)a3 + 4) = 0;
  swift_beginAccess();
  *((unsigned char *)a3 + 21) = *(_DWORD *)(v42 + 16) != 0;
  *((unsigned char *)a3 + 20) = v17;
  uint64_t result = sub_24A526A3C(*v9);
  if (result)
  {
    *uint64_t v9 = 0;
    char v29 = 1;
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5273E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v9 = a2;
  unsigned __int8 v10 = (unsigned int *)result;
  uint64_t v11 = a7;
  if (*((unsigned __int8 *)a4 + 20) <= a3)
  {
    if (*((unsigned char *)a4 + 21)) {
      goto LABEL_33;
    }
    int v22 = *((_DWORD *)a4 + 4);
    uint64_t v23 = a4[1];
    uint64_t result = swift_beginAccess();
    if (*(_DWORD *)(v23 + 16) == *(_DWORD *)(v23 + 20))
    {
      if (v22) {
        goto LABEL_33;
      }
      uint64_t v25 = *a5;
      goto LABEL_27;
    }
    v24.i32[0] = *(_DWORD *)(v23 + 20);
    uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24);
    v26.i16[0] = vaddlv_u8(v26);
    if (v22 != v26.i32[0]) {
      goto LABEL_33;
    }
    uint64_t v25 = *a5;
    if (v22) {
      goto LABEL_17;
    }
LABEL_27:
    LODWORD(v34) = *v10;
    uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)*v10);
    v35.i16[0] = vaddlv_u8(v35);
    if (*v10 == v10[1]) {
      uint64_t v34 = v34;
    }
    else {
      uint64_t v34 = v35.u32[0];
    }
    uint64_t v36 = v25 + v34;
    *a5 = v36;
    if (v36 >= 0)
    {
      *((_DWORD *)a4 + 4) = v36;
      *((unsigned char *)a4 + 21) = 1;
      goto LABEL_32;
    }
LABEL_33:
    char v21 = 0;
    goto LABEL_34;
  }
  unsigned __int8 v13 = a3;
  uint64_t v38 = (unsigned int *)result;
  unint64_t v14 = (unint64_t)*a4 >> a3;
  unint64_t v15 = (uint64_t *)(a2 + 16 * (v14 & 0x1F));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = (a3 + 5);
  uint64_t v19 = *v15 + 16;
  uint64_t v20 = *v15 + 32;
  swift_retain();
  sub_24A5273E4(v40, v19, v20, v18, a4, a5, v16, v17);
  uint64_t result = swift_release();
  if (v40[0])
  {
    char v21 = 1;
    uint64_t v11 = a7;
LABEL_34:
    *uint64_t v11 = v21;
    return result;
  }
  int v22 = v14 & 0x1F;
  if (*((unsigned __int8 *)a4 + 20) != v13)
  {
    *((unsigned char *)a4 + 20) = v13;
    a4[1] = a6;
    uint64_t v27 = *a4;
    *((_DWORD *)a4 + 4) = ((unint64_t)*a4 >> (v13 & 0x3F)) & 0x1F;
    unsigned __int8 v10 = v38;
    uint64_t v11 = a7;
    uint64_t v9 = a2;
    if (v13 <= 0x3Fu) {
      *a4 = v27 & ~(-1 << (v13 & 0x3F));
    }
    *((unsigned char *)a4 + 21) = 0;
    uint64_t v25 = *a5;
    if (v22) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
  unsigned __int8 v10 = v38;
  uint64_t v11 = a7;
  uint64_t v9 = a2;
  uint64_t v25 = *a5;
  if (!v22) {
    goto LABEL_27;
  }
LABEL_17:
  uint64_t v28 = (v22 - 1);
  uint64_t v29 = *(void *)(v9 + 16 * v28 + 8);
  if (__OFADD__(v29, v25))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v29 + v25 < 0)
  {
    uint64_t v30 = (void *)(v9 + 16 * v28 - 8);
    while (1)
    {
      BOOL v31 = __OFADD__(v25, v29);
      v25 += v29;
      if (v31) {
        break;
      }
      *a5 = v25;
      if (!v28) {
        goto LABEL_27;
      }
      uint64_t v29 = *v30;
      uint64_t v32 = *v30 + v25;
      if (__OFADD__(*v30, v25)) {
        goto LABEL_36;
      }
      v30 -= 2;
      --v28;
      if ((v32 & 0x8000000000000000) == 0) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_24:
  uint64_t v33 = *(void *)(v9 + 16 * v28);
  unsigned __int8 v10 = (unsigned int *)*((unsigned __int8 *)a4 + 20);
  *a4 |= v28 << (char)v10;
  a4[1] = v33;
  *((_DWORD *)a4 + 4) = 0;
  swift_beginAccess();
  *((unsigned char *)a4 + 21) = *(_DWORD *)(v33 + 16) != 0;
  *((unsigned char *)a4 + 20) = (_BYTE)v10 + 5;
  uint64_t result = v29 + *a5;
  if (!__OFADD__(v29, *a5))
  {
    uint64_t result = sub_24A526A3C(result);
    if (result)
    {
LABEL_32:
      *a5 = 0;
      char v21 = 1;
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_38:
  __break(1u);
  return result;
}

BOOL sub_24A527694(unint64_t a1, unsigned int a2, unsigned __int8 a3, unsigned __int8 a4, unint64_t a5, unsigned int a6, unsigned __int8 a7, unsigned __int8 a8)
{
  if (a3)
  {
    if (a7)
    {
      LODWORD(v8) = a1 & 0x1F;
      LODWORD(v9) = a5 & 0x1F;
      if (v8 == v9)
      {
        unsigned __int8 v10 = 0;
        while (1)
        {
          v10 += 5;
          if (v10 >= a3) {
            break;
          }
          if (v10 >= a7)
          {
            if ((a8 & 1) == 0) {
              goto LABEL_24;
            }
            return 0;
          }
          uint64_t v8 = (a1 >> v10) & 0x1F;
          uint64_t v9 = (a5 >> v10) & 0x1F;
          if (v8 != v9) {
            goto LABEL_8;
          }
        }
        if (v10 >= a7) {
          goto LABEL_19;
        }
        if (a4) {
          return 1;
        }
        return ((a5 >> v10) & 0x1F) > a2;
      }
LABEL_8:
      BOOL v11 = v8 >= v9;
    }
    else
    {
      unsigned __int8 v10 = 0;
      if (a8) {
        return 0;
      }
LABEL_24:
      BOOL v11 = ((a1 >> v10) & 0x1F) >= a6;
    }
    char v14 = !v11;
    return v14 & 1;
  }
  else
  {
    if (a7)
    {
      if (a4) {
        return 1;
      }
      unsigned __int8 v10 = 0;
      return ((a5 >> v10) & 0x1F) > a2;
    }
LABEL_19:
    BOOL v13 = a2 < a6;
    if ((a4 ^ a8)) {
      return a4;
    }
    return v13;
  }
}

unint64_t sub_24A52778C()
{
  unint64_t result = qword_26979BBA0;
  if (!qword_26979BBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979BBA0);
  }
  return result;
}

__n128 __swift_memcpy22_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s6_ChunkVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 22)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s6_ChunkVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 22) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 22) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _UnsafePath()
{
  return &type metadata for _UnsafePath;
}

BOOL OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned __int8 v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v11 >= _s19CollectionsInternal4HeapV5countSivg_0())
  {
    uint64_t v13 = *(void *)(a4 + 16);
    if (v13)
    {
      uint64_t v14 = a3;
      unint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
      v20[1] = v14;
      swift_retain();
      swift_retain();
      uint64_t v16 = 0;
      uint64_t v17 = v13 - 1;
      do
      {
        sub_24A5BC260();
        BOOL v12 = OrderedSet.contains(_:)();
        (*v15)(v10, a5);
        if (!v12) {
          break;
        }
      }
      while (v17 != v16++);
      swift_release();
      swift_release();
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v12;
}

uint64_t OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_24A5BBA40();
  if (v9 >= _s19CollectionsInternal4HeapV5countSivg_0())
  {
    uint64_t v11 = *(void *)(a3 + 16);
    if (v11)
    {
      BOOL v12 = (void (**)(char *, uint64_t))(v6 + 8);
      swift_retain();
      swift_retain();
      uint64_t v13 = 0;
      uint64_t v14 = v11 - 1;
      do
      {
        sub_24A5BC260();
        char v10 = sub_24A5BBA70();
        (*v12)(v8, a4);
        if ((v10 & 1) == 0) {
          break;
        }
      }
      while (v14 != v13++);
      swift_release();
      swift_release();
    }
    else
    {
      char v10 = 1;
    }
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t OrderedSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a7;
  uint64_t v43 = a1;
  uint64_t v40 = a2;
  v38[0] = *(void *)(a4 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)v38 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  __int32 v39 = (char *)v38 - v18;
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v17);
  int v22 = (char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[0] = v23;
  sub_24A5BC210();
  swift_getWitnessTable();
  if (sub_24A5BBBC0())
  {
LABEL_2:
    char v24 = 1;
    return v24 & 1;
  }
  uint64_t result = type metadata accessor for OrderedSet();
  if (result == a5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v43, a5);
    swift_dynamicCast();
    char v24 = OrderedSet.isSubset(of:)(v44[0], v44[1], v40, a3, a4);
    swift_release();
    goto LABEL_10;
  }
  uint64_t v26 = *(void *)(a3 + 16);
  if (!v26)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v41 = a6;
  uint64_t v27 = v40;
  swift_retain();
  swift_retain();
  uint64_t v28 = v39;
  sub_24A5BC260();
  uint64_t v30 = v42;
  uint64_t v29 = v43;
  char v31 = sub_24A5BB870();
  if (v31 != 2)
  {
    if ((v31 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v38[0] + 8))(v28, a4);
      swift_release();
LABEL_17:
      swift_release();
      char v24 = 0;
      return v24 & 1;
    }
    v38[1] = a3;
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v38[0] + 32);
    uint64_t v34 = (void (**)(char *, uint64_t))(v38[0] + 8);
    uint64_t v35 = 1;
    while (v26 != v35)
    {
      sub_24A5BC260();
      ++v35;
      (*v33)(v16, v13, a4);
      char v36 = sub_24A5BB920();
      uint64_t v37 = *v34;
      (*v34)(v16, a4);
      if ((v36 & 1) == 0)
      {
        v37(v39, a4);
        swift_release();
        goto LABEL_17;
      }
    }
    (*v34)(v39, a4);
    swift_release();
    swift_release();
    goto LABEL_2;
  }
  uint64_t v32 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t result = MEMORY[0x270FA5388](v32);
  v38[-8] = a4;
  v38[-7] = a5;
  v38[-6] = v41;
  v38[-5] = v30;
  v38[-4] = v29;
  v38[-3] = v27;
  v38[-2] = a3;
  if (result < 0) {
    goto LABEL_21;
  }
  LOBYTE(v44[0]) = 2;
  uint64_t result = (uint64_t)sub_24A5813E4((unint64_t)(result + 63) >> 6, v44, (void *(*)(char *__return_ptr, unsigned char **))sub_24A52840C);
  if (LOBYTE(v44[0]) != 2)
  {
    char v24 = v44[0] & 1;
    (*(void (**)(char *, uint64_t))(v38[0] + 8))(v28, a4);
    swift_release();
LABEL_10:
    swift_release();
    return v24 & 1;
  }
LABEL_22:
  __break(1u);
  return result;
}

unint64_t sub_24A528020@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v41 = a8;
  uint64_t v46 = a7;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v50 = a2;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v43 = a1;
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v21 = (char *)&v39 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v50, a6);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Swift::Int v49 = v21;
  uint64_t v50 = AssociatedTypeWitness;
  sub_24A5BBEE0();
  uint64_t v23 = v42;
  char v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v24(v15, 1, a5) != 1)
  {
    uint8x8_t v44 = v24;
    uint64_t v45 = AssociatedConformanceWitness;
    uint64_t v28 = 0;
    char v31 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    uint64_t v29 = v23 + 32;
    uint64_t v30 = v31;
    uint64_t v32 = (void (**)(char *, uint64_t))(v29 - 24);
    while (1)
    {
      uint64_t v33 = v29;
      v30(v11, v15, a5);
      unint64_t result = OrderedSet._find(_:)();
      if (v35) {
        goto LABEL_4;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v36 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v37 = *(void *)(*v43 + v36);
      *(void *)(*v43 + v36) = v37 | (1 << result);
      if ((v37 & (1 << result)) != 0)
      {
LABEL_4:
        (*v32)(v11, a5);
      }
      else
      {
        ++v28;
        uint64_t v38 = _s19CollectionsInternal4HeapV5countSivg_0();
        (*v32)(v11, a5);
        if (v28 == v38)
        {
          char v25 = 1;
LABEL_12:
          uint64_t v27 = v41;
          uint64_t v26 = v40;
          goto LABEL_13;
        }
      }
      sub_24A5BBEE0();
      uint64_t v29 = v33;
      if (v44(v15, 1, a5) == 1)
      {
        char v25 = 0;
        goto LABEL_12;
      }
    }
  }
  char v25 = 0;
  uint64_t v26 = v40;
  uint64_t v27 = v41;
LABEL_13:
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v49, v50);
  *uint64_t v27 = v25;
  return result;
}

unint64_t sub_24A52840C@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return sub_24A528020(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], a2);
}

uint64_t _HashTable.UnsafeHandle.idealBucket<A>(for:)(uint64_t a1, void *a2)
{
  uint64_t result = sub_24A5BB370();
  uint64_t v4 = 1 << *a2;
  BOOL v5 = __OFSUB__(v4, 1);
  uint64_t v6 = v4 - 1;
  if (!v5) {
    return v6 & result;
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator(startingAt:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = result;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = v10;
  *(unsigned char *)(a4 + 48) = 0;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance(until:)(Swift::Int until)
{
  for (uint64_t i = v1[3]; i; uint64_t i = v1[3])
  {
    uint64_t v4 = -1 << *(void *)*v1;
    unint64_t v5 = (v4 ^ ~i) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v5 >= ~v4) {
      uint64_t v6 = ~v4;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v5 - v6 == until) {
      break;
    }
    _HashTable.BucketIterator.advance()();
  }
}

BOOL _HashTable.BucketIterator.isOccupied.getter()
{
  return *(void *)(v0 + 24) != 0;
}

uint64_t _HashTable.BucketIterator.currentBucket.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _HashTable.BucketIterator._currentBucket.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _HashTable.BucketIterator._currentBucket.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._currentBucket.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashTable.BucketIterator.init(hashTable:startingAt:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, a1, a2);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = result;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = v10;
  *(unsigned char *)(a4 + 48) = 0;
  return result;
}

uint64_t _HashTable.UnsafeHandle.idealBucket(forHashValue:)(uint64_t result, void *a2)
{
  uint64_t v2 = 1 << *a2;
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (!v3) {
    return v4 & result;
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator<A>(for:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_24A5BB370();
  uint64_t v7 = 1 << *a1;
  BOOL v8 = __OFSUB__(v7, 1);
  uint64_t v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v9 & result;
    uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & result, a1, a2);
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    *(void *)(a3 + 16) = v10;
    *(void *)(a3 + 24) = result;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 40) = v12;
    *(unsigned char *)(a3 + 48) = 0;
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.startFind(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  if (result)
  {
    uint64_t v11 = -1 << *a2;
    unint64_t v12 = (v11 ^ ~result) + ((uint64_t)a2[1] >> 6);
    if (v12 >= ~v11) {
      uint64_t v13 = ~v11;
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 - v13;
  }
  else
  {
    unint64_t v14 = 0;
  }
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = result;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = v10;
  *(unsigned char *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = v14;
  *(unsigned char *)(a4 + 64) = result == 0;
  return result;
}

uint64_t (*_HashTable.BucketIterator.currentValue.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v2 = v1[3];
  if (v2)
  {
    uint64_t v3 = -1 << *(void *)*v1;
    unint64_t v4 = (v3 ^ ~v2) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v4 >= ~v3) {
      uint64_t v5 = ~v3;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = v4 - v5;
  }
  else
  {
    unint64_t v6 = 0;
  }
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v2 == 0;
  return sub_24A528768;
}

uint64_t sub_24A528768(uint64_t a1)
{
  return _HashTable.BucketIterator.currentValue.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

Swift::Int_optional __swiftcall _HashTable.BucketIterator.findNext()()
{
  _HashTable.BucketIterator.advance()();
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = -1 << *(void *)*v0;
    unint64_t v3 = (v2 ^ ~v1) + (*(uint64_t *)(*v0 + 8) >> 6);
    if (v3 >= ~v2) {
      uint64_t v4 = ~v2;
    }
    else {
      uint64_t v4 = 0;
    }
    Swift::Int v5 = v3 - v4;
  }
  else
  {
    Swift::Int v5 = 0;
  }
  Swift::Bool v6 = v1 == 0;
  result.value = v5;
  result.is_nil = v6;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advanceToNextUnoccupiedBucket()()
{
  while (*(void *)(v0 + 24))
    _HashTable.BucketIterator.advance()();
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s14descr26FE1DA71C14BucketIteratorVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s14descr26FE1DA71C14BucketIteratorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.BucketIterator()
{
  return &type metadata for _HashTable.BucketIterator;
}

uint64_t BitArray.init()()
{
  return MEMORY[0x263F8EE78];
}

Swift::Void __swiftcall BitArray.reserveCapacity(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = (unint64_t)(a1 + 63) >> 6;
    unsigned int v3 = *v1;
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v2 > *((void *)v3 + 3) >> 1)
    {
      if (*((void *)v3 + 2) <= v2) {
        int64_t v5 = v2;
      }
      else {
        int64_t v5 = *((void *)v3 + 2);
      }
      unsigned int v3 = sub_24A499EB0(isUniquelyReferenced_nonNull_native, v5, 0, v3);
    }
    *uint64_t v1 = v3;
  }
}

unint64_t sub_24A52896C(unint64_t result, unint64_t a2)
{
  if (result == a2) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v4 = v2[1];
  if (v4 <= result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 <= a2)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v5 = *v2 + 32;
  uint64_t v6 = *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3F);
  BitArray.subscript.setter((*(void *)(v5 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1, result);
  return BitArray.subscript.setter(v6 & 1, a2);
}

void sub_24A528A28(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
}

uint64_t sub_24A528A38(int64_t *a1, uint64_t a2, ValueMetadata *a3, unint64_t a4)
{
  return BitArray.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a3, a4);
}

uint64_t BitArray.replaceSubrange<A>(_:with:)(int64_t a1, int64_t a2, uint64_t a3, ValueMetadata *a4, unint64_t a5)
{
  Description = (void (**)(char *, uint64_t, ValueMetadata *))a4[-1].Description;
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v30 - v14;
  int64_t v16 = sub_24A5BBAF0();
  sub_24A52A264(a1, a2, v16);
  if (a4 == &type metadata for BitArray)
  {
    Description[2](v15, a3, &type metadata for BitArray);
    swift_dynamicCast();
    a5 = v34;
    if ((v34 & 0x8000000000000000) == 0)
    {
      uint64_t v13 = v33 + 32;
      uint64_t v15 = (char *)*((void *)v33 + 2);
      int64_t v16 = *v5;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v5 = v16;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_10:
        unint64_t v21 = *(void *)(v16 + 16);
        int64_t v22 = v5[1];
        unint64_t v36 = v16 + 32;
        unint64_t v37 = v21;
        int64_t v38 = v22;
        sub_24A5B7EFC(0, a5, (uint64_t)v13, (uint64_t)v15, a1);
        *uint64_t v5 = v16;
        swift_bridgeObjectRelease_n();
        return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a3, &type metadata for BitArray);
      }
LABEL_17:
      int64_t v16 = (int64_t)sub_24A499D60(v16);
      *uint64_t v5 = v16;
      goto LABEL_10;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_26979B800) != a4)
  {
    uint64_t v17 = a1 + v16;
    if (__OFADD__(a1, v16))
    {
      __break(1u);
    }
    else if (v17 >= a1)
    {
      sub_24A5B7D88(a3, a1, v17, (uint64_t)a4);
      uint64_t v18 = Description[1];
      return ((uint64_t (*)(uint64_t, ValueMetadata *))v18)(a3, a4);
    }
    __break(1u);
    goto LABEL_16;
  }
  Description[2](v13, a3, a4);
  swift_dynamicCast();
  unint64_t v23 = v37;
  unint64_t v31 = v36;
  int64_t v24 = v38;
  uint64_t v25 = *(void *)(v38 + 16);
  uint64_t v26 = (char *)*v5;
  swift_bridgeObjectRetain();
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = (int64_t)v26;
  if ((v27 & 1) == 0)
  {
    uint64_t v26 = sub_24A499D60((uint64_t)v26);
    *uint64_t v5 = (int64_t)v26;
  }
  unint64_t v28 = *((void *)v26 + 2);
  int64_t v29 = v5[1];
  uint64_t v33 = v26 + 32;
  unint64_t v34 = v28;
  int64_t v35 = v29;
  sub_24A5B7EFC(v31, v23, v24 + 32, v25, a1);
  *uint64_t v5 = (int64_t)v26;
  swift_bridgeObjectRelease_n();
  return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a3, a4);
}

uint64_t sub_24A528DB8@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _s19CollectionsInternal8BitArrayV9repeating5countACSb_SitcfC_0(*a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_24A528DE8@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = BitArray.init<A>(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t BitArray.init<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  Description = (void (**)(char *, void, ValueMetadata *))a2[-1].Description;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v7 == &type metadata for BitArray)
  {
    Description[4](v6, a1, &type metadata for BitArray);
    swift_dynamicCast();
    return (uint64_t)v10;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_26979B800) == a2)
  {
    Description[2](v6, a1, a2);
    swift_dynamicCast();
    uint64_t v9 = sub_24A52AE2C((uint64_t)v10, v11, v12);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
    return v9;
  }
  unint64_t v11 = 0;
  uint64_t result = sub_24A5BB860();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v10 = sub_24A499EB0(0, (unint64_t)(result + 63) >> 6, 0, MEMORY[0x263F8EE78]);
    Description[2](v6, a1, a2);
    BitArray.append<A>(contentsOf:)((unint64_t)v6, a2);
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

void sub_24A529028(Swift::Bool *a1)
{
}

Swift::Void __swiftcall BitArray.append(_:)(Swift::Bool a1)
{
  uint64_t v3 = a1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x3F) == 0)
  {
    unint64_t v2 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v2 = (unint64_t)sub_24A499EB0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
    }
    unint64_t v6 = *(void *)(v2 + 16);
    unint64_t v5 = *(void *)(v2 + 24);
    if (v6 >= v5 >> 1) {
      unint64_t v2 = (unint64_t)sub_24A499EB0((char *)(v5 > 1), v6 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v6 + 1;
    *(void *)(v2 + 8 * v6 + 32) = 0;
    *uint64_t v1 = v2;
  }
  if (v4 == -1)
  {
    __break(1u);
LABEL_13:
    uint64_t v3 = (uint64_t)sub_24A499D60(v3);
    *uint64_t v1 = v3;
    goto LABEL_10;
  }
  v1[1] = v4 + 1;
  if ((v3 & 1) == 0) {
    return;
  }
  unint64_t v2 = v4 >> 6;
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  *(void *)(v3 + 8 * v2 + 32) |= 1 << (v4 & 0x3F);
  *uint64_t v1 = v3;
}

int64_t BitArray.append<A>(contentsOf:)(unint64_t a1, ValueMetadata *a2)
{
  uint64_t v3 = v2;
  unint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(char **)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char **)((char *)&v41 - v9);
  uint64_t Description = (uint64_t)a2[-1].Description;
  uint64_t v12 = MEMORY[0x270FA5388](v8);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int64_t v16 = (char *)&v41 - v15;
  if (a2 == &type metadata for BitArray)
  {
    (*(void (**)(char *, unint64_t, ValueMetadata *))(Description + 16))((char *)&v41 - v15, a1, &type metadata for BitArray);
    swift_dynamicCast();
    BitArray.append(contentsOf:)((int64_t)v49, v50);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(unint64_t, ValueMetadata *))(Description + 8))(a1, &type metadata for BitArray);
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B800);
  uint64_t v18 = *(void (**)(char *, unint64_t, ValueMetadata *))(Description + 16);
  if ((ValueMetadata *)v17 == a2)
  {
    v18(v14, a1, a2);
    int64_t result = swift_dynamicCast();
    uint64_t v10 = (char **)v49;
    uint64_t v27 = v50;
    uint64_t v28 = v50 - (void)v49;
    if (__OFSUB__(v50, v49))
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    unint64_t v29 = v51;
    unint64_t AssociatedTypeWitness = *((void *)v3 + 1);
    if (v28 < 1)
    {
LABEL_15:
      if ((AssociatedTypeWitness & 0x8000000000000000) == 0)
      {
        if (!__OFSUB__(AssociatedTypeWitness, v28))
        {
          uint64_t v42 = (char *)(AssociatedTypeWitness - v28);
          unint64_t v43 = v27;
          uint64_t v28 = (uint64_t)v10;
          uint64_t v44 = Description;
          uint64_t Description = v29 + 32;
          uint64_t v27 = *(void *)(v29 + 16);
          unint64_t v31 = (char **)v3;
          uint64_t v3 = *(char **)v3;
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v10 = v31;
          *unint64_t v31 = v3;
          if (isUniquelyReferenced_nonNull_native)
          {
LABEL_18:
            uint64_t v33 = *((void *)v3 + 2);
            uint64_t v46 = v3 + 32;
            uint64_t v47 = v33;
            unint64_t v48 = AssociatedTypeWitness;
            sub_24A5B7EFC(v28, v43, Description, v27, (unint64_t)v42);
            char *v10 = v3;
            swift_bridgeObjectRelease_n();
            return (*(uint64_t (**)(unint64_t, ValueMetadata *))(v44 + 8))(a1, a2);
          }
LABEL_35:
          uint64_t v3 = sub_24A499D60((uint64_t)v3);
          char *v10 = v3;
          goto LABEL_18;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    BOOL v30 = __CFADD__(AssociatedTypeWitness, v28);
    AssociatedTypeWitness += v28;
    if (v30)
    {
      __break(1u);
    }
    else if (AssociatedTypeWitness < 0xFFFFFFFFFFFFFFC0)
    {
      int64_t result = ((AssociatedTypeWitness + 63) >> 6) - *(void *)(*(void *)v3 + 16);
      if (result >= 0)
      {
        sub_24A4D5F98(result, 0);
        *((void *)v3 + 1) = AssociatedTypeWitness;
        goto LABEL_15;
      }
LABEL_40:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_40;
  }
  v18(v16, a1, a2);
  sub_24A5BB840();
  unint64_t v19 = *((void *)v3 + 1);
  uint64_t v45 = (char **)v3;
  if ((v19 & 0x3F) == 0)
  {
    uint64_t v42 = v7;
    unint64_t v43 = a1;
    swift_getAssociatedConformanceWitness();
    a1 = v19;
    goto LABEL_20;
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v20 = sub_24A4E0E68(64 - (v19 & 0x3F));
  if (!v21)
  {
    (*(void (**)(unint64_t, ValueMetadata *))(Description + 8))(a1, a2);
    return (*((uint64_t (**)(char **, unint64_t))v7 + 1))(v10, AssociatedTypeWitness);
  }
  uint64_t v22 = v21;
  unint64_t v43 = a1;
  uint64_t v44 = v20;
  uint64_t v42 = v7;
  a1 = v19 + v21;
  if (__CFADD__(v19, v21))
  {
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v23 = v45;
  v45[1] = (char *)a1;
  uint64_t v7 = *v23;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v23 = v7;
  if ((v24 & 1) == 0)
  {
LABEL_37:
    uint64_t v7 = sub_24A499D60((uint64_t)v7);
    *uint64_t v45 = v7;
  }
  unint64_t v25 = *((void *)v7 + 2);
  Swift::Int v49 = v7 + 32;
  unint64_t v50 = v25;
  unint64_t v51 = a1;
  sub_24A5B7E38(v44, v22, v19);
  uint64_t v3 = (char *)v45;
  *uint64_t v45 = v7;
LABEL_20:
  uint64_t v34 = sub_24A4E0E68(64);
  if (v35)
  {
    uint64_t v27 = v34;
    uint64_t v28 = v35;
    uint64_t v44 = Description;
    uint64_t v3 = *(char **)v3;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_24A499EB0(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v37 = *((void *)v3 + 2);
      unint64_t v36 = *((void *)v3 + 3);
      unint64_t v38 = v37 + 1;
      if (v37 >= v36 >> 1) {
        uint64_t v3 = sub_24A499EB0((char *)(v36 > 1), v37 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v38;
      *(void *)&v3[8 * v37 + 32] = 0;
      uint64_t Description = a1 + v28;
      if (__CFADD__(a1, v28)) {
        break;
      }
      Swift::Int v49 = v3 + 32;
      unint64_t v50 = v38;
      unint64_t v51 = a1 + v28;
      sub_24A5B7E38(v27, v28, a1);
      uint64_t v27 = sub_24A4E0E68(64);
      uint64_t v28 = v39;
      a1 = Description;
      if (!v39)
      {
        uint64_t v40 = v45;
        *uint64_t v45 = v3;
        v40[1] = (char *)Description;
        uint64_t Description = v44;
        goto LABEL_29;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
LABEL_29:
  (*(void (**)(unint64_t, ValueMetadata *))(Description + 8))(v43, a2);
  return (*((uint64_t (**)(char **, unint64_t))v42 + 1))(v10, AssociatedTypeWitness);
}

void sub_24A529708(Swift::Bool *a1, Swift::Int *a2)
{
}

Swift::Void __swiftcall BitArray.insert(_:at:)(Swift::Bool _, Swift::Int at)
{
  unint64_t v4 = (char **)v2;
  Swift::Int v7 = *((void *)v2 + 1);
  if ((v7 & 0x3F) != 0) {
    goto LABEL_6;
  }
  unint64_t v2 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_15;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v2 + 2);
    unint64_t v8 = *((void *)v2 + 3);
    uint64_t v3 = (char *)(v9 + 1);
    if (v9 >= v8 >> 1) {
      unint64_t v2 = sub_24A499EB0((char *)(v8 > 1), v9 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v3;
    *(void *)&v2[8 * v9 + 32] = 0;
    *unint64_t v4 = v2;
LABEL_6:
    if (v7 < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = (char *)(v7 + 1);
      v4[1] = (char *)(v7 + 1);
      uint64_t v3 = *v4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v4 = v3;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_8;
      }
    }
    uint64_t v3 = sub_24A499D60((uint64_t)v3);
    *unint64_t v4 = v3;
LABEL_8:
    if (v7 < at)
    {
      __break(1u);
      goto LABEL_14;
    }
    if (!__OFADD__(at, 1)) {
      break;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    unint64_t v2 = sub_24A499EB0(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  sub_24A5B7EFC(at, v7, (uint64_t)(v3 + 32), *((void *)v3 + 2), at + 1);
  sub_24A5AC474(_, at);
  *unint64_t v4 = v3;
}

uint64_t sub_24A52985C(int64_t a1, unint64_t *a2, ValueMetadata *a3, unint64_t a4)
{
  return BitArray.insert<A>(contentsOf:at:)(a1, *a2, a3, a4);
}

uint64_t BitArray.insert<A>(contentsOf:at:)(int64_t a1, unint64_t a2, ValueMetadata *a3, unint64_t a4)
{
  int64_t v10 = a1;
  uint64_t Description = a3[-1].Description;
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v36 - v14;
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v6 = (unint64_t)v5[1];
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v6 < a2)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v17 = sub_24A5BBAF0();
  if (v17 < 1)
  {
    uint64_t v22 = (uint64_t (*)(int64_t, ValueMetadata *))Description[1];
    int64_t v23 = v10;
    goto LABEL_15;
  }
  unint64_t v4 = (char *)v17;
  unint64_t v36 = a4;
  a4 = v17 + v6;
  if (v17 + v6 >= 0xFFFFFFFFFFFFFFC0) {
    goto LABEL_27;
  }
  uint64_t v18 = ((v17 + v6 + 63) >> 6) - *((void *)*v5 + 2);
  if (v18 < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_24A4D5F98(v18, 0);
  v5[1] = (char *)a4;
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v37 = v10;
  int64_t v10 = (int64_t)&v4[a2];
  if (!__OFADD__(a2, v4))
  {
    unint64_t v4 = *v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v5 = v4;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  unint64_t v4 = sub_24A499D60((uint64_t)v4);
  *unint64_t v5 = v4;
LABEL_10:
  uint64_t v20 = *((void *)v4 + 2);
  uint64_t v42 = v4 + 32;
  unint64_t v43 = v20;
  unint64_t v44 = a4;
  sub_24A5B7EFC(a2, v6, (uint64_t)(v4 + 32), v20, v10);
  *unint64_t v5 = v4;
  if (a3 == &type metadata for BitArray)
  {
    int64_t v10 = v37;
    ((void (*)(char *, uint64_t, ValueMetadata *))Description[2])(v15, v37, &type metadata for BitArray);
    swift_dynamicCast();
    a4 = v40;
    if ((v40 & 0x8000000000000000) == 0)
    {
      uint64_t v13 = v39 + 32;
      uint64_t v15 = (char *)*((void *)v39 + 2);
      unint64_t v6 = (unint64_t)*v5;
      swift_bridgeObjectRetain();
      char v25 = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v5 = (char *)v6;
      if (v25)
      {
LABEL_20:
        unint64_t v26 = *(void *)(v6 + 16);
        uint64_t v27 = v5[1];
        uint64_t v42 = (char *)(v6 + 32);
        unint64_t v43 = v26;
        unint64_t v44 = (unint64_t)v27;
        sub_24A5B7EFC(0, a4, (uint64_t)v13, (uint64_t)v15, a2);
        *unint64_t v5 = (char *)v6;
        swift_bridgeObjectRelease_n();
        return ((uint64_t (*)(int64_t, ValueMetadata *))Description[1])(v10, &type metadata for BitArray);
      }
LABEL_34:
      unint64_t v6 = (unint64_t)sub_24A499D60(v6);
      *unint64_t v5 = (char *)v6;
      goto LABEL_20;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_26979B800) != a3)
  {
    if (v10 >= (uint64_t)a2)
    {
      uint64_t v21 = v37;
      sub_24A5B7D88(v37, a2, v10, (uint64_t)a3);
      uint64_t v22 = (uint64_t (*)(int64_t, ValueMetadata *))Description[1];
      int64_t v23 = v21;
LABEL_15:
      return v22(v23, a3);
    }
    __break(1u);
    goto LABEL_33;
  }
  ((void (*)(char *, uint64_t, ValueMetadata *))Description[2])(v13, v37, a3);
  swift_dynamicCast();
  unint64_t v28 = (unint64_t)v42;
  unint64_t v29 = v43;
  unint64_t v30 = v44;
  uint64_t v31 = *(void *)(v44 + 16);
  uint64_t v32 = *v5;
  swift_bridgeObjectRetain();
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v5 = v32;
  if ((v33 & 1) == 0)
  {
    uint64_t v32 = sub_24A499D60((uint64_t)v32);
    *unint64_t v5 = v32;
  }
  unint64_t v34 = *((void *)v32 + 2);
  uint64_t v35 = v5[1];
  uint64_t v39 = v32 + 32;
  unint64_t v40 = v34;
  uint64_t v41 = v35;
  sub_24A5B7EFC(v28, v29, v30 + 32, v31, a2);
  *unint64_t v5 = v32;
  swift_bridgeObjectRelease_n();
  return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(v37, a3);
}

BOOL sub_24A529C7C@<W0>(Swift::Int *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = BitArray.remove(at:)(*a1);
  *a2 = result;
  return result;
}

Swift::Bool __swiftcall BitArray.remove(at:)(Swift::Int at)
{
  if (at < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v1 = v2;
  Swift::Int v3 = at;
  unint64_t v4 = (unint64_t)v2[1];
  if (v4 <= at)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  int64_t v5 = at + 1;
  if (__OFADD__(at, 1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((uint64_t)v4 < v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v6 = *v2;
  unint64_t v7 = *(void *)&(*v2)[8 * ((unint64_t)at >> 6) + 32];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v2 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_13:
    unint64_t v6 = sub_24A499D60((uint64_t)v6);
    *uint64_t v1 = v6;
  }
  sub_24A5B7EFC(v5, v4, (uint64_t)(v6 + 32), *((void *)v6 + 2), v3);
  *uint64_t v1 = v6;
  sub_24A4E6064();
  return (v7 >> v3) & 1;
}

uint64_t sub_24A529D94(uint64_t a1)
{
  return BitArray.removeSubrange(_:)(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t BitArray.removeSubrange(_:)(unint64_t a1, int64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v2 = v3;
  int64_t v6 = (int64_t)v3[1];
  if (v6 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v4 = a2;
  if (v6 >= a2)
  {
    unint64_t v5 = a1;
    unint64_t v7 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *Swift::Int v3 = v7;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  unint64_t v7 = sub_24A499D60((uint64_t)v7);
  *unint64_t v2 = v7;
LABEL_5:
  sub_24A5B7EFC(v4, v6, (uint64_t)(v7 + 32), *((void *)v7 + 2), v5);
  *unint64_t v2 = v7;
  uint64_t result = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
    __break(1u);
  }
  else
  {
    return sub_24A4E5C78(result);
  }
  return result;
}

Swift::Bool_optional sub_24A529E6C@<W0>(Swift::Bool_optional *a1@<X8>)
{
  result.value = BitArray._customRemoveLast()().value;
  a1->value = result.value;
  return result;
}

Swift::Bool_optional __swiftcall BitArray._customRemoveLast()()
{
  uint64_t v1 = v0[1];
  if (v1)
  {
    if ((v1 & 0x8000000000000000) == 0)
    {
      uint64_t v2 = *(void *)(*v0 + 8 * ((unint64_t)(v1 - 1) >> 6) + 32) >> (v1 - 1);
      sub_24A4E6064();
      return (Swift::Bool_optional)(v2 & 1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A529EE4(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v2 = *(void *)(v1 + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 >= result)
  {
    sub_24A4E5C78(result);
    return 1;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall BitArray._customRemoveLast(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v2 = *(void *)(v1 + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < a1)
  {
LABEL_7:
    __break(1u);
    return a1;
  }
  sub_24A4E5C78(a1);
  LOBYTE(a1) = 1;
  return a1;
}

BOOL sub_24A529F5C@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = BitArray.removeFirst()();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall BitArray.removeFirst()()
{
  unint64_t v4 = (unint64_t)v1[1];
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v1;
  unint64_t v2 = *v1;
  uint64_t v3 = *((void *)*v1 + 4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_7:
    unint64_t v2 = sub_24A499D60((uint64_t)v2);
    *uint64_t v0 = v2;
  }
  sub_24A5B7EFC(1uLL, v4, (uint64_t)(v2 + 32), *((void *)v2 + 2), 0);
  *uint64_t v0 = v2;
  sub_24A4E6064();
  return v3 & 1;
}

Swift::Void __swiftcall BitArray.removeFirst(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v1 = v2;
  Swift::Int v3 = a1;
  unint64_t v4 = (unint64_t)v2[1];
  if (a1 && v4 < a1)
  {
    __break(1u);
    return;
  }
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_11;
  }
  if (v4 < a1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v5 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_13:
    unint64_t v5 = sub_24A499D60((uint64_t)v5);
    *uint64_t v1 = v5;
  }
  sub_24A5B7EFC(v3, v4, (uint64_t)(v5 + 32), *((void *)v5 + 2), 0);
  *uint64_t v1 = v5;
  sub_24A4E5C78(v3);
}

Swift::Void __swiftcall BitArray.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  if (!keepingCapacity)
  {
    *uint64_t v1 = MEMORY[0x263F8EE78];
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = *v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    if (*(void *)(v3 + 24) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_26979AD20);
      unint64_t v4 = (void *)swift_allocObject();
      int64_t v5 = _swift_stdlib_malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      void v4[2] = 0;
      v4[3] = 2 * (v6 >> 3);
    }
    else
    {
      unint64_t v4 = (void *)MEMORY[0x263F8EE78];
    }
    *uint64_t v1 = (uint64_t)v4;
    goto LABEL_11;
  }
  sub_24A52AC38(0, *(void *)(v3 + 16));
LABEL_12:
  v1[1] = 0;
}

int64_t sub_24A52A1D4(uint64_t a1)
{
  int64_t result = sub_24A52A9C0(a1);
  if (!v2)
  {
    int64_t v4 = *(void *)(v1 + 8);
    if (v4 < 0)
    {
      __break(1u);
    }
    else if (v4 >= result)
    {
      return BitArray.removeSubrange(_:)(result, v4);
    }
    __break(1u);
  }
  return result;
}

uint64_t BitArray.init(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_24A52AE2C(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

int64_t sub_24A52A264(int64_t result, int64_t a2, int64_t a3)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v3 = v4;
  int64_t v7 = (int64_t)v4[1];
  if (v7 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v6 = a2;
  if (v7 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v8 = result;
  int64_t v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v5 = a3;
  if (v10 < a3)
  {
    uint64_t v11 = a3 - v10;
    if (__OFSUB__(a3, v10))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= 1)
    {
      int64_t v12 = v7 + v11;
      BOOL v13 = __CFADD__(v7 + v11, 64);
      uint64_t v14 = v7 + v11 + 64;
      if (v13)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      int64_t result = ((unint64_t)(v14 - 1) >> 6) - *((void *)*v4 + 2);
      if (result < 0)
      {
LABEL_28:
        __break(1u);
        return result;
      }
      sub_24A4D5F98(result, 0);
      v4[1] = (char *)v12;
    }
  }
  BOOL v15 = __OFADD__(v8, v5);
  v8 += v5;
  if (!v15)
  {
    unint64_t v9 = *v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *int64_t v4 = v9;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t v9 = sub_24A499D60((uint64_t)v9);
  *uint64_t v3 = v9;
LABEL_13:
  sub_24A5B7EFC(v6, v7, (uint64_t)(v9 + 32), *((void *)v9 + 2), v8);
  *uint64_t v3 = v9;
  int64_t result = v10 - v5;
  if (v10 <= v5) {
    return result;
  }
  if (__OFSUB__(v10, v5)) {
    goto LABEL_26;
  }
  return sub_24A4E5C78(result);
}

uint64_t BitArray.replaceSubrange(_:with:)(int64_t a1, int64_t a2, uint64_t a3, int64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  unint64_t v6 = v5;
  unint64_t v7 = a4;
  uint64_t v4 = a3;
  unint64_t v8 = a1;
  sub_24A52A264(a1, a2, a4);
  uint64_t v9 = *(void *)(v4 + 16);
  int64_t v10 = *v5;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    int64_t v10 = sub_24A499D60((uint64_t)v10);
    *unint64_t v6 = v10;
  }
  sub_24A5B7EFC(0, v7, v4 + 32, v9, v8);
  *unint64_t v6 = v10;
  return swift_bridgeObjectRelease_n();
}

uint64_t BitArray.replaceSubrange(_:with:)(int64_t a1, int64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  BOOL v13 = __OFSUB__(a4, a3);
  int64_t v14 = a4 - a3;
  if (v13)
  {
    __break(1u);
    goto LABEL_5;
  }
  unint64_t v7 = v6;
  uint64_t v5 = a5;
  unint64_t v8 = a4;
  unint64_t v9 = a1;
  sub_24A52A264(a1, a2, v14);
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = *v6;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v6 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    uint64_t v11 = sub_24A499D60((uint64_t)v11);
    *unint64_t v7 = v11;
  }
  sub_24A5B7EFC(a3, v8, v5 + 32, v10, v9);
  *unint64_t v7 = v11;
  return swift_bridgeObjectRelease_n();
}

int64_t BitArray.append(contentsOf:)(int64_t result, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v2 = v3;
  unint64_t v5 = a2;
  int64_t v4 = result;
  unint64_t v8 = (unint64_t)v3[1];
  if (a2)
  {
    BOOL v9 = __CFADD__(v8, a2);
    v8 += a2;
    if (v9)
    {
      __break(1u);
    }
    else if (v8 < 0xFFFFFFFFFFFFFFC0)
    {
      int64_t result = ((v8 + 63) >> 6) - *((void *)*v3 + 2);
      if (result >= 0)
      {
        sub_24A4D5F98(result, 0);
        v3[1] = (char *)v8;
        goto LABEL_7;
      }
LABEL_17:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_7:
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  unint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_14:
    unint64_t v7 = sub_24A499D60((uint64_t)v7);
    *uint64_t v2 = v7;
  }
  sub_24A5B7EFC(0, v5, v4 + 32, v6, v8 - v5);
  *uint64_t v2 = v7;
  return swift_bridgeObjectRelease();
}

int64_t BitArray.append(contentsOf:)(int64_t result, unint64_t a2, uint64_t a3)
{
  int64_t v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v3 = v4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = result;
  unint64_t v11 = (unint64_t)v4[1];
  if (v10 >= 1)
  {
    BOOL v12 = __CFADD__(v11, v10);
    v11 += v10;
    if (v12)
    {
      __break(1u);
    }
    else if (v11 < 0xFFFFFFFFFFFFFFC0)
    {
      int64_t result = ((v11 + 63) >> 6) - *((void *)*v4 + 2);
      if (result >= 0)
      {
        sub_24A4D5F98(result, 0);
        v4[1] = (char *)v11;
        goto LABEL_7;
      }
LABEL_19:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  BOOL v13 = __OFSUB__(v11, v10);
  int64_t v10 = v11 - v10;
  if (v13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  BOOL v9 = *v4;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *int64_t v4 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_16:
    BOOL v9 = sub_24A499D60((uint64_t)v9);
    *uint64_t v3 = v9;
  }
  sub_24A5B7EFC(v7, v6, v5 + 32, v8, v10);
  *uint64_t v3 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t BitArray.insert(contentsOf:at:)(uint64_t result, unint64_t a2, int64_t a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000) == 0) {
    return BitArray.insert(contentsOf:at:)(0, a2, result, a4, a3);
  }
  __break(1u);
  return result;
}

uint64_t BitArray.insert(contentsOf:at:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v13 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v5 = a3;
  if (v13 >= 1)
  {
    unint64_t v7 = v6;
    uint64_t v14 = v6[1];
    unint64_t v15 = v14 + v13;
    if (!__CFADD__(v14, v13))
    {
      if (v15 < 0xFFFFFFFFFFFFFFC0)
      {
        unint64_t v10 = a1;
        uint64_t v16 = ((v15 + 63) >> 6) - *(void *)(*v6 + 16);
        if (v16 >= 0)
        {
          int64_t v8 = a5;
          unint64_t v9 = a2;
          sub_24A4D5F98(v16, 0);
          v6[1] = v15;
          if ((v15 & 0x8000000000000000) == 0)
          {
            unint64_t v11 = v15 - v13;
            if ((uint64_t)(v15 - v13) >= v8)
            {
              unint64_t v12 = v8 + v13;
              if (!__OFADD__(v8, v13))
              {
                uint64_t v13 = *v6;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *unint64_t v6 = v13;
                if (isUniquelyReferenced_nonNull_native)
                {
LABEL_10:
                  sub_24A5B7EFC(v8, v11, v13 + 32, *(void *)(v13 + 16), v12);
                  *unint64_t v7 = v13;
                  uint64_t v18 = *(void *)(v5 + 16);
                  swift_bridgeObjectRetain();
                  char v19 = swift_isUniquelyReferenced_nonNull_native();
                  *unint64_t v7 = v13;
                  if ((v19 & 1) == 0)
                  {
                    uint64_t v13 = (uint64_t)sub_24A499D60(v13);
                    *unint64_t v7 = v13;
                  }
                  sub_24A5B7EFC(v10, v9, v5 + 32, v18, v8);
                  *unint64_t v7 = v13;
                  return swift_bridgeObjectRelease_n();
                }
LABEL_23:
                uint64_t v13 = (uint64_t)sub_24A499D60(v13);
                *unint64_t v7 = v13;
                goto LABEL_10;
              }
LABEL_22:
              __break(1u);
              goto LABEL_23;
            }
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A52A9C0(uint64_t result)
{
  uint64_t v3 = v1[1];
  if (((unint64_t)v3 & 0x8000000000000000) != 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!v3) {
    return 0;
  }
  int64_t v4 = (uint64_t (*)(char *))result;
  uint64_t v5 = (uint64_t)(*v1 + 32);
  unint64_t v26 = *v1;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  while (1)
  {
    char v28 = (*(void *)(v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1;
    char v7 = v4(&v28);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
    if (v7) {
      break;
    }
    if (v3 == (char *)++v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  int64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v6, 1))
  {
    if ((char *)(v6 + 1) == v3) {
      return v6;
    }
    for (unint64_t i = v6 + 1; i < (unint64_t)v3; ++i)
    {
      unint64_t v9 = v26 + 32;
      unint64_t v10 = i >> 6;
      uint64_t v11 = 1 << i;
      BOOL v27 = (*(void *)&v26[8 * (i >> 6) + 32] & (1 << i)) != 0;
      int64_t result = v4((char *)&v27);
      if ((result & 1) == 0)
      {
        if (i != v6)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_36;
          }
          if (v6 >= (unint64_t)v3) {
            goto LABEL_37;
          }
          uint64_t v24 = *(void *)&v9[8 * (v6 >> 6)];
          uint64_t v25 = *(void *)&v9[8 * v10];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v1 = v26;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v26 = sub_24A499D60((uint64_t)v26);
            *uint64_t v1 = v26;
          }
          uint64_t v13 = 1 << (v6 & 0x3F);
          uint64_t v14 = &v26[8 * (v6 >> 6)];
          uint64_t v15 = *((void *)v14 + 4);
          uint64_t v16 = v15 | v13;
          uint64_t v17 = v15 & ~v13;
          if ((v25 & v11) != 0) {
            uint64_t v17 = v16;
          }
          *((void *)v14 + 4) = v17;
          *uint64_t v1 = v26;
          int64_t result = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v1 = v26;
          if ((result & 1) == 0)
          {
            int64_t result = (uint64_t)sub_24A499D60((uint64_t)v26);
            unint64_t v26 = (char *)result;
            *uint64_t v1 = (char *)result;
          }
          uint64_t v18 = &v26[8 * v10];
          uint64_t v19 = *((void *)v18 + 4);
          uint64_t v20 = v19 | v11;
          uint64_t v21 = v19 & ~v11;
          if ((v24 & (1 << (v6 & 0x3F))) != 0) {
            uint64_t v21 = v20;
          }
          *((void *)v18 + 4) = v21;
          *uint64_t v1 = v26;
        }
        if (__OFADD__(v6++, 1)) {
          goto LABEL_35;
        }
      }
      int64_t v23 = (char *)(i + 1);
      if (__OFADD__(i, 1)) {
        goto LABEL_33;
      }
      if (v23 == v3) {
        return v6;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_24A52AC38(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    int64_t result = (unint64_t)sub_24A499EB0((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  int64_t result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13) {
    int64_t result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal8BitArrayV9repeating5countACSb_SitcfC_0(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  char v3 = result;
  unint64_t v4 = (a2 + 63) >> 6;
  if (!a2)
  {
    int64_t result = MEMORY[0x263F8EE78];
    goto LABEL_11;
  }
  unint64_t v5 = result << 63 >> 63;
  int64_t result = sub_24A5BB990();
  *(void *)(result + 16) = v4;
  unint64_t v6 = (unint64_t *)(result + 32);
  if (a2 < 0xC1)
  {
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v12 = v4 - v7;
    do
    {
      *v6++ = v5;
      --v12;
    }
    while (v12);
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  uint64_t v7 = v4 & 0x3FFFFFFFFFFFFFCLL;
  uint64_t v9 = 8 * (v4 & 0x3FFFFFFFFFFFFFCLL);
  unint64_t v6 = (unint64_t *)((char *)v6 + v9);
  int64x2_t v10 = vdupq_n_s64(v5);
  do
  {
    uint64_t v11 = (int64x2_t *)(result + v8);
    void v11[2] = v10;
    v11[3] = v10;
    v8 += 32;
  }
  while (v9 != v8);
  if (v4 != v7) {
    goto LABEL_9;
  }
LABEL_11:
  if ((v3 & 1) != 0 && (a2 & 0x3F) != 0)
  {
    if (v4 <= *(void *)(result + 16))
    {
      *(void *)(result + 8 * v4 + 24) = ~(-1 << (a2 & 0x3F));
      return result;
    }
LABEL_17:
    __break(1u);
  }
  return result;
}

uint64_t sub_24A52AE2C(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  unint64_t v6 = result;
  if (v3)
  {
    unint64_t v7 = (v3 + 63) >> 6;
    uint64_t v8 = sub_24A5BB990();
    *(void *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), 8 * v7);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  sub_24A5B7EFC(v6, a2, a3 + 32, v9, 0);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_24A52AF1C()
{
  unint64_t result = qword_26979BBA8;
  if (!qword_26979BBA8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B800);
    sub_24A52AF90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979BBA8);
  }
  return result;
}

unint64_t sub_24A52AF90()
{
  unint64_t result = qword_26979BBB0;
  if (!qword_26979BBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979BBB0);
  }
  return result;
}

unint64_t BitSet.subscript.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = sub_24A52B670(a1, a2);
  swift_bridgeObjectRetain();
  return v2;
}

char *BitSet.init(reservingCapacity:)(uint64_t a1)
{
  return sub_24A499EB0(0, ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6, 0, MEMORY[0x263F8EE78]);
}

Swift::Void __swiftcall BitSet.reserveCapacity(_:)(Swift::Int a1)
{
  unint64_t v2 = ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6;
  unint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v2 > *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v3 + 2) <= v2) {
      int64_t v5 = v2;
    }
    else {
      int64_t v5 = *((void *)v3 + 2);
    }
    unint64_t v3 = sub_24A499EB0(isUniquelyReferenced_nonNull_native, v5, 0, v3);
  }
  *uint64_t v1 = v3;
}

uint64_t BitSet.subscript.getter(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0 || a1 >> 6 >= *(void *)(a2 + 16)) {
    return 0;
  }
  else {
    return (*(void *)(a2 + 8 * (a1 >> 6) + 32) >> a1) & 1;
  }
}

unsigned char *BitSet.subscript.setter(unsigned char *result, unint64_t a2)
{
  char v5 = (char)result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if ((result & 1) == 0) {
      return result;
    }
    __break(1u);
LABEL_9:
    unint64_t v6 = (char *)*v2;
    if (v3 >= *(void *)(*v2 + 16) << 6) {
      return result;
    }
    goto LABEL_10;
  }
  unint64_t v3 = a2;
  unint64_t v4 = a2 >> 6;
  if ((result & 1) == 0) {
    goto LABEL_9;
  }
  unint64_t v6 = (char *)*v2;
  unint64_t v7 = *(void *)(*v2 + 16);
  BOOL v8 = v4 >= v7;
  uint64_t v9 = v4 - v7;
  if (v8)
  {
    if (v9 < -1)
    {
      __break(1u);
      return result;
    }
    sub_24A4D5F98(v9 + 1, 0);
    unint64_t v6 = (char *)*v2;
  }
LABEL_10:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v6 = sub_24A499D60((uint64_t)v6);
  }
  uint64_t v10 = *((void *)v6 + 2);
  uint64_t v11 = v6 + 32;
  uint64_t v12 = 1 << v3;
  if (v5) {
    uint64_t v13 = *(void *)&v11[8 * v4] | v12;
  }
  else {
    uint64_t v13 = *(void *)&v11[8 * v4] & ~v12;
  }
  *(void *)&v11[8 * v4] = v13;
  BOOL v14 = v4 == v10 - 1;
  *unint64_t v2 = (uint64_t)v6;
  return sub_24A54A3A0(&v14, v2);
}

unsigned char *(*BitSet.subscript.modify(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0 || a2 >> 6 >= *(void *)(*(void *)v2 + 16)) {
    LOBYTE(v3) = 0;
  }
  else {
    uint64_t v3 = (*(void *)(*(void *)v2 + 8 * (a2 >> 6) + 32) >> a2) & 1;
  }
  *(unsigned char *)(a1 + 16) = v3;
  return sub_24A52B23C;
}

unsigned char *sub_24A52B23C(uint64_t a1)
{
  return BitSet.subscript.setter((unsigned char *)*(unsigned __int8 *)(a1 + 16), *(void *)a1);
}

unint64_t BitSet.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A52B2C8(a3 + 32, *(void *)(a3 + 16), a1, a2, &v5);
  unint64_t v3 = v5;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t sub_24A52B2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  if (a4 <= 0) {
    unint64_t result = 0;
  }
  else {
    unint64_t result = a3 & ~(a3 >> 63);
  }
  unint64_t v8 = a2 << 6;
  if (a2 << 6 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v10 = a4 & ~(a4 >> 63);
    unint64_t v11 = a2 << 6;
    if (result < v8)
    {
      if ((uint64_t)(result >> 6) >= a2 || ((*(void *)(a1 + 8 * (result >> 6)) >> result) & 1) == 0) {
        unint64_t result = _UnsafeBitSet.index(after:)(result, a1, a2);
      }
      unint64_t v11 = result;
    }
    unint64_t result = v11;
    if (v11 < v10)
    {
      unint64_t result = v8;
      if (v10 < v8)
      {
        if (uint64_t)(v10 >> 6) < a2 && ((*(void *)(a1 + 8 * (v10 >> 6)) >> v10)) {
          unint64_t result = v10;
        }
        else {
          unint64_t result = _UnsafeBitSet.index(after:)(v10, a1, a2);
        }
      }
    }
    *a5 = v11;
    a5[1] = result;
  }
  return result;
}

unsigned char *BitSet.remove(at:)(unint64_t a1)
{
  unint64_t v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_24A499D60((uint64_t)v3);
  }
  if (a1 >> 6 >= *((void *)v3 + 2))
  {
    BOOL v8 = 0;
    *uint64_t v1 = (uint64_t)v3;
    unint64_t result = sub_24A54A3A0(&v8, v1);
  }
  else
  {
    unint64_t v4 = &v3[8 * (a1 >> 6)];
    uint64_t v5 = *((void *)v4 + 4);
    uint64_t v6 = v5 & (1 << a1);
    *((void *)v4 + 4) = v5 & ~(1 << a1);
    BOOL v8 = v6 != 0;
    *uint64_t v1 = (uint64_t)v3;
    unint64_t result = sub_24A54A3A0(&v8, v1);
    if (v6) {
      return (unsigned char *)a1;
    }
  }
  __break(1u);
  return result;
}

int64_t BitSet.filter(_:)(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    int64_t v7 = sub_24A5BB990();
    *(void *)(v7 + 16) = v6;
    bzero((void *)(v7 + 32), 8 * v6);
  }
  else
  {
    int64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
  }
  v9[0] = v7 + 32;
  v9[1] = v6;
  sub_24A52B51C(v9, a3, a1);
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  else {
    return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(v7);
  }
}

uint64_t sub_24A52B51C(uint64_t *a1, uint64_t a2, uint64_t (*a3)(unint64_t))
{
  uint64_t v6 = *a1;
  int64_t v7 = (unint64_t *)(a2 + 32);
  if (*(void *)(a2 + 16)) {
    unint64_t v8 = *v7;
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (v8)
  {
    if (v10 << 6 < 0) {
      goto LABEL_23;
    }
    unint64_t v11 = __rbit64(v8);
    v8 &= v8 - 1;
    unint64_t v12 = (v10 << 6) | __clz(v11);
LABEL_17:
    uint64_t result = a3(v12);
    if (v3) {
      return swift_bridgeObjectRelease();
    }
    if (result)
    {
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_24;
      }
      *(void *)(v6 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    }
  }
  uint64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1)) {
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(a2 + 16);
  if (v13 >= v14) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v15 = v7[v13];
  if (v15)
  {
    ++v10;
LABEL_15:
    if (v10 << 6 < 0) {
      goto LABEL_26;
    }
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v10 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v10 >= v14) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v15 = v7[v10];
    ++v13;
    if (v15) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_24A52B670(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0);
  sub_24A52B710();
  sub_24A5BB930();
  sub_24A52B2C8(a2 + 32, *(void *)(a2 + 16), v4[0], v4[1], v4);
  return v4[0];
}

unint64_t sub_24A52B710()
{
  unint64_t result = qword_26979B840;
  if (!qword_26979B840)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979AEC0);
    sub_24A4E823C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B840);
  }
  return result;
}

uint64_t BitSet.init()()
{
  return MEMORY[0x263F8EE78];
}

uint64_t BitSet.init<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int64_t v7 = (char *)&v19 - v6;
  uint64_t Description = (void (**)(char *, void, ValueMetadata *))a2[-1].Description;
  MEMORY[0x270FA5388](v5);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    Description[4](v11, a1, &type metadata for BitSet);
LABEL_7:
    swift_dynamicCast();
    return v22;
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    Description[4](v11, a1, &type metadata for BitSet.Counted);
    goto LABEL_7;
  }
  uint64_t v20 = v9;
  uint64_t v24 = (char *)MEMORY[0x263F8EE78];
  unint64_t v12 = Description[2];
  uint64_t v21 = a1;
  v12(v11, a1, a2);
  sub_24A5BB840();
  swift_getAssociatedConformanceWitness();
  uint64_t result = sub_24A5BBEE0();
  if (v23)
  {
LABEL_4:
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(v21, a2);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, AssociatedTypeWitness);
    return (uint64_t)v24;
  }
  else
  {
    unint64_t v14 = v22;
    unint64_t v15 = (char *)MEMORY[0x263F8EE78];
    while ((v14 & 0x8000000000000000) == 0)
    {
      unint64_t v16 = *((void *)v15 + 2);
      BOOL v17 = v14 >> 6 >= v16;
      uint64_t v18 = (v14 >> 6) - v16;
      if (v17)
      {
        if (v18 < -1) {
          goto LABEL_19;
        }
        sub_24A4D5F98(v18 + 1, 0);
      }
      unint64_t v15 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v15 = sub_24A499D60((uint64_t)v15);
      }
      *(void *)&v15[8 * (v14 >> 6) + 32] |= 1 << v14;
      uint64_t v24 = v15;
      uint64_t result = sub_24A5BBEE0();
      unint64_t v14 = v22;
      if (v23) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

int64_t BitSet.init<A>(words:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v10 = sub_24A52C7BC(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v10;
}

uint64_t sub_24A52BB1C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v40 - v13;
  unint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_24A5BBD20();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  char v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  unint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  char v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  unint64_t v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_24A5BB860();
  uint64_t v61 = sub_24A5BB330();
  uint64_t v56 = sub_24A5BC210();
  sub_24A5BC180();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = sub_24A5BB840();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    char v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    unint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_24A5BBEE0();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_24A5BC1C0();
      if (!--v31)
      {
        uint64_t v35 = v54;
        unint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  unint64_t v36 = v51;
LABEL_9:
  sub_24A5BBEE0();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    unint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_24A5BC1C0();
      sub_24A5BBEE0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

int64_t BitSet.init<A>(bitPattern:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int64_t v7 = (char *)&v16 - v6;
  sub_24A5BBF40();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int64_t v14 = sub_24A52C7BC((uint64_t)v7, AssociatedTypeWitness, *(void *)(*(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8) + 8), v9, v10, v11, v12, v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v14;
}

uint64_t BitSet.init<A>(_validMembersOf:)(uint64_t a1, ValueMetadata *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t Description = (void (**)(char *, void, ValueMetadata *))a2[-1].Description;
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    Description[4](v11, a1, &type metadata for BitSet);
LABEL_17:
    swift_dynamicCast();
    return v21;
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    Description[4](v11, a1, &type metadata for BitSet.Counted);
    goto LABEL_17;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0) == a2)
  {
    Description[2](v11, a1, a2);
    swift_dynamicCast();
    if (v22 <= 0) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = v21 & ~(v21 >> 63);
    }
    uint64_t v18 = _s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(v19, v22 & ~(v22 >> 63));
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
    return (uint64_t)v18;
  }
  uint64_t v12 = (char *)MEMORY[0x263F8EE78];
  char v23 = (char *)MEMORY[0x263F8EE78];
  Description[2](v11, a1, a2);
  sub_24A5BB840();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    do
    {
      uint64_t result = sub_24A5BBEE0();
      if (v22 == 1)
      {
        ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
        return (uint64_t)v23;
      }
      unint64_t v14 = v21;
    }
    while (v21 < 0);
    uint64_t v20 = v5;
    unint64_t v15 = *((void *)v12 + 2);
    BOOL v16 = (unint64_t)v21 >> 6 >= v15;
    uint64_t v17 = ((unint64_t)v21 >> 6) - v15;
    if (v16) {
      break;
    }
LABEL_11:
    uint64_t v12 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_24A499D60((uint64_t)v12);
    }
    *(void *)&v12[8 * (v14 >> 6) + 32] |= 1 << v14;
    char v23 = v12;
    uint64_t v5 = v20;
  }
  if (v17 >= -1)
  {
    sub_24A4D5F98(v17 + 1, 0);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t BitSet.init(_:)(unint64_t a1, unint64_t a2)
{
  if (((a2 | a1) & 0x8000000000000000) == 0) {
    return (unint64_t)_s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(a1, a2);
  }
  __break(1u);
  return a1;
}

int64_t _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(int64_t result)
{
  int64_t v7 = result;
  int64_t v1 = *(void *)(result + 16);
  int64_t v2 = v1 - 1;
  if (!v1) {
    goto LABEL_4;
  }
  uint64_t v3 = v1 - 1;
  if (*(void *)(result + 32 + 8 * v2)) {
    goto LABEL_5;
  }
  uint64_t v3 = v1 - 2;
  if ((unint64_t)v1 < 2) {
    goto LABEL_4;
  }
  if (!*(void *)(result + 32 + 8 * v3))
  {
    uint64_t v5 = *(void *)(result + 16);
    while (v5 - 2 >= 1)
    {
      if (*(void *)(result + 8 + 8 * v5--))
      {
        uint64_t v3 = v5 - 2;
        goto LABEL_5;
      }
    }
LABEL_4:
    uint64_t v3 = -1;
  }
LABEL_5:
  uint64_t v4 = v2 - v3;
  if (v4 < 1) {
    return result;
  }
  uint64_t result = v1 - v4;
  if (v1 < v4)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v1 < result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  sub_24A52AC38(result, v1);
  return v7;
}

int64_t sub_24A52C7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v8 = sub_24A52BB1C((void (*)(char *, char *))sub_24A498BC4, 0, a2, (char *)&type metadata for _UnsafeBitSet._Word, MEMORY[0x263F8E628], a3, MEMORY[0x263F8E658], a8);
  return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(v8);
}

char *_s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(unint64_t a1, unint64_t a2)
{
  char v3 = a1;
  uint64_t v14 = MEMORY[0x263F8EE78];
  unint64_t v4 = a1 >> 6;
  if (a1 >= 0x40) {
    sub_24A4D5F98(a1 >> 6, 0);
  }
  char v5 = v3 & 0x3F;
  uint64_t v6 = (a2 >> 6) - v4;
  if (v6)
  {
    int64_t v8 = (char *)v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v8 = sub_24A499EB0(0, *(void *)(v14 + 16) + 1, 1, (char *)v14);
    }
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    if (v10 >= v9 >> 1) {
      int64_t v8 = sub_24A499EB0((char *)(v9 > 1), v10 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v10 + 1;
    *(void *)&v8[8 * v10 + 32] = -1 << v5;
    if (v6 >= 1) {
      sub_24A4D5F98(v6 - 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v7 = ~(-1 << a2);
  }
  else
  {
    uint64_t v7 = (-1 << a2) ^ (-1 << v5);
    int64_t v8 = (char *)v14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v8 = sub_24A499EB0(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  unint64_t v12 = *((void *)v8 + 2);
  unint64_t v11 = *((void *)v8 + 3);
  if (v12 >= v11 >> 1) {
    int64_t v8 = sub_24A499EB0((char *)(v11 > 1), v12 + 1, 1, v8);
  }
  *((void *)v8 + 2) = v12 + 1;
  *(void *)&v8[8 * v12 + 32] = v7;
  sub_24A54A2CC();
  return v8;
}

uint64_t OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A52CA34(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_24A5303F0);
}

{
  return sub_24A52CA34(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_24A530ADC);
}

uint64_t sub_24A52CA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
}

uint64_t OrderedDictionary.updateValue<A>(forKey:default:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(unint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v19 = *(void *)(*(void *)(a6 + 24) - 8);
  MEMORY[0x270FA5388](a1);
  swift_retain();
  swift_retain();
  unint64_t v8 = OrderedSet._find(_:)();
  char v10 = v9;
  uint64_t v12 = v11;
  swift_release();
  swift_release();
  if ((v10 & 1) == 0)
  {
    sub_24A5BC210();
    uint64_t result = sub_24A5BC190();
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v14 = *(void *)(v6 + 16);
      if (*(void *)(v14 + 16) > v8)
      {
        unint64_t v15 = v14
            + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
            + *(void *)(v19 + 72) * v8;
        return a4(v15);
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  type metadata accessor for OrderedSet();
  OrderedSet._appendNew(_:in:)(a1, v12);
  a2();
  sub_24A5BC210();
  sub_24A5BC1C0();
  uint64_t v16 = *(void *)(*(void *)(v6 + 16) + 16);
  uint64_t result = sub_24A5BC190();
  if (!v16)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v17 = *(void *)(v6 + 16);
  if (*(void *)(v17 + 16) > (unint64_t)(v16 - 1))
  {
    unint64_t v15 = v17
        + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
        + *(void *)(v19 + 72) * (v16 - 1);
    return a4(v15);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.values.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.count.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t OrderedDictionary.isEmpty.getter()
{
  return sub_24A5BBBC0() & 1;
}

uint64_t OrderedDictionary._keys.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary._keys.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t result = swift_release();
  *int64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedDictionary._keys.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary._values.getter()
{
  return swift_retain();
}

uint64_t OrderedDictionary._values.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*OrderedDictionary._values.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.keys.getter(uint64_t a1)
{
  return a1;
}

void (*OrderedDictionary.values.modify(void *a1, void *a2))(void **a1)
{
  char v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)char v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = v7;
  swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_24A5BB970();
  uint64_t v9 = a2[4];
  *((void *)v5 + 6) = v9;
  uint64_t v10 = sub_24A4D5BD8(v8, v6, v7, v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v10;
  *(void *)(v2 + 8) = v12;
  *(void *)(v2 + 16) = v14;
  return sub_24A52CFAC;
}

void sub_24A52CFAC(void **a1)
{
  uint64_t v1 = *a1;
  sub_24A4E6A3C((void *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t OrderedDictionary.values.setter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v5 = v4;
  uint64_t v9 = a4[2];
  uint64_t v10 = a4[3];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getTupleTypeMetadata2();
  uint64_t v11 = sub_24A5BB970();
  uint64_t v12 = sub_24A4D5BD8(v11, v9, v10, a4[4]);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *char v5 = v12;
  v5[1] = v14;
  v5[2] = v16;
  v19[0] = a1;
  v19[1] = a2;
  v19[2] = a3;
  sub_24A4E6A3C(v5, v19);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  OrderedSet._find(_:)();
  if (v4)
  {
    uint64_t v5 = 1;
  }
  else
  {
    sub_24A5BC260();
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  return v6(a2, v5, 1, a1);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v43 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v45 = (char *)&v41 - v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26979AA50);
  uint64_t v13 = sub_24A5BBD20();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v41 - v16;
  uint64_t v44 = v3;
  swift_retain();
  swift_retain();
  uint64_t v46 = (char *)a2;
  uint64_t v48 = v5;
  unint64_t v18 = OrderedSet._find(_:)();
  LOBYTE(v5) = v19;
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  uint64_t v22 = &v17[*(int *)(v15 + 56)];
  *(void *)uint64_t v17 = v18;
  unsigned char v17[8] = v5 & 1;
  uint64_t v23 = v49;
  uint64_t v24 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v22, v50, v13);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v9);
  if ((v5 & 1) == 0)
  {
    if (v25 == 1)
    {
      uint64_t v26 = v48;
      uint64_t v27 = type metadata accessor for OrderedSet();
      uint64_t v28 = v21;
      uint64_t v29 = v43;
      OrderedSet._removeExistingMember(at:in:)(v18, v28, v27);
      uint64_t v30 = v23;
      uint64_t v31 = *(void (**)(char *, uint64_t))(v47 + 8);
      v31(v29, v26);
      sub_24A5BC210();
      uint64_t v32 = v45;
      sub_24A5BC1E0();
      v31(v46, v26);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v50, v13);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v9);
    }
    unint64_t v38 = v45;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v45, v22, v9);
    uint64_t v39 = v44;
    sub_24A5BC210();
    uint64_t result = sub_24A5BC190();
    if ((v18 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v40 = *(void *)(v39 + 16);
      if (*(void *)(v40 + 16) > v18)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v23 + 24))(v40+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v18, v38, v9);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v50, v13);
        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v38, v9);
      }
    }
    __break(1u);
    return result;
  }
  if (v25 == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v50, v13);
  }
  else
  {
    uint64_t v33 = v21;
    unint64_t v34 = v45;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v45, v22, v9);
    uint64_t v35 = v48;
    type metadata accessor for OrderedSet();
    uint64_t v36 = (uint64_t)v46;
    OrderedSet._appendNew(_:in:)((uint64_t)v46, v33);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v42, v34, v9);
    sub_24A5BC210();
    sub_24A5BC1C0();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v36, v35);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v50, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v34, v9);
  }
}

void (*OrderedDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 24);
  v7[2] = v3;
  v7[3] = v8;
  uint64_t v9 = sub_24A5BBD20();
  v7[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[5] = v10;
  uint64_t v11 = malloc(*(void *)(v10 + 64));
  v7[6] = v11;
  (*(void (**)(void))(*(void *)(v8 - 8) + 56))();
  uint64_t v12 = OrderedDictionary._prepareForKeyingModify(_:_:)(a2, (uint64_t)v11, a3);
  *((unsigned char *)v7 + 72) = v13;
  _OWORD v7[7] = v12;
  v7[8] = v14;
  return sub_24A52D854;
}

void sub_24A52D854(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[7];
  uint64_t v3 = (*a1)[8];
  uint64_t v5 = (*a1)[5];
  char v4 = (void *)(*a1)[6];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = **a1;
  char v8 = (*a1)[9] & 1;
  uint64_t v9 = type metadata accessor for OrderedDictionary();
  OrderedDictionary._finalizeKeyingModify(_:_:_:_:)(v7, v2, v8, v3, (uint64_t)v4, v9);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  free(v4);
  free(v1);
}

uint64_t OrderedDictionary._prepareForKeyingModify(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = OrderedSet._find(_:)();
  if (v6) {
    return v5;
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = sub_24A5BBD20();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a2, v8);
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (!__OFSUB__(result, 1))
  {
    sub_24A5BC210();
    swift_getWitnessTable();
    sub_24A5BB4B0();
    swift_getWitnessTable();
    swift_getWitnessTable();
    sub_24A5BBC70();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary._finalizeKeyingModify(_:_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a1;
  uint64_t v34 = *(void *)(a6 + 16);
  uint64_t v35 = a4;
  uint64_t v33 = *(void *)(v34 - 8);
  char v9 = a3 & 1;
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v32 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v10);
  uint64_t v36 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v37 = (char *)&v31 - v17;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26979AA50);
  uint64_t v18 = sub_24A5BBD20();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v22 = (char *)&v31 - v21;
  uint64_t v23 = &v22[*(int *)(v20 + 56)];
  uint64_t v24 = a2;
  *(void *)uint64_t v22 = a2;
  v22[8] = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v23, a5, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v23, 1, v13);
  if (a3)
  {
    if (result == 1) {
      return result;
    }
    uint64_t v26 = v37;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v37, v23, v13);
    type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:in:)(v31, v35);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v36, v26, v13);
    sub_24A5BC210();
    sub_24A5BC1C0();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v26, v13);
  }
  if (result != 1)
  {
    uint64_t v26 = v37;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v37, v23, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v36, v26, v13);
    sub_24A5BC210();
    sub_24A5BC1C0();
    uint64_t v39 = v24;
    uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v38 = result - 1;
    swift_getWitnessTable();
    sub_24A5BB4B0();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v26, v13);
  }
  if (_s19CollectionsInternal4HeapV5countSivg_0() > a2)
  {
    sub_24A5BC210();
    uint64_t v27 = v37;
    sub_24A5BC1E0();
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v36, v27, v13);
    sub_24A5BC1C0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v13);
  }
  uint64_t v28 = v34;
  uint64_t v29 = type metadata accessor for OrderedSet();
  uint64_t v30 = v32;
  OrderedSet._removeExistingMember(at:in:)(a2, v35, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v30, v28);
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OrderedSet._find(_:)();
  if (v4) {
    return a2(v3);
  }
  return sub_24A5BC260();
}

void (*OrderedDictionary.subscript.modify(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v10 = malloc(0x38uLL);
  *a1 = v10;
  void *v10 = a5;
  v10[1] = v5;
  uint64_t v11 = *(void *)(a5 + 24);
  _OWORD v10[2] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12;
  v10[3] = v12;
  size_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = malloc(v14);
  v10[4] = v15;
  uint64_t v16 = malloc(v14);
  v10[5] = v16;
  v10[6] = OrderedDictionary._prepareForDefaultedModify(_:_:)((uint64_t)v15, a2, a3, a4, a5);
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v16, v15, v11);
  return sub_24A52E100;
}

void sub_24A52E100(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 40);
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  uint64_t v5 = *(void *)(*(void *)a1 + 24);
  char v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = type metadata accessor for OrderedDictionary();
  OrderedDictionary._finalizeDefaultedModify(_:_:)(v3, (uint64_t)v2, v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v2, v6);
  free(v2);
  free(v4);
  free(v1);
}

uint64_t OrderedDictionary._prepareForDefaultedModify(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v9 = *(void *)(*(void *)(a5 + 24) - 8);
  MEMORY[0x270FA5388](a1);
  type metadata accessor for OrderedSet();
  uint64_t v10 = OrderedSet._append(_:)(a2);
  uint64_t v12 = v11;
  if (v10)
  {
    a3(v10);
    sub_24A5BC210();
    sub_24A5BC1C0();
  }
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v13 = *(void *)(v6 + 16);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = v13 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v17[0] = v15;
  v17[1] = v14;
  sub_24A52E544();
  sub_24A4BEFBC(v17, v15, v14);
  return v12;
}

uint64_t OrderedDictionary.subscript.setter(char *a1, char *a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  uint64_t v8 = *(void *)(a5 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v17);
  uint64_t v18 = OrderedDictionary._prepareForDefaultedModify(_:_:)((uint64_t)v12, (uint64_t)v17, a3, v24, a5);
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v12, a1, v8);
  uint64_t v19 = type metadata accessor for OrderedDictionary();
  OrderedDictionary._finalizeDefaultedModify(_:_:)(v18, (uint64_t)v12, v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v21(v23, v14);
  v20(a1, v8);
  return v21(v17, v14);
}

uint64_t sub_24A52E544()
{
  uint64_t result = sub_24A5BB540();
  if (result) {
    return sub_24A5BBD10();
  }
  __break(1u);
  return result;
}

void *OrderedDictionary._finalizeDefaultedModify(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  v12[0] = v8
         + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80));
  uint64_t v10 = v12[0];
  v12[1] = v9;
  sub_24A52E6A8((uint64_t)v12, a1, a2, *(void *)(a3 + 16), v7);
  return sub_24A4BEFBC(v12, v10, v9);
}

uint64_t sub_24A52E6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_24A5BB540();
  if (result)
  {
    uint64_t v12 = result + *(void *)(v8 + 72) * a2;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, a5);
    return sub_24A544CAC((uint64_t)v10, v12, a5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a4;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v21 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  uint64_t v18 = a2;
  unint64_t v9 = OrderedSet._find(_:)();
  LOBYTE(a2) = v10;
  uint64_t v12 = v11;
  swift_release();
  swift_release();
  if (a2)
  {
    type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:in:)(v18, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v8, v19, v6);
    sub_24A5BC210();
    sub_24A5BC1C0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, 1, 1, v6);
  }
  uint64_t v14 = v19;
  uint64_t v13 = v20;
  uint64_t v15 = v4 + 16;
  sub_24A5BC260();
  sub_24A5BC210();
  uint64_t result = sub_24A5BC190();
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)(*(void *)v15 + 16) <= v9)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v21 + 24))(*(void *)v15+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v9, v14, v6);
  uint64_t v17 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56);
  return v17(v13, 0, 1, v6);
}

uint64_t OrderedDictionary.updateValue(_:forKey:insertingAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OrderedSet();
  char v15 = OrderedSet.insert(_:at:)(a3, a4, v14);
  unint64_t v17 = v16;
  if (v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    sub_24A5BC210();
    sub_24A5BC1D0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
    return v17;
  }
  uint64_t v18 = v5 + 16;
  sub_24A5BC260();
  sub_24A5BC210();
  uint64_t result = sub_24A5BC190();
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v18 + 16) > v17)
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(*(void *)v18+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v17, a2, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.updateValue<A>(forKey:insertingDefault:at:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, unint64_t a4, uint64_t (*a5)(unint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v22 = *(void *)(*(void *)(a7 + 24) - 8);
  MEMORY[0x270FA5388](a1);
  swift_retain();
  swift_retain();
  unint64_t v10 = OrderedSet._find(_:)();
  char v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  swift_release();
  if ((v12 & 1) == 0)
  {
    sub_24A5BC210();
    uint64_t result = sub_24A5BC190();
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v16 = *(void *)(v8 + 16);
      if (*(void *)(v16 + 16) > v10)
      {
        unint64_t v17 = v16
            + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
            + *(void *)(v22 + 72) * v10;
        return a5(v17);
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v18 = type metadata accessor for OrderedSet();
  OrderedSet._insertNew(_:at:in:)(a1, a4, v14, v18);
  a2();
  sub_24A5BC210();
  sub_24A5BC1D0();
  uint64_t result = sub_24A5BC190();
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v8 + 16);
  if (*(void *)(v19 + 16) > a4)
  {
    unint64_t v17 = v19
        + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
        + *(void *)(v22 + 72) * a4;
    return a5(v17);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OrderedSet._find(_:)();
  if (v11)
  {
    unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 56);
    return v17(a3, 1, 1);
  }
  else
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    uint64_t v14 = type metadata accessor for OrderedSet();
    OrderedSet._removeExistingMember(at:in:)(v12, v13, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v15 = *(void *)(a2 + 24);
    sub_24A5BC210();
    sub_24A5BC1E0();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 0, 1, v15);
  }
}

uint64_t sub_24A52EFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v10, v13);
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, a6);
  }
  return result;
}

uint64_t sub_24A52F0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = TupleTypeMetadata2 - 8;
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v31 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v30 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = *(int *)(v9 + 56);
  uint64_t v15 = &v13[v14];
  uint64_t v29 = &v13[v14];
  uint64_t v16 = a1 + v14;
  uint64_t v25 = a1 + v14;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v27 = a1;
  v26(v13, a1, a2);
  uint64_t v18 = *(void *)(a3 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v18 + 16);
  v19(v15, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v13, a2);
  uint64_t v20 = *(int *)(v9 + 56);
  uint64_t v21 = v31;
  uint64_t v22 = &v31[v20];
  v26(v31, v27, a2);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v22, v25, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v22, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v29, a3);
}

uint64_t OrderedDictionary.merging<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_24A52F394(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A5303F0);
}

{
  return sub_24A52F394(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A530ADC);
}

uint64_t sub_24A52F394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = type metadata accessor for OrderedDictionary();
  swift_retain();
  swift_retain();
  swift_retain();
  a12(a1, a2, a3, v14, a9, a11);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a9 - 8) + 8))(a1, a9);
  uint64_t result = a4;
  if (v18)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.filter(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, void (**a4)(void, void, void), void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v72 = a4;
  uint64_t v73 = a5;
  unint64_t v67 = a1;
  uint64_t v68 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v71 = *(void **)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v56 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v69 = (char *)&v55 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v55 = (char *)&v55 - v17;
  uint64_t v18 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v55 - v19;
  swift_getTupleTypeMetadata2();
  uint64_t v21 = sub_24A5BB970();
  uint64_t v22 = sub_24A4D5BD8(v21, a6, a7, a8);
  uint64_t v24 = v23;
  uint64_t v70 = v25;
  uint64_t v26 = a6;
  swift_bridgeObjectRelease();
  uint64_t v80 = v22;
  uint64_t v81 = v24;
  uint64_t v27 = TupleTypeMetadata2;
  uint64_t v82 = v70;
  uint64_t v76 = a3;
  uint64_t v77 = v72;
  uint64_t v78 = v73;
  uint64_t v79 = 0;
  uint64_t v57 = a8;
  uint64_t v28 = type metadata accessor for OrderedDictionary.Iterator();
  swift_retain();
  swift_retain();
  swift_retain();
  OrderedDictionary.Iterator.next()(v28, v20);
  uint64_t v29 = v71;
  uint64_t v30 = (char *)(v71 + 6);
  uint64_t v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v71[6];
  if (v31(v20, 1, v27) == 1)
  {
LABEL_2:
    swift_release();
    swift_release();
    swift_release();
    return v80;
  }
  else
  {
    uint64_t v58 = v31;
    uint64_t v33 = *(void *)(v26 - 8);
    uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 32);
    uint64_t v63 = v33 + 32;
    uint64_t v64 = v34;
    uint64_t v62 = a7 - 8;
    uint64_t v72 = (void (**)(void, void, void))(v33 + 16);
    uint64_t v73 = (void *)(v33 + 8);
    unint64_t v65 = (void (**)(uint64_t, uint64_t))(v29 + 1);
    uint64_t v35 = a7;
    uint64_t v36 = (uint64_t)v55;
    uint64_t v66 = v27;
    uint64_t v61 = v20;
    uint64_t v60 = v28;
    uint64_t v59 = v30;
    uint64_t v74 = a7;
    while (1)
    {
      uint64_t v37 = *(int *)(v27 + 48);
      uint64_t v38 = (void *)(v36 + v37);
      uint64_t v39 = &v20[v37];
      v64(v36, v20, v26);
      uint64_t v40 = *(void *)(v35 - 8);
      (*(void (**)(void *, char *, uint64_t))(v40 + 32))(v38, v39, v35);
      uint64_t v41 = *(int *)(v27 + 48);
      uint64_t v42 = v26;
      uint64_t v43 = v69;
      uint64_t v44 = &v69[v41];
      uint64_t v70 = *v72;
      v70(v69, v36, v42);
      uint64_t v45 = *(void (**)(char *, void *, uint64_t))(v40 + 16);
      uint64_t v71 = v38;
      v45(v44, v38, v35);
      uint64_t v46 = v75;
      char v47 = v67(v43, v44);
      uint64_t v75 = v46;
      if (v46) {
        break;
      }
      char v48 = v47;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v74);
      uint64_t v49 = (void *)*v73;
      ((void (*)(char *, uint64_t))*v73)(v43, v42);
      uint64_t v26 = v42;
      if (v48)
      {
        uint64_t v50 = type metadata accessor for OrderedSet();
        OrderedSet._appendNew(_:)(v36, v50);
        uint64_t v27 = v66;
        unint64_t v51 = v56;
        uint64_t v52 = &v56[*(int *)(v66 + 48)];
        v70(v56, v36, v42);
        uint64_t v53 = v71;
        uint64_t v71 = v49;
        uint64_t v54 = v74;
        v45(v52, v53, v74);
        sub_24A5BC210();
        uint64_t v26 = v42;
        sub_24A5BC1C0();
        (*v65)(v36, v27);
        ((void (*)(char *, uint64_t))v71)(v51, v42);
        uint64_t v35 = v54;
      }
      else
      {
        uint64_t v27 = v66;
        (*v65)(v36, v66);
        uint64_t v35 = v74;
      }
      uint64_t v20 = v61;
      OrderedDictionary.Iterator.next()(v60, v61);
      if (v58(v20, 1, v27) == 1) {
        goto LABEL_2;
      }
    }
    (*v65)(v36, v66);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v74);
    return ((uint64_t (*)(char *, uint64_t))*v73)(v43, v42);
  }
}

uint64_t OrderedDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v20 = a5;
  void v18[2] = a6;
  v18[3] = a7;
  void v18[4] = a8;
  v18[5] = a9;
  void v18[6] = a1;
  v18[7] = a2;
  uint64_t v12 = sub_24A5BC210();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = sub_24A498BD0((void (*)(char *, char *))sub_24A530D6C, (uint64_t)v18, v12, a8, v13, WitnessTable, MEMORY[0x263F8E4E0], (uint64_t)&v19);
  if (v9)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v16 = v15;
    swift_release();
    uint64_t v20 = v16;
    sub_24A5BB9F0();
    swift_getWitnessTable();
    sub_24A5BBA00();
  }
  return a3;
}

uint64_t OrderedDictionary.compactMapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v51 = a5;
  uint64_t v50 = a4;
  v46[1] = a3;
  uint64_t v68 = a1;
  uint64_t v60 = sub_24A5BBD20();
  uint64_t v52 = *(void (***)(char *, uint64_t))(v60 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v60);
  unint64_t v67 = (char *)v46 - v15;
  uint64_t v64 = *(void (***)(uint64_t, uint64_t))(a8 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v59 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v58 = (char *)v46 - v19;
  uint64_t v63 = *(void (***)(char *, uint64_t))(a7 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v20);
  char v48 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v73 = sub_24A5BBD20();
  uint64_t v70 = *(void (***)(char *, char *, uint64_t))(v73 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v73);
  uint64_t v72 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)v46 - v26;
  swift_getTupleTypeMetadata2();
  uint64_t v28 = sub_24A5BB970();
  uint64_t v74 = sub_24A4D5BD8(v28, a6, a8, a9);
  uint64_t v71 = v29;
  uint64_t v69 = v30;
  swift_bridgeObjectRelease();
  uint64_t v80 = v74;
  uint64_t v81 = v71;
  uint64_t v82 = v69;
  uint64_t v76 = a3;
  uint64_t v77 = v50;
  uint64_t v78 = v51;
  uint64_t v79 = 0;
  uint64_t v74 = a6;
  uint64_t v31 = TupleTypeMetadata2;
  uint64_t v61 = a9;
  uint64_t v32 = (uint64_t)v48;
  uint64_t v33 = type metadata accessor for OrderedDictionary.Iterator();
  v70 += 4;
  uint64_t v71 = v33;
  uint64_t v69 = v31 - 8;
  uint64_t v66 = (void (**)(uint64_t, char *, uint64_t))(v49 + 32);
  unint64_t v65 = (void (**)(char *, char *, uint64_t))(v63 + 4);
  uint64_t v62 = (unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 6);
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v64 + 4);
  uint64_t v54 = (void (**)(char *, char *, uint64_t))(v64 + 2);
  uint64_t v53 = (void (**)(char *, uint64_t))(v64 + 1);
  ++v63;
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v49 + 8);
  ++v52;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v57 = v22;
  uint64_t v56 = a2;
  while (1)
  {
    uint64_t v34 = v72;
    OrderedDictionary.Iterator.next()(v71, v72);
    (*v70)(v27, v34, v73);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v27, 1, v31) == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return v80;
    }
    uint64_t v35 = v31;
    uint64_t v36 = &v27[*(int *)(v31 + 48)];
    (*v66)(v32, v27, v74);
    (*v65)(v22, v36, a7);
    uint64_t v37 = v67;
    uint64_t v38 = v75;
    v68(v22);
    uint64_t v75 = v38;
    if (v38) {
      break;
    }
    if ((*v62)(v37, 1, a8) == 1)
    {
      (*v63)(v22, a7);
      (*v64)(v32, v74);
      (*v52)(v37, v60);
    }
    else
    {
      uint64_t v39 = v58;
      (*v55)(v58, v37, a8);
      uint64_t v40 = a7;
      uint64_t v41 = v74;
      uint64_t v42 = type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:)(v32, v42);
      (*v54)(v59, v39, a8);
      sub_24A5BC210();
      sub_24A5BC1C0();
      uint64_t v43 = v39;
      uint64_t v22 = v57;
      (*v53)(v43, a8);
      (*v63)(v22, v40);
      uint64_t v44 = v41;
      a7 = v40;
      (*v64)(v32, v44);
    }
    uint64_t v31 = v35;
  }
  (*v63)(v22, a7);
  (*v64)(v32, v74);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t sub_24A5303D4(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(a2 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_24A5303F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v55 = a6;
  uint64_t v50 = a3;
  uint64_t v49 = a2;
  uint64_t v73 = a1;
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v52 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v71 = (char *)&v47 - v13;
  uint64_t v62 = v14;
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v74 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v69 = sub_24A5BBD20();
  unint64_t v65 = *(void (***)(char *, char *, uint64_t))(v69 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v69);
  uint64_t v68 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unint64_t v67 = (char *)&v47 - v21;
  uint64_t v22 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v47 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v73, a5);
  uint64_t v72 = v27;
  uint64_t v28 = v15;
  uint64_t v30 = TupleTypeMetadata2;
  uint64_t v29 = (uint64_t)v71;
  sub_24A5BB840();
  uint64_t v31 = sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v60 = v31;
  uint64_t v61 = v7 + 16;
  sub_24A5BC190();
  uint64_t v32 = v67;
  uint64_t v73 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v65 += 4;
  uint64_t v66 = AssociatedConformanceWitness;
  uint64_t v64 = v30 - 8;
  uint64_t v58 = (void (**)(uint64_t, char *, uint64_t))(v53 + 32);
  uint64_t v59 = (void (**)(char *, char *, uint64_t))(v74 + 32);
  uint64_t v56 = (void (**)(uint64_t, uint64_t))(v53 + 8);
  uint64_t v57 = (void (**)(uint64_t, uint64_t))(v74 + 8);
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v53 + 16);
  while (1)
  {
    uint64_t v34 = v68;
    sub_24A5BBEE0();
    (*v65)(v32, v34, v69);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v32, 1, v30) == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v72, v73);
    }
    uint64_t v35 = &v32[*(int *)(v30 + 48)];
    (*v59)(v17, v32, v28);
    (*v58)(v29, v35, v9);
    swift_retain();
    swift_retain();
    uint64_t v36 = (uint64_t)v17;
    uint64_t v37 = v28;
    unint64_t v38 = OrderedSet._find(_:)();
    uint64_t v39 = v9;
    char v41 = v40;
    uint64_t v74 = v42;
    swift_release();
    swift_release();
    if (v41)
    {
      type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:in:)(v36, v74);
      uint64_t v29 = (uint64_t)v71;
      (*v51)(v52, v71, v39);
      sub_24A5BC1C0();
      uint64_t v9 = v39;
      uint64_t v28 = v37;
      uint64_t v17 = (char *)v36;
      goto LABEL_3;
    }
    uint64_t v29 = (uint64_t)v71;
    uint64_t v43 = v61;
    uint64_t result = sub_24A5BC190();
    if ((v38 & 0x8000000000000000) != 0) {
      break;
    }
    if (*(void *)(*(void *)v43 + 16) <= v38) {
      goto LABEL_14;
    }
    uint64_t v45 = *(void *)v43
        + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
        + *(void *)(v53 + 72) * v38;
    uint64_t v28 = v37;
    uint64_t v46 = v63;
    sub_24A52EFC0(v45, v49, v50, v29, v37, v39);
    if (v46)
    {
      (*v56)(v29, v39);
      (*v57)(v36, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v72, v73);
    }
    uint64_t v63 = 0;
    uint64_t v17 = (char *)v36;
    uint64_t v9 = v39;
LABEL_3:
    (*v56)(v29, v9);
    (*v57)((uint64_t)v17, v28);
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v32 = v67;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_24A530ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a3;
  uint64_t v26 = a2;
  uint64_t v9 = sub_24A5BC080();
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v21 = *(void *)(a4 + 16);
  uint64_t v22 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = sub_24A5BC270();
  uint64_t v25 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - v14;
  MEMORY[0x24C5C6BF0](a5, a6);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v21;
  v16[3] = v12;
  uint64_t v17 = v22;
  uint64_t v18 = *(void *)(v22 + 32);
  void v16[4] = a5;
  v16[5] = v18;
  v16[6] = a6;
  swift_getWitnessTable();
  sub_24A5BC390();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_24A5303F0((uint64_t)v15, v26, v27, v17, v13, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v15, v13);
}

uint64_t sub_24A530D6C(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 48))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t sub_24A530DA4()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_24A530DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A52F0C0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

BOOL Rope.isValid(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(v4 + *(int *)(a4 + 36)) == a1;
}

uint64_t Rope.formIndex(before:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Rope._Node();
  uint64_t v42 = sub_24A5BBD20();
  uint64_t v39 = *(void *)(v42 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v42);
  unint64_t v38 = (char *)&v33 - v9;
  uint64_t v36 = v7;
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v37 = (char *)&v33 - v11;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  Rope.validate(_:)(*a1, v18, v19, a2);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v41 = v2;
  v20(v14, v2, a2);
  uint64_t v34 = v5;
  uint64_t v35 = v6;
  uint64_t v21 = type metadata accessor for Rope.Index();
  uint64_t v46 = v15;
  uint64_t v47 = v16;
  uint64_t v48 = v17;
  uint64_t v43 = Rope.startIndex.getter(a2);
  uint64_t v44 = v22;
  uint64_t v45 = v23;
  swift_getWitnessTable();
  uint64_t v24 = sub_24A5BB450();
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!a1[2]
    || (MEMORY[0x270FA5388](v25),
        uint64_t v26 = v34,
        uint64_t v27 = v35,
        *(&v33 - 4) = v34,
        *(&v33 - 3) = v27,
        *(&v33 - 2) = (uint64_t)a1,
        uint64_t result = Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_24A5325F0, (uint64_t)(&v33 - 6), v28, v26, MEMORY[0x263F8D4F8]), (v46 & 1) == 0))
  {
    uint64_t v21 = (uint64_t)v38;
    uint64_t v15 = v39;
    uint64_t v24 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v41, v42);
    uint64_t v30 = v40;
    uint64_t v31 = v36;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v21, 1, v36) == 1)
    {
LABEL_9:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v21, v24);
      __break(1u);
      return result;
    }
    uint64_t v24 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v37, v21, v31);
    char v32 = Rope._Node.formPredecessor(of:)((uint64_t)a1, v31);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v24, v31);
    if (v32) {
      return result;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t Rope.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = a3;
  unint64_t v36 = a2;
  uint64_t v37 = a5;
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(char **)(a4 + 24);
  uint64_t v10 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v10 - 8);
  char v32 = (char *)&v32 - v11;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v33 = *(void *)(v13 - 8);
  uint64_t v34 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v22 = Rope.validate(_:)(a1, v20, v21, a4);
  if (v35)
  {
    MEMORY[0x270FA5388](v22);
    *(&v32 - 6) = (char *)v8;
    *(&v32 - 5) = v9;
    uint64_t v23 = (char *)v36;
    *(&v32 - 4) = (char *)a1;
    *(&v32 - 3) = v23;
    *(&v32 - 2) = v24;
    return Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_24A5327C0, (uint64_t)(&v32 - 8), v24, v8, v8);
  }
  else
  {
    uint64_t v26 = (uint64_t)v32;
    uint64_t v27 = v33;
    unint64_t v29 = v36;
    uint64_t v28 = v37;
    uint64_t v30 = v5;
    uint64_t v31 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v16, v30, v34);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v31);
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, v12);
      Rope._Node.subscript.getter(v29, v12, v26);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v12);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v28, v26, v8);
    }
  }
  return result;
}

uint64_t Rope.formIndex(after:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v45 = *(void *)(a2 + 16);
  uint64_t v46 = v5;
  uint64_t v6 = type metadata accessor for Rope._Node();
  uint64_t v42 = sub_24A5BBD20();
  uint64_t v40 = *(void *)(v42 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v42);
  uint64_t v39 = (char *)&v38 - v8;
  uint64_t v43 = v6;
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v38 = (char *)&v38 - v10;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  uint64_t v16 = a1[2];
  Rope.validate(_:)(*a1, v17, v18, a2);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v44 = v2;
  v19(v13, v2, a2);
  uint64_t v20 = Rope.endIndex.getter(a2);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v25 = v13;
  uint64_t v26 = v45;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v25, a2);
  uint64_t v27 = v46;
  uint64_t v28 = static Rope.Index.< infix(_:_:)(v14, v15, v16, v20, v22, v24, v26, v46);
  if ((v28 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v29 = v44;
  if (!a1[2]
    || (MEMORY[0x270FA5388](v28),
        *(&v38 - 4) = (char *)v26,
        *(&v38 - 3) = (char *)v27,
        *(&v38 - 2) = (char *)a1,
        uint64_t result = Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_24A5327D0, (uint64_t)(&v38 - 6), v30, v26, MEMORY[0x263F8D4F8]), (v47 & 1) == 0))
  {
    uint64_t v16 = (uint64_t)v39;
    uint64_t v15 = v40;
    uint64_t v20 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v29, v42);
    uint64_t v32 = v41;
    uint64_t v33 = v43;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v16, 1, v43) != 1)
    {
      uint64_t v34 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v38, v16, v33);
      char v35 = Rope._Node.formSuccessor(of:)((uint64_t)a1, v33);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v33);
      if ((v35 & 1) == 0)
      {
        uint64_t result = Rope.endIndex.getter(a2);
        *a1 = result;
        a1[1] = v36;
        a1[2] = v37;
      }
      return result;
    }
LABEL_9:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v20);
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Rope._invalidateIndices()()
{
  ++*(void *)(v1 + *(int *)(v0 + 36));
}

uint64_t Rope.isEmpty.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v24 = (char *)&v22 - v4;
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v22 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v23 = v1;
  v11((char *)&v22 - v9, v1, v5);
  uint64_t v25 = v3;
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v13 = 1;
  int v14 = v12(v10, 1, v2);
  uint64_t v15 = v10;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v15, v5);
  if (v14 == 1) {
    return v13;
  }
  uint64_t v17 = v22;
  v11(v22, v23, v5);
  if (v12(v17, 1, v2) != 1)
  {
    uint64_t v18 = v24;
    uint64_t v19 = v25;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v24, v17, v2);
    __int16 v20 = Rope._Node.header.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v2);
    return v20 == 0;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v17, v5);
  __break(1u);
  return result;
}

uint64_t Rope.validate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  uint64_t v9 = *(void *)&v8[*(int *)(a4 + 36)];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
  if (v9 != a1) {
    __break(1u);
  }
  return result;
}

uint64_t Rope.endIndex.getter(uint64_t a1)
{
  return sub_24A531BCC(a1, Rope._endPath.getter);
}

uint64_t Rope.startIndex.getter(uint64_t a1)
{
  return sub_24A531BCC(a1, Rope._startPath.getter);
}

uint64_t sub_24A531BCC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 + *(int *)(a1 + 36));
  uint64_t v5 = a2();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  return Rope.Index.init(version:path:leaf:)(v4, v5, 0, v6, v7);
}

uint64_t Rope.index(after:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return result;
}

uint64_t Rope.update<A>(at:by:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v23 = a2;
  uint64_t v24 = a5;
  v22[0] = a6;
  v22[1] = a3;
  uint64_t v10 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  int v14 = (void *)((char *)v22 - v13);
  uint64_t v15 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v7, a4);
  Rope.validate(_:)(*(void *)a1, v18, v19, a4);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a4);
  uint64_t v20 = type metadata accessor for Rope._Node();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v7, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    Rope._Node._prepareModify(at:)(*(void *)(a1 + 8), v20, v14);
    v23((char *)v14 + *(int *)(v10 + 36));
    sub_24A532C9C(v7, (void *)a1, v14);
    return (*(uint64_t (**)(unint64_t *, uint64_t))(v11 + 8))(v14, v10);
  }
  return result;
}

uint64_t Rope._height.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = sub_24A5BBD20();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v10 - v5, v1, v3);
  uint64_t v7 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) == 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = Rope._Node.header.getter() >> 16;
    uint64_t v4 = v7;
    uint64_t v3 = v2;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8;
}

uint64_t Rope._endPath.getter()
{
  uint64_t v1 = type metadata accessor for Rope._Node();
  uint64_t v2 = sub_24A5BBD20();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v15 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v0, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return Rope._startPath.getter();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v6, v1);
    uint64_t v11 = Rope._height.getter();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v16 = _RopePath.init(height:)(v11);
    unsigned __int8 v12 = Rope._height.getter();
    uint64_t v13 = (unsigned __int16)Rope._Node.header.getter();
    uint64_t v14 = type metadata accessor for _RopePath();
    _RopePath.subscript.setter(v13, v12, v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v1);
    return v16;
  }
}

uint64_t Rope.grease(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t result = Rope.validate(_:)(*a1, a2, a3, a2);
  if (!v5)
  {
    uint64_t result = Rope._unmanagedLeaf(at:)(v4);
    a1[2] = result;
  }
  return result;
}

uint64_t Rope._startPath.getter()
{
  uint64_t v0 = Rope._height.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.init(height:)(v0);
}

uint64_t Rope.index(before:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_24A532380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t))
{
  v5[1] = a2;
  v5[2] = a3;
  a5(v5, a4);
}

uint64_t sub_24A5323BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  unint64_t v5 = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = _RopePath.subscript.getter(v6, v5, AssociatedTypeWitness, AssociatedConformanceWitness) + 1;
  type metadata accessor for Rope._Item();
  swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.childCount.getter((unsigned __int16 *)a1);
  if (v9 >= result)
  {
    char v13 = 0;
  }
  else
  {
    unsigned __int8 v11 = *(unsigned char *)(a1 + 2);
    uint64_t v12 = type metadata accessor for _RopePath();
    uint64_t result = _RopePath.subscript.setter(v9, v11, v12);
    char v13 = 1;
  }
  *a3 = v13;
  return result;
}

uint64_t sub_24A532500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  unsigned __int8 v5 = *(unsigned char *)(a1 + 2);
  unint64_t v6 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = _RopePath.subscript.getter(v5, v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v10 = result - 1;
  if (result < 1)
  {
    char v13 = 0;
  }
  else
  {
    unsigned __int8 v11 = *(unsigned char *)(a1 + 2);
    uint64_t v12 = type metadata accessor for _RopePath();
    uint64_t result = _RopePath.subscript.setter(v10, v11, v12);
    char v13 = 1;
  }
  *a3 = v13;
  return result;
}

uint64_t sub_24A5325F0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_24A532500(a1, *(void *)(v2 + 32), a2);
}

uint64_t sub_24A5325FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v11 = type metadata accessor for Rope._Item();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = Rope._UnsafeHandle.children.getter((unsigned __int16 *)a1, a2, a4, v11, a5, WitnessTable);
  LOBYTE(a1) = *(unsigned char *)(a1 + 2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = _RopePath.subscript.getter(a1, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v16 + *(void *)(v12 + 72) * v19, v11);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a4 - 8) + 32))(v22, v14, a4);
}

uint64_t sub_24A5327C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A5325FC(a1, a2, *(void *)(v3 + 40), *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t sub_24A5327D0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_24A5323BC(a1, *(void *)(v2 + 32), a2);
}

void (*Rope.subscript.modify(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v6 = v5;
  uint64_t v11 = malloc(0x70uLL);
  *a1 = v11;
  uint64_t v12 = *(void *)(a5 - 8);
  char v11[8] = v6;
  uint64_t v13 = v12;
  uint64_t v14 = malloc(*(void *)(v12 + 64));
  v11[9] = v14;
  (*(void (**)(void))(v13 + 16))();
  Rope.validate(_:)(a2, v15, v16, a5);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v14, a5);
  uint64_t v17 = Rope.root.modify();
  uint64_t v18 = *(void *)(a5 + 16);
  uint64_t v19 = *(void *)(a5 + 24);
  void v11[10] = v17;
  v11[11] = v18;
  v11[12] = v19;
  uint64_t v20 = type metadata accessor for Rope._Node();
  v11[13] = Rope._Node.subscript.modify(v11 + 4, a3, v20);
  return sub_24A53292C;
}

void sub_24A53292C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  uint64_t v4 = *(void *)(*(void *)a1 + 64);
  uint64_t v3 = *(void **)(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 104))();
  v2(v1, 0);
  uint64_t v5 = type metadata accessor for Rope();
  ++*(void *)(v4 + *(int *)(v5 + 36));
  free(v3);
  free(v1);
}

uint64_t Rope.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  unint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v9 = *(void *)(a5 + 16);
  uint64_t v10 = *(void *)(a5 + 24);
  uint64_t v11 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v6, a5);
  Rope.validate(_:)(a2, v19, v20, a5);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
  uint64_t v21 = type metadata accessor for Rope._Node();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v6, 1, v21);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    Rope._Node._prepareModify(at:)(v26, v21, v15);
    uint64_t v23 = *(void *)(v9 - 8);
    uint64_t v24 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 24))(&v15[*(int *)(v11 + 36)], v27, v9);
    sub_24A4FFDC8(v6, v15, v9, v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t v25 = type metadata accessor for Rope();
    ++*(void *)(v6 + *(int *)(v25 + 36));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v9);
  }
  return result;
}

uint64_t sub_24A532C74@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A533158(a1, a2, Rope.index(before:), a3);
}

uint64_t sub_24A532C9C(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = type metadata accessor for Rope();
  *a2 = ++*(void *)(a1 + *(int *)(v10 + 36));
  uint64_t v11 = type metadata accessor for Rope._Node();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(a1, 1, v11);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = Rope._Node._finalizeModify(_:)((uint64_t)v9, a3, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
    a2[2] = v13;
  }
  return result;
}

uint64_t sub_24A532E24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Rope.startIndex.getter(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_24A532E50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Rope.endIndex.getter(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

void (*sub_24A532E7C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_24A532EF0(v6, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), a3);
  return sub_24A51D0E4;
}

void (*sub_24A532EF0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  uint64_t v10 = *(void *)(a5 + 16);
  *a1 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  a1[1] = v11;
  uint64_t v12 = malloc(*(void *)(v11 + 64));
  a1[2] = v12;
  Rope.subscript.getter(a2, a3, a4, a5, (uint64_t)v12);
  return sub_24A50EF90;
}

void sub_24A532FC4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 2;
}

uint64_t sub_24A532FD4()
{
  swift_getWitnessTable();
  return sub_24A5BB3C0();
}

uint64_t sub_24A533050()
{
  swift_getWitnessTable();
  return sub_24A5BB3B0();
}

uint64_t sub_24A5330D4()
{
  swift_getWitnessTable();
  return sub_24A5BB3E0();
}

uint64_t sub_24A533140@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A533158(a1, a2, Rope.index(after:), a3);
}

uint64_t sub_24A533158@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*a1, a1[1], a1[2], a2);
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  return result;
}

uint64_t static Rope._maxHeight.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (result) {
    return 56 / result;
  }
  __break(1u);
  return result;
}

uint64_t static Rope._minimumCapacity.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v3 = 56 / result;
  if (56 / result < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v3)
  {
    int64_t v6 = 2;
    goto LABEL_15;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t result = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v5 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v5 < 0) {
    uint64_t v5 = result + 2;
  }
  int64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  while (--v3)
  {
    uint64_t result = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v7 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    if (v7 < 0) {
      uint64_t v7 = result + 2;
    }
    uint64_t v8 = v7 >> 1;
    uint64_t v9 = (unsigned __int128)(v6 * (__int128)v8) >> 64;
    v6 *= v8;
    if (v9 != v6 >> 63) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
LABEL_15:
  uint64_t result = v6 - 1;
  if (__OFSUB__(v6, 1)) {
LABEL_21:
  }
    __break(1u);
  return result;
}

uint64_t static Rope._maximumCapacity.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = 56 / result;
  if (56 / result < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t result = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v5 = result;
  if (v3)
  {
    while (1)
    {
      uint64_t v6 = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t result = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
        break;
      }
      v5 *= v6;
      if (!--v3) {
        return result;
      }
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t Rope.count<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v27 = a1;
  uint64_t v5 = type metadata accessor for Rope._Node();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v25 = (char *)&v22 - v7;
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v24 = v4;
  v15((char *)&v22 - v13, v4, v8);
  uint64_t v26 = v6;
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v17 = v16(v14, 1, v5);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v14, v8);
  uint64_t v18 = 0;
  if (v17 == 1) {
    return v18;
  }
  v15(v12, v24, v8);
  if (v16(v12, 1, v5) != 1)
  {
    uint64_t v20 = v25;
    uint64_t v19 = v26;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v25, v12, v5);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v29 + 24))(&v20[*(int *)(v5 + 36)], v28);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v5);
    return v18;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v12, v8);
  __break(1u);
  return result;
}

uint64_t Rope._Node.count<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(v4 + *(int *)(a2 + 36), a3, a4);
}

uint64_t Rope.distance<A>(from:to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v79 = a7;
  uint64_t v85 = a6;
  unint64_t v86 = (uint64_t (*)(char *, char *))a3;
  uint64_t v87 = a5;
  unint64_t v88 = a2;
  uint64_t v14 = *(void *)(a8 + 16);
  uint64_t v15 = *(void *)(a8 + 24);
  uint64_t v16 = type metadata accessor for Rope._Node();
  uint64_t v81 = *(char **)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v77 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v76 = (char *)&v69 - v19;
  uint64_t v80 = sub_24A5BBD20();
  uint64_t v84 = *(void *)(v80 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v80);
  uint64_t v75 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v74 = (char *)&v69 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v69 - v25;
  uint64_t v27 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rope.validate(_:)(a1, v30, v31, a8);
  Rope.validate(_:)(a4, v32, v33, a8);
  uint64_t v82 = (uint64_t (*)(char *, char *))v14;
  uint64_t v83 = a1;
  uint64_t v34 = a1;
  uint64_t v78 = (uint64_t (*)(char *, char *))a4;
  uint64_t v35 = a4;
  uint64_t v36 = v85;
  uint64_t v37 = v15;
  char v38 = static Rope.Index.== infix(_:_:)(v34, v88, (uint64_t)v86, v35, v87, v85, v14, v15);
  uint64_t v39 = 0;
  if (v38) {
    return v39;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v10, a8);
  uint64_t v40 = v84;
  uint64_t v41 = v80;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v26, v29, v80);
  uint64_t v42 = v81;
  uint64_t v71 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v81 + 6);
  uint64_t v72 = v16;
  int v43 = v71(v26, 1, v16);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v40 + 8);
  v44(v26, v41);
  if (v43 == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v45 = v42;
  uint64_t v46 = (char *)v41;
  uint64_t v69 = (uint64_t (*)(char *, char *))v44;
  uint64_t v73 = a9;
  char v47 = v86;
  uint64_t v48 = v37;
  if (v86)
  {
    if (v36)
    {
      BOOL v49 = static Rope._UnmanagedLeaf.== infix(_:_:)((uint64_t)v86, v36);
      if (v49)
      {
        MEMORY[0x270FA5388](v49);
        uint64_t v50 = (uint64_t)v82;
        uint64_t v51 = v73;
        *(&v69 - 10) = v82;
        *(&v69 - 9) = (uint64_t (*)(char *, char *))v51;
        uint64_t v52 = v83;
        *(&v69 - 8) = (uint64_t (*)(char *, char *))a10;
        *(&v69 - 7) = (uint64_t (*)(char *, char *))v52;
        *(&v69 - 6) = (uint64_t (*)(char *, char *))v88;
        *(&v69 - 5) = v47;
        uint64_t v53 = v87;
        *(&v69 - 4) = v78;
        *(&v69 - 3) = (uint64_t (*)(char *, char *))v53;
        uint64_t v67 = v36;
        uint64_t v68 = v79;
        Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_24A536CF0, (uint64_t)(&v69 - 12), v47, v50, MEMORY[0x263F8D6C8]);
        return v89;
      }
    }
  }
  uint64_t v70 = a10;
  unint64_t v54 = v87;
  uint64_t v55 = (uint64_t)v78;
  char v56 = static Rope.Index.< infix(_:_:)(v83, v88, (uint64_t)v47, (uint64_t)v78, v87, v36, (uint64_t)v82, v48);
  uint64_t v57 = *(void (**)(void))(v84 + 16);
  if ((v56 & 1) == 0)
  {
    uint64_t v26 = v46;
    uint64_t v42 = v75;
    v57();
    uint64_t v62 = v72;
    if (v71(v42, 1, v72) == 1) {
      goto LABEL_15;
    }
    uint64_t v63 = v45;
    uint64_t v64 = v77;
    (*((void (**)(char *, char *, uint64_t))v45 + 4))(v77, v42, v62);
    uint64_t v65 = Rope._Node.distance<A>(from:to:in:)(v55, v54, v36, v83, v88, (uint64_t)v47, v79, v62, v73, v70);
    (*((void (**)(char *, uint64_t))v63 + 1))(v64, v62);
    uint64_t v39 = -v65;
    if (!__OFSUB__(0, v65)) {
      return v39;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v26 = v46;
  uint64_t v42 = v74;
  v57();
  uint64_t v58 = v72;
  if (v71(v42, 1, v72) != 1)
  {
    uint64_t v59 = v45;
    uint64_t v60 = (void (*)(char *, char *, uint64_t))*((void *)v45 + 4);
    uint64_t v61 = v76;
    v60(v76, v42, v58);
    uint64_t v39 = Rope._Node.distance<A>(from:to:in:)(v83, v88, (uint64_t)v47, v55, v54, v36, v79, v58, v73, v70);
    (*((void (**)(char *, uint64_t))v59 + 1))(v61, v58);
    return v39;
  }
LABEL_15:
  uint64_t result = v69(v42, v26);
  __break(1u);
  return result;
}

uint64_t sub_24A533D48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t a3@<X6>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6 = *(unsigned char *)(a1 + 2);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = _RopePath.subscript.getter(v6, a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v10 = _RopePath.subscript.getter(v6, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  type metadata accessor for Rope._Item();
  swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.distance<A>(from:to:in:)(v9, v10);
  *a4 = result;
  return result;
}

uint64_t Rope._Node.distance<A>(from:to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v56 = a4;
  uint64_t v57 = a7;
  uint64_t v54 = a3;
  uint64_t v55 = a6;
  uint64_t v52 = a1;
  uint64_t v61 = *(void *)(a8 - 8);
  unint64_t v62 = a5;
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v50 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v50 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v50 - v18;
  unsigned int v20 = Rope._Node.header.getter() >> 16;
  uint64_t v21 = *(void *)(a8 + 16);
  uint64_t v22 = *(void *)(a8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = v22;
  uint64_t v59 = v21;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v53 = a2;
  uint64_t v25 = _RopePath.subscript.getter(v20, a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v26 = Rope._Node.header.getter();
  uint64_t v27 = _RopePath.subscript.getter(BYTE2(v26), v62, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v28 = v61;
  uint64_t v29 = *(void (**)(char *, uint64_t *, uint64_t))(v61 + 16);
  uint64_t v60 = v10;
  v29(v19, v10, a8);
  uint64_t v30 = (unsigned __int16)Rope._Node.header.getter();
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v28 + 8);
  uint64_t result = v31(v19, a8);
  uint64_t v51 = v25;
  if (v25 >= v30)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v33 = v60;
  v29(v17, v60, a8);
  uint64_t v34 = (unsigned __int16)Rope._Node.header.getter();
  uint64_t result = v31(v17, a8);
  if (v27 > v34)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v27 == (unsigned __int16)Rope._Node.header.getter())
  {
    uint64_t v35 = v50;
    v29(v50, v33, a8);
    uint64_t v36 = Rope._Node.header.getter();
    Swift::Bool v37 = Rope.Index._isEmpty(below:)(BYTE2(v36));
    uint64_t result = v31(v35, a8);
    if (v37) {
      return Rope._Node.distanceToEnd<A>(from:in:)(v52, v53, v54, v57, a8, a9, a10);
    }
    goto LABEL_13;
  }
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    uint64_t v38 = *v33;
    uint64_t v39 = v38 + ((*(unsigned __int8 *)(v61 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    swift_getWitnessTable();
    uint64_t v40 = v39;
    uint64_t v41 = v59;
    uint64_t v42 = (unsigned __int16 *)nullsub_1(v38 + 16, v40, v59, a8, v58);
    uint64_t v44 = v43;
    swift_unknownObjectRetain();
    sub_24A534E20(v42, v44, v51, v27, v52, v53, v54, v56, &v63, v62, v55, v57, v41, a9, a10);
  }
  else
  {
    uint64_t v45 = *v33;
    uint64_t v46 = v58;
    uint64_t v47 = v59;
    uint64_t v48 = type metadata accessor for Rope._Item();
    uint64_t v49 = v45
        + ((*(unsigned __int8 *)(*(void *)(v48 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v48 - 8) + 80));
    swift_getWitnessTable();
    nullsub_1(v45 + 16, v49, v47, v48, v46);
    swift_unknownObjectRetain();
    sub_24A534D3C(v51, v27, &v63);
  }
  swift_unknownObjectRelease();
  return v63;
}

uint64_t Rope.offset<A>(of:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  unint64_t v34 = a2;
  uint64_t v10 = type metadata accessor for Rope._Node();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v32 = (char *)&v30 - v12;
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v30 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v33 = a1;
  Rope.validate(_:)(a1, v19, v20, a5);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v31 = v7;
  v21(v18, v7, v13);
  uint64_t v35 = v11;
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(a1) = v22(v18, 1, v10);
  uint64_t v23 = v18;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v23, v13);
  uint64_t v25 = 0;
  if (a1 == 1) {
    return v25;
  }
  uint64_t v26 = v30;
  v21(v30, v31, v13);
  if (v22(v26, 1, v10) != 1)
  {
    uint64_t v27 = v35;
    uint64_t v28 = v32;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v26, v10);
    uint64_t v25 = Rope._Node.distanceFromStart<A>(to:in:)(v33, v34, v36, v37, v10, v38, v39);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v10);
    return v25;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v26, v13);
  __break(1u);
  return result;
}

uint64_t Rope._Node.distanceFromStart<A>(to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v48 = a4;
  uint64_t v49 = a7;
  uint64_t v46 = a3;
  uint64_t v47 = a6;
  uint64_t v44 = a1;
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v43 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v41 - v14;
  unsigned int v16 = Rope._Node.header.getter() >> 16;
  uint64_t v17 = *(void *)(a5 + 16);
  uint64_t v18 = *(void *)(a5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = v18;
  uint64_t v51 = v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v45 = a2;
  uint64_t v21 = _RopePath.subscript.getter(v16, a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v22(v15, v8, a5);
  uint64_t v23 = (unsigned __int16)Rope._Node.header.getter();
  uint64_t v42 = v11;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t result = v24(v15, a5);
  if (v21 > v23)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v21 == (unsigned __int16)Rope._Node.header.getter())
  {
    uint64_t v26 = v43;
    v22(v43, v8, a5);
    uint64_t v27 = Rope._Node.header.getter();
    Swift::Bool v28 = Rope.Index._isEmpty(below:)(BYTE2(v27));
    uint64_t result = v24(v26, a5);
    if (v28) {
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 24))(&v8[*(int *)(a5 + 36)], v47);
    }
    goto LABEL_11;
  }
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    uint64_t v29 = *(void *)v8 + 16;
    unint64_t v30 = *(void *)v8 + ((*(unsigned __int8 *)(v42 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    swift_getWitnessTable();
    uint64_t v31 = v51;
    uint64_t v32 = (unsigned __int16 *)nullsub_1(v29, v30, v51, a5, v50);
    uint64_t v34 = v33;
    swift_unknownObjectRetain();
    sub_24A534A88(v32, v34, v21, v48, v44, v45, v46, v31, &v52, v47, v49);
  }
  else
  {
    uint64_t v35 = *(void *)v8;
    uint64_t v36 = *(void *)v8 + 16;
    uint64_t v38 = v50;
    uint64_t v37 = v51;
    uint64_t v39 = type metadata accessor for Rope._Item();
    uint64_t v40 = v35
        + ((*(unsigned __int8 *)(*(void *)(v39 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v39 - 8) + 80));
    swift_getWitnessTable();
    nullsub_1(v36, v40, v37, v39, v38);
    swift_unknownObjectRetain();
    sub_24A5349A8(v21, &v52);
  }
  swift_unknownObjectRelease();
  return v52;
}

uint64_t sub_24A5349A8@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Rope._Item();
  swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.distance<A>(from:to:in:)(0, a1);
  *a2 = result;
  return result;
}

uint64_t sub_24A534A88@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a2;
  uint64_t v30 = a5;
  uint64_t v33 = a4;
  uint64_t v24 = a9;
  uint64_t v25 = a11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Rope._Node();
  uint64_t v28 = *(void *)(v14 - 8);
  uint64_t v15 = v28;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = v29;
  uint64_t v26 = Rope._UnsafeHandle.distance<A>(from:to:in:)(0, a3);
  uint64_t v19 = Rope._UnsafeHandle.children.getter(a1, v18, a8, v14, AssociatedConformanceWitness, WitnessTable)
      + *(void *)(v15 + 72) * a3;
  uint64_t v20 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v17, v19, v14);
  uint64_t v21 = Rope._Node.distanceFromStart<A>(to:in:)(v30, v31, v32, v33, v14, a10, v25);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v17, v14);
  if (__OFADD__(v26, v21)) {
    __break(1u);
  }
  else {
    *uint64_t v24 = v26 + v21;
  }
  return result;
}

uint64_t Rope._Node.distanceToEnd<A>(from:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 24))(v8 + *(int *)(a5 + 36), a6, a7);
  uint64_t v17 = Rope._Node.distanceFromStart<A>(to:in:)(a1, a2, a3, a4, a5, a6, a7);
  BOOL v18 = __OFSUB__(v16, v17);
  uint64_t result = v16 - v17;
  if (v18) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A534D3C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Rope._Item();
  swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.distance<A>(from:to:in:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A534E20@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v42 = a8;
  uint64_t v43 = a5;
  unint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v39 = a9;
  uint64_t v48 = a12;
  unint64_t v40 = a10;
  uint64_t v41 = a11;
  uint64_t v46 = a14;
  uint64_t v47 = a15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = type metadata accessor for Rope._Node();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v37 - v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  v37[1] = a1;
  v37[2] = a2;
  uint64_t v25 = Rope._UnsafeHandle.children.getter(a1, a2, a13, v20, AssociatedConformanceWitness, WitnessTable);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v21 += 16;
  uint64_t v27 = *(void *)(v21 + 56);
  v37[0] = v26;
  v26(v23, v25 + v27 * a3, v20);
  uint64_t v28 = (uint64_t (**)(char *, uint64_t))(v21 - 8);
  uint64_t v38 = a4;
  if (a3 == a4)
  {
    uint64_t v29 = Rope._Node.distance<A>(from:to:in:)(v43, v44, v45, v42, v40, v41, v48, v20, v46, v47);
    uint64_t result = (*v28)(v23, v20);
LABEL_6:
    *uint64_t v39 = v29;
    return result;
  }
  uint64_t v45 = Rope._Node.distanceToEnd<A>(from:in:)(v43, v44, v45, v48, v20, v46, v47);
  uint64_t v31 = *v28;
  (*v28)(v23, v20);
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v32 = v31;
  uint64_t v33 = v38;
  uint64_t result = Rope._UnsafeHandle.distance<A>(from:to:in:)(result, v38);
  uint64_t v34 = v45 + result;
  if (__OFADD__(v45, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  ((void (*)(char *, uint64_t, uint64_t))v37[0])(v23, v25 + v27 * v33, v20);
  uint64_t v35 = Rope._Node.distanceFromStart<A>(to:in:)(v42, v40, v41, v48, v20, v46, v47);
  uint64_t result = v32(v23, v20);
  BOOL v36 = __OFADD__(v34, v35);
  uint64_t v29 = v34 + v35;
  if (!v36) {
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Rope.formIndex<A>(_:offsetBy:in:preferEnd:)(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v63 = a7;
  uint64_t v67 = a3;
  uint64_t v68 = a6;
  int v66 = a4;
  uint64_t v11 = *(void *)(a5 + 24);
  uint64_t v57 = *(uint64_t (**)(char *, uint64_t))(a5 + 16);
  uint64_t v58 = v11;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v60 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v56 = (char *)&v54 - v16;
  uint64_t v17 = sub_24A5BBD20();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v59 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v54 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v54 - v24;
  uint64_t v64 = a1;
  uint64_t v26 = *a1;
  uint64_t v55 = a5;
  Rope.validate(_:)(v26, v27, v28, a5);
  uint64_t v29 = (char *)(v18 + 16);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v65 = v7;
  v30(v25, v7, v17);
  uint64_t v62 = v13;
  uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v31 = v61(v25, 1, v12);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  uint64_t result = v54(v25, v17);
  uint64_t v33 = *a2;
  if (v31 == 1)
  {
    if (!v33) {
      return result;
    }
    __break(1u);
  }
  if (v33 <= 0)
  {
    BOOL v47 = __OFSUB__(0, v33);
    uint64_t v48 = -v33;
    if (v47)
    {
      __break(1u);
    }
    else
    {
      uint64_t v49 = a2;
      *a2 = v48;
      v30(v23, v65, v17);
      if (v61(v23, 1, v12) == 1)
      {
        unint64_t v53 = v23;
        goto LABEL_20;
      }
      uint64_t v50 = v62;
      uint64_t v51 = v56;
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v56, v23, v12);
      char v52 = Rope._Node.seekBackward<A>(from:by:in:preferEnd:)((uint64_t)v64, v49, v67, v66 & 1, v12, v68, v63);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v12);
      if (v52) {
        return result;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v35 = v63;
  uint64_t v34 = v64;
  if (!v64[2]) {
    goto LABEL_23;
  }
  MEMORY[0x270FA5388](result);
  uint64_t v36 = (uint64_t)v57;
  uint64_t v37 = v68;
  *(&v54 - 8) = v57;
  *(&v54 - 7) = (uint64_t (*)(char *, uint64_t))v37;
  *(&v54 - 6) = (uint64_t (*)(char *, uint64_t))v35;
  *(&v54 - 5) = (uint64_t (*)(char *, uint64_t))v34;
  uint64_t v38 = v67;
  *(&v54 - 4) = (uint64_t (*)(char *, uint64_t))a2;
  *(&v54 - 3) = (uint64_t (*)(char *, uint64_t))v38;
  *((unsigned char *)&v54 - 16) = v66 & 1;
  uint64_t result = Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_24A536D2C, (uint64_t)(&v54 - 10), v39, v36, MEMORY[0x263F8D4F8]);
  if ((v69 & 1) == 0)
  {
LABEL_23:
    unint64_t v40 = v59;
    v30(v59, v65, v17);
    uint64_t v29 = v40;
    if (v61(v40, 1, v12) == 1)
    {
LABEL_18:
      unint64_t v53 = v29;
LABEL_20:
      uint64_t result = v54(v53, v17);
      __break(1u);
      return result;
    }
    uint64_t v41 = v62;
    uint64_t v42 = v60;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v60, v29, v12);
    char v43 = Rope._Node.seekForward<A>(from:by:in:preferEnd:)((uint64_t)v34, (uint64_t)a2, v67, v66 & 1, v12, v68, v35);
    unint64_t v44 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
    uint64_t v17 = v41 + 8;
    uint64_t result = v44(v42, v12);
    if ((v43 & 1) == 0)
    {
      if (!*a2)
      {
        uint64_t result = Rope.endIndex.getter(v55);
        *uint64_t v34 = result;
        v34[1] = v45;
        v34[2] = v46;
        return result;
      }
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*a2 <= 0 && (a4 & 1) == 0) {
    return 1;
  }
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    uint64_t v16 = *v7 + 16;
    uint64_t v33 = a1;
    uint64_t v35 = a3;
    unint64_t v17 = *v7
        + ((*(unsigned __int8 *)(*(void *)(a5 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a5 - 8) + 80));
    uint64_t v32 = a6;
    uint64_t v18 = *(void *)(a5 + 16);
    uint64_t v19 = *(void *)(a5 + 24);
    swift_getWitnessTable();
    uint64_t v20 = (unsigned __int16 *)nullsub_1(v16, v17, v18, a5, v19);
    uint64_t v22 = v21;
    swift_unknownObjectRetain();
    sub_24A5367B0(v20, v22, v33, (uint64_t)v7, a2, v35, a4 & 1, v18, (char *)&v37, v32, a7);
    swift_unknownObjectRelease();
    return v37;
  }
  else
  {
    uint64_t v23 = *v7;
    uint64_t v34 = *(void *)(a5 + 24);
    uint64_t v24 = *(void *)(a5 + 16);
    uint64_t v25 = type metadata accessor for Rope._Item();
    uint64_t v26 = v23
        + ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v27 = v26;
    uint64_t v28 = v24;
    uint64_t v29 = nullsub_1(v23 + 16, v27, v24, v25, v34);
    uint64_t v31 = v30;
    swift_unknownObjectRetain();
    sub_24A5366B8(v29, v31, a1, (uint64_t)a2, a3, a4 & 1, v28, a6, &v36, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:));
    swift_unknownObjectRelease();
    return v36;
  }
}

uint64_t Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, uint64_t *a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v50 = a5;
  uint64_t v51 = a3;
  int v52 = a4;
  uint64_t v53 = a9;
  uint64_t v54 = a11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v20 = (char *)v41 - v19;
  uint64_t v44 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = (unsigned __int16 *)Rope._UnsafeHandle.children.getter(v50, a6, a7, a8, AssociatedConformanceWitness, a10);
  uint64_t v24 = v23;
  unint64_t v25 = *a1;
  uint64_t v26 = swift_getAssociatedConformanceWitness();
  uint64_t v27 = _RopePath.subscript.getter(0, v25, AssociatedTypeWitness, v26);
  uint64_t v28 = 0;
  uint64_t v55 = v27;
  if (v27 < v24)
  {
    uint64_t v29 = v24;
    uint64_t v48 = AssociatedTypeWitness;
    uint64_t v49 = a10;
    v41[0] = a1;
    v41[1] = a7;
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(a10 + 24);
    uint64_t v46 = a10 + 24;
    BOOL v47 = v30;
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 24);
    uint64_t v32 = v44 + 16;
    uint64_t v44 = *(void *)(v44 + 16);
    uint64_t v45 = v31;
    uint64_t v43 = *(void *)(v32 + 56);
    uint64_t v33 = (void (**)(char *, uint64_t))(v32 - 8);
    uint64_t v34 = (void (**)(char *, uint64_t))(v42 + 8);
    uint64_t v35 = v32;
    do
    {
      uint64_t v36 = v29;
      uint64_t v37 = v35;
      ((void (*)(char *, char *, uint64_t))v44)(v22, (char *)v50 + v43 * v27, a8);
      v47(a8, v49);
      (*v33)(v22, a8);
      uint64_t v38 = v45(v20, v53, v54);
      (*v34)(v20, v48);
      uint64_t v39 = *a2;
      if (v52)
      {
        if (v39 <= v38) {
          goto LABEL_7;
        }
      }
      else if (v39 < v38)
      {
LABEL_7:
        uint64_t v28 = 1;
        goto LABEL_9;
      }
      *a2 = v39 - v38;
      uint64_t v27 = v55 + 1;
      uint64_t v55 = v27;
      uint64_t v29 = v36;
      uint64_t v35 = v37;
    }
    while (v27 < v36);
    uint64_t v28 = 0;
LABEL_9:
    a1 = (unint64_t *)v41[0];
  }
  sub_24A535D9C((uint64_t)a1, &v55);
  return v28;
}

uint64_t Rope._Node.seekForward<A>(from:by:in:preferEnd:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    uint64_t v13 = *v7;
    uint64_t v32 = (uint64_t *)a2;
    char v14 = a4;
    unint64_t v15 = *v7
        + ((*(unsigned __int8 *)(*(void *)(a5 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a5 - 8) + 80));
    uint64_t v16 = *(void *)(a5 + 16);
    uint64_t v17 = *(void *)(a5 + 24);
    swift_getWitnessTable();
    uint64_t v18 = (unsigned __int16 *)nullsub_1(v13 + 16, v15, v16, a5, v17);
    uint64_t v20 = v19;
    swift_unknownObjectRetain();
    sub_24A5361B8(v18, v20, a1, (uint64_t)v7, v32, a3, v14 & 1, v16, (char *)&v37, a6, a7);
    swift_unknownObjectRelease();
    return v37;
  }
  else
  {
    uint64_t v22 = *v7;
    uint64_t v31 = *v7 + 16;
    uint64_t v24 = *(void *)(a5 + 16);
    uint64_t v23 = *(void *)(a5 + 24);
    uint64_t v25 = type metadata accessor for Rope._Item();
    char v33 = a4;
    uint64_t v26 = v22
        + ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v27 = nullsub_1(v31, v26, v24, v25, v23);
    uint64_t v29 = v28;
    swift_unknownObjectRetain();
    sub_24A5366B8(v27, v29, a1, a2, a3, v33 & 1, v24, a6, &v36, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:));
    swift_unknownObjectRelease();
    uint64_t v21 = v36;
    if (v36 == 1) {
      *(void *)(a1 + 16) = Rope._Node.asUnmanagedLeaf.getter();
    }
  }
  return v21;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Rope.index<A>(_:offsetBy:in:preferEnd:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v10[1] = a2;
  _OWORD v10[2] = a3;
  uint64_t v9 = a4;
  Rope.formIndex<A>(_:offsetBy:in:preferEnd:)(v10, &v9, a5, a6, a7, a8, a9);
}

uint64_t sub_24A535D9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for _RopePath();
  return _RopePath.subscript.setter(v2, 0, v3);
}

uint64_t Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, uint64_t *a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v56 = a5;
  int v54 = a4;
  uint64_t v53 = a3;
  uint64_t v52 = a9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = (unsigned __int16 *)swift_getAssociatedTypeWitness();
  uint64_t v42 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v18 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v51 = (char *)v41 - v19;
  uint64_t v20 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v50 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = Rope._UnsafeHandle.children.getter(v56, a6, a7, a8, AssociatedConformanceWitness, a10);
  unint64_t v23 = *a1;
  uint64_t v55 = a8;
  uint64_t v24 = swift_getAssociatedConformanceWitness();
  uint64_t v56 = AssociatedTypeWitness;
  uint64_t v25 = _RopePath.subscript.getter(0, v23, (uint64_t)AssociatedTypeWitness, v24);
  if (v25 - 1 >= 0)
  {
    uint64_t v26 = v25;
    v41[0] = v24;
    v41[1] = a1;
    uint64_t v48 = a10;
    uint64_t v49 = a11;
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(a10 + 24);
    uint64_t v47 = a10 + 24;
    uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a11 + 24);
    uint64_t v45 = a11 + 24;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    uint64_t v27 = v20 + 16;
    uint64_t v29 = *(void *)(v27 + 56);
    uint64_t v30 = (void (**)(char *, unsigned __int16 *))(v42 + 8);
    uint64_t v31 = v22 + v29 * (v25 - 1);
    uint64_t v42 = -v29;
    uint64_t v43 = v28;
    uint64_t v32 = v51;
    do
    {
      uint64_t v34 = v50;
      uint64_t v35 = v55;
      v43(v50, v31, v55);
      v46(v35, v48);
      (*(void (**)(char *, uint64_t))(v27 - 8))(v34, v35);
      uint64_t v36 = v44(v32, v52, v49);
      (*v30)(v32, v56);
      unsigned __int8 v37 = a2;
      uint64_t v38 = *a2;
      if (v54)
      {
        if (v38 < v36)
        {
LABEL_7:
          uint64_t v39 = type metadata accessor for _RopePath();
          _RopePath.subscript.setter(v26 - 1, 0, v39);
          *unsigned __int8 v37 = v36 - v38;
          return 1;
        }
      }
      else if (v36 >= v38)
      {
        goto LABEL_7;
      }
      uint64_t v33 = v38 - v36;
      a2 = v37;
      *unsigned __int8 v37 = v33;
      --v26;
      v31 += v42;
    }
    while (v26 > 0);
  }
  return 0;
}

uint64_t sub_24A5361B8@<X0>(unsigned __int16 *a1@<X0>, void (*a2)(char *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v80 = a7;
  uint64_t v81 = a6;
  uint64_t v72 = a5;
  uint64_t v74 = a2;
  char v69 = a1;
  int v66 = a9;
  uint64_t v78 = a10;
  uint64_t v79 = a11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v59 - v16;
  uint64_t v18 = type metadata accessor for Rope._Node();
  uint64_t v76 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unint64_t v23 = (char *)&v59 - v22;
  unsigned int v24 = Rope._Node.header.getter() >> 16;
  uint64_t v71 = a3;
  uint64_t v25 = a3 + 8;
  unint64_t v26 = *(void *)(a3 + 8);
  uint64_t v64 = v25;
  uint64_t v68 = AssociatedConformanceWitness;
  uint64_t v70 = a8;
  uint64_t v27 = swift_getAssociatedConformanceWitness();
  uint64_t v77 = AssociatedTypeWitness;
  uint64_t v28 = _RopePath.subscript.getter(v24, v26, AssociatedTypeWitness, v27);
  uint64_t v29 = v76;
  uint64_t v30 = v76 + 16;
  uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
  v67(v23, a4, v18);
  uint64_t v31 = v29;
  uint64_t v32 = (unsigned __int16)Rope._Node.header.getter();
  uint64_t v33 = v31 + 8;
  uint64_t v34 = v23;
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
  uint64_t result = v35(v34, v18);
  uint64_t v75 = v28;
  if (v28 >= v32)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v63 = v27;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v38 = Rope._UnsafeHandle.children.getter(v69, (uint64_t)v74, v70, v18, v68, WitnessTable);
  uint64_t v40 = v39;
  uint64_t v76 = *(void *)(v31 + 72);
  v67(v21, v38 + v76 * v75, v18);
  uint64_t v41 = v79;
  char v42 = Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v71, v72, v81, v80 & 1, v18, v78, v79);
  uint64_t result = v35(v21, v18);
  if (v42)
  {
    char v43 = 1;
    goto LABEL_14;
  }
  uint64_t v44 = v38;
  uint64_t v45 = v75 + 1;
  if (v75 + 1 >= v40)
  {
LABEL_13:
    char v43 = 0;
LABEL_14:
    uint64_t v58 = v66;
LABEL_15:
    *uint64_t v58 = v43;
    return result;
  }
  uint64_t v73 = v40;
  uint64_t v59 = v30;
  uint64_t v60 = v35;
  uint64_t v61 = v33;
  uint64_t v62 = v21;
  uint64_t v46 = *(uint64_t (**)(void, void, void))(v41 + 24);
  uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
  uint64_t v75 = (uint64_t)v46;
  uint64_t v47 = (uint64_t (**)(char *, uint64_t))(v65 + 8);
  uint64_t v48 = v77;
  uint64_t v49 = v44 + v76 * v45;
  uint64_t v50 = v72;
  v74(v17, v49 + *(int *)(v18 + 36), v77);
  while (1)
  {
    uint64_t v51 = ((uint64_t (*)(char *, uint64_t, uint64_t))v75)(v17, v78, v79);
    uint64_t result = (*v47)(v17, v48);
    uint64_t v52 = *v50;
    if (v80) {
      break;
    }
    if (v52 < v51) {
      goto LABEL_11;
    }
LABEL_7:
    *uint64_t v50 = v52 - v51;
    ++v45;
    v49 += v76;
    if (v73 == v45) {
      goto LABEL_13;
    }
    v74(v17, v49 + *(int *)(v18 + 36), v48);
  }
  if (v52 > v51) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t v53 = v69;
  unsigned __int8 v54 = *((unsigned char *)v69 + 2);
  uint64_t v55 = type metadata accessor for _RopePath();
  _RopePath.subscript.setter(v45, v54, v55);
  LOBYTE(v53) = *((unsigned char *)v53 + 2);
  type metadata accessor for Rope.Index();
  uint64_t v56 = v71;
  Rope.Index._clear(below:)((Swift::UInt8)v53);
  uint64_t v57 = v62;
  v67(v62, v49, v18);
  LOBYTE(v53) = Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v56, v50, v81, v80 & 1, v18, v78, v79);
  uint64_t result = v60(v57, v18);
  uint64_t v58 = v66;
  if (v53)
  {
    char v43 = 1;
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_24A5366B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v17 = a3 + 8;
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Rope._Item();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a11(v17, a4, a5, a6, a1, a2, a7, v18, a8, WitnessTable, a10);
  *a9 = result & 1;
  return result;
}

void sub_24A5367B0(unsigned __int16 *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v73 = a7;
  uint64_t v74 = a6;
  uint64_t v64 = a5;
  uint64_t v65 = a9;
  uint64_t v68 = a2;
  int v66 = a1;
  uint64_t v76 = a11;
  uint64_t v72 = a10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v70 = (char *)v58 - v16;
  uint64_t v17 = type metadata accessor for Rope._Node();
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v62 = (char *)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)v58 - v21;
  unsigned int v23 = Rope._Node.header.getter() >> 16;
  uint64_t v63 = a3;
  uint64_t v24 = a3 + 8;
  unint64_t v25 = *(void *)(a3 + 8);
  v58[4] = v24;
  uint64_t v26 = swift_getAssociatedConformanceWitness();
  uint64_t v71 = AssociatedTypeWitness;
  uint64_t v27 = _RopePath.subscript.getter(v23, v25, AssociatedTypeWitness, v26);
  uint64_t v28 = (void (*)(char *, uint64_t, uint64_t))v18[2];
  uint64_t v69 = a4;
  uint64_t v59 = v28;
  uint64_t v60 = v18 + 2;
  v28(v22, a4, v17);
  uint64_t v29 = (unsigned __int16)Rope._Node.header.getter();
  uint64_t v30 = v22;
  uint64_t v31 = v17;
  uint64_t v61 = (void (*)(char *, uint64_t))v18[1];
  v61(v30, v17);
  if (v27 > v29)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v58[3] = v26;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v33 = Rope._UnsafeHandle.children.getter(v66, (uint64_t)v68, a8, v17, AssociatedConformanceWitness, WitnessTable);
  if (v27 < (unsigned __int16)Rope._Node.header.getter())
  {
    uint64_t v34 = v62;
    v59(v62, v33 + v18[9] * v27, v17);
    char v35 = Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(v63, v64, v74, v73 & 1, v17, v72, v76);
    v61(v34, v17);
    if (v35) {
      goto LABEL_16;
    }
  }
  uint64_t v36 = v27 - 1;
  if (__OFSUB__(v27, 1)) {
    goto LABEL_20;
  }
  if (v36 < 0)
  {
LABEL_13:
    char v49 = 0;
    goto LABEL_17;
  }
  v58[0] = v18 + 1;
  v58[1] = AssociatedConformanceWitness;
  v58[2] = a8;
  unsigned __int8 v37 = v64;
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 24);
  uint64_t v69 = v76 + 24;
  uint64_t v38 = v18[9];
  uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v75 += 16;
  uint64_t v39 = (void (**)(char *, uint64_t))(v75 - 8);
  uint64_t v40 = v33 + v38 * v36;
  uint64_t v41 = -v38;
  char v42 = v70;
  while (1)
  {
    uint64_t v43 = v31;
    uint64_t v44 = v71;
    v67(v42, v40 + *(int *)(v31 + 36), v71);
    uint64_t v45 = v68(v42, v72, v76);
    (*v39)(v42, v44);
    uint64_t v46 = *v37;
    if ((v73 & 1) == 0) {
      break;
    }
    if (v46 < v45) {
      goto LABEL_14;
    }
LABEL_11:
    BOOL v47 = __OFSUB__(v46, v45);
    uint64_t v48 = v46 - v45;
    if (v47)
    {
      __break(1u);
      goto LABEL_19;
    }
    *unsigned __int8 v37 = v48;
    --v27;
    v40 += v41;
    uint64_t v31 = v43;
    if (v27 <= 0) {
      goto LABEL_13;
    }
  }
  if (v45 < v46) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v50 = v66;
  unsigned __int8 v51 = *((unsigned char *)v66 + 2);
  uint64_t v52 = type metadata accessor for _RopePath();
  _RopePath.subscript.setter(v27 - 1, v51, v52);
  Swift::UInt8 v53 = *((unsigned char *)v50 + 2);
  type metadata accessor for Rope.Index();
  Swift::UInt8 v54 = v53;
  uint64_t v55 = v63;
  Rope.Index._clear(below:)(v54);
  if (__OFSUB__(v45, *v37)) {
    goto LABEL_21;
  }
  *unsigned __int8 v37 = v45 - *v37;
  uint64_t v56 = v62;
  v59(v62, v40, v43);
  char v57 = Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v55, (uint64_t)v37, v74, v73 & 1, v43, v72, v76);
  v61(v56, v43);
  if ((v57 & 1) == 0)
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_16:
  char v49 = 1;
LABEL_17:
  char *v65 = v49;
}

uint64_t sub_24A536CF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A533D48(a1, *(void *)(v2 + 48), *(void *)(v2 + 72), a2);
}

uint64_t sub_24A536D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_24A5366B8(a1, a2, *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(unsigned __int8 *)(v3 + 64), *(void *)(v3 + 16), *(void *)(v3 + 24), a3, *(void *)(v3 + 32), (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:));
}

uint64_t sub_24A536D70()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A536D8C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A536DF0()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A536E54()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A536E70()
{
  return swift_getWitnessTable();
}

uint64_t OrderedSet.init(minimumCapacity:persistent:)(Swift::Int a1, Swift::Bool a2)
{
  uint64_t v5 = OrderedSet.init()();
  type metadata accessor for OrderedSet();
  OrderedSet._reserveCapacity(_:persistent:)(a1, a2);
  return v5;
}

Swift::Void __swiftcall OrderedSet._reserveCapacity(_:persistent:)(Swift::Int _, Swift::Bool persistent)
{
  if (_ < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v3 = v2;
  sub_24A5BC210();
  sub_24A5BC180();
  uint64_t v6 = *v2;
  uint64_t v7 = OrderedSet._scale.getter(*v2);
  int64_t v8 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(_);
  Swift::Int v9 = v8;
  if (!persistent) {
    Swift::Int v9 = OrderedSet._reservedScale.getter(v6);
  }
  if (v7 >= v8)
  {
    int64_t v11 = _s19CollectionsInternal4HeapV5countSivg_0();
    Swift::Int v10 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v11);
    if (v9 <= v8) {
      Swift::Int v12 = v8;
    }
    else {
      Swift::Int v12 = v9;
    }
    if (v10 <= v12) {
      Swift::Int v10 = v12;
    }
    if (v10 < v7) {
      goto LABEL_12;
    }
    OrderedSet._ensureUnique()();
    uint64_t v13 = *v3;
    if (OrderedSet._reservedScale.getter(*v3) == v9) {
      return;
    }
    if (v13)
    {
      swift_beginAccess();
      *(void *)(v13 + 24) = *(void *)(v13 + 24) & 0xFFFFFFFFFFFFFFC0 | v9 & 0x3F;
      return;
    }
LABEL_20:
    __break(1u);
    return;
  }
  Swift::Int v10 = v8;
LABEL_12:
  OrderedSet._regenerateHashTable(scale:reservedScale:)(v10, v9);
}

Swift::Void __swiftcall OrderedSet.reserveCapacity(_:)(Swift::Int a1)
{
}

Swift::Void __swiftcall Rope._dump(heightLimit:firstPrefix:restPrefix:)(Swift::Int heightLimit, Swift::String firstPrefix, Swift::String restPrefix)
{
  Swift::String v28 = restPrefix;
  Swift::String v27 = firstPrefix;
  Swift::Int v26 = heightLimit;
  uint64_t v4 = type metadata accessor for Rope._Node();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v24 = (char *)&v23 - v6;
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  int64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v23 - v12;
  char v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v23 = v3;
  v14((char *)&v23 - v12, v3, v7);
  uint64_t v25 = v5;
  unint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v16 = v15(v13, 1, v4);
  uint64_t v17 = v13;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v17, v7);
  if (v16 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = MEMORY[0x263F8D310];
    *(_OWORD *)(v19 + 16) = xmmword_24A5BDAE0;
    *(void *)(v19 + 56) = v20;
    *(void *)(v19 + 32) = 0x3E7974706D453CLL;
    *(void *)(v19 + 40) = 0xE700000000000000;
    sub_24A5BC600();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14(v11, v23, v7);
    if (v15(v11, 1, v4) == 1)
    {
      v18(v11, v7);
      __break(1u);
    }
    else
    {
      uint64_t v22 = v24;
      uint64_t v21 = v25;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v24, v11, v4);
      Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(v26, v27, v28);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v4);
    }
  }
}

Swift::Void __swiftcall Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(Swift::Int heightLimit, Swift::String firstPrefix, Swift::String restPrefix)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  object = restPrefix._object;
  uint64_t countAndFlagsBits = restPrefix._countAndFlagsBits;
  uint64_t v9 = firstPrefix._object;
  uint64_t v10 = firstPrefix._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_24A5BDAE0;
  swift_bridgeObjectRetain();
  Rope._Node.description.getter();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 56) = MEMORY[0x263F8D310];
  *(void *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = v9;
  sub_24A5BC600();
  swift_bridgeObjectRelease();
  if (heightLimit >= 1)
  {
    uint64_t v13 = Rope._Node.header.getter();
    uint64_t v14 = *v5;
    if ((v13 & 0xFF0000) != 0)
    {
      uint64_t v15 = v14
          + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));
      uint64_t v16 = *(void *)(v6 + 16);
      uint64_t v17 = *(void *)(v6 + 24);
      swift_getWitnessTable();
      uint64_t v18 = (unsigned __int16 *)nullsub_1(v14 + 16, v15, v16, v6, v17);
      uint64_t v20 = v19;
      swift_unknownObjectRetain();
      sub_24A537D28(v18, v20, heightLimit, countAndFlagsBits, object, v16, v17);
    }
    else
    {
      uint64_t v22 = *(void *)(v6 + 16);
      uint64_t v21 = *(void *)(v6 + 24);
      uint64_t v23 = type metadata accessor for Rope._Item();
      uint64_t v24 = v14
          + ((*(unsigned __int8 *)(*(void *)(v23 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v23 - 8) + 80));
      swift_getWitnessTable();
      uint64_t v25 = (unsigned __int16 *)nullsub_1(v14 + 16, v24, v22, v23, v21);
      uint64_t v27 = v26;
      swift_unknownObjectRetain();
      sub_24A537F78(v25, v27, countAndFlagsBits, (uint64_t)object, v22, v21);
    }
    swift_unknownObjectRelease();
  }
}

uint64_t Rope._UnmanagedLeaf.description.getter()
{
  return 30768;
}

uint64_t sub_24A537684()
{
  return Rope._UnmanagedLeaf.description.getter();
}

uint64_t Rope._nodeCount.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = sub_24A5BBD20();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v10 - v5, v1, v3);
  uint64_t v7 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) == 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = Rope._Node.nodeCount.getter(v2);
    uint64_t v4 = v7;
    uint64_t v3 = v2;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8;
}

uint64_t Rope._Node.nodeCount.getter(uint64_t a1)
{
  if ((Rope._Node.header.getter() & 0xFF0000) == 0) {
    return 1;
  }
  uint64_t v3 = *v1;
  uint64_t v4 = v3
     + ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80));
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  swift_getWitnessTable();
  uint64_t v7 = (unsigned __int16 *)nullsub_1(v3 + 16, v4, v5, a1, v6);
  uint64_t v9 = v8;
  swift_unknownObjectRetain();
  sub_24A5378F4(v7, v9, v5, v6);
  swift_unknownObjectRelease();
  return v11;
}

uint64_t sub_24A5378F4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  Rope._UnsafeHandle.children.getter(a1, a2, a3, v8, a4, WitnessTable);
  sub_24A5BB580();
  swift_getWitnessTable();
  return sub_24A5BB8E0();
}

uint64_t sub_24A537A00(void *a1)
{
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t result = Rope._Node.nodeCount.getter(v2);
  if (__OFADD__(*a1, result)) {
    __break(1u);
  }
  else {
    *a1 += result;
  }
  return result;
}

uint64_t Rope._Node.description.getter()
{
  sub_24A5BC070();
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    Rope._Node.header.getter();
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
  }
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A49A24C();
  sub_24A5BB7F0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24A5BC4D0();
  sub_24A5BB6F0();
  Rope._Node.header.getter();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  return 0;
}

uint64_t sub_24A537D28(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Rope._Node();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v38 = (char *)&v32 - v16;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.children.getter(a1, a2, a6, v14, a7, WitnessTable);
  if (v19 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v20 = v19;
  uint64_t v21 = v38;
  if (!v19) {
    return result;
  }
  Swift::Int v22 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v23 = result;
  uint64_t v24 = 0;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v25 = v15 + 16;
  uint64_t v36 = *(void *)(v25 + 56);
  unsigned __int8 v37 = v26;
  uint64_t v34 = a4;
  char v35 = (uint64_t (**)(char *, uint64_t))(v25 - 8);
  Swift::Int v33 = v22;
  do
  {
    v37(v21, v23, v14);
    uint64_t v27 = v34;
    v40._uint64_t countAndFlagsBits = v34;
    v40._object = a5;
    uint64_t v39 = v24;
    swift_bridgeObjectRetain();
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    uint64_t v28 = v25;
    uint64_t countAndFlagsBits = v40._countAndFlagsBits;
    object = v40._object;
    v40._uint64_t countAndFlagsBits = v27;
    v40._object = a5;
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    v31._uint64_t countAndFlagsBits = countAndFlagsBits;
    v31._object = object;
    Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(v33, v31, v40);
    uint64_t v25 = v28;
    uint64_t v21 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = (*v35)(v21, v14);
    v23 += v36;
    ++v24;
  }
  while (v20 != v24);
  return result;
}

uint64_t sub_24A537F78(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Rope._Item();
  uint64_t v28 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.children.getter(a1, a2, a5, v11, a6, WitnessTable);
  if (v16 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = v16;
    uint64_t v27 = a4;
    if (v16)
    {
      uint64_t v18 = result;
      uint64_t v19 = 0;
      uint64_t v25 = v28 + 8;
      uint64_t v26 = v28 + 16;
      long long v24 = xmmword_24A5BDAE0;
      do
      {
        __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = v24;
        uint64_t v30 = 0;
        unint64_t v31 = 0xE000000000000000;
        sub_24A5BB6F0();
        uint64_t v29 = v19;
        sub_24A5BC430();
        sub_24A5BB6F0();
        uint64_t v21 = v28;
        swift_bridgeObjectRelease();
        sub_24A5BB6F0();
        (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v13, v18 + *(void *)(v21 + 72) * v19, v11);
        swift_getWitnessTable();
        sub_24A5BC4E0();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v11);
        uint64_t v22 = v30;
        unint64_t v23 = v31;
        *(void *)(v20 + 56) = MEMORY[0x263F8D310];
        *(void *)(v20 + 32) = v22;
        *(void *)(v20 + 40) = v23;
        sub_24A5BC600();
        uint64_t result = swift_bridgeObjectRelease();
        ++v19;
      }
      while (v17 != v19);
    }
  }
  return result;
}

uint64_t sub_24A5381FC(void *a1)
{
  return sub_24A537A00(a1);
}

double sub_24A53821C@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_24A490BF0(*a1, a1[1], v5);
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

unint64_t sub_24A538268()
{
  unint64_t result = qword_26979BBB8;
  if (!qword_26979BBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979BBB8);
  }
  return result;
}

unint64_t sub_24A5382C0()
{
  unint64_t result = qword_26979BBC0[0];
  if (!qword_26979BBC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979BBC0);
  }
  return result;
}

uint64_t OrderedSet._UnstableInternals.base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedSet._UnstableInternals.base.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet._UnstableInternals.base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedSet.__unstable.getter(uint64_t a1)
{
  return a1;
}

void (*OrderedSet.__unstable.modify(void *a1, uint64_t a2))(void **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  _OWORD v5[2] = v2;
  void v5[3] = v8;
  v5[4] = v9;
  *uint64_t v5 = v6;
  v5[1] = v7;
  *uint64_t v2 = OrderedSet.init()();
  v2[1] = v10;
  return sub_24A523348;
}

uint64_t OrderedSet.__unstable.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_retain();
  uint64_t v5 = OrderedSet.init()();
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  *uint64_t v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  sub_24A52339C(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for OrderedSet._UnstableInternals()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A53852C(unint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v3 = *v1;
  if (*(unsigned char *)(v3 + 18))
  {
    uint64_t v5 = v3 + 40 * ((a1 >> ((4 * *(unsigned char *)(v3 + 18) + 8) & 0x3C)) & 0xF);
    long long v6 = *(_OWORD *)(v5 + 24);
    long long v7 = *(_OWORD *)(v5 + 40);
    uint64_t v10 = *(void *)(v5 + 56);
    v9[0] = v6;
    v9[1] = v7;
    sub_24A497498(v2);
    sub_24A497498((uint64_t)v9);
    uint64_t v3 = sub_24A53852C(a1);
    sub_24A496BE8((uint64_t)v9);
    sub_24A496BE8(v2);
  }
  return v3;
}

Swift::Void __swiftcall BigString.write(_:)(Swift::String a1)
{
  swift_bridgeObjectRetain();
  BigString.append(contentsOf:)();
}

unint64_t sub_24A538624()
{
  swift_bridgeObjectRetain();
  return BigString.append(contentsOf:)();
}

uint64_t BigString.write<A>(to:)()
{
  uint64_t v1 = (uint64_t)v0;
  long long v2 = v0[1];
  long long v58 = *v0;
  *(_OWORD *)uint64_t v68 = v58;
  *(_OWORD *)&v68[16] = v2;
  long long v3 = v0[1];
  *(_OWORD *)&v68[32] = v0[2];
  long long v54 = v0[2];
  long long v56 = v3;
  uint64_t v4 = v58;
  uint64_t v60 = *(void *)&v68[40];
  if ((void)v58)
  {
    unint64_t v5 = *(unsigned __int8 *)(v58 + 18);
    swift_unknownObjectRetain_n();
  }
  else
  {
    unint64_t v5 = 0;
  }
  swift_unknownObjectRetain();
  if (sub_24A498214() <= v5)
  {
    sub_24A496BE8((uint64_t)v0);
    sub_24A496BE8((uint64_t)v0);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v75 = v58;
    long long v76 = *(_OWORD *)&v68[8];
    long long v77 = *(_OWORD *)&v68[24];
    swift_unknownObjectRetain();
    uint64_t v6 = sub_24A53852C(v5);
    sub_24A496BE8(v1);
    sub_24A496BE8(v1);
    sub_24A496BE8(v1);
  }
  long long v62 = v58;
  long long v63 = v56;
  long long v64 = v54;
  uint64_t v65 = *(void *)&v68[40];
  uint64_t v66 = v5;
  uint64_t v67 = v6;
  if (!v6) {
    return sub_24A496BE8(v1);
  }
  uint64_t v59 = v58 + 24;
  while (v65 == v60)
  {
    unint64_t v7 = v66;
    if (!v4) {
      goto LABEL_55;
    }
    int v8 = *(unsigned __int8 *)(v4 + 18);
    sub_24A497498(v1);
    sub_24A497498(v1);
    sub_24A497498(v1);
    sub_24A497498(v1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v9 = *(unsigned __int16 *)(v4 + 16);
    char v10 = *(unsigned char *)(v4 + 18);
    sub_24A496BE8(v1);
    uint64_t result = sub_24A496BE8(v1);
    if (v7 >= (((-15 << ((4 * v10 + 8) & 0x3C)) - 1) & v8 | (unint64_t)(v9 << ((4 * v10 + 8) & 0x3C)))) {
      goto LABEL_56;
    }
    char v12 = (4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C;
    unint64_t v13 = ((v7 >> v12) & 0xF) + 1;
    if (v13 < *(unsigned __int16 *)(v6 + 16))
    {
      uint64_t v66 = (v13 << v12) | ((-15 << v12) - 1) & v7;
LABEL_10:
      sub_24A496BE8(v1);
      goto LABEL_11;
    }
    char v14 = (4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C;
    uint64_t v15 = (v7 >> v14) & 0xF;
    if (*(unsigned char *)(v4 + 18))
    {
      uint64_t v16 = *(void *)(v59 + 40 * ((v7 >> v14) & 0xF));
      char v17 = (4 * *(unsigned char *)(v16 + 18) + 8) & 0x3C;
      uint64_t v18 = (v7 >> v17) & 0xF;
      if (*(unsigned char *)(v16 + 18))
      {
        uint64_t v19 = v16 + 24;
        uint64_t v20 = *(void *)(v16 + 24 + 40 * ((v7 >> v17) & 0xF));
        char v21 = (4 * *(unsigned char *)(v20 + 18) + 8) & 0x3C;
        uint64_t v22 = (v7 >> v21) & 0xF;
        if (!*(unsigned char *)(v20 + 18))
        {
          if (v22 + 1 < (unint64_t)*(unsigned __int16 *)(v20 + 16))
          {
            uint64_t v66 = ((v22 + 1) << v21) | ((-15 << v21) - 1) & v7;
            uint64_t v67 = v20;
            uint64_t v6 = v20;
            sub_24A497498(v1);
            swift_unknownObjectRetain();
            goto LABEL_38;
          }
          uint64_t v55 = v16 + 24;
          char v53 = (4 * *(unsigned char *)(v16 + 18) + 8) & 0x3C;
          sub_24A497498(v1);
          swift_unknownObjectRetain();
          goto LABEL_40;
        }
        uint64_t v57 = *(void *)(v59 + 40 * ((v7 >> v14) & 0xF));
        uint64_t v6 = *(void *)(v20 + 24 + 40 * ((v7 >> v21) & 0xF));
        int v23 = *(unsigned __int8 *)(v6 + 18);
        char v24 = (4 * v23 + 8) & 0x3C;
        unint64_t v61 = (v7 >> v24) & 0xF;
        if (v23)
        {
          char v49 = v21;
          uint64_t v50 = v20 + 24;
          uint64_t v55 = v19;
          char v53 = v17;
          uint64_t v52 = (v7 >> v21) & 0xF;
          uint64_t v25 = v20;
          sub_24A497498(v1);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          char v26 = sub_24A538E54(v6 + 24, (uint64_t *)&v61, (uint64_t)&v65, v6, v23);
          swift_unknownObjectRelease();
          if (v26)
          {
            uint64_t v6 = v67;
            goto LABEL_32;
          }
LABEL_35:
          uint64_t v29 = v52 + 1;
          if (v52 + 1 < (unint64_t)*(unsigned __int16 *)(v25 + 16))
          {
            uint64_t v30 = (long long *)(v50 + 40 * v29);
            long long v32 = *v30;
            long long v31 = v30[1];
            uint64_t v74 = *((void *)v30 + 4);
            v73[0] = v32;
            v73[1] = v31;
            unsigned int v33 = *(unsigned __int8 *)(v32 + 18) + 1;
            if ((v33 >> 8)) {
              goto LABEL_54;
            }
            uint64_t v66 = ((-256 << (4 * (v33 & 0xF))) | 0xFF) & (v66 & ((-15 << v49) - 1) | (v29 << v49));
            unint64_t v34 = v66;
            swift_unknownObjectRetain();
            uint64_t v6 = sub_24A53852C(v34);
            sub_24A496BE8((uint64_t)v73);
            uint64_t v67 = v6;
            swift_unknownObjectRelease();
            goto LABEL_38;
          }
          swift_unknownObjectRelease();
          uint64_t v16 = v57;
LABEL_40:
          uint64_t v35 = v18 + 1;
          if (v18 + 1 < (unint64_t)*(unsigned __int16 *)(v16 + 16))
          {
            uint64_t v36 = (long long *)(v55 + 40 * v35);
            long long v38 = *v36;
            long long v37 = v36[1];
            uint64_t v72 = *((void *)v36 + 4);
            v71[0] = v38;
            v71[1] = v37;
            unsigned int v39 = *(unsigned __int8 *)(v38 + 18) + 1;
            if ((v39 >> 8)) {
              goto LABEL_53;
            }
            uint64_t v66 = ((-256 << (4 * (v39 & 0xF))) | 0xFF) & (v66 & ((-15 << v53) - 1) | (v35 << v53));
            unint64_t v40 = v66;
            swift_unknownObjectRetain();
            uint64_t v6 = sub_24A53852C(v40);
            sub_24A496BE8((uint64_t)v71);
            uint64_t v67 = v6;
            swift_unknownObjectRelease();
            goto LABEL_47;
          }
          swift_unknownObjectRelease();
LABEL_44:
          uint64_t v41 = v15 + 1;
          if (v15 + 1 >= (unint64_t)*(unsigned __int16 *)(v4 + 16))
          {
            sub_24A496BE8(v1);
            int v27 = *(unsigned __int8 *)(v4 + 18);
            goto LABEL_49;
          }
          char v42 = (long long *)(v59 + 40 * v41);
          long long v44 = *v42;
          long long v43 = v42[1];
          uint64_t v70 = *((void *)v42 + 4);
          v69[0] = v44;
          v69[1] = v43;
          unsigned int v45 = *(unsigned __int8 *)(v44 + 18) + 1;
          if ((v45 >> 8)) {
            goto LABEL_52;
          }
          uint64_t v66 = ((-256 << (4 * (v45 & 0xF))) | 0xFF) & (v66 & ((-15 << v14) - 1) | (v41 << v14));
          unint64_t v46 = v66;
          swift_unknownObjectRetain();
          uint64_t v6 = sub_24A53852C(v46);
          sub_24A496BE8((uint64_t)v69);
          uint64_t v67 = v6;
          goto LABEL_47;
        }
        uint64_t v51 = v20;
        unint64_t v28 = ((v7 >> v24) & 0xF) + 1;
        if (v28 >= *(unsigned __int16 *)(v6 + 16))
        {
          uint64_t v52 = (v7 >> v21) & 0xF;
          char v49 = v21;
          uint64_t v50 = v20 + 24;
          uint64_t v55 = v19;
          char v53 = v17;
          sub_24A497498(v1);
          swift_unknownObjectRetain();
          uint64_t v25 = v51;
          swift_unknownObjectRetain();
          goto LABEL_35;
        }
        uint64_t v66 = (v28 << v24) | ((-15 << v24) - 1) & v7;
        uint64_t v67 = v6;
        sub_24A497498(v1);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
LABEL_32:
        swift_unknownObjectRelease();
LABEL_38:
        swift_unknownObjectRelease();
      }
      else
      {
        if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(v16 + 16))
        {
          swift_unknownObjectRetain();
          goto LABEL_44;
        }
        uint64_t v66 = ((v18 + 1) << v17) | ((-15 << v17) - 1) & v7;
        uint64_t v67 = v16;
        swift_unknownObjectRetain();
        uint64_t v6 = v16;
      }
LABEL_47:
      sub_24A496BE8(v1);
      goto LABEL_10;
    }
    if (v15 + 1 >= (unint64_t)*(unsigned __int16 *)(v4 + 16))
    {
      int v27 = 0;
LABEL_49:
      uint64_t v47 = *(unsigned __int16 *)(v4 + 16);
      char v48 = *(unsigned char *)(v4 + 18);
      swift_unknownObjectRetain();
      sub_24A496BE8(v1);
      sub_24A496BE8(v1);
      uint64_t v6 = 0;
      uint64_t v65 = v60;
      uint64_t v66 = ((-15 << ((4 * v48 + 8) & 0x3C)) - 1) & v27 | (unint64_t)(v47 << ((4 * v48 + 8) & 0x3C));
      uint64_t v67 = 0;
      goto LABEL_11;
    }
    uint64_t v66 = ((v15 + 1) << v14) | ((-15 << v14) - 1) & v7;
    sub_24A496BE8(v1);
    uint64_t v67 = v4;
    uint64_t v6 = v4;
LABEL_11:
    sub_24A5BB6A0();
    swift_bridgeObjectRelease();
    if (!v6) {
      return sub_24A496BE8(v1);
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = swift_bridgeObjectRetain();
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_24A538E18()
{
  return BigString.write<A>(to:)();
}

uint64_t sub_24A538E54(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = a1 + 40 * *a2;
  long long v11 = *(_OWORD *)(v10 + 16);
  v23[0] = *(_OWORD *)v10;
  v23[1] = v11;
  uint64_t v24 = *(void *)(v10 + 32);
  swift_unknownObjectRetain();
  char v12 = sub_24A498278(a3);
  uint64_t result = sub_24A496BE8((uint64_t)v23);
  if (v12) {
    return 1;
  }
  uint64_t v14 = *a2 + 1;
  if (__OFADD__(*a2, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  *a2 = v14;
  if (v14 < *(unsigned __int16 *)(a4 + 16))
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      uint64_t v15 = *(void *)(a3 + 8) & ((-15 << ((4 * a5 + 8) & 0x3C)) - 1) | (v14 << ((4 * a5 + 8) & 0x3C));
      *(void *)(a3 + 8) = v15;
      uint64_t v16 = a1 + 40 * *a2;
      uint64_t v22 = *(void *)(v16 + 32);
      long long v17 = *(_OWORD *)(v16 + 16);
      v21[0] = *(_OWORD *)v16;
      v21[1] = v17;
      uint64_t result = *(void *)&v21[0];
      unsigned int v18 = *(unsigned __int8 *)(*(void *)&v21[0] + 18) + 1;
      if (((v18 >> 8) & 1) == 0)
      {
        unint64_t v19 = ((-256 << (4 * (v18 & 0xF))) | 0xFF) & v15;
        *(void *)(a3 + 8) = v19;
        swift_unknownObjectRetain();
        uint64_t v20 = sub_24A53852C(v19);
        sub_24A496BE8((uint64_t)v21);
        *(void *)(a3 + 16) = v20;
        return 1;
      }
      goto LABEL_12;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t TreeSet.intersection(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TreeSet._intersection<A>(_:)(a1, a2, a4, a5, a6, a7, MEMORY[0x263F8EE60] + 8, a8);
}

uint64_t TreeSet._intersection<A>(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a3;
  uint64_t v11 = _HashNode.intersection<A>(_:_:)(0, a1, a2, a3, a4, a6, (void *)(MEMORY[0x263F8EE60] + 8), a7, a8);
  if (v11) {
    return TreeSet.init(_new:)(v11, v12, a6, a8);
  }
  swift_retain();
  return v10;
}

uint64_t TreeSet.intersection<A>(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return TreeSet._intersection<A>(_:)(a1, a2, a4, a5, a6, a7, a8, a9);
}

uint64_t TreeSet.intersection<A>(_:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v89 = a2;
  unint64_t v90 = a3;
  uint64_t v84 = a1;
  uint64_t v86 = MEMORY[0x263F8EE60] + 8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void (***)(uint64_t, uint64_t))(TupleTypeMetadata2 - 8);
  uint64_t v75 = TupleTypeMetadata2;
  long long v76 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v74 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v73 = (uint64_t)&v66 - v17;
  uint64_t v83 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v87 = (char *)&v66 - v18;
  uint64_t v82 = sub_24A5BBD20();
  uint64_t v19 = *(void *)(v82 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v82);
  int v80 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v66 - v23;
  uint64_t v25 = *(void *)(a5 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v22);
  uint64_t v79 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v69 = (char *)&v66 - v29;
  uint64_t v30 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v28);
  long long v32 = (char *)&v66 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet() == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v84, a6);
    swift_dynamicCast();
    uint64_t v34 = TreeSet._intersection<A>(_:)(v91, v92, v89, (uint64_t)v90, a4, a5, v86, a7);
    swift_release();
  }
  else
  {
    uint64_t v72 = a6;
    uint64_t v91 = v89;
    uint64_t v92 = v90;
    uint64_t v78 = a4;
    uint64_t v93 = a4;
    swift_getWitnessTable();
    sub_24A5BBBA0();
    uint64_t v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    uint64_t v86 = v25 + 48;
    if (v85(v24, 1, a5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v82);
      return TreeSet.init()(a5, a7);
    }
    else
    {
      uint64_t v35 = v69;
      uint64_t v81 = *(void (**)(void))(v25 + 32);
      uint64_t v82 = v25 + 32;
      v81();
      uint64_t v37 = v83;
      uint64_t v36 = v84;
      uint64_t v38 = v72;
      uint64_t v39 = sub_24A5BB870();
      if (v39 != 2)
      {
        MEMORY[0x270FA5388](v39);
        *(&v66 - 6) = a5;
        *(&v66 - 5) = v38;
        *(&v66 - 4) = a7;
        *(&v66 - 3) = v37;
        *(&v66 - 2) = v36;
        uint64_t v34 = TreeSet.filter(_:)((uint64_t)sub_24A539BCC, (uint64_t)(&v66 - 8), v89, (uint64_t)v90, v78, a5, a7);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v35, a5);
        return v34;
      }
      uint64_t v67 = v25;
      if (qword_26979ACF0 != -1) {
        swift_once();
      }
      uint64_t v78 = MEMORY[0x263F8EE60] + 8;
      uint64_t v91 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x263F8EE60] + 8, a7);
      uint64_t v92 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v84, v38);
      swift_retain();
      sub_24A5BB840();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      char v42 = v80;
      uint64_t v77 = AssociatedConformanceWitness;
      sub_24A5BBEE0();
      int v43 = v85(v42, 1, a5);
      uint64_t v44 = v89;
      uint64_t v45 = (uint64_t)v79;
      if (v43 != 1)
      {
        uint64_t v47 = 0;
        uint64_t v71 = (uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16);
        uint64_t v70 = v76 + 1;
        long long v76 = (void (**)(uint64_t, uint64_t))(v67 + 8);
        do
        {
          ((void (*)(uint64_t, char *, uint64_t))v81)(v45, v42, a5);
          uint64_t v48 = sub_24A5B85E4();
          uint64_t v49 = _HashNode.lookup(_:_:_:)(0, v45, v48, v44, (uint64_t)v90, a5, v78, a7);
          if (v49)
          {
            uint64_t v51 = v50;
            uint64_t v52 = nullsub_1(v49 + 16, v49 + 32, a5, MEMORY[0x263F8EE60] + 8, a7);
            uint64_t v53 = v73;
            uint64_t v54 = v51;
            uint64_t v55 = v72;
            uint64_t v56 = v83;
            sub_24A5399C0(v52, v57, v54, a5, a7, v73);
            uint64_t v84 = v47;
            long long v58 = v74;
            uint64_t v59 = (*v71)(v74, v53, a5);
            MEMORY[0x270FA5388](v59);
            *(&v66 - 6) = a5;
            *(&v66 - 5) = v55;
            *(&v66 - 4) = a7;
            *(&v66 - 3) = v56;
            *(&v66 - 2) = (uint64_t)v58;
            uint64_t v60 = (void *)type metadata accessor for _HashNode();
            _HashNode.updateValue(_:forKey:_:_:)(0, v53, v48, sub_24A539BBC, (uint64_t)(&v66 - 8), v60);
            uint64_t v61 = v89;
            long long v62 = *v70;
            uint64_t v63 = v53;
            uint64_t v45 = (uint64_t)v79;
            char v42 = v80;
            uint64_t v64 = v75;
            (*v70)(v63, v75);
            (*v76)(v45, a5);
            uint64_t v65 = v58;
            uint64_t v44 = v61;
            uint64_t v47 = v84;
            v62((uint64_t)v65, v64);
          }
          else
          {
            (*v76)(v45, a5);
          }
          sub_24A5BBEE0();
        }
        while (v85(v42, 1, a5) != 1);
      }
      (*(void (**)(char *, uint64_t))(v68 + 8))(v87, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v69, a5);
      return TreeSet.init(_new:)(v91, (uint64_t)v92, a5, a7);
    }
  }
  return v34;
}

uint64_t sub_24A5399C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v7 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, a2, a4, MEMORY[0x263F8EE60] + 8, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 16))(a6, v7, TupleTypeMetadata2);
}

uint64_t sub_24A539A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v14 - v10, a2, a3);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v11, a3);
  return sub_24A544CAC((uint64_t)v9, a1, TupleTypeMetadata2);
}

uint64_t sub_24A539BBC(uint64_t a1)
{
  return sub_24A539A78(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t sub_24A539BCC()
{
  return sub_24A5BB920() & 1;
}

uint64_t OrderedDictionary<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](a1);
  uint64_t v38 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v37 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v48 = sub_24A5BBD20();
  uint64_t v45 = *(void (***)(char *, char *, uint64_t))(v48 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v48);
  uint64_t v47 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v34 - v23;
  _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v39 = a1;
  sub_24A5BC630();
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = 0;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v25 = type metadata accessor for OrderedDictionary.Iterator();
  v45 += 4;
  uint64_t v46 = v25;
  uint64_t v44 = TupleTypeMetadata2 - 8;
  uint64_t v35 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v34 + 32);
  uint64_t v26 = (void (**)(char *, uint64_t))(v34 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v28 = v40;
  uint64_t v27 = v41;
  uint64_t v29 = v38;
  while (1)
  {
    uint64_t v30 = v47;
    OrderedDictionary.Iterator.next()(v46, v47);
    (*v45)(v24, v30, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v24, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v31 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
    }
    long long v32 = v37;
    (*v36)(v37, v24, v28);
    (*v35)(v29, v31, v27);
    sub_24A5BB380();
    sub_24A5BB380();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v27);
    (*v26)(v32, v28);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t OrderedDictionary<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_24A5BC610();
  OrderedDictionary<>.hash(into:)((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return sub_24A5BC690();
}

uint64_t sub_24A53A044(uint64_t *a1, uint64_t a2)
{
  return OrderedDictionary<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(void *)(a2 - 8));
}

uint64_t sub_24A53A060(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return OrderedDictionary<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(void *)(a3 - 8));
}

uint64_t sub_24A53A07C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  sub_24A5BC610();
  OrderedDictionary<>.hash(into:)((uint64_t)v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return sub_24A5BC690();
}

uint64_t sub_24A53A0DC()
{
  return swift_getWitnessTable();
}

uint64_t TreeSet.subtract(_:)(uint64_t a1, void (*a2)(uint64_t, unsigned char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = TreeSet.subtracting(_:)(a1, a2, a3, *v4, v4[1], v4[2], *(void *)(a4 + 16), *(void *)(a4 + 24));
  *uint64_t v4 = result;
  v4[1] = v6;
  unint64_t v4[2] = v7;
  return result;
}

uint64_t TreeSet.subtract<A>(_:)(uint64_t a1, void (*a2)(uint64_t, unsigned char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = TreeSet.subtracting<A>(_:)(a1, a2, a3, *v5, v5[1], v5[2], *(void *)(a4 + 16), a5, *(void *)(a4 + 24));
  *uint64_t v5 = result;
  v5[1] = v7;
  _OWORD v5[2] = v8;
  return result;
}

uint64_t TreeSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = TreeSet.subtracting<A>(_:)(a1, *(void *)v4, *(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 8), *(void *)(v4 + 16), *(void *)(a2 + 16), a3, *(void *)(a2 + 24), a4);
  *(void *)uint64_t v4 = result;
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v7;
  return result;
}

uint64_t OrderedSet.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_24A53A724(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

{
  uint64_t v5;

  uint64_t v5 = sub_24A53A724(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

uint64_t OrderedSet.intersection<A>(_:)()
{
  uint64_t v0 = sub_24A53A8E8();
  swift_release();
  swift_release();
  return v0;
}

Swift::Int sub_24A53A2C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, Swift::Int *a9@<X8>)
{
  uint64_t v47 = a8;
  uint64_t v50 = a7;
  uint64_t v51 = a3;
  uint64_t v54 = a4;
  uint64_t v49 = a2;
  uint64_t v42 = a9;
  uint64_t v43 = a1;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_24A5BBD20();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v41 - v16;
  uint64_t v48 = *(char **)(a6 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v23 = (void (*)(char *, uint64_t, uint64_t))*((void *)v48 + 2);
  uint64_t v46 = a6;
  v23(v19, v49, a6);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = v22;
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v47 = AssociatedConformanceWitness;
  sub_24A5BBEE0();
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v46 = v11 + 48;
  if (v45(v17, 1, a5) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v41 + 8))(v48, v49);
    uint64_t v25 = *(int8x8_t **)v43;
    uint64_t v26 = *(void *)(v43 + 8);
    Swift::Int v27 = sub_24A48AB90();
    uint64_t v28 = v51;
    swift_retain();
    uint64_t v29 = v54;
    swift_retain();
    uint64_t v40 = v50;
    Swift::Int result = OrderedSet._extractSubset(using:count:extraCapacity:)(v25, v26, 0, 1, v27, v28, v29, a5);
    uint64_t v31 = v42;
    *uint64_t v42 = result;
    v31[1] = v32;
    return result;
  }
  uint64_t v34 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v33 = v11 + 32;
  uint64_t v44 = v34;
  uint64_t v35 = (void (**)(char *, uint64_t))(v33 - 24);
  while (1)
  {
    uint64_t v36 = v33;
    uint64_t v37 = v44(v13, v17, a5);
    MEMORY[0x270FA5388](v37);
    uint64_t v38 = v50;
    *(&v41 - 6) = a5;
    *(&v41 - 5) = (uint64_t)v38;
    uint64_t v39 = v54;
    *(&v41 - 4) = v51;
    *(&v41 - 3) = v39;
    uint64_t v40 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979ACE8);
    Swift::Int result = sub_24A5BC1A0();
    if ((v53 & 1) == 0) {
      break;
    }
LABEL_4:
    (*v35)(v13, a5);
    sub_24A5BBEE0();
    uint64_t v33 = v36;
    if (v45(v17, 1, a5) == 1) {
      goto LABEL_2;
    }
  }
  if ((v52 & 0x8000000000000000) == 0)
  {
    *(void *)(*(void *)v43 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A53A724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[2] = a1;
  void v19[3] = a2;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)v19 - v12;
  uint64_t result = OrderedSet.init()();
  uint64_t v20 = result;
  uint64_t v21 = v15;
  uint64_t v16 = *(void *)(a4 + 16);
  if (v16)
  {
    v19[1] = a3;
    swift_retain();
    swift_retain();
    for (uint64_t i = 0; i != v16; ++i)
    {
      sub_24A5BC260();
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, a5);
      if (OrderedSet.contains(_:)())
      {
        uint64_t v18 = type metadata accessor for OrderedSet();
        OrderedSet._appendNew(_:)((uint64_t)v11, v18);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a5);
    }
    swift_release();
    swift_release();
    return v20;
  }
  return result;
}

uint64_t sub_24A53A8E8()
{
  uint64_t v0 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v0 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v1 = (unint64_t)(v0 + 63) >> 6;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    MEMORY[0x270FA5388](v0);
    type metadata accessor for OrderedSet();
    sub_24A580E98(v1, (void (*)(char **))sub_24A4B1054);
  }
  __break(1u);
  uint64_t result = sub_24A4B1074(v3, v4);
  __break(1u);
  return result;
}

Swift::Int sub_24A53AA0C@<X0>(uint64_t a1@<X0>, Swift::Int *a2@<X8>)
{
  return sub_24A53A2C0(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t _HashTreeIterator.init(root:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&long long v17 = a1;
  *((void *)&v17 + 1) = a1;
  LODWORD(v18) = 0;
  swift_beginAccess();
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  __int32 v7 = v6.i32[0];
  if (v5 == v4) {
    __int32 v7 = *(_DWORD *)(a1 + 16);
  }
  DWORD1(v18) = v7;
  *((void *)&v18 + 1) = 0;
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = a1;
  *(void *)&long long v20 = a1;
  *((void *)&v20 + 1) = a1;
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a1;
  *(void *)&long long v22 = a1;
  *((void *)&v22 + 1) = a1;
  *(void *)&long long v23 = a1;
  *((void *)&v23 + 1) = a1;
  *(void *)uint64_t v24 = a1;
  *(void *)&v24[8] = a1;
  *(void *)&v24[16] = a1;
  *(_WORD *)&v24[24] = 0;
  v24[26] = 0;
  if (!v5)
  {
    if (v4)
    {
      sub_24A53B098(0);
      if (!DWORD1(v18))
      {
        unsigned __int8 v12 = v24[24];
        char v13 = v24[25];
        uint64_t v14 = *((void *)&v17 + 1);
        do
        {
          *((void *)&v19 + v12) = v14;
          v13 += 5;
          uint64_t v14 = *(void *)(v14 + 32);
          swift_beginAccess();
          unsigned __int32 v15 = *(_DWORD *)(v14 + 16);
          uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v15 != *(_DWORD *)(v14 + 20)) {
            unsigned __int32 v15 = v16.i32[0];
          }
          ++v12;
        }
        while (!v15);
        LODWORD(v18) = 0;
        DWORD1(v18) = v15;
        *((void *)&v17 + 1) = v14;
        v24[25] = v13;
        v24[24] = v12;
      }
    }
    else
    {
      v24[26] = 1;
    }
  }
  long long v8 = *(_OWORD *)v24;
  a2[6] = v23;
  a2[7] = v8;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)&v24[11];
  long long v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  long long v10 = v22;
  a2[4] = v21;
  a2[5] = v10;
  *a2 = v17;
  a2[1] = v18;
  return swift_retain();
}

uint64_t _HashTreeIterator.next()()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  if (v1 >= *(_DWORD *)(v0 + 20)) {
    return _HashTreeIterator._next()();
  }
  uint64_t result = *(void *)(v0 + 8);
  *(_DWORD *)(v0 + 16) = v1 + 1;
  return result;
}

uint64_t _HashTreeIterator._Opaque.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = result;
  *(void *)(a2 + 32) = result;
  *(void *)(a2 + 40) = result;
  *(void *)(a2 + 48) = result;
  *(void *)(a2 + 56) = result;
  *(void *)(a2 + 64) = result;
  *(void *)(a2 + 72) = result;
  *(void *)(a2 + 80) = result;
  *(void *)(a2 + 88) = result;
  *(void *)(a2 + 96) = result;
  *(void *)(a2 + 104) = result;
  *(_WORD *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 114) = 0;
  return result;
}

uint64_t _HashTreeIterator.root.getter()
{
  return swift_retain();
}

uint64_t _HashTreeIterator.node.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _HashTreeIterator.node.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTreeIterator.node.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashTreeIterator.slot.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t _HashTreeIterator.slot.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_HashTreeIterator.slot.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashTreeIterator.endSlot.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t _HashTreeIterator.endSlot.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*_HashTreeIterator.endSlot.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

__n128 _HashTreeIterator._o.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 24) = v2;
  long long v3 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 56) = v3;
  __n128 result = *(__n128 *)(v1 + 96);
  long long v5 = *(_OWORD *)(v1 + 112);
  *(__n128 *)(a1 + 72) = result;
  uint64_t v6 = *(void *)(v1 + 128);
  __int16 v7 = *(_WORD *)(v1 + 136);
  char v8 = *(unsigned char *)(v1 + 138);
  *(void *)a1 = *(void *)(v1 + 24);
  *(_OWORD *)(a1 + 88) = v5;
  *(void *)(a1 + 104) = v6;
  *(_WORD *)(a1 + 112) = v7;
  *(unsigned char *)(a1 + 114) = v8;
  return result;
}

__n128 _HashTreeIterator._o.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 88) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 104) = v2;
  *(_OWORD *)(v1 + 120) = *(_OWORD *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 56) = result;
  *(_DWORD *)(v1 + 135) = *(_DWORD *)(a1 + 111);
  *(_OWORD *)(v1 + 72) = v5;
  return result;
}

uint64_t (*_HashTreeIterator._o.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashTreeIterator._next()()
{
  if (*(unsigned char *)(v0 + 138)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v0 + 8);
  swift_beginAccess();
  int v3 = *(_DWORD *)(v2 + 20);
  int v4 = *(unsigned __int8 *)(v0 + 137);
  if (*(_DWORD *)(v2 + 16) != v3 && v3 != 0)
  {
    uint64_t v20 = *(void *)(v0 + 24);
    uint64_t v21 = *(unsigned __int8 *)(v0 + 136);
    *(void *)(v0 + 32 + 8 * v21) = v2;
    unsigned __int8 v22 = v21 + 1;
    *(unsigned char *)(v0 + 136) = v21 + 1;
    char v23 = v4 + 5;
    *(unsigned char *)(v0 + 137) = v4 + 5;
    uint64_t v1 = *(void *)(v2 + 32);
    *(void *)(v0 + 8) = v1;
    *(_DWORD *)(v0 + 16) = 0;
    swift_beginAccess();
    unsigned __int32 v24 = *(_DWORD *)(v1 + 16);
    uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v24 != *(_DWORD *)(v1 + 20)) {
      unsigned __int32 v24 = v25.i32[0];
    }
    *(_DWORD *)(v0 + 20) = v24;
    if (!v24)
    {
      do
      {
        *(void *)(v0 + 32 + 8 * v22) = v1;
        v23 += 5;
        uint64_t v1 = *(void *)(v1 + 32);
        swift_beginAccess();
        unsigned __int32 v26 = *(_DWORD *)(v1 + 16);
        uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
        v27.i16[0] = vaddlv_u8(v27);
        if (v26 != *(_DWORD *)(v1 + 20)) {
          unsigned __int32 v26 = v27.i32[0];
        }
        ++v22;
      }
      while (!v26);
      *(_DWORD *)(v0 + 20) = v26;
      *(void *)(v0 + 8) = v1;
      *(unsigned char *)(v0 + 137) = v23;
      *(unsigned char *)(v0 + 136) = v22;
      *(void *)(v0 + 24) = v20;
    }
LABEL_36:
    *(_DWORD *)(v0 + 16) = 1;
    return v1;
  }
  if (*(unsigned char *)(v0 + 137))
  {
    uint64_t v6 = v0 + 32;
    unsigned __int8 v7 = *(unsigned char *)(v0 + 136);
    while (1)
    {
      char v35 = v4;
      int v8 = v4 - 5;
      unint64_t v9 = *(void *)(v0 + 24);
      char v10 = (v4 - 5) & 0x3F;
      uint64_t v11 = v9;
      if ((v4 - 5) <= 0x3Fu)
      {
        uint64_t v11 = ((-31 << v10) - 1) & v9;
        *(void *)(v0 + 24) = v11;
      }
      char v12 = v7 - 1;
      uint64_t v13 = (v7 - 1);
      uint64_t v14 = v6;
      uint64_t v2 = *(void *)(v6 + 8 * v13);
      uint64_t v15 = ((v9 >> v8) & 0x1F) + 1;
      swift_beginAccess();
      uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v2 + 20));
      v16.i16[0] = vaddlv_u8(v16);
      if (*(_DWORD *)(v2 + 16) != *(_DWORD *)(v2 + 20) && v15 < v16.i32[0]) {
        break;
      }
      int v4 = v8;
      --v7;
      uint64_t v6 = v14;
      if (!(_BYTE)v8)
      {
        *(unsigned char *)(v0 + 137) = 0;
        *(void *)(v0 + 8) = v2;
        *(unsigned char *)(v0 + 136) = v12;
        goto LABEL_19;
      }
    }
    *(void *)(v0 + 8) = v2;
    uint64_t v28 = v11 | (v15 << v10);
    *(void *)(v0 + 24) = v28;
    *(void *)(v14 + 8 * v13) = v2;
    *(unsigned char *)(v0 + 136) = v7;
    char v29 = v35;
    *(unsigned char *)(v0 + 137) = v35;
    uint64_t v1 = *(void *)(v2 + 16 * v15 + 32);
    *(void *)(v0 + 8) = v1;
    *(_DWORD *)(v0 + 16) = 0;
    swift_beginAccess();
    unsigned __int32 v30 = *(_DWORD *)(v1 + 16);
    uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v30 != *(_DWORD *)(v1 + 20)) {
      unsigned __int32 v30 = v31.i32[0];
    }
    *(_DWORD *)(v0 + 20) = v30;
    if (!v30)
    {
      do
      {
        *(void *)(v14 + 8 * v7) = v1;
        v29 += 5;
        uint64_t v1 = *(void *)(v1 + 32);
        swift_beginAccess();
        unsigned __int32 v32 = *(_DWORD *)(v1 + 16);
        uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v33.i16[0] = vaddlv_u8(v33);
        if (v32 != *(_DWORD *)(v1 + 20)) {
          unsigned __int32 v32 = v33.i32[0];
        }
        ++v7;
      }
      while (!v32);
      *(_DWORD *)(v0 + 20) = v32;
      *(void *)(v0 + 8) = v1;
      *(unsigned char *)(v0 + 137) = v29;
      *(unsigned char *)(v0 + 136) = v7;
      *(void *)(v0 + 24) = v28;
    }
    goto LABEL_36;
  }
LABEL_19:
  swift_beginAccess();
  uint64_t v1 = 0;
  unsigned __int32 v18 = *(_DWORD *)(v2 + 16);
  uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v18 != *(_DWORD *)(v2 + 20)) {
    unsigned __int32 v18 = v19.i32[0];
  }
  *(_DWORD *)(v0 + 16) = v18;
  *(_DWORD *)(v0 + 20) = v18;
  *(unsigned char *)(v0 + 138) = 1;
  return v1;
}

uint64_t sub_24A53B04C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *(_DWORD *)(v1 + 16);
  if (v3 >= *(_DWORD *)(v1 + 20))
  {
    uint64_t result = _HashTreeIterator._next()();
    unsigned int v3 = 0;
  }
  else
  {
    uint64_t result = *(void *)(v1 + 8);
    *(_DWORD *)(v1 + 16) = v3 + 1;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_24A53B098(unsigned int a1)
{
  char v2 = *(unsigned char *)(v1 + 137);
  *(void *)(v1 + 24) |= (unint64_t)a1 << v2;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 136);
  *(void *)(v1 + 8 * v4 + 32) = v3;
  *(unsigned char *)(v1 + 136) = v4 + 1;
  *(unsigned char *)(v1 + 137) = v2 + 5;
  uint64_t v5 = *(void *)(v3 + 16 * a1 + 32);
  *(void *)(v1 + 8) = v5;
  *(_DWORD *)(v1 + 16) = 0;
  uint64_t result = swift_beginAccess();
  unsigned __int32 v7 = *(_DWORD *)(v5 + 16);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v7 != *(_DWORD *)(v5 + 20)) {
    unsigned __int32 v7 = v8.i32[0];
  }
  *(_DWORD *)(v1 + 20) = v7;
  return result;
}

ValueMetadata *type metadata accessor for _HashTreeIterator()
{
  return &type metadata for _HashTreeIterator;
}

__n128 __swift_memcpy115_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_DWORD *)(a1 + 111) = *(_DWORD *)((char *)a2 + 111);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _HashTreeIterator._Opaque(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 115)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTreeIterator._Opaque(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 114) = 0;
    *(_WORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 115) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 115) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTreeIterator._Opaque()
{
  return &type metadata for _HashTreeIterator._Opaque;
}

__n128 TreeDictionary.makeIterator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TreeDictionary.Iterator.init(_root:)(a1, v7);
  long long v3 = v8[0];
  *(_OWORD *)(a2 + 96) = v7[6];
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 123) = *(_OWORD *)((char *)v8 + 11);
  long long v4 = v7[3];
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 48) = v4;
  long long v5 = v7[5];
  *(_OWORD *)(a2 + 64) = v7[4];
  *(_OWORD *)(a2 + 80) = v5;
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a2 = v7[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TreeDictionary.Iterator.next()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(unsigned int *)(v2 + 16);
  if (v5 < *(_DWORD *)(v2 + 20))
  {
    uint64_t v6 = *(void *)(v2 + 8);
    *(_DWORD *)(v2 + 16) = v5 + 1;
LABEL_5:
    uint64_t v8 = a1[2];
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    uint64_t v11 = nullsub_1(v6 + 16, v6 + 32, v8, v9, v10);
    sub_24A4B7B04(v11, v12, v5, v8, v9, v10, a2);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
    uint64_t v15 = TupleTypeMetadata2;
    uint64_t v16 = a2;
    uint64_t v17 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = _HashTreeIterator._next()();
  if (v6)
  {
    uint64_t v5 = v7;
    goto LABEL_5;
  }
  uint64_t v18 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v15 = v18;
  uint64_t v16 = a2;
  uint64_t v17 = 1;
LABEL_7:
  return v14(v16, v17, 1, v15);
}

uint64_t TreeDictionary.Iterator._it.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A4DC5CC(v1, a1);
}

__n128 TreeDictionary.Iterator._it.setter(uint64_t a1)
{
  long long v3 = v1[7];
  v11[6] = v1[6];
  v12[0] = v3;
  *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v1 + 123);
  long long v4 = v1[3];
  void v11[2] = v1[2];
  v11[3] = v4;
  long long v5 = v1[5];
  void v11[4] = v1[4];
  v11[5] = v5;
  long long v6 = v1[1];
  v11[0] = *v1;
  v11[1] = v6;
  sub_24A4A2BC4((uint64_t)v11);
  long long v7 = *(_OWORD *)(a1 + 112);
  v1[6] = *(_OWORD *)(a1 + 96);
  v1[7] = v7;
  *(_OWORD *)((char *)v1 + 123) = *(_OWORD *)(a1 + 123);
  long long v8 = *(_OWORD *)(a1 + 48);
  void v1[2] = *(_OWORD *)(a1 + 32);
  v1[3] = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  v1[4] = *(_OWORD *)(a1 + 64);
  v1[5] = v9;
  __n128 result = *(__n128 *)(a1 + 16);
  *uint64_t v1 = *(_OWORD *)a1;
  v1[1] = result;
  return result;
}

uint64_t (*TreeDictionary.Iterator._it.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

__n128 TreeDictionary.Iterator.init(_root:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&long long v17 = a1;
  *((void *)&v17 + 1) = a1;
  v18.n128_u32[0] = 0;
  swift_beginAccess();
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  __int32 v7 = v6.i32[0];
  if (v5 == v4) {
    __int32 v7 = *(_DWORD *)(a1 + 16);
  }
  v18.n128_u32[1] = v7;
  v18.n128_u64[1] = 0;
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = a1;
  *(void *)&long long v20 = a1;
  *((void *)&v20 + 1) = a1;
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a1;
  *(void *)&long long v22 = a1;
  *((void *)&v22 + 1) = a1;
  *(void *)&long long v23 = a1;
  *((void *)&v23 + 1) = a1;
  *(void *)unsigned __int32 v24 = a1;
  *(void *)&v24[8] = a1;
  *(void *)&v24[16] = a1;
  *(_WORD *)&v24[24] = 0;
  v24[26] = 0;
  if (!v5)
  {
    if (v4)
    {
      sub_24A53B098(0);
      if (!v18.n128_u32[1])
      {
        unsigned __int8 v12 = v24[24];
        char v13 = v24[25];
        uint64_t v14 = *((void *)&v17 + 1);
        do
        {
          *((void *)&v19 + v12) = v14;
          v13 += 5;
          uint64_t v14 = *(void *)(v14 + 32);
          swift_beginAccess();
          unsigned __int32 v15 = *(_DWORD *)(v14 + 16);
          uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v15 != *(_DWORD *)(v14 + 20)) {
            unsigned __int32 v15 = v16.i32[0];
          }
          ++v12;
        }
        while (!v15);
        v18.n128_u32[0] = 0;
        v18.n128_u32[1] = v15;
        *((void *)&v17 + 1) = v14;
        v24[25] = v13;
        v24[24] = v12;
      }
    }
    else
    {
      v24[26] = 1;
    }
  }
  long long v8 = *(_OWORD *)v24;
  a2[6] = v23;
  a2[7] = v8;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)&v24[11];
  long long v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  long long v10 = v22;
  a2[4] = v21;
  a2[5] = v10;
  __n128 result = v18;
  *a2 = v17;
  a2[1] = v18;
  return result;
}

uint64_t TreeDictionary.underestimatedCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 sub_24A53B5DC@<Q0>(uint64_t a1@<X8>)
{
  TreeDictionary.makeIterator()(*v1, (uint64_t)v7);
  long long v3 = v8[0];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 123) = *(_OWORD *)((char *)v8 + 11);
  long long v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v5;
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a1 = v7[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24A53B644(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_24A53B69C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TreeDictionary.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static TreeSet._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

Swift::Void __swiftcall TreeSet._dump(iterationOrder:)(Swift::Bool iterationOrder)
{
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(iterationOrder, 0x7FFFFFFFFFFFFFFFLL, v1, v2, 0);
}

uint64_t static TreeSet._maxDepth.getter()
{
  return 13;
}

double TreeSet._statistics.getter@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_24A5A973C(0, &v12, a1, a2, a3, MEMORY[0x263F8EE60] + 8, a4);
  double result = *(double *)&v12;
  long long v7 = v13;
  long long v8 = v14;
  long long v9 = v15;
  long long v10 = v16;
  long long v11 = v17;
  *a5 = v12;
  a5[1] = v7;
  a5[2] = v8;
  a5[3] = v9;
  a5[4] = v10;
  a5[5] = v11;
  return result;
}

BOOL BitSet.isDisjoint(with:)(void *a1, void *a2)
{
  if (a1[2] >= a2[2]) {
    uint64_t v2 = a2[2];
  }
  else {
    uint64_t v2 = a1[2];
  }
  if (!v2) {
    return 1;
  }
  if ((a1[4] & a2[4]) != 0) {
    return 0;
  }
  long long v4 = a2 + 5;
  long long v5 = a1 + 5;
  uint64_t v6 = v2 - 1;
  do
  {
    BOOL result = v6 == 0;
    if (!v6) {
      break;
    }
    uint64_t v8 = *v4++;
    uint64_t v7 = v8;
    uint64_t v9 = *v5++;
    --v6;
  }
  while ((v9 & v7) == 0);
  return result;
}

BOOL BitSet.isDisjoint(with:)(void *a1, uint64_t a2, void *a3)
{
  return BitSet.isDisjoint(with:)(a1, a3);
}

BOOL BitSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 <= 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = a1 & ~(a1 >> 63);
  }
  return _UnsafeBitSet.isDisjoint(with:)(v3, a2 & ~(a2 >> 63), (void *)(a3 + 32), *(void *)(a3 + 16));
}

BOOL BitSet.isDisjoint<A>(with:)(uint64_t a1, void *a2, ValueMetadata *a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v10 = (char *)&v23 - v9;
  uint64_t Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  uint64_t v12 = MEMORY[0x270FA5388](v8);
  long long v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v16 = (char *)&v23 - v15;
  if (a3 == &type metadata for BitSet)
  {
    Description[2]((char *)&v23 - v15, a1, &type metadata for BitSet);
LABEL_8:
    swift_dynamicCast();
    BOOL v19 = BitSet.isDisjoint(with:)((void *)v23, a2);
    swift_bridgeObjectRelease();
    return v19;
  }
  if (a3 == &type metadata for BitSet.Counted)
  {
    Description[2]((char *)&v23 - v15, a1, &type metadata for BitSet.Counted);
    goto LABEL_8;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0);
  __n128 v18 = Description[2];
  if ((ValueMetadata *)v17 == a3)
  {
    v18(v14, a1, a3);
    swift_dynamicCast();
    if (v24 <= 0) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v23 & ~(v23 >> 63);
    }
    return _UnsafeBitSet.isDisjoint(with:)(v21, v24 & ~(v24 >> 63), a2 + 4, a2[2]);
  }
  else
  {
    v18(v16, a1, a3);
    sub_24A5BB840();
    swift_getAssociatedConformanceWitness();
    sub_24A5BBEE0();
    if (v24)
    {
LABEL_5:
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
      return 1;
    }
    else
    {
      unint64_t v22 = v23;
      while ((v22 & 0x8000000000000000) != 0 || v22 >> 6 >= a2[2] || ((a2[(v22 >> 6) + 4] >> v22) & 1) == 0)
      {
        sub_24A5BBEE0();
        unint64_t v22 = v23;
        if (v24) {
          goto LABEL_5;
        }
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
      return 0;
    }
  }
}

uint64_t sub_24A53BB94(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v12 = a6 >> 40;
  uint64_t v13 = sub_24A5BC780();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v47 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  unint64_t v48 = a1;
  unint64_t v15 = sub_24A5BB830();
  unint64_t v17 = v16;
  unint64_t v19 = v18;
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  unint64_t v22 = sub_24A4913AC(v15, v17, v19, v21);
  swift_bridgeObjectRelease();
  int64_t v23 = sub_24A491F14(v22, a2, a3, 0, 0, 0);
  if ((a5 & 0x1000000000000000) != 0) {
    uint64_t v24 = (a4 >> 59) & 1;
  }
  else {
    uint64_t v24 = 1;
  }
  uint64_t v25 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x1000000000000000) == 0)
  {
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v26 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v26 = a4 & 0xFFFFFFFFFFFFLL;
    }
    if (v26 < BYTE4(v6))
    {
      __break(1u);
    }
    else
    {
      int64_t v27 = v6 - (unint64_t)v12;
      if (v27 >= 0)
      {
        if (v26 >= v27)
        {
          a2 = ((unint64_t)BYTE4(v6) << 16) | 4;
          unint64_t v28 = (v27 << 16) | 4;
          goto LABEL_12;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  a2 = MEMORY[0x24C5C6A60](15, BYTE4(v6), a4, a5);
  unint64_t v28 = MEMORY[0x24C5C6A60](15, v6 - (unint64_t)v12, a4, a5);
LABEL_12:
  if (v48 >> 14 <= a2 >> 14)
  {
    LODWORD(v6) = 0;
    LOBYTE(a5) = v23;
    LOBYTE(v29) = v23;
    return ((unint64_t)a5 << 40) | ((unint64_t)v29 << 32) | (v6 << 24) | v23 & 0xFFFFFF;
  }
  unint64_t v29 = HIDWORD(v6);
  if (v48 >> 14 > v28 >> 14)
  {
    if (((v6 - v23) & 0xFFFFFF00) == 0)
    {
      a5 = v12 - (v6 - v23);
      if ((a5 & 0xFFFFFF00) == 0)
      {
        v6 >>= 24;
        return ((unint64_t)a5 << 40) | ((unint64_t)v29 << 32) | (v6 << 24) | v23 & 0xFFFFFF;
      }
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  char v30 = v24;
  unint64_t v44 = HIDWORD(v6);
  unint64_t v31 = sub_24A5BB830();
  unint64_t v33 = v32;
  unint64_t v35 = v34;
  unint64_t v37 = v36;
  sub_24A5BC770();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_24A58B060(v31, v33, v35, v37);
  a2 = v38;
  uint64_t v24 = v39;
  uint64_t result = swift_bridgeObjectRelease_n();
  if ((v24 & 1) == 0)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6 <= 0xFF)
      {
        uint64_t v24 = 4 << v30;
        if ((a2 & 0xC) != 4 << v30) {
          goto LABEL_22;
        }
        goto LABEL_33;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      uint64_t result = sub_24A4DFD84(a2, a4, a5);
      a2 = result;
LABEL_22:
      unint64_t v41 = v48;
      if ((v48 & 0xC) == v24)
      {
        uint64_t result = sub_24A4DFD84(v48, a4, a5);
        unint64_t v41 = result;
        if ((a5 & 0x1000000000000000) == 0) {
          goto LABEL_24;
        }
      }
      else if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_24:
        a5 = (v41 >> 16) - (a2 >> 16);
        goto LABEL_40;
      }
      unint64_t v42 = a4 & 0xFFFFFFFFFFFFLL;
      if ((a5 & 0x2000000000000000) != 0) {
        unint64_t v42 = v25;
      }
      if (v42 < a2 >> 16)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      if (v42 < v41 >> 16)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      a5 = sub_24A5BB750();
LABEL_40:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v46);
      if ((a5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (a5 <= 0xFF)
      {
        LOBYTE(v29) = v44;
        return ((unint64_t)a5 << 40) | ((unint64_t)v29 << 32) | (v6 << 24) | v23 & 0xFFFFFF;
      }
      __break(1u);
      goto LABEL_46;
    }
    goto LABEL_30;
  }
LABEL_48:
  __break(1u);
  return result;
}

int64_t sub_24A53BF38(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v60 = a6 >> 40;
  uint64_t v12 = sub_24A5BC780();
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v59 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_24A494C00(a1, a4, a5);
  unint64_t v16 = v15;
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  unint64_t v21 = sub_24A4913AC(v14, v16, v18, v20);
  swift_bridgeObjectRelease();
  int64_t result = sub_24A491F14(v21, a2, a3, 0, 0, 0);
  int64_t v23 = result;
  uint64_t v24 = BYTE4(v6);
  char v25 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  unint64_t v26 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x1000000000000000) == 0)
  {
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v27 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v27 = a4 & 0xFFFFFFFFFFFFLL;
    }
    if (v27 < BYTE4(v6))
    {
      __break(1u);
    }
    else
    {
      unsigned __int8 v28 = v60;
      int64_t v29 = v6 - (unint64_t)v60;
      if (v29 >= 0)
      {
        if (v27 >= v29)
        {
          unint64_t v16 = ((unint64_t)BYTE4(v6) << 16) | 4;
          a2 = (v29 << 16) | 4;
          goto LABEL_12;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  int64_t v50 = result;
  unint64_t v16 = MEMORY[0x24C5C6A60](15, BYTE4(v6), a4, a5);
  unsigned __int8 v51 = v60;
  int64_t result = MEMORY[0x24C5C6A60](15, v6 - (unint64_t)v60, a4, a5);
  int64_t v23 = v50;
  unsigned __int8 v28 = v51;
  unint64_t v26 = HIBYTE(a5) & 0xF;
  a2 = result;
LABEL_12:
  unint64_t v30 = a1 >> 14;
  if (a1 >> 14 > a2 >> 14)
  {
    LODWORD(v26) = 0;
    unsigned __int8 v28 = v23;
    LOBYTE(a5) = v23;
    return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | (v26 << 24);
  }
  uint64_t v31 = 4 << v25;
  if (v30 <= v16 >> 14)
  {
    if ((a1 & 0xC) != v31)
    {
      if ((a5 & 0x1000000000000000) != 0)
      {
LABEL_37:
        unint64_t v52 = a4 & 0xFFFFFFFFFFFFLL;
        if ((a5 & 0x2000000000000000) != 0) {
          unint64_t v52 = v26;
        }
        if (v52 < a1 >> 16)
        {
          __break(1u);
          goto LABEL_73;
        }
        uint64_t v31 = v23;
        uint64_t v48 = sub_24A5BB750();
        unsigned __int8 v28 = v60;
        LODWORD(v23) = v31;
LABEL_41:
        a5 = v24 - v48;
        if (__OFSUB__(v24, v48))
        {
          __break(1u);
        }
        else if ((a5 & 0x8000000000000000) == 0)
        {
          if (a5 <= 0xFF)
          {
            unint64_t v26 = v6 >> 24;
            return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | (v26 << 24);
          }
          goto LABEL_47;
        }
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_26:
      uint64_t v48 = a1 >> 16;
      goto LABEL_41;
    }
LABEL_36:
    uint64_t v31 = v23;
    int64_t result = sub_24A4DFD84(a1, a4, a5);
    int64_t v23 = v31;
    unsigned __int8 v28 = v60;
    a1 = result;
    if ((a5 & 0x1000000000000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_26;
  }
  unint64_t v55 = v26;
  int64_t v56 = v23;
  uint64_t v32 = sub_24A5BB830();
  unint64_t v26 = v33;
  unint64_t v6 = MEMORY[0x24C5C7180](a1, v32, v34, v35, v33);
  swift_bridgeObjectRelease();
  if (v30 < v6 >> 14)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v36 = sub_24A5BB830();
  unint64_t v16 = (unint64_t)v59;
  sub_24A48F534(v36, v37, v38, v39);
  unint64_t v40 = sub_24A5BB830();
  unint64_t v44 = sub_24A58B060(v40, v41, v42, v43);
  unint64_t v6 = v45;
  char v47 = v46;
  int64_t result = swift_bridgeObjectRelease();
  if (v47)
  {
    if ((a1 & 0xC) != v31) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
  unint64_t v26 = v44 + 1;
  if (__OFADD__(v44, 1)) {
    goto LABEL_48;
  }
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v26 <= 0xFF)
  {
    if ((a1 & 0xC) != v31) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  int64_t result = sub_24A4DFD84(a1, a4, a5);
  a1 = result;
LABEL_21:
  if ((v6 & 0xC) == v31)
  {
    int64_t result = sub_24A4DFD84(v6, a4, a5);
    unint64_t v6 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_23:
    a5 = (v6 >> 16) - (a1 >> 16);
    goto LABEL_58;
  }
  unint64_t v53 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v53 = v55;
  }
  if (v53 < a1 >> 16) {
    goto LABEL_76;
  }
  if (v53 < v6 >> 16)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  a5 = sub_24A5BB750();
LABEL_58:
  int64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v57 + 8))(v16, v58);
  if ((a5 & 0x8000000000000000) != 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  unsigned __int8 v28 = v60;
  LODWORD(v23) = v56;
  if (a5 <= 0xFF) {
    return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | (v26 << 24);
  }
  __break(1u);
LABEL_61:
  int64_t result = sub_24A4DFD84(a1, a4, a5);
  a1 = result;
LABEL_28:
  unint64_t v49 = v55;
  if ((a2 & 0xC) == v31)
  {
    int64_t result = sub_24A4DFD84(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_30;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_30:
    a5 = (a2 >> 16) - (a1 >> 16);
    goto LABEL_68;
  }
  unint64_t v54 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v54 = v49;
  }
  if (v54 < a1 >> 16) {
    goto LABEL_78;
  }
  if (v54 >= a2 >> 16)
  {
    a5 = sub_24A5BB750();
LABEL_68:
    int64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v57 + 8))(v16, v58);
    if ((a5 & 0x8000000000000000) == 0)
    {
      unsigned __int8 v28 = v60;
      LODWORD(v23) = v56;
      if (a5 <= 0xFF)
      {
        LODWORD(v26) = 1;
        return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | (v26 << 24);
      }
      goto LABEL_75;
    }
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
LABEL_79:
  __break(1u);
  return result;
}

uint64_t BitSet.subtracting(_:)(uint64_t result, int8x16_t *a2)
{
  uint64_t v3 = (int8x16_t *)result;
  unint64_t v4 = a2[1].u64[0];
  unint64_t v5 = *(void *)(result + 16);
  if (v5 <= v4) {
    uint64_t v6 = a2[1].i64[0];
  }
  else {
    uint64_t v6 = *(void *)(result + 16);
  }
  if (v6)
  {
    int64_t result = sub_24A5BB990();
    uint64_t v7 = result;
    *(void *)(result + 16) = v6;
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  if (v5 >= v4) {
    unint64_t v8 = v4;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 < 8)
    {
      uint64_t v9 = 0;
LABEL_13:
      unint64_t v10 = v8 - v9;
      uint64_t v11 = 8 * v9 + 32;
      uint64_t v12 = (uint64_t *)(v7 + v11);
      uint64_t v13 = (uint64_t *)((char *)v3->i64 + v11);
      unint64_t v14 = (uint64_t *)((char *)a2->i64 + v11);
      do
      {
        uint64_t v16 = *v14++;
        uint64_t v15 = v16;
        uint64_t v17 = *v13++;
        *v12++ = v15 & ~v17;
        --v10;
      }
      while (v10);
      goto LABEL_15;
    }
    uint64_t v9 = 0;
    if ((unint64_t)(v7 - (void)a2) < 0x20) {
      goto LABEL_13;
    }
    if ((unint64_t)(v7 - (void)v3) < 0x20) {
      goto LABEL_13;
    }
    uint64_t v9 = v8 & 0x7FFFFFFFFFFFFFFCLL;
    uint64_t v31 = a2 + 3;
    uint64_t v32 = v3 + 3;
    unint64_t v33 = (int8x16_t *)(v7 + 48);
    uint64_t v34 = v8 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v35 = vbicq_s8(*v31, *v32);
      v33[-1] = vbicq_s8(v31[-1], v32[-1]);
      *unint64_t v33 = v35;
      v31 += 2;
      v32 += 2;
      v33 += 2;
      v34 -= 4;
    }
    while (v34);
    if (v8 != v9) {
      goto LABEL_13;
    }
  }
LABEL_15:
  unint64_t v18 = v4 - v5;
  if (v4 < v5)
  {
    bzero((void *)(v7 + 8 * v4 + 32), 8 * (v5 - v4));
    goto LABEL_26;
  }
  if (v5 == v4)
  {
LABEL_26:
    if (v6)
    {
      if (*(void *)(v7 + 32 + 8 * v6 - 8))
      {
        uint64_t v30 = v6;
LABEL_41:
        *(void *)(v7 + 16) = v30;
        return v7;
      }
      uint64_t v36 = v6;
      while (1)
      {
        uint64_t v30 = v36 - 1;
        if (v36 - 1 < 1) {
          break;
        }
        if (*(void *)(v7 + 16 + 8 * v36--))
        {
          if (v6 >= v30) {
            goto LABEL_41;
          }
          __break(1u);
          break;
        }
      }
    }
    uint64_t v30 = 0;
    goto LABEL_41;
  }
  if (v5 < v4)
  {
    if (v18 < 0xC) {
      goto LABEL_24;
    }
    uint64_t v19 = 8 * v5;
    if (8 * v5 + v7 - ((unint64_t)a2 + 8 * v5) < 0x20) {
      goto LABEL_24;
    }
    v5 += v18 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v19 + 48;
    unint64_t v21 = (_OWORD *)(v7 + v19 + 48);
    unint64_t v22 = &a2->i8[v20];
    unint64_t v23 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *unint64_t v21 = v24;
      v21 += 2;
      v22 += 32;
      v23 -= 4;
    }
    while (v23);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_24:
      unint64_t v25 = v4 - v5;
      uint64_t v26 = 8 * v5 + 32;
      unint64_t v27 = (void *)(v7 + v26);
      unsigned __int8 v28 = (uint64_t *)((char *)a2->i64 + v26);
      do
      {
        uint64_t v29 = *v28++;
        *v27++ = v29;
        --v25;
      }
      while (v25);
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t BitSet.subtracting(_:)(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  return BitSet.subtracting(_:)(a1, a3);
}

uint64_t BitSet.subtracting(_:)(uint64_t a1, uint64_t a2, char *a3)
{
  if (a2 <= 0) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = a1 & ~(a1 >> 63);
  }
  unint64_t v5 = a2 & ~(a2 >> 63);
  if (v4 == v5)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    char v8 = 1;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a3 = sub_24A499D60((uint64_t)a3);
    }
    v7[1] = *((void *)a3 + 2);
    _UnsafeBitSet.subtract(_:)(v4, v5);
    v7[0] = (uint64_t)a3;
    sub_24A54A3A0(&v8, v7);
    return v7[0];
  }
  return (uint64_t)a3;
}

uint64_t BitSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, int8x16_t *a4)
{
  uint64_t v6 = sub_24A53C7BC(a1, a2, a3, a4);
  (*((void (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
  return v6;
}

uint64_t sub_24A53C7BC(uint64_t a1, uint64_t a2, ValueMetadata *a3, int8x16_t *a4)
{
  return a2;
}

uint64_t Rope.forEachWhile<A>(from:in:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v29 = a2;
  uint64_t v35 = a1;
  uint64_t v9 = type metadata accessor for Rope._Node();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unsigned __int8 v28 = (char *)&v26 - v11;
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v27 = v8;
  v19((char *)&v26 - v17, v8, v12);
  uint64_t v30 = v10;
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v20(v18, 1, v9);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v18, v12);
  if (v8 == 1)
  {
    if (!v35)
    {
      char v21 = 1;
      return v21 & 1;
    }
    __break(1u);
  }
  else
  {
    uint64_t v22 = v35;
    v19(v16, v27, v12);
    if (v20(v16, 1, v9) != 1)
    {
      uint64_t v23 = v30;
      long long v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v28, v16, v9);
      char v21 = Rope._Node.forEachWhile<A>(from:in:_:)(v22, v29, v31, v32, v9, v33, v34);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v9);
      return v21 & 1;
    }
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v16, v12);
  __break(1u);
  return result;
}

uint64_t Rope.forEachWhile(_:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for Rope._Node();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v24 = (char *)&v22 - v5;
  uint64_t v6 = sub_24A5BBD20();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v22 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v23 = v2;
  v12((char *)&v22 - v10, v2, v6);
  uint64_t v25 = v4;
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  char v14 = 1;
  int v15 = v13(v11, 1, v3);
  uint64_t v16 = v11;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v16, v6);
  if (v15 == 1) {
    return v14 & 1;
  }
  unint64_t v18 = v22;
  v12(v22, v23, v6);
  if (v13(v18, 1, v3) != 1)
  {
    uint64_t v19 = v24;
    uint64_t v20 = v25;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v24, v18, v3);
    char v14 = Rope._Node.forEachWhile(_:)(v26, v27, v3);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v3);
    return v14 & 1;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v18, v6);
  __break(1u);
  return result;
}

uint64_t sub_24A53CD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 18))
  {
    sub_24A497498(a1);
    char v5 = sub_24A53D450((_WORD *)(v4 + 16), v4 + 24, a2);
  }
  else
  {
    uint64_t v6 = *(unsigned __int16 *)(v4 + 16);
    if (*(_WORD *)(v4 + 16))
    {
      sub_24A497498(a1);
      uint64_t v7 = v4 + 32;
      do
      {
        swift_bridgeObjectRetain();
        uint64_t v8 = sub_24A5BB830();
        uint64_t v10 = v9;
        uint64_t v12 = v11;
        uint64_t v14 = v13;
        swift_bridgeObjectRelease();
        sub_24A58AE34(v8, v10, v12, v14);
        swift_bridgeObjectRelease();
        v7 += 24;
        --v6;
      }
      while (v6);
      char v5 = 1;
      uint64_t v3 = a1;
    }
    else
    {
      sub_24A497498(a1);
      char v5 = 1;
    }
  }
  sub_24A496BE8(v3);
  return v5 & 1;
}

uint64_t Rope._Node.forEachWhile(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    uint64_t v7 = *v3;
    uint64_t v8 = v7
       + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80));
    uint64_t v9 = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 24);
    swift_getWitnessTable();
    uint64_t v11 = (unsigned __int16 *)nullsub_1(v7 + 16, v8, v9, a3, v10);
    uint64_t v13 = v12;
    swift_unknownObjectRetain();
    sub_24A53D5F4(v11, v13, (uint64_t)a1, a2, v9, v10, (char *)&v24);
    swift_unknownObjectRelease();
    return v24;
  }
  else
  {
    uint64_t v15 = *v3;
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v16 = *(void *)(a3 + 24);
    uint64_t v18 = type metadata accessor for Rope._Item();
    uint64_t v19 = v15
        + ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v20 = (unsigned __int16 *)nullsub_1(v15 + 16, v19, v17, v18, v16);
    uint64_t v22 = v21;
    swift_unknownObjectRetain();
    sub_24A53D280(v20, v22, a1, v17, v16, (char *)&v23);
    swift_unknownObjectRelease();
    return v23;
  }
}

uint64_t Rope._Node.forEachWhile<A>(from:in:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    uint64_t v14 = *v7;
    uint64_t v15 = *v7 + 16;
    uint64_t v16 = v14
        + ((*(unsigned __int8 *)(*(void *)(a5 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a5 - 8) + 80));
    uint64_t v31 = a6;
    uint64_t v18 = *(void *)(a5 + 16);
    uint64_t v17 = *(void *)(a5 + 24);
    swift_getWitnessTable();
    uint64_t v19 = (unsigned __int16 *)nullsub_1(v15, v16, v18, a5, v17);
    uint64_t v21 = v20;
    swift_unknownObjectRetain();
    sub_24A53DF20(v19, v21, a1, a2, (uint64_t)a3, a4, v18, v31, (char *)&v34, a7);
    swift_unknownObjectRelease();
    return v34;
  }
  else
  {
    uint64_t v23 = *v7;
    uint64_t v25 = *(void *)(a5 + 16);
    uint64_t v24 = *(void *)(a5 + 24);
    uint64_t v26 = type metadata accessor for Rope._Item();
    uint64_t v27 = v23
        + ((*(unsigned __int8 *)(*(void *)(v26 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v26 - 8) + 80));
    swift_getWitnessTable();
    unsigned __int8 v28 = (unsigned __int16 *)nullsub_1(v23 + 16, v27, v25, v26, v24);
    uint64_t v30 = v29;
    swift_unknownObjectRetain();
    sub_24A53D7A4(v28, v30, a1, a2, a3, a4, v25, a6, (char *)&v33, a7);
    swift_unknownObjectRelease();
    return v33;
  }
}

uint64_t sub_24A53D280@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v11 = type metadata accessor for Rope._Item();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = v11;
  uint64_t result = Rope._UnsafeHandle.children.getter(a1, a2, a4, v11, a5, WitnessTable);
  if (v17 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v18 = v17;
  if (v17)
  {
    uint64_t v19 = result;
    uint64_t v25 = a6;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v21 = *(void *)(v12 + 72);
    while (v18)
    {
      v20(v14, v19, v26);
      char v22 = v27(v14);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(a4 - 8) + 8))(v14, a4);
      if ((v22 & 1) == 0)
      {
        char v23 = 0;
        goto LABEL_10;
      }
      v19 += v21;
      if (!--v18)
      {
        char v23 = 1;
LABEL_10:
        a6 = v25;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  char v23 = 1;
LABEL_11:
  *a6 = v23;
  return result;
}

uint64_t sub_24A53D450(_WORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A53D468(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24A53D450);
}

uint64_t sub_24A53D468(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = (unsigned __int16)*a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  uint64_t v20 = (unsigned __int16)*a1;
  while (1)
  {
    uint64_t v9 = *(void *)(v6 + 40 * v7);
    if (!*(unsigned char *)(v9 + 18))
    {
      uint64_t v10 = *(unsigned __int16 *)(v9 + 16);
      if (*(_WORD *)(v9 + 16))
      {
        swift_unknownObjectRetain();
        uint64_t v11 = v9 + 32;
        do
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = sub_24A5BB830();
          uint64_t v14 = v13;
          uint64_t v16 = v15;
          uint64_t v18 = v17;
          swift_bridgeObjectRelease();
          sub_24A58AE34(v12, v14, v16, v18);
          swift_bridgeObjectRelease();
          v11 += 24;
          --v10;
        }
        while (v10);
      }
      else
      {
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRelease();
      uint64_t v4 = v20;
      uint64_t v6 = a2;
      goto LABEL_4;
    }
    swift_unknownObjectRetain();
    char v8 = a4(v9 + 16, v9 + 24, a3);
    swift_unknownObjectRelease();
    if ((v8 & 1) == 0) {
      return 0;
    }
LABEL_4:
    if (++v7 == v4) {
      return 1;
    }
  }
}

uint64_t sub_24A53D5F4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v13 = type metadata accessor for Rope._Node();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.children.getter(a1, a2, a5, v13, a6, WitnessTable);
  if (v19 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v20 = v19;
  if (v19)
  {
    uint64_t v21 = result;
    unsigned __int8 v28 = a7;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v23 = v14 + 16;
    char v22 = v24;
    uint64_t v25 = *(void *)(v23 + 56);
    while (v20)
    {
      v22(v16, v21, v13);
      char v26 = Rope._Node.forEachWhile(_:)(a3, v29, v13);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 - 8))(v16, v13);
      if ((v26 & 1) == 0)
      {
        char v27 = 0;
        goto LABEL_10;
      }
      v21 += v25;
      if (!--v20)
      {
        char v27 = 1;
LABEL_10:
        a7 = v28;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  char v27 = 1;
LABEL_11:
  *a7 = v27;
  return result;
}

uint64_t sub_24A53D7A4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v53 = a8;
  uint64_t v54 = a4;
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  char v47 = a9;
  uint64_t v55 = a3;
  uint64_t v56 = a10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t v57 = sub_24A5BBD20();
  uint64_t v61 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  uint64_t v16 = (char *)&v44 - v15;
  uint64_t v17 = type metadata accessor for Rope._Item();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v44 - v20;
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v19);
  int64_t v50 = (char *)&v44 - v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v60 = a7;
  uint64_t v24 = Rope._UnsafeHandle.children.getter(a1, a2, a7, v17, AssociatedConformanceWitness, WitnessTable);
  uint64_t v45 = v25;
  uint64_t v26 = a7;
  uint64_t v27 = v53;
  uint64_t v28 = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v55, v54, 0, a1, a2, v26, v17, v53, WitnessTable, v56);
  unint64_t v52 = v29;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v18 += 16;
  uint64_t v55 = *(void *)(v18 + 56);
  uint64_t v44 = v24;
  uint64_t v46 = v28;
  uint64_t v31 = v24 + v28 * v55;
  v30(v21, v31, v17);
  uint64_t v32 = v50;
  (*(void (**)(void, char *, uint64_t))(v56 + 32))(v52, v21, v27);
  uint64_t v56 = *(void *)(*(void *)(v60 - 8) + 8);
  ((void (*)(char *))v56)(v21);
  uint64_t v33 = v31;
  uint64_t v35 = v48;
  uint64_t v34 = v49;
  uint64_t v53 = v18;
  uint64_t v54 = v17;
  unint64_t v52 = v30;
  v30(v21, v33, v17);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v16, v32, v35);
  unsigned __int8 v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v51(v16, 0, 1, v35);
  LOBYTE(v32) = v58(v21, v16);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v61 + 8);
  v61 += 8;
  v36(v16, v57);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v56)(v21, v60);
  if ((v32 & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v50, v35);
    goto LABEL_10;
  }
  uint64_t v38 = v46 + 1;
  if (!__OFADD__(v46, 1))
  {
    uint64_t v39 = v35;
    if (v38 >= v45)
    {
LABEL_7:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v50, v39);
      char v43 = 1;
LABEL_11:
      *char v47 = v43;
      return result;
    }
    uint64_t v40 = ~v46 + v45;
    uint64_t v41 = v44 + v55 * v38;
    while (1)
    {
      v52(v21, v41, v54);
      v51(v16, 1, 1, v39);
      char v42 = v58(v21, v16);
      v36(v16, v57);
      ((void (*)(char *, uint64_t))v56)(v21, v60);
      if ((v42 & 1) == 0) {
        break;
      }
      v41 += v55;
      if (!--v40) {
        goto LABEL_7;
      }
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v50, v39);
LABEL_10:
    char v43 = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A53DCB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = *(unsigned __int16 *)result;
  if (*(_WORD *)result)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    BOOL v9 = __OFSUB__(a3, v8);
    uint64_t v10 = a3 - v8;
    if (!v9)
    {
      if (__OFADD__(v10, 1))
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      if (v10 + 1 <= 0)
      {
        uint64_t v11 = 0;
        goto LABEL_15;
      }
      if (v7 == 1)
      {
        uint64_t v5 = v10;
        goto LABEL_13;
      }
      uint64_t v12 = (uint64_t *)(a2 + 48);
      uint64_t v11 = 1;
      while (1)
      {
        uint64_t v13 = *v12;
        v12 += 5;
        uint64_t v5 = v10 - v13;
        if (__OFSUB__(v10, v13)) {
          break;
        }
        if (__OFADD__(v5, 1)) {
          goto LABEL_35;
        }
        if (v5 + 1 < 1)
        {
          uint64_t v5 = v10;
          goto LABEL_15;
        }
        ++v11;
        uint64_t v10 = v5;
        if (v7 == v11) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
    }
    __break(1u);
    goto LABEL_37;
  }
LABEL_13:
  if (v5)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  uint64_t v11 = *(unsigned __int16 *)result;
LABEL_15:
  uint64_t v14 = *(void *)(a2 + 40 * v11);
  int v15 = *(unsigned __int8 *)(v14 + 18);
  swift_unknownObjectRetain();
  unint64_t v16 = v14 + 16;
  uint64_t v17 = v14 + 24;
  if (v15) {
    char v18 = sub_24A53DCB4(v16, v17, v5, a4);
  }
  else {
    char v18 = sub_24A53E384(v16, v17, v5, a4);
  }
  char v19 = v18;
  uint64_t result = swift_unknownObjectRelease();
  if ((v19 & 1) == 0) {
    return 0;
  }
  uint64_t v20 = v11 + 1;
  if (__OFADD__(v11, 1)) {
    goto LABEL_39;
  }
  if (v20 < v7)
  {
    uint64_t v32 = v7;
    uint64_t v33 = v6;
    do
    {
      uint64_t v22 = *(void *)(v6 + 40 * v20);
      if (*(unsigned char *)(v22 + 18))
      {
        swift_unknownObjectRetain();
        char v21 = sub_24A53D450((_WORD *)(v22 + 16), v22 + 24, a4);
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v23 = *(unsigned __int16 *)(v22 + 16);
        if (*(_WORD *)(v22 + 16))
        {
          swift_unknownObjectRetain();
          uint64_t v24 = v22 + 32;
          do
          {
            swift_bridgeObjectRetain();
            uint64_t v25 = sub_24A5BB830();
            uint64_t v27 = v26;
            uint64_t v29 = v28;
            uint64_t v31 = v30;
            swift_bridgeObjectRelease();
            sub_24A58AE34(v25, v27, v29, v31);
            swift_bridgeObjectRelease();
            v24 += 24;
            --v23;
          }
          while (v23);
        }
        else
        {
          swift_unknownObjectRetain();
        }
        swift_unknownObjectRelease();
        uint64_t v7 = v32;
        uint64_t v6 = v33;
      }
      ++v20;
    }
    while (v20 != v7);
  }
  return 1;
}

uint64_t sub_24A53DF20@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v53 = a6;
  uint64_t v54 = a8;
  uint64_t v51 = a3;
  uint64_t v52 = a5;
  uint64_t v48 = a4;
  uint64_t v49 = a9;
  int64_t v50 = a1;
  uint64_t v55 = a10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Rope._Node();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v46 - v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = Rope._UnsafeHandle.children.getter(v20, a2, a7, v14, AssociatedConformanceWitness, WitnessTable);
  uint64_t v47 = v23;
  uint64_t v24 = v50;
  uint64_t v25 = v48;
  uint64_t v26 = v21;
  int64_t v50 = (unsigned __int16 *)a7;
  uint64_t v27 = v54;
  uint64_t v28 = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v51, v48, 0, v24, v26, a7, v14, v54, WitnessTable, v55);
  uint64_t v30 = v29;
  uint64_t v31 = v28;
  uint64_t v51 = *(void *)(v15 + 72);
  uint64_t v46 = v22;
  uint64_t v32 = v22 + v28 * v51;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v33(v18, v32, v14);
  LOBYTE(v15) = Rope._Node.forEachWhile<A>(from:in:_:)(v30, v25, v52, v53, v14, v27, v55);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t result = v34(v18, v14);
  uint64_t v36 = v49;
  char v37 = 0;
  if ((v15 & 1) == 0)
  {
LABEL_10:
    *uint64_t v36 = v37;
    return result;
  }
  uint64_t v38 = v31 + 1;
  if (!__OFADD__(v31, 1))
  {
    if (v38 >= v47)
    {
LABEL_7:
      char v37 = 1;
    }
    else
    {
      uint64_t v39 = ~v31 + v47;
      uint64_t v40 = v46 + v51 * v38;
      while (1)
      {
        uint64_t v41 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v18, v40, v14);
        MEMORY[0x270FA5388](v41);
        uint64_t v42 = v54;
        *(&v46 - 6) = (uint64_t)v50;
        *(&v46 - 5) = v42;
        uint64_t v43 = v52;
        *(&v46 - 4) = v55;
        *(&v46 - 3) = v43;
        uint64_t v45 = v53;
        char v44 = Rope._Node.forEachWhile(_:)((uint64_t (*)(char *))sub_24A53E6B8, (uint64_t)(&v46 - 8), v14);
        uint64_t result = v34(v18, v14);
        if ((v44 & 1) == 0) {
          break;
        }
        v40 += v51;
        if (!--v39) {
          goto LABEL_7;
        }
      }
      char v37 = 0;
    }
    uint64_t v36 = v49;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A53E214(uint64_t a1, uint64_t (*a2)(uint64_t, char *))
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v10 - v7, 1, 1, AssociatedTypeWitness);
  LOBYTE(a2) = a2(a1, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return a2 & 1;
}

uint64_t sub_24A53E384(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = sub_24A5BC780();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(unsigned __int16 *)a1;
  if (*(_WORD *)a1)
  {
    uint64_t v17 = *(unsigned __int8 *)(a2 + 19);
    BOOL v18 = __OFSUB__(a3, v17);
    uint64_t v19 = a3 - v17;
    if (v18)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (__OFADD__(v19, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v19 + 1 <= 0)
    {
      uint64_t v20 = 0;
      goto LABEL_15;
    }
    if (v16 != 1)
    {
      uint64_t v21 = (unsigned __int8 *)(a2 + 43);
      uint64_t v20 = 1;
      while (1)
      {
        unsigned int v22 = *v21;
        v21 += 24;
        a3 = v19 - v22;
        if (__OFSUB__(v19, v22)) {
          break;
        }
        if (__OFADD__(a3, 1)) {
          goto LABEL_28;
        }
        if (a3 + 1 < 1)
        {
          a3 = v19;
          goto LABEL_15;
        }
        ++v20;
        uint64_t v19 = a3;
        if (v16 == v20) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    a3 = v19;
  }
LABEL_13:
  if (a3)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  uint64_t v20 = *(unsigned __int16 *)a1;
LABEL_15:
  uint64_t v5 = a2 + 24 * v20;
  if (a3 >= *(unsigned __int8 *)(v5 + 19))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v4 = *(void *)v5;
  a1 = *(void *)(v5 + 8);
  unint64_t v13 = *(unsigned __int8 *)(v5 + 20);
  uint64_t v44 = a2;
  uint64_t v45 = result;
  if ((a1 & 0x1000000000000000) != 0)
  {
LABEL_30:
    unint64_t v24 = MEMORY[0x24C5C6A60](15, v13, v4, a1);
    goto LABEL_21;
  }
  unint64_t v23 = HIBYTE(a1) & 0xF;
  if ((a1 & 0x2000000000000000) == 0) {
    unint64_t v23 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v23 < v13)
  {
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v24 = (v13 << 16) | 4;
LABEL_21:
  swift_bridgeObjectRetain();
  sub_24A494C00(v24, v4, a1);
  unint64_t v25 = sub_24A5BBE50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)v5;
  unint64_t v27 = *(void *)(v5 + 8);
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_24A494C00(v25, v26, v27);
  unint64_t v30 = v29;
  unint64_t v32 = v31;
  unint64_t v34 = v33;
  swift_bridgeObjectRelease();
  sub_24A48F534(v28, v30, v32, v34);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a4, v15, v45);
  if (__OFADD__(v20, 1))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v20 + 1 < v16)
  {
    uint64_t v35 = ~v20 + v16;
    uint64_t v36 = v44 + 24 * v20 + 32;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_24A5BB830();
      uint64_t v39 = v38;
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      sub_24A58AE34(v37, v39, v41, v43);
      swift_bridgeObjectRelease();
      v36 += 24;
      --v35;
    }
    while (v35);
  }
  return 1;
}

uint64_t sub_24A53E6B8(uint64_t a1)
{
  return sub_24A53E214(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 40));
}

uint64_t static Heap._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

uint64_t TreeSet.formIntersection(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = TreeSet._intersection<A>(_:)(a1, a2, *v4, v4[1], v4[2], *(void *)(a4 + 16), MEMORY[0x263F8EE60] + 8, *(void *)(a4 + 24));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_release();
  *uint64_t v4 = v5;
  v4[1] = v7;
  unint64_t v4[2] = v9;
  return result;
}

uint64_t TreeSet.formIntersection<A>(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = TreeSet._intersection<A>(_:)(a1, a2, *v5, v5[1], v5[2], *(void *)(a4 + 16), a5, *(void *)(a4 + 24));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  *uint64_t v5 = v6;
  v5[1] = v8;
  _OWORD v5[2] = v10;
  return result;
}

uint64_t TreeSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = TreeSet.intersection<A>(_:)(a1, *(void *)v4, *(char **)(v4 + 8), *(void *)(v4 + 16), *(void *)(a2 + 16), a3, *(void *)(a2 + 24), a4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_release();
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = v7;
  *(void *)(v4 + 16) = v9;
  return result;
}

uint64_t static Rope.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24A53E87C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static _RopePath.< infix(_:_:)) & 1;
}

uint64_t static Rope.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24A53E87C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static _RopePath.== infix(_:_:)) & 1;
}

uint64_t sub_24A53E87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return a9(a2, a5, AssociatedTypeWitness, AssociatedConformanceWitness);
}

Swift::Bool __swiftcall Rope.Index._isEmpty(below:)(Swift::UInt8 below)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.isEmpty(below:)(below);
}

Swift::Void __swiftcall Rope.Index._clear(below:)(Swift::UInt8 below)
{
}

uint64_t Rope.Index._version.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Rope.Index._version.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope.Index._path.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Rope.Index._path.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Rope.Index._path.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope.Index._leaf.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t Rope.Index._leaf.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*Rope.Index._leaf.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t static Rope.Index._invalid.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  _RopePath.init(_value:)(-1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return 0;
}

BOOL Rope.Index._isValid.getter(uint64_t a1, uint64_t a2)
{
  return a2 != -1;
}

uint64_t sub_24A53EB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Rope.Index.== infix(_:_:)(a1, *(void *)(a1 + 8), a3, a4, *(void *)(a2 + 8), a6, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t Rope.Index.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.hash(into:)();
}

uint64_t Rope.Index.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A53ECA0()
{
  return Rope.Index.hashValue.getter();
}

uint64_t sub_24A53ECAC()
{
  return Rope.Index.hash(into:)();
}

uint64_t sub_24A53ECB8()
{
  return sub_24A5BC690();
}

uint64_t sub_24A53ED00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Rope.Index.< infix(_:_:)(a1, *(void *)(a1 + 8), a3, a4, *(void *)(a2 + 8), a6, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t Rope.Index.description.getter()
{
  return 0;
}

uint64_t sub_24A53EDE0()
{
  return Rope.Index.description.getter();
}

uint64_t Rope.Index._height.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return _RopePath.height.getter(a2, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_24A53EE84()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A53EEA0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_24A53EEFC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for Rope.Index()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t *sub_24A53EF68(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result[4];
  unint64_t v5 = 2 * (v3[4] & 0x1FFFFFFFFFFFFFLL);
  if (!*v3) {
    unint64_t v5 = 0;
  }
  if (v5 < v4 >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = *result;
    if (v4 >> 10 == *result >> 10) {
      return result;
    }
    uint64_t result = (unint64_t *)(v6 >> 11);
    if (v4 >> 11 >= v6 >> 11) {
      return (unint64_t *)sub_24A54E1F4((uint64_t)result, v4 >> 11, a3);
    }
  }
  __break(1u);
  return result;
}

unint64_t _s19CollectionsInternal9BigStringV17UnicodeScalarViewV6remove2ats0E0O0F0VAC5IndexV_tF_0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v11 = *(void *)v4;
  unint64_t v12 = *(void *)(v4 + 32);
  if (*(void *)v4) {
    BOOL v13 = 2 * (v12 & 0x1FFFFFFFFFFFFFLL) > a1 >> 10;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    unint64_t v9 = *(void *)(v4 + 8);
    uint64_t v10 = *(void *)(v4 + 16);
    unint64_t v5 = *(void *)(v4 + 24);
    unint64_t v8 = *(void *)(v4 + 40);
    v44[0] = *(void *)v4;
    v44[1] = v9;
    v44[2] = v10;
    uint64_t v44[3] = v5;
    v44[4] = v12;
    v44[5] = v8;
    unint64_t v4 = (unint64_t)v44;
    unint64_t result = sub_24A4965FC(a1, a2, a3, a4);
    if (v17 == 1)
    {
      __break(1u);
      return result;
    }
    if (v15 == v8)
    {
      unint64_t v7 = result;
      uint64_t v6 = v17;
      unint64_t v29 = v16;
      unint64_t v30 = v8;
      unint64_t v8 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
      if (v17)
      {
        uint64_t v18 = v17 + 24 * ((v16 >> ((4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v12 = *(void *)(v18 + 24);
        unint64_t v4 = *(void *)(v18 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v39 = v11;
        unint64_t v40 = v9;
        uint64_t v41 = v10;
        unint64_t v42 = v5;
        unint64_t v43 = v12;
        unint64_t v5 = v16;
        swift_unknownObjectRetain();
        sub_24A4895D4(v5, (uint64_t)&v31);
        swift_unknownObjectRelease();
        unint64_t v12 = v31;
        unint64_t v4 = v32;
      }
      uint64_t v10 = v7;
      unint64_t v9 = v7 >> 10;
      sub_24A48E614(v8, v12, v4);
      if ((v4 & 0x1000000000000000) == 0)
      {
        if ((v4 & 0x2000000000000000) == 0)
        {
          uint64_t v28 = v7;
          unint64_t v5 = v7 >> 10;
          if ((v12 & 0x1000000000000000) != 0) {
            goto LABEL_14;
          }
          goto LABEL_30;
        }
        uint64_t v28 = v6;
        unint64_t v31 = v12;
        uint64_t v32 = v4 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        uint64_t v10 = v7;
        uint64_t v19 = sub_24A5BC130();
        swift_bridgeObjectRelease();
        unint64_t v20 = sub_24A48E614(v8, v12, v4) >> 16;
        unint64_t v31 = v12;
        uint64_t v32 = v4 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v5 = *((unsigned __int8 *)&v31 + v20);
        goto LABEL_18;
      }
      goto LABEL_28;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_28:
  uint64_t v19 = sub_24A5BC060();
  sub_24A48E614(v8, v12, v4);
  unint64_t v8 = sub_24A5BB5D0();
  swift_bridgeObjectRelease();
  while (1)
  {
    unint64_t v26 = (v7 >> 11) - v10 + (v8 >> 16);
    unint64_t v27 = (v8 & 0xC000) != 0 ? (v26 << 11) | 0x400 : v26 << 11;
    if (v9 <= v27 >> 10) {
      break;
    }
    __break(1u);
LABEL_30:
    sub_24A5BC120();
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_24A5BC130();
    swift_bridgeObjectRelease();
    unint64_t v20 = sub_24A48E614(v8, v12, v4) >> 16;
    if ((v12 & 0x1000000000000000) != 0) {
      uint64_t v21 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v21 = sub_24A5BC120();
    }
    unint64_t v9 = v5;
    uint64_t v10 = v28;
    unint64_t v5 = *(unsigned __int8 *)(v21 + v20);
LABEL_18:
    swift_bridgeObjectRelease();
    unsigned int v24 = __clz(v5 ^ 0xFF) - 24;
    if ((v5 & 0x80u) == 0) {
      unsigned __int8 v25 = 1;
    }
    else {
      unsigned __int8 v25 = v24;
    }
    unint64_t v8 = ((v20 + v25) << 16) | 5;
  }
  unint64_t v31 = v7;
  uint64_t v32 = v30;
  unint64_t v33 = v29;
  uint64_t v34 = v6;
  unint64_t v35 = v27 | BYTE2(v8);
  unint64_t v36 = v30;
  unint64_t v37 = v29;
  uint64_t v38 = v6;
  BigString.removeSubrange(_:)(&v31, v22, v23);
  return v19;
}

uint64_t Deque._UnsafeHandle.copyElements()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _DequeBuffer();
  v12[14] = a1;
  v12[15] = a2;
  sub_24A5BC0F0();
  swift_retain();
  uint64_t v6 = sub_24A5BC3A0();
  uint64_t v7 = v6;
  if (*(uint64_t *)(a1 + 8) < 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v8 = MEMORY[0x270FA5388](v6);
    v12[8] = a3;
    v12[9] = a1;
    void v12[10] = a2;
    MEMORY[0x270FA5388](v8);
    _OWORD v12[2] = a3;
    v12[3] = sub_24A541780;
    v12[4] = v9;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A521D30, (uint64_t)v12, v7, (uint64_t)&type metadata for _DequeBufferHeader, a3, v10, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v13);
    swift_release();
  }
  return v7;
}

uint64_t Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  type metadata accessor for _DequeBuffer();
  v14[14] = v7;
  sub_24A5BC0F0();
  swift_retain();
  uint64_t v8 = sub_24A5BC3A0();
  uint64_t v9 = v8;
  if (v7 >= 1)
  {
    uint64_t v10 = MEMORY[0x270FA5388](v8);
    unsigned char v14[8] = a4;
    v14[9] = a2;
    v14[10] = a3;
    MEMORY[0x270FA5388](v10);
    void v14[2] = a4;
    void v14[3] = sub_24A541AC8;
    void v14[4] = v11;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v14, v9, (uint64_t)&type metadata for _DequeBufferHeader, a4, v12, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v15);
    *(void *)(a2 + 8) = 0;
  }
  swift_release();
  return v9;
}

uint64_t Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _DequeBuffer();
  v13[14] = a2;
  v13[15] = a3;
  sub_24A5BC0F0();
  swift_retain();
  uint64_t v7 = sub_24A5BC3A0();
  uint64_t v8 = v7;
  if (*(uint64_t *)(a2 + 8) < 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v9 = MEMORY[0x270FA5388](v7);
    void v13[8] = a4;
    v13[9] = a2;
    void v13[10] = a3;
    MEMORY[0x270FA5388](v9);
    v13[2] = a4;
    v13[3] = sub_24A541B30;
    v13[4] = v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v13, v8, (uint64_t)&type metadata for _DequeBufferHeader, a4, v11, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v14);
    swift_release();
  }
  return v8;
}

uint64_t Deque._UnsafeHandle.startSlot.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t Deque._UnsafeHandle.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t Deque._UnsafeHandle.limSlot.getter(uint64_t a1)
{
  return *(void *)a1;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(forOffset:)(Swift::Int forOffset)
{
  Swift::Int v2 = v1[2] + forOffset;
  Swift::Int v3 = *v1;
  if (v2 < *v1) {
    Swift::Int v3 = 0;
  }
  return (CollectionsInternal::_DequeSlot)(v2 - v3);
}

CollectionsInternal::_DequeSlot Deque._UnsafeHandle.endSlot.getter(CollectionsInternal::_DequeSlot *a1)
{
  return Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1].position);
}

uint64_t Deque._UnsafeHandle.ptr(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 + *(void *)(*(void *)(a4 - 8) + 72) * a1;
}

void *Deque._UnsafeHandle.segments()@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = result[2];
  uint64_t v4 = *result - v3;
  if (__OFSUB__(*result, v3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result[1];
    if (v4 >= v5)
    {
      unint64_t result = (void *)_UnsafeWrappedBuffer.init(start:count:)((uint64_t)v8);
      goto LABEL_6;
    }
    if (!__OFSUB__(v5, v4))
    {
      unint64_t result = (void *)_UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)v8);
LABEL_6:
      char v6 = v9;
      long long v7 = v8[1];
      *(_OWORD *)a2 = v8[0];
      *(_OWORD *)(a2 + 16) = v7;
      *(unsigned char *)(a2 + 32) = v6;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.capacity.getter(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t Deque._UnsafeHandle.buffer(for:)(uint64_t result, uint64_t a2)
{
  if (!__OFSUB__(a2, result)) {
    return sub_24A5BB550();
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.mutableBuffer.getter()
{
  return sub_24A5BBD50();
}

uint64_t Deque._UnsafeHandle.mutableBuffer(for:)(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    sub_24A5BB550();
    return sub_24A5BBD90();
  }
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result != a2)
  {
    uint64_t v35 = v8;
    uint64_t v36 = v9;
    Deque._UnsafeHandle.segments(forOffsets:)(result, a2, a4, (uint64_t)&v30);
    uint64_t v14 = sub_24A5BBD90();
    uint64_t v16 = v15;
    sub_24A5BB580();
    uint64_t v17 = sub_24A5BBD20();
    uint64_t v18 = *(void (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 32);
    v18(v32, &v31, v17);
    uint64_t v19 = ((uint64_t (*)(void *, unsigned char *, uint64_t))v18)(v33, v32, v17);
    MEMORY[0x270FA5388](v19);
    v26[2] = a6;
    uint64_t v20 = sub_24A5BBDB0();
    sub_24A4C10F8((void (*)(char *, char *))sub_24A541B50, (uint64_t)v26, MEMORY[0x263F8E628], v20, v21, (uint64_t)&v27);
    uint64_t v22 = v27;
    if (v28) {
      uint64_t v23 = v27;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v28) {
      char v24 = v29;
    }
    else {
      char v24 = 1;
    }
    if (!v29) {
      uint64_t v22 = v23;
    }
    v33[0] = v14;
    v33[1] = v16;
    v33[2] = v22;
    v33[3] = v28;
    char v34 = v24;
    uint64_t v25 = type metadata accessor for _UnsafeMutableWrappedBuffer();
    return _UnsafeMutableWrappedBuffer.assign<A>(from:)(a3, v25, a7, a8);
  }
  return result;
}

Swift::Int Deque._UnsafeHandle.uncheckedRemove(offsets:)(uint64_t a1, uint64_t a2, CollectionsInternal::_DequeSlot *a3, uint64_t a4, uint64_t a5)
{
  Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, &a3->position, (uint64_t)&v25);
  uint64_t v19 = sub_24A5BBD90();
  uint64_t v10 = v9;
  sub_24A5BB580();
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v27, &v26, v11);
  v12(v28, v27, v11);
  uint64_t v21 = a5;
  uint64_t v13 = sub_24A5BBDB0();
  sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v20, MEMORY[0x263F8E628], v13, v14, (uint64_t)&v22);
  uint64_t v15 = v22;
  if (v23) {
    uint64_t v16 = v22;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v23) {
    char v17 = v24;
  }
  else {
    char v17 = 1;
  }
  if (!v24) {
    uint64_t v15 = v16;
  }
  v28[0] = v19;
  v28[1] = v10;
  v28[2] = v15;
  v28[3] = v23;
  char v29 = v17;
  type metadata accessor for _UnsafeMutableWrappedBuffer();
  _UnsafeMutableWrappedBuffer.deinitialize()();
  return Deque._UnsafeHandle.closeGap(offsets:)(a1, a2, a3);
}

uint64_t Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v11 < 1)
  {
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    return v19(a1, a7);
  }
  else
  {
    uint64_t v20 = v14;
    Deque._UnsafeHandle.openGap(ofSize:atOffset:)(v11, v12, v13, (uint64_t)v21);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, a1, a7);
    uint64_t v17 = type metadata accessor for _UnsafeMutableWrappedBuffer();
    _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v16, v17, a7, a8);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a7);
  }
}

uint64_t Deque._UnsafeHandle.count.setter(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 8) = result;
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedAppend(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a3 + *(void *)(v8 + 72) * Deque._UnsafeHandle.slot(_:offsetBy:)(v11[2], v11[1].position).position;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
  uint64_t result = sub_24A544CAC((uint64_t)v10, v12, a4);
  uint64_t v14 = *(void *)(a2 + 8);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(a2 + 8) = v16;
  }
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 1) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t result = a3[1];
  BOOL v7 = __OFADD__(result, a2);
  uint64_t v8 = result + a2;
  if (v7)
  {
    __break(1u);
    goto LABEL_15;
  }
  a3[1] = v8;
  if (v8 < result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  Deque._UnsafeHandle.segments(forOffsets:)(result, v8, a3, (uint64_t)&v28);
  uint64_t v10 = sub_24A5BBD90();
  uint64_t v12 = v11;
  uint64_t v13 = sub_24A5BB580();
  uint64_t v14 = sub_24A5BBD20();
  BOOL v15 = *(void (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v30, &v29, v14);
  uint64_t v16 = ((uint64_t (*)(void *, unsigned char *, uint64_t))v15)(v31, v30, v14);
  MEMORY[0x270FA5388](v16);
  v24[2] = a5;
  uint64_t v17 = sub_24A5BBDB0();
  sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v24, MEMORY[0x263F8E628], v17, v18, (uint64_t)&v25);
  uint64_t v19 = v25;
  if (v26) {
    uint64_t v20 = v25;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v26) {
    char v21 = v27;
  }
  else {
    char v21 = 1;
  }
  if (!v27) {
    uint64_t v19 = v20;
  }
  v31[0] = v10;
  v31[1] = v12;
  v31[2] = v19;
  v31[3] = v26;
  char v32 = v21;
  uint64_t v25 = v6;
  uint64_t v26 = a2;
  uint64_t v22 = type metadata accessor for _UnsafeMutableWrappedBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)&v25, v22, v13, WitnessTable);
}

CollectionsInternal::_DequeSlot Deque._UnsafeHandle.availableSegments()@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int v5 = a1[1];
  Swift::Int v4 = a1[2];
  result.Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v4, v5).position;
  Swift::Int v7 = *a1;
  if (v5 >= *a1)
  {
    result.Swift::Int position = sub_24A5BBD50();
    goto LABEL_6;
  }
  if (result.position < v4)
  {
    if (!__OFSUB__(v4, result.position))
    {
      sub_24A5BB550();
      result.Swift::Int position = sub_24A5BBD90();
LABEL_6:
      Swift::Int position = result.position;
      uint64_t v10 = v8;
      Swift::Int v11 = 0;
      uint64_t v12 = 0;
      BOOL v13 = 1;
LABEL_13:
      *(void *)a2 = position;
      *(void *)(a2 + 8) = v10;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v12;
      *(unsigned char *)(a2 + 32) = v13;
      return result;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (v7 < result.position)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (__OFSUB__(v7, result.position))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_24A5BB550();
  result.Swift::Int position = sub_24A5BBD90();
  uint64_t v10 = v14;
  if ((a1[2] & 0x8000000000000000) == 0)
  {
    Swift::Int position = result.position;
    sub_24A5BB550();
    result.Swift::Int position = sub_24A5BBD90();
    BOOL v13 = v12 == 0;
    if (v12) {
      Swift::Int v11 = result.position;
    }
    else {
      Swift::Int v11 = 0;
    }
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedPrepend(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2[2];
  if (!v11)
  {
LABEL_5:
    uint64_t v12 = *a2 - 1;
    if (__OFSUB__(*a2, 1)) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  uint64_t v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v13 = v7 + v12 * *(void *)(v8 + 72);
  (*(void (**)(char *))(v8 + 16))(v10);
  uint64_t result = sub_24A544CAC((uint64_t)v10, v13, a4);
  a2[2] = v12;
  uint64_t v14 = a2[1];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (!v15)
  {
    a2[1] = v16;
    return result;
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.openGap(ofSize:atOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, Swift::Int *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::Int v4 = a3[1];
  Swift::Int v5 = v4 - a2;
  if (__OFSUB__(v4, a2))
  {
    __break(1u);
    goto LABEL_81;
  }
  Swift::Int v7 = a2;
  Swift::Int v8 = result;
  uint64_t position = a3[2];
  if (v5 <= a2)
  {
    uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v4).position;
    if (__OFADD__(v4, v8))
    {
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    Swift::Int v10 = result;
    uint64_t position = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v4 + v8).position;
    Swift::Int v22 = a3[2] + v7;
    Swift::Int v23 = *a3;
    if (v22 < *a3) {
      Swift::Int v23 = 0;
    }
    Swift::Int v14 = v22 - v23;
    uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)(v22 - v23), v8).position;
    v11.uint64_t position = result;
    Swift::Int v18 = *a3;
    if (v10 <= 0) {
      Swift::Int v24 = *a3;
    }
    else {
      Swift::Int v24 = v10;
    }
    if (position <= 0) {
      uint64_t v25 = *a3;
    }
    else {
      uint64_t v25 = position;
    }
    if (v24 >= v14)
    {
      if (v25 < result)
      {
        if (__OFSUB__(0, v8))
        {
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        if (position >= 1)
        {
          Swift::Int v7 = v18 - v8;
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v7, position);
          uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, position).position;
        }
        BOOL v31 = __OFSUB__(v5, position);
        v5 -= position;
        if (v31)
        {
          __break(1u);
          goto LABEL_56;
        }
      }
    }
    else
    {
      if (v25 < result)
      {
        if (v10 >= 1)
        {
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v10);
          uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v8, v10).position;
        }
        if (__OFSUB__(0, v8)) {
          goto LABEL_86;
        }
        if (v8 >= 1)
        {
          v26.uint64_t position = *a3 - v8;
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)(v26, v8);
          uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v8).position;
        }
        Swift::Int v27 = v5 - v8;
        if (__OFSUB__(v5, v8)) {
          goto LABEL_87;
        }
        Swift::Int v5 = v27 - v10;
        if (__OFSUB__(v27, v10))
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        if (v5 < 1) {
          goto LABEL_66;
        }
LABEL_65:
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v14, v5);
        uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v5).position;
LABEL_66:
        Swift::Int v33 = a3[1];
        BOOL v31 = __OFADD__(v33, v8);
        Swift::Int v34 = v33 + v8;
        if (!v31)
        {
          a3[1] = v34;
          if (v11.position <= 0) {
            Swift::Int v35 = *a3;
          }
          else {
            Swift::Int v35 = v11.position;
          }
          uint64_t v36 = v14;
          goto LABEL_79;
        }
        goto LABEL_83;
      }
      if (v10 >= 1)
      {
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)(0, v10);
        uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v8, v10).position;
        Swift::Int v18 = *a3;
      }
      Swift::Int v5 = v18 - v14;
      if (__OFSUB__(v18, v14)) {
        goto LABEL_92;
      }
    }
    if (v5 <= 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  Swift::Int v10 = -result;
  if (__OFSUB__(0, result))
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v11.uint64_t position = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, -result).position;
  Swift::Int v12 = a3[2] + v7;
  Swift::Int v13 = *a3;
  if (v12 < *a3) {
    Swift::Int v13 = 0;
  }
  Swift::Int v14 = v12 - v13;
  uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)(v12 - v13), -v8).position;
  Swift::Int v5 = result;
  Swift::Int v15 = *a3;
  if (v14 <= 0) {
    uint64_t v16 = *a3;
  }
  else {
    uint64_t v16 = v14;
  }
  if (result <= 0) {
    Swift::Int v17 = *a3;
  }
  else {
    Swift::Int v17 = result;
  }
  if (v16 >= position)
  {
    if (v17 >= v11.position)
    {
      if (v7 < 1) {
        goto LABEL_74;
      }
      sub_24A5BBD00();
      Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v7);
      Swift::Int v29 = v11.position;
      Swift::Int v30 = v7;
      goto LABEL_73;
    }
    Swift::Int v28 = v15 - v11.position;
    if (__OFSUB__(v15, v11.position))
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    if (v28 < 1) {
      goto LABEL_47;
    }
    sub_24A5BBD00();
    Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v28);
    Swift::Int v20 = v11.position;
    Swift::Int v21 = v28;
    goto LABEL_46;
  }
  Swift::Int v7 = v15 - position;
  LOBYTE(v18) = __OFSUB__(v15, position);
  if (v17 < v11.position)
  {
    if (v18)
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (v7 >= 1)
    {
      sub_24A5BBD00();
      Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v7);
      uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v7).position;
    }
    if (v8 < 1) {
      goto LABEL_47;
    }
    Swift::Int v19 = *a3 - v8;
    sub_24A5BBD00();
    Deque._UnsafeHandle.slot(_:offsetBy:)(0, v8);
    Swift::Int v20 = v19;
    Swift::Int v21 = v8;
LABEL_46:
    uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v20, v21).position;
LABEL_47:
    if (v5 < 1) {
      goto LABEL_74;
    }
    sub_24A5BBD00();
    Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v8, v5);
    Swift::Int v29 = 0;
    Swift::Int v30 = v5;
    goto LABEL_73;
  }
LABEL_56:
  if ((v18 & 1) == 0)
  {
    if (v7 >= 1)
    {
      sub_24A5BBD00();
      Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v7);
      uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v7).position;
    }
    if (v14 < 1)
    {
LABEL_74:
      a3[2] = v11.position;
      Swift::Int v37 = a3[1];
      BOOL v31 = __OFADD__(v37, v8);
      Swift::Int v38 = v37 + v8;
      if (!v31)
      {
        a3[1] = v38;
        if (v14 <= 0) {
          Swift::Int v35 = *a3;
        }
        else {
          Swift::Int v35 = v14;
        }
        uint64_t v36 = v5;
LABEL_79:
        uint64_t result = Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(v36, v35, a3, (uint64_t)v42);
        char v39 = v43;
        long long v40 = v42[1];
        *(_OWORD *)a4 = v42[0];
        *(_OWORD *)(a4 + 16) = v40;
        *(unsigned char *)(a4 + 32) = v39;
        return result;
      }
      goto LABEL_84;
    }
    Swift::Int v32 = *a3 + v10;
    sub_24A5BBD00();
    Deque._UnsafeHandle.slot(_:offsetBy:)(0, v14);
    Swift::Int v29 = v32;
    Swift::Int v30 = v14;
LABEL_73:
    uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v29, v30).position;
    goto LABEL_74;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedRemoveLast()(uint64_t result)
{
  if (__OFSUB__(*(void *)(result + 8), 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    uint64_t result = sub_24A5BBD10();
    uint64_t v2 = *(void *)(v1 + 8);
    BOOL v3 = __OFSUB__(v2, 1);
    uint64_t v4 = v2 - 1;
    if (!v3)
    {
      *(void *)(v1 + 8) = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveLast(_:)(Swift::Int a1)
{
  if (a1 >= 1)
  {
    BOOL v3 = v1;
    uint64_t v5 = v1[1];
    BOOL v6 = __OFSUB__(v5, a1);
    uint64_t v7 = v5 - a1;
    if (v6)
    {
      __break(1u);
    }
    else if (v5 >= v7)
    {
      uint64_t v8 = v2;
      Deque._UnsafeHandle.segments(forOffsets:)(v7, v5, v3, (uint64_t)&v26);
      uint64_t v9 = sub_24A5BBD90();
      uint64_t v11 = v10;
      sub_24A5BB580();
      uint64_t v12 = sub_24A5BBD20();
      Swift::Int v13 = *(void (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 32);
      v13(v28, &v27, v12);
      uint64_t v14 = ((uint64_t (*)(void *, unsigned char *, uint64_t))v13)(v29, v28, v12);
      MEMORY[0x270FA5388](v14);
      void v22[2] = v8;
      uint64_t v15 = sub_24A5BBDB0();
      sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v22, MEMORY[0x263F8E628], v15, v16, (uint64_t)&v23);
      uint64_t v17 = v23;
      if (v24) {
        uint64_t v18 = v23;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v24) {
        char v19 = v25;
      }
      else {
        char v19 = 1;
      }
      if (!v25) {
        uint64_t v17 = v18;
      }
      v29[0] = v9;
      v29[1] = v11;
      _OWORD v29[2] = v17;
      v29[3] = v24;
      char v30 = v19;
      type metadata accessor for _UnsafeMutableWrappedBuffer();
      _UnsafeMutableWrappedBuffer.deinitialize()();
      uint64_t v20 = v3[1];
      BOOL v6 = __OFSUB__(v20, a1);
      uint64_t v21 = v20 - a1;
      if (!v6)
      {
        v3[1] = v21;
        return;
      }
LABEL_17:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_17;
  }
}

uint64_t Deque._UnsafeHandle.uncheckedRemoveFirst()(void *a1)
{
  uint64_t result = sub_24A5BBD10();
  uint64_t v3 = a1[2];
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a1[1];
    if (v5 >= *a1) {
      uint64_t v5 = 0;
    }
    a1[2] = v5;
    if (!__OFSUB__(v6, 1))
    {
      a1[1] = v6 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(Swift::Int a1)
{
  if (a1 >= 1)
  {
    uint64_t v3 = v2;
    BOOL v4 = (CollectionsInternal::_DequeSlot *)v1;
    Deque._UnsafeHandle.segments(forOffsets:)(0, a1, v1, (uint64_t)&v24);
    uint64_t v6 = sub_24A5BBD90();
    uint64_t v8 = v7;
    sub_24A5BB580();
    uint64_t v9 = sub_24A5BBD20();
    uint64_t v10 = *(void (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 32);
    v10(v26, &v25, v9);
    uint64_t v11 = ((uint64_t (*)(void *, unsigned char *, uint64_t))v10)(v27, v26, v9);
    MEMORY[0x270FA5388](v11);
    void v20[2] = v3;
    uint64_t v12 = sub_24A5BBDB0();
    sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v20, MEMORY[0x263F8E628], v12, v13, (uint64_t)&v21);
    uint64_t v14 = v21;
    if (v22) {
      uint64_t v15 = v21;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v22) {
      char v16 = v23;
    }
    else {
      char v16 = 1;
    }
    if (!v23) {
      uint64_t v14 = v15;
    }
    v27[0] = v6;
    v27[1] = v8;
    v27[2] = v14;
    uint64_t v27[3] = v22;
    char v28 = v16;
    type metadata accessor for _UnsafeMutableWrappedBuffer();
    _UnsafeMutableWrappedBuffer.deinitialize()();
    v4[2].Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)(v4[2], a1).position;
    Swift::Int position = v4[1].position;
    BOOL v18 = __OFSUB__(position, a1);
    Swift::Int v19 = position - a1;
    if (v18) {
      __break(1u);
    }
    else {
      v4[1].Swift::Int position = v19;
    }
  }
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveAll()()
{
  uint64_t v2 = v0 + 1;
  if ((uint64_t)v0[1] >= 1)
  {
    uint64_t v3 = v1;
    Deque._UnsafeHandle.segments()(v0, (uint64_t)&v19);
    uint64_t v4 = sub_24A5BBD90();
    uint64_t v6 = v5;
    sub_24A5BB580();
    uint64_t v7 = sub_24A5BBD20();
    uint64_t v8 = *(void (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(v21, &v20, v7);
    uint64_t v9 = ((uint64_t (*)(void *, unsigned char *, uint64_t))v8)(v22, v21, v7);
    MEMORY[0x270FA5388](v9);
    v15[2] = v3;
    uint64_t v10 = sub_24A5BBDB0();
    sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v15, MEMORY[0x263F8E628], v10, v11, (uint64_t)&v16);
    uint64_t v12 = v16;
    if (v17) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v17) {
      char v14 = v18;
    }
    else {
      char v14 = 1;
    }
    if (!v18) {
      uint64_t v12 = v13;
    }
    v22[0] = v4;
    v22[1] = v6;
    void v22[2] = v12;
    v22[3] = v17;
    char v23 = v14;
    type metadata accessor for _UnsafeMutableWrappedBuffer();
    _UnsafeMutableWrappedBuffer.deinitialize()();
    *uint64_t v2 = 0;
    v2[1] = 0;
  }
}

uint64_t Deque._UnsafeHandle._elements.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Deque._UnsafeHandle.header.getter(uint64_t a1)
{
  return *(void *)a1;
}

void *(*Deque._UnsafeHandle.count.modify(void *a1, uint64_t a2))(void *result)
{
  *a1 = *(void *)(a2 + 8);
  a1[1] = a2;
  return sub_24A541094;
}

void *sub_24A541094(void *result)
{
  *(void *)(result[1] + 8) = *result;
  return result;
}

uint64_t Deque._UnsafeHandle.startSlot.setter(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 16) = result;
  return result;
}

void *(*Deque._UnsafeHandle.startSlot.modify(void *a1, uint64_t a2))(void *result)
{
  *a1 = *(void *)(a2 + 16);
  a1[1] = a2;
  return sub_24A5410D4;
}

void *sub_24A5410D4(void *result)
{
  *(void *)(result[1] + 16) = *result;
  return result;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(after:)(CollectionsInternal::_DequeSlot after)
{
  if (__OFADD__(after.position, 1))
  {
    __break(1u);
  }
  else if (after.position + 1 >= *v1)
  {
    return 0;
  }
  else
  {
    ++after.position;
  }
  return after;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(before:)(CollectionsInternal::_DequeSlot before)
{
  if (before.position)
  {
    BOOL v2 = __OFSUB__(before.position, 1);
    result.Swift::Int position = before.position - 1;
    if (!v2) {
      return result;
    }
    __break(1u);
  }
  result.Swift::Int position = *v1 - 1;
  if (__OFSUB__(*v1, 1)) {
    __break(1u);
  }
  return result;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(_:offsetBy:)(CollectionsInternal::_DequeSlot _, Swift::Int offsetBy)
{
  BOOL v4 = __OFADD__(_.position, offsetBy);
  result.Swift::Int position = _.position + offsetBy;
  if (v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (offsetBy < 0)
  {
LABEL_7:
    if ((result.position & 0x8000000000000000) == 0) {
      return result;
    }
    BOOL v4 = __OFADD__(result.position, *v2);
    result.position += *v2;
    if (!v4) {
      return result;
    }
LABEL_11:
    __break(1u);
    return result;
  }
  BOOL v4 = __OFSUB__(result.position, *v2);
  if (result.position >= *v2)
  {
    result.position -= *v2;
    if (v4)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t Deque._UnsafeHandle.segments(forOffsets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a3[2];
  uint64_t v6 = v5 + result;
  uint64_t v7 = *a3;
  if (v5 + result >= *a3) {
    uint64_t v8 = *a3;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v5 + a2;
  if (v9 >= v7) {
    uint64_t v10 = *a3;
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = __OFSUB__(a2, result);
  uint64_t v12 = a2 - result;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = v6 - v8;
    if (!v12 || v13 < v9 - v10)
    {
      CollectionsInternal::_DequeSlot result = _UnsafeWrappedBuffer.init(start:count:)((uint64_t)v16);
      goto LABEL_13;
    }
    if (!__OFSUB__(v7, v13))
    {
      CollectionsInternal::_DequeSlot result = _UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)v16);
LABEL_13:
      char v14 = v17;
      long long v15 = v16[1];
      *(_OWORD *)a4 = v16[0];
      *(_OWORD *)(a4 + 16) = v15;
      *(unsigned char *)(a4 + 32) = v14;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.mutableSegments()@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v22);
  uint64_t v5 = sub_24A5BBD90();
  uint64_t v7 = v6;
  sub_24A5BB580();
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(v24, &v23, v8);
  v9((uint64_t *)v18, v24, v8);
  void v17[2] = a2;
  uint64_t v10 = sub_24A5BBDB0();
  uint64_t result = sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v17, MEMORY[0x263F8E628], v10, v11, (uint64_t)&v19);
  uint64_t v13 = v19;
  uint64_t v14 = v20;
  if (v20) {
    uint64_t v15 = v19;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v20) {
    char v16 = v21;
  }
  else {
    char v16 = 1;
  }
  if (!v21) {
    uint64_t v13 = v15;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v14;
  *(unsigned char *)(a3 + 32) = v16;
  return result;
}

uint64_t Deque._UnsafeHandle.mutableSegments(forOffsets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, a3, (uint64_t)&v24);
  uint64_t v7 = sub_24A5BBD90();
  uint64_t v9 = v8;
  sub_24A5BB580();
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v26, &v25, v10);
  v11((uint64_t *)v20, v26, v10);
  v19[2] = a4;
  uint64_t v12 = sub_24A5BBDB0();
  uint64_t result = sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v19, MEMORY[0x263F8E628], v12, v13, (uint64_t)&v21);
  uint64_t v15 = v21;
  uint64_t v16 = v22;
  if (v22) {
    uint64_t v17 = v21;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v22) {
    char v18 = v23;
  }
  else {
    char v18 = 1;
  }
  if (!v23) {
    uint64_t v15 = v17;
  }
  *(void *)a5 = v7;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v16;
  *(unsigned char *)(a5 + 32) = v18;
  return result;
}

uint64_t Deque._UnsafeHandle.initialize(at:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A54152C(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8D228], MEMORY[0x263F8D8C0]);
}

uint64_t Deque._UnsafeHandle.moveInitialize(at:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A54152C(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8D900], MEMORY[0x263F8D8C8]);
}

uint64_t sub_24A54152C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a3 < 1) {
    return a1;
  }
  uint64_t result = a7(a2, a3, a6);
  if (result)
  {
    uint64_t result = a8(result, a3, a5 + *(void *)(*(void *)(a6 - 8) + 72) * a1, a6);
    BOOL v14 = __OFADD__(a1, a3);
    a1 += a3;
    if (!v14) {
      return a1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::tuple_source_CollectionsInternal__DequeSlot_target_CollectionsInternal__DequeSlot __swiftcall Deque._UnsafeHandle.move(from:to:count:)(CollectionsInternal::_DequeSlot from, CollectionsInternal::_DequeSlot to, Swift::Int count)
{
  if (count >= 1)
  {
    sub_24A5BBD00();
    from.Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)(from, count).position;
    to.Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)(to, count).position;
  }
  Swift::Int position = from.position;
  Swift::Int v7 = to.position;
  result.target.Swift::Int position = v7;
  result.source.Swift::Int position = position;
  return result;
}

__n128 sub_24A541664@<Q0>(__n128 *a1@<X8>)
{
  BOOL v2 = *(__n128 **)(v1 + 16);
  unint64_t v3 = v2[1].n128_u64[0];
  __n128 result = *v2;
  *a1 = *v2;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t sub_24A54167C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  Deque._UnsafeHandle.segments()(a3, (uint64_t)v13);
  Deque._UnsafeHandle.initialize(at:from:)(a3[2], v13[0], v13[1], v8, a2, a5);
  sub_24A5BB580();
  uint64_t v9 = sub_24A5BBD20();
  uint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v15, &v14, v9);
  uint64_t result = v10(v16, v15, v9);
  if ((v17 & 1) == 0) {
    return Deque._UnsafeHandle.initialize(at:from:)(0, v16[0], v16[1], v12, a2, a5);
  }
  return result;
}

uint64_t sub_24A541780(uint64_t a1, uint64_t a2)
{
  return sub_24A54167C(a1, a2, *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t sub_24A5417A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  Deque._UnsafeHandle.segments()(a3, (uint64_t)v13);
  uint64_t v8 = Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], v7, a2, a5);
  sub_24A5BB580();
  uint64_t v9 = sub_24A5BBD20();
  uint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v15, &v14, v9);
  uint64_t result = v10(v16, v15, v9);
  if ((v17 & 1) == 0) {
    return Deque._UnsafeHandle.initialize(at:from:)(v8, v16[0], v16[1], v12, a2, a5);
  }
  return result;
}

uint64_t sub_24A5418A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = sub_24A5BC100();
  *a1 = result;
  a1[1] = v3;
  a1[2] = 0;
  return result;
}

uint64_t sub_24A5418E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  Deque._UnsafeHandle.segments()(a3, (uint64_t)&v21);
  sub_24A5BBD90();
  uint64_t v7 = v6;
  sub_24A5BB580();
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(v23, &v22, v8);
  v9((uint64_t *)v17, v23, v8);
  uint64_t v16[2] = a5;
  uint64_t v10 = sub_24A5BBDB0();
  uint64_t result = sub_24A4C10F8((void (*)(char *, char *))sub_24A5425BC, (uint64_t)v16, MEMORY[0x263F8E628], v10, v11, (uint64_t)&v18);
  uint64_t v13 = v19;
  if (v19) {
    char v14 = v20;
  }
  else {
    char v14 = 1;
  }
  if (v7 >= 1)
  {
    uint64_t result = sub_24A5BB540();
    if (!result)
    {
      __break(1u);
      goto LABEL_15;
    }
    uint64_t result = sub_24A5BBD00();
  }
  if (v13 < 1) {
    char v15 = 1;
  }
  else {
    char v15 = v14;
  }
  if ((v15 & 1) == 0)
  {
    uint64_t result = sub_24A5BB540();
    if (result) {
      return sub_24A5BBD00();
    }
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t sub_24A541AC8(uint64_t a1, uint64_t a2)
{
  return sub_24A5418E8(a1, a2, *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t sub_24A541AE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = sub_24A5BC100();
  uint64_t v5 = *(void *)(v3 + 8);
  *a1 = result;
  a1[1] = v5;
  a1[2] = 0;
  return result;
}

uint64_t sub_24A541B30(uint64_t a1, uint64_t a2)
{
  return sub_24A5417A0(a1, a2, *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t sub_24A541B50@<X0>(uint64_t *a1@<X8>)
{
  return sub_24A4C1768(a1);
}

CollectionsInternal::_DequeSlot Deque._UnsafeHandle.withUnsafeSegment<A>(startingAt:maximumCount:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, CollectionsInternal::_DequeSlot *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v38 = a10;
  uint64_t v36 = *(void *)(a10 - 8);
  uint64_t v37 = a1;
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v21 = (char *)v35 - v20;
  Swift::Int v23 = *(void *)(v22 + 8);
  if (v23 <= v24) {
    goto LABEL_17;
  }
  uint64_t v16 = v18;
  v35[0] = v17;
  v35[1] = v19;
  result.Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)(a7[2], v23).position;
  Swift::Int v26 = a7[2].position + a2;
  Swift::Int position = a7->position;
  if (v26 >= a7->position) {
    Swift::Int v28 = a7->position;
  }
  else {
    Swift::Int v28 = 0;
  }
  Swift::Int v29 = v26 - v28;
  if (v29 < result.position) {
    Swift::Int position = result.position;
  }
  BOOL v30 = __OFSUB__(position, v29);
  Swift::Int v31 = position - v29;
  if (!v30)
  {
    uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    if ((v16 & 1) == 0) {
      uint64_t v32 = v35[0];
    }
    if (v31 >= v32) {
      Swift::Int v23 = v32;
    }
    else {
      Swift::Int v23 = v31;
    }
    uint64_t v33 = sub_24A5BB550();
    a5(v33);
    if (v10) {
      return (CollectionsInternal::_DequeSlot)v23;
    }
    BOOL v30 = __OFADD__(a2, v23);
    v23 += a2;
    if (!v30)
    {
LABEL_19:
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v37, v21, v38);
      return (CollectionsInternal::_DequeSlot)v23;
    }
    __break(1u);
LABEL_17:
    uint64_t v34 = sub_24A5BB550();
    a5(v34);
    uint64_t v21 = v16;
    if (v10) {
      return (CollectionsInternal::_DequeSlot)v23;
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

Swift::Int Deque._UnsafeHandle.uncheckedPrepend(contentsOf:)(Swift::Int result, uint64_t a2, void *a3)
{
  if (a2 >= 1)
  {
    Swift::Int v5 = result;
    uint64_t v6 = a3[2];
    CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v6, -a2).position;
    a3[2] = result;
    uint64_t v7 = a3[1];
    BOOL v8 = __OFADD__(v7, a2);
    uint64_t v9 = v7 + a2;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      a3[1] = v9;
      Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(result, v6, a3, (uint64_t)v14);
      v13[0] = v5;
      v13[1] = a2;
      uint64_t v10 = type metadata accessor for _UnsafeMutableWrappedBuffer();
      uint64_t v11 = sub_24A5BB580();
      uint64_t WitnessTable = swift_getWitnessTable();
      return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v13, v10, v11, WitnessTable);
    }
  }
  return result;
}

uint64_t Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (result >= a2)
  {
    if (!__OFSUB__(*a3, result))
    {
      uint64_t v5 = sub_24A5BBD50();
      uint64_t v7 = v11;
      CollectionsInternal::_DequeSlot result = sub_24A5BBD50();
      BOOL v10 = v9 == 0;
      if (v9) {
        uint64_t v8 = result;
      }
      else {
        uint64_t v8 = 0;
      }
      goto LABEL_8;
    }
  }
  else
  {
    if (!__OFSUB__(a2, result))
    {
      CollectionsInternal::_DequeSlot result = sub_24A5BBD50();
      uint64_t v5 = result;
      uint64_t v7 = v6;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      BOOL v10 = 1;
LABEL_8:
      *(void *)a4 = v5;
      *(void *)(a4 + 8) = v7;
      *(void *)(a4 + 16) = v8;
      *(void *)(a4 + 24) = v9;
      *(unsigned char *)(a4 + 32) = v10;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int Deque._UnsafeHandle.closeGap(offsets:)(Swift::Int result, uint64_t a2, CollectionsInternal::_DequeSlot *a3)
{
  Swift::Int v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v3 < 1) {
    return result;
  }
  Swift::Int v5 = result;
  Swift::Int position = a3[1].position;
  v6.Swift::Int position = a3[2].position;
  Swift::Int v8 = a3->position;
  if (v6.position + result >= a3->position) {
    Swift::Int v9 = a3->position;
  }
  else {
    Swift::Int v9 = 0;
  }
  if (v6.position + a2 < v8) {
    Swift::Int v8 = 0;
  }
  Swift::Int v10 = position - a2;
  if (__OFSUB__(position, a2)) {
    goto LABEL_83;
  }
  uint64_t v11 = v6.position + result - v9;
  uint64_t v12 = v6.position + a2 - v8;
  if (v10 > result)
  {
    CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v3).position;
    Swift::Int v10 = result;
    if (!v5) {
      goto LABEL_68;
    }
    Swift::Int v13 = a3->position;
    if (v12 <= 0) {
      Swift::Int v14 = a3->position;
    }
    else {
      Swift::Int v14 = v12;
    }
    if (v11 <= 0) {
      Swift::Int v15 = a3->position;
    }
    else {
      Swift::Int v15 = v11;
    }
    if (v6.position >= v15)
    {
      if (v14 < result)
      {
        if (v11 >= 1)
        {
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v11);
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v3, v11);
          Swift::Int v13 = a3->position;
        }
        v27.Swift::Int position = v13 - v3;
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)(v27, v3);
        CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v3).position;
        uint64_t v11 = v5 - v12;
        if (__OFSUB__(v5, v12)) {
          goto LABEL_88;
        }
        if (v11 < 1) {
          goto LABEL_68;
        }
        uint64_t v12 = a3[2].position;
        goto LABEL_66;
      }
      if (__OFSUB__(0, v11))
      {
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v11 >= 1)
      {
        v12 -= v11;
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)(0, v11);
        CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v11).position;
      }
      BOOL v33 = __OFSUB__(v5, v11);
      uint64_t v11 = v5 - v11;
      if (v33) {
        goto LABEL_91;
      }
      goto LABEL_64;
    }
    if (v14 >= result)
    {
      if (v5 >= 1)
      {
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)(v6, v5);
        v31.Swift::Int position = v10;
        Swift::Int v32 = v5;
LABEL_67:
        CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)(v31, v32).position;
        goto LABEL_68;
      }
      goto LABEL_68;
    }
    if (v12 >= 1)
    {
      v16.Swift::Int position = v13 - v3;
      sub_24A5BBD00();
      Deque._UnsafeHandle.slot(_:offsetBy:)(v16, v12);
      CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v12).position;
    }
    uint64_t v11 = v5 - v12;
    if (!__OFSUB__(v5, v12))
    {
LABEL_64:
      if (v11 >= 1)
      {
        uint64_t v12 = a3[2].position;
LABEL_66:
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v11);
        v31.Swift::Int position = v10;
        Swift::Int v32 = v11;
        goto LABEL_67;
      }
LABEL_68:
      a3[2].Swift::Int position = v10;
      Swift::Int v34 = a3[1].position;
      BOOL v33 = __OFSUB__(v34, v3);
      Swift::Int v35 = v34 - v3;
      if (!v33) {
        goto LABEL_80;
      }
      __break(1u);
      goto LABEL_71;
    }
    __break(1u);
  }
  CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)(v6, position).position;
  if (__OFSUB__(position, v3))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  Swift::Int v17 = a3[2].position + position - v3;
  Swift::Int v18 = a3->position;
  if (v17 >= a3->position) {
    Swift::Int v19 = a3->position;
  }
  else {
    Swift::Int v19 = 0;
  }
  if (v10)
  {
    Swift::Int v20 = result;
    Swift::Int v21 = v17 - v19;
    if (v17 - v19 <= 0) {
      Swift::Int v22 = a3->position;
    }
    else {
      Swift::Int v22 = v17 - v19;
    }
    if (result <= 0) {
      Swift::Int v23 = a3->position;
    }
    else {
      Swift::Int v23 = result;
    }
    if (v12 >= v23)
    {
      Swift::Int v28 = v18 - v12;
      BOOL v29 = __OFSUB__(v18, v12);
      if (v22 >= v11)
      {
        if (v29)
        {
LABEL_92:
          __break(1u);
          return result;
        }
        if (v28 >= 1)
        {
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v28);
          CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v28).position;
          uint64_t v11 = result;
        }
        if (v20 >= 1)
        {
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v20);
          v25.Swift::Int position = v11;
          Swift::Int v26 = v20;
          goto LABEL_78;
        }
      }
      else
      {
        if (v29)
        {
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        if (v28 >= 1)
        {
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v28);
          uint64_t v11 = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v28).position;
        }
        sub_24A5BBD00();
        v30.Swift::Int position = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v3).position;
        CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v3).position;
        if (v21 >= 1)
        {
          sub_24A5BBD00();
          Deque._UnsafeHandle.slot(_:offsetBy:)(v30, v21);
          v25.Swift::Int position = 0;
          Swift::Int v26 = v21;
          goto LABEL_78;
        }
      }
    }
    else
    {
      if (v22 >= v11)
      {
LABEL_71:
        if (v10 < 1) {
          goto LABEL_79;
        }
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v10);
        v25.Swift::Int position = v11;
        Swift::Int v26 = v10;
        goto LABEL_78;
      }
      Swift::Int v24 = v18 - v11;
      if (__OFSUB__(v18, v11))
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      if (v24 >= 1)
      {
        sub_24A5BBD00();
        uint64_t v12 = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v24).position;
        CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v24).position;
      }
      if (__OFSUB__(v10, v24)) {
        goto LABEL_87;
      }
      if (v10 - v24 >= 1)
      {
        sub_24A5BBD00();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v10 - v24);
        v25.Swift::Int position = 0;
        Swift::Int v26 = v10 - v24;
LABEL_78:
        CollectionsInternal::_DequeSlot result = Deque._UnsafeHandle.slot(_:offsetBy:)(v25, v26).position;
      }
    }
  }
LABEL_79:
  Swift::Int v36 = a3[1].position;
  BOOL v33 = __OFSUB__(v36, v3);
  Swift::Int v35 = v36 - v3;
  if (v33)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
LABEL_80:
  a3[1].Swift::Int position = v35;
  return result;
}

uint64_t type metadata accessor for Deque._UnsafeHandle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A5425BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_24A541B50(a1);
}

uint64_t TreeSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a6;
  uint64_t v36 = a5;
  uint64_t v37 = a2;
  uint64_t v39 = a4;
  uint64_t v11 = MEMORY[0x263F8EE60] + 8;
  uint64_t v12 = type metadata accessor for _HashNode.Builder();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  Swift::Int v32 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  BOOL v33 = (char *)&v32 - v16;
  uint64_t v17 = sub_24A5BBD20();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  Swift::Int v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::Int v23 = (char *)&v32 - v22;
  uint64_t v35 = a8;
  uint64_t v31 = a8;
  uint64_t v24 = a7;
  uint64_t v38 = a1;
  _HashNode.symmetricDifference<A>(_:_:)(0, a1, v37, v39, v36, a7, v11, v11, (unsigned char *)&v32 - v22, v31);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    swift_release();
    CollectionsInternal::_DequeSlot v25 = *(void (**)(char *, uint64_t))(v18 + 8);
    v25(v23, v17);
    v25(v21, v17);
    return swift_retain();
  }
  else
  {
    CollectionsInternal::_DequeSlot v27 = v33;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v33, v21, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v27, v12);
    uint64_t v28 = sub_24A5566C8(v12);
    uint64_t v30 = v29;
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    return TreeSet.init(_new:)(v28, v30, v24, v35);
  }
}

uint64_t TreeSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v37 = a2;
  uint64_t v38 = a8;
  uint64_t v34 = a6;
  uint64_t v36 = a5;
  uint64_t v40 = a4;
  uint64_t v11 = MEMORY[0x263F8EE60] + 8;
  uint64_t v12 = type metadata accessor for _HashNode.Builder();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  Swift::Int v32 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  BOOL v33 = (char *)&v31 - v16;
  uint64_t v17 = sub_24A5BBD20();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  Swift::Int v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::Int v23 = (char *)&v31 - v22;
  uint64_t v35 = a9;
  uint64_t v24 = v37;
  uint64_t v39 = a1;
  uint64_t v37 = a7;
  _HashNode.symmetricDifference<A>(_:_:)(0, a1, v24, v40, v36, a7, v11, v38, (unsigned char *)&v31 - v22, a9);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    swift_release();
    CollectionsInternal::_DequeSlot v25 = *(void (**)(char *, uint64_t))(v18 + 8);
    v25(v23, v17);
    v25(v21, v17);
    return swift_retain();
  }
  else
  {
    CollectionsInternal::_DequeSlot v27 = v33;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v33, v21, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v27, v12);
    uint64_t v28 = sub_24A5566C8(v12);
    uint64_t v30 = v29;
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    return TreeSet.init(_new:)(v28, v30, v37, v35);
  }
}

uint64_t TreeSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, char *, uint64_t))
{
  uint64_t v63 = a4;
  uint64_t v64 = (void (**)(void, void))a3;
  uint64_t v65 = a2;
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState();
  uint64_t v60 = *(void (***)(char *, uint64_t))(updated - 8);
  uint64_t v14 = MEMORY[0x270FA5388](updated);
  uint64_t v66 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v61 = *(void (***)(uint64_t, char *, uint64_t))(a5 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v70 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v67 = (char *)&v53 - v21;
  long long v62 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v68 = (char *)&v53 - v23;
  uint64_t v24 = *(void *)(a6 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  CollectionsInternal::_DequeSlot v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v53 - v28;
  uint64_t v30 = type metadata accessor for TreeSet();
  uint64_t v31 = *(void (**)(void, void, void))(v24 + 16);
  if (v30 == a6)
  {
    v31(v29, a1, a6);
    swift_dynamicCast();
    uint64_t v47 = TreeSet.symmetricDifference(_:)(v71, (uint64_t)v72, v48, v65, (uint64_t)v64, (uint64_t)v63, a5, a7);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, a6);
  }
  else
  {
    uint64_t v56 = updated;
    uint64_t v57 = v24;
    uint64_t v32 = a7;
    v31(v27, a1, a6);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&qword_26979B020);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
      uint64_t v71 = v65;
      uint64_t v72 = v64;
      uint64_t v54 = a1;
      v31(v29, a1, a6);
      swift_retain();
      sub_24A5BB840();
      uint64_t v55 = a6;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v34 = v67;
      uint64_t v65 = AssociatedConformanceWitness;
      sub_24A5BBEE0();
      uint64_t v35 = v61;
      uint64_t v63 = v61[6];
      uint64_t v64 = (void (**)(void, void))(v61 + 6);
      int v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v63)(v34, 1, a5);
      uint64_t v37 = v32;
      uint64_t v38 = v56;
      uint64_t v39 = v70;
      if (v36 != 1)
      {
        uint64_t v41 = v35[4];
        uint64_t v40 = v35 + 4;
        uint64_t v61 = (void (**)(uint64_t, char *, uint64_t))(v60 + 2);
        long long v62 = v41;
        ++v60;
        uint64_t v59 = MEMORY[0x263F8EE60] + 8;
        uint64_t v42 = (uint64_t)v66;
        do
        {
          v62(v39, v34, a5);
          uint64_t v43 = sub_24A5B85E4();
          uint64_t v44 = (void *)type metadata accessor for _HashNode();
          uint64_t v45 = v43;
          uint64_t v39 = v70;
          _HashNode.prepareValueUpdate(_:_:)(v70, v45, v44, (uint64_t)v18);
          v18[*(int *)(v38 + 44)] = v18[*(int *)(v38 + 56)];
          (*v61)(v42, v18, v38);
          uint64_t v46 = v44;
          uint64_t v34 = v67;
          _HashNode.finalizeValueUpdate(_:)(v42, v46);
          (*v60)(v18, v38);
          ((void (*)(uint64_t, uint64_t))*(v40 - 3))(v39, a5);
          sub_24A5BBEE0();
        }
        while (((unsigned int (*)(char *, uint64_t, uint64_t))v63)(v34, 1, a5) != 1);
      }
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v54, v55);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v68, AssociatedTypeWitness);
      return TreeSet.init(_new:)(v71, (uint64_t)v72, a5, v37);
    }
    else
    {
      v31(v29, a1, a6);
      uint64_t v49 = TreeSet.init<A>(_:)((uint64_t)v29, a5, a6, a7, (uint64_t)v62);
      uint64_t v47 = TreeSet.symmetricDifference(_:)(v49, v50, v51, v65, (uint64_t)v64, (uint64_t)v63, a5, a7);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(a1, a6);
    }
  }
  return v47;
}

uint64_t BitSet.union(_:)(int8x16_t *a1, int8x16_t *a2)
{
  unint64_t v4 = a2[1].u64[0];
  unint64_t v5 = a1[1].u64[0];
  if (v5 <= v4) {
    uint64_t v6 = a2[1].i64[0];
  }
  else {
    uint64_t v6 = a1[1].i64[0];
  }
  if (v6)
  {
    uint64_t result = sub_24A5BB990();
    *(void *)(result + 16) = v6;
  }
  else
  {
    uint64_t result = MEMORY[0x263F8EE78];
  }
  unint64_t v8 = v5 - v4;
  if (v5 >= v4) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 < 0xA)
    {
      uint64_t v10 = 0;
LABEL_13:
      unint64_t v11 = v9 - v10;
      uint64_t v12 = 8 * v10 + 32;
      uint64_t v13 = (uint64_t *)(result + v12);
      uint64_t v14 = (uint64_t *)((char *)a1->i64 + v12);
      uint64_t v15 = (uint64_t *)((char *)a2->i64 + v12);
      do
      {
        uint64_t v17 = *v15++;
        uint64_t v16 = v17;
        uint64_t v18 = *v14++;
        *v13++ = v18 | v16;
        --v11;
      }
      while (v11);
      goto LABEL_15;
    }
    uint64_t v10 = 0;
    if ((unint64_t)(result - (void)a2) < 0x20) {
      goto LABEL_13;
    }
    if ((unint64_t)(result - (void)a1) < 0x20) {
      goto LABEL_13;
    }
    uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    uint64_t v43 = a2 + 3;
    uint64_t v44 = a1 + 3;
    uint64_t v45 = (int8x16_t *)(result + 48);
    uint64_t v46 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v47 = vorrq_s8(*v44, *v43);
      v45[-1] = vorrq_s8(v44[-1], v43[-1]);
      *uint64_t v45 = v47;
      v43 += 2;
      v44 += 2;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (v9 != v10) {
      goto LABEL_13;
    }
  }
LABEL_15:
  unint64_t v19 = v4 - v5;
  if (v4 < v5)
  {
    if (v8 < 0xC) {
      goto LABEL_21;
    }
    uint64_t v20 = 8 * v4;
    if (8 * v4 + result - ((unint64_t)a1 + 8 * v4) < 0x20) {
      goto LABEL_21;
    }
    v4 += v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = v20 + 48;
    uint64_t v22 = (_OWORD *)(result + v20 + 48);
    uint64_t v23 = &a1->i8[v21];
    unint64_t v24 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      _OWORD *v22 = v25;
      v22 += 2;
      v23 += 32;
      v24 -= 4;
    }
    while (v24);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      unint64_t v26 = v5 - v4;
      uint64_t v27 = 8 * v4 + 32;
      uint64_t v28 = (void *)(result + v27);
      uint64_t v29 = (uint64_t *)((char *)a1->i64 + v27);
      do
      {
        uint64_t v30 = *v29++;
        *v28++ = v30;
        --v26;
      }
      while (v26);
    }
    goto LABEL_33;
  }
  if (v5 == v4) {
    goto LABEL_33;
  }
  if (v5 < v4)
  {
    if (v19 < 0xC) {
      goto LABEL_31;
    }
    uint64_t v31 = 8 * v5;
    if (8 * v5 + result - ((unint64_t)a2 + 8 * v5) < 0x20) {
      goto LABEL_31;
    }
    v5 += v19 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v32 = v31 + 48;
    BOOL v33 = (_OWORD *)(result + v31 + 48);
    uint64_t v34 = &a2->i8[v32];
    unint64_t v35 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *BOOL v33 = v36;
      v33 += 2;
      v34 += 32;
      v35 -= 4;
    }
    while (v35);
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      unint64_t v37 = v4 - v5;
      uint64_t v38 = 8 * v5 + 32;
      uint64_t v39 = (void *)(result + v38);
      uint64_t v40 = (uint64_t *)((char *)a2->i64 + v38);
      do
      {
        uint64_t v41 = *v40++;
        *v39++ = v41;
        --v37;
      }
      while (v37);
    }
LABEL_33:
    if (v6)
    {
      if (*(void *)(result + 32 + 8 * v6 - 8))
      {
        uint64_t v42 = v6;
LABEL_48:
        *(void *)(result + 16) = v42;
        return result;
      }
      uint64_t v48 = v6;
      while (1)
      {
        uint64_t v42 = v48 - 1;
        if (v48 - 1 < 1) {
          break;
        }
        if (*(void *)(result + 16 + 8 * v48--))
        {
          if (v6 >= v42) {
            goto LABEL_48;
          }
          __break(1u);
          break;
        }
      }
    }
    uint64_t v42 = 0;
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

uint64_t BitSet.union(_:)(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  return BitSet.union(_:)(a1, a3);
}

char *BitSet.union(_:)(char *result, unint64_t a2, uint64_t a3)
{
  if (((a2 | (unint64_t)result) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  Swift::Int v3 = (char *)a3;
  unint64_t v4 = a2;
  unint64_t v5 = (unint64_t)result;
  if (result == (char *)a2)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  unint64_t v6 = (a2 + 63) >> 6;
  unint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = v6 - v7;
  if (v6 <= v7)
  {
    swift_bridgeObjectRetain();
LABEL_8:
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_9:
      _UnsafeBitSet.formUnion(_:)(v5, v4);
      return v3;
    }
LABEL_12:
    Swift::Int v3 = sub_24A499D60((uint64_t)v3);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 - v7) >= 0)
  {
    swift_bridgeObjectRetain();
    sub_24A4D5F98(v8, 0);
    Swift::Int v3 = (char *)a3;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

char *BitSet.union<A>(_:)(uint64_t a1, int8x16_t *a2, ValueMetadata *a3)
{
  Swift::Int v3 = a3;
  uint64_t Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == &type metadata for BitSet)
  {
    Swift::Int v3 = &type metadata for BitSet;
    Description[2](v8, a1, &type metadata for BitSet);
LABEL_7:
    swift_dynamicCast();
    uint64_t v10 = BitSet.union(_:)((int8x16_t *)v12[0], a2);
    swift_bridgeObjectRelease();
LABEL_9:
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, v3);
    return (char *)v10;
  }
  if (v3 == &type metadata for BitSet.Counted)
  {
    Swift::Int v3 = &type metadata for BitSet.Counted;
    Description[2](v8, a1, &type metadata for BitSet.Counted);
    goto LABEL_7;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0) == v3)
  {
    Description[2](v8, a1, v3);
    swift_dynamicCast();
    uint64_t v10 = (uint64_t)BitSet.union(_:)(v12[0], (unint64_t)v12[1], (uint64_t)a2);
    goto LABEL_9;
  }
  v12[0] = (char *)a2;
  Description[2](v8, a1, v3);
  swift_bridgeObjectRetain();
  BitSet.formUnion<A>(_:)((uint64_t)v8, v3);
  ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, v3);
  return v12[0];
}

uint64_t BitSet.formUnion(_:)(int8x16_t *a1)
{
  unint64_t v4 = a1[1].u64[0];
  if (v4 << 6 >= 0xFFFFFFFFFFFFFFC0)
  {
    __break(1u);
LABEL_24:
    uint64_t result = (uint64_t)sub_24A499D60(v1);
    uint64_t v1 = result;
LABEL_6:
    unint64_t v8 = *(void *)(v1 + 16);
    if (v4 < v8) {
      unint64_t v8 = v4;
    }
    if (!v8) {
      goto LABEL_22;
    }
    if (v8 >= 6
      && ((uint64_t v9 = 8 * v8 + 32, v1 + 32 < (unint64_t)v3->u64 + v9)
        ? (BOOL v10 = (unint64_t)&v3[2] >= v1 + v9)
        : (BOOL v10 = 1),
          v10))
    {
      uint64_t v11 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      uint64_t v12 = v3 + 3;
      uint64_t v13 = (int8x16_t *)(v1 + 48);
      uint64_t v14 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v15 = vorrq_s8(*v13, *v12);
        v13[-1] = vorrq_s8(v13[-1], v12[-1]);
        int8x16_t *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v8 == v11) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v16 = v8 - v11;
    uint64_t v17 = 8 * v11 + 32;
    uint64_t v18 = (void *)(v1 + v17);
    unint64_t v19 = (uint64_t *)((char *)v3->i64 + v17);
    do
    {
      uint64_t v20 = *v19++;
      *v18++ |= v20;
      --v16;
    }
    while (v16);
LABEL_22:
    *uint64_t v2 = v1;
    return result;
  }
  Swift::Int v3 = a1;
  unint64_t v5 = ((v4 << 6) + 63) >> 6;
  uint64_t v1 = *v2;
  unint64_t v6 = *(void *)(*v2 + 16);
  uint64_t result = v5 - v6;
  if (v5 <= v6)
  {
LABEL_5:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
  if ((uint64_t)(v5 - v6) >= 0)
  {
    sub_24A4D5F98(result, 0);
    uint64_t v1 = *v2;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t BitSet.formUnion(_:)(unint64_t result, unint64_t a2)
{
  if (((a2 | result) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    unint64_t v6 = sub_24A499D60((uint64_t)v6);
    goto LABEL_7;
  }
  unint64_t v4 = a2;
  unint64_t v5 = result;
  if (result == a2) {
    return result;
  }
  uint64_t v2 = v3;
  unint64_t v7 = (a2 + 63) >> 6;
  unint64_t v6 = *v3;
  unint64_t v8 = *((void *)*v3 + 2);
  uint64_t result = v7 - v8;
  if (v7 > v8)
  {
    if ((uint64_t)(v7 - v8) < 0)
    {
      __break(1u);
      return result;
    }
    sub_24A4D5F98(result, 0);
    unint64_t v6 = *v3;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t result = _UnsafeBitSet.formUnion(_:)(v5, v4);
  *uint64_t v2 = v6;
  return result;
}

uint64_t BitSet.formUnion<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  Swift::Int v3 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  BOOL v10 = (char *)&v21 - v9;
  uint64_t Description = (void (**)(char *, void, ValueMetadata *))a2[-1].Description;
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    a2 = &type metadata for BitSet;
    Description[2](v13, a1, &type metadata for BitSet);
LABEL_8:
    swift_dynamicCast();
    BitSet.formUnion(_:)(v23);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    a2 = &type metadata for BitSet.Counted;
    Description[2](v13, a1, &type metadata for BitSet.Counted);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0);
  Description[2](v13, a1, a2);
  if ((ValueMetadata *)v14 == a2)
  {
    swift_dynamicCast();
    BitSet.formUnion(_:)((unint64_t)v23, v24);
    return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
  }
  uint64_t v21 = v7;
  uint64_t v22 = a1;
  sub_24A5BB840();
  swift_getAssociatedConformanceWitness();
  uint64_t result = sub_24A5BBEE0();
  if (v24)
  {
LABEL_5:
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(v22, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v10, AssociatedTypeWitness);
  }
  else
  {
    unint64_t v16 = (unint64_t)v23;
    while ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v17 = *v3;
      unint64_t v18 = *((void *)*v3 + 2);
      BOOL v19 = v16 >> 6 >= v18;
      uint64_t v20 = (v16 >> 6) - v18;
      if (v19)
      {
        if (v20 < -1) {
          goto LABEL_22;
        }
        sub_24A4D5F98(v20 + 1, 0);
        uint64_t v17 = *v3;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = sub_24A499D60((uint64_t)v17);
      }
      *(void *)&v17[8 * (v16 >> 6) + 32] |= 1 << v16;
      *Swift::Int v3 = v17;
      uint64_t result = sub_24A5BBEE0();
      unint64_t v16 = (unint64_t)v23;
      if (v24 == 1) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall TreeDictionary._invalidateIndices()()
{
  ++*(void *)(v0 + 16);
}

uint64_t TreeDictionary.Index.init(_root:version:path:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_DWORD *)(a6 + 32) = a5;
  *(unsigned char *)(a6 + 36) = BYTE4(a5);
  *(unsigned char *)(a6 + 37) = BYTE5(a5) & 1;
  return result;
}

BOOL TreeDictionary._isValid(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *a1 == a2 && a1[1] == a4;
}

BOOL TreeDictionary.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t TreeDictionary.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t TreeDictionary.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  if (*(_DWORD *)(a1 + 16))
  {
    char v7 = 0;
    char v8 = 1;
    uint64_t v9 = a1;
  }
  else
  {
    char v7 = 0;
    uint64_t v9 = a1;
    do
    {
      uint64_t result = swift_beginAccess();
      int v10 = *(_DWORD *)(v9 + 20);
      BOOL v11 = *(_DWORD *)(v9 + 16) == v10 || v10 == 0;
      char v8 = !v11;
      if (v11) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 32);
      uint64_t result = swift_beginAccess();
      v7 += 5;
    }
    while (!*(_DWORD *)(v9 + 16));
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v9;
  *(_DWORD *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 36) = v7;
  *(unsigned char *)(a3 + 37) = v8;
  return result;
}

uint64_t TreeDictionary.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
  v7.i16[0] = vaddlv_u8(v7);
  __int32 v8 = v7.i32[0];
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a1 + 20)) {
    __int32 v8 = 0;
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = a1;
  *(_DWORD *)(a3 + 32) = v8;
  *(_WORD *)(a3 + 36) = 0;
  return result;
}

uint64_t TreeDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = MEMORY[0x270FA5388](TupleTypeMetadata2);
  BOOL v19 = (char *)&v25 - v18;
  if (*(void *)a3 != a4 || *(void *)(a3 + 8) != a6 || (*(unsigned char *)(a3 + 37) & 1) == 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = nullsub_1(*(void *)(a3 + 24) + 16, *(void *)(a3 + 24) + 32, a7, a8, a9);
    sub_24A5446B4(v22, v23, a3, a7, a8, a9, (uint64_t)v19);
    unint64_t v24 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a7 - 8) + 32))(a1, v19, a7);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a8 - 8) + 32))(a2, v24, a8);
  }
  return result;
}

uint64_t TreeDictionary.formIndex(after:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)result == a2 && *(void *)(result + 8) == a4)
  {
    uint64_t result = _UnsafePath.findSuccessorItem(under:)(a2);
    if (result) {
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeDictionary.index(after:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_OWORD *)unint64_t v6 = *(_OWORD *)result;
  *(_OWORD *)&unsigned char v6[16] = *(_OWORD *)(result + 16);
  *(void *)&v6[30] = *(void *)(result + 30);
  if (*(void *)result == a2 && *(void *)&v6[8] == a3)
  {
    uint64_t result = _UnsafePath.findSuccessorItem(under:)(a2);
    if (result)
    {
      *(void *)a4 = *(void *)v6;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)&v6[8];
      *(void *)(a4 + 24) = *(void *)&v6[24];
      *(_DWORD *)(a4 + 32) = *(_DWORD *)&v6[32];
      *(unsigned char *)(a4 + 36) = v6[36];
      *(unsigned char *)(a4 + 37) = v6[37];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeDictionary.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (*(void *)result == a3 && *(void *)(result + 8) == a4)
  {
    long long v8 = *(_OWORD *)(result + 16);
    *(_OWORD *)int8x16_t v15 = *(_OWORD *)result;
    *(_OWORD *)&unsigned char v15[16] = v8;
    *(void *)&v15[30] = *(void *)(result + 30);
    uint64_t v14 = a2;
    uint64_t result = sub_24A526FA8(0, (uint64_t)&v15[16], &v14, a3);
    if ((result & 1) != 0 || a2 >= 1 && !v14)
    {
      uint64_t v9 = *(void *)&v15[24];
      int v10 = *(_DWORD *)&v15[32];
      char v11 = v15[36];
      char v12 = v15[37];
      long long v13 = *(_OWORD *)&v15[8];
      *(void *)a5 = *(void *)v15;
      *(_OWORD *)(a5 + 8) = v13;
      *(void *)(a5 + 24) = v9;
      *(_DWORD *)(a5 + 32) = v10;
      *(unsigned char *)(a5 + 36) = v11;
      *(unsigned char *)(a5 + 37) = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeDictionary.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (*(void *)result == a4 && *(void *)(result + 8) == a5 && *(void *)a3 == a4 && *(void *)(a3 + 8) == a5)
  {
    *(_OWORD *)unint64_t v16 = *(_OWORD *)result;
    *(_OWORD *)&v16[16] = *(_OWORD *)(result + 16);
    *(void *)&v16[30] = *(void *)(result + 30);
    if (*(unsigned char *)(a3 + 37)) {
      uint64_t v10 = 0x10000000000;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t result = _RawHashNode.seek(_:_:offsetBy:limitedBy:)(0, (uint64_t)&v16[16], a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(unsigned int *)(a3 + 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 36) << 32) | v10, a4);
    if (result)
    {
      uint64_t v11 = *(void *)v16;
      long long v14 = *(_OWORD *)&v16[8];
      uint64_t v12 = *(void *)&v16[24];
      if (v16[37]) {
        uint64_t v15 = 0x10000000000;
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v13 = *(unsigned int *)&v16[32] | ((unint64_t)v16[36] << 32) | v15;
    }
    else
    {
      if ((result & 0x100) == 0) {
        goto LABEL_23;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      long long v14 = 0uLL;
    }
    *(void *)a6 = v11;
    *(_OWORD *)(a6 + 8) = v14;
    *(void *)(a6 + 24) = v12;
    *(_DWORD *)(a6 + 32) = v13;
    *(_WORD *)(a6 + 36) = WORD2(v13);
    return result;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t TreeDictionary.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)result == a3 && *(void *)(result + 8) == a5 && *(void *)a2 == a3 && *(void *)(a2 + 8) == a5)
  {
    uint64_t v8 = 0x10000000000;
    if (*(unsigned char *)(result + 37)) {
      uint64_t v9 = 0x10000000000;
    }
    else {
      uint64_t v9 = 0;
    }
    if (!*(unsigned char *)(a2 + 37)) {
      uint64_t v8 = 0;
    }
    return _RawHashNode.distance(_:from:to:)(0, *(void *)(result + 16), *(void *)(result + 24), *(unsigned int *)(result + 32) | ((unint64_t)*(unsigned __int8 *)(result + 36) << 32) | v9, *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 36) << 32) | v8, a3, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TreeDictionary.Index._root.getter()
{
  return *(void *)v0;
}

uint64_t TreeDictionary.Index._version.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TreeDictionary.Index._version.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*TreeDictionary.Index._version.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t TreeDictionary.Index._path.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t TreeDictionary.Index._path.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = result;
  *(void *)(v3 + 24) = a2;
  *(_DWORD *)(v3 + 32) = a3;
  *(unsigned char *)(v3 + 36) = BYTE4(a3);
  *(unsigned char *)(v3 + 37) = BYTE5(a3) & 1;
  return result;
}

uint64_t (*TreeDictionary.Index._path.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t static TreeDictionary.Index.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (*(void *)result == *(void *)a2 && *(void *)(result + 8) == *(void *)(a2 + 8))
  {
    if (*(unsigned __int8 *)(result + 36) == *(unsigned __int8 *)(a2 + 36)
      && *(void *)(result + 16) == *(void *)(a2 + 16)
      && *(_DWORD *)(result + 32) == *(_DWORD *)(a2 + 32))
    {
      return (((*(unsigned char *)(result + 37) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 37)) & 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL static TreeDictionary.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if (*(void *)result == *(void *)a2 && *(void *)(result + 8) == *(void *)(a2 + 8)) {
    return sub_24A527694(*(void *)(result + 16), *(_DWORD *)(result + 32), *(unsigned char *)(result + 36), *(unsigned char *)(result + 37) & 1, *(void *)(a2 + 16), *(_DWORD *)(a2 + 32), *(unsigned char *)(a2 + 36), *(unsigned char *)(a2 + 37) & 1);
  }
  __break(1u);
  return result;
}

uint64_t TreeDictionary.Index.hash(into:)()
{
  return sub_24A5BC640();
}

uint64_t TreeDictionary.Index.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A544644()
{
  return sub_24A5BC690();
}

uint64_t _s19CollectionsInternal14TreeDictionaryV5IndexV11descriptionSSvg_0()
{
  uint64_t v1 = 0x10000000000;
  if (!*(unsigned char *)(v0 + 37)) {
    uint64_t v1 = 0;
  }
  return _UnsafePath.description.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32) | v1);
}

uint64_t sub_24A5446B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(*(unsigned int *)(a3 + 32), a1, a2, a4, a5, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 16))(a7, v8, TupleTypeMetadata2);
}

uint64_t sub_24A54475C@<X0>(uint64_t a1@<X8>)
{
  return TreeDictionary.startIndex.getter(*v1, v1[2], a1);
}

uint64_t sub_24A544768@<X0>(uint64_t a1@<X8>)
{
  return TreeDictionary.endIndex.getter(*v1, v1[2], a1);
}

void (*sub_24A544774(void *a1, uint64_t a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  uint8x8_t v7 = malloc(0x68uLL);
  *a1 = v7;
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[9] = TupleTypeMetadata2;
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  v7[10] = v11;
  uint64_t v12 = (char *)malloc(*(void *)(v11 + 64));
  v7[11] = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint8x8_t v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v13;
  *(void *)((char *)v7 + 30) = *(void *)(a2 + 30);
  long long v14 = sub_24A544980(v7 + 5, (uint64_t)v7, *v3, v3[1], v3[2], v8, v9, a3[4]);
  uint64_t v16 = v15;
  v7[12] = v14;
  (*(void (**)(char *))(*(void *)(v8 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v16, v9);
  return sub_24A544904;
}

void sub_24A544904(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 40;
  (*(void (**)(void, void))(*(void *)(*a1 + 80) + 8))(*(void *)(*a1 + 88), *(void *)(*a1 + 72));
  unint64_t v5 = *(void **)(v3 + 88);
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*sub_24A544980(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v16;
  uint64_t v17 = malloc(*(void *)(v16 + 64));
  a1[2] = (uint64_t)v17;
  TreeDictionary.subscript.getter((uint64_t)v17, (uint64_t)v17 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, v18, a5, a6, a7, a8);
  return sub_24A50EF90;
}

BOOL sub_24A544A9C(uint64_t a1)
{
  return TreeDictionary.isEmpty.getter(a1, *(void *)(v1 + 8));
}

double sub_24A544AA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TreeDictionary.index(_:offsetBy:)(a1, a2, *v3, v3[2], (uint64_t)&v7);
  double result = *(double *)&v7;
  long long v6 = *(_OWORD *)v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 30) = *(void *)&v8[14];
  return result;
}

uint64_t sub_24A544AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TreeDictionary.index(_:offsetBy:limitedBy:)(a1, a2, a3, *v4, v4[2], (uint64_t)v8);
  type metadata accessor for TreeDictionary.Index();
  uint64_t v6 = sub_24A5BBD20();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a4, v8, v6);
}

uint64_t sub_24A544B90(uint64_t a1, uint64_t a2)
{
  return TreeDictionary.distance(from:to:)(a1, a2, *v2, v2[1], v2[2]);
}

__n128 sub_24A544B9C@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  int v5 = *((_DWORD *)a1 + 8);
  char v6 = *((unsigned char *)a1 + 36);
  char v7 = *((unsigned char *)a1 + 37);
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v10 = v2[2];
  uint64_t v16 = *a1;
  __n128 v17 = *(__n128 *)(a1 + 1);
  uint64_t v18 = v4;
  int v19 = v5;
  char v20 = v6;
  char v21 = v7;
  TreeDictionary.formIndex(after:)((uint64_t)&v16, v8, v9, v10);
  uint64_t v11 = v18;
  int v12 = v19;
  char v13 = v20;
  char v14 = v21;
  __n128 result = v17;
  *(void *)a2 = v16;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 36) = v13;
  *(unsigned char *)(a2 + 37) = v14;
  return result;
}

uint64_t sub_24A544C34(uint64_t a1)
{
  return TreeDictionary.formIndex(after:)(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_24A544C40()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A544C5C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A544C78()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TreeDictionary.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A544CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a2, a1);
}

uint64_t _HashNode.replaceItem(at:_:with:)(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a5;
  uint64_t v26 = a4;
  unsigned int v29 = a1;
  unsigned int v30 = a2;
  uint64_t v6 = *(void *)(a5 + 16);
  uint64_t v7 = *(void *)(a5 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = (char *)&v25 + *(int *)(v13 + 48) - v14;
  uint64_t v17 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))((char *)&v25 - v14, a3, v6);
  uint64_t v18 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v16, v26, v7);
  int v19 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v12, v15, v6);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v19, v16, v7);
  uint64_t v20 = *(void *)(v27 + 32);
  uint64_t v21 = nullsub_1(*v28 + 16, *v28 + 32, v6, v7, v20);
  sub_24A545AE8(v21, v22, v29, v30, (uint64_t)v12, v6, v7, v20);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v15, TupleTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v12, TupleTypeMetadata2);
}

uint64_t _HashNode.replacingChild(_:at:_:with:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  v127 = a6;
  uint64_t v128 = a2;
  LODWORD(v121) = a3;
  int v126 = a1;
  uint64_t v125 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v117 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  v114 = &v101[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v113 = &v101[-v17];
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v116 = &v101[-v19];
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v115 = &v101[-v21];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v112 = &v101[-v23];
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v118 = &v101[-v25];
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (uint64_t *)&v101[-v27];
  MEMORY[0x270FA5388](v26);
  v119 = (uint64_t *)&v101[-v29];
  uint64_t v30 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  v123 = (uint64_t *)&v101[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v32);
  unint64_t v35 = (uint64_t *)&v101[-v34];
  nullsub_1(a5 + 16, a5 + 32, a7, a8, a10);
  uint64_t v36 = type metadata accessor for _HashNode.Builder();
  uint64_t v37 = *(int *)(v36 + 44);
  uint64_t v124 = a4;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 16))(v35, a4 + v37, v30);
  uint64_t v122 = v30;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v59 = *v35;
      uint64_t v60 = v35[1];
      uint64_t v61 = sub_24A48AB90();
      uint64_t v62 = a5;
      uint64_t v63 = (void (*)(void, void, void))v127;
      goto LABEL_12;
    case 2u:
      uint64_t v59 = *v35;
      uint64_t v60 = v35[1];
      uint64_t v64 = (void (*)(void, void, void))v127;
      if (_HashNode.hasSingletonChild.getter(a5, (uint64_t)v127, a7, a8, a10))
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v124, v36);
        uint64_t v65 = v123;
        uint64_t *v123 = v59;
        v65[1] = v60;
      }
      else
      {
        uint64_t v61 = sub_24A48AB90();
        uint64_t v62 = a5;
        uint64_t v63 = v64;
LABEL_12:
        uint64_t v129 = _HashNode.copy(withFreeSpace:)(v61, v62, (uint64_t)v63, a7, a8, a10);
        uint64_t v130 = v98;
        uint64_t v99 = (void *)type metadata accessor for _HashNode();
        sub_24A545C9C(v128, v121, v59, v60, v99);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v124, v36);
        uint64_t v100 = v130;
        uint64_t v65 = v123;
        uint64_t *v123 = v129;
        v65[1] = v100;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v56 = v125;
      char v57 = v126;
      uint64_t v58 = (uint64_t)v65;
      return _HashNode.Builder.init(_:_:)(v57, v58, v56);
    case 3u:
      _HashNode._removingChild(_:at:_:)(v126, v128, v121, a5, (uint64_t)v127, a7, a8, a10, v125);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v124, v36);
    default:
      uint64_t v106 = v36;
      uint64_t v38 = v119;
      uint64_t v39 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v40 = (int *)((char *)v119 + v39);
      uint64_t v41 = (char *)v35 + v39;
      uint64_t v107 = *(void *)(a7 - 8);
      uint64_t v42 = v35;
      uint64_t v43 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v107 + 32);
      uint64_t v111 = v107 + 32;
      v43(v119, v42, a7);
      uint64_t v108 = *(void *)(a8 - 8);
      uint64_t v44 = v108 + 32;
      uint64_t v110 = *(void (**)(int *, char *, uint64_t))(v108 + 32);
      v110(v40, v41, a8);
      uint64_t v45 = (void (*)(void, void, void))v127;
      uint64_t v109 = a10;
      if (_HashNode.hasSingletonChild.getter(a5, (uint64_t)v127, a7, a8, a10))
      {
        (*(void (**)(uint64_t))(*(void *)(v106 - 8) + 8))(v124);
        uint64_t v46 = TupleTypeMetadata2;
        int8x16_t v47 = v43;
        v127 = (char *)v28 + *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v48 = (int *)v127;
        v43(v28, v38, a7);
        uint64_t v49 = v40;
        uint64_t v50 = v110;
        v110(v48, (char *)v49, a8);
        uint64_t v51 = v118;
        uint64_t v52 = &v118[*(int *)(v46 + 48)];
        v43((uint64_t *)v118, v28, a7);
        v50((int *)v52, v127, a8);
        uint64_t v53 = *(int *)(swift_getTupleTypeMetadata2() + 48);
        uint64_t v54 = v123;
        uint64_t v55 = (char *)v123 + *(int *)(v46 + 48);
        v47(v123, (uint64_t *)v51, a7);
        v110((int *)v55, v52, a8);
        *((unsigned char *)v54 + v53) = v128;
        swift_storeEnumTagMultiPayload();
        uint64_t v56 = v125;
        char v57 = v126;
        uint64_t v58 = (uint64_t)v54;
      }
      else
      {
        int v103 = v40;
        uint64_t v105 = v44;
        uint8x8_t v104 = v43;
        uint64_t v67 = *(void *)(v117 + 72);
        BOOL v68 = __OFSUB__(v67, 16);
        uint64_t v69 = v67 - 16;
        if (v68)
        {
          __break(1u);
          JUMPOUT(0x24A545A70);
        }
        uint64_t v70 = v109;
        uint64_t v71 = _HashNode.copy(withFreeSpace:)(v69 & ~(v69 >> 63), a5, (uint64_t)v45, a7, a8, v109);
        uint64_t v129 = v71;
        uint64_t v130 = v72;
        uint64_t v73 = (void *)type metadata accessor for _HashNode();
        _HashNode.removeChild(at:_:)(v128, v121, v73);
        swift_release();
        uint64_t v74 = TupleTypeMetadata2;
        uint64_t v75 = (char *)v28 + *(int *)(TupleTypeMetadata2 + 48);
        long long v76 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v107 + 16);
        v107 += 16;
        v76(v28, v119, a7);
        v127 = *(unsigned char **)(v108 + 16);
        v108 += 16;
        ((void (*)(char *, int *, uint64_t))v127)(v75, v103, a8);
        uint64_t v77 = (uint64_t *)v118;
        uint64_t v78 = (int *)&v118[*(int *)(v74 + 48)];
        v104((uint64_t *)v118, v28, a7);
        v110(v78, v75, a8);
        int v103 = (int *)nullsub_1(v71 + 16, v71 + 32, a7, a8, v70);
        uint64_t v121 = v79;
        v80.i32[0] = *v103 & ~(-1 << v128);
        uint8x8_t v81 = (uint8x8_t)vcnt_s8(v80);
        v81.i16[0] = vaddlv_u8(v81);
        unsigned int v102 = v81.i32[0];
        uint64_t v82 = (uint64_t *)v112;
        uint64_t v83 = &v112[*(int *)(v74 + 48)];
        v76((uint64_t *)v112, v77, a7);
        ((void (*)(char *, int *, uint64_t))v127)(v83, v78, a8);
        uint64_t v84 = (uint64_t *)v115;
        uint64_t v85 = (int *)&v115[*(int *)(v74 + 48)];
        v104((uint64_t *)v115, v82, a7);
        v110(v85, v83, a8);
        ++v130;
        uint64_t v86 = (uint64_t *)v116;
        uint64_t v112 = &v116[*(int *)(v74 + 48)];
        uint64_t v87 = v112;
        v76((uint64_t *)v116, v84, a7);
        unint64_t v88 = v85;
        uint64_t v89 = (void (*)(char *, unsigned char *, uint64_t))v127;
        ((void (*)(unsigned char *, int *, uint64_t))v127)(v87, v88, a8);
        uint64_t v128 = _HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(v102, v128, v103, v121);
        unint64_t v90 = (uint64_t *)v113;
        uint64_t v91 = &v113[*(int *)(v74 + 48)];
        v76((uint64_t *)v113, v86, a7);
        v89(v91, (uint64_t *)v112, a8);
        uint64_t v92 = v114;
        uint64_t v93 = (int *)&v114[*(int *)(v74 + 48)];
        v104((uint64_t *)v114, v90, a7);
        v110(v93, v91, a8);
        uint64_t v94 = v117;
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v117 + 32))(v128, v92, v74);
        uint64_t v95 = *(void (**)(uint64_t *, uint64_t))(v94 + 8);
        v95((uint64_t *)v115, v74);
        v95((uint64_t *)v116, v74);
        v95((uint64_t *)v118, v74);
        (*(void (**)(uint64_t))(*(void *)(v106 - 8) + 8))(v124);
        v95(v119, v74);
        uint64_t v96 = v130;
        uint64_t v97 = v123;
        uint64_t *v123 = v129;
        v97[1] = v96;
        swift_storeEnumTagMultiPayload();
        uint64_t v56 = v125;
        char v57 = v126;
        uint64_t v58 = (uint64_t)v97;
      }
      return _HashNode.Builder.init(_:_:)(v57, v58, v56);
  }
}

uint64_t _HashNode.replaceChild(at:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = sub_24A545D50(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t _HashNode.replaceChild(at:_:with:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = sub_24A545C9C(a1, a2, a3, a4, a5);
  swift_release();
  return v5;
}

uint64_t sub_24A545AE8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a2;
  uint64_t v25 = a8;
  unsigned int v23 = a4;
  uint64_t v22 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(int *)(v12 + 56);
  uint64_t v16 = &v14[v15];
  uint64_t v17 = a5 + v15;
  uint64_t v18 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v14, a5, a6);
  uint64_t v19 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v16, v17, a7);
  uint64_t v20 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v23, v22, v24, a6, a7, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 40))(v20, v14, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 40))(v20 + *(int *)(v12 + 56), v16, a7);
}

uint64_t sub_24A545C9C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = nullsub_1(*v5 + 16, *v5 + 32, a5[2], a5[3], a5[4]);
  uint64_t v11 = (void *)_HashNode.UnsafeHandle.childPtr(at:)(a2, v9, v10);
  uint64_t v12 = a4 - v11[1];
  *uint64_t v11 = a3;
  v11[1] = a4;
  swift_retain();
  swift_release();
  v5[1] += v12;
  return v12;
}

uint64_t sub_24A545D50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v9.i32[0] = *(_DWORD *)(nullsub_1(*v4 + 16, *v4 + 32, a4[2], a4[3], a4[4]) + 4) & ~(-1 << a1);
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  return sub_24A545C9C(a1, v10.u32[0], a2, a3, a4);
}

uint64_t OrderedDictionary.Elements.SubSequence.init(_base:bounds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_24A545DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v52 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint8x8_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  int8x16_t v47 = (char *)&v44 - v12;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v44 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = sub_24A5BBCC0();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v46 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unsigned int v23 = (char *)&v44 - v22;
  sub_24A5BBAD0();
  uint64_t v53 = v4;
  uint64_t v50 = v6;
  uint64_t v51 = a2;
  sub_24A5BBB40();
  uint64_t result = sub_24A5BB440();
  if (result)
  {
    uint64_t v25 = v13;
    uint64_t v26 = v16;
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = v47;
    uint64_t v29 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v45 = v23;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v30(v47, v18, AssociatedTypeWitness);
    uint64_t v31 = v29;
    v30(v29, v26, AssociatedTypeWitness);
    uint64_t v32 = &v10[*(int *)(v27 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v33(v10, v28, AssociatedTypeWitness);
    v33(v32, v31, AssociatedTypeWitness);
    uint64_t v34 = v46;
    v30(v46, v10, AssociatedTypeWitness);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v32, AssociatedTypeWitness);
    unint64_t v35 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v30(v10, v28, AssociatedTypeWitness);
    v30(v35, v31, AssociatedTypeWitness);
    uint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v30;
    uint64_t v37 = v49;
    v30(&v34[*(int *)(v49 + 36)], v35, AssociatedTypeWitness);
    v44(v10, AssociatedTypeWitness);
    uint64_t v38 = v48;
    uint64_t v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v34, v37);
    uint64_t v40 = v53;
    uint64_t v41 = v51;
    sub_24A5BBAE0();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v42 = sub_24A5BC5E0();
    uint64_t v43 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v52 + *(int *)(v42 + 40), v40, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v55, v37);
    v36(v43, v39, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v43 + *(int *)(v42 + 36), &v39[*(int *)(v37 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 24) = result;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._bounds.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence.description.getter(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v3;
  uint64_t v9 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  return _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v8, 0, 0, 0, v4, v5, a1, WitnessTable);
}

uint64_t OrderedDictionary.Elements.SubSequence.debugDescription.getter(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v3;
  uint64_t v13 = *(void *)(v1 + 32);
  sub_24A5BC070();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = sub_24A55A124();
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v12, 1, v6, v8, v4, v5, a1, WitnessTable);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t OrderedDictionary.Elements.SubSequence.keys.getter()
{
  return OrderedSet.subscript.getter(v0[3], v0[4], *v0);
}

__n128 OrderedDictionary.Elements.SubSequence.values.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  long long v8 = *(_OWORD *)(v1 + 3);
  uint64_t v9 = v3;
  long long v10 = *(_OWORD *)(v1 + 1);
  uint64_t v4 = type metadata accessor for OrderedDictionary.Values();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_24A545DF4((uint64_t)&v8, v4, WitnessTable, (uint64_t)&v11);
  uint64_t v6 = v12;
  __n128 result = v13;
  *(_OWORD *)a1 = v11;
  *(void *)(a1 + 16) = v6;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.index(forKey:)()
{
  uint64_t result = OrderedSet._find(_:)();
  if ((v2 & 1) == 0 && (result < *(void *)(v0 + 24) || result >= *(void *)(v0 + 32))) {
    return 0;
  }
  return result;
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8ElementsV11SubSequenceV5_baseACyxq_Gvg_0()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8ElementsV11SubSequenceV5_baseACyxq_Gvs_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._end.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._index.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

int8x16_t OrderedDictionary.Elements.SubSequence.Iterator.init(_base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  int8x16_t result = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(int8x16_t *)(a2 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = TupleTypeMetadata2;
  if (v3 >= v4)
  {
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
    return v11(a1, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    sub_24A5BC260();
    sub_24A5BC260();
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 0, 1, v6);
    uint64_t v8 = *(void *)(v1 + 32);
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      __break(1u);
    }
    else {
      *(void *)(v1 + 32) = v10;
    }
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(int8x16_t *)(a1 + 24) = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  swift_retain();
  swift_retain();
  return swift_retain();
}

int8x16_t sub_24A5468C8@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  int8x16_t result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t sub_24A5468E8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_24A54693C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t OrderedDictionary.Elements.SubSequence.startIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.endIndex.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.indices.getter()
{
  return *(void *)(v0 + 24);
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(v3 + 24) > a3 || *(void *)(v3 + 32) <= a3)
  {
    __break(1u);
  }
  else
  {
    sub_24A5BC260();
    return sub_24A5BC260();
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (v3[3] > result || v3[4] < a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1];
    uint64_t v7 = v3[2];
    *a3 = v5;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = result;
    a3[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

BOOL OrderedDictionary.Elements.SubSequence.isEmpty.getter()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.count.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

void sub_24A546B70(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

void sub_24A546B7C(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
}

void (*sub_24A546B88(void *a1, uint64_t *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = malloc(0x68uLL);
  *a1 = v7;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[9] = TupleTypeMetadata2;
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  v7[10] = v11;
  uint64_t v12 = (char *)malloc(*(void *)(v11 + 64));
  v7[11] = v12;
  uint64_t v13 = *a2;
  long long v14 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v14;
  v7[4] = *(void *)(v3 + 32);
  uint64_t v15 = sub_24A546D0C(v7 + 5, v13);
  uint64_t v17 = v16;
  v7[12] = v15;
  (*(void (**)(char *))(*(void *)(v9 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v17, v8);
  return sub_24A544904;
}

void (*sub_24A546D0C(uint64_t *a1, uint64_t a2))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  OrderedDictionary.Elements.SubSequence.subscript.getter((uint64_t)v6, (uint64_t)v6 + *(int *)(TupleTypeMetadata2 + 48), a2);
  return sub_24A50EF90;
}

double sub_24A546DEC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  OrderedDictionary.Elements.SubSequence.subscript.getter(*a1, a1[1], v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

__n128 sub_24A546E38@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

BOOL sub_24A546E44()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

uint64_t sub_24A546E54()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A546E68()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A546E84()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A546EA0()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A546EBC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A546ED8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A546EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_24A546F8C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t sub_24A547014(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t sub_24A54706C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24A5470B4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, int64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int64_t v14 = sub_24A5BBAF0();
  int64_t v15 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v14);
  uint64_t v16 = 0;
  if (a3) {
    int64_t v17 = 0;
  }
  else {
    int64_t v17 = a2;
  }
  if (v17 <= v15) {
    int64_t v17 = v15;
  }
  if (v17 <= a4) {
    uint64_t v18 = a4;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v18 >= 5)
  {
    uint64_t v16 = _s19CollectionsInternal10_HashTableV5scale13reservedScaleACSi_SitcfC_0(v18, a4);
    _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (void *)(v16 + 16), v16 + 32, a5, a6, a7);
  }
  return v16;
}

uint64_t _HashTable.update<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_24A5471F8(a1, a2, a3);
}

uint64_t _HashTable.read<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_24A5471F8(a1, a2, a3);
}

uint64_t sub_24A5471F8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 16, a3 + 32);
}

uint64_t _HashTable._storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_HashTable._storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashTable.Storage.deinit()
{
  return v0;
}

void *_HashTable.copy()(void *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = (v1 & 0x3F) << v1;
  BOOL v3 = __OFADD__(v2, 64);
  uint64_t v4 = v2 + 64;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    uint64_t v7 = v4 - 1;
    BOOL v6 = v4 < 1;
    uint64_t v8 = result + 4;
    uint64_t v9 = v4 + 62;
    if (!v6) {
      uint64_t v9 = v7;
    }
    uint64_t v10 = v9 >> 6;
    type metadata accessor for _HashTable.Storage();
    uint64_t v11 = (void *)swift_allocObject();
    uint64_t v12 = v5[3];
    void v11[2] = v1;
    v11[3] = v12;
    memcpy(v11 + 4, v8, 8 * v10);
    return v11;
  }
  return result;
}

uint64_t _HashTable.header.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t (*_HashTable.header.modify())()
{
  return j__swift_endAccess;
}

uint64_t _HashTable.header.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  *(void *)(a3 + 16) = a1;
  *(void *)(a3 + 24) = a2;
  return result;
}

uint64_t _HashTable.capacity.getter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *(void *)(a1 + 16) & 0x3FLL;
  if (v3 < 5) {
    return 15;
  }
  double v4 = (double)(1 << v3) * 0.75;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return (uint64_t)v4;
}

uint64_t _HashTable.minimumCapacity.getter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = 0;
  unint64_t v3 = *(void *)(a1 + 16) & 0x3FLL;
  if (v3 >= 5 && v3 != (*(void *)(a1 + 24) & 0x3FLL))
  {
    double v5 = (double)(1 << v3) * 0.25;
    if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18) {
          return (uint64_t)v5;
        }
LABEL_12:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t _HashTable.scale.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) & 0x3FLL;
}

uint64_t _HashTable.reservedScale.getter(uint64_t a1)
{
  return *(void *)(a1 + 24) & 0x3FLL;
}

uint64_t _HashTable.bias.getter(uint64_t a1)
{
  return *(uint64_t *)(a1 + 24) >> 6;
}

ValueMetadata *type metadata accessor for _HashTable()
{
  return &type metadata for _HashTable;
}

uint64_t sub_24A54763C()
{
  return type metadata accessor for _HashTable.Storage();
}

uint64_t sub_24A547644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_24A5BC780();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v24 = a1;
  v13((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v14 = sub_24A5BBED0();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_24A5BC770();
  *a3 = v14;
  a3[1] = v16;
  a3[2] = v18;
  a3[3] = v20;
  if ((v20 & 0x1000000000000000) != 0) {
    sub_24A491F98();
  }
  a3[4] = v14;
  uint64_t v21 = _s9_IngesterVMa();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)a3 + *(int *)(v21 + 24), v10, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v24, a2);
}

uint64_t *sub_24A547828(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    a1[4] = a2[4];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_24A5BC780();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_24A547920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A5BC780();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_24A5479C8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_24A5BC780();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_24A547A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A5BC780();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A547B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_24A5BC780();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_24A547B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A547BB0);
}

uint64_t sub_24A547BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A5BC780();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A547C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A547C74);
}

uint64_t sub_24A547C74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_24A5BC780();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t _arrayDescription<A>(for:debug:typeName:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v32 = a2;
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v33 = (char *)&v27 - v18;
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  if (a4)
  {
    uint64_t v35 = a3;
    uint64_t v36 = a4;
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = a4;
  sub_24A5BB6F0();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, AssociatedConformanceWitness, a5);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_24A5BBEE0();
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v14, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    uint64_t v21 = (void (**)(uint64_t *, char *, uint64_t))(v29 + 16);
    uint64_t v22 = (void (**)(char *, uint64_t))(v29 + 8);
    v20(v10, v14, AssociatedTypeWitness);
    if ((v32 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_24A5BDAE0;
    *(void *)(v23 + 56) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v23 + 32));
    (*v21)(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
    sub_24A5BC030();
    while (1)
    {
      swift_bridgeObjectRelease();
      (*v22)(v10, AssociatedTypeWitness);
      sub_24A5BBEE0();
      if (v30(v14, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      v20(v10, v14, AssociatedTypeWitness);
      sub_24A5BB6F0();
      if (v32) {
        goto LABEL_8;
      }
LABEL_9:
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_24A5BDAE0;
      *(void *)(v25 + 56) = AssociatedTypeWitness;
      uint64_t v26 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v25 + 32));
      (*v21)(v26, v10, AssociatedTypeWitness);
      sub_24A5BC5F0();
    }
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v34);
  sub_24A5BB6F0();
  if (v28) {
    sub_24A5BB6F0();
  }
  return v37;
}

uint64_t _addressString(for:)()
{
  return 30768;
}

{
  sub_24A49A24C();
  sub_24A5BB7F0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t _dictionaryDescription<A, B, C>(for:debug:typeName:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v53 = a2;
  uint64_t v14 = *(void *)(a6 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](a1);
  uint64_t v61 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v58 = sub_24A5BBD20();
  uint64_t v21 = *(void *)(v58 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v58);
  char v57 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v44 - v25;
  uint64_t v56 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v54 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = *(void (***)(char *, char *, uint64_t))(a8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v59 = (char *)&v44 - v28;
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  unint64_t v46 = a4;
  if (a4)
  {
    uint64_t v64 = a3;
    unint64_t v65 = a4;
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    sub_24A5BB6F0();
    a4 = v46;
    swift_bridgeObjectRelease();
  }
  if (sub_24A5BBB30())
  {
    sub_24A5BB6F0();
    if (!a4) {
      return v66;
    }
    goto LABEL_15;
  }
  sub_24A5BB6F0();
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, a1, a7);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v56 = AssociatedConformanceWitness;
  uint64_t v30 = TupleTypeMetadata2;
  uint64_t v54 = (char *)(TupleTypeMetadata2 - 8);
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v48 = (void (**)(uint64_t *, char *, uint64_t))(v18 + 16);
  int8x16_t v47 = (void (**)(uint64_t *, char *, uint64_t))(v14 + 16);
  uint64_t v31 = (void (**)(char *, uint64_t))(v14 + 8);
  int v32 = (void (**)(char *, uint64_t))(v18 + 8);
  char v33 = 1;
  long long v50 = xmmword_24A5BDAE0;
  uint64_t v34 = v63;
  while (1)
  {
    uint64_t v37 = v57;
    sub_24A5BBEE0();
    (*v55)(v26, v37, v58);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v26, 1, v30) == 1) {
      break;
    }
    unint64_t v38 = &v26[*(int *)(v30 + 48)];
    (*v52)(v62, v26, a5);
    (*v51)(v61, v38, v63);
    if ((v33 & 1) == 0) {
      sub_24A5BB6F0();
    }
    if (v53)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = v50;
      *(void *)(v39 + 56) = a5;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v39 + 32));
      (*v48)(boxed_opaque_existential_1, v62, a5);
      sub_24A5BC030();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = v50;
      *(void *)(v41 + 56) = v34;
      uint64_t v42 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 32));
      uint64_t v36 = v61;
      (*v47)(v42, v61, v34);
      sub_24A5BC030();
    }
    else
    {
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      sub_24A5BC4D0();
      sub_24A5BB6F0();
      uint64_t v35 = v61;
      sub_24A5BC4D0();
      sub_24A5BB6F0();
      uint64_t v36 = v35;
      uint64_t v30 = TupleTypeMetadata2;
    }
    swift_bridgeObjectRelease();
    (*v31)(v36, v63);
    (*v32)(v62, a5);
    char v33 = 0;
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v59, AssociatedTypeWitness);
  sub_24A5BB6F0();
  if (v46) {
LABEL_15:
  }
    sub_24A5BB6F0();
  return v66;
}

uint64_t _addressString<A>(for:)()
{
  return 30768;
}

uint64_t Rope._UnsafeHandle.mutableChildren.getter(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A548B94(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8D908]);
}

uint64_t Rope._UnsafeHandle.childCount.getter(unsigned __int16 *a1)
{
  return *a1;
}

uint64_t Rope._UnsafeHandle.mutableChildPtr(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a3 + *(void *)(*(void *)(a5 - 8) + 72) * a1;
}

uint64_t Rope._UnsafeHandle._removeChild(at:)(uint64_t a1, _WORD *a2)
{
  uint64_t result = sub_24A5BBD10();
  uint64_t v5 = (unsigned __int16)*a2;
  BOOL v6 = __OFSUB__(v5, a1);
  uint64_t v7 = v5 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (__OFSUB__(v7, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = sub_24A5BBD00();
  if (*a2)
  {
    --*a2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle.children.getter(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A548B94(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8D230]);
}

uint64_t sub_24A548B94(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, void, uint64_t))
{
  return a7(a2, *a1, a4);
}

uint64_t Rope._UnsafeHandle._appendChild(_:)(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A54A05C(a1, a2, a3, a4, a5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);
  return v7(a1, a5);
}

uint64_t Rope._UnsafeHandle.copy()(_WORD *a1)
{
  type metadata accessor for Rope._Storage();
  uint64_t v2 = static Rope._Storage.create(height:)();
  LOWORD(a1) = *a1;
  swift_beginAccess();
  *(_WORD *)(v2 + 16) = (_WORD)a1;
  sub_24A5BBCD0();
  return v2;
}

uint64_t Rope._UnsafeHandle.copy(slots:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for Rope._Storage();
  uint64_t result = static Rope._Storage.create(height:)();
  if (__OFSUB__(a3, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = result;
    sub_24A5497E0((_WORD *)(result + 16), result+ ((*(unsigned __int8 *)(*(void *)(a7 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a7 - 8) + 80)), a3 - a2, a4, a5, a2, a3);
    return v13;
  }
  return result;
}

uint64_t Rope._UnsafeHandle.init(isMutable:header:start:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return nullsub_1(a2, a3, a4, a5, a6);
}

uint64_t Rope._UnsafeHandle._insertChild(_:at:)(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24A54A14C(a1, a2, a3, a4, a5, a6);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8);
  return v8(a1, a6);
}

uint64_t Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  if (a3 >= 1)
  {
    sub_24A5BBD00();
    uint64_t result = sub_24A5BBD00();
    uint64_t v8 = (unsigned __int16)*a4;
    BOOL v9 = __OFADD__(v8, a3);
    unint64_t v10 = v8 + a3;
    if (v9)
    {
      __break(1u);
    }
    else if ((v10 & 0x8000000000000000) == 0)
    {
      if (!(v10 >> 16))
      {
        *a4 = v10;
        uint64_t v11 = (unsigned __int16)*a1 - a3;
        if (v11 >= 0)
        {
          *a1 = v11;
          sub_24A5BB550();
          sub_24A5BB580();
          swift_getWitnessTable();
          sub_24A5BB3D0();
          swift_getWitnessTable();
          sub_24A5BC5E0();
          swift_getWitnessTable();
          return Sequence<>._sum()();
        }
        goto LABEL_12;
      }
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  if (a3 >= 1)
  {
    sub_24A5BBD00();
    uint64_t result = sub_24A5BBD00();
    uint64_t v8 = (unsigned __int16)*a4;
    BOOL v9 = __OFADD__(v8, a3);
    unint64_t v10 = v8 + a3;
    if (v9)
    {
      __break(1u);
    }
    else if ((v10 & 0x8000000000000000) == 0)
    {
      if (!(v10 >> 16))
      {
        *a4 = v10;
        uint64_t v11 = (unsigned __int16)*a1 - a3;
        if (v11 >= 0)
        {
          *a1 = v11;
          sub_24A5BB550();
          sub_24A5BB580();
          swift_getWitnessTable();
          sub_24A5BBBB0();
          sub_24A5BC5E0();
          swift_getWitnessTable();
          return Sequence<>._sum()();
        }
        goto LABEL_12;
      }
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_24A549290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a2 + *(void *)(*(void *)(a3 - 8) + 72) * a1, a3);
}

uint64_t Rope._UnsafeHandle.height.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t Rope._UnsafeHandle.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2)
{
  if (a2 >= a1) {
    goto LABEL_5;
  }
  sub_24A5BB550();
  uint64_t v3 = sub_24A5BB590();
  MEMORY[0x270FA5388](v3);
  sub_24A5BB580();
  swift_getWitnessTable();
  sub_24A5BC5E0();
  swift_getWitnessTable();
  sub_24A5BB8E0();
  uint64_t result = -v5;
  if (__OFSUB__(0, v5))
  {
    __break(1u);
LABEL_5:
    sub_24A5BB550();
    uint64_t v4 = sub_24A5BB590();
    MEMORY[0x270FA5388](v4);
    sub_24A5BB580();
    swift_getWitnessTable();
    sub_24A5BC5E0();
    swift_getWitnessTable();
    sub_24A5BB8E0();
    return v5;
  }
  return result;
}

uint64_t Rope._UnsafeHandle._start.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Rope._UnsafeHandle.capacity.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

unint64_t Rope._UnsafeHandle.childCount.setter(unint64_t result, _WORD *a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (!(result >> 16))
  {
    *a2 = result;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *(*Rope._UnsafeHandle.childCount.modify(void *a1, unsigned __int16 *a2))(unint64_t *result, char a2)
{
  *a1 = *a2;
  a1[1] = a2;
  return sub_24A549628;
}

unint64_t *sub_24A549628(unint64_t *result, char a2)
{
  unint64_t v2 = *result;
  if (a2)
  {
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }
    if (!(v2 >> 16))
    {
LABEL_7:
      *(_WORD *)result[1] = v2;
      return result;
    }
    __break(1u);
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (!(v2 >> 16)) {
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle.child(at:)@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)(a4 - 8);
  if (*a2 <= a1)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(a4 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a5, a3 + *(void *)(v11 + 72) * a1, a4);
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  return v9(a5, v8, 1, a4);
}

uint64_t Rope._UnsafeHandle.mutableBuffer.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return sub_24A5BBD50();
}

_WORD *sub_24A5497E0(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 >> 16)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *uint64_t result = a3;
  if (!__OFSUB__(a7, a6))
  {
    sub_24A5BBCD0();
    sub_24A5BB550();
    sub_24A5BB580();
    swift_getWitnessTable();
    return (_WORD *)Sequence<>._sum()();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle._removePrefix(_:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v37 = a5;
  uint64_t v28 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v26 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness);
  uint64_t result = sub_24A5BBD50();
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v25 = a2;
  uint64_t v27 = a1;
  uint64_t v35 = a6;
  uint64_t v36 = AssociatedConformanceWitness;
  if (a1)
  {
    uint64_t v18 = result;
    char v33 = *(void (**)(uint64_t, uint64_t))(v37 + 24);
    uint64_t v34 = v37 + 24;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 48);
    uint64_t v32 = v36 + 48;
    uint64_t v19 = v27;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
    uint64_t v29 = *(void *)(v26 + 72);
    uint64_t v30 = v20;
    uint64_t v21 = (void (**)(char *, uint64_t))(v24 + 8);
    uint64_t v22 = (uint64_t (**)(char *, uint64_t))(v26 + 8);
    do
    {
      v30(v15, v18, a4);
      v33(a4, v37);
      v31(v13, AssociatedTypeWitness, v36);
      (*v21)(v13, AssociatedTypeWitness);
      uint64_t result = (*v22)(v15, a4);
      v18 += v29;
      --v19;
    }
    while (v19);
  }
  uint64_t v23 = (unsigned __int16)*v25 - v27;
  if (v23 < 0) {
    goto LABEL_9;
  }
  if (!((unint64_t)v23 >> 16))
  {
    *uint64_t v25 = v23;
    return sub_24A5BBD00();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle._removeSuffix(_:)@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v44 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a5;
  uint64_t v18 = v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v18, AssociatedConformanceWitness);
  uint64_t result = sub_24A5BBD50();
  uint64_t v21 = *a2;
  int64_t v22 = v21 - a1;
  BOOL v23 = __OFSUB__(v21, a1);
  if (__OFSUB__(v21, a1))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v22 > v21)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v22 == v21) {
    goto LABEL_13;
  }
  if (v22 < v21)
  {
    uint64_t v35 = a2;
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v44 + 24);
    uint64_t v43 = v44 + 24;
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v41 = AssociatedConformanceWitness + 48;
    uint64_t v24 = v13 + 32;
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v25 = *(void *)(v13 + 72);
    uint64_t v26 = (void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v37 = v16;
    uint64_t v38 = v25;
    uint64_t v27 = a1;
    uint64_t v28 = (uint64_t (**)(char *, uint64_t))(v24 - 24);
    uint64_t v29 = result + v25 * v22;
    uint64_t v34 = v27;
    uint64_t v36 = AssociatedConformanceWitness;
    do
    {
      uint64_t v30 = v24;
      v39(v15, v29, a3);
      v42(a3, v44);
      v40(v12, v18, v36);
      (*v26)(v12, v18);
      uint64_t result = (*v28)(v15, a3);
      uint64_t v24 = v30;
      v29 += v38;
      --v27;
    }
    while (v27);
    a2 = v35;
    uint64_t v31 = *v35;
    BOOL v32 = __OFSUB__(v31, v34);
    int64_t v22 = v31 - v34;
    BOOL v23 = v32;
LABEL_13:
    if (!v23)
    {
      if ((v22 & 0x8000000000000000) == 0)
      {
        if (!((unint64_t)v22 >> 16))
        {
          *a2 = v22;
          return result;
        }
        goto LABEL_21;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_24A549ED0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = a5;
  uint64_t v20 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(uint64_t, uint64_t))(a7 + 24))(v19, a7);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a8 + 24))(v15, a6, a8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  if (__OFADD__(*a1, v16)) {
    __break(1u);
  }
  else {
    *a1 += v16;
  }
  return result;
}

uint64_t sub_24A54A05C(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v10 + *(void *)(v9 + 72) * (unsigned __int16)*a2;
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t result = sub_24A544CAC((uint64_t)v8, v11, a5);
  int v13 = (unsigned __int16)*a2;
  if (v13 == 0xFFFF) {
    __break(1u);
  }
  else {
    *a2 = v13 + 1;
  }
  return result;
}

uint64_t sub_24A54A14C(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(*v15, v11))
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = v12 + *(void *)(v9 + 72) * v11;
    sub_24A5BBD00();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, a6);
    uint64_t result = sub_24A544CAC((uint64_t)v14, v16, a6);
    int v17 = (unsigned __int16)*a3;
    if (v17 != 0xFFFF)
    {
      *a3 = v17 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A54A268(void *a1, uint64_t a2)
{
  return sub_24A54A280(a1, a2);
}

uint64_t sub_24A54A280(void *a1, uint64_t a2)
{
  return sub_24A549ED0(a1, a2, v2[7], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t type metadata accessor for Rope._UnsafeHandle()
{
  return swift_getGenericMetadata();
}

uint64_t BitSet._capacity.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) << 6;
}

void sub_24A54A2CC()
{
  int64_t v1 = *(void *)(*(void *)v0 + 16);
  int64_t v2 = v1 - 1;
  if (v1)
  {
    uint64_t v3 = v1 - 1;
    if (*(void *)(*(void *)v0 + 8 * v2 + 32)) {
      goto LABEL_8;
    }
    uint64_t v4 = *(void *)(*(void *)v0 + 16);
    while (1)
    {
      uint64_t v3 = v4 - 2;
      if (v4 - 1 < 1) {
        break;
      }
      if (*(void *)(*(void *)v0 + 16 + 8 * v4--)) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v3 = -1;
LABEL_8:
  uint64_t v6 = v2 - v3;
  if (v6 >= 1)
  {
    int64_t v7 = v1 - v6;
    if (v1 < v6)
    {
      __break(1u);
    }
    else if (v1 >= v7)
    {
      sub_24A52AC38(v7, v1);
      return;
    }
    __break(1u);
  }
}

uint64_t BitSet._storage.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int64_t v1 = a1;
  return result;
}

uint64_t (*BitSet._storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

ValueMetadata *type metadata accessor for BitSet()
{
  return &type metadata for BitSet;
}

unsigned char *sub_24A54A3A0(unsigned char *result, uint64_t *a2)
{
  if (*result == 1)
  {
    uint64_t v2 = *a2;
    int64_t v3 = *(void *)(*a2 + 16);
    int64_t v4 = v3 - 1;
    if (v3)
    {
      uint64_t v5 = v3 - 1;
      if (*(void *)(v2 + 32 + 8 * v4)) {
        goto LABEL_6;
      }
      uint64_t v5 = v3 - 2;
      if ((unint64_t)v3 >= 2)
      {
        if (*(void *)(v2 + 32 + 8 * v5))
        {
LABEL_6:
          uint64_t v6 = v4 - v5;
          if (v6 < 1) {
            return result;
          }
          uint64_t result = (unsigned char *)(v3 - v6);
          if (v3 < v6)
          {
            __break(1u);
          }
          else if (v3 >= (uint64_t)result)
          {
            return (unsigned char *)sub_24A52AC38((unint64_t)result, v3);
          }
          __break(1u);
          return result;
        }
        uint64_t v7 = v2 + 8;
        int64_t v8 = v3;
        while (v8 - 2 >= 1)
        {
          if (*(void *)(v7 + 8 * v8--))
          {
            uint64_t v5 = v8 - 2;
            goto LABEL_6;
          }
        }
      }
    }
    uint64_t v5 = -1;
    goto LABEL_6;
  }
  return result;
}

uint64_t *sub_24A54A450(uint64_t *result, unint64_t *a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v9 = a5;
  uint64_t v11 = a3;
  uint64_t v12 = result;
  unint64_t v13 = *a2;
  if (*a2)
  {
    unint64_t v5 = *result;
    unint64_t v14 = v13 - 1;
    if ((uint64_t)v13 >= 1)
    {
      unint64_t v7 = a5 - (unint64_t)BYTE5(a5);
      if ((a4 & 0x1000000000000000) != 0)
      {
        uint64_t v73 = a2;
        unint64_t v64 = v5 >> 14;
        if (v5 >> 14 < (unint64_t)MEMORY[0x24C5C6A60](15, a5 - (unint64_t)BYTE5(a5), a3, a4) >> 14)
        {
          unint64_t v14 = BYTE4(v9);
          if (v64 >= (unint64_t)MEMORY[0x24C5C6A60](15, BYTE4(v9), v11, a4) >> 14)
          {
            if (v13 > BYTE3(v9)) {
              goto LABEL_87;
            }
            goto LABEL_54;
          }
          unint64_t v17 = MEMORY[0x24C5C6A60](15, BYTE4(v9), v11, a4);
          a2 = v73;
          goto LABEL_13;
        }
        goto LABEL_121;
      }
      if ((v7 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        uint64_t v15 = a4 & 0x2000000000000000;
        uint64_t v8 = HIBYTE(a4) & 0xF;
        uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
        if ((a4 & 0x2000000000000000) != 0) {
          unint64_t v16 = HIBYTE(a4) & 0xF;
        }
        else {
          unint64_t v16 = a3 & 0xFFFFFFFFFFFFLL;
        }
        if (v16 >= v7)
        {
          if (v5 >> 14 >= 4 * v7)
          {
            uint64_t v24 = 7;
LABEL_34:
            LODWORD(v19) = 0;
            if (v15) {
              uint64_t v25 = v8;
            }
            else {
              uint64_t v25 = v11;
            }
            *uint64_t v12 = v24 | (v25 << 16);
            *a2 = v14;
            int v20 = 256;
            return (uint64_t *)(v20 | v19);
          }
          unint64_t v14 = BYTE4(a5);
          if (v16 >= BYTE4(a5))
          {
            if (v5 >> 14 >= 4 * (unint64_t)BYTE4(a5))
            {
              if (v13 > BYTE3(a5))
              {
LABEL_89:
                uint64_t v73 = a2;
                if (v15) {
                  unint64_t v55 = v8;
                }
                else {
                  unint64_t v55 = v11;
                }
                if (v55 >= v14)
                {
                  int v53 = v12;
                  unint64_t v54 = (v14 << 16) | 4;
                  uint64_t v11 = a3;
LABEL_94:
                  swift_bridgeObjectRetain();
                  unint64_t v9 = sub_24A494C00(v54, v11, a4);
                  uint64_t v12 = v56;
                  uint64_t v8 = v57;
                  swift_bridgeObjectRelease();
                  if ((a4 & 0x1000000000000000) != 0)
                  {
                    MEMORY[0x24C5C6A60](15, v7, v11, a4);
                    goto LABEL_100;
                  }
                  if ((v7 & 0x8000000000000000) == 0)
                  {
                    unint64_t v58 = HIBYTE(a4) & 0xF;
                    if ((a4 & 0x2000000000000000) == 0) {
                      unint64_t v58 = v11 & 0xFFFFFFFFFFFFLL;
                    }
                    if (v58 >= v7)
                    {
LABEL_100:
                      uint64_t v59 = sub_24A5BBE90();
                      swift_bridgeObjectRelease();
                      uint64_t v60 = v59 + 1;
                      if (!__OFADD__(v59, 1))
                      {
                        unint64_t v61 = v13 - v60;
                        if (!__OFSUB__(v13, v60))
                        {
                          LODWORD(v19) = 0;
                          *uint64_t v73 = v61;
                          uint64_t v62 = HIBYTE(a4) & 0xF;
                          if ((a4 & 0x2000000000000000) == 0) {
                            uint64_t v62 = v11;
                          }
                          uint64_t v63 = 7;
                          if (((a4 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0) {
                            uint64_t v63 = 11;
                          }
                          *int v53 = v63 | (v62 << 16);
                          int v20 = 256;
                          return (uint64_t *)(v20 | v19);
                        }
                        goto LABEL_127;
                      }
LABEL_126:
                      __break(1u);
LABEL_127:
                      __break(1u);
LABEL_128:
                      __break(1u);
                      goto LABEL_129;
                    }
                    goto LABEL_138;
                  }
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
                  goto LABEL_139;
                }
                __break(1u);
LABEL_136:
                __break(1u);
                goto LABEL_137;
              }
              goto LABEL_75;
            }
            unint64_t v17 = ((unint64_t)BYTE4(a5) << 16) | 4;
LABEL_13:
            *uint64_t v12 = v17;
            *a2 = --v13;
            if (!v13)
            {
              int v20 = 256;
              LODWORD(v19) = 1;
              return (uint64_t *)(v20 | v19);
            }
            if (v13 > BYTE3(v9))
            {
              uint64_t v70 = v14;
LABEL_85:
              if ((a4 & 0x1000000000000000) != 0)
              {
                uint64_t v73 = a2;
                uint64_t v11 = a3;
                unint64_t v14 = v70;
LABEL_87:
                int v53 = v12;
                unint64_t v54 = MEMORY[0x24C5C6A60](15, v14, v11, a4);
                goto LABEL_94;
              }
              uint64_t v15 = a4 & 0x2000000000000000;
              uint64_t v8 = HIBYTE(a4) & 0xF;
              uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
              unint64_t v14 = v70;
              goto LABEL_89;
            }
            uint64_t v11 = a3;
            if ((a4 & 0x1000000000000000) != 0)
            {
              uint64_t v73 = a2;
LABEL_54:
              uint64_t v70 = v14;
              uint64_t v71 = (unint64_t *)v12;
              unint64_t v37 = MEMORY[0x24C5C6A60](15, v14, v11, a4);
              uint64_t v15 = a4 & 0x2000000000000000;
              uint64_t v8 = HIBYTE(a4) & 0xF;
              v11 &= 0xFFFFFFFFFFFFuLL;
LABEL_80:
              swift_bridgeObjectRetain();
              sub_24A494C00(v37, a3, a4);
              swift_bridgeObjectRelease();
              if (v15) {
                uint64_t v50 = v8;
              }
              else {
                uint64_t v50 = v11;
              }
              unint64_t v51 = sub_24A5BBE40();
              LODWORD(v9) = v52;
              swift_bridgeObjectRelease();
              uint64_t v12 = (uint64_t *)v71;
              a2 = v73;
              if ((v9 & 1) == 0)
              {
                unint64_t *v71 = v51;
                *uint64_t v73 = 0;
                LODWORD(v19) = v51 >> 14 < 4 * v50;
                int v20 = 256;
                return (uint64_t *)(v20 | v19);
              }
              goto LABEL_85;
            }
            uint64_t v15 = a4 & 0x2000000000000000;
            uint64_t v8 = HIBYTE(a4) & 0xF;
            uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
LABEL_75:
            uint64_t v73 = a2;
            if (v15) {
              unint64_t v49 = v8;
            }
            else {
              unint64_t v49 = v11;
            }
            if (v49 < v14) {
              goto LABEL_136;
            }
            uint64_t v70 = v14;
            uint64_t v71 = (unint64_t *)v12;
            unint64_t v37 = (v14 << 16) | 4;
            goto LABEL_80;
          }
          goto LABEL_120;
        }
      }
      __break(1u);
LABEL_112:
      if (v14 >> 14 >= (unint64_t)MEMORY[0x24C5C6A60](15, v13, v11, a4) >> 14)
      {
        if (v14 >> 14 < (unint64_t)MEMORY[0x24C5C6A60](15, v9 - (unint64_t)BYTE5(v9), v11, a4) >> 14)
        {
          uint64_t v27 = MEMORY[0x24C5C6A60](15, v13, v11, a4);
          goto LABEL_42;
        }
        uint64_t v36 = MEMORY[0x24C5C6A60](15, v9 - (unint64_t)BYTE5(v9), v11, a4);
        goto LABEL_48;
      }
LABEL_21:
      LODWORD(v19) = 0;
      int v20 = 0;
      *uint64_t v12 = 15;
      return (uint64_t *)(v20 | v19);
    }
    unint64_t v7 = BYTE4(a5);
    uint64_t v6 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x1000000000000000) == 0)
    {
      unint64_t v21 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000) != 0) {
        unint64_t v21 = HIBYTE(a4) & 0xF;
      }
      if (v21 < BYTE4(a5))
      {
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        uint64_t v15 = a4 & 0x2000000000000000;
        uint64_t v8 = HIBYTE(a4) & 0xF;
        uint64_t v66 = v11;
        v11 &= 0xFFFFFFFFFFFFuLL;
        uint64_t v24 = 11;
        if ((v66 & 0x800000000000000) != 0) {
          uint64_t v24 = 7;
        }
        a2 = v73;
        goto LABEL_34;
      }
      unint64_t v22 = v5 >> 14;
      if (v5 >> 14 <= 4 * (unint64_t)BYTE4(a5))
      {
        *uint64_t result = 15;
        unint64_t v19 = (((unint64_t)BYTE4(a5) << 16) | 4) >> 14;
        if (v19)
        {
LABEL_131:
          LODWORD(v19) = 0;
          int v20 = 0;
          return (uint64_t *)(v20 | v19);
        }
        goto LABEL_44;
      }
      int64_t v23 = a5 - (unint64_t)BYTE5(a5);
      if (v23 < 0) {
        goto LABEL_128;
      }
      if (v21 < v23)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        *uint64_t v12 = 15;
        unint64_t v67 = MEMORY[0x24C5C6A60](15, v7, v11, a4);
        a2 = (unint64_t *)v8;
        unint64_t v19 = v67 >> 14;
        if (v67 >> 14) {
          goto LABEL_131;
        }
LABEL_44:
        int v20 = 0;
        *a2 = v13 + 1;
        return (uint64_t *)(v20 | v19);
      }
      if (v22 <= 4 * v23)
      {
        if (-(uint64_t)v13 > (unint64_t)BYTE3(a5)) {
          goto LABEL_70;
        }
        goto LABEL_57;
      }
      uint64_t result = (uint64_t *)((v23 << 16) | 4);
LABEL_31:
      *uint64_t v12 = (uint64_t)result;
      *a2 = v13 + 1;
      if (v13 == -1)
      {
        int v20 = 0;
        LODWORD(v19) = 1;
        return (uint64_t *)(v20 | v19);
      }
      unint64_t v38 = ~v13++;
      if (v38 > BYTE3(v9)) {
        goto LABEL_69;
      }
      if ((a4 & 0x1000000000000000) != 0) {
        goto LABEL_150;
      }
LABEL_57:
      uint64_t v74 = a2;
      unint64_t v39 = v11 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000) != 0) {
        unint64_t v39 = v6;
      }
      if (v39 < v7) {
        goto LABEL_153;
      }
      uint64_t v72 = v12;
      unint64_t v40 = (v7 << 16) | 4;
      goto LABEL_61;
    }
  }
  else
  {
    unint64_t v14 = *result;
    unint64_t v13 = BYTE4(a5);
    if ((a4 & 0x1000000000000000) != 0) {
      goto LABEL_112;
    }
    unint64_t v18 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      unint64_t v18 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v18 >= BYTE4(a5))
    {
      if (v14 >> 14 >= 4 * (unint64_t)BYTE4(a5))
      {
        int64_t v26 = a5 - (unint64_t)BYTE5(a5);
        if (v26 < 0)
        {
          __break(1u);
        }
        else if (v18 >= v26)
        {
          if (v14 >> 14 < 4 * v26)
          {
            uint64_t v27 = ((unint64_t)BYTE4(a5) << 16) | 4;
LABEL_42:
            swift_bridgeObjectRetain();
            unint64_t v28 = sub_24A494C00(v27, v11, a4);
            uint64_t v30 = v29;
            uint64_t v32 = v31;
            uint64_t v34 = v33;
            swift_bridgeObjectRelease();
            uint64_t v35 = MEMORY[0x24C5C7180](v14, v28, v30, v32, v34);
            swift_bridgeObjectRelease();
            int v20 = 0;
            *uint64_t v12 = v35;
            LODWORD(v19) = 1;
            return (uint64_t *)(v20 | v19);
          }
          uint64_t v36 = (v26 << 16) | 4;
LABEL_48:
          int v20 = 0;
          *uint64_t v12 = v36;
          LODWORD(v19) = 1;
          return (uint64_t *)(v20 | v19);
        }
        __break(1u);
        goto LABEL_126;
      }
      goto LABEL_21;
    }
    __break(1u);
  }
  uint64_t v70 = v6;
  uint64_t v8 = (uint64_t)a2;
  unint64_t v65 = v5 >> 14;
  if (v5 >> 14 <= (unint64_t)MEMORY[0x24C5C6A60](15, v7, a3, a4) >> 14) {
    goto LABEL_130;
  }
  unint64_t v14 = v11;
  if (v65 > (unint64_t)MEMORY[0x24C5C6A60](15, v9 - (unint64_t)BYTE5(v9), v11, a4) >> 14)
  {
    uint64_t result = (uint64_t *)MEMORY[0x24C5C6A60](15, v9 - (unint64_t)BYTE5(v9), v11, a4);
    a2 = (unint64_t *)v8;
    uint64_t v6 = v70;
    goto LABEL_31;
  }
LABEL_139:
  uint64_t v11 = v14;
  a2 = (unint64_t *)v8;
  uint64_t v6 = v70;
  if (-(uint64_t)v13 > (unint64_t)BYTE3(v9)) {
    goto LABEL_140;
  }
LABEL_150:
  uint64_t v72 = v12;
  uint64_t v74 = a2;
  unint64_t v40 = MEMORY[0x24C5C6A60](15, v7, v11, a4);
LABEL_61:
  swift_bridgeObjectRetain();
  sub_24A494C00(v40, v11, a4);
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  if ((a4 & 0x1000000000000000) != 0)
  {
    MEMORY[0x24C5C6A60](15, v7, v11, a4);
  }
  else
  {
    unint64_t v41 = v11 & 0xFFFFFFFFFFFFLL;
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v41 = v6;
    }
    if (v41 < v7) {
      goto LABEL_155;
    }
  }
  uint64_t v42 = sub_24A5BBE40();
  char v44 = v43;
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v12 = v72;
  a2 = v74;
  if ((v44 & 1) == 0)
  {
    int v20 = 0;
    *uint64_t v72 = v42;
    *uint64_t v74 = 0;
    LODWORD(v19) = 1;
    return (uint64_t *)(v20 | v19);
  }
LABEL_69:
  if ((a4 & 0x1000000000000000) != 0)
  {
LABEL_140:
    uint64_t v75 = a2;
    unint64_t v46 = v6;
    int8x16_t v47 = v12;
    unint64_t v48 = MEMORY[0x24C5C6A60](15, v7, v11, a4);
    goto LABEL_141;
  }
LABEL_70:
  uint64_t v75 = a2;
  unint64_t v45 = v11 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v45 = v6;
  }
  if (v45 >= v7)
  {
    unint64_t v46 = v6;
    int8x16_t v47 = v12;
    unint64_t v48 = (v7 << 16) | 4;
LABEL_141:
    swift_bridgeObjectRetain();
    sub_24A494C00(v48, v11, a4);
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if ((a4 & 0x1000000000000000) != 0)
    {
      MEMORY[0x24C5C6A60](15, v7, v11, a4);
    }
    else
    {
      unint64_t v68 = v11 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000) != 0) {
        unint64_t v68 = v46;
      }
      if (v68 < v7) {
        goto LABEL_154;
      }
    }
    uint64_t v69 = sub_24A5BBE90();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if (!__OFADD__(v13, v69))
    {
      LODWORD(v19) = 0;
      int v20 = 0;
      unint64_t *v75 = v13 + v69;
      *int8x16_t v47 = 15;
      return (uint64_t *)(v20 | v19);
    }
    __break(1u);
  }
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
  return result;
}

uint64_t Heap._storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *int64_t v1 = a1;
  return result;
}

uint64_t (*Heap._storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Heap.init()()
{
  sub_24A5BB970();
  return sub_24A5BC170();
}

uint64_t Heap.isEmpty.getter()
{
  return sub_24A5BBBC0() & 1;
}

uint64_t Heap.unordered.getter()
{
  return sub_24A5BBA00();
}

void *Heap.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v3 + 16))((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24A5BC210();
  sub_24A5BC1C0();
  sub_24A5BC190();
  unint64_t v5 = *(void *)(*(void *)v2 + 16);
  uint64_t v6 = *(void *)v2 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8[0] = v6;
  v8[1] = v5;
  sub_24A54B088(v6, v5);
  return sub_24A4BEFBC(v8, v6, v5);
}

void sub_24A54B088(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFFFFFFFFFELL)
  {
    unint64_t v3 = __clz(a2) ^ 0x3F;
    Heap._UnsafeHandle.bubbleUp(_:)(*(CollectionsInternal::_HeapNode *)&v2);
    return;
  }
  __break(1u);
}

uint64_t Heap.min()()
{
  return sub_24A5BBBA0();
}

uint64_t Heap.max()()
{
  return sub_24A5BC1A0();
}

uint64_t sub_24A54B1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  unint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v13 = (char *)v19 - v12;
  if (v10 < 3)
  {
    v19[2] = a1;
    void v19[3] = v10;
    sub_24A5BB580();
    swift_getWitnessTable();
    return sub_24A5BB3A0();
  }
  else
  {
    uint64_t v14 = *(void *)(v6 + 72);
    uint64_t v20 = a3;
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v19[1] = v11;
    v15((char *)v19 - v12, a1 + v14, a2);
    v15(v9, a1 + 2 * v14, a2);
    uint64_t v16 = v20;
    sub_24A5BC590();
    unint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v9, a2);
    v17(v13, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, a2);
  }
}

uint64_t Heap.popMin()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_s19CollectionsInternal4HeapV5countSivg_0() < 1)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    return v10(a2, 1, 1, v4);
  }
  else
  {
    sub_24A5BC210();
    swift_getWitnessTable();
    swift_getWitnessTable();
    sub_24A5BBC70();
    if (_s19CollectionsInternal4HeapV5countSivg_0() >= 1)
    {
      sub_24A5BC190();
      uint64_t v7 = *(void *)(*(void *)v2 + 16);
      v13[0] = *(void *)v2
             + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      uint64_t v8 = v13[0];
      v13[1] = v7;
      sub_24A54BBD4();
      sub_24A4BEFBC(v13, v8, v7);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a2, v6, v4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v6, v4);
  }
}

uint64_t Heap.popMax()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  sub_24A5BC210();
  swift_getWitnessTable();
  swift_getWitnessTable();
  if (v8 < 3)
  {
    JUMPOUT(0x24C5C6FB0);
  }
  sub_24A5BBC70();
  sub_24A5BC190();
  uint64_t v9 = *(void *)(*(void *)v2 + 16);
  uint64_t v10 = *(void *)v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v12[0] = v10;
  v12[1] = v9;
  sub_24A54B80C(v10, v9, (uint64_t)v7, v4);
  sub_24A4BEFBC(v12, v10, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_24A54B80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v24 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (v15 == 2)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v16((char *)v24 - v11, a1 + v14, a4);
    v16(v10, a3, a4);
    char v17 = sub_24A5BB410();
    unint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, a4);
    v18(v12, a4);
    if (v17)
    {
      sub_24A5BB540();
      sub_24A5BC5A0();
    }
  }
  else
  {
    v24[1] = a3;
    unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v19((char *)v24 - v11, a1 + 2 * v14, a4);
    v19(v10, a1 + v14, a4);
    char v20 = sub_24A5BB420();
    unint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, a4);
    v21(v12, a4);
    if (v20) {
      Swift::Int v22 = 1;
    }
    else {
      Swift::Int v22 = 2;
    }
    sub_24A5BB540();
    sub_24A5BC5A0();
    v23.Swift::Int offset = v22;
    v23.Swift::Int level = 1;
    Heap._UnsafeHandle.trickleDownMax(_:)(v23);
  }
}

uint64_t Heap.removeMin()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A54BAB4(a1, (void (*)(uint64_t))Heap.popMin(), a2);
}

uint64_t Heap.removeMax()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A54BAB4(a1, (void (*)(uint64_t))Heap.popMax(), a2);
}

uint64_t sub_24A54BAB4@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v12 - v8;
  a2(a1);
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v6);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v9, v6);
  }
  __break(1u);
  return result;
}

uint64_t Heap.replaceMin(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A54BC68(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24A54BBD4, a3);
}

void sub_24A54BBD4()
{
  sub_24A5BB540();
  sub_24A5BC5A0();
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  Heap._UnsafeHandle.trickleDownMin(_:)(*(CollectionsInternal::_HeapNode *)&v0);
}

uint64_t Heap.replaceMax(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A54BC68(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24A54BDAC, a3);
}

uint64_t sub_24A54BC68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4;
  v14[0] = *v4;
  uint64_t v10 = *(void *)(a2 + 16);
  sub_24A5BC210();
  swift_getWitnessTable();
  uint64_t result = sub_24A5BBBC0();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = *(void *)(v10 - 8) + 16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))v12)(a4, a1, v10);
    sub_24A5BC190();
    uint64_t v13 = *(void *)(*v4 + 16);
    v14[0] = *v6 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    v14[1] = v13;
    a3(v14[0], v13, a4, v10, *(void *)(a2 + 24));
    return (uint64_t)sub_24A4BEFBC(v14, v14[0], v13);
  }
  return result;
}

void sub_24A54BDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v24 - v12;
  if (v14 == 2)
  {
    sub_24A5BB540();
    sub_24A5BC5A0();
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    Heap._UnsafeHandle.bubbleUp(_:)(*(CollectionsInternal::_HeapNode *)&v15);
  }
  else if (a2 == 1)
  {
    sub_24A5BB540();
    sub_24A5BC5A0();
  }
  else
  {
    uint64_t v17 = v8[9];
    v24[1] = a3;
    unint64_t v18 = (void (*)(char *, uint64_t, uint64_t))v8[2];
    v18((char *)v24 - v12, a1 + v17, a4);
    v18(v11, a1 + 2 * v17, a4);
    char v19 = sub_24A5BB420();
    char v20 = (void (*)(char *, uint64_t))v8[1];
    v20(v11, a4);
    v20(v13, a4);
    if (v19) {
      Swift::Int v21 = 2;
    }
    else {
      Swift::Int v21 = 1;
    }
    sub_24A5BB540();
    sub_24A5BC5A0();
    v22.Swift::Int offset = v21;
    v22.Swift::Int level = 1;
    Heap._UnsafeHandle.bubbleUp(_:)(v22);
    v23.Swift::Int offset = v21;
    v23.Swift::Int level = 1;
    Heap._UnsafeHandle.trickleDownMax(_:)(v23);
  }
}

uint64_t Heap.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v8 = sub_24A5BBA00();
  uint64_t v15 = v8;
  swift_retain();
  uint64_t v9 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  if (v9 < 2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a3);
  }
  else
  {
    sub_24A5BC210();
    sub_24A5BC190();
    uint64_t v10 = *(void *)(v15 + 16);
    v14[0] = v15
           + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
    uint64_t v11 = v14[0];
    v14[1] = v10;
    Heap._UnsafeHandle.heapify()();
    sub_24A4BEFBC(v14, v11, v10);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a3);
    return v15;
  }
  return v8;
}

uint64_t Heap.insert<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v30 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v34 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v35 = (char *)&v28 - v17;
  uint64_t v18 = a3;
  uint64_t v19 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v16);
  Swift::Int v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_s19CollectionsInternal4HeapV5countSivg_0())
  {
    uint64_t v29 = a2;
    uint64_t v22 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t result = sub_24A5BB860();
    if (__OFADD__(v22, result))
    {
      __break(1u);
    }
    else
    {
      sub_24A5BC210();
      sub_24A5BC180();
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, AssociatedConformanceWitness, v18);
      sub_24A5BB840();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      sub_24A5BBEE0();
      uint64_t v24 = v30;
      uint64_t v34 = AssociatedTypeWitness;
      uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
      int v25 = v32(v14, 1, v9);
      uint64_t v26 = v29;
      if (v25 != 1)
      {
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
        do
        {
          v27(v11, v14, v9);
          Heap.insert(_:)((uint64_t)v11, v26);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
          sub_24A5BBEE0();
        }
        while (v32(v14, 1, v9) != 1);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v35, v34);
    }
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, AssociatedConformanceWitness, v18);
    uint64_t result = Heap.init<A>(_:)((uint64_t)v21, v9, v18);
    *uint64_t v5 = result;
  }
  return result;
}

uint64_t sub_24A54C610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A54B1A8(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for Heap()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall OrderedDictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

Swift::Void __swiftcall OrderedDictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t OrderedDictionary.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  OrderedSet.remove(at:)(a3, v4);
  sub_24A5BC210();
  return sub_24A5BC1E0();
}

uint64_t OrderedDictionary.removeSubrange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  OrderedSet.removeSubrange(_:)(a1, a2, v4);
  sub_24A5BC210();
  swift_getWitnessTable();
  return sub_24A5BBC50();
}

uint64_t OrderedDictionary.removeSubrange<A>(_:)()
{
  type metadata accessor for OrderedDictionary.Elements();
  swift_getWitnessTable();
  sub_24A5BB930();
  return OrderedDictionary.removeSubrange(_:)(v1, v2);
}

uint64_t OrderedDictionary.removeLast()(uint64_t a1, uint64_t a2)
{
  sub_24A5BC210();
  swift_getWitnessTable();
  uint64_t result = sub_24A5BBBC0();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
    if (!__OFSUB__(result, 1)) {
      return OrderedDictionary.remove(at:)(a1, a2, result - 1);
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeLast(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else if (_s19CollectionsInternal4HeapV5countSivg_0() >= a1)
  {
    type metadata accessor for OrderedSet();
    OrderedSet.removeLast(_:)(a1);
    sub_24A5BC210();
    swift_getWitnessTable();
    swift_getWitnessTable();
    sub_24A5BBC80();
    return;
  }
  __break(1u);
}

uint64_t OrderedDictionary.removeFirst()(uint64_t a1, uint64_t a2)
{
  sub_24A5BC210();
  swift_getWitnessTable();
  uint64_t result = sub_24A5BBBC0();
  if ((result & 1) == 0) {
    return OrderedDictionary.remove(at:)(a1, a2, 0);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeFirst(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else if (_s19CollectionsInternal4HeapV5countSivg_0() >= a1)
  {
    type metadata accessor for OrderedSet();
    OrderedSet.removeFirst(_:)(a1);
    sub_24A5BC210();
    swift_getWitnessTable();
    sub_24A5BBC40();
    return;
  }
  __break(1u);
}

void *OrderedDictionary.removeAll(where:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  v12[0] = v8
         + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80));
  uint64_t v10 = v12[0];
  v12[1] = v9;
  sub_24A54CD20(v12, a1, a2, v7, &v13);
  if (v4) {
    return sub_24A4BEFBC(v12, v10, v9);
  }
  sub_24A4BEFBC(v12, v10, v9);
  v12[0] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979BFC8);
  sub_24A54CDAC();
  return (void *)OrderedDictionary.removeSubrange<A>(_:)();
}

uint64_t sub_24A54CD20@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = type metadata accessor for OrderedSet();
  uint64_t result = OrderedSet._halfStablePartition<A>(values:by:)(v10, v11, a2, a3, v12, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

unint64_t sub_24A54CDAC()
{
  unint64_t result = qword_26979BFD0;
  if (!qword_26979BFD0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979BFC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979BFD0);
  }
  return result;
}

uint64_t BigString.replaceSubrange<A>(_:with:)(unint64_t *a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t v6 = MEMORY[0x270FA5388](a3[-1].Description);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v6;
  if (v9 == MEMORY[0x263F8D310])
  {
    unint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    swift_bridgeObjectRetain();
    __n128 v13 = sub_24A54D850(a1, v11, v12);
    (*(void (**)(uint64_t, void, __n128))(v25 + 8))(a2, MEMORY[0x263F8D310], v13);
  }
  else
  {
    if (a3 != (ValueMetadata *)MEMORY[0x263F8D980])
    {
      if (a3 == &type metadata for BigString)
      {
        long long v19 = *(_OWORD *)(a2 + 16);
        __n128 v26 = *(__n128 *)a2;
        long long v27 = v19;
        long long v28 = *(_OWORD *)(a2 + 32);
        __n128 v29 = v26;
        long long v30 = v19;
        long long v31 = v28;
        sub_24A4914AC((uint64_t)&v29, (uint64_t)v33, qword_26B177E60);
        sub_24A497498((uint64_t)v33);
        sub_24A51AEFC(a1, &v26);
        sub_24A496BE8((uint64_t)&v26);
        return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v25 + 8))(a2, &type metadata for BigString);
      }
      else if (a3 == &type metadata for BigSubstring)
      {
        long long v20 = *(_OWORD *)(a2 + 16);
        __n128 v26 = *(__n128 *)a2;
        long long v27 = v20;
        __n128 v21 = *(__n128 *)(a2 + 48);
        long long v28 = *(_OWORD *)(a2 + 32);
        __n128 v29 = v21;
        long long v22 = *(_OWORD *)(a2 + 80);
        long long v30 = *(_OWORD *)(a2 + 64);
        long long v31 = v22;
        long long v32 = *(_OWORD *)(a2 + 96);
        swift_unknownObjectRetain();
        sub_24A486920(a1, (long long *)&v26, v29.n128_u64);
        swift_unknownObjectRelease();
        CollectionsInternal::_HeapNode v23 = *(uint64_t (**)(uint64_t, ValueMetadata *))(v25 + 8);
        return v23(a2, &type metadata for BigSubstring);
      }
      else
      {
        (*(void (**)(char *, uint64_t, ValueMetadata *))(v6 + 16))(v8, a2, a3);
        BigString.init<A>(_:)((uint64_t)v8, a3, &v29);
        sub_24A51AEFC(a1, &v29);
        sub_24A496BE8((uint64_t)&v29);
        return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v25 + 8))(a2, a3);
      }
    }
    unint64_t v14 = *(void *)a2;
    uint64_t v15 = *(void *)(a2 + 8);
    unint64_t v16 = *(void *)(a2 + 16);
    uint64_t v17 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    __n128 v18 = sub_24A54DD00(a1, v14, v15, v16, v17);
    (*(void (**)(uint64_t, void, __n128))(v25 + 8))(a2, MEMORY[0x263F8D980], v18);
  }
  return swift_bridgeObjectRelease();
}

__n128 BigString.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t Description = (void (**)(uint64_t, void))a2[-1].Description;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x263F8D310])
  {
    uint64_t v13 = *(void *)a1;
    uint64_t v14 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    sub_24A490BF0(v13, v14, &v30);
    __n128 v25 = v31;
    __n128 v24 = v30;
    unint64_t v11 = *((void *)&v32 + 1);
    unint64_t v10 = v32;
    Description[1](a1, MEMORY[0x263F8D310]);
  }
  else if (a2 == (ValueMetadata *)MEMORY[0x263F8D980])
  {
    uint64_t v15 = *(void *)a1;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    sub_24A48FF2C(v15, v16, v17, v18, &v30);
    __n128 v25 = v31;
    __n128 v24 = v30;
    unint64_t v11 = *((void *)&v32 + 1);
    unint64_t v10 = v32;
    Description[1](a1, MEMORY[0x263F8D980]);
  }
  else if (a2 == &type metadata for BigString)
  {
    __n128 v25 = *(__n128 *)(a1 + 16);
    __n128 v24 = *(__n128 *)a1;
    unint64_t v10 = *(void *)(a1 + 32);
    unint64_t v11 = *(void *)(a1 + 40);
    long long v19 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    swift_unknownObjectRetain();
    v19(a1, &type metadata for BigString);
  }
  else if (a2 == &type metadata for BigSubstring)
  {
    long long v20 = *(_OWORD *)(a1 + 16);
    v29[0] = *(_OWORD *)a1;
    v29[1] = v20;
    __n128 v21 = *(__n128 *)(a1 + 48);
    _OWORD v29[2] = *(_OWORD *)(a1 + 32);
    __n128 v30 = v21;
    long long v22 = *(_OWORD *)(a1 + 80);
    __n128 v31 = *(__n128 *)(a1 + 64);
    long long v32 = v22;
    long long v33 = *(_OWORD *)(a1 + 96);
    swift_unknownObjectRetain();
    sub_24A48D050(v29, v30.n128_u64, v26);
    __n128 v25 = (__n128)v26[1];
    __n128 v24 = (__n128)v26[0];
    unint64_t v10 = v27;
    unint64_t v11 = v28;
    ((void (**)(uint64_t, ValueMetadata *))Description)[1](a1, &type metadata for BigSubstring);
  }
  else
  {
    ((void (*)(char *, uint64_t, ValueMetadata *))Description[2])(v8, a1, a2);
    sub_24A59F504((uint64_t)v8, (uint64_t)a2, &v30);
    __n128 v25 = v31;
    __n128 v24 = v30;
    unint64_t v11 = *((void *)&v32 + 1);
    unint64_t v10 = v32;
    uint64_t v12 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    v12((uint64_t)v8, a2);
    v12(a1, a2);
  }
  __n128 result = v25;
  *a3 = v24;
  a3[1] = result;
  a3[2].n128_u64[0] = v10;
  a3[2].n128_u64[1] = v11;
  return result;
}

double BigString.init(repeating:count:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  sub_24A490BF0(a1, a2, v8);
  sub_24A54E978(v8, a3, (uint64_t)v9);
  long long v6 = v9[1];
  *a4 = v9[0];
  a4[1] = v6;
  double result = *(double *)&v10;
  a4[2] = v10;
  return result;
}

double BigString.init<A>(repeating:count:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, _OWORD *a4@<X8>)
{
  double v7 = sub_24A54F4E4(a1, a2, a3, v10);
  (*((void (**)(uint64_t, ValueMetadata *, double))a3[-1].Description + 1))(a1, a3, v7);
  long long v8 = v10[1];
  *a4 = v10[0];
  a4[1] = v8;
  double result = *(double *)&v11;
  a4[2] = v11;
  return result;
}

double BigString.init(repeating:count:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_24A54E978(a1, a2, (uint64_t)v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  double result;
  long long v13[3];
  _OWORD v14[2];
  long long v15;
  _OWORD v16[4];
  long long v17[3];

  long long v6 = a1[1];
  v17[0] = *a1;
  v17[1] = v6;
  long long v7 = a1[3];
  void v17[2] = a1[2];
  long long v8 = a1[4];
  uint64_t v9 = a1[5];
  v16[0] = v7;
  v16[1] = v8;
  long long v10 = a1[6];
  uint64_t v16[2] = v9;
  v16[3] = v10;
  sub_24A497498((uint64_t)a1);
  sub_24A48D050(v17, (unint64_t *)v16, v13);
  sub_24A54E978(v13, a2, (uint64_t)v14);
  sub_24A496BE8((uint64_t)a1);
  long long v11 = v14[1];
  *a3 = v14[0];
  a3[1] = v11;
  double result = *(double *)&v15;
  a3[2] = v15;
  return result;
}

unint64_t BigString.insert(_:at:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  return BigString.insert(contentsOf:at:)(a1, a2, a3, a4, a5, a6);
}

uint64_t BigString.insert<A>(contentsOf:at:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, ValueMetadata *a6)
{
  sub_24A54F5E8(a1, a2, a3, a4, a5, a6);
  long long v8 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a6[-1].Description + 1);
  return v8(a1, a6);
}

uint64_t BigString.remove(at:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  long long v5 = v4[1];
  long long v23 = *v4;
  long long v24 = v5;
  long long v25 = v4[2];
  unint64_t v6 = sub_24A496820(a1, a2, a3, a4, 0);
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t result = sub_24A58F608(v6, v7, v9, v11, v19);
  long long v16 = v20;
  if ((unint64_t)v20 >> 10 < v6 >> 10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = v19[0];
    long long v18 = v21;
    v19[0] = v6;
    v19[1] = v8;
    *(void *)&long long v20 = v10;
    *((void *)&v20 + 1) = v12;
    long long v21 = v16;
    long long v22 = v18;
    sub_24A53EF68((unint64_t *)v19, v14, v15);
    return v17;
  }
  return result;
}

unint64_t *BigString.removeSubrange(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result[4];
  unint64_t v5 = 2 * (v3[4] & 0x1FFFFFFFFFFFFFLL);
  if (!*v3) {
    unint64_t v5 = 0;
  }
  if (v5 < v4 >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = *result;
    if (v4 >> 10 == *result >> 10) {
      return result;
    }
    uint64_t result = (unint64_t *)(v6 >> 11);
    if (v4 >> 11 >= v6 >> 11) {
      return (unint64_t *)sub_24A54E1F4((uint64_t)result, v4 >> 11, a3);
    }
  }
  __break(1u);
  return result;
}

unint64_t BigString.insert(contentsOf:at:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = sub_24A5BB830();
  unint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  return _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v10, v12, v14, v16, a3, a4, a5, a6);
}

__n128 sub_24A54D850(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  *(void *)&long long v58 = a3;
  v57.n128_u64[0] = a2;
  unint64_t v6 = sub_24A5BC780();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s9_IngesterVMa();
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (unint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = _s7BuilderVMa();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = *v4;
  uint64_t v17 = *((void *)v4 + 4);
  unint64_t v18 = a1[4];
  unint64_t v19 = 2 * (v17 & 0x1FFFFFFFFFFFFFLL);
  if (!*(void *)v4) {
    unint64_t v19 = 0;
  }
  if (v19 < v18 >> 10)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v53 = v10;
  unint64_t v54 = v9;
  uint64_t v55 = v7;
  uint64_t v56 = (char *)v6;
  unint64_t v20 = *a1;
  unint64_t v9 = (char *)a1[1];
  unint64_t v6 = a1[2];
  uint64_t v10 = a1[3];
  if (v18 >> 10 != *a1 >> 10)
  {
    long long v24 = v4[1];
    unint64_t v52 = a1[5];
    unint64_t v51 = a1[6];
    unint64_t v50 = a1[7];
    unint64_t v49 = v20 >> 11;
    unint64_t v48 = v18 >> 11;
    uint64_t v25 = *((void *)v4 + 5);
    long long v68 = v16;
    long long v69 = v24;
    uint64_t v70 = v17;
    uint64_t v71 = v25;
    uint64_t v26 = (uint64_t)&v15[*(int *)(v13 + 24)];
    v59[0] = 1;
    uint64_t v47 = v26;
    sub_24A48D2C8(v20, (unint64_t)v9, v6, v10, (uint64_t *)0x100000000, v26);
    uint64_t v27 = (uint64_t)&v15[*(int *)(v13 + 20)];
    v59[0] = 1;
    sub_24A48D2C8(v18, v52, v51, v50, (uint64_t *)0x100000000, v27);
    if (v48 >= v49)
    {
      sub_24A57660C(v49, v48, v28, (uint64_t)v59);
      uint64_t v29 = v61;
      int v30 = v62;
      __int16 v31 = v63;
      int v32 = v65;
      __int16 v33 = v66;
      uint64_t v34 = v67;
      long long v35 = *(_OWORD *)&v59[8];
      long long v36 = *(_OWORD *)&v59[24];
      long long v37 = v60;
      long long v38 = v64;
      *(void *)uint64_t v15 = *(void *)v59;
      *(_OWORD *)(v15 + 8) = v35;
      *(_OWORD *)(v15 + 24) = v36;
      *(_OWORD *)(v15 + 40) = v37;
      *((void *)v15 + 7) = v29;
      *((_WORD *)v15 + 34) = v31;
      *((_DWORD *)v15 + 16) = v30;
      *(_OWORD *)(v15 + 72) = v38;
      *((_WORD *)v15 + 46) = v33;
      *((_DWORD *)v15 + 22) = v32;
      *((void *)v15 + 12) = v34;
      *(void *)uint64_t v59 = v57.n128_u64[0];
      *(void *)&v59[8] = v58;
      swift_bridgeObjectRetain();
      unint64_t v6 = sub_24A5BBED0();
      unint64_t v40 = v39;
      unint64_t v42 = v41;
      unint64_t v44 = v43;
      uint64_t v13 = v55;
      uint64_t v10 = (uint64_t)v54;
      unint64_t v9 = v56;
      (*(void (**)(char *, uint64_t, char *))(v55 + 16))(v54, v47, v56);
      *unint64_t v12 = v6;
      v12[1] = v40;
      uint64_t v12[2] = v42;
      v12[3] = v44;
      if ((v44 & 0x1000000000000000) == 0)
      {
LABEL_10:
        v12[4] = v6;
        (*(void (**)(char *, uint64_t, char *))(v13 + 32))((char *)v12 + *(int *)(v53 + 24), v10, v9);
        sub_24A56E248(v12);
        sub_24A4EF384((uint64_t)v15, (uint64_t)v15);
        sub_24A491510((uint64_t *)v59);
        long long v58 = *(_OWORD *)v59;
        __n128 v57 = *(__n128 *)&v59[16];
        uint64_t v45 = *(void *)&v59[32];
        uint64_t v46 = v60;
        sub_24A491C88((uint64_t)v12, (uint64_t (*)(void))_s9_IngesterVMa);
        sub_24A491C88((uint64_t)v15, (uint64_t (*)(void))_s7BuilderVMa);
        swift_unknownObjectRelease();
        __n128 result = v57;
        *unint64_t v4 = v58;
        v4[1] = (__int128)result;
        *((void *)v4 + 4) = v45;
        *((void *)v4 + 5) = v46;
        return result;
      }
LABEL_13:
      sub_24A491F98();
      goto LABEL_10;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v21 = v58;
  swift_bridgeObjectRetain();
  uint64_t v22 = v57.n128_u64[0];
  BigString.insert(contentsOf:at:)(v22, v21, v20, (unint64_t)v9, v6, v10);
  return result;
}

__n128 sub_24A54DD00(unint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  *(void *)&long long v65 = a3;
  v64.n128_u64[0] = a2;
  unint64_t v10 = sub_24A5BC780();
  uint64_t v61 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  long long v60 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s9_IngesterVMa();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (unint64_t *)((char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = _s7BuilderVMa();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = *v6;
  uint64_t v19 = *((void *)v6 + 4);
  unint64_t v20 = a1[4];
  unint64_t v21 = 2 * (v19 & 0x1FFFFFFFFFFFFFLL);
  if (!*(void *)v6) {
    unint64_t v21 = 0;
  }
  if (v21 < v20 >> 10)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v62 = a4;
  uint64_t v58 = v12;
  uint64_t v63 = a5;
  unint64_t v59 = v10;
  unint64_t v22 = *a1;
  unint64_t v23 = a1[1];
  unint64_t v10 = a1[2];
  a4 = a1[3];
  if (v20 >> 10 != *a1 >> 10)
  {
    long long v29 = v6[1];
    unint64_t v57 = a1[5];
    unint64_t v56 = a1[6];
    unint64_t v55 = a1[7];
    unint64_t v54 = v22 >> 11;
    unint64_t v53 = v20 >> 11;
    uint64_t v30 = *((void *)v6 + 5);
    long long v75 = v18;
    long long v76 = v29;
    uint64_t v77 = v19;
    uint64_t v78 = v30;
    uint64_t v31 = (uint64_t)&v17[*(int *)(v15 + 24)];
    v66[0] = 1;
    uint64_t v52 = v31;
    sub_24A48D2C8(v22, v23, v10, a4, (uint64_t *)0x100000000, v31);
    uint64_t v32 = (uint64_t)&v17[*(int *)(v15 + 20)];
    v66[0] = 1;
    sub_24A48D2C8(v20, v57, v56, v55, (uint64_t *)0x100000000, v32);
    if (v53 >= v54)
    {
      sub_24A57660C(v54, v53, v33, (uint64_t)v66);
      uint64_t v34 = v68;
      int v35 = v69;
      __int16 v36 = v70;
      int v37 = v72;
      __int16 v38 = v73;
      uint64_t v39 = v74;
      long long v40 = *(_OWORD *)&v66[8];
      long long v41 = *(_OWORD *)&v66[24];
      long long v42 = v67;
      long long v43 = v71;
      *(void *)uint64_t v17 = *(void *)v66;
      *(_OWORD *)(v17 + 8) = v40;
      *(_OWORD *)(v17 + 24) = v41;
      *(_OWORD *)(v17 + 40) = v42;
      *((void *)v17 + 7) = v34;
      *((_WORD *)v17 + 34) = v36;
      *((_DWORD *)v17 + 16) = v35;
      *(_OWORD *)(v17 + 72) = v43;
      *((_WORD *)v17 + 46) = v38;
      *((_DWORD *)v17 + 22) = v37;
      *((void *)v17 + 12) = v39;
      *(void *)__int16 v66 = v64.n128_u64[0];
      *(void *)&v66[8] = v65;
      *(void *)&v66[16] = v62;
      *(void *)&v66[24] = v63;
      sub_24A491D60();
      swift_bridgeObjectRetain();
      unint64_t v10 = sub_24A5BBED0();
      unint64_t v45 = v44;
      unint64_t v47 = v46;
      unint64_t v49 = v48;
      uint64_t v15 = v61;
      unint64_t v20 = (unint64_t)v60;
      a4 = v59;
      (*(void (**)(char *, uint64_t, unint64_t))(v61 + 16))(v60, v52, v59);
      *uint64_t v14 = v10;
      v14[1] = v45;
      void v14[2] = v47;
      void v14[3] = v49;
      if ((v49 & 0x1000000000000000) == 0)
      {
LABEL_10:
        void v14[4] = v10;
        (*(void (**)(char *, unint64_t, unint64_t))(v15 + 32))((char *)v14 + *(int *)(v58 + 24), v20, a4);
        sub_24A56E248(v14);
        sub_24A4EF384((uint64_t)v17, (uint64_t)v17);
        sub_24A491510((uint64_t *)v66);
        long long v65 = *(_OWORD *)v66;
        __n128 v64 = *(__n128 *)&v66[16];
        uint64_t v50 = *(void *)&v66[32];
        uint64_t v51 = v67;
        sub_24A491C88((uint64_t)v14, (uint64_t (*)(void))_s9_IngesterVMa);
        sub_24A491C88((uint64_t)v17, (uint64_t (*)(void))_s7BuilderVMa);
        swift_unknownObjectRelease();
        __n128 result = v64;
        *unint64_t v6 = v65;
        v6[1] = (__int128)result;
        *((void *)v6 + 4) = v50;
        *((void *)v6 + 5) = v51;
        return result;
      }
LABEL_13:
      sub_24A491F98();
      goto LABEL_10;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v24 = v63;
  swift_bridgeObjectRetain();
  unint64_t v25 = v64.n128_u64[0];
  unint64_t v26 = v65;
  uint64_t v27 = v62;
  _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v25, v26, v27, v24, v22, v23, v10, a4);
  return result;
}

uint64_t sub_24A54E1F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  ++*(void *)(v3 + 40);
  if (result < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (*(void *)v3) {
    uint64_t v4 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 < a2) {
    goto LABEL_10;
  }
  if (result != a2)
  {
    sub_24A57660C(result, a2, a3, (uint64_t)&v6);
    swift_unknownObjectRelease();
    sub_24A491510((uint64_t *)v7);
    long long v5 = v7[1];
    *(_OWORD *)uint64_t v3 = v7[0];
    *(_OWORD *)(v3 + 16) = v5;
    *(_OWORD *)(v3 + 32) = v7[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  sub_24A54D850(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  sub_24A54DD00(a1, a2, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, _OWORD *a2)
{
  sub_24A51AEFC(a1, a2);
  return sub_24A496BE8((uint64_t)a2);
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, long long *a2)
{
  long long v3 = a2[1];
  v10[0] = *a2;
  v10[1] = v3;
  long long v4 = a2[3];
  _OWORD v10[2] = a2[2];
  long long v5 = a2[4];
  long long v6 = a2[5];
  v9[0] = v4;
  v9[1] = v5;
  long long v7 = a2[6];
  _OWORD v9[2] = v6;
  void v9[3] = v7;
  sub_24A486920(a1, v10, (unint64_t *)v9);
  return sub_24A496BE8((uint64_t)a2);
}

double BigString.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  sub_24A48FF2C(a1, a2, a3, a4, v8);
  long long v6 = v8[1];
  *a5 = v8[0];
  a5[1] = v6;
  double result = *(double *)&v9;
  a5[2] = v9;
  return result;
}

uint64_t BigString.append<A>(contentsOf:)(uint64_t a1, ValueMetadata *a2)
{
  sub_24A54F86C(a1, a2);
  long long v4 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a2[-1].Description + 1);
  return v4(a1, a2);
}

__n128 BigString.append(contentsOf:)(long long *a1)
{
  long long v1 = a1[1];
  v8[0] = *a1;
  v8[1] = v1;
  long long v2 = a1[3];
  _OWORD v8[2] = a1[2];
  long long v3 = a1[4];
  long long v4 = a1[5];
  v7[0] = v2;
  v7[1] = v3;
  long long v5 = a1[6];
  uint64_t v7[2] = v4;
  _OWORD v7[3] = v5;
  sub_24A48CCD0(v8, (unint64_t *)v7);
  return result;
}

__n128 BigString.insert(contentsOf:at:)(long long *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  long long v5 = a1[1];
  v12[0] = *a1;
  v12[1] = v5;
  long long v6 = a1[3];
  uint64_t v12[2] = a1[2];
  long long v7 = a1[4];
  long long v8 = a1[5];
  v11[0] = v6;
  v11[1] = v7;
  long long v9 = a1[6];
  void v11[2] = v8;
  v11[3] = v9;
  sub_24A486D1C(v12, (unint64_t *)v11, a2, a3, a4, a5);
  return result;
}

Swift::Void __swiftcall BigString.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  swift_unknownObjectRelease();
  uint64_t v3 = 0;
  MEMORY[0x24C5C7E90](&v3, 8);
  uint64_t v2 = v3;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v2;
}

double sub_24A54E5E8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0;
  MEMORY[0x24C5C7E90](&v4, 8);
  uint64_t v2 = v4;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v2;
  return result;
}

uint64_t sub_24A54E630(_OWORD *a1, uint64_t a2, ValueMetadata *a3)
{
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  _OWORD v6[2] = a1[2];
  void v6[3] = v4;
  return BigString.replaceSubrange<A>(_:with:)((unint64_t *)v6, a2, a3);
}

double sub_24A54E668@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_24A490BF0(*a1, a1[1], v7);
  sub_24A54E978(v7, a2, (uint64_t)v8);
  long long v5 = v8[1];
  *a3 = v8[0];
  a3[1] = v5;
  double result = *(double *)&v9;
  a3[2] = v9;
  return result;
}

double sub_24A54E6C4@<D0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  BigString.init<A>(_:)(a1, a2, v6);
  __n128 v4 = v6[1];
  *(__n128 *)a3 = v6[0];
  *(__n128 *)(a3 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a3 + 32) = v7;
  return result;
}

unint64_t sub_24A54E704()
{
  return BigString.append(contentsOf:)();
}

uint64_t sub_24A54E710(uint64_t a1, ValueMetadata *a2)
{
  sub_24A54F86C(a1, a2);
  __n128 v4 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a2[-1].Description + 1);
  return v4(a1, a2);
}

unint64_t sub_24A54E77C(uint64_t *a1, uint64_t a2)
{
  return BigString.insert(contentsOf:at:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A54E794(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  sub_24A54F5E8(a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
  long long v5 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a3[-1].Description + 1);
  return v5(a1, a3);
}

uint64_t sub_24A54E818@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  long long v8 = v2[1];
  long long v28 = *v2;
  long long v29 = v8;
  long long v30 = v2[2];
  unint64_t v9 = sub_24A496820(v5, v4, v6, v7, 0);
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t result = sub_24A58F608(v9, v10, v12, v14, (uint64_t *)&v23);
  long long v19 = v25;
  if ((unint64_t)v25 >> 10 < v9 >> 10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = v23;
    uint64_t v21 = v24;
    long long v22 = v26;
    unint64_t v23 = v9;
    uint64_t v24 = v11;
    *(void *)&long long v25 = v13;
    *((void *)&v25 + 1) = v15;
    long long v26 = v19;
    long long v27 = v22;
    uint64_t result = (uint64_t)sub_24A53EF68(&v23, v17, v18);
    *a2 = v20;
    a2[1] = v21;
  }
  return result;
}

void sub_24A54E8E8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_24A54E8F0(void *a1@<X8>)
{
  sub_24A586FB0();
  *a1 = v2;
  a1[1] = v3;
}

double sub_24A54E91C()
{
  swift_unknownObjectRelease();
  uint64_t v3 = 0;
  MEMORY[0x24C5C7E90](&v3, 8);
  uint64_t v1 = v3;
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = v1;
  return result;
}

uint64_t sub_24A54E960(uint64_t (*a1)(void *))
{
  return sub_24A58667C(a1);
}

uint64_t sub_24A54E978@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v95 = sub_24A5BC780();
  uint64_t v6 = *(void *)(v95 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v95);
  uint64_t v98 = (uint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v97 = (char *)&v77 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v92 = (uint64_t)&v77 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v91 = (char *)&v77 - v13;
  if (a2 < 0) {
    goto LABEL_56;
  }
  uint64_t v96 = a2;
  if (!a2)
  {
    v156[0] = 0;
    MEMORY[0x24C5C7E90](v156, 8);
    uint64_t result = sub_24A496BE8((uint64_t)a1);
    uint64_t v75 = 0;
    uint64_t v76 = v156[0];
    long long v73 = 0uLL;
    long long v74 = 0uLL;
LABEL_54:
    *(_OWORD *)a3 = v73;
    *(_OWORD *)(a3 + 16) = v74;
    *(void *)(a3 + 32) = v75;
    *(void *)(a3 + 40) = v76;
    return result;
  }
  uint64_t v86 = a3;
  v156[0] = 0;
  MEMORY[0x24C5C7E90](v156, 8);
  long long v118 = 0u;
  long long v119 = 0u;
  *(void *)&long long v120 = 0;
  *((void *)&v120 + 1) = v156[0];
  long long v14 = a1[1];
  long long v115 = *a1;
  long long v116 = v14;
  uint64_t v85 = a1;
  long long v117 = a1[2];
  v127[1] = v14;
  v127[2] = v117;
  v127[0] = v115;
  sub_24A4914AC((uint64_t)v127, (uint64_t)v128, qword_26B177E60);
  sub_24A497498((uint64_t)v128);
  uint64_t v15 = 0;
  uint64_t v94 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v16 = 1;
  uint64_t v17 = v96;
  while (1)
  {
    if ((v16 & v17) != 0)
    {
      uint64_t v18 = v115;
      if (!(void)v115) {
        goto LABEL_23;
      }
      uint64_t v19 = *((void *)&v115 + 1);
      long long v20 = v116;
      long long v21 = v117;
      long long v157 = v115;
      long long v158 = v116;
      uint64_t v159 = v117;
      if (!(void)v117) {
        goto LABEL_23;
      }
      uint64_t v99 = v15;
      if ((void)v118)
      {
        *(void *)&long long v93 = v120;
        if ((void)v120)
        {
          *((void *)&v89 + 1) = *((void *)&v117 + 1);
          *(void *)&long long v90 = v118;
          unint64_t v88 = *((void *)&v119 + 1);
          *(void *)&long long v89 = *((void *)&v118 + 1);
          unint64_t v22 = *(unsigned __int8 *)(v115 + 18);
          swift_unknownObjectRetain();
          sub_24A4895D4(v22, (uint64_t)&v112);
          unint64_t v23 = sub_24A586D60(v112, *((unint64_t *)&v112 + 1));
          swift_bridgeObjectRelease();
          if ((v23 & 0x100000000) != 0) {
            goto LABEL_60;
          }
          *(void *)&long long v112 = v18;
          *((void *)&v112 + 1) = v19;
          long long v113 = v20;
          uint64_t v114 = v21;
          swift_unknownObjectRetain();
          uint64_t v24 = v91;
          sub_24A5BC770();
          unint64_t v25 = v88;
          uint64_t v26 = v89;
          v156[0] = v90;
          v156[1] = v89;
          v156[2] = *((void *)&v21 + 1);
          v156[3] = v88;
          uint64_t v27 = v92;
          v156[4] = v93;
          v156[5] = *((void *)&v120 + 1);
          uint64_t v87 = *((void *)&v120 + 1);
          LOBYTE(v100) = 0;
          uint64_t v28 = sub_24A48D2C8(((void)v93 << 11) | 0x300, 0, 0, 1uLL, (uint64_t *)v23, v92);
          uint64_t v29 = *(unsigned __int8 *)(v18 + 18);
          uint64_t v30 = *((void *)&v89 + 1);
          uint64_t v109 = *((void *)&v89 + 1);
          uint64_t v110 = v29;
          uint64_t v111 = 0;
          MEMORY[0x270FA5388](v28);
          *(&v77 - 2) = (uint64_t)v24;
          *(&v77 - 1) = v27;
          uint64_t v107 = 0;
          char v108 = 1;
          sub_24A48E828(&v100, (uint64_t)&v109, &v112, (uint64_t)&v107, (void (*)(void *__return_ptr))sub_24A54FABC, (uint64_t)(&v77 - 4));
          uint64_t v31 = v30 + 1;
          uint64_t v32 = *((void *)&v113 + 1);
          uint64_t v33 = v114;
          v153[0] = v112;
          v153[1] = v113;
          uint64_t v154 = v114;
          uint64_t v155 = v31;
          if ((void)v112)
          {
            long long v144 = v112;
            long long v145 = v113;
            uint64_t v146 = v114;
            int v34 = *(unsigned __int16 *)(v112 + 16);
            if (*(_WORD *)(v112 + 16))
            {
              uint64_t v147 = v90;
              uint64_t v148 = v26;
              uint64_t v149 = *((void *)&v21 + 1);
              unint64_t v150 = v25;
              uint64_t v151 = v93;
              uint64_t v35 = *(unsigned __int16 *)(v90 + 16);
              if (!*(_WORD *)(v90 + 16))
              {
                uint64_t v60 = v112;
                uint64_t v61 = v113;
                uint64_t v62 = *((void *)&v112 + 1);
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                *(void *)&long long v118 = v60;
                *((void *)&v118 + 1) = v62;
                *(void *)&long long v119 = v61;
                *((void *)&v119 + 1) = v32;
                *(void *)&long long v120 = v33;
                *((void *)&v120 + 1) = v31;
                goto LABEL_19;
              }
              if (v34 != 1 || *(unsigned char *)(v112 + 18))
              {
                if ((uint64_t)v93 > 123)
                {
                  v152[0] = v90;
                  v152[1] = v26;
                  v152[2] = *((void *)&v21 + 1);
                  v152[3] = v25;
                  v152[4] = v93;
                  v152[5] = v87;
                  swift_unknownObjectRetain();
                  sub_24A5B2704((uint64_t)v152, (uint64_t *)v153, (uint64_t *)v121);
                  long long v93 = v121[0];
                  long long v90 = v121[1];
                  uint64_t v70 = v122;
                  uint64_t v71 = v123;
                  swift_unknownObjectRelease();
                  long long v118 = v93;
                  long long v119 = v90;
                  *(void *)&long long v120 = v70;
                  *((void *)&v120 + 1) = v71;
                  goto LABEL_19;
                }
                uint64_t v63 = *((void *)&v112 + 1);
                long long v89 = v113;
                *(void *)&long long v93 = v31;
                unint64_t v64 = *(unsigned __int8 *)(v90 + 18);
                unint64_t v65 = ((-15 << ((4 * v64 + 8) & 0x3C)) - 1) & v64 | (unint64_t)(v35 << ((4 * v64 + 8) & 0x3C));
                uint64_t v66 = v112;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                if (v65 == v64) {
                  goto LABEL_62;
                }
                swift_unknownObjectRetain();
                sub_24A4895D4(v64, (uint64_t)&v100);
                swift_unknownObjectRelease_n();
                uint64_t v87 = *((void *)&v100 + 1);
                unint64_t v88 = v100;
                uint64_t v67 = v101;
                uint64_t v68 = v102;
                uint64_t v82 = v103;
                uint64_t v79 = v104;
                uint64_t v78 = v105;
                uint64_t v69 = v106;
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                *(void *)&long long v118 = v66;
                *((void *)&v118 + 1) = v63;
                long long v119 = v89;
                *(void *)&long long v120 = v33;
                *((void *)&v120 + 1) = v93;
                unint64_t v80 = v80 & 0xFFFF000000000000 | v67 | (v68 << 8) | (v82 << 16) | (v79 << 24) | (v78 << 32) | (v69 << 40);
                sub_24A5B604C((void *)v88, v87, v80);
                swift_unknownObjectRelease();
              }
              else
              {
                unint64_t v36 = ((-15 << ((4 * *(unsigned char *)(v112 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v112 + 18) | ((unint64_t)*(unsigned __int16 *)(v112 + 16) << ((4 * *(unsigned char *)(v112 + 18) + 8) & 0x3C));
                swift_unknownObjectRetain();
                if (!v36) {
                  goto LABEL_58;
                }
                swift_unknownObjectRetain();
                sub_24A4895D4(0, (uint64_t)&v100);
                swift_unknownObjectRelease();
                unint64_t v81 = v81 & 0xFFFF000000000000 | v101 | ((unint64_t)v102 << 8) | ((unint64_t)v103 << 16) | ((unint64_t)v104 << 24) | ((unint64_t)v105 << 32) | ((unint64_t)v106 << 40);
                sub_24A5B5E98(v100, *((uint64_t *)&v100 + 1), v81);
                swift_unknownObjectRelease();
              }
            }
          }
          swift_unknownObjectRelease();
LABEL_19:
          uint64_t v37 = v95;
          __int16 v38 = *v94;
          (*v94)(v92, v95);
          v38((uint64_t)v91, v37);
          swift_unknownObjectRelease();
          uint64_t v17 = v96;
LABEL_22:
          uint64_t v15 = v99;
LABEL_23:
          v15 |= v16;
          goto LABEL_24;
        }
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
      }
      *(void *)&long long v118 = v18;
      *((void *)&v118 + 1) = v19;
      long long v119 = v20;
      long long v120 = v21;
      goto LABEL_22;
    }
LABEL_24:
    long long v138 = v115;
    long long v139 = v116;
    long long v140 = v117;
    uint64_t v39 = v115;
    if ((void)v115)
    {
      uint64_t v40 = *((void *)&v138 + 1);
      long long v41 = v139;
      long long v42 = v140;
      long long v141 = v138;
      long long v142 = v139;
      uint64_t v143 = v140;
      if ((void)v140)
      {
        uint64_t v99 = v15;
        unint64_t v43 = *(unsigned __int8 *)(v115 + 18);
        swift_unknownObjectRetain();
        sub_24A4895D4(v43, (uint64_t)&v112);
        unint64_t v44 = sub_24A586D60(v112, *((unint64_t *)&v112 + 1));
        swift_bridgeObjectRelease();
        if ((v44 & 0x100000000) != 0) {
          goto LABEL_59;
        }
        *(void *)&long long v112 = v39;
        *((void *)&v112 + 1) = v40;
        long long v113 = v41;
        uint64_t v114 = v42;
        swift_unknownObjectRetain();
        unint64_t v45 = v97;
        sub_24A5BC770();
        LOBYTE(v100) = 0;
        uint64_t v46 = v98;
        uint64_t v47 = sub_24A48D2C8(((void)v42 << 11) | 0x300, 0, 0, 1uLL, (uint64_t *)v44, v98);
        uint64_t v48 = *(unsigned __int8 *)(v39 + 18);
        uint64_t v109 = *((void *)&v42 + 1);
        uint64_t v110 = v48;
        uint64_t v111 = 0;
        MEMORY[0x270FA5388](v47);
        *(&v77 - 2) = (uint64_t)v45;
        *(&v77 - 1) = v46;
        uint64_t v107 = 0;
        char v108 = 1;
        sub_24A48E828(&v100, (uint64_t)&v109, &v112, (uint64_t)&v107, (void (*)(void *__return_ptr))sub_24A48ECE4, (uint64_t)(&v77 - 4));
        long long v49 = v112;
        long long v50 = v113;
        uint64_t v51 = v114;
        v135[0] = v112;
        v135[1] = v113;
        uint64_t v136 = v114;
        uint64_t v137 = *((void *)&v42 + 1) + 1;
        if (!(void)v112) {
          goto LABEL_42;
        }
        *(_OWORD *)&v128[40] = v112;
        long long v129 = v113;
        uint64_t v130 = v114;
        int v52 = *(unsigned __int16 *)(v112 + 16);
        if (!*(_WORD *)(v112 + 16)) {
          goto LABEL_42;
        }
        if ((void)v115)
        {
          long long v131 = v115;
          long long v132 = v116;
          uint64_t v133 = v117;
          if (*(_WORD *)(v115 + 16))
          {
            if (v52 == 1 && !*(unsigned char *)(v112 + 18))
            {
              unint64_t v53 = ((-15 << ((4 * *(unsigned char *)(v112 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v112 + 18) | ((unint64_t)*(unsigned __int16 *)(v112 + 16) << ((4 * *(unsigned char *)(v112 + 18) + 8) & 0x3C));
              swift_unknownObjectRetain();
              if (!v53) {
                goto LABEL_57;
              }
              swift_unknownObjectRetain();
              sub_24A4895D4(0, (uint64_t)&v100);
              swift_unknownObjectRelease();
              unint64_t v84 = v84 & 0xFFFF000000000000 | v101 | ((unint64_t)v102 << 8) | ((unint64_t)v103 << 16) | ((unint64_t)v104 << 24) | ((unint64_t)v105 << 32) | ((unint64_t)v106 << 40);
              sub_24A5B5E98(v100, *((uint64_t *)&v100 + 1), v84);
              goto LABEL_41;
            }
            if ((uint64_t)v117 > 123)
            {
              v134[0] = v115;
              v134[1] = v116;
              v134[2] = v117;
              swift_unknownObjectRetain();
              sub_24A5B2704((uint64_t)v134, (uint64_t *)v135, (uint64_t *)v124);
              long long v93 = v124[0];
              long long v90 = v124[1];
              uint64_t v58 = v125;
              uint64_t v59 = v126;
              sub_24A496BE8((uint64_t)&v138);
              long long v115 = v93;
              long long v116 = v90;
              *(void *)&long long v117 = v58;
              *((void *)&v117 + 1) = v59;
            }
            else
            {
              uint64_t v54 = *(unsigned __int8 *)(v115 + 18);
              *(void *)&long long v93 = ((-15 << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v115 + 16) << ((4 * v54 + 8) & 0x3C));
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              *(void *)&long long v90 = v54;
              if ((void)v93 == v54) {
                goto LABEL_61;
              }
              swift_unknownObjectRetain();
              sub_24A4895D4(v90, (uint64_t)&v100);
              swift_unknownObjectRelease_n();
              *(void *)&long long v93 = v100;
              *((void *)&v89 + 1) = v101;
              *(void *)&long long v90 = *((void *)&v100 + 1);
              *(void *)&long long v89 = v102;
              unint64_t v88 = v103;
              uint64_t v87 = v104;
              uint64_t v82 = v105;
              uint64_t v55 = v106;
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              long long v115 = v49;
              long long v116 = v50;
              *(void *)&long long v117 = v51;
              *((void *)&v117 + 1) = *((void *)&v42 + 1) + 1;
              unint64_t v83 = v83 & 0xFFFF000000000000 | *((void *)&v89 + 1) | ((void)v89 << 8) | (v88 << 16) | (v87 << 24) | (v82 << 32) | (v55 << 40);
              sub_24A5B604C((void *)v93, v90, v83);
LABEL_41:
              swift_unknownObjectRelease();
LABEL_42:
              sub_24A496BE8((uint64_t)&v138);
            }
LABEL_43:
            uint64_t v56 = v95;
            unint64_t v57 = *v94;
            (*v94)(v98, v95);
            v57((uint64_t)v97, v56);
            swift_unknownObjectRelease();
            uint64_t v17 = v96;
            uint64_t v15 = v99;
            goto LABEL_44;
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
        }
        sub_24A496BE8((uint64_t)&v138);
        long long v115 = v49;
        long long v116 = v50;
        *(void *)&long long v117 = v51;
        *((void *)&v117 + 1) = *((void *)&v42 + 1) + 1;
        goto LABEL_43;
      }
    }
LABEL_44:
    if (v16 + 0x4000000000000000 < 0) {
      break;
    }
    v16 *= 2;
    if (v15 >= v17)
    {
      sub_24A496BE8((uint64_t)v85);
      uint64_t result = swift_unknownObjectRelease();
      long long v73 = v118;
      long long v74 = v119;
      uint64_t v76 = *((void *)&v120 + 1);
      uint64_t v75 = v120;
      a3 = v86;
      goto LABEL_54;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_unknownObjectRelease();
  __break(1u);
LABEL_62:
  uint64_t result = swift_unknownObjectRelease();
  __break(1u);
  return result;
}

double sub_24A54F4E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, _OWORD *a4@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  BigString.init<A>(_:)((uint64_t)v8, a3, v12);
  sub_24A54E978((long long *)v12, a2, (uint64_t)v13);
  long long v10 = v13[1];
  *a4 = v13[0];
  a4[1] = v10;
  double result = *(double *)&v14;
  a4[2] = v14;
  return result;
}

void sub_24A54F5E8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, ValueMetadata *a6)
{
  MEMORY[0x270FA5388](a1);
  long long v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15 == MEMORY[0x263F8D310])
  {
    uint64_t v17 = *(void *)v11;
    uint64_t v18 = *(void *)(v11 + 8);
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(v17, v18, a2, a3, a4, a5);
  }
  else if (a6 == (ValueMetadata *)MEMORY[0x263F8D980])
  {
    unint64_t v19 = *(void *)v11;
    unint64_t v20 = *(void *)(v11 + 8);
    uint64_t v21 = *(void *)(v11 + 16);
    uint64_t v22 = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
    _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v19, v20, v21, v22, a2, a3, a4, a5);
  }
  else
  {
    if (a6 == &type metadata for BigString)
    {
      long long v23 = *(_OWORD *)(v11 + 16);
      __n128 v27 = *(__n128 *)v11;
      long long v28 = v23;
      long long v29 = *(_OWORD *)(v11 + 32);
      __n128 v30 = v27;
      long long v31 = v23;
      long long v32 = v29;
      sub_24A4914AC((uint64_t)&v30, (uint64_t)v34, qword_26B177E60);
      sub_24A497498((uint64_t)v34);
      uint64_t v16 = &v27;
      goto LABEL_13;
    }
    if (a6 != &type metadata for BigSubstring)
    {
      (*(void (**)(char *))(v12 + 16))(v14);
      BigString.init<A>(_:)((uint64_t)v14, a6, &v30);
      uint64_t v16 = &v30;
LABEL_13:
      _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(v16, a2, a3, a4, a5);
      return;
    }
    long long v24 = *(_OWORD *)(v11 + 16);
    __n128 v27 = *(__n128 *)v11;
    long long v28 = v24;
    __n128 v25 = *(__n128 *)(v11 + 48);
    long long v29 = *(_OWORD *)(v11 + 32);
    __n128 v30 = v25;
    long long v26 = *(_OWORD *)(v11 + 80);
    long long v31 = *(_OWORD *)(v11 + 64);
    long long v32 = v26;
    long long v33 = *(_OWORD *)(v11 + 96);
    swift_unknownObjectRetain();
    sub_24A486D1C((long long *)&v27, v30.n128_u64, a2, a3, a4, a5);
  }
}

void sub_24A54F86C(uint64_t a1, ValueMetadata *a2)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == (ValueMetadata *)MEMORY[0x263F8D310])
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_24A5BB830();
    unint64_t v10 = v9;
    uint64_t v12 = v11;
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    unint64_t v15 = v8;
    unint64_t v16 = v10;
    uint64_t v17 = v12;
    unint64_t v18 = v14;
LABEL_8:
    _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v15, v16, v17, v18);
    return;
  }
  if (a2 == (ValueMetadata *)MEMORY[0x263F8D980])
  {
    unint64_t v19 = *(void *)v3;
    unint64_t v20 = *(void *)(v3 + 8);
    uint64_t v21 = *(void *)(v3 + 16);
    unint64_t v22 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    unint64_t v15 = v19;
    unint64_t v16 = v20;
    uint64_t v17 = v21;
    unint64_t v18 = v22;
    goto LABEL_8;
  }
  if (a2 == &type metadata for BigString)
  {
    long long v23 = *(_OWORD *)(v3 + 16);
    __n128 v27 = *(__n128 *)v3;
    long long v28 = v23;
    long long v29 = *(_OWORD *)(v3 + 32);
    __n128 v30 = v27;
    long long v31 = v23;
    long long v32 = v29;
    sub_24A4914AC((uint64_t)&v30, (uint64_t)v34, qword_26B177E60);
    sub_24A497498((uint64_t)v34);
    uint64_t v7 = &v27;
    goto LABEL_12;
  }
  if (a2 != &type metadata for BigSubstring)
  {
    (*(void (**)(char *))(v4 + 16))(v6);
    BigString.init<A>(_:)((uint64_t)v6, a2, &v30);
    uint64_t v7 = &v30;
LABEL_12:
    _s19CollectionsInternal9BigStringV6append10contentsOfyACn_tF_0((uint64_t)v7);
    return;
  }
  long long v24 = *(_OWORD *)(v3 + 16);
  __n128 v27 = *(__n128 *)v3;
  long long v28 = v24;
  __n128 v25 = *(__n128 *)(v3 + 48);
  long long v29 = *(_OWORD *)(v3 + 32);
  __n128 v30 = v25;
  long long v26 = *(_OWORD *)(v3 + 80);
  long long v31 = *(_OWORD *)(v3 + 64);
  long long v32 = v26;
  long long v33 = *(_OWORD *)(v3 + 96);
  swift_unknownObjectRetain();
  sub_24A48CCD0((long long *)&v27, v30.n128_u64);
}

uint64_t TreeSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _HashNode.isSubset<A>(_:of:)(0, a1, a2, a4, a5, a7, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60] + 8, a8) & 1;
}

uint64_t TreeSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _HashNode.isSubset<A>(_:of:)(0, a1, a2, a4, a5, a7, MEMORY[0x263F8EE60] + 8, a8, a9);
}

uint64_t TreeSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = a4;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v63 = a1;
  uint64_t v62 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v64 = (char *)&v52 - v11;
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v57 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v55 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  unint64_t v20 = (char *)&v52 - v19;
  uint64_t v59 = *(void *)(a5 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  long long v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  long long v26 = (char *)&v52 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v58 = (char *)&v52 - v28;
  uint64_t v29 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v27);
  long long v31 = (char *)&v52 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet() == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v63, a6);
    swift_dynamicCast();
    char v34 = _HashNode.isSubset<A>(_:of:)(0, v82, *((uint64_t *)&v82 + 1), v70, v71, a5, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60] + 8, a7);
    swift_release();
  }
  else
  {
    uint64_t v52 = v29;
    unint64_t v53 = v31;
    uint64_t v61 = a6;
    TreeSet.makeIterator()(v70, &v82);
    uint64_t v32 = type metadata accessor for TreeSet.Iterator();
    TreeSet.Iterator.next()(v32, (uint64_t)v20);
    uint64_t v33 = v59;
    uint64_t v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
    uint64_t v69 = v59 + 48;
    if (v68(v20, 1, a5) == 1)
    {
      long long v80 = v88;
      v81[0] = v89[0];
      *(_OWORD *)((char *)v81 + 11) = *(_OWORD *)((char *)v89 + 11);
      long long v76 = v84;
      long long v77 = v85;
      long long v78 = v86;
      long long v79 = v87;
      long long v74 = v82;
      long long v75 = v83;
      sub_24A4A2BC4((uint64_t)&v74);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v57);
      goto LABEL_4;
    }
    uint64_t v35 = a7;
    uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    uint64_t v67 = v33 + 32;
    v66(v58, v20, a5);
    uint64_t v36 = v61;
    char v37 = sub_24A5BB870();
    if (v37 == 2)
    {
      if (qword_26979ACF0 != -1) {
        swift_once();
      }
      uint64_t v38 = MEMORY[0x263F8EE60] + 8;
      uint64_t v72 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x263F8EE60] + 8, a7);
      uint64_t v73 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v53, v63, v36);
      swift_retain();
      sub_24A5BB840();
      swift_getAssociatedConformanceWitness();
      uint64_t v40 = v55;
      sub_24A5BBEE0();
      if (v68(v40, 1, a5) != 1)
      {
        long long v42 = (void (**)(char *, uint64_t))(v59 + 8);
        do
        {
          v66(v23, v40, a5);
          uint64_t v43 = sub_24A5B85E4();
          if (_HashNode.containsKey(_:_:_:)(0, (uint64_t)v23, v43, v70, v71, a5, v38, v35))
          {
            unint64_t v44 = (void *)type metadata accessor for _HashNode();
            char v46 = _HashNode.insert(_:_:_:)(0, (uint64_t)v23, v45, v43, v44);
            uint64_t v47 = *v42;
            (*v42)(v23, a5);
            if (v46)
            {
              uint64_t v48 = v73;
              if (v48 == TreeSet.count.getter(v70, v71))
              {
                (*(void (**)(char *, uint64_t))(v54 + 8))(v64, AssociatedTypeWitness);
                v47(v58, a5);
                long long v80 = v88;
                v81[0] = v89[0];
                *(_OWORD *)((char *)v81 + 11) = *(_OWORD *)((char *)v89 + 11);
                long long v76 = v84;
                long long v77 = v85;
                long long v78 = v86;
                long long v79 = v87;
                long long v74 = v82;
                long long v75 = v83;
                sub_24A4A2BC4((uint64_t)&v74);
                swift_release();
                goto LABEL_4;
              }
            }
          }
          else
          {
            (*v42)(v23, a5);
          }
          sub_24A5BBEE0();
        }
        while (v68(v40, 1, a5) != 1);
      }
      (*(void (**)(char *, uint64_t))(v54 + 8))(v64, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v58, a5);
      long long v80 = v88;
      v81[0] = v89[0];
      *(_OWORD *)((char *)v81 + 11) = *(_OWORD *)((char *)v89 + 11);
      long long v76 = v84;
      long long v77 = v85;
      long long v78 = v86;
      long long v79 = v87;
      long long v74 = v82;
      long long v75 = v83;
      sub_24A4A2BC4((uint64_t)&v74);
      swift_release();
LABEL_24:
      char v34 = 0;
      return v34 & 1;
    }
    long long v41 = (void (**)(char *, uint64_t))(v33 + 8);
    if ((v37 & 1) == 0)
    {
      (*v41)(v58, a5);
      long long v80 = v88;
      v81[0] = v89[0];
      *(_OWORD *)((char *)v81 + 11) = *(_OWORD *)((char *)v89 + 11);
LABEL_23:
      long long v76 = v84;
      long long v77 = v85;
      long long v78 = v86;
      long long v79 = v87;
      long long v74 = v82;
      long long v75 = v83;
      sub_24A4A2BC4((uint64_t)&v74);
      goto LABEL_24;
    }
    while (1)
    {
      TreeSet.Iterator.next()(v32, (uint64_t)v17);
      if (v68(v17, 1, a5) == 1) {
        break;
      }
      v66(v26, v17, a5);
      char v49 = sub_24A5BB920();
      long long v50 = *v41;
      (*v41)(v26, a5);
      if ((v49 & 1) == 0)
      {
        v50(v58, a5);
        long long v80 = v88;
        v81[0] = v89[0];
        *(_OWORD *)((char *)v81 + 11) = *(_OWORD *)((char *)v89 + 11);
        goto LABEL_23;
      }
    }
    (*v41)(v58, a5);
    long long v80 = v88;
    v81[0] = v89[0];
    *(_OWORD *)((char *)v81 + 11) = *(_OWORD *)((char *)v89 + 11);
    long long v76 = v84;
    long long v77 = v85;
    long long v78 = v86;
    long long v79 = v87;
    long long v74 = v82;
    long long v75 = v83;
    sub_24A4A2BC4((uint64_t)&v74);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v57);
LABEL_4:
    char v34 = 1;
  }
  return v34 & 1;
}

uint64_t OrderedSet.SubSequence._slice.getter()
{
  return sub_24A5BC240();
}

uint64_t OrderedSet.SubSequence._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedSet.SubSequence._base.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet.SubSequence._base.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedSet.SubSequence._bounds.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OrderedSet.SubSequence._bounds.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 16) = result;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*OrderedSet.SubSequence._bounds.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedSet.SubSequence._index(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = OrderedSet._find(_:)();
  if (result < a4 || result >= a5) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = result;
  }
  if ((v8 & 1) == 0) {
    return v11;
  }
  return result;
}

uint64_t OrderedSet.SubSequence.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a2;
  __n128 v6[2] = a3;
  void v6[3] = a4;
  uint64_t v4 = type metadata accessor for OrderedSet.SubSequence();
  swift_getWitnessTable();
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)v6, 0, 0, 0, v4);
}

uint64_t sub_24A5505D8(uint64_t a1, uint64_t a2)
{
  return sub_24A5506E0(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.SubSequence.description.getter);
}

uint64_t OrderedSet.SubSequence.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = a1;
  v10[1] = a2;
  _OWORD v10[2] = a3;
  long long v10[3] = a4;
  uint64_t v8 = sub_24A5A95FC();
  uint64_t v9 = v4;
  sub_24A5BB6F0();
  uint64_t v5 = type metadata accessor for OrderedSet.SubSequence();
  swift_getWitnessTable();
  uint64_t v6 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v10, 1, v8, v9, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24A5506C8(uint64_t a1, uint64_t a2)
{
  return sub_24A5506E0(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.SubSequence.debugDescription.getter);
}

uint64_t sub_24A5506E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], v3[3], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

BOOL OrderedSet.SubSequence._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = OrderedSet._find(_:)();
  return (v8 & 1) == 0 && v7 >= a4 && v7 < a5;
}

uint64_t OrderedSet.SubSequence._copyToContiguousArray()()
{
  uint64_t v0 = sub_24A488DCC();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.SubSequence._copyContents(initializing:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = a3;
  if (a3 != a4
    && (uint64_t v12 = sub_24A5BC240(),
        v14[1] = v14,
        MEMORY[0x270FA5388](v12),
        sub_24A5BBFA0(),
        uint64_t result = swift_unknownObjectRelease(),
        uint64_t v10 = v15,
        uint64_t v11 = a3 + v15,
        __OFADD__(a3, v15)))
  {
    __break(1u);
  }
  else
  {
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = a4;
    a5[4] = v11;
    a5[5] = v10;
  }
  return result;
}

BOOL OrderedSet.SubSequence.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t sub_24A5508C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_24A5BB540();
  if (result)
  {
    if (a2 >= a1) {
      a2 = a1;
    }
    if (a2 < 1) {
      goto LABEL_7;
    }
    uint64_t result = sub_24A5BB540();
    if (result)
    {
      uint64_t result = sub_24A5BBCD0();
LABEL_7:
      *a3 = a2;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.SubSequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return swift_unknownObjectRelease();
}

__n128 sub_24A550A18@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1->n128_u64[1];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u64[1] = v2;
  __n128 result = v1[1];
  a1[1] = result;
  a1[2].n128_u64[0] = result.n128_u64[0];
  return result;
}

uint64_t sub_24A550A30(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

BOOL sub_24A550A84(uint64_t a1)
{
  return OrderedSet.SubSequence._customContainsEquatableElement(_:)(a1, *v1, v1[1], v1[2], v1[3]);
}

__n128 sub_24A550A98(__n128 *a1)
{
  OrderedSet.SubSequence._copyContents(initializing:)(*v1, v1[1], v1[2], v1[3], v6);
  unint64_t v3 = v6[1];
  unint64_t v4 = v8;
  __n128 result = v7;
  a1->n128_u64[0] = v6[0];
  a1->n128_u64[1] = v3;
  a1[1] = result;
  a1[2].n128_u64[0] = v4;
  return result;
}

uint64_t sub_24A550AFC()
{
  return OrderedSet.SubSequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedSet.SubSequence.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OrderedSet.SubSequence.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t OrderedSet.SubSequence.indices.getter()
{
  sub_24A5BC240();
  sub_24A5BBFE0();
  swift_getWitnessTable();
  sub_24A5BBAC0();
  swift_unknownObjectRelease();
  return v1;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedSet.SubSequence.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedSet.SubSequence.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedSet.SubSequence.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  sub_24A5BC240();
  Swift::Int v6 = swift_unknownObjectRelease();
  Swift::Int v8 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v8 > 0 || v8 <= offsetBy)
    {
LABEL_9:
      Swift::Int v6 = _ + offsetBy;
      if (!__OFADD__(_, offsetBy))
      {
        Swift::Bool v7 = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8 < 0 || v8 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  Swift::Int v6 = 0;
  Swift::Bool v7 = 1;
LABEL_13:
  result.value = v6;
  result.is_nil = v7;
  return result;
}

Swift::Int __swiftcall OrderedSet.SubSequence.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedSet.SubSequence.subscript.getter()
{
  sub_24A5BC240();
  sub_24A5BBFF0();
  return swift_unknownObjectRelease();
}

uint64_t OrderedSet.SubSequence.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 < a5)
  {
    __break(1u);
  }
  else
  {
    sub_24A5BC240();
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    return a3;
  }
  return result;
}

uint64_t OrderedSet.SubSequence._failEarlyRangeCheck(_:bounds:)()
{
  sub_24A5BC240();
  return swift_unknownObjectRelease();
}

{
  uint64_t vars8;

  sub_24A5BC240();
  return swift_unknownObjectRelease();
}

uint64_t OrderedSet.SubSequence.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    __break(1u);
  }
  return result;
}

uint64_t _s19CollectionsInternal10OrderedSetV11SubSequenceV30_customIndexOfEquatableElementySiSgSgxF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = OrderedSet._find(_:)();
  if (result < a4 || result >= a5) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = result;
  }
  if ((v8 & 1) == 0) {
    return v11;
  }
  return result;
}

uint64_t OrderedSet.SubSequence._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A5BC240();
  v7[1] = a3;
  uint64_t v8 = a1;
  v7[0] = a2;
  sub_24A5BBFE0();
  swift_getWitnessTable();
  sub_24A4E7F28((uint64_t)&v8, (uint64_t)v7);
  return swift_unknownObjectRelease();
}

void sub_24A550F7C(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void (*sub_24A550F88(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  OrderedSet.SubSequence._slice.getter();
  sub_24A5BBFF0();
  swift_unknownObjectRelease();
  return sub_24A50EF90;
}

uint64_t *sub_24A55107C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  if (v2[3] < v2[2])
  {
    __break(1u);
  }
  else
  {
    Swift::Int v6 = v2;
    uint64_t v4 = *v2;
    uint64_t v5 = v6[1];
    uint64_t v8 = *result;
    uint64_t v7 = result[1];
    OrderedSet.SubSequence._slice.getter();
    swift_unknownObjectRelease();
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v8;
    a2[3] = v7;
    swift_retain();
    return (uint64_t *)swift_retain();
  }
  return result;
}

double sub_24A5510F8@<D0>(_OWORD *a1@<X8>)
{
  OrderedSet.SubSequence._slice.getter();
  sub_24A5BBFE0();
  swift_getWitnessTable();
  sub_24A5BBAC0();
  swift_unknownObjectRelease();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

BOOL sub_24A5511A0()
{
  return *(void *)(v0 + 16) == *(void *)(v0 + 24);
}

uint64_t sub_24A5511B0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A5511C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = OrderedSet.SubSequence._index(of:)(a1, *v2, v2[1], v2[2], v2[3]);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5 & 1;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_24A55120C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a3;
  OrderedSet.SubSequence._slice.getter();
  uint64_t v8 = sub_24A4E8180(v6, a2, v7);
  LOBYTE(v6) = v9;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_24A55128C()
{
  OrderedSet.SubSequence._slice.getter();
  return swift_unknownObjectRelease();
}

uint64_t sub_24A5512C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  OrderedSet.SubSequence._slice.getter();
  v6[1] = v4;
  uint64_t v7 = v2;
  v6[0] = v3;
  sub_24A5BBFE0();
  swift_getWitnessTable();
  sub_24A4E7F28((uint64_t)&v7, (uint64_t)v6);
  return swift_unknownObjectRelease();
}

uint64_t static OrderedSet.SubSequence.== infix(_:_:)()
{
  return sub_24A5BB910() & 1;
}

uint64_t sub_24A551400()
{
  return static OrderedSet.SubSequence.== infix(_:_:)() & 1;
}

uint64_t OrderedSet.SubSequence.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14 - v13;
  if (__OFSUB__(v14, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_24A5BC630();
  if (a4 == a5) {
    return result;
  }
  if (a4 >= a5)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2;
  uint64_t v17 = (void (**)(char *, uint64_t))(v10 + 8);
  v19[1] = v16;
  swift_retain();
  swift_retain();
  uint64_t v18 = a4;
  do
  {
    sub_24A5BC240();
    sub_24A5BBFF0();
    swift_unknownObjectRelease();
    ++v18;
    sub_24A5BB380();
    (*v17)(v12, a6);
  }
  while (a5 != v18);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.SubSequence.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A5BC610();
  OrderedSet.SubSequence.hash(into:)((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_24A5BC690();
}

uint64_t sub_24A551668(uint64_t a1)
{
  return OrderedSet.SubSequence.hashValue.getter(*v1, v1[1], v1[2], v1[3], *(void *)(a1 + 16));
}

uint64_t sub_24A55167C(uint64_t a1, uint64_t a2)
{
  return OrderedSet.SubSequence.hash(into:)(a1, *v2, v2[1], v2[2], v2[3], *(void *)(a2 + 16));
}

uint64_t sub_24A551690(uint64_t a1, uint64_t a2)
{
  sub_24A5BC610();
  OrderedSet.SubSequence.hash(into:)((uint64_t)v5, *v2, v2[1], v2[2], v2[3], *(void *)(a2 + 16));
  return sub_24A5BC690();
}

uint64_t sub_24A5516DC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_24A5508C4(a1, *(void *)(v2 + 40), a2);
}

uint64_t sub_24A5516FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A551718()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A551734()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A551750()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A55176C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A551788()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A5517A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_24A5517E4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *sub_24A551854(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t _RawHashNode.UnsafeHandle._memory.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static _RawHashNode.UnsafeHandle.read<A>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return a2(a1 + 16, a1 + 32);
}

ValueMetadata *type metadata accessor for _RawHashNode.UnsafeHandle()
{
  return &type metadata for _RawHashNode.UnsafeHandle;
}

uint64_t Rope._UnmanagedLeaf.read<A>(body:)(uint64_t (*a1)(uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_24A55197C(a3, a1, a2, a5);
}

uint64_t Rope._UnmanagedLeaf._ref.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Rope._UnmanagedLeaf._ref.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

BOOL static Rope._UnmanagedLeaf.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_24A551970(uint64_t *a1, uint64_t *a2)
{
  return static Rope._UnmanagedLeaf.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_24A55197C(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  return sub_24A551A30((uint64_t)(a1 + 2), (uint64_t)a1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(*a1 + class metadata base offset for Rope._Storage + 8) - 8)+ 80)+ 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(*a1+ class metadata base offset for Rope._Storage+ 8)- 8)+ 80)), a2, a3, *(void *)(*a1 + class metadata base offset for Rope._Storage), a4, *(void *)(*a1 + class metadata base offset for Rope._Storage + 16));
}

uint64_t type metadata accessor for Rope._UnmanagedLeaf()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A551A30(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = type metadata accessor for Rope._Item();
  swift_getWitnessTable();
  uint64_t v13 = nullsub_1(a1, a2, a5, v12, a7);
  return a3(v13);
}

BOOL BigString.isIdentical(to:)(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  long long v8[3] = *v1;
  v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  _OWORD v8[2] = a1[2];
  sub_24A497498((uint64_t)v1);
  sub_24A497498((uint64_t)a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8((uint64_t)a1);
  sub_24A496BE8(v2);
  return v6;
}

uint64_t sub_24A551B78(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  void v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return _s19CollectionsInternal9BigStringV2eeoiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t sub_24A551BC0(uint64_t *a1, unint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (a2[4] >> 11) - (*a2 >> 11);
  unint64_t v6 = *a4;
  if (v5 == (a4[4] >> 11) - (*a4 >> 11))
  {
    unint64_t v30 = a4[2];
    unint64_t v9 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v10 = a2[1];
    uint64_t v11 = a1[5];
    long long v25 = *(_OWORD *)(a1 + 1);
    long long v26 = *(_OWORD *)(a1 + 3);
    uint64_t v12 = *a1;
    uint64_t v32 = a4[3];
    uint64_t v33 = a3[5];
    long long v31 = *(_OWORD *)(a3 + 3);
    long long v29 = *(_OWORD *)(a3 + 1);
    uint64_t v27 = *a3;
    uint64_t v28 = a4[1];
    long long v13 = *((_OWORD *)a1 + 2);
    long long v14 = *(_OWORD *)a1;
    v52[1] = *((_OWORD *)a1 + 1);
    v52[2] = v13;
    v52[0] = v14;
    sub_24A4974C4((uint64_t)v52, (uint64_t)v53);
    sub_24A497498((uint64_t)v53);
    uint64_t v42 = v12;
    long long v43 = v25;
    long long v44 = v26;
    uint64_t v45 = v11;
    unint64_t v46 = sub_24A489E5C(v4, v10, v9, v8);
    uint64_t v47 = v15;
    uint64_t v48 = v16;
    uint64_t v49 = v17;
    long long v18 = *((_OWORD *)a3 + 1);
    v50[0] = *(_OWORD *)a3;
    v50[1] = v18;
    v50[2] = *((_OWORD *)a3 + 2);
    sub_24A4974C4((uint64_t)v50, (uint64_t)v51);
    sub_24A497498((uint64_t)v51);
    uint64_t v34 = v27;
    long long v35 = v29;
    long long v36 = v31;
    uint64_t v37 = v33;
    unint64_t v38 = sub_24A489E5C(v6, v28, v30, v32);
    uint64_t v39 = v19;
    uint64_t v40 = v20;
    uint64_t v41 = v21;
    if (v5 < 1)
    {
LABEL_6:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 1;
    }
    while (1)
    {
      uint64_t v22 = sub_24A55CE68(v5, &v42, &v34);
      if (v22 < 1) {
        break;
      }
      BOOL v23 = v5 <= v22;
      v5 -= v22;
      if (v23) {
        goto LABEL_6;
      }
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t sub_24A551D98(void *a1, void *a2)
{
  uint64_t v34 = a2[1];
  uint64_t v35 = *a2;
  uint64_t v32 = a2[3];
  uint64_t v33 = a2[2];
  uint64_t v4 = a2[5];
  uint64_t v36 = a2[4];
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  long long v11 = *((_OWORD *)a1 + 1);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)a1;
  *(_OWORD *)&v40[16] = v11;
  *(_OWORD *)&v40[32] = *((_OWORD *)a1 + 2);
  long long v12 = *((_OWORD *)a2 + 1);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)a2;
  *(_OWORD *)&v39[16] = v12;
  *(_OWORD *)&v39[32] = *((_OWORD *)a2 + 2);
  sub_24A497498((uint64_t)a1);
  sub_24A497498((uint64_t)a2);
  BOOL v13 = sub_24A495D7C((uint64_t)v39);
  sub_24A496BE8((uint64_t)a2);
  sub_24A496BE8((uint64_t)a1);
  if (v13) {
    return 1;
  }
  uint64_t v30 = v10;
  uint64_t v31 = v8;
  uint64_t v16 = *(void *)v40;
  uint64_t v17 = *(void *)&v40[32];
  if (*(void *)v40)
  {
    int64x2_t v18 = *(int64x2_t *)&v40[8];
    int64x2_t v19 = *(int64x2_t *)&v40[24];
  }
  else
  {
    int64x2_t v18 = 0uLL;
    int64x2_t v19 = 0uLL;
  }
  v14.i64[0] = 0;
  v15.i64[0] = *(void *)v39;
  int8x16_t v20 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v15, v14)).i64[0], 0);
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v18, (int64x2_t)vandq_s8(*(int8x16_t *)&v39[8], v20)), (int32x4_t)vceqq_s64(v19, (int64x2_t)vandq_s8(*(int8x16_t *)&v39[24], v20)))), 0xFuLL))) & 1) == 0)return 0; {
  swift_unknownObjectRetain();
  }
  v38[0] = v6;
  v38[1] = v5;
  void v38[2] = v31;
  v38[3] = v7;
  v38[4] = v9;
  v38[5] = v30;
  v38[6] = sub_24A489E5C(0x300uLL, 0, 0, 1);
  v38[7] = v22;
  v38[8] = v23;
  v38[9] = v24;
  swift_unknownObjectRetain();
  v37[0] = v35;
  v37[1] = v34;
  v37[2] = v33;
  void v37[3] = v32;
  v37[4] = v36;
  v37[5] = v4;
  v37[6] = sub_24A489E5C(0x300uLL, 0, 0, 1);
  v37[7] = v25;
  v37[8] = v26;
  v37[9] = v27;
  if (!v16 || v17 < 1)
  {
LABEL_12:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 1;
  }
  while (1)
  {
    uint64_t v28 = sub_24A55CE68(v17, v38, v37);
    if (v28 < 1) {
      break;
    }
    BOOL v29 = v17 <= v28;
    v17 -= v28;
    if (v29) {
      goto LABEL_12;
    }
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return 0;
}

uint64_t _s19CollectionsInternal9BigStringV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  __n128 v27 = *(__n128 *)a1;
  long long v28 = v4;
  long long v29 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v5;
  _OWORD v26[2] = *(_OWORD *)(a2 + 32);
  sub_24A497498(a1);
  sub_24A497498(a2);
  BOOL v6 = sub_24A495D7C((uint64_t)v26);
  sub_24A496BE8(a2);
  sub_24A496BE8(a1);
  if (v6) {
    return 1;
  }
  unint64_t v8 = v27.n128_u64[1];
  if (!v27.n128_u64[0]) {
    unint64_t v8 = 0;
  }
  if (*(void *)&v26[0])
  {
    if (v8 != *((void *)&v26[0] + 1)) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  swift_unknownObjectRetain();
  sub_24A561324((__n128 *)a1, v23);
  swift_unknownObjectRetain();
  sub_24A561324((__n128 *)a2, v20);
  while (1)
  {
    if ((v25 ^ v24) >= 0x4000)
    {
      __n128 v37 = v23[0];
      __n128 v38 = v23[1];
      __n128 v39 = v23[2];
      __n128 v40 = v23[3];
      __n128 v41 = v23[4];
      unint64_t v42 = v24;
      unint64_t v43 = v25;
      sub_24A495168();
      uint64_t v13 = v14;
      uint64_t v12 = v15;
      if ((sub_24A495704(v14, v15) & 1) == 0) {
        unint64_t v24 = v25;
      }
      unint64_t v10 = v21;
      unint64_t v11 = v22;
      if ((v22 ^ v21) < 0x4000)
      {
        if (v12) {
          goto LABEL_27;
        }
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v10 = v21;
      unint64_t v11 = v22;
      if ((v22 ^ v21) < 0x4000) {
        goto LABEL_30;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    __n128 v30 = v20[0];
    __n128 v31 = v20[1];
    __n128 v32 = v20[2];
    __n128 v33 = v20[3];
    __n128 v34 = v20[4];
    unint64_t v35 = v10;
    unint64_t v36 = v11;
    sub_24A495168();
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    if ((sub_24A495704(v16, v18) & 1) == 0) {
      unint64_t v21 = v22;
    }
    if (!v12) {
      break;
    }
    if (!v19) {
      goto LABEL_27;
    }
    if (v13 == v17 && v12 == v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = sub_24A5BC510();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        goto LABEL_28;
      }
    }
  }
  if (v19)
  {
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_30:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return 1;
}

uint64_t OrderedSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_24A552360(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

{
  uint64_t v5;

  long long v5 = type metadata accessor for OrderedSet();
  sub_24A4B4438(a1, a2, v5);
  swift_release();
  swift_release();
  return a3;
}

uint64_t OrderedSet.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = sub_24A5523C0(a1, a2, a3, a4, a5, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v9;
}

uint64_t sub_24A552360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OrderedSet();
  sub_24A4B4438(a1, a2, v5);
  return a3;
}

uint64_t sub_24A5523C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = type metadata accessor for OrderedSet();
  j___s19CollectionsInternal10OrderedSetV6append10contentsOfyqd___t7ElementQyd__RszSTRd__lF(a1, v10, a5, a7);
  return a2;
}

uint64_t UnsafeBufferPointer._ptr(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A5BB540() + *(void *)(*(void *)(a4 - 8) + 72) * a1;
}

uint64_t _HashNode.Builder.init(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v23 - v16;
  *a7 = a1;
  if (a3)
  {
    if (!_HashNode.isCollisionNode.getter(a2, a3, a4, a5, a6)
      && (_HashNode.hasSingletonItem.getter(a2, a3, a4, a5, a6) & 1) != 0)
    {
      uint64_t v18 = (unsigned int *)nullsub_1(a2 + 16, a2 + 32, a4, a5, a6);
      sub_24A5558D0(v18, v19, a4, a5, a6, (uint64_t)v17);
      swift_release();
      uint64_t v20 = type metadata accessor for _HashNode.Builder();
      return (*(uint64_t (**)(unsigned char *, char *, uint64_t))(v15 + 32))(&a7[*(int *)(v20 + 44)], v17, v14);
    }
    unint64_t v22 = (uint64_t *)&a7[*(int *)(type metadata accessor for _HashNode.Builder() + 44)];
    uint64_t *v22 = a2;
    v22[1] = a3;
  }
  else
  {
    swift_release();
    type metadata accessor for _HashNode.Builder();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for _HashNode.Builder.Kind()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _HashNode.Builder.empty(_:)@<X0>(char a1@<W0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v4);
  BOOL v6 = (char *)&v8 - v5;
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(a1, (uint64_t)v6, a2);
}

uint64_t _HashNode.Builder.addNewChildNode(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v61 = a4;
  uint64_t v63 = a3;
  uint64_t v64 = a2;
  uint64_t v59 = a1;
  uint64_t v8 = *(void *)(a5 + 16);
  uint64_t v7 = *(void *)(a5 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v58 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t v62 = *(void *)(a5 + 32);
  uint64_t v14 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (uint64_t *)((char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (uint64_t *)((char *)&v55 - v19);
  unint64_t v21 = (uint64_t *)(v5 + *(int *)(a5 + 44));
  (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 16))((char *)&v55 - v19, v21, v14);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v46 = v20[1];
      uint64_t v65 = *v20;
      uint64_t v66 = v46;
      uint64_t v47 = *(void (**)(uint64_t *, uint64_t))(v15 + 8);
      v47(v21, v14);
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = (void *)type metadata accessor for _HashNode();
      Swift::Bool v49 = _HashNode.isUnique()();
      _HashNode.ensureUnique(isUnique:withFreeSpace:)(v49, 16);
      sub_24A5B9AB0(v64, v63, v61, v48);
      swift_release();
      v47(v21, v14);
      uint64_t v50 = v66;
      *unint64_t v21 = v65;
      v21[1] = v50;
      return swift_storeEnumTagMultiPayload();
    case 2u:
      uint64_t v33 = *v20;
      uint64_t v34 = v20[1];
      unint64_t v35 = *(void (**)(uint64_t *, uint64_t))(v15 + 8);
      swift_retain();
      v35(v21, v14);
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = v62;
      unint64_t v37 = _HashNode.collisionHash.getter(v33, v34, v8, v7, v62);
      uint64_t v39 = sub_24A564E34(v33, v34, (v37 >> v59) & 0x1F, v64, v63, v61, v8, v7, v38, v36);
      uint64_t v41 = v40;
      swift_release_n();
      swift_release();
      v35(v21, v14);
      *unint64_t v21 = v39;
      v21[1] = v41;
      return swift_storeEnumTagMultiPayload();
    case 3u:
      uint64_t v42 = v63;
      uint64_t v43 = v64;
      uint64_t v44 = v62;
      if (_HashNode.isCollisionNode.getter(v64, v63, v8, v7, v62))
      {
        (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v21, v14);
        *unint64_t v21 = v43;
        v21[1] = v42;
        return swift_storeEnumTagMultiPayload();
      }
      else
      {
        uint64_t v52 = sub_24A564DC4(v43, v42, v61, v8, v7, v44, v45);
        uint64_t v54 = v53;
        swift_release();
        uint64_t *v18 = v52;
        v18[1] = v54;
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 40))(v21, v18, v14);
      }
    default:
      uint64_t v22 = TupleTypeMetadata2;
      uint64_t v23 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v24 = *(int *)(v22 + 48);
      unint64_t v25 = &v13[v24];
      uint64_t v56 = &v13[v24];
      uint64_t v57 = (char *)v20 + v24;
      uint64_t v26 = *(void *)(v8 - 8);
      __n128 v27 = *(void (**)(char *, uint64_t *, uint64_t))(v26 + 32);
      LODWORD(v59) = *((unsigned __int8 *)v20 + v23);
      v27(v13, v20, v8);
      uint64_t v28 = *(void *)(v7 - 8);
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v57, v7);
      uint64_t v29 = (uint64_t)&v11[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v11, v13, v8);
      (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v29, v56, v7);
      uint64_t v30 = sub_24A5650FC((uint64_t)v11, v29, v59, v64, v63, v61, v8, v7, v62);
      uint64_t v32 = v31;
      swift_release();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v13, TupleTypeMetadata2);
      (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v21, v14);
      *unint64_t v21 = v30;
      v21[1] = v32;
      return swift_storeEnumTagMultiPayload();
  }
}

uint64_t _HashNode.Builder.mapValuesToVoid()@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 24) == MEMORY[0x263F8EE60] + 8)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 - 8) + 64);
    uint64_t result = type metadata accessor for _HashNode.Builder();
    if (v8 == *(void *)(*(void *)(result - 8) + 64))
    {
      uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(result - 8) + 16);
      return v9(a2, v2, result);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    _OWORD v10[2] = *(void *)(v4 + 16);
    long long v10[3] = v5;
    void v10[4] = *(void *)(v4 + 32);
    return _HashNode.Builder.mapValues<A>(_:)((void (*)(char *, char *))sub_24A5566BC, (uint64_t (*)(char *, uint64_t))v10, v4, v6, a2);
  }
  return result;
}

uint64_t _HashNode.Builder.addNewChildBranch(_:_:at:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v35 = TupleTypeMetadata2;
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (uint64_t *)((char *)&v30 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v30 - v17, a2 + *(int *)(a4 + 44), v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    unsigned int v31 = a1;
    unsigned int v32 = a3;
    uint64_t v33 = a2;
    if (!EnumCaseMultiPayload)
    {
      uint64_t v23 = v35;
      uint64_t v24 = *(int *)(v35 + 48);
      unint64_t v25 = &v15[v24];
      uint64_t v30 = (char *)v18 + v24;
      uint64_t v26 = *(void *)(v9 - 8);
      (*(void (**)(char *, uint64_t *, uint64_t))(v26 + 32))(v15, v18, v9);
      uint64_t v27 = *(void *)(v8 - 8);
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v25, v30, v8);
      uint64_t v28 = (uint64_t)&v13[*(int *)(v23 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v13, v15, v9);
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v28, v25, v8);
      _HashNode.Builder.addNewItem(_:_:at:)(v31, (uint64_t)v13, v28, v32, a4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v33, a4);
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v15, v23);
    }
    unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);
    uint64_t v22 = v33;
  }
  else
  {
    _HashNode.Builder.addNewChildNode(_:_:at:)(a1, *v18, v18[1], a3, a4);
    unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);
    uint64_t v22 = a2;
  }
  return v21(v22, a4);
}

uint64_t _HashNode.Builder.addNewItem(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v88 = a4;
  uint64_t v90 = a3;
  uint64_t v81 = a1;
  uint64_t v7 = *(void *)(a5 + 16);
  uint64_t v8 = *(void *)(a5 + 24);
  long long v84 = *(void **)(a5 + 32);
  uint64_t v9 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v78 - v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v85 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v80 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  long long v79 = (char *)&v78 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  long long v86 = (char *)&v78 - v19;
  uint64_t v92 = MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v78 + *(int *)(v92 + 48) - v20;
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = *(char **)(v22 + 32);
  uint64_t v94 = (char *)&v78 - v20;
  uint64_t v89 = v7;
  long long v82 = v23;
  long long v83 = (void (**)(char *, char *, void))v22;
  ((void (*)(char *, uint64_t, uint64_t))v23)((char *)&v78 - v20, a2, v7);
  uint64_t v24 = *(void *)(v8 - 8);
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
  long long v87 = v21;
  uint64_t v26 = v90;
  uint64_t v90 = v8;
  v25(v21, v26, v8);
  uint64_t v27 = (uint64_t *)(v93 + *(int *)(a5 + 44));
  uint64_t v93 = v10;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(v12, v27, v9);
  uint64_t v91 = v9;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v66 = v12[1];
      uint64_t v95 = *v12;
      uint64_t v96 = v66;
      uint64_t v67 = *(char **)(v93 + 8);
      v93 += 8;
      long long v82 = v67;
      ((void (*)(uint64_t *, uint64_t))v67)(v27, v91);
      swift_storeEnumTagMultiPayload();
      uint64_t v68 = v89;
      uint64_t v69 = v90;
      long long v84 = (void *)type metadata accessor for _HashNode();
      Swift::Bool v70 = _HashNode.isUnique()();
      uint64_t v71 = v92;
      uint64_t v72 = (uint64_t)v86;
      uint64_t v73 = (uint64_t)&v86[*(int *)(v92 + 48)];
      long long v74 = v83;
      long long v75 = v94;
      v83[2](v86, v94, v68);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v73, v87, v69);
      _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(v70, v72, v73, v88, v84);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v75, v71);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v73, v69);
      ((void (*)(uint64_t, uint64_t))v74[1])(v72, v68);
      ((void (*)(uint64_t *, uint64_t))v82)(v27, v91);
      uint64_t v76 = v96;
      *uint64_t v27 = v95;
      v27[1] = v76;
      break;
    case 2u:
      uint64_t v50 = *v12;
      uint64_t v51 = v12[1];
      uint64_t v93 = *(void *)(v93 + 8);
      uint64_t v52 = (void (*)(uint64_t *, uint64_t))v93;
      swift_retain();
      uint64_t v53 = v91;
      v52(v27, v91);
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = (uint64_t)v86;
      uint64_t v55 = (uint64_t)&v86[*(int *)(v92 + 48)];
      uint64_t v56 = v89;
      v83[2](v86, v94, v89);
      uint64_t v57 = v90;
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v55, v87, v90);
      uint64_t v58 = v84;
      unint64_t v59 = _HashNode.collisionHash.getter(v50, v51, v56, v57, (uint64_t)v84);
      uint64_t v60 = sub_24A5650FC(v54, v55, v88, v50, v51, (v59 >> v81) & 0x1F, v56, v57, (uint64_t)v58);
      uint64_t v62 = v61;
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v85 + 8))(v94, v92);
      ((void (*)(uint64_t *, uint64_t))v93)(v27, v53);
      *uint64_t v27 = v60;
      v27[1] = v62;
      break;
    case 3u:
      (*(void (**)(uint64_t *, uint64_t))(v93 + 8))(v27, v91);
      uint64_t v63 = v92;
      uint64_t v64 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v65 = (char *)v27 + *(int *)(v63 + 48);
      ((void (*)(uint64_t *, char *, uint64_t))v82)(v27, v94, v89);
      v25(v65, (uint64_t)v87, v90);
      *((unsigned char *)v27 + v64) = v88;
      break;
    default:
      uint64_t v28 = v92;
      uint64_t v29 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v30 = *(int *)(v28 + 48);
      unsigned int v31 = v86;
      unsigned int v32 = &v86[v30];
      long long v78 = &v86[v30];
      uint64_t v33 = (char *)v12 + v30;
      LODWORD(v81) = *((unsigned __int8 *)v12 + v29);
      uint64_t v34 = v12;
      uint64_t v35 = v89;
      ((void (*)(char *, uint64_t *))v82)(v86, v34);
      uint64_t v36 = v33;
      uint64_t v37 = v90;
      v25(v32, (uint64_t)v36, v90);
      uint64_t v38 = (uint64_t)v79;
      uint64_t v40 = (void (**)(char *, char *, void))v83[2];
      long long v82 = &v79[*(int *)(v28 + 48)];
      uint64_t v39 = v82;
      long long v83 = v40;
      uint64_t v41 = v31;
      uint64_t v42 = v35;
      ((void (*)(char *, char *, uint64_t))v40)(v79, v41, v35);
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      v43(v39, v78, v37);
      uint64_t v44 = (uint64_t)v80;
      uint64_t v45 = (uint64_t)&v80[*(int *)(v28 + 48)];
      ((void (*)(char *, char *, uint64_t))v83)(v80, v94, v42);
      v43((char *)v45, v87, v37);
      uint64_t v46 = static _HashNode._regularNode(_:_:_:_:)(v38, (uint64_t)v82, v81, v44, v45, v88, v42, v37, (uint64_t)v84);
      uint64_t v48 = v47;
      Swift::Bool v49 = *(void (**)(char *, uint64_t))(v85 + 8);
      v49(v86, v28);
      v49(v94, v28);
      (*(void (**)(uint64_t *, uint64_t))(v93 + 8))(v27, v91);
      *uint64_t v27 = v46;
      v27[1] = v48;
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t static _HashNode.Builder.node(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_24A5540AC(a1, a2, a3, a4);
}

uint64_t _HashNode.Builder.addNewCollision(_:_:_:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v64 = a3;
  unint64_t v62 = a4;
  unint64_t v59 = a1;
  uint64_t v7 = *(void *)(a5 + 16);
  uint64_t v8 = *(void *)(a5 + 24);
  uint64_t v63 = *(void *)(a5 + 32);
  uint64_t v9 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v72 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v57 - v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v61 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v58 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v57 = (char *)&v57 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v67 = (char *)&v57 - v18;
  uint64_t v71 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v57 + *(int *)(v71 + 48) - v19;
  uint64_t v60 = *(void *)(v7 - 8);
  unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
  uint64_t v68 = v7;
  uint64_t v69 = (char *)&v57 - v19;
  v21((char *)&v57 - v19, a2, v7);
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  uint64_t v66 = v20;
  uint64_t v24 = v64;
  uint64_t v64 = v8;
  v23(v20, v24, v8);
  unint64_t v25 = &v65[*(int *)(a5 + 44)];
  (*(void (**)(uint64_t *, char *, uint64_t))(v72 + 16))(v11, v25, v9);
  uint64_t v70 = v9;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_24A5BC340();
      __break(1u);
      JUMPOUT(0x24A55407CLL);
    case 2u:
      uint64_t v44 = v11[1];
      uint64_t v73 = *v11;
      uint64_t v74 = v44;
      uint64_t v72 = *(void *)(v72 + 8);
      ((void (*)(char *, uint64_t))v72)(v25, v70);
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = (uint64_t)v67;
      uint64_t v46 = v68;
      uint64_t v47 = (uint64_t)&v67[*(int *)(v71 + 48)];
      uint64_t v48 = v60;
      Swift::Bool v49 = v69;
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v67, v69, v68);
      uint64_t v50 = v64;
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v47, v66, v64);
      uint64_t v51 = (void *)type metadata accessor for _HashNode();
      _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(1, v45, v47, v51);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v71);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v47, v50);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v45, v46);
      ((void (*)(char *, uint64_t))v72)(v25, v70);
      uint64_t v52 = v74;
      *(void *)unint64_t v25 = v73;
      *((void *)v25 + 1) = v52;
      break;
    case 3u:
      (*(void (**)(char *, uint64_t))(v72 + 8))(v25, v70);
      uint64_t v53 = v71;
      uint64_t v54 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v55 = &v25[*(int *)(v53 + 48)];
      v21(v25, (uint64_t)v69, v68);
      v23(v55, (uint64_t)v66, v64);
      v25[v54] = (v62 >> (char)v59) & 0x1F;
      break;
    default:
      uint64_t v26 = *(int *)(v71 + 48);
      uint64_t v28 = v67;
      uint64_t v27 = v68;
      uint64_t v29 = &v67[v26];
      unint64_t v59 = &v67[v26];
      uint64_t v65 = (char *)v11 + v26;
      v21(v67, (uint64_t)v11, v68);
      uint64_t v30 = v64;
      v23(v29, (uint64_t)v65, v64);
      uint64_t v31 = v71;
      uint64_t v32 = (uint64_t)v57;
      uint64_t v65 = &v57[*(int *)(v71 + 48)];
      uint64_t v33 = v65;
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
      v34(v57, v28, v27);
      uint64_t v35 = v34;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
      v36(v33, v59, v30);
      uint64_t v37 = (uint64_t)v58;
      uint64_t v38 = &v58[*(int *)(v31 + 48)];
      v35(v58, v69, v27);
      v36(v38, v66, v30);
      uint64_t v39 = static _HashNode._collisionNode(_:_:_:)(v62, v32, v65, v37, v38, v27, v30, v63);
      uint64_t v41 = v40;
      uint64_t v42 = *(void (**)(char *, uint64_t))(v61 + 8);
      uint64_t v43 = v71;
      v42(v67, v71);
      v42(v69, v43);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v25, v70);
      *(void *)unint64_t v25 = v39;
      *((void *)v25 + 1) = v41;
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for _HashNode.Builder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _HashNode.Builder.collisionNode(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_24A5540AC(a1, a2, a3, a4);
}

uint64_t sub_24A5540AC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v12 - v9);
  void *v10 = a2;
  v10[1] = a3;
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(a1, (uint64_t)v10, a4);
}

uint64_t _HashNode.Builder.finalize(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A5566C8(a2);
}

uint64_t _HashNode.Builder.copyItems(_:from:upTo:)(unsigned int a1, _DWORD *a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v29 = a1;
  uint64_t v9 = *(void *)(a5 + 24);
  uint64_t v31 = *(void *)(a5 + 16);
  uint64_t v32 = a5;
  uint64_t v30 = v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unsigned int v13 = *a2 & ~(-1 << a4);
  if (v13)
  {
    uint64_t v14 = (char *)v26 - v12;
    uint64_t v15 = 0;
    uint64_t v16 = v31;
    uint64_t v17 = *(void *)(v32 + 32);
    uint64_t v18 = v30;
    _OWORD v26[2] = v31 - 8;
    uint64_t v27 = v17;
    v26[1] = v30 - 8;
    uint64_t v28 = v5;
    do
    {
      unsigned int v33 = __clz(__rbit32(v13));
      v13 &= v13 - 1;
      uint64_t v19 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v15, a2, a3, v16, v18, v27);
      uint64_t v20 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v21 = TupleTypeMetadata2;
      uint64_t v22 = a2;
      uint64_t v23 = &v14[v20];
      uint64_t v24 = v19 + v20;
      (*(void (**)(char *))(*(void *)(v16 - 8) + 16))(v14);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v23, v24, v18);
      uint64_t v25 = (uint64_t)v23;
      a2 = v22;
      TupleTypeMetadata2 = v21;
      uint64_t result = _HashNode.Builder.addNewItem(_:_:at:)(v29, (uint64_t)v14, v25, v33, v32);
      uint64_t v15 = (v15 + 1);
    }
    while (v13);
  }
  return result;
}

uint64_t _HashNode.Builder.count.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v10 - v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - v4, v1 + *(int *)(a1 + 44), v3);
  uint64_t v7 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v7 = *((void *)v5 + 1);
      swift_release();
      break;
    case 3u:
      return v7;
    default:
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 8))(v5, TupleTypeMetadata2);
      uint64_t v7 = 1;
      break;
  }
  return v7;
}

uint64_t _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(unsigned int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v32[0] = a4;
  unsigned int v35 = a1;
  uint64_t v7 = *(void *)(a5 + 16);
  uint64_t v8 = *(void *)(a5 + 24);
  uint64_t v34 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unsigned int v13 = (char *)v32 - v12;
  unsigned int v14 = *a2;
  uint64_t v36 = a3;
  uint64_t v37 = a2;
  if (v14)
  {
    uint64_t result = 0;
    uint64_t v15 = *(void *)(v34 + 32);
    v32[2] = v7 - 8;
    uint64_t v33 = v15;
    v32[1] = v8 - 8;
    do
    {
      unsigned int v16 = __clz(__rbit32(v14));
      v14 &= v14 - 1;
      uint64_t v17 = (result + 1);
      uint64_t v18 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(result, v37, a3, v7, v8, v33);
      uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v20 = (uint64_t)&v13[v19];
      uint64_t v21 = v18 + v19;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v13, v18, v7);
      uint64_t v22 = v21;
      a3 = v36;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v20, v22, v8);
      _HashNode.Builder.addNewItem(_:_:at:)(v35, (uint64_t)v13, v20, v16, v34);
      uint64_t v11 = v37;
      uint64_t result = v17;
    }
    while (v14);
  }
  unsigned int v23 = v11[1] & ~(-1 << SLOBYTE(v32[0]));
  uint64_t v24 = v34;
  if (v23)
  {
    uint64_t result = 0;
    uint64_t v25 = *(void *)(v34 + 32);
    do
    {
      int v26 = __clz(__rbit32(v23));
      v23 &= v23 - 1;
      uint64_t v27 = (result + 1);
      uint64_t v28 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(result, v37, a3, v7, v8, v25);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      swift_retain();
      uint64_t v31 = v29;
      a3 = v36;
      _HashNode.Builder.addNewChildNode(_:_:at:)(v35, v31, v30, v26, v24);
      uint64_t result = v27;
    }
    while (v23);
  }
  return result;
}

uint64_t _HashNode.Builder.copyCollisions(from:upTo:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a2;
  uint64_t v28 = a4;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v25 = *(void *)(a4 + 24);
  uint64_t v26 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)v22 - v10;
  if (a3)
  {
    uint64_t result = 0;
    uint64_t v12 = v26;
    unint64_t v13 = *v27;
    uint64_t v23 = *(void *)(v28 + 32);
    unint64_t v24 = v13;
    uint64_t v14 = v25;
    v22[1] = v25 - 8;
    void v22[2] = v26 - 8;
    do
    {
      uint64_t v15 = (result + 1);
      unsigned int v29 = *v4;
      uint64_t v16 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(result, a1, v27, v12, v14, v23);
      uint64_t v17 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v18 = (uint64_t)&v11[v17];
      uint64_t v19 = a3;
      uint64_t v20 = v16 + v17;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, v16, v12);
      uint64_t v21 = v20;
      a3 = v19;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v18, v21, v14);
      _HashNode.Builder.addNewCollision(_:_:_:)((char *)v29, (uint64_t)v11, v18, v24, v28);
      uint64_t result = v15;
    }
    while (v19 != v15);
  }
  return result;
}

uint64_t static _HashNode.Builder.item(_:_:at:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  uint64_t v28 = a7;
  unsigned int v29 = a8;
  int v27 = a4;
  uint64_t v25 = a3;
  int v30 = a1;
  uint64_t v26 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v26);
  uint64_t v12 = (char *)&v23 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v23 - v15;
  unint64_t v24 = (char *)&v23 + *(int *)(v14 + 48) - v15;
  uint64_t v17 = v24;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);
  v18((char *)&v23 - v15, a2, a5);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);
  v19(v17, v25, a6);
  uint64_t v20 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v21 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v18(v12, (uint64_t)v16, a5);
  v19(v21, (uint64_t)v24, a6);
  v12[v20] = v27;
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(v30, (uint64_t)v12, v29);
}

uint64_t static _HashNode.Builder.childBranch(_:_:at:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  int v49 = a3;
  int v52 = a1;
  uint64_t v51 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v48 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v42 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (uint64_t *)((char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v20);
  unint64_t v24 = (uint64_t *)((char *)&v42 - v23);
  uint64_t v53 = a6;
  uint64_t v25 = type metadata accessor for _HashNode.Builder();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 16))(v24, a2 + *(int *)(v25 + 44), v18);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v37 = sub_24A564DC4(*v24, v24[1], v49, a4, a5, v53, v26);
      uint64_t v39 = v38;
      swift_release();
      uint64_t *v22 = v37;
      v22[1] = v39;
      break;
    case 2u:
      uint64_t v40 = v24[1];
      uint64_t *v22 = *v24;
      v22[1] = v40;
      break;
    case 3u:
      break;
    default:
      uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v44 = (char *)v24 + v27;
      uint64_t v45 = &v17[v27];
      uint64_t v28 = *(void *)(a4 - 8);
      uint64_t v43 = *(void (**)(void))(v28 + 32);
      uint64_t v46 = v28 + 32;
      ((void (*)(char *, uint64_t *, uint64_t))v43)(v17, v24, a4);
      uint64_t v29 = *(void *)(a5 - 8);
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      uint64_t v42 = v29 + 32;
      v47(v45, v44, a5);
      uint64_t v44 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
      int v30 = v44;
      uint64_t v31 = v43;
      ((void (*)(char *, char *, uint64_t))v43)(v15, v17, a4);
      uint64_t v32 = v47;
      v47(v30, v45, a5);
      uint64_t v45 = &v48[*(int *)(TupleTypeMetadata2 + 48)];
      v31();
      uint64_t v33 = v45;
      v32(v45, v44, a5);
      uint64_t v34 = TupleTypeMetadata2;
      uint64_t v35 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v36 = (char *)v22 + *(int *)(v34 + 48);
      ((void (*)(uint64_t *, char *, uint64_t))v31)(v22, v48, a4);
      v47(v36, v33, a5);
      *((unsigned char *)v22 + v35) = v49;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(v52, (uint64_t)v22, v51);
}

uint64_t _HashNode.Builder.level.getter()
{
  return *v0;
}

uint64_t _HashNode.Builder.level.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HashNode.Builder.level.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashNode.Builder.kind.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t _HashNode.Builder.kind.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*_HashNode.Builder.kind.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashNode.Builder.init(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = &a3[*(int *)(type metadata accessor for _HashNode.Builder() + 44)];
  uint64_t v5 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  return v6(v4, a2, v5);
}

Swift::Void __swiftcall _HashNode.Builder.dump()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v39 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = &v36[-v9];
  uint64_t v42 = *(void *)(v3 + 32);
  uint64_t v10 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v36[-v12];
  uint64_t v44 = 0;
  unint64_t v45 = 0xE000000000000000;
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  uint64_t v44 = 0x287265646C697542;
  unint64_t v45 = 0xEF203A6C6576656CLL;
  uint64_t v43 = (13108 * *v1 + 52432) >> 16;
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t v14 = v44;
  unint64_t v15 = v45;
  (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v11 + 16))(v13, &v2[*(int *)(v3 + 44)], v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_24A5BDAE0;
      uint64_t v44 = v14;
      unint64_t v45 = v15;
      swift_bridgeObjectRetain();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      uint64_t v32 = v44;
      unint64_t v33 = v45;
      *(void *)(v31 + 56) = MEMORY[0x263F8D310];
      *(void *)(v31 + 32) = v32;
      *(void *)(v31 + 40) = v33;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      v34._uint64_t countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      v35._uint64_t countAndFlagsBits = 0;
      v35._object = (void *)0xE000000000000000;
      _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(0, 0x7FFFFFFFFFFFFFFFLL, v34, v35, 0);
      swift_release();
      break;
    case 3u:
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_24A5BDAE0;
      uint64_t v44 = v14;
      unint64_t v45 = v15;
      swift_bridgeObjectRetain();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      uint64_t v29 = v44;
      unint64_t v30 = v45;
      *(void *)(v28 + 56) = MEMORY[0x263F8D310];
      *(void *)(v28 + 32) = v29;
      *(void *)(v28 + 40) = v30;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      break;
    default:
      uint64_t v16 = TupleTypeMetadata2;
      int v37 = v13[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v17 = *(int *)(v16 + 48);
      uint64_t v18 = v40;
      uint64_t v19 = &v40[v17];
      uint64_t v38 = v14;
      uint64_t v20 = &v13[v17];
      uint64_t v21 = *(void *)(v4 - 8);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32))(v40, v13, v4);
      uint64_t v22 = *(void *)(v5 - 8);
      uint64_t v23 = v19;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 32))(v19, v20, v5);
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_24A5BDAE0;
      uint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      sub_24A5BC070();
      swift_bridgeObjectRelease();
      uint64_t v44 = 0x286D657469;
      unint64_t v45 = 0xE500000000000000;
      uint64_t v25 = (uint64_t)&v8[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, unsigned char *, uint64_t))(v21 + 16))(v8, v18, v4);
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v22 + 16))(v25, v23, v5);
      sub_24A4CCBAC(v8, v25, v4, v5, v42);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v5);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v4);
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      LOBYTE(v43) = v37;
      sub_24A556B08();
      sub_24A5BB7F0();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      uint64_t v44 = v38;
      unint64_t v45 = v15;
      swift_bridgeObjectRetain();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v26 = v44;
      unint64_t v27 = v45;
      *(void *)(v24 + 56) = MEMORY[0x263F8D310];
      *(void *)(v24 + 32) = v26;
      *(void *)(v24 + 40) = v27;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v40, TupleTypeMetadata2);
      break;
  }
}

BOOL _HashNode.Builder.isEmpty.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, v1 + *(int *)(a1 + 44), v3);
  BOOL v7 = swift_getEnumCaseMultiPayload() == 3;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t sub_24A5558D0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, a2, a3, a4, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 16))(a6, v14, TupleTypeMetadata2);
  if (*a1)
  {
    *(unsigned char *)(a6 + v13) = __clz(__rbit32(*a1));
    type metadata accessor for _HashNode.Builder.Kind();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _HashNode.applyReplacement(_:_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v45 = a1;
  uint64_t v47 = a4;
  uint64_t v8 = a3[2];
  uint64_t v7 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v46 = (char *)&v39 - v13;
  uint64_t v14 = a3[4];
  uint64_t v15 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v39 - v17);
  swift_release();
  uint64_t v19 = type metadata accessor for _HashNode.Builder();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v18, a2 + *(int *)(v19 + 44), v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 2)
  {
    uint64_t v21 = v18[1];
    *uint64_t v4 = *v18;
    v4[1] = v21;
    uint64_t v22 = v47;
    uint64_t v23 = TupleTypeMetadata2;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v22, 1, 1, v23);
  }
  if (EnumCaseMultiPayload)
  {
    uint64_t v22 = v47;
    uint64_t v23 = TupleTypeMetadata2;
    if (qword_26979ACF0 != -1) {
      swift_once();
    }
    *uint64_t v4 = _HashNode.init(storage:count:)(_emptySingleton, 0, v8, v7, v14);
    v4[1] = v34;
    swift_retain();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v22, 1, 1, v23);
  }
  uint64_t v24 = TupleTypeMetadata2;
  unsigned int v41 = *((unsigned __int8 *)v18 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  uint64_t v25 = *(int *)(v24 + 48);
  uint64_t v26 = &v46[v25];
  uint64_t v43 = (uint64_t *)((char *)v18 + v25);
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v42 = *(void (**)(void))(v40 + 32);
  v42();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = (void (*)(void, void, void))v43;
  uint64_t v43 = *(void **)(v27 + 32);
  uint64_t v44 = v26;
  ((void (*)(char *, void, uint64_t))v43)(v26, v28, v7);
  uint64_t v22 = v47;
  if (!(_BYTE)v45)
  {
    uint64_t v23 = TupleTypeMetadata2;
    uint64_t v35 = (uint64_t)&v12[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v12, v46, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v35, v44, v7);
    uint64_t v36 = static _HashNode._regularNode(_:_:)((uint64_t)v12, v35, v41, v8, v7, v14);
    uint64_t v38 = v37;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v46, v23);
    *uint64_t v4 = v36;
    v4[1] = v38;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v22, 1, 1, v23);
  }
  uint64_t v29 = v44;
  if (qword_26979ACF0 != -1) {
    swift_once();
  }
  *uint64_t v4 = _HashNode.init(storage:count:)(_emptySingleton, 0, v8, v7, v14);
  v4[1] = v30;
  uint64_t v31 = TupleTypeMetadata2;
  uint64_t v32 = v22 + *(int *)(TupleTypeMetadata2 + 48);
  ((void (*)(uint64_t, char *, uint64_t))v42)(v22, v46, v8);
  ((void (*)(uint64_t, char *, uint64_t))v43)(v32, v29, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v31);
  return swift_retain();
}

uint64_t _HashNode.Builder.mapValues<A>(_:)@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v74 = a5;
  uint64_t v9 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v64 = (char *)v58 - v11;
  uint64_t v65 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v67 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v58 - v18;
  uint64_t v20 = *(void *)(a3 + 32);
  uint64_t v70 = a4;
  uint64_t v72 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v72);
  uint64_t v22 = (char *)v58 - v21;
  uint64_t v73 = v20;
  uint64_t v23 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (void *)((char *)v58 - v24);
  uint64_t v26 = *(int *)(a3 + 44);
  uint64_t v71 = v6;
  (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(v25, &v6[v26], v23);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v52 = *v25;
      uint64_t v51 = v25[1];
      char v53 = *v71;
      _HashNode.mapValues<A>(_:)(v68, (uint64_t)v69, v52, v51, v9, v13, v70, v73);
      uint64_t v55 = v54;
      uint64_t v57 = v56;
      swift_release();
      *(void *)uint64_t v22 = v55;
      *((void *)v22 + 1) = v57;
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = v74;
      char v49 = v53;
      uint64_t v50 = (uint64_t)v22;
      goto LABEL_5;
    case 3u:
      char v47 = *v71;
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = v74;
      char v49 = v47;
      uint64_t v50 = (uint64_t)v22;
LABEL_5:
      uint64_t result = _HashNode.Builder.init(_:_:)(v49, v50, v48);
      break;
    default:
      int v60 = *((unsigned __int8 *)v25 + *(int *)(swift_getTupleTypeMetadata2() + 48));
      uint64_t v28 = *(int *)(v14 + 48);
      uint64_t v29 = &v19[v28];
      uint64_t v30 = (char *)v25 + v28;
      uint64_t v31 = *(void *)(v9 - 8);
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      uint64_t v61 = (char *)v14;
      uint64_t v62 = v31 + 32;
      uint64_t v63 = v32;
      v32(v19, (char *)v25, v9);
      uint64_t v33 = *(void *)(v13 - 8);
      uint64_t v34 = *(void (**)(char *, void, uint64_t))(v33 + 32);
      v58[1] = v33 + 32;
      unint64_t v59 = v34;
      v58[0] = v29;
      v34(v29, v30, v13);
      uint64_t v35 = &v17[*((int *)v61 + 12)];
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v17, v19, v9);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v35, v29, v13);
      v68(v17, v35);
      uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
      uint64_t v68 = (void (*)(char *, char *))(v33 + 8);
      uint64_t v69 = v36;
      v36(v35, v13);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v9);
      uint64_t v61 = &v17[*((int *)v61 + 12)];
      uint64_t v37 = v61;
      LODWORD(v71) = *v71;
      uint64_t v38 = v63;
      v63(v17, v19, v9);
      v59(v37, v58[0], v13);
      uint64_t v39 = TupleTypeMetadata2;
      uint64_t v40 = v64;
      unsigned int v41 = &v64[*(int *)(TupleTypeMetadata2 + 48)];
      v38(v64, v17, v9);
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
      uint64_t v43 = v70;
      v42(v41, v67, v70);
      uint64_t v44 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      int v45 = &v22[*(int *)(v39 + 48)];
      v63(v22, v40, v9);
      v42(v45, v41, v43);
      v22[v44] = v60;
      swift_storeEnumTagMultiPayload();
      _HashNode.Builder.init(_:_:)((char)v71, (uint64_t)v22, v74);
      uint64_t result = v69(v61, v13);
      break;
  }
  return result;
}

uint64_t sub_24A556568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v13 - v10, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
}

uint64_t sub_24A5566BC(uint64_t a1, uint64_t a2)
{
  return sub_24A556568(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_24A5566C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v32 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v27 - v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v27 - v13, v1 + *(int *)(a1 + 44), v12);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
      uint64_t v16 = *v14;
      break;
    case 3u:
      if (qword_26979ACF0 != -1) {
        swift_once();
      }
      uint64_t v16 = _HashNode.init(storage:count:)(_emptySingleton, 0, v3, v4, v11);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
      swift_retain();
      v25(v1, a1);
      break;
    default:
      uint64_t v17 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v18 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v30 = v11;
      uint64_t v19 = &v10[v18];
      uint64_t v28 = (char *)v14 + v18;
      uint64_t v20 = *(void *)(v3 - 8);
      uint64_t v21 = *(void (**)(char *, uint64_t *, uint64_t))(v20 + 32);
      unsigned int v29 = *((unsigned __int8 *)v14 + v17);
      v21(v10, v14, v3);
      uint64_t v22 = *(void *)(v4 - 8);
      uint64_t v31 = v1;
      uint64_t v23 = v22;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v28, v4);
      uint64_t v24 = (uint64_t)&v8[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v8, v10, v3);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v24, v19, v4);
      uint64_t v16 = static _HashNode._regularNode(_:_:)((uint64_t)v8, v24, v29, v3, v4, v30);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v31, a1);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, TupleTypeMetadata2);
      break;
  }
  return v16;
}

unint64_t sub_24A556B08()
{
  unint64_t result = qword_26979BFD8[0];
  if (!qword_26979BFD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979BFD8);
  }
  return result;
}

uint64_t sub_24A556B5C()
{
  uint64_t result = type metadata accessor for _HashNode.Builder.Kind();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A556C00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  int v8 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80);
  uint64_t v9 = v8 & 0xF8 | 7u;
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v4 + 64) + v7;
  uint64_t v12 = (v11 & ~v7) + *(void *)(v6 + 64);
  if ((unint64_t)(v12 + 1) > 0x10) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = 16;
  }
  if ((v8 & 0x1000F8) != 0 || v13 + 1 + ((v9 + 1) & (unint64_t)~v9) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v9 + 16) & v10));
LABEL_10:
    swift_retain();
    return a1;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v17 = (void *)((unint64_t)(a1 + 1) & v10);
  uint64_t v18 = (unsigned __int8 *)((unint64_t)(a2 + 1) & v10);
  unsigned int v19 = v18[v13];
  unsigned int v20 = v19 - 3;
  if (v19 >= 3)
  {
    if (v13 <= 3) {
      uint64_t v21 = v13;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v18;
        goto LABEL_21;
      case 2:
        int v22 = *(unsigned __int16 *)v18;
        goto LABEL_21;
      case 3:
        int v22 = *(unsigned __int16 *)v18 | (v18[2] << 16);
        goto LABEL_21;
      case 4:
        int v22 = *(_DWORD *)v18;
LABEL_21:
        int v23 = (v22 | (v20 << (8 * v13))) + 3;
        unsigned int v19 = v22 + 3;
        if (v13 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  if (v19 == 2)
  {
    *uint64_t v17 = *(void *)v18;
    v17[1] = *((void *)v18 + 1);
    *((unsigned char *)v17 + v13) = 2;
    goto LABEL_10;
  }
  if (v19 == 1)
  {
    *uint64_t v17 = *(void *)v18;
    v17[1] = *((void *)v18 + 1);
    *((unsigned char *)v17 + v13) = 1;
    goto LABEL_10;
  }
  if (v19)
  {
    memcpy(v17, v18, v13 + 1);
  }
  else
  {
    uint64_t v24 = ~v7;
    (*(void (**)(void *, unsigned __int8 *))(v4 + 16))(v17, v18);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v17 + v11) & v24, (unint64_t)&v18[v11] & v24, v5);
    *((unsigned char *)v17 + v12) = v18[v12];
    *((unsigned char *)v17 + v13) = 0;
  }
  return a1;
}

uint64_t sub_24A556E9C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = (*(_DWORD *)(v4 + 80) | *(_DWORD *)(v2 + 80)) & 0xF8 | 7u;
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  uint64_t v7 = result + v5 + 1;
  int v8 = (unsigned __int8 *)(v7 & ~v5);
  uint64_t v9 = *(void *)(v2 + 64) + v6;
  uint64_t v10 = *(void *)(v4 + 64) + (v9 & ~v6);
  if ((unint64_t)(v10 + 1) > 0x10) {
    uint64_t v11 = v10 + 1;
  }
  else {
    uint64_t v11 = 16;
  }
  unsigned int v12 = v8[v11];
  unsigned int v13 = v12 - 3;
  if (v12 >= 3)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v8;
        goto LABEL_13;
      case 2:
        int v15 = *(unsigned __int16 *)v8;
        goto LABEL_13;
      case 3:
        int v15 = *(unsigned __int16 *)v8 | (*(unsigned __int8 *)((v7 & ~v5) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v15 = *(_DWORD *)v8;
LABEL_13:
        int v16 = (v15 | (v13 << (8 * v11))) + 3;
        unsigned int v12 = v15 + 3;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 2 || v12 == 1)
  {
    return swift_release();
  }
  else if (!v12)
  {
    uint64_t v17 = ~v6;
    uint64_t v19 = *(void *)(*(void *)(a2 + 24) - 8);
    (*(void (**)(uint64_t))(v2 + 8))(v7 & ~v5);
    uint64_t v18 = *(uint64_t (**)(unint64_t, uint64_t))(v19 + 8);
    return v18((unint64_t)&v8[v9] & v17, v3);
  }
  return result;
}

unsigned char *sub_24A5570C0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = (*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80)) & 0xF8 | 7u;
  uint64_t v9 = (void *)((unint64_t)&a1[v8 + 1] & ~v8);
  unint64_t v10 = (unint64_t)&a2[v8 + 1];
  uint64_t v11 = (unsigned __int8 *)(v10 & ~v8);
  uint64_t v12 = *(void *)(v4 + 64) + v7;
  uint64_t v13 = (v12 & ~v7) + *(void *)(v6 + 64);
  if ((unint64_t)(v13 + 1) > 0x10) {
    uint64_t v14 = v13 + 1;
  }
  else {
    uint64_t v14 = 16;
  }
  unsigned int v15 = v11[v14];
  unsigned int v16 = v15 - 3;
  if (v15 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v11;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v11;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)v11 | (*(unsigned __int8 *)((v10 & ~v8) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v11;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 3;
        unsigned int v15 = v18 + 3;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 2)
  {
    *uint64_t v9 = *(void *)v11;
    *(void *)(((unint64_t)&a1[v8 + 1] & ~v8) + 8) = *(void *)((v10 & ~v8) + 8);
    char v21 = 2;
LABEL_21:
    *((unsigned char *)v9 + v14) = v21;
    swift_retain();
    return a1;
  }
  if (v15 == 1)
  {
    *uint64_t v9 = *(void *)v11;
    *(void *)(((unint64_t)&a1[v8 + 1] & ~v8) + 8) = *(void *)((v10 & ~v8) + 8);
    char v21 = 1;
    goto LABEL_21;
  }
  if (v15)
  {
    memcpy((void *)((unint64_t)&a1[v8 + 1] & ~v8), (const void *)(v10 & ~v8), v14 + 1);
  }
  else
  {
    uint64_t v20 = ~v7;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[v8 + 1] & ~v8, v10 & ~v8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v9 + v12) & v20, (unint64_t)&v11[v12] & v20, v5);
    *((unsigned char *)v9 + v13) = v11[v13];
    *((unsigned char *)v9 + v14) = 0;
  }
  return a1;
}

unsigned char *sub_24A557320(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = (*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0xF8 | 7u;
  uint64_t v9 = (void *)((unint64_t)&a1[v8 + 1] & ~v8);
  unint64_t v10 = (void *)((unint64_t)&a2[v8 + 1] & ~v8);
  if (v9 != v10)
  {
    uint64_t v11 = *(void *)(v4 - 8);
    uint64_t v12 = *(_DWORD *)(v7 + 80);
    uint64_t v28 = *(void *)(v6 + 64);
    uint64_t v13 = ((v28 + v12) & ~v12) + *(void *)(v7 + 64);
    if ((unint64_t)(v13 + 1) > 0x10) {
      uint64_t v14 = v13 + 1;
    }
    else {
      uint64_t v14 = 16;
    }
    unsigned int v15 = *((unsigned __int8 *)v9 + v14);
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *(unsigned __int8 *)v9;
          goto LABEL_14;
        case 2:
          int v18 = *(unsigned __int16 *)v9;
          goto LABEL_14;
        case 3:
          int v18 = *(unsigned __int16 *)v9 | (*((unsigned __int8 *)v9 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v18 = *(_DWORD *)v9;
LABEL_14:
          int v19 = (v18 | (v16 << (8 * v14))) + 3;
          unsigned int v15 = v18 + 3;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v27 = ~v12;
    if (v15 == 2 || v15 == 1)
    {
      swift_release();
    }
    else if (!v15)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(((unint64_t)v9 + v12 + v28) & v27, v4);
    }
    unsigned int v20 = *((unsigned __int8 *)v10 + v14);
    unsigned int v21 = v20 - 3;
    if (v20 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *(unsigned __int8 *)v10;
          goto LABEL_30;
        case 2:
          int v23 = *(unsigned __int16 *)v10;
          goto LABEL_30;
        case 3:
          int v23 = *(unsigned __int16 *)v10 | (*((unsigned __int8 *)v10 + 2) << 16);
          goto LABEL_30;
        case 4:
          int v23 = *(_DWORD *)v10;
LABEL_30:
          int v24 = (v23 | (v21 << (8 * v14))) + 3;
          unsigned int v20 = v23 + 3;
          if (v14 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 2)
    {
      *uint64_t v9 = *v10;
      v9[1] = v10[1];
      char v25 = 2;
    }
    else
    {
      if (v20 != 1)
      {
        if (v20)
        {
          memcpy(v9, v10, v14 + 1);
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v9, v10, v5);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v9 + v12 + v28) & v27, ((unint64_t)v10 + v12 + v28) & v27, v4);
          *((unsigned char *)v9 + v13) = *((unsigned char *)v10 + v13);
          *((unsigned char *)v9 + v14) = 0;
        }
        return a1;
      }
      *uint64_t v9 = *v10;
      v9[1] = v10[1];
      char v25 = 1;
    }
    *((unsigned char *)v9 + v14) = v25;
    swift_retain();
  }
  return a1;
}

unsigned char *sub_24A55766C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = (*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80)) & 0xF8 | 7u;
  uint64_t v9 = (_OWORD *)((unint64_t)&a1[v8 + 1] & ~v8);
  unint64_t v10 = (unint64_t)&a2[v8 + 1];
  uint64_t v11 = (unsigned __int8 *)(v10 & ~v8);
  uint64_t v12 = *(void *)(v4 + 64) + v7;
  uint64_t v13 = (v12 & ~v7) + *(void *)(v6 + 64);
  if ((unint64_t)(v13 + 1) > 0x10) {
    uint64_t v14 = v13 + 1;
  }
  else {
    uint64_t v14 = 16;
  }
  unsigned int v15 = v11[v14];
  unsigned int v16 = v15 - 3;
  if (v15 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v11;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v11;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)v11 | (*(unsigned __int8 *)((v10 & ~v8) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v11;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 3;
        unsigned int v15 = v18 + 3;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 2)
  {
    *uint64_t v9 = *(_OWORD *)v11;
    *((unsigned char *)v9 + v14) = 2;
  }
  else if (v15 == 1)
  {
    *uint64_t v9 = *(_OWORD *)v11;
    *((unsigned char *)v9 + v14) = 1;
  }
  else if (v15)
  {
    memcpy((void *)((unint64_t)&a1[v8 + 1] & ~v8), (const void *)(v10 & ~v8), v14 + 1);
  }
  else
  {
    uint64_t v20 = ~v7;
    (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[v8 + 1] & ~v8, v10 & ~v8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v9 + v12) & v20, (unint64_t)&v11[v12] & v20, v5);
    *((unsigned char *)v9 + v13) = v11[v13];
    *((unsigned char *)v9 + v14) = 0;
  }
  return a1;
}

unsigned char *sub_24A5578BC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = (*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0xF8 | 7u;
  uint64_t v9 = (unsigned __int8 *)((unint64_t)&a1[v8 + 1] & ~v8);
  unint64_t v10 = (unsigned __int8 *)((unint64_t)&a2[v8 + 1] & ~v8);
  if (v9 != v10)
  {
    uint64_t v11 = *(void *)(v4 - 8);
    uint64_t v12 = *(_DWORD *)(v7 + 80);
    uint64_t v27 = *(void *)(v6 + 64);
    uint64_t v13 = ((v27 + v12) & ~v12) + *(void *)(v7 + 64);
    if ((unint64_t)(v13 + 1) > 0x10) {
      uint64_t v14 = v13 + 1;
    }
    else {
      uint64_t v14 = 16;
    }
    unsigned int v15 = v9[v14];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *v9;
          goto LABEL_14;
        case 2:
          int v18 = *(unsigned __int16 *)v9;
          goto LABEL_14;
        case 3:
          int v18 = *(unsigned __int16 *)v9 | (v9[2] << 16);
          goto LABEL_14;
        case 4:
          int v18 = *(_DWORD *)v9;
LABEL_14:
          int v19 = (v18 | (v16 << (8 * v14))) + 3;
          unsigned int v15 = v18 + 3;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v26 = ~v12;
    if (v15 == 2 || v15 == 1)
    {
      swift_release();
    }
    else if (!v15)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v9, v5);
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&v9[v12 + v27] & v26, v4);
    }
    unsigned int v20 = v10[v14];
    unsigned int v21 = v20 - 3;
    if (v20 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *v10;
          goto LABEL_30;
        case 2:
          int v23 = *(unsigned __int16 *)v10;
          goto LABEL_30;
        case 3:
          int v23 = *(unsigned __int16 *)v10 | (v10[2] << 16);
          goto LABEL_30;
        case 4:
          int v23 = *(_DWORD *)v10;
LABEL_30:
          int v24 = (v23 | (v21 << (8 * v14))) + 3;
          unsigned int v20 = v23 + 3;
          if (v14 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 2)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      v9[v14] = 2;
    }
    else if (v20 == 1)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      v9[v14] = 1;
    }
    else if (v20)
    {
      memcpy(v9, v10, v14 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v9, v10, v5);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((unint64_t)&v9[v12 + v27] & v26, (unint64_t)&v10[v12 + v27] & v26, v4);
      v9[v13] = v10[v13];
      v9[v14] = 0;
    }
  }
  return a1;
}

uint64_t sub_24A557BF8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  int v4 = *(_DWORD *)(v3 + 80);
  unint64_t v5 = *(void *)(v3 + 64)
     + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v4) & ~(unint64_t)v4);
  if (v5 + 1 > 0x10) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = 16;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v7 = (*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) | v4) & 0xF8 | 7u;
  if (a2 < 0xFD) {
    goto LABEL_25;
  }
  uint64_t v8 = v6 + ((v7 + 1) & ~v7) + 1;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 252) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_25;
      }
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_25;
      }
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_25:
      unsigned int v16 = *(unsigned __int8 *)((((unint64_t)a1 + v7 + 1) & ~v7) + v6);
      if (v16 >= 4) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = v8;
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + 253;
}

void sub_24A557DE4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = *(void *)(v5 + 64)
     + ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v6) & ~(unint64_t)v6);
  if (v7 + 1 > 0x10) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = 16;
  }
  uint64_t v9 = (*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 80) | v6) & 0xF8 | 7u;
  size_t v10 = v8 + ((v9 + 1) & ~v9) + 1;
  if (a3 < 0xFD)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 252) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v12 = a2 - 253;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v8 + ((v9 + 1) & ~v9) != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8 + ((v9 + 1) & ~v9) + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_35:
        __break(1u);
        JUMPOUT(0x24A55805CLL);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_35;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          *(unsigned char *)(((unint64_t)&a1[v9 + 1] & ~v9) + v8) = -(char)a2;
        break;
    }
  }
}

uint64_t sub_24A558084()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      swift_getTupleTypeLayout2();
      int v4 = &v3;
      uint64_t v5 = &unk_24A5C1A08;
      int v6 = &unk_24A5C1A08;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A558180(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  int v4 = __dst;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v5 + 64) + v8;
  unint64_t v10 = (v9 & ~(unint64_t)v8) + *(void *)(v7 + 64);
  if (v10 + 1 > 0x10) {
    uint64_t v11 = v10 + 1;
  }
  else {
    uint64_t v11 = 16;
  }
  int v12 = *(_DWORD *)(v5 + 80) | v8;
  if ((v12 & 0x1000F8) != 0 || (unint64_t)(v11 + 1) > 0x18)
  {
    uint64_t v14 = *__src;
    *int v4 = *__src;
    int v4 = (uint64_t *)(v14 + (((v12 & 0xF8 | 7u) + 16) & ~(unint64_t)(v12 & 0xF8 | 7u)));
LABEL_10:
    swift_retain();
    return v4;
  }
  unsigned int v16 = *((unsigned __int8 *)__src + v11);
  unsigned int v17 = v16 - 3;
  if (v16 >= 3)
  {
    if (v11 <= 3) {
      uint64_t v18 = v11;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *(unsigned __int8 *)__src;
        goto LABEL_21;
      case 2:
        int v19 = *(unsigned __int16 *)__src;
        goto LABEL_21;
      case 3:
        int v19 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
        goto LABEL_21;
      case 4:
        int v19 = *(_DWORD *)__src;
LABEL_21:
        int v20 = (v19 | (v17 << (8 * v11))) + 3;
        unsigned int v16 = v19 + 3;
        if (v11 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  if (v16 == 2)
  {
    uint64_t v22 = __src[1];
    *__dst = *__src;
    __dst[1] = v22;
    *((unsigned char *)__dst + v11) = 2;
    goto LABEL_10;
  }
  if (v16 == 1)
  {
    uint64_t v23 = __src[1];
    *__dst = *__src;
    __dst[1] = v23;
    *((unsigned char *)__dst + v11) = 1;
    goto LABEL_10;
  }
  if (v16)
  {
    memcpy(__dst, __src, v11 + 1);
  }
  else
  {
    unint64_t v21 = ~(unint64_t)v8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(__dst, __src);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v21, ((unint64_t)__src + v9) & v21, v6);
    *((unsigned char *)v4 + v10) = *((unsigned char *)__src + v10);
    *((unsigned char *)v4 + v11) = 0;
  }
  return v4;
}

uint64_t sub_24A5583E4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t result = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(result + 80);
  uint64_t v7 = v3 + v6;
  uint64_t v8 = *(void *)(result + 64) + ((v3 + v6) & ~v6);
  if ((unint64_t)(v8 + 1) > 0x10) {
    uint64_t v9 = v8 + 1;
  }
  else {
    uint64_t v9 = 16;
  }
  unsigned int v10 = a1[v9];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a1;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a1;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2 || v10 == 1)
  {
    return swift_release();
  }
  else if (!v10)
  {
    uint64_t v15 = ~v6;
    uint64_t v17 = *(void *)(*(void *)(a2 + 24) - 8);
    (*(void (**)(unsigned __int8 *))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
    unsigned int v16 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v16((unint64_t)&a1[v7] & v15, v4);
  }
  return result;
}

void *sub_24A5585EC(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v5 + v8;
  uint64_t v10 = ((v5 + v8) & ~v8) + *(void *)(v7 + 64);
  if ((unint64_t)(v10 + 1) > 0x10) {
    uint64_t v11 = v10 + 1;
  }
  else {
    uint64_t v11 = 16;
  }
  unsigned int v12 = *((unsigned __int8 *)__src + v11);
  unsigned int v13 = v12 - 3;
  if (v12 >= 3)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *(unsigned __int8 *)__src;
        goto LABEL_13;
      case 2:
        int v15 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v15 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
        goto LABEL_13;
      case 4:
        int v15 = *(_DWORD *)__src;
LABEL_13:
        int v16 = (v15 | (v13 << (8 * v11))) + 3;
        unsigned int v12 = v15 + 3;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 2)
  {
    uint64_t v18 = __src[1];
    *__dst = *__src;
    __dst[1] = v18;
    char v19 = 2;
LABEL_21:
    *((unsigned char *)__dst + v11) = v19;
    swift_retain();
    return __dst;
  }
  if (v12 == 1)
  {
    uint64_t v20 = __src[1];
    *__dst = *__src;
    __dst[1] = v20;
    char v19 = 1;
    goto LABEL_21;
  }
  if (v12)
  {
    memcpy(__dst, __src, v11 + 1);
  }
  else
  {
    uint64_t v17 = ~v8;
    (*(void (**)(void *, void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst, __src);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)__dst + v9) & v17, ((unint64_t)__src + v9) & v17, v6);
    *((unsigned char *)__dst + v10) = *((unsigned char *)__src + v10);
    *((unsigned char *)__dst + v11) = 0;
  }
  return __dst;
}

void *sub_24A558808(void *__dst, void *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v5 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = v8 + v10;
    uint64_t v12 = ((v8 + v10) & ~v10) + *(void *)(v9 + 64);
    if ((unint64_t)(v12 + 1) > 0x10) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = 16;
    }
    unsigned int v14 = *((unsigned __int8 *)__dst + v13);
    unsigned int v15 = v14 - 3;
    if (v14 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *(unsigned __int8 *)__dst;
          goto LABEL_14;
        case 2:
          int v17 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v17 = *(unsigned __int16 *)__dst | (*((unsigned __int8 *)__dst + 2) << 16);
          goto LABEL_14;
        case 4:
          int v17 = *(_DWORD *)__dst;
LABEL_14:
          int v18 = (v17 | (v15 << (8 * v13))) + 3;
          unsigned int v14 = v17 + 3;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v10;
    if (v14 == 2 || v14 == 1)
    {
      swift_release();
    }
    else if (!v14)
    {
      (*(void (**)(void *, uint64_t))(v7 + 8))(__dst, v6);
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)__dst + v11) & v19, v5);
    }
    unsigned int v20 = *((unsigned __int8 *)__src + v13);
    unsigned int v21 = v20 - 3;
    if (v20 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v22 = v13;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *(unsigned __int8 *)__src;
          goto LABEL_30;
        case 2:
          int v23 = *(unsigned __int16 *)__src;
          goto LABEL_30;
        case 3:
          int v23 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
          goto LABEL_30;
        case 4:
          int v23 = *(_DWORD *)__src;
LABEL_30:
          int v24 = (v23 | (v21 << (8 * v13))) + 3;
          unsigned int v20 = v23 + 3;
          if (v13 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 2)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      char v25 = 2;
    }
    else
    {
      if (v20 != 1)
      {
        if (v20)
        {
          memcpy(__dst, __src, v13 + 1);
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(__dst, __src, v6);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)__dst + v11) & v19, ((unint64_t)__src + v11) & v19, v5);
          *((unsigned char *)__dst + v12) = *((unsigned char *)__src + v12);
          *((unsigned char *)__dst + v13) = 0;
        }
        return __dst;
      }
      *__dst = *__src;
      __dst[1] = __src[1];
      char v25 = 1;
    }
    *((unsigned char *)__dst + v13) = v25;
    swift_retain();
  }
  return __dst;
}

unsigned char *sub_24A558B28(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v5 + v8;
  uint64_t v10 = ((v5 + v8) & ~v8) + *(void *)(v7 + 64);
  if ((unint64_t)(v10 + 1) > 0x10) {
    uint64_t v11 = v10 + 1;
  }
  else {
    uint64_t v11 = 16;
  }
  unsigned int v12 = __src[v11];
  unsigned int v13 = v12 - 3;
  if (v12 >= 3)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *__src;
        goto LABEL_13;
      case 2:
        int v15 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v15 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_13;
      case 4:
        int v15 = *(_DWORD *)__src;
LABEL_13:
        int v16 = (v15 | (v13 << (8 * v11))) + 3;
        unsigned int v12 = v15 + 3;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 2)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[v11] = 2;
  }
  else if (v12 == 1)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[v11] = 1;
  }
  else if (v12)
  {
    memcpy(__dst, __src, v11 + 1);
  }
  else
  {
    uint64_t v17 = ~v8;
    (*(void (**)(unsigned char *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst, __src);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))((unint64_t)&__dst[v9] & v17, (unint64_t)&__src[v9] & v17, v6);
    __dst[v10] = __src[v10];
    __dst[v11] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_24A558D44(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v5 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = v8 + v10;
    uint64_t v12 = ((v8 + v10) & ~v10) + *(void *)(v9 + 64);
    if ((unint64_t)(v12 + 1) > 0x10) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = 16;
    }
    unsigned int v14 = __dst[v13];
    unsigned int v15 = v14 - 3;
    if (v14 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *__dst;
          goto LABEL_14;
        case 2:
          int v17 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v17 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v17 = *(_DWORD *)__dst;
LABEL_14:
          int v18 = (v17 | (v15 << (8 * v13))) + 3;
          unsigned int v14 = v17 + 3;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v10;
    if (v14 == 2 || v14 == 1)
    {
      swift_release();
    }
    else if (!v14)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(__dst, v6);
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&__dst[v11] & v19, v5);
    }
    unsigned int v20 = __src[v13];
    unsigned int v21 = v20 - 3;
    if (v20 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v22 = v13;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *__src;
          goto LABEL_30;
        case 2:
          int v23 = *(unsigned __int16 *)__src;
          goto LABEL_30;
        case 3:
          int v23 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_30;
        case 4:
          int v23 = *(_DWORD *)__src;
LABEL_30:
          int v24 = (v23 | (v21 << (8 * v13))) + 3;
          unsigned int v20 = v23 + 3;
          if (v13 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 2)
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v13] = 2;
    }
    else if (v20 == 1)
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v13] = 1;
    }
    else if (v20)
    {
      memcpy(__dst, __src, v13 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&__dst[v11] & v19, (unint64_t)&__src[v11] & v19, v5);
      __dst[v12] = __src[v12];
      __dst[v13] = 0;
    }
  }
  return __dst;
}

uint64_t sub_24A559054(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
     + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80));
  uint64_t v4 = 16;
  if (v3 + 1 > 0x10) {
    uint64_t v4 = v3 + 1;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 252) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 4) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 253;
}

void sub_24A5591DC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64)
     + ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 24) - 8) + 80));
  if (v5 + 1 > 0x10) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = 16;
  }
  size_t v7 = v6 + 1;
  if (a3 < 0xFD)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 252) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v9 = a2 - 253;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v6 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_35:
        __break(1u);
        JUMPOUT(0x24A5593F8);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_35;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_24A559420(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64)
     + ((*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
  uint64_t v3 = 16;
  if (v2 + 1 > 0x10) {
    uint64_t v3 = v2 + 1;
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 3;
        LODWORD(v4) = v7 + 3;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_24A55952C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
     + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80));
  if (v4 + 1 > 0x10) {
    size_t v5 = v4 + 1;
  }
  else {
    size_t v5 = 16;
  }
  if (a2 > 2)
  {
    unsigned int v6 = a2 - 3;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 3;
      bzero(a1, v5);
      if (v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if (v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t TreeSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = TreeSet.union(_:)(a1, a2, a3, *v4, v4[1], v4[2], *(void *)(a4 + 16), *(void *)(a4 + 24));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_release();
  *unint64_t v4 = v5;
  v4[1] = v7;
  unint64_t v4[2] = v9;
  return result;
}

uint64_t TreeSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = TreeSet.union<A>(_:)(a1, a2, a3, *v5, v5[1], v5[2], *(void *)(a4 + 16), a5, *(void *)(a4 + 24));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  *uint64_t v5 = v6;
  v5[1] = v8;
  _OWORD v5[2] = v10;
  return result;
}

uint64_t TreeSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void (**)(void, void, void))v3;
  unsigned int v11 = *(void (***)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v12 = *(void *)(v3 + 16);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v9, a1);
  uint64_t v13 = TreeSet.union<A>(_:)((uint64_t)v9, v10, v11, v12, *(void *)(a2 + 16), a3, *(void *)(a2 + 24));
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  *(void *)uint64_t v3 = v13;
  *(void *)(v3 + 8) = v15;
  *(void *)(v3 + 16) = v17;
  return result;
}

unsigned char *BitSet.subtract(_:)(int8x16_t *a1)
{
  char v18 = 1;
  uint64_t v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_24A499D60((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (a1[1].i64[0] < v4) {
    unint64_t v4 = a1[1].u64[0];
  }
  if (v4)
  {
    if (v4 < 6 || ((uint64_t v5 = 8 * v4 + 32, v3 + 32 < &a1->i8[v5]) ? (v6 = &a1[2] >= (int8x16_t *)&v3[v5]) : (v6 = 1), !v6))
    {
      uint64_t v7 = 0;
LABEL_17:
      unint64_t v12 = v4 - v7;
      uint64_t v13 = 8 * v7 + 32;
      uint64_t v14 = &v3[v13];
      uint64_t v15 = (uint64_t *)((char *)a1->i64 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *(void *)v14 &= ~v16;
        v14 += 8;
        --v12;
      }
      while (v12);
      goto LABEL_19;
    }
    uint64_t v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    uint64_t v8 = a1 + 3;
    uint64_t v9 = (int8x16_t *)(v3 + 48);
    uint64_t v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vbicq_s8(*v9, *v8);
      v9[-1] = vbicq_s8(v9[-1], v8[-1]);
      *uint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 != v7) {
      goto LABEL_17;
    }
  }
LABEL_19:
  *unint64_t v1 = (uint64_t)v3;
  return sub_24A54A3A0(&v18, v1);
}

{
  uint64_t *v1;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  char v18;

  char v18 = 1;
  uint64_t v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_24A499D60((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (a1[1].i64[0] < v4) {
    unint64_t v4 = a1[1].u64[0];
  }
  if (v4)
  {
    if (v4 < 6 || ((uint64_t v5 = 8 * v4 + 32, v3 + 32 < &a1->i8[v5]) ? (v6 = &a1[2] >= (int8x16_t *)&v3[v5]) : (v6 = 1), !v6))
    {
      uint64_t v7 = 0;
LABEL_17:
      unint64_t v12 = v4 - v7;
      uint64_t v13 = 8 * v7 + 32;
      uint64_t v14 = &v3[v13];
      uint64_t v15 = (uint64_t *)((char *)a1->i64 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *(void *)v14 &= ~v16;
        v14 += 8;
        --v12;
      }
      while (v12);
      goto LABEL_19;
    }
    uint64_t v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    uint64_t v8 = a1 + 3;
    uint64_t v9 = (int8x16_t *)(v3 + 48);
    uint64_t v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vbicq_s8(*v9, *v8);
      v9[-1] = vbicq_s8(v9[-1], v8[-1]);
      *uint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 != v7) {
      goto LABEL_17;
    }
  }
LABEL_19:
  *unint64_t v1 = (uint64_t)v3;
  return sub_24A54A3A0(&v18, v1);
}

uint64_t BitSet.subtract(_:)(uint64_t result, uint64_t a2)
{
  if (a2 <= 0) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = result & ~(result >> 63);
  }
  unint64_t v4 = a2 & ~(a2 >> 63);
  if (v3 != v4)
  {
    char v6 = 1;
    uint64_t v5 = (char *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_24A499D60((uint64_t)v5);
    }
    _UnsafeBitSet.subtract(_:)(v3, v4);
    *unint64_t v2 = (uint64_t)v5;
    return (uint64_t)sub_24A54A3A0(&v6, v2);
  }
  return result;
}

uint64_t BitSet.subtract<A>(_:)(uint64_t a1, ValueMetadata *a2, int8x16_t *a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (int8x16_t *)((char *)v17 - v9);
  uint64_t Description = (void (**)(char *, void, ValueMetadata *))a2[-1].Description;
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    Description[2](v13, a1, &type metadata for BitSet);
    swift_dynamicCast();
    BitSet.subtract(_:)(v17[0]);
    return swift_bridgeObjectRelease();
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    Description[2](v13, a1, &type metadata for BitSet.Counted);
    swift_dynamicCast();
    BitSet.subtract(_:)(v17[0]);
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0);
  Description[2](v13, a1, a2);
  if ((ValueMetadata *)v14 == a2)
  {
    swift_dynamicCast();
    return BitSet.subtract(_:)((uint64_t)v17[0]->i64, (uint64_t)v17[1]->i64);
  }
  else
  {
    uint64_t v15 = sub_24A5BB840();
    MEMORY[0x270FA5388](v15);
    v17[-4] = (int8x16_t *)a2;
    v17[-3] = a3;
    v17[-2] = v10;
    BitSet._subtract(_:)(sub_24A55A030);
    return (*(uint64_t (**)(int8x16_t *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  }
}

unsigned char *BitSet._subtract(_:)(unsigned char *result, unint64_t a2)
{
  if (result != (unsigned char *)a2)
  {
    unint64_t v4 = (unint64_t)result;
    char v6 = 1;
    uint64_t v5 = (char *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_24A499D60((uint64_t)v5);
    }
    _UnsafeBitSet.subtract(_:)(v4, a2);
    *unint64_t v2 = (uint64_t)v5;
    return sub_24A54A3A0(&v6, v2);
  }
  return result;
}

uint64_t sub_24A559EAC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    sub_24A5BBEE0();
    if (v2 == 1) {
      break;
    }
    uint64_t result = v1;
    if ((v1 & 0x8000000000000000) == 0) {
      return result;
    }
  }
  return 0;
}

unsigned char *BitSet._subtract(_:)(uint64_t (*a1)(void))
{
  char v9 = 1;
  unint64_t v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_24A499D60((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  unint64_t v5 = a1();
  if ((v6 & 1) == 0)
  {
    do
    {
      if (v5 >> 6 < v4) {
        *(void *)&v3[8 * (v5 >> 6) + 32] &= (-1 << v5) - 1;
      }
      unint64_t v5 = a1();
    }
    while ((v7 & 1) == 0);
  }
  *uint64_t v1 = (uint64_t)v3;
  return sub_24A54A3A0(&v9, v1);
}

uint64_t sub_24A55A030()
{
  return sub_24A559EAC();
}

uint64_t OrderedDictionary.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a1;
  v11[1] = a2;
  void v11[2] = a3;
  uint64_t v7 = type metadata accessor for OrderedDictionary.Elements();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v11, 0, 0, 0, a4, a5, v7, WitnessTable);
  swift_release();
  swift_release();
  swift_release();
  return v9;
}

unint64_t sub_24A55A124()
{
  return 0xD000000000000012;
}

uint64_t sub_24A55A1F4(void *a1, uint64_t a2)
{
  return sub_24A55A330(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.description.getter);
}

uint64_t OrderedDictionary.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[0] = a1;
  v14[1] = a2;
  void v14[2] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v7 = sub_24A55A124();
  unint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for OrderedDictionary.Elements();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v14, 1, v7, v9, a4, a5, v10, WitnessTable);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_24A55A318(void *a1, uint64_t a2)
{
  return sub_24A55A330(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.debugDescription.getter);
}

uint64_t sub_24A55A330(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t TreeSet<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A5BC710();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  type metadata accessor for TreeSet();
  swift_getWitnessTable();
  sub_24A5BC4A0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_24A55A448(void *a1)
{
  return TreeSet<>.encode(to:)(a1);
}

void (**TreeSet<>.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void, void)
{
  uint64_t v32 = a3;
  uint64_t v8 = sub_24A5BC0D0();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v26 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a4;
  uint64_t v13 = (void (**)(void, void))TreeSet.init()(a2, a4);
  uint64_t v37 = v13;
  uint64_t v38 = v14;
  uint64_t v39 = v15;
  uint64_t v16 = a1[3];
  uint64_t v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_24A5BC6E0();
  if (v4)
  {
    swift_release();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v35, v36);
    if (sub_24A5BC490())
    {
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      return v13;
    }
    uint64_t v17 = v28;
    uint64_t v13 = (void (**)(void, void))(v27 + 8);
    uint64_t v18 = v29;
    uint64_t v19 = v12;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v36);
      sub_24A5BC470();
      type metadata accessor for TreeSet();
      if ((sub_24A4B37BC((uint64_t)v12) & 1) == 0) {
        break;
      }
      (*v13)(v12, a2);
      __swift_project_boxed_opaque_existential_1(v35, v36);
      if (sub_24A5BC490())
      {
        uint64_t v13 = v37;
        goto LABEL_10;
      }
    }
    __swift_project_boxed_opaque_existential_1(v35, v36);
    sub_24A5BC440();
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    sub_24A5BC070();
    sub_24A5BB6F0();
    uint64_t v40 = TreeSet.count.getter((uint64_t)v37, v38);
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    unsigned int v21 = v26;
    sub_24A5BC0C0();
    uint64_t v22 = sub_24A5BC0E0();
    swift_allocError();
    uint64_t v24 = v23;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v23, v21, v18);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *MEMORY[0x263F8DCB8], v22);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v18);
    (*v13)(v19, a2);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return v13;
}

void (**sub_24A55A8B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>))(void, void)
{
  uint64_t result = TreeSet<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

char *sub_24A55A8EC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (v4[5] != a3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = result;
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v11 = v4[2];
  uint64_t v10 = v4[3];
  uint64_t v12 = v4[4];
  uint64_t v37 = *v4;
  uint64_t v38 = v9;
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  uint64_t v41 = v12;
  uint64_t v42 = a3;
  uint64_t result = (char *)sub_24A498214();
  if ((unint64_t)result <= a4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((void *)&v27 + 1) = v12;
  uint64_t v28 = MEMORY[0x263F8EE78];
  long long v29 = 0u;
  long long v30 = 0u;
  memset(v31, 0, 30);
  *(void *)uint64_t v32 = 0;
  *(void *)&v32[8] = 0;
  *(void *)&v32[14] = 0;
  uint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v25 = v8;
  *(void *)&long long v26 = v9;
  *((void *)&v26 + 1) = v11;
  *(void *)&long long v27 = v10;
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[4] = 0;
  char v13 = *(unsigned char *)(v8 + 18);
  if (v13)
  {
    while (1)
    {
      uint64_t result = (char *)((a4 >> ((4 * v13 + 8) & 0x3C)) & 0xF);
      if ((unint64_t)result >= *(unsigned __int16 *)(v8 + 16)) {
        break;
      }
      sub_24A574DF4(result, (uint64_t)&v28);
      uint64_t v8 = v25;
      char v13 = *(unsigned char *)(v25 + 18);
      if (!v13) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_6:
  uint64_t result = (char *)((a4 >> 8) & 0xF);
  if ((unint64_t)result < *(unsigned __int16 *)(v8 + 16))
  {
    uint64_t v34 = v8;
    long long v35 = v26;
    long long v36 = v27;
    uint64_t result = (char *)sub_24A5751B0((uint64_t)result, (uint64_t)&v28, (uint64_t)v22);
    v4[5] = a3 + 1;
    uint64_t v14 = *(void *)&v31[1];
    int v15 = DWORD2(v31[1]);
    __int16 v16 = WORD6(v31[1]);
    int v17 = *(_DWORD *)&v32[16];
    __int16 v18 = *(_WORD *)&v32[20];
    uint64_t v19 = v33;
    *(void *)uint64_t v7 = v28;
    *(_OWORD *)(v7 + 8) = v29;
    *(_OWORD *)(v7 + 24) = v30;
    *(_OWORD *)(v7 + 40) = v31[0];
    *((void *)v7 + 7) = v14;
    *((_WORD *)v7 + 34) = v16;
    *((_DWORD *)v7 + 16) = v15;
    *(_OWORD *)(v7 + 72) = *(_OWORD *)v32;
    *((_WORD *)v7 + 46) = v18;
    *((_DWORD *)v7 + 22) = v17;
    *((void *)v7 + 12) = v19;
    uint64_t v20 = v22[1];
    LOWORD(v15) = v24;
    *(void *)a2 = v22[0];
    *(void *)(a2 + 8) = v20;
    *(_DWORD *)(a2 + 16) = v23;
    *(_WORD *)(a2 + 20) = v15;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

double sub_24A55AAB4@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_24A55A8EC((char *)&v45, (uint64_t)&v40, a1, a2);
  uint64_t v7 = v40;
  unint64_t v6 = v41;
  uint64_t v8 = sub_24A494C18(a3, v40, v41, v42 | ((unint64_t)v43 << 32) | ((unint64_t)v44 << 40));
  unsigned int v10 = v9;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_24A494C00(a3, v7, v6);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = MEMORY[0x24C5C68C0](v11, v13, v15, v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_24A5BB830();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x24C5C68C0](v21, v23, v25, v27);
  unint64_t v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v31 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v31)
  {
    swift_bridgeObjectRetain();
    sub_24A575508(v18, v20, (v10 << 16) & 0xFF0000 | HIWORD(v8) | (v10 << 16) & 0xFF000000 | ((unint64_t)HIBYTE(v10) << 40) | ((unint64_t)BYTE2(v10) << 32));
  }
  uint64_t v32 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v32 = v28 & 0xFFFFFFFFFFFFLL;
  }
  if (v32)
  {
    swift_bridgeObjectRetain();
    sub_24A494F18(v28, v30, v8 & 0xFFFFFFFFFFFFLL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v49;
  int v34 = v50;
  __int16 v35 = v51;
  int v36 = v53;
  __int16 v37 = v54;
  uint64_t v38 = v55;
  *(void *)a4 = v45;
  *(_OWORD *)(a4 + 8) = v46;
  *(_OWORD *)(a4 + 24) = v47;
  *(_OWORD *)(a4 + 40) = v48;
  *(void *)(a4 + 56) = v33;
  *(_WORD *)(a4 + 68) = v35;
  *(_DWORD *)(a4 + 64) = v34;
  double result = *(double *)&v52;
  *(_OWORD *)(a4 + 72) = v52;
  *(_WORD *)(a4 + 92) = v37;
  *(_DWORD *)(a4 + 88) = v36;
  *(void *)(a4 + 96) = v38;
  return result;
}

__n128 sub_24A55ACEC@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a4 == 1 || *(void *)(v5 + 40) != a2) {
    sub_24A574A28(a1 >> 11, (uint64_t)&v15);
  }
  else {
    sub_24A55AAB4(a2, a3, (16 * (int)a1) & 0x4000 | ((unint64_t)a1 << 16) | (a1 >> 8) & 3 | 4, (uint64_t)&v15);
  }
  __n128 result = v16;
  long long v8 = v17;
  long long v9 = v18;
  uint64_t v10 = v19;
  unint64_t v11 = v20 | ((unint64_t)v21 << 32);
  long long v12 = v22;
  unint64_t v13 = v23 | ((unint64_t)v24 << 32);
  uint64_t v14 = v25;
  *(void *)a5 = v15;
  *(__n128 *)(a5 + 8) = result;
  *(_OWORD *)(a5 + 24) = v8;
  *(_OWORD *)(a5 + 40) = v9;
  *(void *)(a5 + 56) = v10;
  *(_DWORD *)(a5 + 64) = v11;
  *(_WORD *)(a5 + 68) = WORD2(v11);
  *(_OWORD *)(a5 + 72) = v12;
  *(_DWORD *)(a5 + 88) = v13;
  *(_WORD *)(a5 + 92) = WORD2(v13);
  *(void *)(a5 + 96) = v14;
  return result;
}

uint64_t static _Bucket.invalid.getter()
{
  return 255;
}

uint64_t static _Bucket.bitMask.getter()
{
  return 31;
}

uint64_t _Bucket.value.getter(uint64_t result)
{
  return result;
}

BOOL static _Bucket.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t _Bucket._value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_Bucket._value.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t static _Bucket.bitWidth.getter()
{
  return 5;
}

BOOL _Bucket.isInvalid.getter(char a1)
{
  return a1 == -1;
}

BOOL sub_24A55AE40(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static _Bucket.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL sub_24A55AE64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_24A55AE78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_24A55AE8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_24A55AEA0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t _Bucket.description.getter()
{
  return sub_24A5BB7F0();
}

unint64_t sub_24A55AEF8()
{
  unint64_t result = qword_26979C0E0[0];
  if (!qword_26979C0E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979C0E0);
  }
  return result;
}

uint64_t sub_24A55AF4C()
{
  return sub_24A5BB7F0();
}

ValueMetadata *type metadata accessor for _Bucket()
{
  return &type metadata for _Bucket;
}

uint64_t sub_24A55AFA0()
{
  uint64_t v1 = (uint64_t)v0;
  long long v2 = v0[1];
  *(_OWORD *)uint64_t v57 = *v0;
  *(_OWORD *)&v57[16] = v2;
  long long v47 = v0[1];
  *(_OWORD *)&v57[32] = v0[2];
  long long v45 = v0[2];
  if (*(void *)v57)
  {
    unint64_t v3 = *(unsigned __int8 *)(*(void *)v57 + 18);
    swift_unknownObjectRetain_n();
  }
  else
  {
    unint64_t v3 = 0;
  }
  swift_unknownObjectRetain();
  if (sub_24A498214() <= v3)
  {
    sub_24A496BE8((uint64_t)v0);
    sub_24A496BE8((uint64_t)v0);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v62 = *(void *)v57;
    long long v63 = *(_OWORD *)&v57[8];
    long long v64 = *(_OWORD *)&v57[24];
    swift_unknownObjectRetain();
    uint64_t v4 = sub_24A53852C(v3);
    sub_24A496BE8(v1);
    sub_24A496BE8(v1);
    sub_24A496BE8(v1);
  }
  long long v51 = *(_OWORD *)v57;
  long long v52 = v47;
  long long v53 = v45;
  uint64_t v54 = *(void *)&v57[40];
  unint64_t v55 = v3;
  uint64_t v56 = v4;
  if (!v4)
  {
LABEL_47:
    swift_unknownObjectRelease();
    return sub_24A5BC640();
  }
  while (1)
  {
    uint64_t v5 = *((void *)&v53 + 1);
    if (v54 != *((void *)&v53 + 1)) {
      break;
    }
    unint64_t v6 = v55;
    uint64_t v7 = v51;
    unint64_t v8 = v4 + 24 * ((v55 >> 8) & 0xF);
    uint64_t v9 = *(void *)(v8 + 32);
    if (!(void)v51) {
      goto LABEL_51;
    }
    uint64_t v10 = *(void *)(v8 + 24);
    unint64_t v11 = ((-15 << ((4 * *(unsigned char *)(v51 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v51 + 18) | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * *(unsigned char *)(v51 + 18) + 8) & 0x3C));
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    if (v6 >= v11) {
      goto LABEL_52;
    }
    char v13 = (4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C;
    unint64_t v14 = ((v6 >> v13) & 0xF) + 1;
    if (v14 < *(unsigned __int16 *)(v4 + 16))
    {
      unint64_t v55 = (v14 << v13) | ((-15 << v13) - 1) & v6;
      swift_unknownObjectRelease();
      goto LABEL_38;
    }
    char v15 = (4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C;
    uint64_t v16 = (v6 >> v15) & 0xF;
    if (!*(unsigned char *)(v7 + 18))
    {
      if (v16 + 1 < (unint64_t)*(unsigned __int16 *)(v7 + 16))
      {
        unint64_t v55 = ((v16 + 1) << v15) | ((-15 << v15) - 1) & v6;
        swift_unknownObjectRelease();
        uint64_t v56 = v7;
        goto LABEL_38;
      }
      int v24 = 0;
      goto LABEL_37;
    }
    uint64_t v17 = *(void *)(v7 + 24 + 40 * ((v6 >> v15) & 0xF));
    char v18 = (4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C;
    uint64_t v19 = (v6 >> v18) & 0xF;
    if (*(unsigned char *)(v17 + 18))
    {
      uint64_t v20 = *(void *)(v17 + 24 + 40 * ((v6 >> v18) & 0xF));
      int v21 = *(unsigned __int8 *)(v20 + 18);
      char v22 = (4 * v21 + 8) & 0x3C;
      v50[0] = (v6 >> v22) & 0xF;
      if (v21)
      {
        uint64_t v46 = v17 + 24;
        char v44 = v18;
        uint64_t v49 = v7 + 24;
        char v48 = v15;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        char v23 = sub_24A538E54(v20 + 24, v50, (uint64_t)&v54, v20, v21);
        swift_unknownObjectRelease();
        if (v23) {
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v25 = ((v6 >> v22) & 0xF) + 1;
        if (v25 < *(unsigned __int16 *)(v20 + 16))
        {
          unint64_t v55 = (v25 << v22) | ((-15 << v22) - 1) & v6;
          uint64_t v56 = v20;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
LABEL_25:
          swift_unknownObjectRelease();
LABEL_31:
          swift_unknownObjectRelease_n();
          goto LABEL_38;
        }
        uint64_t v46 = v17 + 24;
        char v44 = v18;
        uint64_t v49 = v7 + 24;
        char v48 = v15;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
      }
      uint64_t v26 = v19 + 1;
      if (v19 + 1 < (unint64_t)*(unsigned __int16 *)(v17 + 16))
      {
        uint64_t v27 = (long long *)(v46 + 40 * v26);
        long long v29 = *v27;
        long long v28 = v27[1];
        uint64_t v61 = *((void *)v27 + 4);
        v60[0] = v29;
        v60[1] = v28;
        unsigned int v30 = *(unsigned __int8 *)(v29 + 18) + 1;
        if ((v30 >> 8)) {
          goto LABEL_50;
        }
        unint64_t v55 = ((-256 << (4 * (v30 & 0xF))) | 0xFF) & (v55 & ((-15 << v44) - 1) | (v26 << v44));
        unint64_t v31 = v55;
        swift_unknownObjectRetain();
        uint64_t v32 = sub_24A53852C(v31);
        sub_24A496BE8((uint64_t)v60);
        uint64_t v56 = v32;
        swift_unknownObjectRelease();
        goto LABEL_31;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      if (v19 + 1 < (unint64_t)*(unsigned __int16 *)(v17 + 16))
      {
        unint64_t v55 = ((v19 + 1) << v18) | ((-15 << v18) - 1) & v6;
        uint64_t v56 = v17;
        swift_unknownObjectRetain();
        goto LABEL_31;
      }
      uint64_t v49 = v7 + 24;
      char v48 = (4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C;
      swift_unknownObjectRetain();
    }
    uint64_t v33 = v16 + 1;
    if (v16 + 1 >= (unint64_t)*(unsigned __int16 *)(v7 + 16))
    {
      swift_unknownObjectRelease();
      int v24 = *(unsigned __int8 *)(v7 + 18);
LABEL_37:
      uint64_t v40 = *(unsigned __int16 *)(v7 + 16);
      char v41 = *(unsigned char *)(v7 + 18);
      swift_unknownObjectRelease();
      uint64_t v54 = v5;
      unint64_t v55 = ((-15 << ((4 * v41 + 8) & 0x3C)) - 1) & v24 | (unint64_t)(v40 << ((4 * v41 + 8) & 0x3C));
      uint64_t v56 = 0;
      goto LABEL_38;
    }
    int v34 = (long long *)(v49 + 40 * v33);
    long long v36 = *v34;
    long long v35 = v34[1];
    uint64_t v59 = *((void *)v34 + 4);
    v58[0] = v36;
    v58[1] = v35;
    unsigned int v37 = *(unsigned __int8 *)(v36 + 18) + 1;
    if ((v37 >> 8)) {
      goto LABEL_49;
    }
    unint64_t v55 = ((-256 << (4 * (v37 & 0xF))) | 0xFF) & (v55 & ((-15 << v48) - 1) | (v33 << v48));
    unint64_t v38 = v55;
    swift_unknownObjectRetain();
    uint64_t v39 = sub_24A53852C(v38);
    sub_24A496BE8((uint64_t)v58);
    uint64_t v56 = v39;
    swift_unknownObjectRelease_n();
LABEL_38:
    if ((v9 & 0x1000000000000000) != 0)
    {
      uint64_t v10 = sub_24A49279C();
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      uint64_t v9 = v43;
      if ((v43 & 0x2000000000000000) == 0)
      {
LABEL_40:
        if ((v10 & 0x1000000000000000) == 0) {
          sub_24A5BC120();
        }
        goto LABEL_44;
      }
    }
    else if ((v9 & 0x2000000000000000) == 0)
    {
      goto LABEL_40;
    }
    v50[0] = v10;
    v50[1] = v9 & 0xFFFFFFFFFFFFFFLL;
LABEL_44:
    sub_24A5BC620();
    swift_bridgeObjectRelease();
    uint64_t v4 = v56;
    if (!v56) {
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = swift_bridgeObjectRetain();
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_24A55B5E8()
{
  sub_24A497498((uint64_t)v0);
  sub_24A561324(v0, v13);
  uint64_t v2 = *((void *)&v14 + 1);
  uint64_t v1 = v14;
  __n128 v9 = v13[2];
  __n128 v10 = v13[3];
  __n128 v11 = v13[4];
  long long v12 = v14;
  __n128 v7 = v13[0];
  __n128 v8 = v13[1];
  if (((unint64_t)v14 ^ *((void *)&v14 + 1)) >= 0x4000)
  {
    do
    {
      __n128 v15 = v7;
      __n128 v16 = v8;
      __n128 v17 = v9;
      __n128 v18 = v10;
      __n128 v19 = v11;
      uint64_t v20 = v1;
      uint64_t v21 = v2;
      sub_24A495168();
      uint64_t v6 = sub_24A495704(v4, v5);
      if ((v6 & 1) == 0) {
        *(void *)&long long v12 = *((void *)&v12 + 1);
      }
      MEMORY[0x270FA5388](v6);
      sub_24A5BB630();
      swift_bridgeObjectRelease();
      uint64_t v2 = *((void *)&v12 + 1);
      uint64_t v1 = v12;
    }
    while ((*((void *)&v12 + 1) ^ (unint64_t)v12) >> 14);
  }
  sub_24A5BC640();
  return swift_unknownObjectRelease();
}

uint64_t BigString.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A55B770()
{
  return sub_24A5BC690();
}

uint64_t sub_24A55B7C4()
{
  return sub_24A55B5E8();
}

uint64_t sub_24A55B800()
{
  return sub_24A5BC690();
}

uint64_t sub_24A55B850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  swift_bridgeObjectRetain();
  if ((v4 & 0x1000000000000000) != 0)
  {
    sub_24A491F98();
    uint64_t v5 = a3;
    uint64_t v4 = a4;
  }
  if ((v4 & 0x2000000000000000) == 0 && (v5 & 0x1000000000000000) == 0) {
    sub_24A5BC120();
  }
  sub_24A5BC620();
  return swift_bridgeObjectRelease();
}

uint64_t BitArray._capacity.getter(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (!(v1 >> 58)) {
    return (32 * v1) & 0x7FFFFFFFFFFFFFC0;
  }
  __break(1u);
  return result;
}

BOOL sub_24A55B940(void **a1, void **a2)
{
  return _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t Heap.description.getter()
{
  return 0x3C70616548;
}

uint64_t sub_24A55BA40()
{
  return Heap.description.getter();
}

uint64_t sub_24A55BA54(uint64_t a1)
{
  return Heap.debugDescription.getter(*v1, *(void *)(a1 + 16));
}

uint64_t _HashNode.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL _HashNode.isCollisionNode.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (_DWORD *)nullsub_1(a1 + 16, a1 + 32, a3, a4, a5);
  return (v5[1] & *v5) != 0;
}

uint64_t _HashNode.read<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = nullsub_1(a3 + 16, a3 + 32, a5, a6, a8);
  return a1(v9);
}

uint64_t _HashNode.hasSingletonItem.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A55BC9C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))_HashNode.UnsafeHandle.hasSingletonItem.getter);
}

uint64_t _HashNode.update<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, void *a3)
{
  uint64_t v5 = nullsub_1(*v3 + 16, *v3 + 32, a3[2], a3[3], a3[4]);
  return a1(v5);
}

uint64_t _HashNode.collisionHash.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  nullsub_1(a1 + 16, a1 + 32, a3, a4, a5);
  return *(void *)v5;
}

uint64_t _HashNode.count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

BOOL _HashNode.isIdentical(to:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _HashNode.hasSingletonChild.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A55BC9C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))_HashNode.UnsafeHandle.hasSingletonChild.getter);
}

uint64_t _HashNode.raw.getter()
{
  return swift_retain();
}

uint64_t _HashNode.raw.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_HashNode.raw.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

void *(*_HashNode.count.modify(void *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  return sub_24A541094;
}

uint64_t _HashNode.isAtrophied.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A55BC9C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))_HashNode.UnsafeHandle.isAtrophiedNode.getter);
}

uint64_t sub_24A55BC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6 = nullsub_1(a1 + 16, a1 + 32, a3, a4, a5);
  return a6(v6);
}

uint64_t type metadata accessor for _HashNode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OrderedSet.symmetricDifference(_:)()
{
  uint64_t v0 = sub_24A55CA7C();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;

  uint64_t v0 = sub_24A55CA7C();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_24A55CB90();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v7;
}

uint64_t sub_24A55BE24()
{
  uint64_t v1 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v1 < 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v2 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  MEMORY[0x270FA5388](v1);
  type metadata accessor for OrderedSet();
  sub_24A580E98(v2, (void (*)(char **))sub_24A55CD28);
  if (!v0) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t result = sub_24A4B1074(v4, v5);
  __break(1u);
  return result;
}

void sub_24A55BF5C(int8x8_t **a1@<X0>, int8x8_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, Swift::Int *a8@<X8>)
{
  uint64_t v74 = a7;
  uint64_t v69 = a4;
  uint64_t v71 = a3;
  uint64_t v67 = a1;
  long long v63 = a8;
  uint64_t v65 = *(void *)(a6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  long long v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  __n128 v17 = (char *)&v62 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v68 = (char *)&v62 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  char v22 = (char *)&v62 - v21;
  MEMORY[0x270FA5388](v20);
  int v24 = (char *)&v62 - v23;
  uint64_t v70 = v25;
  Swift::UInt v26 = _s19CollectionsInternal4HeapV5countSivg_0();
  if ((v26 & 0x8000000000000000) == 0)
  {
    uint64_t v66 = a2;
    _UnsafeBitSet.insertAll(upTo:)(v26);
    uint64_t v27 = *(void *)(a5 + 16);
    uint64_t v62 = v8;
    long long v64 = v14;
    if (v27)
    {
      long long v28 = (void (**)(char *, char *, uint64_t))(v65 + 32);
      long long v29 = (void (**)(char *, uint64_t))(v65 + 8);
      swift_retain();
      swift_retain();
      for (uint64_t i = 0; i != v27; ++i)
      {
        sub_24A5BC260();
        (*v28)(v22, v24, a6);
        unint64_t v31 = OrderedSet._find(_:)();
        if ((v32 & 1) == 0 && (v31 & 0x8000000000000000) == 0 && (uint64_t)(v31 >> 6) < (uint64_t)v66[1]) {
          *(void *)&(*v66)[v31 >> 6] &= (-1 << v31) - 1;
        }
        (*v29)(v22, a6);
      }
      swift_release();
      swift_release();
    }
    Swift::UInt v33 = _s19CollectionsInternal4HeapV5countSivg_0();
    if ((v33 & 0x8000000000000000) != 0) {
      goto LABEL_51;
    }
    _UnsafeBitSet.insertAll(upTo:)(v33);
    uint64_t v34 = *(void *)(v70 + 16);
    if (v34)
    {
      long long v35 = (void (**)(char *, char *, uint64_t))(v65 + 32);
      long long v36 = (void (**)(char *, uint64_t))(v65 + 8);
      swift_retain();
      swift_retain();
      uint64_t v37 = 0;
      unint64_t v38 = v68;
      do
      {
        sub_24A5BC260();
        (*v35)(v17, v38, a6);
        unint64_t v39 = OrderedSet._find(_:)();
        if ((v40 & 1) == 0 && (v39 & 0x8000000000000000) == 0 && (uint64_t)(v39 >> 6) < (uint64_t)v67[1]) {
          *(void *)&(*v67)[v39 >> 6] &= (-1 << v39) - 1;
        }
        ++v37;
        (*v36)(v17, a6);
      }
      while (v34 != v37);
      swift_release();
      swift_release();
    }
    uint64_t v42 = *v66;
    uint64_t v41 = (uint64_t)v66[1];
    uint64_t v43 = *v67;
    uint64_t v44 = (uint64_t)v67[1];
    if (!*v67 || !v44)
    {
      Swift::Int v45 = 0;
      uint64_t v48 = (uint64_t)v64;
LABEL_26:
      uint64_t v51 = v71;
      swift_retain();
      uint64_t v52 = v70;
      swift_retain();
      Swift::Int v72 = OrderedSet._extractSubset(using:count:extraCapacity:)(v42, v41, 0, 1, v45, v51, v52, a6);
      Swift::Int v73 = v53;
      if (v44 <= 0) {
        uint64_t v54 = 0;
      }
      else {
        uint64_t v54 = (uint64_t)*v43;
      }
      uint64_t v55 = 0;
      for (j = (void (**)(uint64_t, uint64_t))(v65 + 8); ; (*j)(v48, a6))
      {
        if (v54)
        {
          if (v55 << 6 < 0) {
            goto LABEL_47;
          }
          v54 &= v54 - 1;
        }
        else
        {
          uint64_t v58 = v55 + 1;
          if (__OFADD__(v55, 1)) {
            goto LABEL_48;
          }
          if (v58 >= v44)
          {
LABEL_44:
            Swift::Int v60 = v73;
            uint64_t v61 = v63;
            *long long v63 = v72;
            v61[1] = v60;
            return;
          }
          int8x8_t v59 = v43[v58];
          if (!*(void *)&v59)
          {
            while (1)
            {
              uint64_t v55 = v58 + 1;
              if (__OFADD__(v58, 1)) {
                break;
              }
              if (v55 >= v44) {
                goto LABEL_44;
              }
              int8x8_t v59 = v43[v55];
              ++v58;
              if (v59) {
                goto LABEL_31;
              }
            }
            __break(1u);
            goto LABEL_46;
          }
          ++v55;
LABEL_31:
          if (v55 << 6 < 0) {
            goto LABEL_49;
          }
          uint64_t v54 = (*(void *)&v59 - 1) & *(void *)&v59;
        }
        sub_24A5BC260();
        uint64_t v57 = type metadata accessor for OrderedSet();
        OrderedSet._appendNew(_:)(v48, v57);
      }
    }
    Swift::Int v45 = 0;
    uint64_t v46 = 8 * v44;
    long long v47 = *v67;
    uint64_t v48 = (uint64_t)v64;
    while (1)
    {
      uint8x8_t v49 = (uint8x8_t)vcnt_s8(*v47);
      v49.i16[0] = vaddlv_u8(v49);
      BOOL v50 = __OFADD__(v45, v49.u32[0]);
      v45 += v49.u32[0];
      if (v50) {
        break;
      }
      ++v47;
      v46 -= 8;
      if (!v46) {
        goto LABEL_26;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
  }
  __break(1u);
LABEL_51:
  __break(1u);
}

Swift::UInt sub_24A55C504@<X0>(int8x8_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, Swift::Int *a9@<X8>)
{
  uint64_t v52 = a9;
  uint64_t v57 = a4;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v54 = a1;
  uint64_t v61 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  __n128 v17 = (char *)&v51 - v16;
  uint64_t v18 = sub_24A5BBD20();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v56 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a8;
  uint64_t v24 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v51 - v26;
  uint64_t v66 = a7;
  uint64_t v64 = OrderedSet.init()();
  uint64_t v65 = v28;
  Swift::UInt result = _s19CollectionsInternal4HeapV5countSivg_0();
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  _UnsafeBitSet.insertAll(upTo:)(result);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v23, v57, v24);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t v58 = v27;
  uint64_t v56 = AssociatedConformanceWitness;
  sub_24A5BBEE0();
  unint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  if (v31(v21, 1, a5) != 1)
  {
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
    long long v47 = (void (**)(char *, uint64_t))(v61 + 8);
    v55(v15, v21, a5);
    while (1)
    {
      unint64_t v48 = OrderedSet._find(_:)();
      if (v49)
      {
        type metadata accessor for OrderedSet();
        OrderedSet._append(_:)((uint64_t)v15);
      }
      else if ((v48 & 0x8000000000000000) == 0 && (uint64_t)(v48 >> 6) < (uint64_t)v54[1])
      {
        *(void *)&(*v54)[v48 >> 6] &= (-1 << v48) - 1;
      }
      (*v47)(v15, a5);
      sub_24A5BBEE0();
      if (v31(v21, 1, a5) == 1) {
        break;
      }
      v55(v15, v21, a5);
    }
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v58, v57);
  char v32 = *v54;
  uint64_t v33 = (uint64_t)v54[1];
  uint64_t v34 = v65;
  swift_retain();
  swift_retain();
  uint64_t v35 = v59;
  swift_retain();
  uint64_t v36 = v60;
  swift_retain();
  Swift::Int v37 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  swift_release();
  Swift::Int v38 = OrderedSet._extractSubset(using:count:extraCapacity:)(v32, v33, 0, 1, v37, v35, v36, a5);
  Swift::Int v62 = v38;
  Swift::Int v63 = v39;
  uint64_t v40 = *(void *)(v34 + 16);
  if (v40)
  {
    uint64_t v41 = v61;
    uint64_t v42 = v34 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    Swift::UInt result = swift_retain();
    unint64_t v43 = 0;
    while (v43 < *(void *)(v34 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v17, v42 + *(void *)(v41 + 72) * v43++, a5);
      uint64_t v44 = type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:)((uint64_t)v17, v44);
      uint64_t v41 = v61;
      Swift::UInt result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v17, a5);
      if (v40 == v43)
      {
        swift_release();
        Swift::Int v45 = v62;
        Swift::Int v46 = v63;
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v45 = v38;
  Swift::Int v46 = v39;
LABEL_17:
  swift_release();
  Swift::UInt result = swift_release();
  BOOL v50 = v52;
  *uint64_t v52 = v45;
  v50[1] = v46;
  return result;
}

uint64_t sub_24A55CA7C()
{
  uint64_t v0 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v0 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v1 = (unint64_t)(v0 + 63) >> 6;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    MEMORY[0x270FA5388](v0);
    type metadata accessor for OrderedSet();
    sub_24A580E98(v1, (void (*)(char **))sub_24A55CD28);
  }
  __break(1u);
  uint64_t result = sub_24A4B1074(v3, v4);
  __break(1u);
  return result;
}

uint64_t sub_24A55CB90()
{
  uint64_t v0 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v0 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v1 = (unint64_t)(v0 + 63) >> 6;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    MEMORY[0x270FA5388](v0);
    type metadata accessor for OrderedSet();
    sub_24A580E98(v1, (void (*)(char **))sub_24A4B1054);
  }
  __break(1u);
  uint64_t result = sub_24A4B1074(v3, v4);
  __break(1u);
  return result;
}

Swift::UInt sub_24A55CCB4@<X0>(int8x8_t **a1@<X0>, Swift::Int *a2@<X8>)
{
  return sub_24A55C504(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(char **)(v2 + 40), a2);
}

uint64_t sub_24A55CCDC()
{
  return sub_24A55BE24();
}

void sub_24A55CD00(int8x8_t **a1@<X0>, Swift::Int *a2@<X8>)
{
  sub_24A55BF5C(a1, *(int8x8_t ***)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_24A55CD28(uint64_t a1)
{
  return sub_24A4B1054(a1);
}

uint64_t *sub_24A55CD40(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0;
  if (result) {
    uint64_t v4 = &result[a2];
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *(void *)(a3 + 16);
  while (1)
  {
    if (v3 == v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = *(void *)(a3 + 16);
      if (!result) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
    if (v3 >= v5) {
      break;
    }
    uint64_t v6 = *(void *)(a3 + 32 + 8 * v3);
    unint64_t v7 = v3 + 1;
    if (!result) {
      goto LABEL_13;
    }
LABEL_10:
    if (result == v4)
    {
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v8 = 1;
      if (v3 == v5) {
        return (uint64_t *)v8;
      }
      goto LABEL_14;
    }
    uint64_t v8 = 0;
    uint64_t v10 = *result++;
    uint64_t v9 = v10;
    if (v3 == v5) {
      return (uint64_t *)v8;
    }
LABEL_14:
    if (v6 != v9) {
      LODWORD(v8) = 1;
    }
    unint64_t v3 = v7;
    if (v8 == 1) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

__n128 BigString.UTF8View.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  long long v11 = *v1;
  long long v12 = v1[2];
  uint64_t v3 = *((void *)v1 + 4);
  uint64_t v4 = *((void *)v1 + 5);
  __n128 v14 = (__n128)v1[1];
  __n128 v10 = v14;
  long long v15 = v12;
  long long v13 = v11;
  sub_24A4974C4((uint64_t)&v13, (uint64_t)v16);
  sub_24A497498((uint64_t)v16);
  unint64_t v5 = sub_24A489E5C(0x300uLL, 0, 0, 1);
  __n128 result = v10;
  *(_OWORD *)a1 = v11;
  *(__n128 *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  return result;
}

uint64_t sub_24A55CE6C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = a3;
  unint64_t v6 = a2[6];
  unint64_t v7 = *a2;
  uint64_t v8 = a2[4];
  if (*a2) {
    BOOL v9 = 2 * (v8 & 0x1FFFFFFFFFFFFFuLL) > v6 >> 10;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    __n128 result = sub_24A55D0D4(0, a3, 0, 0);
    unint64_t v5 = 0;
    if (!result) {
      return (uint64_t)v5;
    }
    __break(1u);
  }
  __n128 v10 = a2;
  uint64_t v11 = a2[9];
  if (v11 == 1) {
    goto LABEL_32;
  }
  long long v12 = *(_OWORD *)(a2 + 1);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[7];
  unint64_t v15 = a2[8];
  unint64_t v30 = v6 >> 11;
  uint64_t v31 = v6;
  if (v14 != a2[5])
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v4 = result;
  if (v11)
  {
    unint64_t v16 = v11 + 24 * ((v15 >> ((4 * *(unsigned char *)(v11 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v3 = *(void *)(v16 + 24);
    unint64_t v7 = *(void *)(v16 + 32);
    swift_bridgeObjectRetain();
    if ((v7 & 0x1000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v33 = v7;
    long long v34 = v12;
    uint64_t v35 = v13;
    uint64_t v36 = v8;
    swift_unknownObjectRetain();
    sub_24A4895D4(v15, (uint64_t)v32);
    swift_unknownObjectRelease();
    unint64_t v7 = *((void *)&v32[0] + 1);
    uint64_t v3 = *(void *)&v32[0];
    if ((*((void *)&v32[0] + 1) & 0x1000000000000000) == 0)
    {
LABEL_11:
      if ((v7 & 0x2000000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_16:
      uint64_t v18 = HIBYTE(v7) & 0xF;
      *(void *)&v32[0] = v3;
      *((void *)&v32[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      __n128 v17 = v32;
      goto LABEL_17;
    }
  }
  uint64_t v3 = sub_24A49279C();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  unint64_t v7 = v20;
  if ((v20 & 0x2000000000000000) != 0) {
    goto LABEL_16;
  }
LABEL_12:
  if ((v3 & 0x1000000000000000) == 0)
  {
LABEL_28:
    __n128 v17 = (_OWORD *)sub_24A5BC120();
    goto LABEL_17;
  }
  __n128 v17 = (_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v18 = v3 & 0xFFFFFFFFFFFFLL;
LABEL_17:
  char v21 = sub_24A55DEB8((uint64_t)v17, v18, &v31, v4, &v30, v5);
  unint64_t v5 = v22;
  if (v21)
  {
    swift_bridgeObjectRelease();
    unint64_t v23 = v31 | (v30 << 11);
LABEL_25:
    void v10[6] = v23;
    v10[7] = v14;
    unsigned char v10[8] = v15;
    v10[9] = v11;
    return (uint64_t)v5;
  }
  unint64_t v24 = ((unint64_t)v10[6] >> 11) - v10[6];
  if ((v7 & 0x1000000000000000) != 0)
  {
    __n128 result = sub_24A5BB710();
    BOOL v25 = __OFADD__(v24, result);
    unint64_t v26 = v24 + result;
    if (!v25)
    {
LABEL_24:
      long long v27 = *((_OWORD *)v10 + 1);
      v32[0] = *(_OWORD *)v10;
      v32[1] = v27;
      v32[2] = *((_OWORD *)v10 + 2);
      sub_24A4974C4((uint64_t)v32, (uint64_t)v37);
      sub_24A497498((uint64_t)v37);
      uint64_t v14 = sub_24A4980DC(v14, v15, v11);
      unint64_t v15 = v28;
      uint64_t v11 = v29;
      sub_24A496BE8((uint64_t)v32);
      swift_bridgeObjectRelease();
      unint64_t v23 = v26 << 11;
      goto LABEL_25;
    }
  }
  else
  {
    if ((v7 & 0x2000000000000000) != 0) {
      __n128 result = HIBYTE(v7) & 0xF;
    }
    else {
      __n128 result = v3 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v25 = __OFADD__(v24, result);
    unint64_t v26 = v24 + result;
    if (!v25) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_24A55D0D4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = a2[6];
  unint64_t v10 = *a2;
  uint64_t v11 = a2[4];
  if (*a2) {
    BOOL v12 = 2 * (v11 & 0x1FFFFFFFFFFFFFuLL) > v9 >> 10;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    return v8;
  }
  uint64_t v14 = a2[9];
  if (v14 == 1) {
    goto LABEL_31;
  }
  long long v15 = *(_OWORD *)(a2 + 1);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[7];
  unint64_t v18 = a2[8];
  unint64_t v33 = v9 >> 11;
  uint64_t v34 = v9;
  if (v17 != a2[5])
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = result;
  if (v14)
  {
    unint64_t v19 = v14 + 24 * ((v18 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v4 = *(void *)(v19 + 24);
    unint64_t v10 = *(void *)(v19 + 32);
    swift_bridgeObjectRetain();
    if ((v10 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v36 = v10;
    long long v37 = v15;
    uint64_t v38 = v16;
    uint64_t v39 = v11;
    swift_unknownObjectRetain();
    sub_24A4895D4(v18, (uint64_t)v35);
    swift_unknownObjectRelease();
    unint64_t v10 = *((void *)&v35[0] + 1);
    uint64_t v4 = *(void *)&v35[0];
    if ((*((void *)&v35[0] + 1) & 0x1000000000000000) == 0)
    {
LABEL_10:
      if ((v10 & 0x2000000000000000) == 0) {
        goto LABEL_11;
      }
LABEL_15:
      uint64_t v21 = HIBYTE(v10) & 0xF;
      *(void *)&v35[0] = v4;
      *((void *)&v35[0] + 1) = v10 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v20 = v35;
      goto LABEL_16;
    }
  }
  uint64_t v4 = sub_24A49279C();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  unint64_t v10 = v23;
  if ((v23 & 0x2000000000000000) != 0) {
    goto LABEL_15;
  }
LABEL_11:
  if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_27:
    unint64_t v20 = (_OWORD *)sub_24A5BC120();
    goto LABEL_16;
  }
  unint64_t v20 = (_OWORD *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v21 = v4 & 0xFFFFFFFFFFFFLL;
LABEL_16:
  BOOL v24 = sub_24A55DF98((BOOL)v20, v21, &v34, v7, &v33, v6, v5);
  uint64_t v8 = v25;
  if (v24)
  {
    swift_bridgeObjectRelease();
    unint64_t v26 = v34 | (v33 << 11);
LABEL_24:
    a2[6] = v26;
    a2[7] = v17;
    a2[8] = v18;
    a2[9] = v14;
    return v8;
  }
  unint64_t v27 = ((unint64_t)a2[6] >> 11) - a2[6];
  if ((v10 & 0x1000000000000000) != 0)
  {
    __n128 result = sub_24A5BB710();
    BOOL v28 = __OFADD__(v27, result);
    unint64_t v29 = v27 + result;
    if (!v28)
    {
LABEL_23:
      long long v30 = *((_OWORD *)a2 + 1);
      v35[0] = *(_OWORD *)a2;
      v35[1] = v30;
      void v35[2] = *((_OWORD *)a2 + 2);
      sub_24A4974C4((uint64_t)v35, (uint64_t)v40);
      sub_24A497498((uint64_t)v40);
      uint64_t v17 = sub_24A4980DC(v17, v18, v14);
      unint64_t v18 = v31;
      uint64_t v14 = v32;
      sub_24A496BE8((uint64_t)v35);
      swift_bridgeObjectRelease();
      unint64_t v26 = v29 << 11;
      goto LABEL_24;
    }
  }
  else
  {
    if ((v10 & 0x2000000000000000) != 0) {
      __n128 result = HIBYTE(v10) & 0xF;
    }
    else {
      __n128 result = v4 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v28 = __OFADD__(v27, result);
    unint64_t v29 = v27 + result;
    if (!v28) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t BigString.UTF8View.Iterator.next<A>(maximumCount:with:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(unint64_t, void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v49 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (uint64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (unint64_t)&v46 - v14;
  uint64_t v16 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v19 = (unsigned __int8 *)&v46 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  uint64_t result = MEMORY[0x270FA5388](v17);
  BOOL v50 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)v6;
  if (!*(void *)v6
    || (unint64_t v24 = *(void *)(v6 + 48), v25 = *(void *)(v6 + 32), 2 * (v25 & 0x1FFFFFFFFFFFFFuLL) <= v24 >> 10))
  {
    uint64_t v6 = a5;
    unint64_t v32 = v15 + *(int *)(TupleTypeMetadata2 + 48);
    a5 = v51(v32, 0, 0);
    *(void *)unint64_t v15 = a5;
    unint64_t v33 = (char *)v13 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t *v13 = a5;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v33, v32, a4);
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v13, TupleTypeMetadata2);
    if (!a5)
    {
      uint64_t v34 = (char *)v13 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 32);
      v35(v34, v32, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v6, v34, a4);
    }
    goto LABEL_22;
  }
  TupleTypeMetadata2 = *(void *)(v6 + 72);
  if (TupleTypeMetadata2 == 1)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  long long v26 = *(_OWORD *)(v6 + 8);
  uint64_t v27 = *(void *)(v6 + 24);
  uint64_t v28 = *(void *)(v6 + 56);
  unint64_t v15 = *(void *)(v6 + 64);
  unint64_t v55 = v24 >> 11;
  uint64_t v56 = v24;
  if (v28 != *(void *)(v6 + 40))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v29 = result;
  uint64_t v48 = a5;
  unint64_t v47 = v15;
  if (TupleTypeMetadata2)
  {
    uint64_t v30 = *(void *)(TupleTypeMetadata2
                    + 24 * ((v15 >> ((4 * *(unsigned char *)(TupleTypeMetadata2 + 18) + 8) & 0x3C)) & 0xF)
                    + 24);
    uint64_t v31 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v58 = v23;
    long long v59 = v26;
    uint64_t v60 = v27;
    uint64_t v61 = v25;
    swift_unknownObjectRetain();
    sub_24A4895D4(v15, (uint64_t)v57);
    swift_unknownObjectRelease();
    uint64_t v31 = *((void *)&v57[0] + 1);
    uint64_t v30 = *(void *)&v57[0];
  }
  uint64_t v53 = v30;
  unint64_t v54 = v31;
  MEMORY[0x270FA5388](v31);
  *(&v46 - 6) = a4;
  *(&v46 - 5) = (uint64_t)&v56;
  uint64_t v36 = (uint64_t)v51;
  *(&v46 - 4) = v49;
  *(&v46 - 3) = v36;
  *(&v46 - 2) = v52;
  *(&v46 - 1) = (uint64_t)&v55;
  sub_24A55D840((uint64_t (*)(void *, uint64_t))sub_24A55E758);
  int v37 = *v19;
  uint64_t v38 = &v19[*(int *)(v29 + 48)];
  unint64_t v15 = *(void *)(v20 + 32);
  unint64_t v19 = (unsigned __int8 *)v50;
  ((void (*)(char *, unsigned __int8 *, uint64_t))v15)(v50, v38, a4);
  if (v37 != 1)
  {
    a5 = (*(void *)(v6 + 48) >> 11) - *(void *)(v6 + 48);
    uint64_t v46 = v28;
    if ((v54 & 0x1000000000000000) == 0)
    {
      if ((v54 & 0x2000000000000000) != 0)
      {
        uint64_t result = HIBYTE(v54) & 0xF;
        uint64_t v41 = a5 + result;
        if (!__OFADD__(a5, result))
        {
LABEL_18:
          long long v42 = *(_OWORD *)(v6 + 16);
          v57[0] = *(_OWORD *)v6;
          v57[1] = v42;
          _OWORD v57[2] = *(_OWORD *)(v6 + 32);
          sub_24A4974C4((uint64_t)v57, (uint64_t)v62);
          sub_24A497498((uint64_t)v62);
          uint64_t v43 = sub_24A4980DC(v46, v47, TupleTypeMetadata2);
          unint64_t v40 = v44;
          TupleTypeMetadata2 = v45;
          sub_24A496BE8((uint64_t)v57);
          uint64_t v39 = v41 << 11;
          uint64_t v28 = v43;
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t result = v53 & 0xFFFFFFFFFFFFLL;
        uint64_t v41 = a5 + (v53 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(a5, v53 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_18;
        }
      }
      goto LABEL_25;
    }
LABEL_23:
    uint64_t result = sub_24A5BB710();
    uint64_t v41 = a5 + result;
    if (!__OFADD__(a5, result)) {
      goto LABEL_18;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v39 = v56 | (v55 << 11);
  unint64_t v40 = v47;
LABEL_19:
  *(void *)(v6 + 48) = v39;
  *(void *)(v6 + 56) = v28;
  *(void *)(v6 + 64) = v40;
  *(void *)(v6 + 72) = TupleTypeMetadata2;
  ((void (*)(uint64_t, unsigned __int8 *, uint64_t))v15)(v48, v19, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A55D840(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v10;
    return a1(v5, v6);
  }
  uint64_t v3 = sub_24A49279C();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *unint64_t v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = (void *)sub_24A5BC120();
  }
  return a1(v5, v6);
}

uint64_t static BigString.UTF8View.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  void v6[2] = a1[2];
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  _OWORD v5[2] = a2[2];
  return sub_24A551D98(v6, v5) & 1;
}

BOOL BigString.UTF8View.isIdentical(to:)(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  _OWORD v8[3] = *v1;
  v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  _OWORD v8[2] = a1[2];
  sub_24A497498((uint64_t)v1);
  sub_24A497498((uint64_t)a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8((uint64_t)a1);
  sub_24A496BE8(v2);
  return v6;
}

uint64_t BigString.UTF8View.hash(into:)()
{
  return sub_24A55AFA0();
}

uint64_t BigString.UTF8View.hashValue.getter()
{
  return sub_24A5BC690();
}

__n128 sub_24A55DA80@<Q0>(uint64_t a1@<X8>)
{
  __n128 v3 = *(__n128 *)(v1 + 16);
  v17[0] = *(_OWORD *)v1;
  long long v16 = v17[0];
  long long v4 = *(_OWORD *)(v1 + 32);
  __n128 v15 = v3;
  v17[1] = v3;
  void v17[2] = v4;
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  v18[1] = v3;
  void v18[2] = v4;
  v18[0] = v17[0];
  sub_24A4974C4((uint64_t)v18, (uint64_t)v19);
  sub_24A497498((uint64_t)v19);
  unint64_t v7 = sub_24A489E5C(0x300uLL, 0, 0, 1);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  sub_24A496BE8((uint64_t)v17);
  __n128 result = v15;
  *(_OWORD *)a1 = v16;
  *(__n128 *)(a1 + 16) = v15;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  return result;
}

uint64_t sub_24A55DB40()
{
  if (*v0) {
    return v0[4];
  }
  else {
    return 0;
  }
}

uint64_t sub_24A55DB54()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  unint64_t v4[2] = v0[2];
  uint64_t v2 = sub_24A5959C0(v4);
  sub_24A496BE8((uint64_t)v4);
  return v2;
}

uint64_t sub_24A55DBA0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A5964FC(a1, a2, a3);
}

Swift::UInt8_optional __swiftcall BigString.UTF8View.Iterator.next()()
{
  unint64_t v7 = *(void *)v0;
  uint64_t v8 = *(void *)(v0 + 32);
  if (*(void *)v0) {
    BOOL v9 = 2 * (v8 & 0x1FFFFFFFFFFFFFuLL) > *(void *)(v0 + 48) >> 10;
  }
  else {
    BOOL v9 = 0;
  }
  __int16 v10 = !v9;
  if (v9)
  {
    unint64_t v11 = v0;
    uint64_t v12 = *(void *)(v0 + 72);
    if (v12 == 1)
    {
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v1 = *(void *)(v0 + 56);
    if (v1 == *(void *)(v0 + 40))
    {
      __int16 v26 = v10;
      unint64_t v2 = *(void *)(v0 + 64);
      unsigned __int8 v5 = *(void *)(v0 + 48);
      unint64_t v3 = (16 * *(void *)(v0 + 48)) & 0x4000 | (*(void *)(v0 + 48) >> 8) & 3 | ((unint64_t)v5 << 16) | 4;
      if (v12)
      {
        unint64_t v13 = v12 + 24 * ((v2 >> ((4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v4 = *(void *)(v13 + 24);
        unint64_t v0 = *(void *)(v13 + 32);
        unsigned int v25 = *(unsigned __int8 *)(v13 + 40);
        swift_bridgeObjectRetain();
        unint64_t v14 = v3;
        if ((v0 & 0x1000000000000000) == 0)
        {
LABEL_16:
          if ((v0 & 0x2000000000000000) != 0) {
            unint64_t v6 = HIBYTE(v0) & 0xF;
          }
          else {
            unint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v7 = v14 >> 16;
          if (v14 >> 16 >= v6)
          {
            __break(1u);
          }
          else if ((v0 & 0x1000000000000000) == 0)
          {
            if ((v0 & 0x2000000000000000) != 0)
            {
              *(void *)&long long v27 = v4;
              *((void *)&v27 + 1) = v0 & 0xFFFFFFFFFFFFFFLL;
              LOBYTE(v7) = *((unsigned char *)&v27 + v7);
            }
            else if ((v4 & 0x1000000000000000) != 0)
            {
              LOBYTE(v7) = *(unsigned char *)((v0 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v14 >> 16));
            }
            else
            {
              LOBYTE(v7) = *(unsigned char *)(sub_24A5BC120() + v7);
            }
            swift_bridgeObjectRelease();
            unint64_t v17 = ((unint64_t)v5 << 16) + 65540;
            goto LABEL_26;
          }
          LOWORD(v24) = sub_24A5BB760();
          LOBYTE(v7) = v24;
          if ((v4 & 0x800000000000000) != 0)
          {
            if (v6 > v3 >> 16)
            {
LABEL_38:
              unint64_t v17 = sub_24A5BB720();
              swift_bridgeObjectRelease();
LABEL_26:
              uint64_t v18 = *(void *)(v11 + 48);
              if (v17 >> 14 >= 4 * v6)
              {
                long long v21 = *(_OWORD *)(v11 + 16);
                long long v27 = *(_OWORD *)v11;
                long long v28 = v21;
                long long v29 = *(_OWORD *)(v11 + 32);
                sub_24A4974C4((uint64_t)&v27, (uint64_t)v34);
                sub_24A497498((uint64_t)v34);
                uint64_t v1 = sub_24A4980DC(v1, v2, v12);
                unint64_t v2 = v22;
                uint64_t v12 = v23;
                sub_24A496BE8((uint64_t)&v27);
                unint64_t v20 = (v18 + ((v25 - (unint64_t)v18) << 11)) & 0xFFFFFFFFFFFFF800;
              }
              else
              {
                unint64_t v19 = (v18 + (((v17 >> 16) - v18) << 11)) & 0xFFFFFFFFFFFFF800;
                if ((v17 & 0xC000) != 0) {
                  v19 |= 0x400uLL;
                }
                unint64_t v20 = v19 & 0xFFFFFFFFFFFFFF00 | BYTE2(v17);
              }
              __int16 v10 = v26;
              *(void *)(v11 + 48) = v20;
              *(void *)(v11 + 56) = v1;
              *(void *)(v11 + 64) = v2;
              *(void *)(v11 + 72) = v12;
              goto LABEL_32;
            }
LABEL_42:
            __break(1u);
            return (Swift::UInt8_optional)v24;
          }
LABEL_41:
          unint64_t v24 = sub_24A4DFD84(v3, v4, v0);
          if (v6 > v24 >> 16) {
            goto LABEL_38;
          }
          goto LABEL_42;
        }
      }
      else
      {
        long long v15 = *(_OWORD *)(v0 + 8);
        uint64_t v16 = *(void *)(v0 + 24);
        unint64_t v30 = *(void *)v0;
        long long v31 = v15;
        uint64_t v32 = v16;
        uint64_t v33 = v8;
        swift_unknownObjectRetain();
        sub_24A4895D4(v2, (uint64_t)&v27);
        swift_unknownObjectRelease();
        unint64_t v0 = *((void *)&v27 + 1);
        uint64_t v4 = v27;
        unsigned int v25 = v28;
        unint64_t v14 = v3;
        if ((*((void *)&v27 + 1) & 0x1000000000000000) == 0) {
          goto LABEL_16;
        }
      }
      unint64_t v14 = v3;
      if ((v4 & 0x800000000000000) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v14 = sub_24A4DFD84(v3, v4, v0);
    goto LABEL_16;
  }
  LOBYTE(v7) = 0;
LABEL_32:
  LOWORD(v24) = v7 | (unsigned __int16)(v10 << 8);
  return (Swift::UInt8_optional)v24;
}

uint64_t sub_24A55DEB8(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t *a6)
{
  uint64_t v6 = *a3;
  if (a2 < *a3)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a4 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!a4 || a2 - v6 < 0 || (uint64_t v10 = a2, a2 - v6 >= a4)) {
    uint64_t v10 = v6 + a4;
  }
  uint64_t v11 = v10 - v6;
  if (v10 < v6) {
    goto LABEL_18;
  }
  uint64_t v12 = result + v6;
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  __n128 result = sub_24A55D0D4(v11, a6, v13, v11);
  if (result < 0 || v11 < result) {
    goto LABEL_19;
  }
  if (__OFADD__(*a5, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *a5 += result;
  uint64_t v14 = *a3 + result;
  if (!__OFADD__(*a3, result))
  {
    *a3 = v14;
    return v14 < a2;
  }
LABEL_21:
  __break(1u);
  return result;
}

BOOL sub_24A55DF98(BOOL result, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *a3;
  if (a2 < *a3)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (a4 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (!a4 || a2 - v7 < 0 || (uint64_t v8 = a2, a2 - v7 >= a4)) {
    uint64_t v8 = v7 + a4;
  }
  BOOL v9 = v8 < v7;
  uint64_t v10 = v8 - v7;
  if (v9) {
    goto LABEL_43;
  }
  uint64_t v11 = (unsigned __int8 *)(result + v7);
  if (result) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v10;
  if (v10 < 1)
  {
    if (a7 > 0) {
      goto LABEL_19;
    }
    BOOL v14 = v10 < a7;
  }
  else
  {
    if (a7 < 0) {
      goto LABEL_20;
    }
    BOOL v14 = v10 > (unint64_t)a7;
  }
  if (v14) {
    uint64_t v13 = a7;
  }
  else {
    uint64_t v13 = v10;
  }
LABEL_19:
  if (v13 < 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_20:
  uint64_t v15 = 0;
  if (v12) {
    uint64_t v16 = &v12[v10];
  }
  else {
    uint64_t v16 = 0;
  }
  while (v12 && v12 != v16)
  {
    char v17 = 0;
    int v19 = *v12++;
    int v18 = v19;
    if (v15 == v13) {
      goto LABEL_29;
    }
LABEL_26:
    int v20 = *(unsigned __int8 *)(a6 + v15);
    uint64_t v21 = v15 + 1;
    if (v17) {
      goto LABEL_33;
    }
LABEL_30:
    uint64_t v22 = 0;
    if (v15 != v13)
    {
      uint64_t v15 = v21;
      if (v18 == v20) {
        continue;
      }
    }
    goto LABEL_36;
  }
  int v18 = 0;
  char v17 = 1;
  if (v15 != v13) {
    goto LABEL_26;
  }
LABEL_29:
  int v20 = 0;
  uint64_t v21 = v13;
  if ((v17 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_33:
  if (v15 == v13) {
    uint64_t v22 = v10;
  }
  else {
    uint64_t v22 = 0;
  }
LABEL_36:
  if (v22 < 0 || v10 < v22) {
    goto LABEL_45;
  }
  if (__OFADD__(*a5, v22))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  *a5 += v22;
  uint64_t v23 = *a3 + v22;
  if (!__OFADD__(*a3, v22))
  {
    *a3 = v23;
    return v23 < a2;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_24A55E0E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X6>, uint64_t a5@<X7>, BOOL *a6@<X8>)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *v17;
  if (v19 < *v17)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v13 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v13 || a2 - v18 < 0 || (uint64_t v20 = a2, a2 - v18 >= v13)) {
    uint64_t v20 = v18 + v13;
  }
  uint64_t v21 = v20 - v18;
  if (v20 < v18) {
    goto LABEL_18;
  }
  uint64_t v22 = result + v18;
  if (result) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t result = v14(v16, v23, v21);
  if (result < 0 || v21 < result) {
    goto LABEL_19;
  }
  if (__OFADD__(*a4, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *a4 += result;
  uint64_t v24 = *a3 + result;
  if (!__OFADD__(*a3, result))
  {
    *a3 = v24;
    unsigned int v25 = &a6[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    *a6 = v24 < a2;
    return (*(uint64_t (**)(BOOL *, char *, uint64_t))(v11 + 32))(v25, v16, a5);
  }
LABEL_21:
  __break(1u);
  return result;
}

Swift::UInt8_optional sub_24A55E28C@<W0>(Swift::UInt8 *a1@<X8>)
{
  Swift::UInt8_optional result = BigString.UTF8View.Iterator.next()();
  *a1 = result.value;
  a1[1] = result.is_nil;
  return result;
}

unint64_t BigString.UTF8View.distance(from:to:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return (a5 >> 11) - (a1 >> 11);
}

__n128 BigString.UTF8View.subscript.getter@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v23 = *(__n128 *)(v2 + 16);
  long long v25 = *(_OWORD *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  unint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  v26[0] = *(_OWORD *)v2;
  long long v24 = v26[0];
  v26[1] = v23;
  _OWORD v26[2] = v25;
  sub_24A4974C4((uint64_t)v26, (uint64_t)v27);
  sub_24A497498((uint64_t)v27);
  unint64_t v11 = sub_24A489E5C(v7, v8, v9, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  unint64_t v18 = sub_24A489E5C(a1[4], a1[5], a1[6], a1[7]);
  __n128 result = v23;
  *(_OWORD *)a2 = v24;
  *(__n128 *)(a2 + 16) = v23;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v15;
  *(void *)(a2 + 72) = v17;
  *(void *)(a2 + 80) = v18;
  *(void *)(a2 + 88) = v20;
  *(void *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v22;
  return result;
}

uint64_t sub_24A55E3AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A55E634(a1, (uint64_t (*)(void, void, void, void))sub_24A48A10C, a2);
}

uint64_t sub_24A55E3C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A55E6A8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A48A10C);
}

uint64_t sub_24A55E3E4(void *a1, void *a2)
{
  return (*a2 >> 11) - (*a1 >> 11);
}

void (*sub_24A55E3F8(void *a1, unint64_t *a2))(void **a1)
{
  uint64_t v5 = malloc(0x31uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v10;
  _OWORD v5[2] = v2[2];
  *((unsigned char *)v5 + 48) = sub_24A489C70(v6, v7, v8, v9);
  return sub_24A4DFA58;
}

__n128 sub_24A55E474@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  unint64_t v8 = a1[6];
  uint64_t v29 = a1[5];
  unint64_t v30 = a1[4];
  uint64_t v9 = a1[7];
  long long v10 = v2[1];
  v31[0] = *v2;
  long long v11 = *v2;
  long long v12 = v2[2];
  v31[1] = v10;
  _OWORD v31[2] = v12;
  __n128 v27 = (__n128)v2[1];
  long long v28 = v11;
  uint64_t v13 = *((void *)v2 + 4);
  uint64_t v14 = *((void *)v2 + 5);
  sub_24A4974C4((uint64_t)v31, (uint64_t)v32);
  sub_24A497498((uint64_t)v32);
  unint64_t v15 = sub_24A489E5C(v4, v5, v6, v7);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unint64_t v22 = sub_24A489E5C(v30, v29, v8, v9);
  __n128 result = v27;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = v27;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v24;
  *(void *)(a2 + 96) = v25;
  *(void *)(a2 + 104) = v26;
  return result;
}

unint64_t sub_24A55E570@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_24A495EFC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_24A55E5C8@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = BigString.UTF8View.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t sub_24A55E61C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A55E634(a1, (uint64_t (*)(void, void, void, void))sub_24A489ED0, a2);
}

uint64_t sub_24A55E634@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2], a1[3]);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

uint64_t sub_24A55E690(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A55E6A8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A489ED0);
}

uint64_t sub_24A55E6A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a4(*a1, a1[1], a1[2], a1[3]);
  *a1 = result;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

unint64_t BigString.UTF8View.index(roundingUp:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = sub_24A489E5C(a1, a2, a3, a4);
  if ((result ^ a1) >= 0x400) {
    return sub_24A489ED0(result, v6, v7, v8);
  }
  return result;
}

uint64_t sub_24A55E758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_24A55E0E4(a1, a2, *(void **)(v3 + 24), *(void **)(v3 + 56), *(void *)(v3 + 16), a3);
}

unint64_t sub_24A55E780()
{
  unint64_t result = qword_26979C168;
  if (!qword_26979C168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C168);
  }
  return result;
}

unint64_t sub_24A55E7D8()
{
  unint64_t result = qword_26979C170;
  if (!qword_26979C170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C170);
  }
  return result;
}

unint64_t sub_24A55E830()
{
  unint64_t result = qword_26979C178;
  if (!qword_26979C178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C178);
  }
  return result;
}

unint64_t sub_24A55E888()
{
  unint64_t result = qword_26979C180;
  if (!qword_26979C180)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979C188);
    sub_24A55E8FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C180);
  }
  return result;
}

unint64_t sub_24A55E8FC()
{
  unint64_t result = qword_26979C190;
  if (!qword_26979C190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C190);
  }
  return result;
}

unint64_t sub_24A55E954()
{
  unint64_t result = qword_26979C198;
  if (!qword_26979C198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C198);
  }
  return result;
}

unint64_t sub_24A55E9AC()
{
  unint64_t result = qword_26979C1A0;
  if (!qword_26979C1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1A0);
  }
  return result;
}

unint64_t sub_24A55EA04()
{
  unint64_t result = qword_26979C1A8;
  if (!qword_26979C1A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979C188);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1A8);
  }
  return result;
}

unint64_t sub_24A55EA64()
{
  unint64_t result = qword_26979C1B0;
  if (!qword_26979C1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.UTF8View()
{
  return &type metadata for BigString.UTF8View;
}

ValueMetadata *type metadata accessor for BigString.UTF8View.Iterator()
{
  return &type metadata for BigString.UTF8View.Iterator;
}

uint64_t OrderedDictionary.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v18[0] = a4;
  v18[1] = a5;
  uint64_t v8 = sub_24A5BC6B0();
  MEMORY[0x270FA5388](v8 - 8);
  long long v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[5] = a1;
  void v18[6] = a2;
  v18[7] = a3;
  void v18[2] = a1;
  _OWORD v18[3] = a2;
  void v18[4] = a3;
  uint64_t v14 = *MEMORY[0x263F8E7F0];
  uint64_t v15 = sub_24A5BC6A0();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  type metadata accessor for OrderedDictionary();
  type metadata accessor for OrderedDictionary.Elements();
  swift_getWitnessTable();
  sub_24A4D1B3C((uint64_t)v10);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A55ED0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedDictionary.customMirror.getter(*v2, v2[1], v2[2], *(void *)(a1 + 32), a2);
}

Swift::Void __swiftcall OrderedDictionary.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
}

void *OrderedDictionary.partition(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  v12[0] = v8
         + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80));
  uint64_t v10 = v12[0];
  v12[1] = v9;
  sub_24A55F5D8(v12, a1, a2, v7, &v13);
  if (v4) {
    return sub_24A4BEFBC(v12, v10, v9);
  }
  sub_24A4BEFBC(v12, v10, v9);
  return (void *)v13;
}

uint64_t OrderedDictionary.sort(by:)()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v1 = sub_24A5BB8F0();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (!v0)
  {
    swift_getTupleTypeMetadata2();
    uint64_t v4 = MEMORY[0x24C5C6CE0](v1);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v3 = _s19CollectionsInternal4HeapV5countSivg_0();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (v4 == v3)
    {
      MEMORY[0x270FA5388](result);
      sub_24A5BB980();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t OrderedDictionary<>.sort()()
{
  return OrderedDictionary.sort(by:)();
}

Swift::Void __swiftcall OrderedDictionary.shuffle()()
{
  OrderedDictionary.shuffle<A>(using:)((uint64_t)v0, v0);
}

uint64_t OrderedDictionary.shuffle<A>(using:)(uint64_t a1, void *a2)
{
  uint64_t v4 = v2[2];
  uint64_t v5 = a2[3];
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result >= 2)
  {
    uint64_t v7 = a2[2];
    uint64_t v8 = v2;
    uint64_t v9 = a2[4];
    uint64_t v29 = v4;
    uint64_t v30 = OrderedSet.elements.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_getTupleTypeMetadata2();
    uint64_t v10 = sub_24A5BB970();
    sub_24A4D5BD8(v10, v7, v5, v9);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v11 = MEMORY[0x24C5C6CE0](v30, v7);
    swift_bridgeObjectRelease();
    if (v11 >= 2)
    {
      sub_24A55FF50();
      uint64_t v12 = 0;
      while (1)
      {
        v27[1] = v11;
        uint64_t result = sub_24A5BC330();
        v27[0] = v12;
        if (__OFADD__(v12, v28)) {
          break;
        }
        --v11;
        sub_24A5BB9F0();
        swift_getWitnessTable();
        sub_24A5BB4B0();
        v27[0] = v12;
        v28 += v12;
        sub_24A5BC210();
        swift_getWitnessTable();
        sub_24A5BB4B0();
        ++v12;
        if (v11 == 1)
        {
          uint64_t v4 = v29;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    uint64_t v13 = v8;
    sub_24A5BB9F0();
    swift_bridgeObjectRetain_n();
    swift_getWitnessTable();
    uint64_t v14 = sub_24A5BBA00();
    v27[0] = v14;
    uint64_t v15 = sub_24A48AB90();
    uint64_t v16 = sub_24A5BC210();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v18 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v27, 0, 1, v15, v16, WitnessTable, v9);
    uint64_t v19 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v20 = 0;
    if (v19 >= 16)
    {
      swift_retain();
      uint64_t v20 = v18;
    }
    uint64_t v21 = OrderedSet.init(_uniqueElements:_:)(v14, v20);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    swift_release();
    v27[0] = v4;
    sub_24A5BC210();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_getWitnessTable();
    uint64_t v24 = sub_24A5BBA00();
    uint64_t v25 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v26 = _s19CollectionsInternal4HeapV5countSivg_0();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    if (v25 != v26)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    uint64_t *v13 = v21;
    v13[1] = v23;
    _OWORD v13[2] = v24;
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.reverse()()
{
}

uint64_t sub_24A55F5D8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = type metadata accessor for OrderedSet();
  uint64_t result = OrderedSet._partition<A>(values:by:)(v10, v11, a2, a3, v12, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t sub_24A55F664(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *((void *)&v25 + 1) = a2;
  *(void *)&long long v25 = a1;
  *(void *)&long long v30 = a1;
  *((void *)&v30 + 1) = a2;
  swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_24A5BB580();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x24C5C6BF0](&v27, v9, WitnessTable);
  long long v29 = v27;
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = a4;
  void v11[3] = a5;
  _OWORD v11[4] = a6;
  sub_24A5BC080();
  swift_getWitnessTable();
  sub_24A5BC390();
  swift_release();
  long long v27 = v30;
  long long v28 = v31;
  sub_24A5BC270();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v12 = sub_24A5BBA00();
  *(void *)&long long v27 = v12;
  uint64_t v13 = sub_24A48AB90();
  uint64_t v14 = sub_24A5BC210();
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v27, 0, 1, v13, v14, v15, a6);
  uint64_t v17 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v18 = 0;
  if (v17 >= 16)
  {
    swift_retain();
    uint64_t v18 = v16;
  }
  uint64_t v19 = OrderedSet.init(_uniqueElements:_:)(v12, v18);
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  *a3 = v19;
  a3[1] = v21;
  swift_release();
  swift_release();
  long long v30 = v25;
  MEMORY[0x24C5C6BF0](&v27, v9, WitnessTable);
  long long v29 = v27;
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = a4;
  void v22[3] = a5;
  void v22[4] = a6;
  sub_24A5BC390();
  swift_release();
  long long v27 = v30;
  long long v28 = v31;
  sub_24A5BC270();
  swift_getWitnessTable();
  a3[2] = sub_24A5BBA00();
  return swift_release();
}

uint64_t sub_24A55F9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(int *)(v9 + 56);
  uint64_t v13 = &v11[v12];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  uint64_t v16 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, a3);
}

uint64_t sub_24A55FB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(int *)(v9 + 56);
  uint64_t v13 = &v11[v12];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  uint64_t v16 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v13, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, a2);
}

uint64_t sub_24A55FC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a4;
  uint64_t v25 = a7;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v23 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16);
  v16((char *)&v20 - v14, a1, a5);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16);
  v17(&v15[*(int *)(TupleTypeMetadata2 + 48)], v21, a6);
  v16(v13, v22, a5);
  v17(&v13[*(int *)(TupleTypeMetadata2 + 48)], v24, a6);
  LOBYTE(v17) = sub_24A5BB420();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v23 + 8);
  v18(v13, TupleTypeMetadata2);
  v18(v15, TupleTypeMetadata2);
  return v17 & 1;
}

uint64_t sub_24A55FE94(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48), a2, a2 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_24A55FF0C(uint64_t a1, uint64_t a2)
{
  return sub_24A55F664(a1, a2, *(uint64_t **)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_24A55FF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A55FC9C(a1, a2, a3, a4, v4[2], v4[3], v4[4]) & 1;
}

unint64_t sub_24A55FF50()
{
  unint64_t result = qword_26979C1B8;
  if (!qword_26979C1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1B8);
  }
  return result;
}

uint64_t sub_24A55FFA4()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_24A55FFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A55F9C4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_24A55FFC0()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_24A55FFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A55FB30(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v25 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v25, a3);
  sub_24A5BB840();
  swift_getAssociatedConformanceWitness();
  uint64_t v24 = v17;
  uint64_t v25 = AssociatedTypeWitness;
  sub_24A5BBEE0();
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v18(v11, 1, v4) != 1)
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v19(v7, v11, v4);
      OrderedSet._append(_:)((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_24A5BBEE0();
    }
    while (v18(v11, 1, v4) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v25);
}

uint64_t OrderedSet._append(_:)(uint64_t a1)
{
  OrderedSet._find(_:)();
  char v4 = v3;
  if (v3) {
    OrderedSet._appendNew(_:in:)(a1, v2);
  }
  return v4 & 1;
}

void OrderedSet._appendNew(_:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  sub_24A5BC210();
  sub_24A5BC1C0();
  swift_retain();
  uint64_t v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  uint64_t v9 = *v2;
  if (OrderedSet._capacity.getter(v9) >= v8)
  {
    if (v9)
    {
      OrderedSet._ensureUnique()();
      uint64_t v10 = *v3;
      if (*v3)
      {
        swift_retain();
        sub_24A5608FC((void *)(v10 + 16), v10 + 32);
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    OrderedSet._regenerateHashTable()();
  }
}

void OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v6 + 16))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24A5BC210();
  sub_24A5BC1C0();
  swift_retain();
  uint64_t v7 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  uint64_t v8 = *v2;
  if (OrderedSet._capacity.getter(v8) >= v7)
  {
    if (v8)
    {
      OrderedSet._ensureUnique()();
      uint64_t v9 = *v3;
      if (*v3)
      {
        swift_retain();
        sub_24A5609E4((void *)(v9 + 16), v9 + 32, a2);
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    OrderedSet._regenerateHashTable()();
  }
}

uint64_t OrderedSet.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OrderedSet._find(_:)();
  char v8 = v7;
  if (v7) {
    OrderedSet._insertNew(_:at:in:)(a1, a2, v6, a3);
  }
  return v8 & 1;
}

void OrderedSet._insertNew(_:at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v16 = a3;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  uint64_t v12 = *v4;
  uint64_t v13 = *(void *)(a4 + 24);
  if (v11 >= OrderedSet._capacity.getter(v12))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v17, v7);
    sub_24A5BC210();
    sub_24A5BC1D0();
    OrderedSet._regenerateHashTable()();
  }
  else
  {
    uint64_t v14 = v18;
    if (!v12)
    {
LABEL_5:
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v17, v7);
      sub_24A5BC210();
      sub_24A5BC1D0();
      return;
    }
    OrderedSet._ensureUnique()();
    uint64_t v15 = *v5;
    if (*v5)
    {
      swift_retain();
      sub_24A560A84((void *)(v15 + 16), v15 + 32, v16, v14, (uint64_t)v5, v7, v13);
      swift_release();
      goto LABEL_5;
    }
    __break(1u);
  }
}

uint64_t sub_24A5608FC(void *a1, uint64_t a2)
{
  uint64_t result = sub_24A5BB370();
  uint64_t v5 = 1 << *a1;
  BOOL v6 = __OFSUB__(v5, 1);
  uint64_t v7 = v5 - 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    if (_HashTable.UnsafeHandle._startIterator(bucket:)(v7 & result, a1, a2))
    {
      while (1)
        _HashTable.BucketIterator.advance()();
    }
    swift_retain();
    uint64_t v8 = _s19CollectionsInternal4HeapV5countSivg_0();
    swift_release();
    uint64_t result = v8 - 1;
    if (!__OFSUB__(v8, 1)) {
      return _HashTable.BucketIterator.currentValue.setter(result, 0);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A5609E4(void *a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t v6 = _s19CollectionsInternal4HeapV5countSivg_0();
  unint64_t result = swift_release();
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v6 - 1 - ((uint64_t)a1[1] >> 6);
    return _HashTable.UnsafeHandle.subscript.setter((-1 << *a1) ^ ~(((v8 >> 63) & ~(-1 << *a1)) + v8), a3, a1, a2);
  }
  return result;
}

unint64_t sub_24A560A84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *(void *)(a5 + 8);
  uint64_t v12 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  _HashTable.UnsafeHandle.adjustContents<A>(preparingForInsertionOfElementAtOffset:in:)(a4, (char *)&v15, a1, a2, v12, WitnessTable, a7);
  return _HashTable.UnsafeHandle.subscript.setter((-1 << *a1) ^ ~((((a4 - ((uint64_t)a1[1] >> 6)) >> 63) & ~(-1 << *a1)) + a4 - ((uint64_t)a1[1] >> 6)), a3, a1, a2);
}

uint64_t OrderedSet.update(_:at:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t *)(v3 + 8);
  sub_24A5BC260();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  char v11 = sub_24A5BB530();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v11)
  {
    uint64_t v13 = sub_24A5BC210();
    sub_24A5BC190();
    uint64_t v14 = *v10;
    sub_24A5303D4(a2, *v10);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * a2, a1, v6);
    return nullsub_1(v13, v15, v16, v17, v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t OrderedSet.updateOrAppend(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (OrderedSet._append(_:)(a1))
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 56);
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }
  else
  {
    unint64_t v11 = v7;
    uint64_t v12 = *(void *)(a2 + 16);
    sub_24A5BC260();
    uint64_t v13 = sub_24A5BC210();
    sub_24A5BC190();
    uint64_t v14 = *(void *)(v3 + 8);
    sub_24A5303D4(v11, v14);
    uint64_t v20 = *(void *)(v12 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 24))(v14+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v11, a1, v12);
    nullsub_1(v13, v15, v16, v17, v18);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  return v8(v9, v10, 1);
}

uint64_t OrderedSet.updateOrInsert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(v4 + 8);
  uint64_t v9 = *(void *)(a4 + 16);
  swift_retain();
  swift_retain();
  uint64_t v23 = a2;
  unint64_t v10 = OrderedSet._find(_:)();
  LOBYTE(a2) = v11;
  uint64_t v13 = v12;
  swift_release();
  swift_release();
  if (a2)
  {
    OrderedSet._insertNew(_:at:in:)(v23, a3, v13, a4);
    uint64_t v16 = *(void *)(v9 - 8);
    uint64_t v21 = 1;
  }
  else
  {
    sub_24A5BC260();
    uint64_t v14 = sub_24A5BC210();
    sub_24A5BC190();
    uint64_t v15 = *v8;
    sub_24A5303D4(v10, *v8);
    uint64_t v16 = *(void *)(v9 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 24))(v15+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v10, v23, v9);
    nullsub_1(v14, v17, v18, v19, v20);
    uint64_t v21 = 0;
    a3 = v10;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a1, v21, 1, v9);
  return a3;
}

uint64_t Deque.init(arrayLiteral:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v3 = sub_24A5BB9F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Deque.init<A>(_:)((uint64_t)&v6, a2, v3, WitnessTable);
}

uint64_t sub_24A5610B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = sub_24A5BB9F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Deque.init<A>(_:)((uint64_t)&v8, v4, v5, WitnessTable);
  *a3 = result;
  return result;
}

Swift::String_optional __swiftcall BigString.Iterator.next()()
{
  if ((*(void *)(v0 + 88) ^ *(void *)(v0 + 80)) >= 0x4000)
  {
    sub_24A495168();
    uint64_t v1 = v3;
    uint64_t v2 = (void *)v4;
    if ((sub_24A495704(v3, v4) & 1) == 0) {
      *(void *)(v0 + 80) = *(void *)(v0 + 88);
    }
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0;
  }
  uint64_t v5 = v1;
  uint64_t v6 = v2;
  result.value._object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

double BigString.makeIterator()@<D0>(__n128 *a1@<X8>)
{
  sub_24A497498((uint64_t)v1);
  sub_24A561324(v1, v7);
  __n128 v3 = v7[3];
  a1[2] = v7[2];
  a1[3] = v3;
  __n128 v4 = v7[5];
  a1[4] = v7[4];
  a1[5] = v4;
  double result = v7[0].n128_f64[0];
  __n128 v6 = v7[1];
  *a1 = v7[0];
  a1[1] = v6;
  return result;
}

double sub_24A561218@<D0>(__n128 *a1@<X8>)
{
  __n128 v3 = v1[1];
  v9[0] = *v1;
  v9[1] = v3;
  _OWORD v9[2] = v1[2];
  sub_24A561324(v9, v8);
  __n128 v4 = v8[3];
  a1[2] = v8[2];
  a1[3] = v4;
  __n128 v5 = v8[5];
  a1[4] = v8[4];
  a1[5] = v5;
  double result = v8[0].n128_f64[0];
  __n128 v7 = v8[1];
  *a1 = v8[0];
  a1[1] = v7;
  return result;
}

uint64_t sub_24A561274()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  unint64_t v4[2] = v0[2];
  uint64_t v2 = sub_24A595808(v4);
  sub_24A496BE8((uint64_t)v4);
  return v2;
}

void sub_24A5612C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

uint64_t sub_24A5612FC@<X0>(Swift::String_optional *a1@<X8>)
{
  Swift::String_optional v3 = BigString.Iterator.next()();
  uint64_t result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

__n128 sub_24A561324@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v4 = a1[1];
  __n128 v5 = a1[2];
  __n128 v34 = *a1;
  __n128 v35 = v4;
  __n128 v36 = a1[2];
  __n128 v6 = v4;
  __n128 v28 = v4;
  __n128 v29 = v34;
  __n128 v27 = v5;
  uint64_t v26 = v36.n128_i64[1];
  if (v34.n128_u64[0])
  {
    unint64_t v7 = *(unsigned __int8 *)(v34.n128_u64[0] + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    unint64_t v7 = 0;
  }
  swift_unknownObjectRetain();
  if (v7 >= sub_24A498214())
  {
    sub_24A496BE8((uint64_t)a1);
    uint64_t v8 = 0;
  }
  else
  {
    __n128 v40 = v34;
    __n128 v41 = v6;
    unint64_t v42 = v36.n128_u64[0];
    swift_unknownObjectRetain();
    uint64_t v8 = sub_24A53852C(v7);
    sub_24A496BE8((uint64_t)a1);
    sub_24A496BE8((uint64_t)a1);
  }
  swift_unknownObjectRetain();
  unint64_t v9 = sub_24A498214();
  sub_24A496BE8((uint64_t)a1);
  if (v7 >= v9)
  {
    sub_24A496BE8((uint64_t)a1);
    unint64_t v17 = 15;
    uint64_t v18 = 7;
  }
  else
  {
    if (v8)
    {
      unint64_t v11 = v8 + 24 * ((v7 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v13 = *(void *)(v11 + 24);
      unint64_t v12 = *(void *)(v11 + 32);
      unsigned int v14 = *(unsigned __int8 *)(v11 + 40);
      v10.i32[0] = *(_DWORD *)(v11 + 41);
      unint64_t v25 = vmovl_u8(v10).u64[0];
      uint64_t v15 = *(unsigned __int8 *)(v11 + 45);
      swift_bridgeObjectRetain();
      v16.i64[0] = v25;
    }
    else
    {
      __n128 v37 = v34;
      __n128 v38 = v6;
      unint64_t v39 = v36.n128_u64[0];
      swift_unknownObjectRetain();
      sub_24A4895D4(v7, (uint64_t)v30);
      sub_24A496BE8((uint64_t)a1);
      uint64_t v13 = v30[0];
      unint64_t v12 = v30[1];
      unsigned int v14 = v31;
      v19.i32[0] = v32;
      uint16x8_t v16 = vmovl_u8(v19);
      uint64_t v15 = v33;
    }
    uint32x4_t v20 = vmovl_u16((uint16x4_t)(v16.i64[0] & 0xFF00FF00FF00FFLL));
    v21.i64[0] = v20.u32[0];
    v21.i64[1] = v20.u32[1];
    uint64x2_t v22 = v21;
    v21.i64[0] = v20.u32[2];
    v21.i64[1] = v20.u32[3];
    int8x16_t v23 = vorrq_s8((int8x16_t)vshlq_u64(v22, (uint64x2_t)xmmword_24A5BD070), (int8x16_t)vshlq_u64(v21, (uint64x2_t)xmmword_24A5BD060));
    unint64_t v17 = sub_24A48F4F0(v13, v12, *(void *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)) | (v15 << 40) | v14);
    sub_24A494C00(v17, v13, v12);
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_24A5BBE20();
    sub_24A496BE8((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  *a2 = v29;
  a2[1] = v28;
  __n128 result = v27;
  a2[2] = v27;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = v26;
  a2[4].n128_u64[0] = v7;
  a2[4].n128_u64[1] = v8;
  a2[5].n128_u64[0] = v17;
  a2[5].n128_u64[1] = v18;
  return result;
}

unint64_t sub_24A5615A4()
{
  unint64_t result = qword_26979C1C0;
  if (!qword_26979C1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1C0);
  }
  return result;
}

uint64_t _s8IteratorVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_unknownObjectRetain();
  return a1;
}

void *_s8IteratorVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t _s8IteratorVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t _s8IteratorVwet(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s8IteratorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.Iterator()
{
  return &type metadata for BigString.Iterator;
}

uint64_t sub_24A561854()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_24A561864()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t OrderedSet.applying(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OrderedSet.elements.getter();
  uint64_t v7 = sub_24A5BB9F0();
  swift_getWitnessTable();
  sub_24A5BBC60();
  swift_bridgeObjectRelease();
  uint64_t v8 = v14;
  if (!v14) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = OrderedSet.init<A>(_:)((uint64_t)&v14, a4, v7, a5, WitnessTable);
  uint64_t v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v12 = MEMORY[0x24C5C6CE0](v8, a4);
  swift_bridgeObjectRelease();
  if (v11 != v12)
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v10;
}

uint64_t BitSet.description.getter(uint64_t a1)
{
  long long v2 = (unint64_t *)(a1 + 32);
  if (*(void *)(a1 + 16)) {
    unint64_t v3 = *v2;
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  char v6 = 1;
  uint64_t v7 = MEMORY[0x263F8D6C8];
  while (v3)
  {
    if (v5 << 6 < 0) {
      goto LABEL_22;
    }
    unint64_t v9 = __rbit64(v3);
    v3 &= v3 - 1;
    unint64_t v10 = (v5 << 6) | __clz(v9);
    if ((v6 & 1) == 0) {
LABEL_19:
    }
      sub_24A5BB6F0();
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_24A5BDAE0;
    *(void *)(v8 + 56) = v7;
    *(void *)(v8 + 32) = v10;
    sub_24A5BC5F0();
    uint64_t result = swift_bridgeObjectRelease();
    char v6 = 0;
  }
  uint64_t v11 = v5 + 1;
  if (__OFADD__(v5, 1)) {
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (v11 >= v12)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    return 91;
  }
  unint64_t v13 = v2[v11];
  if (v13)
  {
    ++v5;
LABEL_17:
    if (v5 << 6 < 0) {
      goto LABEL_24;
    }
    unint64_t v3 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v5 << 6);
    if ((v6 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_5;
  }
  while (1)
  {
    uint64_t v5 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v5 >= v12) {
      goto LABEL_20;
    }
    unint64_t v13 = v2[v5];
    ++v11;
    if (v13) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_24A561BAC()
{
  return BitSet.description.getter(*v0);
}

uint64_t TreeSet.isStrictSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = TreeSet.count.getter(a4, a5);
  if (TreeSet.count.getter(a1, a2) >= v14) {
    return 0;
  }
  else {
    return _HashNode.isSubset<A>(_:of:)(0, a4, a5, a1, a2, a7, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60] + 8, a8) & 1;
  }
}

uint64_t TreeSet.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = TreeSet.count.getter(a4, a5);
  if (TreeDictionary.Keys.count.getter(a1, a2, a3, a7, a8, a9) >= v16) {
    return 0;
  }
  uint64_t v17 = MEMORY[0x263F8EE60] + 8;
  return _HashNode.isSubset<A>(_:of:)(0, a4, a5, a1, a2, a7, a8, v17, a9);
}

uint64_t TreeSet.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v78 = a4;
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  uint64_t v77 = a1;
  uint64_t v69 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  Swift::Int v73 = (char *)&v58 - v11;
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v67 = *(void *)(v12 - 8);
  uint64_t v68 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  Swift::Int v72 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  Swift::Int v63 = (char *)&v58 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint8x8_t v19 = (char *)&v58 - v18;
  uint64_t v20 = *(void *)(a5 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17);
  int8x16_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  Swift::Int v62 = (char *)&v58 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  __n128 v28 = (char *)&v58 - v27;
  uint64_t v29 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v26);
  unsigned __int8 v31 = (char *)&v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet() == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v77, a6);
    swift_dynamicCast();
    char v32 = TreeSet.isStrictSuperset(of:)(v91, *((uint64_t *)&v91 + 1), v92, v79, v80, v78, a5, a7);
    swift_release();
    return v32 & 1;
  }
  uint64_t v60 = v29;
  uint64_t v65 = v28;
  TreeSet.makeIterator()(v79, &v91);
  uint64_t v61 = a7;
  uint64_t v66 = type metadata accessor for TreeSet.Iterator();
  TreeSet.Iterator.next()(v66, (uint64_t)v19);
  long long v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  uint64_t v76 = v20 + 48;
  if (v75(v19, 1, a5) != 1)
  {
    uint64_t v59 = v20;
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    uint64_t v71 = v20 + 32;
    v70(v65, v19, a5);
    uint64_t v33 = v69;
    uint64_t v34 = sub_24A5BB870();
    if (v34 == 2)
    {
      uint64_t v35 = v61;
      if (qword_26979ACF0 != -1) {
        swift_once();
      }
      uint64_t v36 = MEMORY[0x263F8EE60] + 8;
      uint64_t v81 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x263F8EE60] + 8, v35);
      uint64_t v82 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v31, v77, a6);
      swift_retain();
      sub_24A5BB840();
      swift_getAssociatedConformanceWitness();
      __n128 v38 = v72;
      sub_24A5BBEE0();
      int v39 = v75(v38, 1, a5);
      uint64_t v40 = v59;
      if (v39 != 1)
      {
        uint64_t v45 = (void (**)(char *, uint64_t))(v59 + 8);
        while (1)
        {
          v70(v23, v38, a5);
          uint64_t v46 = sub_24A5B85E4();
          if (!_HashNode.containsKey(_:_:_:)(0, (uint64_t)v23, v46, v79, v80, a5, v36, v35)) {
            break;
          }
          unint64_t v47 = (void *)type metadata accessor for _HashNode();
          char v49 = _HashNode.insert(_:_:_:)(0, (uint64_t)v23, v48, v46, v47);
          BOOL v50 = *v45;
          (*v45)(v23, a5);
          if (v49)
          {
            uint64_t v51 = v82;
            if (v51 == TreeSet.count.getter(v79, v80))
            {
              (*(void (**)(char *, uint64_t))(v64 + 8))(v73, AssociatedTypeWitness);
              v50(v65, a5);
              goto LABEL_29;
            }
          }
          __n128 v38 = v72;
          sub_24A5BBEE0();
          if (v75(v38, 1, a5) == 1) {
            goto LABEL_10;
          }
        }
        uint64_t v57 = *v45;
        (*v45)(v23, a5);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v73, AssociatedTypeWitness);
        v57(v65, a5);
LABEL_29:
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        long long v85 = v93;
        long long v86 = v94;
        long long v88 = v96;
        long long v89 = v97;
        long long v87 = v95;
        long long v83 = v91;
        long long v84 = v92;
        sub_24A4A2BC4((uint64_t)&v83);
        swift_release();
        goto LABEL_4;
      }
LABEL_10:
      (*(void (**)(char *, uint64_t))(v64 + 8))(v73, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v65, a5);
      v90[0] = v98[0];
      *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
      long long v85 = v93;
      long long v86 = v94;
      long long v88 = v96;
      long long v89 = v97;
      long long v87 = v95;
      long long v83 = v91;
      long long v84 = v92;
      sub_24A4A2BC4((uint64_t)&v83);
      swift_release();
    }
    else
    {
      char v41 = v34;
      MEMORY[0x270FA5388](v34);
      *(&v58 - 8) = a5;
      *(&v58 - 7) = a6;
      *(&v58 - 6) = v61;
      *(&v58 - 5) = v33;
      uint64_t v42 = v80;
      *(&v58 - 4) = v79;
      *(&v58 - 3) = v42;
      *(&v58 - 2) = v78;
      if ((sub_24A5BB890() & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v59 + 8))(v65, a5);
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        long long v85 = v93;
        long long v86 = v94;
        long long v88 = v96;
        long long v89 = v97;
        long long v87 = v95;
        long long v83 = v91;
        long long v84 = v92;
        sub_24A4A2BC4((uint64_t)&v83);
        goto LABEL_4;
      }
      uint64_t v43 = (void (**)(char *, uint64_t))(v59 + 8);
      if (v41)
      {
        uint64_t v53 = v62;
        uint64_t v52 = (uint64_t)v63;
        while (1)
        {
          TreeSet.Iterator.next()(v66, v52);
          if (v75((char *)v52, 1, a5) == 1) {
            break;
          }
          v70(v53, (char *)v52, a5);
          char v54 = sub_24A5BB920();
          unint64_t v55 = *v43;
          (*v43)(v53, a5);
          if ((v54 & 1) == 0)
          {
            v55(v65, a5);
            long long v44 = v96;
            long long v89 = v97;
            v90[0] = v98[0];
            *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
            long long v85 = v93;
            long long v86 = v94;
            goto LABEL_25;
          }
        }
        (*v43)(v65, a5);
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        long long v85 = v93;
        long long v86 = v94;
        long long v88 = v96;
        long long v89 = v97;
        long long v87 = v95;
        long long v83 = v91;
        long long v84 = v92;
        sub_24A4A2BC4((uint64_t)&v83);
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v52, v68);
        goto LABEL_4;
      }
      (*v43)(v65, a5);
      long long v89 = v97;
      v90[0] = v98[0];
      *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
      long long v85 = v93;
      long long v86 = v94;
      long long v44 = v96;
LABEL_25:
      long long v87 = v95;
      long long v88 = v44;
      long long v83 = v91;
      long long v84 = v92;
      sub_24A4A2BC4((uint64_t)&v83);
    }
    char v32 = 1;
    return v32 & 1;
  }
  v90[0] = v98[0];
  *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
  long long v85 = v93;
  long long v86 = v94;
  long long v88 = v96;
  long long v89 = v97;
  long long v87 = v95;
  long long v83 = v91;
  long long v84 = v92;
  sub_24A4A2BC4((uint64_t)&v83);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v19, v68);
LABEL_4:
  char v32 = 0;
  return v32 & 1;
}

BOOL sub_24A562794(uint64_t a1)
{
  return TreeSet.contains(_:)(a1, v1[6], v1[7], v1[8], v1[2], v1[4]);
}

uint64_t Deque._storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *long long v1 = a1;
  return result;
}

uint64_t (*Deque._storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t type metadata accessor for Deque()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _HashNode.build(level:item1:_:item2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v29 = a4;
  unint64_t v30 = a7;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  int v28 = a1;
  uint64_t v31 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = &v27[-v19];
  uint64_t v21 = &v27[*(int *)(v18 + 48) - v19];
  uint64_t v22 = *(void *)(a8 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v22 + 32))(&v27[-v19], a2, a8);
  uint64_t v23 = *(void *)(a9 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v23 + 32))(v21, a3, a9);
  uint64_t v24 = (uint64_t)&v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 16))(v17, v20, a8);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v23 + 16))(v24, v21, a9);
  if (v29 == v30) {
    uint64_t v25 = static _HashNode._collisionNode(_:_:_:)(v29, (uint64_t)v17, v24, v32, v33, a8, a9, v31);
  }
  else {
    uint64_t v25 = static _HashNode._build(level:item1:_:item2:_:)(v28, (uint64_t)v17, v24, v29, v32, v33, v30, a8, a9, v31);
  }
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v20, TupleTypeMetadata2);
  return v25;
}

uint64_t static _HashNode.build(level:child1:_:child2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = sub_24A564EBC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  swift_release();
  return v11;
}

uint64_t static _HashNode.build(level:item1:_:child2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = (a4 >> a1) & 0x1F;
  uint64_t v16 = (a7 >> a1) & 0x1F;
  if (v15 == v16)
  {
    uint64_t v19 = (a1 + 5);
    swift_retain();
    uint64_t v26 = a8;
    uint64_t v27 = a10;
    uint64_t v28 = a11;
    uint64_t v29 = static _HashNode.build(level:item1:_:child2:_:)(v19, a2, a3, a4, a5, a6, a7, a8, a10, a11);
    uint64_t v30 = v20;
    uint64_t v22 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v21, v29, 0, 1 << v15, v20, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A5653C4, (uint64_t)v25, a8, a10, MEMORY[0x263F8EE60] + 8, a11);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v22 = sub_24A56504C(a2, a3, v15, a5, a6, v16, a8, a10, a9, a11);
    swift_release();
  }
  return v22;
}

uint64_t sub_24A562CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a3 + *(void *)(*(void *)(a5 - 8) + 72) * a1, a2, a5);
}

uint64_t static _HashNode._collisionNode(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a8;
  uint64_t v31 = a5;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v32 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v19 = (char *)&v27 + *(int *)(v16 + 48) - v17;
  uint64_t v20 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))((char *)&v27 - v17, a2, a6);
  uint64_t v21 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v19, v28, a7);
  uint64_t v22 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v15, v18, a6);
  uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 16))(v22, v19, a7);
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v36 = v30;
  uint64_t v37 = v15;
  uint64_t v38 = v29;
  uint64_t v39 = v31;
  uint64_t v24 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(v23, 2, v32, 0, (uint64_t (*)(uint64_t))sub_24A5650D0, (uint64_t)v33, a6, a7, MEMORY[0x263F8EE60] + 8, v30);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v18, TupleTypeMetadata2);
  v25(v15, TupleTypeMetadata2);
  return v24;
}

uint64_t static _HashNode._emptyNode()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_26979ACF0 != -1) {
    swift_once();
  }
  uint64_t v6 = _HashNode.init(storage:count:)(_emptySingleton, 0, a1, a2, a3);
  swift_retain();
  return v6;
}

uint64_t static _HashNode._regularNode(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a3;
  uint64_t v28 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v18 = (char *)&v27 + *(int *)(v15 + 48) - v16;
  uint64_t v19 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))((char *)&v27 - v16, a1, a4);
  uint64_t v20 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, a2, a5);
  LODWORD(v27) = 1 << v27;
  uint64_t v21 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v14, v17, a4);
  uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 16))(v21, v18, a5);
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = v28;
  uint64_t v33 = v14;
  uint64_t v24 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v23, v22, v27, 0, 1, 0, sub_24A5650E0, (uint64_t)v29, a4, a5, MEMORY[0x263F8EE60] + 8, v28);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v17, TupleTypeMetadata2);
  v25(v14, TupleTypeMetadata2);
  return v24;
}

uint64_t static _HashNode._collisionNode(_:_:_:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a5;
  uint64_t v44 = a8;
  uint64_t v42 = a4;
  uint64_t v40 = a3;
  uint64_t v46 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v45 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v41 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)&v38 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v47 = (char *)&v38 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v39 = (char *)&v38 + *(int *)(v18 + 48) - v19;
  uint64_t v20 = v39;
  char v49 = (char *)&v38 - v19;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = *(void (**)(void))(v21 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v22)((char *)&v38 - v19, a2, a6);
  uint64_t v23 = *(void *)(a7 - 8);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v24(v20, v40, a7);
  uint64_t v40 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v25 = v40;
  v22();
  v24(v25, v43, a7);
  uint64_t v26 = &v48[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v27 = *(void (**)(void))(v21 + 16);
  v27();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v28(v26, v39, a7);
  uint64_t v29 = v41;
  uint64_t v30 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v31 = v47;
  ((void (*)(char *, char *, uint64_t))v27)(v41, v47, a6);
  uint64_t v32 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v30, v40, a7);
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v33 = v48;
  uint64_t v53 = v44;
  char v54 = v48;
  uint64_t v34 = v29;
  unint64_t v55 = v29;
  uint64_t v35 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(v32, 2, v46, 0, (uint64_t (*)(uint64_t))sub_24A5650EC, (uint64_t)v50, a6, a7, MEMORY[0x263F8EE60] + 8, v44);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v45 + 8);
  v36(v31, TupleTypeMetadata2);
  v36(v49, TupleTypeMetadata2);
  v36(v33, TupleTypeMetadata2);
  v36(v34, TupleTypeMetadata2);
  return v35;
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v43 = a3;
  unsigned int v44 = a6;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v37 = a2;
  uint64_t v41 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v42 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v38 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v45 = (uint64_t)&v35 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  unint64_t v47 = (char *)&v35 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v36 = (char *)&v35 + *(int *)(v19 + 48) - v20;
  uint64_t v21 = v36;
  uint64_t v46 = (char *)&v35 - v20;
  uint64_t v22 = *(void *)(a7 - 8);
  uint64_t v23 = *(void (**)(void))(v22 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v23)((char *)&v35 - v20, a1, a7);
  uint64_t v24 = *(void *)(a8 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
  v25(v21, v37, a8);
  uint64_t v26 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
  v23();
  v25(v26, v40, a8);
  uint64_t v40 = v45 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v27 = v40;
  uint64_t v28 = *(void (**)(void))(v22 + 16);
  v28();
  uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 16);
  v29(v27, v36, a8);
  uint64_t v30 = v38;
  uint64_t v31 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v28)(v38, v47, a7);
  v29((uint64_t)v31, v26, a8);
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v51 = v41;
  uint64_t v52 = v30;
  uint64_t v32 = static _HashNode._regularNode(_:_:_:_:)(v45, v40, v43, (uint64_t)sub_24A5654C0, (uint64_t)v48, v44, a7, a8, v41);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v42 + 8);
  v33(v47, TupleTypeMetadata2);
  v33(v46, TupleTypeMetadata2);
  v33(v30, TupleTypeMetadata2);
  return v32;
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = sub_24A5650FC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  return v9;
}

uint64_t static _HashNode._regularNode(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x8_t a7)
{
  uint64_t v7 = sub_24A564DC4(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v7;
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10)
{
  uint64_t v10 = sub_24A564E34(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  swift_release();
  return v10;
}

{
  uint64_t v10;

  uint64_t v10 = sub_24A56504C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  return v10;
}

uint64_t sub_24A563A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a4;
  uint64_t v42 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = *(int *)(v13 + 48);
  uint64_t v17 = (uint64_t (*)(uint64_t, char *, uint64_t))((char *)&v34 + v16 - v14);
  uint64_t v35 = a5;
  uint64_t v36 = v17;
  uint64_t v18 = a3 + v16;
  uint64_t v19 = *(void *)(a5 - 8);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v40((char *)&v34 - v14, a3, a5);
  uint64_t v20 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v21 + 16);
  uint64_t v22 = v18;
  uint64_t v23 = v20;
  uint64_t v34 = v20;
  v39((char *)v17, v22);
  uint64_t v24 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v38(v12, v15, a5);
  uint64_t v37 = *(void (**)(char *, uint64_t (*)(uint64_t, char *, uint64_t), uint64_t))(v21 + 32);
  v37(v24, v36, v23);
  uint64_t v25 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v43 + 32);
  v43 += 32;
  uint64_t v36 = v25;
  v25(v42 + *(void *)(v43 + 40), v12, TupleTypeMetadata2);
  uint64_t v26 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v27 = &v15[v26];
  uint64_t v28 = v41 + v26;
  uint64_t v29 = v35;
  ((void (*)(char *))v40)(v15);
  uint64_t v30 = v28;
  uint64_t v31 = v34;
  ((void (*)(char *, uint64_t, uint64_t))v39)(v27, v30, v34);
  uint64_t v32 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v38(v12, v15, v29);
  v37(v32, (uint64_t (*)(uint64_t, char *, uint64_t))v27, v31);
  return v36(v42, v12, TupleTypeMetadata2);
}

uint64_t sub_24A563D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v26[2] = a5;
  uint64_t v27 = a4;
  v26[0] = a1;
  v26[1] = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v26 - v16;
  uint64_t v18 = *(int *)(v15 + 48);
  uint64_t v19 = (char *)v26 + v18 - v16;
  uint64_t v20 = a3 + v18;
  uint64_t v21 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)v26 - v16, a3, a6);
  uint64_t v22 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v19, v20, a7);
  uint64_t v23 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v14, v17, a6);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v23, v19, a7);
  (*(void (**)(void, char *, uint64_t))(v11 + 32))(v26[0] + *(void *)(v11 + 72), v14, TupleTypeMetadata2);
  uint64_t v24 = sub_24A5BB540();
  return v27(v24);
}

uint64_t sub_24A563F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v24 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = *(int *)(v14 + 48);
  uint64_t v18 = (char *)&v24 + v17 - v15;
  uint64_t v19 = a5 + v17;
  uint64_t v20 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)&v24 - v15, a5, a6);
  uint64_t v21 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v19, a7);
  uint64_t v22 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v13, v16, a6);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v22, v18, a7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v13, TupleTypeMetadata2);
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  char v11 = a3;
  uint64_t v34 = a3;
  uint64_t v36 = a6;
  uint64_t v37 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = (char *)&v33 + *(int *)(v18 + 48) - v19;
  uint64_t v22 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))((char *)&v33 - v19, a1, a7);
  uint64_t v23 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v21, a2, a8);
  int v24 = 1 << v11;
  char v25 = v36;
  __int32 v35 = (1 << v36) | v24;
  uint64_t v26 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v17, v20, a7);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v21, a8);
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v27 = v37;
  uint64_t v44 = v37;
  char v45 = v34;
  char v46 = v25;
  unint64_t v47 = v17;
  uint64_t v48 = v39;
  uint64_t v49 = v40;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979C1C8);
  uint64_t v30 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v29, (uint64_t)&v50, v35, 0, 2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A56536C, (uint64_t)v41, a7, a8, v28, v27);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
  v31(v20, TupleTypeMetadata2);
  v31(v17, TupleTypeMetadata2);
  return v30;
}

uint64_t sub_24A5643FC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, unsigned __int8 a3@<W4>, int a4@<W5>, uint64_t a5@<X6>, uint64_t (*a6)(uint64_t)@<X7>, BOOL *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v40 = a7;
  uint64_t v41 = a6;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  unsigned int v35 = a3;
  int v36 = a4;
  uint64_t v39 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = *(int *)(v16 + 48);
  uint64_t v20 = (char *)&v35 + v19 - v17;
  uint64_t v21 = a5 + v19;
  uint64_t v22 = *(void *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)&v35 - v17, a5, a9);
  uint64_t v23 = *(void *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v20, v21, a10);
  int v24 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v15, v18, a9);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v24, v20, a10);
  BOOL v25 = v35 < v36;
  BOOL v26 = v35 >= v36;
  int8x8_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  uint64_t v28 = v12 + 32;
  uint64_t v27 = v29;
  if (v35 >= v36) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v28 + 40);
  }
  if (v35 >= v36) {
    uint64_t v31 = *(void *)(v28 + 40);
  }
  else {
    uint64_t v31 = 0;
  }
  v27(v37 + v30, v15, TupleTypeMetadata2);
  uint64_t v32 = sub_24A5BB540();
  uint64_t result = v41(v32 + v31);
  uint64_t v34 = v40;
  *uint64_t v40 = v26;
  v34[1] = v25;
  return result;
}

uint64_t sub_24A564658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(int *)(v11 + 48);
  uint64_t v15 = (char *)&v21 + v14 - v12;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v21 - v12, a2, a3);
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, v16, a4);
  uint64_t v19 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v10, v13, a3);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v19, v15, a4);
  return sub_24A544CAC((uint64_t)v10, v22, TupleTypeMetadata2);
}

uint64_t sub_24A564874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_getTupleTypeMetadata2();
  uint64_t v12 = sub_24A5BB540();
  a5(v12);
  v15[0] = a7;
  v15[1] = a8;
  uint64_t v13 = type metadata accessor for _HashNode();
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, v15, v13);
  return swift_retain();
}

uint64_t sub_24A564964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v11 = type metadata accessor for _HashNode();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v12 + 32);
  uint64_t v14 = v12 + 32;
  v13(a1, &v16, v11);
  uint64_t v16 = a7;
  uint64_t v17 = a8;
  v13(a1 + *(void *)(v14 + 40), &v16, v11);
  swift_retain();
  return swift_retain();
}

uint64_t static _HashNode._build(level:item1:_:item2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v44 = a7;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v39 = a3;
  uint64_t v42 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v37 - v19;
  uint64_t v21 = v18;
  uint64_t v22 = (char *)&v37 + *(int *)(v18 + 48) - v19;
  uint64_t v23 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))((char *)&v37 - v19, a2, a8);
  uint64_t v24 = *(void *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v22, v39, a9);
  unint64_t v38 = a4;
  uint64_t v25 = (a4 >> a1) & 0x1F;
  uint64_t v26 = (v44 >> a1) & 0x1F;
  LODWORD(v39) = v25;
  if (v25 == v26)
  {
    uint64_t v27 = (a1 + 5);
    uint64_t v37 = v21;
    uint64_t v28 = &v17[*(int *)(v21 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v20, a8);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v22, a9);
    uint64_t v29 = v42;
    uint64_t v30 = static _HashNode._build(level:item1:_:item2:_:)(v27, v17, v28, v38, v40, v41, v44, a8, a9, v42);
    uint64_t v46 = a8;
    uint64_t v47 = a9;
    uint64_t v48 = v29;
    uint64_t v49 = v30;
    uint64_t v50 = v31;
    uint64_t v33 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v32, v30, 0, 1 << v39, v31, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A5653C4, (uint64_t)v45, a8, a9, MEMORY[0x263F8EE60] + 8, v29);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v37);
    swift_release();
  }
  else
  {
    uint64_t v34 = v21;
    uint64_t v35 = (uint64_t)&v17[*(int *)(v21 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v20, a8);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v35, v22, a9);
    uint64_t v33 = static _HashNode._regularNode(_:_:_:_:)((uint64_t)v17, v35, v39, v40, v41, v26, a8, a9, v42);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v34);
  }
  return v33;
}

uint64_t sub_24A564DC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x8_t a7)
{
  uint64_t v9 = a4;
  uint64_t v10 = a5;
  uint64_t v11 = a6;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(a7, a1, 0, 1 << a3, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A5653C4, (uint64_t)v8, a4, a5, MEMORY[0x263F8EE60] + 8, a6);
}

uint64_t sub_24A564E34(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10)
{
  uint64_t v12 = a7;
  uint64_t v13 = a8;
  uint64_t v14 = a10;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(a9, a1, 0, (1 << a6) | (1 << a3), a5 + a2, 0, sub_24A565468, (uint64_t)v11, a7, a8, MEMORY[0x263F8EE60] + 8, a10);
}

uint64_t sub_24A564EBC(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = (a4 >> a1) & 0x1F;
  uint64_t v16 = (a7 >> a1) & 0x1F;
  if (v15 == v16)
  {
    uint64_t v19 = (a1 + 5);
    swift_retain();
    swift_retain();
    uint64_t v20 = sub_24A564EBC(v19, a2, a3, a4, a5, a6, a7, a8, a10, a11);
    uint64_t v22 = v21;
    swift_release();
    uint64_t v23 = swift_release();
    uint64_t v29 = a8;
    uint64_t v30 = a10;
    uint64_t v31 = a11;
    uint64_t v32 = v20;
    uint64_t v33 = v22;
    uint64_t v25 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v24, v23, 0, 1 << v15, v22, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A5653C4, (uint64_t)v28, a8, a10, MEMORY[0x263F8EE60] + 8, a11);
    swift_release();
    return v25;
  }
  else
  {
    return sub_24A564E34(a2, a3, v15, a5, a6, v16, a8, a10, a9, a11);
  }
}

uint64_t sub_24A56504C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10)
{
  uint64_t v12 = a7;
  uint64_t v13 = a8;
  uint64_t v14 = a10;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(a9, a1, 1 << a3, 1 << a6, a5 + 1, 0, sub_24A5653AC, (uint64_t)v11, a7, a8, MEMORY[0x263F8EE60] + 8, a10);
}

uint64_t sub_24A5650D0(uint64_t a1, uint64_t a2)
{
  return sub_24A563D0C(a1, a2, *(void *)(v2 + 40), *(uint64_t (**)(uint64_t))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_24A5650E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A563F34(a1, a2, a3, a4, v4[5], v4[2], v4[3]);
}

uint64_t sub_24A5650EC(uint64_t a1, uint64_t a2)
{
  return sub_24A563A38(a1, a2, v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_24A5650FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v33 = a6;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  int v30 = a3;
  uint64_t v28 = a2;
  uint64_t v29 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = (char *)&v28 + *(int *)(v17 + 48) - v18;
  uint64_t v21 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))((char *)&v28 - v18, a1, a7);
  uint64_t v22 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v20, v28, a8);
  uint64_t v23 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v16, v19, a7);
  *(double *)&int8x8_t v24 = (*(double (**)(char *, char *, uint64_t))(v22 + 16))(v23, v20, a8);
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v37 = v29;
  unint64_t v38 = v16;
  uint64_t v25 = sub_24A56504C((uint64_t)sub_24A565448, (uint64_t)v34, v30, v31, v32, v33, a7, a8, v24, v29);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v19, TupleTypeMetadata2);
  v26(v16, TupleTypeMetadata2);
  return v25;
}

uint64_t sub_24A56536C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, BOOL *a3@<X8>)
{
  return sub_24A5643FC(a1, a2, *(unsigned char *)(v3 + 40), *(unsigned __int8 *)(v3 + 41), *(void *)(v3 + 48), *(uint64_t (**)(uint64_t))(v3 + 56), a3, *(void *)(v3 + 64), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_24A5653AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A565480(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))sub_24A564874);
}

uint64_t sub_24A5653C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  v6[0] = *(void *)(v1 + 40);
  v6[1] = v3;
  uint64_t v4 = type metadata accessor for _HashNode();
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, v6, v4);
  return swift_retain();
}

uint64_t sub_24A565448(uint64_t a1)
{
  return sub_24A564658(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_24A565468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A565480(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))sub_24A564964);
}

uint64_t sub_24A565480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a5(a1, a2, a3, a4, v5[5], v5[6], v5[7], v5[8], v5[2], v5[3], v5[4]);
}

uint64_t sub_24A5654C8(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = sub_24A5BB710();
    if (v7 < 0) {
      __break(1u);
    }
    uint64_t v4 = v7;
    if (v7) {
      goto LABEL_6;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v4 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v4)
    {
LABEL_6:
      unint64_t v5 = (unint64_t)(v4 + 63) >> 6;
      uint64_t v6 = sub_24A5BB990();
      *(void *)(v6 + 16) = v5;
      bzero((void *)(v6 + 32), 8 * v5);
      goto LABEL_11;
    }
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v5 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_11:
  void v10[2] = v4;
  uint64_t v11 = v4 - 1;
  v10[0] = v6 + 32;
  v10[1] = v5;
  char v8 = sub_24A5656B0(v10, a1, a2, &v11);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

void sub_24A5655C4(unsigned __int8 *a1, uint64_t a2)
{
  if (a2 < 0)
  {
LABEL_14:
    __break(1u);
  }
  else if (a2)
  {
    unint64_t v4 = (unint64_t)(a2 + 63) >> 6;
    uint64_t v5 = sub_24A5BB990();
    *(void *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), 8 * v4);
    if (a1)
    {
      for (unint64_t i = a2 - 1; i != -1; --i)
      {
        int v7 = *a1;
        if (v7 != 48)
        {
          if (v7 != 49)
          {
            swift_bridgeObjectRelease();
            return;
          }
          if ((i & 0x8000000000000000) != 0)
          {
            __break(1u);
            goto LABEL_14;
          }
          *(void *)(v5 + 32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
        }
        ++a1;
      }
    }
  }
}

unint64_t sub_24A5656B0(void *a1, unint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v18 = a1;
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v8 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v15 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v10 = 15;
  while (1)
  {
    unint64_t v11 = v10 & 0xC;
    unint64_t result = v10;
    if (v11 == v9) {
      unint64_t result = sub_24A4DFD84(v10, a2, a3);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_24A5BB760();
      char v14 = result;
      if (v11 != v9) {
        goto LABEL_19;
      }
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v17[0] = a2;
      v17[1] = v16;
      char v14 = *((unsigned char *)v17 + v13);
      if (v11 != v9) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t result = v15;
      if ((a2 & 0x1000000000000000) == 0) {
        unint64_t result = sub_24A5BC120();
      }
      char v14 = *(unsigned char *)(result + v13);
      if (v11 != v9)
      {
LABEL_19:
        if ((a3 & 0x1000000000000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_23;
      }
    }
    unint64_t result = sub_24A4DFD84(v10, a2, a3);
    unint64_t v10 = result;
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_20:
      unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_25;
    }
LABEL_23:
    if (v4 <= v10 >> 16) {
      goto LABEL_33;
    }
    unint64_t result = sub_24A5BB720();
    unint64_t v10 = result;
LABEL_25:
    if (v14 != 48)
    {
      if (v14 != 49) {
        return 0;
      }
      if ((*a4 & 0x8000000000000000) != 0) {
        goto LABEL_34;
      }
      *(void *)(*v18 + ((*a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *a4;
    }
    --*a4;
    if (4 * v4 == v10 >> 14) {
      return 1;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_24A5658A0@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _s19CollectionsInternal8BitArrayVyACSgSScfC_0(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _s19CollectionsInternal8BitArrayVyACSgSScfC_0(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    return sub_24A5654C8(a1, a2);
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v12[0] = a1;
    v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v6 = (unsigned __int8 *)v12;
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v4 = sub_24A5BC120();
      uint64_t v5 = v11;
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = (unsigned __int8 *)v4;
    uint64_t v7 = v5;
  }
  sub_24A5655C4(v6, v7);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9 == 1) {
    return sub_24A5654C8(a1, a2);
  }
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t sub_24A5659A4()
{
  unint64_t result = qword_26979C1D0;
  if (!qword_26979C1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1D0);
  }
  return result;
}

Swift::Int OrderedSet._extractSubset(using:count:extraCapacity:)(int8x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(a8 - 8);
  Swift::Int result = MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v19)
  {
    if (a1 && a2)
    {
      a3 = 0;
      uint64_t v20 = 8 * a2;
      uint64_t v21 = a1;
      while (1)
      {
        uint8x8_t v22 = (uint8x8_t)vcnt_s8(*v21);
        v22.i16[0] = vaddlv_u8(v22);
        BOOL v23 = __OFADD__(a3, v22.u32[0]);
        a3 += v22.u32[0];
        if (v23) {
          break;
        }
        ++v21;
        v20 -= 8;
        if (!v20) {
          goto LABEL_7;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    goto LABEL_13;
  }
LABEL_7:
  if (!a3)
  {
LABEL_13:
    uint64_t v25 = OrderedSet.init(minimumCapacity:persistent:)(a5, 0);
    swift_release();
    swift_release();
    return v25;
  }
  if (a3 != _s19CollectionsInternal4HeapV5countSivg_0())
  {
    Swift::Int result = a3 + a5;
    if (!__OFADD__(a3, a5))
    {
      v33[1] = a6;
      Swift::Int result = OrderedSet.init(minimumCapacity:persistent:)(result, 0);
      Swift::Int v34 = result;
      uint64_t v35 = v26;
      if (a2 < 1) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = (uint64_t)*a1;
      }
      uint64_t v28 = 0;
      for (i = (uint64_t (**)(char *, uint64_t))(v15 + 8); ; Swift::Int result = (*i)(v18, a8))
      {
        if (v27)
        {
          if (v28 << 6 < 0) {
            goto LABEL_38;
          }
          v27 &= v27 - 1;
        }
        else
        {
          uint64_t v31 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_39;
          }
          if (v31 >= a2)
          {
LABEL_33:
            swift_release();
            swift_release();
            return v34;
          }
          int8x8_t v32 = a1[v31];
          if (!*(void *)&v32)
          {
            while (1)
            {
              uint64_t v28 = v31 + 1;
              if (__OFADD__(v31, 1)) {
                goto LABEL_37;
              }
              if (v28 >= a2) {
                goto LABEL_33;
              }
              int8x8_t v32 = a1[v28];
              ++v31;
              if (v32) {
                goto LABEL_20;
              }
            }
          }
          ++v28;
LABEL_20:
          if (v28 << 6 < 0) {
            goto LABEL_40;
          }
          uint64_t v27 = (*(void *)&v32 - 1) & *(void *)&v32;
        }
        sub_24A5BC260();
        uint64_t v30 = type metadata accessor for OrderedSet();
        OrderedSet._appendNew(_:)((uint64_t)v18, v30);
      }
    }
    goto LABEL_42;
  }
  uint64_t v24 = OrderedSet._capacity.getter(a6);
  Swift::Int result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (__OFSUB__(v24, result))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v24 - result >= a5) {
    return a6;
  }
  Swift::Int v34 = a6;
  uint64_t v35 = a7;
  if (!__OFADD__(a3, a5))
  {
    type metadata accessor for OrderedSet();
    OrderedSet.reserveCapacity(_:)(a3 + a5);
    return v34;
  }
LABEL_43:
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedSet._regenerateHashTable()()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    Swift::Int v2 = *(void *)(v1 + 24) & 0x3FLL;
  }
  else
  {
    Swift::Int v2 = 0;
  }
  if (_s19CollectionsInternal4HeapV5countSivg_0() <= 15 && v2 == 0)
  {
    swift_release();
    *uint64_t v0 = 0;
  }
  else
  {
    int64_t v4 = _s19CollectionsInternal4HeapV5countSivg_0();
    Swift::Int v5 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v4);
    OrderedSet._regenerateHashTable(scale:reservedScale:)(v5, v2);
  }
}

Swift::Void __swiftcall OrderedSet._ensureUnique()()
{
  if (!*v0 || (swift_isUniquelyReferenced_native() & 1) != 0) {
    return;
  }
  uint64_t v1 = (void *)*v0;
  if (!*v0)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v2 = v1[2];
  uint64_t v3 = (v2 & 0x3F) << v2;
  BOOL v4 = __OFADD__(v3, 64);
  uint64_t v5 = v3 + 64;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = v5 - 1;
  BOOL v6 = v5 < 1;
  uint64_t v8 = v5 + 62;
  if (!v6) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = v8 >> 6;
  type metadata accessor for _HashTable.Storage();
  unint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = v1[3];
  void v10[2] = v2;
  void v10[3] = v11;
  memcpy(v10 + 4, v1 + 4, 8 * v9);
  swift_release();
  *uint64_t v0 = v10;
}

Swift::Void __swiftcall OrderedSet._regenerateExistingHashTable()()
{
  if (*v1)
  {
    uint64_t v2 = v0;
    OrderedSet._ensureUnique()();
    uint64_t v3 = *v1;
    if (*v1)
    {
      uint64_t v5 = *(void *)(v2 + 16);
      uint64_t v4 = *(void *)(v2 + 24);
      swift_retain();
      sub_24A5668E8((void *)(v3 + 16), v3 + 32, (uint64_t)v1, v5, v4);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t OrderedSet._table.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t OrderedSet._find_inlined(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979ACE8);
  sub_24A5BC1A0();
  return v1;
}

void OrderedSet._removeExistingMember(at:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 + 16);
  swift_retain();
  uint64_t v9 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  uint64_t v10 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v11 = *v3;
  uint64_t v12 = *(void *)(a3 + 24);
  if (v10 >= OrderedSet._minimumCapacity.getter(*v4))
  {
    if (!v11)
    {
LABEL_9:
      sub_24A5BC210();
      sub_24A5BC1E0();
      return;
    }
    OrderedSet._ensureUnique()();
    uint64_t v13 = *v4;
    if (*v4)
    {
      swift_retain();
      sub_24A566C28((void *)(v13 + 16), v13 + 32, a2, (uint64_t)v4, a1, v8, v12);
      swift_release();
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    return;
  }
  sub_24A5BC210();
  sub_24A5BC1E0();
  OrderedSet._regenerateHashTable()();
}

uint64_t OrderedSet._scale.getter(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    return *(void *)(v1 + 16) & 0x3FLL;
  }
  return result;
}

uint64_t OrderedSet._reservedScale.getter(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    return *(void *)(v1 + 24) & 0x3FLL;
  }
  return result;
}

Swift::Void __swiftcall OrderedSet._regenerateHashTable(scale:reservedScale:)(Swift::Int scale, Swift::Int reservedScale)
{
  uint64_t v4 = v2;
  uint64_t v10 = v3[1];
  if (reservedScale <= scale) {
    Swift::Int v6 = scale;
  }
  else {
    Swift::Int v6 = reservedScale;
  }
  uint64_t v7 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v10, v6, 0, reservedScale, v7, WitnessTable, *(void *)(v4 + 24));
  swift_release();
  *uint64_t v3 = v9;
}

uint64_t OrderedSet.elements.getter()
{
  return sub_24A5BBA00();
}

uint64_t OrderedSet._capacity.getter(uint64_t a1)
{
  if (!a1) {
    return 15;
  }
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *(void *)(a1 + 16) & 0x3FLL;
  if (v3 < 5) {
    return 15;
  }
  double v4 = (double)(1 << v3) * 0.75;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 < 9.22337204e18) {
    return (uint64_t)v4;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal10OrderedSetV10firstIndex2ofSiSgx_tF_0()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedSet.__storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*OrderedSet.__storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedSet._elements.getter()
{
  return swift_retain();
}

uint64_t OrderedSet._elements.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*OrderedSet._elements.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t (*OrderedSet._table.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return sub_24A5664A8;
}

uint64_t sub_24A5664A8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (void *)a1[1];
  if (a2)
  {
    swift_retain();
    swift_release();
    *unint64_t v3 = v2;
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    *unint64_t v3 = v2;
  }
  return result;
}

uint64_t OrderedSet.elements.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v11 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = sub_24A5BB9F0();
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = OrderedSet.init<A>(_:)((uint64_t)&v11, v5, v6, v7, WitnessTable);
  *uint64_t v2 = result;
  v2[1] = v10;
  return result;
}

void (*OrderedSet.elements.modify(void *a1, uint64_t a2))(uint64_t **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  _OWORD v5[2] = a2;
  _OWORD v5[3] = v2;
  v5[1] = *(void *)(v2 + 8);
  v5[4] = *(void *)(a2 + 16);
  sub_24A5BC210();
  swift_retain();
  swift_getWitnessTable();
  *uint64_t v5 = sub_24A5BBA00();
  sub_24A5BB970();
  uint64_t v6 = sub_24A5BC170();
  swift_release();
  *(void *)(v2 + 8) = v6;
  return sub_24A5666A4;
}

void sub_24A5666A4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_24A5666F4((uint64_t *)(*a1)[3], v1, v1[4], *(void *)(v1[2] + 24));
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t sub_24A5666F4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *a2;
  uint64_t v7 = sub_24A5BB9F0();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  *a1 = OrderedSet.init<A>(_:)((uint64_t)&v11, a3, v7, a4, WitnessTable);
  a1[1] = v9;
  swift_release();
  return swift_release();
}

uint64_t OrderedSet._minimumCapacity.getter(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)(result + 16);
    swift_beginAccess();
    unsigned int v3 = *(_DWORD *)(v1 + 16);
    swift_beginAccess();
    if (((*(_DWORD *)(v1 + 24) ^ v3) & 0x3FLL) != 0)
    {
      swift_beginAccess();
      uint64_t result = 0;
      unint64_t v4 = *v2 & 0x3FLL;
      if (v4 >= 5)
      {
        double v5 = (double)(1 << v4) * 0.25;
        if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
        {
          if (v5 > -9.22337204e18)
          {
            if (v5 < 9.22337204e18) {
              return (uint64_t)v5;
            }
            goto LABEL_12;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_12:
        __break(1u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OrderedSet._bias.getter(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    return *(uint64_t *)(v1 + 24) >> 6;
  }
  return result;
}

uint64_t sub_24A5668E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _HashTable.UnsafeHandle.clear()();
  uint64_t v12 = *(void *)(a3 + 8);
  uint64_t v9 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)((uint64_t)&v12, a1, a2, v9, WitnessTable, a5);
}

Swift::Bool __swiftcall OrderedSet._isUnique()()
{
  return swift_isUniquelyReferenced_native();
}

uint64_t OrderedSet._bucket(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v6 = (void *)(a2 + 16);
  uint64_t v7 = a2 + 32;
  swift_retain();
  sub_24A566A4C(v6, v7, a1, a4, &v9);
  swift_release();
  return v9;
}

void sub_24A566A4C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  unint64_t v38 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A5BC260();
  uint64_t v12 = sub_24A5BB370();
  uint64_t v13 = 1 << *a1;
  BOOL v14 = __OFSUB__(v13, 1);
  uint64_t v15 = v13 - 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = v15 & v12;
    uint64_t v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v12, a1, a2);
    uint64_t v19 = v18;
    uint64_t v20 = v9;
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, a4);
    uint64_t v31 = a1;
    uint64_t v32 = a2;
    uint64_t v33 = v16;
    uint64_t v34 = v17;
    uint64_t v35 = v19;
    uint64_t v36 = v22;
    BOOL v23 = v38;
    char v37 = 0;
    if (v17)
    {
      uint64_t v24 = -1 << *a1;
      unint64_t v25 = (v24 ^ ~v17) + ((uint64_t)a1[1] >> 6);
      if (v25 >= ~v24) {
        uint64_t v26 = ~v24;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v25 - v26 == a3)
      {
LABEL_13:
        *BOOL v23 = v16;
        return;
      }
      while (1)
      {
        _HashTable.BucketIterator.advance()();
        if (!v34) {
          break;
        }
        uint64_t v27 = -1 << *v31;
        unint64_t v28 = (v27 ^ ~v34) + ((uint64_t)v31[1] >> 6);
        if (v28 >= ~v27) {
          uint64_t v29 = ~v27;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v28 - v29 == a3)
        {
          uint64_t v16 = v33;
          goto LABEL_13;
        }
      }
    }
  }
  __break(1u);
}

void sub_24A566C28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v14[2] = a6;
  void v14[3] = a7;
  void v14[4] = a4;
  _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a3, (uint64_t (*)(unint64_t, void))sub_24A5671B0, (uint64_t)v14, a1, a2);
  uint64_t v16 = *(void *)(a4 + 8);
  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else if (a5 + 1 >= a5)
  {
    v15[0] = a5;
    v15[1] = a5 + 1;
    uint64_t v12 = sub_24A5BC210();
    uint64_t WitnessTable = swift_getWitnessTable();
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)((uint64_t)v15, (uint64_t)&v16, a1, a2, v12, WitnessTable, a7);
    return;
  }
  __break(1u);
}

uint64_t sub_24A566D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A5BC260();
  uint64_t v8 = sub_24A5BB370();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a4);
  return v8;
}

uint64_t OrderedSet.filter(_:)()
{
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = (unint64_t)(result + 63) >> 6;
    MEMORY[0x270FA5388](result);
    type metadata accessor for OrderedSet();
    uint64_t result = sub_24A580E98(v2, (void (*)(char **))sub_24A4B1054);
    if (v0) {
      return sub_24A4B1074(0, 0);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A566F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  v27[1] = a7;
  uint64_t v28 = a2;
  uint64_t v30 = a1;
  uint64_t v31 = a5;
  v27[0] = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  BOOL v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v15;
  sub_24A5BC210();
  swift_getWitnessTable();
  uint64_t result = sub_24A5BBAC0();
  unint64_t v17 = v32;
  uint64_t v18 = v33;
  uint64_t v29 = a8;
  if (v32 == v33)
  {
LABEL_2:
    uint64_t v19 = *(int8x8_t **)v30;
    uint64_t v20 = *(void *)(v30 + 8);
    Swift::Int v21 = sub_24A48AB90();
    uint64_t v22 = v28;
    swift_retain();
    swift_retain();
    uint64_t result = OrderedSet._extractSubset(using:count:extraCapacity:)(v19, v20, 0, 1, v21, v22, a3, a6);
    BOOL v23 = v29;
    *uint64_t v29 = result;
    v23[1] = v24;
  }
  else
  {
    if (v33 >= v32)
    {
      unint64_t v25 = (uint64_t (**)(char *, uint64_t))(v27[0] + 8);
      while ((uint64_t)v17 < v18)
      {
        sub_24A5BC260();
        char v26 = a4(v14);
        uint64_t result = (*v25)(v14, a6);
        if (v8) {
          return result;
        }
        if (v26)
        {
          if ((v17 & 0x8000000000000000) != 0) {
            goto LABEL_13;
          }
          *(void *)(*(void *)v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        }
        if (v18 == ++v17) {
          goto LABEL_2;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for OrderedSet()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A56718C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A566F3C(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), *(uint64_t (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_24A5671B0(uint64_t a1, uint64_t a2)
{
  return sub_24A566D28(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t _UnsafeBitSet._Word.init(upTo:)(unint64_t a1)
{
  if (a1 < 0x40) {
    return ~(-1 << a1);
  }
  else {
    return -1;
  }
}

uint64_t _UnsafeBitSet._Word.formIntersection(_:)(uint64_t result)
{
  *v1 &= result;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet._Word.contains(_:)(Swift::UInt a1)
{
  return (v1 >> a1) & 1;
}

uint64_t _UnsafeBitSet._Word.complement()(uint64_t a1)
{
  return ~a1;
}

uint64_t _UnsafeBitSet._Word.union(_:)(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t static _UnsafeBitSet._Word.capacity.getter()
{
  return 64;
}

BOOL _UnsafeBitSet._Word.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t _UnsafeBitSet._Word.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t _UnsafeBitSet._Word.symmetricDifference(_:)(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t static _UnsafeBitSet._Word.empty.getter()
{
  return 0;
}

Swift::UInt_optional __swiftcall _UnsafeBitSet._Word.next()()
{
  unint64_t v1 = *v0;
  if (*v0)
  {
    Swift::UInt v2 = __clz(__rbit64(v1));
    *uint64_t v0 = (v1 - 1) & v1;
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Swift::Bool v3 = v1 == 0;
  result.value = v2;
  result.is_nil = v3;
  return result;
}

uint64_t _UnsafeBitSet._Word.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

unint64_t _UnsafeBitSet._Word.shiftedDown(by:)(char a1, unint64_t a2)
{
  return a2 >> a1;
}

Swift::Bool __swiftcall _UnsafeBitSet._Word.insert(_:)(Swift::UInt a1)
{
  uint64_t v2 = 1 << a1;
  Swift::Bool result = (*v1 & (1 << a1)) == 0;
  *v1 |= v2;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet._Word.remove(_:)(Swift::UInt a1)
{
  uint64_t v2 = 1 << a1;
  Swift::Bool result = (*v1 & (1 << a1)) != 0;
  *v1 &= ~v2;
  return result;
}

unint64_t static _UnsafeBitSet._Word.wordCount(forBitCount:)(unint64_t result)
{
  if (result < 0xFFFFFFFFFFFFFFC0) {
    return (result + 63) >> 6;
  }
  __break(1u);
  return result;
}

uint64_t _UnsafeBitSet._Word.formUnion(_:)(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t _UnsafeBitSet._Word.init(from:to:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = -1;
  if (a2 >= 0x41)
  {
    uint64_t v3 = -1;
    goto LABEL_5;
  }
  if (a2 != 64)
  {
    uint64_t v3 = ~(-1 << a2);
LABEL_5:
    if (a1 > 0x40) {
      return v3 ^ v2;
    }
    goto LABEL_6;
  }
  uint64_t v3 = -1;
  if (a1 >= 0x41) {
    return v3 ^ v2;
  }
LABEL_6:
  if (a1 <= 0x3F) {
    uint64_t v2 = ~(-1 << a1);
  }
  return v3 ^ v2;
}

uint64_t _UnsafeBitSet._Word.formSymmetricDifference(_:)(uint64_t result)
{
  *v1 ^= result;
  return result;
}

Swift::Void __swiftcall _UnsafeBitSet._Word.formComplement()()
{
  *uint64_t v0 = ~*v0;
}

uint64_t _UnsafeBitSet._Word.subtract(_:)(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

BOOL static _UnsafeBitSet._Word.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL _UnsafeBitSet._Word.isFull.getter(uint64_t a1)
{
  return a1 == -1;
}

uint64_t _UnsafeBitSet._Word.value.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*_UnsafeBitSet._Word.value.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _UnsafeBitSet._Word.description.getter()
{
  return sub_24A5BB7F0();
}

uint64_t sub_24A5673D8()
{
  return sub_24A5BB7F0();
}

Swift::UInt sub_24A56741C(Swift::Int *a1, uint64_t a2)
{
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  Swift::Int v3 = *a1;
  if (*a1 < (unint64_t)v2.u32[0])
  {
    *a1 = 0;
    Swift::UInt_optional v6 = UInt._bit(ranked:)(v3);
    if (v6.is_nil)
    {
      __break(1u);
      return v6.value;
    }
    Swift::UInt value = v6.value;
  }
  else
  {
    Swift::UInt value = 0;
    *a1 -= v2.u32[0];
  }
  v6.Swift::UInt value = value;
  return v6.value;
}

uint64_t _UnsafeBitSet._Word.count.getter(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

Swift::UInt sub_24A567498(uint64_t *a1, uint64_t a2)
{
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  uint64_t v3 = *a1;
  if (*a1 < (unint64_t)v2.u32[0])
  {
    *a1 = 0;
    Swift::UInt_optional v6 = UInt._bit(ranked:)((unint64_t)v2.u32[0] + ~v3);
    if (v6.is_nil)
    {
      __break(1u);
      return v6.value;
    }
    Swift::UInt value = v6.value;
  }
  else
  {
    Swift::UInt value = 0;
    *a1 -= v2.u32[0];
  }
  v6.Swift::UInt value = value;
  return v6.value;
}

unint64_t _UnsafeBitSet._Word.firstMember.getter(unint64_t a1)
{
  return __clz(__rbit64(a1)) & 0x3F;
}

unint64_t _UnsafeBitSet._Word.lastMember.getter(unint64_t a1)
{
  unint64_t v1 = __clz(a1) ^ 0x3F;
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

Swift::Void __swiftcall _UnsafeBitSet._Word.update(_:to:)(Swift::UInt _, Swift::Bool to)
{
  uint64_t v3 = 1 << _;
  if (to) {
    uint64_t v4 = *v2 | v3;
  }
  else {
    uint64_t v4 = *v2 & ~v3;
  }
  *uint8x8_t v2 = v4;
}

Swift::Void __swiftcall _UnsafeBitSet._Word.insertAll(upTo:)(Swift::UInt upTo)
{
  *v1 |= ~(-1 << upTo);
}

Swift::Void __swiftcall _UnsafeBitSet._Word.removeAll(upTo:)(Swift::UInt upTo)
{
  *v1 &= -1 << upTo;
}

Swift::Void __swiftcall _UnsafeBitSet._Word.removeAll(through:)(Swift::UInt through)
{
  *v1 &= ((-1 << through) - 1) & (-1 << through);
}

Swift::Void __swiftcall _UnsafeBitSet._Word.removeAll(from:)(Swift::UInt from)
{
  *v1 &= ~(-1 << from);
}

uint64_t _UnsafeBitSet._Word.underestimatedCount.getter(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

void sub_24A5675E0(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_24A5675EC()
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t sub_24A567600()
{
  return sub_24A567984(*v0);
}

unint64_t *sub_24A567608(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return sub_24A5860BC(a1, a2, a3, *v3);
}

void sub_24A567610(uint64_t a1@<X8>)
{
  unint64_t v2 = *v1;
  if (*v1)
  {
    unint64_t v3 = __clz(__rbit64(v2));
    *uint8x8_t v1 = (v2 - 1) & v2;
  }
  else
  {
    unint64_t v3 = 0;
  }
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v2 == 0;
}

uint64_t _UnsafeBitSet._Word.hash(into:)()
{
  return sub_24A5BC630();
}

uint64_t _UnsafeBitSet._Word.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t _UnsafeBitSet._Word.shiftedUp(by:)(char a1, uint64_t a2)
{
  return a2 << a1;
}

unint64_t sub_24A5676C4()
{
  unint64_t result = qword_26979C1D8;
  if (!qword_26979C1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1D8);
  }
  return result;
}

unint64_t sub_24A56771C()
{
  unint64_t result = qword_26979C1E0;
  if (!qword_26979C1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitSet._Word()
{
  return &type metadata for _UnsafeBitSet._Word;
}

uint64_t sub_24A567780(uint64_t result, int8x8_t a2)
{
  if (result)
  {
    unsigned int v2 = result;
    a2.i32[0] = result;
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(a2);
    v3.i16[0] = vaddlv_u8(v3);
    uint64_t v4 = v3.u32[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979C1F0);
    uint64_t v5 = (void *)swift_allocObject();
    unint64_t result = _swift_stdlib_malloc_size(v5);
    uint64_t v6 = 0;
    uint64_t v7 = result - 32;
    if (result < 32) {
      uint64_t v7 = result - 25;
    }
    uint64_t v8 = v7 >> 3;
    _OWORD v5[2] = v4;
    _OWORD v5[3] = 2 * v8;
    uint64_t v9 = v5 + 4;
    uint64_t v10 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - v4;
    unint64_t v11 = v8 | 0x8000000000000000;
    do
    {
      if (!v2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (v11 == v6) {
        goto LABEL_31;
      }
      *((_DWORD *)v9 + 1) = v6;
      unsigned int v12 = (v2 - 1) & v2;
      *(unsigned char *)v9++ = __clz(__rbit32(v2));
      ++v6;
      unsigned int v2 = v12;
    }
    while (v4 != v6);
    if (!v12) {
      goto LABEL_26;
    }
    while (1)
    {
      if (!v10)
      {
        unint64_t v13 = v5[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v14;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_26979C1F0);
        uint64_t v16 = (void *)swift_allocObject();
        int64_t v17 = _swift_stdlib_malloc_size(v16);
        uint64_t v18 = v17 - 32;
        if (v17 < 32) {
          uint64_t v18 = v17 - 25;
        }
        uint64_t v19 = v18 >> 3;
        uint64_t v16[2] = v15;
        v16[3] = 2 * (v18 >> 3);
        unint64_t v20 = (unint64_t)(v16 + 4);
        uint64_t v21 = v5[3] >> 1;
        if (v5[2])
        {
          uint64_t v22 = v5 + 4;
          if (v16 != v5 || v20 >= (unint64_t)v22 + 8 * v21) {
            memmove(v16 + 4, v22, 8 * v21);
          }
          _OWORD v5[2] = 0;
        }
        uint64_t v9 = (void *)(v20 + 8 * v21);
        uint64_t v10 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        unint64_t result = swift_release();
        uint64_t v5 = v16;
      }
      BOOL v23 = __OFSUB__(v10--, 1);
      if (v23) {
        break;
      }
      *(unsigned char *)uint64_t v9 = __clz(__rbit32(v12));
      *((_DWORD *)v9++ + 1) = v4;
      LODWORD(v4) = v4 + 1;
      v12 &= v12 - 1;
      if (!v12) {
        goto LABEL_26;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  uint64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
LABEL_26:
  unint64_t v24 = v5[3];
  if (v24 < 2) {
    return (uint64_t)v5;
  }
  unint64_t v25 = v24 >> 1;
  BOOL v23 = __OFSUB__(v25, v10);
  uint64_t v26 = v25 - v10;
  if (!v23)
  {
    _OWORD v5[2] = v26;
    return (uint64_t)v5;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_24A567984(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)result);
    v2.i16[0] = vaddlv_u8(v2);
    uint64_t v3 = v2.u32[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979C1E8);
    uint64_t v4 = (void *)swift_allocObject();
    unint64_t result = _swift_stdlib_malloc_size(v4);
    uint64_t v5 = result - 32;
    if (result < 32) {
      uint64_t v5 = result - 25;
    }
    uint64_t v6 = v5 >> 3;
    unint64_t v4[2] = v3;
    _OWORD v4[3] = 2 * v6;
    uint64_t v7 = v4 + 4;
    uint64_t v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) - v3;
    unint64_t v9 = v6 | 0x8000000000000000;
    do
    {
      if (!v1)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v9) {
        goto LABEL_31;
      }
      unint64_t v10 = (v1 - 1) & v1;
      *v7++ = __clz(__rbit64(v1));
      --v9;
      unint64_t v1 = v10;
      --v3;
    }
    while (v3);
    if (!v10) {
      goto LABEL_26;
    }
    while (1)
    {
      if (!v8)
      {
        unint64_t v11 = v4[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_26979C1E8);
        int64_t v14 = (void *)swift_allocObject();
        int64_t v15 = _swift_stdlib_malloc_size(v14);
        uint64_t v16 = v15 - 32;
        if (v15 < 32) {
          uint64_t v16 = v15 - 25;
        }
        uint64_t v17 = v16 >> 3;
        void v14[2] = v13;
        void v14[3] = 2 * (v16 >> 3);
        unint64_t v18 = (unint64_t)(v14 + 4);
        uint64_t v19 = v4[3] >> 1;
        if (v4[2])
        {
          unint64_t v20 = v4 + 4;
          if (v14 != v4 || v18 >= (unint64_t)v20 + 8 * v19) {
            memmove(v14 + 4, v20, 8 * v19);
          }
          unint64_t v4[2] = 0;
        }
        uint64_t v7 = (void *)(v18 + 8 * v19);
        uint64_t v8 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        unint64_t result = swift_release();
        uint64_t v4 = v14;
      }
      BOOL v21 = __OFSUB__(v8--, 1);
      if (v21) {
        break;
      }
      *v7++ = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      if (!v10) {
        goto LABEL_26;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  uint64_t v8 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
LABEL_26:
  unint64_t v22 = v4[3];
  if (v22 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v23 = v22 >> 1;
  BOOL v21 = __OFSUB__(v23, v8);
  uint64_t v24 = v23 - v8;
  if (!v21)
  {
    unint64_t v4[2] = v24;
    return (uint64_t)v4;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t _HashLevel.descend()(int a1)
{
  return (a1 + 5);
}

uint64_t _HashLevel.shift.getter(uint64_t result)
{
  return result;
}

BOOL _HashLevel.isAtRoot.getter(char a1)
{
  return a1 == 0;
}

BOOL _HashLevel.isAtBottom.getter(unsigned __int8 a1)
{
  return a1 > 0x3Fu;
}

uint64_t static _HashLevel.top.getter()
{
  return 0;
}

uint64_t static _HashLevel.limit.getter()
{
  return 13;
}

BOOL static _HashLevel.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL static _HashLevel.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t _HashLevel.ascend()(int a1)
{
  return (a1 - 5);
}

uint64_t _HashLevel.depth.getter(unsigned __int8 a1)
{
  return (13108 * a1 + 52432) >> 16;
}

uint64_t _HashLevel._shift.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*_HashLevel._shift.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashLevel.init(depth:)(uint64_t a1)
{
  uint64_t v1 = (unsigned __int128)(a1 * (__int128)5) >> 64;
  uint64_t result = 5 * a1;
  if (v1 != result >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t static _HashLevel._step.getter()
{
  return 5;
}

unint64_t sub_24A567C44()
{
  unint64_t result = qword_26979C1F8;
  if (!qword_26979C1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C1F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashLevel()
{
  return &type metadata for _HashLevel;
}

Swift::Void __swiftcall BitArray.resizingShiftLeft(by:)(Swift::Int by)
{
  if (!by) {
    return;
  }
  uint64_t v5 = v1;
  if (by >= 1)
  {
    uint64_t v7 = *((void *)v1 + 1);
    unint64_t v8 = v7 + by;
    if (__CFADD__(v7, by))
    {
      __break(1u);
    }
    else if (v8 < 0xFFFFFFFFFFFFFFC0)
    {
      uint64_t v9 = ((v8 + 63) >> 6) - *(void *)(*(void *)v1 + 16);
      if (v9 >= 0)
      {
        sub_24A4D5F98(v9, 0);
        *((void *)v1 + 1) = v8;
        uint64_t v1 = *(char **)v1;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v5 = v1;
        if (isUniquelyReferenced_nonNull_native)
        {
LABEL_7:
          uint64_t v11 = *((void *)v1 + 2);
          int64_t v15 = v1 + 32;
          uint64_t v16 = v11;
          unint64_t v17 = v8;
          sub_24A567FEC((uint64_t *)&v15, by);
          *uint64_t v5 = v1;
          return;
        }
LABEL_20:
        uint64_t v1 = sub_24A499D60((uint64_t)v1);
        *uint64_t v5 = v1;
        goto LABEL_7;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  int64_t v12 = -by;
  if (__OFSUB__(0, by))
  {
    __break(1u);
  }
  else
  {
    int64_t v2 = *((void *)v1 + 1);
    if ((v2 & 0x8000000000000000) == 0)
    {
      uint64_t v4 = *(char **)v1;
      uint64_t v3 = v2 + by;
      if (v2 <= v12)
      {
        swift_bridgeObjectRelease();
        *(void *)uint64_t v1 = MEMORY[0x263F8EE78];
        *((void *)v1 + 1) = 0;
        return;
      }
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v1 = v4;
      if (v13) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_23:
  uint64_t v4 = sub_24A499D60((uint64_t)v4);
  *(void *)uint64_t v1 = v4;
LABEL_12:
  uint64_t v14 = *((void *)v4 + 2);
  int64_t v15 = v4 + 32;
  uint64_t v16 = v14;
  unint64_t v17 = v2;
  sub_24A5B7EFC(v12, v2, (uint64_t)(v4 + 32), v14, 0);
  *(void *)uint64_t v1 = v4;
  sub_24A4E5C78(v3);
}

Swift::Void __swiftcall BitArray.resizingShiftRight(by:)(Swift::Int by)
{
  if (!by) {
    return;
  }
  int64_t v2 = v1;
  Swift::Int v3 = by;
  if (by < 1)
  {
    Swift::Int v3 = -by;
    if (__OFSUB__(0, by))
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v3 < 1)
    {
LABEL_16:
      uint64_t v1 = *(char **)v1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *int64_t v2 = v1;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_17:
        uint64_t v12 = *((void *)v1 + 2);
        unint64_t v13 = v2[1];
        uint64_t v14 = v1 + 32;
        uint64_t v15 = v12;
        unint64_t v16 = v13;
        sub_24A567FEC((uint64_t *)&v14, v3);
        *int64_t v2 = v1;
        return;
      }
LABEL_22:
      uint64_t v1 = sub_24A499D60((uint64_t)v1);
      *int64_t v2 = v1;
      goto LABEL_17;
    }
    uint64_t v8 = *((void *)v1 + 1);
    unint64_t v9 = v8 - by;
    if (__CFADD__(v8, v3))
    {
      __break(1u);
    }
    else if (v9 < 0xFFFFFFFFFFFFFFC0)
    {
      uint64_t v10 = ((v9 + 63) >> 6) - *(void *)(*(void *)v1 + 16);
      if (v10 >= 0)
      {
        sub_24A4D5F98(v10, 0);
        *((void *)v1 + 1) = v9;
        goto LABEL_16;
      }
LABEL_25:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v4 = *((void *)v1 + 1);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *(char **)v1;
  if (v4 <= by)
  {
    swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = MEMORY[0x263F8EE78];
    *((void *)v1 + 1) = 0;
  }
  else
  {
    char v6 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v1 = v5;
    if ((v6 & 1) == 0)
    {
      uint64_t v5 = sub_24A499D60((uint64_t)v5);
      *(void *)uint64_t v1 = v5;
    }
    uint64_t v7 = *((void *)v5 + 2);
    uint64_t v14 = v5 + 32;
    uint64_t v15 = v7;
    unint64_t v16 = v4;
    sub_24A5B7EFC(v3, v4, (uint64_t)(v5 + 32), v7, 0);
    *(void *)uint64_t v1 = v5;
    sub_24A4E5C78(v4 - v3);
  }
}

Swift::Void __swiftcall BitArray.maskingShiftLeft(by:)(Swift::Int by)
{
}

void sub_24A567FEC(uint64_t *a1, uint64_t a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = a1[2];
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2 >= a2) {
        int64_t v3 = a2;
      }
      else {
        int64_t v3 = a1[2];
      }
      if (v2 >= (unint64_t)a2) {
        sub_24A5B7EFC(0, v2 - v3, *a1, a1[1], v3);
      }
      unint64_t v4 = 0;
LABEL_17:
      sub_24A5AC5E8(v4, v3);
      return;
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v5 = -a2;
  if (__OFSUB__(0, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  int64_t v3 = a1[2];
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3 >= v5) {
      unint64_t v6 = -a2;
    }
    else {
      unint64_t v6 = a1[2];
    }
    if (v5 <= v3) {
      sub_24A5B7EFC(v6, a1[2], *a1, a1[1], 0);
    }
    unint64_t v4 = v3 - v6;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
}

Swift::Void __swiftcall BitArray.maskingShiftRight(by:)(Swift::Int by)
{
}

uint64_t sub_24A5680B8(uint64_t result, uint64_t (*a2)(void *, uint64_t))
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(char **)v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v2 = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v5 = sub_24A499D60((uint64_t)v5);
      *(void *)uint64_t v2 = v5;
    }
    uint64_t v7 = *((void *)v5 + 2);
    uint64_t v8 = *(void *)(v2 + 8);
    v9[0] = v5 + 32;
    v9[1] = v7;
    _OWORD v9[2] = v8;
    unint64_t result = a2(v9, v4);
    *(void *)uint64_t v2 = v5;
  }
  return result;
}

void sub_24A568148(uint64_t a1, uint64_t a2)
{
  if (a2 >= 1)
  {
    unint64_t v2 = *(void *)(a1 + 16);
    if ((v2 & 0x8000000000000000) == 0)
    {
      if ((uint64_t)v2 >= a2) {
        unint64_t v3 = a2;
      }
      else {
        unint64_t v3 = *(void *)(a1 + 16);
      }
      if (v2 >= a2) {
        sub_24A5B7EFC(v3, *(void *)(a1 + 16), *(void *)a1, *(void *)(a1 + 8), 0);
      }
      unint64_t v4 = v2 - v3;
LABEL_17:
      sub_24A5AC5E8(v4, v2);
      return;
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v5 = -a2;
  if (__OFSUB__(0, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v6 >= v5) {
      unint64_t v2 = -a2;
    }
    else {
      unint64_t v2 = *(void *)(a1 + 16);
    }
    if (v5 <= v6) {
      sub_24A5B7EFC(0, v6 - v2, *(void *)a1, *(void *)(a1 + 8), v2);
    }
    unint64_t v4 = 0;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_24A5681FC()
{
  return 0x7463694465657254;
}

uint64_t TreeDictionary.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = a2;
  void v10[2] = a3;
  uint64_t v7 = type metadata accessor for TreeDictionary();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v10, 0, 0, 0, a4, a5, v7, WitnessTable);
}

uint64_t sub_24A568368(void *a1, uint64_t a2)
{
  return sub_24A568464(a1, a2, (uint64_t (*)(void, void, void, void, void, void))TreeDictionary.description.getter);
}

uint64_t TreeDictionary.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[0] = a1;
  v14[1] = a2;
  void v14[2] = a3;
  uint64_t v7 = sub_24A5681FC();
  unint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for TreeDictionary();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v14, 1, v7, v9, a4, a5, v10, WitnessTable);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_24A56844C(void *a1, uint64_t a2)
{
  return sub_24A568464(a1, a2, (uint64_t (*)(void, void, void, void, void, void))TreeDictionary.debugDescription.getter);
}

uint64_t sub_24A568464(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t Rope.builder<A>(removing:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v125 = (uint64_t (**)(char *, uint64_t))a6;
  uint64_t v126 = a3;
  uint64_t v127 = a5;
  uint64_t v8 = a4;
  uint64_t v116 = a1;
  uint64_t v117 = a2;
  uint64_t v115 = a7;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v106 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned __int8 v105 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v109 = (char *)&v102 - v13;
  uint64_t v113 = type metadata accessor for Rope._Item();
  uint64_t v112 = *(void *)(v113 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v113);
  uint64_t v103 = (uint64_t)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v104 = (uint64_t)&v102 - v16;
  uint64_t v17 = type metadata accessor for Rope._Node();
  uint64_t v119 = sub_24A5BBD20();
  uint64_t v18 = *(void *)(v119 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v119);
  BOOL v21 = (char *)&v102 - v20;
  uint64_t v128 = v17;
  uint64_t v124 = *(void *)(v17 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  char v108 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v110 = (char *)&v102 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  long long v120 = (char *)&v102 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v102 - v28;
  uint64_t v114 = type metadata accessor for Rope.Builder();
  uint64_t v111 = *(void *)(v114 - 8);
  MEMORY[0x270FA5388](v114);
  uint64_t v123 = (uint64_t *)((char *)&v102 - v30);
  uint64_t v121 = v10;
  uint64_t v122 = v9;
  uint64_t v31 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v102 - v33;
  Rope._invalidateIndices()();
  uint64_t v35 = v7;
  Rope.summary.getter(v8, (uint64_t)v34);
  uint64_t v36 = v125[3](v34, v127);
  char v37 = v34;
  uint64_t v38 = v31;
  uint64_t v39 = v116;
  uint64_t v40 = v117;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v38);
  if (v39 < 0 || v36 < v40)
  {
    __break(1u);
LABEL_19:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v8);
    __break(1u);
    return result;
  }
  if (v39 == v40) {
    return Rope.builder<A>(splittingAt:in:)((void (*)(char *, char *, uint64_t))v39, (uint64_t)v126, v8, v127, (uint64_t)v125, v115);
  }
  Rope.Builder.init()(v123);
  uint64_t v42 = v35;
  uint64_t v8 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v35, v119);
  uint64_t v43 = v124;
  uint64_t v44 = v128;
  int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48))(v21, 1, v128);
  uint64_t v46 = v126;
  if (v45 == 1) {
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v29, v21, v44);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v42, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v42, 1, 1, v44);
  uint64_t v133 = v40;
  uint64_t v134 = v39;
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    uint64_t v47 = v128;
    uint64_t v48 = *(char **)(v43 + 16);
    uint64_t v118 = v43 + 16;
    uint64_t v119 = v43 + 8;
    unint64_t v102 = (v43 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v49 = v124;
    uint64_t v50 = (uint64_t)v125;
    uint64_t v51 = v120;
    while (1)
    {
      uint64_t v52 = v48;
      ((void (*)(char *, char *, uint64_t))v48)(v51, v29, v47);
      uint64_t v53 = *(void *)v51 + 16;
      unint64_t v54 = *(void *)v51
          + ((*(unsigned __int8 *)(v49 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
      swift_getWitnessTable();
      uint64_t v55 = v122;
      uint64_t v56 = (unsigned __int16 *)nullsub_1(v53, v54, v122, v128, v121);
      uint64_t v58 = v57;
      swift_unknownObjectRetain();
      uint64_t v59 = v55;
      uint64_t v47 = v128;
      sub_24A569464(v56, v58, &v134, (uint64_t)v46, &v133, v59, v127, v50, &v129);
      swift_unknownObjectRelease();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v49 + 8);
      v60(v51, v47);
      uint64_t v61 = v129;
      uint64_t v62 = v130;
      uint64_t v64 = v131;
      uint64_t v63 = v132;
      if (v129 < v131) {
        break;
      }
      Rope._Node._innerSplit(at:into:)(v129, (uint64_t)v123, v47);
      uint64_t v133 = v63;
      uint64_t v134 = v62;
      uint64_t v65 = Rope._Node.header.getter();
      uint64_t v50 = (uint64_t)v125;
      uint64_t v46 = v126;
      uint64_t v48 = v52;
      if ((v65 & 0xFF0000) == 0)
      {
        uint64_t v39 = v116;
        unint64_t v66 = v102;
        goto LABEL_12;
      }
    }
    ((void (*)(char *, char *, uint64_t))v52)(v110, v29, v47);
    long long v100 = v123;
    Rope._Node._removeSubrange<A>(from:to:in:into:)(v61, v62, v64, v63, (uint64_t)v126, (uint64_t (*)(void *, char *, uint64_t))v123, v47, v127, (uint64_t)v125);
    v60(v29, v47);
    long long v83 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v111 + 32);
    uint64_t v84 = v115;
    long long v85 = v100;
  }
  else
  {
    uint64_t v48 = *(char **)(v43 + 16);
    unint64_t v66 = (v43 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v50 = (uint64_t)v125;
LABEL_12:
    uint64_t v67 = v108;
    uint64_t v125 = (uint64_t (**)(char *, uint64_t))v48;
    unint64_t v102 = v66;
    ((void (*)(char *, char *, uint64_t))v48)(v108, v29, v128);
    uint64_t v68 = *v67 + 16;
    unint64_t v69 = *v67 + ((*(unsigned __int8 *)(v112 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
    uint64_t v70 = v113;
    swift_getWitnessTable();
    uint64_t v71 = v122;
    Swift::Int v72 = (unsigned __int16 *)nullsub_1(v68, v69, v122, v70, v121);
    uint64_t v74 = v73;
    swift_unknownObjectRetain();
    sub_24A569E64(v72, v74, &v134, (uint64_t)v46, v39, v117, v71, v127, &v129, v50);
    swift_unknownObjectRelease();
    uint64_t v75 = v50;
    uint64_t v76 = v124 + 8;
    uint64_t v77 = v128;
    uint64_t v126 = *(void (**)(void, void))(v124 + 8);
    v126(v67, v128);
    uint64_t v78 = v129;
    uint64_t v79 = v130;
    uint64_t v81 = v131;
    uint64_t v80 = v132;
    ((void (*)(char *, char *, uint64_t))v125)(v110, v29, v77);
    if (v78 >= v81)
    {
      uint64_t v124 = v76;
      uint64_t v86 = v104;
      uint64_t v125 = (uint64_t (**)(char *, uint64_t))v29;
      Rope._Node._leafSplit(at:into:)(v78, (uint64_t)v123, v77, v104);
      uint64_t v87 = v112;
      uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 32);
      uint64_t v122 = v79;
      long long v88 = v109;
      uint64_t v89 = v80;
      uint64_t v90 = v127;
      v121(v89, v86, v127, v75);
      uint64_t v91 = v103;
      uint64_t v92 = (uint64_t)v88;
      uint64_t v93 = v113;
      Rope._Item.split(at:)(v92, v113, v103);
      Rope.Builder._insertAfterTip(_:)(v91, v114);
      uint64_t v94 = (uint64_t)v105;
      v121(v122, v86, v90, v75);
      Rope._Item.split(at:)(v94, v93, v91);
      long long v95 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      v95(v91, v93);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v91, v86, v93);
      uint64_t v96 = v114;
      long long v97 = v123;
      Rope.Builder._insertBeforeTip(_:)(v91, v114);
      uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
      uint64_t v99 = AssociatedTypeWitness;
      v98(v94, AssociatedTypeWitness);
      v98((uint64_t)v109, v99);
      v95(v86, v93);
      v126(v125, v128);
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v111 + 32))(v115, v97, v96);
    }
    uint64_t v101 = v75;
    uint64_t v82 = v123;
    Rope._Node._removeSubrange<A>(from:to:in:into:)(v78, v79, v81, v80, (uint64_t)v46, (uint64_t (*)(void *, char *, uint64_t))v123, v77, v127, v101);
    v126(v29, v77);
    long long v83 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v111 + 32);
    uint64_t v84 = v115;
    long long v85 = v82;
  }
  return v83(v84, v85, v114);
}

uint64_t Rope.removeSubrange<A>(_:in:)(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a2;
  uint64_t v36 = a1;
  uint64_t v11 = type metadata accessor for Rope.Builder();
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v31 = (uint64_t)&v29 - v13;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v29 - v18;
  Rope._invalidateIndices()();
  uint64_t v20 = *(void (**)(char *, void (*)(void, void), uint64_t))(v14 + 16);
  uint64_t v32 = a3;
  BOOL v21 = a3;
  uint64_t v22 = v36;
  v20(v19, v21, a5);
  v20(v17, (void (*)(void, void))v19, a5);
  if (v22 < 0)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
    v28(v17, a5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v19, a5);
    goto LABEL_7;
  }
  uint64_t v30 = a6;
  uint64_t v23 = Rope.count<A>(in:)((uint64_t)v17, a4, a5, a6);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, a5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v19, a5);
  if (v23 < v35)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (v22 != v35)
  {
    uint64_t v26 = v31;
    Rope.builder<A>(removing:in:)(v22, v35, v32, a4, a5, v30, v31);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v6, a4);
    uint64_t v27 = v34;
    Rope.Builder.finalize()(v34, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v26, v27);
  }
  return result;
}

uint64_t Rope.replaceSubrange<A, B>(_:in:with:)(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v24 = a6;
  uint64_t v25 = a8;
  uint64_t v27 = a4;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v26 = a9;
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Rope.Builder();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v22 - v18;
  Rope._invalidateIndices()();
  Rope.builder<A>(removing:in:)(a1, v22, v23, a5, v24, v25, (uint64_t)v19);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(v9, a5);
  uint64_t v20 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v27, a7);
  Rope.Builder.insertBeforeTip<A>(_:)((uint64_t)v15, v16, a7, v26);
  Rope.Builder.finalize()(v16, v9);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v20, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t sub_24A569464@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v28 = *a3;
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = v28;
  uint64_t v27 = a1;
  uint64_t v29 = a4;
  uint64_t v20 = a4;
  uint64_t v21 = a2;
  uint64_t result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v19, v20, 0, a1, a2, a6, v17, a7, WitnessTable, a8);
  if (__OFSUB__(*a5, *a3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = result;
    uint64_t v25 = v23;
    uint64_t result = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v23, *a5 - *a3, v29, 1, v27, v21, a6, v17, a7, WitnessTable, a8);
    *a9 = v24;
    a9[1] = v25;
    a9[2] = result;
    a9[3] = v26;
  }
  return result;
}

uint64_t Rope._Node._removeSubrange<A>(from:to:in:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, char *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v111 = a5;
  uint64_t v112 = a8;
  uint64_t v116 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v98 = (uint64_t)&v90 - v16;
  uint64_t v17 = *(uint64_t ***)(a7 + 16);
  uint64_t v18 = *(void *)(a7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v95 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v104 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v103 = (char *)&v90 - v21;
  uint64_t v22 = type metadata accessor for Rope._Item();
  uint64_t v23 = swift_getTupleTypeMetadata2();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v102 = *(void *)(v22 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t result = MEMORY[0x270FA5388](v29);
  uint64_t v39 = (uint64_t **)((char *)&v90 - v35);
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v96 = v34;
  long long v97 = v33;
  uint64_t v91 = v32;
  uint64_t v92 = result;
  uint64_t v93 = v31;
  uint64_t v100 = v38;
  uint64_t v101 = v37;
  uint64_t v110 = v36;
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  uint64_t v114 = v36 + 16;
  uint64_t v115 = a2;
  uint64_t v113 = v40;
  v40((uint64_t)&v90 - v35, (uint64_t)v10, a7);
  uint64_t v109 = v17;
  uint64_t v41 = type metadata accessor for Rope.Builder();
  Rope.Builder._insertBeforeTip(slots:in:)(0, a1, v39, v41);
  if ((unsigned __int16)Rope._Node.header.getter() <= a3) {
    goto LABEL_5;
  }
  uint64_t result = Rope._Node.header.getter();
  uint64_t v42 = (unsigned __int16)result;
  if ((unsigned __int16)result <= a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  char v108 = (uint64_t **)v22;
  v113((uint64_t)v39, (uint64_t)v10, a7);
  uint64_t v22 = (uint64_t)v108;
  Rope.Builder._insertAfterTip(slots:in:)(a3 + 1, v42, v39, v41);
LABEL_5:
  uint64_t v105 = a3;
  uint64_t v90 = v41;
  uint64_t v106 = a1;
  uint64_t v107 = a6;
  uint64_t v43 = Rope._Node.header.getter();
  char v108 = (uint64_t **)v10;
  uint64_t v44 = *v10;
  if ((v43 & 0xFF0000) != 0)
  {
    uint64_t v45 = v110;
    uint64_t v46 = v44 + ((*(unsigned __int8 *)(v110 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
    swift_getWitnessTable();
    uint64_t v47 = (uint64_t)v109;
    uint64_t v48 = (unsigned __int16 *)nullsub_1(v44 + 16, v46, v109, a7, v18);
    uint64_t v50 = v49;
    swift_unknownObjectRetain();
    uint64_t v51 = v98;
    uint64_t v52 = v50;
    uint64_t v53 = v106;
    uint64_t v106 = a9;
    uint64_t v54 = v115;
    uint64_t v55 = v112;
    sub_24A56AD10(v48, v52, v53, v105, v47, v98, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Rope._Node);
    swift_unknownObjectRelease();
    uint64_t v56 = v51 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v57 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v45 + 32);
    v57(v39, v51, a7);
    uint64_t v58 = v97;
    v57(v97, v56, a7);
    uint64_t v59 = v96;
    uint64_t v60 = v39;
    uint64_t v109 = v39;
    uint64_t v61 = v113;
    v113((uint64_t)v96, (uint64_t)v60, a7);
    uint64_t v62 = v54;
    uint64_t v63 = v111;
    uint64_t v65 = v106;
    uint64_t v64 = v107;
    Rope._Node.removeSuffix<A>(from:in:into:)(v62, v111, (void (*)(uint64_t *, void *, uint64_t))v107, a7, v55, v106);
    v61((uint64_t)v59, (uint64_t)v58, a7);
    Rope._Node.removePrefix<A>(upTo:in:into:)(v116, v63, v64, a7, v55, v65);
    unint64_t v66 = *(void (**)(uint64_t **, uint64_t))(v45 + 8);
    v66(v108, a7);
    v66(v58, a7);
    return ((uint64_t (*)(uint64_t **, uint64_t))v66)(v109, a7);
  }
  else
  {
    uint64_t v67 = v102;
    uint64_t v68 = v44 + ((*(unsigned __int8 *)(v102 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
    swift_getWitnessTable();
    uint64_t v69 = v18;
    uint64_t v70 = (uint64_t)v109;
    uint64_t v71 = (unsigned __int16 *)nullsub_1(v44 + 16, v68, v109, v22, v69);
    uint64_t v73 = v72;
    swift_unknownObjectRetain();
    uint64_t v74 = v91;
    uint64_t v75 = v112;
    sub_24A56AD10(v71, v73, v106, v105, v70, v91, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Rope._Item);
    swift_unknownObjectRelease();
    uint64_t v76 = v74 + *(int *)(v92 + 48);
    uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32);
    uint64_t v78 = v100;
    v77(v100, v74, v22);
    uint64_t v79 = v101;
    v77(v101, v76, v22);
    uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 32);
    uint64_t v81 = (uint64_t)v103;
    v80(v115, v78, v75, a9);
    v80(v116, v79, v75, a9);
    uint64_t v82 = v93;
    Rope._Item.split(at:)(v81, v22, v93);
    uint64_t v83 = v102;
    uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
    v84(v82, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v82, v78, v22);
    uint64_t v85 = v90;
    Rope.Builder._insertBeforeTip(_:)(v82, v90);
    uint64_t v86 = v104;
    uint64_t v87 = v101;
    Rope._Item.split(at:)(v104, v22, v82);
    Rope.Builder._insertAfterTip(_:)(v82, v85);
    (*(void (**)(uint64_t **, uint64_t))(v110 + 8))(v108, a7);
    long long v88 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    uint64_t v89 = AssociatedTypeWitness;
    v88(v86, AssociatedTypeWitness);
    v88((uint64_t)v103, v89);
    v84(v87, v22);
    return ((uint64_t (*)(uint64_t, uint64_t))v84)(v100, v22);
  }
}

uint64_t sub_24A569E64@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v16 = *a3;
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for Rope._Item();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = v16;
  uint64_t v20 = a4;
  uint64_t v21 = a4;
  uint64_t v28 = a1;
  uint64_t v22 = a2;
  uint64_t result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v19, v21, 0, a1, a2, a7, v17, a8, WitnessTable, a10);
  if (__OFSUB__(a6, a5))
  {
    __break(1u);
  }
  else
  {
    uint64_t v25 = result;
    uint64_t v26 = v24;
    uint64_t result = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v24, a6 - a5, v20, 1, v28, v22, a7, v17, a8, WitnessTable, a10);
    *a9 = v25;
    a9[1] = v26;
    a9[2] = result;
    a9[3] = v27;
  }
  return result;
}

uint64_t Rope._Node.removeSuffix<A>(from:in:into:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v83 = a2;
  uint64_t v84 = a5;
  uint64_t v82 = a3;
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v73 = (char *)&v65 - v13;
  uint64_t v80 = v11;
  uint64_t v81 = v10;
  uint64_t v14 = type metadata accessor for Rope._Item();
  uint64_t v72 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v69 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v65 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17);
  uint64_t v23 = (uint64_t *)((char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v65 - v24;
  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v79 = v20 + 16;
  v78((char *)&v65 - v24, v6, a4);
  v87[0] = a1;
  if (a1 <= 0)
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
LABEL_10:
    v39(v6, a4);
    return ((uint64_t (*)(char *, uint64_t))v39)(v25, a4);
  }
  unint64_t v66 = v19;
  uint64_t v67 = AssociatedTypeWitness;
  uint64_t v68 = v14;
  uint64_t v71 = v6;
  uint64_t v26 = &v25[*(int *)(a4 + 36)];
  uint64_t v27 = *(uint64_t (**)(void))(a6 + 24);
  uint64_t v76 = a6 + 24;
  uint64_t v77 = v26;
  uint64_t v75 = v27;
  if (v27() > a1)
  {
    uint64_t v28 = a6;
    if ((Rope._Node.header.getter() & 0xFF0000) == 0)
    {
LABEL_8:
      v78((char *)v23, (uint64_t)v25, a4);
      uint64_t v41 = *v23 + 16;
      unint64_t v42 = *v23 + ((*(unsigned __int8 *)(v72 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
      uint64_t v43 = v68;
      swift_getWitnessTable();
      uint64_t v44 = v41;
      uint64_t v45 = v80;
      uint64_t v46 = (unsigned __int16 *)nullsub_1(v44, v42, v80, v43, v81);
      uint64_t v48 = v47;
      swift_unknownObjectRetain();
      uint64_t v49 = v48;
      uint64_t v50 = v84;
      sub_24A56C270(v46, v49, v87, v83, v45, v84, v28, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, &v85, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, 0);
      swift_unknownObjectRelease();
      uint64_t v77 = *(char **)(v20 + 8);
      ((void (*)(uint64_t *, uint64_t))v77)(v23, a4);
      uint64_t v51 = v85;
      uint64_t v76 = v86;
      v78((char *)v23, (uint64_t)v25, a4);
      uint64_t v52 = (uint64_t)v66;
      uint64_t v53 = v28;
      Rope._Node._leafRemoveSuffix(returning:into:)(v51, (uint64_t)v82, a4, (uint64_t)v66);
      uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 32);
      uint64_t v55 = (uint64_t)v73;
      v54(v76, v52, v50, v53);
      uint64_t v57 = v68;
      uint64_t v56 = v69;
      Rope._Item.split(at:)(v55, v68, v69);
      uint64_t v58 = v72;
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v59(v56, v57);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v56, v52, v57);
      uint64_t v60 = type metadata accessor for Rope.Builder();
      Rope.Builder._insertBeforeTip(_:)(v56, v60);
      uint64_t v61 = v77;
      ((void (*)(uint64_t, uint64_t))v77)(v71, a4);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v73, v67);
      v59(v52, v57);
      return ((uint64_t (*)(char *, uint64_t))v61)(v25, a4);
    }
    uint64_t v74 = v20 + 8;
    uint64_t v65 = (v20 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    while (1)
    {
      v78((char *)v23, (uint64_t)v25, a4);
      uint64_t v29 = *v23 + 16;
      unint64_t v30 = *v23 + ((*(unsigned __int8 *)(v20 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      swift_getWitnessTable();
      uint64_t v31 = v20;
      uint64_t v32 = v28;
      uint64_t v33 = v80;
      uint64_t v34 = (unsigned __int16 *)nullsub_1(v29, v30, v80, a4, v81);
      uint64_t v36 = v35;
      swift_unknownObjectRetain();
      uint64_t v37 = v33;
      uint64_t v28 = v32;
      uint64_t v20 = v31;
      uint64_t v38 = v84;
      sub_24A56C270(v34, v36, v87, v83, v37, v84, v28, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, &v85, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, 1u);
      swift_unknownObjectRelease();
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v39((uint64_t)v23, a4);
      uint64_t v40 = v86;
      v87[0] = v86;
      Rope._Node._innerRemoveSuffix(descending:into:)(v85, v82, a4);
      if (v40 < 1) {
        break;
      }
      if (v40 >= ((uint64_t (*)(char *, uint64_t, uint64_t))v75)(v77, v38, v28)) {
        goto LABEL_11;
      }
      if ((Rope._Node.header.getter() & 0xFF0000) == 0) {
        goto LABEL_8;
      }
    }
    uint64_t v6 = v71;
    goto LABEL_10;
  }
LABEL_11:
  v78((char *)v23, (uint64_t)v25, a4);
  uint64_t v63 = type metadata accessor for Rope.Builder();
  Rope.Builder._insertBeforeTip(_:)(v23, v63);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v64(v71, a4);
  return ((uint64_t (*)(char *, uint64_t))v64)(v25, a4);
}

uint64_t Rope._Node.removePrefix<A>(upTo:in:into:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v79 = a3;
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v66 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v64 = (char *)v61 - v15;
  uint64_t v80 = v13;
  uint64_t v81 = v12;
  uint64_t v16 = type metadata accessor for Rope._Item();
  uint64_t v67 = *(void *)(v16 - 8);
  uint64_t v68 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v62 = (uint64_t)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v63 = (uint64_t)v61 - v20;
  uint64_t v21 = *(void *)(a4 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)v61 - v25;
  uint64_t v27 = *(void (**)(void *, char *, uint64_t))(v21 + 16);
  uint64_t v69 = v6;
  uint64_t v77 = v27;
  uint64_t v78 = v21 + 16;
  v27((void *)((char *)v61 - v25), v6, a4);
  v84[0] = a1;
  if (a1 < 1) {
    goto LABEL_9;
  }
  uint64_t v28 = &v26[*(int *)(a4 + 36)];
  uint64_t v29 = *(uint64_t (**)(void))(a6 + 24);
  uint64_t v75 = a6 + 24;
  uint64_t v76 = v28;
  uint64_t v74 = v29;
  if (v29() > a1)
  {
    uint64_t v71 = a2;
    uint64_t v72 = a5;
    uint64_t v73 = a6;
    if ((Rope._Node.header.getter() & 0xFF0000) == 0)
    {
LABEL_8:
      v77(v24, v26, a4);
      uint64_t v43 = *(void *)v24 + 16;
      uint64_t v44 = v68;
      unint64_t v45 = *(void *)v24
          + ((*(unsigned __int8 *)(v67 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
      swift_getWitnessTable();
      uint64_t v46 = v80;
      uint64_t v47 = nullsub_1(v43, v45, v80, v44, v81);
      uint64_t v49 = v48;
      swift_unknownObjectRetain();
      uint64_t v50 = (unsigned __int16 *)v47;
      uint64_t v51 = v72;
      uint64_t v52 = v73;
      sub_24A56C270(v50, v49, v84, v71, v46, v72, v73, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, &v82, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, 1u);
      swift_unknownObjectRelease();
      uint64_t v76 = *(char **)(v21 + 8);
      ((void (*)(char *, uint64_t))v76)(v24, a4);
      uint64_t v53 = v82;
      uint64_t v75 = v83;
      v77(v24, v26, a4);
      uint64_t v54 = v63;
      Rope._Node._leafRemovePrefix(returning:into:)(v53, (uint64_t)v79, a4, v63);
      uint64_t v55 = (uint64_t)v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 32))(v75, v54, v51, v52);
      uint64_t v56 = v62;
      uint64_t v57 = v68;
      Rope._Item.split(at:)(v55, v68, v62);
      uint64_t v58 = type metadata accessor for Rope.Builder();
      Rope.Builder._insertAfterTip(_:)(v56, v58);
      uint64_t v59 = v76;
      ((void (*)(char *, uint64_t))v76)(v69, a4);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v55, v66);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v54, v57);
      return ((uint64_t (*)(char *, uint64_t))v59)(v26, a4);
    }
    uint64_t v70 = v21 + 8;
    v61[1] = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = v71;
    while (1)
    {
      v77(v24, v26, a4);
      uint64_t v31 = *(void *)v24 + 16;
      unint64_t v32 = *(void *)v24
          + ((*(unsigned __int8 *)(v21 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      swift_getWitnessTable();
      uint64_t v33 = v80;
      uint64_t v34 = (unsigned __int16 *)nullsub_1(v31, v32, v80, a4, v81);
      uint64_t v36 = v35;
      swift_unknownObjectRetain();
      uint64_t v37 = v36;
      uint64_t v38 = v33;
      uint64_t v40 = v72;
      uint64_t v39 = v73;
      sub_24A56C270(v34, v37, v84, v30, v38, v72, v73, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, &v82, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, 1u);
      swift_unknownObjectRelease();
      uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
      v41(v24, a4);
      uint64_t v42 = v83;
      v84[0] = v83;
      Rope._Node._innerRemovePrefix(descending:into:)(v82, v79, a4);
      if (v42 < 1) {
        break;
      }
      if (v42 >= ((uint64_t (*)(char *, uint64_t, uint64_t))v74)(v76, v40, v39)) {
        goto LABEL_12;
      }
      if ((Rope._Node.header.getter() & 0xFF0000) == 0) {
        goto LABEL_8;
      }
    }
LABEL_9:
    type metadata accessor for Rope.Builder();
    sub_24A4F2AE0((uint64_t)v26);
    uint64_t v59 = *(char **)(v21 + 8);
    ((void (*)(char *, uint64_t))v59)(v69, a4);
    return ((uint64_t (*)(char *, uint64_t))v59)(v26, a4);
  }
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
LABEL_12:
  v41(v69, a4);
  return v41(v26, a4);
}

uint64_t sub_24A56AD10@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t))
{
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = a8(255, a5, AssociatedConformanceWitness);
  uint64_t v15 = a6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v14, AssociatedConformanceWitness, WitnessTable);
  uint64_t v18 = *(void *)(v14 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v19 = *(void *)(v18 + 72);
  v23(a6, v17 + v19 * a3, v14);
  uint64_t v20 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v14, AssociatedConformanceWitness, WitnessTable) + v19 * a4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v23)(v15, v20, v14);
}

uint64_t Rope._Node._innerRemoveSuffix(descending:into:)(uint64_t a1, void (*a2)(uint64_t *, void *, uint64_t), uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v64 = a2;
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v66 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void (**)(uint64_t *, char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v57 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v12);
  uint64_t v18 = (uint64_t *)((char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v65 = (uint64_t *)((char *)&v57 - v22);
  if (a1 == 1)
  {
    uint64_t v33 = v7;
    uint64_t v34 = *(void (**)(uint64_t *, char *, uint64_t))(v15 + 32);
    uint64_t v59 = (void *)(v15 + 32);
    uint64_t v60 = v34;
    uint64_t v62 = v21;
    uint64_t v58 = v20;
    v34(v18, v4, a3);
    uint64_t v35 = *v18 + 16;
    unint64_t v36 = *v18 + ((*(unsigned __int8 *)(v15 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v63 = v4;
    swift_getWitnessTable();
    uint64_t v37 = v66;
    uint64_t v61 = v33;
    uint64_t v38 = (unsigned __int16 *)nullsub_1(v35, v36, v66, a3, v33);
    uint64_t v40 = v39;
    swift_unknownObjectRetain();
    sub_24A56CB3C(v38, v40, v37, v33, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)v14);
    swift_unknownObjectRelease();
    uint64_t v41 = *(void (**)(uint64_t *, uint64_t))(v15 + 8);
    v41(v18, a3);
    uint64_t v42 = &v14[*(int *)(v58 + 48)];
    uint64_t v43 = (uint64_t)v65;
    uint64_t v44 = v14;
    unint64_t v45 = v60;
    v60(v65, v44, a3);
    uint64_t v46 = v62;
    v45(v62, v42, a3);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v18, v43, a3);
    uint64_t v47 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertBeforeTip(_:)(v18, v47);
    v41((uint64_t *)v43, a3);
    return ((uint64_t (*)(char *, uint64_t *, uint64_t))v45)(v63, v46, a3);
  }
  else if (a1)
  {
    uint64_t v62 = v21;
    Rope._Node.ensureUnique()();
    if ((unsigned __int16)Rope._Node.header.getter() - 1 > a1)
    {
      uint64_t v48 = *(void *)v4 + 16;
      unint64_t v49 = *(void *)v4
          + ((*(unsigned __int8 *)(v15 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
      uint64_t v63 = v4;
      uint64_t v59 = &protocol conformance descriptor for Rope<A>._Node;
      swift_getWitnessTable();
      uint64_t v50 = v48;
      uint64_t v51 = v66;
      uint64_t v52 = (unsigned __int16 *)nullsub_1(v50, v49, v66, a3, v7);
      swift_unknownObjectRetain();
      sub_24A56CC5C(v52, a1, v51, v7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)v10);
      swift_unknownObjectRelease();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v10, AssociatedTypeWitness, AssociatedConformanceWitness);
      (*((void (**)(char *, uint64_t))v60 + 1))(v10, AssociatedTypeWitness);
    }
    uint64_t v54 = (uint64_t)v65;
    Rope._Node._removeNode(at:)(a1, a3, (uint64_t)v65);
    sub_24A5BC5A0();
    uint64_t v55 = v62;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v62, v54, a3);
    uint64_t v56 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertBeforeTip(_:)(v55, v56);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v54, a3);
  }
  else
  {
    uint64_t v63 = v4;
    uint64_t v23 = v7;
    uint64_t v61 = v7;
    uint64_t v64 = *(void (**)(uint64_t *, void *, uint64_t))(v15 + 32);
    uint64_t v24 = v21;
    v64(v21, v4, a3);
    uint64_t v25 = *v24 + 16;
    unint64_t v26 = *v24 + ((*(unsigned __int8 *)(v15 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    swift_getWitnessTable();
    uint64_t v27 = v66;
    uint64_t v28 = (unsigned __int16 *)nullsub_1(v25, v26, v66, a3, v23);
    uint64_t v30 = v29;
    swift_unknownObjectRetain();
    uint64_t v31 = (uint64_t)v65;
    sub_24A56CA70(v28, v30, v27, v61, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)v65);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v24, a3);
    return ((uint64_t (*)(char *, uint64_t, uint64_t))v64)(v63, v31, a3);
  }
}

uint64_t Rope._Node._leafRemoveSuffix(returning:into:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = a3;
  uint64_t v72 = a2;
  uint64_t v73 = (char *)a4;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(unsigned __int16 **)(AssociatedTypeWitness - 8);
  uint64_t v71 = (void *)AssociatedTypeWitness;
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v69 = (uint64_t)&v65 - v12;
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v68 = (uint64_t *)((char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v65 - v15);
  uint64_t v74 = v9;
  uint64_t v75 = v8;
  uint64_t v17 = type metadata accessor for Rope._Item();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = *(void *)(v17 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v19);
  uint64_t v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v65 - v26;
  if (a1 == 1)
  {
    uint64_t v37 = *v5;
    uint64_t v38 = *v5 + 16;
    unint64_t v39 = (*(unsigned __int8 *)(v22 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v66 = v6;
    uint64_t v67 = v5;
    uint64_t v40 = v37 + v39;
    uint64_t v71 = &protocol conformance descriptor for Rope<A>._Item;
    swift_getWitnessTable();
    uint64_t v41 = v40;
    uint64_t v42 = v74;
    uint64_t v43 = v22;
    uint64_t v44 = v75;
    uint64_t v70 = (unsigned __int16 *)nullsub_1(v38, v41, v74, v17, v75);
    uint64_t v46 = v45;
    swift_unknownObjectRetain();
    sub_24A56CB3C(v70, v46, v42, v44, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)v21);
    swift_unknownObjectRelease();
    uint64_t v47 = &v21[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v48(v27, v21, v17);
    v48(v73, v47, v17);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v25, v27, v17);
    uint64_t v49 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertBeforeTip(_:)((uint64_t)v25, v49);
    (*(void (**)(void *, uint64_t))(v76 + 8))(v67, v66);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v27, v17);
  }
  else if (a1)
  {
    uint64_t v50 = *(void (**)(uint64_t *, void *, uint64_t))(v76 + 16);
    v50(v16, v5, v6);
    Rope._Node.ensureUnique()();
    if ((unsigned __int16)Rope._Node.header.getter() - 1 > a1)
    {
      uint64_t v51 = *v16;
      uint64_t v65 = v50;
      uint64_t v66 = v6;
      uint64_t v52 = v51 + ((*(unsigned __int8 *)(v22 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v67 = v5;
      swift_getWitnessTable();
      uint64_t v53 = v74;
      uint64_t v54 = v17;
      uint64_t v55 = v75;
      uint64_t v56 = nullsub_1(v51 + 16, v52, v74, v54, v75);
      swift_unknownObjectRetain();
      uint64_t v57 = v69;
      uint64_t v58 = (unsigned __int16 *)v56;
      uint64_t v50 = v65;
      uint64_t v6 = v66;
      uint64_t v5 = v67;
      sub_24A56CC5C(v58, a1, v53, v55, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, v69);
      swift_unknownObjectRelease();
      uint64_t v59 = v71;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, void *, uint64_t))(AssociatedConformanceWitness + 56))(v57, v59, AssociatedConformanceWitness);
      (*((void (**)(uint64_t, void *))v70 + 1))(v57, v59);
    }
    uint64_t v61 = v69;
    Rope._Node._removeItem(at:)((uint64_t)v73, v69, a1, v6);
    (*((void (**)(uint64_t, void *))v70 + 1))(v61, v71);
    uint64_t v62 = v68;
    v50(v68, v16, v6);
    uint64_t v63 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertBeforeTip(_:)(v62, v63);
    uint64_t v64 = *(uint64_t (**)(uint64_t *, uint64_t))(v76 + 8);
    v76 += 8;
    v64(v5, v6);
    return v64(v16, v6);
  }
  else
  {
    uint64_t v28 = *v5 + 16;
    unint64_t v29 = *v5 + ((*(unsigned __int8 *)(v22 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    swift_getWitnessTable();
    uint64_t v31 = v74;
    uint64_t v30 = v75;
    unint64_t v32 = (unsigned __int16 *)nullsub_1(v28, v29, v74, v17, v75);
    uint64_t v34 = v33;
    swift_unknownObjectRetain();
    sub_24A56CA70(v32, v34, v31, v30, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)v73);
    swift_unknownObjectRelease();
    uint64_t v35 = *(uint64_t (**)(void *, uint64_t))(v76 + 8);
    return v35(v5, v6);
  }
}

uint64_t Rope._Node._innerRemovePrefix(descending:into:)(uint64_t a1, uint64_t (*a2)(void *, char *, uint64_t), uint64_t a3)
{
  uint64_t v72 = a2;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v74 = *(void *)(a3 + 16);
  uint64_t v75 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v68 = (uint64_t)&v62 - v9;
  uint64_t v71 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v70 = (char *)&v62 - v10;
  uint64_t v67 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](v67);
  uint64_t v66 = (uint64_t)&v62 - v12;
  uint64_t v13 = *(void *)(a3 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (uint64_t *)((char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (uint64_t *)((char *)&v62 - v18);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v62 - v20;
  unsigned __int16 v22 = Rope._Node.header.getter();
  uint64_t v73 = v3;
  if (v22 - 1 == a1)
  {
    uint64_t v72 = *(uint64_t (**)(void *, char *, uint64_t))(v13 + 32);
    v72(v19, (char *)v3, a3);
    uint64_t v23 = *v19 + 16;
    unint64_t v24 = *v19 + ((*(unsigned __int8 *)(v13 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    swift_getWitnessTable();
    uint64_t v25 = v23;
    uint64_t v26 = v74;
    uint64_t v27 = (unsigned __int16 *)nullsub_1(v25, v24, v74, a3, v75);
    uint64_t v29 = v28;
    swift_unknownObjectRetain();
    sub_24A56CD34(v27, v29, v26, v75, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)v21);
    swift_unknownObjectRelease();
    (*(void (**)(void *, uint64_t))(v13 + 8))(v19, a3);
    return v72(v73, v21, a3);
  }
  else
  {
    uint64_t v63 = v19;
    uint64_t v64 = AssociatedTypeWitness;
    uint64_t v65 = v21;
    uint64_t v31 = v13;
    if ((unsigned __int16)Rope._Node.header.getter() - 2 == a1)
    {
      uint64_t v32 = v13;
      uint64_t v71 = *(void *)(v13 + 32);
      ((void (*)(void *, void *, uint64_t))v71)(v16, v3, a3);
      uint64_t v33 = *v16 + 16;
      unint64_t v34 = *v16 + ((*(unsigned __int8 *)(v32 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
      uint64_t v70 = (char *)&protocol conformance descriptor for Rope<A>._Node;
      swift_getWitnessTable();
      uint64_t v35 = v74;
      uint64_t v36 = v75;
      uint64_t v37 = (unsigned __int16 *)nullsub_1(v33, v34, v74, a3, v75);
      uint64_t v39 = v38;
      swift_unknownObjectRetain();
      uint64_t v40 = v66;
      sub_24A56CE34(v37, v39, v35, v36, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, v66);
      swift_unknownObjectRelease();
      uint64_t v41 = *(void (**)(void *, uint64_t))(v32 + 8);
      v41(v16, a3);
      uint64_t v42 = v40 + *(int *)(v67 + 48);
      uint64_t v43 = v65;
      uint64_t v44 = (uint64_t (*)(void *, char *, uint64_t))v71;
      ((void (*)(char *, uint64_t, uint64_t))v71)(v65, v40, a3);
      uint64_t v45 = (uint64_t)v63;
      v44(v63, (char *)v42, a3);
      type metadata accessor for Rope.Builder();
      sub_24A4F2AE0(v45);
      v41((void *)v45, a3);
      return v44(v73, v43, a3);
    }
    else
    {
      uint64_t v46 = a1;
      Rope._Node.ensureUnique()();
      uint64_t v47 = *v3 + 16;
      uint64_t v48 = v31;
      unint64_t v49 = *v3 + ((*(unsigned __int8 *)(v31 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
      swift_getWitnessTable();
      uint64_t v50 = v74;
      uint64_t v51 = v75;
      uint64_t v52 = (unsigned __int16 *)nullsub_1(v47, v49, v74, a3, v75);
      uint64_t v54 = v53;
      swift_unknownObjectRetain();
      uint64_t v55 = v68;
      sub_24A56CFA8(v52, v54, v46, v50, v51, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, v68);
      swift_unknownObjectRelease();
      uint64_t v56 = v70;
      uint64_t v57 = v55 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v58 = v71;
      uint64_t v59 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v70, v55, v64);
      uint64_t v60 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v65, v57, a3);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v56, v59, AssociatedConformanceWitness);
      sub_24A5BC5A0();
      type metadata accessor for Rope.Builder();
      sub_24A4F2AE0(v60);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v60, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v56, v59);
    }
  }
}

uint64_t sub_24A56C270@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, uint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v18 = *a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = a8(0, a5, AssociatedConformanceWitness);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v18, a4, a11, a1, a2, a5, v20, a6, WitnessTable, a7);
  *a9 = result;
  a9[1] = v23;
  return result;
}

uint64_t Rope._Node._leafRemovePrefix(returning:into:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v72 = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Rope._Item();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v65 = (uint64_t)&v61 - v12;
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v67 = (char *)&v61 - v14;
  uint64_t v74 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v70 = (uint64_t *)((char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x270FA5388](v63);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v19 = *(void *)(v10 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  uint64_t v64 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v61 - v22;
  uint64_t v73 = a3;
  unint64_t v24 = v4;
  if ((unsigned __int16)Rope._Node.header.getter() - 1 == a1)
  {
    uint64_t v25 = *v4 + 16;
    unint64_t v26 = *v4 + ((*(unsigned __int8 *)(v19 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    swift_getWitnessTable();
    uint64_t v27 = (unsigned __int16 *)nullsub_1(v25, v26, v7, v10, v8);
    uint64_t v29 = v28;
    swift_unknownObjectRetain();
    sub_24A56CD34(v27, v29, v7, v8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, v72);
    swift_unknownObjectRelease();
    uint64_t v30 = v73;
    uint64_t v31 = *(uint64_t (**)(void *, uint64_t))(v74 + 8);
    return v31(v4, v30);
  }
  else if ((unsigned __int16)Rope._Node.header.getter() - 2 == a1)
  {
    uint64_t v33 = v4;
    uint64_t v34 = *v4;
    uint64_t v70 = (uint64_t *)(*v24 + 16);
    uint64_t v35 = v19;
    uint64_t v36 = v34 + ((*(unsigned __int8 *)(v19 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    swift_getWitnessTable();
    uint64_t v37 = (unsigned __int16 *)nullsub_1(v70, v36, v7, v10, v8);
    uint64_t v70 = (uint64_t *)v38;
    swift_unknownObjectRetain();
    sub_24A56CE34(v37, (uint64_t)v70, v7, v8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)v18);
    swift_unknownObjectRelease();
    uint64_t v39 = &v18[*(int *)(v63 + 48)];
    uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
    v40(v72, v18, v10);
    v40((uint64_t)v23, v39, v10);
    uint64_t v41 = (uint64_t)v64;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v64, v23, v10);
    uint64_t v42 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertAfterTip(_:)(v41, v42);
    (*(void (**)(void *, uint64_t))(v74 + 8))(v33, v73);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v23, v10);
  }
  else
  {
    uint64_t v43 = *(void (**)(uint64_t *, void *, uint64_t))(v74 + 16);
    uint64_t v44 = v70;
    uint64_t v62 = v4;
    v43(v70, v4, v73);
    Rope._Node.ensureUnique()();
    uint64_t v45 = *v44;
    uint64_t v46 = *v44 + 16;
    uint64_t v47 = v19;
    uint64_t v48 = v45 + ((*(unsigned __int8 *)(v19 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    swift_getWitnessTable();
    unint64_t v49 = (unsigned __int16 *)nullsub_1(v46, v48, v7, v10, v8);
    uint64_t v51 = v50;
    swift_unknownObjectRetain();
    uint64_t v52 = v65;
    sub_24A56CFA8(v49, v51, a1, v7, v8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, v65);
    swift_unknownObjectRelease();
    uint64_t v53 = v67;
    uint64_t v54 = v52 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v56 = v68;
    uint64_t v55 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v67, v52, v69);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v72, v54, v10);
    uint64_t v57 = v73;
    uint64_t v58 = (uint64_t)v70;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v53, v55, AssociatedConformanceWitness);
    type metadata accessor for Rope.Builder();
    sub_24A4F2AE0(v58);
    uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 8);
    v74 += 8;
    v60((uint64_t)v62, v57);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v55);
    return v60(v58, v57);
  }
}

uint64_t sub_24A56CA70@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a5(0, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v11, a4, WitnessTable);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  return v14(a6, v13, v11);
}

uint64_t sub_24A56CB3C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a5(0, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v11, a4, WitnessTable);
  uint64_t v14 = a6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v17 = *(void *)(v11 - 8) + 16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v17)(a6, v13, v11);
  uint64_t v15 = v13 + *(void *)(v17 + 56);
  return v18(v14, v15, v11);
}

uint64_t sub_24A56CC5C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9 = a5(0, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.childCount.getter(a1);
  uint64_t v12 = result - a2;
  if (__OFSUB__(result, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  return Rope._UnsafeHandle._removeSuffix(_:)(result, a1, v9, WitnessTable, a6);
}

uint64_t sub_24A56CD34@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a5(0, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v11, a4, WitnessTable);
  uint64_t result = Rope._UnsafeHandle.childCount.getter(a1);
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = *(void *)(v11 - 8);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    uint64_t v17 = v13 + *(void *)(v15 + 72) * (result - 1);
    return v16(a6, v17, v11);
  }
  return result;
}

uint64_t sub_24A56CE34@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a5(0, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v11, a4, WitnessTable);
  uint64_t v14 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t result = Rope._UnsafeHandle.childCount.getter(a1);
  if (__OFSUB__(result, 2))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v11 - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v18(a6, v13 + v17 * (result - 2), v11);
  uint64_t result = Rope._UnsafeHandle.childCount.getter(a1);
  if (__OFSUB__(result, 1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(a6 + v14, v13 + (result - 1) * v17, v11);
}

uint64_t sub_24A56CFA8@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = a6(0, a4, a5);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v13, a5, WitnessTable);
  uint64_t v16 = *(void *)(v13 - 8);
  uint64_t v17 = v15 + *(void *)(v16 + 72) * a3;
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a7 + *(int *)(TupleTypeMetadata2 + 48), v17, v13);
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
    __break(1u);
  }
  else
  {
    return Rope._UnsafeHandle._removePrefix(_:)(result, a1, a2, v13, WitnessTable, a7);
  }
  return result;
}

uint64_t BitSet.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = sub_24A56D190(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24A56D150@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_24A56D190(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_24A56D190(uint64_t result)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return v1;
  }
  uint64_t v3 = (unint64_t *)(result + 32);
  while (1)
  {
    unint64_t v5 = *v3++;
    unint64_t v4 = v5;
    if ((v5 & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v6 = *(void *)(v1 + 16);
    BOOL v7 = v4 >> 6 >= v6;
    uint64_t v8 = (v4 >> 6) - v6;
    if (v7)
    {
      if (v8 < -1) {
        goto LABEL_13;
      }
      sub_24A4D5F98(v8 + 1, 0);
      uint64_t v1 = v9;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_24A499D60(v1);
      uint64_t v1 = result;
    }
    *(void *)(v1 + 8 * (v4 >> 6) + 32) |= 1 << v4;
    uint64_t v9 = v1;
    if (!--v2) {
      return v1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t _HashNode.isEqualSet<A>(to:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a5 == a1) {
    return 1;
  }
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  if (a6 == a2)
  {
    BOOL v19 = _HashNode.isCollisionNode.getter(a5, a6, a7, a8, a10);
    BOOL v20 = _HashNode.isCollisionNode.getter(a1, a6, a7, a9, a10);
    if (v19)
    {
      if (v20)
      {
        nullsub_1(a5 + 16, a5 + 32, a7, a8, a10);
        uint64_t v22 = v21;
        nullsub_1(a1 + 16, a1 + 32, a7, a9, a10);
        sub_24A56D3FC(v23, v22, v30);
        return v30[0];
      }
    }
    else if (!v20)
    {
      uint64_t v25 = (_DWORD *)nullsub_1(a5 + 16, a5 + 32, a7, a8, a10);
      uint64_t v27 = v26;
      uint64_t v28 = nullsub_1(a1 + 16, a1 + 32, a7, a9, a10);
      sub_24A56DB98(v28, v29, v25, v27, a3, a4, &v31, a9, a10);
      return v31;
    }
  }
  return 0;
}

void sub_24A56D3FC(void *a1@<X1>, void *a2@<X3>, char *a3@<X8>)
{
  if (*a2 != *a1)
  {
    char v11 = 0;
LABEL_11:
    *a3 = v11;
    return;
  }
  uint64_t v12 = a3;
  uint64_t v3 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v5 = v4;
  _HashNode.UnsafeHandle.reverseItems.getter();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x24C5C7090](v3, v5, TupleTypeMetadata2);
  if (v7 == v8)
  {
LABEL_7:
    char v11 = 1;
LABEL_10:
    a3 = v12;
    goto LABEL_11;
  }
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  if (v8 >= v7)
  {
    while (v9 < v10)
    {
      MEMORY[0x270FA5388](v7);
      swift_getTupleTypeMetadata2();
      sub_24A5BBDB0();
      swift_getWitnessTable();
      uint64_t v7 = sub_24A5BB900();
      if ((v7 & 1) == 0)
      {
        char v11 = 0;
        goto LABEL_10;
      }
      if (v10 == ++v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_24A56D614(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10)
{
  uint64_t v69 = a6;
  uint64_t v70 = a5;
  uint64_t v77 = a1;
  uint64_t v80 = a8;
  uint64_t v79 = *(void *)(a8 - 8);
  uint64_t v75 = a10;
  uint64_t v76 = a9;
  MEMORY[0x270FA5388](a1);
  uint64_t v68 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v78 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v82 = (char *)v60 - v15;
  uint64_t v16 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v74 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = a7;
  uint64_t v18 = swift_getTupleTypeMetadata2();
  uint64_t v83 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  unint64_t v24 = (char *)v60 - v23;
  uint64_t v26 = v25;
  uint64_t v27 = *(int *)(v22 + 48);
  uint64_t v28 = (char *)v60 + v27 - v23;
  uint64_t v72 = v28;
  uint64_t v29 = a2 + *(void *)(v26 + 72) * a4;
  uint64_t v30 = (char *)(v29 + v27);
  uint64_t v73 = v16;
  unsigned __int8 v31 = *(void (**)(void))(v16 + 16);
  uint64_t v63 = v29;
  ((void (*)(char *))v31)((char *)v60 - v23);
  uint64_t v32 = v79;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  uint64_t v34 = v28;
  uint64_t v64 = v30;
  uint64_t v35 = v80;
  uint64_t v66 = v33;
  uint64_t v67 = v79 + 16;
  v33(v34, v30, v80);
  uint64_t v36 = &v21[*(int *)(v18 + 48)];
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v65 = v24;
  uint64_t v38 = v24;
  uint64_t v39 = v31;
  uint64_t v40 = v71;
  uint64_t v62 = v16 + 32;
  uint64_t v61 = v37;
  v37(v21, v38, v71);
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v60[1] = v32 + 32;
  v60[0] = v41;
  v41(v36, v72, v35);
  uint64_t v42 = v74;
  ((void (*)(char *, char *, uint64_t))v39)(v74, v21, v40);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v72 = (char *)v18;
  v83 += 8;
  v43(v21, v18);
  uint64_t v44 = v77;
  uint64_t v45 = v40;
  LOBYTE(v36) = sub_24A5BB530();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v42, v40);
  uint64_t v46 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v47 = &v82[v46];
  uint64_t v48 = &v44[v46];
  v39();
  (*(void (**)(char *, char *))(*((void *)v76 - 1) + 16))(v47, v48);
  if (v36)
  {
    unint64_t v49 = v72;
    uint64_t v50 = *((int *)v72 + 12);
    uint64_t v77 = (char *)v43;
    uint64_t v51 = v65;
    uint64_t v52 = &v65[v50];
    ((void (*)(char *, uint64_t, uint64_t))v39)(v65, v63, v45);
    uint64_t v53 = v80;
    uint64_t v54 = v66;
    v66(v52, v64, v80);
    uint64_t v55 = *((int *)v49 + 12);
    uint64_t v76 = v47;
    uint64_t v56 = &v21[v55];
    v61(v21, v51, v45);
    ((void (*)(char *, char *, uint64_t))v60[0])(v56, v52, v53);
    uint64_t v57 = v68;
    v54(v68, v56, v53);
    ((void (*)(char *, char *))v77)(v21, v49);
    char v58 = v70(v57, v76);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v57, v53);
  }
  else
  {
    char v58 = 0;
  }
  (*(void (**)(char *, uint64_t))(v78 + 8))(v82, TupleTypeMetadata2);
  return v58 & 1;
}

uint64_t sub_24A56DB98@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a7;
  if (*a3 != *(_DWORD *)result) {
    goto LABEL_5;
  }
  if (a3[1] != *(_DWORD *)(result + 4)) {
    goto LABEL_5;
  }
  v22[1] = a4;
  uint64_t v26 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v27 = v12;
  void v22[2] = a2;
  void v22[6] = v22;
  uint64_t v24 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v25 = v13;
  MEMORY[0x270FA5388](v24);
  v22[5] = a9;
  void v22[3] = a5;
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  v22[0] = a6;
  void v22[4] = a8;
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v14 = v28;
  uint64_t result = sub_24A5BB8B0();
  uint64_t v28 = v14;
  if (result)
  {
    uint64_t v15 = _HashNode.UnsafeHandle.children.getter();
    uint64_t v17 = v16;
    uint64_t v18 = _HashNode.UnsafeHandle.children.getter();
    uint64_t v26 = v15;
    uint64_t v27 = v17;
    uint64_t v24 = v18;
    uint64_t v25 = v19;
    MEMORY[0x270FA5388](v18);
    type metadata accessor for _HashNode();
    sub_24A5BBDB0();
    type metadata accessor for _HashNode();
    sub_24A5BBDB0();
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t v20 = v28;
    uint64_t result = sub_24A5BB8B0();
    uint64_t v28 = v20;
    char v21 = result & 1;
  }
  else
  {
LABEL_5:
    char v21 = 0;
  }
  *uint64_t v23 = v21;
  return result;
}

uint64_t sub_24A56DECC(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v33 = a7;
  uint64_t v31 = a6;
  v28[1] = a4;
  uint64_t v29 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v11 = (char *)v28 - v10;
  uint64_t v12 = swift_getTupleTypeMetadata2();
  uint64_t v34 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v28 - v13;
  uint64_t v15 = a2;
  int v30 = sub_24A5BB530();
  uint64_t v35 = v12;
  uint64_t v16 = *(int *)(v12 + 48);
  uint64_t v17 = &v14[v16];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16);
  v19(v14, a1, a5);
  uint64_t v20 = v18;
  uint64_t v21 = TupleTypeMetadata2;
  (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 16))(v17, v20);
  uint64_t v22 = *(int *)(v21 + 48);
  uint64_t v23 = &v11[v22];
  uint64_t v24 = v15;
  uint64_t v25 = v15 + v22;
  v19(v11, v24, a5);
  (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 16))(v23, v25);
  if (v30) {
    char v26 = v29(v17, v23);
  }
  else {
    char v26 = 0;
  }
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  return v26 & 1;
}

uint64_t sub_24A56E198(char *a1)
{
  return sub_24A56D614(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(uint64_t (**)(char *, char *))(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

uint64_t sub_24A56E1D4(uint64_t a1, uint64_t a2)
{
  return sub_24A56DECC(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32)) & 1;
}

uint64_t sub_24A56E1FC(void *a1, void *a2)
{
  return _HashNode.isEqualSet<A>(to:by:)(*a2, a2[1], v2[6], v2[7], *a1, a1[1], v2[2], v2[3], v2[4], v2[5]) & 1;
}

unint64_t sub_24A56E248(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(unsigned __int16 *)(v1 + 68);
  uint64_t v7 = *(unsigned int *)(v1 + 64);
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 62) = 0;
  if (v5)
  {
    uint64_t v138 = v4;
    uint64_t v139 = v5;
    uint64_t v8 = v7 | (v6 << 32);
    LOWORD(v140) = v8;
    unsigned __int8 v9 = BYTE4(v8);
    BYTE2(v140) = BYTE2(v8);
    HIBYTE(v140) = BYTE3(v8);
    uint64_t v10 = BYTE5(v8);
    unsigned __int8 v141 = BYTE4(v8);
    unsigned __int8 v142 = BYTE5(v8);
    sub_24A49752C(~(_BYTE)v8, (unint64_t)v143);
    sub_24A491DB4((uint64_t)v143, (uint64_t)&v144);
    unint64_t v11 = v147;
    if (v147)
    {
      unint64_t v12 = v144;
      unint64_t v13 = v145;
      unint64_t v14 = v146;
      uint64_t v16 = v148;
      uint64_t v15 = v149;
      uint64_t v17 = v150;
      unint64_t result = sub_24A4913AC(v144, v145, v146, v147);
      if ((uint64_t)result > 255) {
        goto LABEL_177;
      }
      unint64_t v19 = sub_24A4913AC(v12, v13, v14, v11);
      uint64_t v20 = sub_24A5BB7C0();
      unint64_t v21 = sub_24A491A60(v12, v13, v14, v11);
      int64_t v22 = sub_24A491F14(v19, v20, v21, v16, v15, v17);
      sub_24A491E1C(v22 & 0xFFFFFFFFFFFFLL);
      unint64_t v134 = v12;
      uint64_t v135 = v13;
      unint64_t v136 = v14;
      unint64_t v137 = v11;
      sub_24A491D60();
      sub_24A5BB6D0();
      sub_24A491A34((uint64_t)v143);
      uint64_t v4 = v138;
      uint64_t v5 = v139;
      unsigned __int8 v9 = v141;
      uint64_t v10 = v142;
      uint64_t v2 = v120;
    }
    int v23 = v140;
    *(void *)(v2 + 48) = v4;
    *(void *)(v2 + 56) = v5;
    *(_DWORD *)(v2 + 64) = v23;
    *(_WORD *)(v2 + 68) = ((v10 << 40) | ((unint64_t)v9 << 32)) >> 32;
    uint64_t v3 = a1;
  }
  if (*(void *)(v2 + 80)) {
    uint64_t v122 = *(unsigned __int8 *)(v2 + 88);
  }
  else {
    uint64_t v122 = 0;
  }
  for (uint64_t i = 0; ; uint64_t i = v133)
  {
    unint64_t v25 = v3[1];
    unint64_t v26 = v3[2];
    unint64_t v27 = v3[3];
    unint64_t v28 = v3[4];
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_24A5BBE80();
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v30 = v29 + v122;
    if (__OFADD__(v29, v122)) {
      goto LABEL_161;
    }
    uint64_t v31 = v30 - 124;
    if (v30 >= 379) {
      uint64_t v31 = 255;
    }
    uint64_t v32 = v30 <= 255 ? v29 + v122 : v31;
    unint64_t result = sub_24A497C80(v28, v25, v32, v26, v27);
    if ((v34 & 1) != 0 || (result ^ v33) < 0x4000) {
      break;
    }
    v3[4] = v33;
    unint64_t v35 = sub_24A5BBEC0();
    unint64_t v37 = v36;
    unint64_t v39 = v38;
    unint64_t v41 = v40;
    uint64_t v128 = sub_24A4913AC(v35, v36, v38, v40);
    _s9_IngesterVMa();
    unint64_t result = sub_24A498004(v35, v37, v39, v41);
    uint64_t v133 = i;
    if ((v42 & 0x100) != 0)
    {
      unint64_t v46 = v37 >> 14;
      if (v35 >> 14 >= v37 >> 14) {
        goto LABEL_71;
      }
      unint64_t v118 = v37;
      unint64_t v119 = v35;
      uint64_t v47 = (v39 >> 59) & 1;
      if ((v41 & 0x1000000000000000) == 0) {
        LOBYTE(v47) = 1;
      }
      uint64_t v48 = 4 << v47;
      uint64_t v49 = HIBYTE(v41) & 0xF;
      if ((v41 & 0x2000000000000000) == 0) {
        uint64_t v49 = v39 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v130 = v49;
      unint64_t v50 = v35;
      unint64_t v51 = v35 >> 14;
      unint64_t v52 = v35 >> 14;
      uint64_t v131 = v48;
      unint64_t v123 = v37 >> 14;
      while (2)
      {
        unint64_t v53 = v50 & 0xC;
        BOOL v54 = (v50 & 1) == 0 || v53 == v48;
        int v55 = v54;
        if (v54)
        {
          unint64_t v56 = v50;
          if (v53 == v48)
          {
            unint64_t result = sub_24A4DFD84(v50, v39, v41);
            unint64_t v50 = result;
          }
          if (v130 <= v50 >> 16) {
            goto LABEL_157;
          }
          if ((v50 & 1) == 0)
          {
            unint64_t result = sub_24A4971A8(v50, v39, v41);
            unint64_t v50 = v50 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
          }
        }
        else
        {
          unint64_t v56 = v50;
          if (v130 <= v50 >> 16) {
            goto LABEL_158;
          }
        }
        if ((v41 & 0x1000000000000000) != 0)
        {
          unint64_t result = sub_24A5BB5D0();
          unint64_t v50 = result;
          if (v55) {
            goto LABEL_59;
          }
        }
        else
        {
          unint64_t v57 = v50 >> 16;
          if ((v41 & 0x2000000000000000) != 0)
          {
            unint64_t v134 = v39;
            uint64_t v135 = v41 & 0xFFFFFFFFFFFFFFLL;
            int v58 = *((unsigned __int8 *)&v134 + v57);
          }
          else
          {
            unint64_t result = (v41 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v39 & 0x1000000000000000) == 0) {
              unint64_t result = sub_24A5BC120();
            }
            int v58 = *(unsigned __int8 *)(result + v57);
          }
          int v59 = (char)v58;
          unsigned int v60 = __clz(v58 ^ 0xFF) - 24;
          if (v59 >= 0) {
            LOBYTE(v60) = 1;
          }
          unint64_t v50 = ((v57 + v60) << 16) | 5;
          if (v55)
          {
LABEL_59:
            unint64_t result = v56;
            if (v53 == v131) {
              unint64_t result = sub_24A4DFD84(v56, v39, v41);
            }
            if (result >> 14 < v52 || result >> 14 >= v46) {
              goto LABEL_160;
            }
            if ((result & 1) == 0) {
              sub_24A4971A8(result, v39, v41);
            }
            if ((v41 & 0x1000000000000000) != 0)
            {
LABEL_66:
              sub_24A5BC060();
LABEL_68:
              unint64_t result = sub_24A5BC760();
              unint64_t v45 = v50 >> 14;
              if (result)
              {
                if (v45 >= v51) {
                  goto LABEL_73;
                }
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
                return result;
              }
              unint64_t v51 = v50 >> 14;
              uint64_t v48 = v131;
              if (v45 >= v46)
              {
                uint64_t v99 = 0;
                uint64_t v132 = v128;
                unint64_t v37 = v118;
                unint64_t v35 = v119;
                goto LABEL_135;
              }
              continue;
            }
LABEL_51:
            if ((v41 & 0x2000000000000000) != 0)
            {
              unint64_t v134 = v39;
              uint64_t v135 = v41 & 0xFFFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain();
              sub_24A5BC130();
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v39 & 0x1000000000000000) == 0) {
                sub_24A5BC120();
              }
              swift_bridgeObjectRetain();
              sub_24A5BC130();
              swift_bridgeObjectRelease();
              unint64_t v46 = v123;
            }
            goto LABEL_68;
          }
        }
        break;
      }
      if (v56 >> 14 < v52) {
        goto LABEL_159;
      }
      unint64_t result = v56;
      if (v56 >> 14 >= v46) {
        goto LABEL_159;
      }
      if ((v41 & 0x1000000000000000) != 0) {
        goto LABEL_66;
      }
      goto LABEL_51;
    }
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v43 = sub_24A5BBE70();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v44 = sub_24A5BBE70();
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v45 = v44 >> 14;
      if (v44 >> 14 >= v43 >> 14)
      {
        unint64_t v46 = v37 >> 14;
LABEL_73:
        if (v46 >= v45)
        {
          unint64_t v61 = sub_24A5BBEC0();
          unint64_t v63 = v62;
          uint64_t v65 = v64;
          unint64_t v67 = v66;
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v99 = 1;
          while (1)
          {
            if ((v67 & 0x1000000000000000) != 0)
            {
              unint64_t v81 = v63 >> 14;
              if (v61 >> 14 >= v63 >> 14) {
                goto LABEL_134;
              }
              unint64_t v88 = v61 >> 14;
              uint64_t v89 = 4 << ((v65 & 0x800000000000000) != 0);
              uint64_t v90 = HIBYTE(v67) & 0xF;
              if ((v67 & 0x2000000000000000) == 0) {
                uint64_t v90 = v65 & 0xFFFFFFFFFFFFLL;
              }
              unint64_t v127 = v61 >> 14;
              unint64_t v129 = v90;
              unint64_t v91 = v61;
              while (1)
              {
                unint64_t v92 = v91 & 0xC;
                BOOL v93 = v92 == v89 || (v91 & 1) == 0;
                unint64_t v126 = v88;
                if (v93)
                {
                  unint64_t v94 = v91;
                  if (v92 == v89)
                  {
                    unint64_t result = sub_24A4DFD84(v91, v65, v67);
                    unint64_t v92 = v91 & 0xC;
                    unint64_t v94 = result;
                  }
                  if (v129 <= v94 >> 16) {
                    goto LABEL_173;
                  }
                  unint64_t v124 = v92;
                  if ((v94 & 1) == 0) {
                    sub_24A4971A8(v94, v65, v67);
                  }
                  unint64_t v95 = sub_24A5BB5D0();
                  unint64_t result = v91;
                  if (v124 == 4 << ((v65 & 0x800000000000000) != 0)) {
                    unint64_t result = sub_24A4DFD84(v91, v65, v67);
                  }
                  if (result >> 14 < v127 || result >> 14 >= v81) {
                    goto LABEL_174;
                  }
                  if ((result & 1) == 0) {
                    sub_24A4971A8(result, v65, v67);
                  }
                }
                else
                {
                  if (v129 <= v91 >> 16) {
                    goto LABEL_175;
                  }
                  unint64_t result = sub_24A5BB5D0();
                  if (v91 >> 14 < v127) {
                    goto LABEL_176;
                  }
                  unint64_t v95 = result;
                  unint64_t result = v91;
                  if (v91 >> 14 >= v81) {
                    goto LABEL_176;
                  }
                }
                sub_24A5BC060();
                unint64_t result = sub_24A5BC760();
                unint64_t v82 = v95 >> 14;
                if (result) {
                  break;
                }
                unint64_t v91 = v95;
                unint64_t v88 = v95 >> 14;
                uint64_t v89 = 4 << ((v65 & 0x800000000000000) != 0);
                if (v82 >= v81) {
                  goto LABEL_134;
                }
              }
              if (v82 < v126) {
                goto LABEL_179;
              }
            }
            else
            {
              if ((v67 & 0x2000000000000000) != 0)
              {
                unint64_t v134 = v65;
                uint64_t v135 = v67 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v69 = &v134;
                unint64_t v70 = v61;
                unint64_t v71 = v63;
                unint64_t v72 = v65;
                unint64_t v73 = v67;
                uint64_t v68 = v133;
              }
              else
              {
                uint64_t v68 = v133;
                if ((v65 & 0x1000000000000000) != 0) {
                  uint64_t v69 = (void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else {
                  uint64_t v69 = (void *)sub_24A5BC120();
                }
                unint64_t v70 = v61;
                unint64_t v71 = v63;
                unint64_t v72 = v65;
                unint64_t v73 = v67;
              }
              uint64_t v74 = sub_24A497AA0((uint64_t)v69, v70, v71, v72, v73);
              uint64_t v76 = v75;
              LOBYTE(v138) = v77 & 1;
              uint64_t v133 = v68;
              if (v77)
              {
LABEL_134:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                uint64_t v128 = sub_24A5BBE80();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                uint64_t v132 = sub_24A5BBE80();
                swift_bridgeObjectRelease();
                unint64_t v35 = sub_24A5BBEC0();
                unint64_t v37 = v96;
                unint64_t v39 = v97;
                unint64_t v41 = v98;
                goto LABEL_135;
              }
              unint64_t result = v61;
              if ((v61 & 0xC) == 8)
              {
                unint64_t result = sub_24A4DFD84(v61, v65, v67);
                unint64_t v78 = v74 + (result >> 16);
                if (__OFADD__(v74, result >> 16))
                {
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
                  goto LABEL_163;
                }
              }
              else
              {
                unint64_t v78 = v74 + (v61 >> 16);
                if (__OFADD__(v74, v61 >> 16)) {
                  goto LABEL_148;
                }
              }
              if ((v78 & 0x8000000000000000) != 0) {
                goto LABEL_149;
              }
              if ((v67 & 0x2000000000000000) != 0) {
                unint64_t v79 = HIBYTE(v67) & 0xF;
              }
              else {
                unint64_t v79 = v65 & 0xFFFFFFFFFFFFLL;
              }
              if (v79 < v78) {
                goto LABEL_150;
              }
              unint64_t result = v61;
              if ((v61 & 0xC) == 8)
              {
                unint64_t result = sub_24A4DFD84(v61, v65, v67);
                unint64_t v80 = v76 + (result >> 16);
                if (__OFADD__(v76, result >> 16)) {
                  goto LABEL_151;
                }
              }
              else
              {
                unint64_t v80 = v76 + (v61 >> 16);
                if (__OFADD__(v76, v61 >> 16)) {
                  goto LABEL_151;
                }
              }
              if ((v80 & 0x8000000000000000) != 0) {
                goto LABEL_152;
              }
              if (v79 < v80) {
                goto LABEL_153;
              }
              if (v80 < v78) {
                goto LABEL_154;
              }
              unint64_t v81 = v63 >> 14;
              unint64_t v82 = 4 * v80;
            }
            if (v81 < v82) {
              goto LABEL_155;
            }
            unint64_t v61 = sub_24A5BBEC0();
            unint64_t v63 = v83;
            uint64_t v65 = v84;
            unint64_t v86 = v85;
            unint64_t result = swift_bridgeObjectRelease();
            unint64_t v67 = v86;
            if (__OFADD__(v99++, 1)) {
              goto LABEL_156;
            }
          }
        }
        goto LABEL_170;
      }
      goto LABEL_171;
    }
LABEL_71:
    uint64_t v99 = 0;
    uint64_t v132 = v128;
LABEL_135:
    uint64_t v100 = MEMORY[0x24C5C68C0](v35, v37, v39, v41);
    unint64_t v102 = v101;
    if ((v101 & 0x1000000000000000) != 0)
    {
      uint64_t v100 = sub_24A49279C();
      unint64_t v114 = v113;
      swift_bridgeObjectRelease();
      unint64_t v102 = v114;
    }
    swift_bridgeObjectRetain();
    unint64_t v103 = sub_24A5BB830();
    unint64_t v105 = v104;
    unint64_t v107 = v106;
    unint64_t v109 = v108;
    swift_bridgeObjectRelease();
    unint64_t result = sub_24A4913AC(v103, v105, v107, v109);
    if ((uint64_t)result > 255) {
      goto LABEL_162;
    }
    int64_t v110 = sub_24A4913AC(v103, v105, v107, v109);
    uint64_t v111 = sub_24A5BB7C0();
    int64_t v112 = sub_24A491A60(v103, v105, v107, v109);
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if (v110 > 255)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
      goto LABEL_172;
    }
    if (v111 > 255) {
      goto LABEL_164;
    }
    if (v112 > 255) {
      goto LABEL_165;
    }
    if (v99 > 255) {
      goto LABEL_166;
    }
    if (v128 > 255) {
      goto LABEL_167;
    }
    if ((v128 | v99 | v132 | v110 | v111 | v112) < 0) {
      goto LABEL_168;
    }
    if (v132 > 255) {
      goto LABEL_169;
    }
    unint64_t v125 = (v99 << 24) | v125 & 0xFFFF000000000000 | ((unint64_t)v128 << 32) & 0xFFFF00FFFFFF0000 | ((unint64_t)v132 << 40) | v110 | ((unint64_t)v111 << 8) | ((unint64_t)v112 << 16);
    uint64_t v2 = v120;
    sub_24A494F18(v100, v102, v125);
    uint64_t v3 = a1;
  }
  if ((v28 ^ v25) >> 14) {
    goto LABEL_178;
  }
  uint64_t v115 = (char *)v3 + *(int *)(_s9_IngesterVMa() + 24);
  uint64_t v116 = v2 + *(int *)(_s7BuilderVMa() + 24);
  uint64_t v117 = sub_24A5BC780();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v117 - 8) + 24))(v116, v115, v117);
}

uint64_t sub_24A56EF34(_OWORD *a1)
{
  uint64_t v3 = sub_24A5BC780();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A5BC770();
  if (*(void *)a1)
  {
    if (*(_WORD *)(*(void *)a1 + 16))
    {
      long long v7 = a1[1];
      long long v8 = a1[2];
      *(_OWORD *)unint64_t v14 = *a1;
      *(_OWORD *)&unsigned char v14[16] = v7;
      *(_OWORD *)&v14[32] = v8;
      uint64_t v9 = v1 + *(int *)(_s7BuilderVMa() + 24);
      swift_unknownObjectRetain();
      sub_24A4C7AF4((uint64_t)v6, v9);
      if (*(void *)v14)
      {
        uint64_t v15 = *(void *)v14;
        long long v16 = *(_OWORD *)&v14[8];
        long long v17 = *(_OWORD *)&v14[24];
        sub_24A575950((long long *)&v15, v10, v11, v12);
      }
    }
    sub_24A496BE8((uint64_t)a1);
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_24A56F084(long long *a1, unint64_t *a2)
{
  uint64_t v5 = sub_24A5BC780();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v25 = v2 + *(int *)(_s7BuilderVMa() + 24);
  long long v12 = a1[2];
  long long v13 = *a1;
  unsigned char v27[4] = a1[1];
  v27[5] = v12;
  uint64_t v27[3] = v13;
  unint64_t v14 = *a2;
  unint64_t v15 = a2[1];
  unint64_t v17 = a2[2];
  unint64_t v16 = a2[3];
  uint64_t v23 = v2;
  unint64_t v24 = v16;
  sub_24A48E6B4(v14 >> 11, a2[4] >> 11, (uint64_t)v27);
  char v26 = 1;
  sub_24A48D2C8(v14, v15, v17, v24, (uint64_t *)0x100000000, (uint64_t)v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v25, v5);
  sub_24A4C7AF4((uint64_t)v11, (uint64_t)v9);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, v5);
  v18(v11, v5);
  if (!*(void *)&v27[0]) {
    return sub_24A496BE8((uint64_t)a1);
  }
  swift_unknownObjectRetain();
  sub_24A575950(v27, v19, v20, v21);
  sub_24A496BE8((uint64_t)a1);
  return swift_unknownObjectRelease();
}

int64_t sub_24A56F284(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v63 = a3;
  unint64_t v9 = sub_24A5BC780();
  unint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  long long v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = _s9_IngesterVMa();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char **)((char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 ^ (unint64_t)a1) >= 0x4000)
  {
    unint64_t v57 = v13;
    uint64_t v20 = _s7BuilderVMa();
    unint64_t v21 = *(void (**)(char *, char *, unint64_t))(v10 + 16);
    unint64_t v56 = v5 + *(int *)(v20 + 24);
    unint64_t v55 = v10 + 16;
    BOOL v54 = v21;
    ((void (*)(char *))v21)(v15);
    void *v18 = a1;
    v18[1] = a2;
    void v18[2] = v63;
    _OWORD v18[3] = a4;
    if ((a4 & 0x1000000000000000) != 0) {
      goto LABEL_32;
    }
    while (1)
    {
      void v18[4] = a1;
      int64_t v22 = (char *)v18 + *(int *)(v16 + 24);
      unint64_t v58 = v10;
      uint64_t v23 = *(void (**)(void))(v10 + 32);
      unint64_t v53 = v22;
      unint64_t v59 = v9;
      v23();
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v5 + 56);
      uint64_t v26 = *(unsigned __int16 *)(v5 + 68);
      uint64_t v27 = *(unsigned int *)(v5 + 64);
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 62) = 0;
      unint64_t v61 = v5;
      unsigned int v60 = v18;
      if (v25)
      {
        uint64_t v65 = v24;
        uint64_t v66 = v25;
        uint64_t v28 = v27 | (v26 << 32);
        LOWORD(v67) = v28;
        unsigned __int8 v29 = BYTE4(v28);
        BYTE2(v67) = BYTE2(v28);
        HIBYTE(v67) = BYTE3(v28);
        uint64_t v30 = BYTE5(v28);
        unsigned __int8 v68 = BYTE4(v28);
        unsigned __int8 v69 = BYTE5(v28);
        sub_24A49752C(~(_BYTE)v28, (unint64_t)v64);
        sub_24A491DB4((uint64_t)v64, (uint64_t)&v77);
        a4 = v80;
        if (v80)
        {
          unint64_t v31 = v77;
          uint64_t v16 = v78;
          unint64_t v32 = v79;
          uint64_t v33 = v81;
          uint64_t v34 = v82;
          uint64_t v35 = v83;
          int64_t result = sub_24A4913AC(v77, v78, v79, v80);
          if (result > 255)
          {
            __break(1u);
            return result;
          }
          unint64_t v36 = sub_24A4913AC(v31, v16, v32, a4);
          uint64_t v37 = sub_24A5BB7C0();
          unint64_t v38 = sub_24A491A60(v31, v16, v32, a4);
          int64_t v39 = sub_24A491F14(v36, v37, v38, v33, v34, v35);
          sub_24A491E1C(v39 & 0xFFFFFFFFFFFFLL);
          unint64_t v70 = v31;
          uint64_t v71 = v16;
          unint64_t v72 = v32;
          unint64_t v73 = a4;
          sub_24A491D60();
          sub_24A5BB6D0();
          sub_24A491A34((uint64_t)v64);
          uint64_t v24 = v65;
          uint64_t v25 = v66;
          unsigned __int8 v29 = v68;
          uint64_t v30 = v69;
          uint64_t v18 = v60;
        }
        int v40 = v67;
        unint64_t v41 = v61;
        *(void *)(v61 + 48) = v24;
        *(void *)(v41 + 56) = v25;
        *(_DWORD *)(v41 + 64) = v40;
        *(_WORD *)(v41 + 68) = ((v30 << 40) | ((unint64_t)v29 << 32)) >> 32;
      }
      sub_24A49752C(255, (unint64_t)&v65);
      sub_24A491DB4((uint64_t)&v65, (uint64_t)&v70);
      if (!v73)
      {
LABEL_23:
        unint64_t v51 = v57;
        unint64_t v52 = v59;
        v54(v57, v53, v59);
        sub_24A48CC74((uint64_t)v18);
        return (*(uint64_t (**)(unint64_t, char *, unint64_t))(v58 + 40))(v56, v51, v52);
      }
      while (1)
      {
        uint64_t v42 = v74;
        uint64_t v63 = v75;
        uint64_t v62 = v76;
        uint64_t v18 = (void *)MEMORY[0x24C5C68C0](v70, v71, v72);
        unint64_t v44 = v43;
        if ((v43 & 0x1000000000000000) != 0)
        {
          uint64_t v18 = (void *)sub_24A49279C();
          unint64_t v50 = v49;
          swift_bridgeObjectRelease();
          unint64_t v44 = v50;
        }
        swift_bridgeObjectRetain();
        a1 = sub_24A5BB830();
        unint64_t v9 = v45;
        unint64_t v10 = v46;
        unint64_t v5 = v47;
        swift_bridgeObjectRelease();
        if ((uint64_t)sub_24A4913AC(a1, v9, v10, v5) > 255) {
          break;
        }
        uint64_t v16 = sub_24A4913AC(a1, v9, v10, v5);
        uint64_t v48 = sub_24A5BB7C0();
        a1 = sub_24A491A60(a1, v9, v10, v5);
        swift_bridgeObjectRelease();
        sub_24A491A34((uint64_t)&v65);
        if (v16 > 255) {
          goto LABEL_25;
        }
        if (v48 > 255) {
          goto LABEL_26;
        }
        if (a1 > 255) {
          goto LABEL_27;
        }
        if (v42 > 255) {
          goto LABEL_28;
        }
        if (v63 > 255) {
          goto LABEL_29;
        }
        if ((v63 | v42 | v62 | v16 | v48 | a1) < 0) {
          goto LABEL_30;
        }
        if (v62 > 255) {
          goto LABEL_31;
        }
        a4 = (v42 << 24) | a4 & 0xFFFF000000000000 | ((unint64_t)v63 << 32) & 0xFFFF00FFFFFF0000 | ((unint64_t)v62 << 40) | v16 | ((unint64_t)v48 << 8) | ((unint64_t)a1 << 16);
        sub_24A494F18((uint64_t)v18, v44, a4);
        uint64_t v18 = v60;
        sub_24A49752C(255, (unint64_t)&v65);
        sub_24A491DB4((uint64_t)&v65, (uint64_t)&v70);
        if (!v73) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      sub_24A491F98();
    }
  }
  return swift_bridgeObjectRelease();
}

int64_t sub_24A56F8C8()
{
  uint64_t v0 = sub_24A5BB830();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  return sub_24A56F284(v0, v2, v4, v6);
}

void sub_24A56F96C(_WORD *a1, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (unsigned __int16)*a1;
  int64_t v8 = a3;
  if (*a1)
  {
    uint64_t v9 = *(void *)(a2 + 32);
    int64_t v10 = a3 - v9;
    if (__OFSUB__(a3, v9))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    if (__OFADD__(v10, 1))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v10 + 1 < 1)
    {
      uint64_t v11 = a4 - a3;
      if (__OFSUB__(a4, a3))
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      uint64_t v12 = 0;
      int64_t v10 = a3;
      goto LABEL_17;
    }
    if (v7 != 1)
    {
      long long v13 = (uint64_t *)(a2 + 72);
      uint64_t v12 = 1;
      while (1)
      {
        uint64_t v14 = *v13;
        v13 += 5;
        int64_t v8 = v10 - v14;
        if (__OFSUB__(v10, v14)) {
          goto LABEL_57;
        }
        if (__OFADD__(v8, 1)) {
          goto LABEL_58;
        }
        if (v8 + 1 < 1) {
          goto LABEL_16;
        }
        ++v12;
        int64_t v10 = v8;
        if (v7 == v12) {
          goto LABEL_14;
        }
      }
    }
    int64_t v8 = a3 - v9;
  }
LABEL_14:
  if (v8)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  int64_t v10 = 0;
  uint64_t v12 = (unsigned __int16)*a1;
LABEL_16:
  uint64_t v11 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
LABEL_17:
  uint64_t v15 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v12 < v7)
  {
    uint64_t v16 = *(void *)(a2 + 40 * v12 + 32);
    if (v16 < v15)
    {
      uint64_t v17 = (uint64_t *)(a2 + 40 * v12 + 72);
      uint64_t v18 = v12;
      while (1)
      {
        BOOL v19 = __OFSUB__(v15, v16);
        v15 -= v16;
        if (v19) {
          break;
        }
        if (v7 - 1 == v18)
        {
          uint64_t v18 = (unsigned __int16)*a1;
          goto LABEL_26;
        }
        ++v18;
        uint64_t v20 = *v17;
        v17 += 5;
        uint64_t v16 = v20;
        if (v20 >= v15) {
          goto LABEL_26;
        }
      }
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
  }
  uint64_t v18 = v12;
LABEL_26:
  unint64_t v21 = (uint64_t *)(a2 + 40 * v12);
  if (v12 == v18)
  {
    if (v15 < v10 || *(void *)(a2 + 40 * v12 + 32) < v15 || v10 < 0) {
      goto LABEL_64;
    }
    if (v10 != v15)
    {
      uint64_t v22 = *v21;
      int v23 = *(unsigned __int8 *)(*v21 + 18);
      uint64_t v24 = *v21 + 24;
      swift_unknownObjectRetain();
      unint64_t v25 = v22 + 16;
      uint64_t v26 = v24;
      unint64_t v27 = v10;
      if (!v23)
      {
LABEL_32:
        sub_24A493A8C(v25, v26, v27, v15, a5);
LABEL_52:
        swift_unknownObjectRelease();
        return;
      }
LABEL_51:
      sub_24A56F96C(v25, v26, v27, v15, a5);
      goto LABEL_52;
    }
  }
  else
  {
    if (v10 < 0) {
      goto LABEL_65;
    }
    uint64_t v28 = *(void *)(a2 + 40 * v12 + 32);
    if (v28 < v10) {
      goto LABEL_65;
    }
    if (v10 != v28)
    {
      uint64_t v29 = *v21;
      int v30 = *(unsigned __int8 *)(*v21 + 18);
      uint64_t v31 = *v21 + 24;
      swift_unknownObjectRetain();
      unint64_t v32 = v29 + 16;
      if (v30) {
        sub_24A56F96C(v32, v31, v10, v28, a5);
      }
      else {
        sub_24A493A8C(v32, v31, v10, v28, a5);
      }
      swift_unknownObjectRelease();
    }
    uint64_t v33 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_66;
    }
    if (v18 < v33)
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v33 != v18)
    {
      if (v33 >= v18)
      {
LABEL_70:
        __break(1u);
        return;
      }
      uint64_t v34 = ~v12 + v18;
      uint64_t v35 = a2 + 40 * v12 + 40;
      do
      {
        long long v36 = *(_OWORD *)(v35 + 16);
        v44[0] = *(_OWORD *)v35;
        v44[1] = v36;
        uint64_t v45 = *(void *)(v35 + 32);
        swift_unknownObjectRetain();
        sub_24A575950(v44, v37, v38, v39);
        v35 += 40;
        --v34;
      }
      while (v34);
    }
    if (v15 < 0) {
      goto LABEL_68;
    }
    int v40 = (void *)(a2 + 40 * v18);
    if (v40[4] < v15) {
      goto LABEL_68;
    }
    if (v15)
    {
      uint64_t v41 = *v40;
      int v42 = *(unsigned __int8 *)(*v40 + 18);
      uint64_t v43 = *v40 + 24;
      swift_unknownObjectRetain();
      unint64_t v25 = v41 + 16;
      uint64_t v26 = v43;
      unint64_t v27 = 0;
      if (!v42) {
        goto LABEL_32;
      }
      goto LABEL_51;
    }
  }
}

uint64_t sub_24A56FC98(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    long long v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_WORD *)(a1 + 68) = *((_WORD *)a2 + 34);
    uint64_t v10 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v10;
    *(_WORD *)(a1 + 92) = *((_WORD *)a2 + 46);
    *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v15 = (uint64_t)a2 + v11;
    uint64_t v16 = a1 + v11;
    *(void *)(a1 + 96) = a2[12];
    uint64_t v12 = sub_24A5BC780();
    long long v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v16, v15, v12);
    v13(v7 + *(int *)(a3 + 24), (uint64_t)a2 + *(int *)(a3 + 24), v12);
  }
  return v7;
}

uint64_t sub_24A56FE1C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24A5BC780();
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  return v8(v6, v5);
}

uint64_t sub_24A56FEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v13 = a2 + v9;
  uint64_t v14 = a1 + v9;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v10 = sub_24A5BC780();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v14, v13, v10);
  v11(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v10);
  return a1;
}

uint64_t sub_24A57001C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 67);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_24A5BC780();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v9);
  return a1;
}

uint64_t sub_24A5701D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v12 = sub_24A5BC780();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v12);
  return a1;
}

uint64_t sub_24A57029C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_24A5BC780();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v12);
  return a1;
}

uint64_t sub_24A5703C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A5703D4);
}

uint64_t sub_24A5703D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A5BC780();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A570484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A570498);
}

void *sub_24A570498(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *int64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_24A5BC780();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t RopeMetric._nonnegativeSize(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t Deque.init(unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = Deque._Storage.init(minimumCapacity:)();
  uint64_t v17 = a4;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = sub_24A570710;
  uint64_t v15 = &v16;
  swift_retain();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A521D30, (uint64_t)v12, v9, (uint64_t)&type metadata for _DequeBufferHeader, a4, v10, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v21);
  swift_release();
  if (v4) {
    swift_release();
  }
  return v9;
}

uint64_t *sub_24A570650(uint64_t *result, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t *))
{
  result[2] = 0;
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = (uint64_t)result;
    Deque._UnsafeHandle.buffer(for:)(0, a3);
    v9[0] = sub_24A5BBD90();
    v9[1] = v8;
    a4(v9, &v10);
    return sub_24A570730(&v10, a3, v7, a2, (uint64_t)v9);
  }
  return result;
}

uint64_t *sub_24A570710(uint64_t *a1, uint64_t a2)
{
  return sub_24A570650(a1, a2, *(void *)(v2 + 24), *(void (**)(void *, uint64_t *))(v2 + 32));
}

uint64_t *sub_24A570730(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*result > a2)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (a2 < 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = result;
  Deque._UnsafeHandle.buffer(for:)(0, a2);
  sub_24A5BBD90();
  uint64_t v9 = v8;
  uint64_t v10 = sub_24A5BB540();
  int64_t result = (uint64_t *)sub_24A5BB540();
  if (v10)
  {
    if (!result) {
      goto LABEL_13;
    }
    if ((uint64_t *)v10 == result) {
      goto LABEL_8;
    }
    __break(1u);
  }
  if (!result)
  {
LABEL_8:
    if (*(void *)(a5 + 8) == v9)
    {
      *(void *)(a3 + 8) = *v7;
      return result;
    }
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t Deque.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v13);
  if (v14 < 1)
  {
    uint64_t v10 = 1;
  }
  else
  {
    sub_24A5BC3C0();
    uint64_t v5 = sub_24A5BC3B0();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._makeUniqueCopy()();
    }
    uint64_t v6 = *v2;
    uint64_t v7 = MEMORY[0x270FA5388](v5);
    uint64_t v13 = v4;
    MEMORY[0x270FA5388](v7);
    void v12[2] = v4;
    __n128 v12[3] = v4;
    v12[4] = sub_24A52216C;
    v12[5] = v8;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A521880, (uint64_t)v12, v6, (uint64_t)&type metadata for _DequeBufferHeader, v4, v9, v4, MEMORY[0x263F8E4E0], (uint64_t)&v14);
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, v10, 1, v4);
}

uint64_t Deque.prepend(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v14);
  Swift::Int v6 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    sub_24A5BC3C0();
    char v7 = sub_24A5BC3B0();
    uint64_t v8 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v14);
    if (v16 < v6 || (v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v6, 0);
    }
    uint64_t v9 = *v2;
    uint64_t v10 = MEMORY[0x270FA5388](v8);
    uint64_t v14 = v4;
    uint64_t v15 = a1;
    MEMORY[0x270FA5388](v10);
    _OWORD v13[2] = v4;
    v13[3] = sub_24A570BC0;
    v13[4] = v11;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    return sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v13, v9, (uint64_t)&type metadata for _DequeBufferHeader, v4, v12, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v16);
  }
  return result;
}

uint64_t sub_24A570BC0(void *a1, uint64_t a2)
{
  return Deque._UnsafeHandle.uncheckedPrepend(_:)(*(void *)(v2 + 24), a1, a2, *(void *)(v2 + 16));
}

uint64_t Deque.prepend<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v22 = v9;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  if (sub_24A5BB9F0() == a3) {
    sub_24A5BC560();
  }
  uint64_t result = sub_24A5BB880();
  if (LOBYTE(v25[0]) == 1)
  {
    uint64_t result = sub_24A5BBAF0();
    if (result >= 1)
    {
      uint64_t v11 = result;
      uint64_t v12 = *v4;
      swift_retain();
      sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v21);
      uint64_t result = swift_release();
      Swift::Int v13 = v25[0] + v11;
      if (__OFADD__(v25[0], v11))
      {
        __break(1u);
      }
      else
      {
        sub_24A5BC3C0();
        char v14 = sub_24A5BC3B0();
        uint64_t v15 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v21);
        if (v25[0] < v13 || (v14 & 1) == 0)
        {
          type metadata accessor for Deque._Storage();
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v13, 0);
        }
        uint64_t v16 = *v5;
        uint64_t v17 = MEMORY[0x270FA5388](v15);
        v20[8] = v9;
        v20[9] = a3;
        v20[10] = a4;
        v20[11] = v11;
        uint64_t v21 = a1;
        MEMORY[0x270FA5388](v17);
        void v20[2] = v9;
        v20[3] = sub_24A5712B4;
        v20[4] = v18;
        swift_retain();
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
        sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v20, v16, (uint64_t)&type metadata for _DequeBufferHeader, v9, v19, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)v25);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_24A570EC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a3;
  swift_retain();
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v22);
  uint64_t result = swift_release();
  Swift::Int v14 = v24 + a2;
  if (__OFADD__(v24, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = a1;
    sub_24A5BC3C0();
    char v15 = sub_24A5BC3B0();
    uint64_t v16 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v22);
    if (v24 < v14 || (v15 & 1) == 0)
    {
      type metadata accessor for Deque._Storage();
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
    }
    uint64_t v17 = *a3;
    uint64_t v18 = MEMORY[0x270FA5388](v16);
    unsigned char v21[8] = a4;
    v21[9] = a5;
    v21[10] = a6;
    v21[11] = v23;
    uint64_t v22 = a2;
    MEMORY[0x270FA5388](v18);
    _OWORD v21[2] = a4;
    v21[3] = sub_24A571620;
    v21[4] = v19;
    swift_retain();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v21, v17, (uint64_t)&type metadata for _DequeBufferHeader, a4, v20, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v24);
    return swift_release();
  }
  return result;
}

uint64_t sub_24A571128(uint64_t a1, uint64_t a2)
{
  return sub_24A570EC8(a1, a2, *(uint64_t **)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_24A571148(CollectionsInternal::_DequeSlot *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a4;
  uint64_t v23 = a7;
  uint64_t v10 = *(void *)(a6 - 8);
  uint64_t v11 = (Swift::Int *)MEMORY[0x270FA5388](a1);
  Swift::Int v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Deque._UnsafeHandle.availableSegments()(v11, (uint64_t)v21);
  uint64_t v14 = type metadata accessor for _UnsafeMutableWrappedBuffer();
  _UnsafeMutableWrappedBuffer.suffix(_:)(a3, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v20, a6);
  uint64_t result = _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v13, v14, a6, v23);
  Swift::Int position = a1[1].position;
  BOOL v17 = __OFADD__(position, a3);
  Swift::Int v18 = position + a3;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    a1[1].Swift::Int position = v18;
    if (!__OFSUB__(0, a3))
    {
      uint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], -a3).position;
      a1[2].Swift::Int position = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5712B4(CollectionsInternal::_DequeSlot *a1, uint64_t a2)
{
  return sub_24A571148(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t Deque.prepend<A>(contentsOf:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v23 = v10;
  Swift::Int v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = v5;
  if ((void *)sub_24A5BB9F0() == a3) {
    sub_24A5BC560();
  }
  uint64_t result = sub_24A5BB880();
  if (v27 == 1)
  {
    uint64_t v12 = *v5;
    swift_retain();
    sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v21);
    swift_release();
    Deque.append<A>(contentsOf:)(a1, a2, a3, a4);
    uint64_t v13 = *v5;
    swift_retain();
    sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, v13, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v21);
    uint64_t v14 = swift_release();
    uint64_t v15 = MEMORY[0x270FA5388](v14);
    v20[8] = v10;
    v20[9] = a3;
    v20[10] = a4;
    v20[11] = v27;
    uint64_t v21 = v17;
    uint64_t v22 = v16;
    MEMORY[0x270FA5388](v15);
    void v20[2] = v10;
    v20[3] = sub_24A5715FC;
    v20[4] = v18;
    swift_retain();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A522700, (uint64_t)v20, v13, (uint64_t)&type metadata for _DequeBufferHeader, v10, v19, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E4E0], (uint64_t)&v27);
    return swift_release();
  }
  return result;
}

uint64_t sub_24A571560(CollectionsInternal::_DequeSlot *a1, int a2, Swift::Int forOffset, Swift::Int a4, uint64_t a5)
{
  uint64_t result = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  v9.Swift::Int position = a1->position;
  a1[1].Swift::Int position = a1->position;
  a1[2].Swift::Int position = result;
  BOOL v10 = __OFSUB__(v9.position, a5);
  Swift::Int v11 = v9.position - a5;
  if (v10)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v12 = a4 + v11;
  if (__OFADD__(a4, v11))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v12 >= a4) {
    return Deque._UnsafeHandle.closeGap(offsets:)(a4, v12, a1);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A5715FC(CollectionsInternal::_DequeSlot *a1, int a2)
{
  return sub_24A571560(a1, a2, v2[5], v2[6], v2[7]);
}

Swift::Int sub_24A571620(void *a1)
{
  return sub_24A571638(a1);
}

Swift::Int sub_24A571638(void *a1)
{
  return Deque._UnsafeHandle.uncheckedPrepend(contentsOf:)(*(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t Deque<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  CollectionsInternal::_DequeSlot v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v21 - v11;
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v20);
  v21[0] = a1;
  sub_24A5BC630();
  _OWORD v21[2] = Deque.makeIterator()(a2, a3);
  v21[3] = v13;
  v21[4] = v14;
  uint64_t v15 = type metadata accessor for Deque.Iterator();
  Deque.Iterator.next()(v15, (uint64_t)v12);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v16(v12, 1, a3) != 1)
  {
    uint64_t v18 = v7 + 32;
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    do
    {
      v17(v9, v12, a3);
      sub_24A5BB380();
      (*(void (**)(char *, uint64_t))(v18 - 24))(v9, a3);
      Deque.Iterator.next()(v15, (uint64_t)v12);
    }
    while (v16(v12, 1, a3) != 1);
  }
  return swift_release();
}

uint64_t Deque<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A5BC610();
  Deque<A>.hash(into:)((uint64_t)v7, a1, a2, a3);
  return sub_24A5BC690();
}

uint64_t sub_24A571914(uint64_t a1, uint64_t a2)
{
  return Deque<A>.hashValue.getter(*v2, *(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t sub_24A571928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Deque<A>.hash(into:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t sub_24A57193C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  sub_24A5BC610();
  Deque<A>.hash(into:)((uint64_t)v7, *v3, *(void *)(a2 + 16), v5);
  return sub_24A5BC690();
}

uint64_t sub_24A571994()
{
  return swift_getWitnessTable();
}

uint64_t Rope.extract<A>(from:to:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v39 = a3;
  *(void *)&long long v43 = a1;
  *((void *)&v43 + 1) = a2;
  uint64_t v42 = a7;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = type metadata accessor for Rope._Node();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v35 = (char *)&v34 - v13;
  uint64_t v44 = v10;
  uint64_t v45 = v9;
  uint64_t v14 = type metadata accessor for Rope.Builder();
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v37 = v14;
  MEMORY[0x270FA5388](v14);
  unint64_t v46 = (uint64_t *)((char *)&v34 - v15);
  uint64_t v16 = sub_24A5BBD20();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v34 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v34 = v8;
  v23((char *)&v34 - v21, v8, v16);
  uint64_t v38 = v12;
  Swift::Int v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v25 = v24(v22, 1, v11);
  uint64_t v26 = v22;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v26, v16);
  if (v25 == 1)
  {
    if (v43 == 0) {
      return Rope.init()(v42);
    }
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v29 = v43;
  Rope.Builder.init()(v46);
  v23(v20, v34, v16);
  if (v24(v20, 1, v11) == 1)
  {
LABEL_8:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v20, v16);
    __break(1u);
    return result;
  }
  uint64_t v30 = v38;
  uint64_t v31 = v35;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v20, v11);
  unint64_t v32 = v46;
  Rope._Node.extract<A>(from:to:in:into:)(v29, *((void (**)(void, void, void, void))&v43 + 1), v39, (uint64_t)v46, v11, v40, v41);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v11);
  uint64_t v33 = v37;
  Rope.Builder.finalize()(v37, v42);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v36 + 8))(v32, v33);
}

uint64_t Rope._Node.extract<A>(from:to:in:into:)(uint64_t a1, void (*a2)(void, void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a7 + 24))((char *)v7 + *(int *)(a5 + 36), a6, a7);
  if (a1 < 0 || (uint64_t)a2 < a1 || result < (uint64_t)a2)
  {
    __break(1u);
  }
  else if ((void (*)(void, void, void, void))a1 != a2)
  {
    uint64_t v33 = a4;
    uint64_t v17 = Rope._Node.header.getter();
    uint64_t v18 = *v7;
    uint64_t v32 = *v8 + 16;
    if ((v17 & 0xFF0000) != 0)
    {
      uint64_t v19 = v18
          + ((*(unsigned __int8 *)(*(void *)(a5 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a5 - 8) + 80));
      uint64_t v21 = *(void *)(a5 + 16);
      uint64_t v20 = *(void *)(a5 + 24);
      swift_getWitnessTable();
      uint64_t v22 = (unsigned __int16 *)nullsub_1(v32, v19, v21, a5, v20);
      uint64_t v24 = v23;
      swift_unknownObjectRetain();
      sub_24A572790(v22, v24, a1, a3, (uint64_t)a2, v33, v21, a6, a7);
    }
    else
    {
      uint64_t v26 = *(void *)(a5 + 16);
      uint64_t v25 = *(void *)(a5 + 24);
      uint64_t v27 = type metadata accessor for Rope._Item();
      uint64_t v28 = v18
          + ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80));
      swift_getWitnessTable();
      uint64_t v29 = (unsigned __int16 *)nullsub_1(v32, v28, v26, v27, v25);
      uint64_t v31 = v30;
      swift_unknownObjectRetain();
      sub_24A571FCC(v29, v31, a1, a3, a2, v33, v26, a6, a7);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_24A571FCC(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void, void), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v82 = a6;
  uint64_t v83 = a2;
  uint64_t v89 = (uint64_t)a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v74 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v72 = (char *)&v69 - v16;
  uint64_t v81 = swift_getAssociatedTypeWitness();
  uint64_t v85 = *(void *)(v81 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v81);
  uint64_t v71 = (void (*)(uint64_t, uint64_t))((char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v84 = (char *)&v69 - v19;
  uint64_t v87 = AssociatedConformanceWitness;
  uint64_t v20 = type metadata accessor for Rope._Item();
  unint64_t v86 = *(void (**)(char *, uint64_t))(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  unint64_t v77 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v70 = (uint64_t)&v69 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v69 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v69 - v28;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v88 = a4;
  uint64_t v31 = a4;
  uint64_t v32 = v83;
  uint64_t result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(a3, v31, 0, a1, v83, a7, v20, a8, WitnessTable, a9);
  uint64_t v35 = v89 - a3;
  if (__OFSUB__(v89, a3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v80 = v27;
  uint64_t v89 = result;
  uint64_t v78 = v34;
  uint64_t v36 = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v34, v35, v88, 1, a1, v32, a7, v20, a8, WitnessTable, a9);
  uint64_t v75 = v37;
  uint64_t v38 = Rope._UnsafeHandle.children.getter(a1, v32, a7, v20, v87, WitnessTable);
  uint64_t v83 = a8;
  uint64_t v39 = (void (*)(char *, uint64_t, uint64_t))*((void *)v86 + 2);
  uint64_t v40 = *((void *)v86 + 9);
  uint64_t v41 = v38 + v40 * v89;
  uint64_t v79 = v36;
  uint64_t v76 = a7;
  if (v89 == v36)
  {
    v39(v29, v41, v20);
    uint64_t v43 = v83;
    uint64_t v42 = (uint64_t)v84;
    uint64_t v89 = *(void *)(a9 + 32);
    ((void (*)(uint64_t, char *, uint64_t, uint64_t))v89)(v78, v29, v83, a9);
    Rope._Item.split(at:)(v42, v20, (uint64_t)v80);
    uint64_t v44 = v72;
    Rope._Item.summary.getter(v20);
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a9 + 24))(v44, v43, a9);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v44, v74);
    uint64_t result = v75 - v45;
    if (!__OFSUB__(v75, v45))
    {
      uint64_t v46 = (uint64_t)v71;
      uint64_t v47 = (uint64_t)v80;
      ((void (*)(uint64_t, char *, uint64_t, uint64_t))v89)(result, v80, v83, a9);
      uint64_t v48 = v70;
      Rope._Item.split(at:)(v46, v20, v70);
      unint64_t v49 = (void (*)(uint64_t, uint64_t))*((void *)v86 + 1);
      v49(v48, v20);
      v39((char *)v48, v47, v20);
      uint64_t v50 = type metadata accessor for Rope.Builder();
      Rope.Builder._insertBeforeTip(_:)(v48, v50);
      unint64_t v51 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
      uint64_t v52 = v46;
      uint64_t v53 = v81;
      v51(v52, v81);
      v49(v47, v20);
      v51((uint64_t)v84, v53);
      return ((uint64_t (*)(char *, uint64_t))v49)(v29, v20);
    }
    goto LABEL_13;
  }
  uint64_t v74 = v38;
  BOOL v54 = v77;
  v39(v77, v41, v20);
  unint64_t v55 = *(char **)(a9 + 32);
  uint64_t v56 = (uint64_t)v84;
  uint64_t v57 = v78;
  uint64_t v78 = a9;
  unint64_t v72 = v55;
  uint64_t v73 = a9 + 32;
  ((void (*)(uint64_t, char *, uint64_t, uint64_t))v55)(v57, v54, v83, a9);
  Rope._Item.split(at:)(v56, v20, (uint64_t)v29);
  unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
  v85 += 8;
  uint64_t v71 = v58;
  v58(v56, v81);
  unint64_t v59 = v86;
  uint64_t v60 = (uint64_t)v86 + 8;
  unint64_t v61 = (void (*)(char *, uint64_t))*((void *)v86 + 1);
  v61(v54, v20);
  (*((void (**)(char *, char *, uint64_t))v59 + 4))(v54, v29, v20);
  v39(v29, (uint64_t)v54, v20);
  uint64_t v62 = type metadata accessor for Rope.Builder();
  uint64_t result = Rope.Builder._insertBeforeTip(_:)((uint64_t)v29, v62);
  uint64_t v63 = v89 + 1;
  if (__OFADD__(v89, 1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v79 < v63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v86 = v61;
  uint64_t v87 = v60;
  if (v63 == v79)
  {
LABEL_11:
    v39(v29, v74 + v40 * v79, v20);
    uint64_t v66 = (uint64_t)v84;
    ((void (*)(uint64_t, char *, uint64_t, uint64_t))v72)(v75, v29, v83, v78);
    uint64_t v67 = (uint64_t)v80;
    Rope._Item.split(at:)(v66, v20, (uint64_t)v80);
    v71(v66, v81);
    unsigned __int8 v68 = v86;
    v86((char *)v67, v20);
    v39((char *)v67, (uint64_t)v29, v20);
    Rope.Builder._insertBeforeTip(_:)(v67, v62);
    v68(v29, v20);
    return ((uint64_t (*)(char *, uint64_t))v68)(v77, v20);
  }
  if (v63 < v79)
  {
    uint64_t v64 = ~v89 + v79;
    uint64_t v65 = v74 + v40 * v63;
    do
    {
      v39(v29, v65, v20);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v29, v62);
      v65 += v40;
      --v64;
    }
    while (v64);
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_24A572790(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v58 = a6;
  uint64_t v59 = a4;
  uint64_t v62 = a2;
  uint64_t v63 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v52 = (char *)&v50 - v14;
  uint64_t v15 = type metadata accessor for Rope._Node();
  uint64_t v61 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v50 - v16);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = a3;
  uint64_t v20 = a3;
  uint64_t v21 = v59;
  uint64_t v56 = a1;
  uint64_t result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v20, v59, 0, a1, v62, a7, v15, a8, WitnessTable, a9);
  uint64_t v24 = v63 - v19;
  if (__OFSUB__(v63, v19))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v60 = a8;
  uint64_t v49 = a8;
  uint64_t v63 = result;
  unint64_t v55 = (uint64_t (*)(uint64_t *, uint64_t))v23;
  uint64_t v25 = v21;
  uint64_t v26 = v21;
  uint64_t v27 = v56;
  uint64_t v28 = v62;
  uint64_t v29 = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v23, v24, v26, 1, v56, v62, a7, v15, v49, WitnessTable, a9);
  uint64_t v54 = v30;
  uint64_t v31 = (unsigned __int16 *)Rope._UnsafeHandle.children.getter(v27, v28, a7, v15, AssociatedConformanceWitness, WitnessTable);
  uint64_t v32 = v61;
  uint64_t v33 = *(void *)(v61 + 72);
  uint64_t v34 = (char *)v31 + v33 * v63;
  uint64_t v62 = v29;
  if (v63 == v29)
  {
    (*(void (**)(uint64_t *, char *, uint64_t))(v61 + 16))(v17, v34, v15);
    Rope._Node.extract<A>(from:to:in:into:)(v55, v54, v25, v58, v15, v60, a9);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v32 + 8))(v17, v15);
  }
  uint64_t v56 = v31;
  uint64_t v35 = *(int *)(v15 + 36);
  unint64_t v51 = (char *)v31 + v33 * v63;
  uint64_t v36 = v52;
  uint64_t v37 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, &v34[v35], AssociatedTypeWitness);
  uint64_t v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a9 + 24))(v36, v60, a9);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, AssociatedTypeWitness);
  uint64_t v38 = v25;
  uint64_t AssociatedTypeWitness = a9;
  uint64_t v39 = v60;
  uint64_t v40 = *(void (**)(uint64_t *, char *, uint64_t))(v32 + 16);
  v40(v17, v51, v15);
  uint64_t v41 = v38;
  uint64_t v42 = v58;
  Rope._Node.extract<A>(from:to:in:into:)(v55, v50, v41, v58, v15, v39, AssociatedTypeWitness);
  uint64_t v43 = *(uint64_t (**)(uint64_t *, uint64_t))(v32 + 8);
  uint64_t v61 = v32 + 8;
  uint64_t result = v43(v17, v15);
  uint64_t v44 = v63 + 1;
  if (__OFADD__(v63, 1)) {
    goto LABEL_12;
  }
  if (v62 < v44)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v55 = v43;
  uint64_t v45 = v42;
  if (v44 == v62)
  {
LABEL_10:
    v40(v17, (char *)v56 + v33 * v62, v15);
    Rope._Node.extract<A>(from:to:in:into:)(0, v54, v59, v45, v15, v60, AssociatedTypeWitness);
    return v55(v17, v15);
  }
  if (v44 < v62)
  {
    uint64_t v46 = ~v63 + v62;
    uint64_t v47 = (char *)v56 + v33 * v44;
    uint64_t v45 = v58;
    do
    {
      v40(v17, v47, v15);
      uint64_t v48 = type metadata accessor for Rope.Builder();
      Rope.Builder._insertBeforeTip(_:)(v17, v48);
      v47 += v33;
      --v46;
    }
    while (v46);
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

BOOL OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v10 >= _s19CollectionsInternal4HeapV5countSivg_0()) {
    return 0;
  }
  return OrderedSet.isSubset(of:)(a1, a2, a3, a4, a5);
}

uint64_t OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v8 >= sub_24A5BBA40()) {
    return 0;
  }
  return OrderedSet.isSubset(of:)(a1, a2, a3, a4);
}

uint64_t OrderedSet.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v52 = a7;
  uint64_t v53 = a3;
  uint64_t v51 = a2;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v49 = (char *)&v45 - v22;
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for OrderedSet() == a5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, a1, a5);
    swift_dynamicCast();
    char v35 = OrderedSet.isStrictSubset(of:)(v54[0], v54[1], v51, v53, a4);
    swift_release();
    swift_release();
    return v35 & 1;
  }
  uint64_t v46 = v11;
  uint64_t v27 = v53;
  uint64_t v28 = sub_24A5BBA90();
  if (v28 == a5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, a1, a5);
    swift_dynamicCast();
    char v35 = OrderedSet.isStrictSubset(of:)(v54[0], v51, v27, a4);
    swift_bridgeObjectRelease();
    return v35 & 1;
  }
  uint64_t v50 = a6;
  uint64_t v48 = *(void *)(v27 + 16);
  if (!v48)
  {
    MEMORY[0x270FA5388](v28);
    *(&v45 - 4) = a4;
    *(&v45 - 3) = a5;
    uint64_t v36 = v52;
    *(&v45 - 2) = v50;
    *(&v45 - 1) = v36;
    swift_retain();
    swift_retain();
    char v35 = sub_24A5BB900();
    swift_release();
    swift_release();
    return v35 & 1;
  }
  uint64_t v29 = v51;
  swift_retain();
  swift_retain();
  sub_24A5BC260();
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v47(v49, v20, a4);
  uint64_t v30 = sub_24A5BB870();
  uint64_t v31 = v50;
  if (v30 != 2)
  {
    if (v30)
    {
      uint64_t v37 = (void (**)(char *, uint64_t))(v46 + 8);
      uint64_t v38 = 1;
      while (v48 != v38)
      {
        sub_24A5BC260();
        ++v38;
        v47(v17, v14, a4);
        char v39 = sub_24A5BB920();
        uint64_t v40 = (uint64_t (*)(char *, uint64_t))*v37;
        uint64_t v30 = ((uint64_t (*)(char *, uint64_t))*v37)(v17, a4);
        if ((v39 & 1) == 0)
        {
          v40(v49, a4);
          swift_release();
          goto LABEL_17;
        }
      }
      MEMORY[0x270FA5388](v30);
      *(&v45 - 6) = a4;
      *(&v45 - 5) = a5;
      uint64_t v41 = v51;
      uint64_t v42 = v52;
      uint64_t v43 = v53;
      *(&v45 - 4) = v50;
      *(&v45 - 3) = v42;
      *(&v45 - 2) = v41;
      *(&v45 - 1) = v43;
      char v44 = sub_24A5BB890();
      (*v37)(v49, a4);
      swift_release();
      swift_release();
      char v35 = v44 ^ 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, a4);
      swift_release();
LABEL_17:
      swift_release();
      char v35 = 0;
    }
    return v35 & 1;
  }
  uint64_t v32 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t result = MEMORY[0x270FA5388](v32);
  *(&v45 - 8) = a4;
  *(&v45 - 7) = a5;
  *(&v45 - 6) = v31;
  *(&v45 - 5) = v34;
  *(&v45 - 4) = a1;
  *(&v45 - 3) = v29;
  *(&v45 - 2) = v27;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v54[0]) = 2;
    uint64_t result = (uint64_t)sub_24A5813E4((unint64_t)(result + 63) >> 6, v54, (void *(*)(char *__return_ptr, unsigned char **))sub_24A5737C8);
    if (LOBYTE(v54[0]) != 2)
    {
      char v35 = v54[0] & 1;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, a4);
      swift_release();
      swift_release();
      return v35 & 1;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A573374@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, unsigned char *a9@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v50 = a4;
  uint64_t v46 = a3;
  uint64_t v49 = a2;
  uint64_t v40 = a9;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_24A5BBD20();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v39 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v49, a6);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = v23;
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v45 = AssociatedConformanceWitness;
  sub_24A5BBEE0();
  char v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v44(v17, 1, a5) != 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v42 = 0;
    uint64_t v43 = v29;
    uint64_t v30 = (void (**)(char *, uint64_t))(v11 + 8);
    v29(v13, v17, a5);
    while (1)
    {
      unint64_t result = OrderedSet._find(_:)();
      if (v32)
      {
        if (v28)
        {
          uint64_t v28 = 1;
LABEL_5:
          (*v30)(v13, a5);
          uint64_t v25 = v28;
          goto LABEL_6;
        }
        uint64_t v38 = _s19CollectionsInternal4HeapV5countSivg_0();
        (*v30)(v13, a5);
        uint64_t v25 = 1;
        if (v42 == v38) {
          goto LABEL_19;
        }
      }
      else
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
          return result;
        }
        uint64_t v33 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v34 = *(void *)(*v41 + v33);
        *(void *)(*v41 + v33) = v34 | (1 << result);
        if ((v34 & (1 << result)) != 0) {
          goto LABEL_5;
        }
        uint64_t v35 = v42 + 1;
        uint64_t v36 = _s19CollectionsInternal4HeapV5countSivg_0();
        (*v30)(v13, a5);
        uint64_t v42 = v35;
        BOOL v37 = v35 == v36;
        uint64_t v25 = (v35 != v36) & v28;
        if (v37 && ((v28 ^ 1) & 1) == 0)
        {
          LOBYTE(v25) = 1;
LABEL_19:
          uint64_t v27 = v40;
          uint64_t v26 = v39;
          goto LABEL_20;
        }
      }
LABEL_6:
      sub_24A5BBEE0();
      uint64_t v28 = v25;
      if (v44(v17, 1, a5) == 1)
      {
        LOBYTE(v25) = 0;
        goto LABEL_19;
      }
      v43(v13, v17, a5);
    }
  }
  LOBYTE(v25) = 0;
  uint64_t v26 = v39;
  uint64_t v27 = v40;
LABEL_20:
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v48, v49);
  *uint64_t v27 = v25;
  return result;
}

unint64_t sub_24A5737C8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_24A573374(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(char **)(v2 + 40), a2);
}

BOOL sub_24A5737F0()
{
  return OrderedSet.contains(_:)();
}

uint64_t BitArray.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A5BC6B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v15[2] = a1;
  uint64_t v15[3] = a2;
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v11 = *MEMORY[0x263F8E7E8];
  uint64_t v12 = sub_24A5BC6A0();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8E830], v4);
  sub_24A50D0D0();
  swift_bridgeObjectRetain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A573A24()
{
  uint64_t v1 = sub_24A5BC6B0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0[1];
  uint64_t v14 = *v0;
  uint64_t v15 = v8;
  v13[0] = v14;
  v13[1] = v8;
  uint64_t v9 = *MEMORY[0x263F8E7E8];
  uint64_t v10 = sub_24A5BC6A0();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v7, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  sub_24A50D0D0();
  swift_bridgeObjectRetain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A573C1C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)*v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = (uint64_t)v4;
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_24A499D4C(v4);
  uint64_t v4 = (void *)result;
  *uint64_t v2 = result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4[2] > a2) {
    return (uint64_t)nullsub_1;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_24A573CAC()
{
  unint64_t v1 = v0[6];
  unint64_t v2 = v0[10];
  unint64_t v3 = v1 >> 10;
  unint64_t v4 = v2 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = v0;
  uint64_t v7 = *v0;
  uint64_t v6 = v0[1];
  uint64_t v8 = v0[2];
  uint64_t v9 = v0[3];
  uint64_t v10 = v0[4];
  uint64_t v11 = v0[5];
  unint64_t v44 = v0[8];
  uint64_t v45 = v0[7];
  uint64_t v43 = v0[9];
  unint64_t v12 = v0[11];
  unint64_t v13 = v0[12];
  uint64_t v14 = v0[13];
  v51[6] = *v0;
  v51[7] = v6;
  uint64_t v49 = v8;
  uint64_t v50 = v6;
  v51[8] = v8;
  v51[9] = v9;
  uint64_t v47 = v10;
  uint64_t v48 = v9;
  v51[10] = v10;
  v51[11] = v11;
  uint64_t v46 = v11;
  unint64_t v15 = sub_24A4A7FB4(v2, v12, v13, v14, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v19 = (v15 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v19 < v3 || v19 >= v4) {
    goto LABEL_10;
  }
  sub_24A58F608(v15 & 0xFFFFFFFFFFFFF8FFLL | 0x300, v16, v17, v18, v51);
  swift_unknownObjectRetain();
  unint64_t v20 = sub_24A4A7FB4(v2, v12, v13, v14, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v22 = v21;
  unint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_unknownObjectRelease();
  unint64_t v27 = (v20 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v27 < v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= v27)
  {
    swift_unknownObjectRetain();
    unint64_t v28 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v1, v45, v44, v43);
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v33 = v22;
    uint64_t v35 = v34;
    unint64_t v36 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v20 & 0xFFFFFFFFFFFFF8FFLL | 0x300, v33, v24, v26);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    swift_unknownObjectRelease();
    *uint64_t v5 = v7;
    v5[1] = v50;
    _OWORD v5[2] = v49;
    _OWORD v5[3] = v48;
    v5[4] = v47;
    v5[5] = v46;
    v5[6] = v28;
    v5[7] = v30;
    v5[8] = v32;
    v5[9] = v35;
    v5[10] = v36;
    v5[11] = v38;
    v5[12] = v40;
    v5[13] = v42;
    return;
  }
LABEL_12:
  __break(1u);
}

void sub_24A573E9C()
{
  unint64_t v1 = v0[6];
  unint64_t v2 = v0[10];
  unint64_t v3 = v1 >> 10;
  unint64_t v4 = v2 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = v0;
  uint64_t v6 = *v0;
  unint64_t v38 = v0[8];
  uint64_t v39 = v0[7];
  uint64_t v37 = v0[9];
  uint64_t v8 = v0[11];
  unint64_t v7 = v0[12];
  uint64_t v9 = v0[13];
  uint64_t v44 = v0[1];
  uint64_t v42 = v0[3];
  uint64_t v43 = v0[2];
  uint64_t v40 = v0[5];
  uint64_t v41 = v0[4];
  unint64_t v13 = sub_24A4A8740(v2, v8, v7, v9, 0xFFFFFFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFF8FFLL;
  if (v13 >> 10 < v3 || v13 >> 10 >= v4) {
    goto LABEL_10;
  }
  sub_24A58FF4C(v13 | 0x100, v10, v11, v12);
  swift_unknownObjectRetain();
  unint64_t v14 = sub_24A4A8740(v2, v8, v7, v9, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_unknownObjectRelease();
  unint64_t v21 = (v14 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v21 < v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= v21)
  {
    swift_unknownObjectRetain();
    unint64_t v22 = sub_24A4965FC(v1, v39, v38, v37);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v27 = v16;
    uint64_t v29 = v28;
    unint64_t v30 = sub_24A4965FC(v14 & 0xFFFFFFFFFFFFF8FFLL | 0x100, v27, v18, v20);
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    swift_unknownObjectRelease();
    *uint64_t v5 = v6;
    v5[1] = v44;
    _OWORD v5[2] = v43;
    _OWORD v5[3] = v42;
    v5[4] = v41;
    v5[5] = v40;
    v5[6] = v22;
    v5[7] = v24;
    v5[8] = v26;
    v5[9] = v29;
    v5[10] = v30;
    v5[11] = v32;
    v5[12] = v34;
    v5[13] = v36;
    return;
  }
LABEL_12:
  __break(1u);
}

unint64_t sub_24A574090(unint64_t result)
{
  int64_t v2 = -(uint64_t)result;
  if (__OFSUB__(0, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v3 = v1;
  unint64_t v4 = v1[6];
  uint64_t result = v1[10];
  unint64_t v5 = result >> 10;
  if (result >> 10 < v4 >> 10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *v1;
  uint64_t v35 = v1[1];
  uint64_t v33 = v1[3];
  uint64_t v34 = v1[2];
  uint64_t v31 = v1[5];
  uint64_t v32 = v1[4];
  uint64_t v28 = v1[7];
  uint64_t v29 = v1[9];
  unint64_t v7 = v1[8];
  uint64_t result = sub_24A58FE5C(result, v1[11], v1[12], v1[13], v2, v4, v28, v7, v29);
  if (v10 != 2)
  {
    unint64_t v11 = result;
    if (result >> 10 >= v4 >> 10)
    {
      if (v5 >= result >> 10)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v8;
        unint64_t v14 = v9;
        swift_unknownObjectRetain();
        unint64_t v30 = sub_24A4965FC(v4, v28, v7, v29);
        uint64_t v16 = v15;
        uint64_t v18 = v17;
        uint64_t v20 = v19;
        unint64_t v21 = sub_24A4965FC(v11, v13, v14, v12);
        uint64_t v23 = v22;
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        swift_unknownObjectRelease();
        *unint64_t v3 = v6;
        v3[1] = v35;
        v3[2] = v34;
        v3[3] = v33;
        v3[4] = v32;
        v3[5] = v31;
        v3[6] = v30;
        v3[7] = v16;
        v3[8] = v18;
        v3[9] = v20;
        v3[10] = v21;
        v3[11] = v23;
        v3[12] = v25;
        v3[13] = v27;
        return 1;
      }
      goto LABEL_10;
    }
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A574218(unint64_t result)
{
  int64_t v2 = -(uint64_t)result;
  if (__OFSUB__(0, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v3 = v1;
  unint64_t v4 = v1[6];
  uint64_t result = v1[10];
  unint64_t v5 = result >> 10;
  if (result >> 10 < v4 >> 10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *v1;
  uint64_t v35 = v1[1];
  uint64_t v33 = v1[3];
  uint64_t v34 = v1[2];
  uint64_t v31 = v1[5];
  uint64_t v32 = v1[4];
  uint64_t v28 = v1[7];
  uint64_t v29 = v1[9];
  unint64_t v7 = v1[8];
  uint64_t result = BigString.index(_:offsetBy:limitedBy:)(result, v1[11], v1[12], v1[13], v2, v4, v28, v7, v29);
  if (v10 != 2)
  {
    unint64_t v11 = result;
    if (result >> 10 >= v4 >> 10)
    {
      if (v5 >= result >> 10)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v8;
        unint64_t v14 = v9;
        swift_unknownObjectRetain();
        unint64_t v30 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v28, v7, v29);
        uint64_t v16 = v15;
        uint64_t v18 = v17;
        uint64_t v20 = v19;
        unint64_t v21 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v11, v13, v14, v12);
        uint64_t v23 = v22;
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        swift_unknownObjectRelease();
        *unint64_t v3 = v6;
        v3[1] = v35;
        v3[2] = v34;
        v3[3] = v33;
        v3[4] = v32;
        v3[5] = v31;
        v3[6] = v30;
        v3[7] = v16;
        v3[8] = v18;
        v3[9] = v20;
        v3[10] = v21;
        v3[11] = v23;
        v3[12] = v25;
        v3[13] = v27;
        return 1;
      }
      goto LABEL_10;
    }
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_24A5743A0()
{
  unint64_t v1 = v0[6];
  unint64_t v2 = v0[10];
  unint64_t v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v4 = v0;
  uint64_t v6 = *v0;
  uint64_t v5 = v0[1];
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[5];
  unint64_t v11 = v0[7];
  unint64_t v12 = v0[8];
  uint64_t v13 = v0[9];
  unint64_t v37 = v0[12];
  uint64_t v38 = v0[11];
  uint64_t v36 = v0[13];
  v44[6] = *v0;
  void v44[7] = v5;
  uint64_t v42 = v7;
  uint64_t v43 = v5;
  v44[8] = v7;
  v44[9] = v8;
  uint64_t v40 = v9;
  uint64_t v41 = v8;
  v44[10] = v9;
  v44[11] = v10;
  uint64_t v39 = v10;
  sub_24A58F608(v1, v11, v12, v13, v44);
  swift_unknownObjectRetain();
  unint64_t v14 = sub_24A4A7FB4(v1, v11, v12, v13, 1uLL);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_unknownObjectRelease();
  unint64_t v21 = (v14 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v2 >> 10 < v21)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v21 >= v3)
  {
    swift_unknownObjectRetain();
    unint64_t v22 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v14 & 0xFFFFFFFFFFFFF8FFLL | 0x300, v16, v18, v20);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    unint64_t v29 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v2, v38, v37, v36);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    swift_unknownObjectRelease();
    *unint64_t v4 = v6;
    v4[1] = v43;
    unint64_t v4[2] = v42;
    _OWORD v4[3] = v41;
    v4[4] = v40;
    v4[5] = v39;
    v4[6] = v22;
    v4[7] = v24;
    v4[8] = v26;
    v4[9] = v28;
    v4[10] = v29;
    v4[11] = v31;
    v4[12] = v33;
    v4[13] = v35;
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_24A574568()
{
  unint64_t v1 = v0[6];
  unint64_t v2 = v0[10];
  unint64_t v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v4 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = v0[7];
  unint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  unint64_t v32 = v0[12];
  uint64_t v33 = v0[11];
  uint64_t v31 = v0[13];
  uint64_t v38 = v0[1];
  uint64_t v36 = v0[3];
  uint64_t v37 = v0[2];
  uint64_t v34 = v0[5];
  uint64_t v35 = v0[4];
  sub_24A58FF4C(v1, v6, v7, v8);
  swift_unknownObjectRetain();
  unint64_t v9 = sub_24A4A8740(v1, v6, v7, v8, 1uLL);
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_unknownObjectRelease();
  unint64_t v16 = (v9 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v2 >> 10 < v16)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v16 >= v3)
  {
    swift_unknownObjectRetain();
    unint64_t v17 = sub_24A4965FC(v9 & 0xFFFFFFFFFFFFF8FFLL | 0x100, v11, v13, v15);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    unint64_t v24 = sub_24A4965FC(v2, v33, v32, v31);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    swift_unknownObjectRelease();
    *unint64_t v4 = v5;
    v4[1] = v38;
    unint64_t v4[2] = v37;
    _OWORD v4[3] = v36;
    v4[4] = v35;
    v4[5] = v34;
    v4[6] = v17;
    v4[7] = v19;
    v4[8] = v21;
    v4[9] = v23;
    v4[10] = v24;
    v4[11] = v26;
    v4[12] = v28;
    v4[13] = v30;
    return;
  }
LABEL_9:
  __break(1u);
}

unint64_t sub_24A574720(unint64_t result)
{
  if (result)
  {
    int64_t v2 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v3 = v1;
      uint64_t result = v1[6];
      unint64_t v4 = v1[10];
      unint64_t v5 = result >> 10;
      if (v4 >> 10 >= result >> 10)
      {
        uint64_t v6 = *v1;
        uint64_t v35 = v1[1];
        uint64_t v33 = v1[3];
        uint64_t v34 = v1[2];
        uint64_t v31 = v1[5];
        uint64_t v32 = v1[4];
        uint64_t v28 = v1[13];
        unint64_t v29 = v1[12];
        uint64_t v30 = v1[11];
        uint64_t result = BigString.index(_:offsetBy:limitedBy:)(result, v1[7], v1[8], v1[9], v2, v4, v30, v29, v28);
        if (v9 == 2)
        {
LABEL_13:
          __break(1u);
          return result;
        }
        unint64_t v10 = result;
        if (v4 >> 10 >= result >> 10)
        {
          if (result >> 10 >= v5)
          {
            uint64_t v11 = v7;
            unint64_t v12 = v8;
            uint64_t v13 = v9;
            swift_unknownObjectRetain();
            unint64_t v14 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v10, v11, v12, v13);
            uint64_t v16 = v15;
            uint64_t v18 = v17;
            uint64_t v20 = v19;
            unint64_t v21 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v30, v29, v28);
            uint64_t v23 = v22;
            uint64_t v25 = v24;
            uint64_t v27 = v26;
            uint64_t result = swift_unknownObjectRelease();
            *unint64_t v3 = v6;
            v3[1] = v35;
            v3[2] = v34;
            v3[3] = v33;
            v3[4] = v32;
            v3[5] = v31;
            v3[6] = v14;
            v3[7] = v16;
            v3[8] = v18;
            v3[9] = v20;
            v3[10] = v21;
            v3[11] = v23;
            v3[12] = v25;
            v3[13] = v27;
            return result;
          }
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

unint64_t sub_24A5748A4(unint64_t result)
{
  if (result)
  {
    int64_t v2 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v3 = v1;
      uint64_t result = v1[6];
      unint64_t v4 = v1[10];
      unint64_t v5 = result >> 10;
      if (v4 >> 10 >= result >> 10)
      {
        uint64_t v6 = *v1;
        uint64_t v35 = v1[1];
        uint64_t v33 = v1[3];
        uint64_t v34 = v1[2];
        uint64_t v31 = v1[5];
        uint64_t v32 = v1[4];
        uint64_t v28 = v1[13];
        unint64_t v29 = v1[12];
        uint64_t v30 = v1[11];
        uint64_t result = sub_24A58FE5C(result, v1[7], v1[8], v1[9], v2, v4, v30, v29, v28);
        if (v9 == 2)
        {
LABEL_13:
          __break(1u);
          return result;
        }
        unint64_t v10 = result;
        if (v4 >> 10 >= result >> 10)
        {
          if (result >> 10 >= v5)
          {
            uint64_t v11 = v7;
            unint64_t v12 = v8;
            uint64_t v13 = v9;
            swift_unknownObjectRetain();
            unint64_t v14 = sub_24A4965FC(v10, v11, v12, v13);
            uint64_t v16 = v15;
            uint64_t v18 = v17;
            uint64_t v20 = v19;
            unint64_t v21 = sub_24A4965FC(v4, v30, v29, v28);
            uint64_t v23 = v22;
            uint64_t v25 = v24;
            uint64_t v27 = v26;
            uint64_t result = swift_unknownObjectRelease();
            *unint64_t v3 = v6;
            v3[1] = v35;
            v3[2] = v34;
            v3[3] = v33;
            v3[4] = v32;
            v3[5] = v31;
            v3[6] = v14;
            v3[7] = v16;
            v3[8] = v18;
            v3[9] = v20;
            v3[10] = v21;
            v3[11] = v23;
            v3[12] = v25;
            v3[13] = v27;
            return result;
          }
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

void sub_24A574A28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  ++v2[5];
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v64 = MEMORY[0x263F8EE78];
  long long v65 = 0u;
  long long v66 = 0u;
  memset(v67, 0, 30);
  *(void *)unsigned __int8 v68 = 0;
  *(void *)&v68[8] = 0;
  *(void *)&v68[14] = 0;
  uint64_t v69 = MEMORY[0x263F8EE78];
  uint64_t v6 = *v2;
  if (*v2 && *(_WORD *)(v6 + 16))
  {
    long long v7 = *(_OWORD *)(v2 + 1);
    long long v8 = *(_OWORD *)(v2 + 3);
    uint64_t v63 = a1;
    uint64_t v60 = v6;
    long long v61 = v7;
    long long v62 = v8;
    *(_OWORD *)int64_t v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    v2[4] = 0;
    if (!*(unsigned char *)(v6 + 18))
    {
LABEL_26:
      uint64_t v17 = sub_24A57AA88(v6 + 16, v6 + 24, &v63);
      unint64_t v19 = v18;
      uint64_t v70 = v6;
      long long v71 = v61;
      long long v72 = v62;
      swift_unknownObjectRetain();
      sub_24A5751B0(v17, (uint64_t)&v64, (uint64_t)&v55);
      uint64_t v21 = v55;
      unint64_t v20 = v56;
      unint64_t v22 = v57 | ((unint64_t)v58 << 32) | ((unint64_t)v59 << 40);
      unint64_t v23 = sub_24A494ED0(v19, v55, v56);
      uint64_t v24 = sub_24A494C18(v23, v21, v20, v22);
      unsigned int v26 = v25;
      uint64_t v53 = v24;
      uint64_t v54 = HIBYTE(v25);
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_24A494C00(v23, v21, v20);
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      uint64_t v34 = MEMORY[0x24C5C68C0](v27, v29, v31, v33);
      unint64_t v36 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_24A5BB830();
      uint64_t v39 = v38;
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      uint64_t v44 = MEMORY[0x24C5C68C0](v37, v39, v41, v43);
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A575508(v34, v36, (v26 << 16) & 0xFF0000 | HIWORD(v53) | (v26 << 16) & 0xFF000000 | (v54 << 40) | ((unint64_t)BYTE2(v26) << 32));
      swift_bridgeObjectRetain();
      sub_24A494F18(v44, v46, v53 & 0xFFFFFFFFFFFFLL);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v47 = *(void *)&v67[1];
      int v48 = DWORD2(v67[1]);
      __int16 v49 = WORD6(v67[1]);
      int v50 = *(_DWORD *)&v68[16];
      __int16 v51 = *(_WORD *)&v68[20];
      uint64_t v52 = v69;
      *(void *)a2 = v64;
      *(_OWORD *)(a2 + 8) = v65;
      *(_OWORD *)(a2 + 24) = v66;
      *(_OWORD *)(a2 + 40) = v67[0];
      *(void *)(a2 + 56) = v47;
      *(_WORD *)(a2 + 68) = v49;
      *(_DWORD *)(a2 + 64) = v48;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)v68;
      *(_WORD *)(a2 + 92) = v51;
      *(_DWORD *)(a2 + 88) = v50;
      *(void *)(a2 + 96) = v52;
      return;
    }
    while (1)
    {
      uint64_t v10 = *(unsigned __int16 *)(v6 + 16);
      if (*(_WORD *)(v6 + 16))
      {
        uint64_t v11 = *(void *)(v6 + 56);
        BOOL v12 = __OFSUB__(v3, v11);
        uint64_t v13 = v3 - v11;
        if (v12) {
          goto LABEL_30;
        }
        if (v13 <= 0)
        {
          uint64_t v9 = 0;
        }
        else
        {
          if (v10 == 1) {
            goto LABEL_33;
          }
          uint64_t v14 = *(void *)(v6 + 96);
          uint64_t v3 = v13 - v14;
          if (__OFSUB__(v13, v14)) {
            goto LABEL_31;
          }
          if (v3 >= 1)
          {
            if (v10 == 2) {
              goto LABEL_33;
            }
            uint64_t v15 = (void *)(v6 + 136);
            uint64_t v9 = 2;
            while (v10 != v9)
            {
              uint64_t v16 = v3 - *v15;
              if (__OFSUB__(v3, *v15)) {
                goto LABEL_29;
              }
              if (v16 < 1) {
                goto LABEL_6;
              }
              ++v9;
              v15 += 5;
              uint64_t v3 = v16;
              if (v10 == v9) {
                goto LABEL_33;
              }
            }
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            return;
          }
          uint64_t v9 = 1;
          uint64_t v3 = v13;
        }
      }
      else
      {
        if (v3) {
          goto LABEL_33;
        }
        uint64_t v9 = -1;
      }
LABEL_6:
      sub_24A574DF4((void *)v9, (uint64_t)&v64);
      uint64_t v6 = v60;
      if (!*(unsigned char *)(v60 + 18))
      {
        uint64_t v63 = v3;
        goto LABEL_26;
      }
    }
  }
  if (a1) {
    goto LABEL_32;
  }
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a2 + 8) = 0uLL;
  *(_OWORD *)(a2 + 24) = 0uLL;
  *(_OWORD *)(a2 + 40) = 0uLL;
  *(_OWORD *)(a2 + 54) = 0uLL;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 86) = 0;
  *(void *)(a2 + 96) = v5;
}

void sub_24A574DF4(void *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    long long v6 = v2[1];
    long long v71 = *v2;
    long long v72 = v6;
    uint64_t v73 = *((void *)v2 + 4);
    sub_24A4CBC1C((uint64_t)v60);
    swift_unknownObjectRelease();
    long long v7 = v60[1];
    *int64_t v2 = v60[0];
    v2[1] = v7;
    *((void *)v2 + 4) = v61;
  }
  uint64_t v8 = *(unsigned __int16 *)(*(void *)v2 + 16);
  if ((void *)(v8 - 2) == a1)
  {
    sub_24A57582C((void *)(v8 - 1), (uint64_t)v62);
    uint64_t v9 = v62[0];
    uint64_t v54 = v62[1];
    uint64_t v10 = v62[3];
    uint64_t v51 = v62[4];
    uint64_t v52 = v62[2];
    *(void *)&v69[0] = 0;
    swift_unknownObjectRetain();
    MEMORY[0x24C5C7E90](v69, 8);
    uint64_t v11 = *(void *)&v69[0];
    BOOL v12 = *(void **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      BOOL v12 = sub_24A499D74(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      BOOL v12 = sub_24A499D74((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    void v12[2] = v14 + 1;
    uint64_t v15 = &v12[6 * v14];
    void v15[4] = v9;
    v15[5] = v54;
    void v15[6] = v52;
    v15[7] = v10;
    v15[8] = v51;
    v15[9] = v11;
    sub_24A496BE8((uint64_t)v62);
    *(void *)(a2 + 96) = v12;
  }
  if (a1 == (void *)1)
  {
    sub_24A57582C(0, (uint64_t)v63);
    sub_24A575950(v63, v16, v17, v18);
    a1 = 0;
  }
  sub_24A57582C(a1, (uint64_t)v64);
  long long v22 = *((_OWORD *)v3 + 1);
  v67[0] = *(_OWORD *)v3;
  v67[1] = v22;
  uint64_t v68 = v3[4];
  uint64_t v23 = v68;
  uint64_t v24 = *v3;
  long long v25 = *(_OWORD *)(v3 + 1);
  long long v26 = *(_OWORD *)(v3 + 3);
  long long v27 = v64[1];
  *(_OWORD *)uint64_t v3 = v64[0];
  *((_OWORD *)v3 + 1) = v27;
  v3[4] = v65;
  uint64_t v59 = v23;
  long long v57 = v67[0];
  long long v58 = v22;
  if (*(_WORD *)(*(void *)&v67[0] + 16))
  {
    if (a1)
    {
      if (a1 == (void *)*(unsigned __int16 *)(*(void *)&v67[0] + 16))
      {
        sub_24A575950(v67, v19, v20, v21);
      }
      else
      {
        sub_24A5B258C((uint64_t)a1, (uint64_t)v66);
        uint64_t v35 = v66[0];
        uint64_t v36 = v66[1];
        uint64_t v37 = a2;
        uint64_t v38 = v66[2];
        uint64_t v39 = v66[3];
        uint64_t v40 = v66[4];
        v69[0] = v57;
        v69[1] = v58;
        uint64_t v70 = v59;
        swift_unknownObjectRetain();
        sub_24A575950(v69, v41, v42, v43);
        uint64_t v56 = 0;
        swift_unknownObjectRetain();
        MEMORY[0x24C5C7E90](&v56, 8);
        uint64_t v44 = v56;
        uint64_t v45 = v37;
        unint64_t v46 = *(void **)(v37 + 96);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v46 = sub_24A499D74(0, v46[2] + 1, 1, v46);
        }
        unint64_t v48 = v46[2];
        unint64_t v47 = v46[3];
        if (v48 >= v47 >> 1) {
          unint64_t v46 = sub_24A499D74((void *)(v47 > 1), v48 + 1, 1, v46);
        }
        void v46[2] = v48 + 1;
        __int16 v49 = &v46[6 * v48];
        v49[4] = v35;
        v49[5] = v36;
        v49[6] = v38;
        v49[7] = v39;
        v49[8] = v40;
        v49[9] = v44;
        sub_24A496BE8((uint64_t)v66);
        sub_24A496BE8((uint64_t)v69);
        *(void *)(v45 + 96) = v46;
      }
    }
    else
    {
      long long v53 = v26;
      long long v55 = v25;
      *(void *)&v69[0] = 0;
      swift_unknownObjectRetain();
      MEMORY[0x24C5C7E90](v69, 8);
      uint64_t v28 = *(void *)&v69[0];
      uint64_t v29 = *(void **)(a2 + 96);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v29 = sub_24A499D74(0, v29[2] + 1, 1, v29);
      }
      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      long long v33 = v53;
      long long v32 = v55;
      if (v31 >= v30 >> 1)
      {
        int v50 = sub_24A499D74((void *)(v30 > 1), v31 + 1, 1, v29);
        long long v33 = v53;
        long long v32 = v55;
        uint64_t v29 = v50;
      }
      _OWORD v29[2] = v31 + 1;
      uint64_t v34 = &v29[6 * v31];
      v34[4] = v24;
      *(_OWORD *)(v34 + 5) = v32;
      *(_OWORD *)(v34 + 7) = v33;
      v34[9] = v28;
      sub_24A496BE8((uint64_t)v67);
      *(void *)(a2 + 96) = v29;
    }
  }
  else
  {
    sub_24A496BE8((uint64_t)v67);
  }
}

uint64_t sub_24A5751B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  long long v9 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v3;
  uint64_t v8 = *(void *)v44;
  *(_OWORD *)&v44[16] = v9;
  *(void *)&unsigned char v44[32] = *(void *)(v3 + 32);
  swift_unknownObjectRetain();
  uint64_t v10 = *(void *)v44;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    long long v47 = *(_OWORD *)v44;
    long long v48 = *(_OWORD *)&v44[16];
    uint64_t v49 = *(void *)&v44[32];
    sub_24A4CBC1C((uint64_t)v44);
    swift_unknownObjectRelease();
    uint64_t v10 = *(void *)v44;
  }
  if (*(unsigned __int16 *)(v10 + 16) - 2 == a1)
  {
    sub_24A575C80(v46, *(unsigned __int16 *)(v8 + 16) - 1);
    sub_24A575508(*(uint64_t *)v46, *(unint64_t *)&v46[8], *(unsigned int *)&v46[16] | ((unint64_t)v46[20] << 32) | ((unint64_t)v46[21] << 40));
  }
  if (a1 == 1)
  {
    sub_24A575C80(v46, 0);
    sub_24A494F18(*(uint64_t *)v46, *(unint64_t *)&v46[8], *(unsigned int *)&v46[16] | ((unint64_t)v46[20] << 32) | ((unint64_t)v46[21] << 40));
    a1 = 0;
  }
  sub_24A575C80((unsigned __int8 *)v41, a1);
  uint64_t v11 = *(void *)v44;
  if (!*(_WORD *)(*(void *)v44 + 16)) {
    goto LABEL_11;
  }
  if (!a1)
  {
    uint64_t v15 = *(void *)&v44[24];
    uint64_t v36 = *(void *)&v44[16];
    uint64_t v38 = *(void *)&v44[8];
    uint64_t v16 = *(void *)&v44[32];
    *(void *)unint64_t v46 = 0;
    swift_unknownObjectRetain_n();
    MEMORY[0x24C5C7E90](v46, 8);
    uint64_t v17 = *(void *)v46;
    unint64_t v18 = *(void **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v18 = sub_24A499D74(0, v18[2] + 1, 1, v18);
    }
    unint64_t v20 = v18[2];
    unint64_t v19 = v18[3];
    if (v20 >= v19 >> 1) {
      unint64_t v18 = sub_24A499D74((void *)(v19 > 1), v20 + 1, 1, v18);
    }
    void v18[2] = v20 + 1;
    uint64_t v21 = &v18[6 * v20];
    v21[4] = v11;
    v21[5] = v38;
    void v21[6] = v36;
    v21[7] = v15;
    unsigned char v21[8] = v16;
    v21[9] = v17;
    swift_unknownObjectRelease();
    long long v22 = (void *)v4;
    goto LABEL_22;
  }
  if (a1 != *(unsigned __int16 *)(*(void *)v44 + 16))
  {
    sub_24A5B258C(a1, (uint64_t)v45);
    uint64_t v23 = v45[0];
    uint64_t v24 = v45[3];
    uint64_t v37 = v45[2];
    uint64_t v39 = v45[1];
    *(_OWORD *)unint64_t v46 = *(_OWORD *)v44;
    *(_OWORD *)&v46[16] = *(_OWORD *)&v44[16];
    *(void *)&v46[32] = *(void *)&v44[32];
    uint64_t v25 = v45[4];
    swift_unknownObjectRetain();
    sub_24A575950((long long *)v46, v26, v27, v28);
    uint64_t v40 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x24C5C7E90](&v40, 8);
    uint64_t v29 = v40;
    unint64_t v18 = *(void **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v18 = sub_24A499D74(0, v18[2] + 1, 1, v18);
    }
    unint64_t v31 = v18[2];
    unint64_t v30 = v18[3];
    if (v31 >= v30 >> 1) {
      unint64_t v18 = sub_24A499D74((void *)(v30 > 1), v31 + 1, 1, v18);
    }
    void v18[2] = v31 + 1;
    long long v32 = &v18[6 * v31];
    v32[4] = v23;
    v32[5] = v39;
    v32[6] = v37;
    v32[7] = v24;
    v32[8] = v25;
    v32[9] = v29;
    sub_24A496BE8(v4);
    long long v22 = v45;
LABEL_22:
    sub_24A496BE8((uint64_t)v22);
    *(void *)(a2 + 96) = v18;
    goto LABEL_23;
  }
  *(void *)unint64_t v46 = *(void *)v44;
  *(_OWORD *)&v46[8] = *(_OWORD *)&v44[8];
  *(_OWORD *)&v46[24] = *(_OWORD *)&v44[24];
  swift_unknownObjectRetain();
  sub_24A575950((long long *)v46, v12, v13, v14);
LABEL_11:
  sub_24A496BE8(v3);
LABEL_23:
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v34 = v41[1];
  __int16 v35 = v43;
  *(void *)a3 = v41[0];
  *(void *)(a3 + 8) = v34;
  *(_DWORD *)(a3 + 16) = v42;
  *(_WORD *)(a3 + 20) = v35;
  return result;
}

uint64_t sub_24A575508(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v6 = v3;
    int v7 = a3;
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(v3 + 80);
    unint64_t v10 = HIDWORD(a3);
    if (!v9)
    {
LABEL_25:
      *(void *)(v6 + 72) = v8;
      *(void *)(v6 + 80) = a2;
      *(_DWORD *)(v6 + 88) = v7;
      *(_WORD *)(v6 + 92) = v10;
      return result;
    }
    uint64_t v11 = *(unsigned __int16 *)(v3 + 92);
    uint64_t v12 = *(unsigned int *)(v3 + 88);
    __int16 v43 = *(void **)(v3 + 72);
    uint64_t v44 = v9;
    v45[0] = v12;
    uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 | (unint64_t)(v11 << 32));
    int16x8_t v14 = (int16x8_t)vshlq_u64(v13, (uint64x2_t)xmmword_24A5C23E0);
    *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)vshlq_u64(v13, (uint64x2_t)xmmword_24A5C23F0));
    *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)v14);
    v14.i16[1] = v14.i16[2];
    v14.i16[2] = v13.i16[0];
    v14.i16[3] = v13.i16[2];
    *(_DWORD *)&v45[1] = vmovn_s16(v14).u32[0];
    unsigned __int8 v46 = BYTE1(v11);
    v37[5] = result;
    v37[6] = a2;
    __int16 v38 = a3;
    char v39 = BYTE2(a3);
    char v40 = BYTE3(a3);
    char v41 = BYTE4(a3);
    char v42 = BYTE5(a3);
    unint64_t v15 = v12 & 0xFC;
    swift_bridgeObjectRetain();
    if (v15 <= 0x7B && (sub_24A4DB184((uint64_t)&v43) & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_24:
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    uint64_t v16 = *(void **)(v6 + 96);
    unint64_t v17 = v16[2];
    if (v17)
    {
      uint64_t v18 = v44;
      uint64_t v34 = *(unsigned int *)v45;
      __int16 v35 = v43;
      uint64_t v19 = v45[4];
      uint64_t v20 = v46;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_24A499D4C(v16);
      }
      if (v17 <= v16[2])
      {
        uint64_t v21 = &v16[6 * v17 - 6];
        uint64_t v22 = v21[4];
        ++v21[9];
        if (v22) {
          unint64_t v23 = *(unsigned __int8 *)(v22 + 18);
        }
        else {
          unint64_t v23 = 0;
        }
        sub_24A5B514C(v35, v18, v34 | (v19 << 32) | (v20 << 40), v23);
LABEL_23:
        *(void *)(v6 + 96) = v16;
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      __break(1u);
    }
    else
    {
      uint64_t v24 = v44;
      uint64_t v36 = (uint64_t)v43;
      uint64_t v25 = *(unsigned int *)v45;
      uint64_t v26 = v45[4];
      uint64_t v27 = v46;
      sub_24A4919E4((uint64_t)v37);
      swift_bridgeObjectRetain();
      sub_24A4918AC(v36, v24, v25 | (v26 << 32) | (v27 << 40));
      uint64_t v34 = v37[1];
      __int16 v35 = (void *)v37[0];
      uint64_t v32 = v37[3];
      uint64_t v33 = v37[2];
      uint64_t v31 = v37[4];
      v37[0] = 0;
      MEMORY[0x24C5C7E90](v37, 8);
      uint64_t v19 = v37[0];
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_18:
        unint64_t v29 = v16[2];
        unint64_t v28 = v16[3];
        if (v29 >= v28 >> 1) {
          uint64_t v16 = sub_24A499D74((void *)(v28 > 1), v29 + 1, 1, v16);
        }
        uint64_t v16[2] = v29 + 1;
        unint64_t v30 = &v16[6 * v29];
        v30[4] = v35;
        v30[5] = v34;
        v30[6] = v33;
        v30[7] = v32;
        v30[8] = v31;
        v30[9] = v19;
        goto LABEL_23;
      }
    }
    uint64_t v16 = sub_24A499D74(0, v16[2] + 1, 1, v16);
    goto LABEL_18;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A57582C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    long long v5 = v2[1];
    long long v28 = *v2;
    long long v29 = v5;
    uint64_t v30 = *((void *)v2 + 4);
    sub_24A4CBC1C((uint64_t)v23);
    swift_unknownObjectRelease();
    long long v6 = v23[1];
    *int64_t v2 = v23[0];
    v2[1] = v6;
    *((void *)v2 + 4) = v24;
  }
  int v7 = (_WORD *)(*(void *)v2 + 16);
  uint64_t v8 = *(void *)v2 + 24;
  swift_unknownObjectRetain();
  sub_24A5B3BB0(a1, v7, v8, (uint64_t)&v25);
  uint64_t v9 = *((void *)&v25 + 1);
  long long v11 = v26;
  uint64_t v10 = v27;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v13 = *((void *)v2 + 1);
  BOOL v14 = __OFSUB__(v13, v9);
  uint64_t v15 = v13 - v9;
  if (v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  *((void *)v2 + 1) = v15;
  uint64_t v16 = *((void *)v2 + 2);
  BOOL v14 = __OFSUB__(v16, (void)v11);
  uint64_t v17 = v16 - v11;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *((void *)v2 + 2) = v17;
  uint64_t v18 = *((void *)v2 + 3);
  BOOL v14 = __OFSUB__(v18, *((void *)&v11 + 1));
  uint64_t v19 = v18 - *((void *)&v11 + 1);
  if (v14)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((void *)v2 + 3) = v19;
  uint64_t v20 = *((void *)v2 + 4);
  BOOL v14 = __OFSUB__(v20, v10);
  uint64_t v21 = v20 - v10;
  if (!v14)
  {
    *((void *)v2 + 4) = v21;
    long long v22 = v26;
    *(_OWORD *)a2 = v25;
    *(_OWORD *)(a2 + 16) = v22;
    *(void *)(a2 + 32) = v27;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

__n128 sub_24A575950(long long *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  long long v6 = a1[1];
  long long v42 = *a1;
  long long v43 = v6;
  uint64_t v44 = *((void *)a1 + 4);
  unint64_t v7 = *(unsigned __int8 *)(v42 + 18);
  if (*(unsigned char *)(v42 + 18))
  {
    uint64_t v8 = *(void *)(v4 + 48);
    a2 = *(void *)(v4 + 56);
    uint64_t v9 = *(unsigned __int16 *)(v4 + 68);
    uint64_t v10 = *(unsigned int *)(v4 + 64);
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 62) = 0;
    if (a2)
    {
      uint64_t v46 = v8;
      uint64_t v47 = a2;
      unint64_t v11 = v10 | (v9 << 32);
      LOWORD(v48) = v11;
      unint64_t v12 = v11 >> 40;
      BYTE2(v48) = BYTE2(v11);
      HIBYTE(v48) = BYTE3(v11);
      unsigned __int8 v49 = BYTE4(v11);
      unsigned __int8 v50 = BYTE5(v11);
      if ((v11 & 0xFC) >= 0x7C)
      {
        uint64_t v17 = BYTE4(v11);
      }
      else
      {
        sub_24A48FDE4(v7, (uint64_t)v41);
        BOOL v13 = sub_24A4DB330((uint64_t)&v46);
        sub_24A48FC0C((uint64_t)v51, (uint64_t)v41, v14);
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
        uint64_t v8 = v46;
        a2 = v47;
        uint64_t v17 = v49;
        unint64_t v12 = v50;
      }
      sub_24A59E0D4(v8, a2, v48 | (unint64_t)(v17 << 32) | (v12 << 40));
    }
LABEL_15:
    uint64_t v29 = *(void *)(v4 + 8);
    long long v30 = *(_OWORD *)(v4 + 16);
    long long v31 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0;
    if (v29)
    {
      *(void *)char v41 = v29;
      *(_OWORD *)&v41[8] = v30;
      *(_OWORD *)&v41[24] = v31;
      sub_24A59E198((unint64_t *)v41, a2, a3, a4);
    }
    *(_OWORD *)uint64_t v51 = v42;
    *(_OWORD *)&v51[16] = v43;
    uint64_t v32 = v44;
    goto LABEL_18;
  }
  if (*(_WORD *)(v42 + 16) == 1)
  {
    sub_24A4895D4(0, (uint64_t)v41);
    sub_24A494F18(*(uint64_t *)v41, *(unint64_t *)&v41[8], *(unsigned int *)&v41[16] | ((unint64_t)v41[20] << 32) | ((unint64_t)v41[21] << 40));
    uint64_t v16 = a1;
LABEL_12:
    sub_24A496BE8((uint64_t)v16);
    return result;
  }
  uint64_t v19 = *(void **)(v4 + 48);
  uint64_t v18 = *(void *)(v4 + 56);
  uint64_t v20 = *(unsigned __int16 *)(v4 + 68);
  uint64_t v21 = *(unsigned int *)(v4 + 64);
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 62) = 0;
  if (v18)
  {
    uint64_t v22 = (v21 | (v20 << 32)) & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    sub_24A5B5324(v19, v18, v22, 0, v45);
    uint64_t v23 = v45[0];
    uint64_t v24 = v45[1];
    uint64_t v25 = v45[2];
    uint64_t v26 = v45[3];
    uint64_t v27 = v45[4];
    sub_24A4974C4((uint64_t)v45, (uint64_t)&v46);
    if (v46)
    {
      *(void *)uint64_t v51 = v23;
      *(void *)&v51[8] = v24;
      *(void *)&v51[16] = v25;
      *(void *)&v51[24] = v26;
      *(void *)&v51[32] = v27;
      *(_OWORD *)char v41 = v42;
      *(_OWORD *)&char v41[16] = v43;
      *(void *)&v41[32] = v44;
      swift_unknownObjectRetain();
      sub_24A575950(v41);
      sub_24A575950(v51);
      swift_bridgeObjectRelease();
      uint64_t v16 = v41;
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v33 = *(void *)(v5 + 8);
  __n128 result = *(__n128 *)(v5 + 16);
  long long v34 = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + 40) = 0;
  if (v33)
  {
    *(void *)uint64_t v51 = v33;
    *(__n128 *)&v51[8] = result;
    *(_OWORD *)&v51[24] = v34;
    if (sub_24A5B3160((uint64_t *)&v42))
    {
      uint64_t v38 = *(void *)v51;
      if (*(_WORD *)(*(void *)v51 + 16) != 15)
      {
        swift_unknownObjectRelease();
        *(void *)(v5 + 8) = v38;
        __n128 result = *(__n128 *)&v51[8];
        long long v40 = *(_OWORD *)&v51[24];
        *(_OWORD *)(v5 + 16) = *(_OWORD *)&v51[8];
        *(_OWORD *)(v5 + 32) = v40;
        return result;
      }
    }
    *(_OWORD *)char v41 = *(_OWORD *)v51;
    *(_OWORD *)&char v41[16] = *(_OWORD *)&v51[16];
    *(void *)&v41[32] = *(void *)&v51[32];
    sub_24A59E198((unint64_t *)v41, v35, v36, v37);
  }
  long long v39 = v43;
  uint64_t v32 = v44;
  if (*(_WORD *)(v42 + 16) != 15)
  {
    *(_OWORD *)(v5 + 8) = v42;
    *(_OWORD *)(v5 + 24) = v39;
    *(void *)(v5 + 40) = v32;
    return result;
  }
  *(_OWORD *)uint64_t v51 = v42;
  *(_OWORD *)&v51[16] = v43;
LABEL_18:
  *(void *)&v51[32] = v32;
  sub_24A59E198((unint64_t *)v51, a2, a3, a4);
  return result;
}

uint64_t sub_24A575C80(unsigned __int8 *a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    long long v5 = v2[1];
    long long v24 = *v2;
    long long v25 = v5;
    uint64_t v26 = *((void *)v2 + 4);
    sub_24A4CBC1C((uint64_t)v22);
    swift_unknownObjectRelease();
    long long v6 = v22[1];
    *int64_t v2 = v22[0];
    v2[1] = v6;
    *((void *)v2 + 4) = v23;
  }
  unint64_t v7 = (_WORD *)(*(void *)v2 + 16);
  uint64_t v8 = *(void *)v2 + 24;
  swift_unknownObjectRetain();
  sub_24A5B3C50(a2, v7, v8, (uint64_t)a1);
  swift_unknownObjectRelease();
  uint64_t result = a1[19];
  uint64_t v10 = *((void *)v2 + 1);
  BOOL v11 = __OFSUB__(v10, result);
  uint64_t v12 = v10 - result;
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v13 = a1[16];
  uint64_t v14 = a1[17];
  uint64_t v15 = a1[18];
  *((void *)v2 + 1) = v12;
  uint64_t v16 = *((void *)v2 + 2);
  BOOL v11 = __OFSUB__(v16, v15);
  uint64_t v17 = v16 - v15;
  if (v11)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *((void *)v2 + 2) = v17;
  uint64_t v18 = *((void *)v2 + 3);
  BOOL v11 = __OFSUB__(v18, v14);
  uint64_t v19 = v18 - v14;
  if (v11)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((void *)v2 + 3) = v19;
  uint64_t v20 = *((void *)v2 + 4);
  BOOL v11 = __OFSUB__(v20, v13);
  uint64_t v21 = v20 - v13;
  if (!v11)
  {
    *((void *)v2 + 4) = v21;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_24A575D94(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  if (v1[7]) {
    return sub_24A4DFA58;
  }
  long long v5 = v3;
  uint64_t v6 = v1[1];
  if (v6 && *(_WORD *)(v6 + 16))
  {
    v3[15] = sub_24A5B37E4(v3);
    return (void (*)(void **))sub_24A575E90;
  }
  else
  {
    v3[12] = sub_24A573C1C((uint64_t)v3, *(void *)(*v1 + 16) - 1);
    v5[13] = sub_24A585B1C();
    v5[14] = sub_24A5B37E4(v5 + 8);
    return (void (*)(void **))sub_24A575E8C;
  }
}

void sub_24A575E90(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 120))(*a1, 0);
  free(v1);
}

void (*sub_24A575EDC(void *a1))(void **)
{
  uint64_t v3 = malloc(0x78uLL);
  *a1 = v3;
  if (*(void *)(v1 + 80)) {
    return sub_24A57C228;
  }
  long long v5 = v3;
  uint64_t v6 = v3 + 8;
  v3[12] = sub_24A573C1C((uint64_t)v3, *(void *)(*(void *)(v1 + 96) + 16) - 1);
  v5[13] = sub_24A585B1C();
  v5[14] = sub_24A576018(v6);
  return (void (*)(void **))sub_24A575E8C;
}

void sub_24A575F94(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 32;
  uint64_t v3 = *(void (**)(uint64_t, void))(*(void *)a1 + 104);
  uint64_t v4 = *(void (**)(void *, void))(*(void *)a1 + 96);
  (*(void (**)(void))(*(void *)a1 + 112))();
  v3(v2, 0);
  v4(v1, 0);
  free(v1);
}

void (*sub_24A576018(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = sub_24A5B4ADC(v3, *(unsigned __int8 *)(*(void *)v1 + 18));
  return sub_24A4FC3A4;
}

uint64_t sub_24A576078(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else if (v3 < 1)
  {
    return sub_24A496BE8(a3);
  }
  else if (v3 == 1)
  {
    uint64_t v5 = *(void *)a3 + 24;
    if (*(unsigned char *)(*(void *)a3 + 18))
    {
      uint64_t v6 = v5 + 40 * result;
      uint64_t v17 = *(void *)v6;
      long long v18 = *(_OWORD *)(v6 + 8);
      long long v19 = *(_OWORD *)(v6 + 24);
      swift_unknownObjectRetain_n();
      sub_24A575950((long long *)&v17, v7, v8, v9);
      sub_24A496BE8(a3);
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = v5 + 24 * result;
      uint64_t v14 = *(void *)v13;
      unint64_t v15 = *(void *)(v13 + 8);
      unint64_t v16 = *(unsigned int *)(v13 + 16) | ((unint64_t)*(unsigned __int8 *)(v13 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v13 + 21) << 40);
      swift_bridgeObjectRetain_n();
      sub_24A494F18(v14, v15, v16);
      sub_24A496BE8(a3);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_24A576218(result, a2, (uint64_t)&v17);
    swift_unknownObjectRetain();
    sub_24A575950((long long *)&v17, v10, v11, v12);
    sub_24A496BE8(a3);
    return sub_24A496BE8((uint64_t)&v17);
  }
  return result;
}

_WORD *sub_24A576218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  char v8 = *(unsigned char *)(v7 + 18);
  unint64_t v9 = a2 - a1;
  BOOL v10 = __OFSUB__(a2, a1);
  if (*(unsigned char *)(v7 + 18))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B177928);
    uint64_t v11 = swift_allocObject();
    *(_WORD *)(v11 + 16) = 0;
    uint64_t result = (_WORD *)(v11 + 16);
    *(unsigned char *)(v11 + 18) = v8;
    if (!v10)
    {
      sub_24A57A2D8(result, v11 + 24, v9, v7 + 24, a1, a2);
      uint64_t result = (_WORD *)sub_24A4CBE04(v11, &v16);
LABEL_9:
      long long v14 = v17;
      long long v15 = v18;
      *(void *)a3 = v16;
      *(_OWORD *)(a3 + 8) = v14;
      *(_OWORD *)(a3 + 24) = v15;
      return result;
    }
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B177EE8);
    uint64_t v13 = swift_allocObject();
    *(_WORD *)(v13 + 16) = 0;
    uint64_t result = (_WORD *)(v13 + 16);
    *(unsigned char *)(v13 + 18) = 0;
    if (!v10)
    {
      sub_24A57A1E4(result, v13 + 24, v9, v7 + 24, a1, a2);
      uint64_t result = (_WORD *)sub_24A4CBD70(v13, &v16);
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A576348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v5 = a3;
  if (v12 < 1)
  {
    return sub_24A496BE8(a3);
  }
  else
  {
    uint64_t v3 = v4;
    if (v12 != 1)
    {
      sub_24A576218(a1, a2, (uint64_t)v44);
      uint64_t v4 = v44[0];
      uint64_t v7 = v44[1];
      uint64_t v8 = v44[2];
      uint64_t v9 = v44[3];
      uint64_t v10 = v44[4];
      uint64_t v43 = 0;
      swift_unknownObjectRetain();
      MEMORY[0x24C5C7E90](&v43, 8);
      uint64_t v11 = v43;
      uint64_t v6 = *(void **)(v3 + 96);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_15:
        unint64_t v27 = v6[2];
        unint64_t v28 = v6[3];
        unint64_t v29 = v27 + 1;
        if (v27 >= v28 >> 1)
        {
          unint64_t v41 = v27 + 1;
          uint64_t v35 = v6;
          unint64_t v36 = v6[2];
          uint64_t v37 = sub_24A499D74((void *)(v28 > 1), v27 + 1, 1, v35);
          unint64_t v27 = v36;
          unint64_t v29 = v41;
          uint64_t v6 = v37;
        }
        void v6[2] = v29;
        long long v30 = &v6[6 * v27];
        v30[4] = v4;
        v30[5] = v7;
        v30[6] = v8;
        v30[7] = v9;
        v30[8] = v10;
        v30[9] = v11;
        sub_24A496BE8(v5);
        uint64_t result = sub_24A496BE8((uint64_t)v44);
LABEL_18:
        *(void *)(v3 + 96) = v6;
        return result;
      }
LABEL_23:
      uint64_t v6 = sub_24A499D74(0, v6[2] + 1, 1, v6);
      goto LABEL_15;
    }
    uint64_t v13 = *(void *)a3 + 24;
    if (*(unsigned char *)(*(void *)a3 + 18))
    {
      long long v14 = (uint64_t *)(v13 + 40 * a1);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      uint64_t v17 = v14[2];
      uint64_t v18 = v14[3];
      uint64_t v19 = v14[4];
      v44[0] = 0;
      swift_unknownObjectRetain_n();
      MEMORY[0x24C5C7E90](v44, 8);
      uint64_t v20 = v44[0];
      uint64_t v6 = *(void **)(v3 + 96);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_24A499D74(0, v6[2] + 1, 1, v6);
      }
      unint64_t v21 = v6[2];
      unint64_t v22 = v6[3];
      unint64_t v23 = v21 + 1;
      if (v21 >= v22 >> 1)
      {
        unint64_t v42 = v21 + 1;
        uint64_t v38 = v6;
        unint64_t v39 = v6[2];
        long long v40 = sub_24A499D74((void *)(v22 > 1), v21 + 1, 1, v38);
        unint64_t v21 = v39;
        unint64_t v23 = v42;
        uint64_t v6 = v40;
      }
      void v6[2] = v23;
      long long v24 = &v6[6 * v21];
      v24[4] = v15;
      v24[5] = v16;
      void v24[6] = v17;
      v24[7] = v18;
      v24[8] = v19;
      v24[9] = v20;
      sub_24A496BE8(v5);
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_18;
    }
    uint64_t v31 = v13 + 24 * a1;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    unint64_t v34 = *(unsigned int *)(v31 + 16) | ((unint64_t)*(unsigned __int8 *)(v31 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v31 + 21) << 40);
    swift_bridgeObjectRetain_n();
    sub_24A575508(v32, v33, v34);
    sub_24A496BE8(v5);
    return swift_bridgeObjectRelease();
  }
}

void sub_24A57660C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4[4];
  ++v4[5];
  uint64_t v7 = *v4;
  if (*v4) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a1 < 0 || v8 < a2) {
    goto LABEL_73;
  }
  if (a1 == a2)
  {
    sub_24A574A28(a1, a4);
    return;
  }
  long long v11 = *(_OWORD *)(v4 + 1);
  uint64_t v12 = v4[3];
  *((void *)&v99 + 1) = v6;
  uint64_t v100 = MEMORY[0x263F8EE78];
  long long v101 = 0u;
  long long v102 = 0u;
  memset(v103, 0, 30);
  *(void *)unint64_t v104 = 0;
  *(void *)&v104[8] = 0;
  *(void *)&v104[14] = 0;
  uint64_t v105 = MEMORY[0x263F8EE78];
  uint64_t v96 = a1;
  uint64_t v97 = v7;
  long long v98 = v11;
  *(void *)&long long v99 = v12;
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[4] = 0;
  if (!*(unsigned char *)(v7 + 18))
  {
LABEL_58:
    uint64_t v22 = (uint64_t)sub_24A57A0EC((unsigned __int16 *)(v7 + 16), v7 + 24, &v96, a1, a2);
    uint64_t v31 = v22;
    unint64_t v32 = v30;
    if (v22 >= a3)
    {
      uint64_t v106 = v7;
      long long v107 = v98;
      long long v108 = v99;
      unint64_t v90 = v29;
      swift_unknownObjectRetain();
      sub_24A5751B0(v31, (uint64_t)&v100, (uint64_t)&v91);
      uint64_t v40 = v91;
      unint64_t v41 = v92;
      unint64_t v42 = v93 | ((unint64_t)v94 << 32) | ((unint64_t)v95 << 40);
      unint64_t v43 = sub_24A494ED0(v32, v91, v92);
      uint64_t v44 = sub_24A494C18(v43, v40, v41, v42);
      unsigned int v88 = v45;
      uint64_t v89 = HIBYTE(v45);
      swift_bridgeObjectRetain();
      unint64_t v46 = sub_24A494C00(v43, v40, v41);
      uint64_t v48 = v47;
      uint64_t v50 = v49;
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      uint64_t v87 = MEMORY[0x24C5C68C0](v46, v48, v50, v52);
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_24A5BB830();
      uint64_t v57 = v56;
      uint64_t v59 = v58;
      uint64_t v61 = v60;
      swift_bridgeObjectRelease();
      uint64_t v62 = MEMORY[0x24C5C68C0](v55, v57, v59, v61);
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v91 = v62;
      unint64_t v92 = v64;
      LOWORD(v93) = v44;
      BYTE2(v93) = BYTE2(v44);
      HIBYTE(v93) = BYTE3(v44);
      unsigned __int8 v94 = BYTE4(v44);
      unsigned __int8 v95 = BYTE5(v44);
      sub_24A575508(v87, v54, (v88 << 16) & 0xFF0000 | HIWORD(v44) | (v88 << 16) & 0xFF000000 | (v89 << 40) | ((unint64_t)BYTE2(v88) << 32));
      unint64_t v65 = sub_24A494ED0(v90, v62, v64);
      uint64_t v66 = sub_24A494C18(v65, v62, v64, v44 & 0xFFFFFFFFFFFFLL);
      swift_bridgeObjectRetain();
      unint64_t v67 = sub_24A494C00(v65, v62, v64);
      uint64_t v69 = v68;
      uint64_t v71 = v70;
      uint64_t v73 = v72;
      swift_bridgeObjectRelease();
      MEMORY[0x24C5C68C0](v67, v69, v71, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v74 = sub_24A5BB830();
      uint64_t v76 = v75;
      uint64_t v78 = v77;
      uint64_t v80 = v79;
      swift_bridgeObjectRelease();
      uint64_t v81 = MEMORY[0x24C5C68C0](v74, v76, v78, v80);
      unint64_t v83 = v82;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A494F18(v81, v83, v66 & 0xFFFFFFFFFFFFLL);
      swift_unknownObjectRelease();
      uint64_t v84 = *(void *)&v103[1];
      int v85 = DWORD2(v103[1]);
      __int16 v86 = WORD6(v103[1]);
      int v36 = *(_DWORD *)&v104[16];
      __int16 v37 = *(_WORD *)&v104[20];
      uint64_t v38 = v105;
      *(void *)a4 = v100;
      *(_OWORD *)(a4 + 8) = v101;
      *(_OWORD *)(a4 + 24) = v102;
      *(_OWORD *)(a4 + 40) = v103[0];
      *(void *)(a4 + 56) = v84;
      *(_WORD *)(a4 + 68) = v86;
      *(_DWORD *)(a4 + 64) = v85;
      long long v39 = *(_OWORD *)v104;
    }
    else
    {
      uint64_t v106 = v7;
      long long v107 = v98;
      long long v108 = v99;
LABEL_60:
      sub_24A57AEF8(v22, v29, a3, v30, (uint64_t)&v100);
      uint64_t v33 = *(void *)&v103[1];
      int v34 = DWORD2(v103[1]);
      __int16 v35 = WORD6(v103[1]);
      int v36 = *(_DWORD *)&v104[16];
      __int16 v37 = *(_WORD *)&v104[20];
      uint64_t v38 = v105;
      *(void *)a4 = v100;
      *(_OWORD *)(a4 + 8) = v101;
      *(_OWORD *)(a4 + 24) = v102;
      *(_OWORD *)(a4 + 40) = v103[0];
      *(void *)(a4 + 56) = v33;
      *(_WORD *)(a4 + 68) = v35;
      *(_DWORD *)(a4 + 64) = v34;
      long long v39 = *(_OWORD *)v104;
    }
    *(_OWORD *)(a4 + 72) = v39;
    *(_WORD *)(a4 + 92) = v37;
    *(_DWORD *)(a4 + 88) = v36;
    *(void *)(a4 + 96) = v38;
    return;
  }
  uint64_t v13 = a1;
  int64_t v14 = a2;
  while (1)
  {
    uint64_t v15 = *(unsigned __int16 *)(v7 + 16);
    uint64_t v16 = v13;
    if (!*(_WORD *)(v7 + 16)) {
      goto LABEL_33;
    }
    uint64_t v17 = *(void *)(v7 + 56);
    BOOL v18 = __OFSUB__(v13, v17);
    uint64_t v16 = v13 - v17;
    if (v18) {
      goto LABEL_69;
    }
    if (__OFADD__(v16, 1)) {
      goto LABEL_70;
    }
    if (v16 + 1 > 0) {
      break;
    }
    int64_t v21 = v14 - v13;
    if (__OFSUB__(v14, v13)) {
      goto LABEL_72;
    }
    uint64_t v22 = 0;
LABEL_36:
    int64_t v14 = v13 + v21;
    if (__OFADD__(v13, v21))
    {
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v22 >= v15)
    {
      a3 = v22;
    }
    else
    {
      int64_t v24 = *(void *)(v7 + 24 + 40 * v22 + 32);
      a3 = v22;
      if (v24 < v14)
      {
        BOOL v18 = __OFSUB__(v14, v24);
        v14 -= v24;
        if (v18) {
          goto LABEL_71;
        }
        a3 = v22 + 1;
        if (v22 + 1 < v15)
        {
          int64_t v25 = *(void *)(v7 + 24 + 40 * a3 + 32);
          if (v25 < v14)
          {
            uint64_t v26 = v22 + 2;
            unint64_t v27 = (int64_t *)(v7 + 40 * v22 + 136);
            while (1)
            {
              BOOL v18 = __OFSUB__(v14, v25);
              v14 -= v25;
              if (v18)
              {
                __break(1u);
                goto LABEL_64;
              }
              if (v15 == v26) {
                break;
              }
              int64_t v28 = *v27;
              v27 += 5;
              int64_t v25 = v28;
              ++v26;
              if (v28 >= v14)
              {
                a3 = v26 - 1;
                if (v22 >= v26 - 1) {
                  goto LABEL_50;
                }
                goto LABEL_57;
              }
            }
            a3 = *(unsigned __int16 *)(v7 + 16);
            if (v22 >= v15) {
              goto LABEL_50;
            }
            goto LABEL_57;
          }
        }
      }
    }
    if (v22 < a3) {
      goto LABEL_57;
    }
LABEL_50:
    sub_24A574DF4((void *)v22, (uint64_t)&v100);
    uint64_t v7 = v97;
    if (!*(unsigned char *)(v97 + 18))
    {
      uint64_t v96 = v13;
      goto LABEL_58;
    }
  }
  if (v15 == 1) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(v7 + 96);
  BOOL v18 = __OFSUB__(v16, v19);
  uint64_t v20 = v16 - v19;
  if (v18) {
    goto LABEL_74;
  }
  if (__OFADD__(v20, 1)) {
    goto LABEL_75;
  }
  if (v20 + 1 < 1)
  {
    uint64_t v22 = 1;
    int64_t v21 = v14 - v13;
    if (__OFSUB__(v14, v13)) {
      goto LABEL_56;
    }
LABEL_35:
    uint64_t v13 = v16;
    goto LABEL_36;
  }
  if (v15 == 2)
  {
    uint64_t v16 = v20;
LABEL_33:
    if (v16) {
      goto LABEL_68;
    }
    uint64_t v22 = *(unsigned __int16 *)(v7 + 16);
    int64_t v21 = v14 - v13;
    if (__OFSUB__(v14, v13))
    {
LABEL_56:
      __break(1u);
LABEL_57:
      uint64_t v106 = v7;
      long long v107 = v98;
      long long v108 = v99;
      unint64_t v29 = v13;
      unint64_t v30 = v14;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v23 = (void *)(v7 + 136);
  uint64_t v22 = 2;
  while (v15 != v22)
  {
    uint64_t v16 = v20 - *v23;
    if (__OFSUB__(v20, *v23)) {
      goto LABEL_66;
    }
    if (__OFADD__(v16, 1)) {
      goto LABEL_67;
    }
    if (v16 + 1 < 1)
    {
      uint64_t v16 = v20;
      int64_t v21 = v14 - v13;
      if (__OFSUB__(v14, v13)) {
        goto LABEL_56;
      }
      goto LABEL_35;
    }
    ++v22;
    v23 += 5;
    uint64_t v20 = v16;
    if (v15 == v22) {
      goto LABEL_33;
    }
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
}

uint64_t sub_24A576CC4(uint64_t result, _WORD *a2, char *a3)
{
  if (result < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v18 = result;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (result)
  {
    uint64_t v7 = (uint64_t *)(a3 + 16);
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *(v7 - 1);
      uint64_t v10 = *v7;
      uint64_t v11 = v7[1];
      uint64_t v12 = v7[2];
      uint64_t result = swift_unknownObjectRelease();
      BOOL v13 = __OFADD__(v6, v9);
      v6 += v9;
      if (v13) {
        break;
      }
      BOOL v13 = __OFADD__(v5, v10);
      v5 += v10;
      if (v13) {
        goto LABEL_15;
      }
      BOOL v13 = __OFADD__(v4, v11);
      v4 += v11;
      if (v13) {
        goto LABEL_16;
      }
      BOOL v13 = __OFADD__(v3, v12);
      v3 += v12;
      if (v13) {
        goto LABEL_17;
      }
      v7 += 5;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v14 = (unsigned __int16)*a2 - v18;
  if (v14 < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  *a2 = v14;
  uint64_t v15 = &a3[40 * v18];
  if (v18 > 0 || &v15[40 * (unsigned __int16)v14] <= a3) {
    memmove(a3, v15, 40 * (unsigned __int16)v14);
  }
  return v6;
}

uint64_t sub_24A576DD8(uint64_t result, _WORD *a2, unsigned __int8 *a3)
{
  if (result < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v19 = result;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (result)
  {
    uint64_t v7 = a3 + 19;
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *(v7 - 3);
      uint64_t v10 = *(v7 - 2);
      uint64_t v11 = *(v7 - 1);
      uint64_t v12 = *v7;
      uint64_t result = swift_bridgeObjectRelease();
      BOOL v13 = __OFADD__(v6, v12);
      v6 += v12;
      if (v13) {
        break;
      }
      BOOL v13 = __OFADD__(v5, v11);
      v5 += v11;
      if (v13) {
        goto LABEL_15;
      }
      BOOL v13 = __OFADD__(v4, v10);
      v4 += v10;
      if (v13) {
        goto LABEL_16;
      }
      BOOL v13 = __OFADD__(v3, v9);
      v3 += v9;
      if (v13) {
        goto LABEL_17;
      }
      v7 += 24;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v14 = (unsigned __int16)*a2 - v19;
  if (v14 < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  *a2 = v14;
  uint64_t v15 = &a3[24 * v19];
  size_t v16 = 24 * (unsigned __int16)v14;
  if (v19 > 0 || &v15[v16] <= a3) {
    memmove(a3, v15, v16);
  }
  return v6;
}

uint64_t sub_24A576EF4(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  int64_t v4 = v3 - result;
  BOOL v5 = __OFSUB__(v3, result);
  if (__OFSUB__(v3, result))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v4 > v3)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v4 == v3)
  {
    uint64_t v6 = 0;
    if (!v5)
    {
LABEL_8:
      if ((v4 & 0x8000000000000000) == 0)
      {
        if (!((unint64_t)v4 >> 16))
        {
          *a2 = v4;
          return v6;
        }
        goto LABEL_30;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v4 < v3)
  {
    uint64_t v19 = result;
    uint64_t v20 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v6 = 0;
    uint64_t v10 = (unsigned __int8 *)(24 * *a2 - 24 * result + a3 + 19);
    uint64_t v11 = result;
    while (1)
    {
      uint64_t v12 = *(v10 - 3);
      uint64_t v13 = *(v10 - 2);
      uint64_t v14 = *(v10 - 1);
      uint64_t v15 = *v10;
      uint64_t result = swift_bridgeObjectRelease();
      BOOL v16 = __OFADD__(v6, v15);
      v6 += v15;
      if (v16) {
        break;
      }
      BOOL v16 = __OFADD__(v9, v14);
      v9 += v14;
      if (v16) {
        goto LABEL_24;
      }
      BOOL v16 = __OFADD__(v8, v13);
      v8 += v13;
      if (v16) {
        goto LABEL_25;
      }
      BOOL v16 = __OFADD__(v7, v12);
      v7 += v12;
      if (v16) {
        goto LABEL_26;
      }
      v10 += 24;
      if (!--v11)
      {
        a2 = v20;
        uint64_t v17 = *v20;
        BOOL v16 = __OFSUB__(v17, v19);
        int64_t v4 = v17 - v19;
        char v18 = v16;
        if ((v18 & 1) == 0) {
          goto LABEL_8;
        }
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_24A57703C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)v2;
  if (a1 != 1)
  {
    if (!a1)
    {
      uint64_t v7 = *(void *)(v6 + 32);
      __int16 v8 = *(_WORD *)(v6 + 44);
      *(void *)a2 = *(void *)(v6 + 24);
      *(void *)(a2 + 8) = v7;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v6 + 40);
      *(_WORD *)(a2 + 20) = v8;
      swift_bridgeObjectRetain();
      return sub_24A496BE8(v2);
    }
    long long v18 = *(_OWORD *)(v2 + 16);
    long long v34 = *(_OWORD *)v2;
    long long v35 = v18;
    uint64_t v36 = *(void *)(v2 + 32);
    swift_unknownObjectRetain();
    uint64_t v19 = v34;
    uint64_t result = swift_isUniquelyReferenced_nonNull();
    if ((result & 1) == 0)
    {
      long long v39 = v34;
      long long v40 = v35;
      uint64_t v41 = v36;
      sub_24A4CBC1C((uint64_t)&v34);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v19 = v34;
    }
    uint64_t v20 = *(unsigned __int16 *)(v19 + 16);
    if (v20 - 1 <= a1) {
      goto LABEL_19;
    }
    BOOL v21 = __OFSUB__(v20, a1);
    uint64_t v22 = v20 - a1;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = v22 - 1;
      if (!__OFSUB__(v22, 1))
      {
        swift_unknownObjectRetain();
        uint64_t v24 = sub_24A576EF4(v23, (unsigned __int16 *)(v19 + 16), v19 + 24);
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        uint64_t result = swift_unknownObjectRelease();
        if (!__OFSUB__(*((void *)&v34 + 1), v24))
        {
          *((void *)&v34 + 1) -= v24;
          if (!__OFSUB__((void)v35, v26))
          {
            *(void *)&long long v35 = v35 - v26;
            if (!__OFSUB__(*((void *)&v35 + 1), v28))
            {
              *((void *)&v35 + 1) -= v28;
              if (!__OFSUB__(v36, v30))
              {
                v36 -= v30;
LABEL_19:
                sub_24A575C80((unsigned __int8 *)a2, a1);
                v37[0] = v34;
                v37[1] = v35;
                uint64_t v38 = v36;
                swift_unknownObjectRetain();
                sub_24A575950(v37, v31, v32, v33);
                sub_24A496BE8(v3);
                return swift_unknownObjectRelease();
              }
LABEL_27:
              __break(1u);
              return result;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  unint64_t v11 = *(void *)(v6 + 32);
  uint64_t v12 = *(unsigned int *)(v6 + 40);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 44);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 45);
  uint64_t v15 = *(void *)(v6 + 56);
  __int16 v16 = *(_WORD *)(v6 + 68);
  *(void *)a2 = *(void *)(v6 + 48);
  *(void *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v6 + 64);
  *(_WORD *)(a2 + 20) = v16;
  unint64_t v17 = v12 | (v13 << 32) | (v14 << 40);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24A494F18(v10, v11, v17);
  sub_24A496BE8(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A5772D4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = v2;
  uint64_t v9 = *v2;
  uint64_t v10 = *(unsigned __int16 *)(*v2 + 16);
  if (v10 - 1 == a1)
  {
    uint64_t v11 = v9 + 40 * a1;
    uint64_t v12 = *(void *)(v11 + 24);
    long long v54 = *(_OWORD *)(v11 + 32);
    uint64_t v13 = *(void *)(v11 + 48);
    uint64_t v14 = *(void *)(v11 + 56);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v7 = v12;
    *(_OWORD *)(v7 + 1) = v54;
    _OWORD v7[3] = v13;
    _OWORD v7[4] = v14;
    return result;
  }
  if (v10 - 2 == a1)
  {
    unint64_t v17 = (uint64_t *)(v9 + 24 + 40 * a1);
    uint64_t v18 = *v17;
    uint64_t v51 = v17[1];
    uint64_t v50 = v17[2];
    uint64_t v52 = v17[3];
    uint64_t v55 = v17[4];
    uint64_t v19 = (uint64_t *)(v9 + 24 + 40 * ((int)v10 - 1));
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = v19[2];
    uint64_t v23 = v19[3];
    uint64_t v49 = v19[4];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&v60[0] = 0;
    swift_unknownObjectRetain();
    MEMORY[0x24C5C7E90](v60, 8);
    uint64_t v24 = *(void *)&v60[0];
    uint64_t v25 = *(void **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v25 = sub_24A499D74(0, v25[2] + 1, 1, v25);
    }
    unint64_t v27 = v25[2];
    unint64_t v26 = v25[3];
    unint64_t v28 = v27 + 1;
    if (v27 >= v26 >> 1)
    {
      uint64_t v48 = sub_24A499D74((void *)(v26 > 1), v27 + 1, 1, v25);
      unint64_t v28 = v27 + 1;
      uint64_t v25 = v48;
    }
    Swift::Int v25[2] = v28;
    uint64_t v29 = &v25[6 * v27];
    void v29[4] = v20;
    v29[5] = v21;
    v29[6] = v22;
    v29[7] = v23;
    v29[8] = v49;
    v29[9] = v24;
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(a2 + 96) = v25;
    *uint64_t v7 = v18;
    v7[1] = v51;
    void v7[2] = v50;
    _OWORD v7[3] = v52;
    _OWORD v7[4] = v55;
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    long long v30 = *((_OWORD *)v2 + 1);
    v60[0] = *(_OWORD *)v2;
    v60[1] = v30;
    uint64_t v61 = v2[4];
    sub_24A4CBC1C((uint64_t)v58);
    swift_unknownObjectRelease();
    long long v31 = v58[1];
    *(_OWORD *)uint64_t v2 = v58[0];
    *((_OWORD *)v2 + 1) = v31;
    v2[4] = v59;
  }
  uint64_t v32 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v33 = *v7;
  long long v34 = (char *)(*v7 + 24);
  long long v35 = &v34[40 * a1];
  uint64_t v36 = *(void *)v35;
  long long v53 = *(_OWORD *)(v35 + 24);
  long long v56 = *(_OWORD *)(v35 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v5 = sub_24A576CC4(v32, (_WORD *)(v33 + 16), v34);
  uint64_t v3 = v37;
  uint64_t v9 = v38;
  uint64_t v32 = v39;
  swift_unknownObjectRelease();
  uint64_t v40 = v7[1];
  uint64_t v4 = v40 - v5;
  if (__OFSUB__(v40, v5))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v41 = v7[2];
  BOOL v42 = __OFSUB__(v41, v3);
  uint64_t v3 = v41 - v3;
  if (v42)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v43 = v7[3];
  BOOL v42 = __OFSUB__(v43, v9);
  uint64_t v9 = v43 - v9;
  if (v42)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v44 = v7[4];
  uint64_t v5 = v44 - v32;
  if (__OFSUB__(v44, v32))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v32 = *v7;
  *uint64_t v7 = v36;
  *(_OWORD *)(v7 + 1) = v56;
  *(_OWORD *)(v7 + 3) = v53;
  uint64_t v57 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x24C5C7E90](&v57, 8);
  uint64_t v6 = v57;
  uint64_t v7 = *(void **)(a2 + 96);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
  }
    uint64_t v7 = sub_24A499D74(0, v7[2] + 1, 1, v7);
  unint64_t v46 = v7[2];
  unint64_t v45 = v7[3];
  if (v46 >= v45 >> 1) {
    uint64_t v7 = sub_24A499D74((void *)(v45 > 1), v46 + 1, 1, v7);
  }
  void v7[2] = v46 + 1;
  uint64_t v47 = &v7[6 * v46];
  v47[4] = v32;
  v47[5] = v4;
  v47[6] = v3;
  v47[7] = v9;
  v47[8] = v5;
  v47[9] = v6;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(a2 + 96) = v7;
  return result;
}

uint64_t sub_24A577648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)v3;
  uint64_t v6 = *v3;
  uint64_t v7 = *(unsigned __int16 *)(*v3 + 16);
  if (v7 - 1 == a1)
  {
    uint64_t v8 = v6 + 24 * *(unsigned __int16 *)(*v3 + 16);
    uint64_t v9 = *(void *)(v8 + 8);
    __int16 v10 = *(_WORD *)(v8 + 20);
    *(void *)a3 = *(void *)v8;
    *(void *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v8 + 16);
    *(_WORD *)(a3 + 20) = v10;
    swift_bridgeObjectRetain();
    return sub_24A496BE8((uint64_t)v3);
  }
  uint64_t v13 = a1;
  if (v7 - 2 == a1)
  {
    uint64_t v14 = v6 + 24 * *(unsigned __int16 *)(*v3 + 16);
    uint64_t v15 = *(void *)(v14 - 16);
    __int16 v16 = *(_WORD *)(v14 - 4);
    uint64_t v17 = *(void *)v14;
    unint64_t v18 = *(void *)(v14 + 8);
    uint64_t v19 = *(unsigned int *)(v14 + 16);
    uint64_t v20 = *(unsigned __int8 *)(v14 + 20);
    uint64_t v21 = *(unsigned __int8 *)(v14 + 21);
    *(void *)a3 = *(void *)(v14 - 24);
    *(void *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v14 - 8);
    *(_WORD *)(a3 + 20) = v16;
    unint64_t v22 = v19 | (v20 << 32) | (v21 << 40);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_24A575508(v17, v18, v22);
    sub_24A496BE8(v4);
    return swift_bridgeObjectRelease();
  }
  uint64_t v24 = v3[1];
  uint64_t v23 = v3[2];
  uint64_t v26 = v3[3];
  uint64_t v25 = v3[4];
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    void v45[5] = v6;
    v45[6] = v24;
    v45[7] = v23;
    v45[8] = v26;
    v45[9] = v25;
    sub_24A4CBC1C((uint64_t)v45);
    swift_unknownObjectRelease();
    uint64_t v6 = v45[0];
    uint64_t v24 = v45[1];
    uint64_t v23 = v45[2];
    uint64_t v26 = v45[3];
    uint64_t v25 = v45[4];
  }
  unint64_t v27 = (void *)(v13 + 1);
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v39 = v26;
  uint64_t v40 = v23;
  uint64_t v38 = v25;
  uint64_t v43 = a2;
  uint64_t v28 = v6 + 24 + 24 * v13;
  __int16 v42 = *(_WORD *)(v28 + 20);
  uint64_t v29 = *(void *)(v28 + 8);
  uint64_t v41 = *(void *)v28;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a2 = v24;
  int v30 = *(_DWORD *)(v28 + 16);
  uint64_t v23 = sub_24A576DD8(v13 + 1, (_WORD *)(v6 + 16), (unsigned __int8 *)(v6 + 24));
  uint64_t v25 = v31;
  uint64_t v13 = v32;
  unint64_t v27 = v33;
  swift_unknownObjectRelease();
  *(void *)a3 = v41;
  *(void *)(a3 + 8) = v29;
  *(_DWORD *)(a3 + 16) = v30;
  *(_WORD *)(a3 + 20) = v42;
  uint64_t v26 = a2 - v23;
  if (__OFSUB__(a2, v23))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v34 = __OFSUB__(v40, v25);
  uint64_t v25 = v40 - v25;
  if (v34)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  a2 = v39 - v13;
  if (__OFSUB__(v39, v13))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v13 = v38 - (void)v27;
  if (__OFSUB__(v38, v27))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v44 = 0;
  swift_unknownObjectRetain_n();
  MEMORY[0x24C5C7E90](&v44, 8);
  uint64_t v23 = v44;
  unint64_t v27 = *(void **)(v43 + 96);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
  }
    unint64_t v27 = sub_24A499D74(0, v27[2] + 1, 1, v27);
  unint64_t v36 = v27[2];
  unint64_t v35 = v27[3];
  if (v36 >= v35 >> 1) {
    unint64_t v27 = sub_24A499D74((void *)(v35 > 1), v36 + 1, 1, v27);
  }
  void v27[2] = v36 + 1;
  uint64_t v37 = &v27[6 * v36];
  v37[4] = v6;
  v37[5] = v26;
  v37[6] = v25;
  void v37[7] = a2;
  v37[8] = v13;
  v37[9] = v23;
  swift_unknownObjectRelease();
  sub_24A496BE8(v4);
  *(void *)(v43 + 96) = v27;
  return swift_unknownObjectRelease();
}

__n128 BigSubstring.UnicodeScalarView.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = (__n128)a2[2];
  long long v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.UnicodeScalarView.init(_:in:)@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6 = *(__n128 *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = *(void *)(a1 + 32);
  unint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  __n128 v27 = v6;
  v31[0] = *(_OWORD *)a1;
  long long v30 = v31[0];
  long long v11 = *(_OWORD *)(a1 + 32);
  v31[1] = v6;
  _OWORD v31[2] = v11;
  sub_24A4974C4((uint64_t)v31, (uint64_t)v32);
  sub_24A497498((uint64_t)v32);
  unint64_t v12 = sub_24A4965FC(v7, v8, v9, v10);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v19 = sub_24A4965FC(a2[4], a2[5], a2[6], a2[7]);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_24A496BE8(a1);
  __n128 result = v27;
  *(_OWORD *)a3 = v30;
  *(__n128 *)(a3 + 16) = v27;
  *(void *)(a3 + 32) = v29;
  *(void *)(a3 + 40) = v28;
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = v14;
  *(void *)(a3 + 64) = v16;
  *(void *)(a3 + 72) = v18;
  *(void *)(a3 + 80) = v19;
  *(void *)(a3 + 88) = v21;
  *(void *)(a3 + 96) = v23;
  *(void *)(a3 + 104) = v25;
  return result;
}

__n128 BigSubstring.unicodeScalars.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  long long v12 = *(_OWORD *)v1;
  long long v10 = *(_OWORD *)(v1 + 32);
  long long v11 = *(_OWORD *)(v1 + 16);
  long long v8 = *(_OWORD *)(v1 + 64);
  long long v9 = *(_OWORD *)(v1 + 48);
  __n128 v7 = *(__n128 *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v2 + 104);
  sub_24A497498(v2);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  __n128 result = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(__n128 *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  return result;
}

__n128 BigSubstring.unicodeScalars.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_unknownObjectRelease();
  long long v30 = *(_OWORD *)a1;
  __n128 v28 = *(__n128 *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 48);
  uint64_t v29 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  unint64_t v26 = *(void *)(a1 + 80);
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v9 = *(void *)(a1 + 96);
  uint64_t v10 = *(void *)(a1 + 104);
  sub_24A497498(a1);
  unint64_t v11 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v5, v6, v7);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  unint64_t v18 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v26, v8, v9, v10);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  sub_24A496BE8(a1);
  __n128 result = v28;
  *(_OWORD *)uint64_t v2 = v30;
  *(__n128 *)(v2 + 16) = v28;
  *(void *)(v2 + 32) = v27;
  *(void *)(v2 + 40) = v29;
  *(void *)(v2 + 48) = v11;
  *(void *)(v2 + 56) = v13;
  *(void *)(v2 + 64) = v15;
  *(void *)(v2 + 72) = v17;
  *(void *)(v2 + 80) = v18;
  *(void *)(v2 + 88) = v20;
  *(void *)(v2 + 96) = v22;
  *(void *)(v2 + 104) = v24;
  return result;
}

void (*BigSubstring.unicodeScalars.modify(void *a1))(char **a1, char a2)
{
  long long v3 = malloc(0x190uLL);
  *a1 = v3;
  long long v4 = *(_OWORD *)(v1 + 16);
  *long long v3 = *(_OWORD *)v1;
  v3[1] = v4;
  long long v5 = *(_OWORD *)(v1 + 48);
  v3[2] = *(_OWORD *)(v1 + 32);
  v3[3] = v5;
  long long v6 = *(_OWORD *)(v1 + 80);
  v3[4] = *(_OWORD *)(v1 + 64);
  v3[5] = v6;
  v3[6] = *(_OWORD *)(v1 + 96);
  *((void *)v3 + 48) = 0;
  *((void *)v3 + 49) = v1;
  MEMORY[0x24C5C7E90](v3 + 24, 8);
  uint64_t v7 = *((void *)v3 + 48);
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v7;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 48) = 768;
  *(_OWORD *)(v1 + 72) = xmmword_24A5BD050;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 1;
  return sub_24A577CF8;
}

void sub_24A577CF8(char **a1, char a2)
{
  uint64_t v2 = *a1;
  long long v3 = (void *)*((void *)*a1 + 49);
  if (a2)
  {
    long long v4 = v2 + 112;
    long long v5 = *(_OWORD *)v2;
    long long v6 = v2 + 208;
    uint64_t v7 = (uint64_t)(v2 + 344);
  }
  else
  {
    long long v6 = v2 + 160;
    long long v5 = *(_OWORD *)v2;
    long long v4 = v2 + 256;
    uint64_t v7 = (uint64_t)(v2 + 304);
  }
  long long v8 = *((_OWORD *)v2 + 1);
  long long v9 = *((_OWORD *)v2 + 2);
  *long long v4 = v5;
  v4[1] = v8;
  unint64_t v4[2] = v9;
  uint64_t v37 = *((void *)v2 + 1);
  uint64_t v38 = *(void *)v2;
  uint64_t v35 = *((void *)v2 + 3);
  uint64_t v36 = *((void *)v2 + 2);
  uint64_t v33 = *((void *)v2 + 5);
  uint64_t v34 = *((void *)v2 + 4);
  v6[1] = v8;
  void v6[2] = v9;
  *long long v6 = v5;
  uint64_t v10 = v7;
  sub_24A4974C4((uint64_t)v6, v7);
  unint64_t v11 = *((void *)v2 + 6);
  uint64_t v12 = *((void *)v2 + 7);
  unint64_t v13 = *((void *)v2 + 8);
  uint64_t v14 = *((void *)v2 + 9);
  uint64_t v15 = *((void *)v2 + 11);
  unint64_t v16 = *((void *)v2 + 12);
  uint64_t v30 = *((void *)v2 + 13);
  unint64_t v31 = *((void *)v2 + 10);
  sub_24A497498(v10);
  sub_24A497498(v10);
  unint64_t v32 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v11, v12, v13, v14);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  unint64_t v23 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v31, v15, v16, v30);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  sub_24A496BE8((uint64_t)v4);
  swift_unknownObjectRelease();
  *long long v3 = v38;
  v3[1] = v37;
  v3[2] = v36;
  v3[3] = v35;
  v3[4] = v34;
  v3[5] = v33;
  v3[6] = v32;
  v3[7] = v18;
  v3[8] = v20;
  v3[9] = v22;
  v3[10] = v23;
  v3[11] = v25;
  v3[12] = v27;
  v3[13] = v29;
  swift_unknownObjectRelease();
  free(v2);
}

uint64_t BigSubstring.UnicodeScalarView.base.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

__n128 BigSubstring.UnicodeScalarView.init(stringLiteral:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A57B33C(a1, a2, (unint64_t *)v7);
  swift_bridgeObjectRelease();
  long long v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  long long v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 BigSubstring.UnicodeScalarView.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A57B5F4(a1, a2, (unint64_t *)v9);
  (*((void (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  long long v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  long long v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_24A577F80@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A57B33C(*(void *)a1, *(void *)(a1 + 8), (unint64_t *)v6);
  swift_bridgeObjectRelease();
  long long v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  long long v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t BigSubstring.UnicodeScalarView.description.getter()
{
  long long v1 = v0[1];
  v8[0] = *v0;
  v8[1] = v1;
  long long v2 = v0[3];
  _OWORD v8[2] = v0[2];
  long long v3 = v0[4];
  long long v4 = v0[5];
  v7[0] = v2;
  v7[1] = v3;
  long long v5 = v0[6];
  void v7[2] = v4;
  _OWORD v7[3] = v5;
  sub_24A497498((uint64_t)v0);
  return sub_24A59EA58((uint64_t)v8, (uint64_t)v7);
}

uint64_t BigSubstring.UnicodeScalarView.debugDescription.getter()
{
  long long v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  long long v2 = v0[3];
  void v9[2] = v0[2];
  long long v3 = v0[4];
  long long v4 = v0[5];
  v8[0] = v2;
  v8[1] = v3;
  long long v5 = v0[6];
  _OWORD v8[2] = v4;
  _OWORD v8[3] = v5;
  sub_24A497498((uint64_t)v0);
  sub_24A59EA58((uint64_t)v9, (uint64_t)v8);
  uint64_t v6 = sub_24A5BB5C0();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static BigSubstring.UnicodeScalarView.== infix(_:_:)(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v16[0] = *a1;
  v16[1] = v2;
  long long v3 = a1[3];
  uint64_t v16[2] = a1[2];
  long long v4 = a1[4];
  long long v5 = a1[5];
  v15[0] = v3;
  v15[1] = v4;
  long long v6 = a1[6];
  void v15[2] = v5;
  uint64_t v15[3] = v6;
  long long v7 = *a2;
  long long v8 = a2[2];
  long long v9 = a2[3];
  v14[1] = a2[1];
  void v14[2] = v8;
  long long v10 = a2[5];
  long long v11 = a2[4];
  v13[3] = a2[6];
  v14[0] = v7;
  v13[1] = v11;
  void v13[2] = v10;
  v13[0] = v9;
  return sub_24A551BC0((uint64_t *)v16, (unint64_t *)v15, (uint64_t *)v14, (unint64_t *)v13) & 1;
}

uint64_t sub_24A578128(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v12[0] = *a1;
  v12[1] = v2;
  long long v3 = a1[3];
  void v12[2] = a1[2];
  v13[0] = v3;
  long long v4 = a1[5];
  v13[1] = a1[4];
  void v13[2] = v4;
  long long v5 = a1[6];
  long long v6 = *a2;
  long long v7 = a2[2];
  long long v8 = a2[3];
  v14[1] = a2[1];
  void v14[2] = v7;
  v13[3] = v5;
  v14[0] = v6;
  long long v9 = a2[6];
  long long v10 = a2[4];
  void v15[2] = a2[5];
  uint64_t v15[3] = v9;
  v15[0] = v8;
  v15[1] = v10;
  return sub_24A551BC0((uint64_t *)v12, (unint64_t *)v13, (uint64_t *)v14, (unint64_t *)v15) & 1;
}

uint64_t BigSubstring.UnicodeScalarView.hash(into:)()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_24A58EDF0(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), (uint64_t)v3);
  return sub_24A5BC640();
}

uint64_t BigSubstring.UnicodeScalarView.hashValue.getter()
{
  sub_24A5BC610();
  long long v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_24A58EDF0(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), (uint64_t)v3);
  sub_24A5BC640();
  return sub_24A5BC690();
}

uint64_t sub_24A57826C()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v1;
  void v11[2] = *(_OWORD *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  unint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  unint64_t v9 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 104);
  sub_24A5BC610();
  sub_24A58EDF0(v2, v3, v4, v5, v6, v7, v9, v8, (uint64_t)v11);
  sub_24A5BC640();
  return sub_24A5BC690();
}

uint64_t sub_24A578320()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_24A58EDF0(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), (uint64_t)v3);
  return sub_24A5BC640();
}

uint64_t sub_24A578380()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v1;
  void v11[2] = *(_OWORD *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  unint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  unint64_t v9 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 104);
  sub_24A5BC610();
  sub_24A58EDF0(v2, v3, v4, v5, v6, v7, v9, v8, (uint64_t)v11);
  sub_24A5BC640();
  return sub_24A5BC690();
}

uint64_t BigSubstring.UnicodeScalarView.startIndex.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t BigSubstring.UnicodeScalarView.endIndex.getter()
{
  return *(void *)(v0 + 80);
}

unint64_t BigSubstring.UnicodeScalarView.Iterator.next()()
{
  if (*(void *)(v0 + 48) >> 10 >= *(void *)(v0 + 80) >> 10)
  {
    uint64_t v3 = 0;
    LOBYTE(v2) = 1;
  }
  else
  {
    BigString.UnicodeScalarView.Iterator.next()();
    uint64_t v2 = HIDWORD(v1) & 1;
    uint64_t v3 = v1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

void sub_24A57849C(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 48) >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    LODWORD(v3) = 0;
    LOBYTE(v4) = 1;
  }
  else
  {
    BigString.UnicodeScalarView.Iterator.next()();
    uint64_t v4 = HIDWORD(v3) & 1;
  }
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
}

__n128 BigSubstring.UnicodeScalarView.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  long long v30 = *(_OWORD *)v1;
  __n128 v28 = *(__n128 *)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 48);
  uint64_t v29 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 56);
  unint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  unint64_t v26 = *(void *)(v1 + 80);
  uint64_t v27 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 88);
  unint64_t v9 = *(void *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 104);
  sub_24A497498(v1);
  sub_24A497498(v1);
  unint64_t v11 = sub_24A4965FC(v4, v5, v6, v7);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  sub_24A497498(v1);
  unint64_t v18 = sub_24A496820(v26, v8, v9, v10, 1);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  sub_24A496BE8(v2);
  sub_24A496BE8(v2);
  __n128 result = v28;
  *(_OWORD *)a1 = v30;
  *(__n128 *)(a1 + 16) = v28;
  *(void *)(a1 + 32) = v27;
  *(void *)(a1 + 40) = v29;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v18;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v22;
  *(void *)(a1 + 104) = v24;
  return result;
}

uint64_t sub_24A578614@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v30 = v1[2];
  uint64_t v31 = v1[1];
  uint64_t v28 = v1[4];
  uint64_t v29 = v1[3];
  unint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  unint64_t v6 = v1[8];
  uint64_t v7 = v1[9];
  uint64_t v8 = v1[11];
  unint64_t v26 = v1[10];
  uint64_t v27 = v1[5];
  unint64_t v10 = v1[12];
  uint64_t v9 = v1[13];
  swift_unknownObjectRetain_n();
  unint64_t v11 = sub_24A4965FC(v4, v5, v6, v7);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_unknownObjectRetain();
  unint64_t v18 = sub_24A496820(v26, v8, v10, v9, 1);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t result = swift_unknownObjectRelease_n();
  *a1 = v3;
  a1[1] = v31;
  a1[2] = v30;
  a1[3] = v29;
  a1[4] = v28;
  a1[5] = v27;
  a1[6] = v11;
  a1[7] = v13;
  a1[8] = v15;
  a1[9] = v17;
  a1[10] = v18;
  a1[11] = v20;
  a1[12] = v22;
  a1[13] = v24;
  return result;
}

unint64_t sub_24A578740()
{
  long long v1 = v0[5];
  void v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  long long v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  long long v3 = v0[3];
  void v6[2] = v0[2];
  _OWORD v6[3] = v3;
  unint64_t v4 = sub_24A596284((uint64_t)v6);
  sub_24A496BE8((uint64_t)v6);
  return v4;
}

uint64_t sub_24A57879C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A596BE8(a1, a2, a3);
}

unint64_t BigSubstring.UnicodeScalarView.count.getter()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return sub_24A4A7F58(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.distance(from:to:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v9 = result >> 10;
  unint64_t v10 = *(void *)(v8 + 48) >> 10;
  unint64_t v11 = *(void *)(v8 + 80) >> 10;
  if (v11 >= a5 >> 10 && a5 >> 10 >= v10 && v9 >= v10 && v11 >= v9) {
    return sub_24A4A7F58(result, a2, a3, a4, a5, a6, a7, a8);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(after:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_24A4A8740(result, a2, a3, a4, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(before:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(void *)(v4 + 48) >> 10 < result >> 10) {
    return sub_24A4A8740(result, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(_:offsetBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = *(void *)(v5 + 48) >> 10;
  unint64_t v7 = *(void *)(v5 + 80) >> 10;
  if (result >> 10 >= v6 && v7 >= result >> 10)
  {
    unint64_t result = sub_24A4A8740(result, a2, a3, a4, a5);
    unint64_t v9 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v9 >= v6 && v7 >= v9) {
      return result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v10 = *(void *)(v9 + 48) >> 10;
  unint64_t v11 = *(void *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  unint64_t result = sub_24A58FE5C(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10)) {
    goto LABEL_13;
  }
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_24A58FF4C(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t *BigSubstring.UnicodeScalarView.subscript.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= *(void *)(v2 + 48) >> 10 && *(void *)(v2 + 80) >> 10 >= v5 >> 10)
  {
    long long v26 = *(_OWORD *)v2;
    long long v25 = *(_OWORD *)(v2 + 16);
    unint64_t v8 = result[6];
    uint64_t v7 = result[7];
    uint64_t v9 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    uint64_t v23 = *(void *)(v2 + 32);
    uint64_t v24 = *(void *)(v2 + 40);
    sub_24A497498(v2);
    unint64_t v13 = sub_24A4965FC(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    unint64_t result = (unint64_t *)sub_24A4965FC(v5, v9, v8, v7);
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v25;
    *(void *)(a2 + 32) = v23;
    *(void *)(a2 + 40) = v24;
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v17;
    *(void *)(a2 + 72) = v19;
    *(void *)(a2 + 80) = result;
    *(void *)(a2 + 88) = v20;
    *(void *)(a2 + 96) = v21;
    *(void *)(a2 + 104) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A578BF4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A8740(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A578C6C(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A8740(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t sub_24A578CEC(void *a1, unint64_t *a2)
{
  uint64_t v5 = malloc(0x34uLL);
  *a1 = v5;
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = *(_OWORD *)(v2 + 16);
  *uint64_t v5 = *(_OWORD *)v2;
  v5[1] = v10;
  _OWORD v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(void *)(v2 + 48) >> 10 || result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    *((_DWORD *)v5 + 12) = sub_24A58FF4C(result, v7, v8, v9);
    return (unint64_t)sub_24A4DFA58;
  }
  return result;
}

unint64_t *sub_24A578D8C@<X0>(unint64_t *result@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= (unint64_t)v2[6] >> 10 && (unint64_t)v2[10] >> 10 >= v5 >> 10)
  {
    uint64_t v26 = v2[4];
    uint64_t v27 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v28 = result[7];
    unint64_t v24 = result[6];
    uint64_t v25 = v2[3];
    uint64_t v23 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    swift_unknownObjectRetain();
    unint64_t v13 = sub_24A4965FC(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    unint64_t result = (unint64_t *)sub_24A4965FC(v5, v23, v24, v28);
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v7;
    a2[3] = v25;
    a2[4] = v26;
    a2[5] = v27;
    a2[6] = v13;
    a2[7] = v15;
    a2[8] = v17;
    a2[9] = v19;
    a2[10] = result;
    a2[11] = v20;
    a2[12] = v21;
    a2[13] = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A578EA8()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return sub_24A4A7F58(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A578F0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v7 = *(void *)(v3 + 48) >> 10;
  unint64_t v8 = *(void *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    unint64_t result = sub_24A4A8740(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    unint64_t v13 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v13 >= v7 && v8 >= v13)
    {
      *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A578FB0@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v8 = *(void *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (unint64_t v9 = *(void *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A58FE5C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A57906C(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(v2 + 80) >> 10;
  if (v6 >= *(void *)a2 >> 10)
  {
    unint64_t v7 = *(void *)(v2 + 48) >> 10;
    if (v5 >> 10 >= v7 && result >> 10 >= v7 && v6 >= result >> 10) {
      return sub_24A4A7F58(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), v5, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A579100@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A8740(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A579178(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A8740(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(roundingDown:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= result >> 10) {
    return sub_24A4965FC(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(roundingUp:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= v5)
  {
    unint64_t result = sub_24A4965FC(result, a2, a3, a4);
    if (v5 != result >> 10) {
      return sub_24A4A8740(result, v7, v8, v9, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_24A5792C0(void *result, void (*a2)(_OWORD *))
{
  unint64_t v3 = *(void *)(v2 + 48);
  if (*result >> 10 < v3 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v4 = *(void *)(v2 + 80);
  if (v4 >> 10 < result[4] >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  unint64_t v6 = v3 >> 11;
  uint64_t v7 = v4 >> 11;
  long long v8 = *(_OWORD *)(v2 + 16);
  v13[0] = *(_OWORD *)v2;
  v13[1] = v8;
  long long v9 = *(_OWORD *)(v2 + 32);
  void v13[2] = v9;
  if (*(void *)&v13[0]) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = 0;
  MEMORY[0x24C5C7E90](&v12, 8);
  uint64_t v11 = v12;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = v11;
  a2(v13);
  sub_24A5793B4((uint64_t *)v2, v13, v10, v6, v7);
  return (void *)swift_unknownObjectRelease();
}

uint64_t sub_24A5793B4(uint64_t *a1, _OWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  long long v9 = a2[1];
  long long v10 = a2[2];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v9;
  *((_OWORD *)a1 + 2) = v10;
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v12 = a1[4];
  if (*a1) {
    uint64_t v13 = a1[4];
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13 - a3;
  if (__OFSUB__(v13, a3))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[5];
  uint64_t v37 = *a1;
  long long v38 = *(_OWORD *)(a1 + 1);
  uint64_t v39 = v15;
  uint64_t v40 = v12;
  uint64_t v41 = v16;
  swift_unknownObjectRetain();
  unint64_t v17 = sub_24A495EFC(0x300uLL, 0, 0, 1, a4);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t result = swift_unknownObjectRelease();
  long long v24 = *((_OWORD *)a1 + 1);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v24;
  v36[2] = *((_OWORD *)a1 + 2);
  BOOL v25 = __OFADD__(a5, v14);
  unint64_t v26 = a5 + v14;
  if (v25)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v27 = v17 & 0xFFFFFFFFFFFFF8FFLL;
  long long v28 = *((_OWORD *)a1 + 1);
  v42[0] = *(_OWORD *)a1;
  v42[1] = v28;
  _OWORD v42[2] = *((_OWORD *)a1 + 2);
  sub_24A4974C4((uint64_t)v42, (uint64_t)v43);
  sub_24A497498((uint64_t)v43);
  unint64_t v29 = sub_24A495EFC(0x300uLL, 0, 0, 1, v26);
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t result = sub_24A496BE8((uint64_t)v36);
  if ((v29 & 0xFFFFFFFFFFFFF8FFLL) >> 10 >= v27 >> 10)
  {
    a1[6] = v27 | 0x100;
    a1[7] = v19;
    a1[8] = v21;
    a1[9] = v23;
    a1[10] = v29 & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    a1[11] = v31;
    a1[12] = v33;
    a1[13] = v35;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

double BigSubstring.UnicodeScalarView.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0;
  MEMORY[0x24C5C7E90](&v4, 8);
  uint64_t v2 = v4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 768;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 72) = xmmword_24A5BD050;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 1;
  return result;
}

uint64_t BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)(void *a1, uint64_t a2, uint64_t a3)
{
  sub_24A57B2FC(a1);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v5(a2, a3);
}

uint64_t sub_24A579620(uint64_t a1, unint64_t *a2, uint64_t a3, ValueMetadata *a4)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v9, v10);
  return BigString.UnicodeScalarView.replaceSubrange<A>(_:with:)(a2, (uint64_t)v7, a4);
}

__n128 BigSubstring.UnicodeScalarView.init(repeating:count:)@<Q0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A57B954(a1, a2, v7);
  long long v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  long long v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t BigSubstring.UnicodeScalarView.append(_:)(int a1)
{
  uint64_t v5 = v1;
  unint64_t v6 = *(void *)(v1 + 80);
  unint64_t v7 = *(void *)(v1 + 48);
  if (v6 >> 10 < v7 >> 10)
  {
    __break(1u);
  }
  else
  {
    LODWORD(v1) = a1;
    unint64_t v2 = *(void *)(v5 + 88);
    unint64_t v3 = *(void *)(v5 + 96);
    uint64_t v4 = *(void *)(v5 + 104);
    long long v8 = *(_OWORD *)(v5 + 16);
    v21[0] = *(_OWORD *)v5;
    v21[1] = v8;
    long long v18 = *(_OWORD *)(v5 + 32);
    uint64_t v19 = *(void *)&v21[0];
    _OWORD v21[2] = v18;
    uint64_t v20 = 0;
    MEMORY[0x24C5C7E90](&v20, 8);
    uint64_t v9 = v20;
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = v9;
    if (v1 <= 0x7F)
    {
      unsigned int v10 = v1 + 1;
      goto LABEL_4;
    }
  }
  int v15 = (v1 & 0x3F) << 8;
  if (v1 >= 0x800)
  {
    unsigned int v16 = (v15 | (v1 >> 6) & 0x3F) << 8;
    unsigned int v17 = (((v16 | (v1 >> 12) & 0x3F) << 8) | (v1 >> 18)) - 2122219023;
    unsigned int v10 = (v16 | (v1 >> 12)) + 8487393;
    if (WORD1(v1)) {
      unsigned int v10 = v17;
    }
  }
  else
  {
    unsigned int v10 = (v15 | (v1 >> 6)) + 33217;
  }
LABEL_4:
  if (v19) {
    uint64_t v11 = v18;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (v10 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v10) >> 3))));
  uint64_t v12 = MEMORY[0x24C5C6960](&v20);
  BigString.insert(contentsOf:at:)(v12, v13, v6, v2, v3, v4);
  sub_24A5793B4((uint64_t *)v5, v21, v11, v7 >> 11, v6 >> 11);
  return swift_unknownObjectRelease();
}

uint64_t BigSubstring.UnicodeScalarView.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  sub_24A57BBF4();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  return v4(a1, a2);
}

uint64_t BigSubstring.UnicodeScalarView.insert(_:at:)(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v6 = *(void *)(v5 + 48);
  if (a2 >> 10 < v6 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v7 = *(void *)(v5 + 80);
  if (a2 >> 10 > v7 >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  unsigned int v12 = result;
  unint64_t v13 = v6 >> 11;
  uint64_t v14 = v7 >> 11;
  long long v15 = *(_OWORD *)(v5 + 16);
  v20[0] = *(_OWORD *)v5;
  v20[1] = v15;
  long long v16 = *(_OWORD *)(v5 + 32);
  void v20[2] = v16;
  if (*(void *)&v20[0]) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v19 = 0;
  MEMORY[0x24C5C7E90](&v19, 8);
  uint64_t v18 = v19;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = v18;
  BigString.UnicodeScalarView.insert(_:at:)(v12, a2, a3, a4, a5);
  sub_24A5793B4((uint64_t *)v5, v20, v17, v13, v14);
  return swift_unknownObjectRelease();
}

uint64_t BigSubstring.UnicodeScalarView.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24A57BC58(a1, a2, a3, a4, a5);
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8);
  return v8(a1, a6);
}

unint64_t BigSubstring.UnicodeScalarView.remove(at:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  long long v5 = v4[2];
  long long v26 = v4[1];
  long long v27 = v5;
  long long v25 = *v4;
  unint64_t v6 = *((void *)v4 + 10);
  unint64_t v7 = result >> 10;
  if (result >> 10 >= v6 >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  long long v8 = (uint64_t *)v4;
  unint64_t v11 = result;
  long long v20 = v4[1];
  long long v21 = *v4;
  long long v19 = v4[2];
  __n128 result = sub_24A4A8740(result, a2, a3, a4, 1uLL);
  unint64_t v12 = (result >> 10) & 0x3FFFFFFFFFFFFELL;
  if (v12 < v7)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v6 >> 10 < v12) {
    goto LABEL_11;
  }
  unint64_t v13 = *((void *)v4 + 6);
  if (v7 < v13 >> 10) {
    goto LABEL_11;
  }
  unint64_t v14 = v13 >> 11;
  uint64_t v15 = v6 >> 11;
  v24[0] = v21;
  v24[1] = v20;
  if ((void)v25) {
    uint64_t v16 = v27;
  }
  else {
    uint64_t v16 = 0;
  }
  void v24[2] = v19;
  uint64_t v23 = 0;
  MEMORY[0x24C5C7E90](&v23, 8);
  uint64_t v17 = v23;
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = v17;
  unint64_t v18 = _s19CollectionsInternal9BigStringV17UnicodeScalarViewV6remove2ats0E0O0F0VAC5IndexV_tF_0(v11, a2, a3, a4);
  sub_24A5793B4(v8, v24, v16, v14, v15);
  swift_unknownObjectRelease();
  return v18;
}

unint64_t *BigSubstring.UnicodeScalarView.removeSubrange(_:)(unint64_t *result)
{
  unint64_t v2 = *result;
  unint64_t v3 = *((void *)v1 + 6);
  unint64_t v4 = *result >> 10;
  if (v4 < v3 >> 10)
  {
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v5 = result[4];
  unint64_t v6 = *((void *)v1 + 10);
  unint64_t v7 = v5 >> 10;
  if (v5 >> 10 > v6 >> 10)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = *((void *)v1 + 4);
  uint64_t v9 = *((void *)v1 + 5);
  long long v10 = v1[1];
  if (*(void *)v1) {
    uint64_t v11 = *((void *)v1 + 4);
  }
  else {
    uint64_t v11 = 0;
  }
  long long v16 = *v1;
  long long v17 = v10;
  *(void *)&long long v18 = v8;
  *((void *)&v18 + 1) = v9;
  uint64_t v15 = 0;
  __n128 result = (unint64_t *)MEMORY[0x24C5C7E90](&v15, 8);
  uint64_t v13 = v15;
  *uint64_t v1 = 0u;
  v1[1] = 0u;
  *((void *)v1 + 4) = 0;
  *((void *)v1 + 5) = v13;
  if (2 * (v11 & 0x1FFFFFFFFFFFFFuLL) < v7) {
    goto LABEL_15;
  }
  if (v4 == v7)
  {
LABEL_12:
    sub_24A5793B4((uint64_t *)v1, &v16, v11, v3 >> 11, v6 >> 11);
    return (unint64_t *)swift_unknownObjectRelease();
  }
  __n128 result = (unint64_t *)(v2 >> 11);
  uint64_t v14 = v5 >> 11;
  if (v5 >> 11 < v2 >> 11) {
    goto LABEL_16;
  }
  *((void *)&v18 + 1) = v9 + 1;
  if (v11 >= v14)
  {
    if (result != (unint64_t *)v14)
    {
      sub_24A57660C((uint64_t)result, v14, v12, (uint64_t)&v15);
      swift_unknownObjectRelease();
      sub_24A491510((uint64_t *)v19);
      long long v16 = v19[0];
      long long v17 = v19[1];
      long long v18 = v19[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_24A579DBC(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = a1[1];
  v9[0] = *a1;
  v9[1] = v5;
  long long v6 = a1[3];
  void v9[2] = a1[2];
  _OWORD v9[3] = v6;
  sub_24A57B2FC(v9);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v7(a2, a3);
}

__n128 sub_24A579E48@<Q0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A57B954(*a1, a2, v7);
  long long v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  long long v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_24A579E9C@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A57B5F4(a1, a2, (unint64_t *)v9);
  (*((void (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  long long v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  long long v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t sub_24A579F2C(int *a1)
{
  return BigSubstring.UnicodeScalarView.append(_:)(*a1);
}

uint64_t sub_24A579F34(uint64_t a1, uint64_t a2)
{
  sub_24A57BBF4();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  return v4(a1, a2);
}

uint64_t sub_24A579FA0(unsigned int *a1, uint64_t a2)
{
  return BigSubstring.UnicodeScalarView.insert(_:at:)(*a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A579FB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_24A57BC58(a1, *a2, a2[1], a2[2], a2[3]);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v5(a1, a3);
}

unint64_t sub_24A57A038@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result = BigSubstring.UnicodeScalarView.remove(at:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

void sub_24A57A070(uint64_t a1@<X8>)
{
  sub_24A573E9C();
  *(_DWORD *)a1 = v2;
  *(unsigned char *)(a1 + 4) = v3 & 1;
}

void sub_24A57A0A4(_DWORD *a1@<X8>)
{
  sub_24A574568();
  *a1 = v2;
}

uint64_t sub_24A57A0D4(uint64_t (*a1)(int *))
{
  return sub_24A58688C(a1);
}

unsigned __int16 *sub_24A57A0EC(unsigned __int16 *result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *result;
  if (*result)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 16);
    BOOL v8 = __OFSUB__(v5, v7);
    uint64_t v9 = v5 - v7;
    if (v8)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (__OFADD__(v9, 1))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v9 + 1 < 1)
    {
      uint64_t v6 = 0;
      uint64_t v10 = a5 - a4;
      if (!__OFSUB__(a5, a4)) {
        goto LABEL_17;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (v6 != 1)
    {
      uint64_t v11 = (unsigned __int8 *)(a2 + 40);
      uint64_t v12 = 1;
      while (1)
      {
        unsigned int v13 = *v11;
        v11 += 24;
        uint64_t v5 = v9 - v13;
        if (__OFSUB__(v9, v13)) {
          goto LABEL_21;
        }
        if (__OFADD__(v5, 1)) {
          goto LABEL_22;
        }
        if (v5 + 1 < 1)
        {
          uint64_t v6 = v12;
          uint64_t v5 = v9;
          uint64_t v10 = a5 - a4;
          if (__OFSUB__(a5, a4)) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
        ++v12;
        uint64_t v9 = v5;
        if (v6 == v12) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v5 = v9;
  }
LABEL_15:
  if (!v5)
  {
    uint64_t v10 = a5 - a4;
    if (!__OFSUB__(a5, a4))
    {
LABEL_17:
      sub_24A4950DC(v6, v5, v10, 1, result, a2);
      return (unsigned __int16 *)v6;
    }
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

_WORD *sub_24A57A1E4(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a3 >> 16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *unint64_t result = a3;
  if (__OFSUB__(a6, a5))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_26B177B90);
  swift_arrayInitWithCopy();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t result = 0;
  if (a3)
  {
    uint64_t v11 = 24 * a3;
    for (uint64_t i = (unsigned __int8 *)(a2 + 19); ; i += 24)
    {
      uint64_t v13 = *i;
      BOOL v14 = __OFADD__(result, v13);
      unint64_t result = (_WORD *)((char *)result + v13);
      if (v14) {
        break;
      }
      uint64_t v15 = *(i - 1);
      BOOL v14 = __OFADD__(v10, v15);
      v10 += v15;
      if (v14) {
        goto LABEL_13;
      }
      uint64_t v16 = *(i - 2);
      BOOL v14 = __OFADD__(v9, v16);
      v9 += v16;
      if (v14) {
        goto LABEL_14;
      }
      uint64_t v17 = *(i - 3);
      BOOL v14 = __OFADD__(v8, v17);
      v8 += v17;
      if (v14) {
        goto LABEL_15;
      }
      v11 -= 24;
      if (!v11) {
        return result;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

_WORD *sub_24A57A2D8(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a3 >> 16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *unint64_t result = a3;
  if (__OFSUB__(a6, a5))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B177920);
  swift_arrayInitWithCopy();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t result = 0;
  if (a3)
  {
    uint64_t v11 = (void *)(a2 + 32);
    uint64_t v12 = 40 * a3;
    while (1)
    {
      uint64_t v13 = *(v11 - 3);
      BOOL v14 = __OFADD__(result, v13);
      unint64_t result = (_WORD *)((char *)result + v13);
      if (v14) {
        break;
      }
      uint64_t v15 = *(v11 - 2);
      BOOL v14 = __OFADD__(v10, v15);
      v10 += v15;
      if (v14) {
        goto LABEL_13;
      }
      uint64_t v16 = *(v11 - 1);
      BOOL v14 = __OFADD__(v9, v16);
      v9 += v16;
      if (v14) {
        goto LABEL_14;
      }
      BOOL v14 = __OFADD__(v8, *v11);
      v8 += *v11;
      if (v14) {
        goto LABEL_15;
      }
      v11 += 5;
      v12 -= 40;
      if (!v12) {
        return result;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_24A57A3CC(unsigned __int16 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t result = *a1;
  if (result)
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
    BOOL v7 = __OFSUB__(v4, v6);
    uint64_t v8 = v4 - v6;
    if (!v7)
    {
      if (__OFADD__(v8, 1))
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (v8 + 1 < 1) {
        return 0;
      }
      if (result == 1)
      {
        uint64_t v4 = v8;
        goto LABEL_13;
      }
      uint64_t v9 = (unsigned __int8 *)(a2 + 40);
      uint64_t v10 = 1;
      while (1)
      {
        unsigned int v11 = *v9;
        v9 += 24;
        uint64_t v4 = v8 - v11;
        if (__OFSUB__(v8, v11)) {
          break;
        }
        if (__OFADD__(v4, 1)) {
          goto LABEL_17;
        }
        if (v4 + 1 < 1) {
          return v10;
        }
        ++v10;
        uint64_t v8 = v4;
        if (result == v10) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if (v4) {
LABEL_20:
  }
    __break(1u);
  return result;
}

void sub_24A57A46C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v92 = a1;
  if (a1 < 1)
  {
LABEL_62:
    swift_unknownObjectRelease();
    return;
  }
  if (v6 <= a1)
  {
    swift_unknownObjectRetain();
LABEL_60:
    *(void *)&long long v95 = v3;
    *((void *)&v95 + 1) = v2;
    uint64_t v96 = v5;
    uint64_t v97 = v4;
    uint64_t v98 = v6;
    swift_unknownObjectRetain();
    sub_24A575950(&v95, v48, v49, v50);
LABEL_61:
    sub_24A496BE8(v82);
    goto LABEL_62;
  }
  if (!*(unsigned char *)(v3 + 18))
  {
    swift_unknownObjectRetain();
LABEL_64:
    uint64_t v51 = v3;
    uint64_t v52 = sub_24A57A3CC((unsigned __int16 *)(v3 + 16), v3 + 24, &v92);
    unint64_t v54 = v53;
    *(void *)&long long v95 = v51;
    *((void *)&v95 + 1) = v2;
    uint64_t v96 = v5;
    uint64_t v97 = v4;
    uint64_t v98 = v6;
    swift_unknownObjectRetain();
    sub_24A57703C(v52, (uint64_t)&v87);
    uint64_t v56 = v87;
    unint64_t v55 = v88;
    unint64_t v57 = v89 | ((unint64_t)v90 << 32) | ((unint64_t)v91 << 40);
    unint64_t v58 = sub_24A494ED0(v54, v87, v88);
    uint64_t v59 = sub_24A494C18(v58, v56, v55, v57);
    swift_bridgeObjectRetain();
    unint64_t v60 = sub_24A494C00(v58, v56, v55);
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    swift_bridgeObjectRelease();
    MEMORY[0x24C5C68C0](v60, v62, v64, v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v67 = sub_24A5BB830();
    uint64_t v69 = v68;
    uint64_t v71 = v70;
    uint64_t v73 = v72;
    swift_bridgeObjectRelease();
    uint64_t v74 = MEMORY[0x24C5C68C0](v67, v69, v71, v73);
    unint64_t v76 = v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_24A494F18(v74, v76, v59 & 0xFFFFFFFFFFFFLL);
    sub_24A496BE8(v82);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    uint64_t v7 = v92;
    uint64_t v8 = *(unsigned __int16 *)(v3 + 16);
    if (!*(_WORD *)(v3 + 16)) {
      break;
    }
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v10 = v92 - v9;
    if (__OFSUB__(v92, v9)) {
      goto LABEL_71;
    }
    if (v10 <= 0)
    {
      uint64_t v21 = *(void *)(v3 + 24);
      uint64_t v2 = *(void *)(v3 + 32);
      uint64_t v5 = *(void *)(v3 + 40);
      uint64_t v4 = *(void *)(v3 + 48);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v3 = v21;
      uint64_t v6 = v9;
LABEL_53:
      if (v7 <= 0) {
        goto LABEL_61;
      }
      if (v7 >= v6) {
        goto LABEL_60;
      }
      goto LABEL_55;
    }
    if (v8 == 1) {
      goto LABEL_86;
    }
    uint64_t v11 = *(void *)(v3 + 96);
    uint64_t v7 = v10 - v11;
    if (__OFSUB__(v10, v11)) {
      goto LABEL_77;
    }
    if (v7 >= 1)
    {
      if (v8 == 2) {
        goto LABEL_86;
      }
      uint64_t v12 = (void *)(v3 + 136);
      uint64_t v13 = 2;
      while (v8 != v13)
      {
        uint64_t v14 = v7 - *v12;
        if (__OFSUB__(v7, *v12)) {
          goto LABEL_66;
        }
        if (v14 < 1) {
          goto LABEL_20;
        }
        ++v13;
        v12 += 5;
        uint64_t v7 = v14;
        if (v8 == v13) {
          goto LABEL_86;
        }
      }
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    uint64_t v92 = v10;
    long long v42 = *(_OWORD *)(v3 + 24);
    long long v43 = *(_OWORD *)(v3 + 40);
    uint64_t v100 = *(void *)(v3 + 56);
    v99[0] = v42;
    v99[1] = v43;
    uint64_t v44 = (void *)v3;
    uint64_t v3 = *(void *)(v3 + 64);
    uint64_t v2 = v44[9];
    uint64_t v5 = v44[10];
    uint64_t v4 = v44[11];
    sub_24A497498((uint64_t)v99);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    sub_24A575950(v99, v45, v46, v47);
    uint64_t v6 = v11;
    if (v10 >= v11) {
      goto LABEL_60;
    }
LABEL_55:
    if (!*(unsigned char *)(v3 + 18)) {
      goto LABEL_64;
    }
  }
  if (v92) {
    goto LABEL_86;
  }
  uint64_t v13 = -1;
LABEL_20:
  uint64_t v92 = v7;
  uint64_t v83 = v7;
  if (swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v84 = v4;
  }
  else
  {
    uint64_t v110 = v3;
    uint64_t v111 = v2;
    uint64_t v112 = v5;
    uint64_t v113 = v4;
    uint64_t v114 = v6;
    sub_24A4CBC1C((uint64_t)v93);
    swift_unknownObjectRelease();
    uint64_t v3 = v93[0];
    uint64_t v2 = v93[1];
    uint64_t v5 = v93[2];
    uint64_t v84 = v93[3];
    uint64_t v6 = v93[4];
  }
  uint64_t v15 = *(unsigned __int16 *)(v3 + 16);
  if (v13 >= v15 - 1)
  {
    uint64_t v20 = v84;
LABEL_44:
    if (swift_isUniquelyReferenced_nonNull())
    {
      uint64_t v86 = v6;
      uint64_t v31 = v5;
    }
    else
    {
      uint64_t v105 = v3;
      uint64_t v106 = v2;
      uint64_t v107 = v5;
      uint64_t v108 = v20;
      uint64_t v109 = v6;
      sub_24A4CBC1C((uint64_t)v94);
      swift_unknownObjectRelease();
      uint64_t v3 = v94[0];
      uint64_t v2 = v94[1];
      uint64_t v31 = v94[2];
      uint64_t v20 = v94[3];
      uint64_t v86 = v94[4];
    }
    uint64_t v32 = (void *)(v3 + 40 * v13);
    uint64_t v33 = v13;
    uint64_t v35 = v32[3];
    uint64_t v34 = v32[4];
    v32 += 3;
    uint64_t v36 = v32[2];
    uint64_t v4 = v32[3];
    uint64_t v37 = v32[4];
    memmove(v32, v32 + 5, 40 * (*(unsigned __int16 *)(v3 + 16) + ~v33));
    int v38 = *(unsigned __int16 *)(v3 + 16);
    swift_unknownObjectRetain();
    if (!v38) {
      goto LABEL_72;
    }
    *(_WORD *)(v3 + 16) = v38 - 1;
    swift_unknownObjectRelease();
    if (__OFSUB__(v2, v34)) {
      goto LABEL_73;
    }
    if (__OFSUB__(v31, v36)) {
      goto LABEL_74;
    }
    if (__OFSUB__(v20, v4)) {
      goto LABEL_75;
    }
    if (__OFSUB__(v86, v37)) {
      goto LABEL_76;
    }
    *(void *)&long long v101 = v3;
    *((void *)&v101 + 1) = v2 - v34;
    uint64_t v102 = v31 - v36;
    uint64_t v103 = v20 - v4;
    uint64_t v104 = v86 - v37;
    sub_24A575950(&v101, v39, v40, v41);
    uint64_t v3 = v35;
    uint64_t v6 = v37;
    uint64_t v5 = v36;
    uint64_t v2 = v34;
    uint64_t v7 = v83;
    goto LABEL_53;
  }
  if (v13 + 1 > v15) {
    goto LABEL_78;
  }
  uint64_t v80 = v13;
  uint64_t v81 = v13 + 1 - v15;
  if (v13 + 1 == v15)
  {
    swift_unknownObjectRetain();
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
LABEL_37:
    unint64_t v30 = v81 + v15;
    if (v81 + v15 < 0) {
      goto LABEL_79;
    }
    if (v30 >> 16) {
      goto LABEL_80;
    }
    *(_WORD *)(v3 + 16) = v30;
    swift_unknownObjectRelease();
    BOOL v29 = __OFSUB__(v2, v19);
    v2 -= v19;
    if (v29) {
      goto LABEL_81;
    }
    BOOL v29 = __OFSUB__(v5, v18);
    v5 -= v18;
    if (v29) {
      goto LABEL_82;
    }
    uint64_t v20 = v84 - v17;
    if (__OFSUB__(v84, v17)) {
      goto LABEL_83;
    }
    BOOL v29 = __OFSUB__(v6, v16);
    v6 -= v16;
    if (v29) {
      goto LABEL_84;
    }
    uint64_t v13 = v80;
    goto LABEL_44;
  }
  if (v13 + 1 >= v15) {
    goto LABEL_85;
  }
  uint64_t v85 = v6;
  uint64_t v77 = v2;
  uint64_t v78 = v5;
  swift_unknownObjectRetain();
  uint64_t v16 = 0;
  uint64_t v22 = v13;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v79 = v3;
  uint64_t v23 = (uint64_t *)(v3 + 40 * v22 + 96);
  uint64_t v24 = ~v22 + v15;
  while (1)
  {
    uint64_t v25 = *(v23 - 3);
    uint64_t v27 = *(v23 - 2);
    uint64_t v26 = *(v23 - 1);
    uint64_t v28 = *v23;
    swift_unknownObjectRelease();
    BOOL v29 = __OFADD__(v19, v25);
    v19 += v25;
    if (v29) {
      break;
    }
    BOOL v29 = __OFADD__(v18, v27);
    v18 += v27;
    if (v29) {
      goto LABEL_68;
    }
    BOOL v29 = __OFADD__(v17, v26);
    v17 += v26;
    if (v29) {
      goto LABEL_69;
    }
    BOOL v29 = __OFADD__(v16, v28);
    v16 += v28;
    if (v29) {
      goto LABEL_70;
    }
    v23 += 5;
    if (!--v24)
    {
      uint64_t v5 = v78;
      uint64_t v3 = v79;
      uint64_t v15 = *(unsigned __int16 *)(v79 + 16);
      uint64_t v2 = v77;
      uint64_t v6 = v85;
      goto LABEL_37;
    }
  }
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
}

uint64_t sub_24A57AA88(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result) {
    goto LABEL_9;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  BOOL v7 = __OFSUB__(v4, v6);
  uint64_t v8 = v4 - v6;
  if (v7)
  {
    __break(1u);
  }
  else if (v8 < 1)
  {
    return 0;
  }
  else if (v5 == 1)
  {
    do
    {
LABEL_8:
      __break(1u);
LABEL_9:
      ;
    }
    while (v4);
    return -1;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)(a2 + 40);
    uint64_t result = 1;
    uint64_t v4 = v8;
    while (1)
    {
      unsigned int v10 = *v9;
      v9 += 24;
      uint64_t v11 = v4 - v10;
      if (v11 < 1) {
        break;
      }
      ++result;
      uint64_t v4 = v11;
      if (v5 == result) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t sub_24A57AAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = v2;
  uint64_t v9 = *(void **)v2;
  long long v10 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)unint64_t v60 = *(_OWORD *)v2;
  *(_OWORD *)&v60[16] = v10;
  uint64_t v61 = *(void *)(v2 + 32);
  uint64_t v59 = a1;
  if (a1 < 1)
  {
    uint64_t v52 = *(void *)&v60[8];
    uint64_t v12 = *(void *)v60;
    uint64_t v4 = *(void *)&v60[24];
    uint64_t v3 = *(void *)&v60[16];
    uint64_t v5 = v61;
    swift_unknownObjectRetain();
    uint64_t v62 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x24C5C7E90](&v62, 8);
    uint64_t v6 = v62;
    uint64_t v9 = *(void **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_37:
    }
      uint64_t v9 = sub_24A499D74(0, v9[2] + 1, 1, v9);
    unint64_t v22 = v9[2];
    unint64_t v21 = v9[3];
    if (v22 >= v21 >> 1) {
      uint64_t v9 = sub_24A499D74((void *)(v21 > 1), v22 + 1, 1, v9);
    }
    void v9[2] = v22 + 1;
    uint64_t v23 = &v9[6 * v22];
    v23[4] = v12;
    __n128 v23[5] = v52;
    v23[6] = v3;
    v23[7] = v4;
    v23[8] = v5;
    v23[9] = v6;
    sub_24A496BE8(v7);
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(a2 + 96) = v9;
  }
  else
  {
    uint64_t v11 = a1;
    uint64_t v12 = *(void *)(v2 + 32);
    if (v12 <= a1)
    {
LABEL_30:
      return swift_unknownObjectRelease();
    }
    else if (*((unsigned char *)v9 + 18))
    {
      uint64_t result = swift_unknownObjectRetain();
      while (1)
      {
        uint64_t v14 = *((unsigned __int16 *)v9 + 8);
        if (!*((_WORD *)v9 + 8)) {
          break;
        }
        uint64_t v15 = v9[7];
        BOOL v16 = __OFSUB__(v11, v15);
        uint64_t v17 = v11 - v15;
        if (v16) {
          goto LABEL_35;
        }
        if (v17 <= 0)
        {
          uint64_t result = 0;
        }
        else
        {
          if (v14 == 1) {
            break;
          }
          uint64_t v18 = v9[12];
          uint64_t v11 = v17 - v18;
          if (__OFSUB__(v17, v18)) {
            goto LABEL_36;
          }
          if (v11 >= 1)
          {
            if (v14 != 2)
            {
              uint64_t v19 = v9 + 17;
              uint64_t result = 2;
              while (v14 != result)
              {
                uint64_t v20 = v11 - *v19;
                if (__OFSUB__(v11, *v19)) {
                  goto LABEL_34;
                }
                if (v20 < 1) {
                  goto LABEL_20;
                }
                ++result;
                v19 += 5;
                uint64_t v11 = v20;
                if (v14 == result) {
                  goto LABEL_38;
                }
              }
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
            break;
          }
          uint64_t result = 1;
          uint64_t v11 = v17;
        }
LABEL_20:
        uint64_t result = sub_24A5772D4(result, a2);
        uint64_t v12 = v61;
        if (v11 >= v61)
        {
          sub_24A496BE8(v7);
          goto LABEL_30;
        }
        uint64_t v9 = *(void **)v60;
        if (!*(unsigned char *)(*(void *)v60 + 18))
        {
          uint64_t v59 = v11;
          goto LABEL_28;
        }
      }
LABEL_38:
      __break(1u);
    }
    else
    {
      swift_unknownObjectRetain();
LABEL_28:
      uint64_t v24 = sub_24A57AA88((uint64_t)(v9 + 2), (uint64_t)(v9 + 3), &v59);
      unint64_t v26 = v25;
      uint64_t v62 = v9;
      long long v63 = *(_OWORD *)&v60[8];
      uint64_t v64 = *(void *)&v60[24];
      uint64_t v65 = v12;
      swift_unknownObjectRetain();
      sub_24A577648(v24, a2, (uint64_t)&v54);
      uint64_t v28 = v54;
      unint64_t v27 = v55;
      unint64_t v29 = v56 | ((unint64_t)v57 << 32) | ((unint64_t)v58 << 40);
      unint64_t v30 = sub_24A494ED0(v26, v54, v55);
      uint64_t v31 = sub_24A494C18(v30, v28, v27, v29);
      unsigned int v50 = v32;
      uint64_t v51 = HIBYTE(v32);
      unsigned __int16 v53 = HIWORD(v31);
      swift_bridgeObjectRetain();
      unint64_t v33 = sub_24A494C00(v30, v28, v27);
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      uint64_t v39 = v38;
      swift_bridgeObjectRelease();
      uint64_t v40 = MEMORY[0x24C5C68C0](v33, v35, v37, v39);
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_24A5BB830();
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      MEMORY[0x24C5C68C0](v43, v45, v47, v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A575508(v40, v42, (v50 << 16) & 0xFF0000 | v53 | (v50 << 16) & 0xFF000000 | (v51 << 40) | ((unint64_t)BYTE2(v50) << 32));
      sub_24A496BE8(v7);
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_24A57AEF8(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v11 = result;
    uint64_t v12 = *v5;
    swift_unknownObjectRetain();
    sub_24A576078(0, v11, (uint64_t)v5);
    uint64_t v13 = *(unsigned __int16 *)(v12 + 16);
    if (v13 > a3)
    {
      swift_unknownObjectRetain();
      sub_24A576348(a3 + 1, v13, v6);
    }
    uint64_t v14 = v12 + 24;
    if (*(unsigned char *)(v12 + 18))
    {
      uint64_t v15 = (long long *)(v14 + 40 * v11);
      long long v16 = *v15;
      long long v17 = v15[1];
      uint64_t v77 = *((void *)v15 + 4);
      v76[0] = v16;
      v76[1] = v17;
      uint64_t v18 = (long long *)(v14 + 40 * a3);
      long long v20 = *v18;
      long long v19 = v18[1];
      uint64_t v75 = *((void *)v18 + 4);
      v74[0] = v20;
      v74[1] = v19;
      sub_24A497498((uint64_t)v76);
      sub_24A497498((uint64_t)v76);
      sub_24A497498((uint64_t)v74);
      sub_24A57A46C(a2);
      swift_unknownObjectRetain();
      sub_24A57AAFC(a4, a5);
      sub_24A496BE8(v6);
      sub_24A496BE8((uint64_t)v74);
      return sub_24A496BE8((uint64_t)v76);
    }
    else
    {
      uint64_t v21 = v14 + 24 * v11;
      unint64_t v23 = *(void *)v21;
      unint64_t v22 = *(void *)(v21 + 8);
      uint64_t v24 = v14 + 24 * a3;
      uint64_t v73 = v6;
      uint64_t v25 = *(void *)v24;
      unint64_t v26 = *(void *)(v24 + 8);
      unint64_t v70 = *(void *)v24;
      uint64_t v27 = *(unsigned int *)(v24 + 16);
      uint64_t v28 = *(unsigned __int8 *)(v24 + 20);
      uint64_t v29 = *(unsigned __int8 *)(v24 + 21);
      unint64_t v30 = *(unsigned int *)(v21 + 16) | ((unint64_t)*(unsigned __int8 *)(v21 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v21 + 21) << 40);
      unint64_t v31 = sub_24A494ED0(a2, *(void *)v21, v22);
      unint64_t v71 = v27 | (v28 << 32) | (v29 << 40);
      unint64_t v32 = sub_24A494ED0(a4, v25, v26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_24A494C18(v31, v23, v22, v30);
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_24A494C00(v31, v23, v22);
      uint64_t v36 = v35;
      uint64_t v38 = v37;
      uint64_t v40 = v39;
      swift_bridgeObjectRelease();
      MEMORY[0x24C5C68C0](v34, v36, v38, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_24A5BB830();
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = MEMORY[0x24C5C68C0](v41, v43, v45, v47);
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A494F18(v48, v50, v33 & 0xFFFFFFFFFFFFLL);
      uint64_t v72 = sub_24A494C18(v32, v70, v26, v71);
      LODWORD(v45) = v51;
      uint64_t v69 = HIBYTE(v51);
      swift_bridgeObjectRetain();
      unint64_t v52 = sub_24A494C00(v32, v70, v26);
      uint64_t v54 = v53;
      uint64_t v56 = v55;
      uint64_t v58 = v57;
      swift_bridgeObjectRelease();
      uint64_t v68 = MEMORY[0x24C5C68C0](v52, v54, v56, v58);
      unint64_t v60 = v59;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_24A5BB830();
      uint64_t v63 = v62;
      uint64_t v65 = v64;
      uint64_t v67 = v66;
      swift_bridgeObjectRelease();
      MEMORY[0x24C5C68C0](v61, v63, v65, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A575508(v68, v60, (v45 << 16) & 0xFF0000 | HIWORD(v72) | (v45 << 16) & 0xFF000000 | (v69 << 40) | ((unint64_t)BYTE2(v45) << 32));
      sub_24A496BE8(v73);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void *sub_24A57B2FC(void *a1)
{
  return sub_24A5792C0(a1, (void (*)(_OWORD *))sub_24A57C21C);
}

void sub_24A57B33C(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  swift_bridgeObjectRetain();
  sub_24A588A10(a1, a2, &v42);
  unint64_t v6 = v42.n128_u64[1];
  unint64_t v7 = v42.n128_u64[0];
  __n128 v45 = v42;
  long long v46 = v43;
  long long v47 = v44;
  unint64_t v8 = v42.n128_u64[0];
  uint64_t v9 = v44;
  unint64_t v40 = *((void *)&v43 + 1);
  unint64_t v41 = v43;
  unint64_t v39 = *((void *)&v44 + 1);
  long long v10 = v44;
  if (!v42.n128_u64[0]) {
    goto LABEL_8;
  }
  if ((v44 & 0x8000000000000000) != 0)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    return;
  }
  if (!*(_WORD *)(v42.n128_u64[0] + 16) || (void)v44 == 0)
  {
LABEL_8:
    swift_unknownObjectRetain();
    unint64_t v12 = sub_24A498214();
    LOBYTE(v13) = 0;
    unint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = *(unsigned __int8 *)(v42.n128_u64[0] + 18);
    if (*(unsigned char *)(v42.n128_u64[0] + 18))
    {
      unint64_t v38 = v42.n128_u64[0];
      swift_unknownObjectRetain_n();
      uint64_t v13 = 0;
      unint64_t v16 = v8;
      do
      {
        uint64_t v17 = *(unsigned __int16 *)(v16 + 16);
        if (*(_WORD *)(v16 + 16))
        {
          uint64_t v19 = 0;
          long long v20 = (uint64_t *)(v16 + 56);
          while (1)
          {
            uint64_t v21 = *v20;
            v20 += 5;
            uint64_t v22 = v13 - v21;
            if (__OFSUB__(v13, v21)) {
              break;
            }
            if (__OFADD__(v22, 1)) {
              goto LABEL_42;
            }
            if (v22 + 1 < 1)
            {
              uint64_t v17 = v19;
              goto LABEL_12;
            }
            ++v19;
            uint64_t v13 = v22;
            if (v17 == v19) {
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v22 = v13;
LABEL_21:
        if (v22) {
          goto LABEL_43;
        }
        uint64_t v13 = 0;
LABEL_12:
        char v18 = (4 * *(unsigned char *)(v16 + 18) + 8) & 0x3C;
        uint64_t v15 = ((-15 << v18) - 1) & v15 | (v17 << v18);
        unint64_t v14 = *(void *)(v16 + 24 + 40 * v17);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        unint64_t v16 = v14;
      }
      while (*(unsigned char *)(v14 + 18));
      unint64_t v23 = v15 & 0xFFFFFFFFFFFFF0FFLL;
      unint64_t v7 = v38;
      uint64_t v24 = *(unsigned __int16 *)(v14 + 16);
      if (!*(_WORD *)(v14 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
    swift_unknownObjectRetain_n();
    unint64_t v23 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = v8;
    uint64_t v24 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16))
    {
LABEL_24:
      uint64_t v25 = 0;
      unint64_t v26 = (unsigned __int8 *)(v14 + 40);
      while (1)
      {
        unsigned int v27 = *v26;
        v26 += 24;
        uint64_t v28 = v13 - v27;
        if (__OFSUB__(v13, v27)) {
          break;
        }
        if (__OFADD__(v28, 1)) {
          goto LABEL_45;
        }
        if (v28 + 1 < 1)
        {
          uint64_t v24 = v25;
          goto LABEL_35;
        }
        ++v25;
        uint64_t v13 = v28;
        if (v24 == v25) {
          goto LABEL_32;
        }
      }
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_31:
    uint64_t v28 = v13;
LABEL_32:
    if (v28) {
      goto LABEL_48;
    }
    uint64_t v13 = 0;
LABEL_35:
    swift_unknownObjectRelease();
    if (v13 < 0) {
      goto LABEL_46;
    }
    unint64_t v12 = v23 | (v24 << 8);
  }
  if (v8) {
    unint64_t v29 = (v9 << 11) | 0x300;
  }
  else {
    unint64_t v29 = 768;
  }
  uint64_t v30 = v13 | 0x300;
  unint64_t v31 = sub_24A4965FC(v29, 0, 0, 1);
  unint64_t v33 = v32;
  unint64_t v35 = v34;
  unint64_t v37 = v36;
  sub_24A496BE8((uint64_t)&v42);
  *a3 = v7;
  a3[1] = v6;
  a3[2] = v41;
  a3[3] = v40;
  a3[4] = v10;
  a3[5] = v39;
  a3[6] = v30;
  a3[7] = *((void *)&v10 + 1);
  a3[8] = v12;
  a3[9] = v14;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
}

void sub_24A57B5F4(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, unint64_t *a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  unint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  BigString.UnicodeScalarView.init<A>(_:)((uint64_t)v6, a2, &v47);
  __n128 v50 = v47;
  long long v51 = v48;
  long long v52 = v49;
  __n128 v53 = v47;
  unint64_t v8 = v47.n128_u64[1];
  unint64_t v9 = v47.n128_u64[0];
  long long v54 = v48;
  long long v55 = v49;
  unint64_t v10 = v47.n128_u64[0];
  uint64_t v11 = v49;
  unint64_t v45 = *((void *)&v48 + 1);
  unint64_t v46 = v48;
  unint64_t v43 = *((void *)&v49 + 1);
  unint64_t v42 = *((void *)&v49 + 1);
  unint64_t v44 = v49;
  if (!v47.n128_u64[0]) {
    goto LABEL_19;
  }
  if ((v49 & 0x8000000000000000) != 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  if (*(_WORD *)(v47.n128_u64[0] + 16) && (void)v49)
  {
    uint64_t v12 = *(unsigned __int8 *)(v47.n128_u64[0] + 18);
    if (*(unsigned char *)(v47.n128_u64[0] + 18))
    {
      unint64_t v41 = v47.n128_u64[0];
      swift_unknownObjectRetain_n();
      uint64_t v13 = 0;
      unint64_t v14 = v10;
      do
      {
        uint64_t v15 = *(unsigned __int16 *)(v14 + 16);
        if (*(_WORD *)(v14 + 16))
        {
          uint64_t v18 = 0;
          uint64_t v19 = (uint64_t *)(v14 + 56);
          while (1)
          {
            uint64_t v20 = *v19;
            v19 += 5;
            uint64_t v21 = v13 - v20;
            if (__OFSUB__(v13, v20)) {
              break;
            }
            if (__OFADD__(v21, 1)) {
              goto LABEL_39;
            }
            if (v21 + 1 < 1)
            {
              uint64_t v15 = v18;
              goto LABEL_8;
            }
            ++v18;
            uint64_t v13 = v21;
            if (v15 == v18) {
              goto LABEL_17;
            }
          }
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v21 = v13;
LABEL_17:
        if (v21) {
          goto LABEL_40;
        }
        uint64_t v13 = 0;
LABEL_8:
        char v16 = (4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C;
        uint64_t v12 = ((-15 << v16) - 1) & v12 | (v15 << v16);
        unint64_t v17 = *(void *)(v14 + 24 + 40 * v15);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        unint64_t v14 = v17;
      }
      while (*(unsigned char *)(v17 + 18));
      unint64_t v23 = v12 & 0xFFFFFFFFFFFFF0FFLL;
      unint64_t v9 = v41;
      uint64_t v24 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16)) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    swift_unknownObjectRetain_n();
    unint64_t v23 = 0;
    uint64_t v13 = 0;
    unint64_t v17 = v10;
    uint64_t v24 = *(unsigned __int16 *)(v10 + 16);
    if (*(_WORD *)(v10 + 16))
    {
LABEL_21:
      uint64_t v25 = 0;
      unint64_t v26 = (unsigned __int8 *)(v17 + 40);
      while (1)
      {
        unsigned int v27 = *v26;
        v26 += 24;
        uint64_t v28 = v13 - v27;
        if (__OFSUB__(v13, v27)) {
          break;
        }
        if (__OFADD__(v28, 1)) {
          goto LABEL_42;
        }
        if (v28 + 1 < 1)
        {
          uint64_t v24 = v25;
          goto LABEL_32;
        }
        ++v25;
        uint64_t v13 = v28;
        if (v24 == v25) {
          goto LABEL_29;
        }
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_28:
    uint64_t v28 = v13;
LABEL_29:
    if (v28) {
      goto LABEL_45;
    }
    uint64_t v13 = 0;
LABEL_32:
    swift_unknownObjectRelease();
    if (v13 < 0) {
      goto LABEL_43;
    }
    unint64_t v22 = v23 | (v24 << 8);
  }
  else
  {
LABEL_19:
    swift_unknownObjectRetain();
    unint64_t v22 = sub_24A498214();
    LOBYTE(v13) = 0;
    unint64_t v17 = 0;
  }
  if (v10) {
    unint64_t v29 = (v11 << 11) | 0x300;
  }
  else {
    unint64_t v29 = 768;
  }
  uint64_t v30 = v13 | 0x300;
  unint64_t v31 = sub_24A4965FC(v29, 0, 0, 1);
  unint64_t v33 = v32;
  unint64_t v35 = v34;
  unint64_t v37 = v36;
  sub_24A496BE8((uint64_t)&v47);
  *a3 = v9;
  a3[1] = v8;
  unint64_t v38 = v45;
  a3[2] = v46;
  a3[3] = v38;
  unint64_t v39 = v43;
  a3[4] = v44;
  a3[5] = v39;
  unint64_t v40 = v42;
  a3[6] = v30;
  a3[7] = v40;
  a3[8] = v22;
  a3[9] = v17;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
}

void sub_24A57B954(unsigned int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_24A589EEC(a1, a2, &v39);
  long long v42 = v39;
  long long v43 = v40;
  long long v44 = v41;
  long long v45 = v39;
  uint64_t v4 = *((void *)&v39 + 1);
  uint64_t v5 = v39;
  long long v46 = v40;
  long long v47 = v41;
  uint64_t v6 = v39;
  uint64_t v7 = v41;
  uint64_t v37 = *((void *)&v40 + 1);
  uint64_t v38 = v40;
  uint64_t v36 = *((void *)&v41 + 1);
  long long v8 = v41;
  if (!(void)v39) {
    goto LABEL_19;
  }
  if ((v41 & 0x8000000000000000) != 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  if (*(_WORD *)(v39 + 16) && (void)v41)
  {
    uint64_t v9 = *(unsigned __int8 *)(v39 + 18);
    if (*(unsigned char *)(v39 + 18))
    {
      uint64_t v35 = v39;
      swift_unknownObjectRetain_n();
      uint64_t v10 = 0;
      uint64_t v11 = v6;
      do
      {
        uint64_t v12 = *(unsigned __int16 *)(v11 + 16);
        if (*(_WORD *)(v11 + 16))
        {
          uint64_t v15 = 0;
          char v16 = (uint64_t *)(v11 + 56);
          while (1)
          {
            uint64_t v17 = *v16;
            v16 += 5;
            uint64_t v18 = v10 - v17;
            if (__OFSUB__(v10, v17)) {
              break;
            }
            if (__OFADD__(v18, 1)) {
              goto LABEL_39;
            }
            if (v18 + 1 < 1)
            {
              uint64_t v12 = v15;
              goto LABEL_8;
            }
            ++v15;
            uint64_t v10 = v18;
            if (v12 == v15) {
              goto LABEL_17;
            }
          }
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v18 = v10;
LABEL_17:
        if (v18) {
          goto LABEL_40;
        }
        uint64_t v10 = 0;
LABEL_8:
        char v13 = (4 * *(unsigned char *)(v11 + 18) + 8) & 0x3C;
        uint64_t v9 = ((-15 << v13) - 1) & v9 | (v12 << v13);
        uint64_t v14 = *(void *)(v11 + 24 + 40 * v12);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v11 = v14;
      }
      while (*(unsigned char *)(v14 + 18));
      unint64_t v20 = v9 & 0xFFFFFFFFFFFFF0FFLL;
      uint64_t v5 = v35;
      uint64_t v21 = *(unsigned __int16 *)(v14 + 16);
      if (!*(_WORD *)(v14 + 16)) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    swift_unknownObjectRetain_n();
    unint64_t v20 = 0;
    uint64_t v10 = 0;
    uint64_t v14 = v6;
    uint64_t v21 = *(unsigned __int16 *)(v6 + 16);
    if (*(_WORD *)(v6 + 16))
    {
LABEL_21:
      uint64_t v22 = 0;
      unint64_t v23 = (unsigned __int8 *)(v14 + 40);
      while (1)
      {
        unsigned int v24 = *v23;
        v23 += 24;
        uint64_t v25 = v10 - v24;
        if (__OFSUB__(v10, v24)) {
          break;
        }
        if (__OFADD__(v25, 1)) {
          goto LABEL_42;
        }
        if (v25 + 1 < 1)
        {
          uint64_t v21 = v22;
          goto LABEL_32;
        }
        ++v22;
        uint64_t v10 = v25;
        if (v21 == v22) {
          goto LABEL_29;
        }
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_28:
    uint64_t v25 = v10;
LABEL_29:
    if (v25) {
      goto LABEL_45;
    }
    uint64_t v10 = 0;
LABEL_32:
    swift_unknownObjectRelease();
    if (v10 < 0) {
      goto LABEL_43;
    }
    unint64_t v19 = v20 | (v21 << 8);
  }
  else
  {
LABEL_19:
    swift_unknownObjectRetain();
    unint64_t v19 = sub_24A498214();
    LOBYTE(v10) = 0;
    uint64_t v14 = 0;
  }
  if (v6) {
    unint64_t v26 = (v7 << 11) | 0x300;
  }
  else {
    unint64_t v26 = 768;
  }
  uint64_t v27 = v10 | 0x300;
  unint64_t v28 = sub_24A4965FC(v26, 0, 0, 1);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  sub_24A496BE8((uint64_t)&v39);
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v38;
  a3[3] = v37;
  a3[4] = v8;
  a3[5] = v36;
  a3[6] = v27;
  a3[7] = *((void *)&v8 + 1);
  a3[8] = v19;
  a3[9] = v14;
  a3[10] = v28;
  a3[11] = v30;
  a3[12] = v32;
  a3[13] = v34;
}

void *sub_24A57BBF4()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  v5[0] = v0[10];
  v5[1] = v1;
  _OWORD v5[2] = v2;
  _OWORD v5[3] = v3;
  v5[4] = v5[0];
  v5[5] = v1;
  v5[6] = v2;
  v5[7] = v3;
  return sub_24A5792C0(v5, (void (*)(_OWORD *))sub_24A57C1E0);
}

void *sub_24A57BC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  _OWORD v6[3] = a5;
  void v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  _OWORD v6[7] = a5;
  return sub_24A5792C0(v6, (void (*)(_OWORD *))sub_24A57C1E0);
}

uint64_t _s19CollectionsInternal12BigSubstringV17UnicodeScalarViewV9removeAll15keepingCapacityySb_tF_0()
{
  uint64_t v1 = *((void *)v0 + 5);
  unint64_t v2 = *((void *)v0 + 6);
  unint64_t v3 = *((void *)v0 + 10);
  uint64_t v4 = *((void *)v0 + 4);
  long long v5 = v0[1];
  if (*(void *)v0) {
    uint64_t v6 = *((void *)v0 + 4);
  }
  else {
    uint64_t v6 = 0;
  }
  long long v14 = *v0;
  long long v15 = v5;
  *(void *)&long long v16 = v4;
  *((void *)&v16 + 1) = v1;
  uint64_t v13 = 0;
  uint64_t result = MEMORY[0x24C5C7E90](&v13, 8);
  uint64_t v9 = v13;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  *((void *)v0 + 4) = 0;
  *((void *)v0 + 5) = v9;
  unint64_t v10 = v3 >> 10;
  if (2 * (v6 & 0x1FFFFFFFFFFFFFuLL) < v3 >> 10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v11 = v2 >> 11;
  uint64_t v12 = v3 >> 11;
  if (v10 == v2 >> 10)
  {
LABEL_10:
    sub_24A5793B4((uint64_t *)v0, &v14, v6, v11, v12);
    return swift_unknownObjectRelease();
  }
  if (v12 < v11) {
    goto LABEL_12;
  }
  *((void *)&v16 + 1) = v1 + 1;
  if (v6 >= v12)
  {
    if (v11 != v12)
    {
      sub_24A57660C(v2 >> 11, v12, v8, (uint64_t)&v13);
      swift_unknownObjectRelease();
      sub_24A491510((uint64_t *)v17);
      long long v14 = v17[0];
      long long v15 = v17[1];
      long long v16 = v17[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_24A57BE2C()
{
  unint64_t result = qword_26979C200;
  if (!qword_26979C200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C200);
  }
  return result;
}

unint64_t sub_24A57BE84()
{
  unint64_t result = qword_26979C208;
  if (!qword_26979C208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C208);
  }
  return result;
}

unint64_t sub_24A57BEDC()
{
  unint64_t result = qword_26979C210;
  if (!qword_26979C210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C210);
  }
  return result;
}

unint64_t sub_24A57BF34()
{
  unint64_t result = qword_26979C218;
  if (!qword_26979C218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C218);
  }
  return result;
}

unint64_t sub_24A57BF8C()
{
  unint64_t result = qword_26979C220;
  if (!qword_26979C220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C220);
  }
  return result;
}

unint64_t sub_24A57BFE4()
{
  unint64_t result = qword_26979C228;
  if (!qword_26979C228)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979C230);
    sub_24A57C058();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C228);
  }
  return result;
}

unint64_t sub_24A57C058()
{
  unint64_t result = qword_26979C238;
  if (!qword_26979C238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C238);
  }
  return result;
}

unint64_t sub_24A57C0B4()
{
  unint64_t result = qword_26979C240;
  if (!qword_26979C240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C240);
  }
  return result;
}

unint64_t sub_24A57C10C()
{
  unint64_t result = qword_26979C248;
  if (!qword_26979C248)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979C230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C248);
  }
  return result;
}

unint64_t sub_24A57C16C()
{
  unint64_t result = qword_26979C250;
  if (!qword_26979C250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C250);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigSubstring.UnicodeScalarView()
{
  return &type metadata for BigSubstring.UnicodeScalarView;
}

ValueMetadata *type metadata accessor for BigSubstring.UnicodeScalarView.Iterator()
{
  return &type metadata for BigSubstring.UnicodeScalarView.Iterator;
}

void sub_24A57C1E4()
{
  sub_24A589FEC(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(ValueMetadata **)(v0 + 16));
}

uint64_t sub_24A57C21C(uint64_t a1)
{
  return sub_24A579620(a1, *(unint64_t **)(v1 + 32), *(void *)(v1 + 40), *(ValueMetadata **)(v1 + 16));
}

uint64_t Rope.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A57F768(a1, a2, a3, a4, a5);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a5 + 16) - 8) + 8);
  return v7(a1);
}

uint64_t Rope._Node.prepend(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Rope._Item();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - v8, a1, v6);
  unint64_t started = Rope._Node._startPath.getter();
  Rope._Node.insert(_:at:)((uint64_t)v9, started, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

void Rope.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v63 = a1;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v62 = (uint64_t)&v50 - v10;
  uint64_t v11 = type metadata accessor for Rope._Node();
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v60 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  long long v54 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  long long v55 = (uint64_t *)((char *)&v50 - v16);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v56 = (uint64_t *)((char *)&v50 - v18);
  uint64_t v58 = v11;
  uint64_t v57 = *(void *)(v11 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  __n128 v53 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  long long v52 = (char *)&v50 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  unint64_t v59 = (char *)&v50 - v24;
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  unint64_t v28 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v31 = (char *)&v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v4, a3);
  uint64_t v33 = Rope._endPath.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v34 = v33;
  uint64_t v35 = v63;
  LOBYTE(v29) = static _RopePath.== infix(_:_:)(a2, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v35, v7);
  if (v29)
  {
    Rope.append(_:)((uint64_t)v28, a3);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v35, v7);
    return;
  }
  uint64_t v51 = v8;
  Rope._Item.init(_:)((uint64_t)v28, v7, v62);
  uint64_t v36 = v57;
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  uint64_t v38 = v32;
  uint64_t v39 = v32;
  uint64_t v40 = v58;
  if (v37(v39, 1, v58) == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v41 = a2;
  long long v42 = (void (*)(void, void, void))v56;
  Rope._Node.insert(_:at:)(v62, v41, v40, (uint64_t)v56);
  if (v37((uint64_t)v42, 1, v40) != 1)
  {
    long long v43 = v42;
    uint64_t v44 = v36;
    uint64_t v56 = *(void **)(v36 + 32);
    ((void (*)(char *, void, uint64_t))v56)(v59, v43, v40);
    long long v45 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    uint64_t v8 = (uint64_t)v54;
    uint64_t v62 = v38;
    v45(v54, v38, v61);
    if (v37(v8, 1, v40) != 1)
    {
      uint64_t v46 = (uint64_t)v52;
      ((void (*)(char *, uint64_t, uint64_t))v56)(v52, v8, v40);
      uint64_t v47 = (uint64_t)v53;
      long long v48 = v59;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v53, v59, v40);
      long long v49 = v55;
      static Rope._Node.createInner(children:_:)(v46, v47, v7, v51, v55);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v63, v7);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v48, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v49, 0, 1, v40);
      (*(void (**)(uint64_t, void *, uint64_t))(v60 + 40))(v62, v49, v61);
      goto LABEL_9;
    }
LABEL_12:
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v8, v61);
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v63, v7);
  (*(void (**)(void (*)(void, void, void), uint64_t))(v60 + 8))(v42, v61);
LABEL_9:
  Rope._invalidateIndices()();
}

uint64_t Rope._Node.insert(_:at:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a1;
  unint64_t v23 = a2;
  uint64_t v20 = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v21 = type metadata accessor for Rope._Item();
  uint64_t v7 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v9 = (char *)&v20 - v8;
  Rope._Node.ensureUnique()();
  unsigned int v10 = Rope._Node.header.getter();
  unsigned int v11 = HIWORD(v10);
  int v12 = BYTE2(v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v14 = v23;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = _RopePath.subscript.getter(v11, v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t result = Rope._Node.header.getter();
  if (!v12)
  {
    if (v16 > (unsigned __int16)result) {
      goto LABEL_8;
    }
    uint64_t v19 = v21;
    uint64_t v18 = v22;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v22, v21);
    Rope._Node._leafInsert(_:at:)(v9, v16, a3, v20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v18, v19);
  }
  if (v16 < (unsigned __int16)result)
  {
    MEMORY[0x270FA5388](result);
    *(&v20 - 4) = v5;
    *(&v20 - 3) = v6;
    uint64_t v18 = v22;
    *(&v20 - 2) = v22;
    *(&v20 - 1) = v14;
    Rope._Node._innerInsert(at:with:)(v16, (void (*)(uint64_t))sub_24A57F8C8, (uint64_t)(&v20 - 6), a3, v20);
    uint64_t v19 = v21;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v18, v19);
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

void Rope.insert<A>(_:at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v69 = a3;
  uint64_t v66 = a2;
  uint64_t v67 = a1;
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v65 = (uint64_t)&v54 - v11;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v61 = sub_24A5BBD20();
  unint64_t v59 = *(char **)(v61 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v61);
  uint64_t v56 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v57 = (char **)((char *)&v54 - v16);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v58 = (uint64_t)&v54 - v18;
  uint64_t v64 = v12;
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  long long v55 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  long long v54 = (char *)&v54 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v60 = (char *)&v54 - v24;
  uint64_t v68 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v29 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v31 = (char *)&v54 - v30;
  uint64_t v32 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v34 = (char *)&v54 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v6, a4);
  Rope.summary.getter(a4, (uint64_t)v31);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, a4);
  uint64_t v36 = v67;
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v71 + 24))(v31, v70);
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v39 = v68;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v26, v36, v8);
  uint64_t v40 = v66;
  if (v37 == v66)
  {
    Rope.append(_:)((uint64_t)v26, a4);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v36, v8);
    return;
  }
  Rope._Item.init(_:)((uint64_t)v26, v8, v65);
  unint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  uint64_t v42 = v64;
  if (v41(v35, 1, v64) == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v43 = v35;
  uint64_t v44 = v58;
  Rope._Node.insert<A>(_:at:in:)(v65, v40, v69, v42, v70, v71, v58);
  BOOL v45 = v41(v44, 1, v42) == 1;
  uint64_t v26 = v59;
  if (!v45)
  {
    uint64_t v46 = v62;
    uint64_t v47 = v44;
    uint64_t v48 = v43;
    uint64_t v71 = *(void *)(v62 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v71)(v60, v47, v42);
    uint64_t v37 = (uint64_t)v56;
    (*((void (**)(char *, uint64_t, uint64_t))v26 + 2))(v56, v48, v61);
    if (v41(v37, 1, v42) != 1)
    {
      uint64_t v49 = (uint64_t)v54;
      uint64_t v50 = v64;
      ((void (*)(char *, uint64_t, uint64_t))v71)(v54, v37, v64);
      uint64_t v51 = (uint64_t)v55;
      long long v52 = v60;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v55, v60, v50);
      __n128 v53 = v57;
      static Rope._Node.createInner(children:_:)(v49, v51, v8, v63, v57);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v8);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v50);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v53, 0, 1, v50);
      (*((void (**)(uint64_t, void *, uint64_t))v26 + 5))(v48, v53, v61);
      goto LABEL_9;
    }
LABEL_12:
    (*((void (**)(uint64_t, uint64_t))v26 + 1))(v37, v61);
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v36, v8);
  (*((void (**)(uint64_t, uint64_t))v26 + 1))(v44, v61);
LABEL_9:
  Rope._invalidateIndices()();
}

uint64_t Rope._Node.insert<A>(_:at:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v58 = a6;
  uint64_t v55 = a2;
  uint64_t v56 = a5;
  uint64_t v52 = a7;
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v54 = *(void *)(a4 + 24);
  uint64_t v59 = type metadata accessor for Rope._Item();
  uint64_t v11 = *(void *)(v59 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v59);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (uint64_t *)((char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  Rope._Node.ensureUnique()();
  int v18 = Rope._Node.header.getter() & 0xFF0000;
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v51 = v7;
  v19(v17, v7, a4);
  uint64_t v20 = *v17;
  uint64_t v53 = a1;
  if (v18)
  {
    uint64_t v21 = v20 + ((*(unsigned __int8 *)(v15 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    swift_getWitnessTable();
    uint64_t v22 = nullsub_1(v20 + 16, v21, v10, a4, v54);
    uint64_t v24 = v23;
    swift_unknownObjectRetain();
    uint64_t v48 = &protocol conformance descriptor for Rope<A>._Node;
    uint64_t v25 = (unsigned __int16 *)v22;
    uint64_t v27 = v57;
    uint64_t v26 = v58;
    uint64_t v28 = v10;
    uint64_t v54 = v10;
    uint64_t v29 = v56;
    uint64_t v55 = sub_24A57E180(v25, v24, v55, v57, v28, v56, v58, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node);
    uint64_t v31 = v30;
    swift_unknownObjectRelease();
    uint64_t v32 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, a4);
    MEMORY[0x270FA5388](v32);
    uint64_t v33 = v55;
    *(&v50 - 6) = v54;
    *(&v50 - 5) = v29;
    *(&v50 - 4) = v26;
    uint64_t v34 = v53;
    *(&v50 - 3) = v53;
    uint64_t v48 = v31;
    uint64_t v49 = v27;
    Rope._Node._innerInsert(at:with:)(v33, (void (*)(uint64_t))sub_24A57F8D4, (uint64_t)(&v50 - 8), a4, v52);
    uint64_t v35 = v34;
    uint64_t v36 = v59;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v35, v36);
  }
  uint64_t v50 = v20 + 16;
  uint64_t v37 = v11;
  uint64_t v38 = v20 + ((*(unsigned __int8 *)(v11 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v39 = v59;
  swift_getWitnessTable();
  uint64_t v40 = (unsigned __int16 *)nullsub_1(v50, v38, v10, v39, v54);
  uint64_t v42 = v41;
  swift_unknownObjectRetain();
  uint64_t v48 = &protocol conformance descriptor for Rope<A>._Item;
  uint64_t v43 = sub_24A57E180(v40, v42, v55, v57, v10, v56, v58, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item);
  uint64_t v45 = v44;
  swift_unknownObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, a4);
  if (!v45)
  {
    uint64_t v35 = v53;
    uint64_t v47 = v59;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v37 + 16))(v14, v53, v59);
    uint64_t v11 = v37;
    Rope._Node._leafInsert(_:at:)(v14, v43, a4, v52);
    uint64_t v36 = v47;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v35, v36);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A57D700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v11 - v6, a2);
  uint64_t v9 = type metadata accessor for Rope._Node();
  return Rope._Node.insert(_:at:)(v7, a3, v9);
}

uint64_t Rope._Node._innerInsert(at:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v56 = a2;
  uint64_t v57 = (char *)a3;
  uint64_t v58 = a5;
  uint64_t v50 = *(void *)(a4 - 8);
  uint64_t v9 = v50;
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v48 = (char *)&v45 - v12;
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v55 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v53 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v19 = *(void *)(a4 + 16);
  uint64_t v18 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v52 = (char *)v6 + *(int *)(a4 + 36);
  (*(void (**)(char *))(v23 + 16))((char *)&v45 - v21);
  uint64_t v49 = v6;
  uint64_t v24 = *v6;
  uint64_t v25 = v24 + ((*(unsigned __int8 *)(v9 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  swift_getWitnessTable();
  uint64_t v26 = nullsub_1(v24 + 16, v25, v19, a4, v18);
  uint64_t v28 = v27;
  swift_unknownObjectRetain();
  uint64_t v29 = v26;
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v31 = v51;
  uint64_t v46 = a1;
  uint64_t v32 = a1;
  uint64_t v33 = v19;
  uint64_t v34 = v53;
  uint64_t v35 = v54;
  sub_24A57E254(v29, v28, v32, (uint64_t)v22, v56, (uint64_t)v57, v33, (uint64_t)v17);
  uint64_t v36 = v50;
  swift_unknownObjectRelease();
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v31 + 24);
  uint64_t v38 = v55;
  uint64_t v57 = v22;
  uint64_t v39 = v22;
  uint64_t v40 = v30;
  v37(v52, v39, v30);
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v34, v17, v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, a4) == 1)
  {
    uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
    v41(v17, v38);
    v41(v34, v38);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v58, 1, 1, a4);
  }
  else
  {
    uint64_t v42 = v48;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v48, v34, a4);
    uint64_t v43 = (uint64_t)v47;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v47, v42, a4);
    Rope._Node._applySpawn(_:of:)(v43, v46, a4, v58);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v42, a4);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v38);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v57, v40);
}

uint64_t Rope._Node._leafInsert(_:at:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v32 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v28[-v11];
  uint64_t v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16);
  uint64_t v33 = a1;
  v13(&v28[-v11], a1, v9);
  if ((Rope._Item.isUndersized.getter(v9) & 1) != 0
    && (unsigned __int16)Rope._Node.header.getter()
    && (Rope._Node._rebalanceBeforeInsert(_:at:)((uint64_t)v12, v34, a3) & 1) != 0)
  {
    goto LABEL_14;
  }
  if (!Rope._Node.isFull.getter())
  {
    sub_24A50201C((uint64_t)v12, v34, a3);
LABEL_14:
    uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
    v24(v33, v9);
    v24(v12, v9);
    uint64_t v25 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a4, v25, 1, a3);
  }
  uint64_t v30 = v7;
  uint64_t v31 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t result = v16(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 < 0) {
    uint64_t v18 = result + 2;
  }
  if (v34 < v18 >> 1)
  {
    int v29 = Rope._Node.header.getter();
    uint64_t result = v16(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v19 = result + 1;
    if (!__OFADD__(result, 1))
    {
      if (v19 < 0) {
        uint64_t v19 = result + 2;
      }
      uint64_t v20 = v32;
      Rope._Node.split(keeping:)((unsigned __int16)v29 - (v19 >> 1), a3, (uint64_t)v32);
      uint64_t v21 = (uint64_t)v12;
      uint64_t v22 = v34;
      uint64_t v23 = a3;
LABEL_19:
      sub_24A50201C(v21, v22, v23);
      uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
      v27(v33, v9);
      v27(v12, v9);
      uint64_t v7 = v30;
      a4 = v31;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v30 + 32))(v31, v20, a3);
      uint64_t v25 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a4, v25, 1, a3);
    }
    goto LABEL_22;
  }
  uint64_t result = v16(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v26 = result + 1;
  if (!__OFADD__(result, 1))
  {
    if (v26 < 0) {
      uint64_t v26 = result + 2;
    }
    uint64_t v20 = v32;
    Rope._Node.split(keeping:)(v26 >> 1, a3, (uint64_t)v32);
    uint64_t v22 = v34 - (unsigned __int16)Rope._Node.header.getter();
    uint64_t v21 = (uint64_t)v12;
    uint64_t v23 = a3;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_24A57E034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v18 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v18 - v13, a2);
  uint64_t v16 = type metadata accessor for Rope._Node();
  return Rope._Node.insert<A>(_:at:in:)(v14, a3, a4, v16, a6, a7);
}

uint64_t sub_24A57E180(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t))
{
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = a8(0, a5, AssociatedConformanceWitness);
  uint64_t WitnessTable = swift_getWitnessTable();
  return Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(a3, a4, 0, a1, a2, a5, v17, a6, WitnessTable, a7);
}

uint64_t sub_24A57E254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _OWORD v23[2] = a6;
  uint64_t v24 = a5;
  v23[0] = a4;
  v23[1] = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)v23 - v14;
  uint64_t v16 = type metadata accessor for Rope._Node();
  swift_getWitnessTable();
  uint64_t v17 = Rope._UnsafeHandle.mutableChildPtr(at:)(a3, a1, a2, a7, v16);
  uint64_t v18 = v17 + *(int *)(v16 + 36);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v19(v15, v18, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v15, AssociatedTypeWitness);
  v24(v17);
  v19(v15, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, AssociatedTypeWitness);
}

uint64_t Rope._Node._applySpawn(_:of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v70 = a4;
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v71 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v66 = (char *)&v61 - v12;
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v67 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v65 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v19 = *(void *)(a3 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  uint64_t v63 = (uint64_t)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = *(uint64_t (**)(void))(v19 + 16);
  uint64_t v73 = (uint64_t *)((char *)&v61 - v23);
  uint64_t v69 = a1;
  uint64_t result = v22();
  uint64_t v25 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v68 = v13;
  uint64_t v64 = v11;
  uint64_t v74 = a2 + 1;
  uint64_t v72 = v9;
  if (a2 >= 1)
  {
    uint64_t v26 = *v5;
    uint64_t v27 = *v5 + 16;
    unint64_t v28 = (*(unsigned __int8 *)(v19 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v61 = AssociatedTypeWitness;
    uint64_t v62 = v19;
    uint64_t v29 = v26 + v28;
    swift_getWitnessTable();
    uint64_t v30 = v71;
    uint64_t v31 = (unsigned __int16 *)nullsub_1(v27, v29, v71, a3, v72);
    uint64_t v33 = v32;
    swift_unknownObjectRetain();
    uint64_t v34 = v33;
    uint64_t AssociatedTypeWitness = v61;
    uint64_t v19 = v62;
    sub_24A57EAE4(v31, v34, a2, &v74, v30, v72);
    swift_unknownObjectRelease();
    uint64_t v25 = v74;
  }
  if (v25 < (unsigned __int16)Rope._Node.header.getter())
  {
    uint64_t v35 = *v5 + 16;
    unint64_t v36 = *v5 + ((*(unsigned __int8 *)(v19 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    swift_getWitnessTable();
    unint64_t v37 = v36;
    uint64_t v39 = v71;
    uint64_t v38 = v72;
    uint64_t v40 = (unsigned __int16 *)nullsub_1(v35, v37, v71, a3, v72);
    uint64_t v42 = v41;
    swift_unknownObjectRetain();
    sub_24A57EDB8(v40, v42, v73, &v74, v39, v38, (uint64_t)v18);
    swift_unknownObjectRelease();
    uint64_t v43 = v67;
    uint64_t v44 = v65;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v65, v18, v68);
    uint64_t v45 = v64;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v44, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v66, v44, AssociatedTypeWitness);
      uint64_t v57 = v43;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v59 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v66, AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v56(v69, a3);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v59, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v18, v68);
      goto LABEL_16;
    }
    uint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
    uint64_t v47 = v68;
    v46(v18, v68);
    v46(v44, v47);
  }
  BOOL v48 = Rope._Node.isFull.getter();
  uint64_t v49 = v74;
  if (!v48)
  {
    sub_24A501E54((uint64_t)v73, v74, a3);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v56(v69, a3);
LABEL_16:
    uint64_t v60 = 1;
LABEL_19:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v70, v60, 1, a3);
    return ((uint64_t (*)(uint64_t *, uint64_t))v56)(v73, a3);
  }
  uint64_t v50 = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 16))(AssociatedTypeWitness, v50);
  if (!__OFADD__(result, 1))
  {
    if (result + 1 >= 0) {
      uint64_t v51 = result + 1;
    }
    else {
      uint64_t v51 = result + 2;
    }
    unsigned __int16 v52 = Rope._Node.header.getter();
    uint64_t v53 = v63;
    Rope._Node.split(keeping:)(v52 >> 1, a3, v63);
    if (v49 >= v51 >> 1)
    {
      uint64_t v55 = v49 - (unsigned __int16)Rope._Node.header.getter();
      uint64_t v54 = v73;
    }
    else
    {
      uint64_t v54 = v73;
      uint64_t v55 = v49;
    }
    sub_24A501E54((uint64_t)v54, v55, a3);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v56(v69, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v70, v53, a3);
    uint64_t v60 = 0;
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_24A57EAE4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = *(void **)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v37 = (char *)&v29 - v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v12, a6, WitnessTable);
  uint64_t v38 = a3;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v19 = result;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = a4;
  uint64_t v20 = v13[9];
  uint64_t v36 = a5;
  uint64_t v21 = (void (*)(char *))v13[2];
  uint64_t v22 = v37;
  uint64_t v30 = (uint64_t *)(result + v20 * (a3 - 1));
  v21(v37);
  int v35 = Rope._Node.header.getter();
  uint64_t v23 = (void (*)(char *, uint64_t))v13[1];
  v23(v22, v12);
  uint64_t v24 = (uint64_t *)(v19 + v20 * v38);
  ((void (*)(char *, uint64_t *, uint64_t))v21)(v16, v24, v12);
  LODWORD(v20) = (unsigned __int16)Rope._Node.header.getter();
  v23(v16, v12);
  uint64_t v25 = v20 + (unsigned __int16)v35;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (result < v25) {
    return result;
  }
  static Rope._Node.redistributeChildren(_:_:to:)(v30, v24, v25);
  unint64_t v28 = v37;
  Rope._UnsafeHandle._removeChild(at:)(v38, v31);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v28, v12);
  if (__OFSUB__(*v33, 1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  --*v33;
  return result;
}

uint64_t sub_24A57EDB8@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v38 = a7;
  uint64_t v39 = a4;
  uint64_t v36 = a6;
  uint64_t v37 = a5;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = *(void **)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v12, a6, WitnessTable);
  uint64_t v21 = (void (*)(char *, uint64_t *, uint64_t))v13[2];
  int v35 = a3;
  v21(v18, a3, v12);
  LOWORD(a3) = Rope._Node.header.getter();
  uint64_t v22 = (void (*)(char *, uint64_t))v13[1];
  v22(v18, v12);
  uint64_t v23 = *v39;
  uint64_t v24 = v13[9];
  uint64_t v34 = v20;
  v21(v16, (uint64_t *)(v20 + v24 * v23), v12);
  LOWORD(a2) = Rope._Node.header.getter();
  v22(v16, v12);
  uint64_t v25 = (unsigned __int16)a2 + (unsigned __int16)a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness) >= v25)
  {
    uint64_t v31 = v35;
    uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v32 = v38;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v38, (char *)v35 + *(int *)(v12 + 36), AssociatedTypeWitness);
    static Rope._Node.redistributeChildren(_:_:to:)(v31, (uint64_t *)(v34 + *v39 * v24), 0);
    uint64_t v29 = 0;
    uint64_t v30 = v32;
  }
  else
  {
    uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v29 = 1;
    uint64_t v30 = v38;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v30, v29, 1, AssociatedTypeWitness);
}

uint64_t Rope._Node._rebalanceBeforeInsert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = TupleTypeMetadata2 - 8;
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v28 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v27 = (char *)&v26 + *(int *)(v8 + 56) - v11;
  uint64_t v13 = *v3;
  uint64_t v14 = *v3 + 16;
  uint64_t v15 = type metadata accessor for Rope._Item();
  uint64_t v16 = v13
      + ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v17 = nullsub_1(v14, v16, v5, v15, v4);
  uint64_t v19 = v18;
  swift_unknownObjectRetain();
  sub_24A57F378(v17, v19, v29, v30, v5, v4, v12);
  swift_unknownObjectRelease();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v21 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v27, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v22 = &v28[*(int *)(v8 + 56)];
  uint64_t v23 = *v12;
  *uint64_t v28 = v23;
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unsigned char *, char *, uint64_t))(v24 + 32))(v22, v21, AssociatedTypeWitness);
  (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v22, AssociatedTypeWitness);
  return v23;
}

uint64_t sub_24A57F378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v35 = a4;
  uint64_t v39 = a7;
  uint64_t v11 = type metadata accessor for Rope._Item();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v33 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v36 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v37 = (uint64_t)v33 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v33 - v20;
  v33[0] = a6;
  v33[1] = a5;
  swift_getWitnessTable();
  if (a3 < 1)
  {
    uint64_t v22 = Rope._UnsafeHandle.mutableChildPtr(at:)(a3, v34, a2, a5, v11);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v23(v14, v22, v11);
    Rope._Item.summary.getter(v11);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v14, v11);
    int v25 = Rope._Item.rebalance(prevNeighbor:)(v35, v11);
  }
  else
  {
    uint64_t v22 = Rope._UnsafeHandle.mutableChildPtr(at:)(a3 - 1, v34, a2, a5, v11);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v23(v14, v22, v11);
    Rope._Item.summary.getter(v11);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v14, v11);
    int v25 = Rope._Item.rebalance(nextNeighbor:)(v35, v11);
  }
  LODWORD(v35) = v25;
  v23(v14, v22, v11);
  uint64_t v26 = v36;
  Rope._Item.summary.getter(v11);
  v24(v14, v11);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v28 = v37;
  RopeSummary.subtracting(_:)((uint64_t)v21, AssociatedTypeWitness, AssociatedConformanceWitness, v37);
  uint64_t v29 = v38;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v38 + 8);
  v30(v26, AssociatedTypeWitness);
  v30(v21, AssociatedTypeWitness);
  uint64_t v31 = &v39[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  *uint64_t v39 = v35 & 1;
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v29 + 32))(v31, v28, AssociatedTypeWitness);
}

void sub_24A57F768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rope.validate(_:)(v12, v13, v14, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  Rope.insert(_:at:)((uint64_t)v11, a3, a5);
}

void sub_24A57F85C(uint64_t a1, uint64_t a2)
{
  Rope._invalidateIndices()();
  uint64_t v6 = Rope.startIndex.getter(a2);
  sub_24A57F768(a1, v6, v4, v5, a2);
}

uint64_t sub_24A57F8C8(uint64_t a1)
{
  return sub_24A57D700(a1, *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_24A57F8D4(uint64_t a1)
{
  return sub_24A57E034(a1, v1[5], v1[6], v1[7], v1[2], v1[3], v1[4]);
}

Swift::Bool __swiftcall _UnsafeBitSet.insert(_:)(Swift::UInt a1)
{
  Swift::UInt v2 = (a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v3 = 1 << a1;
  uint64_t v4 = *(void *)(*v1 + v2);
  Swift::Bool result = (v4 & (1 << a1)) == 0;
  *(void *)(*v1 + v2) = v4 | v3;
  return result;
}

uint64_t static _UnsafeBitSet.withTemporaryBitSet<A>(wordCount:run:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v9 = sub_24A5BBD20();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))((char *)&v20 - v14, 1, 1, a4);
  uint64_t v22 = a4;
  uint64_t v23 = v15;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v17 = v26;
  sub_24A580E98(a1, (void (*)(char **))sub_24A4B1054);
  if (v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  uint64_t v18 = v21;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, a4);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v18, v13, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  __break(1u);
  return result;
}

uint64_t static _UnsafeBitSet.withTemporaryBitSet<A>(capacity:run:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v21 - v16;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v18 = *(void *)(a4 - 8);
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))((char *)&v21 - v16, 1, 1, a4);
    MEMORY[0x270FA5388](v19);
    *(&v21 - 4) = a4;
    *(&v21 - 3) = (uint64_t)v17;
    uint64_t v20 = v23;
    *(&v21 - 2) = a2;
    *(&v21 - 1) = v20;
    sub_24A580E98((unint64_t)(a1 + 63) >> 6, (void (*)(char **))sub_24A55CD28);
    if (v5) {
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, a4);
    if (result != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v14, a4);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }
  }
  __break(1u);
  return result;
}

uint64_t _UnsafeBitSet.wordCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

int8x8_t *_UnsafeBitSet.count.getter(int8x8_t *result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      Swift::UInt v2 = result;
      uint64_t result = 0;
      uint64_t v3 = 8 * a2;
      while (1)
      {
        uint8x8_t v4 = (uint8x8_t)vcnt_s8(*v2);
        v4.i16[0] = vaddlv_u8(v4);
        BOOL v5 = __OFADD__(result, v4.u32[0]);
        uint64_t result = (int8x8_t *)((char *)result + v4.u32[0]);
        if (v5) {
          break;
        }
        ++v2;
        v3 -= 8;
        if (!v3) {
          return result;
        }
      }
      __break(1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t *_UnsafeBitSet.startIndex.getter(unint64_t *result, uint64_t a2)
{
  if (!a2) {
    return (unint64_t *)(a2 << 6);
  }
  unint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = 0;
    return (unint64_t *)(__clz(__rbit64(v2)) | v3);
  }
  uint64_t v4 = a2 - 1;
  if (a2 == 1) {
    return (unint64_t *)(a2 << 6);
  }
  BOOL v5 = result + 1;
  uint64_t v3 = 64;
  while (1)
  {
    unint64_t v6 = *v5++;
    unint64_t v2 = v6;
    if (v6) {
      break;
    }
    v3 += 64;
    if (!--v4)
    {
      uint64_t result = (unint64_t *)(a2 << 6);
      if (((a2 << 6) & 0x8000000000000000) == 0) {
        return result;
      }
      __break(1u);
      break;
    }
  }
  if ((v3 & 0x8000000000000000) == 0) {
    return (unint64_t *)(__clz(__rbit64(v2)) | v3);
  }
  __break(1u);
  return result;
}

unint64_t _UnsafeBitSet.index(after:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = a3 << 6;
  if (a3 << 6 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result <= a1)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  unint64_t v5 = a1 >> 6;
  unint64_t v6 = ((-1 << a1) - 1) & (-1 << a1) & *(void *)(a2 + 8 * (a1 >> 6));
  if (v6) {
    goto LABEL_4;
  }
  if ((uint64_t)++v5 < a3)
  {
    while (1)
    {
      unint64_t v6 = *(void *)(a2 + 8 * v5);
      if (v6) {
        break;
      }
      if (a3 == ++v5) {
        return result;
      }
    }
LABEL_4:
    uint64_t v7 = v5 << 6;
    if ((v7 & 0x8000000000000000) == 0) {
      return __clz(__rbit64(v6)) + v7;
    }
    goto LABEL_12;
  }
  return result;
}

unint64_t _UnsafeBitSet.index(before:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 << 6 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3 << 6 >= result)
  {
    uint64_t v3 = result >> 6;
    if ((result & 0x3F) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 8 * v3) & ~(-1 << (result & 0x3F));
      if (v4) {
        return ((v3 << 6) | 0x3F) - __clz(v4);
      }
    }
    while (1)
    {
      uint64_t v5 = v3 - 1;
      if (v3 < 1) {
        break;
      }
      unint64_t v4 = *(void *)(a2 - 8 + 8 * v3--);
      if (v4)
      {
        uint64_t v3 = v5;
        return ((v3 << 6) | 0x3F) - __clz(v4);
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t _UnsafeBitSet.distance(from:to:)(unint64_t result, unint64_t a2, uint64_t a3, int64_t a4)
{
  unint64_t v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v4 < result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v4 < a2)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a2 <= result) {
    unint64_t v5 = result;
  }
  else {
    unint64_t v5 = a2;
  }
  if (a2 >= result) {
    unint64_t v6 = result;
  }
  else {
    unint64_t v6 = a2;
  }
  int64_t v7 = v6 >> 6;
  char v8 = v6 & 0x3F;
  unint64_t v9 = v5 >> 6;
  char v10 = v5 & 0x3F;
  if (v7 != v9)
  {
    if (v7 >= a4) {
      return 0;
    }
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)(a3 + 8 * v7) & (-1 << v8)));
    v12.i16[0] = vaddlv_u8(v12);
    uint64_t v13 = v12.u32[0];
    int64_t v14 = v7 + 1;
    if (v7 + 1 < v9)
    {
      unint64_t v15 = v9 + ~v7;
      if (v15 < 4) {
        goto LABEL_21;
      }
      v14 += v15 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v16 = 0uLL;
      int64x2_t v17 = (int64x2_t)(unint64_t)v13;
      uint64_t v18 = (int8x16_t *)(a3 + 8 * v7 + 24);
      unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v17 = (int64x2_t)vpadalq_u32((uint64x2_t)v17, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v18[-1]))));
        int64x2_t v16 = (int64x2_t)vpadalq_u32((uint64x2_t)v16, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v18))));
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      uint64_t v13 = vaddvq_s64(vaddq_s64(v16, v17));
      if (v15 != (v15 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_21:
        unint64_t v20 = v9 - v14;
        uint64_t v21 = (int8x8_t *)(a3 + 8 * v14);
        do
        {
          int8x8_t v22 = *v21++;
          uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          v13 += v23.u32[0];
          --v20;
        }
        while (v20);
      }
      int64_t v14 = v9;
    }
    if (v14 < a4)
    {
      uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)(a3 + 8 * v14) & ~(-1 << v10)));
      v24.i16[0] = vaddlv_u8(v24);
      v13 += v24.u32[0];
      if (a2 < result)
      {
        BOOL v25 = __OFSUB__(0, v13);
        uint64_t v13 = -v13;
        if (v25)
        {
          __break(1u);
          return 0;
        }
      }
      return v13;
    }
    if (a2 >= result) {
      return v13;
    }
    BOOL v25 = __OFSUB__(0, v13);
    uint64_t v13 = -v13;
    if (!v25) {
      return v13;
    }
LABEL_36:
    __break(1u);
    return result;
  }
  if (v7 >= a4) {
    return 0;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)(a3 + 8 * v7) & ((-1 << v10) ^ (-1 << v8))));
  v11.i16[0] = vaddlv_u8(v11);
  if (a2 >= result) {
    return v11.u32[0];
  }
  else {
    return -(uint64_t)v11.u32[0];
  }
}

Swift::UInt _UnsafeBitSet.index(_:offsetBy:)(Swift::UInt result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  Swift::UInt v5 = result;
  if (v4 < result)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v4 == result) {
    goto LABEL_6;
  }
  if ((uint64_t)(result >> 6) >= a4) {
    goto LABEL_40;
  }
  if (((*(void *)(a3 + 8 * (result >> 6)) >> result) & 1) == 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_6:
  if (!a2) {
    return v5;
  }
  if (a2 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = -a2;
  }
  uint64_t v24 = v8;
  if (a2 < 1)
  {
    uint64_t v24 = v8 - 1;
    uint64_t v11 = result >> 6;
    if (result < 0x40 || (result & 0x3F) != 0)
    {
      if (v11 >= a4) {
        goto LABEL_29;
      }
      uint64_t v13 = ~(-1 << (result & 0x3F));
      Swift::UInt v12 = result >> 6;
    }
    else
    {
      Swift::UInt v12 = v11 - 1;
      if (v11 > a4)
      {
LABEL_28:
        uint64_t v11 = v12;
LABEL_29:
        uint64_t v20 = v11 << 6;
        uint64_t v21 = a3 - 8;
        do
        {
          uint64_t v22 = v11 - 1;
          if (v11 < 1)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t result = sub_24A567498(&v24, *(void *)(v21 + 8 * v11));
          v20 -= 64;
          uint64_t v11 = v22;
        }
        while ((v23 & 1) != 0);
        if (v20 < 0) {
          goto LABEL_43;
        }
        return result + v20;
      }
      uint64_t v13 = -1;
    }
    unint64_t result = sub_24A567498(&v24, *(void *)(a3 + 8 * v12) & v13);
    if ((v19 & 1) == 0) {
      return result + (v12 << 6);
    }
    goto LABEL_28;
  }
  Swift::UInt v9 = result >> 6;
  if ((uint64_t)(result >> 6) >= a4) {
    goto LABEL_42;
  }
  unint64_t result = sub_24A56741C(&v24, *(void *)(a3 + 8 * v9) & (-1 << result));
  if ((v10 & 1) == 0) {
    return result + (v5 & 0xFFFFFFFFFFFFFFC0);
  }
  if ((uint64_t)(v9 + 1) >= a4)
  {
LABEL_22:
    if (!v24) {
      return v4;
    }
    goto LABEL_44;
  }
  uint64_t v14 = ~v9 << 6;
  Swift::UInt v15 = ~v9 + a4;
  int64x2_t v16 = (uint64_t *)(a3 + 8 * v9 + 8);
  while (1)
  {
    uint64_t v17 = *v16++;
    unint64_t result = sub_24A56741C(&v24, v17);
    if ((v18 & 1) == 0) {
      break;
    }
    v14 -= 64;
    if (!--v15) {
      goto LABEL_22;
    }
  }
  if (v14 <= 0) {
    return result - v14;
  }
LABEL_45:
  __break(1u);
  return result;
}

Swift::UInt _UnsafeBitSet.index(_:offsetBy:limitedBy:)(Swift::UInt result, uint64_t a2, Swift::UInt a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v5 = a5 << 6;
  if (a5 << 6 < 0)
  {
    __break(1u);
    goto LABEL_56;
  }
  Swift::UInt v6 = result;
  if (v5 < result)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v5 < a3)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v5 == result) {
    goto LABEL_7;
  }
  if ((uint64_t)(result >> 6) >= a5) {
    goto LABEL_58;
  }
  if (((*(void *)(a4 + 8 * (result >> 6)) >> result) & 1) == 0)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
LABEL_7:
  if (!a2) {
    return v6;
  }
  if (a2 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = -a2;
  }
  uint64_t v31 = v10;
  if (a2 < 1)
  {
    if (result < a3) {
      return _UnsafeBitSet.index(_:offsetBy:)(result, a2, a4, a5);
    }
    uint64_t v31 = v10 - 1;
    int64_t v21 = result >> 6;
    if (result < 0x40 || (result & 0x3F) != 0)
    {
      if (v21 >= a5)
      {
LABEL_40:
        if ((uint64_t)(a3 >> 6) >= v21) {
          return 0;
        }
        uint64_t v27 = (v21 << 6) - 64;
        uint64_t v28 = a4 - 8;
        while (1)
        {
          Swift::UInt v29 = sub_24A567498(&v31, *(void *)(v28 + 8 * v21));
          if ((v30 & 1) == 0) {
            break;
          }
          --v21;
          v27 -= 64;
          if ((uint64_t)(a3 >> 6) >= v21) {
            return 0;
          }
        }
        Swift::UInt v26 = v29 + v27;
LABEL_51:
        if (v26 >= a3) {
          return v26;
        }
        else {
          return 0;
        }
      }
      uint64_t v23 = ~(-1 << (result & 0x3F));
      Swift::UInt v22 = result >> 6;
    }
    else
    {
      Swift::UInt v22 = v21 - 1;
      if (v21 > a5)
      {
LABEL_39:
        int64_t v21 = v22;
        goto LABEL_40;
      }
      uint64_t v23 = -1;
    }
    Swift::UInt v24 = sub_24A567498(&v31, *(void *)(a4 + 8 * v22) & v23);
    if ((v25 & 1) == 0)
    {
      Swift::UInt v26 = v24 + (v22 << 6);
      goto LABEL_51;
    }
    goto LABEL_39;
  }
  if (a3 < result) {
    return _UnsafeBitSet.index(_:offsetBy:)(result, a2, a4, a5);
  }
  int64_t v11 = result >> 6;
  if ((uint64_t)(result >> 6) < a5)
  {
    unint64_t result = sub_24A56741C(&v31, *(void *)(a4 + 8 * v11) & (-1 << result));
    if ((v12 & 1) == 0)
    {
      Swift::UInt v13 = result + (v6 & 0xFFFFFFFFFFFFFFC0);
      goto LABEL_47;
    }
  }
  uint64_t v14 = a5 - 1;
  if (__OFSUB__(a5, 1)) {
    goto LABEL_60;
  }
  if ((uint64_t)(a3 >> 6) < v14) {
    uint64_t v14 = a3 >> 6;
  }
  uint64_t v15 = v14 - v11;
  if (v14 <= v11)
  {
LABEL_25:
    if (v31) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v5 == a3;
    }
    if (v20) {
      return v5;
    }
    else {
      return 0;
    }
  }
  uint64_t v16 = ~v11 << 6;
  uint64_t v17 = (uint64_t *)(a4 + 8 * v11 + 8);
  while (1)
  {
    uint64_t v18 = *v17++;
    unint64_t result = sub_24A56741C(&v31, v18);
    if ((v19 & 1) == 0) {
      break;
    }
    v16 -= 64;
    if (!--v15) {
      goto LABEL_25;
    }
  }
  if (v16 <= 0)
  {
    Swift::UInt v13 = result - v16;
LABEL_47:
    if (v13 <= a3) {
      return v13;
    }
    else {
      return 0;
    }
  }
LABEL_61:
  __break(1u);
  return result;
}

unint64_t sub_24A5804D4(unint64_t result, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = *a3;
    if (!*a3) {
      goto LABEL_7;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v6 = a4 << 6;
      if (a4 << 6 < 0) {
        goto LABEL_21;
      }
      v5 |= __clz(__rbit64(v4));
      if (v6 >= v5) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_7:
      uint64_t v7 = a4 - 1;
      if (a4 == 1) {
        break;
      }
      uint64_t v8 = a3 + 1;
      unint64_t v5 = 64;
      while (1)
      {
        unint64_t v9 = *v8++;
        unint64_t v4 = v9;
        if (v9) {
          break;
        }
        v5 += 64;
        if (!--v7)
        {
          unint64_t v6 = a4 << 6;
          unint64_t v5 = a4 << 6;
          if (((a4 << 6) & 0x8000000000000000) == 0) {
            goto LABEL_9;
          }
          __break(1u);
          break;
        }
      }
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_19;
      }
    }
  }
  unint64_t v6 = a4 << 6;
  unint64_t v5 = a4 << 6;
LABEL_9:
  if (v5 > result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet.contains(_:)(Swift::UInt a1)
{
  if ((uint64_t)(a1 >> 6) >= v2) {
    LOBYTE(v3) = 0;
  }
  else {
    return (*(void *)(v1 + 8 * (a1 >> 6)) >> a1) & 1;
  }
  return v3;
}

Swift::Bool __swiftcall _UnsafeBitSet.remove(_:)(Swift::UInt a1)
{
  if ((int64_t)(a1 >> 6) >= v1[1]) {
    return 0;
  }
  Swift::UInt v2 = 8 * (a1 >> 6);
  uint64_t v3 = *(void *)(*v1 + v2);
  uint64_t v4 = 1 << a1;
  Swift::Bool result = (v3 & (1 << a1)) != 0;
  *(void *)(*v1 + v2) = v3 & ~v4;
  return result;
}

uint64_t _UnsafeBitSet.endIndex.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2 << 6;
  if (a2 << 6 < 0) {
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeBitSet.capacity.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2 << 6;
  if (a2 << 6 < 0) {
    __break(1u);
  }
  return result;
}

BOOL _UnsafeBitSet.isEmpty.getter(void *a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  if (*a1) {
    return 0;
  }
  if (a2 == 1) {
    return 1;
  }
  uint64_t v3 = a2 - 2;
  uint64_t v4 = a1 + 1;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    BOOL result = v6 == 0;
    BOOL v7 = v3-- != 0;
  }
  while (v7 && !v5);
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet.update(_:to:)(Swift::UInt _, Swift::Bool to)
{
  Swift::UInt v3 = _ >> 6;
  uint64_t v4 = *v2;
  uint64_t v5 = 1 << _;
  if (to) {
    uint64_t v6 = *(void *)(v4 + 8 * v3) | v5;
  }
  else {
    uint64_t v6 = *(void *)(v4 + 8 * v3) & ~v5;
  }
  *(void *)(v4 + 8 * v3) = v6;
  return v3 == v2[1] - 1;
}

unint64_t static _UnsafeBitSet.wordCount(forCapacity:)(unint64_t result)
{
  if (result < 0xFFFFFFFFFFFFFFC0) {
    return (result + 63) >> 6;
  }
  __break(1u);
  return result;
}

Swift::UInt_optional __swiftcall _UnsafeBitSet.Iterator.next()()
{
  unint64_t v1 = v0[3];
  if (!v1)
  {
    uint64_t v5 = v0[2];
    BOOL v6 = __OFADD__(v5, 1);
    uint64_t v7 = v5 + 1;
    if (v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v8 = v0[1];
    if (v7 >= v8)
    {
LABEL_13:
      Swift::UInt v4 = 0;
      Swift::Bool v3 = 1;
      goto LABEL_18;
    }
    v0[2] = v7;
    uint64_t v9 = *v0;
    unint64_t v10 = *(void *)(*v0 + 8 * v7);
    v0[3] = v10;
    if (v10)
    {
      uint64_t v11 = v7;
LABEL_8:
      v0[3] = (v10 - 1) & v10;
      if (((v11 << 6) & 0x8000000000000000) == 0)
      {
        Swift::Bool v3 = 0;
        Swift::UInt v4 = __clz(__rbit64(v10)) + (v11 << 6);
        goto LABEL_18;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    while (1)
    {
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      if (v11 >= v8) {
        goto LABEL_13;
      }
      v0[2] = v11;
      unint64_t v10 = *(void *)(v9 + 8 * v11);
      v0[3] = v10;
      ++v7;
      if (v10) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v0[3] = (v1 - 1) & v1;
  uint64_t v2 = v0[2] << 6;
  if (v2 < 0) {
    goto LABEL_15;
  }
  Swift::Bool v3 = 0;
  Swift::UInt v4 = v2 | __clz(__rbit64(v1));
LABEL_18:
  result.Swift::UInt value = v4;
  result.is_nil = v3;
  return result;
}

uint64_t sub_24A58078C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  Swift::UInt v13 = (char *)&v15 - v12;
  uint64_t result = a3(a1);
  if (!v5)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v13, 0, 1, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v13, v10);
  }
  return result;
}

uint64_t static _UnsafeBitSet._withTemporaryBitSet(wordCount:run:)(uint64_t a1, void (*a2)(char **))
{
  return sub_24A580E98(a1, a2);
}

Swift::Bool __swiftcall _UnsafeBitSet.isWithinBounds(_:)(Swift::UInt a1)
{
  if (v1 << 6 < 0) {
    __break(1u);
  }
  else {
    LOBYTE(a1) = v1 << 6 > a1;
  }
  return a1;
}

Swift::Void __swiftcall _UnsafeBitSet.insertAll(upTo:)(Swift::UInt upTo)
{
  if (upTo)
  {
    Swift::UInt v2 = upTo & 0x3F;
    size_t v3 = 8 * (upTo >> 6);
    if (upTo >= 0x40) {
      memset(*v1, 255, v3);
    }
    if (v2) {
      *(void *)((char *)*v1 + v3) |= ~(-1 << v2);
    }
  }
}

int8x8_t *_UnsafeBitSet.underestimatedCount.getter(int8x8_t *result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      Swift::UInt v2 = result;
      uint64_t result = 0;
      uint64_t v3 = 8 * a2;
      while (1)
      {
        uint8x8_t v4 = (uint8x8_t)vcnt_s8(*v2);
        v4.i16[0] = vaddlv_u8(v4);
        BOOL v5 = __OFADD__(result, v4.u32[0]);
        uint64_t result = (int8x8_t *)((char *)result + v4.u32[0]);
        if (v5) {
          break;
        }
        ++v2;
        v3 -= 8;
        if (!v3) {
          return result;
        }
      }
      __break(1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _UnsafeBitSet.Iterator._index.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _UnsafeBitSet.Iterator._index.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_UnsafeBitSet.Iterator._index.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _UnsafeBitSet.Iterator._word.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t _UnsafeBitSet.Iterator._word.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*_UnsafeBitSet.Iterator._word.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

Swift::UInt sub_24A580A34@<X0>(uint64_t a1@<X8>)
{
  Swift::UInt_optional v3 = _UnsafeBitSet.Iterator.next()();
  *(void *)a1 = v3.value;
  *(unsigned char *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void sub_24A580A64(uint64_t **a1@<X8>)
{
  Swift::UInt v2 = *(uint64_t **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3 < 1) {
    uint8x8_t v4 = 0;
  }
  else {
    uint8x8_t v4 = (uint64_t *)*v2;
  }
  *a1 = v2;
  a1[1] = (uint64_t *)v3;
  a1[2] = 0;
  a1[3] = v4;
}

uint64_t sub_24A580A88()
{
  uint64_t v1 = *(int8x8_t **)v0;
  if (!*(void *)v0) {
    return 0;
  }
  uint64_t v2 = *(void *)(v0 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = 8 * v2;
  while (1)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(*v1);
    v5.i16[0] = vaddlv_u8(v5);
    BOOL v6 = __OFADD__(result, v5.u32[0]);
    result += v5.u32[0];
    if (v6) {
      break;
    }
    ++v1;
    v4 -= 8;
    if (!v4) {
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t **sub_24A580AD4()
{
  return sub_24A595E94(*(unint64_t ***)v0, *(void *)(v0 + 8));
}

unint64_t **sub_24A580ADC(unint64_t **a1, unint64_t *a2, uint64_t a3)
{
  return sub_24A585F00(a1, a2, a3, *(unint64_t **)v3, *(void *)(v3 + 8));
}

unint64_t sub_24A580AE8@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = _UnsafeBitSet.index(before:)(*a1, *v2, v2[1]);
  *a2 = result;
  return result;
}

unint64_t sub_24A580B18(unint64_t *a1)
{
  unint64_t result = _UnsafeBitSet.index(before:)(*a1, *v1, v1[1]);
  *a1 = result;
  return result;
}

Swift::UInt sub_24A580B48@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X8>)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:)(*a1, a2, *v3, v3[1]);
  *a3 = result;
  return result;
}

unint64_t sub_24A580B7C(unint64_t *a1, unint64_t *a2)
{
  return _UnsafeBitSet.distance(from:to:)(*a1, *a2, *v2, v2[1]);
}

unint64_t *sub_24A580B8C@<X0>(unint64_t **a1@<X8>)
{
  Swift::UInt result = _UnsafeBitSet.startIndex.getter(*(unint64_t **)v1, *(void *)(v1 + 8));
  *a1 = result;
  return result;
}

void sub_24A580BB8(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8) << 6;
  if (v2 < 0) {
    __break(1u);
  }
  else {
    *a1 = v2;
  }
}

unint64_t sub_24A580BD0@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_24A5804D4(*a1, a1[1], *(unint64_t **)v2, *(void *)(v2 + 8));
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

void *sub_24A580C08@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_24A590F1C(*(void **)v1, *(void *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

BOOL sub_24A580C38()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return 1;
  }
  if (*(void *)*v0) {
    return 0;
  }
  if (v1 == 1) {
    return 1;
  }
  uint64_t v3 = v1 - 2;
  uint64_t v4 = (uint64_t *)(*v0 + 8);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    BOOL result = v6 == 0;
    BOOL v7 = v3-- != 0;
  }
  while (v7 && !v5);
  return result;
}

Swift::UInt sub_24A580C88@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1]);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t sub_24A580CC4@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = _UnsafeBitSet.index(after:)(*a1, *v2, v2[1]);
  *a2 = result;
  return result;
}

unint64_t sub_24A580CF4(unint64_t *a1)
{
  unint64_t result = _UnsafeBitSet.index(after:)(*a1, *v1, v1[1]);
  *a1 = result;
  return result;
}

uint64_t sub_24A580D24(uint64_t isStackAllocationSafe, void (*a2)(char **))
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (isStackAllocationSafe < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v3 = isStackAllocationSafe;
  if ((unint64_t)(isStackAllocationSafe + 0x1000000000000000) >> 61)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (8 * isStackAllocationSafe >= 1025)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      char v7 = (char *)swift_slowAlloc();
      uint64_t v8 = v7;
      uint64_t v10 = v7;
      uint64_t v11 = v3;
      if (v3)
      {
        if (v3 < 1) {
          goto LABEL_18;
        }
        bzero(v7, 8 * v3);
      }
      a2(&v10);
      return MEMORY[0x24C5C7E70](v8, -1, -1);
    }
  }
  MEMORY[0x270FA5388](isStackAllocationSafe);
  uint64_t v10 = (char *)&v9 - v5;
  uint64_t v11 = v3;
  if (!v3) {
    goto LABEL_8;
  }
  if (v3 < 1)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  bzero((char *)&v9 - v5, 8 * v3);
LABEL_8:
  uint64_t result = ((uint64_t (*)(char **))a2)(&v10);
  if (v2) {
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24A580E98(uint64_t a1, void (*a2)(char **))
{
  return sub_24A580D24(a1, a2);
}

unint64_t sub_24A580EB4()
{
  unint64_t result = qword_26979C258;
  if (!qword_26979C258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C258);
  }
  return result;
}

unint64_t sub_24A580F0C()
{
  unint64_t result = qword_26979C260;
  if (!qword_26979C260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C260);
  }
  return result;
}

uint64_t sub_24A580F60()
{
  return sub_24A58102C(&qword_26979C268, &qword_26979C270);
}

unint64_t sub_24A580F9C()
{
  unint64_t result = qword_26979C278;
  if (!qword_26979C278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C278);
  }
  return result;
}

uint64_t sub_24A580FF0()
{
  return sub_24A58102C(&qword_26979C280, &qword_26979C288);
}

uint64_t sub_24A58102C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    sub_24A580F9C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A581094()
{
  unint64_t result = qword_26979C290;
  if (!qword_26979C290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C290);
  }
  return result;
}

unint64_t sub_24A5810EC()
{
  unint64_t result = qword_26979C298;
  if (!qword_26979C298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C298);
  }
  return result;
}

uint64_t sub_24A581140()
{
  return sub_24A4D280C(&qword_26979C2A0, &qword_26979C270);
}

uint64_t sub_24A58117C()
{
  return sub_24A4D280C(&qword_26979C2A8, &qword_26979C288);
}

ValueMetadata *type metadata accessor for _UnsafeBitSet()
{
  return &type metadata for _UnsafeBitSet;
}

uint64_t getEnumTagSinglePayload for _UnsafeBitSet.Iterator(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _UnsafeBitSet.Iterator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitSet.Iterator()
{
  return &type metadata for _UnsafeBitSet.Iterator;
}

void *sub_24A581224(uint64_t isStackAllocationSafe, unsigned char *a2, void *(*a3)(char *__return_ptr, unsigned char **))
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (isStackAllocationSafe < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = isStackAllocationSafe;
  if ((unint64_t)(isStackAllocationSafe + 0x1000000000000000) >> 61)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  if (8 * isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    Swift::UInt v13 = &v11[-v7];
    uint64_t v14 = v4;
    if (!v4) {
      goto LABEL_8;
    }
    if (v4 >= 1)
    {
      bzero(&v11[-v7], 8 * v4);
LABEL_8:
      unint64_t result = a3(&v12, &v13);
      if (v3) {
        return (void *)swift_willThrow();
      }
      *a2 = v12;
      return result;
    }
    goto LABEL_19;
  }
  uint64_t v9 = (unsigned char *)swift_slowAlloc();
  uint64_t v10 = v9;
  Swift::UInt v13 = v9;
  uint64_t v14 = v4;
  if (v4)
  {
    if (v4 < 1) {
      goto LABEL_20;
    }
    bzero(v9, 8 * v4);
  }
  a3(&v12, &v13);
  if (!v3) {
    *a2 = v12;
  }
  return (void *)MEMORY[0x24C5C7E70](v10, -1, -1);
}

void *sub_24A5813C8(uint64_t a1, unsigned char *a2, void *(*a3)(char *__return_ptr, unsigned char **))
{
  return sub_24A581224(a1, a2, a3);
}

void *sub_24A5813E4(uint64_t a1, unsigned char *a2, void *(*a3)(char *__return_ptr, unsigned char **))
{
  return sub_24A5813C8(a1, a2, a3);
}

uint64_t _HashNode.removing(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v106 = a3;
  uint64_t v107 = a9;
  uint64_t v16 = type metadata accessor for _HashNode.Builder();
  uint64_t v98 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v97 = (char *)&v81 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v99 = v16;
  uint64_t v18 = swift_getTupleTypeMetadata2();
  uint64_t v108 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unsigned __int8 v94 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v103 = (char *)&v81 - v21;
  uint64_t v22 = sub_24A5BBD20();
  long long v101 = *(char **)(v22 - 8);
  uint64_t v102 = v22;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  long long v95 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v100 = (char *)&v81 - v25;
  uint64_t v26 = a1;
  uint64_t v27 = a1;
  unint64_t v28 = v106;
  uint64_t v96 = a2;
  uint64_t v29 = a2;
  uint64_t v30 = a4;
  uint64_t v104 = a5;
  uint64_t v31 = (uint64_t)a5;
  uint64_t v32 = a8;
  unint64_t v33 = _HashNode.find(_:_:_:)(v27, v29, v106, a4, v31, a6, a7, a8);
  if (v33 == 2)
  {
    uint64_t v34 = v107;
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56);
    uint64_t v36 = 1;
  }
  else
  {
    unint64_t v37 = v33;
    int v38 = v26;
    if (v33)
    {
      unsigned int v92 = (v28 >> v26) & 0x1F;
      unint64_t v93 = HIDWORD(v33);
      uint64_t v41 = v30;
      uint64_t v42 = nullsub_1(v30 + 16, v30 + 32, a6, a7, a8);
      uint64_t v80 = a8;
      uint64_t v43 = v100;
      sub_24A584220(v42, v44, v37 & 0xFFFFFFFF00000000 | 1, v38, v96, v28, a6, a7, v80);
      uint64_t v46 = v101;
      uint64_t v45 = v102;
      uint64_t v47 = v95;
      (*((void (**)(char *, char *, uint64_t))v101 + 2))(v95, v43, v102);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v47, 1, v18) == 1)
      {
        BOOL v48 = (void (*)(char *, uint64_t))*((void *)v46 + 1);
        v48(v43, v45);
        v48(v47, v45);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v107, 1, 1, v18);
      }
      else
      {
        uint64_t v49 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v50 = &v103[v49];
        uint64_t v51 = *(int *)(v18 + 48);
        uint64_t v83 = v41;
        unsigned __int8 v91 = &v103[v51];
        unsigned __int16 v52 = v47;
        uint64_t v53 = &v47[v51];
        uint64_t v54 = &v52[v49];
        uint64_t v96 = *(void *)(a6 - 8);
        uint64_t v87 = *(void (**)(char *))(v96 + 32);
        uint64_t v88 = v96 + 32;
        v87(v103);
        uint64_t v55 = *(void *)(a7 - 8);
        uint64_t v89 = a7;
        uint64_t v90 = a6;
        uint64_t v81 = v32;
        uint64_t v56 = v55;
        uint64_t v57 = *(char **)(v55 + 32);
        uint64_t v86 = v55 + 32;
        long long v95 = v57;
        uint64_t v82 = v50;
        ((void (*)(char *, char *, uint64_t))v57)(v50, v54, a7);
        uint64_t v58 = v98;
        uint64_t v59 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v98 + 32);
        uint64_t v84 = v98 + 32;
        uint64_t v85 = v59;
        uint64_t v60 = v91;
        uint64_t v61 = v99;
        v59((uint64_t)v91, v53, v99);
        uint64_t v62 = v94;
        uint64_t v63 = &v94[*(int *)(v18 + 48)];
        uint64_t v64 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v106 = v18;
        uint64_t v65 = &v94[v64];
        (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v94, v103, a6);
        uint64_t v66 = v89;
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v65, v50, v89);
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v63, v60, v61);
        uint64_t v67 = (uint64_t)v63;
        uint64_t v68 = v90;
        _HashNode.replacingChild(_:at:_:with:)(v38, v92, v93, v67, v83, v104, v90, v66, v97, v81);
        (*((void (**)(char *, uint64_t))v101 + 1))(v100, v102);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v65, v66);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v62, v68);
        uint64_t v69 = v107;
        uint64_t v70 = *(int *)(v106 + 48);
        uint64_t v71 = &v62[v70];
        uint64_t v104 = &v62[v70];
        uint64_t v72 = TupleTypeMetadata2;
        long long v101 = &v62[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v73 = v101;
        uint64_t v102 = v107 + v70;
        uint64_t v74 = (void (*)(uint64_t, char *, uint64_t))v87;
        ((void (*)(char *, char *, uint64_t))v87)(v62, v103, v68);
        uint64_t v75 = v73;
        unint64_t v76 = v95;
        ((void (*)(char *, char *, uint64_t))v95)(v75, v82, v66);
        uint64_t v77 = v85;
        v85((uint64_t)v71, v91, v61);
        uint64_t v78 = v69 + *(int *)(v72 + 48);
        v74(v69, v62, v90);
        ((void (*)(uint64_t, char *, uint64_t))v76)(v78, v101, v89);
        uint64_t v79 = v99;
        v77(v102, v97, v99);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v108 + 56))(v69, 0, 1, v106);
        return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v104, v79);
      }
    }
    uint64_t v39 = v107;
    _HashNode._removingItemFromLeaf(_:at:_:)(v107, v107 + *(int *)(TupleTypeMetadata2 + 48), v107 + *(int *)(v18 + 48), v26, (v28 >> v26) & 0x1F, SHIDWORD(v33), v30, (uint64_t)v104, a6, a7, a8);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56);
    uint64_t v34 = v39;
    uint64_t v36 = 0;
  }
  return v35(v34, v36, 1, v18);
}

uint64_t _HashNode.remove(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v167 = (char *)a3;
  v164 = (char *)a2;
  v165 = (char *)a1;
  uint64_t v169 = a5;
  uint64_t v8 = a4[2];
  uint64_t v7 = a4[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = (char *)a4[4];
  uint64_t v166 = v8;
  uint64_t v171 = v7;
  unsigned int v163 = v10;
  uint64_t v162 = type metadata accessor for _HashNode.Builder();
  uint64_t v11 = swift_getTupleTypeMetadata2();
  uint64_t v12 = sub_24A5BBD20();
  unint64_t v154 = *(void *)(v12 - 8);
  uint64_t v155 = (char *)v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  long long v157 = (char *)&v144 - v14;
  uint64_t v158 = v11;
  v156 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v11 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v149 = (void (*)(char *, uint64_t, uint64_t))((char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  v153 = (char *)&v144 - v17;
  uint64_t v18 = sub_24A5BBD20();
  uint64_t v160 = swift_getTupleTypeMetadata2();
  uint64_t v19 = MEMORY[0x270FA5388](v160);
  unint64_t v147 = (char *)&v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v146 = (char *)&v144 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v159 = (void (*)(char *, char *, uint64_t))((char *)&v144 - v24);
  uint64_t v150 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v148 = (uint64_t)&v144 - v25;
  uint64_t v161 = TupleTypeMetadata2;
  uint64_t v26 = swift_getTupleTypeMetadata2();
  uint64_t v168 = *(void *)(v26 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v144 - v30;
  uint64_t v170 = v32;
  uint64_t v33 = sub_24A5BBD20();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  unint64_t v37 = (char *)&v144 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v39 = (char *)&v144 - v38;
  v152 = a4;
  Swift::Bool v40 = _HashNode.isUnique()();
  uint64_t v42 = *v5;
  uint64_t v41 = (char *)v5[1];
  uint64_t v151 = v5;
  if (v40)
  {
    long long v157 = v37;
    unint64_t v144 = v39;
    uint64_t v145 = v34;
    uint64_t v158 = v33;
    uint64_t v155 = v31;
    v156 = v29;
    uint64_t v44 = (uint64_t)v159;
    uint64_t v43 = v160;
    uint64_t v162 = v18;
    uint64_t v45 = (uint64_t)v164;
    int v46 = (int)v165;
    uint64_t v48 = v166;
    uint64_t v47 = (uint64_t)v167;
    uint64_t v49 = v163;
    unint64_t v50 = _HashNode.find(_:_:_:)((uint64_t)v165, (uint64_t)v164, (uint64_t)v167, v42, (uint64_t)v41, v166, v171, (uint64_t)v163);
    if (v50 == 2)
    {
      uint64_t v51 = v169;
      unsigned __int16 v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56);
      uint64_t v53 = v170;
      return v52(v51, 1, 1, v53);
    }
    else
    {
      unint64_t v63 = v50;
      unint64_t v154 = HIDWORD(v50);
      if (v50)
      {
        uint64_t v108 = nullsub_1(v42 + 16, v42 + 32, v48, v171, v49);
        uint64_t v143 = v49;
        uint64_t v109 = v144;
        sub_24A583F88(v108, v110, v63 & 0xFFFFFFFF00000000 | 1, v46, v45, v47);
        uint64_t v111 = v145;
        uint64_t v113 = v157;
        uint64_t v112 = v158;
        (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v157, v109, v158);
        uint64_t v114 = v170;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v113, 1, v170) == 1)
        {
          uint64_t v115 = *(void (**)(char *, uint64_t))(v111 + 8);
          v115(v109, v112);
          v115(v113, v112);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56))(v169, 1, 1, v114);
        }
        else
        {
          uint64_t v116 = *(int *)(v161 + 48);
          uint64_t v117 = v155;
          unint64_t v118 = &v155[v116];
          v153 = &v155[v116];
          uint64_t v119 = *(int *)(v114 + 48);
          v164 = &v155[v119];
          uint64_t v120 = v48;
          uint64_t v121 = &v113[v119];
          uint64_t v122 = v171;
          unint64_t v123 = &v113[v116];
          uint64_t v124 = *(void *)(v120 - 8);
          uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
          uint64_t v160 = v124 + 32;
          v159(v155, v113, v120);
          uint64_t v125 = v122;
          uint64_t v126 = *(void *)(v122 - 8);
          long long v157 = *(char **)(v126 + 32);
          unint64_t v147 = (char *)(v126 + 32);
          ((void (*)(char *, char *, uint64_t))v157)(v118, v123, v122);
          unint64_t v127 = *(void (**)(char *, uint64_t, uint64_t))(v150 + 32);
          unint64_t v146 = (char *)(v150 + 32);
          uint64_t v149 = v127;
          uint64_t v128 = (uint64_t)v164;
          uint64_t v129 = ((uint64_t (*)(char *, char *, uint64_t))v127)(v164, v121, v162);
          MEMORY[0x270FA5388](v129);
          *(&v144 - 6) = (char *)v120;
          *(&v144 - 5) = (char *)v122;
          uint64_t v130 = (uint64_t)v167;
          *(&v144 - 4) = v49;
          *(&v144 - 3) = (char *)v130;
          LOBYTE(v143) = v46;
          _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)(v46, (uint64_t (*)(uint64_t))sub_24A4F8150, (void (*)(char *, char *, uint64_t))(&v144 - 8), v154, v128, v152, v148);
          (*(void (**)(char *, uint64_t))(v145 + 8))(v144, v112);
          uint64_t v131 = v169;
          uint64_t v132 = *(int *)(v170 + 48);
          v165 = (char *)(v169 + v132);
          uint64_t v133 = v156;
          unint64_t v134 = (char *)v156 + v132;
          uint64_t v167 = (char *)v156 + v132;
          uint64_t v135 = v161;
          unsigned int v163 = (char *)v156 + *(int *)(v161 + 48);
          unint64_t v136 = v163;
          unint64_t v137 = (void (*)(uint64_t, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))v159;
          v159((char *)v156, v117, v120);
          uint64_t v138 = v157;
          ((void (*)(char *, char *, uint64_t))v157)(v136, v153, v125);
          uint64_t v139 = v134;
          uint64_t v140 = v162;
          unsigned __int8 v141 = v149;
          v149(v139, (uint64_t)v164, v162);
          uint64_t v142 = v131 + *(int *)(v135 + 48);
          v137(v131, v133, v166);
          ((void (*)(uint64_t, char *, uint64_t))v138)(v142, v163, v171);
          v141(v165, v148, v140);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v168 + 56))(v131, 0, 1, v170);
          return (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v167, v140);
        }
      }
      else
      {
        v164 = (char *)(v44 + *(int *)(v161 + 48));
        uint64_t v167 = (char *)(v44 + *(int *)(v43 + 48));
        MEMORY[0x270FA5388](v50);
        uint64_t v64 = v171;
        *(&v144 - 4) = (char *)v48;
        *(&v144 - 3) = (char *)v64;
        uint64_t v66 = v65;
        _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)(v44, v67, v46, v68, v154, (void (*)(unint64_t))sub_24A4D0390, (uint64_t)(&v144 - 6), v152, v65);
        uint64_t v69 = v169;
        v165 = (char *)(v169 + *(int *)(v170 + 48));
        uint64_t v70 = v146;
        uint64_t v71 = &v146[*(int *)(v43 + 48)];
        unsigned int v163 = v71;
        uint64_t v72 = v66;
        uint64_t v73 = &v146[*(int *)(v66 + 48)];
        uint64_t v74 = *(void *)(v48 - 8);
        uint64_t v158 = v74;
        (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v146, v44, v48);
        uint64_t v75 = *(void *)(v64 - 8);
        (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v73, v164, v64);
        (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v71, v167, v162);
        uint64_t v76 = v72;
        uint64_t v77 = v69 + *(int *)(v72 + 48);
        uint64_t v78 = *(void (**)(uint64_t, char *))(v74 + 32);
        uint64_t v79 = v70;
        uint64_t v80 = v48;
        v78(v69, v79);
        uint64_t v81 = *(void (**)(uint64_t, char *, uint64_t))(v75 + 32);
        v81(v77, v73, v64);
        uint64_t v82 = v147;
        uint64_t v83 = &v147[*(int *)(v160 + 48)];
        uint64_t v84 = &v147[*(int *)(v76 + 48)];
        ((void (*)(char *, void, uint64_t))v78)(v147, v159, v48);
        uint64_t v85 = v84;
        v81((uint64_t)v84, v164, v64);
        uint64_t v86 = v150;
        uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v150 + 32);
        uint64_t v88 = v162;
        v87(v83, v167, v162);
        v87(v165, v83, v88);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v168 + 56))(v169, 0, 1, v170);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v85, v64);
        (*(void (**)(char *, uint64_t))(v158 + 8))(v82, v80);
        return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v163, v88);
      }
    }
  }
  else
  {
    unint64_t v56 = v154;
    uint64_t v55 = v155;
    uint64_t v57 = v153;
    uint64_t v58 = v162;
    uint64_t v59 = v157;
    int v60 = (int)v165;
    uint64_t v61 = v166;
    _HashNode.removing(_:_:_:)((uint64_t)v165, (uint64_t)v164, (uint64_t)v167, v42, v41, v166, v171, (uint64_t)v163, (uint64_t)v157);
    uint64_t v62 = v158;
    if (v156[6](v59, 1, v158) == 1)
    {
      (*(void (**)(char *, char *))(v56 + 8))(v59, v55);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56))(v169, 1, 1, v170);
    }
    else
    {
      uint64_t v89 = *(int *)(v161 + 48);
      uint64_t v90 = &v57[v89];
      uint64_t v160 = (uint64_t)&v57[v89];
      uint64_t v91 = *(int *)(v62 + 48);
      uint64_t v92 = (uint64_t)&v57[v91];
      v156 = (unsigned int (**)(char *, uint64_t, uint64_t))&v59[v91];
      unint64_t v93 = &v59[v89];
      uint64_t v94 = *(void *)(v61 - 8);
      unsigned int v163 = *(char **)(v94 + 32);
      v164 = (char *)(v94 + 32);
      ((void (*)(char *, char *, uint64_t))v163)(v57, v59, v61);
      uint64_t v95 = v171;
      uint64_t v96 = *(void *)(v171 - 8);
      long long v157 = *(char **)(v96 + 32);
      uint64_t v159 = (void (*)(char *, char *, uint64_t))(v96 + 32);
      ((void (*)(char *, char *, uint64_t))v157)(v90, v93, v171);
      uint64_t v97 = v169;
      uint64_t v167 = *(char **)(v58 - 8);
      uint64_t v98 = (char *)*((void *)v167 + 4);
      unint64_t v154 = v92;
      uint64_t v155 = v98;
      ((void (*)(uint64_t, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))v98)(v92, v156, v58);
      _HashNode.applyReplacement(_:_:)(v60, v92, v152, v97 + *(int *)(v170 + 48));
      uint64_t v99 = *(int *)(v62 + 48);
      uint64_t v100 = v149;
      long long v101 = (char *)v149 + v99;
      uint64_t v102 = v161;
      v165 = (char *)v149 + *(int *)(v161 + 48);
      uint64_t v103 = (uint64_t)v165;
      uint64_t v104 = v163;
      ((void (*)(void, char *, uint64_t))v163)(v149, v57, v61);
      uint64_t v105 = v95;
      uint64_t v106 = v157;
      ((void (*)(uint64_t, uint64_t, uint64_t))v157)(v103, v160, v105);
      ((void (*)(char *, unint64_t, uint64_t))v155)(v101, v154, v162);
      uint64_t v107 = v97 + *(int *)(v102 + 48);
      ((void (*)(uint64_t, void, uint64_t))v104)(v97, v100, v61);
      ((void (*)(uint64_t, char *, uint64_t))v106)(v107, v165, v171);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v168 + 56))(v97, 0, 1, v170);
      return (*((uint64_t (**)(char *, uint64_t))v167 + 1))(v101, v162);
    }
  }
}

uint64_t _HashNode.remove(_:at:)(char *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, Swift::Int a7, void *a8)
{
  Swift::Int v122 = a7;
  uint64_t v113 = a6;
  unint64_t v116 = a5;
  uint64_t v117 = a4;
  unint64_t v118 = (char *)a3;
  uint64_t v119 = a1;
  uint64_t v120 = a2;
  uint64_t v11 = a8[2];
  uint64_t v10 = a8[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v114 = a8[4];
  uint64_t v115 = v11;
  uint64_t v121 = v10;
  uint64_t v112 = (void *)type metadata accessor for _HashNode.Builder();
  uint64_t v110 = (void *)swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x270FA5388](v110);
  uint64_t v111 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v109 = (char *)&v103 - v15;
  uint64_t v16 = sub_24A5BBD20();
  uint64_t v106 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x270FA5388](v106);
  uint64_t v19 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v103 - v20;
  uint64_t v22 = swift_getTupleTypeMetadata2();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v103 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v103 - v29;
  if (_HashNode.isUnique()())
  {
    uint64_t v104 = v28;
    uint64_t v105 = v30;
    uint64_t v109 = v21;
    uint64_t v110 = v19;
    uint64_t v107 = TupleTypeMetadata2;
    uint64_t v108 = v16;
    uint64_t v111 = v25;
    uint64_t v112 = a8;
    uint64_t v32 = v116;
    int v31 = v117;
    uint64_t v33 = v114;
    if (BYTE4(v122) == v117)
    {
      uint64_t v34 = v121;
      uint64_t v35 = v115;
      uint64_t v36 = (_DWORD *)nullsub_1(*(void *)v8 + 16, *(void *)v8 + 32, v115, v121, v114);
      unsigned int v37 = v122;
      Swift::UInt v38 = _HashNode.UnsafeHandle.itemBucket(at:)(v122, v36);
      uint64_t v110 = &v103;
      uint64_t v39 = (uint64_t)v105;
      unint64_t v116 = (unint64_t)&v105[*(int *)(v107 + 48)];
      unint64_t v40 = v116;
      uint64_t v41 = *(int *)(v22 + 48);
      uint64_t v42 = v22;
      uint64_t v103 = v22;
      uint64_t v43 = &v105[v41];
      MEMORY[0x270FA5388](v38);
      uint64_t v99 = v35;
      uint64_t v100 = v34;
      uint64_t v45 = v44;
      uint64_t v113 = (uint64_t *)v43;
      _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)(v39, (uint64_t)v43, v31, v46, v37, (void (*)(unint64_t))sub_24A4D0390, (uint64_t)(&v103 - 6), v112, v44);
      uint64_t v47 = v104;
      Swift::Int v122 = (Swift::Int)&v104[*(int *)(v42 + 48)];
      Swift::Int v48 = v122;
      uint64_t v49 = &v104[*(int *)(v45 + 48)];
      uint64_t v50 = v35;
      uint64_t v51 = *(void *)(v35 - 8);
      uint64_t v117 = v51;
      uint64_t v52 = v39;
      uint64_t v53 = v50;
      (*(void (**)(char *, uint64_t))(v51 + 16))(v104, v52);
      uint64_t v54 = v34;
      uint64_t v55 = *(void *)(v34 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v49, v40, v34);
      uint64_t v56 = *(void *)(v108 - 8);
      (*(void (**)(Swift::Int, char *, uint64_t))(v56 + 16))(v48, v43, v108);
      uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
      v57((uint64_t)v119, v47, v53);
      uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 32);
      v58((uint64_t)v120, v49, v54);
      uint64_t v59 = v111;
      int v60 = &v111[*(int *)(v103 + 48)];
      uint64_t v61 = &v111[*(int *)(v107 + 48)];
      v57((uint64_t)v111, v105, v53);
      uint64_t v62 = v121;
      v58((uint64_t)v61, (char *)v116, v121);
      unint64_t v63 = *(void (**)(char *, uint64_t *, uint64_t))(v56 + 32);
      uint64_t v64 = v108;
      v63(v60, v113, v108);
      v63(v118, (uint64_t *)v60, v64);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v61, v62);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v59, v53);
      return (*(uint64_t (**)(Swift::Int, uint64_t))(v56 + 8))(v122, v64);
    }
    else
    {
      unint64_t v80 = (v116 >> v117) & 0x1F;
      uint64_t v81 = v121;
      int v82 = v117;
      uint64_t v83 = v115;
      uint64_t v84 = nullsub_1(*(void *)v8 + 16, *(void *)v8 + 32, v115, v121, v114);
      uint64_t v101 = v81;
      uint64_t v102 = v33;
      uint64_t v85 = (uint64_t)v109;
      uint64_t v87 = sub_24A584584(v84, v86, v80, v82, v32, (uint64_t)v113, v122 & 0x1FFFFFFFFFFLL, (uint64_t)v109);
      uint64_t v113 = &v103;
      uint64_t v89 = v106;
      uint64_t v88 = v107;
      Swift::Int v122 = v85 + *(int *)(v107 + 48);
      unint64_t v116 = v85 + *(int *)(v106 + 48);
      MEMORY[0x270FA5388](v87);
      uint64_t v99 = v83;
      uint64_t v100 = v81;
      uint64_t v90 = v81;
      uint64_t v101 = v33;
      LODWORD(v102) = v80;
      _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)(v82, (uint64_t (*)(uint64_t))sub_24A585AF0, (void (*)(char *, char *, uint64_t))(&v103 - 6), v80, v91, v112, (uint64_t)v118);
      uint64_t v92 = v110;
      unint64_t v93 = (char *)v110 + *(int *)(v89 + 48);
      uint64_t v94 = (char *)v110 + *(int *)(v88 + 48);
      uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v83 - 8) + 32);
      v95((char *)v110, v85, v83);
      uint64_t v96 = *(void (**)(char *, Swift::Int, uint64_t))(*(void *)(v90 - 8) + 32);
      v96(v94, v122, v90);
      uint64_t v97 = v108;
      uint64_t v98 = *(void *)(v108 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v98 + 32))(v93, v116, v108);
      v95(v119, (uint64_t)v92, v83);
      v96(v120, (Swift::Int)v94, v121);
      return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v93, v97);
    }
  }
  else
  {
    uint64_t v67 = (uint64_t)v109;
    uint64_t v66 = v110;
    uint64_t v68 = (uint64_t)&v109[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v69 = (uint64_t)&v109[*((int *)v110 + 12)];
    uint64_t v108 = v69;
    uint64_t v70 = v121;
    uint64_t v71 = v115;
    int v72 = v117;
    _HashNode.removing(_:at:)((uint64_t)v109, v68, v69, v117, v116, v113, v122 & 0x1FFFFFFFFFFLL, *(void *)v8, *(unsigned char **)(v8 + 8), v115, v121, v114);
    _HashNode.applyReplacement(_:_:)(v72, v69, a8, (uint64_t)v118);
    uint64_t v73 = v111;
    Swift::Int v122 = (Swift::Int)&v111[*((int *)v66 + 12)];
    unint64_t v118 = &v111[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v74 = (uint64_t)v118;
    uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v71 - 8) + 32);
    v75(v111, v67, v71);
    uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 32);
    v76(v74, v68, v70);
    uint64_t v77 = v112;
    uint64_t v78 = *(v112 - 1);
    Swift::Int v79 = v122;
    (*(void (**)(Swift::Int, uint64_t, void *))(v78 + 32))(v122, v108, v112);
    v75(v119, (uint64_t)v73, v71);
    v76((uint64_t)v120, (uint64_t)v118, v70);
    return (*(uint64_t (**)(Swift::Int, void *))(v78 + 8))(v79, v77);
  }
}

uint64_t _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)(uint64_t a1, uint64_t a2, int a3, char a4, unsigned int a5, void (*a6)(unint64_t), uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v41 = a2;
  uint64_t v42 = a7;
  int v37 = a3;
  uint64_t v38 = a1;
  uint64_t v15 = a8[2];
  uint64_t v14 = a8[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v39 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v40 = TupleTypeMetadata2;
  uint64_t v17 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v36 = (uint64_t)&v35 - v18;
  uint64_t v19 = *(void *)(a9 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v42;
  uint64_t v42 = a9;
  _HashNode.removeItem<A>(at:_:by:)(a4, a5, a6, v22, a8);
  uint64_t v23 = *v9;
  uint64_t v24 = v9[1];
  uint64_t v25 = a8[4];
  if (_HashNode.isAtrophied.getter(*v9, v24, v15, v14, v25))
  {
    uint64_t v26 = _HashNode.removeSingletonChild()(a8);
    uint64_t v24 = v27;
    swift_release();
    *uint64_t v9 = v26;
    v9[1] = v24;
    uint64_t v23 = v26;
  }
  if ((_HashNode.hasSingletonItem.getter(v23, v24, v15, v14, v25) & 1) == 0) {
    goto LABEL_8;
  }
  if (!(_BYTE)v37)
  {
    if (_HashNode.isCollisionNode.getter(v23, v24, v15, v14, v25)) {
      _HashNode._convertToRegularNode()();
    }
LABEL_8:
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v38, v21, v42);
    uint64_t v33 = 1;
    uint64_t v28 = v40;
    uint64_t v31 = v41;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v31, v33, 1, v28);
  }
  uint64_t v28 = v40;
  uint64_t v29 = v36;
  uint64_t v30 = v36 + *(int *)(v40 + 48);
  _HashNode.removeSingletonItem()(v36, v30, a8);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v38, v21, v42);
  uint64_t v31 = v41;
  uint64_t v32 = v41 + *(int *)(v28 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v41, v29, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v32, v30, v14);
  uint64_t v33 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v31, v33, 1, v28);
}

uint64_t _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)@<X0>(int a1@<W0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(char *, char *, uint64_t)@<X2>, int a4@<W3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  LODWORD(v98) = a4;
  uint64_t v102 = a3;
  uint64_t v103 = a2;
  LODWORD(v104) = a1;
  uint64_t v10 = a6[3];
  uint64_t v115 = a6[2];
  uint64_t v116 = a5;
  uint64_t v113 = a7;
  uint64_t v114 = v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v92 - v15;
  uint64_t v17 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v14);
  uint64_t v101 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v99 = (char *)&v92 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v100 = (char *)&v92 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v111 = (char *)&v92 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v97 = (char *)&v92 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v112 = (char *)&v92 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v96 = (char *)&v92 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v92 - v32;
  uint64_t v34 = v8[1];
  v8[1] = v34 - 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v116, v12);
  uint64_t v116 = v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    if (_HashNode.isAtrophied.getter(*v8, v8[1], v115, v114, a6[4]))
    {
      uint64_t v35 = _HashNode.removeSingletonChild()(a6);
      uint64_t v37 = v36;
      swift_release();
      *uint64_t v8 = v35;
      v8[1] = v37;
    }
    uint64_t v38 = 1;
    uint64_t v39 = v113;
LABEL_10:
    uint64_t v60 = v116;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v39, v38, 1, TupleTypeMetadata2);
  }
  uint64_t v40 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v41 = (int *)&v33[v40];
  uint64_t v108 = &v16[v40];
  uint64_t v42 = v115;
  uint64_t v106 = *(void *)(v115 - 8);
  uint64_t v43 = *(void (**)(void))(v106 + 32);
  uint64_t v109 = v106 + 32;
  uint64_t v110 = v43;
  ((void (*)(char *, char *, uint64_t))v43)(v33, v16, v115);
  uint64_t v44 = v114;
  uint64_t v105 = *(void *)(v114 - 8);
  uint64_t v45 = *(void (**)(uint64_t, int *, uint64_t))(v105 + 32);
  uint64_t v95 = v41;
  char v46 = v108;
  uint64_t v107 = v45;
  uint64_t v108 = (char *)(v105 + 32);
  v45((uint64_t)v41, (int *)v46, v114);
  uint64_t v47 = *v8;
  uint64_t v48 = a6[4];
  char v49 = _HashNode.hasSingletonChild.getter(*v8, v34 - 1, v42, v44, v48);
  uint64_t v50 = v42;
  uint64_t v51 = v8;
  if ((v49 & 1) != 0 && (_BYTE)v104)
  {
    uint64_t v52 = v8;
    uint64_t v53 = TupleTypeMetadata2;
    uint64_t v54 = v33;
    if (qword_26979ACF0 != -1) {
      swift_once();
    }
    uint64_t v55 = _HashNode.init(storage:count:)(_emptySingleton, 0, v50, v44, v48);
    uint64_t v57 = v56;
    swift_retain();
    swift_release();
    *uint64_t v52 = v55;
    v52[1] = v57;
    uint64_t v39 = v113;
    uint64_t v58 = v113 + *(int *)(v53 + 48);
    uint64_t v59 = v54;
    TupleTypeMetadata2 = v53;
    ((void (*)(uint64_t, char *, uint64_t))v110)(v113, v59, v50);
    v107(v58, v95, v44);
    uint64_t v38 = 0;
    goto LABEL_10;
  }
  uint64_t v94 = a6;
  v8[1] = v34 - 2;
  uint64_t v61 = nullsub_1(v47 + 16, v47 + 32, v50, v44, v48);
  uint64_t result = v103(v61);
  uint64_t v63 = *(void *)(v116 + 72);
  BOOL v64 = __OFSUB__(v63, 16);
  uint64_t v65 = v63 - 16;
  if (!v64)
  {
    uint64_t v66 = (uint64_t (*)(uint64_t))result;
    uint64_t v104 = v48;
    uint64_t v67 = v94;
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(1, v65 & ~(v65 >> 63));
    _HashNode.removeChild(at:_:)((char)v66, v98, v67);
    swift_release();
    uint64_t v68 = (int *)&v96[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
    v106 += 16;
    uint64_t v102 = v69;
    v69(v96, v33, v50);
    uint64_t v103 = v66;
    uint64_t v70 = *(void (**)(uint64_t, int *, uint64_t))(v105 + 16);
    v105 += 16;
    v70((uint64_t)v68, v95, v44);
    unint64_t v93 = v51;
    uint64_t v71 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v72 = v50;
    uint64_t v98 = v33;
    uint64_t v73 = &v112[v71];
    v110();
    v107((uint64_t)v73, v68, v44);
    uint64_t v95 = (int *)nullsub_1(*v51 + 16, *v51 + 32, v50, v44, v104);
    uint64_t v96 = (char *)v74;
    v75.i32[0] = *v95 & ~(-1 << (char)v103);
    uint8x8_t v76 = (uint8x8_t)vcnt_s8(v75);
    v76.i16[0] = vaddlv_u8(v76);
    LODWORD(v94) = v76.i32[0];
    uint64_t v77 = v97;
    uint64_t v78 = &v97[*(int *)(TupleTypeMetadata2 + 48)];
    Swift::Int v79 = v102;
    v102(v97, v112, v72);
    v70((uint64_t)v78, (int *)v73, v44);
    unint64_t v80 = v111;
    uint64_t v81 = &v111[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v110)(v111, v77, v72);
    v107((uint64_t)v81, (int *)v78, v44);
    ++v93[1];
    int v82 = v100;
    uint64_t v83 = &v100[*(int *)(TupleTypeMetadata2 + 48)];
    v79(v100, v80, v72);
    uint64_t v84 = v83;
    uint64_t v85 = v83;
    uint64_t v86 = v44;
    uint64_t v60 = v116;
    v70((uint64_t)v84, (int *)v81, v86);
    uint64_t v104 = _HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(v94, (char)v103, v95, (uint64_t)v96);
    uint64_t v87 = v99;
    uint64_t v88 = &v99[*(int *)(TupleTypeMetadata2 + 48)];
    v102(v99, v82, v72);
    v70((uint64_t)v88, (int *)v85, v86);
    uint64_t v89 = (uint64_t)v101;
    uint64_t v90 = &v101[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v110)(v101, v87, v72);
    v107((uint64_t)v90, (int *)v88, v86);
    sub_24A544CAC(v89, v104, TupleTypeMetadata2);
    uint64_t v91 = *(void (**)(char *, uint64_t))(v60 + 8);
    v91(v111, TupleTypeMetadata2);
    v91(v82, TupleTypeMetadata2);
    v91(v112, TupleTypeMetadata2);
    v91(v98, TupleTypeMetadata2);
    uint64_t v38 = 1;
    uint64_t v39 = v113;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v39, v38, 1, TupleTypeMetadata2);
  }
  __break(1u);
  return result;
}

uint64_t _HashNode._removingChild(_:at:_:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>)
{
  uint64_t v18 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a8);
  return sub_24A585688(v18, v19, a2, a3, a1, a4, a5, a6, a9, a7, a8);
}

uint64_t sub_24A583F88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(HIDWORD(a3), a1, a2);
  uint64_t v9 = type metadata accessor for _HashNode();
  return _HashNode.remove(_:_:_:)(v8, a5, a6, v9);
}

uint64_t _HashNode._removingItemFromLeaf(_:at:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v26 = a8;
  uint64_t v27 = a1;
  HIDWORD(v25) = a5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = type metadata accessor for _HashNode.Builder();
  uint64_t v16 = swift_getTupleTypeMetadata2();
  uint64_t v17 = v16 - 8;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v25 - v18;
  uint64_t v20 = (__int32 *)nullsub_1(a7 + 16, a7 + 32, a9, a10, a11);
  sub_24A584BE0(v20, v21, a6, a4, a7, v26, HIDWORD(v25), a9, v19, a10, a11);
  uint64_t v22 = &v19[*(int *)(v17 + 56)];
  uint64_t v23 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(a9 - 8) + 32))(v27, v19, a9);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(a10 - 8) + 32))(v28, v23, a10);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32))(v29, v22, v15);
}

uint64_t sub_24A584220(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(HIDWORD(a3), a1, a2, a7, a8, a9);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  swift_retain();
  _HashNode.removing(_:_:_:)((a4 + 5), a5, a6, v16, v15, a7, a8, a9);
  return swift_release();
}

uint64_t _HashNode.removing(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned char *a6, Swift::Int a7, uint64_t a8, unsigned char *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v37 = a9;
  uint64_t v38 = a1;
  int v15 = BYTE4(a7);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = type metadata accessor for _HashNode.Builder();
  uint64_t v17 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v32 - v18;
  if (v15 == a4)
  {
    uint64_t v20 = (_DWORD *)nullsub_1(a8 + 16, a8 + 32, a10, a11, a12);
    int v21 = _HashNode.UnsafeHandle.itemBucket(at:)(a7, v20);
    uint64_t v22 = v38;
    uint64_t v23 = v39;
    uint64_t v24 = v40;
    uint64_t v25 = v37;
    return _HashNode._removingItemFromLeaf(_:at:_:)(v22, v23, v24, a4, v21, a7, a8, (uint64_t)v25, a10, a11, a12);
  }
  else
  {
    uint64_t v27 = v34;
    unsigned int v33 = (v34 >> a4) & 0x1F;
    uint64_t v28 = nullsub_1(a8 + 16, a8 + 32, a10, a11, a12);
    sub_24A5846A4(v28, v29, v33, a4, v27, v35, (char *)(a7 & 0x1FFFFFFFFFFLL), a8, (uint64_t)v19, v37, a10, a11, a12);
    uint64_t v30 = &v19[*(int *)(v17 + 48)];
    uint64_t v31 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a10 - 8) + 32))(v38, v19, a10);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a11 - 8) + 32))(v39, v31, a11);
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)(v36 - 8) + 32))(v40, v30);
  }
}

uint64_t sub_24A584584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_24A5BBD20();
  uint64_t v13 = a8 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = a8 + *(int *)(TupleTypeMetadata2 + 48);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v15 = type metadata accessor for _HashNode();
  return _HashNode.remove(_:at:)(a8, v14, v13, (a4 + 5), a5, a6, a7 & 0x1FFFFFFFFFFLL, v15);
}

Swift::UInt sub_24A5846A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unsigned char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned char *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v67 = a8;
  uint64_t v60 = a7;
  uint64_t v61 = a5;
  uint64_t v63 = a6;
  int v73 = a4;
  uint64_t v59 = a2;
  uint64_t v72 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v71 = type metadata accessor for _HashNode.Builder();
  uint64_t v16 = swift_getTupleTypeMetadata2();
  uint64_t v65 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v66 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v62 = (char *)&v48 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = a1;
  Swift::UInt_optional v75 = UInt32._bit(ranked:)(a3);
  Swift::UInt value = v75.value;
  if (v75.is_nil)
  {
    __break(1u);
  }
  else
  {
    uint64_t v58 = a10;
    uint64_t v24 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v68 = v22;
    uint64_t v69 = v24;
    uint64_t v74 = v16;
    uint64_t v25 = &v22[*(int *)(v16 + 48)];
    uint64_t v70 = v25;
    uint64_t v26 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, v23, v59, a11, a12, a13);
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v53 = TupleTypeMetadata2;
    uint64_t v29 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v57 = a13;
    uint64_t v30 = (v73 + 5);
    LODWORD(v59) = a3;
    uint64_t v31 = (unint64_t)v60 & 0x1FFFFFFFFFFLL;
    swift_retain();
    uint64_t v32 = v68;
    _HashNode.removing(_:at:)(v68, v24, v25, v30, v61, v63, v31, v29, v28, a11, a12, a13);
    swift_release();
    uint64_t v33 = *(int *)(v74 + 48);
    uint64_t v63 = (unsigned char *)(v72 + v33);
    unint64_t v34 = &v62[v33];
    uint64_t v60 = &v62[v33];
    uint64_t v35 = &v62[*(int *)(v27 + 48)];
    uint64_t v50 = v35;
    uint64_t v51 = a11;
    uint64_t v36 = *(void *)(a11 - 8);
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    uint64_t v56 = v36;
    v55(v62, v32, a11);
    uint64_t v37 = *(void *)(a12 - 8);
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    uint64_t v49 = a12;
    v54(v35, v69, a12);
    uint64_t v61 = *(void *)(v71 - 8);
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
    v52(v34, v70, v71);
    uint64_t v38 = v53;
    uint64_t v39 = v72 + *(int *)(v53 + 48);
    uint64_t v40 = v51;
    (*(void (**)(void))(v36 + 32))();
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v39, v50, a12);
    uint64_t v41 = v66;
    uint64_t v42 = (uint64_t)&v66[*(int *)(v74 + 48)];
    uint64_t v43 = &v66[*(int *)(v38 + 48)];
    uint64_t v44 = v68;
    v55(v66, v68, v40);
    uint64_t v45 = v49;
    v54(v43, v69, v49);
    uint64_t v46 = v71;
    v52((char *)v42, v70, v71);
    _HashNode.replacingChild(_:at:_:with:)(v73, value, v59, v42, v67, v58, v40, v45, v63, v57);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v44, v74);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v45);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v40);
    v75.Swift::UInt value = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v60, v46);
  }
  return v75.value;
}

Swift::Void __swiftcall _HashNode._convertToRegularNode()()
{
  uint64_t v2 = (_DWORD *)nullsub_1(*v1 + 16, *v1 + 32, v0[2], v0[3], v0[4]);
  *uint64_t v2 = 1 << *v3;
  v2[1] = 0;
  v2[3] += 8;
}

uint64_t sub_24A584BE0@<X0>(__int32 *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  unsigned int v99 = a7;
  uint64_t v98 = (unsigned char *)a6;
  uint64_t v106 = a4;
  LODWORD(v101) = a3;
  uint64_t v100 = a2;
  uint64_t v102 = a9;
  uint64_t v14 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v14);
  uint64_t v103 = (uint64_t *)&v92[-v15];
  uint64_t v16 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t result = MEMORY[0x270FA5388](v19);
  uint64_t v24 = &v92[-v21];
  __int32 v25 = *a1;
  __int32 v26 = a1[1];
  if ((v26 & *a1) != 0)
  {
    if (v25 == 2)
    {
      uint64_t v27 = v101;
      unsigned int v93 = 1 - v101;
      uint64_t v94 = &v92[-v21];
      uint64_t v28 = v100;
      unsigned int v99 = (*v100 >> v106) & 0x1F;
      uint64_t v97 = v22;
      type metadata accessor for _HashNode.Builder();
      uint64_t v29 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v96 = v14;
      uint64_t v30 = v102;
      uint64_t v98 = &v102[v29];
      uint64_t v31 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v27, a1, v28, v16, a10, a11);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 16))(v30, v31, TupleTypeMetadata2);
      uint64_t v32 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v93, a1, v28, v16, a10, a11);
      uint64_t v33 = *(int *)(TupleTypeMetadata2 + 48);
      unint64_t v34 = &v94[v33];
      uint64_t v35 = v32 + v33;
      uint64_t v36 = *(void *)(v16 - 8);
      (*(void (**)(unsigned char *))(v36 + 16))(v94);
      uint64_t v37 = *(void *)(a10 - 8);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v37 + 16))(v34, v35, a10);
      uint64_t v102 = (unsigned char *)(v97 + *(int *)(TupleTypeMetadata2 + 48));
      uint64_t v38 = v102;
      uint64_t v95 = a11;
      uint64_t v39 = *(void (**)(void))(v36 + 32);
      v39();
      uint64_t v40 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v37 + 32);
      v40((uint64_t)v38, v34, a10);
      uint64_t v41 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v42 = (uint64_t)v103;
      uint64_t v43 = (char *)v103 + *(int *)(TupleTypeMetadata2 + 48);
      ((void (*)(uint64_t *, uint64_t, uint64_t))v39)(v103, v97, v16);
      v40((uint64_t)v43, v102, a10);
      *(unsigned char *)(v42 + v41) = v99;
LABEL_26:
      swift_storeEnumTagMultiPayload();
      uint64_t v70 = v98;
      char v71 = v106;
      uint64_t v72 = v42;
      return _HashNode.Builder.init(_:_:)(v71, v72, v70);
    }
    goto LABEL_30;
  }
  v23.i32[0] = *a1;
  int8x8_t v44 = vcnt_s8(v23);
  v44.i16[0] = vaddlv_u8((uint8x8_t)v44);
  unsigned int v45 = v44.i32[0];
  if (v25)
  {
    v44.i32[0] = a1[1];
    uint8x8_t v46 = (uint8x8_t)vcnt_s8(v44);
    v46.i16[0] = vaddlv_u8(v46);
    BOOL v47 = v45 > 1 || v26 == 0;
    if (!v47 && v46.i32[0] <= 1u)
    {
      uint64_t v96 = v14;
      int v73 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, v100, v16, a10, a11);
      uint64_t v74 = v73[1];
      uint64_t v97 = *v73;
      uint64_t v94 = (unsigned char *)v74;
      if (_HashNode.isCollisionNode.getter(v97, v74, v16, a10, a11))
      {
        uint64_t v101 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v95 = a11;
        uint64_t v75 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, v100, v16, a10, a11);
        uint64_t v76 = v75 + *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v77 = *(void *)(v16 - 8);
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v77 + 16))(v24, v75, v16);
        uint64_t v78 = *(void *)(a10 - 8);
        Swift::Int v79 = v101;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v78 + 16))(v101, v76, a10);
        type metadata accessor for _HashNode.Builder();
        unint64_t v80 = &v102[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        uint64_t v81 = &v102[*(int *)(TupleTypeMetadata2 + 48)];
        (*(void (**)(void))(v77 + 32))();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v78 + 32))(v81, v79, a10);
        uint64_t v82 = (uint64_t)v103;
        uint64_t v83 = v94;
        *uint64_t v103 = v97;
        *(void *)(v82 + 8) = v83;
        swift_storeEnumTagMultiPayload();
        _HashNode.Builder.init(_:_:)(v106, v82, v80);
        return swift_retain();
      }
      goto LABEL_30;
    }
  }
  if (v45 != 2 || v26 != 0)
  {
LABEL_30:
    uint64_t v84 = sub_24A48AB90();
    uint64_t v104 = _HashNode.copy(withFreeSpace:)(v84, a5, (uint64_t)v98, v16, a10, a11);
    uint64_t v105 = v85;
    uint64_t v86 = (uint64_t)&v24[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v87 = (void *)type metadata accessor for _HashNode();
    _HashNode.removeItem(at:_:)((uint64_t)v24, v86, v99, v101, v87);
    type metadata accessor for _HashNode.Builder();
    uint64_t v88 = &v102[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v89 = &v102[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(void))(*(void *)(v16 - 8) + 32))();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(v89, v86, a10);
    uint64_t v90 = v105;
    uint64_t v91 = v103;
    *uint64_t v103 = v104;
    v91[1] = v90;
    swift_storeEnumTagMultiPayload();
    uint64_t v70 = v88;
    char v71 = v106;
    uint64_t v72 = (uint64_t)v91;
    return _HashNode.Builder.init(_:_:)(v71, v72, v70);
  }
  uint64_t v96 = v14;
  uint64_t v97 = v22;
  int v50 = v25 - 1;
  uint64_t v51 = v101;
  if (v25) {
    BOOL v52 = v101 == 1;
  }
  else {
    BOOL v52 = 1;
  }
  if (v52) {
    int v50 = -1;
  }
  unsigned int v53 = v50 & v25;
  if (v53)
  {
    LODWORD(v94) = 1 - v101;
    unsigned int v99 = __clz(__rbit32(v53));
    type metadata accessor for _HashNode.Builder();
    uint64_t v54 = swift_getTupleTypeMetadata2();
    uint64_t v55 = v102;
    uint64_t v98 = &v102[*(int *)(v54 + 48)];
    uint64_t v56 = v51;
    uint64_t v57 = v100;
    uint64_t v95 = a11;
    uint64_t v58 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v56, a1, v100, v16, a10, a11);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 16))(v55, v58, TupleTypeMetadata2);
    uint64_t v59 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v94, a1, v57, v16, a10, a11);
    uint64_t v60 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v61 = &v24[v60];
    uint64_t v101 = &v24[v60];
    uint64_t v62 = v59 + v60;
    uint64_t v63 = *(void *)(v16 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v63 + 16))(v24, v59, v16);
    uint64_t v64 = *(void *)(a10 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v64 + 16))(v61, v62, a10);
    uint64_t v65 = v97;
    uint64_t v102 = (unsigned char *)(v97 + *(int *)(TupleTypeMetadata2 + 48));
    uint64_t v66 = v102;
    uint64_t v67 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v63 + 32);
    v67(v97, v24, v16);
    uint64_t v68 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v64 + 32);
    v68((uint64_t)v66, v101, a10);
    uint64_t v101 = (unsigned char *)*(int *)(swift_getTupleTypeMetadata2() + 48);
    uint64_t v42 = (uint64_t)v103;
    uint64_t v69 = (char *)v103 + *(int *)(TupleTypeMetadata2 + 48);
    v67((uint64_t)v103, (unsigned char *)v65, v16);
    v68((uint64_t)v69, v102, a10);
    v101[v42] = v99;
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A585688@<X0>(unsigned int *a1@<X0>, char *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  int v47 = a5;
  LODWORD(v44) = a4;
  LODWORD(v43) = a3;
  int v50 = a2;
  uint8x8_t v46 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v45 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v45);
  uint64_t v20 = (uint64_t *)((char *)&v39 - v19);
  unsigned int v21 = *a1;
  if (!*a1)
  {
    int8x8_t v29 = (int8x8_t)a1[1];
    if (v29.i32[0])
    {
      uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.i32[0] == 2)
      {
        uint64_t v31 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor((1 - v44), a1, v50, a8, a10, a11);
        uint64_t v32 = *v31;
        uint64_t v33 = v31[1];
        if (_HashNode.isCollisionNode.getter(*v31, v33, a8, a10, a11))
        {
          *uint64_t v20 = v32;
          v20[1] = v33;
          swift_storeEnumTagMultiPayload();
          _HashNode.Builder.init(_:_:)(v47, (uint64_t)v20, v46);
          return swift_retain();
        }
      }
    }
    goto LABEL_9;
  }
  if ((v21 & (v21 - 1)) != 0
    || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)a1[1]), v22.i16[0] = vaddlv_u8(v22), v22.i32[0] != 1))
  {
LABEL_9:
    if (!_HashNode.UnsafeHandle.hasSingletonChild.getter(a1))
    {
      uint64_t v35 = sub_24A48AB90();
      uint64_t v48 = _HashNode.copy(withFreeSpace:)(v35, v41, v42, a8, a10, a11);
      uint64_t v49 = v36;
      uint64_t v37 = (void *)type metadata accessor for _HashNode();
      _HashNode.removeChild(at:_:)((char)v43, v44, v37);
      swift_release();
      uint64_t v38 = v49;
      *uint64_t v20 = v48;
      v20[1] = v38;
    }
    goto LABEL_11;
  }
  uint64_t v23 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, v50, a8, a10, a11);
  uint64_t v24 = *(int *)(TupleTypeMetadata2 + 48);
  int v50 = &v18[v24];
  uint64_t v44 = v23 + v24;
  uint64_t v25 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v18, v23, a8);
  uint64_t v41 = *(void *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v50, v44, a10);
  LODWORD(v44) = __clz(__rbit32(v21));
  uint64_t v40 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
  __int32 v26 = *(void (**)(uint64_t *, char *, uint64_t))(v25 + 32);
  uint64_t v42 = v25 + 32;
  uint64_t v43 = v26;
  v26((uint64_t *)v16, v18, a8);
  uint64_t v27 = v40;
  uint64_t v41 = *(void *)(v41 + 32);
  ((void (*)(char *, char *, uint64_t))v41)(v40, v50, a10);
  int v50 = (char *)*(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v28 = (char *)v20 + *(int *)(TupleTypeMetadata2 + 48);
  v43(v20, v16, a8);
  ((void (*)(char *, char *, uint64_t))v41)(v28, v27, a10);
  v50[(void)v20] = v44;
LABEL_11:
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(v47, (uint64_t)v20, v46);
}

Swift::UInt sub_24A585AF0()
{
  Swift::UInt_optional v2 = UInt32._bit(ranked:)(*(unsigned int *)(v0 + 40));
  if (v2.is_nil) {
    __break(1u);
  }
  return v2.value;
}

uint64_t (*sub_24A585B1C())(void, void, void, void, void)
{
  if (*v0) {
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A585B48(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  BigString.UTF16View.makeIterator()(&v17);
  uint64_t result = sub_24A496BE8(v3);
  long long v14 = v19;
  long long v15 = v20;
  long long v16 = v21;
  long long v12 = v17;
  long long v13 = v18;
  if (!a2)
  {
    a3 = 0;
    long long v10 = v20;
    a1[2] = v19;
    a1[3] = v10;
    a1[4] = v21;
    long long v11 = v18;
    *a1 = v17;
    a1[1] = v11;
    return a3;
  }
  if (!a3)
  {
LABEL_9:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    *(Swift::UInt16_optional *)&int v8 = BigString.UTF16View.Iterator.next()();
    for (uint64_t i = 0; (v8 & 0x10000) == 0; ++i)
    {
      *(_WORD *)(a2 + 2 * i) = v8;
      if (a3 - 1 == i) {
        goto LABEL_9;
      }
      *(Swift::UInt16_optional *)&int v8 = BigString.UTF16View.Iterator.next()();
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return i;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A585C4C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  BigString.UnicodeScalarView.makeIterator()(&v17);
  uint64_t result = sub_24A496BE8(v3);
  long long v14 = v19;
  long long v15 = v20;
  long long v16 = v21;
  long long v12 = v17;
  long long v13 = v18;
  if (!a2)
  {
    a3 = 0;
    long long v10 = v20;
    a1[2] = v19;
    a1[3] = v10;
    a1[4] = v21;
    long long v11 = v18;
    *a1 = v17;
    a1[1] = v11;
    return a3;
  }
  if (!a3)
  {
LABEL_9:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    BigString.UnicodeScalarView.Iterator.next()();
    for (uint64_t i = 0; (v8 & 0x100000000) == 0; ++i)
    {
      *(_DWORD *)(a2 + 4 * i) = v8;
      if (a3 - 1 == i) {
        goto LABEL_9;
      }
      BigString.UnicodeScalarView.Iterator.next()();
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return i;
  }
  __break(1u);
  return result;
}

void *sub_24A585D50(void *result, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  if (!a3) {
    goto LABEL_7;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else if ((a5 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a5;
    if (!a5)
    {
LABEL_9:
      *uint64_t result = a4;
      result[1] = a5;
      result[2] = v5;
      return (void *)v5;
    }
    *a2 = *(unsigned char *)(a4 + 32) & 1;
    if (a3 != 1)
    {
      uint64_t v5 = a5;
      if (a5 == 1) {
        goto LABEL_9;
      }
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = v6 + 1;
        a2[v6 + 1] = (*(void *)(a4 + 32 + (((unint64_t)(v6 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 1)) & 1;
        if (a3 - 2 == v6) {
          break;
        }
        ++v6;
        if (a5 - 1 == v7)
        {
          uint64_t v5 = a5;
          goto LABEL_9;
        }
      }
    }
LABEL_7:
    uint64_t v5 = a3;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void *sub_24A585DF4(void *result, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unint64_t *)(a4 + 32);
  if (!*(void *)(a4 + 16))
  {
    unint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v6 = 0;
    a3 = 0;
    goto LABEL_25;
  }
  unint64_t v5 = *v4;
  if (!a2) {
    goto LABEL_21;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v6 = 0;
    goto LABEL_25;
  }
  if (a3 < 0)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      if (v6 << 6 < 0) {
        goto LABEL_28;
      }
      unint64_t v9 = __rbit64(v5);
      v5 &= v5 - 1;
      unint64_t v8 = (v6 << 6) | __clz(v9);
      goto LABEL_9;
    }
    uint64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_29;
    }
    uint64_t v11 = *(void *)(a4 + 16);
    if (v10 >= v11) {
      break;
    }
    unint64_t v12 = v4[v10];
    if (!v12)
    {
      while (1)
      {
        uint64_t v6 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
        if (v6 >= v11)
        {
          unint64_t v5 = 0;
          uint64_t v6 = v11 - 1;
          goto LABEL_23;
        }
        unint64_t v12 = v4[v6];
        ++v10;
        if (v12) {
          goto LABEL_7;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    ++v6;
LABEL_7:
    if (v6 << 6 < 0) {
      goto LABEL_30;
    }
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v8 = __clz(__rbit64(v12)) + (v6 << 6);
LABEL_9:
    ++v7;
    *a2++ = v8;
    if (v7 == a3) {
      goto LABEL_25;
    }
  }
  unint64_t v5 = 0;
LABEL_23:
  a3 = v7;
LABEL_25:
  *uint64_t result = a4;
  result[1] = v6;
  result[2] = v5;
  return (void *)a3;
}

unint64_t **sub_24A585F00(unint64_t **result, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    unint64_t v5 = *a4;
    if (a2) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v6 = 0;
    a3 = 0;
LABEL_24:
    *uint64_t result = a4;
    result[1] = (unint64_t *)a5;
    result[2] = (unint64_t *)v6;
    result[3] = (unint64_t *)v5;
    return (unint64_t **)a3;
  }
  unint64_t v5 = 0;
  if (!a2) {
    goto LABEL_21;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v6 = 0;
    goto LABEL_24;
  }
  if (a3 < 0) {
    goto LABEL_30;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (v5)
  {
    if (v6 << 6 < 0) {
      goto LABEL_27;
    }
    unint64_t v9 = __rbit64(v5);
    v5 &= v5 - 1;
    unint64_t v8 = (v6 << 6) | __clz(v9);
LABEL_9:
    ++v7;
    *a2++ = v8;
    if (v7 == a3) {
      goto LABEL_24;
    }
  }
  uint64_t v10 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_28;
  }
  if (v10 >= a5)
  {
    unint64_t v5 = 0;
    a3 = v7;
    goto LABEL_24;
  }
  unint64_t v11 = a4[v10];
  if (v11)
  {
    ++v6;
LABEL_7:
    if (v6 << 6 < 0) {
      goto LABEL_29;
    }
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v8 = __clz(__rbit64(v11)) + (v6 << 6);
    goto LABEL_9;
  }
  while (1)
  {
    uint64_t v6 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v6 >= a5)
    {
      unint64_t v5 = 0;
      uint64_t v6 = a5 - 1;
      a3 = v7;
      goto LABEL_24;
    }
    unint64_t v11 = a4[v6];
    ++v10;
    if (v11) {
      goto LABEL_7;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

unsigned int *sub_24A586008(unsigned int *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a2)
  {
LABEL_7:
    int v5 = 0;
    a3 = 0;
LABEL_16:
    *uint64_t result = a4;
    result[1] = v5;
    return (unsigned int *)a3;
  }
  if (!a3)
  {
    int v5 = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      char v4 = __clz(__rbit32(a4));
      a4 &= a4 - 1;
      *(unsigned char *)a2 = v4;
      *(_DWORD *)(a2 + 4) = 0;
      if (a3 == 1)
      {
        int v5 = 1;
      }
      else if (a4)
      {
        uint64_t v6 = 0;
        uint64_t v7 = (_DWORD *)(a2 + 12);
        while (1)
        {
          uint64_t v8 = v6;
          char v9 = __clz(__rbit32(a4));
          a4 &= a4 - 1;
          *((unsigned char *)v7 - 4) = v9;
          *uint64_t v7 = v6 + 1;
          if (a3 - 2 == v6) {
            break;
          }
          ++v6;
          v7 += 2;
          if (!a4)
          {
            a3 = v8 + 2;
            break;
          }
        }
        int v5 = v8 + 2;
      }
      else
      {
        int v5 = 1;
        a3 = 1;
      }
      goto LABEL_16;
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t *sub_24A5860BC(unint64_t *result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    *uint64_t result = a4;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      unint64_t v4 = __clz(__rbit64(a4));
      a4 &= a4 - 1;
      *a2 = v4;
      if (a3 != 1)
      {
        if (a4)
        {
          uint64_t v5 = 0;
          while (1)
          {
            unint64_t v6 = __clz(__rbit64(a4));
            a4 &= a4 - 1;
            a2[v5 + 1] = v6;
            if (a3 - 2 == v5) {
              break;
            }
            ++v5;
            if (!a4)
            {
              a3 = v5 + 1;
              goto LABEL_12;
            }
          }
        }
        else
        {
          a3 = 1;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A586140(uint64_t (*a1)(void *), uint64_t a2)
{
  unint64_t v4 = v2;
  uint64_t v112 = a2;
  uint64_t v5 = *v2;
  long long v55 = *(_OWORD *)(v2 + 1);
  long long v52 = *(_OWORD *)(v2 + 3);
  uint64_t v7 = v2[5];
  unint64_t v6 = v2[6];
  uint64_t v8 = v4[7];
  unint64_t v9 = v4[8];
  uint64_t v10 = v4[9];
  unint64_t v54 = v4[10];
  long long v59 = *(_OWORD *)(v4 + 11);
  unint64_t v58 = v4[13];
  *(void *)char v71 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x24C5C7E90](v71, 8);
  long long v77 = 0u;
  long long v78 = 0u;
  uint64_t v79 = 0;
  uint64_t v80 = *(void *)v71;
  uint64_t v45 = *(void *)v71;
  uint64_t v81 = 768;
  uint64_t v82 = 0;
  long long v84 = xmmword_24A5BD050;
  uint64_t v83 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 1;
  uint64_t v108 = v5;
  long long v109 = v55;
  long long v110 = v52;
  uint64_t v111 = v7;
  sub_24A493804(&v108, v6, v8, v9, v10, v88);
  long long v56 = v88[0];
  uint64_t v11 = v89;
  uint64_t v12 = v90;
  long long v51 = v92;
  long long v53 = v88[1];
  uint64_t v13 = v91;
  uint64_t v14 = v93;
  unint64_t v15 = v94;
  uint64_t v16 = v95;
  swift_unknownObjectRelease();
  *(_OWORD *)&v71[8] = v59;
  *(void *)char v71 = v54;
  *(void *)&v71[24] = v58;
  long long v72 = v56;
  long long v73 = v53;
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v12;
  *(_OWORD *)&v75[8] = v51;
  *(void *)uint64_t v75 = v13;
  *(void *)&v75[24] = v14;
  *(void *)&long long v76 = v15;
  int64_t v17 = v13 + (v15 >> 16);
  *((void *)&v76 + 1) = v16;
  if (__OFADD__(v13, v15 >> 16))
  {
LABEL_23:
    __break(1u);
  }
  else
  {
    *(void *)&long long v53 = 0;
    uint64_t v49 = 0;
    *(void *)&long long v51 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int64_t v18 = v54 >> 11;
    unint64_t v54 = 768;
    *(void *)&long long v56 = 0;
    uint64_t v16 = 1;
    uint64_t v46 = 1;
    uint64_t v47 = 0;
    unint64_t v58 = 768;
    *(void *)&long long v59 = 0;
    while (v17 < v18 && (*((void *)&v76 + 1) ^ v15) >= 0x4000)
    {
      long long v100 = v72;
      long long v101 = v73;
      long long v102 = v74;
      long long v104 = *(_OWORD *)&v75[8];
      uint64_t v103 = v13;
      uint64_t v105 = *(void *)&v75[24];
      unint64_t v106 = v15;
      uint64_t v107 = *((void *)&v76 + 1);
      sub_24A495168();
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      if ((sub_24A495704(v19, v21) & 1) == 0) {
        *(void *)&long long v76 = *((void *)&v76 + 1);
      }
      v62[0] = v20;
      v62[1] = v22;
      uint64_t result = a1(v62);
      if (v3)
      {
        swift_bridgeObjectRelease();
        long long v67 = v74;
        long long v68 = *(_OWORD *)v75;
        long long v69 = *(_OWORD *)&v75[16];
        long long v70 = v76;
        long long v63 = *(_OWORD *)v71;
        long long v64 = *(_OWORD *)&v71[16];
        long long v65 = v72;
        long long v66 = v73;
        sub_24A495C98((uint64_t)&v63);
        return swift_unknownObjectRelease();
      }
      if (result)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = *(void *)v75;
        unint64_t v15 = v76;
        int64_t v17 = *(void *)v75 + ((unint64_t)v76 >> 16);
        if (__OFADD__(*(void *)v75, (unint64_t)v76 >> 16)) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v54 >> 10 < v58 >> 10)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        uint64_t v24 = v56;
        if (!(void)v59) {
          uint64_t v24 = 0;
        }
        uint64_t v60 = v24;
        swift_bridgeObjectRetain();
        unint64_t v57 = sub_24A5BB830();
        uint64_t v48 = v26;
        unint64_t v50 = v25;
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v57, v50, v48, v28, v54, v51, v53, v16);
        uint64_t result = v77;
        if ((void)v77) {
          uint64_t v29 = v79;
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = v29 - v60;
        if (__OFSUB__(v29, v60)) {
          goto LABEL_27;
        }
        uint64_t v43 = *((void *)&v77 + 1);
        long long v96 = v77;
        uint64_t v42 = *((void *)&v78 + 1);
        uint64_t v44 = v78;
        long long v97 = v78;
        *(void *)&long long v56 = v79;
        uint64_t v98 = v79;
        uint64_t v45 = v80;
        uint64_t v99 = v80;
        *(void *)&long long v59 = swift_unknownObjectRetain();
        unint64_t v31 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v58 & 0xFFFFFFFFFFFFF800, 0, 0, 1);
        uint64_t v47 = v32;
        uint64_t v49 = v33;
        uint64_t v46 = v34;
        uint64_t result = swift_unknownObjectRelease();
        if (__OFADD__(v30, v54 >> 11)) {
          goto LABEL_28;
        }
        swift_unknownObjectRetain();
        unint64_t v35 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0((v30 + (v54 >> 11)) << 11, 0, 0, 1);
        uint64_t v37 = v36;
        uint64_t v39 = v38;
        uint64_t v41 = v40;
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        if (v35 >> 10 < v31 >> 10) {
          goto LABEL_29;
        }
        unint64_t v58 = v31;
        uint64_t v81 = v31;
        uint64_t v82 = v47;
        uint64_t v83 = v49;
        *(void *)&long long v84 = v46;
        *((void *)&v84 + 1) = v35;
        *(void *)&long long v51 = v37;
        uint64_t v85 = v37;
        *(void *)&long long v53 = v39;
        uint64_t v86 = v39;
        uint64_t v87 = v41;
        uint64_t v13 = *(void *)v75;
        unint64_t v15 = v76;
        int64_t v17 = *(void *)v75 + ((unint64_t)v76 >> 16);
        unint64_t v54 = v35;
        uint64_t v16 = v41;
        if (__OFADD__(*(void *)v75, (unint64_t)v76 >> 16)) {
          goto LABEL_23;
        }
      }
    }
  }
  swift_unknownObjectRelease();
  long long v67 = v74;
  long long v68 = *(_OWORD *)v75;
  long long v69 = *(_OWORD *)&v75[16];
  long long v70 = v76;
  long long v63 = *(_OWORD *)v71;
  long long v64 = *(_OWORD *)&v71[16];
  long long v65 = v72;
  long long v66 = v73;
  uint64_t result = sub_24A495C98((uint64_t)&v63);
  *unint64_t v4 = v59;
  v4[1] = v43;
  unint64_t v4[2] = v44;
  _OWORD v4[3] = v42;
  v4[4] = v56;
  v4[5] = v45;
  v4[6] = v58;
  v4[7] = v47;
  v4[8] = v49;
  v4[9] = v46;
  v4[10] = v54;
  v4[11] = v51;
  v4[12] = v53;
  v4[13] = v16;
  return result;
}

uint64_t sub_24A58667C(uint64_t (*a1)(void *))
{
  __n128 v4 = v1[1];
  v45[0] = *v1;
  v45[1] = v4;
  __n128 v6 = *v1;
  __n128 v5 = v1[1];
  v45[2] = v1[2];
  v46[0] = v6;
  v31[0].n128_u64[0] = 0;
  __n128 v7 = v1[2];
  v46[1] = v5;
  void v46[2] = v7;
  sub_24A4974C4((uint64_t)v46, (uint64_t)v47);
  sub_24A497498((uint64_t)v47);
  MEMORY[0x24C5C7E90](v31, 8);
  unint64_t v8 = v31[0].n128_u64[0];
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  unint64_t v37 = v31[0].n128_u64[0];
  sub_24A561324(v45, v31);
  unint64_t v9 = v32;
  unint64_t v10 = v33;
  if ((v33 ^ v32) >= 0x4000)
  {
    while (1)
    {
      __n128 v38 = v31[0];
      __n128 v39 = v31[1];
      __n128 v40 = v31[2];
      __n128 v41 = v31[3];
      __n128 v42 = v31[4];
      unint64_t v43 = v9;
      unint64_t v44 = v10;
      sub_24A495168();
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      if ((sub_24A495704(v23, v25) & 1) == 0) {
        unint64_t v32 = v33;
      }
      v30[0] = v24;
      v30[1] = v26;
      char v27 = a1(v30);
      if (v2) {
        break;
      }
      if (v27)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v16 = sub_24A5BB830();
        unint64_t v18 = v17;
        uint64_t v20 = v19;
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
        _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v16, v18, v20, v22);
      }
      unint64_t v9 = v32;
      unint64_t v10 = v33;
      if ((v33 ^ v32) < 0x4000)
      {
        uint64_t v14 = *((void *)&v34 + 1);
        uint64_t v15 = v34;
        uint64_t v12 = *((void *)&v35 + 1);
        uint64_t v13 = v35;
        uint64_t v11 = v36;
        unint64_t v8 = v37;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
LABEL_11:
    sub_24A496BE8((uint64_t)v45);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v29 = v48;
    *uint64_t v48 = v15;
    v29[1] = v14;
    _OWORD v29[2] = v13;
    long long v29[3] = v12;
    void v29[4] = v11;
    v29[5] = v8;
  }
  return result;
}

uint64_t sub_24A58688C(uint64_t (*a1)(int *))
{
  uint64_t v3 = v1;
  uint64_t v4 = *v1;
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v34 = v6;
  uint64_t v35 = v1[1];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v32 = v7;
  uint64_t v33 = v5;
  uint64_t v31 = v8;
  uint64_t v39 = v1[7];
  unint64_t v41 = v1[6];
  uint64_t v36 = v1[9];
  unint64_t v37 = v1[8];
  unint64_t v68 = v1[10];
  unint64_t v44 = v1[12];
  uint64_t v45 = v1[11];
  uint64_t v43 = v1[13];
  v47[0] = 0;
  swift_unknownObjectRetain();
  MEMORY[0x24C5C7E90](v47, 8);
  long long v56 = 0u;
  long long v57 = 0u;
  *(void *)&long long v58 = 0;
  *((void *)&v58 + 1) = v47[0];
  *(void *)&v60[0] = 0;
  long long v59 = 0x300uLL;
  *(_OWORD *)((char *)v60 + 8) = xmmword_24A5BD050;
  *((void *)&v60[1] + 1) = 0;
  *(void *)&long long v61 = 0;
  *((void *)&v61 + 1) = 1;
  uint64_t v62 = v4;
  uint64_t v63 = v35;
  uint64_t v64 = v6;
  uint64_t v65 = v5;
  uint64_t v66 = v7;
  uint64_t v67 = v8;
  swift_unknownObjectRetain_n();
  unint64_t v9 = sub_24A4965FC(v41, v39, v37, v36);
  uint64_t v40 = v11;
  uint64_t v42 = v10;
  uint64_t v38 = v12;
  swift_unknownObjectRetain();
  unint64_t v13 = sub_24A496820(v68, v45, v44, v43, 1);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_unknownObjectRelease_n();
  v47[0] = v4;
  v47[1] = v35;
  v47[2] = v34;
  v47[3] = v33;
  v47[4] = v32;
  v47[5] = v31;
  unint64_t v48 = v9;
  uint64_t v49 = v42;
  uint64_t v50 = v40;
  uint64_t v51 = v38;
  unint64_t v52 = v13;
  uint64_t v53 = v15;
  uint64_t v54 = v17;
  uint64_t v55 = v19;
  while (v13 >> 10 > v48 >> 10)
  {
    BigString.UnicodeScalarView.Iterator.next()();
    if ((v20 & 0x100000000) != 0) {
      break;
    }
    int v21 = v20;
    int v46 = v20;
    char v22 = a1(&v46);
    if (v2)
    {
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    if ((v22 & 1) == 0) {
      BigSubstring.UnicodeScalarView.append(_:)(v21);
    }
  }
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  long long v24 = v57;
  long long v25 = v58;
  *uint64_t v3 = v56;
  v3[1] = v24;
  long long v26 = v59;
  long long v27 = v60[0];
  v3[2] = v25;
  _OWORD v3[3] = v26;
  long long v28 = v60[1];
  long long v29 = v61;
  v3[4] = v27;
  v3[5] = v28;
  v3[6] = v29;
  return result;
}

uint64_t sub_24A586AD0(uint64_t (*a1)(unsigned int *))
{
  uint64_t v3 = v1;
  long long v5 = v1[1];
  v36[0] = *v1;
  v36[1] = v5;
  long long v7 = *v1;
  long long v6 = v1[1];
  v36[2] = v1[2];
  v31[0] = 0;
  v37[0] = v7;
  v37[1] = v6;
  long long v37[2] = v1[2];
  sub_24A4974C4((uint64_t)v37, (uint64_t)v38);
  sub_24A497498((uint64_t)v38);
  MEMORY[0x24C5C7E90](v31, 8);
  uint64_t v8 = v31[0];
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  uint64_t v35 = v31[0];
  BigString.UnicodeScalarView.makeIterator()(v31);
  sub_24A496BE8((uint64_t)v36);
  BigString.UnicodeScalarView.Iterator.next()();
  if ((v9 & 0x100000000) == 0)
  {
    unsigned int v10 = v9;
    while (1)
    {
      unsigned int v39 = v10;
      uint64_t result = a1(&v39);
      if (v2)
      {
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      if ((result & 1) == 0)
      {
        if ((v10 & 0xFFFFFF80) != 0)
        {
          int v16 = (v10 & 0x3F) << 8;
          unsigned int v17 = (v16 | (v10 >> 6)) + 33217;
          int v18 = (v16 | (v10 >> 6) & 0x3F) << 8;
          int v19 = (((v18 | (v10 >> 12) & 0x3F) << 8) | (v10 >> 18)) - 2122219023;
          int v20 = (v18 | (v10 >> 12)) + 8487393;
          if (HIWORD(v10)) {
            int v20 = v19;
          }
          if (v10 >= 0x800) {
            unsigned int v17 = v20;
          }
        }
        else
        {
          if (v10 > 0xFF)
          {
            __break(1u);
            return result;
          }
          unsigned int v17 = (v10 + 1);
        }
        uint64_t v30 = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v17) >> 3)) & 7)));
        MEMORY[0x24C5C6960](&v30);
        unint64_t v21 = sub_24A5BB830();
        unint64_t v23 = v22;
        uint64_t v25 = v24;
        unint64_t v27 = v26;
        swift_bridgeObjectRelease();
        _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v21, v23, v25, v27);
      }
      BigString.UnicodeScalarView.Iterator.next()();
      unsigned int v10 = v28;
      if ((v28 & 0x100000000) != 0)
      {
        uint64_t v14 = *((void *)&v32 + 1);
        uint64_t v15 = v32;
        uint64_t v12 = *((void *)&v33 + 1);
        uint64_t v13 = v33;
        uint64_t v11 = v34;
        uint64_t v8 = v35;
        goto LABEL_17;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
LABEL_17:
  sub_24A496BE8((uint64_t)v36);
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v3 = v15;
  v3[1] = v14;
  v3[2] = v13;
  _OWORD v3[3] = v12;
  v3[4] = v11;
  v3[5] = v8;
  return result;
}

unint64_t sub_24A586D60(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_24A48E614(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = sub_24A5BC060();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        sub_24A5BC120();
      }
      unsigned int v5 = sub_24A5BC130();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_24A586E40(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      long long v2 = v1[2];
      long long v9 = v1[1];
      long long v10 = v2;
      long long v8 = *v1;
      if ((void)v8) {
        unint64_t v3 = ((void)v10 << 11) | 0x300;
      }
      else {
        unint64_t v3 = 768;
      }
      uint64_t result = BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)(0x300uLL, 0, 0, 1, result, v3, 0, 0, 1);
      if (v6 != 2)
      {
        v7[0] = 768;
        v7[1] = 0;
        void v7[2] = 0;
        _OWORD v7[3] = 1;
        _OWORD v7[4] = result;
        v7[5] = v4;
        __n128 v7[6] = v5;
        _OWORD v7[7] = v6;
        return (unint64_t)BigString.UnicodeScalarView.removeSubrange(_:)(v7, v4, v5);
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_24A586EF8(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      long long v2 = v1[2];
      long long v9 = v1[1];
      long long v10 = v2;
      long long v8 = *v1;
      if ((void)v8) {
        unint64_t v3 = ((void)v10 << 11) | 0x300;
      }
      else {
        unint64_t v3 = 768;
      }
      uint64_t result = BigString.index(_:offsetBy:limitedBy:)(0x300uLL, 0, 0, 1, result, v3, 0, 0, 1);
      if (v6 != 2)
      {
        v7[0] = 768;
        v7[1] = 0;
        void v7[2] = 0;
        _OWORD v7[3] = 1;
        _OWORD v7[4] = result;
        v7[5] = v4;
        __n128 v7[6] = v5;
        _OWORD v7[7] = v6;
        return (unint64_t)BigString.removeSubrange(_:)(v7, v4, v5);
      }
    }
    __break(1u);
  }
  return result;
}

void sub_24A586FB0()
{
  long long v1 = v0[2];
  long long v10 = v0[1];
  long long v11 = v1;
  long long v9 = *v0;
  if ((void)v9) {
    BOOL v2 = (void)v11 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!((void)v11 << 11))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = ((void)v11 << 11) | 0x300;
  sub_24A58F608(0x300uLL, 0, 0, 1, v8);
  if ((uint64_t)_s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(0x300uLL, 0, 0, 1, v3, 0, 0, 1) >= 1)
  {
    unint64_t v4 = sub_24A4A7FB4(0x300uLL, 0, 0, 1, 1uLL);
    v8[0] = 768;
    v8[1] = 0;
    _OWORD v8[2] = 0;
    _OWORD v8[3] = 1;
    _OWORD v8[4] = v4 & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    v8[5] = v5;
    __n128 v8[6] = v6;
    _OWORD v8[7] = v7;
    BigString.removeSubrange(_:)((unint64_t *)v8, v5, v6);
    return;
  }
LABEL_10:
  __break(1u);
}

void sub_24A5870C4()
{
  long long v1 = v0[2];
  long long v8 = v0[1];
  long long v9 = v1;
  long long v7 = *v0;
  if ((void)v7) {
    unint64_t v2 = ((void)v9 << 11) | 0x300;
  }
  else {
    unint64_t v2 = 768;
  }
  if (v2 < 0x400)
  {
    __break(1u);
  }
  else
  {
    sub_24A58FF4C(0x300uLL, 0, 0, 1);
    if ((uint64_t)sub_24A4A7F58(0x300uLL, 0, 0, 1, v2, 0, 0, 1) >= 1)
    {
      v6[0] = 768;
      v6[1] = 0;
      void v6[2] = 0;
      _OWORD v6[3] = 1;
      void v6[4] = sub_24A4A8740(0x300uLL, 0, 0, 1, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
      v6[5] = v3;
      v6[6] = v4;
      _OWORD v6[7] = v5;
      BigString.UnicodeScalarView.removeSubrange(_:)(v6, v3, v4);
      return;
    }
  }
  __break(1u);
}

void BigString.UnicodeScalarView.Iterator.next()()
{
  uint64_t v4 = *(void *)(v0 + 32);
  if (*(void *)v0) {
    BOOL v5 = 2 * (v4 & 0x1FFFFFFFFFFFFFuLL) > *(void *)(v0 + 48) >> 10;
  }
  else {
    BOOL v5 = 0;
  }
  char v6 = !v5;
  if (!v5)
  {
LABEL_35:
    LOBYTE(v32) = v6;
    return;
  }
  unint64_t v7 = v0;
  uint64_t v8 = *(void *)(v0 + 72);
  if (v8 != 1)
  {
    if (*(void *)(v0 + 56) == *(void *)(v0 + 40))
    {
      unint64_t v9 = *(void *)(v0 + 64);
      unint64_t v3 = (16 * *(void *)(v0 + 48)) & 0x4000 | ((unint64_t)*(void *)(v0 + 48) << 16) | (*(void *)(v0 + 48) >> 8) & 3 | 4;
      unint64_t v30 = v9;
      uint64_t v31 = *(void *)(v0 + 56);
      if (v8)
      {
        unint64_t v10 = v8 + 24 * ((v9 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v0 = *(void *)(v10 + 24);
        unint64_t v2 = *(void *)(v10 + 32);
        unsigned int v29 = *(unsigned __int8 *)(v10 + 40);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v11 = *(_OWORD *)(v0 + 8);
        uint64_t v12 = *(void *)(v0 + 24);
        uint64_t v35 = *(void *)v0;
        long long v36 = v11;
        uint64_t v37 = v12;
        uint64_t v38 = v4;
        swift_unknownObjectRetain();
        sub_24A4895D4(v9, (uint64_t)&v32);
        swift_unknownObjectRelease();
        unint64_t v2 = *((void *)&v32 + 1);
        unint64_t v0 = v32;
        unsigned int v29 = v33;
      }
      sub_24A48E614(v3, v0, v2);
      uint64_t v1 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x1000000000000000) == 0)
      {
        uint64_t v13 = v2 & 0x2000000000000000;
        if ((v2 & 0x2000000000000000) != 0)
        {
          *(void *)&long long v32 = v0;
          *((void *)&v32 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain();
          sub_24A5BC130();
          swift_bridgeObjectRelease();
          unint64_t v14 = sub_24A48E614(v3, v0, v2) >> 16;
          *(void *)&long long v32 = v0;
          *((void *)&v32 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
          int v16 = *((unsigned __int8 *)&v32 + v14);
        }
        else
        {
          if ((v0 & 0x1000000000000000) == 0) {
            sub_24A5BC120();
          }
          swift_bridgeObjectRetain();
          sub_24A5BC130();
          swift_bridgeObjectRelease();
          unint64_t v14 = sub_24A48E614(v3, v0, v2) >> 16;
          if ((v0 & 0x1000000000000000) != 0) {
            uint64_t v15 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v15 = sub_24A5BC120();
          }
          int v16 = *(unsigned __int8 *)(v15 + v14);
        }
        swift_bridgeObjectRelease();
        unsigned int v17 = __clz(v16 ^ 0xFF) - 24;
        if ((v16 & 0x80u) == 0) {
          unsigned __int8 v18 = 1;
        }
        else {
          unsigned __int8 v18 = v17;
        }
        unint64_t v19 = ((v14 + v18) << 16) | 5;
        uint64_t v1 = HIBYTE(v2) & 0xF;
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    sub_24A5BC060();
    sub_24A48E614(v3, v0, v2);
    unint64_t v19 = sub_24A5BB5D0();
    swift_bridgeObjectRelease();
    uint64_t v13 = v2 & 0x2000000000000000;
LABEL_26:
    if (v13) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = v0 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v21 = *(void *)(v7 + 48);
    if (v19 >> 14 >= 4 * v20)
    {
      long long v26 = *(_OWORD *)(v7 + 16);
      long long v32 = *(_OWORD *)v7;
      long long v33 = v26;
      long long v34 = *(_OWORD *)(v7 + 32);
      sub_24A4974C4((uint64_t)&v32, (uint64_t)v39);
      sub_24A497498((uint64_t)v39);
      uint64_t v24 = sub_24A4980DC(v31, v30, v8);
      unint64_t v25 = v27;
      uint64_t v8 = v28;
      sub_24A496BE8((uint64_t)&v32);
      unint64_t v23 = (v21 + ((v29 - (unint64_t)v21) << 11)) & 0xFFFFFFFFFFFFF800;
    }
    else
    {
      unint64_t v22 = (v21 + (((v19 >> 16) - v21) << 11)) & 0xFFFFFFFFFFFFF800;
      if ((v19 & 0xC000) != 0) {
        v22 |= 0x400uLL;
      }
      unint64_t v23 = v22 & 0xFFFFFFFFFFFFFF00 | BYTE2(v19);
      unint64_t v25 = v30;
      uint64_t v24 = v31;
    }
    *(void *)(v7 + 48) = v23;
    *(void *)(v7 + 56) = v24;
    *(void *)(v7 + 64) = v25;
    *(void *)(v7 + 72) = v8;
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t BigString.UnicodeScalarView.replaceSubrange<A>(_:with:)(unint64_t *a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t v6 = MEMORY[0x270FA5388](a3[-1].Description);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v6;
  if (v9 == MEMORY[0x263F8D290])
  {
    unint64_t v13 = *(void *)a2;
    uint64_t v14 = *(void *)(a2 + 8);
    swift_bridgeObjectRetain();
    __n128 v15 = sub_24A54D850(a1, v13, v14);
    (*(void (**)(uint64_t, void, __n128))(v26 + 8))(a2, MEMORY[0x263F8D290], v15);
  }
  else
  {
    if (a3 != (ValueMetadata *)MEMORY[0x263F8D960])
    {
      if (a3 == &type metadata for BigString.UnicodeScalarView)
      {
        long long v20 = *(_OWORD *)(a2 + 16);
        __n128 v27 = *(__n128 *)a2;
        long long v28 = v20;
        long long v29 = *(_OWORD *)(a2 + 32);
        __n128 v30 = v27;
        long long v31 = v20;
        long long v32 = v29;
        sub_24A4974C4((uint64_t)&v30, (uint64_t)v34);
        sub_24A497498((uint64_t)v34);
        sub_24A51AEFC(a1, &v27);
        sub_24A496BE8((uint64_t)&v27);
        return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v26 + 8))(a2, &type metadata for BigString.UnicodeScalarView);
      }
      else if (a3 == &type metadata for BigSubstring.UnicodeScalarView)
      {
        long long v21 = *(_OWORD *)(a2 + 16);
        __n128 v27 = *(__n128 *)a2;
        long long v28 = v21;
        __n128 v22 = *(__n128 *)(a2 + 48);
        long long v29 = *(_OWORD *)(a2 + 32);
        __n128 v30 = v22;
        long long v23 = *(_OWORD *)(a2 + 80);
        long long v31 = *(_OWORD *)(a2 + 64);
        long long v32 = v23;
        long long v33 = *(_OWORD *)(a2 + 96);
        swift_unknownObjectRetain();
        sub_24A486920(a1, (long long *)&v27, v30.n128_u64);
        swift_unknownObjectRelease();
        uint64_t v24 = *(uint64_t (**)(uint64_t, ValueMetadata *))(v26 + 8);
        return v24(a2, &type metadata for BigSubstring.UnicodeScalarView);
      }
      else
      {
        (*(void (**)(char *, uint64_t, ValueMetadata *))(v6 + 16))(v8, a2, a3);
        __n128 v10 = sub_24A59F8DC((uint64_t)v8, (uint64_t)a3, &v30);
        long long v11 = *(void (**)(char *, ValueMetadata *, __n128))(v26 + 8);
        v26 += 8;
        v11(v8, a3, v10);
        sub_24A51AEFC(a1, &v30);
        sub_24A496BE8((uint64_t)&v30);
        return ((uint64_t (*)(uint64_t, ValueMetadata *))v11)(a2, a3);
      }
    }
    swift_bridgeObjectRetain_n();
    unint64_t v16 = sub_24A5BBEA0();
    sub_24A54DD00(a1, v16, v17, v18, v19);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void))(v26 + 8))(a2, MEMORY[0x263F8D960]);
  }
  return swift_bridgeObjectRelease();
}

__n128 BigString.UnicodeScalarView.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t Description = (void (**)(uint64_t, void))a2[-1].Description;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x263F8D290])
  {
    uint64_t v13 = *(void *)a1;
    unint64_t v14 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    sub_24A588A10(v13, v14, &v30);
    __n128 v25 = v31;
    __n128 v24 = v30;
    unint64_t v11 = *((void *)&v32 + 1);
    unint64_t v10 = v32;
    Description[1](a1, MEMORY[0x263F8D290]);
  }
  else if (a2 == (ValueMetadata *)MEMORY[0x263F8D960])
  {
    unint64_t v15 = *(void *)a1;
    unint64_t v16 = *(void *)(a1 + 8);
    unint64_t v17 = *(void *)(a1 + 16);
    unint64_t v18 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    sub_24A588D3C(v15, v16, v17, v18, (uint64_t)&v30);
    __n128 v25 = v31;
    __n128 v24 = v30;
    unint64_t v11 = *((void *)&v32 + 1);
    unint64_t v10 = v32;
    Description[1](a1, MEMORY[0x263F8D960]);
  }
  else if (a2 == &type metadata for BigString.UnicodeScalarView)
  {
    __n128 v25 = *(__n128 *)(a1 + 16);
    __n128 v24 = *(__n128 *)a1;
    unint64_t v10 = *(void *)(a1 + 32);
    unint64_t v11 = *(void *)(a1 + 40);
    uint64_t v19 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    swift_unknownObjectRetain();
    v19(a1, &type metadata for BigString.UnicodeScalarView);
  }
  else if (a2 == &type metadata for BigSubstring.UnicodeScalarView)
  {
    long long v20 = *(_OWORD *)(a1 + 16);
    v29[0] = *(_OWORD *)a1;
    v29[1] = v20;
    __n128 v21 = *(__n128 *)(a1 + 48);
    _OWORD v29[2] = *(_OWORD *)(a1 + 32);
    __n128 v30 = v21;
    long long v22 = *(_OWORD *)(a1 + 80);
    __n128 v31 = *(__n128 *)(a1 + 64);
    long long v32 = v22;
    long long v33 = *(_OWORD *)(a1 + 96);
    swift_unknownObjectRetain();
    sub_24A48D050(v29, v30.n128_u64, v26);
    __n128 v25 = (__n128)v26[1];
    __n128 v24 = (__n128)v26[0];
    unint64_t v10 = v27;
    unint64_t v11 = v28;
    ((void (**)(uint64_t, ValueMetadata *))Description)[1](a1, &type metadata for BigSubstring.UnicodeScalarView);
  }
  else
  {
    ((void (*)(char *, uint64_t, ValueMetadata *))Description[2])(v8, a1, a2);
    sub_24A59F8DC((uint64_t)v8, (uint64_t)a2, &v30);
    __n128 v25 = v31;
    __n128 v24 = v30;
    unint64_t v11 = *((void *)&v32 + 1);
    unint64_t v10 = v32;
    uint64_t v12 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    v12((uint64_t)v8, a2);
    v12(a1, a2);
  }
  __n128 result = v25;
  *a3 = v24;
  a3[1] = result;
  a3[2].n128_u64[0] = v10;
  a3[2].n128_u64[1] = v11;
  return result;
}

uint64_t BigString.UnicodeScalarView.startIndex.getter()
{
  return 768;
}

uint64_t BigString.UnicodeScalarView.endIndex.getter()
{
  if (*v0) {
    return (v0[4] << 11) | 0x300;
  }
  else {
    return 768;
  }
}

double BigString.UnicodeScalarView.init(repeating:count:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_24A589EEC(a1, a2, v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

unint64_t BigString.UnicodeScalarView.insert(_:at:)(unsigned int a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a1 > 0x7F)
  {
    int v13 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      int v14 = (v13 | (a1 >> 6) & 0x3F) << 8;
      int v15 = (((v14 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      unsigned int v9 = (v14 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1)) {
        unsigned int v9 = v15;
      }
    }
    else
    {
      unsigned int v9 = (v13 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
  }
  uint64_t v16 = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v9) >> 3))));
  uint64_t v10 = MEMORY[0x24C5C6960](&v16);
  return BigString.insert(contentsOf:at:)(v10, v11, a2, a3, a4, a5);
}

uint64_t BigString.UnicodeScalarView.insert<A>(contentsOf:at:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, ValueMetadata *a6)
{
  sub_24A589FEC(a1, a2, a3, a4, a5, a6);
  uint64_t v8 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a6[-1].Description + 1);
  return v8(a1, a6);
}

unint64_t *BigString.UnicodeScalarView.removeSubrange(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result[4];
  unint64_t v5 = 2 * (v3[4] & 0x1FFFFFFFFFFFFFLL);
  if (!*v3) {
    unint64_t v5 = 0;
  }
  if (v5 < v4 >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = *result;
    if (v4 >> 10 == *result >> 10) {
      return result;
    }
    double result = (unint64_t *)(v6 >> 11);
    if (v4 >> 11 >= v6 >> 11) {
      return (unint64_t *)sub_24A54E1F4((uint64_t)result, v4 >> 11, a3);
    }
  }
  __break(1u);
  return result;
}

__n128 BigString.unicodeScalars.setter(uint64_t a1)
{
  swift_unknownObjectRelease();
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 32) = result;
  return result;
}

double BigString.UnicodeScalarView.init(stringLiteral:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  sub_24A588A10(a1, a2, v7);
  double result = v7[0].n128_f64[0];
  __n128 v5 = v7[1];
  __n128 v6 = v7[2];
  *a3 = v7[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

double BigString.UnicodeScalarView.init(_:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  sub_24A588A10(a1, a2, v7);
  double result = v7[0].n128_f64[0];
  __n128 v5 = v7[1];
  __n128 v6 = v7[2];
  *a3 = v7[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

double sub_24A587E6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A588A10(*(void *)a1, *(void *)(a1 + 8), v5);
  __n128 v3 = v5[1];
  *(__n128 *)a2 = v5[0];
  *(__n128 *)(a2 + 16) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t BigString.UnicodeScalarView.description.getter()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  sub_24A497498((uint64_t)v0);
  return _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v3);
}

uint64_t BigString.UnicodeScalarView.debugDescription.getter()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  unint64_t v4[2] = v0[2];
  sub_24A497498((uint64_t)v0);
  _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v4);
  uint64_t v2 = sub_24A5BB5C0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static BigString.UnicodeScalarView.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  _OWORD v6[2] = a1[2];
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  __n128 v5[2] = a2[2];
  return sub_24A551D98(v6, v5) & 1;
}

BOOL BigString.UnicodeScalarView.isIdentical(to:)(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  _OWORD v8[2] = a1[2];
  sub_24A497498((uint64_t)v1);
  sub_24A497498((uint64_t)a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8((uint64_t)a1);
  sub_24A496BE8(v2);
  return v6;
}

uint64_t BigString.UnicodeScalarView.hash(into:)()
{
  return sub_24A55AFA0();
}

uint64_t BigString.UnicodeScalarView.hashValue.getter()
{
  return sub_24A5BC690();
}

void BigString.UnicodeScalarView.makeIterator()(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  if (!*v1) {
    goto LABEL_8;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (*(_WORD *)(v3 + 16)) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v27 = v1[3];
      uint64_t v13 = *(unsigned __int8 *)(v3 + 18);
      if (*(unsigned char *)(v3 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v11 = 0;
        uint64_t v14 = v3;
        do
        {
          uint64_t v15 = *(unsigned __int16 *)(v14 + 16);
          if (*(_WORD *)(v14 + 16))
          {
            uint64_t v17 = 0;
            unint64_t v18 = (uint64_t *)(v14 + 56);
            while (1)
            {
              uint64_t v19 = *v18;
              v18 += 5;
              uint64_t v20 = v11 - v19;
              if (__OFSUB__(v11, v19)) {
                break;
              }
              if (__OFADD__(v20, 1)) {
                goto LABEL_39;
              }
              if (v20 + 1 < 1)
              {
                uint64_t v15 = v17;
                goto LABEL_12;
              }
              ++v17;
              uint64_t v11 = v20;
              if (v15 == v17) {
                goto LABEL_21;
              }
            }
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v20 = v11;
LABEL_21:
          if (v20) {
            goto LABEL_40;
          }
          uint64_t v11 = 0;
LABEL_12:
          char v16 = (4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C;
          uint64_t v13 = ((-15 << v16) - 1) & v13 | (v15 << v16);
          uint64_t v12 = *(void *)(v14 + 24 + 40 * v15);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          uint64_t v14 = v12;
        }
        while (*(unsigned char *)(v12 + 18));
        unint64_t v21 = v13 & 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v22 = *(unsigned __int16 *)(v12 + 16);
        if (!*(_WORD *)(v12 + 16)) {
          goto LABEL_31;
        }
        goto LABEL_24;
      }
      swift_unknownObjectRetain_n();
      unint64_t v21 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = v3;
      uint64_t v22 = *(unsigned __int16 *)(v3 + 16);
      if (*(_WORD *)(v3 + 16))
      {
LABEL_24:
        uint64_t v23 = 0;
        __n128 v24 = (unsigned __int8 *)(v12 + 40);
        while (1)
        {
          unsigned int v25 = *v24;
          v24 += 24;
          uint64_t v26 = v11 - v25;
          if (__OFSUB__(v11, v25)) {
            break;
          }
          if (__OFADD__(v26, 1)) {
            goto LABEL_42;
          }
          if (v26 + 1 < 1)
          {
            uint64_t v22 = v23;
            goto LABEL_35;
          }
          ++v23;
          uint64_t v11 = v26;
          if (v22 == v23) {
            goto LABEL_32;
          }
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
LABEL_31:
      uint64_t v26 = v11;
LABEL_32:
      if (v26) {
        goto LABEL_45;
      }
      uint64_t v11 = 0;
LABEL_35:
      swift_unknownObjectRelease();
      if (v11 < 0) {
        goto LABEL_43;
      }
      unint64_t v10 = v21 | (v22 << 8);
      uint64_t v5 = v27;
LABEL_37:
      *a1 = v3;
      a1[1] = v4;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v11 | 0x300;
      a1[7] = v7;
      a1[8] = v10;
      a1[9] = v12;
      return;
    }
LABEL_8:
    sub_24A497498((uint64_t)v1);
    unint64_t v10 = sub_24A498214();
    LOBYTE(v11) = 0;
    uint64_t v12 = 0;
    goto LABEL_37;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

__n128 sub_24A5882F0@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  v7[0] = *v1;
  v7[1] = v3;
  void v7[2] = v1[2];
  BigString.UnicodeScalarView.makeIterator()(v6);
  sub_24A496BE8((uint64_t)v7);
  long long v4 = v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v6[4];
  __n128 result = (__n128)v6[1];
  *(_OWORD *)a1 = v6[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24A588354()
{
  if (*v0) {
    return v0[2];
  }
  else {
    return 0;
  }
}

uint64_t sub_24A588368()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  unint64_t v4[2] = v0[2];
  uint64_t v2 = sub_24A595A90(v4);
  sub_24A496BE8((uint64_t)v4);
  return v2;
}

uint64_t sub_24A5883B4(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A585C4C(a1, a2, a3);
}

void sub_24A5883F0(uint64_t a1@<X8>)
{
  BigString.UnicodeScalarView.Iterator.next()();
  *(_DWORD *)a1 = v2;
  *(unsigned char *)(a1 + 4) = v3 & 1;
}

uint64_t BigString.UnicodeScalarView.count.getter()
{
  if (*v0) {
    return v0[2];
  }
  else {
    return 0;
  }
}

unint64_t BigString.UnicodeScalarView.index(after:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A588444(a1, a2, a3, a4, 1uLL);
}

unint64_t BigString.UnicodeScalarView.index(before:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A588444(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
}

unint64_t sub_24A588444(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_24A4A8740(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t BigString.UnicodeScalarView.index(_:offsetBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_24A4A8740(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || (uint64_t)sub_24A4A7F58(a1, a2, a3, a4, a6, a7, a8, a9) <= a5) {
      return sub_24A4A8740(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    }
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && (uint64_t)sub_24A4A7F58(a1, a2, a3, a4, a6, a7, a8, a9) < a5) {
    return 0;
  }
  return sub_24A4A8740(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t BigString.UnicodeScalarView.distance(from:to:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_24A4A7F58(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t BigString.UnicodeScalarView.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A58FF4C(a1, a2, a3, a4);
}

unint64_t sub_24A588658@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_24A5888FC(a1, 0xFFFFFFFFFFFFFFFFLL, a2);
}

unint64_t sub_24A588660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A588964(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

void (*sub_24A588674(void *a1, unint64_t *a2))(void **a1)
{
  uint64_t v5 = malloc(0x34uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v10;
  __n128 v5[2] = v2[2];
  *((_DWORD *)v5 + 12) = sub_24A58FF4C(v6, v7, v8, v9);
  return sub_24A4DFA58;
}

__n128 sub_24A5886F0@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  unint64_t v8 = a1[6];
  uint64_t v29 = a1[5];
  unint64_t v30 = a1[4];
  uint64_t v9 = a1[7];
  long long v10 = v2[1];
  v31[0] = *v2;
  long long v11 = *v2;
  long long v12 = v2[2];
  v31[1] = v10;
  _OWORD v31[2] = v12;
  __n128 v27 = (__n128)v2[1];
  long long v28 = v11;
  uint64_t v13 = *((void *)v2 + 4);
  uint64_t v14 = *((void *)v2 + 5);
  sub_24A4974C4((uint64_t)v31, (uint64_t)v32);
  sub_24A497498((uint64_t)v32);
  unint64_t v15 = sub_24A4965FC(v4, v5, v6, v7);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unint64_t v22 = sub_24A4965FC(v30, v29, v8, v9);
  __n128 result = v27;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = v27;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v24;
  *(void *)(a2 + 96) = v25;
  *(void *)(a2 + 104) = v26;
  return result;
}

unint64_t sub_24A5887EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_24A4A8740(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_24A58884C@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

unint64_t sub_24A5888A0(uint64_t a1, uint64_t a2)
{
  return sub_24A4A7F58(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

unint64_t sub_24A5888F4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_24A5888FC(a1, 1uLL, a2);
}

unint64_t sub_24A5888FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_24A4A8740(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_24A58895C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A588964(a1, a2, a3, 1uLL);
}

unint64_t sub_24A588964(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result = sub_24A4A8740(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  return result;
}

double BigString.UnicodeScalarView.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0;
  MEMORY[0x24C5C7E90](&v4, 8);
  uint64_t v2 = v4;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v2;
  return result;
}

__n128 sub_24A588A10@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v5 = _s7BuilderVMa();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)uint64_t v7 = MEMORY[0x263F8EE78];
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 54) = 0u;
  *((void *)v7 + 9) = 0;
  *((void *)v7 + 10) = 0;
  *(void *)(v7 + 86) = 0;
  *((void *)v7 + 12) = v8;
  sub_24A5BC770();
  uint64_t v40 = v7;
  sub_24A5BC770();
  v39.n128_u64[0] = HIBYTE(a2) & 0xF;
  v38.n128_u64[0] = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    uint64_t v36 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v37 = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        sub_24A5BC060();
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          *(void *)&v41[0] = a1;
          *((void *)&v41[0] + 1) = v37;
        }
        else if ((a1 & 0x1000000000000000) == 0)
        {
          sub_24A5BC120();
        }
        sub_24A5BC130();
      }
      uint64_t v14 = v13;
      *(void *)&v41[0] = v10;
      *((void *)&v41[0] + 1) = v12;
      sub_24A5BB610();
      unint64_t v12 = *((void *)&v41[0] + 1);
      uint64_t v10 = *(void *)&v41[0];
      if ((*((void *)&v41[0] + 1) & 0x1000000000000000) != 0)
      {
        if (sub_24A5BB710() < 124) {
          goto LABEL_6;
        }
      }
      else if ((*((void *)&v41[0] + 1) & 0x2000000000000000) != 0 {
             || (*(void *)&v41[0] & 0xFFFFFFFFFFFFuLL) < 0x7C)
      }
      {
        goto LABEL_6;
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_24A5BB830();
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      sub_24A56F284(v15, v17, v19, v21);
      swift_bridgeObjectRelease();
      uint64_t v10 = 0;
      unint64_t v12 = 0xE000000000000000;
LABEL_6:
      v11 += v14;
      if (v11 >= v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_24A5BB830();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = (uint64_t)v40;
  sub_24A56F284(v22, v24, v26, v28);
  sub_24A4EF384(v29, v29);
  sub_24A491510((uint64_t *)v41);
  __n128 v38 = (__n128)v41[1];
  __n128 v39 = (__n128)v41[0];
  unint64_t v30 = v42;
  unint64_t v31 = v43;
  swift_bridgeObjectRelease();
  sub_24A51B224(v29);
  swift_bridgeObjectRelease();
  long long v32 = v35;
  __n128 result = v38;
  *uint64_t v35 = v39;
  v32[1] = result;
  v32[2].n128_u64[0] = v30;
  v32[2].n128_u64[1] = v31;
  return result;
}

uint64_t sub_24A588D3C@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = _s7BuilderVMa();
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)unint64_t v12 = MEMORY[0x263F8EE78];
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 54) = 0u;
  *((void *)v12 + 9) = 0;
  *((void *)v12 + 10) = 0;
  *(void *)(v12 + 86) = 0;
  *((void *)v12 + 12) = v13;
  sub_24A5BC770();
  uint64_t v55 = v12;
  sub_24A5BC770();
  unint64_t v54 = a2 >> 14;
  if (a2 >> 14 == a1 >> 14)
  {
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_24A5BB830();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    uint64_t v45 = v42;
    uint64_t v46 = (uint64_t)v55;
    sub_24A56F284(v38, v40, v45, v44);
    sub_24A4EF384(v46, v46);
    sub_24A491510((uint64_t *)v60);
    long long v58 = v60[1];
    long long v59 = v60[0];
    uint64_t v47 = v61;
    uint64_t v48 = v62;
    swift_bridgeObjectRelease();
    sub_24A51B224(v46);
    uint64_t result = swift_bridgeObjectRelease();
    long long v49 = v58;
    *(_OWORD *)a5 = v59;
    *(_OWORD *)(a5 + 16) = v49;
    *(void *)(a5 + 32) = v47;
    *(void *)(a5 + 40) = v48;
    return result;
  }
  uint64_t v56 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v57 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v53 = HIBYTE(a4) & 0xF;
  uint64_t v51 = a5;
  uint64_t v52 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v16 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v16 = a3 & 0xFFFFFFFFFFFFLL;
  }
  *(void *)&long long v59 = v16;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  unint64_t v19 = a1;
  unint64_t v20 = v54;
  *(void *)&long long v58 = v15;
  while (1)
  {
    sub_24A48F8EC(v19, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_24A5BC060();
    }
    else
    {
      if ((a4 & 0x2000000000000000) != 0)
      {
        *(void *)&v60[0] = a3;
        *((void *)&v60[0] + 1) = v57;
      }
      else if ((a3 & 0x1000000000000000) == 0)
      {
        sub_24A5BC120();
      }
      uint64_t result = sub_24A5BC130();
    }
    if (v19 & 0xC) != v15 && (v19) {
      break;
    }
    if ((v19 & 0xC) == v15)
    {
      uint64_t result = sub_24A4DFD84(v19, a3, a4);
      unint64_t v19 = result;
    }
    if ((unint64_t)v59 <= v19 >> 16) {
      goto LABEL_43;
    }
    if (v19) {
      goto LABEL_24;
    }
    unint64_t v19 = v19 & 0xC | sub_24A4971A8(v19, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4 & 0x1000000000000000) != 0)
    {
LABEL_34:
      unint64_t v19 = sub_24A5BB5D0();
      goto LABEL_35;
    }
LABEL_25:
    unint64_t v22 = v19 >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      *(void *)&v60[0] = a3;
      *((void *)&v60[0] + 1) = v57;
      int v24 = *((unsigned __int8 *)v60 + v22);
    }
    else
    {
      uint64_t v23 = v56;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v23 = sub_24A5BC120();
      }
      int v24 = *(unsigned __int8 *)(v23 + v22);
    }
    int v25 = (char)v24;
    unsigned int v26 = __clz(v24 ^ 0xFF) - 24;
    if (v25 >= 0) {
      LOBYTE(v26) = 1;
    }
    unint64_t v19 = ((v22 + v26) << 16) | 5;
    uint64_t v15 = v58;
LABEL_35:
    *(void *)&v60[0] = v17;
    *((void *)&v60[0] + 1) = v18;
    sub_24A5BB610();
    unint64_t v18 = *((void *)&v60[0] + 1);
    uint64_t v17 = *(void *)&v60[0];
    if ((*((void *)&v60[0] + 1) & 0x1000000000000000) != 0)
    {
      if (sub_24A5BB710() < 124) {
        goto LABEL_8;
      }
    }
    else if ((*((void *)&v60[0] + 1) & 0x2000000000000000) != 0 || (*(void *)&v60[0] & 0xFFFFFFFFFFFFuLL) < 0x7C)
    {
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_24A5BB830();
    uint64_t v29 = v28;
    unint64_t v30 = a1;
    unint64_t v31 = a2;
    uint64_t v33 = v32;
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v36 = v33;
    a2 = v31;
    a1 = v30;
    unint64_t v20 = v54;
    unint64_t v37 = v35;
    uint64_t v15 = v58;
    sub_24A56F284(v27, v29, v36, v37);
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
LABEL_8:
    if (v20 == v19 >> 14)
    {
      swift_bridgeObjectRelease();
      a5 = v51;
      goto LABEL_42;
    }
  }
  if ((unint64_t)v59 > v19 >> 16)
  {
LABEL_24:
    if ((a4 & 0x1000000000000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  sub_24A54D850(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)(unint64_t *a1)
{
  swift_bridgeObjectRetain();
  unint64_t v2 = sub_24A5BBEA0();
  sub_24A54DD00(a1, v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)(unint64_t *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  __n128 v5[2] = a2[2];
  sub_24A51AEFC(a1, v5);
  return sub_24A496BE8((uint64_t)a2);
}

double BigString.UnicodeScalarView.init(_:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  sub_24A588D3C(a1, a2, a3, a4, (uint64_t)v9);
  double result = *(double *)v9;
  long long v7 = v9[1];
  long long v8 = v9[2];
  *a5 = v9[0];
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

__n128 BigString.UnicodeScalarView.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

double BigString.UnicodeScalarView.init(_:)@<D0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v3 = a1[1];
  v13[0] = *a1;
  v13[1] = v3;
  long long v4 = a1[3];
  void v13[2] = a1[2];
  long long v5 = a1[4];
  long long v6 = a1[5];
  v12[0] = v4;
  v12[1] = v5;
  long long v7 = a1[6];
  void v12[2] = v6;
  _OWORD v12[3] = v7;
  sub_24A48D050(v13, (unint64_t *)v12, v11);
  double result = *(double *)v11;
  long long v9 = v11[1];
  long long v10 = v11[2];
  *a2 = v11[0];
  a2[1] = v9;
  a2[2] = v10;
  return result;
}

__n128 BigString.UnicodeScalarView.init<A>(repeating:count:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_24A59FD14(a1, a3, v13);
  sub_24A54E978(v13, a2, (uint64_t)v14);
  __n128 v11 = (__n128)v14[1];
  long long v12 = v14[0];
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  __n128 result = v11;
  *(_OWORD *)a4 = v12;
  *(__n128 *)(a4 + 16) = v11;
  *(void *)(a4 + 32) = v8;
  *(void *)(a4 + 40) = v9;
  return result;
}

double BigString.UnicodeScalarView.init(repeating:count:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  void v9[2] = a1[2];
  sub_24A54E978(v9, a2, (uint64_t)v8);
  double result = *(double *)v8;
  long long v6 = v8[1];
  long long v7 = v8[2];
  *a3 = v8[0];
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

__n128 BigString.UnicodeScalarView.init(repeating:count:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = a1[1];
  v21[0] = *a1;
  v21[1] = v6;
  long long v7 = a1[3];
  _OWORD v21[2] = a1[2];
  long long v8 = a1[4];
  long long v9 = a1[5];
  v20[0] = v7;
  v20[1] = v8;
  long long v10 = a1[6];
  void v20[2] = v9;
  _OWORD v20[3] = v10;
  sub_24A497498((uint64_t)a1);
  sub_24A48D050(v21, (unint64_t *)v20, v16);
  sub_24A54E978(v16, a2, (uint64_t)v17);
  __n128 v14 = (__n128)v17[1];
  long long v15 = v17[0];
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  sub_24A496BE8((uint64_t)a1);
  __n128 result = v14;
  *(_OWORD *)a3 = v15;
  *(__n128 *)(a3 + 16) = v14;
  *(void *)(a3 + 32) = v11;
  *(void *)(a3 + 40) = v12;
  return result;
}

unint64_t BigString.UnicodeScalarView.append(_:)(unsigned int a1)
{
  if (a1 > 0x7F)
  {
    int v3 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      int v4 = (v3 | (a1 >> 6) & 0x3F) << 8;
      int v5 = (((v4 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      unsigned int v1 = (v4 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1)) {
        unsigned int v1 = v5;
      }
    }
    else
    {
      unsigned int v1 = (v3 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    unsigned int v1 = a1 + 1;
  }
  uint64_t v6 = (v1 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v1) >> 3))));
  MEMORY[0x24C5C6960](&v6);
  return BigString.append(contentsOf:)();
}

uint64_t BigString.UnicodeScalarView.append<A>(contentsOf:)(uint64_t a1, ValueMetadata *a2)
{
  sub_24A58A614(a1, a2);
  int v4 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a2[-1].Description + 1);
  return v4(a1, a2);
}

uint64_t BigString.UnicodeScalarView.append(contentsOf:)()
{
  swift_bridgeObjectRetain();
  unint64_t v0 = sub_24A5BBEA0();
  _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v0, v1, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.append(contentsOf:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_24A5BC780();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t result = MEMORY[0x270FA5388](v5);
  long long v10 = (char *)&v27 - v9;
  uint64_t v11 = *a1;
  if (*a1)
  {
    uint64_t v13 = a1[1];
    uint64_t v12 = a1[2];
    uint64_t v15 = a1[3];
    uint64_t v14 = a1[4];
    uint64_t v16 = a1[5];
    uint64_t v51 = *a1;
    uint64_t v52 = v13;
    uint64_t v53 = v12;
    uint64_t v54 = v15;
    uint64_t v55 = v14;
    if (v14)
    {
      if (*v1)
      {
        unint64_t v17 = v1[4];
        if (v17)
        {
          unint64_t v30 = *v1;
          unint64_t v31 = v17;
          uint64_t v32 = v16;
          uint64_t v33 = v8;
          uint64_t v34 = v7;
          uint64_t v35 = result;
          unint64_t v29 = v1[1];
          unint64_t v28 = v1[2];
          unint64_t v27 = v1[3];
          sub_24A4895D4(*(unsigned __int8 *)(v11 + 18), (uint64_t)&v45);
          unint64_t v18 = sub_24A586D60(v45, v46);
          uint64_t result = swift_bridgeObjectRelease();
          if ((v18 & 0x100000000) != 0)
          {
            __break(1u);
          }
          else
          {
            *(void *)&long long v39 = v11;
            *((void *)&v39 + 1) = v13;
            *(void *)&long long v40 = v12;
            *((void *)&v40 + 1) = v15;
            uint64_t v41 = v14;
            swift_unknownObjectRetain();
            sub_24A5BC770();
            unint64_t v19 = v2[5];
            unint64_t v45 = v30;
            unint64_t v46 = v29;
            unint64_t v47 = v28;
            unint64_t v48 = v27;
            unint64_t v49 = v31;
            unint64_t v50 = v19;
            LOBYTE(v42[0]) = 0;
            uint64_t v20 = v33;
            uint64_t v21 = sub_24A48D2C8((v31 << 11) | 0x300, 0, 0, 1uLL, (uint64_t *)v18, v33);
            uint64_t v22 = *(unsigned __int8 *)(v11 + 18);
            uint64_t v23 = v32;
            v38[0] = v32;
            v38[1] = v22;
            void v38[2] = 0;
            MEMORY[0x270FA5388](v21);
            *(&v27 - 2) = (unint64_t)v10;
            *(&v27 - 1) = v20;
            uint64_t v36 = 0;
            char v37 = 1;
            sub_24A48E828(v42, (uint64_t)v38, &v39, (uint64_t)&v36, (void (*)(void *__return_ptr))sub_24A48ECE4, (uint64_t)(&v27 - 4));
            v42[0] = v39;
            v42[1] = v40;
            uint64_t v43 = v41;
            uint64_t v44 = v23 + 1;
            swift_unknownObjectRetain();
            sub_24A5B5A34((uint64_t *)v42);
            sub_24A496BE8((uint64_t)a1);
            int v24 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
            uint64_t v25 = v35;
            v24(v20, v35);
            v24((uint64_t)v10, v25);
            return swift_unknownObjectRelease();
          }
          return result;
        }
        uint64_t result = swift_unknownObjectRelease();
      }
      long long v26 = *((_OWORD *)a1 + 1);
      *(_OWORD *)unint64_t v1 = *(_OWORD *)a1;
      *((_OWORD *)v1 + 1) = v26;
      *((_OWORD *)v1 + 2) = *((_OWORD *)a1 + 2);
      return result;
    }
    return sub_24A496BE8((uint64_t)a1);
  }
  return result;
}

uint64_t BigString.UnicodeScalarView.append(contentsOf:)(long long *a1)
{
  sub_24A58A294(a1);
  return sub_24A496BE8((uint64_t)a1);
}

uint64_t BigString.UnicodeScalarView.insert(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_24A5BBEA0();
  _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v12, v13, v14, v15, a5, a6, a7, a8);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.insert(contentsOf:at:)(_OWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  long long v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  void v7[2] = a1[2];
  return _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(v7, a2, a3, a4, a5);
}

__n128 BigString.UnicodeScalarView.insert(contentsOf:at:)(long long *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  long long v5 = a1[1];
  v12[0] = *a1;
  v12[1] = v5;
  long long v6 = a1[3];
  void v12[2] = a1[2];
  long long v7 = a1[4];
  long long v8 = a1[5];
  v11[0] = v6;
  v11[1] = v7;
  long long v9 = a1[6];
  void v11[2] = v8;
  _OWORD v11[3] = v9;
  sub_24A486D1C(v12, (unint64_t *)v11, a2, a3, a4, a5);
  return result;
}

Swift::Void __swiftcall BigString.UnicodeScalarView.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v3 = 0;
  MEMORY[0x24C5C7E90](&v3, 8);
  uint64_t v2 = v3;
  swift_unknownObjectRelease();
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v2;
}

uint64_t sub_24A589C4C(_OWORD *a1, uint64_t a2, ValueMetadata *a3)
{
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  _OWORD v6[2] = a1[2];
  _OWORD v6[3] = v4;
  return BigString.UnicodeScalarView.replaceSubrange<A>(_:with:)((unint64_t *)v6, a2, a3);
}

double sub_24A589C84@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_24A589EEC(*a1, a2, v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

double sub_24A589CC8@<D0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  BigString.UnicodeScalarView.init<A>(_:)(a1, a2, v6);
  __n128 v4 = v6[1];
  *(__n128 *)a3 = v6[0];
  *(__n128 *)(a3 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a3 + 32) = v7;
  return result;
}

unint64_t sub_24A589D08(unsigned int *a1)
{
  return BigString.UnicodeScalarView.append(_:)(*a1);
}

uint64_t sub_24A589D10(uint64_t a1, ValueMetadata *a2)
{
  sub_24A58A614(a1, a2);
  __n128 v4 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a2[-1].Description + 1);
  return v4(a1, a2);
}

unint64_t sub_24A589D7C(unsigned int *a1, uint64_t a2)
{
  return BigString.UnicodeScalarView.insert(_:at:)(*a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A589D90(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  sub_24A589FEC(a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
  long long v5 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a3[-1].Description + 1);
  return v5(a1, a3);
}

unint64_t sub_24A589E14@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result = _s19CollectionsInternal9BigStringV17UnicodeScalarViewV6remove2ats0E0O0F0VAC5IndexV_tF_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

void sub_24A589E4C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

void sub_24A589E5C(_DWORD *a1@<X8>)
{
  sub_24A5870C4();
  *a1 = v2;
}

double sub_24A589E88()
{
  uint64_t v3 = 0;
  MEMORY[0x24C5C7E90](&v3, 8);
  uint64_t v1 = v3;
  swift_unknownObjectRelease();
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = v1;
  return result;
}

uint64_t sub_24A589ED4(uint64_t (*a1)(unsigned int *))
{
  return sub_24A586AD0(a1);
}

double sub_24A589EEC@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (a1 > 0x7F)
  {
    int v11 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      int v12 = (v11 | (a1 >> 6) & 0x3F) << 8;
      int v13 = (((v12 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      unsigned int v5 = (v12 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1)) {
        unsigned int v5 = v13;
      }
    }
    else
    {
      unsigned int v5 = (v11 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    unsigned int v5 = a1 + 1;
  }
  *(void *)&v15[0] = (v5 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v5) >> 3))));
  uint64_t v6 = MEMORY[0x24C5C6960](v15);
  sub_24A490BF0(v6, v7, v14);
  sub_24A54E978(v14, a2, (uint64_t)v15);
  double result = *(double *)v15;
  long long v9 = v15[1];
  long long v10 = v15[2];
  *a3 = v15[0];
  a3[1] = v9;
  a3[2] = v10;
  return result;
}

void sub_24A589FEC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, ValueMetadata *a6)
{
  uint64_t Description = (void (**)(char *))a6[-1].Description;
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15 == MEMORY[0x263F8D290])
  {
    uint64_t v18 = *(void *)v12;
    uint64_t v19 = *(void *)(v12 + 8);
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(v18, v19, a2, a3, a4, a5);
  }
  else if (a6 == (ValueMetadata *)MEMORY[0x263F8D960])
  {
    swift_bridgeObjectRetain_n();
    unint64_t v20 = sub_24A5BBEA0();
    _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v20, v21, v22, v23, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (a6 == &type metadata for BigString.UnicodeScalarView)
    {
      long long v24 = *(_OWORD *)(v12 + 16);
      __n128 v28 = *(__n128 *)v12;
      long long v29 = v24;
      long long v30 = *(_OWORD *)(v12 + 32);
      __n128 v31 = v28;
      long long v32 = v24;
      long long v33 = v30;
      sub_24A4974C4((uint64_t)&v31, (uint64_t)v35);
      sub_24A497498((uint64_t)v35);
      unint64_t v17 = &v28;
      goto LABEL_13;
    }
    if (a6 != &type metadata for BigSubstring.UnicodeScalarView)
    {
      Description[2](v14);
      __n128 v16 = sub_24A59F8DC((uint64_t)v14, (uint64_t)a6, &v31);
      ((void (*)(char *, ValueMetadata *, __n128))Description[1])(v14, a6, v16);
      unint64_t v17 = &v31;
LABEL_13:
      _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(v17, a2, a3, a4, a5);
      return;
    }
    long long v25 = *(_OWORD *)(v12 + 16);
    __n128 v28 = *(__n128 *)v12;
    long long v29 = v25;
    __n128 v26 = *(__n128 *)(v12 + 48);
    long long v30 = *(_OWORD *)(v12 + 32);
    __n128 v31 = v26;
    long long v27 = *(_OWORD *)(v12 + 80);
    long long v32 = *(_OWORD *)(v12 + 64);
    long long v33 = v27;
    long long v34 = *(_OWORD *)(v12 + 96);
    swift_unknownObjectRetain();
    sub_24A486D1C((long long *)&v28, v31.n128_u64, a2, a3, a4, a5);
  }
}

void sub_24A58A294(long long *a1)
{
  int v2 = v1;
  uint64_t v4 = sub_24A5BC780();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  int v11 = (char *)&v36 - v10;
  long long v12 = a1[1];
  v59[0] = *a1;
  v59[1] = v12;
  long long v13 = a1[3];
  v59[2] = a1[2];
  long long v15 = a1[4];
  long long v14 = a1[5];
  v58[0] = v13;
  v58[1] = v15;
  long long v16 = a1[6];
  _OWORD v58[2] = v14;
  v58[3] = v16;
  if (((unint64_t)v14 ^ *(void *)&v58[0]) < 0x800) {
    return;
  }
  uint64_t v17 = *v1;
  if (!*v1)
  {
    sub_24A497498((uint64_t)a1);
LABEL_9:
    sub_24A48D050(v59, (unint64_t *)v58, &v67);
    long long v27 = v68;
    *(_OWORD *)uint64_t v1 = v67;
    *((_OWORD *)v1 + 1) = v27;
    *((_OWORD *)v1 + 2) = v69;
    return;
  }
  uint64_t v18 = v1[4];
  if (!v18)
  {
    sub_24A497498((uint64_t)a1);
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  uint64_t v44 = v9;
  uint64_t v45 = v8;
  uint64_t v19 = v1[1];
  uint64_t v41 = v1[2];
  uint64_t v42 = v19;
  uint64_t v40 = v1[3];
  long long v20 = a1[1];
  v60[0] = *a1;
  v60[1] = v20;
  _OWORD v60[2] = a1[2];
  sub_24A4974C4((uint64_t)v60, (uint64_t)v61);
  sub_24A497498((uint64_t)a1);
  sub_24A497498((uint64_t)v61);
  sub_24A48D050(v59, (unint64_t *)v58, &v53);
  uint64_t v21 = v53;
  uint64_t v43 = v57;
  long long v49 = v53;
  uint64_t v50 = v54;
  uint64_t v51 = v55;
  uint64_t v52 = v56;
  long long v70 = v53;
  uint64_t v38 = v54;
  uint64_t v39 = *((void *)&v53 + 1);
  uint64_t v71 = v54;
  uint64_t v72 = v55;
  uint64_t v36 = v56;
  uint64_t v37 = v55;
  uint64_t v73 = v56;
  unint64_t v22 = *(unsigned __int8 *)(v53 + 18);
  swift_unknownObjectRetain();
  sub_24A4895D4(v22, (uint64_t)&v67);
  unint64_t v23 = sub_24A586D60(v67, *((unint64_t *)&v67 + 1));
  swift_bridgeObjectRelease();
  if ((v23 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_24A496BE8((uint64_t)&v53);
    sub_24A5BC770();
    uint64_t v24 = v2[5];
    *(void *)&long long v67 = v17;
    *((void *)&v67 + 1) = v42;
    *(void *)&long long v68 = v41;
    *((void *)&v68 + 1) = v40;
    *(void *)&long long v69 = v18;
    *((void *)&v69 + 1) = v24;
    LOBYTE(v62) = 0;
    uint64_t v25 = sub_24A48D2C8((v18 << 11) | 0x300, 0, 0, 1uLL, (uint64_t *)v23, (uint64_t)v7);
    if (v21) {
      uint64_t v26 = *(unsigned __int8 *)(v21 + 18);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v28 = v43;
    v48[0] = v43;
    v48[1] = v26;
    v48[2] = 0;
    MEMORY[0x270FA5388](v25);
    *(&v36 - 2) = (uint64_t)v11;
    *(&v36 - 1) = (uint64_t)v7;
    uint64_t v46 = 0;
    char v47 = 1;
    if (v21)
    {
      sub_24A48E828(&v62, (uint64_t)v48, &v49, (uint64_t)&v46, (void (*)(void *__return_ptr))sub_24A54FABC, (uint64_t)(&v36 - 4));
      ++v28;
      uint64_t v30 = *((void *)&v49 + 1);
      uint64_t v29 = v49;
      uint64_t v31 = v50;
      uint64_t v32 = v51;
      uint64_t v33 = v52;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v31 = v38;
      uint64_t v30 = v39;
      uint64_t v33 = v36;
      uint64_t v32 = v37;
    }
    *(void *)&long long v62 = v29;
    *((void *)&v62 + 1) = v30;
    uint64_t v63 = v31;
    uint64_t v64 = v32;
    uint64_t v65 = v33;
    uint64_t v66 = v28;
    swift_unknownObjectRetain();
    sub_24A5B5A34((uint64_t *)&v62);
    sub_24A496BE8((uint64_t)a1);
    uint64_t v34 = v45;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v44 + 8);
    v35(v7, v45);
    v35(v11, v34);
    swift_unknownObjectRelease();
  }
}

unint64_t sub_24A58A614(uint64_t a1, ValueMetadata *a2)
{
  uint64_t Description = (void (**)(char *))a2[-1].Description;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == (ValueMetadata *)MEMORY[0x263F8D290])
  {
    swift_bridgeObjectRetain();
    return BigString.append(contentsOf:)();
  }
  else if (a2 == (ValueMetadata *)MEMORY[0x263F8D960])
  {
    swift_bridgeObjectRetain_n();
    unint64_t v9 = sub_24A5BBEA0();
    _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v9, v10, v11, v12);
    return swift_bridgeObjectRelease();
  }
  else if (a2 == &type metadata for BigString.UnicodeScalarView)
  {
    long long v13 = v4[1];
    v17[0] = *v4;
    v17[1] = v13;
    long long v18 = v4[2];
    __n128 v19 = (__n128)v17[0];
    long long v20 = v13;
    long long v21 = v18;
    sub_24A4974C4((uint64_t)&v19, (uint64_t)v26);
    sub_24A497498((uint64_t)v26);
    return BigString.UnicodeScalarView.append(contentsOf:)(v17);
  }
  else if (a2 == &type metadata for BigSubstring.UnicodeScalarView)
  {
    long long v14 = v4[5];
    long long v23 = v4[4];
    long long v24 = v14;
    long long v25 = v4[6];
    long long v15 = v4[1];
    __n128 v19 = *(__n128 *)v4;
    long long v20 = v15;
    long long v16 = v4[3];
    long long v21 = v4[2];
    long long v22 = v16;
    sub_24A497498((uint64_t)&v19);
    sub_24A58A294((long long *)&v19);
    return sub_24A496BE8((uint64_t)&v19);
  }
  else
  {
    Description[2](v6);
    __n128 v7 = sub_24A59F8DC((uint64_t)v6, (uint64_t)a2, &v19);
    ((void (*)(char *, ValueMetadata *, __n128))Description[1])(v6, a2, v7);
    return _s19CollectionsInternal9BigStringV6append10contentsOfyACn_tF_0((uint64_t)&v19);
  }
}

unint64_t sub_24A58A858()
{
  unint64_t result = qword_26979C2B0;
  if (!qword_26979C2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2B0);
  }
  return result;
}

unint64_t sub_24A58A8B0()
{
  unint64_t result = qword_26979C2B8;
  if (!qword_26979C2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2B8);
  }
  return result;
}

unint64_t sub_24A58A908()
{
  unint64_t result = qword_26979C2C0;
  if (!qword_26979C2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2C0);
  }
  return result;
}

unint64_t sub_24A58A960()
{
  unint64_t result = qword_26979C2C8;
  if (!qword_26979C2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2C8);
  }
  return result;
}

unint64_t sub_24A58A9B8()
{
  unint64_t result = qword_26979C2D0;
  if (!qword_26979C2D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2D0);
  }
  return result;
}

unint64_t sub_24A58AA10()
{
  unint64_t result = qword_26979C2D8;
  if (!qword_26979C2D8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979C2E0);
    sub_24A58AA84();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2D8);
  }
  return result;
}

unint64_t sub_24A58AA84()
{
  unint64_t result = qword_26979C2E8;
  if (!qword_26979C2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2E8);
  }
  return result;
}

unint64_t sub_24A58AADC()
{
  unint64_t result = qword_26979C2F0;
  if (!qword_26979C2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C2F0);
  }
  return result;
}

unint64_t sub_24A58AB34()
{
  unint64_t result = qword_26979C2F8[0];
  if (!qword_26979C2F8[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979C2E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979C2F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.UnicodeScalarView()
{
  return &type metadata for BigString.UnicodeScalarView;
}

ValueMetadata *type metadata accessor for BigString.UnicodeScalarView.Iterator()
{
  return &type metadata for BigString.UnicodeScalarView.Iterator;
}

uint64_t _DequeBufferHeader.capacity.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_DequeBufferHeader.capacity.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _DequeBufferHeader.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _DequeBufferHeader.count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_DequeBufferHeader.count.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _DequeBufferHeader.startSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _DequeBufferHeader.startSlot.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_DequeBufferHeader.startSlot.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _DequeBufferHeader.description.getter()
{
  return 0;
}

uint64_t sub_24A58ADD0()
{
  return _DequeBufferHeader.description.getter();
}

uint64_t getEnumTagSinglePayload for _DequeBufferHeader(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _DequeBufferHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

uint64_t static OrderedSet._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

unint64_t sub_24A58AE38(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 14;
  if (a2 >> 14 == result >> 14) {
    return result;
  }
  unint64_t v8 = result;
  uint64_t v18 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v19 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = v8;
  while (1)
  {
    sub_24A48F8EC(v12, v8, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_24A5BC060();
    }
    else
    {
      if ((a4 & 0x2000000000000000) != 0)
      {
        unint64_t v20 = a3;
        uint64_t v21 = v19;
      }
      else if ((a3 & 0x1000000000000000) == 0)
      {
        sub_24A5BC120();
      }
      unint64_t result = sub_24A5BC130();
    }
    if (v12 & 0xC) != v10 && (v12) {
      break;
    }
    if ((v12 & 0xC) == v10)
    {
      unint64_t result = sub_24A4DFD84(v12, a3, a4);
      unint64_t v12 = result;
      if (v11 <= result >> 16) {
        goto LABEL_39;
      }
    }
    else if (v11 <= v12 >> 16)
    {
      goto LABEL_39;
    }
    if (v12) {
      goto LABEL_24;
    }
    unint64_t v12 = v12 & 0xC | sub_24A4971A8(v12, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_25:
      unint64_t v13 = v12 >> 16;
      if ((a4 & 0x2000000000000000) != 0)
      {
        unint64_t v20 = a3;
        uint64_t v21 = v19;
        int v15 = *((unsigned __int8 *)&v20 + v13);
      }
      else
      {
        uint64_t v14 = v18;
        if ((a3 & 0x1000000000000000) == 0) {
          uint64_t v14 = sub_24A5BC120();
        }
        int v15 = *(unsigned __int8 *)(v14 + v13);
      }
      int v16 = (char)v15;
      unsigned int v17 = __clz(v15 ^ 0xFF) - 24;
      if (v16 >= 0) {
        LOBYTE(v17) = 1;
      }
      unint64_t v12 = ((v13 + v17) << 16) | 5;
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v12 = sub_24A5BB5D0();
LABEL_9:
    sub_24A5BC760();
    if (v4 == v12 >> 14) {
      return swift_bridgeObjectRelease();
    }
  }
  if (v11 > v12 >> 16)
  {
LABEL_24:
    if ((a4 & 0x1000000000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_24A58B060(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 14;
  if (a1 >> 14 >= a2 >> 14) {
    return 0;
  }
  unint64_t v7 = a1;
  unint64_t v30 = a1 >> 14;
  uint64_t v32 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v33 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v35 = v10;
  unint64_t v11 = a1;
  while (1)
  {
    sub_24A48F8EC(v11, v7, a2, a3, a4);
    if ((a4 & 0x1000000000000000) == 0) {
      break;
    }
    sub_24A5BC060();
    unint64_t result = sub_24A5BC760();
    if (result) {
      goto LABEL_38;
    }
LABEL_18:
    if (v11 & 0xC) != v9 && (v11)
    {
      if (v35 <= v11 >> 16)
      {
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        return result;
      }
LABEL_26:
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_8;
    }
    if ((v11 & 0xC) == v9)
    {
      unint64_t result = sub_24A4DFD84(v11, a3, a4);
      unint64_t v11 = result;
    }
    if (v35 <= v11 >> 16) {
      goto LABEL_88;
    }
    if (v11) {
      goto LABEL_26;
    }
    unint64_t v11 = v11 & 0xC | sub_24A4971A8(v11, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_27:
      unint64_t v13 = v11 >> 16;
      if ((a4 & 0x2000000000000000) != 0)
      {
        unint64_t v36 = a3;
        uint64_t v37 = v33;
        int v15 = *((unsigned __int8 *)&v36 + v13);
      }
      else
      {
        uint64_t v14 = v32;
        if ((a3 & 0x1000000000000000) == 0) {
          uint64_t v14 = sub_24A5BC120();
        }
        int v15 = *(unsigned __int8 *)(v14 + v13);
      }
      int v16 = (char)v15;
      unsigned int v17 = __clz(v15 ^ 0xFF) - 24;
      if (v16 >= 0) {
        LOBYTE(v17) = 1;
      }
      unint64_t v11 = ((v13 + v17) << 16) | 5;
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v11 = sub_24A5BB5D0();
LABEL_9:
    if (v4 <= v11 >> 14) {
      return 0;
    }
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    unint64_t v36 = a3;
    uint64_t v37 = v33;
  }
  else if ((a3 & 0x1000000000000000) == 0)
  {
    sub_24A5BC120();
  }
  sub_24A5BC130();
  unint64_t v7 = a1;
  unint64_t result = sub_24A5BC760();
  if ((result & 1) == 0) {
    goto LABEL_18;
  }
LABEL_38:
  unint64_t v38 = v11;
  unint64_t result = sub_24A5BBE00();
  unint64_t v18 = v38;
  if (v4 <= v38 >> 14) {
    return 1;
  }
  uint64_t v29 = 1;
  unint64_t v19 = v30;
LABEL_40:
  unint64_t v20 = v18;
  do
  {
    while (1)
    {
      unint64_t v21 = v20 & 0xC;
      BOOL v22 = (v20 & 1) == 0 || v21 == v9;
      BOOL v23 = v22;
      if (v22)
      {
        unint64_t result = v20;
        if (v21 == v9) {
          unint64_t result = sub_24A4DFD84(v20, a3, a4);
        }
        if (result >> 14 < v19 || result >> 14 >= v4) {
          goto LABEL_89;
        }
        if ((result & 1) == 0) {
          sub_24A4971A8(result, a3, a4);
        }
      }
      else
      {
        if (v20 >> 14 < v19) {
          goto LABEL_90;
        }
        unint64_t result = v20;
        if (v20 >> 14 >= v4) {
          goto LABEL_90;
        }
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        sub_24A5BC060();
        unint64_t result = sub_24A5BC760();
        if (result) {
          goto LABEL_83;
        }
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v36 = a3;
          uint64_t v37 = v33;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          sub_24A5BC120();
        }
        sub_24A5BC130();
        unint64_t v19 = v30;
        unint64_t result = sub_24A5BC760();
        if (result)
        {
LABEL_83:
          unint64_t v38 = v20;
          unint64_t result = sub_24A5BBE00();
          if (__OFADD__(v29++, 1)) {
            goto LABEL_93;
          }
          unint64_t v18 = v38;
          if (v4 <= v38 >> 14) {
            return v29;
          }
          goto LABEL_40;
        }
      }
      if (v23)
      {
        if (v21 == v9)
        {
          unint64_t result = sub_24A4DFD84(v20, a3, a4);
          unint64_t v20 = result;
        }
        if (v35 <= v20 >> 16) {
          goto LABEL_91;
        }
        if ((v20 & 1) == 0)
        {
          unint64_t result = sub_24A4971A8(v20, a3, a4);
          unint64_t v20 = v20 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
        }
      }
      else if (v35 <= v20 >> 16)
      {
        goto LABEL_92;
      }
      if ((a4 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = sub_24A5BB5D0();
      unint64_t v20 = result;
      if (v4 <= result >> 14) {
        return v29;
      }
    }
    unint64_t v24 = v20 >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v36 = a3;
      uint64_t v37 = v33;
      int v25 = *((unsigned __int8 *)&v36 + v24);
    }
    else
    {
      unint64_t result = v32;
      if ((a3 & 0x1000000000000000) == 0) {
        unint64_t result = sub_24A5BC120();
      }
      int v25 = *(unsigned __int8 *)(result + v24);
    }
    int v26 = (char)v25;
    unsigned int v27 = __clz(v25 ^ 0xFF) - 24;
    if (v26 >= 0) {
      LOBYTE(v27) = 1;
    }
    unint64_t v20 = ((v24 + v27) << 16) | 5;
  }
  while (v4 > v20 >> 14);
  return v29;
}

uint64_t Rope.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  uint64_t v8 = Rope.startIndex.getter(a1);
  return Rope.Iterator.init(_:from:)((uint64_t)v6, v8, v9, v10, a2);
}

uint64_t Rope.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t *)(v2 + *(int *)(v9 + 44));
  if (v10[2])
  {
    MEMORY[0x270FA5388](v6);
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    *(&v17 - 4) = v11;
    *(&v17 - 3) = v12;
    *(&v17 - 2) = v2;
    Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_24A58BCEC, (uint64_t)(&v17 - 6), v13, v11, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
    uint64_t v14 = type metadata accessor for Rope();
    Rope.formIndex(after:)(v10, v14);
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v8, v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 0, 1, v11);
  }
  else
  {
    int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    return v16(a2, 1, 1);
  }
}

uint64_t Rope.Iterator.init(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Rope();
  Rope.validate(_:)(a2, a3, a4, v10);
  uint64_t v15 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a5, a1, v10);
  uint64_t v11 = (uint64_t *)(a5 + *(int *)(type metadata accessor for Rope.Iterator() + 36));
  *uint64_t v11 = a2;
  v11[1] = a3;
  void v11[2] = a4;
  Rope.grease(_:)(v11, v10, v12);
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  return v13(a1, v10);
}

uint64_t Rope.makeIterator(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v4, v12);
  return Rope.Iterator.init(_:from:)((uint64_t)v10, a1, a2, a3, a4);
}

uint64_t Rope.Iterator._rope.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Rope();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t Rope.Iterator._index.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t Rope.Iterator._index.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)(v4 + *(int *)(a4 + 36));
  *uint64_t v5 = result;
  v5[1] = a2;
  __n128 v5[2] = a3;
  return result;
}

uint64_t (*Rope.Iterator._index.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t sub_24A58BB14@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v12, a5, WitnessTable);
  unint64_t v18 = *(void *)(a3 + *(int *)(type metadata accessor for Rope.Iterator() + 36) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v21 = _RopePath.subscript.getter(0, v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17 + *(void *)(v13 + 72) * v21, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a4 - 8) + 32))(a6, v15, a4);
}

uint64_t sub_24A58BCEC@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A58BB14(a1, a2, v3[4], v3[2], v3[3], a3);
}

uint64_t type metadata accessor for Rope.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A58BD14()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A58BD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Rope.makeIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
  return v4(v2, a1);
}

uint64_t sub_24A58BD90(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_24A58BDE4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_24A58BE38()
{
  uint64_t result = type metadata accessor for Rope();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A58BED0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  size_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v6 <= 7
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0
    && (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) == 0 || ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE8))
  {
    uint64_t v12 = AssociatedTypeWitness;
    uint64_t v13 = ~v6;
    if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v13))
      {
LABEL_14:
        memcpy(a1, a2, v7);
LABEL_17:
        *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v19 = ((unint64_t)a2 + v8 + 15) & 0xFFFFFFFFFFFFFFF8;
        long long v20 = *(_OWORD *)v19;
        unint64_t v21 = ((unint64_t)a1 + v8 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v21 + 16) = *(void *)(v19 + 16);
        *(_OWORD *)unint64_t v21 = v20;
        return a1;
      }
    }
    else
    {
      uint64_t v14 = *a2;
      if ((unint64_t)*a2 >= 0xFFFFFFFF) {
        LODWORD(v14) = -1;
      }
      if (v14 != -1) {
        goto LABEL_14;
      }
    }
    *a1 = *a2;
    uint64_t v15 = (char *)a2 + v6;
    uint64_t v16 = ((unint64_t)a1 + v6 + 8) & v13;
    uint64_t v17 = (unint64_t)(v15 + 8) & v13;
    unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v18(v16, v17, v12);
    goto LABEL_17;
  }
  uint64_t v11 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  swift_retain();
  return a1;
}

uint64_t *sub_24A58C0BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = (v6 + 8) & ~v6;
  uint64_t v9 = *(void *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v10 = *a2;
    if ((unint64_t)*a2 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    size_t v11 = v8 + v9;
    if (v10 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *a1 = *a2;
    uint64_t v12 = (char *)a2 + v6;
    uint64_t v13 = ((unint64_t)a1 + v6 + 8) & v7;
    uint64_t v14 = (unint64_t)(v12 + 8) & v7;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v15(v13, v14, AssociatedTypeWitness);
    goto LABEL_8;
  }
  size_t v11 = v8 + v9;
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v7)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v17 = (unint64_t)a1 + v16 + 7;
  unint64_t v18 = ((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v18;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = v19;
  return a1;
}

void *sub_24A58C260(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  size_t v9 = ((v7 + 8) & ~v7) + *(void *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v18 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    int v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v18)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v11)
  {
    *a1 = *a2;
    uint64_t v13 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v13(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v15 = (void *)(((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  void v15[2] = v16[2];
  return a1;
}

uint64_t *sub_24A58C4CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = (v6 + 8) & ~v6;
  uint64_t v9 = *(void *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v10 = *a2;
    if ((unint64_t)*a2 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    size_t v11 = v8 + v9;
    if (v10 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v6 + 8) & v7, ((unint64_t)a2 + v6 + 8) & v7, AssociatedTypeWitness);
    goto LABEL_8;
  }
  size_t v11 = v8 + v9;
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v7)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v13 = (unint64_t)a1 + v12 + 7;
  unint64_t v14 = ((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)v14;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = v15;
  return a1;
}

void *sub_24A58C664(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  size_t v9 = ((v7 + 8) & ~v7) + *(void *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v17 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    int v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v17)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v11)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v14 = (void *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = (void *)(((unint64_t)a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v14 = *v15;
  v14[1] = v15[1];
  _OWORD v14[2] = v15[2];
  return a1;
}

uint64_t sub_24A58C8BC(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  if (v8 - 1 < a2)
  {
    unint64_t v10 = ((((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 24;
    uint64_t v11 = v10 & 0xFFFFFFF8;
    unsigned int v12 = a2 - v8 + 2;
    if ((v10 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v10);
        if (!v15) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v10);
        if (v15) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24A58CA68);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v10);
        if (!v15) {
          break;
        }
LABEL_21:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return (v11 | v17) + v8;
      default:
        break;
    }
  }
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v19 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
  }
  else
  {
    uint64_t v18 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    unsigned int v19 = v18 + 1;
  }
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void sub_24A58CA7C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v10 = v9 - 1;
  size_t v11 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  unint64_t v12 = ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v9 - 1 >= a3)
  {
    int v15 = 0;
    BOOL v16 = a2 >= v10;
    int v17 = a2 - v10;
    if (v17 == 0 || !v16)
    {
LABEL_16:
      switch(v15)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (a2 + 1 <= v9)
            {
              if (a2 != -1)
              {
                if ((v7 & 0x80000000) != 0)
                {
                  unint64_t v24 = *(void (**)(unint64_t, void))(v6 + 56);
                  v24((unint64_t)&a1[v8 + 8] & ~v8, a2 + 1);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v23 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v23 = a2;
                  }
                  *(void *)a1 = v23;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v20 = ~(-1 << (8 * v11));
              }
              else {
                int v20 = -1;
              }
              if (v11)
              {
                int v21 = v20 & (a2 - v9);
                if (v11 <= 3) {
                  int v22 = v11;
                }
                else {
                  int v22 = 4;
                }
                bzero(a1, v11);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)a1 = v21;
                    break;
                  case 3:
                    *(_WORD *)a1 = v21;
                    a1[2] = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v21;
                    break;
                  default:
                    *a1 = v21;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = a3 - v9 + 2;
    if (((((v11 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFE8) {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    BOOL v16 = a2 >= v10;
    int v17 = a2 - v10;
    if (v17 == 0 || !v16) {
      goto LABEL_16;
    }
  }
  if (((((v11 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v18 = v17;
  }
  else {
    int v18 = 1;
  }
  if (((((v11 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    unsigned int v19 = a2 - v9;
    bzero(a1, ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v12] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v18;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x24A58CD30);
    case 4:
      *(_DWORD *)&a1[v12] = v18;
      break;
    default:
      return;
  }
}

uint64_t static OrderedDictionary._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

uint64_t BitSet.debugDescription.getter(uint64_t a1)
{
  return sub_24A58CD8C(0x746553746942, 0xE600000000000000, a1);
}

uint64_t sub_24A58CD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  sub_24A5BB6F0();
  uint64_t v4 = (unint64_t *)(a3 + 32);
  if (*(void *)(a3 + 16)) {
    unint64_t v5 = *v4;
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  char v8 = 1;
  uint64_t v9 = MEMORY[0x263F8D6C8];
  while (v5)
  {
    if (v7 << 6 < 0) {
      goto LABEL_22;
    }
    unint64_t v11 = __rbit64(v5);
    v5 &= v5 - 1;
    unint64_t v12 = (v7 << 6) | __clz(v11);
    if ((v8 & 1) == 0) {
LABEL_19:
    }
      sub_24A5BB6F0();
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_24A5BDAE0;
    *(void *)(v10 + 56) = v9;
    *(void *)(v10 + 32) = v12;
    sub_24A5BC030();
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 0;
  }
  uint64_t v13 = v7 + 1;
  if (__OFADD__(v7, 1)) {
    goto LABEL_23;
  }
  uint64_t v14 = *(void *)(a3 + 16);
  if (v13 >= v14)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    return a1;
  }
  unint64_t v15 = v4[v13];
  if (v15)
  {
    ++v7;
LABEL_17:
    if (v7 << 6 < 0) {
      goto LABEL_24;
    }
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v7 << 6);
    if ((v8 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_5;
  }
  while (1)
  {
    uint64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v14) {
      goto LABEL_20;
    }
    unint64_t v15 = v4[v7];
    ++v13;
    if (v15) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_24A58CF6C()
{
  return sub_24A58CD8C(0x746553746942, 0xE600000000000000, *v0);
}

uint64_t TreeSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = TreeSet.count.getter(a4, a5);
  if (v16 >= TreeSet.count.getter(a1, a2)) {
    return 0;
  }
  return TreeSet.isSubset(of:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t TreeSet.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = TreeSet.count.getter(a4, a5);
  if (v17 >= TreeDictionary.Keys.count.getter(a1, a2, a3, a7, a8, a9)) {
    return 0;
  }
  return TreeSet.isSubset<A>(of:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t TreeSet.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v75 = a4;
  uint64_t v86 = a2;
  uint64_t v87 = a3;
  uint64_t v81 = a1;
  uint64_t v74 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v77 = (char *)&v67 - v11;
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v72 = *(void *)(v12 - 8);
  uint64_t v73 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  long long v76 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v67 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  int v20 = (char *)&v67 - v19;
  uint64_t v82 = *(void *)(a5 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  int v26 = (char *)&v67 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v71 = (char *)&v67 - v28;
  uint64_t v29 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet() == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v81, a6);
    swift_dynamicCast();
    char v37 = TreeSet.isStrictSubset(of:)(v98, *((uint64_t *)&v98 + 1), v99, v86, v87, v75, a5, a7);
    swift_release();
    return v37 & 1;
  }
  uint64_t v67 = v29;
  long long v68 = v31;
  uint64_t v70 = a6;
  TreeSet.makeIterator()(v86, &v98);
  uint64_t v32 = type metadata accessor for TreeSet.Iterator();
  TreeSet.Iterator.next()(v32, (uint64_t)v20);
  uint64_t v33 = v82;
  long long v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
  uint64_t v85 = v82 + 48;
  if (v84(v20, 1, a5) == 1)
  {
    uint64_t v34 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v20, v73);
    MEMORY[0x270FA5388](v34);
    uint64_t v35 = v70;
    *(&v67 - 4) = a5;
    *(&v67 - 3) = v35;
    uint64_t v36 = v74;
    *(&v67 - 2) = a7;
    *(&v67 - 1) = v36;
    char v37 = sub_24A5BB900();
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    long long v92 = v100;
    long long v93 = v101;
    long long v95 = v103;
    long long v96 = v104;
    long long v94 = v102;
    long long v90 = v98;
    long long v91 = v99;
    sub_24A4A2BC4((uint64_t)&v90);
    return v37 & 1;
  }
  uint64_t v83 = a7;
  unint64_t v38 = v71;
  uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  uint64_t v80 = v33 + 32;
  v79(v71, v20, a5);
  uint64_t v39 = v33;
  uint64_t v40 = v81;
  uint64_t v41 = v70;
  char v42 = sub_24A5BB870();
  if (v42 == 2)
  {
    uint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v82 = v39 + 8;
    v43(v38, a5);
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    long long v92 = v100;
    long long v93 = v101;
    long long v95 = v103;
    long long v96 = v104;
    long long v94 = v102;
    long long v90 = v98;
    long long v91 = v99;
    sub_24A4A2BC4((uint64_t)&v90);
    if (qword_26979ACF0 != -1) {
      swift_once();
    }
    uint64_t v44 = MEMORY[0x263F8EE60] + 8;
    uint64_t v88 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x263F8EE60] + 8, v83);
    uint64_t v89 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v68, v40, v41);
    swift_retain();
    sub_24A5BB840();
    swift_getAssociatedConformanceWitness();
    uint64_t v46 = v76;
    sub_24A5BBEE0();
    if (v84(v46, 1, a5) == 1)
    {
LABEL_9:
      (*(void (**)(char *, uint64_t))(v69 + 8))(v77, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v73);
      swift_release();
      char v37 = 0;
      return v37 & 1;
    }
    char v49 = 0;
    char v50 = 0;
    while (1)
    {
      v79(v23, v46, a5);
      uint64_t v51 = v83;
      uint64_t v52 = sub_24A5B85E4();
      if (!_HashNode.containsKey(_:_:_:)(0, (uint64_t)v23, v52, v86, v87, a5, v44, v51))
      {
        v43(v23, a5);
        if (v49) {
          goto LABEL_33;
        }
        char v49 = 0;
        char v50 = 1;
        goto LABEL_14;
      }
      if (v49) {
        break;
      }
      long long v53 = (void *)type metadata accessor for _HashNode();
      if ((_HashNode.insert(_:_:_:)(0, (uint64_t)v23, v54, v52, v53) & 1) == 0)
      {
        v43(v23, a5);
        char v49 = 0;
        goto LABEL_14;
      }
      uint64_t v55 = v89;
      uint64_t v56 = TreeSet.count.getter(v86, v87);
      uint64_t v46 = v76;
      if (v55 == v56)
      {
        if (v50)
        {
          v43(v23, a5);
LABEL_33:
          (*(void (**)(char *, uint64_t))(v69 + 8))(v77, AssociatedTypeWitness);
          swift_release();
          char v37 = 1;
          return v37 & 1;
        }
        uint64_t v57 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x263F8EE60] + 8, v83);
        uint64_t v59 = v58;
        swift_retain();
        v43(v23, a5);
        swift_release();
        char v50 = 0;
        uint64_t v88 = v57;
        uint64_t v89 = v59;
        uint64_t v46 = v76;
        char v49 = 1;
      }
      else
      {
        v43(v23, a5);
        char v49 = 0;
      }
LABEL_15:
      sub_24A5BBEE0();
      if (v84(v46, 1, a5) == 1) {
        goto LABEL_9;
      }
    }
    v43(v23, a5);
    char v49 = 1;
LABEL_14:
    uint64_t v46 = v76;
    goto LABEL_15;
  }
  char v47 = (void (**)(char *, uint64_t))(v39 + 8);
  if (v42)
  {
    uint64_t v60 = v74;
    do
    {
      TreeSet.Iterator.next()(v32, (uint64_t)v17);
      if (v84(v17, 1, a5) == 1)
      {
        uint64_t v63 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v17, v73);
        MEMORY[0x270FA5388](v63);
        *(&v67 - 8) = a5;
        *(&v67 - 7) = v41;
        *(&v67 - 6) = v83;
        *(&v67 - 5) = v60;
        uint64_t v64 = v87;
        *(&v67 - 4) = v86;
        *(&v67 - 3) = v64;
        *(&v67 - 2) = v75;
        char v65 = sub_24A5BB890();
        (*v47)(v71, a5);
        v97[0] = v105[0];
        *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
        long long v92 = v100;
        long long v93 = v101;
        long long v95 = v103;
        long long v96 = v104;
        long long v94 = v102;
        long long v90 = v98;
        long long v91 = v99;
        sub_24A4A2BC4((uint64_t)&v90);
        char v37 = v65 ^ 1;
        return v37 & 1;
      }
      v79(v26, v17, a5);
      char v61 = sub_24A5BB920();
      long long v62 = *v47;
      (*v47)(v26, a5);
    }
    while ((v61 & 1) != 0);
    v62(v71, a5);
    long long v48 = v103;
    long long v96 = v104;
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    long long v92 = v100;
    long long v93 = v101;
  }
  else
  {
    (*v47)(v71, a5);
    long long v96 = v104;
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    long long v92 = v100;
    long long v93 = v101;
    long long v48 = v103;
  }
  long long v94 = v102;
  long long v95 = v48;
  long long v90 = v98;
  long long v91 = v99;
  sub_24A4A2BC4((uint64_t)&v90);
  char v37 = 0;
  return v37 & 1;
}

uint64_t static Deque<A>.== infix(_:_:)()
{
  return sub_24A5BB910() & 1;
}

uint64_t sub_24A58DCA4()
{
  return static Deque<A>.== infix(_:_:)();
}

uint64_t _RopeStorageHeader.childCount.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t static Rope._Storage.create(height:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return sub_24A5BC0F0();
}

unint64_t _RopeStorageHeader.childCount.setter(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (!(result >> 16))
  {
    *unint64_t v1 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _RopeStorageHeader._childCount.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*_RopeStorageHeader._childCount.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _RopeStorageHeader.height.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t _RopeStorageHeader.init(height:)(unsigned __int8 a1)
{
  return a1 << 16;
}

unint64_t *(*_RopeStorageHeader.childCount.modify(void *a1))(unint64_t *result, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  return sub_24A549628;
}

void sub_24A58DE3C(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = v2;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _RopeStorageHeader(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for _RopeStorageHeader(uint64_t result, int a2, int a3)
{
  if ((a3 + 0x1FFFFFF) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (!a3) {
    int v3 = 0;
  }
  if (a2)
  {
    *(_WORD *)uint64_t result = a2 - 1;
    *(unsigned char *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else if (v3)
  {
    if (v3 == 2) {
      *(_WORD *)(result + 3) = 0;
    }
    else {
      *(unsigned char *)(result + 3) = 0;
    }
  }
  return result;
}

Swift::Void __swiftcall OrderedSet.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  sub_24A5BC210();
  sub_24A5BC1F0();
  if (keepingCapacity)
  {
    if (*v1)
    {
      OrderedSet._ensureUnique()();
      if (*v1)
      {
        _HashTable.UnsafeHandle.clear()();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    swift_release();
    *uint64_t v1 = 0;
  }
}

void OrderedSet.remove(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OrderedSet._bucket(for:)(a1, *v2, v2[1], *(void *)(a2 + 16));
  OrderedSet._removeExistingMember(at:in:)(a1, v5, a2);
}

void OrderedSet.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = *v3;
  if (!*v3) {
    goto LABEL_14;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  if (v9 < 1) {
    return;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  swift_retain();
  uint64_t v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  BOOL v12 = __OFSUB__(v11, v9);
  uint64_t v13 = v11 - v9;
  if (v12) {
    goto LABEL_17;
  }
  swift_retain();
  swift_retain();
  uint64_t v14 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  swift_release();
  if (v14 >= 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v14 + 1;
  }
  if (v13 <= v15 >> 1 || (uint64_t v16 = *(void *)(a3 + 24), v13 < OrderedSet._minimumCapacity.getter(v8)))
  {
    sub_24A5BC210();
    swift_getWitnessTable();
    sub_24A5BBC50();
    OrderedSet._regenerateHashTable()();
    return;
  }
  OrderedSet._ensureUnique()();
  uint64_t v17 = *v3;
  if (!*v4) {
    goto LABEL_18;
  }
  swift_retain();
  sub_24A58E324((void *)(v17 + 16), v17 + 32, (uint64_t)v4, a1, a2, v10, v16);
  swift_release();
LABEL_14:
  sub_24A5BC210();
  swift_getWitnessTable();
  sub_24A5BBC50();
}

Swift::Void __swiftcall OrderedSet.removeLast(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v2 = v1;
  if (_s19CollectionsInternal4HeapV5countSivg_0() < a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = _s19CollectionsInternal4HeapV5countSivg_0();
  BOOL v5 = __OFSUB__(v4, a1);
  uint64_t v6 = v4 - a1;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v7 < v6)
  {
LABEL_11:
    __break(1u);
    return;
  }
  OrderedSet.removeSubrange(_:)(v6, v7, v2);
}

Swift::Void __swiftcall OrderedSet.removeFirst(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  if (_s19CollectionsInternal4HeapV5countSivg_0() < a1)
  {
LABEL_7:
    __break(1u);
    return;
  }
  OrderedSet.removeSubrange(_:)(0, a1, v2);
}

void sub_24A58E324(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a7;
  uint64_t v56 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v45 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v12;
  uint64_t v57 = v13;
  uint64_t v14 = sub_24A5BC240();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v20 = v19;
  uint64_t v21 = sub_24A5BBF90();
  uint64_t v44 = v16;
  uint64_t v55 = v18;
  uint64_t v47 = a6;
  if (v21 == sub_24A5BBFD0())
  {
    swift_unknownObjectRelease();
    uint64_t v22 = v58;
LABEL_9:
    v59[0] = v46;
    v59[1] = a5;
    uint64_t v60 = *(void *)(v57 + 8);
    uint64_t v40 = sub_24A5BC210();
    uint64_t WitnessTable = swift_getWitnessTable();
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)((uint64_t)v59, (uint64_t)&v60, v9, v56, v40, WitnessTable, v22);
  }
  else
  {
    uint64_t v43 = a5;
    uint64_t v52 = v10 + 16;
    uint64_t v53 = v20 >> 1;
    long long v48 = (void (**)(uint64_t, uint64_t))(v10 + 8);
    unint64_t v49 = v20;
    uint64_t v54 = v21;
    uint64_t v23 = v21;
    uint64_t v25 = v44;
    uint64_t v24 = (uint64_t)v45;
    uint64_t v26 = v14;
    uint64_t v27 = v47;
    uint64_t v28 = v55;
    uint64_t v50 = v26;
    uint64_t v51 = v10;
    while (1)
    {
      sub_24A5BBFB0();
      if (v54 < v28 || v53 <= v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v24, v25 + *(void *)(v10 + 72) * v23, v27);
      uint64_t v29 = v57;
      v59[0] = *(void *)(v57 + 8);
      uint64_t v30 = sub_24A5BC210();
      uint64_t v31 = swift_getWitnessTable();
      uint64_t v32 = v9;
      uint64_t v33 = v9;
      uint64_t v34 = v56;
      uint64_t v35 = v58;
      uint64_t v36 = _HashTable.UnsafeHandle._find<A>(_:in:)(v24, (uint64_t)v59, v32, v56, v30, v31, v58);
      if (v37) {
        goto LABEL_11;
      }
      ++v23;
      MEMORY[0x270FA5388](v36);
      *(&v42 - 4) = v27;
      *(&v42 - 3) = v35;
      *(&v42 - 2) = v29;
      _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v38, (uint64_t (*)(unint64_t, void))sub_24A58EDEC, (uint64_t)(&v42 - 6), v33, v34);
      (*v48)(v24, v27);
      uint64_t v28 = v55;
      uint64_t v39 = sub_24A5BBFD0();
      uint64_t v9 = v33;
      uint64_t v10 = v51;
      if (v23 == v39)
      {
        swift_unknownObjectRelease();
        uint64_t v22 = v58;
        a5 = v43;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
}

void OrderedSet.removeSubrange<A>(_:)(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  sub_24A5BB930();
  OrderedSet.removeSubrange(_:)(v3, v4, a2);
}

void OrderedSet.removeLast()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  uint64_t v19 = v2[1];
  sub_24A5BC210();
  swift_getWitnessTable();
  if (sub_24A5BBBC0())
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (!v9)
  {
    swift_getWitnessTable();
    swift_getWitnessTable();
    sub_24A5BBC70();
    return;
  }
  uint64_t v17 = a2;
  swift_retain();
  uint64_t v10 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  uint64_t v11 = v10 - 1;
  if (__OFSUB__(v10, 1)) {
    goto LABEL_11;
  }
  uint64_t v12 = v9;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = OrderedSet._minimumCapacity.getter(v12);
  swift_getWitnessTable();
  swift_getWitnessTable();
  if (v11 < v14)
  {
    sub_24A5BBC70();
    OrderedSet._regenerateHashTable()();
    return;
  }
  sub_24A5BBC70();
  OrderedSet._ensureUnique()();
  uint64_t v15 = *v3;
  uint64_t v16 = v17;
  if (!*v3) {
    goto LABEL_12;
  }
  swift_retain();
  sub_24A58E9C4((void *)(v15 + 16), v15 + 32, (uint64_t)v8, (uint64_t)v3, v6, v13);
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v16, v8, v6);
}

unint64_t sub_24A58E9C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = sub_24A5BB370();
  uint64_t v12 = 1 << *a1;
  BOOL v13 = __OFSUB__(v12, 1);
  uint64_t v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = v14 & result;
    uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & result, a1, a2);
    uint64_t v28 = a1;
    uint64_t v29 = a2;
    uint64_t v30 = v15;
    uint64_t v31 = v16;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    char v34 = 0;
    swift_retain();
    uint64_t v19 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v20 = swift_release();
    if (v16)
    {
      uint64_t v21 = -1 << *a1;
      unint64_t v22 = (v21 ^ ~v16) + ((uint64_t)a1[1] >> 6);
      uint64_t v23 = v22 >= ~v21 ? ~v21 : 0;
      if (v22 - v23 != v19)
      {
        do
        {
          _HashTable.BucketIterator.advance()();
          if (!v31) {
            break;
          }
          uint64_t v24 = -1 << *v28;
          unint64_t v25 = (v24 ^ ~v31) + ((uint64_t)v28[1] >> 6);
          uint64_t v26 = v25 >= ~v24 ? ~v24 : 0;
        }
        while (v25 - v26 != v19);
        uint64_t v15 = v30;
      }
    }
    MEMORY[0x270FA5388](v20);
    void v27[2] = a5;
    uint64_t v27[3] = a6;
    unsigned char v27[4] = a4;
    return _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v15, (uint64_t (*)(unint64_t, void))sub_24A58EDCC, (uint64_t)v27, a1, a2);
  }
  return result;
}

uint64_t sub_24A58EB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A5BC260();
  uint64_t v8 = sub_24A5BB370();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a4);
  return v8;
}

void OrderedSet.removeFirst()(uint64_t a1)
{
  if (sub_24A5BBBC0()) {
    __break(1u);
  }
  else {
    OrderedSet.remove(at:)(0, a1);
  }
}

void OrderedSet.removeAll(where:)()
{
}

uint64_t sub_24A58EDCC(uint64_t a1, uint64_t a2)
{
  return sub_24A58EB60(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 16));
}

unint64_t sub_24A58EDF0(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a5 >> 10 < result >> 10)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (result >> 10 >= a5 >> 10) {
    return result;
  }
  unint64_t v13 = sub_24A496820(result, a2, a3, a4, 0);
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  uint64_t v19 = v18;
  unint64_t result = sub_24A496820(a5, a6, a7, a8, 1);
  if (v19 == 1) {
    goto LABEL_43;
  }
  uint64_t v63 = v15;
  unint64_t v64 = v17;
  uint64_t v65 = v19;
  if (v21 == 1)
  {
LABEL_44:
    __break(1u);
    return result;
  }
  int v22 = result;
  if (v17 == v20)
  {
    if (v15 == *(void *)(a9 + 40))
    {
      if (v19)
      {
        unint64_t result = swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *(_OWORD *)(a9 + 8);
        long long v30 = *(_OWORD *)(a9 + 24);
        *(void *)uint64_t v66 = *(void *)a9;
        *(_OWORD *)&v66[8] = v29;
        *(_OWORD *)&v66[24] = v30;
        swift_unknownObjectRetain();
        sub_24A4895D4(v17, (uint64_t)v72);
        unint64_t result = sub_24A496BE8(a9);
      }
      if (((16 * v22) & 0x4000 | ((unint64_t)v22 << 16)) >= ((16 * (int)v13) & 0x4000 | ((unint64_t)v13 << 16))) {
        goto LABEL_34;
      }
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  long long v23 = *(_OWORD *)(a9 + 16);
  *(_OWORD *)uint64_t v66 = *(_OWORD *)a9;
  *(_OWORD *)&v66[16] = v23;
  *(_OWORD *)&v66[32] = *(_OWORD *)(a9 + 32);
  if (v15 != *(void *)&v66[40])
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  long long v24 = *(_OWORD *)v66;
  uint64_t v61 = *(void *)&v66[32];
  unint64_t v60 = v20;
  long long v25 = *(_OWORD *)&v66[16];
  uint64_t v59 = v15;
  if (v19)
  {
    uint64_t v26 = v19 + 24 * ((v17 >> ((4 * *(unsigned char *)(v19 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v28 = *(void *)(v26 + 24);
    unint64_t v27 = *(void *)(v26 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v72[0] = *(_OWORD *)v66;
    v72[1] = *(_OWORD *)&v66[16];
    uint64_t v73 = *(void *)&v66[32];
    swift_unknownObjectRetain();
    sub_24A4895D4(v17, (uint64_t)v70);
    sub_24A496BE8(a9);
    unint64_t v27 = *((void *)&v70[0] + 1);
    uint64_t v28 = *(void *)&v70[0];
  }
  unint64_t v31 = sub_24A494C00((16 * (int)v13) & 0x4000 | ((unint64_t)v13 << 16) | (v13 >> 8) & 3 | 4, v28, v27);
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  sub_24A55B850(v31, v33, v35, v37);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  unint64_t result = sub_24A498214();
  if (v17 >= result) {
    goto LABEL_40;
  }
  if (v19
    && (char v38 = (4 * *(unsigned char *)(v19 + 18) + 8) & 0x3C,
        unint64_t v39 = ((v17 >> v38) & 0xF) + 1,
        v39 < *(unsigned __int16 *)(v19 + 16)))
  {
    unint64_t v40 = (v39 << v38) | ((-15 << v38) - 1) & v17;
    unint64_t result = sub_24A496BE8(a9);
    uint64_t v41 = v59;
    uint64_t v42 = *(void *)&v66[8];
  }
  else
  {
    uint64_t v42 = *(void *)&v66[8];
    v70[0] = *(_OWORD *)v66;
    v70[1] = *(_OWORD *)&v66[16];
    uint64_t v71 = *(void *)&v66[32];
    swift_unknownObjectRetain();
    char v43 = sub_24A498278((uint64_t)&v63);
    sub_24A496BE8(a9);
    uint64_t v41 = v59;
    if (v43)
    {
      unint64_t result = sub_24A496BE8(a9);
      unint64_t v40 = v64;
    }
    else
    {
      unint64_t v40 = sub_24A498214();
      unint64_t result = sub_24A496BE8(a9);
      uint64_t v63 = v59;
      uint64_t v65 = 0;
    }
  }
  if (v40 < v60)
  {
    if (v63 == v41)
    {
      uint64_t v44 = v65;
      while (1)
      {
        if (v44)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v67 = v24;
          long long v68 = v25;
          uint64_t v69 = v61;
          swift_unknownObjectRetain();
          sub_24A4895D4(v40, (uint64_t)&v62);
          sub_24A496BE8(a9);
        }
        uint64_t v45 = sub_24A5BB830();
        uint64_t v47 = v46;
        uint64_t v49 = v48;
        uint64_t v51 = v50;
        swift_bridgeObjectRelease();
        sub_24A55B850(v45, v47, v49, v51);
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_41;
  }
  if (v63 != v41)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v65)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    *(void *)&long long v67 = v24;
    *((void *)&v67 + 1) = v42;
    long long v68 = v25;
    uint64_t v69 = v61;
    swift_unknownObjectRetain();
    sub_24A4895D4(v40, (uint64_t)&v62);
    sub_24A496BE8(a9);
  }
LABEL_34:
  uint64_t v52 = sub_24A5BB830();
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();
  sub_24A55B850(v52, v54, v56, v58);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A58F35C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_24A58FD64(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_24A4897D8, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A48720C);
}

unint64_t sub_24A58F3A8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)v5;
  uint64_t v8 = *(void *)(v5 + 32);
  if (*(void *)v5) {
    BOOL v9 = 2 * (v8 & 0x1FFFFFFFFFFFFFuLL) > a1 >> 10;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    unint64_t v4 = v5;
    long long v20 = *(_OWORD *)(v5 + 8);
    uint64_t v10 = *(void *)(v5 + 24);
    uint64_t v11 = *(void *)(v5 + 40);
    unint64_t result = sub_24A496820(a1, a2, a3, a4, 0);
    if (v15 != 1)
    {
      if (v13 == v11)
      {
        unint64_t v16 = result;
        unint64_t v17 = v14;
        if (v15)
        {
          uint64_t v18 = v15 + 24 * ((v14 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v5 = *(void *)(v18 + 24);
          unint64_t v4 = *(void *)(v18 + 32);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v21[3] = v7;
          long long v22 = v20;
          uint64_t v23 = v10;
          uint64_t v24 = v8;
          swift_unknownObjectRetain();
          sub_24A4895D4(v17, (uint64_t)v21);
          sub_24A496BE8(v5);
          uint64_t v5 = v21[0];
          unint64_t v4 = v21[1];
        }
        unint64_t v6 = (16 * (int)v16) & 0x4000 | ((unint64_t)v16 << 16) | (v16 >> 8) & 3 | 4;
        if ((v4 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0) {
          goto LABEL_13;
        }
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      unint64_t v6 = sub_24A4DFD84(v6, v5, v4);
LABEL_13:
      unint64_t v19 = HIBYTE(v4) & 0xF;
      if ((v4 & 0x2000000000000000) == 0) {
        unint64_t v19 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (v6 >> 16 >= v19)
      {
        __break(1u);
LABEL_29:
        uint64_t v5 = sub_24A5BB790();
        swift_bridgeObjectRelease();
        return v5;
      }
      if ((v4 & 0x1000000000000000) != 0) {
        goto LABEL_29;
      }
      if ((v6 & 1) == 0) {
        sub_24A4971A8(v6, v5, v4);
      }
      uint64_t v5 = sub_24A5BC040();
      unint64_t result = swift_bridgeObjectRelease();
      if ((v6 & 0xC000) == 0x4000) {
        break;
      }
      if (!WORD1(v5)) {
        return v5;
      }
      unint64_t result = (unsigned __int16)((v5 + 67043328) >> 10) + 55296;
      if ((result & 0x10000) == 0) {
        return result;
      }
      __break(1u);
    }
    if (v5 >= 0x10000) {
      return v5 & 0x3FF | 0xFFFFDC00;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A58F5A0(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if ((result & 0x400) == 0)
  {
    unint64_t result = sub_24A4965FC(result, a2, a3, a4);
    if (v5 == result >> 10) {
      return result;
    }
    return sub_24A48720C(result, v6, v7, v8, 1uLL);
  }
  if (*v4) {
    BOOL v9 = 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) > v5;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    __break(1u);
    return result;
  }
  unint64_t result = sub_24A496820(result, a2, a3, a4, 0);
  if (v5 != result >> 10) {
    return sub_24A48720C(result, v6, v7, v8, 1uLL);
  }
  return result;
}

uint64_t sub_24A58F608@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v9 = v5;
  unint64_t v14 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(a1, a2, a3, a4);
  uint64_t result = *(void *)v5;
  uint64_t v59 = *(void *)(v5 + 32);
  if (*(void *)v5) {
    BOOL v16 = *(void *)(v5 + 32) <= (uint64_t)(v14 >> 11);
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    uint64_t v20 = v7;
    uint64_t v23 = MEMORY[0x24C5C6A60](15, v11, v7, v5);
    goto LABEL_15;
  }
  if (v13 == 1)
  {
LABEL_88:
    __break(1u);
    return result;
  }
  uint64_t v6 = v11;
  unint64_t v17 = v12;
  uint64_t v57 = *(void *)(v5 + 16);
  unint64_t v58 = *(void *)(v5 + 8);
  uint64_t v56 = *(void *)(v5 + 24);
  uint64_t v18 = *(void *)(v5 + 40);
  uint64_t v67 = v11;
  unint64_t v68 = v12;
  uint64_t v69 = v13;
  if (v11 != v18) {
    goto LABEL_77;
  }
  uint64_t v55 = result;
  uint64_t v60 = v13;
  unint64_t v61 = v12;
  if (v13)
  {
    unint64_t v19 = v13 + 24 * ((v12 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v7 = *(void *)(v19 + 24);
    unint64_t v5 = *(void *)(v19 + 32);
    uint64_t v20 = *(unsigned __int8 *)(v19 + 40);
    unsigned int v21 = *(unsigned __int8 *)(v19 + 44);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v75 = result;
    unint64_t v76 = v58;
    uint64_t v77 = v57;
    uint64_t v78 = v56;
    uint64_t v79 = v59;
    swift_unknownObjectRetain();
    sub_24A4895D4(v17, (uint64_t)&v70);
    sub_24A496BE8(v5);
    unint64_t v7 = v70;
    unint64_t v5 = v71;
    uint64_t v20 = v72;
    unsigned int v21 = BYTE4(v72);
  }
  uint64_t v11 = v21;
  uint64_t v51 = a5;
  uint64_t v52 = HIBYTE(v5) & 0xF;
  unint64_t v53 = v14 >> 11;
  LODWORD(v54) = v20;
  if ((v5 & 0x1000000000000000) != 0) {
    goto LABEL_78;
  }
  unint64_t v22 = v7 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    unint64_t v22 = HIBYTE(v5) & 0xF;
  }
  if (v22 < v21)
  {
    __break(1u);
LABEL_80:
    uint64_t result = sub_24A5BB710();
    unint64_t v7 = (unint64_t)a5 + result;
    if (!__OFADD__(a5, result)) {
      goto LABEL_20;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v20 = v7;
  uint64_t v23 = ((unint64_t)v21 << 16) | 4;
LABEL_15:
  a5 = (uint64_t *)v14;
  swift_bridgeObjectRetain();
  sub_24A494C00(v23, v20, v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_24A5BBEB0();
  unint64_t v14 = v24;
  swift_bridgeObjectRelease();
  if ((v14 & 0x1000000000000000) != 0) {
    goto LABEL_80;
  }
  if ((v14 & 0x2000000000000000) != 0) {
    uint64_t result = HIBYTE(v14) & 0xF;
  }
  else {
    uint64_t result = v8 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = (unint64_t)a5 + result;
  if (__OFADD__(a5, result)) {
    goto LABEL_82;
  }
LABEL_20:
  if ((uint64_t)v7 < v54)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      unint64_t v43 = MEMORY[0x24C5C6A60](15, v7, v20, v5);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v7 = v43 >> 16;
      goto LABEL_56;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if ((v7 & 0x8000000000000000) == 0)
    {
      unint64_t v25 = v20 & 0xFFFFFFFFFFFFLL;
      if ((v5 & 0x2000000000000000) != 0) {
        unint64_t v25 = v52;
      }
      if (v25 < v7)
      {
        __break(1u);
        goto LABEL_27;
      }
LABEL_56:
      unint64_t v44 = v7 | ((v53 - (void)a5 + v7) << 11);
      uint64_t v46 = v60;
      unint64_t v45 = v61;
      goto LABEL_71;
    }
    goto LABEL_84;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  unint64_t v26 = v53 - (void)a5 + v54;
  uint64_t v65 = v8;
  unint64_t v66 = v14;
  uint64_t v27 = v55;
  unint64_t v53 = v9;
  uint64_t v54 = v6;
  while (1)
  {
    LODWORD(v14) = *(unsigned __int8 *)(v27 + 18);
    unint64_t v5 = *(unsigned __int16 *)(v27 + 16);
    swift_unknownObjectRetain_n();
    sub_24A496BE8(v9);
    if (v61 >= (((-15 << ((4 * v14 + 8) & 0x3C)) - 1) & v14 | (v5 << ((4 * v14 + 8) & 0x3C))))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v60)
    {
      char v28 = (4 * *(unsigned char *)(v60 + 18) + 8) & 0x3C;
      unint64_t v29 = ((v61 >> v28) & 0xF) + 1;
      if (v29 < *(unsigned __int16 *)(v60 + 16))
      {
        unint64_t v30 = (v29 << v28) | ((-15 << v28) - 1) & v61;
        unint64_t v68 = v30;
        sub_24A496BE8(v9);
        goto LABEL_40;
      }
    }
    int v31 = *(unsigned __int8 *)(v27 + 18);
    char v32 = (4 * v31 + 8) & 0x3C;
    v62[0] = (v61 >> v32) & 0xF;
    if (v31)
    {
      sub_24A497498(v9);
      char v33 = sub_24A538E54(v55 + 24, v62, (uint64_t)&v67, v27, v31);
      sub_24A496BE8(v9);
      if (v33)
      {
        sub_24A496BE8(v9);
        unint64_t v30 = v68;
        goto LABEL_40;
      }
      int v35 = *(unsigned __int8 *)(v27 + 18);
    }
    else
    {
      unint64_t v34 = ((v61 >> v32) & 0xF) + 1;
      if (v34 < *(unsigned __int16 *)(v27 + 16))
      {
        unint64_t v30 = (v34 << v32) | ((-15 << v32) - 1) & v61;
        unint64_t v68 = v30;
        sub_24A496BE8(v9);
        uint64_t v69 = v27;
        goto LABEL_40;
      }
      int v35 = 0;
    }
    uint64_t v36 = *(unsigned __int16 *)(v27 + 16);
    char v37 = *(unsigned char *)(v27 + 18);
    swift_unknownObjectRetain();
    sub_24A496BE8(v9);
    sub_24A496BE8(v9);
    unint64_t v30 = ((-15 << ((4 * v37 + 8) & 0x3C)) - 1) & v35 | (unint64_t)(v36 << ((4 * v37 + 8) & 0x3C));
    uint64_t v67 = v6;
    unint64_t v68 = v30;
    uint64_t v69 = 0;
LABEL_40:
    unint64_t v70 = v27;
    unint64_t v71 = v58;
    uint64_t v72 = v57;
    uint64_t v73 = v56;
    uint64_t v74 = v59;
    LODWORD(v14) = *(unsigned __int8 *)(v27 + 18);
    unint64_t v5 = *(unsigned __int16 *)(v27 + 16);
    swift_unknownObjectRetain_n();
    sub_24A496BE8(v9);
    uint64_t result = sub_24A496BE8(v9);
    if (v30 >= (((-15 << ((4 * v14 + 8) & 0x3C)) - 1) & v14 | (v5 << ((4 * v14 + 8) & 0x3C))))
    {
      unint64_t v7 = 0;
      uint64_t v8 = v65;
      unint64_t v14 = v66;
      if ((v66 & 0x2000000000000000) != 0) {
        goto LABEL_68;
      }
LABEL_64:
      if ((v8 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_85;
      }
      if ((v8 & 0x1000000000000000) == 0)
      {
        uint64_t v8 = sub_24A49279C();
        unint64_t v49 = v48;
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v14 = v49;
      }
      goto LABEL_69;
    }
    if (v67 != v6) {
      goto LABEL_73;
    }
    uint64_t v60 = v69;
    if (v69)
    {
      unint64_t v38 = v69 + 24 * ((v30 >> ((4 * *(unsigned char *)(v69 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v39 = *(void *)(v38 + 24);
      unint64_t v14 = *(void *)(v38 + 32);
      unint64_t v9 = *(unsigned __int8 *)(v38 + 40);
      unint64_t v7 = *(unsigned __int8 *)(v38 + 44);
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v5 = (unint64_t)&v70;
      sub_24A4895D4(v30, (uint64_t)v62);
      sub_24A496BE8(v9);
      uint64_t v39 = v62[0];
      unint64_t v14 = v62[1];
      unint64_t v9 = v63;
      unint64_t v7 = v64;
    }
    unint64_t v61 = v30;
    uint64_t v52 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x1000000000000000) != 0)
    {
      unint64_t v41 = v26;
      MEMORY[0x24C5C6A60](15, v7, v39, v14);
    }
    else
    {
      unint64_t v40 = v39 & 0xFFFFFFFFFFFFLL;
      if ((v14 & 0x2000000000000000) != 0) {
        unint64_t v40 = HIBYTE(v14) & 0xF;
      }
      if (v40 < v7) {
        goto LABEL_74;
      }
      unint64_t v41 = v26;
    }
    swift_bridgeObjectRetain();
    sub_24A5BB830();
    swift_bridgeObjectRelease();
    unint64_t v5 = (unint64_t)&v65;
    sub_24A5BB6C0();
    swift_bridgeObjectRelease();
    if (v7 < v9) {
      break;
    }
    swift_bridgeObjectRelease();
    BOOL v42 = __OFADD__(v41, v9);
    unint64_t v26 = v41 + v9;
    unint64_t v9 = v53;
    uint64_t v6 = v54;
    uint64_t v27 = v55;
    if (v42) {
      goto LABEL_75;
    }
  }
  unint64_t v26 = v41;
  if ((v14 & 0x1000000000000000) != 0)
  {
    unint64_t v50 = MEMORY[0x24C5C6A60](15, v7, v39, v14);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v7 = v50 >> 16;
    uint64_t v8 = v65;
    unint64_t v14 = v66;
    if ((v66 & 0x2000000000000000) != 0) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v47 = v39 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0) {
    unint64_t v47 = HIBYTE(v14) & 0xF;
  }
  if (v47 < v7) {
    goto LABEL_87;
  }
  uint64_t v8 = v65;
  unint64_t v14 = v66;
  if ((v66 & 0x2000000000000000) == 0) {
    goto LABEL_64;
  }
LABEL_68:
  if ((v14 & 0xF00000000000000) == 0) {
    goto LABEL_86;
  }
LABEL_69:
  if (__OFADD__(v26, v7)) {
    goto LABEL_83;
  }
  unint64_t v45 = v68;
  uint64_t v46 = v69;
  uint64_t v6 = v67;
  unint64_t v44 = v7 | ((v26 + v7) << 11);
LABEL_71:
  *uint64_t v51 = v8;
  v51[1] = v14;
  v51[2] = v44 | 0x300;
  v51[3] = v6;
  v51[4] = v45;
  v51[5] = v46;
  return result;
}

uint64_t sub_24A58FD18(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_24A58FD64(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_24A487BEC, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A495EFC);
}

uint64_t sub_24A58FD64(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a11)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || a10(a1, a2, a3, a4, a6, a7, a8, a9) <= a5) {
      return a11(a1, a2, a3, a4, a5);
    }
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && a10(a1, a2, a3, a4, a6, a7, a8, a9) < a5) {
    return 0;
  }
  return a11(a1, a2, a3, a4, a5);
}

unint64_t sub_24A58FE5C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || (uint64_t)sub_24A4A7F58(a1, a2, a3, a4, a6, a7, a8, a9) <= a5) {
      return sub_24A4A8740(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    }
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && (uint64_t)sub_24A4A7F58(a1, a2, a3, a4, a6, a7, a8, a9) < a5) {
    return 0;
  }
  return sub_24A4A8740(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t sub_24A58FF4C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 32);
  if (*(void *)v4) {
    BOOL v7 = 2 * (v6 & 0x1FFFFFFFFFFFFFuLL) > a1 >> 10;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    __break(1u);
    goto LABEL_18;
  }
  long long v21 = *(_OWORD *)(v4 + 8);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v9 = *(void *)(v4 + 40);
  unint64_t result = sub_24A496820(a1, a2, a3, a4, 0);
  if (v13 != 1)
  {
    if (v11 == v9)
    {
      unint64_t v14 = result;
      unint64_t v15 = v12;
      if (v13)
      {
        uint64_t v16 = v13 + 24 * ((v12 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v18 = *(void *)(v16 + 24);
        unint64_t v17 = *(void *)(v16 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v24 = v5;
        long long v25 = v21;
        uint64_t v26 = v8;
        uint64_t v27 = v6;
        swift_unknownObjectRetain();
        sub_24A4895D4(v15, (uint64_t)&v22);
        sub_24A496BE8(v4);
        unint64_t v18 = v22;
        unint64_t v17 = v23;
      }
      sub_24A48E614((16 * (int)v14) & 0x4000 | ((unint64_t)v14 << 16) | (v14 >> 8) & 3 | 4, v18, v17);
      if ((v17 & 0x1000000000000000) == 0)
      {
        if ((v17 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = v18;
          uint64_t v23 = v17 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v18 & 0x1000000000000000) == 0)
        {
          sub_24A5BC120();
        }
        uint64_t v19 = sub_24A5BC130();
        goto LABEL_17;
      }
LABEL_19:
      uint64_t v19 = sub_24A5BC060();
LABEL_17:
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      return v20;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t static BigString._minimumCapacity.getter()
{
  return 0x3DFFFFFFFFF84;
}

uint64_t static BigString._maximumCapacity.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _HashNode.compactMapValues<A>(_:_:)@<X0>(unsigned int a1@<W0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  unint64_t v18 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  return sub_24A5901A4(v18, v19, a1, a4, a5, a2, a3, a6, a9, a7, a8, a10);
}

uint64_t sub_24A5901A4@<X0>(unsigned int *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = a8;
  uint64_t v143 = a6;
  uint64_t v144 = a7;
  uint64_t v139 = a1;
  uint64_t v140 = a5;
  uint64_t v138 = a4;
  unsigned int v137 = a3;
  uint64_t v142 = a2;
  uint64_t v105 = a9;
  uint64_t v126 = *(char **)(a8 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v124 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v127 = *(char **)(a10 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v133 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v121 = (char *)&v105 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v134 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v112 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v111 = (char *)&v105 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v120 = (char *)&v105 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v119 = (char *)&v105 - v25;
  uint64_t v123 = sub_24A5BBD20();
  uint64_t v107 = *(void (***)(char *, uint64_t))(v123 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v123);
  uint64_t v132 = (char **)((char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  unint64_t v118 = (char *)&v105 - v29;
  uint64_t v108 = *(void (***)(char *, uint64_t))(a11 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v128 = (char *)&v105 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  Swift::Int v122 = (char *)&v105 - v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v117 = (char *)&v105 - v34;
  uint64_t v35 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v35);
  char v37 = (char *)&v105 - v36;
  uint64_t v136 = type metadata accessor for _HashNode.Builder();
  uint64_t v106 = *(void *)(v136 - 8);
  uint64_t v38 = MEMORY[0x270FA5388](v136);
  uint64_t v129 = (char *)&v105 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v116 = (char *)&v105 - v41;
  MEMORY[0x270FA5388](v40);
  unint64_t v43 = (char *)&v105 - v42;
  swift_storeEnumTagMultiPayload();
  uint64_t v135 = v43;
  uint64_t v145 = a11;
  _HashNode.Builder.init(_:_:)(v137, (uint64_t)v37, v43);
  BOOL v44 = _HashNode.isCollisionNode.getter(v138, v140, v12, a10, a12);
  uint64_t v140 = a10;
  uint64_t v138 = TupleTypeMetadata2;
  if (v44)
  {
    uint64_t v116 = (char *)_HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t result = MEMORY[0x24C5C7090]();
    if (result != v46)
    {
      if (v46 >= result)
      {
        uint64_t v47 = TupleTypeMetadata2;
        uint64_t v131 = (void (**)(char *, uint64_t, uint64_t))(v127 + 16);
        uint64_t v132 = (char **)(v126 + 16);
        uint64_t v129 = v127 + 32;
        uint64_t v130 = (void (***)(char *, char *, uint64_t))(v126 + 32);
        uint64_t v128 = (char *)(v134 + 8);
        uint64_t v115 = (void (**)(char *, uint64_t))(v127 + 8);
        uint64_t v114 = (unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 6);
        long long v110 = (void (**)(char *, char *, uint64_t))(v108 + 4);
        long long v109 = (void (**)(char *, char *, uint64_t))(v108 + 2);
        ++v108;
        ++v107;
        uint64_t v141 = v12;
        uint64_t v113 = (unsigned int *)v46;
        while (result < v46)
        {
          uint64_t v48 = *(int *)(v47 + 48);
          uint64_t v49 = v47;
          unint64_t v50 = v119;
          uint64_t v51 = &v119[v48];
          uint64_t v52 = *(void *)(v134 + 72);
          uint64_t v53 = v12;
          uint64_t v139 = (unsigned int *)result;
          uint64_t v54 = &v116[v52 * result];
          uint64_t v55 = &v54[v48];
          uint64_t v56 = *v132;
          uint64_t v126 = v54;
          uint64_t v133 = v56;
          ((void (*)(char *))v56)(v119);
          uint64_t v57 = *v131;
          unint64_t v127 = v55;
          uint64_t v58 = v140;
          v57(v51, (uint64_t)v55, v140);
          uint64_t v59 = v120;
          uint64_t v60 = &v120[*(int *)(v49 + 48)];
          uint64_t v125 = *v130;
          ((void (*)(char *, char *, uint64_t))v125)(v120, v50, v53);
          unint64_t v61 = *(void (**)(char *, char *, uint64_t))v129;
          (*(void (**)(char *, char *, uint64_t))v129)(v60, v51, v58);
          uint64_t v62 = v121;
          v57(v121, (uint64_t)v60, v58);
          unsigned __int8 v63 = *(void (**)(char *, uint64_t))(v134 + 8);
          v63(v59, v49);
          unsigned __int8 v64 = v118;
          uint64_t v65 = v146;
          v143(v62);
          uint64_t v146 = v65;
          if (v65)
          {
            (*v115)(v62, v58);
            return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v135, v136);
          }
          (*v115)(v62, v58);
          uint64_t v66 = v145;
          if ((*v114)(v64, 1, v145) == 1)
          {
            (*v107)(v64, v123);
            uint64_t v12 = v141;
            uint64_t v47 = v138;
          }
          else
          {
            (*v110)(v117, v64, v66);
            uint64_t v47 = v138;
            uint64_t v67 = v111;
            unint64_t v68 = &v111[*(int *)(v138 + 48)];
            uint64_t v12 = v141;
            ((void (*)(char *, char *, uint64_t))v133)(v111, v126, v141);
            v57(v68, (uint64_t)v127, v58);
            uint64_t v69 = v112;
            unint64_t v127 = &v112[*(int *)(v47 + 48)];
            ((void (*)(char *, char *, uint64_t))v125)(v112, v67, v12);
            v61(v127, v68, v58);
            uint64_t v70 = (uint64_t)v124;
            ((void (*)(char *, char *, uint64_t))v133)(v124, v69, v12);
            v63(v69, v47);
            uint64_t v71 = (uint64_t)v122;
            uint64_t v72 = v117;
            uint64_t v73 = v145;
            (*v109)(v122, v117, v145);
            _HashNode.Builder.addNewCollision(_:_:_:)((char *)v137, v70, v71, *v142, v136);
            (*v108)(v72, v73);
          }
          uint64_t v46 = (uint64_t)v113;
          uint64_t result = (uint64_t)v139 + 1;
          if (v113 == (unsigned int *)((char *)v139 + 1)) {
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v106 + 32))(v105, v135, v136);
          }
        }
        __break(1u);
      }
      __break(1u);
      return result;
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v106 + 32))(v105, v135, v136);
  }
  uint64_t v141 = v12;
  uint64_t v74 = (uint64_t)v139;
  unsigned int v75 = *v139;
  uint64_t v134 = a12;
  if (v75)
  {
    unsigned int v76 = 0;
    uint64_t v131 = (void (**)(char *, uint64_t, uint64_t))(v127 + 16);
    uint64_t v77 = (void (**)(char *, uint64_t))(v127 + 8);
    uint64_t v130 = (void (***)(char *, char *, uint64_t))(v108 + 6);
    v126 += 16;
    unint64_t v127 = (char *)(v108 + 4);
    uint64_t v125 = (void (**)(char *, char *, uint64_t))(v108 + 2);
    uint64_t v121 = (char *)(v108 + 1);
    uint64_t v120 = (char *)(v107 + 1);
    uint64_t v78 = v140;
    uint64_t v79 = v138;
    uint64_t v81 = v132;
    uint64_t v80 = v133;
    uint64_t v82 = v128;
    while (1)
    {
      uint64_t v83 = _HashNode.UnsafeHandle.itemPtr(at:)(v76, v74, (uint64_t)v142);
      (*v131)(v80, v83 + *(int *)(v79 + 48), v78);
      uint64_t v84 = v146;
      v143(v80);
      uint64_t v146 = v84;
      if (v84) {
        break;
      }
      (*v77)(v80, v78);
      uint64_t v85 = v145;
      if (((unsigned int (*)(char **, uint64_t, uint64_t))*v130)(v81, 1, v145) == 1)
      {
        (*(void (**)(char **, uint64_t))v120)(v81, v123);
      }
      else
      {
        (*(void (**)(char *, char **, uint64_t))v127)(v82, v81, v85);
        uint64_t v86 = (uint64_t)v124;
        (*(void (**)(char *, uint64_t, uint64_t))v126)(v124, v83, v141);
        uint64_t v87 = (uint64_t)v122;
        (*v125)(v122, v82, v85);
        _HashNode.Builder.addNewItem(_:_:at:)(v137, v86, v87, __clz(__rbit32(v75)), v136);
        uint64_t v78 = v140;
        (*(void (**)(char *, uint64_t))v121)(v82, v85);
      }
      uint64_t v80 = v133;
      ++v76;
      v75 &= v75 - 1;
      uint64_t v79 = v138;
      uint64_t v74 = (uint64_t)v139;
      if (!v75) {
        goto LABEL_18;
      }
    }
    (*v77)(v80, v78);
    return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v135, v136);
  }
  else
  {
LABEL_18:
    unsigned int v88 = *(_DWORD *)(v74 + 4);
    if (!v88) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v106 + 32))(v105, v135, v136);
    }
    uint64_t v89 = 0;
    LODWORD(v138) = v137 + 5;
    long long v90 = (void (**)(char *, char *, uint64_t))(v106 + 16);
    long long v91 = (void (**)(char *, uint64_t))(v106 + 8);
    uint64_t v92 = v141;
    long long v93 = v116;
    while (1)
    {
      uint64_t v94 = v140;
      uint64_t v95 = v134;
      long long v96 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v89, v74, v142, v92, v140, v134);
      uint64_t v97 = *v96;
      uint64_t v98 = v96[1];
      swift_retain();
      uint64_t v99 = v98;
      uint64_t v100 = v146;
      _HashNode.compactMapValues<A>(_:_:)(v138, v143, v144, v97, v99, v92, v94, v145, v95);
      uint64_t v146 = v100;
      if (v100) {
        break;
      }
      swift_release();
      uint64_t v89 = (v89 + 1);
      int v101 = (v88 - 1) & v88;
      int v102 = __clz(__rbit32(v88));
      uint64_t v103 = (uint64_t)v129;
      uint64_t v104 = v136;
      (*v90)(v129, v93, v136);
      _HashNode.Builder.addNewChildBranch(_:_:at:)(v137, v103, v102, v104);
      (*v91)(v93, v104);
      unsigned int v88 = v101;
      uint64_t v74 = (uint64_t)v139;
      if (!v101) {
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v106 + 32))(v105, v135, v136);
      }
    }
    (*v91)(v135, v136);
    return swift_release();
  }
}

void *sub_24A590F1C(void *result, uint64_t a2)
{
  if (a2)
  {
    if (*result) {
      goto LABEL_3;
    }
    if (a2 != 1)
    {
      if (!result[1])
      {
        uint64_t v2 = a2 - 2;
        if (a2 == 2) {
          return result;
        }
        uint64_t v3 = result + 2;
        uint64_t v4 = 128;
        while (!*v3++)
        {
          v4 += 64;
          if (!--v2)
          {
            if (((a2 << 6) & 0x8000000000000000) == 0) {
              return result;
            }
            __break(1u);
            break;
          }
        }
        if (v4 < 0)
        {
          __break(1u);
          goto LABEL_16;
        }
      }
LABEL_3:
      if (((a2 << 6) & 0x8000000000000000) == 0) {
        return result;
      }
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

uint64_t BitSet.Counted._bits.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*BitSet.Counted._bits.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t BitSet.Counted._count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t BitSet.Counted._count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*BitSet.Counted._count.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t BitSet.Counted.init()()
{
  return MEMORY[0x263F8EE78];
}

int8x8_t *BitSet.Counted.init(_:)(int8x8_t *result)
{
  int8x8_t v1 = result[2];
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = result + 4;
    uint64_t v4 = 8 * *(void *)&v1;
    while (1)
    {
      uint8x8_t v5 = (uint8x8_t)vcnt_s8(*v3);
      v5.i16[0] = vaddlv_u8(v5);
      BOOL v6 = __OFADD__(v2, v5.u32[0]);
      v2 += v5.u32[0];
      if (v6) {
        break;
      }
      ++v3;
      v4 -= 8;
      if (!v4) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.init<A>(words:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A591284(a1, a2, a3, (uint64_t (*)(void))sub_24A5940D8);
}

int64_t BitSet.Counted.init<A>(bitPattern:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  BOOL v7 = (char *)&v16 - v6;
  sub_24A5BBF40();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int64_t v14 = sub_24A5940D8((uint64_t)v7, AssociatedTypeWitness, *(void *)(*(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8) + 8), v9, v10, v11, v12, v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v14;
}

int64_t BitSet.Counted.init(_:)(int64_t a1)
{
  int64_t result = _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(a1);
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (int8x8_t *)(result + 32);
    uint64_t v5 = 8 * v2;
    while (1)
    {
      uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      BOOL v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7) {
        break;
      }
      ++v4;
      v5 -= 8;
      if (!v5) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A591284(a1, a2, a3, (uint64_t (*)(void))sub_24A594138);
}

uint64_t sub_24A591284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

unint64_t BitSet.Counted.init(_:)(unint64_t result, unint64_t a2)
{
  if (((a2 | result) & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  int64_t result = (unint64_t)_s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(result, a2);
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (int8x8_t *)(result + 32);
    uint64_t v5 = 8 * v2;
    while (1)
    {
      uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      BOOL v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7) {
        break;
      }
      ++v4;
      v5 -= 8;
      if (!v5) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

int8x8_t ***(*BitSet.Counted.uncounted.modify(void *a1))(int8x8_t ***result, char a2)
{
  *a1 = v1;
  return sub_24A59138C;
}

int8x8_t ***sub_24A59138C(int8x8_t ***result, char a2)
{
  uint64_t v2 = **result;
  uint64_t v3 = v2 + 4;
  int8x8_t v4 = v2[2];
  uint64_t v5 = 0;
  if ((a2 & 1) == 0)
  {
    if (v4)
    {
      uint64_t v9 = 8 * *(void *)&v4;
      do
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8(*v3);
        v10.i16[0] = vaddlv_u8(v10);
        BOOL v8 = __OFADD__(v5, v10.u32[0]);
        uint64_t v5 = (int8x8_t *)((char *)v5 + v10.u32[0]);
        if (v8) {
          goto LABEL_13;
        }
        ++v3;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_11:
    (*result)[1] = v5;
    return result;
  }
  if (!*(void *)&v4) {
    goto LABEL_11;
  }
  uint64_t v6 = 8 * *(void *)&v4;
  while (1)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(*v3);
    v7.i16[0] = vaddlv_u8(v7);
    BOOL v8 = __OFADD__(v5, v7.u32[0]);
    uint64_t v5 = (int8x8_t *)((char *)v5 + v7.u32[0]);
    if (v8) {
      break;
    }
    ++v3;
    v6 -= 8;
    if (!v6) {
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t BitSet.Counted.uncounted.setter(int8x8_t *a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  int8x8_t v4 = a1[2];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 4;
    uint64_t v7 = 8 * *(void *)&v4;
    while (1)
    {
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(*v6);
      v8.i16[0] = vaddlv_u8(v8);
      BOOL v9 = __OFADD__(v5, v8.u32[0]);
      uint64_t v5 = (int8x8_t *)((char *)v5 + v8.u32[0]);
      if (v9) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v5 = 0;
LABEL_7:
    v1[1] = v5;
  }
  return result;
}

uint64_t BitSet.counted.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return swift_bridgeObjectRetain();
  }
  uint64_t v2 = 0;
  uint64_t v3 = (int8x8_t *)(result + 32);
  uint64_t v4 = 8 * v1;
  while (1)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(*v3);
    v5.i16[0] = vaddlv_u8(v5);
    BOOL v6 = __OFADD__(v2, v5.u32[0]);
    v2 += v5.u32[0];
    if (v6) {
      break;
    }
    ++v3;
    v4 -= 8;
    if (!v4) {
      return swift_bridgeObjectRetain();
    }
  }
  __break(1u);
  return result;
}

uint64_t (*BitSet.counted.modify(uint64_t (*result)(uint64_t a1)))(uint64_t a1)
{
  *((void *)result + 2) = v1;
  uint64_t v2 = *v1;
  int8x8_t v3 = (*v1)[2];
  if (v3)
  {
    uint64_t v4 = 0;
    uint8x8_t v5 = v2 + 4;
    uint64_t v6 = 8 * *(void *)&v3;
    while (1)
    {
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(*v5);
      v7.i16[0] = vaddlv_u8(v7);
      BOOL v8 = __OFADD__(v4, v7.u32[0]);
      v4 += v7.u32[0];
      if (v8) {
        break;
      }
      ++v5;
      v6 -= 8;
      if (!v6) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
LABEL_7:
    *(void *)uint64_t result = v2;
    *((void *)result + 1) = v4;
    *uint64_t v1 = (int8x8_t *)sub_24A56D190(MEMORY[0x263F8EE78]);
    return sub_24A59158C;
  }
  return result;
}

uint64_t sub_24A59158C(uint64_t a1)
{
  **(void **)(a1 + 16) = *(void *)a1;
  return swift_bridgeObjectRelease();
}

uint64_t BitSet.counted.setter(uint64_t a1)
{
  sub_24A56D190(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t BitSet.Counted.underestimatedCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t BitSet.Counted.makeIterator()()
{
  return swift_bridgeObjectRetain();
}

Swift::Bool_optional __swiftcall BitSet.Counted._customContainsEquatableElement(_:)(Swift::Int a1)
{
  if (a1 < 0 || (unint64_t)a1 >> 6 >= *(void *)(v1 + 16)) {
    LOBYTE(v2) = 0;
  }
  else {
    return (Swift::Bool_optional)((*(void *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1);
  }
  return (Swift::Bool_optional)v2;
}

Swift::Bool_optional sub_24A59165C(Swift::Int *a1)
{
  return BitSet.Counted._customContainsEquatableElement(_:)(*a1);
}

uint64_t sub_24A591668()
{
  uint64_t v1 = sub_24A595DB8(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_24A5916A0(void *a1, unint64_t *a2, uint64_t a3)
{
  return sub_24A585DF4(a1, a2, a3, *v3);
}

BOOL BitSet.Counted.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void *BitSet.Counted.startIndex.getter(void *result)
{
  uint64_t v1 = result[2];
  if (!v1) {
    return (void *)(v1 << 6);
  }
  unint64_t v2 = result[4];
  if (v2)
  {
    uint64_t v3 = 0;
    return (void *)(__clz(__rbit64(v2)) | v3);
  }
  if (v1 == 1) {
    return (void *)(v1 << 6);
  }
  unint64_t v2 = result[5];
  if (v2)
  {
    uint64_t v3 = 64;
    return (void *)(__clz(__rbit64(v2)) | v3);
  }
  uint64_t v4 = v1 - 2;
  if (v1 == 2) {
    return (void *)(v1 << 6);
  }
  uint8x8_t v5 = result + 6;
  uint64_t v3 = 128;
  while (1)
  {
    unint64_t v6 = *v5++;
    unint64_t v2 = v6;
    if (v6) {
      break;
    }
    v3 += 64;
    if (!--v4)
    {
      uint64_t result = (void *)(v1 << 6);
      if (((v1 << 6) & 0x8000000000000000) == 0) {
        return result;
      }
      goto LABEL_17;
    }
  }
  if ((v3 & 0x8000000000000000) == 0) {
    return (void *)(__clz(__rbit64(v2)) | v3);
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t BitSet.Counted.endIndex.getter(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16) << 6;
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A59177C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(after:));
}

uint64_t BitSet.Counted.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A59177C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(before:));
}

uint64_t sub_24A59177C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  return a4(a1, a2 + 32, *(void *)(a2 + 16));
}

uint64_t BitSet.Counted.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A5917C0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.distance(from:to:));
}

uint64_t BitSet.Counted.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A5917C0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.index(_:offsetBy:));
}

uint64_t sub_24A5917C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void))
{
  return a5(a1, a2, a3 + 32, *(void *)(a3 + 16));
}

Swift::UInt BitSet.Counted.index(_:offsetBy:limitedBy:)(Swift::UInt a1, uint64_t a2, Swift::UInt a3, uint64_t a4)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4 + 32, *(void *)(a4 + 16));
  if (v5) {
    return 0;
  }
  return result;
}

unint64_t BitSet.Counted._customIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0) {
    return 0;
  }
  if (result >> 6 >= *(void *)(a2 + 16)) {
    return 0;
  }
  if ((*(void *)(a2 + 8 * (result >> 6) + 32) & (1 << result)) == 0) {
    return 0;
  }
  return result;
}

unint64_t BitSet.Counted._customLastIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0) {
    return 0;
  }
  if (result >> 6 >= *(void *)(a2 + 16)) {
    return 0;
  }
  if ((*(void *)(a2 + 8 * (result >> 6) + 32) & (1 << result)) == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_24A5918B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A591A74(a1, (uint64_t (*)(void, uint64_t, void))_UnsafeBitSet.index(before:), a2);
}

uint64_t sub_24A5918C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A591AC8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(before:));
}

void *sub_24A5918E0@<X0>(void *a1@<X8>)
{
  Swift::UInt result = BitSet.Counted.startIndex.getter(*v1);
  *a1 = result;
  return result;
}

void *sub_24A59190C@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint8x8_t v7 = *(void **)v2;
  unint64_t v6 = *(void *)(v2 + 8);
  Swift::UInt result = BitSet.Counted.startIndex.getter(v7);
  unint64_t v9 = v7[2] << 6;
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < (unint64_t)result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 < (unint64_t)result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v9 < v5)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = (unint64_t)v7;
  a2[3] = v6;
  return (void *)swift_bridgeObjectRetain();
}

uint64_t sub_24A59199C@<X0>(void *a1@<X8>)
{
  *a1 = sub_24A593FD0(*v1);
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return swift_bridgeObjectRetain();
}

BOOL sub_24A5919DC()
{
  return *(void *)(v0 + 8) == 0;
}

uint64_t sub_24A5919EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A591A1C(a1, (uint64_t (*)(void, void))BitSet.Counted._customIndexOfEquatableElement(_:), a2);
}

uint64_t sub_24A591A04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A591A1C(a1, (uint64_t (*)(void, void))BitSet.Counted._customLastIndexOfEquatableElement(_:), a2);
}

uint64_t sub_24A591A1C@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1, *v3);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 9) = v7 & 1;
  return result;
}

uint64_t sub_24A591A5C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A591A74(a1, (uint64_t (*)(void, uint64_t, void))_UnsafeBitSet.index(after:), a2);
}

uint64_t sub_24A591A74@<X0>(void *a1@<X0>, uint64_t (*a2)(void, uint64_t, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, *(void *)v3 + 32, *(void *)(*(void *)v3 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_24A591AB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A591AC8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(after:));
}

uint64_t sub_24A591AC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  uint64_t result = a4(*a1, *(void *)v4 + 32, *(void *)(*(void *)v4 + 16));
  *a1 = result;
  return result;
}

uint64_t BitSet.Counted.encode(to:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A5BC710();
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_24A5BC4C0();
      if (v2) {
        break;
      }
    }
    swift_bridgeObjectRelease();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t BitSet.Counted.init(from:)(uint64_t a1)
{
  return sub_24A594244(a1);
}

uint64_t sub_24A591BF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_24A594244(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_24A591C1C(void *a1)
{
  return BitSet.Counted.encode(to:)(a1, *v1);
}

uint64_t BitSet.Counted.debugDescription.getter(uint64_t a1)
{
  return sub_24A58CD8C(0x432E746553746942, 0xEE006465746E756FLL, a1);
}

uint64_t sub_24A591C64()
{
  return sub_24A58CD8C(0x432E746553746942, 0xEE006465746E756FLL, *v0);
}

uint64_t BitSet.Counted.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = sub_24A5BC6B0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = a1;
  v13[1] = a1;
  uint64_t v9 = *MEMORY[0x263F8E7F8];
  uint64_t v10 = sub_24A5BC6A0();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  sub_24A49F958();
  swift_bridgeObjectRetain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A591E80()
{
  uint64_t v1 = sub_24A5BC6B0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *v0;
  v12[1] = v12[0];
  uint64_t v8 = *MEMORY[0x263F8E7F8];
  uint64_t v9 = sub_24A5BC6A0();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  sub_24A49F958();
  swift_bridgeObjectRetain_n();
  return sub_24A5BC6C0();
}

BOOL static BitSet.Counted.== infix(_:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a2 == a4 && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a1, a3);
}

uint64_t BitSet.Counted.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_24A5BC630();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8;
      uint64_t result = sub_24A5BC630();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t BitSet.Counted.hashValue.getter(uint64_t a1)
{
  sub_24A5BC610();
  uint64_t v2 = *(void *)(a1 + 16);
  sub_24A5BC630();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_24A5BC630();
      --v2;
    }
    while (v2);
  }
  return sub_24A5BC690();
}

uint64_t sub_24A59214C()
{
  return BitSet.Counted.hashValue.getter(*v0);
}

uint64_t BitSet.Counted.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = sub_24A56D190(a1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3) {
    return v1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (int8x8_t *)(v1 + 32);
  uint64_t v6 = 8 * v3;
  while (1)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(*v5);
    v7.i16[0] = vaddlv_u8(v7);
    BOOL v8 = __OFADD__(v4, v7.u32[0]);
    v4 += v7.u32[0];
    if (v8) {
      break;
    }
    ++v5;
    v6 -= 8;
    if (!v6) {
      return v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5921CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_24A56D190(a1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    uint8x8_t v7 = (int8x8_t *)(v3 + 32);
    uint64_t v8 = 8 * v5;
    while (1)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(*v7);
      v9.i16[0] = vaddlv_u8(v9);
      BOOL v10 = __OFADD__(v6, v9.u32[0]);
      v6 += v9.u32[0];
      if (v10) {
        break;
      }
      ++v7;
      v8 -= 8;
      if (!v8) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v6 = 0;
LABEL_7:
    *a2 = v3;
    a2[1] = v6;
  }
  return result;
}

char *BitSet.Counted.init(reservingCapacity:)(uint64_t a1)
{
  return sub_24A499EB0(0, ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6, 0, MEMORY[0x263F8EE78]);
}

Swift::Void __swiftcall BitSet.Counted.reserveCapacity(_:)(Swift::Int a1)
{
  unint64_t v2 = ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6;
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v2 > *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v3 + 2) <= v2) {
      int64_t v5 = v2;
    }
    else {
      int64_t v5 = *((void *)v3 + 2);
    }
    uint64_t v3 = sub_24A499EB0(isUniquelyReferenced_nonNull_native, v5, 0, v3);
  }
  *uint64_t v1 = v3;
}

uint64_t BitSet.Counted.subscript.getter(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0 || a1 >> 6 >= *(void *)(a2 + 16)) {
    return 0;
  }
  else {
    return (*(void *)(a2 + 8 * (a1 >> 6) + 32) >> a1) & 1;
  }
}

Swift::Bool __swiftcall BitSet.Counted.contains(_:)(Swift::Int a1)
{
  if (a1 < 0 || (unint64_t)a1 >> 6 >= *(void *)(v1 + 16)) {
    LOBYTE(v2) = 0;
  }
  else {
    return (*(void *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1;
  }
  return v2;
}

uint64_t BitSet.Counted.subscript.setter(uint64_t result, unint64_t a2)
{
  if (result)
  {
    uint64_t result = *(_OWORD *)&BitSet.insert(_:)(a2);
    if ((result & 1) == 0) {
      return result;
    }
    uint64_t v4 = v2[1];
    BOOL v5 = __OFADD__(v4, 1);
    uint64_t v6 = v4 + 1;
    if (!v5) {
      goto LABEL_12;
    }
    __break(1u);
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint8x8_t v7 = (char *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint8x8_t v7 = sub_24A499D60((uint64_t)v7);
    }
    if (a2 >> 6 >= *((void *)v7 + 2))
    {
      BOOL v13 = 0;
      *BOOL v2 = (uint64_t)v7;
      return (uint64_t)sub_24A54A3A0(&v13, v2);
    }
    else
    {
      uint64_t v8 = &v7[8 * (a2 >> 6)];
      uint64_t v9 = 1 << a2;
      uint64_t v10 = *((void *)v8 + 4);
      uint64_t v11 = v10 & (1 << a2);
      *((void *)v8 + 4) = v10 & ~v9;
      BOOL v13 = v11 != 0;
      *BOOL v2 = (uint64_t)v7;
      uint64_t result = (uint64_t)sub_24A54A3A0(&v13, v2);
      if (v11)
      {
        uint64_t v12 = v2[1];
        BOOL v5 = __OFSUB__(v12, 1);
        uint64_t v6 = v12 - 1;
        if (!v5)
        {
LABEL_12:
          v2[1] = v6;
          return result;
        }
        __break(1u);
      }
    }
  }
  return result;
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall BitSet.Counted.insert(_:)(Swift::Int a1)
{
  Swift::tuple_inserted_Bool_memberAfterInsert_Int v4 = BitSet.insert(_:)(a1);
  Swift::Int memberAfterInsert = v4.memberAfterInsert;
  Swift::Bool inserted = v4.inserted;
  if (v4.inserted)
  {
    uint64_t v5 = *(void *)(v1 + 8);
    BOOL v6 = __OFADD__(v5, 1);
    uint64_t v7 = v5 + 1;
    if (v6)
    {
      __break(1u);
      goto LABEL_6;
    }
    *(void *)(v1 + 8) = v7;
  }
  Swift::Bool inserted = v4.inserted;
LABEL_6:
  result.Swift::Int memberAfterInsert = memberAfterInsert;
  result.Swift::Bool inserted = inserted;
  return result;
}

Swift::Int_optional __swiftcall BitSet.Counted.remove(_:)(Swift::Int a1)
{
  if (a1 < 0) {
    goto LABEL_9;
  }
  unint64_t v2 = a1;
  uint64_t v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_24A499D60((uint64_t)v3);
  }
  if (v2 >> 6 >= *((void *)v3 + 2))
  {
    BOOL v13 = 0;
    *uint64_t v1 = (uint64_t)v3;
    sub_24A54A3A0(&v13, v1);
LABEL_9:
    unint64_t v2 = 0;
    char v5 = 1;
    goto LABEL_10;
  }
  Swift::tuple_inserted_Bool_memberAfterInsert_Int v4 = &v3[8 * (v2 >> 6)];
  char v5 = 1;
  uint64_t v6 = *((void *)v4 + 4);
  uint64_t v7 = v6 & (1 << v2);
  *((void *)v4 + 4) = v6 & ~(1 << v2);
  BOOL v13 = v7 != 0;
  *uint64_t v1 = (uint64_t)v3;
  uint64_t v8 = sub_24A54A3A0(&v13, v1);
  if (v7)
  {
    uint64_t v10 = v1[1];
    BOOL v11 = __OFSUB__(v10, 1);
    uint64_t v12 = v10 - 1;
    if (v11)
    {
      __break(1u);
      goto LABEL_13;
    }
    char v5 = 0;
    v1[1] = v12;
  }
  else
  {
    unint64_t v2 = 0;
  }
LABEL_10:
  uint64_t v8 = (unsigned char *)v2;
  Swift::Bool v9 = v5;
LABEL_13:
  result.Swift::UInt value = (Swift::Int)v8;
  result.is_nil = v9;
  return result;
}

uint64_t (*BitSet.Counted.subscript.modify(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0 || a2 >> 6 >= *(void *)(*(void *)v2 + 16)) {
    LOBYTE(v3) = 0;
  }
  else {
    uint64_t v3 = (*(void *)(*(void *)v2 + 8 * (a2 >> 6) + 32) >> a2) & 1;
  }
  *(unsigned char *)(a1 + 16) = v3;
  return sub_24A5925B8;
}

uint64_t sub_24A5925B8(uint64_t a1)
{
  return BitSet.Counted.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(void *)a1);
}

unint64_t BitSet.Counted.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A52B2C8(a3 + 32, *(void *)(a3 + 16), a1, a2, &v5);
  unint64_t v3 = v5;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t BitSet.Counted.subscript.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = sub_24A52B670(a1, a2);
  swift_bridgeObjectRetain();
  return v2;
}

unsigned char *BitSet.Counted.remove(at:)(unint64_t a1)
{
  unint64_t v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_24A499D60((uint64_t)v3);
  }
  if (a1 >> 6 >= *((void *)v3 + 2))
  {
    BOOL v8 = 0;
    *uint64_t v1 = (uint64_t)v3;
    Swift::Int_optional result = sub_24A54A3A0(&v8, v1);
  }
  else
  {
    Swift::tuple_inserted_Bool_memberAfterInsert_Int v4 = &v3[8 * (a1 >> 6)];
    uint64_t v5 = *((void *)v4 + 4);
    uint64_t v6 = v5 & (1 << a1);
    *((void *)v4 + 4) = v5 & ~(1 << a1);
    BOOL v8 = v6 != 0;
    *uint64_t v1 = (uint64_t)v3;
    Swift::Int_optional result = sub_24A54A3A0(&v8, v1);
    if (v6)
    {
      --v1[1];
      return (unsigned char *)a1;
    }
  }
  __break(1u);
  return result;
}

int64_t BitSet.Counted.filter(_:)(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    int64_t v7 = sub_24A5BB990();
    *(void *)(v7 + 16) = v6;
    bzero((void *)(v7 + 32), 8 * v6);
  }
  else
  {
    int64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
  }
  v15[0] = v7 + 32;
  v15[1] = v6;
  sub_24A52B51C(v15, a3, a1);
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  int64_t result = _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(v7);
  uint64_t v9 = *(void *)(result + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    BOOL v11 = (int8x8_t *)(result + 32);
    uint64_t v12 = 8 * v9;
    while (1)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      BOOL v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14) {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.sorted()()
{
  return swift_bridgeObjectRetain();
}

Swift::Int_optional __swiftcall BitSet.Counted.min()()
{
  uint64_t v1 = v0;
  unint64_t v2 = BitSet.Counted.startIndex.getter(v0);
  unint64_t v4 = v1[2] << 6;
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    Swift::Bool v3 = v2 == (void *)v4;
    if (v2 == (void *)v4) {
      unint64_t v2 = 0;
    }
  }
  result.Swift::UInt value = (Swift::Int)v2;
  result.is_nil = v3;
  return result;
}

Swift::Int_optional __swiftcall BitSet.Counted.max()()
{
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 16);
    if (v3 << 6 < 0)
    {
      __break(1u);
      goto LABEL_7;
    }
    Swift::Int v0 = _UnsafeBitSet.index(before:)(v3 << 6, v0 + 32, v3);
  }
  else
  {
    Swift::Int v0 = 0;
  }
  LOBYTE(v1) = !v2;
LABEL_7:
  result.is_nil = v1;
  result.Swift::UInt value = v0;
  return result;
}

int64_t static BitSet.Counted.random(upTo:)(unint64_t a1)
{
  int64_t result = sub_24A4E63E8(a1);
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (int8x8_t *)(result + 32);
    uint64_t v5 = 8 * v2;
    while (1)
    {
      uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      BOOL v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7) {
        break;
      }
      ++v4;
      v5 -= 8;
      if (!v5) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

int64_t static BitSet.Counted.random<A>(upTo:using:)(unint64_t a1)
{
  int64_t result = static BitSet.random<A>(upTo:using:)(a1);
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (int8x8_t *)(result + 32);
    uint64_t v5 = 8 * v2;
    while (1)
    {
      uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      BOOL v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7) {
        break;
      }
      ++v4;
      v5 -= 8;
      if (!v5) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall BitSet.Counted.update(with:)(Swift::Int with)
{
  Swift::Bool inserted = BitSet.insert(_:)(with).inserted;
  if (inserted) {
    Swift::Int v3 = with;
  }
  else {
    Swift::Int v3 = 0;
  }
  Swift::Bool v4 = !inserted;
  Swift::Int v5 = v3;
  result.Swift::UInt value = v5;
  result.is_nil = v4;
  return result;
}

BOOL sub_24A592A04(Swift::Int *a1)
{
  return BitSet.Counted.contains(_:)(*a1);
}

uint64_t sub_24A592A10@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A592A88(a1, (uint64_t (*)(void, void))BitSet.union(_:), a2);
}

uint64_t BitSet.Counted.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A592DB0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.union(_:));
}

{
  return sub_24A5931C8(a1, a2, a3, a4, (uint64_t (*)(void))BitSet.union(_:));
}

uint64_t sub_24A592A40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A592D08(a1, (uint64_t (*)(void, void))BitSet.intersection(_:), a2);
}

uint64_t BitSet.Counted.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A592DB0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.intersection(_:));
}

uint64_t sub_24A592A70@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A592A88(a1, (uint64_t (*)(void, void))BitSet.symmetricDifference(_:), a2);
}

uint64_t sub_24A592A88@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, *v3);
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (int8x8_t *)(result + 32);
    uint64_t v10 = 8 * v7;
    while (1)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(*v9);
      v11.i16[0] = vaddlv_u8(v11);
      BOOL v12 = __OFADD__(v8, v11.u32[0]);
      v8 += v11.u32[0];
      if (v12) {
        break;
      }
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = 0;
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t BitSet.Counted.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A592DB0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.symmetricDifference(_:));
}

{
  return sub_24A5931C8(a1, a2, a3, a4, (uint64_t (*)(void))BitSet.symmetricDifference(_:));
}

uint64_t sub_24A592B44(Swift::Int *a1, Swift::Int *a2)
{
  Swift::tuple_inserted_Bool_memberAfterInsert_Int v5 = BitSet.insert(_:)(*a2);
  uint64_t result = *(void *)&v5.inserted;
  if (!v5.inserted) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(v2 + 8);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (!v7)
  {
    *(void *)(v2 + 8) = v8;
LABEL_4:
    *a1 = v5.memberAfterInsert;
    return v5.inserted;
  }
  __break(1u);
  return result;
}

Swift::Int sub_24A592B8C@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int_optional v4 = BitSet.Counted.remove(_:)(*a1);
  *(void *)a2 = v4.value;
  *(unsigned char *)(a2 + 8) = v4.is_nil;
  return v4.value;
}

uint64_t sub_24A592BC0(uint64_t *a1, uint64_t a2)
{
  BitSet.Counted.formUnion(_:)(*a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t BitSet.Counted.formUnion(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A592C88(a1, a2, (uint64_t (*)(void))BitSet.formUnion(_:));
}

uint64_t sub_24A592C14(uint64_t *a1, uint64_t a2)
{
  return BitSet.Counted.formIntersection(_:)(*a1, a2);
}

uint64_t BitSet.Counted.formIntersection(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A592C88(a1, a2, (uint64_t (*)(void))BitSet.formIntersection(_:));
}

uint64_t sub_24A592C34(uint64_t *a1, uint64_t a2)
{
  BitSet.Counted.formSymmetricDifference(_:)(*a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t BitSet.Counted.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A592C88(a1, a2, (uint64_t (*)(void))BitSet.formSymmetricDifference(_:));
}

uint64_t sub_24A592C88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  int8x8_t v5 = (*v3)[2];
  if (v5)
  {
    uint64_t v6 = 0;
    BOOL v7 = *v3 + 4;
    uint64_t v8 = 8 * *(void *)&v5;
    while (1)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(*v7);
      v9.i16[0] = vaddlv_u8(v9);
      BOOL v10 = __OFADD__(v6, v9.u32[0]);
      uint64_t v6 = (int8x8_t *)((char *)v6 + v9.u32[0]);
      if (v10) {
        break;
      }
      ++v7;
      v8 -= 8;
      if (!v8) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v6 = 0;
LABEL_7:
    v3[1] = v6;
  }
  return result;
}

uint64_t sub_24A592CF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A592D08(a1, (uint64_t (*)(void, void))BitSet.subtracting(_:), a2);
}

uint64_t sub_24A592D08@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, *v3);
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint8x8_t v9 = (int8x8_t *)(result + 32);
    uint64_t v10 = 8 * v7;
    while (1)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(*v9);
      v11.i16[0] = vaddlv_u8(v11);
      BOOL v12 = __OFADD__(v8, v11.u32[0]);
      v8 += v11.u32[0];
      if (v12) {
        break;
      }
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = 0;
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t BitSet.Counted.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A592DB0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.subtracting(_:));
}

uint64_t sub_24A592DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result = a5(a1, a3);
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int8x8_t *)(result + 32);
    uint64_t v9 = 8 * v6;
    while (1)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      BOOL v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11) {
        break;
      }
      ++v8;
      v9 -= 8;
      if (!v9) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

BOOL sub_24A592E18(uint64_t a1)
{
  return *(void *)(a1 + 8) >= *(void *)(v1 + 8) && BitSet.isSubset(of:)(*(void **)a1, *(void **)v1);
}

BOOL BitSet.Counted.isSubset(of:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a2 >= a4 && BitSet.isSubset(of:)(a1, a3);
}

BOOL BitSet.Counted.isDisjoint(with:)(void *a1, uint64_t a2, void *a3)
{
  return BitSet.isDisjoint(with:)(a1, a3);
}

BOOL sub_24A592E5C(uint64_t a1)
{
  return *(void *)(v1 + 8) >= *(void *)(a1 + 8) && BitSet.isSubset(of:)(*(void **)v1, *(void **)a1);
}

BOOL BitSet.Counted.isSuperset(of:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a4 >= a2 && BitSet.isSubset(of:)(a3, a1);
}

uint64_t sub_24A592EA4@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_24A594138(a1, a2);
  uint64_t v8 = v7;
  uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  *a3 = v6;
  a3[1] = v8;
  return result;
}

unsigned char *sub_24A592F1C(int8x16_t **a1)
{
  return BitSet.Counted.subtract(_:)(*a1);
}

unsigned char *BitSet.Counted.subtract(_:)(int8x16_t *a1)
{
  char v24 = 1;
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_26;
  }
  while (1)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    if (a1[1].i64[0] < v4) {
      unint64_t v4 = a1[1].u64[0];
    }
    if (v4)
    {
      if (v4 < 6
        || ((uint64_t v5 = 8 * v4 + 32, v3 + 32 < (unint64_t)a1->u64 + v5)
          ? (BOOL v6 = (unint64_t)&a1[2] >= v3 + v5)
          : (BOOL v6 = 1),
            !v6))
      {
        uint64_t v7 = 0;
LABEL_16:
        unint64_t v12 = v4 - v7;
        uint64_t v13 = 8 * v7 + 32;
        BOOL v14 = (void *)(v3 + v13);
        uint64_t v15 = (uint64_t *)((char *)a1->i64 + v13);
        do
        {
          uint64_t v16 = *v15++;
          *v14++ &= ~v16;
          --v12;
        }
        while (v12);
        goto LABEL_18;
      }
      uint64_t v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      uint64_t v8 = a1 + 3;
      uint64_t v9 = (int8x16_t *)(v3 + 48);
      uint64_t v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v11 = vbicq_s8(*v9, *v8);
        v9[-1] = vbicq_s8(v9[-1], v8[-1]);
        *uint64_t v9 = v11;
        v8 += 2;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v4 != v7) {
        goto LABEL_16;
      }
    }
LABEL_18:
    *uint64_t v1 = v3;
    uint64_t result = sub_24A54A3A0(&v24, v1);
    uint64_t v18 = *(void *)(*v1 + 16);
    if (!v18) {
      break;
    }
    uint64_t v19 = 0;
    uint64_t v20 = (int8x8_t *)(*v1 + 32);
    uint64_t v21 = 8 * v18;
    while (1)
    {
      uint8x8_t v22 = (uint8x8_t)vcnt_s8(*v20);
      v22.i16[0] = vaddlv_u8(v22);
      BOOL v23 = __OFADD__(v19, v22.u32[0]);
      v19 += v22.u32[0];
      if (v23) {
        break;
      }
      ++v20;
      v21 -= 8;
      if (!v21) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    uint64_t v3 = (uint64_t)sub_24A499D60(v3);
  }
  uint64_t v19 = 0;
LABEL_24:
  v1[1] = v19;
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned char *result;
  uint64_t v18;
  uint64_t v19;
  int8x8_t *v20;
  uint64_t v21;
  uint8x8_t v22;
  BOOL v23;
  char v24;

  char v24 = 1;
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_26;
  }
  while (1)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    if (a1[1].i64[0] < v4) {
      unint64_t v4 = a1[1].u64[0];
    }
    if (v4)
    {
      if (v4 < 6
        || ((uint64_t v5 = 8 * v4 + 32, v3 + 32 < (unint64_t)a1->u64 + v5)
          ? (BOOL v6 = (unint64_t)&a1[2] >= v3 + v5)
          : (BOOL v6 = 1),
            !v6))
      {
        uint64_t v7 = 0;
LABEL_16:
        unint64_t v12 = v4 - v7;
        uint64_t v13 = 8 * v7 + 32;
        BOOL v14 = (void *)(v3 + v13);
        uint64_t v15 = (uint64_t *)((char *)a1->i64 + v13);
        do
        {
          uint64_t v16 = *v15++;
          *v14++ &= ~v16;
          --v12;
        }
        while (v12);
        goto LABEL_18;
      }
      uint64_t v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      uint64_t v8 = a1 + 3;
      uint64_t v9 = (int8x16_t *)(v3 + 48);
      uint64_t v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v11 = vbicq_s8(*v9, *v8);
        v9[-1] = vbicq_s8(v9[-1], v8[-1]);
        *uint64_t v9 = v11;
        v8 += 2;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v4 != v7) {
        goto LABEL_16;
      }
    }
LABEL_18:
    *uint64_t v1 = v3;
    uint64_t result = sub_24A54A3A0(&v24, v1);
    uint64_t v18 = *(void *)(*v1 + 16);
    if (!v18) {
      break;
    }
    uint64_t v19 = 0;
    uint64_t v20 = (int8x8_t *)(*v1 + 32);
    uint64_t v21 = 8 * v18;
    while (1)
    {
      uint8x8_t v22 = (uint8x8_t)vcnt_s8(*v20);
      v22.i16[0] = vaddlv_u8(v22);
      BOOL v23 = __OFADD__(v19, v22.u32[0]);
      v19 += v22.u32[0];
      if (v23) {
        break;
      }
      ++v20;
      v21 -= 8;
      if (!v21) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    uint64_t v3 = (uint64_t)sub_24A499D60(v3);
  }
  uint64_t v19 = 0;
LABEL_24:
  v1[1] = v19;
  return result;
}

uint64_t BitSet.Counted.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A5933B4(a1, a2, a3, (uint64_t (*)(void))BitSet.union(_:));
}

uint64_t BitSet.Counted.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A593244(a1, a2, a3, a4, a5, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))BitSet.union<A>(_:));
}

uint64_t BitSet.Counted.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A5933B4(a1, a2, a3, (uint64_t (*)(void))BitSet.intersection(_:));
}

int8x8_t *BitSet.Counted.intersection(_:)(uint64_t a1, uint64_t a2, int8x8_t *a3)
{
  swift_bridgeObjectRetain();
  BitSet.formIntersection(_:)(a1, a2);
  uint64_t result = a3;
  int8x8_t v6 = a3[2];
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a3 + 4;
    uint64_t v9 = 8 * *(void *)&v6;
    while (1)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      BOOL v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11) {
        break;
      }
      ++v8;
      v9 -= 8;
      if (!v9) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A593244(a1, a2, a3, a4, a5, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))BitSet.intersection<A>(_:));
}

uint64_t BitSet.Counted.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A5933B4(a1, a2, a3, (uint64_t (*)(void))BitSet.symmetricDifference(_:));
}

uint64_t sub_24A5931C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5();
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int8x8_t *)(result + 32);
    uint64_t v9 = 8 * v6;
    while (1)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      BOOL v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11) {
        break;
      }
      ++v8;
      v9 -= 8;
      if (!v9) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A593244(a1, a2, a3, a4, a5, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))BitSet.symmetricDifference<A>(_:));
}

uint64_t sub_24A593244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v14);
  uint64_t result = a6(v13, a2, a4, a5);
  uint64_t v16 = result;
  uint64_t v17 = *(void *)(result + 16);
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (int8x8_t *)(result + 32);
    uint64_t v20 = 8 * v17;
    while (1)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(*v19);
      v21.i16[0] = vaddlv_u8(v21);
      BOOL v22 = __OFADD__(v18, v21.u32[0]);
      v18 += v21.u32[0];
      if (v22) {
        break;
      }
      ++v19;
      v20 -= 8;
      if (!v20) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a4);
    return v16;
  }
  return result;
}

uint64_t BitSet.Counted.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A5933B4(a1, a2, a3, (uint64_t (*)(void))BitSet.subtracting(_:));
}

uint64_t sub_24A5933B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (int8x8_t *)(result + 32);
    uint64_t v8 = 8 * v5;
    while (1)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(*v7);
      v9.i16[0] = vaddlv_u8(v9);
      BOOL v10 = __OFADD__(v6, v9.u32[0]);
      v6 += v9.u32[0];
      if (v10) {
        break;
      }
      ++v7;
      v8 -= 8;
      if (!v8) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

char *BitSet.Counted.subtracting(_:)(uint64_t a1, uint64_t a2, char *a3)
{
  if (a2 <= 0) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = a1 & ~(a1 >> 63);
  }
  unint64_t v5 = a2 & ~(a2 >> 63);
  if (v4 != v5)
  {
    char v15 = 1;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = *((void *)a3 + 2); i; uint64_t i = *(void *)(v14[0] + 16))
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int8x8_t *)(a3 + 32);
    uint64_t v9 = 8 * i;
    while (1)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      BOOL v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11) {
        break;
      }
      ++v8;
      v9 -= 8;
      if (!v9) {
        return a3;
      }
    }
    __break(1u);
LABEL_14:
    a3 = sub_24A499D60((uint64_t)a3);
LABEL_11:
    uint64_t v12 = *((void *)a3 + 2);
    v14[0] = (uint64_t)(a3 + 32);
    v14[1] = v12;
    _UnsafeBitSet.subtract(_:)(v4, v5);
    v14[0] = (uint64_t)a3;
    sub_24A54A3A0(&v15, v14);
    a3 = (char *)v14[0];
  }
  return a3;
}

uint64_t BitSet.Counted.subtracting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, int8x16_t *a5)
{
  uint64_t result = sub_24A53C7BC(a1, a2, a4, a5);
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    BOOL v11 = (int8x8_t *)(result + 32);
    uint64_t v12 = 8 * v9;
    while (1)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      BOOL v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14) {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    (*((void (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a1, a4);
    return v8;
  }
  return result;
}

uint64_t BitSet.Counted.formUnion(_:)(uint64_t a1)
{
  return sub_24A5937AC(a1, (uint64_t (*)(void))BitSet.formUnion(_:));
}

unint64_t BitSet.Counted.formUnion(_:)(unint64_t result, unint64_t a2)
{
  if (((a2 | result) & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  uint64_t v2 = v3;
  unint64_t v4 = a2;
  unint64_t v5 = result;
  uint64_t v6 = *v3;
  if (result == a2) {
    goto LABEL_8;
  }
  unint64_t v7 = (a2 + 63) >> 6;
  unint64_t v8 = *((void *)v6 + 2);
  uint64_t result = v7 - v8;
  if (v7 > v8)
  {
    if ((uint64_t)(v7 - v8) < 0)
    {
      __break(1u);
      return result;
    }
    sub_24A4D5F98(result, 0);
    uint64_t v6 = *v3;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t result = _UnsafeBitSet.formUnion(_:)(v5, v4);
    *uint64_t v2 = v6;
LABEL_8:
    uint64_t v9 = *((void *)v6 + 2);
    if (!v9) {
      break;
    }
    uint64_t v10 = 0;
    BOOL v11 = (int8x8_t *)(v6 + 32);
    uint64_t v12 = 8 * v9;
    while (1)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      BOOL v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14) {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t v6 = sub_24A499D60((uint64_t)v6);
  }
  uint64_t v10 = 0;
LABEL_14:
  v2[1] = v10;
  return result;
}

uint64_t BitSet.Counted.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A59394C(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))BitSet.formUnion<A>(_:));
}

uint64_t BitSet.Counted.formIntersection(_:)(uint64_t a1)
{
  return sub_24A5937AC(a1, (uint64_t (*)(void))BitSet.formIntersection(_:));
}

unsigned char *BitSet.Counted.formIntersection(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = BitSet.formIntersection(_:)(a1, a2);
  int8x8_t v4 = (*v2)[2];
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = *v2 + 4;
    uint64_t v7 = 8 * *(void *)&v4;
    while (1)
    {
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(*v6);
      v8.i16[0] = vaddlv_u8(v8);
      BOOL v9 = __OFADD__(v5, v8.u32[0]);
      unint64_t v5 = (int8x8_t *)((char *)v5 + v8.u32[0]);
      if (v9) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v5 = 0;
LABEL_7:
    v2[1] = v5;
  }
  return result;
}

uint64_t BitSet.Counted.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A59394C(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))BitSet.formIntersection<A>(_:));
}

uint64_t BitSet.Counted.formSymmetricDifference(_:)(uint64_t a1)
{
  return sub_24A5937AC(a1, (uint64_t (*)(void))BitSet.formSymmetricDifference(_:));
}

uint64_t sub_24A5937AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  int8x8_t v4 = (*v2)[2];
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = *v2 + 4;
    uint64_t v7 = 8 * *(void *)&v4;
    while (1)
    {
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(*v6);
      v8.i16[0] = vaddlv_u8(v8);
      BOOL v9 = __OFADD__(v5, v8.u32[0]);
      unint64_t v5 = (int8x8_t *)((char *)v5 + v8.u32[0]);
      if (v9) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v5 = 0;
LABEL_7:
    v2[1] = v5;
  }
  return result;
}

uint64_t BitSet.Counted.formSymmetricDifference(_:)(uint64_t result, unint64_t a2)
{
  if (((a2 | result) & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  uint64_t v2 = v3;
  unint64_t v4 = a2;
  unint64_t v5 = result;
  if (result == a2) {
    goto LABEL_8;
  }
  unint64_t v7 = (a2 + 63) >> 6;
  uint64_t v6 = (char *)*v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  uint64_t result = v7 - v8;
  if (v7 > v8)
  {
    if ((uint64_t)(v7 - v8) < 0)
    {
      __break(1u);
      return result;
    }
    sub_24A4D5F98(result, 0);
    uint64_t v6 = (char *)*v3;
  }
  char v15 = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_17;
  }
  while (1)
  {
    _UnsafeBitSet.formSymmetricDifference(_:)(v5, v4);
    *uint64_t v2 = (uint64_t)v6;
    uint64_t result = (uint64_t)sub_24A54A3A0(&v15, v2);
LABEL_8:
    uint64_t v9 = *(void *)(*v2 + 16);
    if (!v9) {
      break;
    }
    uint64_t v10 = 0;
    BOOL v11 = (int8x8_t *)(*v2 + 32);
    uint64_t v12 = 8 * v9;
    while (1)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      BOOL v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14) {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t v6 = sub_24A499D60((uint64_t)v6);
  }
  uint64_t v10 = 0;
LABEL_14:
  v2[1] = v10;
  return result;
}

uint64_t BitSet.Counted.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A59394C(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))BitSet.formSymmetricDifference<A>(_:));
}

uint64_t sub_24A59394C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  BOOL v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  uint64_t result = a4(v11, a2, a3);
  int8x8_t v13 = (*v4)[2];
  if (v13)
  {
    BOOL v14 = 0;
    char v15 = *v4 + 4;
    uint64_t v16 = 8 * *(void *)&v13;
    while (1)
    {
      uint8x8_t v17 = (uint8x8_t)vcnt_s8(*v15);
      v17.i16[0] = vaddlv_u8(v17);
      BOOL v18 = __OFADD__(v14, v17.u32[0]);
      BOOL v14 = (int8x8_t *)((char *)v14 + v17.u32[0]);
      if (v18) {
        break;
      }
      ++v15;
      v16 -= 8;
      if (!v16) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    BOOL v14 = 0;
LABEL_7:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    v4[1] = v14;
  }
  return result;
}

uint64_t BitSet.Counted.subtract(_:)(uint64_t result, uint64_t a2)
{
  if (a2 <= 0) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = result & ~(result >> 63);
  }
  unint64_t v5 = a2 & ~(a2 >> 63);
  if (v4 == v5) {
    goto LABEL_7;
  }
  char v12 = 1;
  uint64_t v3 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_15;
  }
  while (1)
  {
    _UnsafeBitSet.subtract(_:)(v4, v5);
    *uint64_t v2 = v3;
    uint64_t result = (uint64_t)sub_24A54A3A0(&v12, v2);
LABEL_7:
    uint64_t v6 = *(void *)(*v2 + 16);
    if (!v6) {
      break;
    }
    uint64_t v7 = 0;
    unint64_t v8 = (int8x8_t *)(*v2 + 32);
    uint64_t v9 = 8 * v6;
    while (1)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      BOOL v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11) {
        break;
      }
      ++v8;
      v9 -= 8;
      if (!v9) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    uint64_t v3 = (uint64_t)sub_24A499D60(v3);
  }
  uint64_t v7 = 0;
LABEL_13:
  v2[1] = v7;
  return result;
}

uint64_t BitSet.Counted.subtract<A>(_:)(uint64_t a1, ValueMetadata *a2, int8x16_t *a3)
{
  uint64_t result = BitSet.subtract<A>(_:)(a1, a2, a3);
  int8x8_t v7 = (*v3)[2];
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *v3 + 4;
    uint64_t v10 = 8 * *(void *)&v7;
    while (1)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(*v9);
      v11.i16[0] = vaddlv_u8(v11);
      BOOL v12 = __OFADD__(v8, v11.u32[0]);
      unint64_t v8 = (int8x8_t *)((char *)v8 + v11.u32[0]);
      if (v12) {
        break;
      }
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v8 = 0;
LABEL_7:
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
    v3[1] = v8;
  }
  return result;
}

BOOL BitSet.Counted.isEqualSet(to:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a4 == a2 && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a3, a1);
}

BOOL BitSet.Counted.isEqualSet(to:)(void *a1, void *a2)
{
  return _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a2, a1);
}

unint64_t BitSet.Counted.isEqualSet(to:)(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) != 0 || a2 - result != a4 || (a2 & 0x8000000000000000) != 0)
  {
    return 0;
  }
  else
  {
    return _UnsafeBitSet.isEqualSet(to:)(result, a2, (void *)(a3 + 32), *(void *)(a3 + 16));
  }
  return result;
}

uint64_t BitSet.Counted.isEqualSet<A>(to:)(uint64_t a1, int8x8_t *a2, uint64_t a3, ValueMetadata *a4)
{
  if (sub_24A5BB860() > a3) {
    return 0;
  }
  return BitSet.isEqualSet<A>(to:)(a1, a2, a4);
}

uint64_t BitSet.Counted.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A593FA0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.isSubset(of:));
}

uint64_t BitSet.Counted.isSubset<A>(of:)(uint64_t a1, char *a2, uint64_t a3, ValueMetadata *a4)
{
  return BitSet.isSubset<A>(of:)(a1, a2, a4);
}

BOOL BitSet.Counted.isSuperset(of:)(void *a1, void *a2)
{
  return BitSet.isSubset(of:)(a2, a1);
}

uint64_t BitSet.Counted.isSuperset(of:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1;
  }
  if (((a2 | a1) & 0x8000000000000000) != 0) {
    return 0;
  }
  return _UnsafeBitSet.isSuperset(of:)(a1, a2, a3 + 32, *(void *)(a3 + 16));
}

uint64_t BitSet.Counted.isSuperset<A>(of:)(uint64_t a1, void *a2, uint64_t a3, ValueMetadata *a4)
{
  return BitSet.isSuperset<A>(of:)(a1, a2, a4);
}

BOOL BitSet.Counted.isStrictSubset(of:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a4 < a2 && BitSet.isStrictSubset(of:)(a1, a3);
}

uint64_t BitSet.Counted.isStrictSubset(of:)(uint64_t result, int64_t a2, uint64_t a3, int64_t a4)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else if (a2 - result <= a4)
  {
    return 0;
  }
  else
  {
    return BitSet.isStrictSubset(of:)(result, a2, a3);
  }
  return result;
}

unint64_t BitSet.Counted.isStrictSubset<A>(of:)(uint64_t a1, int8x8_t *a2, uint64_t a3, ValueMetadata *a4, uint64_t a5)
{
  return BitSet.isStrictSubset<A>(of:)(a1, a2, a4, a5);
}

BOOL BitSet.Counted.isStrictSuperset(of:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a2 < a4 && BitSet.isStrictSubset(of:)(a3, a1);
}

BOOL BitSet.Counted.isStrictSuperset(of:)(void *a1, void *a2)
{
  return BitSet.isStrictSubset(of:)(a2, a1);
}

void *BitSet.Counted.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t *a2, uint64_t a3, ValueMetadata *a4, uint64_t a5)
{
  return BitSet.isStrictSuperset<A>(of:)(a1, a2, a4, a5);
}

uint64_t BitSet.Counted.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A593FA0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.isDisjoint(with:));
}

uint64_t sub_24A593FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void))
{
  if (a2 <= 0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & ~(a1 >> 63);
  }
  return a5(v5, a2 & ~(a2 >> 63), a3 + 32, *(void *)(a3 + 16));
}

BOOL BitSet.Counted.isDisjoint<A>(with:)(uint64_t a1, void *a2, uint64_t a3, ValueMetadata *a4)
{
  return BitSet.isDisjoint<A>(with:)(a1, a2, a4);
}

void *sub_24A593FD0(void *result)
{
  uint64_t v1 = result[2];
  if (v1)
  {
    if (result[4]) {
      goto LABEL_3;
    }
    if (v1 != 1)
    {
      if (!result[5])
      {
        uint64_t v2 = v1 - 2;
        if (v1 == 2) {
          return result;
        }
        uint64_t v3 = result + 6;
        uint64_t v4 = 128;
        while (!*v3++)
        {
          v4 += 64;
          if (!--v2)
          {
            if (((v1 << 6) & 0x8000000000000000) == 0) {
              return result;
            }
            __break(1u);
            break;
          }
        }
        if (v4 < 0)
        {
          __break(1u);
          goto LABEL_16;
        }
      }
LABEL_3:
      if (((v1 << 6) & 0x8000000000000000) == 0) {
        return result;
      }
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

void *sub_24A594060(void *result)
{
  uint64_t v1 = result[2];
  if (v1)
  {
    if (result[4]) {
      goto LABEL_3;
    }
    uint64_t v2 = v1 - 1;
    if (v1 != 1)
    {
      uint64_t v3 = result + 5;
      uint64_t v4 = 64;
      while (!*v3++)
      {
        v4 += 64;
        if (!--v2)
        {
          if (((v1 << 6) & 0x8000000000000000) == 0) {
            return result;
          }
          __break(1u);
          break;
        }
      }
      if (v4 < 0)
      {
        __break(1u);
        goto LABEL_14;
      }
LABEL_3:
      if (((v1 << 6) & 0x8000000000000000) == 0) {
        return result;
      }
LABEL_14:
      __break(1u);
    }
  }
  return result;
}

int64_t sub_24A5940D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t result = sub_24A52C7BC(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(void *)(result + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    uint8x8_t v11 = (int8x8_t *)(result + 32);
    uint64_t v12 = 8 * v9;
    while (1)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      BOOL v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14) {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A594138(uint64_t a1, ValueMetadata *a2)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  uint64_t result = BitSet.init<A>(_:)((uint64_t)v4, a2);
  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (int8x8_t *)(result + 32);
    uint64_t v10 = 8 * v7;
    while (1)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(*v9);
      v11.i16[0] = vaddlv_u8(v11);
      BOOL v12 = __OFADD__(v8, v11.u32[0]);
      v8 += v11.u32[0];
      if (v12) {
        break;
      }
      ++v9;
      v10 -= 8;
      if (!v10) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A594244(uint64_t a1)
{
  sub_24A4ADA10(a1, (uint64_t)v15);
  int64_t v3 = (int64_t)__swift_project_boxed_opaque_existential_1(v15, v15[3]);
  sub_24A5BC6E0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1(a1);
    return v3;
  }
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  uint64_t v4 = sub_24A5BC460();
  uint64_t v6 = sub_24A50A470(v14, v4, v5 & 1);
  int64_t v3 = _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0((int64_t)v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  uint64_t v8 = *(void *)(v3 + 16);
  if (!v8)
  {
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return v3;
  }
  uint64_t v9 = 0;
  uint64_t v10 = (int8x8_t *)(v3 + 32);
  uint64_t v11 = 8 * v8;
  while (1)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(*v10);
    v12.i16[0] = vaddlv_u8(v12);
    BOOL v13 = __OFADD__(v9, v12.u32[0]);
    v9 += v12.u32[0];
    if (v13) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A59438C()
{
  unint64_t result = qword_26979C380;
  if (!qword_26979C380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C380);
  }
  return result;
}

uint64_t sub_24A5943E0()
{
  return sub_24A5944AC(&qword_26979C388, &qword_26979C390);
}

unint64_t sub_24A59441C()
{
  unint64_t result = qword_26979C398;
  if (!qword_26979C398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C398);
  }
  return result;
}

uint64_t sub_24A594470()
{
  return sub_24A5944AC(&qword_26979C3A0, &qword_26979C3A8);
}

uint64_t sub_24A5944AC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    sub_24A59441C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A594514()
{
  unint64_t result = qword_26979C3B0;
  if (!qword_26979C3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C3B0);
  }
  return result;
}

uint64_t sub_24A594568()
{
  return sub_24A4D280C(&qword_26979C3B8, &qword_26979C390);
}

uint64_t sub_24A5945A4()
{
  return sub_24A4D280C(&qword_26979C3C0, &qword_26979C3A8);
}

unint64_t sub_24A5945E4()
{
  unint64_t result = qword_26979C3C8;
  if (!qword_26979C3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C3C8);
  }
  return result;
}

unint64_t sub_24A59463C()
{
  unint64_t result = qword_26979C3D0;
  if (!qword_26979C3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979C3D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BitSet.Counted()
{
  return &type metadata for BitSet.Counted;
}

__n128 BigSubstring.UTF8View.init(_:in:)@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6 = *(__n128 *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = *(void *)(a1 + 32);
  unint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  __n128 v27 = v6;
  v31[0] = *(_OWORD *)a1;
  long long v30 = v31[0];
  long long v11 = *(_OWORD *)(a1 + 32);
  v31[1] = v6;
  _OWORD v31[2] = v11;
  sub_24A4974C4((uint64_t)v31, (uint64_t)v32);
  sub_24A497498((uint64_t)v32);
  unint64_t v12 = sub_24A489E5C(v7, v8, v9, v10);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v19 = sub_24A489E5C(a2[4], a2[5], a2[6], a2[7]);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_24A496BE8(a1);
  __n128 result = v27;
  *(_OWORD *)a3 = v30;
  *(__n128 *)(a3 + 16) = v27;
  *(void *)(a3 + 32) = v29;
  *(void *)(a3 + 40) = v28;
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = v14;
  *(void *)(a3 + 64) = v16;
  *(void *)(a3 + 72) = v18;
  *(void *)(a3 + 80) = v19;
  *(void *)(a3 + 88) = v21;
  *(void *)(a3 + 96) = v23;
  *(void *)(a3 + 104) = v25;
  return result;
}

__n128 BigSubstring.UTF8View.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = (__n128)a2[2];
  long long v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.utf8.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  long long v12 = *(_OWORD *)v1;
  long long v10 = *(_OWORD *)(v1 + 32);
  long long v11 = *(_OWORD *)(v1 + 16);
  long long v8 = *(_OWORD *)(v1 + 64);
  long long v9 = *(_OWORD *)(v1 + 48);
  __n128 v7 = *(__n128 *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v2 + 104);
  sub_24A497498(v2);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  __n128 result = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(__n128 *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  return result;
}

uint64_t BigSubstring.UTF8View.startIndex.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t BigSubstring.UTF8View.endIndex.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t BigSubstring.UTF8View.base.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

uint64_t static BigSubstring.UTF8View.== infix(_:_:)(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v16[0] = *a1;
  v16[1] = v2;
  long long v3 = a1[3];
  uint64_t v16[2] = a1[2];
  long long v4 = a1[4];
  long long v5 = a1[5];
  v15[0] = v3;
  v15[1] = v4;
  long long v6 = a1[6];
  uint64_t v15[2] = v5;
  _OWORD v15[3] = v6;
  long long v7 = *a2;
  long long v8 = a2[2];
  long long v9 = a2[3];
  v14[1] = a2[1];
  uint64_t v14[2] = v8;
  long long v10 = a2[5];
  long long v11 = a2[4];
  long long v13[3] = a2[6];
  v14[0] = v7;
  v13[1] = v11;
  void v13[2] = v10;
  v13[0] = v9;
  return sub_24A551BC0((uint64_t *)v16, (unint64_t *)v15, (uint64_t *)v14, (unint64_t *)v13) & 1;
}

BOOL BigSubstring.UTF8View.isIdentical(to:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  _OWORD v8[2] = *(_OWORD *)(a1 + 32);
  sub_24A497498((uint64_t)v1);
  sub_24A497498(a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8(a1);
  sub_24A496BE8(v2);
  return v6
      && (*(void *)(a1 + 48) ^ *(void *)(v2 + 48)) <= 1023
      && (*(void *)(v2 + 80) ^ *(void *)(a1 + 80)) < 0x400uLL;
}

uint64_t BigSubstring.UTF8View.hash(into:)()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_24A58EDF0(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), (uint64_t)v3);
  return sub_24A5BC640();
}

uint64_t BigSubstring.UTF8View.hashValue.getter()
{
  sub_24A5BC610();
  long long v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_24A58EDF0(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), (uint64_t)v3);
  sub_24A5BC640();
  return sub_24A5BC690();
}

Swift::UInt8_optional __swiftcall BigSubstring.UTF8View.Iterator.next()()
{
  if (*(void *)(v0 + 48) >> 10 >= *(void *)(v0 + 80) >> 10)
  {
    LOBYTE(v1) = 0;
    LOWORD(v2) = 1;
  }
  else
  {
    LOWORD(v1) = BigString.UTF8View.Iterator.next()();
    int v2 = (v1 >> 8) & 1;
  }
  return (Swift::UInt8_optional)(v1 | (unsigned __int16)((_WORD)v2 << 8));
}

__int16 sub_24A594BFC@<W0>(unsigned char *a1@<X8>)
{
  if (*(void *)(v1 + 48) >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    LOWORD(v3) = 0;
    LOBYTE(v4) = 1;
  }
  else
  {
    LOWORD(v3) = BigString.UTF8View.Iterator.next()();
    int v4 = (v3 >> 8) & 1;
  }
  *a1 = v3;
  a1[1] = v4;
  return v3;
}

__n128 BigSubstring.UTF8View.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  long long v18 = *(_OWORD *)v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  unint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  unint64_t v7 = *(void *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 72);
  long long v16 = *(_OWORD *)(v1 + 16);
  __n128 v17 = *(__n128 *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 104);
  sub_24A497498(v1);
  unint64_t v11 = sub_24A489E5C(v5, v6, v7, v8);
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v16;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  __n128 result = v17;
  *(__n128 *)(a1 + 80) = v17;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v10;
  return result;
}

__n128 sub_24A594D04@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v3 = v1->n128_u64[0];
  unint64_t v4 = v1->n128_u64[1];
  unint64_t v5 = v1[1].n128_u64[0];
  unint64_t v6 = v1[1].n128_u64[1];
  unint64_t v7 = v1[2].n128_u64[0];
  uint64_t v8 = v1[3].n128_i64[1];
  unint64_t v19 = v1[3].n128_u64[0];
  unint64_t v20 = v1[2].n128_u64[1];
  unint64_t v10 = v1[4].n128_u64[0];
  uint64_t v9 = v1[4].n128_i64[1];
  __n128 v23 = v1[5];
  unint64_t v21 = v1[6].n128_u64[1];
  unint64_t v22 = v1[6].n128_u64[0];
  swift_unknownObjectRetain();
  unint64_t v11 = sub_24A489E5C(v19, v8, v10, v9);
  unint64_t v13 = v12;
  unint64_t v15 = v14;
  unint64_t v17 = v16;
  swift_unknownObjectRelease();
  a1->n128_u64[0] = v3;
  a1->n128_u64[1] = v4;
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u64[0] = v7;
  a1[2].n128_u64[1] = v20;
  a1[3].n128_u64[0] = v11;
  a1[3].n128_u64[1] = v13;
  a1[4].n128_u64[0] = v15;
  a1[4].n128_u64[1] = v17;
  __n128 result = v23;
  a1[5] = v23;
  a1[6].n128_u64[0] = v22;
  a1[6].n128_u64[1] = v21;
  return result;
}

uint64_t sub_24A594DEC()
{
  long long v1 = v0[5];
  _OWORD v6[4] = v0[4];
  _OWORD v6[5] = v1;
  v6[6] = v0[6];
  long long v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  long long v3 = v0[3];
  __n128 v6[2] = v0[2];
  _OWORD v6[3] = v3;
  uint64_t v4 = sub_24A5961A8((uint64_t)v6);
  sub_24A496BE8((uint64_t)v6);
  return v4;
}

uint64_t sub_24A594E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A596A34(a1, a2, a3);
}

unint64_t BigSubstring.UTF8View.count.getter()
{
  unint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 80);
  if (v2 >> 10 >= v1 >> 10) {
    return (v2 >> 11) - (v1 >> 11);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.distance(from:to:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = result >> 10;
  unint64_t v7 = *(void *)(v5 + 48) >> 10;
  unint64_t v8 = *(void *)(v5 + 80) >> 10;
  if (v8 >= a5 >> 10 && a5 >> 10 >= v7 && v6 >= v7 && v8 >= v6) {
    return (a5 >> 11) - (result >> 11);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(after:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_24A489ED0(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(before:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(void *)(v4 + 48) >> 10 < result >> 10) {
    return sub_24A48A10C(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(_:offsetBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = *(void *)(v5 + 48) >> 10;
  unint64_t v7 = *(void *)(v5 + 80) >> 10;
  if (result >> 10 < v6 || v7 < result >> 10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  unint64_t result = sub_24A495EFC(result, a2, a3, a4, a5);
  if (result >> 10 < v6 || v7 < result >> 10) {
    goto LABEL_12;
  }
  return result;
}

unint64_t BigSubstring.UTF8View.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10 = *(void *)(v9 + 48) >> 10;
  unint64_t v11 = *(void *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  unint64_t result = sub_24A58FD18(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10)) {
    goto LABEL_13;
  }
  return result;
}

unint64_t BigSubstring.UTF8View.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_24A489C70(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t *BigSubstring.UTF8View.subscript.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= *(void *)(v2 + 48) >> 10 && *(void *)(v2 + 80) >> 10 >= v5 >> 10)
  {
    long long v26 = *(_OWORD *)v2;
    long long v25 = *(_OWORD *)(v2 + 16);
    unint64_t v8 = result[6];
    uint64_t v7 = result[7];
    uint64_t v9 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    uint64_t v23 = *(void *)(v2 + 32);
    uint64_t v24 = *(void *)(v2 + 40);
    sub_24A497498(v2);
    unint64_t v13 = sub_24A489E5C(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    unint64_t result = (unint64_t *)sub_24A489E5C(v5, v9, v8, v7);
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v25;
    *(void *)(a2 + 32) = v23;
    *(void *)(a2 + 40) = v24;
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v17;
    *(void *)(a2 + 72) = v19;
    *(void *)(a2 + 80) = result;
    *(void *)(a2 + 88) = v20;
    *(void *)(a2 + 96) = v21;
    *(void *)(a2 + 104) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A595210@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A48A10C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A59527C(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A48A10C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t sub_24A5952F0(void *a1, unint64_t *a2)
{
  uint64_t v5 = malloc(0x31uLL);
  *a1 = v5;
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = *(_OWORD *)(v2 + 16);
  *uint64_t v5 = *(_OWORD *)v2;
  v5[1] = v10;
  __n128 v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(void *)(v2 + 48) >> 10 || result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v5 + 48) = sub_24A489C70(result, v7, v8, v9);
    return (unint64_t)sub_24A4DFA58;
  }
  return result;
}

unint64_t *sub_24A595390@<X0>(unint64_t *result@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= (unint64_t)v2[6] >> 10 && (unint64_t)v2[10] >> 10 >= v5 >> 10)
  {
    uint64_t v26 = v2[4];
    uint64_t v27 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v28 = result[7];
    unint64_t v24 = result[6];
    uint64_t v25 = v2[3];
    uint64_t v23 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    swift_unknownObjectRetain();
    unint64_t v13 = sub_24A489E5C(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    unint64_t result = (unint64_t *)sub_24A489E5C(v5, v23, v24, v28);
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v7;
    a2[3] = v25;
    a2[4] = v26;
    a2[5] = v27;
    a2[6] = v13;
    a2[7] = v15;
    a2[8] = v17;
    a2[9] = v19;
    a2[10] = result;
    a2[11] = v20;
    a2[12] = v21;
    a2[13] = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A5954AC()
{
  unint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 80);
  if (v2 >> 10 >= v1 >> 10) {
    return (v2 >> 11) - (v1 >> 11);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A5954D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v7 = *(void *)(v3 + 48) >> 10;
  unint64_t v8 = *(void *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    unint64_t result = sub_24A495EFC(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    if (result >> 10 >= v7 && v8 >= result >> 10)
    {
      *a3 = result;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A59556C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v8 = *(void *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (unint64_t v9 = *(void *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A58FD18(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

void *sub_24A595628(void *result, void *a2)
{
  unint64_t v3 = *result >> 10;
  unint64_t v4 = *(void *)(v2 + 48) >> 10;
  unint64_t v5 = *(void *)(v2 + 80) >> 10;
  unint64_t v6 = *a2 >> 10;
  if (v5 >= v6 && v6 >= v4 && v3 >= v4 && v5 >= v3) {
    return (void *)((*a2 >> 11) - (*result >> 11));
  }
  __break(1u);
  return result;
}

unint64_t sub_24A59566C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A489ED0(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A5956D8(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A489ED0(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t BigSubstring.UTF8View.index(roundingDown:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= result >> 10) {
    return sub_24A489E5C(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(roundingUp:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= v5)
  {
    unint64_t result = sub_24A489E5C(result, a2, a3, a4);
    if (v5 != result >> 10) {
      return sub_24A489ED0(result, v7, v8, v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A595808(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return MEMORY[0x263F8EE78];
  }
  if (v1 <= 0)
  {
    unint64_t v3 = (uint64_t *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979C418);
    unint64_t v3 = (uint64_t *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 17;
    }
    v3[2] = v1;
    _OWORD v3[3] = 2 * (v5 >> 4);
  }
  swift_unknownObjectRetain();
  sub_24A596394((uint64_t)v9, v3 + 4, v1);
  uint64_t v7 = v6;
  uint64_t result = swift_unknownObjectRelease();
  if (v7 == v1) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5958E4(void *a1)
{
  uint64_t v1 = a1[3];
  if (*a1) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return MEMORY[0x263F8EE78];
  }
  if (v1 <= 0)
  {
    unint64_t v3 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979C428);
    unint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    int64_t v5 = v4 - 32;
    if (v4 < 32) {
      int64_t v5 = v4 - 31;
    }
    v3[2] = v1;
    _OWORD v3[3] = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  swift_unknownObjectRetain();
  uint64_t v6 = sub_24A585B48(v8, (uint64_t)(v3 + 4), v1);
  uint64_t result = swift_unknownObjectRelease();
  if (v6 == v1) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5959C0(void *a1)
{
  uint64_t v1 = a1[4];
  if (*a1) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return MEMORY[0x263F8EE78];
  }
  if (v1 <= 0)
  {
    unint64_t v3 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_26B177C18);
    unint64_t v3 = (void *)swift_allocObject();
    size_t v4 = _swift_stdlib_malloc_size(v3);
    v3[2] = v1;
    _OWORD v3[3] = 2 * v4 - 64;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = sub_24A5964FC(v7, (uint64_t)(v3 + 4), v1);
  uint64_t result = swift_unknownObjectRelease();
  if (v5 == v1) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A595A90(void *a1)
{
  uint64_t v1 = a1[2];
  if (*a1) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return MEMORY[0x263F8EE78];
  }
  if (v1 <= 0)
  {
    unint64_t v3 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979C410);
    unint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 29;
    }
    v3[2] = v1;
    _OWORD v3[3] = 2 * (v5 >> 2);
  }
  swift_unknownObjectRetain();
  uint64_t v6 = sub_24A585C4C(v8, (uint64_t)(v3 + 4), v1);
  uint64_t result = swift_unknownObjectRelease();
  if (v6 == v1) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A595B70(uint64_t result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      uint64_t v3 = result;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26979C420);
      uint64_t v4 = swift_allocObject();
      size_t v5 = _swift_stdlib_malloc_size((const void *)v4);
      *(void *)(v4 + 16) = a2;
      *(void *)(v4 + 24) = 2 * v5 - 64;
      uint64_t v6 = sub_24A585D50(v7, (unsigned char *)(v4 + 32), a2, v3, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v6 == (void *)a2) {
        return v4;
      }
      __break(1u);
    }
    return MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

int64_t sub_24A595C2C(int64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  int64_t v2 = result;
  uint64_t v3 = 0;
  uint64_t v4 = (unint64_t *)(result + 32);
  uint64_t v5 = 8 * v1;
  uint64_t v6 = (int8x8_t *)(result + 32);
  do
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(*v6);
    v7.i16[0] = vaddlv_u8(v7);
    BOOL v8 = __OFADD__(v3, v7.u32[0]);
    v3 += v7.u32[0];
    if (v8) {
      goto LABEL_29;
    }
    ++v6;
    v5 -= 8;
  }
  while (v5);
  if (!v3) {
    return MEMORY[0x263F8EE78];
  }
  if (v3 <= 0) {
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979C408);
  uint64_t v9 = (unint64_t *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v9);
  uint64_t v10 = result - 32;
  if (result < 32) {
    uint64_t v10 = result - 25;
  }
  void v9[2] = v3;
  long long v9[3] = 2 * (v10 >> 3);
  if (*(void *)(v2 + 16)) {
    unint64_t v11 = *v4;
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  for (uint64_t i = v9 + 4; ; ++i)
  {
    if (v11)
    {
      if (v12 << 6 < 0) {
        goto LABEL_30;
      }
      unint64_t v15 = __rbit64(v11);
      v11 &= v11 - 1;
      unint64_t v16 = (v12 << 6) | __clz(v15);
      goto LABEL_15;
    }
    uint64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_31;
    }
    uint64_t v18 = *(void *)(v2 + 16);
    if (v17 >= v18) {
      goto LABEL_33;
    }
    unint64_t v19 = v4[v17];
    if (!v19) {
      break;
    }
    ++v12;
LABEL_26:
    if (v12 << 6 < 0) {
      goto LABEL_32;
    }
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_15:
    ++v13;
    *uint64_t i = v16;
    if (v13 == v3) {
      return (int64_t)v9;
    }
  }
  while (1)
  {
    uint64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v18) {
      goto LABEL_33;
    }
    unint64_t v19 = v4[v12];
    ++v17;
    if (v19) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_24A595DB8(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 <= 0)
  {
    uint64_t v4 = (unint64_t *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979C408);
    uint64_t v4 = (unint64_t *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    unint64_t v4[2] = a2;
    _OWORD v4[3] = 2 * (v6 >> 3);
  }
  uint8x8_t v7 = sub_24A585DF4(v9, v4 + 4, a2, a1);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == (void *)a2) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

unint64_t **sub_24A595E94(unint64_t **result, uint64_t a2)
{
  if (result && a2)
  {
    uint64_t v3 = (unint64_t *)result;
    uint64_t v4 = 0;
    uint64_t v5 = 8 * a2;
    uint64_t v6 = (int8x8_t *)result;
    while (1)
    {
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(*v6);
      v7.i16[0] = vaddlv_u8(v7);
      BOOL v8 = __OFADD__(v4, v7.u32[0]);
      v4 += v7.u32[0];
      if (v8) {
        break;
      }
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        if (!v4) {
          return (unint64_t **)MEMORY[0x263F8EE78];
        }
        if (v4 <= 0)
        {
          uint64_t v9 = (unint64_t *)MEMORY[0x263F8EE78];
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_26979C1E8);
          uint64_t v9 = (unint64_t *)swift_allocObject();
          int64_t v10 = _swift_stdlib_malloc_size(v9);
          uint64_t v11 = v10 - 32;
          if (v10 < 32) {
            uint64_t v11 = v10 - 25;
          }
          void v9[2] = v4;
          void v9[3] = 2 * (v11 >> 3);
        }
        uint64_t result = sub_24A585F00(&v12, v9 + 4, v4, v3, a2);
        if (result == (unint64_t **)v4) {
          return (unint64_t **)v9;
        }
LABEL_16:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  return (unint64_t **)MEMORY[0x263F8EE78];
}

unint64_t sub_24A595F8C(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >> 10 < result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 96);
    uint64_t v5 = *(void *)(a1 + 104);
    uint64_t v6 = *(void *)(a1 + 88);
    unint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 56);
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v18 = *(_OWORD *)a1;
    long long v19 = v10;
    long long v20 = *(_OWORD *)(a1 + 32);
    int64_t v11 = _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(result, v9, v7, v8, v3, v6, v4, v5);
    if (!v11) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v12 = (unint64_t *)v11;
    if (v11 <= 0)
    {
      uint64_t v13 = (uint64_t *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26979C418);
      uint64_t v13 = (uint64_t *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      void v13[2] = (uint64_t)v12;
      long long v13[3] = 2 * (v15 >> 4);
    }
    sub_24A497498(a1);
    uint64_t v16 = sub_24A596668(v17, v13 + 4, v12);
    unint64_t result = sub_24A495C98((uint64_t)v17);
    if ((unint64_t *)v16 == v12) {
      return (unint64_t)v13;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A59609C(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >> 10 < result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 96);
    uint64_t v5 = *(void *)(a1 + 104);
    uint64_t v6 = *(void *)(a1 + 88);
    unint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 56);
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v18 = *(_OWORD *)a1;
    long long v19 = v10;
    long long v20 = *(_OWORD *)(a1 + 32);
    int64_t v11 = sub_24A4897D8(result, v9, v7, v8, v3, v6, v4, v5);
    if (!v11) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v12 = v11;
    if (v11 <= 0)
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26979C428);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      int64_t v15 = v14 - 32;
      if (v14 < 32) {
        int64_t v15 = v14 - 31;
      }
      void v13[2] = v12;
      long long v13[3] = v15 & 0xFFFFFFFFFFFFFFFELL;
    }
    sub_24A497498(a1);
    uint64_t v16 = sub_24A596898((uint64_t)v17, (uint64_t)(v13 + 4), v12);
    unint64_t result = swift_unknownObjectRelease();
    if (v16 == v12) {
      return (unint64_t)v13;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5961A8(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 48);
  unint64_t v2 = *(void *)(result + 80);
  if (v2 >> 10 < v1 >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = v2 >> 11;
    unint64_t v4 = v1 >> 11;
    uint64_t v5 = v3 - v4;
    if (v3 == v4) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v7 = result;
    if (v5 <= 0)
    {
      uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_26B177C18);
      uint64_t v6 = (void *)swift_allocObject();
      size_t v8 = _swift_stdlib_malloc_size(v6);
      __n128 v6[2] = v5;
      _OWORD v6[3] = 2 * v8 - 64;
    }
    sub_24A497498(v7);
    uint64_t v9 = sub_24A596A34((uint64_t)v10, (uint64_t)(v6 + 4), v5);
    unint64_t result = swift_unknownObjectRelease();
    if (v9 == v5) {
      return (uint64_t)v6;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A596284(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >> 10 < result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 96);
    uint64_t v5 = *(void *)(a1 + 104);
    uint64_t v6 = *(void *)(a1 + 88);
    unint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 56);
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v18 = *(_OWORD *)a1;
    long long v19 = v10;
    long long v20 = *(_OWORD *)(a1 + 32);
    int64_t v11 = sub_24A4A7F58(result, v9, v7, v8, v3, v6, v4, v5);
    if (!v11) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v12 = v11;
    if (v11 <= 0)
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26979C410);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 29;
      }
      void v13[2] = v12;
      long long v13[3] = 2 * (v15 >> 2);
    }
    sub_24A497498(a1);
    uint64_t v16 = sub_24A596BE8(v17, (uint64_t)(v13 + 4), v12);
    unint64_t result = swift_unknownObjectRelease();
    if (v16 == v12) {
      return (unint64_t)v13;
    }
  }
  __break(1u);
  return result;
}