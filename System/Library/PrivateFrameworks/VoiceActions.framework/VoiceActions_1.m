uint64_t assignWithCopy for VASingleEnrollmentData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v6 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for VASingleEnrollmentData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for VASingleEnrollmentData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for VASingleEnrollmentData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26145495C);
}

uint64_t sub_26145495C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2614D4CE8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for VASingleEnrollmentData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261454A30);
}

uint64_t sub_261454A30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_2614D4CE8();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_261454AEC()
{
  uint64_t result = sub_2614D4CE8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for VAEnrollmentProgress(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VAEnrollmentProgress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VAEnrollmentProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAEnrollmentProgress()
{
  return &type metadata for VAEnrollmentProgress;
}

uint64_t dispatch thunk of VAAudioEnroller.addAudio(buffer:hostTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of VAAudioEnroller.getEnrollmentData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VAAudioEnroller.getEnrollmentProgress()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of VAAudioEnrollerDelegate.enrollmentDidComplete(VASingleEnrollmentData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of VAAudioEnrollerFactory.makeAudioEnroller(keywordIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of VAAudioEnrollmentReceiving.setAudioEnrollments(enrollments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

unsigned char *storeEnumTagSinglePayload for VASingleEnrollmentData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261454E04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentData.CodingKeys()
{
  return &type metadata for VASingleEnrollmentData.CodingKeys;
}

unsigned char *_s12VoiceActions24VASingleEnrollmentStatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261454F08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.CodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.NoneCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.SuccessCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.SuccessCodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.NoSpeechCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.NoSpeechCodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.LossyCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.LossyCodingKeys;
}

unint64_t sub_261454F84()
{
  unint64_t result = qword_26A91D870[0];
  if (!qword_26A91D870[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91D870);
  }
  return result;
}

unint64_t sub_261454FDC()
{
  unint64_t result = qword_26A91DA80[0];
  if (!qword_26A91DA80[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91DA80);
  }
  return result;
}

unint64_t sub_261455034()
{
  unint64_t result = qword_26A91DB90;
  if (!qword_26A91DB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91DB90);
  }
  return result;
}

unint64_t sub_26145508C()
{
  unint64_t result = qword_26A91DB98[0];
  if (!qword_26A91DB98[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91DB98);
  }
  return result;
}

unint64_t sub_2614550E4()
{
  unint64_t result = qword_26A91DC20;
  if (!qword_26A91DC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91DC20);
  }
  return result;
}

unint64_t sub_26145513C()
{
  unint64_t result = qword_26A91DC28[0];
  if (!qword_26A91DC28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91DC28);
  }
  return result;
}

unint64_t sub_261455194()
{
  unint64_t result = qword_26A91DCB0;
  if (!qword_26A91DCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91DCB0);
  }
  return result;
}

unint64_t sub_2614551EC()
{
  unint64_t result = qword_26A91DCB8[0];
  if (!qword_26A91DCB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91DCB8);
  }
  return result;
}

unint64_t sub_261455244()
{
  unint64_t result = qword_26A91DD40;
  if (!qword_26A91DD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91DD40);
  }
  return result;
}

unint64_t sub_26145529C()
{
  unint64_t result = qword_26A91DD48[0];
  if (!qword_26A91DD48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91DD48);
  }
  return result;
}

unint64_t sub_2614552F4()
{
  unint64_t result = qword_26A91DDD0;
  if (!qword_26A91DDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91DDD0);
  }
  return result;
}

unint64_t sub_26145534C()
{
  unint64_t result = qword_26A91DDD8[0];
  if (!qword_26A91DDD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91DDD8);
  }
  return result;
}

unint64_t sub_2614553A4()
{
  unint64_t result = qword_26A91DE60;
  if (!qword_26A91DE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91DE60);
  }
  return result;
}

unint64_t sub_2614553FC()
{
  unint64_t result = qword_26A91DE68[0];
  if (!qword_26A91DE68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91DE68);
  }
  return result;
}

uint64_t sub_261455450(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736563637573 && a2 == 0xE700000000000000 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6863656570536F6ELL && a2 == 0xE800000000000000 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7973736F6CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_2614555F4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69646465626D65 && a2 == 0xEA00000000007367 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002614E4BB0 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002614E4BD0 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6174536775626564 && a2 == 0xEF656D6172467472 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646E456775626564 && a2 == 0xED0000656D617246 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_26145597C()
{
  uint64_t v0 = sub_26142A908((uint64_t)&unk_270D570C8);
  swift_arrayDestroy();
  return v0;
}

id sub_2614559C4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000002614E4BF0 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 96))();
  }
  else
  {
    if ((a1 != 0x62616C5F74786574 || a2 != 0xEB00000000736C65) && (sub_2614D5FB8() & 1) == 0) {
      return 0;
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 120))();
  }
  char v6 = (void *)v5;
  id v7 = objc_msgSend(self, sel_featureValueWithMultiArray_, v5);

  return v7;
}

uint64_t sub_261455B94(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_261455BD4()
{
  return swift_deallocClassInstance();
}

uint64_t sub_261455C14()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = MEMORY[0x263F8D5C8];
  uint64_t v3 = MEMORY[0x263F00C60];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

uint64_t sub_261455DC8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81E0;
  *(void *)(inited + 32) = 0x74757074756FLL;
  *(void *)(inited + 40) = 0xE600000000000000;
  id v4 = objc_msgSend(self, sel_featureValueWithMultiArray_, a1);
  *(void *)(inited + 72) = sub_261405618(0, &qword_26A915338);
  *(void *)(inited + 48) = v4;
  sub_26142907C(inited);
  id v5 = objc_allocWithZone(MEMORY[0x263F00D40]);
  id v6 = sub_26142A760();

  *(void *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_261455EF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2614D4C78();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_2614198FC();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v10 = v9;
  uint64_t v11 = (void *)sub_2614D5378();
  uint64_t v12 = (void *)sub_2614D5378();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_2614D4C58();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_26145612C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2614D4C78();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v18 - v11;
  (*(void (**)(uint64_t))(v1 + 88))(v10);
  uint64_t v13 = sub_261405618(0, qword_26A915340);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  id v14 = a1;
  id v15 = sub_26142AB08((uint64_t)v9, (uint64_t)v14);
  if (v2)
  {
  }
  else
  {
    id v16 = v15;

    uint64_t v13 = (*(uint64_t (**)(id))(v3 + 96))(v16);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v13;
}

uint64_t sub_2614562EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_2614D4C78();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_2614563FC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_2614D4C78();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614564BC, 0, 0);
}

uint64_t sub_2614564BC()
{
  uint64_t v6 = v0[3];
  (*(void (**)(void))(v6 + 88))();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 128) + **(int **)(v6 + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614298B4;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return v5(v2, v3);
}

uint64_t sub_2614565C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  sub_2614D5A58();
  return swift_release();
}

uint64_t sub_261456680(uint64_t a1, uint64_t a2)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_261456748;
  return MEMORY[0x270EE7960](a1, a2);
}

uint64_t sub_261456748(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 24) = a1;
    return MEMORY[0x270FA2498](sub_261456894, 0, 0);
  }
}

uint64_t sub_261456894()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for at_verifier_rdr_125141826();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_261456908(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00DD0]), sel_init);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, id))(*(void *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_261456994(uint64_t a1, uint64_t a2)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  id v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  id v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    type metadata accessor for at_verifier_rdr_125141826Output();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v8;
    id v9 = v7;
  }
  else
  {
    id v10 = v12[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_261456A6C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_261456A90, 0, 0);
}

uint64_t sub_261456A90()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_261456B30;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return MEMORY[0x270EE7938](v3, v2);
}

uint64_t sub_261456B30(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return MEMORY[0x270FA2498](sub_261456C7C, 0, 0);
  }
}

uint64_t sub_261456C7C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for at_verifier_rdr_125141826Output();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_261456CF0(void *a1, void *a2)
{
  type metadata accessor for at_verifier_rdr_125141826Input();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 136);
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = v6(v5);
  swift_release();
  return v9;
}

uint64_t sub_261456D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A915318);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v20 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v20 - v12;
  id v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14((char *)v20 - v12, a1, v4);
  v14(v11, a2, v4);
  sub_261405618(0, (unint64_t *)&qword_26A915320);
  v14(v8, (uint64_t)v13, v4);
  sub_26142AAAC();
  v20[0] = sub_2614D5948();
  v14(v8, (uint64_t)v11, v4);
  uint64_t v15 = sub_2614D5948();
  type metadata accessor for at_verifier_rdr_125141826Input();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v20[0];
  *(void *)(v16 + 24) = v15;
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v11, v4);
  v17(v13, v4);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20[1] + 136))(v16);
  swift_release();
  return v18;
}

void sub_261456FE8(unint64_t a1, uint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2613C23AC(&qword_26A9153C0);
    sub_2614D5D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F00D18]);
  sub_2613C23AC(&qword_26A9153C0);
  uint64_t v7 = (void *)sub_2614D5648();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  uint64_t v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  id v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  id v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = v10;
    v22[0] = (id)MEMORY[0x263F8EE78];
    if (v5)
    {
      swift_bridgeObjectRetain();
      id v16 = v11;
      uint64_t v13 = sub_2614D5D98();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v14 = v11;
    }
    sub_26142A848(v13, 0);
    sub_2614D5678();
    unint64_t v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0) {
      __break(1u);
    }
    unint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        id v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for at_verifier_rdr_125141826Output();
        *(void *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        uint64_t v21 = swift_retain();
        MEMORY[0x263E36760](v21);
        if (*(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2614D5698();
        ++v19;
        sub_2614D56E8();
        sub_2614D5678();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v15 = v22[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
}

uint64_t sub_2614572C0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2614572F8(id a1, char a2)
{
  uint64_t v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if (a2)
  {
    id v7 = a1;
    v4(a1, 1);
    sub_26142ADBC(a1);
  }
  else
  {
    type metadata accessor for at_verifier_rdr_125141826();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    id v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for at_verifier_rdr_125141826()
{
  return self;
}

uint64_t type metadata accessor for at_verifier_rdr_125141826Output()
{
  return self;
}

uint64_t type metadata accessor for at_verifier_rdr_125141826Input()
{
  return self;
}

uint64_t static VAA2TBuilder.buildSpotterForAudioToTextV2(delegate:jsonConfigFilename:computeUnits:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v7 = *a4;
  uint64_t v8 = type metadata accessor for VAConfiguration();
  id v9 = static VAConfiguration.buildForFlexibleA2Tv2()();
  if (a3)
  {
    unint64_t v10 = static VAConfiguration.buildFromConfigFile(jsonFile:)();
    if (v4)
    {
LABEL_6:

      return v8;
    }
    id v11 = (void *)v10;

    id v9 = v11;
  }
  uint64_t v12 = type metadata accessor for VAA2TEncoderV2();
  LOBYTE(v35[0]) = v7;
  uint64_t v8 = v12;
  uint64_t v13 = VAA2TEncoderV2.__allocating_init(computeUnits:)();
  if (v4) {
    goto LABEL_6;
  }
  uint64_t v14 = v13;
  uint64_t v15 = type metadata accessor for VAA2TVerifierV2();
  LOBYTE(v33[0]) = v7;
  uint64_t v36 = type metadata accessor for VAMemoryBackedLexicon();
  v37 = &off_270D554E8;
  v35[0] = sub_261405754();
  uint64_t v17 = sub_26142AF74((unsigned __int8 *)v33, (uint64_t)v35);
  type metadata accessor for VAResultGeneratorVerifier();
  uint64_t v36 = v15;
  v37 = &protocol witness table for VAA2TVerifierV2;
  v35[0] = v17;
  swift_retain();
  unint64_t v18 = v9;
  uint64_t v19 = VAResultGeneratorVerifier.__allocating_init(subVerifier:config:)((uint64_t)v35, (uint64_t)v18);
  uint64_t v38 = v17;
  uint64_t v20 = v19;
  type metadata accessor for VASilenceModel();
  uint64_t v21 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v18) + 0xE0))();
  unint64_t v23 = v22;
  sub_2613B9FE8(v35);
  LOBYTE(v33[0]) = v35[0];
  uint64_t v24 = sub_26144A108(v21, v23, (unsigned __int8 *)v33);
  uint64_t v32 = v20;
  type metadata accessor for VAFeatureExtract();
  id v25 = VAFeatureExtract.__allocating_init()();
  type metadata accessor for VAFeatureExtractingEncoder();
  uint64_t v36 = v12;
  v37 = &protocol witness table for VAA2TEncoderV2;
  v35[0] = v14;
  v26 = v18;
  swift_retain();
  id v27 = v25;
  swift_retain();
  char v28 = sub_2613D04A8();
  uint64_t v29 = VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)((uint64_t)v35, v27, v24, v26, v28 & 1);
  uint64_t v30 = type metadata accessor for VAStrategyProviderPassthrough();
  uint64_t v31 = sub_26141BF64();
  type metadata accessor for VAFlexibleKeywordSpotter();
  uint64_t v36 = v30;
  v37 = &protocol witness table for VAStrategyProviderPassthrough;
  uint64_t v34 = 0;
  v35[0] = v31;
  memset(v33, 0, sizeof(v33));
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = (uint64_t)VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(a1, v32, v29, v26, (uint64_t)v35, (uint64_t)v33);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v8;
}

uint64_t VAA2TBuilder.deinit()
{
  return v0;
}

uint64_t VAA2TBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VAA2TBuilder()
{
  return self;
}

uint64_t method lookup function for VAA2TBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2TBuilder);
}

uint64_t sub_2614577D4()
{
  uint64_t v0 = swift_allocObject();
  sub_26145780C();
  return v0;
}

void sub_26145780C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2614D49B8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *sub_26145CFAC();
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v1[2] = v6;
  char v7 = sub_26145CF90();
  if (*v7 + 0x4000000000000000 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  float v8 = ceilf(log2f((float)(2 * *v7)));
  if ((~LODWORD(v8) & 0x7F800000) == 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v8 <= -1.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v8 >= 1.8447e19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v1[4] = 0;
  v1[3] = (unint64_t)v8;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8CD08], v2);
  type metadata accessor for DSPSplitComplex();
  sub_2613C23AC(&qword_26A914FE0);
  swift_allocObject();
  uint64_t v9 = sub_2614D4998();
  if (v9)
  {
    uint64_t v10 = v9;
    swift_beginAccess();
    v1[4] = v10;
    swift_release();
    return;
  }
LABEL_13:
  __break(1u);
}

char *sub_2614579D0(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  vDSP_Length v3 = *((void *)realp + 2);
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_31;
  }
  if (v3)
  {
    uint64_t v5 = sub_2614D56C8();
    *(void *)(v5 + 16) = v3;
    bzero((void *)(v5 + 32), 4 * v3);
    unint64_t v6 = *(void *)(a1 + 16);
    if (!v6) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    unint64_t v6 = *(void *)(a1 + 16);
    if (!v6) {
      goto LABEL_14;
    }
  }
  if (v6 > *(void *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v7 = 0;
  if (v6 < 8) {
    goto LABEL_12;
  }
  if ((unint64_t)(v5 - a1) < 0x20) {
    goto LABEL_12;
  }
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFF8;
  float v8 = (long long *)(a1 + 48);
  uint64_t v9 = (_OWORD *)(v5 + 48);
  uint64_t v10 = v6 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v11 = *v8;
    *(v9 - 1) = *(v8 - 1);
    *uint64_t v9 = v11;
    v8 += 2;
    v9 += 2;
    v10 -= 8;
  }
  while (v10);
  if (v6 != v7)
  {
LABEL_12:
    unint64_t v12 = v6 - v7;
    uint64_t v13 = 4 * v7 + 32;
    uint64_t v14 = (_DWORD *)(v5 + v13);
    uint64_t v15 = (int *)(a1 + v13);
    do
    {
      int v16 = *v15++;
      *v14++ = v16;
      --v12;
    }
    while (v12);
  }
LABEL_14:
  if (v3)
  {
    uint64_t v17 = sub_2614D56C8();
    *(void *)(v17 + 16) = v3;
    bzero((void *)(v17 + 32), 4 * v3);
    uint64_t v18 = sub_2614D56C8();
    *(void *)(v18 + 16) = v3;
    bzero((void *)(v18 + 32), 4 * v3);
    uint64_t v19 = sub_2614D56C8();
    *(void *)(v19 + 16) = v3;
    bzero((void *)(v19 + 32), 4 * v3);
    uint64_t v20 = sub_2614D56C8();
    *(void *)(v20 + 16) = v3;
    bzero((void *)(v20 + 32), 4 * v3);
  }
  else
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  v31.realp = (float *)(v18 + 32);
  v31.imagp = (float *)(v19 + 32);
  if (!(*(uint64_t (**)(void))(*(void *)realp + 104))()) {
LABEL_34:
  }
    __break(1u);
  sub_2614D49A8();
  swift_release();
  vDSP_Length v21 = *(void *)(v20 + 16);
  DSPSplitComplex __A = v31;
  vDSP_zvabs(&__A, 1, (float *)(v20 + 32), 1, v21);
  unint64_t v22 = (float *)MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v23 = sub_2614D56C8();
    *(void *)(v23 + 16) = v3;
    bzero((void *)(v23 + 32), 4 * v3);
  }
  else
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  vDSP_vmul((const float *)(v20 + 32), 1, (const float *)(v20 + 32), 1, (float *)(v23 + 32), 1, v3);
  swift_bridgeObjectRelease();
  int64_t v24 = *(void *)(v23 + 16);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    realp = (char *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  v31.realp = v22;
  swift_bridgeObjectRetain();
  sub_2613D917C(0, v24, 0);
  uint64_t v25 = 0;
  realp = (char *)v31.realp;
  unint64_t v26 = *((void *)v31.realp + 2);
  float v2 = 0.25;
  do
  {
    float v27 = *(float *)(v23 + 4 * v25 + 32);
    v31.realp = (float *)realp;
    unint64_t v28 = *((void *)realp + 3);
    if (v26 >= v28 >> 1)
    {
      sub_2613D917C(v28 > 1, v26 + 1, 1);
      realp = (char *)v31.realp;
    }
    ++v25;
    *((void *)realp + 2) = v26 + 1;
    *(float *)&realp[4 * v26++ + 32] = v27 * 0.25;
  }
  while (v24 != v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!*((void *)realp + 2))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_27:
  float v2 = *((float *)realp + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_32:
  }
    realp = sub_2613D8E30((uint64_t)realp);
  *((float *)realp + 8) = v2 * 0.5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return realp;
}

uint64_t sub_261457DD4()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FFTCalculator()
{
  return self;
}

uint64_t sub_261457EC4()
{
  uint64_t v0 = sub_26142A908((uint64_t)&unk_270D57130);
  swift_arrayDestroy();
  return v0;
}

id sub_261457F0C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000002614E4BF0 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 112))();
  }
  else if (a1 == 0x62616C5F74786574 && a2 == 0xEB00000000736C65 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 136))();
  }
  else if (a1 == 0x656C5F6F69647561 && a2 == 0xE90000000000006ELL || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 160))();
  }
  else
  {
    if ((a1 != 0x6E656C5F74786574 || a2 != 0xE800000000000000) && (sub_2614D5FB8() & 1) == 0) {
      return 0;
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 184))();
  }
  unint64_t v6 = (void *)v5;
  id v7 = objc_msgSend(self, sel_featureValueWithMultiArray_, v5);

  return v7;
}

uint64_t sub_2614581CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a4;
  uint64_t v19 = a3;
  uint64_t v7 = sub_2613C23AC(&qword_26A915318);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_261405618(0, (unint64_t *)&qword_26A915320);
  long long v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  sub_26142AAAC();
  uint64_t v20 = sub_2614D5948();
  v11(v10, a2, v7);
  uint64_t v12 = sub_2614D5948();
  v11(v10, a3, v7);
  uint64_t v13 = sub_2614D5948();
  uint64_t v14 = v22;
  v11(v10, v22, v7);
  uint64_t v15 = sub_2614D5948();
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 224))(v20, v12, v13, v15);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v17(v14, v7);
  v17(v19, v7);
  v17(v21, v7);
  v17(v23, v7);
  return v16;
}

void sub_261458404()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (void *)sub_2614D5378();
  id v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  if (!v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  id v4 = objc_msgSend(v3, sel_multiArrayValue);

  if (!v4) {
LABEL_5:
  }
    __break(1u);
}

uint64_t sub_261458498()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = MEMORY[0x263F8D5C8];
  uint64_t v3 = MEMORY[0x263F00C60];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

uint64_t sub_26145864C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81E0;
  *(void *)(inited + 32) = 0x3739315F726176;
  *(void *)(inited + 40) = 0xE700000000000000;
  id v4 = objc_msgSend(self, sel_featureValueWithMultiArray_, a1);
  *(void *)(inited + 72) = sub_261405618(0, &qword_26A915338);
  *(void *)(inited + 48) = v4;
  sub_26142907C(inited);
  id v5 = objc_allocWithZone(MEMORY[0x263F00D40]);
  id v6 = sub_26142A760();

  *(void *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_26145877C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2614D4C78();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_2614198FC();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  long long v11 = (void *)sub_2614D5378();
  uint64_t v12 = (void *)sub_2614D5378();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_2614D4C58();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2614589B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_2614D4C78();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  long long v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_261458AC4(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_2614D4C78();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_261458B84, 0, 0);
}

uint64_t sub_261458B84()
{
  uint64_t v6 = v0[3];
  (*(void (**)(void))(v6 + 88))();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 128) + **(int **)(v6 + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614298B4;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return v5(v2, v3);
}

uint64_t sub_261458C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  sub_2614D5A58();
  return swift_release();
}

uint64_t sub_261458D48(uint64_t a1, uint64_t a2)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_261458E10;
  return MEMORY[0x270EE7960](a1, a2);
}

uint64_t sub_261458E10(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 24) = a1;
    return MEMORY[0x270FA2498](sub_261458F5C, 0, 0);
  }
}

uint64_t sub_261458F5C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for _20enrollments_quant_all_verifier_aa();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_261458FD0(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00DD0]), sel_init);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, id))(*(void *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_26145905C(uint64_t a1, uint64_t a2)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  id v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  id v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    type metadata accessor for _20enrollments_quant_all_verifier_aaOutput();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v8;
    id v9 = v7;
  }
  else
  {
    id v10 = v12[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_261459134(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_261459158, 0, 0);
}

uint64_t sub_261459158()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614591F8;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return MEMORY[0x270EE7938](v3, v2);
}

uint64_t sub_2614591F8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return MEMORY[0x270FA2498](sub_261459344, 0, 0);
  }
}

uint64_t sub_261459344()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for _20enrollments_quant_all_verifier_aaOutput();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_2614593B8(void *a1, void *a2, void *a3, void *a4)
{
  type metadata accessor for _20enrollments_quant_all_verifier_aaInput();
  id v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  id v10 = *(uint64_t (**)(void *))(*(void *)v4 + 136);
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  uint64_t v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_261459478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v6 = sub_2613C23AC(&qword_26A915318);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  id v13 = (char *)&v22 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v22 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v22 - v17;
  type metadata accessor for _20enrollments_quant_all_verifier_aaInput();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v18, v22, v6);
  v19(v16, v23, v6);
  v19(v13, v24, v6);
  v19(v10, v25, v6);
  sub_2614581CC((uint64_t)v18, (uint64_t)v16, (uint64_t)v13, (uint64_t)v10);
  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v5 + 136))();
  swift_release();
  return v20;
}

void sub_261459674(unint64_t a1, uint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2613C23AC(&qword_26A9153C0);
    sub_2614D5D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F00D18]);
  sub_2613C23AC(&qword_26A9153C0);
  uint64_t v7 = (void *)sub_2614D5648();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  uint64_t v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  id v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  id v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = v10;
    v22[0] = (id)MEMORY[0x263F8EE78];
    if (v5)
    {
      swift_bridgeObjectRetain();
      id v16 = v11;
      uint64_t v13 = sub_2614D5D98();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v14 = v11;
    }
    sub_26142A848(v13, 0);
    sub_2614D5678();
    unint64_t v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0) {
      __break(1u);
    }
    unint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        id v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for _20enrollments_quant_all_verifier_aaOutput();
        *(void *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        uint64_t v21 = swift_retain();
        MEMORY[0x263E36760](v21);
        if (*(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2614D5698();
        ++v19;
        sub_2614D56E8();
        sub_2614D5678();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v15 = v22[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
}

uint64_t sub_26145994C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_261459984(id a1, char a2)
{
  uint64_t v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if (a2)
  {
    id v7 = a1;
    v4(a1, 1);
    sub_26142ADBC(a1);
  }
  else
  {
    type metadata accessor for _20enrollments_quant_all_verifier_aa();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    id v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for _20enrollments_quant_all_verifier_aa()
{
  return self;
}

uint64_t type metadata accessor for _20enrollments_quant_all_verifier_aaOutput()
{
  return self;
}

uint64_t type metadata accessor for _20enrollments_quant_all_verifier_aaInput()
{
  return self;
}

uint64_t sub_261459AA0()
{
  return swift_retain();
}

uint64_t sub_261459AD8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t sub_261459B20()
{
  return swift_retain();
}

uint64_t sub_261459B58(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t sub_261459BA0@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[14];
  uint64_t v5 = v1[15];
  uint64_t v6 = v1[16];
  uint64_t v8 = v1[17];
  uint64_t v7 = v1[18];
  uint64_t result = sub_261459C28(v3, v4, v5, v6, v8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  return result;
}

uint64_t sub_261459C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_261459C6C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[14];
  uint64_t v5 = v1[15];
  uint64_t v6 = v1[16];
  uint64_t v7 = v1[17];
  sub_261459CF8(a1, (uint64_t)(v1 + 13));
  return sub_26142887C(v3, v4, v5, v6, v7);
}

uint64_t sub_261459CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(qword_26A915858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_261459D60())()
{
  return j__swift_endAccess;
}

uint64_t sub_261459DB4()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 72)) + 0x80))();
  uint64_t v3 = (*(uint64_t (**)(void))((*v1 & *v2) + 0x100))();

  return v3;
}

uint64_t VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5)
{
  swift_allocObject();
  uint64_t v10 = sub_26145AE0C(a1, a2, a3, a4, a5);

  swift_release();
  return v10;
}

uint64_t VAFeatureExtractingEncoder.init(subEncoder:featureExtractor:vadModel:config:useCMVN:)(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v7 = sub_26145AE0C(a1, a2, a3, a4, a5);

  swift_release();
  return v7;
}

void sub_261459F50()
{
  uint64_t v2 = (void *)v0;
  type metadata accessor for VACircularMatrixBuffer();
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 72)) + 0x80);
  uint64_t v5 = (void *)v4();
  uint64_t v6 = (*(uint64_t (**)(void))((*v3 & *v5) + 0x178))();

  uint64_t v7 = (void *)v4();
  uint64_t v8 = (*(uint64_t (**)(void))((*v3 & *v7) + 0x148))();

  uint64_t v9 = v8;
  uint64_t v10 = v3;
  id v11 = sub_261488750(v6, v9);
  uint64_t v12 = (*(uint64_t (**)(void *))(*v2 + 216))(v11);
  if (v2[8])
  {
    uint64_t v13 = (void *)((uint64_t (*)(uint64_t))v4)(v12);
    uint64_t v14 = (*(uint64_t (**)(void))((*v3 & *v13) + 0x148))();

    id v15 = sub_261488750(66, v14);
    uint64_t v12 = (*(uint64_t (**)(void *))(*v2 + 240))(v15);
  }
  id v16 = (void *)((uint64_t (*)(uint64_t))v4)(v12);
  (*(void (**)(void))((*v3 & *v16) + 0x178))();

  uint64_t v24 = *(uint64_t (**)(void))(*v2 + 192);
  uint64_t v17 = v24(0);
  unint64_t v18 = (void *)((uint64_t (*)(uint64_t))v4)(v17);
  uint64_t v19 = (*(uint64_t (**)(void))((*v10 & *v18) + 0x118))();

  if (v19 < 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  if (v19)
  {
    uint64_t v20 = sub_2614D56C8();
    *(void *)(v20 + 16) = v19;
    bzero((void *)(v20 + 32), 4 * v19);
  }
  else
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  uint64_t v21 = (void *)v4();
  uint64_t v22 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v21) + 0x178))();

  if (v22 < 0) {
    goto LABEL_15;
  }
  if (v22)
  {
    uint64_t v23 = *(void (**)(uint64_t, void))(*v2 + 312);
    while (1)
    {
      v23(v20, 0);
      if (v1) {
        break;
      }
      swift_release();
      if (!--v22) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v24(0);
  }
}

uint64_t sub_26145A37C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t sub_26145A3BC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 312))(a1, 2);
}

void sub_26145A400(uint64_t a1, int a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = ((uint64_t (*)(void))(*v2)[26])();
  if (!v8)
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v22 = 0xD000000000000035;
    v22[1] = 0x80000002614E4ED0;
    swift_willThrow();
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (uint64_t (*)(void))(*v2)[23];
  if (v10() < 0)
  {
    sub_2613DC2B8();
    swift_allocError();
    unint64_t v24 = 0xD00000000000002ALL;
    uint64_t v25 = "VAFeatureExtractingEncoder not initialized";
LABEL_15:
    *uint64_t v23 = v24;
    v23[1] = (unint64_t)(v25 - 32) | 0x8000000000000000;
    swift_willThrow();
LABEL_16:
    swift_release();
    return;
  }
  int v51 = a2;
  id v11 = (void *)MEMORY[0x263F8EED0];
  v46 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2[9]) + 0x80);
  uint64_t v12 = (void *)v46();
  uint64_t v13 = (*(uint64_t (**)(void))((*v11 & *v12) + 0x118))();

  if (*(void *)(a1 + 16) != v13)
  {
    sub_2613DC2B8();
    swift_allocError();
    unint64_t v24 = 0xD000000000000033;
    uint64_t v25 = "Unexpected number of samples for feature extraction";
    goto LABEL_15;
  }
  uint64_t v14 = (void (*)(unsigned char *, void))((uint64_t (*)(unsigned char *))(*v5)[25])(v47);
  if (__OFADD__(*v15, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  ++*v15;
  v14(v47, 0);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v5[7]) + 0x170))(a1);
  v45 = v5[8];
  if (v45)
  {
    uint64_t v17 = ((uint64_t (*)(void))(*v5)[29])();
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 168))(v16);
      swift_release();
    }
  }
  ((void (*)(uint64_t *__return_ptr))(*v5)[32])(v48);
  sub_26145AFB0(v48);
  sub_261459CF8((uint64_t)v48, (uint64_t)v49);
  if (v50)
  {
    uint64_t v18 = ((uint64_t (*)(unsigned char *))(*v5)[34])(v47);
    if (!*(void *)(v19 + 32))
    {
LABEL_35:
      __break(1u);
      return;
    }
    uint64_t v20 = (void (*)(unsigned char *, uint64_t))v18;
    uint64_t v21 = sub_261495E48(v16);
    if (v3)
    {
      v20(v47, 1);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v26 = v21;
    swift_bridgeObjectRelease();
    v20(v47, 0);
    uint64_t v16 = v26;
  }
  int v27 = v51;
  (*(void (**)(uint64_t))(*(void *)v9 + 168))(v16);
  uint64_t v28 = swift_bridgeObjectRelease();
  if (v27 != 2)
  {
    if ((v27 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  uint64_t v29 = ((uint64_t (*)(uint64_t))v10)(v28);
  uint64_t v30 = (void *)v46();
  uint64_t v31 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v30) + 0x160))();

  if (!v31) {
    goto LABEL_33;
  }
  if (v29 == 0x8000000000000000 && v31 == -1) {
    goto LABEL_34;
  }
  if (v29 % v31)
  {
LABEL_23:
    uint64_t v32 = (*(uint64_t (**)(void))(*(void *)v9 + 176))();
    swift_release();
    type metadata accessor for VAFeatureExtractingEncoderOutput();
    uint64_t v33 = swift_allocObject();
    *(unsigned char *)(v33 + 16) = 0;
    *(void *)(v33 + 32) = 0;
    *(void *)(v33 + 40) = 0;
    *(void *)(v33 + 24) = v32;
    return;
  }
LABEL_25:
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v9 + 176))();
  if (!v45)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    sub_2613DC2B8();
    swift_allocError();
    unint64_t v24 = 0xD000000000000024;
    uint64_t v25 = "VAD not initialized for flex spotter";
    goto LABEL_15;
  }
  v35 = (uint64_t (*)(uint64_t))(*v5)[29];
  uint64_t v36 = swift_retain();
  uint64_t v37 = v35(v36);
  if (!v37)
  {
    swift_release();
    goto LABEL_30;
  }
  (*(void (**)(void))(*(void *)v37 + 176))();
  uint64_t v38 = (*(uint64_t (**)(void))(*v45 + 128))();
  if (v4)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  v40 = v5 + 2;
  uint64_t v42 = (uint64_t)v5[5];
  v41 = v5[6];
  sub_2613DBF24(v40, v42);
  uint64_t v43 = ((uint64_t (*)(uint64_t, uint64_t, void *))v41[1])(v34, v42, v41);
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for VAFeatureExtractingEncoderOutput();
  uint64_t v44 = swift_allocObject();
  *(unsigned char *)(v44 + 16) = 1;
  *(void *)(v44 + 24) = v34;
  *(void *)(v44 + 32) = v39;
  *(void *)(v44 + 40) = v43;
}

uint64_t VAFeatureExtractingEncoderOutput.__allocating_init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  return result;
}

void sub_26145ABCC()
{
}

uint64_t sub_26145ABFC()
{
  sub_2613DD718(v0 + 16);

  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  return sub_26142887C(v1, v2, v3, v4, v5);
}

uint64_t VAFeatureExtractingEncoder.deinit()
{
  uint64_t v0 = VAAudioEncoderModel.deinit();
  sub_2613DD718(v0 + 16);

  swift_release();
  swift_release();
  swift_release();
  sub_26142887C(*(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136));
  return v0;
}

uint64_t VAFeatureExtractingEncoder.__deallocating_deinit()
{
  VAFeatureExtractingEncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_26145ACF4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t sub_26145AD34()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t VAFeatureExtractingEncoderOutput.hasNewFeature.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t VAFeatureExtractingEncoderOutput.featureExtractionBuffer.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAFeatureExtractingEncoderOutput.vadBuffer.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAFeatureExtractingEncoderOutput.encoderOutput.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAFeatureExtractingEncoderOutput.init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  return v4;
}

uint64_t VAFeatureExtractingEncoderOutput.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAFeatureExtractingEncoderOutput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_26145AE0C(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5)
{
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(void *)(v5 + 56) = a2;
  sub_2613E3434(a1, v5 + 16);
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = -1;
  swift_retain();
  id v12 = a4;
  swift_retain();
  id v13 = a2;
  if (a5)
  {
    uint64_t v14 = sub_261495C0C();
    uint64_t v15 = sub_261495C14();
    uint64_t v16 = sub_26140C4E0();
    sub_261495C1C(v14, v15, v16, v32);
    uint64_t v17 = v32[0];
    uint64_t v18 = v32[1];
    uint64_t v19 = v32[2];
    uint64_t v20 = v32[3];
    uint64_t v22 = v32[4];
    uint64_t v21 = v32[5];
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  swift_beginAccess();
  uint64_t v23 = *(void *)(v5 + 104);
  uint64_t v24 = *(void *)(v5 + 112);
  uint64_t v25 = *(void *)(v5 + 120);
  uint64_t v26 = *(void *)(v5 + 128);
  uint64_t v27 = *(void *)(v5 + 136);
  *(void *)(v5 + 104) = v17;
  *(void *)(v5 + 112) = v18;
  *(void *)(v5 + 120) = v19;
  *(void *)(v5 + 128) = v20;
  *(void *)(v5 + 136) = v22;
  *(void *)(v5 + 144) = v21;
  sub_26142887C(v23, v24, v25, v26, v27);
  swift_release();
  uint64_t v28 = sub_26141BF74();
  uint64_t v29 = *(void (**)(uint64_t))(*(void *)v28 + 296);
  uint64_t v30 = swift_retain();
  v29(v30);
  swift_release();
  if (v6) {
    swift_release();
  }
  sub_2613DD718(a1);
  return v28;
}

uint64_t *sub_26145AFB0(uint64_t *a1)
{
  return a1;
}

uint64_t type metadata accessor for VAFeatureExtractingEncoderOutput()
{
  return self;
}

uint64_t type metadata accessor for VAFeatureExtractingEncoder()
{
  return self;
}

uint64_t method lookup function for VAFeatureExtractingEncoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAFeatureExtractingEncoder);
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.processingWindowSampleCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.predict(currFrame:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.predict(currFrame:forceEncoderCall:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t method lookup function for VAFeatureExtractingEncoderOutput(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAFeatureExtractingEncoderOutput);
}

uint64_t dispatch thunk of VAFeatureExtractingEncoderOutput.__allocating_init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VAFeatureExtractionConsuming.predict(featureExtractionBuffer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_26145B204()
{
  uint64_t v0 = sub_26142A908((uint64_t)&unk_270D571B8);
  swift_arrayDestroy();
  return v0;
}

id sub_26145B24C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000002614E4BF0 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 112))();
  }
  else if (a1 == 0x62616C5F74786574 && a2 == 0xEB00000000736C65 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 136))();
  }
  else if (a1 == 0x656C5F6F69647561 && a2 == 0xE90000000000006ELL || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 160))();
  }
  else
  {
    if ((a1 != 0x6E656C5F74786574 || a2 != 0xE800000000000000) && (sub_2614D5FB8() & 1) == 0) {
      return 0;
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 184))();
  }
  uint64_t v6 = (void *)v5;
  id v7 = objc_msgSend(self, sel_featureValueWithMultiArray_, v5);

  return v7;
}

uint64_t sub_26145B50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a4;
  uint64_t v19 = a3;
  uint64_t v7 = sub_2613C23AC(&qword_26A915318);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_261405618(0, (unint64_t *)&qword_26A915320);
  id v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  sub_26142AAAC();
  uint64_t v20 = sub_2614D5948();
  v11(v10, a2, v7);
  uint64_t v12 = sub_2614D5948();
  v11(v10, a3, v7);
  uint64_t v13 = sub_2614D5948();
  uint64_t v14 = v22;
  v11(v10, v22, v7);
  uint64_t v15 = sub_2614D5948();
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 224))(v20, v12, v13, v15);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v17(v14, v7);
  v17(v19, v7);
  v17(v21, v7);
  v17(v23, v7);
  return v16;
}

uint64_t sub_26145B744()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = MEMORY[0x263F8D5C8];
  uint64_t v3 = MEMORY[0x263F00C60];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

uint64_t sub_26145B8F8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81E0;
  *(void *)(inited + 32) = 0x3739315F726176;
  *(void *)(inited + 40) = 0xE700000000000000;
  id v4 = objc_msgSend(self, sel_featureValueWithMultiArray_, a1);
  *(void *)(inited + 72) = sub_261405618(0, &qword_26A915338);
  *(void *)(inited + 48) = v4;
  sub_26142907C(inited);
  id v5 = objc_allocWithZone(MEMORY[0x263F00D40]);
  id v6 = sub_26142A760();

  *(void *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_26145BA28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2614D4C78();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_2614198FC();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  id v11 = (void *)sub_2614D5378();
  uint64_t v12 = (void *)sub_2614D5378();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_2614D4C58();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_26145BC60(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2614D4C78();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v18 - v11;
  (*(void (**)(uint64_t))(v1 + 88))(v10);
  uint64_t v13 = sub_261405618(0, qword_26A915340);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  id v14 = a1;
  id v15 = sub_26142AB08((uint64_t)v9, (uint64_t)v14);
  if (v2)
  {
  }
  else
  {
    id v16 = v15;

    uint64_t v13 = (*(uint64_t (**)(id))(v3 + 96))(v16);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v13;
}

uint64_t sub_26145BE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_2614D4C78();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_26145BF30(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_2614D4C78();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_26145BFF0, 0, 0);
}

uint64_t sub_26145BFF0()
{
  uint64_t v6 = v0[3];
  (*(void (**)(void))(v6 + 88))();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 128) + **(int **)(v6 + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614298B4;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return v5(v2, v3);
}

uint64_t sub_26145C0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  sub_2614D5A58();
  return swift_release();
}

uint64_t sub_26145C1B4(uint64_t a1, uint64_t a2)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_26145C27C;
  return MEMORY[0x270EE7960](a1, a2);
}

uint64_t sub_26145C27C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 24) = a1;
    return MEMORY[0x270FA2498](sub_26145C3C8, 0, 0);
  }
}

uint64_t sub_26145C3C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for _3enrollments_quant_all_verifier_aa();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_26145C43C(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00DD0]), sel_init);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, id))(*(void *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_26145C4C8(uint64_t a1, uint64_t a2)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  id v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  id v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    type metadata accessor for _3enrollments_quant_all_verifier_aaOutput();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v8;
    id v9 = v7;
  }
  else
  {
    id v10 = v12[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_26145C5A0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_26145C5C4, 0, 0);
}

uint64_t sub_26145C5C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_26145C664;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return MEMORY[0x270EE7938](v3, v2);
}

uint64_t sub_26145C664(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return MEMORY[0x270FA2498](sub_26145C7B0, 0, 0);
  }
}

uint64_t sub_26145C7B0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for _3enrollments_quant_all_verifier_aaOutput();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_26145C824(void *a1, void *a2, void *a3, void *a4)
{
  type metadata accessor for _3enrollments_quant_all_verifier_aaInput();
  id v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  id v10 = *(uint64_t (**)(void *))(*(void *)v4 + 136);
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  uint64_t v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_26145C8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v6 = sub_2613C23AC(&qword_26A915318);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  id v13 = (char *)&v22 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  id v16 = (char *)&v22 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v22 - v17;
  type metadata accessor for _3enrollments_quant_all_verifier_aaInput();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v18, v22, v6);
  v19(v16, v23, v6);
  v19(v13, v24, v6);
  v19(v10, v25, v6);
  sub_26145B50C((uint64_t)v18, (uint64_t)v16, (uint64_t)v13, (uint64_t)v10);
  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v5 + 136))();
  swift_release();
  return v20;
}

void sub_26145CAE0(unint64_t a1, uint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2613C23AC(&qword_26A9153C0);
    sub_2614D5D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F00D18]);
  sub_2613C23AC(&qword_26A9153C0);
  uint64_t v7 = (void *)sub_2614D5648();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  uint64_t v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  id v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  id v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = v10;
    v22[0] = (id)MEMORY[0x263F8EE78];
    if (v5)
    {
      swift_bridgeObjectRetain();
      id v16 = v11;
      uint64_t v13 = sub_2614D5D98();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v14 = v11;
    }
    sub_26142A848(v13, 0);
    sub_2614D5678();
    unint64_t v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0) {
      __break(1u);
    }
    unint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        id v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for _3enrollments_quant_all_verifier_aaOutput();
        *(void *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        uint64_t v21 = swift_retain();
        MEMORY[0x263E36760](v21);
        if (*(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2614D5698();
        ++v19;
        sub_2614D56E8();
        sub_2614D5678();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v15 = v22[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
}

uint64_t sub_26145CDB8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_26145CDF0(id a1, char a2)
{
  uint64_t v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if (a2)
  {
    id v7 = a1;
    v4(a1, 1);
    sub_26142ADBC(a1);
  }
  else
  {
    type metadata accessor for _3enrollments_quant_all_verifier_aa();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    id v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for _3enrollments_quant_all_verifier_aa()
{
  return self;
}

uint64_t type metadata accessor for _3enrollments_quant_all_verifier_aaOutput()
{
  return self;
}

uint64_t type metadata accessor for _3enrollments_quant_all_verifier_aaInput()
{
  return self;
}

void sub_26145CF0C()
{
  qword_26A9201A8 = (uint64_t)&unk_270D57240;
}

void sub_26145CF20()
{
  qword_26A9201B0 = (uint64_t)&unk_270D576C0;
}

uint64_t sub_26145CF34()
{
  sub_261405618(0, (unint64_t *)&qword_26A9152B0);
  uint64_t result = OS_os_log.init(category:)();
  qword_26A9201B8 = result;
  return result;
}

void *sub_26145CF90()
{
  return &unk_2614DD510;
}

void sub_26145CF9C()
{
  qword_26A9201C0 = 512;
}

uint64_t *sub_26145CFAC()
{
  if (qword_26A91DF08 != -1) {
    swift_once();
  }
  return &qword_26A9201C0;
}

void sub_26145CFF8()
{
  qword_26A9201C8 = 48000;
}

id FeatureExtract.__allocating_init(config:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return FeatureExtract.init(config:)(a1);
}

id FeatureExtract.init(config:)(void *a1)
{
  v41 = a1;
  uint64_t v39 = sub_2614D59B8();
  uint64_t v43 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  id v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2614D59A8();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = sub_2614D52A8();
  MEMORY[0x270FA5388](v5 - 8);
  id v6 = &v1[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer];
  id v7 = v1;
  uint64_t v8 = *(void *)sub_2614D4D18();
  v40 = v6;
  *(void *)id v6 = v8;
  v38[3] = OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer] = v8;
  uint64_t v9 = MEMORY[0x263F8EE78];
  v38[4] = OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer] = MEMORY[0x263F8EE78];
  v38[5] = OBJC_IVAR___FeatureExtractObjc_spliceBuffer;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBuffer] = v9;
  v38[6] = OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer] = v9;
  uint64_t v10 = v9;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter] = 0;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll] = 0;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_frameCounter] = 0;
  uint64_t v11 = OBJC_IVAR___FeatureExtractObjc_fftCalculator;
  type metadata accessor for FFTCalculator();
  swift_retain_n();
  uint64_t v12 = sub_2614577D4();
  v38[2] = v11;
  *(void *)&v7[v11] = v12;
  uint64_t v13 = sub_2614D56C8();
  *(void *)(v13 + 16) = 40;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  v38[1] = OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum] = v13;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount] = 0;
  uint64_t v42 = OBJC_IVAR___FeatureExtractObjc_serialWorkQueue;
  v38[7] = sub_261405618(0, &qword_26A9151D8);
  sub_2614D5298();
  uint64_t v45 = v10;
  v38[9] = sub_261465E64((unint64_t *)&qword_26A9151E0, MEMORY[0x263F8F0F8]);
  v38[8] = sub_2613C23AC(&qword_26A9151E8);
  v38[10] = sub_2614653EC((unint64_t *)&qword_26A9151F0, &qword_26A9151E8);
  sub_2614D5BF8();
  uint64_t v14 = *MEMORY[0x263F8F130];
  id v15 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 104);
  v43 += 104;
  uint64_t v16 = v39;
  v15(v3, v14, v39);
  *(void *)&v7[v42] = sub_2614D59D8();
  uint64_t v17 = OBJC_IVAR___FeatureExtractObjc_stateAccessQueue;
  sub_2614D5288();
  uint64_t v45 = MEMORY[0x263F8EE78];
  sub_2614D5BF8();
  v15(v3, v14, v16);
  *(void *)&v7[v17] = sub_2614D59D8();
  uint64_t v18 = OBJC_IVAR___FeatureExtractObjc_dataAvailableSem;
  *(void *)&v7[v18] = dispatch_semaphore_create(0);
  uint64_t v19 = OBJC_IVAR___FeatureExtractObjc_allProcessedAfterStopSem;
  *(void *)&v7[v19] = dispatch_semaphore_create(0);
  v7[OBJC_IVAR___FeatureExtractObjc_stopSignaled] = 0;
  id v20 = (uint64_t *)&v7[OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable];
  *id v20 = 0;
  v20[1] = 0;
  v7[OBJC_IVAR___FeatureExtractObjc_isRunning] = 0;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBufferLength] = 7;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_splicedVectorDim] = 280;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer] = 0;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex] = 0;
  uint64_t v21 = OBJC_IVAR___FeatureExtractObjc_frameDuration;
  *(_DWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_frameDuration] = 1022739087;
  v7[OBJC_IVAR___FeatureExtractObjc_streamingMode] = 1;
  uint64_t v22 = OBJC_IVAR___FeatureExtractObjc_config;
  uint64_t v23 = v41;
  *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_config] = v41;
  type metadata accessor for NeuralNet();
  uint64_t v24 = v23;
  sub_26141C9C4(v24);
  if (v25)
  {
    uint64_t v26 = v40;
    *(void *)&v7[OBJC_IVAR___FeatureExtractObjc_nn] = v25;
    uint64_t v27 = qword_26A91DF10;
    swift_retain();
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v28 = qword_26A9201C8;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (*(void *)(*(void *)v26 + 16) < v28 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_261401D34(v28);
    }
    uint64_t v30 = swift_endAccess();
    uint64_t v31 = (void *)MEMORY[0x263F8EED0];
    uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v24) + 0x90))(v30);
    uint64_t v33 = (*(uint64_t (**)(void))((*v31 & *v32) + 0xE8))();

    swift_release();
    *(float *)&v7[v21] = (float)((float)v33 * 160.0) / 16000.0;

    uint64_t v34 = (objc_class *)type metadata accessor for FeatureExtract();
    v44.receiver = v7;
    v44.super_class = v34;
    id v35 = objc_msgSendSuper2(&v44, sel_init);
  }
  else
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    sub_26143039C(*v20);
    uint64_t v36 = *(void **)&v7[v22];

    type metadata accessor for FeatureExtract();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v35;
}

uint64_t type metadata accessor for FeatureExtract()
{
  return self;
}

uint64_t sub_26145D790(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable);
  *id v3 = a1;
  v3[1] = a2;
  swift_retain();
  return sub_26143039C(v4);
}

void sub_26145D85C(uint64_t a1)
{
  id v3 = *(void **)(v1 + OBJC_IVAR___FeatureExtractObjc_config);
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x90);
  id v6 = v3;
  id v7 = (void *)v5();

  (*(void (**)(uint64_t))((*v4 & *v7) + 0xA8))(a1);
}

id sub_26145DA10()
{
  return *(id *)(v0 + OBJC_IVAR___FeatureExtractObjc_config);
}

uint64_t sub_26145DA30(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR___FeatureExtractObjc_streamingMode) = result;
  return result;
}

uint64_t sub_26145DA50(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = sub_2614D5268();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2614D52A8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)&v3[OBJC_IVAR___FeatureExtractObjc_serialWorkQueue];
  id v15 = (void *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = ObjectType;
  aBlock[4] = sub_261464B68;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_26145E320;
  aBlock[3] = &unk_270D57B68;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v3;
  swift_retain();
  sub_2614D5288();
  v19[1] = MEMORY[0x263F8EE78];
  sub_261465E64(&qword_26A915948, MEMORY[0x263F8F030]);
  sub_2613C23AC(&qword_26A915950);
  sub_2614653EC(&qword_26A915958, &qword_26A915950);
  sub_2614D5BF8();
  MEMORY[0x263E36AF0](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_26145DD20(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  v62 = a3;
  int v51 = &v60;
  v52 = sub_261466DC0;
  v53 = &v54;
  uint64_t v7 = a3 + 2;
  uint64_t v8 = (uint64_t)(a3 + 5);
  swift_retain();
  unsigned __int8 v9 = sub_261466078(v7, v8, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_261466DDC);
  uint64_t result = swift_release();
  if (v9)
  {
    uint64_t v12 = a2 - a1;
    if (__OFSUB__(a2, a1))
    {
      __break(1u);
    }
    else
    {
      if (v12 <= 0) {
        return result;
      }
      uint64_t result = *v3;
      uint64_t v11 = *(void *)(*v3 + 24);
      uint64_t v13 = v11 + v12;
      if (!__OFADD__(v11, v12))
      {
        uint64_t v50 = a2 - a1;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v15 = *v3;
        if (*(void *)(*v3 + 16) < v13 || (isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_261401D34(v13);
          uint64_t v15 = *v3;
        }
        sub_261465650((void *)(v15 + 16), v15 + 40, (uint64_t)v59);
        sub_2614656FC(v50, (uint64_t)&v60);
        sub_261404234((uint64_t)&v62, (uint64_t)v63, &qword_26A914F60);
        uint64_t result = sub_261404234((uint64_t)v63, (uint64_t)v64, &qword_26A914F60);
        uint64_t v11 = v65;
        if (v65)
        {
          v49 = &v45;
          uint64_t v16 = v61;
          uint64_t v17 = MEMORY[0x270FA5388](result);
          v48 = (uint64_t *)v18;
          uint64_t v43 = v18;
          uint64_t v44 = v16;
          uint64_t v55 = a1;
          uint64_t v56 = a2;
          v57 = a3;
          MEMORY[0x270FA5388](v17);
          uint64_t v39 = &v55;
          v40 = sub_261466DFC;
          uint64_t v41 = v19;
          swift_retain();
          swift_retain();
          sub_261465FF0(v7, v8, (void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_261466E14);
          if (v20)
          {
            swift_retain();
            uint64_t result = sub_26140290C(&v55, (uint64_t)v48, v16, a1, a2, a3);
            uint64_t v11 = v58;
            uint64_t v12 = v56;
            if (v58 != v56) {
              goto LABEL_33;
            }
            swift_release();
          }
        }
        else
        {
          uint64_t v21 = v61;
          uint64_t v22 = a1 + v61;
          if (__OFADD__(a1, v61))
          {
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
          if (v22 < a1)
          {
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          if (v22 > a2)
          {
LABEL_32:
            __break(1u);
LABEL_33:
            if (v11 >= v12 || v11 < v55)
            {
LABEL_48:
              __break(1u);
              goto LABEL_49;
            }
            if (v11 < 0)
            {
LABEL_49:
              __break(1u);
              goto LABEL_50;
            }
            uint64_t v29 = v57[3];
            if (v11 >= v29)
            {
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
              goto LABEL_52;
            }
            __break(1u);
            goto LABEL_38;
          }
          v49 = &v45;
          uint64_t v47 = v64[0];
          uint64_t v46 = v64[1];
          uint64_t v23 = MEMORY[0x270FA5388](result);
          v48 = &v42;
          uint64_t v45 = v24;
          uint64_t v43 = v24;
          uint64_t v44 = v21;
          uint64_t v55 = a1;
          uint64_t v56 = v22;
          v57 = a3;
          MEMORY[0x270FA5388](v23);
          uint64_t v39 = &v55;
          v40 = sub_261466DFC;
          uint64_t v41 = v25;
          swift_retain();
          swift_retain();
          uint64_t v26 = a1 + v21;
          uint64_t v27 = (uint64_t)sub_261465FF0(v7, v8, (void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_261466EA0);
          if (v28)
          {
            swift_retain();
            uint64_t result = sub_26140290C(&v55, v45, v21, a1, v22, a3);
            uint64_t v11 = v58;
            uint64_t v29 = v56;
            if (v58 != v56)
            {
LABEL_38:
              if (v11 >= v29 || v11 < v55) {
                goto LABEL_51;
              }
              if (v11 < 0)
              {
LABEL_52:
                __break(1u);
                goto LABEL_53;
              }
              uint64_t v35 = v57[3];
              if (v11 >= v35)
              {
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
                goto LABEL_55;
              }
              __break(1u);
              goto LABEL_43;
            }
            uint64_t v27 = swift_release();
          }
          v49 = (uint64_t *)v38;
          uint64_t v30 = MEMORY[0x270FA5388](v27);
          uint64_t v31 = v47;
          uint64_t v32 = v46;
          *(void *)&v38[-16] = v47;
          *(void *)&v38[-8] = v32;
          uint64_t v55 = v26;
          uint64_t v56 = a2;
          v57 = a3;
          MEMORY[0x270FA5388](v30);
          v48 = (uint64_t *)v26;
          *(void *)&v38[-32] = &v55;
          *(void *)&v38[-24] = sub_261466DFC;
          *(void *)&v38[-16] = v33;
          swift_retain();
          sub_261465FF0(v7, v8, (void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_261466EA0);
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release_n();
            goto LABEL_24;
          }
          swift_retain();
          uint64_t result = sub_26140290C(&v55, v31, v32, (uint64_t)v48, a2, a3);
          uint64_t v11 = v58;
          uint64_t v35 = v56;
          if (v58 != v56)
          {
LABEL_43:
            if (v11 >= v35 || v11 < v55) {
              goto LABEL_54;
            }
            if (v11 < 0)
            {
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
            if (v11 >= v57[3])
            {
LABEL_56:
              __break(1u);
              return result;
            }
            __break(1u);
            goto LABEL_48;
          }
          swift_release_n();
        }
        uint64_t result = swift_release();
LABEL_24:
        uint64_t v36 = *(void *)(v15 + 24);
        uint64_t v12 = v50;
        BOOL v37 = __OFADD__(v36, v50);
        uint64_t v11 = v36 + v50;
        if (!v37)
        {
          *(void *)(v15 + 24) = v11;
          return swift_release();
        }
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_26145E320(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_26145E398()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  id v3 = *(NSObject **)&v1[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = ObjectType;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_26146543C;
  *(void *)(v5 + 24) = v4;
  v9[4] = sub_26141B214;
  v9[5] = v5;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  v9[2] = sub_261418E88;
  v9[3] = &unk_270D57BE0;
  id v6 = _Block_copy(v9);
  uint64_t v7 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v3) {
    __break(1u);
  }
  return result;
}

uint64_t *sub_26145E544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = OBJC_IVAR___FeatureExtractObjc_frameDuration;
  float v12 = *(float *)(v4 + OBJC_IVAR___FeatureExtractObjc_frameDuration);
  float v13 = (float)((float)(v12 * (float)a1) * 16000.0) + -560.0;
  if (v13 <= -9.2234e18) {
    goto LABEL_70;
  }
  if (v13 >= 9.2234e18) {
    goto LABEL_71;
  }
  uint64_t v7 = a2;
  float v14 = (float)((float)(v12 * (float)a2) * 16000.0) + 560.0;
  if ((LODWORD(v13) & 0x7F800000) == 0x7F800000 || (LODWORD(v14) & 0x7F800000) == 2139095040) {
    goto LABEL_72;
  }
  if (v14 <= -9.2234e18) {
    goto LABEL_73;
  }
  if (v14 >= 9.2234e18) {
    goto LABEL_74;
  }
  int64_t v6 = v4;
  uint64_t v8 = (uint64_t)v13;
  uint64_t v9 = OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer;
  uint64_t v16 = *(void *)(v4 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer);
  uint64_t v3 = (uint64_t)v13 - v16;
  if (__OFSUB__((uint64_t)v13, v16)) {
    goto LABEL_75;
  }
  uint64_t v5 = a3;
  unint64_t v10 = (uint64_t)v14;
  if (v3 < 0)
  {
    if (qword_26A91DF00 != -1) {
      swift_once();
    }
    sub_2613C23AC(qword_26A914E40);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_2614D81F0;
    uint64_t v18 = MEMORY[0x263F8D6C8];
    uint64_t v19 = MEMORY[0x263F8D750];
    *(void *)(v17 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v17 + 64) = v19;
    *(void *)(v17 + 32) = v8;
    uint64_t v20 = *(void *)(v4 + v9);
    *(void *)(v17 + 96) = v18;
    *(void *)(v17 + 104) = v19;
    *(void *)(v17 + 72) = v20;
    OS_os_log.error(_:_:)((uint64_t)"startSample %d - removed %d < 0, using 0", 40, 2, v17);
    swift_bridgeObjectRelease();
    uint64_t v3 = 0;
  }
  *(void *)uint64_t v5 = v7;
  uint64_t v21 = *(void *)(v4 + v9);
  uint64_t v8 = v10 - v21;
  if (__OFSUB__(v10, v21)) {
    goto LABEL_76;
  }
  if (v8 < 0)
  {
    if (qword_26A91DF00 != -1) {
      swift_once();
    }
    sub_2613C23AC(qword_26A914E40);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_2614D81F0;
    uint64_t v23 = MEMORY[0x263F8D6C8];
    uint64_t v24 = MEMORY[0x263F8D750];
    *(void *)(v22 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v22 + 64) = v24;
    *(void *)(v22 + 32) = v10;
    uint64_t v25 = *(void *)(v4 + v9);
    *(void *)(v22 + 96) = v23;
    *(void *)(v22 + 104) = v24;
    *(void *)(v22 + 72) = v25;
    OS_os_log.error(_:_:)((uint64_t)"endSample %d - removed %d < 0, using 0", 38, 2, v22);
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
  }
  uint64_t v7 = v4 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer;
  swift_beginAccess();
  uint64_t v26 = *(void *)(*(void *)v7 + 24);
  if (v8 < v26) {
    goto LABEL_28;
  }
  uint64_t v8 = v26 - 1;
  if (__OFSUB__(v26, 1)) {
    goto LABEL_82;
  }
  uint64_t v27 = *(void *)(v4 + v9);
  BOOL v28 = __OFADD__(v8, v27);
  uint64_t v29 = v8 + v27;
  if (v28) {
    goto LABEL_83;
  }
  BOOL v28 = __OFSUB__(v29, 560);
  uint64_t v30 = v29 - 560;
  if (v28) {
    goto LABEL_84;
  }
  double v31 = (double)v30 / (float)(*(float *)(v4 + v11) * 16000.0);
  if ((~*(void *)&v31 & 0x7FF0000000000000) == 0) {
    goto LABEL_85;
  }
  if (v31 <= -9.22337204e18) {
    goto LABEL_86;
  }
  if (v31 >= 9.22337204e18) {
    goto LABEL_87;
  }
  *(void *)uint64_t v5 = (uint64_t)v31;
  if (qword_26A91DF00 != -1) {
    goto LABEL_88;
  }
  while (1)
  {
    sub_2613C23AC(qword_26A914E40);
    uint64_t v32 = swift_allocObject();
    uint64_t v33 = MEMORY[0x263F8D6C8];
    *(_OWORD *)(v32 + 16) = xmmword_2614D8200;
    uint64_t v34 = MEMORY[0x263F8D750];
    *(void *)(v32 + 56) = v33;
    *(void *)(v32 + 64) = v34;
    *(void *)(v32 + 32) = v10;
    uint64_t v35 = *(void *)(v6 + v9);
    *(void *)(v32 + 96) = v33;
    *(void *)(v32 + 104) = v34;
    *(void *)(v32 + 72) = v35;
    uint64_t v36 = *(void *)v7;
    uint64_t v37 = *(void *)(*(void *)v7 + 24);
    *(void *)(v32 + 136) = v33;
    *(void *)(v32 + 144) = v34;
    *(void *)(v32 + 112) = v37;
    uint64_t v38 = *(void *)(v36 + 24);
    *(void *)(v32 + 176) = v33;
    *(void *)(v32 + 184) = v34;
    *(void *)(v32 + 152) = v38;
    uint64_t v39 = *(void *)v5;
    *(void *)(v32 + 216) = v33;
    *(void *)(v32 + 224) = v34;
    *(void *)(v32 + 192) = v39;
    OS_os_log.error(_:_:)((uint64_t)"Getting data beyond end of buffer: (endSample %d - removed %d) > count %d, so using %d, actual end frame=%d", 107, 2, v32);
    swift_bridgeObjectRelease();
LABEL_28:
    if (__OFSUB__(v8, v3)) {
      goto LABEL_77;
    }
    if (!(v8 | v3)) {
      return 0;
    }
    double v40 = (double)(v8 - v3) / 16000.0;
    if (v8 < 0)
    {
      uint64_t v8 = *(void *)(*(void *)v7 + 24);
      if (qword_26A91DF00 != -1) {
        swift_once();
      }
      sub_2613C23AC(qword_26A914E40);
      uint64_t v5 = swift_allocObject();
      uint64_t v46 = MEMORY[0x263F8D538];
      *(_OWORD *)(v5 + 16) = xmmword_2614D81E0;
      uint64_t v47 = MEMORY[0x263F8D5B8];
      *(void *)(v5 + 56) = v46;
      *(void *)(v5 + 64) = v47;
      *(double *)(v5 + 32) = v40;
      uint64_t v43 = "Keyword may be trimmed at the end, audio duration is %5.3lf secs";
      uint64_t v44 = 64;
    }
    else
    {
      if (qword_26A91DF00 != -1) {
        swift_once();
      }
      sub_2613C23AC(qword_26A914E40);
      uint64_t v5 = swift_allocObject();
      uint64_t v41 = MEMORY[0x263F8D538];
      *(_OWORD *)(v5 + 16) = xmmword_2614D81E0;
      uint64_t v42 = MEMORY[0x263F8D5B8];
      *(void *)(v5 + 56) = v41;
      *(void *)(v5 + 64) = v42;
      *(double *)(v5 + 32) = v40;
      uint64_t v43 = "Keyword audio duration is %5.3lf secs";
      uint64_t v44 = 37;
    }
    OS_os_log.info(_:_:)((uint64_t)v43, v44, 2, v5);
    swift_bridgeObjectRelease();
    if (v8 < v3) {
      goto LABEL_78;
    }
    uint64_t v5 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_79;
    }
    v48 = *(void **)v7;
    if (*(void *)(*(void *)v7 + 24) < v5) {
      goto LABEL_80;
    }
    swift_retain();
    uint64_t v5 = sub_26140281C(v3, v8 + 1, v48);
    swift_release();
    int64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v66 = MEMORY[0x263F8EE78];
      sub_2613EB9C4(0, v6, 0);
      uint64_t v49 = 0;
      uint64_t v3 = v66;
      uint64_t v8 = 2139095040;
      uint64_t v9 = 3338666240;
      while (1)
      {
        float v50 = *(float *)(v5 + 4 * v49 + 32);
        if ((~LODWORD(v50) & 0x7F800000) == 0) {
          break;
        }
        if (v50 <= -32769.0) {
          goto LABEL_68;
        }
        if (v50 >= 32768.0) {
          goto LABEL_69;
        }
        unint64_t v10 = *(void *)(v66 + 16);
        unint64_t v51 = *(void *)(v66 + 24);
        uint64_t v7 = v10 + 1;
        if (v10 >= v51 >> 1) {
          sub_2613EB9C4(v51 > 1, v10 + 1, 1);
        }
        ++v49;
        *(void *)(v66 + 16) = v7;
        *(_WORD *)(v66 + 2 * v10 + 32) = (int)v50;
        if (v6 == v49)
        {
          swift_release();
          goto LABEL_51;
        }
      }
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    swift_release();
    uint64_t v3 = MEMORY[0x263F8EE78];
LABEL_51:
    uint64_t result = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9388]), sel_initWithCommonFormat_sampleRate_channels_interleaved_, 3, 1, 0, 16000.0);
    if (!result) {
      break;
    }
    uint64_t v5 = *(void *)(v3 + 16);
    if (!HIDWORD(v5))
    {
      v53 = result;
      uint64_t result = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93B0]), sel_initWithPCMFormat_frameCapacity_, result, v5);
      if (!result) {
        goto LABEL_90;
      }
      uint64_t v45 = result;
      objc_msgSend(result, sel_setFrameLength_, objc_msgSend(result, sel_frameCapacity));
      uint64_t result = (uint64_t *)objc_msgSend(v45, sel_int16ChannelData);
      if (!result) {
        goto LABEL_91;
      }
      unint64_t v54 = *(void *)(v3 + 16);
      if (v54)
      {
        uint64_t v55 = *result;
        if (v54 < 0x10 || (unint64_t)(v55 - v3 - 32) < 0x20)
        {
          uint64_t v56 = 0;
          goto LABEL_59;
        }
        uint64_t v56 = v54 & 0x7FFFFFFFFFFFFFF0;
        v62 = (long long *)(v3 + 48);
        v63 = (_OWORD *)(v55 + 16);
        uint64_t v64 = v54 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          long long v65 = *v62;
          *(v63 - 1) = *(v62 - 1);
          _OWORD *v63 = v65;
          v62 += 2;
          v63 += 2;
          v64 -= 16;
        }
        while (v64);
        if (v54 != v56)
        {
LABEL_59:
          unint64_t v57 = v54 - v56;
          uint64_t v58 = 2 * v56;
          v59 = (_WORD *)(v55 + v58);
          uint64_t v60 = (__int16 *)(v58 + v3 + 32);
          do
          {
            __int16 v61 = *v60++;
            *v59++ = v61;
            --v57;
          }
          while (v57);
        }
      }

      swift_bridgeObjectRelease();
      return v45;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    swift_once();
  }
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
  return result;
}

void *sub_26145ED40(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v16)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v16 = (void *(*)(uint64_t *__return_ptr, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (void *)v7;
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t result = (void *)sub_2613D919C(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v19;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v15 = v10;
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      uint64_t v17 = v11;
      uint64_t result = v16(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (void *)v7;
      }
      uint64_t v6 = 0;
      uint64_t v12 = v18;
      uint64_t v19 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (void *)sub_2613D919C(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v19;
      }
      *(void *)(v7 + 16) = v14 + 1;
      *(void *)(v7 + 8 * v14 + 32) = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v15 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (void *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_26145EE94(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_2613D917C(0, v5, 0);
    uint64_t v6 = v16;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v14 = *i;
      swift_bridgeObjectRetain();
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      int v10 = v15;
      uint64_t v16 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2613D917C(v11 > 1, v12 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(_DWORD *)(v6 + 4 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_26145EFC8(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  double v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v12 = (char *)&v26 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = sub_2614D58E8();
  if (!v18) {
    return sub_2614D56B8();
  }
  uint64_t v19 = v18;
  uint64_t v43 = sub_2614D52B8();
  uint64_t v32 = sub_2614D5CD8();
  sub_2614D5CA8();
  uint64_t v36 = v8;
  uint64_t result = sub_2614D58C8();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      uint64_t v21 = (void (*)(char *, void))sub_2614D5938();
      uint64_t v22 = v12;
      uint64_t v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      sub_2614D5CB8();
      sub_2614D5908();
      --v19;
      unint64_t v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t sub_26145F430(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  char v26 = 0;
  uint64_t v6 = *(NSObject **)&v2[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &v26;
  *(void *)(v7 + 24) = v2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_261466EBC;
  *(void *)(v8 + 24) = v7;
  uint64_t v24 = sub_26141BED4;
  uint64_t v25 = v8;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_261418E88;
  uint64_t v23 = &unk_270D57C58;
  uint64_t v9 = _Block_copy(&aBlock);
  uint64_t v10 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v26 & 1) == 0)
  {
    if (qword_26A91DF00 == -1)
    {
LABEL_6:
      sub_2613C23AC(qword_26A914E40);
      uint64_t v16 = swift_allocObject();
      uint64_t v17 = MEMORY[0x263F8D6C8];
      *(_OWORD *)(v16 + 16) = xmmword_2614D81E0;
      uint64_t v18 = MEMORY[0x263F8D750];
      *(void *)(v16 + 56) = v17;
      *(void *)(v16 + 64) = v18;
      *(void *)(v16 + 32) = a2;
      OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d float bytes when not running", 51, 2, v16);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v15 = 0;
      return sub_26143039C((uint64_t)v15);
    }
LABEL_10:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v10;
  v11[3] = a2;
  v11[4] = a1;
  v11[5] = ObjectType;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_2614658C4;
  *(void *)(v12 + 24) = v11;
  uint64_t v24 = sub_26141BED4;
  uint64_t v25 = v12;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_261418E88;
  uint64_t v23 = &unk_270D57CD0;
  uint64_t v13 = _Block_copy(&aBlock);
  v10;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_2614D5A38();
  swift_release();
  uint64_t v15 = sub_2614658C4;
  return sub_26143039C((uint64_t)v15);
}

uint64_t sub_26145F808(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  char v26 = 0;
  uint64_t v6 = *(NSObject **)&v2[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &v26;
  *(void *)(v7 + 24) = v2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_261465A68;
  *(void *)(v8 + 24) = v7;
  uint64_t v24 = sub_26141BED4;
  uint64_t v25 = v8;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_261418E88;
  uint64_t v23 = &unk_270D57D48;
  uint64_t v9 = _Block_copy(&aBlock);
  uint64_t v10 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v26 & 1) == 0)
  {
    if (qword_26A91DF00 == -1)
    {
LABEL_6:
      sub_2613C23AC(qword_26A914E40);
      uint64_t v16 = swift_allocObject();
      uint64_t v17 = MEMORY[0x263F8D6C8];
      *(_OWORD *)(v16 + 16) = xmmword_2614D81E0;
      uint64_t v18 = MEMORY[0x263F8D750];
      *(void *)(v16 + 56) = v17;
      *(void *)(v16 + 64) = v18;
      *(void *)(v16 + 32) = a2;
      OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d int16 bytes when not running", 51, 2, v16);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v15 = 0;
      return sub_26143039C((uint64_t)v15);
    }
LABEL_10:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v10;
  v11[3] = a2;
  v11[4] = a1;
  v11[5] = ObjectType;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_261465A90;
  *(void *)(v12 + 24) = v11;
  uint64_t v24 = sub_26141BED4;
  uint64_t v25 = v12;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_261418E88;
  uint64_t v23 = &unk_270D57DC0;
  uint64_t v13 = _Block_copy(&aBlock);
  v10;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_2614D5A38();
  swift_release();
  uint64_t v15 = sub_261465A90;
  return sub_26143039C((uint64_t)v15);
}

uint64_t sub_26145FBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_2614D5268();
  uint64_t v26 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_2614D52A8();
  uint64_t v7 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v9 = (char *)&ObjectType - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2614D5278();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&ObjectType - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_261405618(0, &qword_26A9151D8);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x263F8F080], v10);
  uint64_t v14 = (void *)sub_2614D59E8();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = v23;
  uint64_t v17 = v24;
  v15[2] = v3;
  v15[3] = v16;
  uint64_t v18 = ObjectType;
  v15[4] = v17;
  v15[5] = v18;
  aBlock[4] = sub_261465CD0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_26145E320;
  aBlock[3] = &unk_270D57E10;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v3;
  swift_retain();
  sub_2614D5288();
  uint64_t v27 = MEMORY[0x263F8EE78];
  sub_261465E64(&qword_26A915948, MEMORY[0x263F8F030]);
  sub_2613C23AC(&qword_26A915950);
  sub_2614653EC(&qword_26A915958, &qword_26A915950);
  sub_2614D5BF8();
  MEMORY[0x263E36AF0](0, v9, v6, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  return swift_release();
}

uint64_t sub_26145FFC0(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t sub_261460054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  LODWORD(v62) = a6;
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v53 = a1;
  uint64_t v65 = a7;
  v69[36] = *(id *)MEMORY[0x263EF8340];
  uint64_t v67 = sub_2614D4CE8();
  uint64_t v64 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v55 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_2614D4C08();
  uint64_t v8 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2614D4C78();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v57 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v66 = (char *)&v52 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v52 - v20;
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D8200;
  *(void *)(inited + 32) = sub_2614D53A8();
  *(void *)(inited + 40) = v23;
  *(void *)(inited + 72) = MEMORY[0x263F8E8F8];
  *(_DWORD *)(inited + 48) = 1819304813;
  *(void *)(inited + 80) = sub_2614D53A8();
  *(void *)(inited + 88) = v24;
  uint64_t v25 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 120) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 96) = 16;
  uint64_t v26 = sub_2614D53A8();
  uint64_t v27 = MEMORY[0x263F8D4F8];
  *(void *)(inited + 128) = v26;
  *(void *)(inited + 136) = v28;
  *(void *)(inited + 168) = v27;
  *(unsigned char *)(inited + 144) = 0;
  *(void *)(inited + 176) = sub_2614D53A8();
  *(void *)(inited + 184) = v29;
  *(void *)(inited + 216) = MEMORY[0x263F8D5C8];
  *(_DWORD *)(inited + 192) = 1182400512;
  *(void *)(inited + 224) = sub_2614D53A8();
  *(void *)(inited + 232) = v30;
  *(void *)(inited + 264) = v25;
  *(void *)(inited + 240) = 1;
  unint64_t v56 = sub_26142907C(inited);
  uint64_t v31 = NSTemporaryDirectory();
  sub_2614D53A8();

  v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v63(v13, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F06E50], v54);
  uint64_t v32 = v55;
  sub_2614D4C68();
  sub_2614D4CD8();
  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF910]), sel_init);
  objc_msgSend(v33, sel_timeIntervalSince1970);

  v69[0] = 0;
  v69[1] = (id)0xE000000000000000;
  sub_2614D5C38();
  sub_261465E64((unint64_t *)&qword_26A915960, MEMORY[0x263F07508]);
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D5848();
  sub_2614D54D8();
  int v68 = (int)v62;
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  uint64_t v34 = v66;
  sub_2614D4C48();
  swift_bridgeObjectRelease();
  uint64_t v35 = (uint64_t)v57;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v57, v34, v14);
  id v36 = objc_allocWithZone(MEMORY[0x263EF9380]);
  id v37 = sub_2614649CC(v35, v56, 3, 1);
  uint64_t v61 = v15;
  v62 = v21;
  uint64_t v38 = v64;
  v69[0] = 0;
  if (objc_msgSend(v37, sel_writeFromBuffer_error_, v53, v69))
  {
    id v39 = v69[0];

    (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v67);
    uint64_t v40 = v61;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v14);
    uint64_t v41 = v65;
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v65, v66, v14);
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = v32;
    id v44 = v69[0];
    uint64_t v45 = (void *)sub_2614D4BF8();

    swift_willThrow();
    uint64_t v46 = *(void (**)(char *, uint64_t))(v61 + 8);
    v46(v66, v14);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v43, v67);
    v46(v62, v14);
    if (qword_26A91DF00 != -1) {
      swift_once();
    }
    sub_2613C23AC(qword_26A914E40);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_2614D81E0;
    swift_getErrorValue();
    uint64_t v48 = sub_2614D6008();
    uint64_t v50 = v49;
    *(void *)(v47 + 56) = MEMORY[0x263F8D310];
    *(void *)(v47 + 64) = sub_26141EFD8();
    *(void *)(v47 + 32) = v48;
    *(void *)(v47 + 40) = v50;
    OS_os_log.error(_:_:)((uint64_t)"Error: %{public}@", 17, 2, v47);

    swift_bridgeObjectRelease();
    uint64_t v42 = 1;
    uint64_t v41 = v65;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63)(v41, v42, 1, v14);
}

uint64_t sub_261460A04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v25[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = a7;
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_2613C22A8(a1, a2);
      uint64_t v9 = a6;
      uint64_t v10 = a5;
      uint64_t v11 = a4;
      uint64_t v12 = a3;
      uint64_t v17 = sub_2614662E0((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      sub_2613C2314(a1, a2);
      break;
    case 2uLL:
      unsigned int v22 = a7;
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
      sub_2613C22A8(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v17 = sub_2614662E0(v15, v16, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      swift_release();
      swift_release();
      sub_2613C2314(a1, a2);
      uint64_t v8 = v22;
      break;
    case 3uLL:
      memset(v25, 0, 14);
      goto LABEL_5;
    default:
      v25[0] = a1;
      LOWORD(v25[1]) = a2;
      BYTE2(v25[1]) = BYTE2(a2);
      BYTE3(v25[1]) = BYTE3(a2);
      BYTE4(v25[1]) = BYTE4(a2);
      BYTE5(v25[1]) = BYTE5(a2);
LABEL_5:
      sub_261460CD8(v25, a1, a2, &v24);
      sub_2613C2314(a1, a2);
      uint64_t v17 = v24;
      break;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x3A0))(v17, v12, v11, v10, v9, v8);
  return swift_bridgeObjectRelease();
}

void *sub_261460CD8@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x261460D64);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      uint64_t result = sub_261465F50(a1, v5 / 2);
      *a4 = result;
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v5 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_261460F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  LODWORD(v71) = a6;
  uint64_t v69 = a4;
  uint64_t v70 = a5;
  uint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v61 = a7;
  v78[36] = *(id *)MEMORY[0x263EF8340];
  uint64_t v74 = sub_2614D4CE8();
  uint64_t v60 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  v75 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2614D4C08();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_2614D4C78();
  uint64_t v73 = *(void *)(v76 - 8);
  uint64_t v15 = v73;
  uint64_t v16 = MEMORY[0x270FA5388](v76);
  uint64_t v66 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v72 = (char *)&v59 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v59 - v20;
  uint64_t v59 = a1;
  unint64_t v22 = *(void *)(a1 + 16);
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D8200;
  *(void *)(inited + 32) = sub_2614D53A8();
  *(void *)(inited + 40) = v24;
  *(void *)(inited + 72) = MEMORY[0x263F8E8F8];
  *(_DWORD *)(inited + 48) = 1819304813;
  *(void *)(inited + 80) = sub_2614D53A8();
  *(void *)(inited + 88) = v25;
  uint64_t v26 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 120) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 96) = 16;
  uint64_t v27 = sub_2614D53A8();
  uint64_t v28 = MEMORY[0x263F8D4F8];
  *(void *)(inited + 128) = v27;
  *(void *)(inited + 136) = v29;
  *(void *)(inited + 168) = v28;
  *(unsigned char *)(inited + 144) = 0;
  *(void *)(inited + 176) = sub_2614D53A8();
  *(void *)(inited + 184) = v30;
  *(void *)(inited + 216) = MEMORY[0x263F8D538];
  *(void *)(inited + 192) = 0x40CF400000000000;
  *(void *)(inited + 224) = sub_2614D53A8();
  *(void *)(inited + 232) = v31;
  *(void *)(inited + 264) = v26;
  *(void *)(inited + 240) = 1;
  unint64_t v32 = sub_26142907C(inited);
  id v33 = NSTemporaryDirectory();
  sub_2614D53A8();

  v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v63 = v15 + 56;
  v62(v14, 1, 1, v76);
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v11, *MEMORY[0x263F06E50], v65);
  sub_2614D4C68();
  sub_2614D4CD8();
  id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF910]), sel_init);
  objc_msgSend(v34, sel_timeIntervalSince1970);

  v78[0] = 0;
  v78[1] = (id)0xE000000000000000;
  sub_2614D5C38();
  sub_261465E64((unint64_t *)&qword_26A915960, MEMORY[0x263F07508]);
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D54D8();
  sub_2614D5848();
  sub_2614D54D8();
  int v77 = (int)v71;
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  uint64_t v35 = v72;
  v71 = v21;
  sub_2614D4C48();
  swift_bridgeObjectRelease();
  uint64_t v36 = (uint64_t)v66;
  uint64_t v37 = v76;
  (*(void (**)(char *, char *))(v73 + 16))(v66, v35);
  id v38 = objc_allocWithZone(MEMORY[0x263EF9380]);
  swift_bridgeObjectRetain();
  id v39 = sub_2614649CC(v36, v32, 3, 1);
  id v40 = objc_allocWithZone(MEMORY[0x263EF9388]);
  uint64_t v41 = (void *)sub_2614D52C8();
  swift_bridgeObjectRelease();
  id v42 = objc_msgSend(v40, sel_initWithSettings_, v41);

  if (!v42)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (HIDWORD(v22))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v43 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93B0]), sel_initWithPCMFormat_frameCapacity_, v42, v22);
  if (!v43) {
    goto LABEL_19;
  }
  uint64_t v35 = v43;
  if (v22)
  {
    uint64_t v44 = 0;
    uint64_t v45 = v59 + 32;
    while (1)
    {
      uint64_t v46 = objc_msgSend(v35, sel_int16ChannelData);
      if (!v46) {
        break;
      }
      *(_WORD *)(*v46 + 2 * v44) = *(_WORD *)(v45 + 2 * v44);
      if (v22 == ++v44) {
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_8:
  objc_msgSend(v35, sel_setFrameLength_, v22);
  if (!v39) {
    goto LABEL_11;
  }
  v78[0] = 0;
  if (!objc_msgSend(v39, sel_writeFromBuffer_error_, v35, v78))
  {
    id v52 = v78[0];
    unint64_t v22 = sub_2614D4BF8();

    swift_willThrow();
    if (qword_26A91DF00 == -1)
    {
LABEL_13:
      sub_2613C23AC(qword_26A914E40);
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = xmmword_2614D81E0;
      swift_getErrorValue();
      uint64_t v54 = sub_2614D6008();
      uint64_t v56 = v55;
      *(void *)(v53 + 56) = MEMORY[0x263F8D310];
      *(void *)(v53 + 64) = sub_26141EFD8();
      *(void *)(v53 + 32) = v54;
      *(void *)(v53 + 40) = v56;
      OS_os_log.error(_:_:)((uint64_t)"Error: %{public}@", 17, 2, v53);
      swift_bridgeObjectRelease();

      unint64_t v57 = *(void (**)(char *, uint64_t))(v73 + 8);
      v57(v72, v37);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v75, v74);
      v57(v71, v37);
      uint64_t v51 = 1;
      uint64_t v48 = v61;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62)(v48, v51, 1, v37);
    }
LABEL_16:
    swift_once();
    goto LABEL_13;
  }
  id v47 = v78[0];

  id v42 = v39;
LABEL_11:
  uint64_t v49 = v60;
  uint64_t v48 = v61;

  (*(void (**)(char *, uint64_t))(v49 + 8))(v75, v74);
  uint64_t v50 = v73;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v37);
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v48, v72, v37);
  uint64_t v51 = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62)(v48, v51, 1, v37);
}

void sub_2614619E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR___FeatureExtractObjc_config;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___FeatureExtractObjc_config);
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x90);
  uint64_t v6 = v3;
  uint64_t v7 = (void *)v5();

  uint64_t v8 = (*(uint64_t (**)(void))((*v4 & *v7) + 0xB8))();
  uint64_t v9 = *(void **)(v1 + v2);
  uint64_t v10 = *(uint64_t (**)(void))((*v4 & *v9) + 0x90);
  uint64_t v11 = v9;
  uint64_t v12 = (void *)v10();

  uint64_t v13 = (*(uint64_t (**)(void))((*v4 & *v12) + 0xD0))();
  uint64_t v14 = v8 + v13;
  if (__OFADD__(v8, v13))
  {
    __break(1u);
    goto LABEL_6;
  }
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v17 = OBJC_IVAR___FeatureExtractObjc_spliceBufferLength;
  *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferLength) = v16;
  uint64_t v18 = (unsigned __int128)(v16 * (__int128)40) >> 64;
  uint64_t v19 = 40 * v16;
  if (v18 == v19 >> 63)
  {
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_splicedVectorDim) = v19;
    *(unsigned char *)(v1 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) = 0;
    uint64_t v20 = sub_2614D56C8();
    *(void *)(v20 + 16) = 40;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_OWORD *)(v20 + 112) = 0u;
    *(_OWORD *)(v20 + 128) = 0u;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 160) = 0u;
    *(_OWORD *)(v20 + 176) = 0u;
    uint64_t v21 = *(void **)(v1 + v2);
    unint64_t v22 = *(uint64_t (**)(void))((*v4 & *v21) + 0x90);
    uint64_t v23 = v21;
    uint64_t v24 = (void *)v22();

    uint64_t v25 = (*(uint64_t (**)(void))((*v4 & *v24) + 0x88))();
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer) = sub_2613D1BF8(v20, v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = sub_2614D56C8();
    *(void *)(v26 + 16) = 40;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_OWORD *)(v26 + 64) = 0u;
    *(_OWORD *)(v26 + 80) = 0u;
    *(_OWORD *)(v26 + 96) = 0u;
    *(_OWORD *)(v26 + 112) = 0u;
    *(_OWORD *)(v26 + 128) = 0u;
    *(_OWORD *)(v26 + 144) = 0u;
    *(_OWORD *)(v26 + 160) = 0u;
    *(_OWORD *)(v26 + 176) = 0u;
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer) = sub_2613D1BF8(v26, *(void *)(v1 + v17));
    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer) = 0;
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex) = 0;
    uint64_t v27 = (void *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer);
    swift_beginAccess();
    swift_release();
    uint64_t v28 = (void *)sub_2614D4D18();
    *uint64_t v27 = *v28;
    swift_endAccess();
    uint64_t v29 = (void *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
    swift_beginAccess();
    *uint64_t v29 = *v28;
    swift_retain();
    swift_release();
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer) = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter) = 0;
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll) = 0;
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_frameCounter) = 0;
    uint64_t v30 = sub_2614D56C8();
    *(void *)(v30 + 16) = 40;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 128) = 0u;
    *(_OWORD *)(v30 + 144) = 0u;
    *(_OWORD *)(v30 + 160) = 0u;
    *(_OWORD *)(v30 + 176) = 0u;
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum) = v30;
    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount) = 0;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_261461DCC()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer);
  uint64_t v59 = OBJC_IVAR___FeatureExtractObjc_fftCalculator;
  uint64_t result = swift_beginAccess();
  uint64_t v3 = (void *)*v1;
  if (*(uint64_t *)(*v1 + 24) >= 401)
  {
    uint64_t v4 = &unk_26A920000;
    uint64_t v58 = v1;
    while (1)
    {
      swift_retain();
      uint64_t v5 = sub_26140281C(0, 400, v3);
      uint64_t result = swift_release();
      uint64_t v6 = *(void *)(v5 + 16);
      if (qword_26A91DF18 != -1) {
        uint64_t result = swift_once();
      }
      if (v6 != *(void *)(v4[58] + 16)) {
        break;
      }
      int64_t v7 = *(void *)(v5 + 16);
      if (v7)
      {
        uint64_t v8 = 0;
        float v9 = 0.0;
        do
        {
          float v10 = *(float *)(v5 + 4 * v8++ + 32);
          float v9 = v9 + v10;
        }
        while (v7 != v8);
        float v11 = v9 / (float)v7;
        uint64_t v61 = MEMORY[0x263F8EE78];
        swift_retain();
        sub_2613D917C(0, v7, 0);
        uint64_t v12 = 0;
        uint64_t v13 = (char *)v61;
        unint64_t v14 = *(void *)(v61 + 16);
        do
        {
          float v15 = *(float *)(v5 + 4 * v12 + 32);
          unint64_t v16 = *(void *)(v61 + 24);
          if (v14 >= v16 >> 1) {
            sub_2613D917C(v16 > 1, v14 + 1, 1);
          }
          ++v12;
          *(void *)(v61 + 16) = v14 + 1;
          *(float *)(v61 + 4 * v14++ + 32) = v15 - v11;
        }
        while (v7 != v12);
        uint64_t result = swift_release_n();
      }
      else
      {
        uint64_t result = swift_release();
        uint64_t v13 = (char *)MEMORY[0x263F8EE78];
      }
      unint64_t v17 = *((void *)v13 + 2);
      if (v17 >= 2)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_2613D8E30((uint64_t)v13);
          uint64_t v13 = (char *)result;
        }
        while (1)
        {
          unint64_t v18 = v17 - 1;
          unint64_t v19 = *((void *)v13 + 2);
          if (v17 - 1 >= v19) {
            break;
          }
          if (v17 - 2 >= v19) {
            goto LABEL_73;
          }
          *(float *)&v13[4 * v17 + 28] = *(float *)&v13[4 * v17 + 28] + (float)(*(float *)&v13[4 * v17 + 24] * -0.97);
          --v17;
          if (v18 <= 1)
          {
            unint64_t v17 = *((void *)v13 + 2);
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_73:
        __break(1u);
        break;
      }
LABEL_22:
      if (!v17) {
        goto LABEL_75;
      }
      float v20 = *((float *)v13 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_2613D8E30((uint64_t)v13);
      }
      *((float *)v13 + 8) = v20 * 0.03;
      uint64_t v21 = sub_2614D56C8();
      *(void *)(v21 + 16) = 400;
      unint64_t v22 = (float *)(v21 + 32);
      bzero((void *)(v21 + 32), 0x640uLL);
      uint64_t v23 = v4[58];
      vDSP_Length v24 = *(void *)(v23 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      vDSP_vmul((const float *)v13 + 8, 1, (const float *)(v23 + 32), 1, v22, 1, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(uint64_t (**)(uint64_t))(**(void **)((char *)v60 + v59) + 136);
      swift_retain();
      uint64_t v26 = swift_bridgeObjectRetain();
      uint64_t v27 = v25(v26);
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      if (qword_26A91DF08 != -1) {
        uint64_t result = swift_once();
      }
      if (qword_26A9201C0 >= 0) {
        uint64_t v28 = qword_26A9201C0;
      }
      else {
        uint64_t v28 = qword_26A9201C0 + 1;
      }
      if (qword_26A9201C0 < -3) {
        goto LABEL_76;
      }
      uint64_t v29 = v28 >> 1;
      if (*(void *)(v27 + 16) <= v28 >> 1) {
        goto LABEL_77;
      }
      sub_2614D5FE8();
      swift_unknownObjectRetain_n();
      uint64_t v30 = swift_dynamicCastClass();
      if (!v30)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = MEMORY[0x263F8EE78];
      }
      unint64_t v31 = 2 * v29 + 3;
      uint64_t v32 = *(void *)(v30 + 16);
      swift_release();
      if (v32 == v31 >> 1)
      {
        uint64_t v33 = swift_dynamicCastClass();
        if (!v33)
        {
          swift_bridgeObjectRelease();
          uint64_t v33 = MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = sub_2613DAF94(v27, v27 + 32, 0, v31);
      }
      swift_bridgeObjectRelease();
      uint64_t result = sub_2614D56C8();
      uint64_t v34 = result;
      *(_OWORD *)(result + 32) = 0u;
      uint64_t v35 = (float *)(result + 32);
      *(void *)(result + 16) = 40;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      if (qword_26A91DF20 != -1) {
        uint64_t result = swift_once();
      }
      uint64_t v36 = qword_26A9201C0;
      if (qword_26A9201C0 < -3) {
        goto LABEL_78;
      }
      if (qword_26A9201C0 < 0) {
        uint64_t v36 = qword_26A9201C0 + 1;
      }
      vDSP_Length __P = (v36 >> 1) + 1;
      id v38 = (const float *)(qword_26A9201D8 + 32);
      swift_bridgeObjectRetain();
      vDSP_mmul((const float *)(v33 + 32), 1, v38, 1, v35, 1, 1uLL, 0x28uLL, __P);
      swift_release();
      swift_bridgeObjectRelease();
      int64_t v39 = *(void *)(v34 + 16);
      if (v39)
      {
        uint64_t v62 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_2613D917C(0, v39, 0);
        uint64_t v40 = 0;
        uint64_t v41 = v62;
        unint64_t v42 = *(void *)(v62 + 16);
        do
        {
          float v43 = *(float *)(v34 + 4 * v40 + 32);
          if (v43 <= 1.2e-38) {
            float v43 = 1.2e-38;
          }
          float v44 = logf(v43);
          unint64_t v45 = *(void *)(v62 + 24);
          if (v42 >= v45 >> 1) {
            sub_2613D917C(v45 > 1, v42 + 1, 1);
          }
          ++v40;
          *(void *)(v62 + 16) = v42 + 1;
          *(float *)(v62 + 4 * v42++ + 32) = v44;
        }
        while (v39 != v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v41 = MEMORY[0x263F8EE78];
      }
      (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v60) + 0x3D0))(v41);
      swift_bridgeObjectRelease();
      uint64_t result = *v58;
      if (*(uint64_t *)(*v58 + 24) < 160) {
        goto LABEL_79;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_2614026E8();
      }
      uint64_t v46 = *v58;
      uint64_t v47 = *(void *)(*v58 + 32);
      uint64_t v48 = *(void *)(*v58 + 16);
      if (v47 >= v48) {
        uint64_t v49 = *(void *)(*v58 + 16);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = v47 - v49;
      if (v47 + 160 >= v48) {
        uint64_t v51 = *(void *)(*v58 + 16);
      }
      else {
        uint64_t v51 = 0;
      }
      BOOL v52 = v50 >= v47 + 160 - v51 && __OFSUB__(v48, v50);
      uint64_t v4 = (void *)&unk_26A920000;
      if (v52) {
        goto LABEL_82;
      }
      BOOL v52 = __OFADD__(v47, 160);
      uint64_t v53 = v47 + 160;
      if (v52) {
        goto LABEL_80;
      }
      BOOL v54 = __OFSUB__(v53, v48);
      uint64_t v55 = v53 - v48;
      if (v55 < 0 == v54)
      {
        uint64_t v53 = v55;
        if (v54) {
          goto LABEL_83;
        }
      }
      *(void *)(v46 + 32) = v53;
      uint64_t v56 = *(void *)(v46 + 24);
      BOOL v52 = __OFSUB__(v56, 160);
      uint64_t v57 = v56 - 160;
      if (v52) {
        goto LABEL_81;
      }
      *(void *)(v46 + 24) = v57;
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v3 = (void *)*v58;
      if (*(uint64_t *)(*v58 + 24) <= 400) {
        return result;
      }
    }
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  return result;
}

uint64_t sub_2614624F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer;
  uint64_t v3 = *(void *)(*(void *)(v0 + OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer) + 16);
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR___FeatureExtractObjc_config);
  uint64_t v5 = (void *)MEMORY[0x263F8EED0];
  uint64_t v6 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x90);
  int64_t v7 = v4;
  uint64_t v8 = (void *)v6();

  uint64_t v9 = (*(uint64_t (**)(void))((*v5 & *v8) + 0x100))();
  if (v3 != v9)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v11 = *(void *)(v1 + v2);
  if (!*(void *)(v11 + 16))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*(void *)(*(void *)(v11 + 32) + 16) != *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_splicedVectorDim))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v12 = MEMORY[0x263E37580]();
  uint64_t v13 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + OBJC_IVAR___FeatureExtractObjc_nn) + 216);
  swift_retain();
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = v13(v14);
  uint64_t v38 = v17;
  uint64_t v39 = v16;
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = (char *)swift_release();
  uint64_t v18 = *(void *)(v15 + 16);
  if (!v18)
  {
LABEL_38:
    __break(1u);
    return MEMORY[0x270F9A3C0](isUniquelyReferenced_nonNull_native);
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  float v20 = (char *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v21 = *(void *)(v15 + 8 * v19 + 32);
    uint64_t v22 = *(void *)(v21 + 16);
    int64_t v23 = *((void *)v20 + 2);
    int64_t v24 = v23 + v22;
    if (__OFADD__(v23, v22))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v24 <= *((void *)v20 + 3) >> 1)
    {
      if (!*(void *)(v21 + 16)) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v23 <= v24) {
        int64_t v25 = v23 + v22;
      }
      else {
        int64_t v25 = v23;
      }
      char isUniquelyReferenced_nonNull_native = sub_2613D8310(isUniquelyReferenced_nonNull_native, v25, 1, v20);
      float v20 = isUniquelyReferenced_nonNull_native;
      if (!*(void *)(v21 + 16))
      {
LABEL_6:
        if (v22) {
          goto LABEL_30;
        }
        goto LABEL_7;
      }
    }
    uint64_t v26 = *((void *)v20 + 2);
    if ((*((void *)v20 + 3) >> 1) - v26 < v22) {
      goto LABEL_31;
    }
    char isUniquelyReferenced_nonNull_native = (char *)memcpy(&v20[4 * v26 + 32], (const void *)(v21 + 32), 4 * v22);
    if (v22)
    {
      uint64_t v27 = *((void *)v20 + 2);
      BOOL v28 = __OFADD__(v27, v22);
      uint64_t v29 = v27 + v22;
      if (v28) {
        goto LABEL_32;
      }
      *((void *)v20 + 2) = v29;
    }
LABEL_7:
    char isUniquelyReferenced_nonNull_native = (char *)swift_bridgeObjectRelease();
    ++v19;
  }
  while (v18 != v19);
  char isUniquelyReferenced_nonNull_native = (char *)swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(v15 + 16);
  if (!v30) {
    goto LABEL_38;
  }
  uint64_t v31 = *(void *)(v15 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v31 + 16);
  char isUniquelyReferenced_nonNull_native = (char *)swift_bridgeObjectRelease();
  uint64_t v33 = v30 * v32;
  if ((unsigned __int128)(v30 * (__int128)v32) >> 64 != (v30 * v32) >> 63)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((unint64_t)(v33 - 0x2000000000000000) >> 62 != 3) {
    goto LABEL_37;
  }
  id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF8F8]), sel_initWithBytes_length_, v20 + 32, 4 * v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void (**)(id, uint64_t, uint64_t))(v1 + OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable);
  if (v35)
  {
    sub_26143032C((uint64_t)v35);
    id v36 = v34;
    v35(v34, v39, v38);

    sub_26143039C((uint64_t)v35);
  }

  char isUniquelyReferenced_nonNull_native = (char *)v12;
  return MEMORY[0x270F9A3C0](isUniquelyReferenced_nonNull_native);
}

void sub_26146287C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___FeatureExtractObjc_splicedVectorDim);
  if (v1 < 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v1)
  {
    uint64_t v2 = sub_2614D56C8();
    *(void *)(v2 + 16) = v1;
    bzero((void *)(v2 + 32), 4 * v1);
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBufferLength);
  if (v3 >= v4)
  {
    unint64_t v19 = *(void *)(v2 + 16);
    if (v19)
    {
      unint64_t v20 = 0;
      uint64_t v21 = *(void *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
      uint64_t v22 = v21 + 32;
      unint64_t v23 = *(void *)(v21 + 16);
      while (1)
      {
        unint64_t v24 = v20 / 0x28;
        if (v20 / 0x28 >= v23) {
          goto LABEL_37;
        }
        uint64_t v25 = *(void *)(v22 + 8 * v24);
        if (v20 % 0x28 >= *(void *)(v25 + 16)) {
          goto LABEL_38;
        }
        if (v20 >= v19) {
          goto LABEL_39;
        }
        *(_DWORD *)(v2 + 32 + 4 * v20) = *(_DWORD *)(v25 + 32 - 160 * v24 + 4 * v20);
        if (v19 == ++v20) {
          return;
        }
      }
    }
  }
  else
  {
    BOOL v5 = __OFSUB__(v4, v3);
    unint64_t v6 = v4 - v3;
    if (v5)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    uint64_t v7 = 40 * v6;
    if ((unsigned __int128)((uint64_t)v6 * (__int128)40) >> 64 != (uint64_t)(40 * v6) >> 63)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v7 < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v7)
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v8 = *(void *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
      if (v6 >= *(void *)(v8 + 16))
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)(v8 + 8 * v6 + 32);
      uint64_t v11 = v10 + 32;
      unint64_t v12 = *(void *)(v10 + 16);
      while (v9 % 0x28 < v12)
      {
        uint64_t v13 = *(void *)(v2 + 16);
        if (v9 >= v13) {
          goto LABEL_36;
        }
        *(_DWORD *)(v2 + 32 + 4 * v9) = *(_DWORD *)(v11 - 160 * (v9 / 0x28));
        v11 += 4;
        if (v7 == ++v9)
        {
          if (v13 < v7) {
            goto LABEL_34;
          }
          goto LABEL_17;
        }
      }
      goto LABEL_35;
    }
    uint64_t v13 = *(void *)(v2 + 16);
    if (v13 < 0)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_17:
    if (v7 != v13)
    {
      if (v7 >= v13)
      {
LABEL_50:
        __break(1u);
        return;
      }
      uint64_t v14 = *(void *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
      uint64_t v15 = v14 + 32;
      uint64_t v16 = *(void *)(v14 + 16);
      while (1)
      {
        uint64_t v17 = v7 / 40;
        if (v7 / 40 >= v16) {
          goto LABEL_40;
        }
        if (v7 % 40 < 0) {
          goto LABEL_41;
        }
        uint64_t v18 = *(void *)(v15 + 8 * v17);
        if ((unint64_t)(v7 % 40) >= *(void *)(v18 + 16)) {
          goto LABEL_42;
        }
        if ((unint64_t)v7 >= *(void *)(v2 + 16)) {
          goto LABEL_43;
        }
        *(_DWORD *)(v2 + 32 + 4 * v7) = *(_DWORD *)(v18 - 160 * v17 + 4 * v7 + 32);
        if (v13 == ++v7) {
          return;
        }
      }
    }
  }
}

void sub_261462B28()
{
  uint64_t v6 = OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll;
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll);
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v0 = (void *)v1;
  *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll) = v9;
  uint64_t v10 = OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter;
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter);
  BOOL v8 = __OFADD__(v11, 1);
  uint64_t v12 = v11 + 1;
  if (v8)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter) = v12;
  unint64_t v4 = OBJC_IVAR___FeatureExtractObjc_config;
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR___FeatureExtractObjc_config);
  BOOL v5 = (void *)MEMORY[0x263F8EED0];
  uint64_t v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x90);
  uint64_t v15 = v13;
  uint64_t v2 = (void *)v14();

  uint64_t v1 = (*(uint64_t (**)(void))((*v5 & *v2) + 0xD0))();
  uint64_t v3 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v16 = *(void *)((char *)v0 + v10);
  uint64_t v17 = *(void **)((char *)v0 + v4);
  uint64_t v18 = *(uint64_t (**)(void))((*v5 & *v17) + 0x90);
  unint64_t v19 = v17;
  unint64_t v20 = (void *)v18();

  uint64_t v21 = (*(uint64_t (**)(void))((*v5 & *v20) + 0xE8))();
  if (v16 >= v21 && *(void *)((char *)v0 + v6) >= v3)
  {
    uint64_t v1 = (*(uint64_t (**)(void))((*v5 & *v0) + 0x3C0))();
    *(void *)((char *)v0 + v10) = 0;
    uint64_t v3 = OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer;
    uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)((char *)v0 + v3) = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_46;
    }
    while (1)
    {
      unint64_t v24 = v2[2];
      unint64_t v23 = v2[3];
      if (v24 >= v23 >> 1)
      {
        uint64_t v2 = sub_26140C714((void *)(v23 > 1), v24 + 1, 1, v2);
        *(void *)((char *)v0 + v3) = v2;
      }
      v2[2] = v24 + 1;
      v2[v24 + 4] = v1;
      uint64_t v25 = *(void *)(*(void *)((char *)v0 + v3) + 16);
      uint64_t v26 = *(void **)((char *)v0 + v4);
      uint64_t v27 = *(uint64_t (**)(void))((*v5 & *v26) + 0x90);
      BOOL v28 = v26;
      uint64_t v2 = (void *)v27();

      uint64_t v1 = (*(uint64_t (**)(void))((*v5 & *v2) + 0x100))();
      if (v25 != v1) {
        break;
      }
      uint64_t v29 = *(void *)((char *)v0 + v3);
      uint64_t v41 = *(void *)(v29 + 16);
      if (!v41)
      {
LABEL_33:
        (*(void (**)(void))((*v5 & *v0) + 0x3B8))();
        *(void *)((char *)v0 + v3) = MEMORY[0x263F8EE78];
        swift_bridgeObjectRelease();
        return;
      }
      unint64_t v30 = 0;
      while (v30 < *(void *)(v29 + 16))
      {
        uint64_t v43 = *(void *)(*(void *)(v29 + 8 * v30 + 32) + 16);
        if (v43)
        {
          if (qword_26A91DEF0 != -1) {
            swift_once();
          }
          if (qword_26A91DEF8 != -1) {
            swift_once();
          }
          unint64_t v4 = 0;
          BOOL v5 = (void *)qword_26A9201A8;
          uint64_t v42 = qword_26A9201A8 + 32;
          uint64_t v2 = (void *)qword_26A9201B0;
          uint64_t v31 = qword_26A9201B0 + 32;
          while (v30 < *(void *)(v29 + 16))
          {
            uint64_t v32 = *(void *)(v29 + 8 * v30 + 32);
            if (v4 >= *(void *)(v32 + 16)) {
              goto LABEL_37;
            }
            if (v4 >= v5[2]) {
              goto LABEL_38;
            }
            if (v4 >= v2[2]) {
              goto LABEL_39;
            }
            float v33 = *(float *)(v32 + 4 * v4 + 32);
            float v34 = *(float *)(v42 + 4 * v4);
            float v35 = *(float *)(v31 + 4 * v4);
            id v36 = *(void **)((char *)v0 + v3);
            char v37 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)((char *)v0 + v3) = v36;
            if ((v37 & 1) == 0)
            {
              id v36 = sub_2613D8EC8(v36);
              *(void *)((char *)v0 + v3) = v36;
            }
            if (v30 >= v36[2]) {
              goto LABEL_40;
            }
            uint64_t v38 = v36 + 4;
            uint64_t v1 = 8 * v30;
            uint64_t v39 = (char *)v36[v30 + 4];
            char v40 = swift_isUniquelyReferenced_nonNull_native();
            v38[v30] = v39;
            if ((v40 & 1) == 0)
            {
              uint64_t v39 = sub_2613D8E30((uint64_t)v39);
              v38[v30] = v39;
            }
            if (v4 >= *((void *)v39 + 2)) {
              goto LABEL_41;
            }
            *(float *)&v39[4 * v4 + 32] = (float)(v33 + v34) * v35;
            uint64_t v29 = *(void *)((char *)v0 + v3);
            if (v43 == ++v4) {
              goto LABEL_13;
            }
          }
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
LABEL_13:
        ++v30;
        BOOL v5 = (void *)MEMORY[0x263F8EED0];
        if (v30 == v41) {
          goto LABEL_33;
        }
      }
LABEL_45:
      __break(1u);
LABEL_46:
      uint64_t v2 = sub_26140C714(0, v2[2] + 1, 1, v2);
      *(void *)((char *)v0 + v3) = v2;
    }
  }
}

uint64_t sub_26146308C(uint64_t a1)
{
  if (*(void *)(a1 + 16) != 40) {
    goto LABEL_46;
  }
  uint64_t v1 = v2;
  uint64_t v4 = a1;
  uint64_t v3 = (void *)((char *)v2 + OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer);
  uint64_t v2 = *(void **)((char *)v2 + OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_47;
  }
  while (1)
  {
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1)
    {
      uint64_t v2 = sub_26140C714((void *)(v6 > 1), v7 + 1, 1, v2);
      *uint64_t v3 = v2;
    }
    v2[2] = v7 + 1;
    v2[v7 + 4] = v4;
    BOOL v8 = (void *)OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount;
    uint64_t v9 = *(void *)((char *)v1 + OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount);
    uint64_t v10 = (void *)OBJC_IVAR___FeatureExtractObjc_config;
    uint64_t v11 = *(void **)((char *)v1 + OBJC_IVAR___FeatureExtractObjc_config);
    uint64_t v12 = (void *)MEMORY[0x263F8EED0];
    uint64_t v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x90);
    uint64_t v14 = v11;
    uint64_t v15 = (void *)v13();

    uint64_t v16 = (*(uint64_t (**)(void))((*v12 & *v15) + 0x88))();
    if (v9 < v16)
    {
      uint64_t v17 = *(void *)((char *)v8 + (void)v1);
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_49;
      }
      *(void *)((char *)v8 + (void)v1) = v19;
    }
    if (!*(void *)(*v3 + 16))
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    uint64_t v20 = *(void *)(*v3 + 32);
    swift_bridgeObjectRetain();
    v88 = v3;
    sub_2614661C0(0, 1);
    uint64_t v21 = OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum;
    swift_bridgeObjectRetain();
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = sub_261463994(v22, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)((char *)v1 + v21) = v23;
    swift_bridgeObjectRelease();
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = sub_261463BB4(v24, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)((char *)v1 + v21) = v25;
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void **)((char *)v10 + (void)v1);
    uint64_t v27 = (void *)MEMORY[0x263F8EED0];
    BOOL v28 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v26) + 0x90);
    uint64_t v29 = v26;
    unint64_t v30 = (void *)v28();

    uint64_t v31 = (*(uint64_t (**)(void))((*v27 & *v30) + 0x88))();
    v85 = v8;
    uint64_t v32 = *(void *)((char *)v8 + (void)v1);
    if (v32 >= v31) {
      uint64_t v33 = v31;
    }
    else {
      uint64_t v33 = *(void *)((char *)v8 + (void)v1);
    }
    uint64_t v34 = *(void *)((char *)v1 + v21);
    int64_t v35 = *(void *)(v34 + 16);
    uint64_t v36 = MEMORY[0x263F8EE78];
    if (v35)
    {
      float v37 = (float)v33;
      uint64_t v89 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_2613D917C(0, v35, 0);
      uint64_t v38 = 0;
      uint64_t v36 = v89;
      unint64_t v39 = *(void *)(v89 + 16);
      uint64_t v15 = 0;
      do
      {
        float v40 = *(float *)(v34 + 4 * v38 + 32);
        unint64_t v41 = *(void *)(v89 + 24);
        if (v39 >= v41 >> 1) {
          sub_2613D917C(v41 > 1, v39 + 1, 1);
        }
        ++v38;
        *(void *)(v89 + 16) = v39 + 1;
        *(float *)(v89 + 4 * v39++ + 32) = v40 / v37;
      }
      while (v35 != v38);
      swift_bridgeObjectRelease();
      uint64_t v42 = v85;
      uint64_t v32 = *(void *)((char *)v85 + (void)v1);
      BOOL v8 = (void *)MEMORY[0x263F8EED0];
    }
    else
    {
      BOOL v8 = v27;
      uint64_t v15 = 0;
      uint64_t v42 = v85;
    }
    uint64_t v43 = *(void **)((char *)v10 + (void)v1);
    float v44 = *(uint64_t (**)(void))((*v8 & *v43) + 0x90);
    unint64_t v45 = v43;
    uint64_t v46 = (void *)v44();

    uint64_t v47 = (*(uint64_t (**)(void))((*v8 & *v46) + 0xA0))();
    if (v32 < v47) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v49 = *(void *)((char *)v42 + (void)v1);
    uint64_t v50 = *(void **)((char *)v10 + (void)v1);
    uint64_t v51 = *(uint64_t (**)(void))((*v8 & *v50) + 0x90);
    BOOL v52 = v50;
    uint64_t v53 = (void *)v51();

    uint64_t v54 = (*(uint64_t (**)(void))((*v8 & *v53) + 0xA0))();
    if (v49 != v54) {
      break;
    }
    uint64_t v55 = *(void **)((char *)v10 + (void)v1);
    uint64_t v56 = *(uint64_t (**)(void))((*v8 & *v55) + 0x90);
    uint64_t v57 = v55;
    uint64_t v58 = (void *)v56();

    uint64_t v16 = (*(uint64_t (**)(void))((*v8 & *v58) + 0xA0))();
    if (v16 < 0) {
      goto LABEL_50;
    }
    if (!v16) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v59 = v8;
    uint64_t v60 = 0;
    v83 = *(void (**)(uint64_t))((*v59 & *v1) + 0x3C8);
    v86 = (char *)v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer;
    v87 = v10;
    uint64_t v84 = v16;
    while (1)
    {
      uint64_t v61 = *(void **)((char *)v10 + (void)v1);
      uint64_t v3 = v1;
      uint64_t v62 = v10;
      uint64_t v63 = (void *)MEMORY[0x263F8EED0];
      uint64_t v64 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v61) + 0x90);
      uint64_t v65 = v61;
      uint64_t v66 = (void *)v64();

      uint64_t v4 = (*(uint64_t (**)(void))((*v63 & *v66) + 0x88))();
      uint64_t v67 = *(void **)((char *)v62 + (void)v3);
      uint64_t v1 = v3;
      uint64_t v68 = *(uint64_t (**)(void))((*v63 & *v67) + 0x90);
      uint64_t v69 = v67;
      uint64_t v70 = (void *)v68();

      uint64_t v2 = (void *)(*(uint64_t (**)(void))((*v63 & *v70) + 0xA0))();
      uint64_t v71 = v4 - (void)v2;
      if (__OFSUB__(v4, v2)) {
        break;
      }
      BOOL v18 = __OFADD__(v71, v60);
      unint64_t v72 = v71 + v60;
      if (v18) {
        goto LABEL_42;
      }
      if ((v72 & 0x8000000000000000) != 0) {
        goto LABEL_43;
      }
      if (v72 >= *(void *)(*v88 + 16)) {
        goto LABEL_44;
      }
      uint64_t v73 = *(void *)(*v88 + 8 * v72 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v2 = (void *)sub_261463BB4(v73, v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = v86;
      uint64_t v74 = *(void **)v86;
      char v75 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)v86 = v74;
      if ((v75 & 1) == 0)
      {
        uint64_t v74 = sub_26140C714(0, v74[2] + 1, 1, v74);
        *(void *)v86 = v74;
      }
      uint64_t v10 = v87;
      unint64_t v77 = v74[2];
      unint64_t v76 = v74[3];
      uint64_t v4 = v77 + 1;
      if (v77 >= v76 >> 1)
      {
        uint64_t v74 = sub_26140C714((void *)(v76 > 1), v77 + 1, 1, v74);
        *(void *)v86 = v74;
      }
      v74[2] = v4;
      v74[v77 + 4] = v2;
      if (!*(void *)(*(void *)v86 + 16)) {
        goto LABEL_45;
      }
      ++v60;
      swift_bridgeObjectRetain();
      sub_2614661C0(0, 1);
      uint64_t v78 = swift_bridgeObjectRelease();
      v83(v78);
      if (v84 == v60) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t v2 = sub_26140C714(0, v2[2] + 1, 1, v2);
    *uint64_t v3 = v2;
  }
  uint64_t v79 = swift_bridgeObjectRetain();
  uint64_t v15 = (void *)sub_261463BB4(v79, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = (uint64_t)v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer;
  uint64_t v10 = *(void **)((char *)v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v16 = v10;
  if (result) {
    goto LABEL_37;
  }
LABEL_51:
  uint64_t result = (uint64_t)sub_26140C714(0, v10[2] + 1, 1, v10);
  uint64_t v10 = (void *)result;
  *(void *)uint64_t v16 = result;
LABEL_37:
  unint64_t v81 = v10[2];
  unint64_t v80 = v10[3];
  if (v81 >= v80 >> 1)
  {
    uint64_t result = (uint64_t)sub_26140C714((void *)(v80 > 1), v81 + 1, 1, v10);
    uint64_t v10 = (void *)result;
    *(void *)uint64_t v16 = result;
  }
  v10[2] = v81 + 1;
  v10[v81 + 4] = v15;
  if (*(void *)(*(void *)v16 + 16))
  {
    swift_bridgeObjectRetain();
    sub_2614661C0(0, 1);
    uint64_t v82 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0x3C8))(v82);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_261463994(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v33 = MEMORY[0x263F8EE78];
  sub_2613D917C(0, v6, 0);
  int64_t v30 = v5;
  unint64_t v31 = v4;
  uint64_t v32 = a1;
  if (v6)
  {
    unint64_t v7 = (float *)(a1 + 32);
    BOOL v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v10 = v6;
    uint64_t v11 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_26;
      }
      float v12 = *v7;
      float v13 = *v8;
      unint64_t v15 = *(void *)(v33 + 16);
      unint64_t v14 = *(void *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t v28 = v11;
        uint64_t result = sub_2613D917C(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v28;
      }
      --v5;
      *(void *)(v33 + 16) = v15 + 1;
      *(float *)(v33 + 4 * v15 + 32) = v12 + v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    uint64_t v16 = 0;
    if (v6 <= v30) {
      int64_t v17 = v30;
    }
    else {
      int64_t v17 = v6;
    }
    int64_t v18 = v17 - v6;
    unint64_t v19 = v31 - v6;
    int64_t v20 = v30 - v6;
    uint64_t v21 = 4 * v6 + 32;
    uint64_t v22 = v32 + v21;
    uint64_t v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16) {
        goto LABEL_24;
      }
      if (v18 == v16) {
        goto LABEL_28;
      }
      float v24 = *(float *)(v22 + 4 * v16);
      float v25 = *(float *)(v23 + 4 * v16);
      unint64_t v27 = *(void *)(v33 + 16);
      unint64_t v26 = *(void *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        uint64_t v29 = v11;
        uint64_t result = sub_2613D917C(v26 > 1, v27 + 1, 1);
        uint64_t v11 = v29;
      }
      *(void *)(v33 + 16) = v27 + 1;
      *(float *)(v33 + 4 * v27 + 32) = v24 + v25;
      if (v19 == ++v16) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_261463BB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v33 = MEMORY[0x263F8EE78];
  sub_2613D917C(0, v6, 0);
  int64_t v30 = v5;
  unint64_t v31 = v4;
  uint64_t v32 = a1;
  if (v6)
  {
    unint64_t v7 = (float *)(a1 + 32);
    BOOL v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v10 = v6;
    uint64_t v11 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_26;
      }
      float v12 = *v7;
      float v13 = *v8;
      unint64_t v15 = *(void *)(v33 + 16);
      unint64_t v14 = *(void *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t v28 = v11;
        uint64_t result = sub_2613D917C(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v28;
      }
      --v5;
      *(void *)(v33 + 16) = v15 + 1;
      *(float *)(v33 + 4 * v15 + 32) = v12 - v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    uint64_t v16 = 0;
    if (v6 <= v30) {
      int64_t v17 = v30;
    }
    else {
      int64_t v17 = v6;
    }
    int64_t v18 = v17 - v6;
    unint64_t v19 = v31 - v6;
    int64_t v20 = v30 - v6;
    uint64_t v21 = 4 * v6 + 32;
    uint64_t v22 = v32 + v21;
    uint64_t v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16) {
        goto LABEL_24;
      }
      if (v18 == v16) {
        goto LABEL_28;
      }
      float v24 = *(float *)(v22 + 4 * v16);
      float v25 = *(float *)(v23 + 4 * v16);
      unint64_t v27 = *(void *)(v33 + 16);
      unint64_t v26 = *(void *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        uint64_t v29 = v11;
        uint64_t result = sub_2613D917C(v26 > 1, v27 + 1, 1);
        uint64_t v11 = v29;
      }
      *(void *)(v33 + 16) = v27 + 1;
      *(float *)(v33 + 4 * v27 + 32) = v24 - v25;
      if (v19 == ++v16) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void sub_261463DD4()
{
  uint64_t v0 = sub_2614D56C8();
  *(void *)(v0 + 16) = 400;
  bzero((void *)(v0 + 32), 0x640uLL);
  int64x2_t v1 = (int64x2_t)xmmword_2614DD4F0;
  int64x2_t v2 = (int64x2_t)xmmword_2614DD500;
  uint64_t v3 = 32;
  float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x43C78000u);
  float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x40490FDAu);
  float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x3F0A3D71u);
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0xBEEB851F);
  int64x2_t v10 = vdupq_n_s64(4uLL);
  do
  {
    int64x2_t v15 = v2;
    int64x2_t v16 = v1;
    float32x4_t v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v2)), vcvtq_f64_s64(v1));
    float32x4_t v20 = vdivq_f32(vmulq_f32(vaddq_f32(v4, v4), v14), v13);
    float v17 = cosf(v20.f32[1]);
    v5.f32[0] = cosf(v20.f32[0]);
    v5.f32[1] = v17;
    float32x4_t v18 = v5;
    float v6 = cosf(v20.f32[2]);
    float32x4_t v7 = v18;
    v7.f32[2] = v6;
    float32x4_t v19 = v7;
    float v8 = cosf(v20.f32[3]);
    float32x4_t v9 = v19;
    v9.f32[3] = v8;
    *(float32x4_t *)(v0 + v3) = vaddq_f32(vmulq_f32(v9, v12), v11);
    int64x2_t v1 = vaddq_s64(v16, v10);
    int64x2_t v2 = vaddq_s64(v15, v10);
    v3 += 16;
  }
  while (v3 != 1632);
  qword_26A9201D0 = v0;
}

void sub_261463F34()
{
  sub_261463F54();
  qword_26A9201D8 = v0;
}

void sub_261463F54()
{
  if (qword_26A91DF08 != -1) {
LABEL_71:
  }
    swift_once();
  uint64_t v0 = qword_26A9201C0;
  if (qword_26A9201C0 >= 0) {
    uint64_t v1 = qword_26A9201C0;
  }
  else {
    uint64_t v1 = qword_26A9201C0 + 1;
  }
  if (qword_26A9201C0 < -3)
  {
    __break(1u);
    return;
  }
  uint64_t v2 = v1 >> 1;
  uint64_t v3 = (v1 >> 1) + 1;
  if (qword_26A9201C0 < -1)
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
    if (v1 >> 1 == -1) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = sub_2614D56C8();
    *(void *)(v4 + 16) = v3;
    if (!v3) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)(v4 + 32) = 0;
  if ((unint64_t)(v0 + 1) >= 3) {
    bzero((void *)(v4 + 36), 4 * v2);
  }
LABEL_12:
  sub_2613C23AC(&qword_26A914AB8);
  float32x4_t v5 = (void *)sub_2614D56C8();
  v5[2] = 40;
  v5[4] = v4;
  float v6 = v5 + 4;
  v5[5] = v4;
  for (uint64_t i = 6; i != 44; ++i)
  {
    v5[i] = v4;
    swift_bridgeObjectRetain();
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v35 = v9 + 1;
    if (v3) {
      break;
    }
LABEL_15:
    unint64_t v9 = v35;
    if (v35 == 40) {
      goto LABEL_41;
    }
  }
  unint64_t v10 = 0;
  float v11 = (float)((float)(uint64_t)v9 * 66.864) + 98.598;
  float v12 = (float)((float)v35 * 66.864) + 98.598;
  float v13 = (float)((float)(uint64_t)(v9 + 2) * 66.864) + 98.598;
  while (1)
  {
    float v15 = (float)(logf((float)((float)((float)(16000.0 / (float)v0) * (float)(uint64_t)v10) / 700.0) + 1.0) / 2.3026)
        * 2595.0;
    if (v11 >= v15 || v15 >= v13) {
      goto LABEL_20;
    }
    unint64_t v17 = v5[2];
    if (v15 > v12)
    {
      if (v9 >= v17)
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      uint64_t v18 = v6[v9];
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v6[v9] = v18;
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_2613D8E30(v18);
        uint64_t v18 = isUniquelyReferenced_nonNull_native;
        v6[v9] = isUniquelyReferenced_nonNull_native;
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_66;
        }
      }
      if (v10 >= *(void *)(v18 + 16)) {
        goto LABEL_63;
      }
      float v14 = (float)(v13 - v15) / (float)(v13 - v12);
      goto LABEL_19;
    }
    if (v9 >= v17) {
      goto LABEL_64;
    }
    uint64_t v18 = v6[v9];
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6[v9] = v18;
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v10 & 0x8000000000000000) != 0) {
        break;
      }
      goto LABEL_35;
    }
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_2613D8E30(v18);
    uint64_t v18 = isUniquelyReferenced_nonNull_native;
    v6[v9] = isUniquelyReferenced_nonNull_native;
    if ((v10 & 0x8000000000000000) != 0) {
      break;
    }
LABEL_35:
    if (v10 >= *(void *)(v18 + 16)) {
      goto LABEL_65;
    }
    float v14 = (float)(v15 - v11) / (float)(v12 - v11);
LABEL_19:
    *(float *)(v18 + 4 * v10 + 32) = v14;
LABEL_20:
    if (v3 == ++v10) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_41:
  uint64_t v36 = v5;
  if (!v5[2])
  {
    float32x4_t v20 = (void *)MEMORY[0x263F8EE78];
    uint64_t v21 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v21) {
      goto LABEL_61;
    }
LABEL_43:
    swift_bridgeObjectRetain();
    uint64_t v22 = 0;
    uint64_t v23 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v24 = v20[v22 + 4];
      uint64_t v25 = *(void *)(v24 + 16);
      int64_t v26 = *((void *)v23 + 2);
      int64_t v27 = v26 + v25;
      if (__OFADD__(v26, v25)) {
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v28 = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (v28 && v27 <= *((void *)v23 + 3) >> 1)
      {
        if (*(void *)(v24 + 16)) {
          goto LABEL_55;
        }
      }
      else
      {
        if (v26 <= v27) {
          int64_t v29 = v26 + v25;
        }
        else {
          int64_t v29 = v26;
        }
        uint64_t v23 = sub_2613D8310(v28, v29, 1, v23);
        if (*(void *)(v24 + 16))
        {
LABEL_55:
          uint64_t v30 = *((void *)v23 + 2);
          if ((*((void *)v23 + 3) >> 1) - v30 < v25) {
            goto LABEL_69;
          }
          memcpy(&v23[4 * v30 + 32], (const void *)(v24 + 32), 4 * v25);
          if (v25)
          {
            uint64_t v31 = *((void *)v23 + 2);
            BOOL v32 = __OFADD__(v31, v25);
            uint64_t v33 = v31 + v25;
            if (v32) {
              goto LABEL_70;
            }
            *((void *)v23 + 2) = v33;
          }
          goto LABEL_45;
        }
      }
      if (v25) {
        goto LABEL_68;
      }
LABEL_45:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21 == ++v22)
      {
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
    }
  }
  uint64_t v19 = *(void *)(v5[4] + 16);
  MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
  v34[2] = &v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  float32x4_t v20 = sub_26145ED40(sub_26146690C, (uint64_t)v34, 0, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = v20[2];
  if (v21) {
    goto LABEL_43;
  }
LABEL_61:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_261464430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  MEMORY[0x270FA5388](v7);
  int64_t v29 = (char *)v26 - v8;
  uint64_t v9 = sub_2614D5AD8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  float v13 = (char *)v26 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  int64x2_t v16 = (char *)v26 - v15;
  uint64_t v28 = v3;
  sub_2614D5918();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    swift_getAssociatedTypeWitness();
    sub_2614D5718();
    return sub_2614D56B8();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
    uint64_t v18 = v29;
    uint64_t v19 = sub_2614D58F8();
    v26[1] = v26;
    MEMORY[0x270FA5388](v19);
    v26[-4] = a1;
    v26[-3] = a2;
    uint64_t v20 = v28;
    v26[-2] = v27;
    v26[-1] = v20;
    swift_getAssociatedTypeWitness();
    uint64_t v21 = sub_2614D5718();
    uint64_t v22 = v31;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v17 = sub_26145EFC8((void (*)(char *, char *))sub_261466380, (uint64_t)&v26[-6], v22, v21, MEMORY[0x263F8E628], AssociatedConformanceWitness, MEMORY[0x263F8E658], v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }
  return v17;
}

id FeatureExtract.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void FeatureExtract.init()()
{
}

id FeatureExtract.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeatureExtract();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_2614649CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  float32x4_t v5 = v4;
  v19[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v9 = (void *)sub_2614D4C38();
  uint64_t v10 = (void *)sub_2614D52C8();
  swift_bridgeObjectRelease();
  v19[0] = 0;
  id v11 = objc_msgSend(v5, sel_initForWriting_settings_commonFormat_interleaved_error_, v9, v10, a3, a4 & 1, v19);

  id v12 = v19[0];
  if (v11)
  {
    uint64_t v13 = sub_2614D4C78();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
    id v15 = v12;
    v14(a1, v13);
  }
  else
  {
    id v16 = v19[0];
    sub_2614D4BF8();

    swift_willThrow();
    uint64_t v17 = sub_2614D4C78();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
  }
  return v11;
}

uint64_t sub_261464B68()
{
  id v1 = *(char **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(NSObject **)&v1[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_261466ABC;
  *(void *)(v5 + 24) = v4;
  uint64_t v57 = sub_26141BED4;
  uint64_t v58 = v5;
  mach_timebase_info aBlock = (mach_timebase_info)MEMORY[0x263EF8330];
  uint64_t v54 = 1107296256;
  uint64_t v55 = sub_261418E88;
  uint64_t v56 = &unk_270D57F78;
  float v6 = _Block_copy(&aBlock);
  uint64_t v50 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v6)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    queue = v3;
    if (qword_26A91DF00 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  sub_2613C23AC(qword_26A914E40);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2614D81E0;
  dispatch_queue_get_label(0);
  uint64_t v8 = sub_2614D54E8();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = MEMORY[0x263F8D310];
  *(void *)(v7 + 64) = sub_26141EFD8();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  OS_os_log.info(_:_:)((uint64_t)"Start Processing in thread %s", 29, 2, v7);
  swift_bridgeObjectRelease();
  uint64_t v52 = 0;
  uint64_t v47 = mach_absolute_time();
  ((void (*)(void))v2)();
  id v11 = 0;
  id v12 = 0;
  uint64_t v48 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *(void *)v50) + 0x3B0);
  while (1)
  {
    sub_2614D5A28();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v50;
    *(void *)(v13 + 24) = &v52;
    uint64_t v14 = v50;
    sub_26143039C((uint64_t)v11);
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = sub_261466B44;
    *(void *)(v2 + 24) = v13;
    uint64_t v57 = sub_26141BED4;
    uint64_t v58 = v2;
    mach_timebase_info aBlock = (mach_timebase_info)MEMORY[0x263EF8330];
    uint64_t v54 = 1107296256;
    uint64_t v55 = sub_261418E88;
    uint64_t v56 = &unk_270D57FF0;
    id v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(queue, v15);
    _Block_release(v15);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
    uint64_t v16 = swift_release();
    if (v15)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v48(v16);
    char v51 = 0;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = &v51;
    *(void *)(v17 + 24) = v14;
    uint64_t v2 = (uint64_t)queue;
    uint64_t v18 = v14;
    sub_26143039C((uint64_t)v12);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_261466D74;
    *(void *)(v19 + 24) = v17;
    uint64_t v57 = sub_26141BED4;
    uint64_t v58 = v19;
    mach_timebase_info aBlock = (mach_timebase_info)MEMORY[0x263EF8330];
    uint64_t v54 = 1107296256;
    uint64_t v55 = sub_261418E88;
    uint64_t v56 = &unk_270D58068;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(queue, v20);
    _Block_release(v20);
    LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v20) {
      goto LABEL_21;
    }
    if (v51 == 1) {
      break;
    }
    id v12 = sub_261466D74;
    id v11 = sub_261466B44;
  }
  uint64_t v21 = &v18[OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer];
  swift_beginAccess();
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = MEMORY[0x263F8D6C8];
  uint64_t v24 = MEMORY[0x263F8D750];
  if (*(uint64_t *)(*(void *)v21 + 24) > 0) {
    goto LABEL_11;
  }
  uint64_t v25 = &v18[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer];
  uint64_t result = swift_beginAccess();
  uint64_t v27 = *(void *)(*(void *)v25 + 24);
  uint64_t v28 = *(void *)&v18[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex];
  BOOL v29 = __OFSUB__(v27, v28);
  uint64_t v30 = v27 - v28;
  if (v29)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v30 < 1)
  {
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2614D81E0;
    uint64_t v46 = v52;
    *(void *)(v31 + 56) = v23;
    *(void *)(v31 + 64) = v24;
    *(void *)(v31 + 32) = v46;
    uint64_t v34 = "Stopped after processing %d samples";
    uint64_t v35 = 35;
  }
  else
  {
LABEL_11:
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2614D81F0;
    uint64_t v32 = *(void *)(v22 + 24);
    *(void *)(v31 + 56) = v23;
    *(void *)(v31 + 64) = v24;
    *(void *)(v31 + 32) = v32;
    uint64_t v33 = v52;
    *(void *)(v31 + 96) = v23;
    *(void *)(v31 + 104) = v24;
    *(void *)(v31 + 72) = v33;
    uint64_t v34 = "Ignoring last %d of work buffer when stopping, processed total of %d bytes";
    uint64_t v35 = 74;
  }
  OS_os_log.debug(_:_:)((uint64_t)v34, v35, 2, v31);
  swift_bridgeObjectRelease();
  sub_2614D5A38();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v18;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = sub_261466D9C;
  *(void *)(v37 + 24) = v36;
  uint64_t v57 = sub_26141BED4;
  uint64_t v58 = v37;
  mach_timebase_info aBlock = (mach_timebase_info)MEMORY[0x263EF8330];
  uint64_t v54 = 1107296256;
  uint64_t v55 = sub_261418E88;
  uint64_t v56 = &unk_270D580E0;
  uint64_t v38 = _Block_copy(&aBlock);
  unint64_t v39 = v18;
  swift_retain();
  swift_release();
  dispatch_sync(queue, v38);
  _Block_release(v38);
  LOBYTE(v38) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v38)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v40 = mach_absolute_time();
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_2614D81F0;
  uint64_t v42 = v52;
  *(void *)(v41 + 56) = v23;
  *(void *)(v41 + 64) = v24;
  *(void *)(v41 + 32) = v42;
  mach_timebase_info aBlock = 0;
  uint64_t result = mach_timebase_info(&aBlock);
  double v43 = -1.0;
  if (result)
  {
LABEL_18:
    uint64_t v45 = MEMORY[0x263F8D5B8];
    *(void *)(v41 + 96) = MEMORY[0x263F8D538];
    *(void *)(v41 + 104) = v45;
    *(double *)(v41 + 72) = v43;
    OS_os_log.debug(_:_:)((uint64_t)"[TIMING] Done processing %d samples in %5.3lf secs", 50, 2, v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  unint64_t v44 = v40 - v47;
  if (v40 < v47) {
    goto LABEL_26;
  }
  if (!is_mul_ok(v44, aBlock.numer))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (aBlock.denom)
  {
    double v43 = (double)(v44 * aBlock.numer / aBlock.denom) / 1000000000.0;
    goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2614653D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_2614653E4()
{
  return swift_release();
}

uint64_t sub_2614653EC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2613C5EC8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_26146543C()
{
  id v1 = *(void **)(v0 + 16);
  if (*((unsigned char *)v1 + OBJC_IVAR___FeatureExtractObjc_isRunning) != 1) {
    return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x3A8))();
  }
  if (qword_26A91DF00 != -1) {
    swift_once();
  }
  return OS_os_log.info(_:_:)((uint64_t)"Ignoring reset when running", 27, 2, MEMORY[0x263F8EE78]);
}

uint64_t sub_261465504()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_261465514(char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = *a3;
  uint64_t v5 = *(void *)(*a3 + 24);
  uint64_t v6 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (*(void *)(*a3 + 16) >= v6 && (result & 1) != 0)
  {
    if (a2 < 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_261401D34(v6);
    if (a2 < 1) {
      return result;
    }
  }
  uint64_t v9 = *a3;
  uint64_t result = *(void *)(*a3 + 24);
  uint64_t v10 = result + a2;
  if (__OFADD__(result, a2)) {
    goto LABEL_14;
  }
  *(void *)(v9 + 24) = v10;
  if (v10 < result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  sub_261402670(result, v10, (uint64_t *)(v9 + 16), v9 + 40, (uint64_t)&v13);
  long long v17 = v13;
  sub_261404234((uint64_t)&v17, (uint64_t)v18, &qword_26A914F70);
  sub_261404234((uint64_t)v18, (uint64_t)&v24, &qword_26A914F70);
  uint64_t v11 = v14;
  uint64_t v12 = v15;
  if (v16 & 1 | (v15 == 0))
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v19 = v24;
  uint64_t v20 = *((void *)&v17 + 1);
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  char v23 = v16 & 1 | (v15 == 0);
  return (uint64_t)sub_261401FEC(a1, a2);
}

void *sub_261465650@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result[1];
  uint64_t v3 = result[2];
  uint64_t v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = *result;
    BOOL v7 = __OFSUB__(v5, *result);
    if (v5 < *result) {
      goto LABEL_9;
    }
    v5 -= *result;
    if (!v7) {
      goto LABEL_9;
    }
    __break(1u);
  }
  uint64_t v6 = *result;
  if (v5 < 0)
  {
    BOOL v7 = __OFADD__(v5, v6);
    v5 += v6;
    if (v7) {
      goto LABEL_26;
    }
  }
LABEL_9:
  if (v4 >= v6) {
    goto LABEL_14;
  }
  if (v5 < v3)
  {
    uint64_t v8 = v3 - v5;
    if (!__OFSUB__(v3, v5)) {
      goto LABEL_15;
    }
    __break(1u);
LABEL_14:
    uint64_t v8 = 0;
LABEL_15:
    uint64_t v9 = 0;
    uint64_t v3 = 0;
    BOOL v10 = 1;
LABEL_22:
    *(void *)a3 = a2 + 4 * v5;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = v3;
    *(unsigned char *)(a3 + 32) = v10;
    return result;
  }
  uint64_t v8 = v6 - v5;
  if (!__OFSUB__(v6, v5))
  {
    if ((v3 & 0x8000000000000000) == 0 && v6 >= v5)
    {
      BOOL v10 = v3 == 0;
      if (v3) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = 0;
      }
      goto LABEL_22;
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_2614656FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  char v9 = *((unsigned char *)v2 + 32);
  sub_261404234((uint64_t)(v2 + 2), (uint64_t)v19, &qword_26A914F60);
  uint64_t result = sub_261404234((uint64_t)v19, (uint64_t)v23, &qword_26A914F60);
  if (v25) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v24;
  }
  uint64_t v12 = v2[1];
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (v13)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v14 <= a1)
  {
    char v18 = v9 & 1;
    a1 = v6;
    goto LABEL_26;
  }
  uint64_t v5 = *v2;
  if (v12 >= a1)
  {
    if (a1 < 0)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    char v18 = 1;
LABEL_26:
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = a1;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v8;
    *(unsigned char *)(a2 + 32) = v18;
    return result;
  }
  uint64_t result = sub_261404234((uint64_t)v19, (uint64_t)&v20, &qword_26A914F60);
  if ((v22 & 1) == 0)
  {
    uint64_t v15 = a1 - v12;
    if (!__OFSUB__(a1, v12))
    {
      if ((v15 & 0x8000000000000000) == 0)
      {
        if (v21 >= v15) {
          uint64_t v16 = a1 - v12;
        }
        else {
          uint64_t v16 = v21;
        }
        if (v21 >= 0) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = a1 - v12;
        }
        if (v15) {
          uint64_t v8 = v17;
        }
        else {
          uint64_t v8 = 0;
        }
        char v18 = v8 == 0;
        if (v8) {
          uint64_t v7 = v20;
        }
        else {
          uint64_t v7 = 0;
        }
        a1 = v12;
        goto LABEL_26;
      }
      goto LABEL_30;
    }
    goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_261465844()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_26146587C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_26146588C()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2614658C4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v2 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) == 1)
  {
    if (qword_26A91DF00 != -1) {
      swift_once();
    }
    sub_2613C23AC(qword_26A914E40);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = MEMORY[0x263F8D6C8];
    *(_OWORD *)(v3 + 16) = xmmword_2614D81E0;
    uint64_t v5 = MEMORY[0x263F8D750];
    *(void *)(v3 + 56) = v4;
    *(void *)(v3 + 64) = v5;
    *(void *)(v3 + 32) = v1;
    OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d int16 bytes when running but stop is pending", 67, 2, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = (char *)sub_261465EAC(*(const void **)(v0 + 32), *(void *)(v0 + 24));
    uint64_t v8 = (uint64_t *)(v2 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
    swift_beginAccess();
    uint64_t v9 = *((void *)v7 + 2);
    uint64_t result = *v8;
    uint64_t v10 = *(void *)(*v8 + 24);
    uint64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9))
    {
      __break(1u);
    }
    else
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = *v8;
      if (*(void *)(*v8 + 16) < v11 || (isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_261401D34(v11);
        uint64_t v13 = *v8;
      }
      sub_261401F04((uint64_t *)(v13 + 16), v13 + 40, v7 + 32, v9);
      swift_endAccess();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_261465A58()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_261465A68()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(*(void *)(v0 + 24) + OBJC_IVAR___FeatureExtractObjc_isRunning);
}

uint64_t sub_261465A80()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_261465A90()
{
  uint64_t v2 = v0[2];
  vDSP_Length v1 = v0[3];
  if (*(unsigned char *)(v2 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) == 1)
  {
    if (qword_26A91DF00 != -1) {
      swift_once();
    }
    sub_2613C23AC(qword_26A914E40);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = MEMORY[0x263F8D6C8];
    *(_OWORD *)(v3 + 16) = xmmword_2614D81E0;
    uint64_t v5 = MEMORY[0x263F8D750];
    *(void *)(v3 + 56) = v4;
    *(void *)(v3 + 64) = v5;
    *(void *)(v3 + 32) = v1;
    OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d int16 bytes when running but stop is pending", 67, 2, v3);
    swift_bridgeObjectRelease();
    return;
  }
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  uint64_t v6 = (const __int16 *)v0[4];
  if (v1)
  {
    uint64_t v7 = sub_2614D56C8();
    *(void *)(v7 + 16) = v1;
    bzero((void *)(v7 + 32), 4 * v1);
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  vDSP_vflt16(v6, 1, (float *)(v7 + 32), 1, v1);
  uint64_t v8 = (uint64_t *)(v2 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v10 = *(void *)(*v8 + 24);
  uint64_t v11 = v10 + v9;
  if (__OFADD__(v10, v9)) {
    goto LABEL_17;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v8;
  if (*(void *)(*v8 + 16) < v11 || (isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_261401D34(v11);
    uint64_t v13 = *v8;
  }
  sub_261401F04((uint64_t *)(v13 + 16), v13 + 40, (char *)(v7 + 32), v9);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

uint64_t sub_261465C7C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_261465C90()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_261465CD0()
{
  vDSP_Length v1 = (char *)v0[2];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  uint64_t v3 = v0[5];
  uint64_t v4 = *(NSObject **)&v1[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_2614669DC;
  *(void *)(v6 + 24) = v5;
  v10[4] = sub_26141BED4;
  v10[5] = v6;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  v10[2] = sub_261418E88;
  v10[3] = &unk_270D57F00;
  uint64_t v7 = _Block_copy(v10);
  v1;
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LODWORD(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    sub_2614D5A38();
    uint64_t v9 = sub_2614D5A28();
    v2(v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_261465E64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_261465EAC(const void *a1, uint64_t a2)
{
  if (!a2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  if (a2 <= 0)
  {
    size_t v4 = 4 * a2;
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    sub_2613C23AC(&qword_26A914AC0);
    size_t v4 = 4 * a2;
    uint64_t v5 = (void *)swift_allocObject();
    int64_t v6 = j__malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 29;
    }
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 2);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

void *sub_261465F50(const void *a1, uint64_t a2)
{
  if (!a2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  if (a2 <= 0)
  {
    size_t v4 = 2 * a2;
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    sub_2613C23AC(&qword_26A914BF8);
    size_t v4 = 2 * a2;
    uint64_t v5 = (void *)swift_allocObject();
    int64_t v6 = j__malloc_size(v5);
    int64_t v7 = v6 - 32;
    if (v6 < 32) {
      int64_t v7 = v6 - 31;
    }
    v5[2] = a2;
    v5[3] = v7 & 0xFFFFFFFFFFFFFFFELL;
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

void *sub_261465FF0(void *result, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, void))
{
  uint64_t v4 = result[2];
  uint64_t v5 = result[1] + v4;
  if (*result < v5) {
    return 0;
  }
  if (v5 < v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (__OFSUB__(v5, v4))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t result = a3(&v6, a2 + 4 * v4, result[1]);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t *sub_261466078(uint64_t *result, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4 = result[2];
  uint64_t v5 = *result;
  uint64_t v6 = result[1] + v4;
  if (*result >= v6)
  {
    if (v6 < v4)
    {
      __break(1u);
    }
    else if (!__OFSUB__(v6, v4))
    {
      uint64_t result = a3(&v7, a2 + 4 * v4, result[1]);
      if (v3) {
        return result;
      }
      return (uint64_t *)(v5 < v6);
    }
    __break(1u);
    return result;
  }
  return (uint64_t *)(v5 < v6);
}

void *sub_2614660EC@<X0>(void *result@<X0>, void *a2@<X2>, void *(*a3)(uint64_t *__return_ptr, char *, uint64_t)@<X3>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  BOOL v8 = __OFSUB__(v7, *a2);
  uint64_t v9 = v7 - *a2;
  if (v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v8 = __OFADD__(v6, v9);
  uint64_t v10 = v6 + v9;
  if (v8)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v11 = v10 - v6;
  if (v10 < v6)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = (char *)result + 4 * v6;
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t result = a3(&v14, v13, v11);
  if (!v4) {
    *a4 = v14;
  }
  return result;
}

uint64_t sub_261466164(uint64_t result, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  BOOL v6 = __OFSUB__(v5, *a3);
  uint64_t v7 = v5 - *a3;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  BOOL v6 = __OFADD__(v4, v7);
  uint64_t v8 = v4 + v7;
  if (v6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = v8 - v4;
  if (v8 < v4)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v10 = result + 4 * v4;
  if (result) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  return a4(v11, v9);
}

uint64_t sub_2614661C0(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_26140C714(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_2613C23AC(&qword_26A914AB8);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = v4[2];
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v15 = (char *)&v4[a2 + 4];
  if (v6 != a2 || &v4[v6 + 4] >= (void *)&v15[8 * v14]) {
    uint64_t result = (uint64_t)memmove(&v4[v6 + 4], v15, 8 * v14);
  }
  uint64_t v16 = v4[2];
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    v4[2] = v17;
LABEL_19:
    *(void *)uint64_t v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_2614662E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_2614D4B88();
  int64_t v11 = (char *)result;
  if (result)
  {
    uint64_t result = sub_2614D4BA8();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_2614D4B98();
  uint64_t result = (uint64_t)sub_261460CD8(v11, a4, a5, &v12);
  if (!v5) {
    return v12;
  }
  return result;
}

uint64_t sub_261466380@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  uint64_t v10 = v2[2];
  uint64_t v11 = v4;
  uint64_t v12 = v5;
  uint64_t v13 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = sub_26145EFC8((void (*)(char *, char *))sub_2614667FC, (uint64_t)&v9, v10, AssociatedTypeWitness, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v7);
  *a2 = result;
  return result;
}

uint64_t method lookup function for FeatureExtract(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FeatureExtract);
}

uint64_t dispatch thunk of FeatureExtract.__allocating_init(config:)()
{
  return (*(uint64_t (**)(void))(v0 + 816))();
}

uint64_t dispatch thunk of FeatureExtract.addCallbackForAcousticModelOutputAvailable(callback:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of FeatureExtract.setCmvnMinWindowLength(cmvnMinWindowLength:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x340))();
}

uint64_t dispatch thunk of FeatureExtract.configuration()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x348))();
}

uint64_t dispatch thunk of FeatureExtract.setStreamingMode(streaming:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of FeatureExtract.startWithCompletionHandler(completionHandler:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of FeatureExtract.reset()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of FeatureExtract.audioForKeyword(startFrame:endFrame:actualEndFrame:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x370))();
}

uint64_t dispatch thunk of FeatureExtract.addFloatSamples(_:count:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x378))();
}

uint64_t dispatch thunk of FeatureExtract.addSamples(_:count:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of FeatureExtract.stopWithCompletionHandler(completionHandler:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of FeatureExtract.saveAudioBufferToFile(pcmBuffer:keyword:score:duration:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of FeatureExtract.saveAudioDataToFile(data:keyword:score:duration:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of FeatureExtract.saveStandaloneDebugSamplesToFile(debugAudioSamples:keyword:score:duration:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A0))();
}

uint64_t sub_261466798()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2614667D0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_2614667E0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_2614667FC@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = (uint64_t (*)(uint64_t *, void))sub_2614D5938();
  uint64_t v4 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, v4, AssociatedTypeWitness);
  return v2(&v7, 0);
}

uint64_t sub_26146690C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = **(void **)(v2 + 16);
  uint64_t v7 = *a1;
  v6[2] = &v7;
  uint64_t result = sub_26145EE94((void (*)(int *__return_ptr, uint64_t *))sub_261466970, (uint64_t)v6, v4);
  *a2 = result;
  return result;
}

uint64_t sub_261466970@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v3 = **(void **)(v2 + 16);
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)result + 16))
  {
    *a2 = *(_DWORD *)(*(void *)result + 4 * v3 + 32);
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_2614669A4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2614669DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v1 + OBJC_IVAR___FeatureExtractObjc_isRunning) == 1)
  {
    if (qword_26A91DF00 != -1) {
      swift_once();
    }
    uint64_t result = OS_os_log.info(_:_:)((uint64_t)"stop signalled", 14, 2, MEMORY[0x263F8EE78]);
    *(unsigned char *)(v1 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) = 1;
  }
  return result;
}

uint64_t sub_261466A74()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_261466A84()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_261466ABC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x3A8))();
  *((unsigned char *)v1 + OBJC_IVAR___FeatureExtractObjc_isRunning) = 1;
  *((unsigned char *)v1 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) = 0;
  return result;
}

uint64_t sub_261466B34()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_261466B44()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  unint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = (void *)*v3;
  uint64_t v6 = *(void *)(*v3 + 24);
  uint64_t v7 = OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex;
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex);
  BOOL v9 = __OFSUB__(v6, v8);
  uint64_t v10 = v6 - v8;
  if (v9)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v10 < 1) {
    return result;
  }
  BOOL v9 = __OFADD__(v8, v10);
  uint64_t v11 = v8 + v10;
  if (v9) {
    goto LABEL_25;
  }
  *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex) = v11;
  BOOL v9 = __OFSUB__(v11, 1);
  uint64_t v12 = v11 - 1;
  if (v9)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v12 < v8)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v8 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v5[3] < v13)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v0 = v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer;
  swift_beginAccess();
  swift_retain();
  sub_26145DD20(v8, v13, v5);
  uint64_t result = swift_endAccess();
  uint64_t v14 = v13 - v8;
  if (__OFSUB__(v13, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  BOOL v9 = __OFADD__(*v2, v14);
  uint64_t v15 = *v2 + v14;
  if (v9)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    uint64_t result = swift_once();
    goto LABEL_13;
  }
  *uint64_t v2 = v15;
  if (*(unsigned char *)(v1 + OBJC_IVAR___FeatureExtractObjc_streamingMode) != 1) {
    return swift_release();
  }
  uint64_t v0 = *(void *)(*v3 + 24);
  if (qword_26A91DF10 != -1) {
    goto LABEL_33;
  }
LABEL_13:
  if (qword_26A9201C8 < v0)
  {
    uint64_t v16 = *(void *)(*v3 + 24);
    uint64_t v17 = v16 - qword_26A9201C8;
    if (__OFSUB__(v16, qword_26A9201C8))
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer);
      BOOL v9 = __OFADD__(v18, v17);
      uint64_t v19 = v18 + v17;
      if (!v9)
      {
        *(void *)(v1 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer) = v19;
        if ((v17 & 0x8000000000000000) == 0)
        {
          uint64_t result = *v3;
          if (*(void *)(*v3 + 24) >= v17)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_2614026E8();
            }
            uint64_t result = (uint64_t)sub_261402780((uint64_t *)(*v3 + 16), *v3 + 40, v17);
            uint64_t v20 = *(void *)(v1 + v7);
            BOOL v9 = __OFSUB__(v20, v17);
            uint64_t v21 = v20 - v17;
            if (!v9)
            {
              *(void *)(v1 + v7) = v21;
              return swift_release();
            }
LABEL_38:
            __break(1u);
            return result;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
  return swift_release();
}

uint64_t sub_261466D64()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_261466D74()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(*(void *)(v0 + 24) + OBJC_IVAR___FeatureExtractObjc_stopSignaled);
}

uint64_t sub_261466D8C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_261466D9C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR___FeatureExtractObjc_isRunning) = 0;
}

uint64_t sub_261466DB0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_261466DC0(char *a1, uint64_t a2)
{
  return sub_261465514(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_261466DDC(uint64_t a1, uint64_t a2)
{
  return sub_261466164(a1, a2, *(void **)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

void *sub_261466DFC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_261466E34(a1, a2, a3);
}

void *sub_261466E14@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_2614660EC(a1, *(void **)(v2 + 16), *(void *(**)(uint64_t *__return_ptr, char *, uint64_t))(v2 + 24), a2);
}

void *sub_261466E34@<X0>(void *__src@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!__src)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = a2;
  if (!a2)
  {
LABEL_7:
    *a3 = v5;
    return __src;
  }
  if (*(void *)(v3 + 24) >= a2)
  {
    uint64_t v6 = __src;
    __src = *(void **)(v3 + 16);
    if (__src) {
      __src = memcpy(__src, v6, 4 * v5);
    }
    goto LABEL_7;
  }
  __break(1u);
  return __src;
}

void *sub_261466EA0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_261466E14(a1, a2);
}

uint64_t sub_261466F38()
{
  sub_261468F48();
  uint64_t result = sub_2614D5AC8();
  qword_26A9201E0 = result;
  return result;
}

uint64_t sub_261466FA0()
{
  sub_261468F48();
  if (qword_26A91DF38 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_2614D5AC8();
  qword_26A9201E8 = result;
  return result;
}

void sub_261467040()
{
  *(_WORD *)&algn_26A9201F8[6] = -4864;
}

uint64_t sub_261467070(uint64_t a1)
{
  return sub_261467100(a1, qword_26A91DF48, &qword_26A91DF28, (id *)&qword_26A9201E0);
}

uint64_t static VALog.cli.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_261467354(&qword_26A91DF40, MEMORY[0x263F90268], (uint64_t)qword_26A91DF48, a1);
}

uint64_t sub_2614670D4(uint64_t a1)
{
  return sub_261467100(a1, qword_26A91DF68, &qword_26A91DF30, (id *)&qword_26A9201E8);
}

uint64_t sub_261467100(uint64_t a1, uint64_t *a2, void *a3, id *a4)
{
  uint64_t v7 = sub_2614D50C8();
  sub_2613CC63C(v7, a2);
  sub_2613C2624(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  id v8 = *a4;
  return sub_2614D50D8();
}

uint64_t sub_26146718C()
{
  return sub_2614672C0(&qword_26A91DF60, MEMORY[0x263F90268], (uint64_t)qword_26A91DF68);
}

uint64_t static VALog.va.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_261467354(&qword_26A91DF60, MEMORY[0x263F90268], (uint64_t)qword_26A91DF68, a1);
}

uint64_t sub_2614671FC()
{
  uint64_t v0 = sub_2614D5AB8();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_2614D5048();
  sub_2613CC63C(v1, qword_26A91DF88);
  sub_2613C2624(v1, (uint64_t)qword_26A91DF88);
  sub_2614D5AA8();
  return sub_2614D5038();
}

uint64_t sub_2614672C0(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);
  return sub_2613C2624(v5, a3);
}

uint64_t static VALog.signposter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_261467354(&qword_26A91DF80, MEMORY[0x263F90228], (uint64_t)qword_26A91DF88, a1);
}

uint64_t sub_261467354@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_2613C2624(v7, a3);
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  return v9(a4, v8, v7);
}

uint64_t static VALog.event(_:_:)(const char *a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v8 = sub_2614D5018();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  unint64_t v44 = (char *)&v39 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = sub_2614D5048();
  isa = (void (**)(char *, uint64_t, NSObject *))v17[-1].isa;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    uint64_t v21 = a1;
    uint64_t v22 = qword_26A91DF80;
    swift_bridgeObjectRetain();
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_2613C2624((uint64_t)v17, (uint64_t)qword_26A91DF88);
    isa[2](v20, v23, v17);
    swift_bridgeObjectRetain();
    sub_2614D5008();
    uint64_t v24 = sub_2614D5028();
    int v42 = sub_2614D5A18();
    if (sub_2614D5A98())
    {
      os_log_t v41 = v24;
      if ((a3 & 1) == 0)
      {
        if (v21)
        {
          unint64_t v39 = v21;
LABEL_20:
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v44, v16, v8);
          uint64_t v26 = swift_slowAlloc();
          uint64_t v40 = v8;
          uint64_t v27 = (uint8_t *)v26;
          uint64_t v28 = v9;
          uint64_t v29 = swift_slowAlloc();
          uint64_t v46 = v29;
          *(_DWORD *)uint64_t v27 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v45 = sub_2613D875C(v43, a5, &v46);
          sub_2614D5B58();
          swift_bridgeObjectRelease_n();
          uint64_t v30 = v44;
          os_signpost_id_t v31 = sub_2614D4FF8();
          os_log_t v32 = v41;
          _os_signpost_emit_with_name_impl(&dword_2613B8000, v41, (os_signpost_type_t)v42, v31, v39, "%s", v27, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x263E38060](v29, -1, -1);
          MEMORY[0x263E38060](v27, -1, -1);

          uint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
          uint64_t v34 = v40;
          v33(v16, v40);
          ((void (*)(char *, NSObject *))isa[1])(v20, v17);
          return ((uint64_t (*)(char *, uint64_t))v33)(v30, v34);
        }
        goto LABEL_32;
      }
      if ((unint64_t)v21 >> 32)
      {
        __break(1u);
      }
      else
      {
        if (v21 >> 11 == 27)
        {
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (v21 >> 16 <= 0x10)
        {
          unint64_t v39 = &v47;
          goto LABEL_20;
        }
      }
      __break(1u);
      goto LABEL_28;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    return ((uint64_t (*)(char *, NSObject *))isa[1])(v20, v17);
  }
  isa = (void (**)(char *, uint64_t, NSObject *))a1;
  uint64_t v16 = (char *)v9;
  if (qword_26A91DF80 != -1) {
    swift_once();
  }
  sub_2613C2624((uint64_t)v17, (uint64_t)qword_26A91DF88);
  sub_2614D5008();
  uint64_t v17 = sub_2614D5028();
  uint64_t v9 = sub_2614D5A18();
  uint64_t v24 = v17;
  if ((sub_2614D5A98() & 1) == 0)
  {

    return (*((uint64_t (**)(char *, uint64_t))v16 + 1))(v12, v8);
  }
  if ((a3 & 1) == 0)
  {
    if (!isa)
    {
      __break(1u);
      goto LABEL_14;
    }
LABEL_25:
    uint64_t v35 = v44;
    (*((void (**)(char *, char *, uint64_t))v16 + 2))(v44, v12, v8);
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    os_signpost_id_t v37 = sub_2614D4FF8();
    _os_signpost_emit_with_name_impl(&dword_2613B8000, v17, (os_signpost_type_t)v9, v37, (const char *)isa, "", v36, 2u);
    MEMORY[0x263E38060](v36, -1, -1);

    uint64_t v38 = (void (*)(char *, uint64_t))*((void *)v16 + 1);
    v38(v12, v8);
    return ((uint64_t (*)(char *, uint64_t))v38)(v35, v8);
  }
  if ((unint64_t)isa >> 32)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (isa >> 11 != 27)
  {
    if (isa >> 16 > 0x10)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    isa = (void (**)(char *, uint64_t, NSObject *))&v48;
    goto LABEL_25;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = swift_bridgeObjectRelease_n();
  __break(1u);
  return result;
}

uint64_t static VALog.begin(_:_:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, const char *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v56 = (char *)a1;
  int v57 = a3;
  uint64_t v9 = sub_2614D5048();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = ((char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v54 = (char *)&v44 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v55 = ((char *)&v44 - v16);
  uint64_t v51 = sub_2614D5018();
  uint64_t v17 = *(void *)(v51 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v51);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v44 - v21;
  if (qword_26A91DF80 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_2613C2624(v9, (uint64_t)qword_26A91DF88);
  sub_2614D5028();
  sub_2614D4FE8();
  uint64_t v52 = v10;
  if (a5)
  {
    uint64_t v49 = (char *)a4;
    uint64_t v24 = *(void (**)(NSObject *, uint64_t, uint64_t))(v10 + 16);
    v24(v55, v23, v9);
    v24(v54, v23, v9);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = sub_2614D5028();
    uint64_t v10 = sub_2614D5A08();
    uint64_t v23 = (uint64_t)v13;
    uint64_t result = sub_2614D5A98();
    if ((result & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      uint64_t v30 = v51;
LABEL_19:
      uint64_t v37 = v53;
      v29(v20, v22, v30);
      sub_2614D5088();
      swift_allocObject();
      uint64_t v38 = sub_2614D5078();
      uint64_t v39 = v52;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v9);
      uint64_t v40 = v55;
LABEL_26:
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v30);
      (*(void (**)(uint64_t, NSObject *, uint64_t))(v39 + 32))(a6, v40, v9);
      uint64_t result = type metadata accessor for VASignpostInterval();
      uint64_t v43 = a6 + *(int *)(result + 20);
      *(void *)uint64_t v43 = v56;
      *(void *)(v43 + 8) = v37;
      *(unsigned char *)(v43 + 16) = v57;
      *(void *)(a6 + *(int *)(result + 24)) = v38;
      return result;
    }
    uint64_t v50 = a6;
    int v48 = v10;
    if ((v57 & 1) == 0)
    {
      uint64_t v26 = v56;
      if (!v56)
      {
        swift_bridgeObjectRelease_n();
        __break(1u);
        goto LABEL_8;
      }
      goto LABEL_18;
    }
    if ((unint64_t)v56 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v56 >> 11 == 27)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (v56 >> 16 <= 0x10)
      {
        uint64_t v26 = &v60;
LABEL_18:
        unint64_t v44 = v26;
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
        uint64_t v47 = v17;
        uint64_t v33 = v51;
        v45(v20, v22, v51);
        uint64_t v46 = v22;
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        uint64_t v59 = v35;
        *(_DWORD *)uint64_t v34 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_2613D875C((uint64_t)v49, a5, &v59);
        uint64_t v22 = v46;
        sub_2614D5B58();
        uint64_t v30 = v33;
        uint64_t v17 = v47;
        swift_bridgeObjectRelease_n();
        os_signpost_id_t v36 = sub_2614D4FF8();
        _os_signpost_emit_with_name_impl(&dword_2613B8000, v13, (os_signpost_type_t)v48, v36, v44, "%s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x263E38060](v35, -1, -1);
        MEMORY[0x263E38060](v34, -1, -1);

        (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v30);
        uint64_t v29 = v45;
        a6 = v50;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_8:
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v10 + 16))(v13, v23, v9);
  uint64_t v27 = sub_2614D5028();
  int v28 = sub_2614D5A08();
  uint64_t result = sub_2614D5A98();
  if ((result & 1) == 0)
  {

    os_signpost_id_t v31 = v22;
    uint64_t v32 = v17;
    uint64_t v30 = v51;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v31, v51);
LABEL_25:
    sub_2614D5088();
    swift_allocObject();
    uint64_t v38 = sub_2614D5078();
    uint64_t v40 = v13;
    uint64_t v39 = v52;
    uint64_t v37 = v53;
    uint64_t v17 = v32;
    uint64_t v22 = v31;
    goto LABEL_26;
  }
  uint64_t v50 = a6;
  LODWORD(v55) = v28;
  if ((v57 & 1) == 0)
  {
    if (v56)
    {
      uint64_t v49 = v56;
LABEL_24:
      uint64_t v54 = *(char **)(v17 + 16);
      uint64_t v30 = v51;
      ((void (*)(char *, char *, uint64_t))v54)(v20, v22, v51);
      os_signpost_id_t v31 = v22;
      os_log_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v41 = 0;
      os_signpost_id_t v42 = sub_2614D4FF8();
      _os_signpost_emit_with_name_impl(&dword_2613B8000, v27, (os_signpost_type_t)v55, v42, v49, "", v41, 2u);
      MEMORY[0x263E38060](v41, -1, -1);

      uint64_t v32 = v17;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v30);
      a6 = v50;
      ((void (*)(char *, char *, uint64_t))v54)(v20, v31, v30);
      goto LABEL_25;
    }
    goto LABEL_29;
  }
  if ((unint64_t)v56 >> 32)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v56 >> 11 != 27)
  {
    if (v56 >> 16 <= 0x10)
    {
      uint64_t v49 = &v61;
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

id VALog.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id VALog.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id VALog.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall VASignpostInterval.end(_:)(Swift::String_optional a1)
{
  object = a1.value._object;
  uint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  uint64_t v4 = (const char *)sub_2614D5058();
  uint64_t v60 = *((void *)v4 - 1);
  char v61 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v55[-v8];
  uint64_t v10 = sub_2614D5018();
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v55[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v62 = &v55[-v15];
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v55[-v16];
  uint64_t v18 = sub_2614D5048();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = &v55[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v20);
  char v25 = &v55[-v23];
  if (object)
  {
    uint64_t v57 = countAndFlagsBits;
    uint64_t v26 = v24;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(&v55[-v23], v1, v24);
    uint64_t v27 = v1 + *(int *)(type metadata accessor for VASignpostInterval() + 20);
    uint64_t v59 = *(const char **)v27;
    char v28 = *(unsigned char *)(v27 + 16);
    swift_bridgeObjectRetain_n();
    uint64_t v29 = sub_2614D5028();
    sub_2614D5068();
    int v56 = sub_2614D59F8();
    if ((sub_2614D5A98() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v17, v64);
      (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v25, v26);
      return;
    }
    uint64_t v58 = v26;
    if ((v28 & 1) == 0)
    {
      if (v59)
      {
        uint64_t v31 = v60;
        uint64_t v30 = v61;
LABEL_17:
        swift_retain();
        sub_2614D5098();
        swift_release();
        if ((*(unsigned int (**)(unsigned char *, const char *))(v31 + 88))(v9, v30) == *MEMORY[0x263F90238])
        {
          char v39 = 0;
          char v40 = 0;
          char v61 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(unsigned char *, const char *))(v31 + 8))(v9, v30);
          char v61 = "%s";
          char v40 = 2;
          char v39 = 1;
        }
        uint64_t v41 = v63;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(v62, v17, v64);
        uint64_t v42 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v66 = v43;
        *(unsigned char *)uint64_t v42 = v40;
        *(unsigned char *)(v42 + 1) = v39;
        *(_WORD *)(v42 + 2) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v65 = sub_2613D875C(v57, (unint64_t)object, &v66);
        sub_2614D5B58();
        swift_bridgeObjectRelease_n();
        unint64_t v44 = v62;
        os_signpost_id_t v45 = sub_2614D4FF8();
        _os_signpost_emit_with_name_impl(&dword_2613B8000, v29, (os_signpost_type_t)v56, v45, v59, v61, (uint8_t *)v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x263E38060](v43, -1, -1);
        MEMORY[0x263E38060](v42, -1, -1);

        uint64_t v46 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
        uint64_t v47 = v64;
        v46(v17, v64);
        (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v25, v58);
        v46(v44, v47);
        return;
      }
LABEL_37:
      swift_bridgeObjectRelease_n();
      __break(1u);
      return;
    }
    if ((unint64_t)v59 >> 32)
    {
      __break(1u);
    }
    else
    {
      uint64_t v31 = v60;
      uint64_t v30 = v61;
      if (v59 >> 11 == 27)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if (v59 >> 16 <= 0x10)
      {
        uint64_t v59 = &v67;
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v32 = v24;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v22, v1, v24);
  uint64_t v33 = v1 + *(int *)(type metadata accessor for VASignpostInterval() + 20);
  uint64_t v34 = *(const char **)v33;
  char v35 = *(unsigned char *)(v33 + 16);
  os_signpost_id_t v36 = sub_2614D5028();
  sub_2614D5068();
  LODWORD(v59) = sub_2614D59F8();
  if ((sub_2614D5A98() & 1) == 0)
  {

    (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v13, v64);
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v22, v32);
    return;
  }
  uint64_t v58 = v32;
  if (v35)
  {
    if ((unint64_t)v34 >> 32)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v38 = v60;
    uint64_t v37 = v61;
    if (v34 >> 11 == 27)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v34 >> 16 > 0x10) {
      goto LABEL_34;
    }
    uint64_t v34 = &v68;
  }
  else
  {
    if (!v34)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v38 = v60;
    uint64_t v37 = v61;
  }
  swift_retain();
  sub_2614D5098();
  swift_release();
  if ((*(unsigned int (**)(unsigned char *, const char *))(v38 + 88))(v7, v37) == *MEMORY[0x263F90238])
  {
    int v48 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(unsigned char *, const char *))(v38 + 8))(v7, v37);
    int v48 = "";
  }
  uint64_t v49 = v62;
  uint64_t v50 = v63;
  uint64_t v51 = v64;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(v62, v13, v64);
  uint64_t v52 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v52 = 0;
  os_signpost_id_t v53 = sub_2614D4FF8();
  _os_signpost_emit_with_name_impl(&dword_2613B8000, v36, (os_signpost_type_t)v59, v53, v34, v48, v52, 2u);
  MEMORY[0x263E38060](v52, -1, -1);

  uint64_t v54 = *(void (**)(unsigned char *, uint64_t))(v50 + 8);
  v54(v13, v51);
  (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v22, v58);
  v54(v49, v51);
}

uint64_t type metadata accessor for VASignpostInterval()
{
  uint64_t result = qword_26A91DFA0;
  if (!qword_26A91DFA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for VALog()
{
  return self;
}

ValueMetadata *type metadata accessor for VALog.OSLogs()
{
  return &type metadata for VALog.OSLogs;
}

ValueMetadata *type metadata accessor for VALog.Category()
{
  return &type metadata for VALog.Category;
}

uint64_t *initializeBufferWithCopyOfBuffer for VASignpostInterval(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_2614D5048();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for VASignpostInterval(uint64_t a1)
{
  uint64_t v2 = sub_2614D5048();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2614D5048();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2614D5048();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2614D5048();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2614D5048();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261468D14);
}

uint64_t sub_261468D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2614D5048();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261468DE8);
}

uint64_t sub_261468DE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_2614D5048();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_261468EA4()
{
  uint64_t result = sub_2614D5048();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_261468F48()
{
  unint64_t result = qword_26A9152B0;
  if (!qword_26A9152B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A9152B0);
  }
  return result;
}

uint64_t sub_261469004()
{
  uint64_t v0 = sub_26142A908((uint64_t)&unk_270D58178);
  swift_arrayDestroy();
  return v0;
}

id sub_26146904C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x61775F7475706E69 && a2 == 0xE900000000000076;
  if (!v3 && (sub_2614D5FB8() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 88))();
  id v5 = objc_msgSend(self, sel_featureValueWithMultiArray_, v4);

  return v5;
}

uint64_t sub_261469224()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = MEMORY[0x263F8E9F8];
  uint64_t v3 = MEMORY[0x263F00CD8];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

uint64_t sub_2614693D8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81E0;
  strcpy((char *)(inited + 32), "enc_3d_output");
  *(_WORD *)(inited + 46) = -4864;
  id v4 = objc_msgSend(self, sel_featureValueWithMultiArray_, a1);
  *(void *)(inited + 72) = sub_261405618(0, &qword_26A915338);
  *(void *)(inited + 48) = v4;
  sub_26142907C(inited);
  id v5 = objc_allocWithZone(MEMORY[0x263F00D40]);
  id v6 = sub_26142A760();

  *(void *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_261469514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2614D4C78();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_2614198FC();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v10 = v9;
  uint64_t v11 = (void *)sub_2614D5378();
  uint64_t v12 = (void *)sub_2614D5378();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_2614D4C58();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_26146974C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_2614D4C78();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_26146985C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_2614D4C78();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_26146991C, 0, 0);
}

uint64_t sub_26146991C()
{
  uint64_t v6 = v0[3];
  (*(void (**)(void))(v6 + 88))();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 128) + **(int **)(v6 + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614298B4;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return v5(v2, v3);
}

uint64_t sub_261469A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  sub_2614D5A58();
  return swift_release();
}

uint64_t sub_261469AE0(uint64_t a1, uint64_t a2)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_261469BA8;
  return MEMORY[0x270EE7960](a1, a2);
}

uint64_t sub_261469BA8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 24) = a1;
    return MEMORY[0x270FA2498](sub_261469CF4, 0, 0);
  }
}

uint64_t sub_261469CF4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for quant_enc_f16_wofeats();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_261469D68(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00DD0]), sel_init);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, id))(*(void *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_261469DF4(uint64_t a1, uint64_t a2)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  id v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  id v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    type metadata accessor for quant_enc_f16_wofeatsOutput();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v8;
    id v9 = v7;
  }
  else
  {
    id v10 = v12[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_261469ECC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_261469EF0, 0, 0);
}

uint64_t sub_261469EF0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_261469F90;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return MEMORY[0x270EE7938](v3, v2);
}

uint64_t sub_261469F90(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return MEMORY[0x270FA2498](sub_26146A0DC, 0, 0);
  }
}

uint64_t sub_26146A0DC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for quant_enc_f16_wofeatsOutput();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_26146A150(void *a1)
{
  type metadata accessor for quant_enc_f16_wofeatsInput();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 136);
  id v5 = a1;
  uint64_t v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_26146A1E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2613C23AC(&qword_26A915968);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)v16 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)v16 - v9, a1, v4);
  sub_261405618(0, (unint64_t *)&qword_26A915320);
  v11(v8, (uint64_t)v10, v4);
  sub_26146A688();
  uint64_t v12 = sub_2614D5948();
  type metadata accessor for quant_enc_f16_wofeatsInput();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_26146A3B0(unint64_t a1, uint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2613C23AC(&qword_26A9153C0);
    sub_2614D5D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F00D18]);
  sub_2613C23AC(&qword_26A9153C0);
  uint64_t v7 = (void *)sub_2614D5648();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  uint64_t v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  id v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  id v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = v10;
    v22[0] = (id)MEMORY[0x263F8EE78];
    if (v5)
    {
      swift_bridgeObjectRetain();
      id v16 = v11;
      uint64_t v13 = sub_2614D5D98();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v14 = v11;
    }
    sub_26142A848(v13, 0);
    sub_2614D5678();
    unint64_t v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0) {
      __break(1u);
    }
    unint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        id v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for quant_enc_f16_wofeatsOutput();
        *(void *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        uint64_t v21 = swift_retain();
        MEMORY[0x263E36760](v21);
        if (*(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2614D5698();
        ++v19;
        sub_2614D56E8();
        sub_2614D5678();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v15 = v22[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
}

unint64_t sub_26146A688()
{
  unint64_t result = qword_26A915970[0];
  if (!qword_26A915970[0])
  {
    sub_2613C5EC8(&qword_26A915968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A915970);
  }
  return result;
}

uint64_t sub_26146A6E4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_26146A71C(id a1, char a2)
{
  uint64_t v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if (a2)
  {
    id v7 = a1;
    v4(a1, 1);
    sub_26142ADBC(a1);
  }
  else
  {
    type metadata accessor for quant_enc_f16_wofeats();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    id v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for quant_enc_f16_wofeats()
{
  return self;
}

uint64_t type metadata accessor for quant_enc_f16_wofeatsOutput()
{
  return self;
}

uint64_t type metadata accessor for quant_enc_f16_wofeatsInput()
{
  return self;
}

uint64_t sub_26146A8B4()
{
  uint64_t v0 = sub_26142A908((uint64_t)&unk_270D58200);
  swift_arrayDestroy();
  return v0;
}

id sub_26146A8FC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x61775F7475706E69 && a2 == 0xE900000000000076;
  if (!v3 && (sub_2614D5FB8() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 88))();
  id v5 = objc_msgSend(self, sel_featureValueWithMultiArray_, v4);

  return v5;
}

uint64_t sub_26146AAD4()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = MEMORY[0x263F8D5C8];
  uint64_t v3 = MEMORY[0x263F00C60];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

uint64_t sub_26146AC88(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81E0;
  strcpy((char *)(inited + 32), "enc_3d_output");
  *(_WORD *)(inited + 46) = -4864;
  id v4 = objc_msgSend(self, sel_featureValueWithMultiArray_, a1);
  *(void *)(inited + 72) = sub_261405618(0, &qword_26A915338);
  *(void *)(inited + 48) = v4;
  sub_26142907C(inited);
  id v5 = objc_allocWithZone(MEMORY[0x263F00D40]);
  id v6 = sub_26142A760();

  *(void *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_26146ADC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2614D4C78();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_2614198FC();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  id v10 = v9;
  id v11 = (void *)sub_2614D5378();
  uint64_t v12 = (void *)sub_2614D5378();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_2614D4C58();

  id v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_26146AFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_2614D4C78();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  id v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_26146B10C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_2614D4C78();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_26146B1CC, 0, 0);
}

uint64_t sub_26146B1CC()
{
  uint64_t v6 = v0[3];
  (*(void (**)(void))(v6 + 88))();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 128) + **(int **)(v6 + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614298B4;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return v5(v2, v3);
}

uint64_t sub_26146B2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  sub_2614D5A58();
  return swift_release();
}

uint64_t sub_26146B390(uint64_t a1, uint64_t a2)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_26146B458;
  return MEMORY[0x270EE7960](a1, a2);
}

uint64_t sub_26146B458(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 24) = a1;
    return MEMORY[0x270FA2498](sub_26146B5A4, 0, 0);
  }
}

uint64_t sub_26146B5A4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for aa_encoder_rdr_125141826();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_26146B618(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00DD0]), sel_init);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, id))(*(void *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_26146B6A4(uint64_t a1, uint64_t a2)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  id v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  id v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    type metadata accessor for aa_encoder_rdr_125141826Output();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v8;
    id v9 = v7;
  }
  else
  {
    id v10 = v12[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_26146B77C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_26146B7A0, 0, 0);
}

uint64_t sub_26146B7A0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_26146B840;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return MEMORY[0x270EE7938](v3, v2);
}

uint64_t sub_26146B840(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return MEMORY[0x270FA2498](sub_26146B98C, 0, 0);
  }
}

uint64_t sub_26146B98C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for aa_encoder_rdr_125141826Output();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_26146BA00(void *a1)
{
  type metadata accessor for aa_encoder_rdr_125141826Input();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 136);
  id v5 = a1;
  uint64_t v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_26146BA94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2613C23AC(&qword_26A915318);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)v16 - v9;
  id v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)v16 - v9, a1, v4);
  sub_261405618(0, (unint64_t *)&qword_26A915320);
  v11(v8, (uint64_t)v10, v4);
  sub_26142AAAC();
  uint64_t v12 = sub_2614D5948();
  type metadata accessor for aa_encoder_rdr_125141826Input();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_26146BC60(unint64_t a1, uint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2613C23AC(&qword_26A9153C0);
    sub_2614D5D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F00D18]);
  sub_2613C23AC(&qword_26A9153C0);
  uint64_t v7 = (void *)sub_2614D5648();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  uint64_t v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  id v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  id v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = v10;
    v22[0] = (id)MEMORY[0x263F8EE78];
    if (v5)
    {
      swift_bridgeObjectRetain();
      id v16 = v11;
      uint64_t v13 = sub_2614D5D98();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v14 = v11;
    }
    sub_26142A848(v13, 0);
    sub_2614D5678();
    unint64_t v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0) {
      __break(1u);
    }
    unint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        id v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for aa_encoder_rdr_125141826Output();
        *(void *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        uint64_t v21 = swift_retain();
        MEMORY[0x263E36760](v21);
        if (*(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2614D5698();
        ++v19;
        sub_2614D56E8();
        sub_2614D5678();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v15 = v22[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
}

uint64_t sub_26146BF38()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_26146BF70(id a1, char a2)
{
  uint64_t v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if (a2)
  {
    id v7 = a1;
    v4(a1, 1);
    sub_26142ADBC(a1);
  }
  else
  {
    type metadata accessor for aa_encoder_rdr_125141826();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    id v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for aa_encoder_rdr_125141826()
{
  return self;
}

uint64_t type metadata accessor for aa_encoder_rdr_125141826Output()
{
  return self;
}

uint64_t type metadata accessor for aa_encoder_rdr_125141826Input()
{
  return self;
}

Swift::Void __swiftcall DetectionInfo.reset()()
{
  *(_DWORD *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = -1;
  *(void *)(v0 + 40) = -1;
  *(_WORD *)(v0 + 52) = 0;
  *(unsigned char *)(v0 + 54) = 2;
}

void *sub_26146C0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  result[4] = a3;
  result[5] = v7;
  result[6] = a2;
  return result;
}

uint64_t sub_26146C100@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + 40);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v8 = *(void *)(v5 + 40);
    float v9 = *(float *)(v5 + 48);
    uint64_t v10 = *(void *)(v5 + 64);
    int v11 = *(_DWORD *)(v5 + 80);
    char v12 = *(unsigned char *)(v5 + 84);
    char v13 = *(unsigned char *)(v5 + 85);
    uint64_t v14 = v6 - 1;
    if (v6 == 1)
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v15 = 1;
LABEL_8:
      uint64_t v19 = v5 + 56 * v15;
      uint64_t v20 = *(void *)(v19 + 16);
      LOBYTE(v19) = *(unsigned char *)(v19 + 30);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(float *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v20;
      *(_DWORD *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 52) = v12;
      *(unsigned char *)(a1 + 53) = v13 & 1;
      *(unsigned char *)(a1 + 54) = v19;
      return result;
    }
    char v21 = *(unsigned char *)(v5 + 84);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = v5 + 88;
    do
    {
      float v17 = *(float *)(v16 + 16);
      char v18 = *(unsigned char *)(v16 + 53);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2614D54D8();
      swift_bridgeObjectRetain();
      sub_2614D54D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v13 |= v18;
      float v9 = v9 * v17;
      v16 += 56;
      --v14;
    }
    while (v14);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = *v3;
    uint64_t v15 = *(void *)(*v3 + 16);
    if (v15)
    {
      char v12 = v21;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_26146C29C()
{
  uint64_t v1 = v0[3];
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    v0[3] = v3;
    if (v3 >= v0[2])
    {
      v0[3] = 0;
      swift_beginAccess();
      v0[5] = MEMORY[0x263F8EE78];
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_26146C304@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *((_DWORD *)a1 + 4);
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v9 = a1[5];
  int v10 = *((_DWORD *)a1 + 12);
  char v41 = *((unsigned char *)a1 + 52);
  int v11 = (void **)(v2 + 5);
  char v38 = *((unsigned char *)a1 + 54);
  char v39 = *((unsigned char *)a1 + 53);
  uint64_t result = swift_beginAccess();
  uint64_t v13 = v2[4];
  uint64_t v14 = (void *)v2[5];
  unint64_t v15 = v14[2];
  if (v15 < *(void *)(v13 + 16))
  {
    uint64_t v16 = v13 + 16 * v15;
    if (v4 != *(void *)(v16 + 32) || v5 != *(void *)(v16 + 40))
    {
      uint64_t result = sub_2614D5FB8();
      if ((result & 1) == 0) {
        goto LABEL_14;
      }
    }
    if (v15)
    {
      uint64_t v18 = v14[7 * v15 + 2];
      BOOL v19 = __OFSUB__(v18, v7);
      uint64_t v20 = v18 - v7;
      if (!v19) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v20 = -v7;
      if (!__OFSUB__(0, v7))
      {
LABEL_9:
        if (v2[6] < v20) {
          goto LABEL_14;
        }
        uint64_t v37 = v9;
        swift_beginAccess();
        uint64_t v14 = *v11;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *int v11 = v14;
        uint64_t v9 = v8;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_11;
        }
        goto LABEL_26;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_26:
  uint64_t v14 = sub_261471F50(0, v14[2] + 1, 1, v14);
  *int v11 = v14;
LABEL_11:
  unint64_t v23 = v14[2];
  unint64_t v22 = v14[3];
  if (v23 >= v22 >> 1)
  {
    uint64_t v14 = sub_261471F50((void *)(v22 > 1), v23 + 1, 1, v14);
    *int v11 = v14;
  }
  v14[2] = v23 + 1;
  uint64_t v24 = &v14[7 * v23];
  v24[4] = v4;
  v24[5] = v5;
  *((_DWORD *)v24 + 12) = v6;
  v24[7] = v9;
  v24[8] = v7;
  v24[9] = v37;
  *((_DWORD *)v24 + 20) = v10;
  *((unsigned char *)v24 + 84) = v41;
  *((unsigned char *)v24 + 85) = v39;
  *((unsigned char *)v24 + 86) = v38;
  uint64_t v14 = (void *)v2[5];
  uint64_t result = swift_endAccess();
  v2[3] = 0;
LABEL_14:
  if (v14[2] == *(void *)(v2[4] + 16))
  {
    sub_26146C100((uint64_t)v43);
    uint64_t v25 = v43[0];
    uint64_t v26 = v43[1];
    uint64_t v27 = v44;
    uint64_t v28 = v45;
    uint64_t v29 = v46;
    uint64_t v30 = v47;
    uint64_t v40 = v48;
    int v31 = v49;
    int v32 = v50;
    uint64_t v42 = v51;
    v2[3] = 0;
    v2[5] = MEMORY[0x263F8EE78];
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v33 = 0x100000000;
    if (!v31) {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v33 | v40;
    uint64_t v35 = 0x10000000000;
    if (!v32) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = v34 | v35 | (v42 << 48);
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v36 = 0;
  }
  *(void *)a2 = v25;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v27;
  *(void *)(a2 + 24) = v28;
  *(void *)(a2 + 32) = v29;
  *(void *)(a2 + 40) = v30;
  *(_DWORD *)(a2 + 48) = v36;
  *(unsigned char *)(a2 + 54) = BYTE6(v36);
  *(_WORD *)(a2 + 52) = WORD2(v36);
  return result;
}

uint64_t VAWordDecoder.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAWordDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_26146C614@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344))();
  *a2 = result;
  return result;
}

uint64_t sub_26146C668(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 352);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_26146C6C4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_26146C6FC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_26146C744())()
{
  return j__swift_endAccess;
}

uint64_t sub_26146C798()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_26146C7D0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease();
}

void sub_26146C818(void *a1, uint64_t a2)
{
}

void sub_26146C86C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v281 = sub_2614D4B78();
  uint64_t v249 = *(void *)(v281 - 8);
  MEMORY[0x270FA5388](v281);
  v280 = (char *)v244 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = sub_2614D50C8();
  uint64_t v256 = *(void *)(v257 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v257);
  v263 = (char *)v244 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v251 = (char *)v244 - v10;
  MEMORY[0x270FA5388](v9);
  v250 = (char *)v244 - v11;
  uint64_t v12 = *(void *)a2;
  __int32 v13 = *(_DWORD *)(a2 + 8);
  LODWORD(v275) = *(unsigned __int8 *)(a2 + 12);
  LODWORD(v279) = *(unsigned __int8 *)(a2 + 13);
  uint64_t v262 = *(void *)(a2 + 16);
  uint64_t v253 = *(void *)(a2 + 24);
  LODWORD(v259) = *(unsigned __int8 *)(a2 + 32);
  v274 = *(void **)(a2 + 40);
  LODWORD(v273) = *(unsigned __int8 *)(a2 + 48);
  LODWORD(v278) = *(unsigned __int8 *)(a2 + 49);
  int v14 = *(_DWORD *)(a2 + 52);
  LODWORD(v260) = *(unsigned __int8 *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 72);
  uint64_t v272 = *(void *)(a2 + 64);
  LODWORD(v271) = *(unsigned __int8 *)(a2 + 80);
  LODWORD(v265) = *(unsigned __int8 *)(a2 + 81);
  int v255 = *(unsigned __int8 *)(a2 + 82);
  LODWORD(v266) = *(unsigned __int8 *)(a2 + 83);
  LODWORD(v267) = *(unsigned __int8 *)(a2 + 84);
  LODWORD(v268) = *(unsigned __int8 *)(a2 + 85);
  LODWORD(v270) = *(unsigned __int8 *)(a2 + 86);
  uint64_t v16 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 128) = MEMORY[0x263F8EE78];
  *(void *)(v3 + 120) = v16;
  v261 = (void *)(v3 + 128);
  *(void *)(v3 + 16) = a1;
  float v17 = (void *)MEMORY[0x263F8EED0];
  uint64_t v18 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0xC8);
  BOOL v19 = a1;
  uint64_t v20 = (void *)v18();
  if (!v20)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2613DC2B8();
    swift_allocError();
    *char v39 = 0xD00000000000001BLL;
    v39[1] = 0x80000002614E5AD0;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for VAResultGenerator();
    swift_deallocPartialClassInstance();
    return;
  }
  uint64_t v252 = v15;
  uint64_t v254 = v12;
  *(void *)(v3 + 24) = v20;
  char v21 = *(uint64_t (**)(void))((*v17 & *v19) + 0x98);
  id v245 = v20;
  unint64_t v22 = (void *)v21();

  v264 = (void *)v3;
  id v258 = v19;
  if (v22)
  {
    unint64_t v23 = (void *)v21();
    char v24 = (char)v279;
    if (!v23)
    {
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }
    uint64_t v25 = v23;
    uint64_t v26 = (*(uint64_t (**)(void))((*v17 & *v23) + 0x170))();

    uint64_t v27 = v264;
    v264[12] = v26;
    uint64_t v28 = (void *)v21();
    if (!v28)
    {
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      sub_2614D5FF8();
      __break(1u);
      goto LABEL_206;
    }
    uint64_t v29 = v28;
    uint64_t v30 = (*(uint64_t (**)(void))((*v17 & *v28) + 0xB0))();

    v27[5] = v30;
    int v31 = (void *)v21();
    if (!v31) {
      goto LABEL_204;
    }
    int v32 = v31;
    uint64_t v33 = (*(uint64_t (**)(void))((*v17 & *v31) + 0x178))();

    v27[17] = v33;
    uint64_t v34 = v17;
    uint64_t v35 = v252;
    char v36 = v265;
    char v37 = v255;
    char v38 = (char)v278;
  }
  else
  {
    v286 = (void (**)(void, void))v254;
    __int32 v287 = v13;
    char v288 = (char)v275;
    char v289 = (char)v279;
    uint64_t v40 = v262;
    uint64_t v41 = v253;
    uint64_t v290 = v262;
    uint64_t v291 = v253;
    char v292 = v259;
    v293 = v274;
    char v294 = v273;
    char v38 = (char)v278;
    char v295 = (char)v278;
    int v296 = v14;
    char v42 = v260;
    char v297 = v260;
    uint64_t v43 = v252;
    uint64_t v298 = v272;
    uint64_t v299 = v252;
    char v300 = v271;
    char v301 = v265;
    char v37 = v255;
    char v302 = v255;
    char v303 = v266;
    char v304 = (char)v267;
    char v305 = (char)v268;
    char v306 = (char)v270;
    uint64_t v44 = *(void *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
    swift_bridgeObjectRelease();
    *(void *)(v3 + 96) = v44;
    *(void *)(v3 + 136) = v44;
    v286 = (void (**)(void, void))v254;
    __int32 v287 = v13;
    char v288 = (char)v275;
    char v289 = (char)v279;
    uint64_t v290 = v40;
    uint64_t v291 = v41;
    char v292 = v259;
    v293 = v274;
    char v294 = v273;
    char v295 = v38;
    int v296 = v14;
    char v297 = v42;
    uint64_t v298 = v272;
    uint64_t v299 = v43;
    char v300 = v271;
    char v36 = v265;
    char v301 = v265;
    char v302 = v37;
    char v303 = v266;
    char v304 = (char)v267;
    char v305 = (char)v268;
    char v306 = (char)v270;
    v277 = (uint8_t *)VARuntimeParameters.keywordsNoThresholds.getter();
    *(void *)(v3 + 40) = sub_261472C5C(MEMORY[0x263F8EE78]);
    uint64_t v45 = (uint64_t *)(v3 + 40);
    os_log_t v46 = *(os_log_t *)(v3 + 96);
    if (((unint64_t)v46 & 0x8000000000000000) != 0)
    {
LABEL_201:
      __break(1u);
      goto LABEL_202;
    }
    char v24 = (char)v279;
    if (v46)
    {
      uint64_t v47 = 0;
      unsigned int v48 = v277 + 40;
      os_log_t v276 = *(os_log_t *)(v3 + 96);
      while (v46 != v47)
      {
        if ((unint64_t)v47 >= *((void *)v277 + 2)) {
          goto LABEL_196;
        }
        uint64_t v51 = *((void *)v48 - 1);
        uint64_t v50 = *(void *)v48;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v282 = (void *)*v45;
        uint64_t v53 = (uint64_t)v282;
        uint64_t *v45 = 0x8000000000000000;
        unint64_t v55 = sub_2613D8F78((uint64_t)v47);
        uint64_t v56 = *(void *)(v53 + 16);
        BOOL v57 = (v54 & 1) == 0;
        uint64_t v58 = v56 + v57;
        if (__OFADD__(v56, v57)) {
          goto LABEL_197;
        }
        char v59 = v54;
        if (*(void *)(v53 + 24) >= v58)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_2613DA828();
          }
        }
        else
        {
          sub_2613DA264(v58, isUniquelyReferenced_nonNull_native);
          unint64_t v60 = sub_2613D8F78((uint64_t)v47);
          if ((v59 & 1) != (v61 & 1)) {
            goto LABEL_205;
          }
          unint64_t v55 = v60;
        }
        char v24 = (char)v279;
        uint64_t v62 = v282;
        if (v59)
        {
          unsigned __int8 v49 = (void *)(v282[7] + 16 * v55);
          swift_bridgeObjectRelease();
          void *v49 = v51;
          v49[1] = v50;
        }
        else
        {
          v282[(v55 >> 6) + 8] |= 1 << v55;
          *(void *)(v62[6] + 8 * v55) = v47;
          uint64_t v63 = (void *)(v62[7] + 16 * v55);
          void *v63 = v51;
          v63[1] = v50;
          uint64_t v64 = v62[2];
          BOOL v65 = __OFADD__(v64, 1);
          uint64_t v66 = v64 + 1;
          if (v65) {
            goto LABEL_199;
          }
          v62[2] = v66;
        }
        uint64_t v47 = ((char *)v47 + 1);
        uint64_t *v45 = (uint64_t)v62;
        swift_bridgeObjectRelease();
        swift_endAccess();
        v48 += 16;
        os_log_t v46 = v276;
        char v38 = (char)v278;
        if (v276 == v47)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = v264;
          uint64_t v34 = (void *)MEMORY[0x263F8EED0];
          uint64_t v35 = v252;
          char v36 = v265;
          char v37 = v255;
          goto LABEL_26;
        }
      }
      goto LABEL_195;
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v264;
    uint64_t v35 = v43;
    uint64_t v34 = (void *)MEMORY[0x263F8EED0];
  }
LABEL_26:
  v27[18] = sub_2613D1B04(v27[12], 0);
  v27[19] = sub_2613D1B04(v27[12], 0);
  uint64_t v67 = MEMORY[0x263F8EE78];
  v27[6] = MEMORY[0x263F8EE78];
  v27[7] = sub_2613D1B04(v27[12], 0);
  v27[10] = sub_2613D1B04(v27[12], 0);
  v307[0] = 0;
  v307[1] = 0xE000000000000000;
  int v308 = 0;
  uint64_t v310 = 0;
  uint64_t v311 = 0;
  uint64_t v309 = 0;
  int v312 = -1082130432;
  __int16 v313 = 0;
  char v314 = 2;
  v27[11] = sub_26146EB60((uint64_t)v307, v27[12]);
  v269 = (char **)(v27 + 10);
  v27[14] = v67;
  uint64_t v68 = v254;
  v286 = (void (**)(void, void))v254;
  __int32 v287 = v13;
  char v288 = (char)v275;
  char v289 = v24;
  uint64_t v290 = v262;
  uint64_t v291 = v253;
  char v292 = v259;
  v293 = v274;
  char v294 = v273;
  char v295 = v38;
  int v296 = v14;
  char v297 = v260;
  uint64_t v298 = v272;
  uint64_t v299 = v35;
  char v300 = v271;
  char v301 = v36;
  char v302 = v37;
  char v303 = v266;
  char v304 = (char)v267;
  char v305 = (char)v268;
  char v306 = (char)v270;
  uint64_t v69 = VARuntimeParameters.keywordsToThresholds.getter();
  uint64_t v70 = v248;
  uint64_t v71 = sub_26146EC8C(v69);
  swift_bridgeObjectRelease();
  if (*(void *)(v71 + 16))
  {
    sub_2613C23AC(&qword_26A9159A8);
    uint64_t v72 = sub_2614D5DD8();
  }
  else
  {
    uint64_t v72 = MEMORY[0x263F8EE80];
  }
  v286 = (void (**)(void, void))v72;
  uint64_t v73 = (void *)swift_bridgeObjectRetain();
  sub_26147209C(v73, 1, &v286);
  v244[1] = v70;
  if (!v70)
  {
    swift_bridgeObjectRelease();
    uint64_t v74 = (uint64_t)v286;
    char v75 = v264;
    v264[8] = 0;
    v75[9] = v74;
    unint64_t v76 = (void *)v75[3];
    unint64_t v77 = *(uint64_t (**)(void))((*v34 & *v76) + 0x258);
    uint64_t v78 = v76;
    uint64_t v79 = v77();

    v75[4] = v79;
    uint64_t v80 = sub_26146718C();
    uint64_t v81 = v256;
    uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v256 + 16);
    v83 = v250;
    uint64_t v248 = v80;
    uint64_t v84 = v257;
    uint64_t v247 = v256 + 16;
    v246 = v82;
    ((void (*)(char *))v82)(v250);
    swift_retain_n();
    v85 = sub_2614D50A8();
    os_log_type_t v86 = sub_2614D5968();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc();
      v279 = (void (**)(void, void))swift_slowAlloc();
      v286 = v279;
      v278 = v87;
      *(_DWORD *)v87 = 136315138;
      v277 = v87 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char v88 = v38;
      uint64_t v89 = sub_2614D52F8();
      unint64_t v91 = v90;
      swift_bridgeObjectRelease();
      uint64_t v92 = v89;
      char v38 = v88;
      v282 = (void *)sub_2613D875C(v92, v91, (uint64_t *)&v286);
      sub_2614D5B58();
      swift_release_n();
      uint64_t v68 = v254;
      swift_bridgeObjectRelease();
      v93 = v278;
      _os_log_impl(&dword_2613B8000, v85, v86, "Keywords Trained for: %s", v278, 0xCu);
      v94 = v279;
      swift_arrayDestroy();
      MEMORY[0x263E38060](v94, -1, -1);
      MEMORY[0x263E38060](v93, -1, -1);

      v95 = v250;
      uint64_t v96 = v257;
      v250 = *(char **)(v256 + 8);
      ((void (*)(char *, uint64_t))v250)(v95, v257);
      uint64_t v97 = v96;
    }
    else
    {

      swift_release_n();
      v250 = *(char **)(v81 + 8);
      ((void (*)(char *, uint64_t))v250)(v83, v84);
      uint64_t v97 = v84;
    }
    int v98 = (int)v275;
    v99 = v251;
    v246(v251, v248, v97);
    uint64_t v100 = v252;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v101 = sub_2614D50A8();
    os_log_type_t v102 = sub_2614D5968();
    int v103 = v102;
    BOOL v104 = os_log_type_enabled(v101, v102);
    LODWORD(v275) = v98;
    if (v104)
    {
      LODWORD(v279) = v103;
      v105 = (uint8_t *)swift_slowAlloc();
      v106 = (uint8_t *)swift_slowAlloc();
      v278 = v106;
      v277 = v105;
      *(_DWORD *)v105 = 136315138;
      v282 = v106;
      v244[0] = v105 + 4;
      v286 = (void (**)(void, void))v68;
      __int32 v287 = v13;
      char v288 = v98;
      char v289 = v24;
      os_log_t v276 = v101;
      uint64_t v107 = v253;
      uint64_t v290 = v262;
      uint64_t v291 = v253;
      char v108 = v259;
      char v292 = v259;
      v293 = v274;
      char v294 = v273;
      char v295 = v38;
      int v296 = v14;
      char v297 = v260;
      uint64_t v298 = v272;
      uint64_t v299 = v100;
      char v300 = v271;
      char v301 = v265;
      char v302 = v255;
      char v303 = v266;
      char v304 = (char)v267;
      char v305 = (char)v268;
      char v306 = (char)v270;
      VARuntimeParameters.keywordsNoThresholds.getter();
      char v109 = v24;
      char v110 = v38;
      uint64_t v111 = MEMORY[0x263E36790]();
      unint64_t v113 = v112;
      swift_bridgeObjectRelease();
      uint64_t v114 = v111;
      char v38 = v110;
      char v24 = v109;
      v286 = (void (**)(void, void))sub_2613D875C(v114, v113, (uint64_t *)&v282);
      uint64_t v115 = v107;
      sub_2614D5B58();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v116 = v254;
      swift_bridgeObjectRelease();
      os_log_t v117 = v276;
      v118 = v277;
      _os_log_impl(&dword_2613B8000, v276, (os_log_type_t)v279, "Keywords Looking for: %s", v277, 0xCu);
      v119 = v278;
      swift_arrayDestroy();
      v120 = v119;
      uint64_t v68 = v116;
      MEMORY[0x263E38060](v120, -1, -1);
      MEMORY[0x263E38060](v118, -1, -1);

      ((void (*)(char *, uint64_t))v250)(v251, v257);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      ((void (*)(char *, uint64_t))v250)(v99, v257);
      uint64_t v115 = v253;
      char v108 = v259;
    }
    v122 = v264;
    v121.i32[0] = v13;
    v122[13] = sub_2613D1B04(v264[12], v121);
    v123 = (char **)(v122 + 13);
    v286 = (void (**)(void, void))v68;
    __int32 v287 = v13;
    char v288 = (char)v275;
    char v289 = v24;
    uint64_t v290 = v262;
    uint64_t v291 = v115;
    char v292 = v108;
    v293 = v274;
    char v294 = v273;
    char v295 = v38;
    int v296 = v14;
    char v297 = v260;
    uint64_t v298 = v272;
    uint64_t v299 = v100;
    char v300 = v271;
    char v301 = v265;
    char v302 = v255;
    char v303 = v266;
    char v304 = (char)v267;
    char v305 = (char)v268;
    char v306 = (char)v270;
    uint64_t v124 = VARuntimeParameters.keywordsToThresholds.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v125 = *(void *)(v124 + 64);
    uint64_t v259 = v124 + 64;
    uint64_t v262 = v124;
    uint64_t v126 = 1 << *(unsigned char *)(v124 + 32);
    if (v126 < 64) {
      uint64_t v127 = ~(-1 << v126);
    }
    else {
      uint64_t v127 = -1;
    }
    unint64_t v266 = v127 & v125;
    v268 = v123;
    v267 = (NSObject **)(v123 - 8);
    swift_beginAccess();
    int64_t v128 = 0;
    int64_t v260 = (unint64_t)(v126 + 63) >> 6;
    v279 = (void (**)(void, void))(v249 + 8);
    v129 = (void *)MEMORY[0x263F8EE78];
LABEL_40:
    if (v266)
    {
      unint64_t v130 = __clz(__rbit64(v266));
      v266 &= v266 - 1;
      int64_t v265 = v128;
      unint64_t v131 = v130 | (v128 << 6);
      goto LABEL_53;
    }
    BOOL v65 = __OFADD__(v128, 1);
    int64_t v132 = v128 + 1;
    if (v65)
    {
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
      goto LABEL_200;
    }
    if (v132 >= v260)
    {
      id v134 = v258;
      goto LABEL_180;
    }
    unint64_t v133 = *(void *)(v259 + 8 * v132);
    id v134 = v258;
    if (v133)
    {
LABEL_52:
      unint64_t v266 = (v133 - 1) & v133;
      int64_t v265 = v132;
      unint64_t v131 = __clz(__rbit64(v133)) + (v132 << 6);
LABEL_53:
      uint64_t v136 = *(void *)(v262 + 56);
      v137 = (uint64_t *)(*(void *)(v262 + 48) + 16 * v131);
      uint64_t v138 = v137[1];
      v275 = (uint8_t *)*v137;
      int v139 = *(_DWORD *)(v136 + 4 * v131);
      v140 = *v267;
      Class isa = (*v267)[8].isa;
      uint64_t v272 = (uint64_t)&(*v267)[8];
      uint64_t v142 = 1 << LOBYTE(v140[4].isa);
      if (v142 < 64) {
        uint64_t v143 = ~(-1 << v142);
      }
      else {
        uint64_t v143 = -1;
      }
      unint64_t v144 = v143 & (unint64_t)isa;
      int64_t v273 = (unint64_t)(v142 + 63) >> 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v145 = 0;
      unint64_t v271 = v138;
      v270 = v140;
      if (!v144) {
        goto LABEL_58;
      }
LABEL_57:
      v278 = (uint8_t *)((v144 - 1) & v144);
      for (unint64_t i = __clz(__rbit64(v144)) | ((void)v145 << 6); ; unint64_t i = __clz(__rbit64(v147)) + ((void)v145 << 6))
      {
        Class v149 = v140[7].isa;
        v274 = (void *)*((void *)v140[6].isa + i);
        v150 = (uint64_t *)((char *)v149 + 16 * i);
        uint64_t v152 = *v150;
        unint64_t v151 = v150[1];
        v282 = (void *)v152;
        unint64_t v283 = v151;
        uint64_t v284 = 44;
        unint64_t v285 = 0xE100000000000000;
        sub_2613DC3BC();
        v153 = sub_2614D5B88();
        int64_t v154 = (int64_t)v153[2].isa;
        if (v154)
        {
          v277 = v145;
          uint64_t v284 = (uint64_t)v129;
          sub_2613D913C(0, v154, 0);
          os_log_t v276 = v153;
          v155 = v153 + 5;
          do
          {
            unint64_t v156 = (unint64_t)v155->isa;
            v282 = v155[-1].isa;
            unint64_t v283 = v156;
            swift_bridgeObjectRetain();
            v157 = v280;
            sub_2614D4AF8();
            uint64_t v158 = sub_2614D5BA8();
            uint64_t v160 = v159;
            (*v279)(v157, v281);
            swift_bridgeObjectRelease();
            v161 = (void *)v284;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_2613D913C(0, v161[2] + 1, 1);
              v161 = (void *)v284;
            }
            unint64_t v163 = v161[2];
            unint64_t v162 = v161[3];
            if (v163 >= v162 >> 1)
            {
              sub_2613D913C(v162 > 1, v163 + 1, 1);
              v161 = (void *)v284;
            }
            v155 += 2;
            v161[2] = v163 + 1;
            v164 = &v161[2 * v163];
            v164[4] = v158;
            v164[5] = v160;
            --v154;
          }
          while (v154);
          swift_bridgeObjectRelease();
          v129 = (void *)MEMORY[0x263F8EE78];
          uint64_t v138 = v271;
          v140 = v270;
          v145 = v277;
        }
        else
        {
          swift_bridgeObjectRelease();
          v161 = v129;
        }
        uint64_t v165 = v161[2];
        if (!v165)
        {
LABEL_89:
          swift_bridgeObjectRelease();
          goto LABEL_90;
        }
        BOOL v166 = (uint8_t *)v161[4] == v275 && v161[5] == v138;
        if (v166 || (sub_2614D5FB8() & 1) != 0) {
          goto LABEL_105;
        }
        if (v165 == 1) {
          goto LABEL_89;
        }
        if (uint8_t *)v161[6] == v275 && v161[7] == v138 || (sub_2614D5FB8())
        {
LABEL_105:
          swift_bridgeObjectRelease();
          v172 = sub_2613D864C(0, 1, 1, v129);
          unint64_t v174 = v172[2];
          unint64_t v173 = v172[3];
          unint64_t v175 = (unint64_t)v274;
          if (v174 >= v173 >> 1) {
            v172 = sub_2613D864C((void *)(v173 > 1), v174 + 1, 1, v172);
          }
          v172[2] = v174 + 1;
          v176 = &v172[2 * v174];
          v176[4] = v275;
          v176[5] = v138;
          v177 = v269;
          swift_beginAccess();
          v178 = *v177;
          char v179 = swift_isUniquelyReferenced_nonNull_native();
          *v177 = v178;
          if (v179)
          {
            if ((v175 & 0x8000000000000000) != 0) {
              goto LABEL_190;
            }
          }
          else
          {
            v178 = sub_2613D8E30((uint64_t)v178);
            *v269 = v178;
            if ((v175 & 0x8000000000000000) != 0) {
              goto LABEL_190;
            }
          }
          if (v175 >= *((void *)v178 + 2))
          {
LABEL_191:
            __break(1u);
          }
          else
          {
            *(_DWORD *)&v178[4 * v175 + 32] = 1065353216;
            swift_endAccess();
            v180 = v268;
            swift_beginAccess();
            v181 = *v180;
            char v182 = swift_isUniquelyReferenced_nonNull_native();
            *v180 = v181;
            if ((v182 & 1) == 0)
            {
              v181 = sub_2613D8E30((uint64_t)v181);
              *v268 = v181;
            }
            if (v175 < *((void *)v181 + 2))
            {
              *(_DWORD *)&v181[4 * v175 + 32] = v139;
              swift_endAccess();
              swift_release();
              goto LABEL_114;
            }
          }
          __break(1u);
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
        if (v165 == 2) {
          goto LABEL_89;
        }
        v167 = v145;
        v168 = v161 + 9;
        uint64_t v169 = 2;
        do
        {
          uint64_t v170 = v169 + 1;
          if (__OFADD__(v169, 1))
          {
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
            goto LABEL_189;
          }
          BOOL v171 = (uint8_t *)*(v168 - 1) == v275 && *v168 == v138;
          if (v171 || (sub_2614D5FB8() & 1) != 0) {
            goto LABEL_105;
          }
          v168 += 2;
          ++v169;
        }
        while (v170 != v165);
        swift_bridgeObjectRelease();
        v145 = v167;
LABEL_90:
        unint64_t v144 = (unint64_t)v278;
        if (v278) {
          goto LABEL_57;
        }
LABEL_58:
        BOOL v65 = __OFADD__(v145++, 1);
        if (v65) {
          goto LABEL_184;
        }
        if ((uint64_t)v145 >= v273) {
          goto LABEL_118;
        }
        unint64_t v147 = *(void *)(v272 + 8 * (void)v145);
        if (v147) {
          goto LABEL_68;
        }
        v148 = v145 + 1;
        if ((uint64_t)(v145 + 1) >= v273) {
          goto LABEL_118;
        }
        unint64_t v147 = *(void *)(v272 + 8 * (void)v148);
        if (v147) {
          goto LABEL_67;
        }
        v148 = v145 + 2;
        if ((uint64_t)(v145 + 2) >= v273) {
          goto LABEL_118;
        }
        unint64_t v147 = *(void *)(v272 + 8 * (void)v148);
        if (v147) {
          goto LABEL_67;
        }
        v148 = v145 + 3;
        if ((uint64_t)(v145 + 3) >= v273)
        {
LABEL_118:
          swift_release();
          swift_bridgeObjectRetain();
          v190 = v275;
          if (sub_2614D5488() < 1)
          {
            swift_bridgeObjectRelease_n();
            v172 = v129;
            goto LABEL_114;
          }
          v278 = v190;
          unint64_t v191 = v138;
          v172 = v129;
LABEL_120:
          v192 = *v267;
          Class v193 = (*v267)[8].isa;
          os_log_t v276 = *v267 + 8;
          uint64_t v194 = 1 << LOBYTE(v192[4].isa);
          if (v194 < 64) {
            uint64_t v195 = ~(-1 << v194);
          }
          else {
            uint64_t v195 = -1;
          }
          unint64_t v196 = v195 & (unint64_t)v193;
          v277 = (uint8_t *)((unint64_t)(v194 + 63) >> 6);
          swift_bridgeObjectRetain();
          char v197 = 0;
          uint64_t v198 = 0;
          if (v196)
          {
LABEL_124:
            unint64_t v199 = __clz(__rbit64(v196));
            v196 &= v196 - 1;
            unint64_t v200 = v199 | (v198 << 6);
            goto LABEL_125;
          }
          while (1)
          {
            BOOL v65 = __OFADD__(v198++, 1);
            if (v65)
            {
              __break(1u);
              goto LABEL_182;
            }
            if (v198 >= (uint64_t)v277) {
              goto LABEL_165;
            }
            unint64_t v205 = (unint64_t)v276[v198].isa;
            if (!v205)
            {
              uint64_t v206 = v198 + 1;
              if (v198 + 1 >= (uint64_t)v277) {
                goto LABEL_165;
              }
              unint64_t v205 = (unint64_t)v276[v206].isa;
              if (!v205)
              {
                uint64_t v206 = v198 + 2;
                if (v198 + 2 >= (uint64_t)v277) {
                  goto LABEL_165;
                }
                unint64_t v205 = (unint64_t)v276[v206].isa;
                if (!v205)
                {
                  uint64_t v206 = v198 + 3;
                  if (v198 + 3 >= (uint64_t)v277)
                  {
LABEL_165:
                    v234 = v263;
                    swift_release();
                    if ((v197 & 1) == 0)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v235 = v257;
                      v246(v234, v248, v257);
                      unint64_t v236 = v271;
                      swift_bridgeObjectRetain_n();
                      v237 = sub_2614D50A8();
                      os_log_type_t v238 = sub_2614D5978();
                      if (os_log_type_enabled(v237, v238))
                      {
                        v239 = (uint8_t *)swift_slowAlloc();
                        uint64_t v240 = swift_slowAlloc();
                        v282 = (void *)v240;
                        *(_DWORD *)v239 = 136315138;
                        swift_bridgeObjectRetain();
                        uint64_t v284 = sub_2613D875C((uint64_t)v275, v236, (uint64_t *)&v282);
                        sub_2614D5B58();
                        swift_bridgeObjectRelease_n();
                        _os_log_impl(&dword_2613B8000, v237, v238, "Could not create keyword %s", v239, 0xCu);
                        swift_arrayDestroy();
                        MEMORY[0x263E38060](v240, -1, -1);
                        MEMORY[0x263E38060](v239, -1, -1);

                        ((void (*)(char *, uint64_t))v250)(v263, v235);
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n();
                        ((void (*)(char *, uint64_t))v250)(v234, v235);
                      }
                      v282 = 0;
                      unint64_t v283 = 0xE000000000000000;
                      sub_2614D5C38();
                      swift_bridgeObjectRelease();
                      v282 = (void *)0xD000000000000019;
                      unint64_t v283 = 0x80000002614E5B10;
                      sub_2614D54D8();
                      swift_bridgeObjectRelease();
                      uint64_t v241 = (uint64_t)v282;
                      unint64_t v242 = v283;
                      sub_2613DC2B8();
                      swift_allocError();
                      uint64_t *v243 = v241;
                      v243[1] = v242;
                      swift_willThrow();
                      swift_release();
                      swift_release();

                      return;
                    }
                    if (sub_2614D5488() > 0) {
                      goto LABEL_120;
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v129 = (void *)MEMORY[0x263F8EE78];
LABEL_114:
                    v183 = (void *)v264[3];
                    v184 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v183) + 0x168);
                    v185 = v183;
                    uint64_t v186 = v184();

                    if (!__OFADD__(v186, 100))
                    {
                      type metadata accessor for VAWordDecoder();
                      v187 = (void *)swift_allocObject();
                      v187[2] = v186 + 100;
                      v187[3] = 0;
                      v187[4] = v172;
                      v187[5] = v129;
                      v187[6] = 10;
                      v188 = v261;
                      uint64_t v189 = swift_beginAccess();
                      MEMORY[0x263E36760](v189);
                      if (*(void *)((*v188 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v188 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
                        sub_2614D5698();
                      sub_2614D56E8();
                      sub_2614D5678();
                      swift_endAccess();
                      int64_t v128 = v265;
                      goto LABEL_40;
                    }
LABEL_189:
                    __break(1u);
LABEL_190:
                    __break(1u);
                    goto LABEL_191;
                  }
                  unint64_t v205 = (unint64_t)v276[v206].isa;
                  if (!v205)
                  {
                    while (1)
                    {
                      uint64_t v198 = v206 + 1;
                      if (__OFADD__(v206, 1)) {
                        goto LABEL_183;
                      }
                      if (v198 >= (uint64_t)v277) {
                        goto LABEL_165;
                      }
                      unint64_t v205 = (unint64_t)v276[v198].isa;
                      ++v206;
                      if (v205) {
                        goto LABEL_137;
                      }
                    }
                  }
                }
              }
              uint64_t v198 = v206;
            }
LABEL_137:
            unint64_t v196 = (v205 - 1) & v205;
            unint64_t v200 = __clz(__rbit64(v205)) + (v198 << 6);
LABEL_125:
            unint64_t v201 = *((void *)v192[6].isa + v200);
            v202 = (uint64_t *)((char *)v192[7].isa + 16 * v200);
            uint64_t v204 = *v202;
            uint64_t v203 = v202[1];
            swift_bridgeObjectRetain();
            if (sub_2614D5568())
            {
              v274 = v172;
              v207 = v269;
              swift_beginAccess();
              v208 = *v207;
              char v209 = swift_isUniquelyReferenced_nonNull_native();
              *v207 = v208;
              if (v209)
              {
                if ((v201 & 0x8000000000000000) != 0) {
                  goto LABEL_185;
                }
              }
              else
              {
                v208 = sub_2613D8E30((uint64_t)v208);
                *v269 = v208;
                if ((v201 & 0x8000000000000000) != 0) {
                  goto LABEL_185;
                }
              }
              if (v201 >= *((void *)v208 + 2)) {
                goto LABEL_186;
              }
              *(_DWORD *)&v208[4 * v201 + 32] = 1065353216;
              swift_endAccess();
              v210 = v268;
              swift_beginAccess();
              v211 = *v210;
              char v212 = swift_isUniquelyReferenced_nonNull_native();
              *v210 = v211;
              if ((v212 & 1) == 0)
              {
                v211 = sub_2613D8E30((uint64_t)v211);
                *v268 = v211;
              }
              v172 = v274;
              if (v201 >= *((void *)v211 + 2)) {
                goto LABEL_187;
              }
              *(_DWORD *)&v211[4 * v201 + 32] = v139;
              swift_endAccess();
              swift_bridgeObjectRetain();
              sub_2614D5488();
              unint64_t v213 = (unint64_t)v278;
              unint64_t v214 = sub_2614D54B8();
              swift_bridgeObjectRelease();
              uint64_t v215 = HIBYTE(v191) & 0xF;
              if ((v191 & 0x2000000000000000) == 0) {
                uint64_t v215 = v213 & 0xFFFFFFFFFFFFLL;
              }
              if (4 * v215 < v214 >> 14) {
                goto LABEL_188;
              }
              v278 = (uint8_t *)sub_2614D55B8();
              uint64_t v217 = v216;
              v274 = v218;
              uint64_t v220 = v219;
              swift_bridgeObjectRelease();
              unint64_t v221 = MEMORY[0x263E36570](v278, v217, v274, v220);
              unint64_t v191 = v222;
              swift_bridgeObjectRelease();
              if (sub_2614D5568())
              {
                swift_bridgeObjectRetain();
                unint64_t v223 = sub_2614D54B8();
                swift_bridgeObjectRelease();
                uint64_t v224 = HIBYTE(v191) & 0xF;
                if ((v191 & 0x2000000000000000) == 0) {
                  uint64_t v224 = v221 & 0xFFFFFFFFFFFFLL;
                }
                if (4 * v224 < v223 >> 14) {
                  goto LABEL_193;
                }
                v278 = (uint8_t *)sub_2614D55B8();
                uint64_t v226 = v225;
                v274 = v227;
                uint64_t v229 = v228;
                swift_bridgeObjectRelease();
                v278 = (uint8_t *)MEMORY[0x263E36570](v278, v226, v274, v229);
                unint64_t v191 = v230;
                swift_bridgeObjectRelease();
              }
              else
              {
                v278 = (uint8_t *)v221;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                v172 = sub_2613D864C(0, v172[2] + 1, 1, v172);
              }
              unint64_t v232 = v172[2];
              unint64_t v231 = v172[3];
              if (v232 >= v231 >> 1) {
                v172 = sub_2613D864C((void *)(v231 > 1), v232 + 1, 1, v172);
              }
              v172[2] = v232 + 1;
              v233 = &v172[2 * v232];
              v233[4] = v204;
              v233[5] = v203;
              char v197 = 1;
              if (v196) {
                goto LABEL_124;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              if (v196) {
                goto LABEL_124;
              }
            }
          }
        }
        unint64_t v147 = *(void *)(v272 + 8 * (void)v148);
        if (!v147) {
          break;
        }
LABEL_67:
        v145 = v148;
LABEL_68:
        v278 = (uint8_t *)((v147 - 1) & v147);
      }
      while (1)
      {
        v145 = v148 + 1;
        if (__OFADD__(v148, 1)) {
          break;
        }
        if ((uint64_t)v145 >= v273) {
          goto LABEL_118;
        }
        unint64_t v147 = *(void *)(v272 + 8 * (void)v145);
        ++v148;
        if (v147) {
          goto LABEL_68;
        }
      }
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
      goto LABEL_198;
    }
    int64_t v135 = v132 + 1;
    if (v132 + 1 < v260)
    {
      unint64_t v133 = *(void *)(v259 + 8 * v135);
      if (v133) {
        goto LABEL_51;
      }
      int64_t v135 = v132 + 2;
      if (v132 + 2 >= v260) {
        goto LABEL_180;
      }
      unint64_t v133 = *(void *)(v259 + 8 * v135);
      if (v133)
      {
LABEL_51:
        int64_t v132 = v135;
        goto LABEL_52;
      }
      int64_t v135 = v132 + 3;
      if (v132 + 3 < v260)
      {
        unint64_t v133 = *(void *)(v259 + 8 * v135);
        if (!v133)
        {
          while (1)
          {
            int64_t v132 = v135 + 1;
            if (__OFADD__(v135, 1)) {
              break;
            }
            if (v132 >= v260) {
              goto LABEL_180;
            }
            unint64_t v133 = *(void *)(v259 + 8 * v132);
            ++v135;
            if (v133) {
              goto LABEL_52;
            }
          }
LABEL_200:
          __break(1u);
          goto LABEL_201;
        }
        goto LABEL_51;
      }
    }
LABEL_180:

    swift_release();
    return;
  }
LABEL_206:
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_26146EB60(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_2614D5D58();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v4 = sub_2614D56C8();
      uint64_t v5 = v4;
      *(void *)(v4 + 16) = a2;
      long long v7 = *(_OWORD *)(a1 + 16);
      long long v6 = *(_OWORD *)(a1 + 32);
      long long v8 = *(_OWORD *)a1;
      *(void *)(v4 + 79) = *(void *)(a1 + 47);
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 64) = v6;
      *(_OWORD *)(v4 + 32) = v8;
      if (a2 != 1)
      {
        long long v9 = *(_OWORD *)a1;
        long long v10 = *(_OWORD *)(a1 + 16);
        long long v11 = *(_OWORD *)(a1 + 32);
        *(void *)(v4 + 135) = *(void *)(a1 + 47);
        *(_OWORD *)(v4 + 120) = v11;
        *(_OWORD *)(v4 + 104) = v10;
        *(_OWORD *)(v4 + 88) = v9;
        uint64_t v12 = a2 - 2;
        if (v12)
        {
          uint64_t v13 = v4 + 144;
          do
          {
            sub_2613DC30C(a1);
            long long v15 = *(_OWORD *)(a1 + 16);
            long long v14 = *(_OWORD *)(a1 + 32);
            long long v16 = *(_OWORD *)a1;
            *(void *)(v13 + 47) = *(void *)(a1 + 47);
            *(_OWORD *)(v13 + 16) = v15;
            *(_OWORD *)(v13 + 32) = v14;
            *(_OWORD *)uint64_t v13 = v16;
            v13 += 56;
            --v12;
          }
          while (v12);
        }
        sub_2613DC30C(a1);
      }
    }
    else
    {
      sub_2613DC364(a1);
      return MEMORY[0x263F8EE78];
    }
    return v5;
  }
  return result;
}

uint64_t sub_26146EC8C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v26 = MEMORY[0x263F8EE78];
  sub_2614728EC(0, v1, 0);
  uint64_t v2 = v26;
  uint64_t result = sub_261472AB4(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  int64_t v22 = v1;
  int v23 = v5;
  uint64_t v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v13 = v12[1];
    uint64_t v25 = *v12;
    unint64_t v15 = *(void *)(v26 + 16);
    unint64_t v14 = *(void *)(v26 + 24);
    uint64_t result = swift_bridgeObjectRetain();
    if (v15 >= v14 >> 1) {
      uint64_t result = sub_2614728EC(v14 > 1, v15 + 1, 1);
    }
    *(void *)(v26 + 16) = v15 + 1;
    long long v16 = (void *)(v26 + 24 * v15);
    v16[4] = v25;
    v16[5] = v13;
    v16[6] = -100;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v17 = *(void *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23) {
      goto LABEL_27;
    }
    unint64_t v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      int64_t v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v22;
    }
    else
    {
      unint64_t v19 = v11 + 1;
      unint64_t v20 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v22;
      if (v11 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            unint64_t v21 = *(void *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              unint64_t v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_26146EEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (*(void (**)(void))(*(void *)v7 + 608))();
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 600);
  return v15(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_26146EF80(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, char a6, char a7)
{
  void (*v158)(uint64_t *__return_ptr, void *);
  uint64_t v159;
  uint64_t (*v160)(void);
  unint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  char v167;
  unint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  char v172;
  unint64_t v173;
  char v174;
  void *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (**v179)(void);
  unint64_t v180;
  unint64_t v181;
  int v182;
  uint64_t (**v183)(void);
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t k;
  uint64_t v193;
  uint64_t (*v194)(void);
  uint64_t v195;
  uint64_t (**v196)(void);
  uint64_t v197;
  float *v198;
  uint64_t (**v199)(void);
  uint64_t v200;
  uint64_t v201;
  float v202;
  uint64_t (*v203)(void);
  char v204;
  char v205;
  int v206;
  int v207;
  void *v208;
  char v209;
  uint64_t (*v210)(void);
  unint64_t v211;
  unint64_t v212;
  void *v213;
  uint64_t (*v214)(void);
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(void);
  void *v218;
  double v219;
  void *v220;
  double v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  double v226;
  void *v227;
  double v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t (*v238)(void);
  uint64_t v239;
  uint64_t (*v240)(void);
  uint64_t v241;
  char v242;
  char v243;
  char v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  void *v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  float *v254;
  uint64_t v255;
  uint64_t v256;
  float v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  char v262;
  char v263;
  char v264;
  char v265;
  unint64_t v266;
  unint64_t v267;
  void *v268;
  uint64_t (*v269)(void);
  uint64_t v270;
  uint64_t (*v271)(void);
  void *v272;
  double v273;
  void *v274;
  double v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  double v281;
  void *v282;
  double v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  int v292;
  uint64_t (*v293)(void);
  uint64_t v294;
  uint64_t (*v295)(void);
  uint64_t v296;
  char v297;
  char v298;
  char v299;
  unint64_t v300;
  unint64_t v301;
  void *v302;
  uint64_t result;
  uint64_t v304;
  void *v305;
  uint64_t *v306;
  uint64_t (*v307)(void);
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  void **v313;
  uint64_t v314;
  void *v315;
  int v316;
  uint64_t v317;
  void *v318;
  int v319;
  uint64_t v320;
  char v321;
  int v322;
  uint64_t (*v323)(void);
  uint64_t v324;
  char v325;
  uint64_t (*v326)(uint64_t);
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t (*v330)(uint64_t);
  uint64_t (*v331)(void);
  uint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  char v335;
  uint64_t (**v336)(void);
  uint64_t *v337;
  uint64_t (*v338)(void);
  uint64_t v339;
  uint64_t (*v340)(void);
  uint64_t (*v341)(void);
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t (*v345)(void);
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  int v353;
  uint64_t (*v354)(void);
  uint64_t v355;
  uint64_t (*v356)(void);
  uint64_t v357;
  char v358;
  char v359;
  char v360;
  void v361[2];
  int v362;
  uint64_t v363;
  long long v364;
  int v365;
  char v366;
  char v367;
  char v368;

  uint64_t v10 = *(void *)(v8 + 64);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    goto LABEL_271;
  }
  unint64_t v7 = a1;
  v324 = a3;
  v327 = a4;
  *(void *)(v8 + 64) = v12;
  long long v16 = (uint64_t (**)(void))(*(void *)v8 + 536);
  v340 = *v16;
  v336 = v16;
  vDSP_Length v17 = *(void *)((*v16)() + 16);
  swift_bridgeObjectRelease();
  v350 = v8;
  v344 = *(void *)(*(void *)v8 + 552);
  uint64_t v8 = ((uint64_t (*)(uint64_t *))v344)(&v351);
  unint64_t v19 = v18;
  uint64_t j = *v18;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v19 = j;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t j = (uint64_t)sub_2613D8310(0, *(void *)(j + 16), 0, (char *)j);
  }
  *unint64_t v19 = j;
  swift_bridgeObjectRetain();
  vDSP_vclr((float *)(j + 32), 1, v17);
  ((void (*)(uint64_t *, void))v8)(&v351, 0);
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v350 + 96);
  if (v22 < 0) {
    goto LABEL_272;
  }
  LOBYTE(v316) = a6;
  LOBYTE(v322) = a5;
  LOBYTE(v319) = a7;
  if (v22)
  {
    int v23 = (uint64_t *)(v350 + 56);
    uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)v350 + 344);
    if ((unint64_t)(v22 - 1) >= *(void *)(v7 + 16)) {
      goto LABEL_326;
    }
    for (unint64_t i = 0; i != v22; j = i)
    {
      float v26 = *(float *)(v7 + 32 + 4 * i);
      uint64_t v8 = v350;
      uint64_t v27 = v24(v21);
      if (i >= *(void *)(v27 + 16)) {
        goto LABEL_232;
      }
      float v28 = *(float *)(v27 + 4 * i + 32);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v8 = *v23;
      char v29 = swift_isUniquelyReferenced_nonNull_native();
      *int v23 = v8;
      if ((v29 & 1) == 0)
      {
        uint64_t v8 = (uint64_t)sub_2613D8E30(v8);
        *int v23 = v8;
      }
      if (i >= *(void *)(v8 + 16))
      {
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
        goto LABEL_237;
      }
      *(float *)(v8 + 4 * i + 32) = (float)(v26 * v28) + *(float *)(v8 + 4 * i + 32);
      uint64_t v21 = swift_endAccess();
      ++i;
    }
  }
  uint64_t j = v350 + 48;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v350 + 48);
  swift_bridgeObjectRetain();
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v350 + 48) = v8;
  if ((v30 & 1) == 0) {
    goto LABEL_273;
  }
  while (1)
  {
    unint64_t v32 = *(void *)(v8 + 16);
    unint64_t v31 = *(void *)(v8 + 24);
    if (v32 >= v31 >> 1)
    {
      uint64_t v8 = (uint64_t)sub_26140C714((void *)(v31 > 1), v32 + 1, 1, (void *)v8);
      *(void *)uint64_t j = v8;
    }
    *(void *)(v8 + 16) = v32 + 1;
    *(void *)(v8 + 8 * v32 + 32) = v7;
    uint64_t v33 = swift_endAccess();
    uint64_t v34 = *(void *)(v350 + 64);
    uint64_t v8 = *(void *)(v350 + 24);
    v315 = (void *)v8;
    uint64_t v35 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *(void *)v8) + 0x168);
    uint64_t v36 = v35(v33);
    if (v36 >= v34)
    {
      uint64_t v52 = *(void *)(v350 + 96);
      if (v52 < 0) {
        goto LABEL_328;
      }
      if (v52)
      {
        unint64_t v7 = v350 + 56;
        swift_beginAccess();
        unint64_t v53 = 0;
        while (v53 < *(void *)(*(void *)v7 + 16))
        {
          float v54 = *(float *)(*(void *)v7 + 4 * v53 + 32);
          uint64_t v55 = *(void *)(v350 + 64);
          uint64_t v8 = ((uint64_t (*)(uint64_t *))v344)(&v351);
          uint64_t j = (uint64_t)v56;
          BOOL v57 = *v56;
          char v58 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t j = v57;
          if ((v58 & 1) == 0)
          {
            BOOL v57 = sub_2613D8E30((uint64_t)v57);
            *(void *)uint64_t j = v57;
          }
          if (v53 >= *((void *)v57 + 2)) {
            goto LABEL_238;
          }
          *(float *)&v57[4 * v53 + 32] = v54 / (float)v55;
          uint64_t v36 = ((uint64_t (*)(uint64_t *, void))v8)(&v351, 0);
          if (v52 == ++v53) {
            goto LABEL_41;
          }
        }
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }
    }
    else
    {
      swift_beginAccess();
      if (!*(void *)(*(void *)j + 16)) {
        goto LABEL_327;
      }
      unint64_t v7 = *(void *)(*(void *)j + 32);
      swift_bridgeObjectRetain();
      sub_2614661C0(0, 1);
      swift_endAccess();
      uint64_t v37 = *(void *)(v350 + 96);
      if (v37 < 0) {
        goto LABEL_329;
      }
      if (v37)
      {
        if ((unint64_t)(v37 - 1) >= *(void *)(v7 + 16)) {
          goto LABEL_334;
        }
        char v38 = (char **)(v350 + 56);
        uint64_t v39 = -v37;
        uint64_t v40 = 8;
        while (1)
        {
          float v41 = *(float *)(v7 + 4 * v40);
          swift_beginAccess();
          char v42 = *v38;
          char v43 = swift_isUniquelyReferenced_nonNull_native();
          *char v38 = v42;
          if ((v43 & 1) == 0)
          {
            char v42 = sub_2613D8E30((uint64_t)v42);
            *char v38 = v42;
          }
          uint64_t v8 = (uint64_t)v315;
          unint64_t v44 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= *((void *)v42 + 2)) {
            break;
          }
          *(float *)&v42[4 * v40] = *(float *)&v42[4 * v40] - v41;
          uint64_t v45 = *v38;
          uint64_t v46 = swift_endAccess();
          if (v44 >= *((void *)v45 + 2)) {
            goto LABEL_240;
          }
          float v47 = *(float *)&v45[4 * v40];
          uint64_t j = v35(v46);
          uint64_t v8 = ((uint64_t (*)(uint64_t *))v344)(&v351);
          unsigned __int8 v49 = v48;
          uint64_t v50 = *v48;
          char v51 = swift_isUniquelyReferenced_nonNull_native();
          void *v49 = v50;
          if ((v51 & 1) == 0)
          {
            uint64_t v50 = sub_2613D8E30((uint64_t)v50);
            void *v49 = v50;
          }
          if (v44 >= *((void *)v50 + 2)) {
            goto LABEL_241;
          }
          *(float *)&v50[4 * v40] = v47 / (float)j;
          ((void (*)(uint64_t *, void))v8)(&v351, 0);
          ++v40;
          if (v39 + v40 == 8) {
            goto LABEL_40;
          }
        }
LABEL_239:
        __break(1u);
LABEL_240:
        __break(1u);
LABEL_241:
        __break(1u);
        goto LABEL_242;
      }
LABEL_40:
      uint64_t v36 = swift_bridgeObjectRelease();
    }
LABEL_41:
    char v59 = *(uint64_t (**)(uint64_t))(*(void *)v350 + 560);
    v333 = *(void *)v350 + 560;
    unint64_t v7 = *(void *)(v59(v36) + 16);
    swift_bridgeObjectRelease();
    unint64_t v60 = *(uint64_t (**)(uint64_t *))(*(void *)v350 + 576);
    char v61 = (void (*)(uint64_t *, void))v60(&v351);
    uint64_t j = (uint64_t)v62;
    uint64_t v63 = *v62;
    char v64 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t j = v63;
    if ((v64 & 1) == 0) {
      uint64_t v63 = sub_2613D8310(0, *((void *)v63 + 2), 0, v63);
    }
    *(void *)uint64_t j = v63;
    swift_bridgeObjectRetain();
    vDSP_vclr((float *)v63 + 8, 1, v7);
    v61(&v351, 0);
    uint64_t v65 = swift_bridgeObjectRelease();
    v330 = v59;
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v315) + 0x240))(v65)) {
      break;
    }
    uint64_t v8 = v350;
    uint64_t v71 = *(void *)(v350 + 96);
    if (v71 < 0) {
      goto LABEL_330;
    }
    if (!v71) {
      goto LABEL_80;
    }
    unint64_t v72 = 0;
    while (1)
    {
      uint64_t v73 = v340();
      if (v72 >= *(void *)(v73 + 16)) {
        break;
      }
      int v74 = *(_DWORD *)(v73 + 4 * v72 + 32);
      swift_bridgeObjectRelease();
      unint64_t v7 = v60(&v351);
      unint64_t v76 = v75;
      uint64_t v8 = *v75;
      char v77 = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v76 = v8;
      if ((v77 & 1) == 0)
      {
        uint64_t v8 = (uint64_t)sub_2613D8E30(v8);
        *unint64_t v76 = v8;
      }
      if (v72 >= *(void *)(v8 + 16)) {
        goto LABEL_243;
      }
      *(_DWORD *)(v8 + 4 * v72 + 32) = v74;
      ((void (*)(uint64_t *, void))v7)(&v351, 0);
      ++v72;
      uint64_t v8 = v350;
      if (v71 == v72) {
        goto LABEL_80;
      }
    }
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    uint64_t v8 = (uint64_t)sub_26140C714(0, *(void *)(v8 + 16) + 1, 1, (void *)v8);
    *(void *)uint64_t j = v8;
  }
  unint64_t v7 = v340();
  uint64_t v66 = v340();
  unint64_t v67 = sub_2614714B4(v66);
  swift_bridgeObjectRelease();
  if ((v67 & 0x100000000) != 0) {
    goto LABEL_336;
  }
  uint64_t v68 = *(void *)(v7 + 16);
  if (v68)
  {
    unint64_t v69 = 0;
    if (*(float *)(v7 + 32) == *(float *)&v67)
    {
      BOOL v70 = 1;
    }
    else
    {
      uint64_t v78 = v68 - 1;
      while (1)
      {
        BOOL v70 = v78 != v69;
        if (v78 == v69) {
          break;
        }
        float v79 = *(float *)(v7 + 36 + 4 * v69++);
        if (v79 == *(float *)&v67) {
          goto LABEL_63;
        }
      }
      unint64_t v69 = 0;
    }
  }
  else
  {
    unint64_t v69 = 0;
    BOOL v70 = 0;
  }
LABEL_63:
  uint64_t v80 = swift_bridgeObjectRelease();
  uint64_t v8 = v350;
  uint64_t v81 = *(void *)(v350 + 96);
  if (v81 < 0) {
    goto LABEL_331;
  }
  if (v81)
  {
    for (uint64_t j = 0; v81 != j; ++j)
    {
      if (v69 == j && v70)
      {
        uint64_t v83 = ((uint64_t (*)(uint64_t))v340)(v80);
        if (v69 >= *(void *)(v83 + 16)) {
          goto LABEL_251;
        }
        int v84 = *(_DWORD *)(v83 + 4 * v69 + 32);
        swift_bridgeObjectRelease();
        unint64_t v7 = v60(&v351);
        os_log_type_t v86 = v85;
        uint64_t v8 = *v85;
        char v87 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v86 = v8;
        if ((v87 & 1) == 0)
        {
          uint64_t v8 = (uint64_t)sub_2613D8E30(v8);
          uint64_t *v86 = v8;
        }
        if (v69 >= *(void *)(v8 + 16)) {
          goto LABEL_253;
        }
        *(_DWORD *)(v8 + 4 * v69 + 32) = v84;
      }
      else
      {
        unint64_t v7 = v60(&v351);
        uint64_t v89 = v88;
        uint64_t v8 = *v88;
        char v90 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v89 = v8;
        if ((v90 & 1) == 0)
        {
          uint64_t v8 = (uint64_t)sub_2613D8E30(v8);
          *uint64_t v89 = v8;
        }
        if ((unint64_t)j >= *(void *)(v8 + 16)) {
          goto LABEL_252;
        }
        *(_DWORD *)(v8 + 4 * j + 32) = 0;
      }
      uint64_t v80 = ((uint64_t (*)(uint64_t *, void))v7)(&v351, 0);
      uint64_t v8 = v350;
    }
  }
LABEL_80:
  if (v322 == 2)
  {
    unint64_t v91 = v315;
    uint64_t v92 = (void *)MEMORY[0x263F8EED0];
    LOBYTE(v322) = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v315) + 0xD8))();
  }
  else
  {
    LOBYTE(v322) = v322 & 1;
    unint64_t v91 = v315;
    uint64_t v92 = (void *)MEMORY[0x263F8EED0];
  }
  uint64_t j = v333;
  int v93 = v319;
  if (v316 == 2) {
    LOBYTE(v319) = (*(uint64_t (**)(void))((*v92 & *v91) + 0xF0))();
  }
  else {
    LOBYTE(v319) = v316 & 1;
  }
  v94 = v330;
  if (v93 == 2) {
    LOBYTE(v316) = (*(uint64_t (**)(void))((*v92 & *v91) + 0x108))();
  }
  else {
    LOBYTE(v316) = v93 & 1;
  }
  unint64_t v7 = *(void *)(v350 + 96);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_275:
    __break(1u);
    goto LABEL_276;
  }
  if (!v7)
  {
    v336 = (uint64_t (**)(void))MEMORY[0x263F8EE78];
    uint64_t v8 = v350;
    goto LABEL_220;
  }
  uint64_t v8 = v350;
  v95 = (unint64_t *)(v350 + 88);
  v347 = v350 + 104;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v311 = v350 + 40;
  uint64_t v96 = swift_beginAccess();
  uint64_t v97 = (unsigned int *)(v324 + 32);
  int v98 = (unsigned int *)(v327 + 32);
  v344 = -(uint64_t)v7;
  uint64_t v99 = 8;
  uint64_t v100 = 48;
  v337 = (uint64_t *)(v350 + 88);
  while (2)
  {
    unint64_t v101 = v99 - 8;
    uint64_t v102 = v94(v96);
    if ((unint64_t)(v99 - 8) >= *(void *)(v102 + 16)) {
      goto LABEL_234;
    }
    float v103 = *(float *)(v102 + 4 * v99);
    uint64_t v96 = swift_bridgeObjectRelease();
    if (v101 >= *(void *)(*(void *)v347 + 16)) {
      goto LABEL_235;
    }
    if (*(float *)(*(void *)v347 + 4 * v99) <= v103)
    {
      uint64_t v108 = v94(v96);
      if (v101 >= *(void *)(v108 + 16)) {
        goto LABEL_244;
      }
      float v109 = *(float *)(v108 + 4 * v99);
      swift_bridgeObjectRelease();
      if (v101 >= *(void *)(*v95 + 16)) {
        goto LABEL_246;
      }
      if (*(float *)(*v95 + v100) > v109)
      {
        swift_beginAccess();
        unint64_t v7 = *v95;
        char v110 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t *v95 = v7;
        if ((v110 & 1) == 0)
        {
          unint64_t v7 = (unint64_t)sub_26147241C((void *)v7);
          unint64_t *v95 = v7;
        }
        if (v101 >= *(void *)(v7 + 16)) {
          goto LABEL_254;
        }
        uint64_t v105 = v7 + v100;
        uint64_t v111 = *(void *)(v7 + v100 + 8);
        BOOL v11 = __OFADD__(v111, 1);
        uint64_t v107 = v111 + 1;
        if (v11) {
          goto LABEL_256;
        }
LABEL_92:
        *(void *)(v105 + 8) = v107;
        uint64_t v96 = swift_endAccess();
        uint64_t v8 = v350;
        goto LABEL_93;
      }
      if (v324)
      {
        unint64_t v112 = *(void *)(v324 + 16);
        unint64_t v113 = (unsigned int *)(v324 + 32);
        unint64_t v114 = v327;
        if (v112 != 1)
        {
          unint64_t v113 = v97;
          if (v101 >= v112) {
            goto LABEL_268;
          }
        }
        uint64_t v115 = *v113;
        if (v327) {
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v115 = 0;
        unint64_t v114 = v327;
        if (v327)
        {
LABEL_118:
          unint64_t v116 = *(void *)(v114 + 16);
          os_log_t v117 = (unsigned int *)(v327 + 32);
          if (v116 != 1)
          {
            os_log_t v117 = v98;
            if (v101 >= v116) {
              goto LABEL_269;
            }
          }
          uint64_t v118 = *v117;
          goto LABEL_123;
        }
      }
      uint64_t v118 = 0;
LABEL_123:
      LOBYTE(v351) = v114 == 0;
      uint64_t v119 = v8;
      unint64_t v7 = sub_261471C84(v115 | ((unint64_t)(v324 == 0) << 32), v118 | ((unint64_t)(v114 == 0) << 32));
      uint64_t j = v120;
      swift_beginAccess();
      uint64_t v8 = *(void *)(v8 + 88);
      char v121 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v119 + 88) = v8;
      if (v121)
      {
        uint64_t v122 = v350 + 88;
      }
      else
      {
        uint64_t v8 = (uint64_t)sub_26147241C((void *)v8);
        uint64_t v122 = v350 + 88;
        *v337 = v8;
      }
      if (v101 >= *(void *)(v8 + 16)) {
        goto LABEL_255;
      }
      *(void *)(v8 + v100 + 16) = v7;
      if (v101 >= *(void *)(*(void *)v122 + 16)) {
        goto LABEL_257;
      }
      *(void *)(*(void *)v122 + v100 + 24) = j;
      swift_endAccess();
      if (v322) {
        uint64_t v8 = (*(uint64_t (**)(unint64_t))(*(void *)v350 + 616))(v7);
      }
      else {
        uint64_t v8 = 1;
      }
      swift_beginAccess();
      v123 = *(void **)v122;
      char v124 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v122 = v123;
      if ((v124 & 1) == 0)
      {
        v123 = sub_26147241C(v123);
        *v337 = (uint64_t)v123;
      }
      if (v101 >= v123[2]) {
        goto LABEL_258;
      }
      BYTE4(v123[(unint64_t)v100 / 8 + 4]) = v8 & 1;
      swift_endAccess();
      if (v319) {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v350 + 624))(j);
      }
      else {
        uint64_t v8 = 1;
      }
      swift_beginAccess();
      uint64_t v125 = (void *)*v337;
      char v126 = swift_isUniquelyReferenced_nonNull_native();
      *v337 = (uint64_t)v125;
      if ((v126 & 1) == 0)
      {
        uint64_t v125 = sub_26147241C(v125);
        *v337 = (uint64_t)v125;
      }
      v94 = v330;
      if (v101 >= v125[2]) {
        goto LABEL_259;
      }
      BYTE6(v125[(unint64_t)v100 / 8 + 4]) = v8;
      swift_endAccess();
      if (v316) {
        unint64_t v7 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v350 + 632))(v7, j);
      }
      else {
        unint64_t v7 = 1;
      }
      uint64_t j = v333;
      swift_beginAccess();
      uint64_t v8 = *v337;
      char v127 = swift_isUniquelyReferenced_nonNull_native();
      *v337 = v8;
      if ((v127 & 1) == 0)
      {
        uint64_t v8 = (uint64_t)sub_26147241C((void *)v8);
        *v337 = v8;
      }
      if (v101 >= *(void *)(v8 + 16)) {
        goto LABEL_260;
      }
      *(unsigned char *)(v8 + v100 + 37) = v7 & 1;
      unint64_t v128 = swift_endAccess();
      uint64_t v129 = *(void *)v311;
      if (*(void *)(*(void *)v311 + 16))
      {
        unint64_t v128 = sub_2613D8F78(v99 - 8);
        if (v130)
        {
          unint64_t v131 = (uint64_t *)(*(void *)(v129 + 56) + 16 * v128);
          uint64_t v132 = *v131;
          unint64_t v7 = v131[1];
          swift_beginAccess();
          uint64_t v8 = *v337;
          swift_bridgeObjectRetain();
          char v133 = swift_isUniquelyReferenced_nonNull_native();
          *v337 = v8;
          if ((v133 & 1) == 0)
          {
            uint64_t v8 = (uint64_t)sub_26147241C((void *)v8);
            *v337 = v8;
          }
          uint64_t j = v333;
          if (v101 >= *(void *)(v8 + 16)) {
            goto LABEL_270;
          }
          uint64_t v134 = v8 + v100;
          *(void *)(v134 - 16) = v132;
          *(void *)(v134 - 8) = v7;
          swift_endAccess();
          unint64_t v128 = swift_bridgeObjectRelease();
        }
      }
      uint64_t v8 = v350;
      uint64_t v135 = ((uint64_t (*)(unint64_t))v340)(v128);
      if (v101 >= *(void *)(v135 + 16)) {
        goto LABEL_261;
      }
      int v136 = *(_DWORD *)(v135 + 4 * v99);
      swift_bridgeObjectRelease();
      v95 = (unint64_t *)(v350 + 88);
      swift_beginAccess();
      unint64_t v7 = *v337;
      char v137 = swift_isUniquelyReferenced_nonNull_native();
      *v337 = v7;
      if ((v137 & 1) == 0)
      {
        unint64_t v7 = (unint64_t)sub_26147241C((void *)v7);
        *v337 = v7;
      }
      if (v101 >= *(void *)(v7 + 16)) {
        goto LABEL_262;
      }
      *(_DWORD *)(v7 + v100) = v136;
      if (v101 >= *(void *)(*(void *)v347 + 16)) {
        goto LABEL_263;
      }
      unint64_t v7 = *v337;
      int v138 = *(_DWORD *)(*(void *)v347 + 4 * v99);
      char v139 = swift_isUniquelyReferenced_nonNull_native();
      *v337 = v7;
      if ((v139 & 1) == 0)
      {
        unint64_t v7 = (unint64_t)sub_26147241C((void *)v7);
        *v337 = v7;
      }
      if (v101 >= *(void *)(v7 + 16)) {
        goto LABEL_264;
      }
      *(_DWORD *)(v7 + v100 + 32) = v138;
      if (v101 >= *(void *)(*v337 + 16)) {
        goto LABEL_265;
      }
      uint64_t v105 = *v337 + v100;
      uint64_t v107 = 1;
      goto LABEL_92;
    }
    if (v101 >= *(void *)(*v95 + 16)) {
      goto LABEL_245;
    }
    if (*(uint64_t *)(*v95 + v100 + 8) >= 1)
    {
      swift_beginAccess();
      unint64_t v7 = *v95;
      char v104 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v95 = v7;
      if ((v104 & 1) == 0)
      {
        unint64_t v7 = (unint64_t)sub_26147241C((void *)v7);
        unint64_t *v95 = v7;
      }
      if (v101 >= *(void *)(v7 + 16)) {
        goto LABEL_249;
      }
      uint64_t v105 = v7 + v100;
      uint64_t v106 = *(void *)(v7 + v100 + 8);
      BOOL v11 = __OFADD__(v106, 1);
      uint64_t v107 = v106 + 1;
      if (v11) {
        goto LABEL_250;
      }
      goto LABEL_92;
    }
LABEL_93:
    ++v99;
    v100 += 56;
    ++v98;
    ++v97;
    if (v344 + v99 != 8) {
      continue;
    }
    break;
  }
  uint64_t v140 = *(void *)(v8 + 96);
  if (v140 < 0) {
    goto LABEL_275;
  }
  if (v140)
  {
    v334 = (uint64_t *)(v8 + 72);
    char v306 = (uint64_t *)(v8 + 128);
    swift_beginAccess();
    unint64_t v141 = 0;
    uint64_t v142 = (uint64_t (**)(void))MEMORY[0x263F8EE78];
    uint64_t v143 = v315;
    char v304 = v140;
    while (1)
    {
      if (v141 == v140) {
        goto LABEL_248;
      }
      v336 = v142;
      uint64_t j = *v306;
      if (!((unint64_t)*v306 >> 62))
      {
        unint64_t v7 = *(void *)((j & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v327 = v7;
        if (v7) {
          break;
        }
        goto LABEL_165;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v8 = v350;
      unint64_t v7 = sub_2614D5D98();
      swift_bridgeObjectRelease();
      v327 = v7;
      if (v7) {
        break;
      }
LABEL_165:
      ++v141;
      swift_bridgeObjectRelease();
      uint64_t v140 = v304;
      uint64_t v8 = v350;
      uint64_t v142 = v336;
      if (v141 == v304)
      {
        v185 = *(void *)(v350 + 96);
        if (v185 < 0) {
          goto LABEL_333;
        }
        if (!v185) {
          goto LABEL_220;
        }
        uint64_t v186 = *(void *)(v350 + 32);
        swift_beginAccess();
        v187 = 0;
        v188 = 0;
        while (v188 < *(void *)(*v337 + 16))
        {
          if (*(void *)(*v337 + v187 + 56) >= v186)
          {
            uint64_t v8 = v350 + 88;
            swift_beginAccess();
            unint64_t v7 = *v337;
            v190 = swift_isUniquelyReferenced_nonNull_native();
            *v337 = v7;
            if ((v190 & 1) == 0)
            {
              unint64_t v7 = (unint64_t)sub_26147241C((void *)v7);
              *v337 = v7;
            }
            if (v188 >= *(void *)(v7 + 16)) {
              goto LABEL_267;
            }
            uint64_t v189 = v7 + v187;
            *(_DWORD *)(v189 + 48) = 0;
            *(void *)(v189 + 56) = 0;
            *(void *)(v189 + 64) = -1;
            *(void *)(v189 + 72) = -1;
            *(_WORD *)(v189 + 84) = 0;
            *(unsigned char *)(v189 + 86) = 2;
            swift_endAccess();
            uint64_t v8 = v350;
          }
          ++v188;
          v187 += 56;
          if (v185 == v188) {
            goto LABEL_220;
          }
        }
        goto LABEL_266;
      }
    }
    v344 = *(void *)(v8 + 32);
    v348 = j & 0xC000000000000001;
    swift_beginAccess();
    swift_beginAccess();
    v340 = (uint64_t (*)(void))(56 * v141);
    uint64_t v144 = 4;
    uint64_t v8 = v327;
    uint64_t v309 = j;
    int v312 = v141;
    while (1)
    {
      unint64_t v7 = v144 - 4;
      if (v348)
      {
        uint64_t v145 = MEMORY[0x263E36D80](v144 - 4, j);
        uint64_t v146 = v144 - 3;
        if (__OFADD__(v7, 1)) {
          goto LABEL_228;
        }
      }
      else
      {
        uint64_t v145 = *(void *)(j + 8 * v144);
        swift_retain();
        uint64_t v146 = v144 - 3;
        if (__OFADD__(v7, 1))
        {
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
      }
      unint64_t v147 = *v95;
      if (v141 >= *(void *)(*v95 + 16)) {
        goto LABEL_229;
      }
      v148 = (char *)v340 + v147;
      uint64_t v149 = *(void *)((char *)v340 + v147 + 56);
      if (v149 >= v344) {
        break;
      }
      swift_release();
LABEL_171:
      ++v144;
      if (v146 == v8) {
        goto LABEL_165;
      }
    }
    uint64_t v151 = *((void *)v148 + 4);
    uint64_t v152 = *((void *)v148 + 5);
    v150 = v148 + 32;
    int v153 = *((_DWORD *)v150 + 4);
    int v154 = *((_DWORD *)v150 + 12);
    char v155 = v150[52];
    char v156 = v150[53];
    char v157 = v150[54];
    v361[0] = v151;
    v361[1] = v152;
    v362 = v153;
    v363 = v149;
    v364 = *((_OWORD *)v150 + 2);
    v365 = v154;
    v366 = v155;
    v367 = v156;
    v368 = v157;
    uint64_t v158 = *(void (**)(uint64_t *__return_ptr, void *))(*(void *)v145 + 248);
    swift_bridgeObjectRetain();
    v158(&v351, v361);
    swift_bridgeObjectRelease();
    unint64_t v7 = v352;
    if (!v352)
    {
      swift_release();
      v95 = (unint64_t *)(v350 + 88);
LABEL_203:
      uint64_t v8 = v327;
      goto LABEL_171;
    }
    uint64_t v8 = *v334;
    if (!*(void *)(*v334 + 16)) {
      goto LABEL_230;
    }
    uint64_t v159 = v351;
    uint64_t v160 = v354;
    uint64_t j = v355;
    v331 = v356;
    v319 = BYTE6(v357);
    v316 = WORD2(v357);
    v324 = v357;
    v322 = v353;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v161 = sub_2613D8F00(v159, v7);
    if ((v162 & 1) == 0) {
      goto LABEL_335;
    }
    unint64_t v163 = *(void *)(*(void *)(v8 + 56) + 8 * v161);
    swift_bridgeObjectRelease();
    v164 = swift_bridgeObjectRelease();
    uint64_t v8 = (uint64_t)v143;
    uint64_t v165 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v143) + 0x150))(v164);
    if (__OFSUB__(v163, v165)) {
      goto LABEL_231;
    }
    if (v163 - v165 >= j)
    {
      swift_bridgeObjectRelease();
LABEL_202:
      swift_release();
      v95 = (unint64_t *)(v350 + 88);
      uint64_t j = v309;
      unint64_t v141 = v312;
      goto LABEL_203;
    }
    v307 = v160;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    BOOL v166 = swift_isUniquelyReferenced_nonNull_native();
    v361[0] = *v334;
    uint64_t v8 = v361[0];
    *v334 = 0x8000000000000000;
    v168 = sub_2613D8F00(v159, v7);
    uint64_t v169 = *(void *)(v8 + 16);
    uint64_t v170 = (v167 & 1) == 0;
    BOOL v171 = v169 + v170;
    if (__OFADD__(v169, v170)) {
      goto LABEL_236;
    }
    v172 = v167;
    if (*(void *)(v8 + 24) < v171)
    {
      sub_2614725E0(v171, v166);
      uint64_t v8 = v361[0];
      unint64_t v173 = sub_2613D8F00(v159, v7);
      if ((v172 & 1) != (v174 & 1)) {
        goto LABEL_337;
      }
      v168 = v173;
      unint64_t v175 = (void *)v361[0];
      if ((v172 & 1) == 0) {
        goto LABEL_195;
      }
LABEL_193:
      *(void *)(v175[7] + 8 * v168) = v331;
LABEL_197:
      *v334 = (uint64_t)v175;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v143 = v315;
        char v179 = v336;
      }
      else
      {
        char v179 = (uint64_t (**)(void))sub_261471F50(0, (int64_t)v336[2] + 1, 1, v336);
        uint64_t v143 = v315;
      }
      v181 = (unint64_t)v179[2];
      v180 = (unint64_t)v179[3];
      if (v181 >= v180 >> 1) {
        char v179 = (uint64_t (**)(void))sub_261471F50((void *)(v180 > 1), v181 + 1, 1, v179);
      }
      char v182 = v316 | (v319 << 16);
      v179[2] = (uint64_t (*)(void))(v181 + 1);
      v336 = v179;
      v183 = &v179[7 * v181];
      v183[4] = (uint64_t (*)(void))v159;
      v183[5] = (uint64_t (*)(void))v7;
      v184 = v324 & 0xFF000000FFFFFFFFLL | ((*(void *)&v182 & 0xFFFFFFLL) << 32);
      *((_DWORD *)v183 + 12) = v322;
      v183[7] = v307;
      v183[8] = (uint64_t (*)(void))j;
      v183[9] = v331;
      *((_DWORD *)v183 + 20) = v324;
      *((unsigned char *)v183 + 84) = BYTE4(v184) & 1;
      *((unsigned char *)v183 + 85) = BYTE5(v184) & 1;
      *((unsigned char *)v183 + 86) = BYTE2(v182);
      goto LABEL_202;
    }
    if (v166)
    {
      unint64_t v175 = (void *)v361[0];
      if (v167) {
        goto LABEL_193;
      }
    }
    else
    {
      uint64_t v8 = (uint64_t)v361;
      sub_261472430();
      unint64_t v175 = (void *)v361[0];
      if (v172) {
        goto LABEL_193;
      }
    }
LABEL_195:
    v175[(v168 >> 6) + 8] |= 1 << v168;
    v176 = (uint64_t *)(v175[6] + 16 * v168);
    void *v176 = v159;
    v176[1] = v7;
    *(void *)(v175[7] + 8 * v168) = v331;
    v177 = v175[2];
    BOOL v11 = __OFADD__(v177, 1);
    v178 = v177 + 1;
    if (v11) {
      goto LABEL_247;
    }
    v175[2] = v178;
    swift_bridgeObjectRetain();
    goto LABEL_197;
  }
  v336 = (uint64_t (**)(void))MEMORY[0x263F8EE78];
LABEL_220:
  swift_beginAccess();
  unint64_t v7 = *(void *)(v8 + 128);
  if (!(v7 >> 62))
  {
    unint64_t v191 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v191) {
      goto LABEL_222;
    }
    goto LABEL_277;
  }
LABEL_276:
  swift_bridgeObjectRetain();
  unint64_t v191 = sub_2614D5D98();
  if (v191)
  {
LABEL_222:
    if (v191 < 1) {
      goto LABEL_332;
    }
    for (k = 0; k != v191; ++k)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        Class v193 = MEMORY[0x263E36D80](k, v7);
      }
      else
      {
        Class v193 = *(void *)(v7 + 8 * k + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(void *)v193 + 240))();
      swift_release();
    }
  }
LABEL_277:
  swift_bridgeObjectRelease();
  uint64_t v194 = v336[2];
  if (!v194)
  {
    v349 = (void *)MEMORY[0x263F8EE78];
    uint64_t v195 = v350;
LABEL_297:
    uint64_t v249 = (void *)(v195 + 120);
    swift_beginAccess();
    v250 = *(void *)(v195 + 120);
    v251 = *(void *)(v250 + 16);
    if (v251)
    {
      char v305 = (void *)(v195 + 120);
      v326 = *(uint64_t (**)(uint64_t))(*(void *)v195 + 624);
      swift_bridgeObjectRetain();
      uint64_t v252 = 0;
      uint64_t v253 = (void *)MEMORY[0x263F8EE78];
      int v308 = v250;
      do
      {
        int v255 = v250;
        v329 = v252;
        uint64_t v256 = v250 + v252;
        v332 = *(void *)(v256 + 32);
        uint64_t v257 = *(float *)(v256 + 48);
        id v258 = *(void *)(v256 + 56);
        uint64_t v259 = *(void *)(v256 + 64);
        int64_t v260 = *(void *)(v256 + 72);
        v261 = *(_DWORD *)(v256 + 80);
        uint64_t v262 = *(unsigned char *)(v256 + 84);
        v263 = *(unsigned char *)(v256 + 85);
        v264 = *(unsigned char *)(v256 + 86);
        v343 = *(void *)(v256 + 40);
        swift_bridgeObjectRetain();
        v346 = v260;
        int64_t v265 = v326(v260);
        v335 = v262;
        v339 = v259;
        if (v265 == 2)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v253 = sub_261471F50(0, v253[2] + 1, 1, v253);
          }
          v250 = v255;
          v267 = v253[2];
          unint64_t v266 = v253[3];
          if (v267 >= v266 >> 1) {
            uint64_t v253 = sub_261471F50((void *)(v266 > 1), v267 + 1, 1, v253);
          }
          v253[2] = v267 + 1;
          uint64_t v254 = (float *)&v253[7 * v267];
          *((void *)v254 + 4) = v332;
          *((void *)v254 + 5) = v343;
          v254[12] = v257;
          *((void *)v254 + 7) = v258;
          *((void *)v254 + 8) = v339;
          *((void *)v254 + 9) = v260;
          *((_DWORD *)v254 + 20) = v261;
          *((unsigned char *)v254 + 84) = v335;
          *((unsigned char *)v254 + 85) = v263;
          *((unsigned char *)v254 + 86) = v264;
        }
        else
        {
          v321 = v265;
          v268 = (void *)MEMORY[0x263F8EED0];
          v269 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v315) + 0x138);
          v270 = v269();
          if ((unsigned __int128)(v259 * (__int128)v270) >> 64 != (v259 * v270) >> 63) {
            goto LABEL_322;
          }
          uint64_t v310 = v259 * v270;
          char v314 = v251;
          v318 = v253;
          unint64_t v271 = *(uint64_t (**)(void))((*v268 & **(void **)(v350 + 16)) + 0x80);
          uint64_t v272 = (void *)v271();
          int64_t v273 = (*(double (**)(void))((*v268 & *v272) + 0x190))();

          v274 = (void *)v271();
          v275 = (*(double (**)(void))((*v268 & *v274) + 0x198))();

          os_log_t v276 = (void *)v271();
          v277 = (*(uint64_t (**)(void))((*v268 & *v276) + 0xA0))();

          v278 = v269();
          v279 = v346 * v278;
          if ((unsigned __int128)(v346 * (__int128)v278) >> 64 != (v346 * v278) >> 63) {
            goto LABEL_323;
          }
          v280 = (void *)v271();
          uint64_t v281 = (*(double (**)(void))((*v268 & *v280) + 0x190))();

          v282 = (void *)v271();
          unint64_t v283 = (*(double (**)(void))((*v268 & *v282) + 0x198))();

          uint64_t v284 = (void *)v271();
          unint64_t v285 = (*(uint64_t (**)(void))((*v268 & *v284) + 0xA0))();

          v286 = swift_bridgeObjectRetain();
          __int32 v287 = ((uint64_t (*)(uint64_t))v269)(v286);
          char v288 = v339 * v287;
          if ((unsigned __int128)(v339 * (__int128)v287) >> 64 != (v339 * v287) >> 63) {
            goto LABEL_324;
          }
          char v289 = v269();
          if ((unsigned __int128)(v346 * (__int128)v289) >> 64 != (v346 * v289) >> 63) {
            goto LABEL_325;
          }
          sub_2614967F4(v332, v343, v288, v346 * v289, v262, v321 & 1, v263, (uint64_t)&v351, v257, (v273 * (double)v310 + v275) / (double)v277, (v281 * (double)v279 + v283) / (double)v285);
          swift_bridgeObjectRelease();
          uint64_t v290 = v351;
          uint64_t v291 = v352;
          char v292 = v353;
          v293 = v354;
          char v294 = v355;
          char v295 = v356;
          int v296 = v357;
          char v297 = v358;
          uint64_t v298 = v359;
          uint64_t v299 = v360;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v349 = sub_261416300(0, v349[2] + 1, 1, v349);
          }
          char v301 = v349[2];
          char v300 = v349[3];
          if (v301 >= v300 >> 1) {
            v349 = sub_261416300((void *)(v300 > 1), v301 + 1, 1, v349);
          }
          v349[2] = v301 + 1;
          char v302 = &v349[8 * v301];
          v302[4] = v290;
          v302[5] = v291;
          *((_DWORD *)v302 + 12) = v292;
          v302[7] = v293;
          v302[8] = v294;
          v302[9] = v295;
          v302[10] = v296;
          *((unsigned char *)v302 + 88) = v297;
          *((unsigned char *)v302 + 89) = v298;
          *((unsigned char *)v302 + 90) = v299;
          v250 = v308;
          uint64_t v253 = v318;
          v251 = v314;
        }
        uint64_t v252 = v329 + 56;
        --v251;
      }
      while (v251);
      swift_bridgeObjectRelease();
      uint64_t v249 = v305;
    }
    else
    {
      uint64_t v253 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    *uint64_t v249 = v253;
    swift_bridgeObjectRelease();
    type metadata accessor for VAKeywordResult();
    return VAKeywordResult.__allocating_init(detections:)((uint64_t)v349);
  }
  uint64_t v195 = v350;
  __int16 v313 = (void **)(v350 + 120);
  swift_bridgeObjectRetain();
  unint64_t v196 = v336;
  char v197 = 0;
  v349 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v199 = &v196[v197];
    unint64_t v201 = (uint64_t)v196[v197 + 4];
    unint64_t v200 = (uint64_t)v196[v197 + 5];
    v202 = *(float *)&v196[v197 + 6];
    uint64_t v203 = v196[v197 + 8];
    v345 = v196[v197 + 9];
    uint64_t v204 = BYTE4(v196[v197 + 10]);
    unint64_t v205 = BYTE5(v196[v197 + 10]);
    uint64_t v206 = BYTE6(v196[v197 + 10]);
    if (v206 == 2)
    {
      v341 = v199[7];
      v207 = *((_DWORD *)v199 + 20);
      swift_beginAccess();
      v208 = *v313;
      swift_bridgeObjectRetain();
      char v209 = swift_isUniquelyReferenced_nonNull_native();
      *__int16 v313 = v208;
      v210 = v203;
      if ((v209 & 1) == 0)
      {
        v208 = sub_261471F50(0, v208[2] + 1, 1, v208);
        *__int16 v313 = v208;
      }
      char v212 = v208[2];
      v211 = v208[3];
      if (v212 >= v211 >> 1)
      {
        v208 = sub_261471F50((void *)(v211 > 1), v212 + 1, 1, v208);
        *__int16 v313 = v208;
      }
      v208[2] = v212 + 1;
      uint64_t v198 = (float *)&v208[7 * v212];
      *((void *)v198 + 4) = v201;
      *((void *)v198 + 5) = v200;
      v198[12] = v202;
      *((void *)v198 + 7) = v341;
      *((void *)v198 + 8) = v210;
      *((void *)v198 + 9) = v345;
      *((_DWORD *)v198 + 20) = v207;
      *((unsigned char *)v198 + 84) = v204;
      *((unsigned char *)v198 + 85) = v205;
      *((unsigned char *)v198 + 86) = 2;
      swift_endAccess();
      unint64_t v196 = v336;
      goto LABEL_280;
    }
    v325 = v206;
    v328 = v201;
    unint64_t v213 = (void *)MEMORY[0x263F8EED0];
    unint64_t v214 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v315) + 0x138);
    uint64_t v215 = swift_bridgeObjectRetain();
    uint64_t v216 = ((uint64_t (*)(uint64_t))v214)(v215);
    if ((unsigned __int128)((uint64_t)v203 * (__int128)v216) >> 64 != ((uint64_t)v203 * v216) >> 63) {
      break;
    }
    v320 = (void)v203 * v216;
    v323 = v194;
    v338 = v203;
    v342 = v200;
    uint64_t v217 = *(uint64_t (**)(void))((*v213 & **(void **)(v195 + 16)) + 0x80);
    v218 = (void *)v217();
    uint64_t v219 = (*(double (**)(void))((*v213 & *v218) + 0x190))();

    uint64_t v220 = (void *)v217();
    unint64_t v221 = (*(double (**)(void))((*v213 & *v220) + 0x198))();

    unint64_t v222 = (void *)v217();
    v317 = (*(uint64_t (**)(void))((*v213 & *v222) + 0xA0))();

    unint64_t v223 = v214();
    uint64_t v224 = (void)v345 * v223;
    if ((unsigned __int128)((uint64_t)v345 * (__int128)v223) >> 64 != ((uint64_t)v345 * v223) >> 63) {
      goto LABEL_319;
    }
    uint64_t v225 = (void *)v217();
    uint64_t v226 = (*(double (**)(void))((*v213 & *v225) + 0x190))();

    v227 = (void *)v217();
    uint64_t v228 = (*(double (**)(void))((*v213 & *v227) + 0x198))();

    uint64_t v229 = (void *)v217();
    unint64_t v230 = (*(uint64_t (**)(void))((*v213 & *v229) + 0xA0))();

    unint64_t v231 = swift_bridgeObjectRetain();
    unint64_t v232 = ((uint64_t (*)(uint64_t))v214)(v231);
    v233 = (void)v338 * v232;
    if ((unsigned __int128)((uint64_t)v338 * (__int128)v232) >> 64 != ((uint64_t)v338 * v232) >> 63) {
      goto LABEL_320;
    }
    v234 = v214();
    if ((unsigned __int128)((uint64_t)v345 * (__int128)v234) >> 64 != ((uint64_t)v345 * v234) >> 63) {
      goto LABEL_321;
    }
    sub_2614967F4(v328, v342, v233, (void)v345 * v234, v204, v325 & 1, v205, (uint64_t)&v351, v202, (v219 * (double)v320 + v221) / (double)v317, (v226 * (double)v224 + v228) / (double)v230);
    swift_bridgeObjectRelease();
    unint64_t v236 = v351;
    uint64_t v235 = v352;
    v237 = v353;
    os_log_type_t v238 = v354;
    v239 = v355;
    uint64_t v240 = v356;
    uint64_t v241 = v357;
    unint64_t v242 = v358;
    v243 = v359;
    v244 = v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v349 = sub_261416300(0, v349[2] + 1, 1, v349);
    }
    v246 = v349[2];
    id v245 = v349[3];
    unint64_t v196 = v336;
    if (v246 >= v245 >> 1)
    {
      uint64_t v248 = sub_261416300((void *)(v245 > 1), v246 + 1, 1, v349);
      unint64_t v196 = v336;
      v349 = v248;
    }
    v349[2] = v246 + 1;
    uint64_t v247 = &v349[8 * v246];
    v247[4] = v236;
    v247[5] = v235;
    *((_DWORD *)v247 + 12) = v237;
    v247[7] = v238;
    v247[8] = v239;
    v247[9] = v240;
    v247[10] = v241;
    *((unsigned char *)v247 + 88) = v242;
    *((unsigned char *)v247 + 89) = v243;
    *((unsigned char *)v247 + 90) = v244;
    uint64_t v194 = v323;
LABEL_280:
    v197 += 7;
    uint64_t v194 = (uint64_t (*)(void))((char *)v194 - 1);
    uint64_t v195 = v350;
    if (!v194)
    {
      swift_bridgeObjectRelease();
      goto LABEL_297;
    }
  }
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
LABEL_331:
  __break(1u);
LABEL_332:
  __break(1u);
LABEL_333:
  __break(1u);
LABEL_334:
  __break(1u);
LABEL_335:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_336:
  __break(1u);
LABEL_337:
  uint64_t result = sub_2614D5FF8();
  __break(1u);
  return result;
}

unint64_t sub_2614714B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    float v2 = *(float *)(a1 + 32);
    uint64_t v3 = v1 - 1;
    if (v1 != 1)
    {
      uint64_t v4 = (float *)(a1 + 36);
      do
      {
        float v5 = *v4++;
        float v6 = v5;
        if (v2 < v5) {
          float v2 = v6;
        }
        --v3;
      }
      while (v3);
    }
    uint64_t v7 = LODWORD(v2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t sub_26147150C(float a1)
{
  uint64_t v3 = (char **)(v1 + 112);
  swift_beginAccess();
  uint64_t v4 = *(char **)(v1 + 112);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 112) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_2613D8310(0, *((void *)v4 + 2) + 1, 1, v4);
    *uint64_t v3 = v4;
  }
  unint64_t v7 = *((void *)v4 + 2);
  unint64_t v6 = *((void *)v4 + 3);
  if (v7 >= v6 >> 1)
  {
    uint64_t v4 = sub_2613D8310((char *)(v6 > 1), v7 + 1, 1, v4);
    *uint64_t v3 = v4;
  }
  *((void *)v4 + 2) = v7 + 1;
  *(float *)&v4[4 * v7 + 32] = a1;
  uint64_t v8 = *v3;
  uint64_t result = swift_endAccess();
  if (*((void *)v8 + 2) >= 0xBB9uLL)
  {
    uint64_t result = swift_beginAccess();
    if (*((void *)*v3 + 2))
    {
      sub_2613EC2F0(0, 1);
      return swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_261471628(uint64_t a1)
{
  uint64_t v3 = v1[8];
  uint64_t v4 = v1 + 14;
  uint64_t v5 = swift_beginAccess();
  uint64_t v6 = *(void *)(v1[14] + 16);
  uint64_t v7 = v3 - v6;
  if (__OFSUB__(v3, v6)) {
    goto LABEL_23;
  }
  if (v7 < a1)
  {
    uint64_t v8 = (void *)v1[3];
    int64_t v9 = (void *)MEMORY[0x263F8EED0];
    uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x180);
    uint64_t v11 = ((uint64_t (*)(uint64_t))v10)(v5);
    uint64_t v12 = v10();
    if (v12 < 0)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v13 = v12;
    if (!v12)
    {
      uint64_t v16 = 0;
LABEL_18:
      if (!__OFADD__(v16, v11))
      {
        (*(uint64_t (**)(void))((*v9 & *v8) + 0x198))();
        return;
      }
      goto LABEL_25;
    }
    BOOL v14 = __OFSUB__(a1, v7);
    uint64_t v15 = a1 - v7;
    if (v14)
    {
LABEL_26:
      __break(1u);
      return;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = v15;
    while (1)
    {
      if (v17 < v15)
      {
        if ((v18 & 0x8000000000000000) != 0) {
          goto LABEL_21;
        }
        if (v18 >= *(void *)(*v4 + 16)) {
          goto LABEL_22;
        }
        float v19 = *(float *)(*v4 + 4 * v18 + 32);
        if ((*(float (**)(void))((*v9 & *v8) + 0x1B0))() <= v19)
        {
          BOOL v14 = __OFADD__(v16++, 1);
          if (v14)
          {
            __break(1u);
            return;
          }
        }
        BOOL v14 = __OFSUB__(v11--, 1);
        if (v14) {
          break;
        }
      }
      ++v17;
      --v18;
      if (v13 == v17) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
}

void sub_261471810(uint64_t a1)
{
  uint64_t v3 = v1[8];
  uint64_t v4 = v1 + 14;
  uint64_t v5 = swift_beginAccess();
  uint64_t v6 = *(void *)(v1[14] + 16);
  uint64_t v7 = v3 - v6;
  if (__OFSUB__(v3, v6))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = (void *)v1[3];
  int64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v8) + 0x210))(v5);
  if (__OFSUB__(v3, v10))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v3 - v10 < a1) {
    return;
  }
  uint64_t v11 = *(uint64_t (**)(void))((*v9 & *v8) + 0x1F8);
  uint64_t v12 = v11();
  uint64_t v13 = a1 - v7;
  if (__OFSUB__(a1, v7)) {
    goto LABEL_27;
  }
  uint64_t v14 = v12;
  uint64_t v15 = v11();
  uint64_t v16 = v13 + v15;
  if (__OFADD__(v13, v15))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v16 < v13)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v13 == v16)
  {
    if (v14 <= 0) {
      goto LABEL_21;
    }
LABEL_9:
    (*(uint64_t (**)(void))((*v9 & *v8) + 0x210))();
    return;
  }
  if (v13 >= v16)
  {
LABEL_30:
    __break(1u);
    return;
  }
  uint64_t v17 = v15;
  uint64_t v18 = 0;
  while (1)
  {
    if (v13 >= *(void *)(*v4 + 16)) {
      goto LABEL_13;
    }
    if (v13 < 0) {
      goto LABEL_24;
    }
    float v20 = *(float *)(*v4 + 4 * v13 + 32);
    if ((*(float (**)(void))((*v9 & *v8) + 0x228))() <= v20)
    {
      BOOL v19 = __OFADD__(v18++, 1);
      if (v19) {
        break;
      }
    }
    BOOL v19 = __OFSUB__(v14--, 1);
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_13:
    ++v13;
    if (!--v17) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  if (v14 >= 1) {
    goto LABEL_9;
  }
LABEL_21:
  (*(uint64_t (**)(void))((*v9 & *v8) + 0x210))();
}

void sub_261471A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = v3 + 112;
  uint64_t v8 = swift_beginAccess();
  uint64_t v9 = *(void *)(*(void *)(v3 + 112) + 16);
  uint64_t v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = a1 - v10;
  if (__OFSUB__(a1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  BOOL v12 = __OFSUB__(a2, v10);
  uint64_t v13 = a2 - v10;
  if (v12)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v14 = v11 & ~(v11 >> 63);
  if (v9 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = *(void *)(*(void *)(v3 + 112) + 16);
  }
  if (v15 < v14) {
    goto LABEL_26;
  }
  if (v14 != v15)
  {
    uint64_t v17 = *(float (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(v3 + 24)) + 0x1E0);
    if (v14 >= v15)
    {
LABEL_31:
      __break(1u);
      return;
    }
    uint64_t v18 = 0;
    while ((unint64_t)v14 < *(void *)(*(void *)v7 + 16))
    {
      float v19 = 1.0 - *(float *)(*(void *)v7 + 4 * v14 + 32);
      if (v17(v8) <= v19)
      {
        BOOL v12 = __OFADD__(v18++, 1);
        if (v12)
        {
          __break(1u);
          break;
        }
      }
      if (v15 == ++v14) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_9:
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  float v16 = (float)((*(float (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(v3 + 24)) + 0x1C8))(v8)
              * (float)(a2 - a1))
      + 0.5;
  if ((~LODWORD(v16) & 0x7F800000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v16 <= -9.2234e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v16 >= 9.2234e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
}

uint64_t sub_261471C84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  float v4 = *(float *)&a2;
  float v5 = *(float *)&a1;
  uint64_t v6 = a2 | a1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x120))();
  uint64_t result = (*(uint64_t (**)(void))((*v8 & *v7) + 0x138))();
  uint64_t v11 = *(void *)(v3 + 64);
  if ((v6 & 0x100000000) != 0)
  {
    if (result)
    {
      if (v9 == 0x8000000000000000 && result == -1) {
        goto LABEL_46;
      }
      uint64_t v13 = v11 & ~(v11 >> 63);
      if (!__OFSUB__(v13, v9 / result)) {
        return (v13 - v9 / result) & ~((v13 - v9 / result) >> 63);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_35;
  }
  if (!result)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v9 == 0x8000000000000000 && result == -1) {
    goto LABEL_47;
  }
  uint64_t v15 = v9 / result;
  if (v9 / result >= 0) {
    uint64_t v16 = v9 / result;
  }
  else {
    uint64_t v16 = v15 + 1;
  }
  BOOL v17 = __OFSUB__(v11, v16 >> 1);
  uint64_t v18 = v11 - (v16 >> 1);
  if (v17) {
    goto LABEL_36;
  }
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  BOOL v17 = __OFADD__(v18, (uint64_t)v5);
  uint64_t v19 = v18 + (uint64_t)v5;
  if (v17)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  float v20 = roundf(v4 * (float)v15);
  if ((~LODWORD(v20) & 0x7F800000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v20 <= -9.2234e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v20 >= 9.2234e18)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v21 = (uint64_t)v20;
  if ((uint64_t)v20 >= 0) {
    uint64_t v22 = (uint64_t)v20;
  }
  else {
    uint64_t v22 = v21 + 1;
  }
  BOOL v17 = __OFSUB__(v19, v22 >> 1);
  uint64_t v23 = v19 - (v22 >> 1);
  if (v17) {
    goto LABEL_44;
  }
  uint64_t result = v23 & ~(v23 >> 63);
  if (__OFADD__(result, v21))
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    return result;
  }
  if (result + v21 >= v11 && __OFSUB__(v11, 1)) {
    goto LABEL_48;
  }
  return result;
}

uint64_t VAResultGenerator.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAResultGenerator.__deallocating_deinit()
{
  VAResultGenerator.deinit();
  return swift_deallocClassInstance();
}

void *sub_261471F50(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_2613C23AC(&qword_26A9159C0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      BOOL v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      BOOL v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_261472B64(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VAResultGenerator()
{
  return self;
}

void sub_26147209C(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v42 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_2613D8F00(v8, v7);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_261472430();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    float v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *uint64_t v21 = v8;
    v21[1] = v7;
    *(void *)(v20[7] + 8 * v11) = v42;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    float v26 = a1 + 9;
    while (1)
    {
      uint64_t v28 = *(v26 - 2);
      uint64_t v27 = *(v26 - 1);
      uint64_t v29 = *v26;
      char v30 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v31 = sub_2613D8F00(v28, v27);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v23 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v23) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_2614725E0(v35, 1);
        unint64_t v31 = sub_2613D8F00(v28, v27);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      char v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      uint64_t v39 = (uint64_t *)(v38[6] + 16 * v31);
      *uint64_t v39 = v28;
      v39[1] = v27;
      *(void *)(v38[7] + 8 * v31) = v29;
      uint64_t v40 = v38[2];
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v26 += 3;
      v38[2] = v41;
      if (!--v25) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_2614725E0(v14, a2 & 1);
  unint64_t v16 = sub_2613D8F00(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    sub_2613C23AC(&qword_26A914CA8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_2614D5FF8();
  __break(1u);
LABEL_26:
  sub_2614D5C38();
  sub_2614D54D8();
  sub_2614D5D48();
  sub_2614D54D8();
  sub_2614D5D68();
  __break(1u);
}

void *sub_26147241C(void *a1)
{
  return sub_261471F50(0, a1[2], 0, a1);
}

void *sub_261472430()
{
  uint64_t v1 = v0;
  sub_2613C23AC(&qword_26A9159A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2614D5DB8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2614725E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_2613C23AC(&qword_26A9159A8);
  char v37 = a2;
  uint64_t v6 = sub_2614D5DC8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_2614D6088();
    sub_2614D5478();
    uint64_t result = sub_2614D60B8();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_2614728EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_26147290C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_26147290C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_2613C23AC(&qword_26A9159B0);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_2613C23AC(&qword_26A9159B8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2614D5DE8();
  __break(1u);
  return result;
}

uint64_t sub_261472AB4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_261472B64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2614D5DE8();
  __break(1u);
  return result;
}

unint64_t sub_261472C5C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  sub_2613C23AC(&qword_26A914AD8);
  uint64_t v3 = (void *)sub_2614D5DD8();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_2613D8F78(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    unint64_t v10 = (void *)(v3[7] + 16 * result);
    *unint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_2613D8F78(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VAWordDecoder()
{
  return self;
}

uint64_t initializeWithCopy for DetectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 53);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectionInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  return a1;
}

__n128 initializeWithTake for DetectionInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 47) = *(void *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DetectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 55)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectionInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 54) = 0;
    *(_WORD *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 55) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 55) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionInfo()
{
  return &type metadata for DetectionInfo;
}

uint64_t method lookup function for VAWordDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAWordDecoder);
}

uint64_t dispatch thunk of VAWordDecoder.increment()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of VAWordDecoder.update(newDetection:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t method lookup function for VAResultGenerator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAResultGenerator);
}

uint64_t dispatch thunk of VAResultGenerator.predMask.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of VAResultGenerator.predMask.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of VAResultGenerator.predMask.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of VAResultGenerator.searchFrame(predictions:silence:keywordsLookingFor:offsets:widths:preSilenceCheckOverride:postSilenceCheckOverride:duringSpeechCheckOverride:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of VAResultGenerator.searchFrame(predictions:keywordsLookingFor:offsets:widths:preSilenceCheckOverride:postSilenceCheckOverride:duringSpeechCheckOverride:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of VAResultGenerator.addSilence(silence:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t sub_26147313C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2614736EC(&qword_26A9159E0);
  unint64_t v5 = sub_261473730();
  return MEMORY[0x270F9FB50](a1, a2, v4, v5);
}

void type metadata accessor for espresso_storage_type_t(uint64_t a1)
{
}

uint64_t sub_2614731C4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[15];
  uint64_t v3 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[16];
  uint64_t v6 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[17];
  uint64_t v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v10 = v0[13];
  uint64_t v11 = v0[18];
  uint64_t v12 = v10 * v11;
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v13 = v0[14];
  uint64_t v14 = v0[19];
  if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  if (v6 > v3) {
    uint64_t v3 = v6;
  }
  if (v9 > v3) {
    uint64_t v3 = v9;
  }
  if (v12 > v3) {
    uint64_t v3 = v12;
  }
  if (v13 * v14 <= v3) {
    return v3;
  }
  else {
    return v13 * v14;
  }
}

uint64_t sub_261473274(uint64_t (*a1)(void))
{
  uint64_t result = *(void *)v1;
  if (*(_DWORD *)(v1 + 160) != 65568 || result == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 80) * (__int128)*(uint64_t *)(v1 + 120)) >> 64 != (uint64_t)(*(void *)(v1 + 80) * *(void *)(v1 + 120)) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v6 = *(void *)(v1 + 128);
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 96) * (__int128)*(uint64_t *)(v1 + 136)) >> 64 != (uint64_t)(*(void *)(v1 + 96) * *(void *)(v1 + 136)) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 104) * (__int128)*(uint64_t *)(v1 + 144)) >> 64 != (uint64_t)(*(void *)(v1 + 104) * *(void *)(v1 + 144)) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 112) * (__int128)*(uint64_t *)(v1 + 152)) >> 64 == (uint64_t)(*(void *)(v1 + 112) * *(void *)(v1 + 152)) >> 63) {
    return a1();
  }
LABEL_16:
  __break(1u);
  return result;
}

void *sub_261473370()
{
  return &unk_2614DD7E0;
}

void *sub_26147337C()
{
  return &unk_2614DD7E4;
}

uint64_t sub_261473388()
{
  sub_2614D5438();
  int v0 = espresso_plan_add_network();
  swift_release();
  if (!v0) {
    return 0;
  }
  type metadata accessor for espresso_return_status_t(0);
  sub_2614736EC(&qword_26A9159C8);
  swift_allocError();
  *uint64_t v1 = v0;
  return swift_willThrow();
}

uint64_t sub_261473480(uint64_t a1)
{
  return sub_2614734D8(a1, MEMORY[0x263F3B888]);
}

uint64_t sub_2614734AC(uint64_t a1)
{
  return sub_2614734D8(a1, MEMORY[0x263F3B898]);
}

uint64_t sub_2614734D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (result)
  {
    int v3 = result;
    type metadata accessor for espresso_return_status_t(0);
    sub_2614736EC(&qword_26A9159C8);
    swift_allocError();
    *uint64_t v4 = v3;
    return swift_willThrow();
  }
  return result;
}

void *sub_26147355C()
{
  return &unk_2614DD7E8;
}

void *sub_261473568()
{
  return &unk_2614DD7EC;
}

uint64_t sub_261473574()
{
  return 0x10000;
}

uint64_t sub_26147357C@<X0>(uint64_t a1@<X8>)
{
  LODWORD(v5) = 0;
  sub_2614D5438();
  int v2 = espresso_network_bind_buffer();
  uint64_t result = swift_release();
  if (v2)
  {
    type metadata accessor for espresso_return_status_t(0);
    sub_2614736EC(&qword_26A9159C8);
    swift_allocError();
    *uint64_t v4 = v2;
    return swift_willThrow();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(void *)(a1 + 160) = v5;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  return result;
}

void type metadata accessor for espresso_return_status_t(uint64_t a1)
{
}

uint64_t sub_2614736EC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for espresso_return_status_t(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_261473730()
{
  unint64_t result = qword_26A9159E8;
  if (!qword_26A9159E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9159E8);
  }
  return result;
}

Swift::Void __swiftcall VAEspressoModel.destroy()()
{
  espresso_context_destroy();
  espresso_plan_destroy();
}

BOOL static BlobType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t BlobType.hash(into:)()
{
  return sub_2614D6098();
}

uint64_t BlobType.hashValue.getter()
{
  return sub_2614D60B8();
}

uint64_t static VAEspressoUtils.getBlobNames(model:blobType:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (*a2) {
    uint64_t v5 = sub_261473978;
  }
  else {
    uint64_t v5 = sub_261473970;
  }
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  while (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v3, v4, v2))
  {
    uint64_t v7 = sub_2614D54E8();
    uint64_t v9 = v8;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_2613D864C(0, v6[2] + 1, 1, v6);
      uint64_t v6 = (void *)result;
    }
    unint64_t v12 = v6[2];
    unint64_t v11 = v6[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)sub_2613D864C((void *)(v11 > 1), v12 + 1, 1, v6);
      uint64_t v6 = (void *)result;
    }
    v6[2] = v12 + 1;
    uint64_t v13 = &v6[2 * v12];
    v13[4] = v7;
    v13[5] = v9;
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      return result;
    }
  }
  return (uint64_t)v6;
}

uint64_t sub_261473970()
{
  return MEMORY[0x270F27F50]();
}

uint64_t sub_261473978()
{
  return MEMORY[0x270F27F60]();
}

uint64_t sub_261473980()
{
  return 0x6C65646F6DLL;
}

uint64_t static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _OWORD *a7@<X8>)
{
  int v80 = a6;
  *(void *)&long long v68 = a5;
  *(void *)&long long v67 = a4;
  uint64_t v12 = sub_2614D50C8();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v65 = v12;
  uint64_t v66 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  char v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v62 = (char *)&v59 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v63 = (char *)&v59 - v19;
  char v20 = *a3;
  uint64_t v78 = a1;
  unint64_t v79 = a2;
  char v82 = v20;
  char v81 = 0;
  sub_26141C36C();
  swift_bridgeObjectRetain();
  sub_2614D55E8();
  sub_2614D55E8();
  char v64 = a7;
  if (v69 == v77)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_4;
  }
  char v21 = sub_2614D5FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_4:
    sub_2614741FC(a1, a2, 0, v80 & 1, &v69);
    if (v7) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_21;
  }
  char v82 = v20;
  char v81 = 1;
  sub_2614D55E8();
  sub_2614D55E8();
  if (v69 == v77)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v23 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_2613DC2B8();
      swift_allocError();
      void *v41 = 0xD000000000000033;
      v41[1] = 0x80000002614E5D00;
      return swift_willThrow();
    }
  }
  sub_2614741FC(a1, a2, 1, v80 & 1, &v69);
  if (v7)
  {
    uint64_t v24 = 0;
    uint64_t v25 = sub_26146718C();
    uint64_t v27 = v65;
    uint64_t v26 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v16, v25, v65);
    swift_bridgeObjectRetain_n();
    uint64_t v28 = sub_2614D50A8();
    os_log_type_t v29 = sub_2614D5958();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v60 = 0;
      uint64_t v31 = (uint8_t *)v30;
      uint64_t v32 = swift_slowAlloc();
      char v61 = v28;
      uint64_t v33 = v32;
      *(void *)&long long v69 = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v27 = v65;
      char v59 = v31 + 4;
      swift_bridgeObjectRetain();
      *(void *)&long long v77 = sub_2613D875C(a1, a2, (uint64_t *)&v69);
      uint64_t v26 = v66;
      sub_2614D5B58();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2613B8000, v61, v29, "Failed to init %s on ANE, will init it on CPU directly", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E38060](v33, -1, -1);
      BOOL v34 = v31;
      uint64_t v24 = v60;
      MEMORY[0x263E38060](v34, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v27);
  }
  else
  {
    uint64_t v35 = v72;
    uint64_t v27 = v65;
    uint64_t v26 = v66;
    if (v72)
    {
      uint64_t v36 = v70;
      int v37 = v71;
      uint64_t v38 = v73;
      uint64_t v39 = v74;
      long long v67 = v75;
      long long v68 = v69;
      char v40 = v76;
LABEL_23:
      uint64_t result = swift_bridgeObjectRelease();
      unsigned int v48 = v64;
      *char v64 = v68;
      *((void *)v48 + 2) = v36;
      *((_DWORD *)v48 + 6) = v37;
      *((void *)v48 + 4) = v35;
      *((void *)v48 + 5) = v38;
      *((void *)v48 + 6) = v39;
      *(_OWORD *)((char *)v48 + 56) = v67;
      *((unsigned char *)v48 + 72) = v40 & 1;
      return result;
    }
    uint64_t v24 = 0;
  }
  uint64_t v42 = v63;
  uint64_t v43 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v42, v43, v27);
  swift_bridgeObjectRetain_n();
  unint64_t v44 = sub_2614D50A8();
  os_log_type_t v45 = sub_2614D5958();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(void *)&long long v69 = v47;
    *(_DWORD *)uint64_t v46 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v77 = sub_2613D875C(a1, a2, (uint64_t *)&v69);
    sub_2614D5B58();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2613B8000, v44, v45, "Try loading %s on CPU", v46, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E38060](v47, -1, -1);
    MEMORY[0x263E38060](v46, -1, -1);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v65);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v42, v27);
  }
  sub_2614741FC(a1, a2, 0, v80 & 1, &v69);
  if (v24) {
    return swift_bridgeObjectRelease();
  }
LABEL_21:
  uint64_t v36 = v70;
  int v37 = v71;
  uint64_t v35 = v72;
  uint64_t v38 = v73;
  uint64_t v39 = v74;
  char v40 = v76;
  if (v72)
  {
    long long v67 = v75;
    long long v68 = v69;
    goto LABEL_23;
  }
  uint64_t v49 = sub_26146718C();
  uint64_t v51 = v65;
  uint64_t v50 = v66;
  uint64_t v52 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v62, v49, v65);
  unint64_t v53 = sub_2614D50A8();
  os_log_type_t v54 = sub_2614D5958();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl(&dword_2613B8000, v53, v54, "Failed to init neural net after two attempts", v55, 2u);
    uint64_t v56 = v55;
    uint64_t v50 = v66;
    MEMORY[0x263E38060](v56, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v51);
  *(void *)&long long v69 = 0;
  *((void *)&v69 + 1) = 0xE000000000000000;
  sub_2614D5C38();
  swift_bridgeObjectRelease();
  *(void *)&long long v77 = 0xD000000000000021;
  *((void *)&v77 + 1) = 0x80000002614E5D40;
  swift_beginAccess();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  long long v57 = v77;
  sub_2613DC2B8();
  swift_allocError();
  *char v58 = v57;
  return swift_willThrow();
}

uint64_t sub_2614741FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  LODWORD(v359) = a4;
  v349 = a5;
  v378[1] = *MEMORY[0x263EF8340];
  uint64_t v348 = sub_2614D4B78();
  v347 = *(const char **)(v348 - 8);
  MEMORY[0x270FA5388](v348);
  v346 = (char *)v319 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2614D5408();
  MEMORY[0x270FA5388](v9 - 8);
  v350 = (char *)v319 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2614D50C8();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v352 = (char *)v319 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v351 = (char *)v319 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v345 = (char *)v319 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v357 = (char *)v319 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v356 = ((char *)v319 - v22);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v355 = ((char *)v319 - v24);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)v319 - v26;
  MEMORY[0x270FA5388](v25);
  os_log_type_t v29 = (char *)v319 - v28;
  unsigned __int8 v367 = 0;
  if (a3)
  {
    v378[0] = espresso_create_context();
    if (v378[0])
    {
      unsigned __int8 v367 = 1;
      goto LABEL_5;
    }
    uint64_t v83 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v29, v83, v11);
    swift_bridgeObjectRetain_n();
    int v84 = sub_2614D50A8();
    os_log_type_t v85 = sub_2614D5958();
    if (os_log_type_enabled(v84, v85))
    {
      os_log_type_t v86 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      uint64_t v358 = v12;
      uint64_t v88 = v87;
      *(void *)&long long v369 = v87;
      uint64_t v360 = v11;
      *(_DWORD *)os_log_type_t v86 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v368 = sub_2613D875C(a1, a2, (uint64_t *)&v369);
      sub_2614D5B58();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2613B8000, v84, v85, "Not able to utilized ANE; will use CPU instead: %s", v86, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E38060](v88, -1, -1);
      MEMORY[0x263E38060](v86, -1, -1);

      (*(void (**)(char *, uint64_t))(v358 + 8))(v29, v360);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v29, v11);
    }
    *(void *)&long long v369 = 0;
    *((void *)&v369 + 1) = 0xE000000000000000;
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD00000000000001ALL;
    int v98 = "Failed to utilize ANE for ";
LABEL_31:
    *(void *)&long long v369 = v97;
    *((void *)&v369 + 1) = (unint64_t)(v98 - 32) | 0x8000000000000000;
    goto LABEL_32;
  }
  v378[0] = espresso_create_context();
  if (!v378[0])
  {
    uint64_t v89 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v27, v89, v11);
    swift_bridgeObjectRetain_n();
    char v90 = sub_2614D50A8();
    os_log_type_t v91 = sub_2614D5958();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      uint64_t v358 = v12;
      uint64_t v94 = v93;
      *(void *)&long long v369 = v93;
      uint64_t v360 = v11;
      *(_DWORD *)uint64_t v92 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v368 = sub_2613D875C(a1, a2, (uint64_t *)&v369);
      sub_2614D5B58();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2613B8000, v90, v91, "Not able to utilized ANE and CPU: %s", v92, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E38060](v94, -1, -1);
      MEMORY[0x263E38060](v92, -1, -1);

      (*(void (**)(char *, uint64_t))(v358 + 8))(v27, v360);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v27, v11);
    }
    *(void *)&long long v369 = 0;
    *((void *)&v369 + 1) = 0xE000000000000000;
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD000000000000022;
    int v98 = "Failed to utilize ANE and CPU for ";
    goto LABEL_31;
  }
LABEL_5:
  if (v359)
  {
    sub_261478AD0((uint64_t)v378, &qword_26A915298, "Pointer of espresso_context_ref_t %s");
    uint64_t result = espresso_create_plan();
    if (!result) {
      goto LABEL_184;
    }
    uint64_t v366 = result;
    sub_261478AD0((uint64_t)&v366, &qword_26A915288, "Pointer of espresso_plan_ref_t %s");
  }
  else
  {
    uint64_t result = espresso_create_plan();
    if (!result) {
      goto LABEL_184;
    }
    uint64_t v366 = result;
  }
  v353 = (char *)self;
  id v31 = objc_msgSend(v353, sel_defaultManager);
  uint64_t v32 = (void *)sub_2614D5378();
  unsigned int v33 = objc_msgSend(v31, sel_fileExistsAtPath_, v32);

  uint64_t v358 = v12;
  uint64_t v360 = v11;
  if (v33)
  {
    id v34 = objc_allocWithZone(NSString);
    swift_bridgeObjectRetain();
    uint64_t v35 = (void *)sub_2614D5378();
    swift_bridgeObjectRelease();
    id v36 = objc_msgSend(v34, sel_initWithString_, v35);

    id v37 = objc_msgSend(v36, sel_stringByStandardizingPath);
    uint64_t v38 = sub_2614D53A8();
    uint64_t v40 = v39;

    *(void *)&long long v369 = 0;
    *((void *)&v369 + 1) = 0xE000000000000000;
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    *(void *)&long long v369 = 47;
    *((void *)&v369 + 1) = 0xE100000000000000;
    sub_2614D54D8();
    sub_2614D54D8();
    *(void *)&long long v369 = v38;
    *((void *)&v369 + 1) = v40;
    swift_bridgeObjectRetain();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v41 = *((void *)&v369 + 1);
    uint64_t v42 = v369;
    goto LABEL_14;
  }
  uint64_t v43 = (void *)sub_2614D5378();
  id v44 = objc_msgSend(v43, sel_pathExtension);

  sub_2614D53A8();
  os_log_type_t v45 = (void *)sub_2614D5378();
  id v46 = objc_msgSend(v45, sel_stringByDeletingPathExtension);

  sub_2614D53A8();
  uint64_t v47 = sub_261419E08();
  uint64_t v49 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v49)
  {
    *(void *)&long long v369 = 0;
    *((void *)&v369 + 1) = 0xE000000000000000;
    sub_2614D5C38();
    sub_2614D54D8();
    sub_2614D54D8();
LABEL_32:
    sub_2614D54D8();
    uint64_t v96 = *((void *)&v369 + 1);
    uint64_t v95 = v369;
LABEL_33:
    sub_2613DC2B8();
    swift_allocError();
    void *v99 = v95;
    v99[1] = v96;
    return swift_willThrow();
  }
  *(void *)&long long v369 = 0;
  *((void *)&v369 + 1) = 0xE000000000000000;
  sub_2614D5C38();
  swift_bridgeObjectRelease();
  *(void *)&long long v369 = 47;
  *((void *)&v369 + 1) = 0xE100000000000000;
  sub_2614D54D8();
  sub_2614D54D8();
  *(void *)&long long v369 = v47;
  *((void *)&v369 + 1) = v49;
  swift_bridgeObjectRetain();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v41 = *((void *)&v369 + 1);
  uint64_t v42 = v369;
  uint64_t v12 = v358;
  uint64_t v11 = v360;
LABEL_14:
  v364 = (const char *)v42;
  v365 = v41;
  id v50 = objc_msgSend(v353, sel_defaultManager);
  swift_bridgeObjectRetain();
  uint64_t v51 = (void *)sub_2614D5378();
  swift_bridgeObjectRelease();
  unsigned __int8 v52 = objc_msgSend(v50, sel_isReadableFileAtPath_, v51);

  unint64_t v53 = v357;
  os_log_type_t v54 = v356;
  if ((v52 & 1) == 0)
  {
    uint64_t v69 = sub_26146718C();
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v12 + 16))(v355, v69, v11);
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = v42;
    *(void *)(v70 + 24) = v41;
    swift_bridgeObjectRetain_n();
    uint64_t v71 = sub_2614D50A8();
    os_log_type_t v72 = sub_2614D5978();
    uint64_t v73 = swift_allocObject();
    uint64_t v344 = v42;
    uint64_t v74 = v73;
    *(unsigned char *)(v73 + 16) = 32;
    uint64_t v75 = swift_allocObject();
    *(unsigned char *)(v75 + 16) = 8;
    uint64_t v76 = swift_allocObject();
    *(void *)(v76 + 16) = sub_261479258;
    *(void *)(v76 + 24) = v70;
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = sub_2614792BC;
    *(void *)(v77 + 24) = v76;
    sub_2613C23AC(&qword_26A9159F8);
    uint64_t v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_2614D8210;
    *(void *)(v78 + 32) = sub_261479298;
    *(void *)(v78 + 40) = v74;
    *(void *)(v78 + 48) = sub_261479C08;
    *(void *)(v78 + 56) = v75;
    *(void *)(v78 + 64) = sub_2614792E4;
    *(void *)(v78 + 72) = v77;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    os_log_type_t v79 = v72;
    v359 = v71;
    if (os_log_type_enabled(v71, v72))
    {
      int v80 = (uint8_t *)swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      *(void *)&long long v369 = v81;
      *(_WORD *)int v80 = 258;
      v80[2] = 32;
      swift_release();
      v80[3] = 8;
      swift_release();
      swift_bridgeObjectRetain();
      *(void *)&long long v368 = sub_2613D875C(v344, v41, (uint64_t *)&v369);
      sub_2614D5B58();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      char v82 = v359;
      _os_log_impl(&dword_2613B8000, v359, v79, "Network not found in %s", v80, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E38060](v81, -1, -1);
      MEMORY[0x263E38060](v80, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    (*(void (**)(NSObject *, uint64_t))(v358 + 8))(v355, v360);
    *(void *)&long long v369 = 0;
    *((void *)&v369 + 1) = 0xE000000000000000;
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    *(void *)&long long v368 = 0xD00000000000002FLL;
    *((void *)&v368 + 1) = 0x80000002614E5DD0;
    swift_beginAccess();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    uint64_t v96 = *((void *)&v368 + 1);
    uint64_t v95 = v368;
    goto LABEL_33;
  }
  if (v359)
  {
    uint64_t v55 = sub_26146718C();
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v12 + 16))(v54, v55, v11);
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v42;
    *(void *)(v56 + 24) = v41;
    swift_bridgeObjectRetain_n();
    long long v57 = sub_2614D50A8();
    LODWORD(v355) = sub_2614D5968();
    uint64_t v58 = swift_allocObject();
    uint64_t v344 = v42;
    uint64_t v59 = v58;
    *(unsigned char *)(v58 + 16) = 32;
    uint64_t v60 = swift_allocObject();
    *(unsigned char *)(v60 + 16) = 8;
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = sub_261479C0C;
    *(void *)(v61 + 24) = v56;
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = sub_261479B90;
    *(void *)(v62 + 24) = v61;
    sub_2613C23AC(&qword_26A9159F8);
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_2614D8210;
    *(void *)(v63 + 32) = sub_261479C08;
    *(void *)(v63 + 40) = v59;
    *(void *)(v63 + 48) = sub_261479C08;
    *(void *)(v63 + 56) = v60;
    *(void *)(v63 + 64) = sub_261479B98;
    *(void *)(v63 + 72) = v62;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    os_log_type_t v64 = v355;
    v355 = v57;
    if (os_log_type_enabled(v57, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(void *)&long long v369 = v66;
      *(_WORD *)uint64_t v65 = 258;
      v65[2] = 32;
      swift_release();
      v65[3] = 8;
      swift_release();
      swift_bridgeObjectRetain();
      *(void *)&long long v368 = sub_2613D875C(v344, v41, (uint64_t *)&v369);
      sub_2614D5B58();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      long long v67 = v355;
      _os_log_impl(&dword_2613B8000, v355, v64, "Path for the model file is %s", v65, 0xCu);
      swift_arrayDestroy();
      uint64_t v68 = v66;
      unint64_t v53 = v357;
      MEMORY[0x263E38060](v68, -1, -1);
      MEMORY[0x263E38060](v65, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v12 = v358;
    (*(void (**)(NSObject *, uint64_t))(v358 + 8))(v356, v360);
  }
  uint64_t v100 = sub_26146718C();
  unint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v334 = v100;
  uint64_t v335 = v12 + 16;
  v333 = v101;
  ((void (*)(char *))v101)(v53);
  uint64_t v102 = v364;
  float v103 = v365;
  uint64_t v104 = swift_allocObject();
  v337 = v102;
  *(void *)(v104 + 16) = v102;
  *(void *)(v104 + 24) = v103;
  LODWORD(v102) = v367;
  uint64_t v105 = swift_allocObject();
  LODWORD(v338) = v102;
  *(unsigned char *)(v105 + 16) = (_BYTE)v102;
  v355 = v103;
  swift_bridgeObjectRetain_n();
  v356 = sub_2614D50A8();
  LODWORD(v340) = sub_2614D5958();
  *(void *)&long long v339 = swift_allocObject();
  *(unsigned char *)(v339 + 16) = 32;
  uint64_t v106 = swift_allocObject();
  *(unsigned char *)(v106 + 16) = 8;
  uint64_t v107 = swift_allocObject();
  *(void *)(v107 + 16) = sub_261479C0C;
  *(void *)(v107 + 24) = v104;
  uint64_t v108 = swift_allocObject();
  *(void *)(v108 + 16) = sub_261479B90;
  *(void *)(v108 + 24) = v107;
  uint64_t v109 = swift_allocObject();
  *(unsigned char *)(v109 + 16) = 32;
  uint64_t v110 = swift_allocObject();
  *(unsigned char *)(v110 + 16) = 8;
  uint64_t v111 = swift_allocObject();
  *(void *)(v111 + 16) = sub_2614792FC;
  *(void *)(v111 + 24) = v105;
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = sub_261479B90;
  *(void *)(v112 + 24) = v111;
  uint64_t v336 = sub_2613C23AC(&qword_26A9159F8);
  uint64_t v113 = swift_allocObject();
  long long v332 = xmmword_2614D81D0;
  *(_OWORD *)(v113 + 16) = xmmword_2614D81D0;
  uint64_t v114 = v339;
  *(void *)(v113 + 32) = sub_261479C08;
  *(void *)(v113 + 40) = v114;
  *(void *)(v113 + 48) = sub_261479C08;
  *(void *)(v113 + 56) = v106;
  *(void *)(v113 + 64) = sub_261479B98;
  *(void *)(v113 + 72) = v108;
  *(void *)(v113 + 80) = sub_261479C08;
  *(void *)(v113 + 88) = v109;
  *(void *)(v113 + 96) = sub_261479C08;
  *(void *)(v113 + 104) = v110;
  *(void *)(v113 + 112) = sub_261479B98;
  *(void *)(v113 + 120) = v112;
  unint64_t v343 = v104;
  swift_retain();
  uint64_t v341 = v107;
  swift_retain();
  uint64_t v344 = v105;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v342 = v109;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  os_log_type_t v115 = v340;
  if (os_log_type_enabled(v356, (os_log_type_t)v340))
  {
    unint64_t v116 = (uint8_t *)swift_slowAlloc();
    v340 = (void (**)(void, void))swift_slowAlloc();
    *(void *)&long long v369 = v340;
    *(_WORD *)unint64_t v116 = 514;
    v116[2] = 32;
    swift_release();
    v116[3] = 8;
    swift_release();
    os_log_t v117 = v355;
    swift_bridgeObjectRetain();
    *(void *)&long long v368 = sub_2613D875C((uint64_t)v337, (unint64_t)v117, (uint64_t *)&v369);
    *(void *)&long long v339 = (char *)&v368 + 8;
    sub_2614D5B58();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    v116[12] = 32;
    swift_release();
    v116[13] = 8;
    swift_release();
    if (v338) {
      uint64_t v118 = 4542017;
    }
    else {
      uint64_t v118 = 5591107;
    }
    *(void *)&long long v368 = sub_2613D875C(v118, 0xE300000000000000, (uint64_t *)&v369);
    sub_2614D5B58();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v119 = v356;
    _os_log_impl(&dword_2613B8000, v356, v115, "Loading model %s on %s", v116, 0x16u);
    uint64_t v120 = v340;
    swift_arrayDestroy();
    MEMORY[0x263E38060](v120, -1, -1);
    char v121 = v116;
    uint64_t v122 = v358;
    MEMORY[0x263E38060](v121, -1, -1);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v122 = v358;
  }
  (*(void (**)(char *, uint64_t))(v122 + 8))(v357, v360);
  swift_beginAccess();
  v123 = v364;
  char v124 = v365;
  swift_beginAccess();
  int v125 = v367;
  swift_bridgeObjectRetain();
  if (v125 == 1) {
    sub_26147337C();
  }
  else {
    sub_261473370();
  }
  char v126 = v354;
  uint64_t v127 = sub_261473388();
  unsigned int v129 = v128;
  char v130 = v126;
  swift_bridgeObjectRelease();
  if (v126) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v376 = v127;
  unsigned int v377 = v129;
  if (v359) {
    sub_261478AD0((uint64_t)&v376, &qword_26A915270, "Pointer of espresso_network_t %s");
  }
  *(void *)&long long v369 = v123;
  *((void *)&v369 + 1) = v124;
  swift_bridgeObjectRetain();
  sub_2614D54D8();
  long long v372 = v369;
  unint64_t v363 = MEMORY[0x263F8EE80];
  swift_bridgeObjectRetain();
  id v131 = objc_msgSend(v353, sel_defaultManager);
  swift_bridgeObjectRetain();
  uint64_t v132 = (void *)sub_2614D5378();
  swift_bridgeObjectRelease();
  unsigned int v133 = objc_msgSend(v131, sel_isReadableFileAtPath_, v132);

  if (v133)
  {
    swift_bridgeObjectRetain();
    sub_2614D53F8();
    uint64_t v134 = sub_2614D5358();
    uint64_t v136 = v135;
    swift_bridgeObjectRelease_n();
    *(void *)&long long v369 = v134;
    *((void *)&v369 + 1) = v136;
    char v137 = v346;
    sub_2614D4B68();
    sub_2613DC3BC();
    uint64_t v138 = MEMORY[0x263F8D310];
    uint64_t v139 = sub_2614D5B78();
    (*((void (**)(const char *, uint64_t))v347 + 1))(v137, v348);
    swift_bridgeObjectRelease();
    v359 = *(NSObject **)(v139 + 16);
    if (v359)
    {
      v355 = 0;
      uint64_t v140 = v122;
      unint64_t v141 = 0;
      v357 = (char *)(v139 + 32);
      v340 = (void (**)(void, void))(v140 + 8);
      v331 = (char *)&v368 + 8;
      v353 = "tateShapes from config";
      v356 = 0x80000002614E0B80;
      v350 = "<ContextEmbeddingDim>";
      uint64_t v354 = 0x80000002614E0BC0;
      v347 = "<ContextEmbeddings>";
      v351 = (char *)0x80000002614E0BA0;
      v346 = "<ContextEmbeddingMask>";
      uint64_t v348 = 0x80000002614E0BE0;
      long long v339 = xmmword_2614D8210;
      uint64_t v330 = MEMORY[0x263F8EE58] + 8;
      v338 = "fer";
      uint64_t v344 = 0x80000002614E2D00;
      uint64_t v341 = (uint64_t)"Swift/Collection.swift";
      unint64_t v343 = 0x80000002614E0AF0;
      v337 = "<InputFrameCount>";
      unint64_t v342 = 0x80000002614E0B10;
      unint64_t v328 = (unint64_t)"<FrameSubsamplingFactor>";
      unint64_t v329 = 0x80000002614E0B30;
      while (1)
      {
        if (*(void *)(v139 + 16) <= v141)
        {
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
        }
        uint64_t v142 = v139;
        uint64_t v143 = &v357[16 * v141];
        uint64_t v145 = *(void *)v143;
        uint64_t v144 = *((void *)v143 + 1);
        *(void *)&long long v369 = *(void *)v143;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0xD000000000000013;
        *((void *)&v368 + 1) = v356;
        swift_bridgeObjectRetain();
        if (sub_2614D5BD8()) {
          break;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0xD000000000000016;
        *((void *)&v368 + 1) = v354;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          uint64_t v152 = (void *)sub_2614D5B88();
          swift_bridgeObjectRelease();
          uint64_t v371 = v138;
          if (v152[2] <= 1uLL) {
            goto LABEL_177;
          }
          uint64_t v154 = v152[6];
          uint64_t v153 = v152[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v369 = v154;
          *((void *)&v369 + 1) = v153;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0xD000000000000016;
          uint64_t v151 = (uint64_t *)&v375;
          goto LABEL_62;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0xD000000000000015;
        *((void *)&v368 + 1) = v351;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v368 = v145;
          *((void *)&v368 + 1) = v144;
          uint64_t v361 = 32;
          unint64_t v362 = 0xE100000000000000;
          char v156 = (void *)sub_2614D5B88();
          swift_bridgeObjectRelease();
          if (v156[2] <= 1uLL) {
            goto LABEL_178;
          }
          uint64_t v157 = v156[6];
          unint64_t v158 = v156[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v159 = sub_2613CE0E0(v157, v158);
          if (v160)
          {
            uint64_t v172 = 0xD000000000000015;
            unint64_t v173 = &v374;
            goto LABEL_83;
          }
          uint64_t v371 = MEMORY[0x263F8D6C8];
          *(void *)&long long v369 = v159;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0xD000000000000015;
          uint64_t v151 = (uint64_t *)&v374;
          goto LABEL_62;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0xD000000000000019;
        *((void *)&v368 + 1) = v348;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v368 = v145;
          *((void *)&v368 + 1) = v144;
          uint64_t v361 = 32;
          unint64_t v362 = 0xE100000000000000;
          v161 = (void *)sub_2614D5B88();
          swift_bridgeObjectRelease();
          if (v161[2] <= 1uLL) {
            goto LABEL_179;
          }
          uint64_t v162 = v161[6];
          unint64_t v163 = v161[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v164 = sub_2613CE0E0(v162, v163);
          if (v165)
          {
            uint64_t v172 = 0xD000000000000019;
            unint64_t v173 = &v373;
            goto LABEL_83;
          }
          uint64_t v371 = MEMORY[0x263F8D6C8];
          *(void *)&long long v369 = v164;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0xD000000000000019;
          uint64_t v151 = (uint64_t *)&v373;
          goto LABEL_62;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<InputStates>");
        HIWORD(v368) = -4864;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          BOOL v166 = (void *)sub_2614D5B88();
          swift_bridgeObjectRelease();
          if (v166[2] <= 1uLL) {
            goto LABEL_180;
          }
          uint64_t v167 = v166[6];
          unint64_t v168 = v166[7];
          swift_bridgeObjectRetain();
          uint64_t v169 = swift_bridgeObjectRelease();
          *(void *)&long long v369 = 44;
          *((void *)&v369 + 1) = 0xE100000000000000;
          MEMORY[0x270FA5388](v169);
          v319[-2] = &v369;
          swift_bridgeObjectRetain();
          uint64_t v170 = v355;
          uint64_t v171 = sub_2613D7D10(0x7FFFFFFFFFFFFFFFLL, 1, sub_261422840, (uint64_t)&v319[-4], v167, v168);
          v355 = v170;
          swift_bridgeObjectRelease();
          uint64_t v371 = sub_2613C23AC(&qword_26A914B00);
          *(void *)&long long v369 = v171;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          unint64_t v155 = 0xED00003E73657461;
          uint64_t v150 = 0x74537475706E493CLL;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<OutputStates>");
        HIBYTE(v368) = -18;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          unint64_t v174 = (void *)sub_2614D5B88();
          swift_bridgeObjectRelease();
          if (v174[2] <= 1uLL) {
            goto LABEL_181;
          }
          uint64_t v175 = v174[6];
          unint64_t v176 = v174[7];
          swift_bridgeObjectRetain();
          uint64_t v177 = swift_bridgeObjectRelease();
          *(void *)&long long v369 = 44;
          *((void *)&v369 + 1) = 0xE100000000000000;
          MEMORY[0x270FA5388](v177);
          v319[-2] = &v369;
          swift_bridgeObjectRetain();
          v178 = v355;
          uint64_t v179 = sub_2613D7D10(0x7FFFFFFFFFFFFFFFLL, 1, sub_261422840, (uint64_t)&v319[-4], v175, v176);
          v355 = v178;
          swift_bridgeObjectRelease();
          uint64_t v371 = sub_2613C23AC(&qword_26A914B00);
          *(void *)&long long v369 = v179;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x5374757074754F3CLL;
          unint64_t v155 = 0xEE003E7365746174;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<InputFeats>");
        BYTE13(v368) = 0;
        HIWORD(v368) = -5120;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          v181 = (void *)sub_2614D5B88();
          swift_bridgeObjectRelease();
          uint64_t v371 = v138;
          if (v181[2] <= 1uLL) {
            goto LABEL_182;
          }
          uint64_t v183 = v181[6];
          uint64_t v182 = v181[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v369 = v183;
          *((void *)&v369 + 1) = v182;
          goto LABEL_88;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<ConformerOut>");
        HIBYTE(v368) = -18;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          v184 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v371 = v138;
          if (v184[2] <= 1uLL)
          {
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
            return result;
          }
          uint64_t v186 = v184[6];
          uint64_t v185 = v184[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v369 = v186;
          *((void *)&v369 + 1) = v185;
          goto LABEL_92;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0x74736F504354433CLL;
        *((void *)&v368 + 1) = 0xEF3E73726F697265;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          v187 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v371 = v138;
          if (v187[2] <= 1uLL) {
            goto LABEL_185;
          }
          uint64_t v189 = v187[6];
          uint64_t v188 = v187[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v369 = v189;
          *((void *)&v369 + 1) = v188;
          goto LABEL_96;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<OutputData>");
        BYTE13(v368) = 0;
        HIWORD(v368) = -5120;
        v327 = (void *)0xEC0000003E617461;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          v190 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v371 = v138;
          if (v190[2] <= 1uLL) {
            goto LABEL_186;
          }
          uint64_t v192 = v190[6];
          uint64_t v191 = v190[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v369 = v192;
          *((void *)&v369 + 1) = v191;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x4474757074754F3CLL;
LABEL_103:
          unint64_t v155 = (unint64_t)v327;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<InputData>");
        HIDWORD(v368) = -352321536;
        v327 = (void *)0xEB000000003E6174;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          Class v193 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v371 = v138;
          if (v193[2] <= 1uLL) {
            goto LABEL_187;
          }
          uint64_t v195 = v193[6];
          uint64_t v194 = v193[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v369 = v195;
          *((void *)&v369 + 1) = v194;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x61447475706E493CLL;
          goto LABEL_103;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0xD000000000000011;
        *((void *)&v368 + 1) = v344;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          unint64_t v196 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          if (v196[2] <= 1uLL) {
            goto LABEL_188;
          }
          uint64_t v197 = v196[6];
          uint64_t v198 = v196[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v369 = v197;
          *((void *)&v369 + 1) = v198;
          *(void *)&long long v368 = 44;
          *((void *)&v368 + 1) = 0xE100000000000000;
          uint64_t v199 = sub_2614D5B88();
          swift_bridgeObjectRelease();
          v327 = (void *)v199;
          uint64_t v200 = *(void *)(v199 + 16);
          if (v200 == 2) {
            goto LABEL_64;
          }
          if (v200 != 4)
          {
            v333(v345, v334, v360);
            uint64_t v220 = swift_allocObject();
            *(void *)(v220 + 16) = v327;
            uint64_t v221 = swift_allocObject();
            *(void *)(v221 + 16) = sub_261479ACC;
            *(void *)(v221 + 24) = v220;
            uint64_t v222 = v221;
            uint64_t v326 = v221;
            swift_bridgeObjectRetain();
            uint64_t v323 = v220;
            swift_retain();
            v325 = sub_2614D50A8();
            LODWORD(v324) = sub_2614D5978();
            uint64_t v223 = swift_allocObject();
            *(unsigned char *)(v223 + 16) = 32;
            uint64_t v224 = swift_allocObject();
            *(unsigned char *)(v224 + 16) = 8;
            uint64_t v225 = swift_allocObject();
            *(void *)(v225 + 16) = sub_261479AD8;
            *(void *)(v225 + 24) = v222;
            uint64_t v226 = swift_allocObject();
            *(void *)(v226 + 16) = sub_261479B90;
            *(void *)(v226 + 24) = v225;
            uint64_t v227 = swift_allocObject();
            *(_OWORD *)(v227 + 16) = v339;
            *(void *)(v227 + 32) = sub_261479C08;
            *(void *)(v227 + 40) = v223;
            *(void *)(v227 + 48) = sub_261479C08;
            *(void *)(v227 + 56) = v224;
            *(void *)(v227 + 64) = sub_261479B98;
            *(void *)(v227 + 72) = v226;
            swift_retain();
            uint64_t v322 = v225;
            swift_retain();
            v321 = (uint8_t *)v223;
            swift_retain();
            uint64_t v320 = v224;
            swift_retain();
            v319[1] = v226;
            swift_retain();
            swift_bridgeObjectRelease();
            os_log_type_t v228 = v324;
            if (os_log_type_enabled(v325, (os_log_type_t)v324))
            {
              uint64_t v229 = (uint8_t *)swift_slowAlloc();
              uint64_t v324 = swift_slowAlloc();
              *(void *)&long long v369 = v324;
              *(_WORD *)uint64_t v229 = 258;
              v229[2] = 32;
              swift_release();
              v229[3] = 8;
              swift_release();
              v321 = v229 + 4;
              uint64_t v230 = swift_bridgeObjectRetain();
              uint64_t v320 = MEMORY[0x263E36790](v230, v138);
              unint64_t v232 = v231;
              swift_bridgeObjectRelease();
              *(void *)&long long v368 = sub_2613D875C(v320, v232, (uint64_t *)&v369);
              sub_2614D5B58();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              v233 = v325;
              _os_log_impl(&dword_2613B8000, v325, v228, "Invalid ouput shape: %s", v229, 0xCu);
              uint64_t v234 = v324;
              swift_arrayDestroy();
              MEMORY[0x263E38060](v234, -1, -1);
              MEMORY[0x263E38060](v229, -1, -1);
            }
            else
            {

              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
            }
            (*v340)(v345, v360);
            goto LABEL_65;
          }
          uint64_t v371 = sub_2613C23AC(&qword_26A915280);
          uint64_t result = swift_allocObject();
          *(void *)&long long v369 = result;
          if (v327[2] <= 2uLL) {
            goto LABEL_191;
          }
          uint64_t v201 = result;
          v202 = v327;
          uint64_t v203 = v327[8];
          unint64_t v204 = v327[9];
          swift_bridgeObjectRetain();
          uint64_t result = sub_2613CE0E0(v203, v204);
          *(void *)(v201 + 16) = result;
          *(unsigned char *)(v201 + 24) = v205 & 1;
          if (v202[2] <= 3uLL) {
            goto LABEL_192;
          }
          uint64_t v206 = v327[10];
          unint64_t v207 = v327[11];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v201 + 32) = sub_2613CE0E0(v206, v207);
          *(unsigned char *)(v201 + 40) = v208 & 1;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          char v209 = (char *)&v368 + 8;
          goto LABEL_115;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0xD000000000000011;
        *((void *)&v368 + 1) = v343;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v368 = v145;
          *((void *)&v368 + 1) = v144;
          uint64_t v361 = 32;
          unint64_t v362 = 0xE100000000000000;
          v210 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          if (v210[2] <= 1uLL) {
            goto LABEL_190;
          }
          uint64_t v211 = v210[6];
          unint64_t v212 = v210[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v213 = sub_2613CE0E0(v211, v212);
          if (v214)
          {
            unint64_t v180 = v341 | 0x8000000000000000;
            uint64_t v172 = 0xD000000000000011;
            goto LABEL_84;
          }
          uint64_t v371 = MEMORY[0x263F8D6C8];
          *(void *)&long long v369 = v213;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          char v209 = (char *)&v369 + 8;
LABEL_115:
          unint64_t v155 = *((void *)v209 - 32) | 0x8000000000000000;
          uint64_t v150 = 0xD000000000000011;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0xD000000000000018;
        *((void *)&v368 + 1) = v342;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v368 = v145;
          *((void *)&v368 + 1) = v144;
          uint64_t v361 = 32;
          unint64_t v362 = 0xE100000000000000;
          uint64_t v215 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          if (v215[2] <= 1uLL) {
            goto LABEL_193;
          }
          uint64_t v216 = v215[6];
          unint64_t v217 = v215[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v218 = sub_2613CE0E0(v216, v217);
          if (v219)
          {
            uint64_t v172 = 0xD000000000000018;
            unint64_t v173 = (char *)&v368;
LABEL_83:
            unint64_t v180 = *((void *)v173 - 32) | 0x8000000000000000;
LABEL_84:
            sub_2614795DC(v172, v180, &v368);
            sub_2613DD864((uint64_t)&v368);
            goto LABEL_65;
          }
          uint64_t v371 = MEMORY[0x263F8D6C8];
          *(void *)&long long v369 = v218;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0xD000000000000018;
          uint64_t v151 = (uint64_t *)&v368;
          goto LABEL_62;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<FrameOverlap>");
        HIBYTE(v368) = -18;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v368 = v145;
          *((void *)&v368 + 1) = v144;
          uint64_t v361 = 32;
          unint64_t v362 = 0xE100000000000000;
          uint64_t v235 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          if (v235[2] <= 1uLL) {
            goto LABEL_194;
          }
          uint64_t v236 = v235[6];
          unint64_t v237 = v235[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v238 = sub_2613CE0E0(v236, v237);
          if (v239)
          {
            uint64_t v172 = 0x764F656D6172463CLL;
            unint64_t v180 = 0xEE003E70616C7265;
            goto LABEL_84;
          }
          uint64_t v371 = MEMORY[0x263F8D6C8];
          *(void *)&long long v369 = v238;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x764F656D6172463CLL;
          unint64_t v155 = 0xEE003E70616C7265;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<InputDim>");
        BYTE11(v368) = 0;
        HIDWORD(v368) = -369098752;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v368 = v145;
          *((void *)&v368 + 1) = v144;
          uint64_t v361 = 32;
          unint64_t v362 = 0xE100000000000000;
          uint64_t v240 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          if (v240[2] <= 1uLL) {
            goto LABEL_195;
          }
          uint64_t v241 = v240[6];
          unint64_t v242 = v240[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v243 = sub_2613CE0E0(v241, v242);
          if (v244)
          {
            uint64_t v172 = 0x69447475706E493CLL;
            unint64_t v180 = 0xEA00000000003E6DLL;
            goto LABEL_84;
          }
          uint64_t v371 = MEMORY[0x263F8D6C8];
          *(void *)&long long v369 = v243;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x69447475706E493CLL;
          unint64_t v155 = 0xEA00000000003E6DLL;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<OutputDim>");
        HIDWORD(v368) = -352321536;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v368 = v145;
          *((void *)&v368 + 1) = v144;
          uint64_t v361 = 32;
          unint64_t v362 = 0xE100000000000000;
          id v245 = (void *)sub_2614D5B88();
          uint64_t result = swift_bridgeObjectRelease();
          if (v245[2] <= 1uLL) {
            goto LABEL_196;
          }
          uint64_t v246 = v245[6];
          unint64_t v247 = v245[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v248 = sub_2613CE0E0(v246, v247);
          if (v249)
          {
            uint64_t v172 = 0x4474757074754F3CLL;
            unint64_t v180 = 0xEB000000003E6D69;
            goto LABEL_84;
          }
          uint64_t v371 = MEMORY[0x263F8D6C8];
          *(void *)&long long v369 = v248;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x4474757074754F3CLL;
          unint64_t v155 = 0xEB000000003E6D69;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<InputFeats>");
        BYTE13(v368) = 0;
        HIWORD(v368) = -5120;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          uint64_t v250 = sub_2614D5B88();
          swift_bridgeObjectRelease();
          uint64_t v371 = sub_2613C23AC(&qword_26A914A70);
          *(void *)&long long v369 = v250;
LABEL_88:
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x65467475706E493CLL;
          unint64_t v155 = 0xEC0000003E737461;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0x3E6B73614D3CLL;
        *((void *)&v368 + 1) = 0xE600000000000000;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          uint64_t v251 = sub_2614D5B88();
          swift_bridgeObjectRelease();
          uint64_t v371 = sub_2613C23AC(&qword_26A914A70);
          *(void *)&long long v369 = v251;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x3E6B73614D3CLL;
          unint64_t v155 = 0xE600000000000000;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        v327 = (void *)0xD000000000000010;
        *(void *)&long long v368 = 0xD000000000000010;
        *((void *)&v368 + 1) = v329;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          uint64_t v252 = sub_2614D5B88();
          swift_bridgeObjectRelease();
          uint64_t v371 = sub_2613C23AC(&qword_26A914A70);
          *(void *)&long long v369 = v252;
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          unint64_t v155 = v328 | 0x8000000000000000;
          uint64_t v150 = (uint64_t)v327;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<ConformerOut>");
        HIBYTE(v368) = -18;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          uint64_t v253 = sub_2614D5B88();
          swift_bridgeObjectRelease();
          uint64_t v371 = sub_2613C23AC(&qword_26A914A70);
          *(void *)&long long v369 = v253;
LABEL_92:
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x6D726F666E6F433CLL;
          unint64_t v155 = 0xEE003E74754F7265;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 0x74736F504354433CLL;
        *((void *)&v368 + 1) = 0xEF3E73726F697265;
        if (sub_2614D5BD8())
        {
          *(void *)&long long v369 = v145;
          *((void *)&v369 + 1) = v144;
          *(void *)&long long v368 = 32;
          *((void *)&v368 + 1) = 0xE100000000000000;
          uint64_t v254 = sub_2614D5B88();
          swift_bridgeObjectRelease();
          uint64_t v371 = sub_2613C23AC(&qword_26A914A70);
          *(void *)&long long v369 = v254;
LABEL_96:
          sub_261409630(&v369, &v368);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v361 = v363;
          unint64_t v363 = 0x8000000000000000;
          uint64_t v150 = 0x74736F504354433CLL;
          unint64_t v155 = 0xEF3E73726F697265;
          goto LABEL_63;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        strcpy((char *)&v368, "<StateShapes>");
        HIWORD(v368) = -4864;
        if ((sub_2614D5BD8() & 1) == 0) {
          goto LABEL_64;
        }
        *(void *)&long long v369 = v145;
        *((void *)&v369 + 1) = v144;
        *(void *)&long long v368 = 32;
        *((void *)&v368 + 1) = 0xE100000000000000;
        int v255 = (void *)sub_2614D5B88();
        uint64_t result = swift_bridgeObjectRelease();
        if (v255[2] <= 1uLL) {
          goto LABEL_197;
        }
        uint64_t v257 = v255[6];
        unint64_t v256 = v255[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v258 = sub_26147993C(1uLL, v257, v256);
        unint64_t v260 = v259;
        v327 = v261;
        swift_bridgeObjectRelease();
        uint64_t result = sub_2614D5B18();
        if (__OFSUB__(result, 1)) {
          goto LABEL_198;
        }
        uint64_t result = sub_2614D5B08();
        if (v262) {
          unint64_t v263 = v260;
        }
        else {
          unint64_t v263 = result;
        }
        if (v263 >> 14 < v258 >> 14) {
          goto LABEL_199;
        }
        uint64_t v264 = sub_2614D5B38();
        uint64_t v266 = v265;
        v327 = v267;
        uint64_t v269 = v268;
        swift_bridgeObjectRelease();
        *(void *)&long long v369 = v264;
        *((void *)&v369 + 1) = v266;
        v370 = v327;
        uint64_t v371 = v269;
        *(void *)&long long v368 = 2632745;
        *((void *)&v368 + 1) = 0xE300000000000000;
        sub_2614799EC();
        sub_261479A40();
        v270 = sub_2614D58D8();
        swift_bridgeObjectRelease();
        v325 = v270;
        if (v270[2].isa)
        {
          int64_t isa = (int64_t)v270[2].isa;
          *(void *)&long long v369 = MEMORY[0x263F8EE78];
          sub_261478CF4(isa);
          uint64_t v272 = v325 + 7;
          do
          {
            Class v274 = v272[-3].isa;
            Class v273 = v272[-2].isa;
            Class v275 = v272->isa;
            v327 = v272[-1].isa;
            swift_bridgeObjectRetain();
            v327 = (void *)MEMORY[0x263E36570](v274, v273, v327, v275);
            uint64_t v326 = v276;
            swift_bridgeObjectRelease();
            sub_2614798B8();
            uint64_t v277 = *(void *)(v369 + 16);
            sub_261479914(v277);
            uint64_t v278 = v369;
            *(void *)(v369 + 16) = v277 + 1;
            uint64_t v279 = v278 + 16 * v277;
            uint64_t v280 = v326;
            *(void *)(v279 + 32) = v327;
            *(void *)(v279 + 40) = v280;
            v272 += 4;
            --isa;
          }
          while (isa);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v278 = MEMORY[0x263F8EE78];
        }
        uint64_t v371 = sub_2613C23AC(&qword_26A914A70);
        *(void *)&long long v369 = v278;
        sub_261409630(&v369, &v368);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v361 = v363;
        unint64_t v363 = 0x8000000000000000;
        uint64_t v150 = 0x685365746174533CLL;
        unint64_t v155 = 0xED00003E73657061;
LABEL_63:
        sub_26141D4D0(&v368, v150, v155, isUniquelyReferenced_nonNull_native);
        unint64_t v363 = v361;
LABEL_64:
        swift_bridgeObjectRelease();
LABEL_65:
        uint64_t v139 = v142;
        if (++v141 == v359)
        {
          swift_bridgeObjectRelease();
          v318 = v352;
          char v130 = v355;
          goto LABEL_167;
        }
      }
      *(void *)&long long v369 = v145;
      *((void *)&v369 + 1) = v144;
      *(void *)&long long v368 = 32;
      *((void *)&v368 + 1) = 0xE100000000000000;
      uint64_t v146 = (void *)sub_2614D5B88();
      swift_bridgeObjectRelease();
      uint64_t v371 = v138;
      if (v146[2] <= 1uLL) {
        goto LABEL_176;
      }
      uint64_t v148 = v146[6];
      uint64_t v147 = v146[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v369 = v148;
      *((void *)&v369 + 1) = v147;
      sub_261409630(&v369, &v368);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v361 = v363;
      unint64_t v363 = 0x8000000000000000;
      uint64_t v150 = 0xD000000000000013;
      uint64_t v151 = &v376;
LABEL_62:
      unint64_t v155 = *(v151 - 32) | 0x8000000000000000;
      goto LABEL_63;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    long long v372 = 0uLL;
  }
  v318 = v352;
LABEL_167:
  uint64_t v281 = v366;
  uint64_t result = sub_261473480(v366);
  if (v130)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v333(v318, v334, v360);
    v282 = v364;
    unint64_t v283 = (char *)v365;
    uint64_t v284 = swift_allocObject();
    v346 = v282;
    *(void *)(v284 + 16) = v282;
    *(void *)(v284 + 24) = v283;
    unint64_t v285 = swift_allocObject();
    v285[2].int64_t isa = (Class)v130;
    v356 = v285;
    v286 = v130;
    __int32 v287 = v130;
    v353 = v283;
    swift_bridgeObjectRetain();
    v359 = sub_2614D50A8();
    LODWORD(v355) = sub_2614D5978();
    uint64_t v288 = swift_allocObject();
    *(unsigned char *)(v288 + 16) = 32;
    uint64_t v289 = v288;
    uint64_t v290 = swift_allocObject();
    *(unsigned char *)(v290 + 16) = 8;
    uint64_t v291 = v290;
    uint64_t v292 = swift_allocObject();
    *(void *)(v292 + 16) = sub_261479C0C;
    *(void *)(v292 + 24) = v284;
    uint64_t v293 = swift_allocObject();
    *(void *)(v293 + 16) = sub_261479B90;
    *(void *)(v293 + 24) = v292;
    uint64_t v294 = v293;
    v357 = (char *)v293;
    uint64_t v354 = swift_allocObject();
    *(unsigned char *)(v354 + 16) = 64;
    v347 = (const char *)swift_allocObject();
    *((unsigned char *)v347 + 16) = 8;
    uint64_t v295 = swift_allocObject();
    *(void *)(v295 + 16) = sub_261479C04;
    *(void *)(v295 + 24) = v285;
    uint64_t v296 = swift_allocObject();
    *(void *)(v296 + 16) = sub_2614793A0;
    *(void *)(v296 + 24) = v295;
    uint64_t v297 = swift_allocObject();
    *(void *)(v297 + 16) = sub_2614793A4;
    *(void *)(v297 + 24) = v296;
    uint64_t v298 = swift_allocObject();
    *(_OWORD *)(v298 + 16) = v332;
    *(void *)(v298 + 32) = sub_261479C08;
    *(void *)(v298 + 40) = v289;
    *(void *)(v298 + 48) = sub_261479C08;
    *(void *)(v298 + 56) = v291;
    *(void *)(v298 + 64) = sub_261479B98;
    *(void *)(v298 + 72) = v294;
    uint64_t v299 = v354;
    *(void *)(v298 + 80) = sub_261479C08;
    *(void *)(v298 + 88) = v299;
    char v300 = v347;
    *(void *)(v298 + 96) = sub_261479C08;
    *(void *)(v298 + 104) = v300;
    *(void *)(v298 + 112) = sub_2614794BC;
    *(void *)(v298 + 120) = v297;
    v351 = (char *)v284;
    swift_retain();
    v350 = (const char *)v292;
    swift_retain();
    swift_retain();
    v349 = (void *)v295;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v348 = v297;
    swift_retain();
    swift_bridgeObjectRelease();
    os_log_type_t v301 = v355;
    if (os_log_type_enabled(v359, (os_log_type_t)v355))
    {
      uint64_t v302 = swift_slowAlloc();
      v355 = v130;
      char v303 = (uint8_t *)v302;
      v345 = (char *)swift_slowAlloc();
      uint64_t v304 = swift_slowAlloc();
      *(void *)&long long v369 = v304;
      *(_WORD *)char v303 = 514;
      v303[2] = 32;
      swift_release();
      v303[3] = 8;
      swift_release();
      char v305 = v353;
      swift_bridgeObjectRetain();
      *(void *)&long long v368 = sub_2613D875C((uint64_t)v346, (unint64_t)v305, (uint64_t *)&v369);
      sub_2614D5B58();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      v303[12] = 64;
      swift_release();
      v303[13] = 8;
      swift_release();
      char v306 = v355;
      uint64_t v307 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v368 = v307;
      sub_2614D5B58();
      int v308 = v345;
      *(void *)v345 = v307;
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      uint64_t v309 = v359;
      _os_log_impl(&dword_2613B8000, v359, v301, "Failed to call plan.build() for %s: %@", v303, 0x16u);
      sub_2613C23AC(&qword_26A914C10);
      swift_arrayDestroy();
      MEMORY[0x263E38060]((char *)v308, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x263E38060](v304, -1, -1);
      MEMORY[0x263E38060](v303, -1, -1);
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v358 + 8))(v352, v360);
    return swift_willThrow();
  }
  uint64_t v310 = v378[0];
  if (!v378[0]) {
    goto LABEL_189;
  }
  uint64_t v311 = v376;
  uint64_t v312 = v377;
  unint64_t v313 = v363;
  char v314 = v364;
  v315 = v365;
  uint64_t result = swift_beginAccess();
  unsigned __int8 v316 = v367;
  v317 = v349;
  void *v349 = v281;
  v317[1] = v310;
  v317[2] = v311;
  v317[3] = v312;
  v317[4] = v313;
  v317[5] = v314;
  v317[6] = v315;
  *(_OWORD *)(v317 + 7) = v372;
  *((unsigned char *)v317 + 72) = v316;
  return result;
}

uint64_t sub_261478AD0(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t v6 = sub_2614D50C8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = sub_2614D50A8();
  os_log_type_t v12 = sub_2614D5968();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v20 = a3;
    uint64_t v13 = a2;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v21 = a1;
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v19 = v14 + 4;
    sub_2613C23AC(v13);
    uint64_t v16 = sub_2614D5418();
    uint64_t v21 = sub_2613D875C(v16, v17, &v22);
    sub_2614D5B58();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2613B8000, v11, v12, v20, v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E38060](v15, -1, -1);
    MEMORY[0x263E38060](v14, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t VAEspressoUtils.deinit()
{
  return v0;
}

uint64_t VAEspressoUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_261478CF4(int64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result || a1 > *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v3 + 16) <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(void *)(v3 + 16);
    }
    return sub_2613D913C(result, v5, 0);
  }
  return result;
}

uint64_t sub_261478D6C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_2613D875C(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_2614D5B58();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

unint64_t sub_261478DE8()
{
  unint64_t result = qword_26A9159F0;
  if (!qword_26A9159F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9159F0);
  }
  return result;
}

uint64_t destroy for VAEspressoModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for VAEspressoModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VAEspressoModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAEspressoModel()
{
  return &type metadata for VAEspressoModel;
}

unsigned char *storeEnumTagSinglePayload for BlobType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2614791ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlobType()
{
  return &type metadata for BlobType;
}

uint64_t type metadata accessor for VAEspressoUtils()
{
  return self;
}

uint64_t method lookup function for VAEspressoUtils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAEspressoUtils);
}

uint64_t sub_261479220()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_261479258()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_261479288()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

unsigned char **sub_261479298(unsigned char **result)
{
  unint64_t v2 = *result;
  *unint64_t v2 = *(unsigned char *)(v1 + 16);
  *__n128 result = v2 + 1;
  return result;
}

uint64_t sub_2614792AC()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_2614792BC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2614792E4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_261478D6C(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_2614792EC()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_2614792FC()
{
  if (*(unsigned char *)(v0 + 16)) {
    return 4542017;
  }
  else {
    return 5591107;
  }
}

uint64_t sub_261479320()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479330()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479340()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479350()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479360()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479370()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479380()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479390()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_2614793A4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_2614793CC(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unsigned int v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  sub_2614D5B58();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_261479484()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2614794BC(uint64_t *a1, void **a2, uint64_t a3)
{
  sub_2614793CC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_2614794C4()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_261479500()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void *sub_261479538()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t sub_261479564()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479574()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479584()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479594()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_2614795A4()
{
  (*(void (**)(void))(v0 + 16))();
  return _swift_stdlib_bridgeErrorToNSError();
}

double sub_2614795DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned int v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_2613D8F00(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_26141D690();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_261409630((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_2614796E0(v8, v11);
    *unsigned int v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t sub_2614796E0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_2614D5C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_2614D6088();
        swift_bridgeObjectRetain();
        sub_2614D5478();
        uint64_t v10 = sub_2614D60B8();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_2614798B8()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if ((result & 1) == 0)
  {
    int64_t v3 = *(void *)(v1 + 16) + 1;
    return sub_2613D913C(0, v3, 1);
  }
  return result;
}

uint64_t sub_261479914(uint64_t result)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1)) {
    return sub_2613D913C(v2 > 1, result + 1, 1);
  }
  return result;
}

unint64_t sub_26147993C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = sub_2614D54A8();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }
  return sub_2614D55B8();
}

unint64_t sub_2614799EC()
{
  unint64_t result = qword_26A915A00;
  if (!qword_26A915A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915A00);
  }
  return result;
}

unint64_t sub_261479A40()
{
  unint64_t result = qword_26A915A08;
  if (!qword_26A915A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915A08);
  }
  return result;
}

uint64_t sub_261479A94()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_261479ACC@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_261479AD8()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  uint64_t v1 = MEMORY[0x263E36790](v3, MEMORY[0x263F8D310]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_261479B40()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479B50()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479B60()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_261479B70()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_261479B80()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

float AVSConfig.rejectEnrollmentThreshold.getter()
{
  return *(float *)v0;
}

void AVSConfig.rejectEnrollmentThreshold.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*AVSConfig.rejectEnrollmentThreshold.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.minEnrollmentsBeforeRejecting.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AVSConfig.minEnrollmentsBeforeRejecting.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*AVSConfig.minEnrollmentsBeforeRejecting.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.minDuration.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AVSConfig.minDuration.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*AVSConfig.minDuration.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.maxDuration.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AVSConfig.maxDuration.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*AVSConfig.maxDuration.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.resampleDuration.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AVSConfig.streamingMinimumSilenceFrames.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t AVSConfig.streamingMinimumSpeechFrames.getter()
{
  return *(void *)(v0 + 48);
}

float AVSConfig.streamingSpeechThreshold.getter()
{
  return *(float *)(v0 + 56);
}

uint64_t AVSConfig.streamingMinDuration.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t AVSConfig.streamingMaxDuration.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t AVSConfig.enrollMinimumSilenceFrames.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t AVSConfig.enrollMinimumSpeechFrames.getter()
{
  return *(void *)(v0 + 88);
}

float AVSConfig.enrollSpeechThreshold.getter()
{
  return *(float *)(v0 + 96);
}

uint64_t AVSConfig.enrollMinDuration.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t AVSConfig.recency.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t AVSConfig.maxSamplesPerEnrollment.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t (*AVSConfig.maxSamplesPerEnrollment.modify())()
{
  return nullsub_1;
}

void __swiftcall AVSConfig.init()(VoiceActions::AVSConfig *__return_ptr retstr)
{
  retstr->rejectEnrollmentThreshold = -25.0;
  *(_OWORD *)&retstr->minEnrollmentsBeforeRejecting = xmmword_2614DD9B0;
  *(_OWORD *)&retstr->maxDuration = xmmword_2614DD9C0;
  *(_OWORD *)&retstr->streamingMinimumSilenceFrames = xmmword_2614DD9D0;
  retstr->streamingSpeechThreshold = 0.44;
  *(_OWORD *)&retstr->streamingMinDuration = xmmword_2614DD9E0;
  *(_OWORD *)&retstr->enrollMinimumSilenceFrames = xmmword_2614DD9D0;
  retstr->enrollSpeechThreshold = 0.44;
  *(_OWORD *)&retstr->enrollMinDuration = xmmword_2614DD9F0;
  retstr->maxSamplesPerEnrollment = 160000;
}

void __swiftcall AVSConfig.getAVSEndpointerConfig()(VoiceActions::AVSEndpointerConfig *__return_ptr retstr)
{
  sub_26140CE18(*(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 104), *(void *)(v1 + 112), (uint64_t)retstr, *(float *)(v1 + 96));
}

Swift::Void __swiftcall AVSConfig.setDetectionParams(rejectEnrollmentThreshold:minDuration:maxDuration:)(Swift::Float rejectEnrollmentThreshold, Swift::Int minDuration, Swift::Int maxDuration)
{
  *(Swift::Float *)uint64_t v3 = rejectEnrollmentThreshold;
  *(void *)(v3 + 16) = minDuration;
  *(void *)(v3 + 24) = maxDuration;
}

Swift::Void __swiftcall AVSConfig.setEnrollmentParams(maxSamplesPerEnrollment:)(Swift::Int maxSamplesPerEnrollment)
{
  *(void *)(v1 + 120) = maxSamplesPerEnrollment;
}

__n128 initializeWithCopy for AVSConfig(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for AVSConfig(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AVSConfig(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AVSConfig()
{
  return &type metadata for AVSConfig;
}

void *sub_261479E7C()
{
  return &unk_2614DDA50;
}

uint64_t static VAFlexibleKeywordSpotter.defaultPreSilenceCheckEnabled.getter()
{
  return 0;
}

void *sub_261479E90()
{
  return &unk_2614DDA51;
}

uint64_t static VAFlexibleKeywordSpotter.defaultPostSilenceCheckEnabled.getter()
{
  return 0;
}

void *sub_261479EA4()
{
  return &unk_2614DDA52;
}

uint64_t static VAFlexibleKeywordSpotter.defaultDuringSpeechCheckEnabled.getter()
{
  return 0;
}

id VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  id v14 = sub_26147BA70(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v14;
}

id VAFlexibleKeywordSpotter.init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v6 = sub_26147BA70(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_261479FA4()
{
  (*(void (**)(long long *__return_ptr))((*MEMORY[0x263F8EED0] & *v0) + 0x160))(&v5);
  if (v6)
  {
    sub_2613CC760(&v5, (uint64_t)v7);
    uint64_t v1 = v8;
    uint64_t v2 = v9;
    sub_2613DBF24(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
    return sub_2613DD718((uint64_t)v7);
  }
  else
  {
    sub_2613CC6A0((uint64_t)&v5, &qword_26A9152F8);
    sub_2613DC2B8();
    swift_allocError();
    *long long v4 = 0xD00000000000001ALL;
    v4[1] = 0x80000002614E5E20;
    return swift_willThrow();
  }
}

uint64_t sub_26147A0D4(uint64_t *a1)
{
  uint64_t v2 = sub_2613C23AC(&qword_26A914BD8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v70 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v4 = (void *)sub_2614D50C8();
  uint64_t v5 = *(v4 - 1);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  int v80 = *((unsigned __int8 *)a1 + 12);
  int v76 = *((unsigned __int8 *)a1 + 13);
  uint64_t v10 = a1[2];
  uint64_t v111 = a1[3];
  int v89 = *((unsigned __int8 *)a1 + 32);
  uint64_t v88 = a1[5];
  int v87 = *((unsigned __int8 *)a1 + 48);
  int v75 = *((unsigned __int8 *)a1 + 49);
  int v11 = *((_DWORD *)a1 + 13);
  int v74 = *((unsigned __int8 *)a1 + 56);
  uint64_t v12 = a1[9];
  uint64_t v86 = a1[8];
  int v83 = *((unsigned __int8 *)a1 + 80);
  int v82 = *((unsigned __int8 *)a1 + 81);
  int v81 = *((unsigned __int8 *)a1 + 82);
  int v84 = *((unsigned __int8 *)a1 + 83);
  int v79 = *((unsigned __int8 *)a1 + 84);
  int v78 = *((unsigned __int8 *)a1 + 85);
  uint64_t v13 = *((unsigned __int8 *)a1 + 86);
  uint64_t v14 = sub_26146718C();
  (*(void (**)(char *, uint64_t, void *))(v5 + 16))(v7, v14, v4);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = sub_2614D50A8();
  os_log_type_t v16 = sub_2614D5988();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v72 = v10;
  if (v17)
  {
    id v69 = v4;
    uint64_t v18 = swift_slowAlloc();
    unsigned int v71 = v13;
    uint64_t v85 = v12;
    uint64_t v19 = v8;
    uint64_t v20 = (uint8_t *)v18;
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    v90[0] = v21;
    uint64_t v68 = v20 + 4;
    *(void *)&long long v93 = v19;
    DWORD2(v93) = v9;
    BYTE12(v93) = v80;
    BYTE13(v93) = v76;
    uint64_t v94 = v72;
    uint64_t v95 = v111;
    char v96 = v89;
    uint64_t v97 = v88;
    char v98 = v87;
    char v99 = v75;
    int v100 = v11;
    char v101 = v74;
    uint64_t v102 = v86;
    uint64_t v103 = v85;
    char v104 = v83;
    char v105 = v82;
    char v106 = v81;
    char v107 = v84;
    char v108 = v79;
    char v109 = v78;
    char v110 = v71;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_2614D5418();
    *(void *)&long long v93 = sub_2613D875C(v22, v23, v90);
    sub_2614D5B58();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v10 = v72;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2613B8000, v15, v16, "start Flexibile spotter: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E38060](v21, -1, -1);
    uint64_t v24 = v20;
    uint64_t v8 = v19;
    uint64_t v12 = v85;
    uint64_t v13 = v71;
    MEMORY[0x263E38060](v24, -1, -1);

    (*(void (**)(char *, id))(v5 + 8))(v7, v69);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, void *))(v5 + 8))(v7, v4);
  }
  *(void *)&long long v93 = v8;
  DWORD2(v93) = v9;
  int v25 = v80;
  BYTE12(v93) = v80;
  char v26 = v76;
  BYTE13(v93) = v76;
  uint64_t v94 = v10;
  uint64_t v95 = v111;
  char v96 = v89;
  uint64_t v97 = v88;
  char v98 = v87;
  char v27 = v75;
  char v99 = v75;
  int v100 = v11;
  int v28 = v74;
  char v101 = v74;
  uint64_t v102 = v86;
  uint64_t v103 = v12;
  char v104 = v83;
  char v105 = v82;
  char v106 = v81;
  char v107 = v84;
  char v108 = v79;
  int v29 = v78;
  char v109 = v78;
  char v110 = v13;
  if ((VARuntimeParameters.allKeywordsAreValid.getter() & 1) == 0)
  {
    sub_2613DC2B8();
    uint64_t v57 = swift_allocError();
    unint64_t v59 = 0xD00000000000006DLL;
    uint64_t v60 = "Keywords should be lower case and should not contain spaces to ensure model compatibility and API consistency";
LABEL_16:
    *uint64_t v58 = v59;
    v58[1] = (unint64_t)(v60 - 32) | 0x8000000000000000;
    uint64_t v77 = v57;
    swift_willThrow();
    return v13;
  }
  unsigned int v71 = v13;
  if (v28)
  {
    uint64_t v13 = *(void *)((char *)v73 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel);
    if (v13)
    {
      type metadata accessor for VAFeatureExtractingEncoder();
      uint64_t v30 = swift_dynamicCastClass();
      if (v30)
      {
        if (!*(void *)(v30 + 64))
        {
          sub_2613DC2B8();
          uint64_t v57 = swift_allocError();
          unint64_t v59 = 0xD00000000000003BLL;
          uint64_t v60 = "Inference is gated by VAD, but VAD model is not initialized";
          goto LABEL_16;
        }
      }
    }
  }
  uint64_t v31 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v73) + 0x78))();
  if (!v31)
  {
    sub_2613DC2B8();
    uint64_t v57 = swift_allocError();
    unint64_t v59 = 0xD000000000000011;
    uint64_t v60 = "Nil configuration";
    goto LABEL_16;
  }
  uint64_t v32 = (void *)v31;
  type metadata accessor for VARequestContext(0);
  *(void *)&long long v93 = v8;
  DWORD2(v93) = v9;
  int v80 = v25;
  BYTE12(v93) = v25;
  BYTE13(v93) = v26;
  uint64_t v33 = v72;
  uint64_t v94 = v72;
  uint64_t v95 = v111;
  char v96 = v89;
  uint64_t v97 = v88;
  char v98 = v87;
  char v99 = v27;
  int v100 = v11;
  char v101 = v28;
  uint64_t v102 = v86;
  uint64_t v103 = v12;
  char v104 = v83;
  char v105 = v82;
  char v106 = v81;
  char v107 = v84;
  char v108 = v79;
  int v78 = v29;
  char v109 = v29;
  char v34 = v71;
  char v110 = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = v32;
  uint64_t v85 = v12;
  id v36 = v35;
  uint64_t v37 = sub_2613FDF20(v35, (uint64_t *)&v93);
  uint64_t v38 = v73;
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v73) + 0x120))(v37);
  uint64_t v13 = (uint64_t)v38 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider;
  swift_beginAccess();
  sub_2613C2540(v13, (uint64_t)&v93, &qword_26A915A18);
  if (!v95)
  {
    sub_2613CC6A0((uint64_t)&v93, &qword_26A915A18);
    sub_2613DC2B8();
    uint64_t v62 = swift_allocError();
    void *v63 = 0xD000000000000015;
    v63[1] = 0x80000002614E5E40;
    uint64_t v77 = v62;
    swift_willThrow();

    return v13;
  }
  id v69 = v36;
  sub_2613CC760(&v93, (uint64_t)v90);
  char v39 = v28;
  uint64_t v40 = v8;
  uint64_t v41 = v91;
  uint64_t v42 = v92;
  sub_2613DBF24(v90, v91);
  *(void *)&long long v93 = v40;
  DWORD2(v93) = v9;
  BYTE12(v93) = v80;
  BYTE13(v93) = v26;
  uint64_t v94 = v33;
  uint64_t v95 = v111;
  char v96 = v89;
  uint64_t v97 = v88;
  char v98 = v87;
  char v99 = v27;
  int v100 = v11;
  char v101 = v39;
  uint64_t v102 = v86;
  uint64_t v103 = v85;
  char v104 = v83;
  char v105 = v82;
  char v106 = v81;
  char v107 = v84;
  char v108 = v79;
  char v109 = v78;
  char v110 = v34;
  uint64_t v43 = v73;
  uint64_t v44 = (*(uint64_t (**)(void *, _UNKNOWN **, long long *, uint64_t, uint64_t))(v42 + 8))(v73, &protocol witness table for VAKeywordSpotterBase, &v93, v41, v42);
  os_log_type_t v45 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v43) + 0x150))(v44);
  uint64_t v13 = (uint64_t)v43 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet;
  swift_beginAccess();
  *(void *)uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v46 = swift_bridgeObjectRelease();
  uint64_t v47 = (*(uint64_t (**)(uint64_t))((*v45 & *v43) + 0x118))(v46);
  if (!v47)
  {
    sub_2613DC2B8();
    uint64_t v64 = swift_allocError();
    *uint64_t v65 = 0xD00000000000001DLL;
    v65[1] = 0x80000002614E0E40;
    uint64_t v77 = v64;
    swift_willThrow();
LABEL_21:

    sub_2613DD718((uint64_t)v90);
    return v13;
  }
  uint64_t v48 = v47;
  uint64_t v49 = sub_2614D5788();
  uint64_t v50 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v70, 1, 1, v49);
  uint64_t v51 = swift_allocObject();
  unsigned __int8 v52 = v73;
  swift_unknownObjectWeakInit();
  unint64_t v53 = (void *)swift_allocObject();
  v53[2] = 0;
  v53[3] = 0;
  v53[4] = v51;
  v53[5] = v48;
  swift_retain();
  uint64_t v54 = sub_2613E3FD0(v50, (uint64_t)&unk_26A915A30, (uint64_t)v53);
  uint64_t v13 = MEMORY[0x263F8EED0];
  uint64_t v55 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v52) + 0x138))(v54);
  uint64_t v56 = (*(uint64_t (**)(uint64_t))((*(void *)v13 & *v52) + 0x130))(v55);
  if (!v56)
  {
    sub_2613DC2B8();
    uint64_t v66 = swift_allocError();
    *long long v67 = 0xD00000000000001DLL;
    v67[1] = 0x80000002614E0E00;
    uint64_t v77 = v66;
    swift_willThrow();
    swift_release();
    goto LABEL_21;
  }
  uint64_t v13 = v56;

  swift_release();
  sub_2613DD718((uint64_t)v90);
  return v13;
}

uint64_t sub_26147AD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a1;
  v4[7] = a4;
  uint64_t v5 = sub_2614D50C8();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_26147AE54, 0, 0);
}

uint64_t sub_26147AE54()
{
  uint64_t v1 = v0[7] + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x263E38150](v1);
  v0[12] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[13] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_26147B02C;
    return sub_26147BFF8();
  }
  else
  {
    uint64_t v6 = v0[9];
    uint64_t v5 = v0[10];
    uint64_t v7 = v0[8];
    uint64_t v8 = sub_26146718C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    int v9 = sub_2614D50A8();
    os_log_type_t v10 = sub_2614D5958();
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v11 = 0;
      _os_log_impl(&dword_2613B8000, v9, v10, "startProcessingAudio() is done", v11, 2u);
      MEMORY[0x263E38060](v11, -1, -1);
    }
    uint64_t v12 = v0[10];
    uint64_t v13 = v0[8];
    uint64_t v14 = v0[9];
    uint64_t v15 = (unsigned char *)v0[6];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    *uint64_t v15 = 1;
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_26147B02C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_26147B284;
  }
  else
  {

    uint64_t v3 = sub_26147B148;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_26147B148()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = sub_26146718C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_2614D50A8();
  os_log_type_t v6 = sub_2614D5958();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2613B8000, v5, v6, "startProcessingAudio() is done", v7, 2u);
    MEMORY[0x263E38060](v7, -1, -1);
  }
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[9];
  int v11 = (unsigned char *)v0[6];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  *int v11 = 1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_26147B284()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);

  uint64_t v5 = sub_26146718C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  id v6 = v1;
  id v7 = v1;
  uint64_t v8 = sub_2614D50A8();
  os_log_type_t v9 = sub_2614D5978();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void **)(v0 + 112);
    int v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)int v11 = 138412290;
    id v13 = v10;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v14;
    sub_2614D5B58();
    *uint64_t v12 = v14;

    _os_log_impl(&dword_2613B8000, v8, v9, "Error processing audio: %@", v11, 0xCu);
    sub_2613C23AC(&qword_26A914C10);
    swift_arrayDestroy();
    MEMORY[0x263E38060](v12, -1, -1);
    MEMORY[0x263E38060](v11, -1, -1);
  }
  else
  {
    uint64_t v15 = *(void **)(v0 + 112);
  }
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_26147B494()
{
  swift_release();
  swift_release();
  sub_2613CC6A0(v0 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider, &qword_26A915A18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id VAFlexibleKeywordSpotter.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2614D50C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  id v7 = sub_2614D50A8();
  os_log_type_t v8 = sub_2614D5968();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v9 = 0;
    _os_log_impl(&dword_2613B8000, v7, v8, "deInit FlexibleSpotter", v9, 2u);
    MEMORY[0x263E38060](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = (objc_class *)type metadata accessor for VAFlexibleKeywordSpotter();
  v12.receiver = v1;
  v12.super_class = v10;
  return objc_msgSendSuper2(&v12, sel_dealloc);
}

void *sub_26147B730(void *a1)
{
  uint64_t v3 = (void *)((char *)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
  swift_beginAccess();
  *uint64_t v3 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  *(void *)((char *)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_verifierModel) = 0;
  swift_release();
  *(void *)((char *)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel) = 0;
  swift_release();
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = (uint64_t)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider;
  swift_beginAccess();
  sub_26147BD90((uint64_t)v6, v4);
  swift_endAccess();
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x150))(0);
  return sub_2614AA5AC(a1);
}

void sub_26147B858(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
  swift_beginAccess();
  *uint64_t v3 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  sub_2614AB5D0(a1);
}

void sub_26147B8C4()
{
}

uint64_t sub_26147B8F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      os_log_type_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_2613C23AC(&qword_26A915200);
      os_log_type_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_2614D5DE8();
  __break(1u);
  return result;
}

id sub_26147BA70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_verifierModel;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_verifierModel] = 0;
  uint64_t v11 = OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel] = 0;
  uint64_t v12 = (uint64_t)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider];
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(void *)(v12 + 32) = 0;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_previousKeywordTime] = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelays] = MEMORY[0x263F8EE78];
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelayMax] = 0;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelayMin] = 0;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelayAvg] = 0;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet] = v13;
  *(void *)&v6[v10] = a2;
  uint64_t v14 = v6;
  swift_retain();
  swift_release();
  *(void *)&v6[v11] = a3;
  swift_retain();
  swift_release();
  sub_2613E3434(a5, (uint64_t)v23);
  swift_beginAccess();
  sub_26147BD90((uint64_t)v23, v12);
  swift_endAccess();

  sub_2613C2540(a6, (uint64_t)&v21, &qword_26A9152F8);
  if (v22)
  {
    sub_2613CC760(&v21, (uint64_t)v23);
  }
  else
  {
    uint64_t v15 = type metadata accessor for VARuntimeParametersFactoryDummy();
    uint64_t v16 = sub_26141BF64();
    v23[3] = v15;
    v23[4] = &protocol witness table for VARuntimeParametersFactoryDummy;
    v23[0] = v16;
    sub_2613CC6A0((uint64_t)&v21, &qword_26A9152F8);
  }
  id v17 = sub_2614A6D00(a1, a4, (uint64_t)v23);
  sub_2613CC6A0(a6, &qword_26A9152F8);
  sub_2613DD718(a5);
  return v17;
}

uint64_t sub_26147BC4C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_26147BC84()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_26147BCCC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_2613E3EDC;
  return sub_26147AD84(a1, v5, v6, v4);
}

uint64_t type metadata accessor for VAFlexibleKeywordSpotter()
{
  return self;
}

uint64_t sub_26147BD90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A915A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for VAFlexibleKeywordSpotter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAFlexibleKeywordSpotter);
}

uint64_t dispatch thunk of VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)()
{
  return (*(uint64_t (**)(void))(v0 + 840))();
}

uint64_t sub_26147BE38(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_2614D5D98();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = -v5;
    if (!__OFSUB__(0, v5)) {
      goto LABEL_4;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_25;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = -v5;
  if (__OFSUB__(0, v5)) {
    goto LABEL_27;
  }
LABEL_4:
  uint64_t v7 = -v3;
  if (v6 > 0 || v6 <= v7)
  {
    uint64_t v8 = v5 - v3;
    if (__OFADD__(v5, v7))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v5 < v8)
    {
LABEL_34:
      __break(1u);
      return result;
    }
    if (!v4)
    {
LABEL_8:
      uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 < 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v8 = 0;
    if (!v4) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_2614D5D98();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  if (v9 < v8)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v8 < 0)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_2614D5D98();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v5) {
    goto LABEL_30;
  }
  if (v5 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_2614D5DA8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v11;
}

uint64_t sub_26147BFF8()
{
  v1[34] = v0;
  uint64_t v2 = sub_2614D50C8();
  v1[35] = v2;
  v1[36] = *(void *)(v2 - 8);
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_26147C0C8, 0, 0);
}

uint64_t sub_26147C0C8()
{
  void (*v27)(uint64_t *__return_ptr, uint64_t);
  unint64_t *v28;
  unint64_t v29;
  const char *v30;
  unint64_t *v31;
  unint64_t v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  int *v38;
  void *v39;
  void (*v41)(uint64_t *__return_ptr, uint64_t);
  uint64_t (*v42)(void);
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  long long v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  char v64;
  char v65;
  long long v66;
  char v67;
  uint64_t v68;
  char v69;
  char v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  void *v81;
  uint64_t v82;

  int v81 = v0;
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[36];
  uint64_t v4 = sub_26146718C();
  v0[39] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[40] = v5;
  v0[41] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = sub_2614D50A8();
  os_log_type_t v7 = sub_2614D5968();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_2613B8000, v6, v7, "Entering StartProcessingAudioToAudio()", v8, 2u);
    MEMORY[0x263E38060](v8, -1, -1);
  }
  uint64_t v9 = v0[38];
  uint64_t v10 = v0[35];
  uint64_t v11 = v0[36];
  uint64_t v12 = (void *)v0[34];

  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  v0[42] = v13;
  v0[43] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v14 = v13(v9, v10);
  uint64_t v15 = (void *)MEMORY[0x263F8EED0];
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v12) + 0x148))(v14);
  uint64_t v17 = swift_release();
  if (!v16)
  {
    sub_2613DC2B8();
    swift_allocError();
    int v29 = 0xD000000000000016;
    uint64_t v30 = "Invalid strategy layer";
LABEL_11:
    *int v28 = v29;
    v28[1] = (unint64_t)(v30 - 32) | 0x8000000000000000;
    swift_willThrow();
    goto LABEL_17;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))((*v15 & *(void *)v0[34]) + 0x118))(v17);
  v0[44] = v18;
  if (!v18)
  {
    sub_2613DC2B8();
    swift_allocError();
    int v29 = 0xD000000000000014;
    uint64_t v30 = "Invalid request info";
    goto LABEL_11;
  }
  uint64_t v19 = (void *)v18;
  uint64_t v20 = (void *)v0[34];
  uint64_t v21 = *(void *)((char *)v20 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel);
  v0[45] = v21;
  if (v21)
  {
    uint64_t v22 = *(void *)((char *)v20 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_verifierModel);
    v0[46] = v22;
    if (v22)
    {
      unint64_t v23 = *(uint64_t (**)(uint64_t))((*v15 & *v20) + 0x78);
      swift_retain();
      uint64_t v24 = swift_retain();
      uint64_t v25 = v23(v24);
      v0[47] = v25;
      if (v25)
      {
        uint64_t v26 = *v19 + 280;
        char v27 = *(void (**)(uint64_t *__return_ptr, uint64_t))v26;
        v0[48] = *(void *)v26;
        v0[49] = v26 & 0xFFFFFFFFFFFFLL | 0xEDEA000000000000;
        uint64_t v41 = v27;
        ((void (*)(uint64_t *__return_ptr))v27)(&v43);
        uint64_t v62 = v43;
        uint64_t v63 = v44;
        uint64_t v64 = v45;
        uint64_t v65 = v46;
        uint64_t v66 = v47;
        long long v67 = v48;
        uint64_t v68 = v49;
        id v69 = v50;
        uint64_t v70 = v51;
        unsigned int v71 = v52;
        uint64_t v72 = v53;
        uint64_t v73 = v54;
        int v74 = v55;
        int v75 = v56;
        int v76 = v57;
        uint64_t v77 = v58;
        int v78 = v59;
        int v79 = v60;
        int v80 = v61;
        (*(void (**)(uint64_t *))(*(void *)v21 + 96))(&v62);
        swift_bridgeObjectRelease();
        uint64_t v35 = swift_bridgeObjectRelease();
        v41(&v43, v35);
        uint64_t v62 = v43;
        uint64_t v63 = v44;
        uint64_t v64 = v45;
        uint64_t v65 = v46;
        uint64_t v66 = v47;
        long long v67 = v48;
        uint64_t v68 = v49;
        id v69 = v50;
        uint64_t v70 = v51;
        unsigned int v71 = v52;
        uint64_t v72 = v53;
        uint64_t v73 = v54;
        int v74 = v55;
        int v75 = v56;
        int v76 = v57;
        uint64_t v77 = v58;
        int v78 = v59;
        int v79 = v60;
        int v80 = v61;
        (*(void (**)(uint64_t *))(*(void *)v22 + 88))(&v62);
        v0[50] = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v37 = *v19 + 336;
        uint64_t v38 = *(int **)v37;
        v0[51] = *(void *)v37;
        v0[52] = v37 & 0xFFFFFFFFFFFFLL | 0x454C000000000000;
        uint64_t v42 = (uint64_t (*)(void))((char *)v38 + *v38);
        char v39 = (void *)swift_task_alloc();
        v0[53] = v39;
        *char v39 = v0;
        v39[1] = sub_26147C7E4;
        id v36 = v42;
        return v36();
      }
      sub_2613DC2B8();
      swift_allocError();
      *char v34 = 0x666E6F63206C694ELL;
      v34[1] = 0xEA00000000006769;
      swift_willThrow();
      swift_release();
      swift_release();
      goto LABEL_15;
    }
    sub_2613DC2B8();
    swift_allocError();
    uint64_t v32 = 0xD000000000000012;
    uint64_t v33 = "Nil verifier model";
  }
  else
  {
    sub_2613DC2B8();
    swift_allocError();
    uint64_t v32 = 0xD000000000000011;
    uint64_t v33 = "Nil encoder model";
  }
  *uint64_t v31 = v32;
  v31[1] = (unint64_t)(v33 - 32) | 0x8000000000000000;
  swift_willThrow();
LABEL_15:
  swift_release();
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  id v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_26147C7E4(char a1)
{
  *(unsigned char *)(*(void *)v1 + 103) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_26147C8E4, 0, 0);
}

uint64_t sub_26147C8E4()
{
  uint64_t v1 = *(void **)(v0 + 272);
  if (*(unsigned char *)(v0 + 103) == 1)
  {
    uint64_t v2 = (void *)((char *)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
    swift_beginAccess();
    *uint64_t v2 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x200))(0);

    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v4 = **(void **)(v0 + 352) + 352;
    *(void *)(v0 + 432) = *(void *)v4;
    *(void *)(v0 + 440) = v4 & 0xFFFFFFFFFFFFLL | 0x457000000000000;
    *(void *)(v0 + 448) = OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet;
    swift_beginAccess();
    os_log_type_t v7 = (uint64_t (*)(void, uint64_t))(*(void *)(v0 + 432) + **(int **)(v0 + 432));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_26147CB58;
    return v7(0, 1);
  }
}

uint64_t sub_26147CB58(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 464) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_26147D8A8;
  }
  else
  {
    *(void *)(v4 + 472) = a1;
    uint64_t v5 = sub_26147CC80;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_26147CC80()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  if (*(void *)(v0 + 472)) {
    uint64_t v2 = *(void *)(v0 + 472);
  }
  else {
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  if (!*(void *)(v2 + 16))
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 312);
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v9 = *(void *)(v0 + 280);
    swift_bridgeObjectRelease();
    v6(v8, v7, v9);
    uint64_t v10 = sub_2614D50A8();
    os_log_type_t v11 = sub_2614D5988();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_2613B8000, v10, v11, "Stop(): processing was stopped, break out of StartProcessingAudioToAudio()", v12, 2u);
      MEMORY[0x263E38060](v12, -1, -1);
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 280);

    v13(v14, v15);
    uint64_t v16 = *(void *)(v0 + 464);
    uint64_t v17 = *(void **)(v0 + 272);
    uint64_t v18 = (void *)((char *)v17 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
    swift_beginAccess();
    *uint64_t v18 = v1;
    swift_bridgeObjectRelease();
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v17) + 0x200))(0);
    uint64_t v19 = *(void **)(v0 + 376);
    if (!v16)
    {

      swift_release();
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
LABEL_35:
      return v35();
    }

    swift_release();
    swift_release();
LABEL_34:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_35;
  }
  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 360) + 80))(v2);
  if (v3)
  {
    uint64_t v5 = *(void **)(v0 + 376);
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    goto LABEL_34;
  }
  uint64_t v20 = v4;
  uint64_t v21 = *(void (**)(uint64_t))(v0 + 384);
  uint64_t v22 = swift_bridgeObjectRelease();
  v21(v22);
  int v23 = *(unsigned __int8 *)(v0 + 72);
  swift_bridgeObjectRelease();
  uint64_t v24 = swift_bridgeObjectRelease();
  uint64_t v25 = (void *)MEMORY[0x263F8EED0];
  if (v23 == 1)
  {
    type metadata accessor for VAFeatureExtractingEncoderOutput();
    swift_unknownObjectRetain();
    uint64_t v26 = swift_dynamicCastClass();
    if (!v26)
    {
      uint64_t v64 = *(void **)(v0 + 376);
      swift_unknownObjectRelease();
      sub_2613DC2B8();
      swift_allocError();
      *uint64_t v65 = 0xD00000000000003BLL;
      v65[1] = 0x80000002614E6010;
      swift_willThrow();

      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_34;
    }
    uint64_t v27 = *(void *)(v26 + 32);
    if (v27)
    {
      int v28 = *(void (**)(uint64_t))(v0 + 384);
      int v29 = *(void **)(v0 + 272);
      uint64_t v30 = swift_bridgeObjectRetain();
      v28(v30);
      float v31 = *(float *)(v0 + 156);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v32 = (*(uint64_t (**)(uint64_t, float))((*v25 & *v29) + 0x208))(v27, v31);
      swift_bridgeObjectRelease();
      LODWORD(v27) = (v32 >> 8) & 1;
    }
    char v33 = (*(uint64_t (**)(void))((*v25 & **(void **)(v0 + 272)) + 0x178))();
    uint64_t v24 = swift_unknownObjectRelease();
    char v34 = (v33 | v27) ^ 1;
  }
  else
  {
    char v34 = 0;
  }
  id v36 = *(uint64_t (**)(uint64_t))((*v25 & **(void **)(v0 + 376)) + 0x80);
  uint64_t v37 = (void *)v36(v24);
  uint64_t v38 = (*(uint64_t (**)(void))((*v25 & *v37) + 0xE8))();

  char v39 = (uint64_t *)(*(void *)(v0 + 272) + *(void *)(v0 + 448));
  if (v38 != 1)
  {
    swift_beginAccess();
    uint64_t v41 = swift_unknownObjectRetain();
    MEMORY[0x263E36760](v41);
    if (*(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2614D5698();
    }
    uint64_t v42 = (unint64_t *)(*(void *)(v0 + 272) + *(void *)(v0 + 448));
    sub_2614D56E8();
    sub_2614D5678();
    swift_endAccess();
    unint64_t v43 = *v42;
    uint64_t v44 = swift_bridgeObjectRetain();
    os_log_type_t v45 = (void *)v36(v44);
    uint64_t v46 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v45) + 0xE8))();

    uint64_t v47 = sub_26147BE38(v46, v43);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    if (v53)
    {
      sub_2614D5FE8();
      swift_unknownObjectRetain_n();
      uint64_t v55 = swift_dynamicCastClass();
      if (!v55)
      {
        swift_unknownObjectRelease();
        uint64_t v55 = MEMORY[0x263F8EE78];
      }
      uint64_t v56 = *(void *)(v55 + 16);
      swift_release();
      if (__OFSUB__(v53 >> 1, v51))
      {
        __break(1u);
      }
      else if (v56 == (v53 >> 1) - v51)
      {
        uint64_t v54 = swift_dynamicCastClass();
        if (!v54)
        {
          swift_unknownObjectRelease();
          uint64_t v54 = MEMORY[0x263F8EE78];
        }
        goto LABEL_30;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v54 = sub_26147B8F4(v47, v49, v51, v53);
LABEL_30:
    uint64_t v57 = *(void *)(v0 + 448);
    uint64_t v58 = *(void *)(v0 + 272);
    swift_unknownObjectRelease();
    *(void *)(v58 + v57) = v54;
    goto LABEL_31;
  }
  sub_2613C23AC(&qword_26A915200);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_2614DA520;
  *(void *)(v40 + 32) = v20;
  uint64_t v70 = v40;
  sub_2614D5678();
  *char v39 = v70;
  swift_unknownObjectRetain();
LABEL_31:
  uint64_t v59 = *(void *)(v0 + 368);
  swift_bridgeObjectRelease();
  uint64_t v60 = *(void (**)(uint64_t, void))(*(void *)v59 + 80);
  uint64_t v61 = swift_bridgeObjectRetain();
  v60(v61, v34 & 1);
  swift_bridgeObjectRelease();
  if (!VAVerifierModelOutput.isNone.getter())
  {
    uint64_t v62 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 272)) + 0x210);
    uint64_t v63 = swift_retain();
    v62(v63);
    swift_release();
  }
  *(void *)(v0 + 480) = 0;
  long long v67 = *(int **)(v0 + 408);
  swift_unknownObjectRelease();
  swift_release();
  id v69 = (uint64_t (*)(void))((char *)v67 + *v67);
  uint64_t v68 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v68;
  *uint64_t v68 = v0;
  v68[1] = sub_26147D580;
  return v69();
}

uint64_t sub_26147D580(char a1)
{
  *(unsigned char *)(*(void *)v1 + 191) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_26147D680, 0, 0);
}

uint64_t sub_26147D680()
{
  if (*(unsigned char *)(v0 + 191))
  {
    uint64_t v1 = *(void **)(v0 + 272);
    uint64_t v2 = (void *)((char *)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
    swift_beginAccess();
    *uint64_t v2 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x200))(0);

    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void, uint64_t))(*(void *)(v0 + 432) + **(int **)(v0 + 432));
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_26147CB58;
    return v6(0, 1);
  }
}

uint64_t sub_26147D8A8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t VAA2AAudioEncoderModelV2.__allocating_init(computeUnits:)(char *a1)
{
  uint64_t v2 = swift_allocObject();
  VAA2AAudioEncoderModelV2.init(computeUnits:)(a1);
  return v2;
}

uint64_t VAA2AAudioEncoderModelV2.init(computeUnits:)(char *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *a1;
  type metadata accessor for VALog();
  uint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  sub_2614D5C38();
  sub_2614D54D8();
  LOBYTE(v16) = v8;
  sub_2614D5D48();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v18, v19, (uint64_t)v7);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D90]), sel_init);
  char v21 = v8;
  char v20 = 0;
  sub_26141C36C();
  sub_2614D55E8();
  sub_2614D55E8();
  if (v18 == v16 && v19 == v17)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v10 = 0;
  }
  else
  {
    char v11 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11)
    {
      uint64_t v10 = 0;
    }
    else
    {
      char v21 = v8;
      char v20 = 1;
      sub_2614D55E8();
      sub_2614D55E8();
      if (v18 == v16 && v19 == v17)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v12 = sub_2614D5FB8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0) {
          goto LABEL_12;
        }
      }
      uint64_t v10 = 3;
    }
  }
  objc_msgSend(v9, sel_setComputeUnits_, v10);
LABEL_12:
  type metadata accessor for quant_enc_f32_wofeats();
  id v13 = v9;
  uint64_t v14 = sub_261434710(v13);
  if (v2)
  {

    sub_26142D1B0((uint64_t)v7);
    type metadata accessor for VAA2AAudioEncoderModelV2();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v3 + 16) = v14;
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_26142D1B0((uint64_t)v7);
  }
  return v3;
}

uint64_t type metadata accessor for VAA2AAudioEncoderModelV2()
{
  return self;
}

uint64_t sub_26147DCAC(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_2613C23AC(&qword_26A915200);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2614DA510;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = sub_2614D58B8();
  *(void *)(v5 + 32) = result;
  if (v6)
  {
    *(void *)(v5 + 40) = sub_2614D58B8();
    sub_2614D5678();
    id v8 = objc_allocWithZone(MEMORY[0x263F00DB0]);
    uint64_t result = (uint64_t)sub_26141AF88(v5, 65568);
    if (!v2)
    {
      uint64_t v24 = (void *)result;
      uint64_t v23 = v3;
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      uint64_t v10 = a1 + 32;
      do
      {
        uint64_t v11 = *(void *)(*(void *)(v10 + 8 * v9) + 16);
        if (v11)
        {
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v11; ++i)
          {
            uint64_t v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_2614DA510;
            *(void *)(v13 + 32) = sub_2614D58B8();
            *(void *)(v13 + 40) = sub_2614D58B8();
            sub_2614D5678();
            uint64_t v14 = (void *)sub_2614D5858();
            sub_2614095F0();
            uint64_t v15 = (void *)sub_2614D5648();
            swift_bridgeObjectRelease();
            objc_msgSend(v24, sel_setObject_forKeyedSubscript_, v14, v15);
          }
          swift_bridgeObjectRelease();
          uint64_t v10 = a1 + 32;
        }
        ++v9;
      }
      while (v9 != v6);
      swift_bridgeObjectRelease();
      type metadata accessor for quant_enc_f32_wofeatsInput();
      id v16 = v24;
      uint64_t v17 = sub_26142AE30();
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v23 + 88))();
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 136))(v17);
      uint64_t v20 = swift_release();
      char v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v20);
      swift_release();
      uint64_t v22 = sub_26141AF54(v21);

      swift_release();
      return v22;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t VAA2AAudioEncoderModelV2.deinit()
{
  swift_release();
  return v0;
}

uint64_t VAA2AAudioEncoderModelV2.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_26147E00C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t method lookup function for VAA2AAudioEncoderModelV2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEncoderModelV2);
}

uint64_t dispatch thunk of VAA2AAudioEncoderModelV2.__allocating_init(computeUnits:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModelV2.predict(featureExtractionBuffer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

void *sub_26147E0C8()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___G2PFactoredObjc_g2p);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_26147E118(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___G2PFactoredObjc_g2p);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_26147E16C())()
{
  return j__swift_endAccess;
}

uint64_t sub_26147E1C8()
{
  uint64_t v1 = type metadata accessor for G2PFactored();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 80))();
  id v3 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x68);
  return v3(v2);
}

uint64_t sub_26147E2F0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  int v53 = a5;
  uint64_t v62 = a4;
  uint64_t v58 = a3;
  uint64_t v9 = sub_2614D4B78();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = a1;
  unint64_t v66 = a2;
  sub_2614D4B38();
  sub_2613DC3BC();
  uint64_t v13 = sub_2614D5BA8();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v65 = 32;
  unint64_t v66 = 0xE100000000000000;
  uint64_t v64 = &v65;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_2613D7D10(0x7FFFFFFFFFFFFFFFLL, 1, sub_2613DD7C4, (uint64_t)v63, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    uint64_t v20 = (void *)MEMORY[0x263F8EE78];
    if (v53) {
      goto LABEL_17;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    if (v20[2])
    {
      uint64_t v65 = (uint64_t)v20;
      sub_2613C23AC(&qword_26A914A70);
      sub_261403944((unint64_t *)&qword_26A914AA0, &qword_26A914A70);
      uint64_t v49 = sub_2614D5338();
      swift_bridgeObjectRelease();
      return v49;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v6) + 0x88);
  uint64_t v59 = (*MEMORY[0x263F8EED0] & *v6) + 136;
  uint64_t v60 = v18;
  uint64_t v57 = (char *)v6 + OBJC_IVAR___G2PFactoredObjc_logger;
  swift_bridgeObjectRetain();
  uint64_t v52 = v16;
  uint64_t v19 = (uint64_t *)(v16 + 56);
  uint64_t v20 = (void *)MEMORY[0x263F8EE78];
  *(void *)&long long v21 = 136315138;
  long long v55 = v21;
  uint64_t v54 = MEMORY[0x263F8EE58] + 8;
  uint64_t v61 = v6;
  do
  {
    uint64_t v23 = *(v19 - 3);
    uint64_t v22 = *(v19 - 2);
    uint64_t v24 = *(v19 - 1);
    uint64_t v25 = *v19;
    swift_bridgeObjectRetain();
    uint64_t v26 = MEMORY[0x263E36570](v23, v22, v24, v25);
    uint64_t v27 = v60(v26);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v20 = sub_2613D864C(0, v20[2] + 1, 1, v20);
      }
      unint64_t v31 = v20[2];
      unint64_t v30 = v20[3];
      unint64_t v32 = v31 + 1;
      if (v31 >= v30 >> 1) {
        uint64_t v20 = sub_2613D864C((void *)(v30 > 1), v31 + 1, 1, v20);
      }
      void v20[2] = v32;
      char v33 = &v20[2 * v31];
      v33[4] = v27;
      v33[5] = v29;
      unint64_t v34 = v20[3];
      swift_bridgeObjectRetain();
      if (v32 >= v34 >> 1) {
        uint64_t v20 = sub_2613D864C((void *)(v34 > 1), v31 + 2, 1, v20);
      }
      void v20[2] = v31 + 2;
      uint64_t v35 = &v20[2 * v32];
      uint64_t v36 = v62;
      v35[4] = v58;
      v35[5] = v36;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_2614D50A8();
      os_log_type_t v38 = sub_2614D5978();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v65 = v56;
        *(_DWORD *)uint64_t v39 = v55;
        swift_bridgeObjectRetain();
        uint64_t v40 = MEMORY[0x263E36570](v23, v22, v24, v25);
        unint64_t v42 = v41;
        swift_bridgeObjectRelease();
        *(void *)(v39 + 4) = sub_2613D875C(v40, v42, &v65);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2613B8000, v37, v38, "Word did not generate any phonemes : %s", (uint8_t *)v39, 0xCu);
        uint64_t v43 = v56;
        swift_arrayDestroy();
        MEMORY[0x263E38060](v43, -1, -1);
        MEMORY[0x263E38060](v39, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    v19 += 4;
    --v17;
  }
  while (v17);
  uint64_t v16 = v52;
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_17:
  if (!v20[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v65 = v16;
  sub_2613C23AC(&qword_26A914B00);
  sub_261403944(qword_26A915A78, &qword_26A914B00);
  sub_261422FB0();
  uint64_t v44 = sub_2614D55D8();
  unint64_t v46 = v45;
  swift_bridgeObjectRelease();
  uint64_t v65 = v44;
  unint64_t v66 = v46;
  swift_bridgeObjectRetain();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  uint64_t v48 = v65;
  unint64_t v47 = v66;
  uint64_t v65 = (uint64_t)v20;
  sub_2613C23AC(&qword_26A914A70);
  sub_261403944((unint64_t *)&qword_26A914AA0, &qword_26A914A70);
  sub_2614D5338();
  swift_bridgeObjectRelease();
  uint64_t v65 = v48;
  unint64_t v66 = v47;
  swift_bridgeObjectRetain();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v65;
}

uint64_t sub_26147E9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)MEMORY[0x263F8EED0];
  uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x60))();
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))((*v5 & *v6) + 0x58))(a1, a2);

  return v8;
}

id G2P.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id G2P.init()()
{
  id v1 = v0;
  sub_2614D50B8();
  *(void *)&v1[OBJC_IVAR___G2PFactoredObjc_g2p] = 0;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for G2P();
  return objc_msgSendSuper2(&v3, sel_init);
}

id G2P.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for G2P();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for G2P()
{
  uint64_t result = qword_26A91E230;
  if (!qword_26A91E230) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_26147EDFC()
{
  return type metadata accessor for G2P();
}

uint64_t sub_26147EE04()
{
  uint64_t result = sub_2614D50C8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for G2P(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for G2P);
}

uint64_t dispatch thunk of G2P.setup()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of G2P.getPhrasePronounciation(phrase:wordSep:prefixWithPhrase:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of G2P.getPronounciation(word:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t sub_26147EFE4()
{
  uint64_t v0 = sub_26142A908((uint64_t)&unk_270D58D30);
  swift_arrayDestroy();
  return v0;
}

id sub_26147F02C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x80000002614E36F0 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 112))();
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002614E3710 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 136))();
  }
  else if (a1 == 0x75615F7475706E69 && a2 == 0xEF6E656C5F6F6964 || (sub_2614D5FB8() & 1) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 160))();
  }
  else
  {
    if ((a1 != 0xD000000000000010 || a2 != 0x80000002614E3730) && (sub_2614D5FB8() & 1) == 0) {
      return 0;
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 184))();
  }
  uint64_t v6 = (void *)v5;
  id v7 = objc_msgSend(self, sel_featureValueWithMultiArray_, v5);

  return v7;
}

uint64_t sub_26147F2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a4;
  uint64_t v19 = a3;
  uint64_t v7 = sub_2613C23AC(&qword_26A915968);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_261405618(0, (unint64_t *)&qword_26A915320);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  sub_26146A688();
  uint64_t v20 = sub_2614D5948();
  v11(v10, a2, v7);
  uint64_t v12 = sub_2614D5948();
  v11(v10, a3, v7);
  uint64_t v13 = sub_2614D5948();
  uint64_t v14 = v22;
  v11(v10, v22, v7);
  uint64_t v15 = sub_2614D5948();
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 224))(v20, v12, v13, v15);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v17(v14, v7);
  v17(v19, v7);
  v17(v21, v7);
  v17(v23, v7);
  return v16;
}

uint64_t sub_26147F510()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = MEMORY[0x263F8E9F8];
  uint64_t v3 = MEMORY[0x263F00CD8];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

uint64_t sub_26147F6C4(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81E0;
  *(void *)(inited + 32) = 0x74757074756FLL;
  *(void *)(inited + 40) = 0xE600000000000000;
  id v4 = objc_msgSend(self, sel_featureValueWithMultiArray_, a1);
  *(void *)(inited + 72) = sub_261405618(0, &qword_26A915338);
  *(void *)(inited + 48) = v4;
  sub_26142907C(inited);
  id v5 = objc_allocWithZone(MEMORY[0x263F00D40]);
  id v6 = sub_26142A760();

  *(void *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_26147F7F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2614D4C78();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_2614198FC();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  uint64_t v11 = (void *)sub_2614D5378();
  uint64_t v12 = (void *)sub_2614D5378();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_2614D4C58();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_26147FA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_2614D4C78();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_26147FB38(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_2614D4C78();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_26147FBF8, 0, 0);
}

uint64_t sub_26147FBF8()
{
  uint64_t v6 = v0[3];
  (*(void (**)(void))(v6 + 88))();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 128) + **(int **)(v6 + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614298B4;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return v5(v2, v3);
}

uint64_t sub_26147FD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  sub_2614D5A58();
  return swift_release();
}

uint64_t sub_26147FDBC(uint64_t a1, uint64_t a2)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_26147FE84;
  return MEMORY[0x270EE7960](a1, a2);
}

uint64_t sub_26147FE84(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 24) = a1;
    return MEMORY[0x270FA2498](sub_26147FFD0, 0, 0);
  }
}

uint64_t sub_26147FFD0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for quant_verifier_aa_fp16();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_261480044(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00DD0]), sel_init);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, id))(*(void *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_2614800D0(uint64_t a1, uint64_t a2)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  id v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  id v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    type metadata accessor for quant_verifier_aa_fp16Output();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v8;
    id v9 = v7;
  }
  else
  {
    id v10 = v12[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_2614801A8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_2614801CC, 0, 0);
}

uint64_t sub_2614801CC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_26148026C;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return MEMORY[0x270EE7938](v3, v2);
}

uint64_t sub_26148026C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return MEMORY[0x270FA2498](sub_2614803B8, 0, 0);
  }
}

uint64_t sub_2614803B8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for quant_verifier_aa_fp16Output();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_26148042C(void *a1, void *a2, void *a3, void *a4)
{
  type metadata accessor for quant_verifier_aa_fp16Input();
  id v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  id v10 = *(uint64_t (**)(void *))(*(void *)v4 + 136);
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  uint64_t v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_2614804EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v6 = sub_2613C23AC(&qword_26A915968);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  id v13 = (char *)&v22 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v22 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v22 - v17;
  type metadata accessor for quant_verifier_aa_fp16Input();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v18, v22, v6);
  v19(v16, v23, v6);
  v19(v13, v24, v6);
  v19(v10, v25, v6);
  sub_26147F2D8((uint64_t)v18, (uint64_t)v16, (uint64_t)v13, (uint64_t)v10);
  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v5 + 136))();
  swift_release();
  return v20;
}

void sub_2614806E8(unint64_t a1, uint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2613C23AC(&qword_26A9153C0);
    sub_2614D5D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F00D18]);
  sub_2613C23AC(&qword_26A9153C0);
  uint64_t v7 = (void *)sub_2614D5648();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  uint64_t v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  id v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  id v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = v10;
    v22[0] = (id)MEMORY[0x263F8EE78];
    if (v5)
    {
      swift_bridgeObjectRetain();
      id v16 = v11;
      uint64_t v13 = sub_2614D5D98();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v14 = v11;
    }
    sub_26142A848(v13, 0);
    sub_2614D5678();
    unint64_t v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0) {
      __break(1u);
    }
    unint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        id v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for quant_verifier_aa_fp16Output();
        *(void *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        uint64_t v21 = swift_retain();
        MEMORY[0x263E36760](v21);
        if (*(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2614D5698();
        ++v19;
        sub_2614D56E8();
        sub_2614D5678();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v15 = v22[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
}

uint64_t sub_2614809C0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2614809F8(id a1, char a2)
{
  uint64_t v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if (a2)
  {
    id v7 = a1;
    v4(a1, 1);
    sub_26142ADBC(a1);
  }
  else
  {
    type metadata accessor for quant_verifier_aa_fp16();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    id v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for quant_verifier_aa_fp16()
{
  return self;
}

uint64_t type metadata accessor for quant_verifier_aa_fp16Output()
{
  return self;
}

uint64_t type metadata accessor for quant_verifier_aa_fp16Input()
{
  return self;
}

uint64_t VAASRResult.transcript.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_transcript);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VAASRResult.usedPartialAsFinal.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_usedPartialAsFinal);
}

uint64_t VAASRResult.isFinal.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinal);
}

uint64_t sub_261480B70@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x80))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_261480BD0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0x88))(*a1);
}

uint64_t sub_261480C28()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_261480C70(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_261480CBC())()
{
  return j__swift_endAccess;
}

uint64_t VAASRResult.isIgnored.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isIgnored);
}

void *VAASRResult.audioBuffer.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_audioBuffer);
  id v2 = v1;
  return v1;
}

id sub_261480D58(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, uint64_t a7)
{
  id v15 = objc_allocWithZone(v7);
  id v16 = &v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal];
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal] = 0;
  unint64_t v17 = &v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_transcript];
  *unint64_t v17 = a1;
  v17[1] = a2;
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinal] = a3;
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_usedPartialAsFinal] = a5;
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isIgnored] = a6;
  *(void *)&v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_audioBuffer] = a7;
  swift_beginAccess();
  *id v16 = a4;
  v19.receiver = v15;
  v19.super_class = v7;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t type metadata accessor for VAASRResult()
{
  return self;
}

unint64_t sub_261480ECC()
{
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))())
  {
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    unint64_t v1 = 0xD000000000000011;
  }
  else if (*((unsigned char *)v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinal) == 1)
  {
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    unint64_t v1 = 0x205D6C616E69465BLL;
  }
  else
  {
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    unint64_t v1 = 0x6C6169747261505BLL;
  }
  unint64_t v4 = v1;
  swift_bridgeObjectRetain();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  id v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_audioBuffer);
  if (v2) {
    objc_msgSend(v2, sel_frameLength);
  }
  sub_2613C23AC(&qword_26A915AC8);
  sub_2614D5418();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  return v4;
}

id VAASRResult.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VAASRResult.init()()
{
}

id VAASRResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAASRResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for VAASRResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAASRResult);
}

uint64_t dispatch thunk of VAASRResult.isFinalTerminal.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VAASRResult.isFinalTerminal.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VAASRResult.isFinalTerminal.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t sub_261481280@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static VAVerifierModelOutput.none.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for VAKeywordResult();
  uint64_t result = VAKeywordResult.__allocating_init(detections:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  return result;
}

BOOL VAVerifierModelOutput.isNone.getter()
{
  uint64_t v1 = *(void *)((*(uint64_t (**)(void))(**(void **)v0 + 88))() + 16);
  swift_bridgeObjectRelease();
  return v1 == 0;
}

void sub_261481318()
{
}

uint64_t VAVerifierModel.deinit()
{
  return v0;
}

uint64_t VAVerifierModel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for VAVerifierModelError()
{
  return &type metadata for VAVerifierModelError;
}

ValueMetadata *type metadata accessor for VAVerifierModelOutput()
{
  return &type metadata for VAVerifierModelOutput;
}

uint64_t type metadata accessor for VAVerifierModel()
{
  return self;
}

uint64_t method lookup function for VAVerifierModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAVerifierModel);
}

uint64_t (*sub_2614813F0())()
{
  return j__swift_endAccess;
}

uint64_t sub_261481444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  return sub_261432FC0(v3, a1);
}

uint64_t sub_261481498(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_2614814F4(a1, v3);
  return swift_endAccess();
}

uint64_t sub_2614814F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(qword_26A915438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_26148155C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614815B8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_261481604(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_261481658())()
{
  return j_j__swift_endAccess;
}

void *VAA2AAudioEnroller.__allocating_init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_allocObject();
  uint64_t v9 = (char *)v8 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((void *)v9 + 4) = 0;
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)((char *)v8 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr) = MEMORY[0x263F8EE78];
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = v10;
  sub_2614D4CD8();
  uint64_t v11 = (uint64_t)v8 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_2614814F4(a4, v11);
  swift_endAccess();
  return v8;
}

void *VAA2AAudioEnroller.init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_2614D4CE8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (char *)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  *(_OWORD *)uint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((void *)v13 + 4) = 0;
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr) = MEMORY[0x263F8EE78];
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v14;
  sub_2614D4CD8();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id, v12, v9);
  uint64_t v15 = (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_2614814F4(a4, v15);
  swift_endAccess();
  return v4;
}

uint64_t sub_2614818E4(objc_class *a1)
{
  objc_super v2 = v1;
  uint64_t v4 = type metadata accessor for VASingleEnrollmentData();
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (uint64_t (*)(long long *, uint64_t))((uint64_t (*)(long long *))(*v1)[24])(&v31);
  v8.super.super.int64_t isa = a1;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v8, v9);
  if (v10) {
    return v7(&v31, 1);
  }
  uint64_t v12 = v7(&v31, 0);
  uint64_t v13 = ((uint64_t (*)(uint64_t))(*v2)[22])(v12);
  uint64_t v14 = (uint64_t (*)(long long *, void))((uint64_t (*)(long long *))(*v2)[18])(&v31);
  sub_2613D64FC(v13);
  uint64_t v15 = v14(&v31, 0);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*v2[2] + 168))(v15);
  uint64_t v17 = (uint64_t (*)(void))(*v2)[16];
  uint64_t v18 = *(void *)(v17() + 16);
  uint64_t v19 = swift_bridgeObjectRelease();
  if (v16 < v18)
  {
    if (v16 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = (uint64_t)v2;
      uint64_t v20 = ((uint64_t (*)(uint64_t))v17)(v19);
      if (*(void *)(v20 + 16) >= (unint64_t)v16)
      {
        uint64_t v18 = v20;
        sub_2614D5FE8();
        swift_unknownObjectRetain_n();
        uint64_t v21 = swift_dynamicCastClass();
        if (!v21)
        {
          swift_bridgeObjectRelease();
          uint64_t v21 = MEMORY[0x263F8EE78];
        }
        uint64_t v22 = *(void *)(v21 + 16);
        swift_release();
        if (v22 == v16)
        {
          uint64_t v23 = swift_dynamicCastClass();
          if (!v23)
          {
            swift_bridgeObjectRelease();
            uint64_t v23 = MEMORY[0x263F8EE78];
          }
          goto LABEL_11;
        }
LABEL_20:
        swift_bridgeObjectRelease();
        uint64_t v23 = sub_2613DAF94(v18, v18 + 32, 0, (2 * v16) | 1);
LABEL_11:
        swift_bridgeObjectRelease();
        uint64_t v19 = ((uint64_t (*)(uint64_t))(*v2)[17])(v23);
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v24 = *(void *)(((uint64_t (*)(uint64_t))v17)(v19) + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v24 == v16)
  {
    ((void (*)(long long *__return_ptr, uint64_t))(*v2)[19])(&v31, result);
    if (*((void *)&v32 + 1))
    {
      sub_2613E3434((uint64_t)&v31, (uint64_t)v28);
      sub_2614829B0((uint64_t)&v31);
      uint64_t v25 = v29;
      uint64_t v26 = v30;
      sub_2613DBF24(v28, v29);
      ((void (*)(void))(*v2)[28])();
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 8))(v6, v25, v26);
      sub_261454250((uint64_t)v6);
      sub_2613DD718((uint64_t)v28);
    }
    else
    {
      sub_2614829B0((uint64_t)&v31);
    }
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    return ((uint64_t (*)(long long *))(*v2)[20])(&v31);
  }
  return result;
}

uint64_t sub_261481CFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t (*)(void))(*v1)[16];
  uint64_t v4 = *(void *)(v3() + 16);
  uint64_t v5 = swift_bridgeObjectRelease();
  id v6 = *(uint64_t (**)(uint64_t))(*v1[2] + 168);
  uint64_t v7 = v6(v5);
  uint64_t v8 = *(void *)(v3() + 16);
  uint64_t v9 = swift_bridgeObjectRelease();
  char v10 = v8 >= v6(v9);
  return sub_2614543D4(v4, v7, v10, a1);
}

void sub_261481DE8(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v55 = a1;
  uint64_t v4 = sub_2614D4CE8();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1[2];
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*v1 + 128);
  uint64_t v10 = *v1 + 128;
  id v11 = (id)v9(v5);
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v8 + 160))();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v58 = v10;
    uint64_t v59 = v9;
    self;
    uint64_t v13 = (void *)swift_dynamicCastObjCClass();
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v49 = v4;
      uint64_t v50 = v12;
      uint64_t v51 = v3;
      uint64_t v52 = v7;
      uint64_t v53 = 0;
      uint64_t v15 = &selRef_tokenName;
      id v16 = objc_msgSend(v13, sel_shape);
      sub_2614095F0();
      uint64_t v17 = sub_2614D5658();

      if ((v17 & 0xC000000000000001) != 0) {
        goto LABEL_36;
      }
      uint64_t v18 = v59;
      if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_38;
      }
      id v11 = *(id *)(v17 + 32);
      while (1)
      {
        swift_bridgeObjectRelease();
        id v19 = [v14 v15[125]];
        uint64_t v17 = sub_2614D5658();

        if ((v17 & 0xC000000000000001) != 0)
        {
LABEL_38:
          id v20 = (id)MEMORY[0x263E36D80](1, v17);
        }
        else
        {
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
            goto LABEL_40;
          }
          id v20 = *(id *)(v17 + 40);
        }
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        unint64_t v22 = (unint64_t)objc_msgSend(v11, sel_integerValue);
        if ((v22 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }
        unint64_t v23 = v22;
        id v48 = v11;
        if (!v22) {
          break;
        }
        uint64_t v24 = 0;
        uint64_t v15 = (char **)MEMORY[0x263F8EE78];
        long long v61 = xmmword_2614DA510;
        unint64_t v56 = v22;
        uint64_t v57 = v21;
        while (v24 != v23)
        {
          uint64_t v25 = (uint64_t)objc_msgSend(v21, sel_integerValue);
          if (v25 < 0) {
            goto LABEL_34;
          }
          uint64_t v17 = v25;
          uint64_t v60 = v15;
          if (v25)
          {
            uint64_t v26 = sub_2614D56C8();
            *(void *)(v26 + 16) = v17;
            bzero((void *)(v26 + 32), 4 * v17);
          }
          else
          {
            uint64_t v26 = MEMORY[0x263F8EE78];
          }
          uint64_t v27 = (uint64_t)objc_msgSend(v21, sel_integerValue);
          if (v27 < 0) {
            goto LABEL_35;
          }
          uint64_t v17 = v27;
          if (v27)
          {
            unint64_t v28 = 0;
            uint64_t v15 = (char **)(v26 + 32);
            while (1)
            {
              sub_2613C23AC(&qword_26A915200);
              uint64_t v29 = swift_allocObject();
              *(_OWORD *)(v29 + 16) = v61;
              *(void *)(v29 + 32) = sub_2614D58B8();
              *(void *)(v29 + 40) = sub_2614D58B8();
              uint64_t v63 = v29;
              sub_2614D5678();
              uint64_t v30 = (void *)sub_2614D5648();
              swift_bridgeObjectRelease();
              id v31 = objc_msgSend(v14, sel_objectForKeyedSubscript_, v30);

              objc_msgSend(v31, sel_floatValue);
              int v33 = v32;

              if (v28 >= *(void *)(v26 + 16)) {
                break;
              }
              *((_DWORD *)v15 + v28++) = v33;
              if (v17 == v28) {
                goto LABEL_22;
              }
            }
            __break(1u);
            break;
          }
LABEL_22:
          uint64_t v15 = v60;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v15 = (char **)sub_26140C714(0, (int64_t)(v15[2] + 1), 1, v15);
          }
          uint64_t v18 = v59;
          unint64_t v35 = (unint64_t)v15[2];
          unint64_t v34 = (unint64_t)v15[3];
          uint64_t v17 = v35 + 1;
          if (v35 >= v34 >> 1) {
            uint64_t v15 = (char **)sub_26140C714((void *)(v34 > 1), v35 + 1, 1, v15);
          }
          ++v24;
          v15[2] = (char *)v17;
          v15[v35 + 4] = (char *)v26;
          unint64_t v23 = v56;
          uint64_t v21 = v57;
          if (v24 == v56) {
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        id v11 = (id)MEMORY[0x263E36D80](0, v17);
        uint64_t v18 = v59;
      }
      uint64_t v15 = (char **)MEMORY[0x263F8EE78];
LABEL_30:
      uint64_t v37 = v21;
      os_log_type_t v38 = v51;
      uint64_t v39 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, (uint64_t)v51 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id, v49);
      uint64_t v40 = (uint64_t)v15;
      uint64_t v41 = v38[3];
      uint64_t v42 = v38[4];
      uint64_t v43 = swift_bridgeObjectRetain();
      uint64_t v44 = v18(v43);
      char v62 = 1;
      uint64_t v45 = sub_2614542AC();
      uint64_t v46 = sub_2614542AC();
      sub_2614542B4(v39, v40, v41, v42, v44, v45, v46, &v62, v55);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      sub_2613DC2B8();
      swift_allocError();
      *uint64_t v36 = 0xD00000000000001ELL;
      v36[1] = 0x80000002614E35C0;
      swift_willThrow();
    }
  }
}

uint64_t VAA2AAudioEnroller.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id;
  uint64_t v2 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2614829B0(v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AAudioEnroller.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id;
  uint64_t v2 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2614829B0(v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2614824BC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t sub_261482500()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t sub_261482544()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t sub_261482588@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_261432FC0(v1 + 24, a1);
}

uint64_t sub_2614825D4(uint64_t a1)
{
  swift_beginAccess();
  sub_2614814F4(a1, v1 + 24);
  return swift_endAccess();
}

uint64_t VAA2AAudioEnrollerFactory.__allocating_init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 40) = 0u;
  *(void *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 16) = a1;
  swift_beginAccess();
  sub_2614814F4(a2, v4 + 24);
  swift_endAccess();
  return v4;
}

uint64_t VAA2AAudioEnrollerFactory.init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(void *)(v2 + 16) = a1;
  swift_beginAccess();
  sub_2614814F4(a2, v2 + 24);
  swift_endAccess();
  return v2;
}

uint64_t sub_261482728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void (*v13)(void *__return_ptr, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unsigned char v21[24];
  void v22[5];

  uint64_t v7 = sub_2614D4CE8();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  id v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v9);
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 120);
  uint64_t v14 = swift_bridgeObjectRetain();
  v13(v22, v14);
  uint64_t v15 = type metadata accessor for VAA2AAudioEnroller();
  id v16 = (void *)swift_allocObject();
  uint64_t v17 = (char *)v16 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((void *)v17 + 4) = 0;
  uint64_t v18 = MEMORY[0x263F8EE78];
  *(void *)((char *)v16 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr) = MEMORY[0x263F8EE78];
  void v16[2] = v12;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = v18;
  sub_2614D4CD8();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v8 + 32))((uint64_t)v16 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id, v11, v7);
  id v19 = (uint64_t)v16 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_2614814F4((uint64_t)v22, v19);
  uint64_t result = swift_endAccess();
  a3[3] = v15;
  a3[4] = &protocol witness table for VAA2AAudioEnroller;
  *a3 = v16;
  return result;
}

uint64_t VAA2AAudioEnrollerFactory.deinit()
{
  swift_release();
  sub_2614829B0(v0 + 24);
  return v0;
}

uint64_t VAA2AAudioEnrollerFactory.__deallocating_deinit()
{
  swift_release();
  sub_2614829B0(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t sub_26148296C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_2614829B0(uint64_t a1)
{
  uint64_t v2 = sub_2613C23AC(qword_26A915438);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for VAA2AAudioEnroller()
{
  uint64_t result = qword_26A91E2C0;
  if (!qword_26A91E2C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_261482A5C()
{
  return type metadata accessor for VAA2AAudioEnroller();
}

uint64_t sub_261482A64()
{
  uint64_t result = sub_2614D4CE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for VAA2AAudioEnroller(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEnroller);
}

uint64_t dispatch thunk of VAA2AAudioEnroller.__allocating_init(encoder:keywordIdentifier:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of VAA2AAudioEnroller.addAudio(buffer:hostTime:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of VAA2AAudioEnroller.getEnrollmentProgress()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of VAA2AAudioEnroller.getEnrollmentData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerFactory()
{
  return self;
}

uint64_t method lookup function for VAA2AAudioEnrollerFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEnrollerFactory);
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactory.__allocating_init(encoder:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactory.makeAudioEnroller(keywordIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t sub_261482C5C()
{
  unint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_261482CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_261482D14()
{
  return sub_2613E2B50();
}

uint64_t sub_261482D20(uint64_t a1)
{
  return sub_2613E2BA4(a1, &OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_keywordsTrainedFor);
}

uint64_t sub_261482D2C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261482D74(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_261482DC0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261482E08(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_261482E54()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261482E9C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_261482EE8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261482F30(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_261482F7C()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_261482FC4(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_261483010()
{
  return sub_2613E2B50();
}

uint64_t sub_26148301C(uint64_t a1)
{
  return sub_2613E2BA4(a1, &OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormScale);
}

uint64_t sub_261483028()
{
  return sub_2613E2B50();
}

uint64_t sub_261483034(uint64_t a1)
{
  return sub_2613E2BA4(a1, &OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormOffset);
}

uint64_t sub_261483040()
{
  uint64_t v1 = *(void *)((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))() + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_26148309C()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
  BOOL v2 = __OFADD__(v1, 3);
  uint64_t result = v1 + 3;
  if (v2) {
    __break(1u);
  }
  return result;
}

unint64_t sub_2614830F8(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0x706E496C65646F6DLL;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x4E564D43657375;
      break;
    case 7:
    case 8:
      unint64_t result = 0x726F4E726579616CLL;
      break;
    default:
      unint64_t result = 0x6C69466C65646F6DLL;
      break;
  }
  return result;
}

unint64_t sub_261483238()
{
  return sub_2614830F8(*v0);
}

uint64_t sub_261483240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_261484968(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_261483268(uint64_t a1)
{
  unint64_t v2 = sub_261485318();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2614832A4(uint64_t a1)
{
  unint64_t v2 = sub_261485318();
  return MEMORY[0x270FA00B8](a1, v2);
}

id sub_2614832E0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_261483344(a1, a2, a3, a4);
}

id sub_261483344(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v4;
  if (a4)
  {
    unint64_t v9 = a4;
  }
  else
  {
    uint64_t v22 = a1;
    unint64_t v23 = a2;
    swift_bridgeObjectRetain();
    sub_2614D54D8();
    a3 = v22;
    unint64_t v9 = v23;
  }
  id v11 = v6;
  sub_261484D20(a3, v9);
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();

    type metadata accessor for VAFixedSpotterModelConfiguration();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v12 = sub_261484D20(a1, a2);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)sub_2614851CC();
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename];
    *uint64_t v17 = v12;
    v17[1] = v14;
    uint64_t v18 = (void *)MEMORY[0x263F8EED0];
    *(void *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v15) + 0xC8))(v16);
    *(void *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_keywordsTrainedFor] = (*(uint64_t (**)(void))((*v18 & *v15) + 0xB0))();
    *(void *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize] = (*(uint64_t (**)(void))((*v18 & *v15) + 0xE0))();
    *(void *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength] = (*(uint64_t (**)(void))((*v18 & *v15) + 0xF8))();
    *(void *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride] = (*(uint64_t (**)(void))((*v18 & *v15) + 0x110))();
    v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN] = (*(uint64_t (**)(void))((*v18 & *v15) + 0x128))() & 1;
    *(void *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormScale] = (*(uint64_t (**)(void))((*v18 & *v15) + 0x140))();
    uint64_t v19 = (*(uint64_t (**)(void))((*v18 & *v15) + 0x158))();

    *(void *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormOffset] = v19;
    v21.receiver = v11;
    v21.super_class = (Class)type metadata accessor for VAFixedSpotterModelConfiguration();
    return objc_msgSendSuper2(&v21, sel_init);
  }
}

unint64_t static VAFixedSpotterModelConfiguration.buildFromConfigFile(jsonFile:)()
{
  return sub_2614851CC();
}

uint64_t VAFixedSpotterModelConfiguration.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return VAFixedSpotterModelConfiguration.init(from:)(a1);
}

uint64_t VAFixedSpotterModelConfiguration.init(from:)(void *a1)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A915B18);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[3];
  uint64_t v26 = a1;
  sub_2613DBF24(a1, v8);
  unint64_t v9 = sub_261485318();
  uint64_t v27 = v1;
  sub_2614D60D8();
  if (v2)
  {
    uint64_t v12 = v27;
    sub_2613DD718((uint64_t)v26);

    type metadata accessor for VAFixedSpotterModelConfiguration();
    swift_deallocPartialClassInstance();
    return v9;
  }
  LOBYTE(v30) = 0;
  uint64_t v10 = sub_2614D5E38();
  if (v11) {
    uint64_t v14 = v10;
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v15 = 0xE000000000000000;
  if (v11) {
    unint64_t v15 = v11;
  }
  uint64_t v16 = v27;
  uint64_t v17 = (uint64_t *)&v27[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename];
  *uint64_t v17 = v14;
  v17[1] = v15;
  LOBYTE(v30) = 2;
  uint64_t result = sub_2614D5E68();
  if (v18)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(void *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow] = result;
  LOBYTE(v30) = 3;
  uint64_t result = sub_2614D5E68();
  if (v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(void *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize] = result;
  sub_2613C23AC(&qword_26A915B20);
  char v29 = 1;
  sub_26148536C(&qword_26A915B28);
  uint64_t result = sub_2614D5E78();
  if (!v30)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *(void *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_keywordsTrainedFor] = v30;
  LOBYTE(v30) = 4;
  uint64_t result = sub_2614D5E68();
  if (v20)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(void *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength] = result;
  LOBYTE(v30) = 5;
  uint64_t result = sub_2614D5E68();
  if (v21)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(void *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride] = result;
  LOBYTE(v30) = 6;
  uint64_t result = sub_2614D5E48();
  if (result == 2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN] = result & 1;
  sub_2613C23AC(&qword_26A914AB8);
  char v29 = 7;
  sub_261454198(&qword_26A915810);
  uint64_t result = sub_2614D5E78();
  if (!v30)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)&v27[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormScale] = v30;
  char v29 = 8;
  uint64_t result = sub_2614D5E78();
  uint64_t v22 = v30;
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    unint64_t v23 = v27;
    *(void *)&v27[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormOffset] = v22;

    uint64_t v24 = (objc_class *)type metadata accessor for VAFixedSpotterModelConfiguration();
    v28.receiver = v23;
    v28.super_class = v24;
    unint64_t v9 = (unint64_t)objc_msgSendSuper2(&v28, sel_init);
    sub_2613DD718((uint64_t)v26);
    return v9;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_261483CD4(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_2613C23AC(&qword_26A915B30);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2613DBF24(a1, a1[3]);
  sub_261485318();
  uint64_t v9 = sub_2614D60F8();
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x98))(v9);
  LOBYTE(v23) = 0;
  sub_2614D5F18();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xC8))(v12);
    LOBYTE(v23) = 2;
    uint64_t v13 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xE0))(v13);
    LOBYTE(v23) = 3;
    uint64_t v14 = sub_2614D5F48();
    uint64_t v23 = (*(uint64_t (**)(uint64_t))((*v10 & *v3) + 0xB0))(v14);
    char v22 = 1;
    sub_2613C23AC(&qword_26A915B20);
    sub_26148536C(&qword_26A915B38);
    sub_2614D5F58();
    uint64_t v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xF8))(v15);
    LOBYTE(v23) = 4;
    uint64_t v16 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x110))(v16);
    LOBYTE(v23) = 5;
    uint64_t v17 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x128))(v17);
    LOBYTE(v23) = 6;
    uint64_t v18 = sub_2614D5F28();
    uint64_t v23 = (*(uint64_t (**)(uint64_t))((*v10 & *v3) + 0x140))(v18);
    char v22 = 7;
    uint64_t v19 = sub_2613C23AC(&qword_26A914AB8);
    sub_261454198(&qword_26A9157E8);
    uint64_t v21 = v19;
    sub_2614D5F58();
    uint64_t v20 = swift_bridgeObjectRelease();
    uint64_t v23 = (*(uint64_t (**)(uint64_t))((*v10 & *v3) + 0x158))(v20);
    char v22 = 8;
    sub_2614D5F58();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

unint64_t sub_261484280(uint64_t a1, uint64_t a2)
{
  sub_2614853D4(&qword_26A915B40, a2, (void (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration);
  uint64_t v2 = sub_261484360();
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v6)
  {
    if (v2 == 0x8000000000000000)
    {
      return 0xD00000000000001CLL;
    }
    else
    {
      sub_2614D5D48();
      sub_2613FA5C8(v3, v5, 1);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_261484360()
{
  uint64_t v0 = sub_2614D5408();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_2614D4AA8();
  MEMORY[0x270FA5388](v1);
  sub_2614D4AE8();
  swift_allocObject();
  sub_2614D4AD8();
  sub_2613C23AC(&qword_26A914DE0);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2614D81F0;
  sub_2614D4A98();
  sub_2614D4A88();
  sub_2614853D4(&qword_26A914DE8, 255, MEMORY[0x263F06130]);
  sub_2613C23AC(&qword_26A914DF0);
  sub_2613FA5F4();
  sub_2614D5BF8();
  sub_2614D4AB8();
  type metadata accessor for VAFixedSpotterModelConfiguration();
  sub_2614853D4(&qword_26A915B48, v2, (void (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration);
  uint64_t v3 = sub_2614D4AC8();
  unint64_t v5 = v4;
  sub_2614D53F8();
  uint64_t v6 = sub_2614D53C8();
  if (v7)
  {
    uint64_t v8 = v6;
    sub_2613C2314(v3, v5);
    swift_release();
  }
  else
  {
    sub_2613C2314(v3, v5);
    swift_release();
    return 0;
  }
  return v8;
}

id VAFixedSpotterModelConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VAFixedSpotterModelConfiguration.init()()
{
}

id VAFixedSpotterModelConfiguration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAFixedSpotterModelConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_261484778@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 392))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_2614847B4()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x190))();
}

id static VAFixedSpotterModelConfiguration.buildForFixedA2T(modelFilepath:modelConfigJsonFilepath:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  id v8 = objc_allocWithZone((Class)type metadata accessor for VAFixedSpotterModelConfiguration());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_261483344(a1, a2, a3, a4);
}

id static VAFixedSpotterModelConfiguration.buildForFixedA2TDefault()()
{
  uint64_t v0 = (uint64_t *)sub_2614BF6FC();
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  swift_bridgeObjectRetain();
  uint64_t v3 = (uint64_t *)sub_2614BF724();
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  id v6 = objc_allocWithZone((Class)type metadata accessor for VAFixedSpotterModelConfiguration());
  swift_bridgeObjectRetain();
  return sub_261483344(v1, v2, v4, v5);
}

id static VAFixedSpotterModelConfiguration.buildForFixedA2TBreakthrough()()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for VAFixedSpotterModelConfiguration());
  return sub_261483344(0xD000000000000017, 0x80000002614E6370, 0xD000000000000023, 0x80000002614E6390);
}

uint64_t sub_261484968(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C69466C65646F6DLL && a2 == 0xED0000656D616E65;
  if (v3 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002614E6410 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002614E6430 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x706E496C65646F6DLL && a2 == 0xEE00657A69537475 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002614E1D20 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002614E1D40 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4E564D43657375 && a2 == 0xE700000000000000 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x726F4E726579616CLL && a2 == 0xEE00656C6163536DLL || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x726F4E726579616CLL && a2 == 0xEF74657366664F6DLL)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_261484D20(uint64_t a1, unint64_t a2)
{
  uint64_t v34 = sub_2614D50C8();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  int v33 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = self;
  id v6 = objc_msgSend(v5, sel_defaultManager);
  uint64_t v7 = (void *)sub_2614D5378();
  unsigned int v8 = objc_msgSend(v6, sel_fileExistsAtPath_, v7);

  if (v8)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = (void *)sub_2614D5378();
    id v10 = objc_msgSend(v9, sel_pathExtension);

    sub_2614D53A8();
    unint64_t v11 = (void *)sub_2614D5378();
    id v12 = objc_msgSend(v11, sel_stringByDeletingPathExtension);

    sub_2614D53A8();
    uint64_t v13 = sub_261419E08();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v15)
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      sub_2614D5C38();
      swift_bridgeObjectRelease();
      uint64_t v35 = 0xD00000000000002DLL;
      unint64_t v36 = 0x80000002614E64C0;
      sub_2614D54D8();
LABEL_11:
      uint64_t v28 = v35;
      unint64_t v27 = v36;
      sub_2613DC2B8();
      swift_allocError();
      *char v29 = v28;
      v29[1] = v27;
      swift_willThrow();
      return a1;
    }
    a1 = v13;
    a2 = v15;
  }
  id v16 = objc_msgSend(v5, sel_defaultManager);
  uint64_t v17 = (void *)sub_2614D5378();
  unsigned __int8 v18 = objc_msgSend(v16, sel_isReadableFileAtPath_, v17);

  if ((v18 & 1) == 0)
  {
    uint64_t v19 = sub_26146718C();
    uint64_t v21 = v32;
    uint64_t v20 = v33;
    uint64_t v22 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v33, v19, v34);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = sub_2614D50A8();
    os_log_type_t v24 = sub_2614D5978();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v35 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_2613D875C(a1, a2, &v35);
      sub_2614D5B58();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2613B8000, v23, v24, "File not readable in %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E38060](v26, -1, -1);
      MEMORY[0x263E38060](v25, -1, -1);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v33, v34);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
    }
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    uint64_t v35 = 0xD000000000000023;
    unint64_t v36 = 0x80000002614E64F0;
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return a1;
}

uint64_t type metadata accessor for VAFixedSpotterModelConfiguration()
{
  return self;
}

unint64_t sub_2614851CC()
{
  type metadata accessor for VAFixedSpotterModelConfiguration();
  uint64_t v1 = sub_2614853D4(&qword_26A915B40, v0, (void (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration);
  sub_261418A5C(v1, &v6);
  unint64_t v2 = v6;
  if (v7)
  {
    if (v6 == 0x8000000000000000)
    {
      sub_2614D5C38();
      swift_bridgeObjectRelease();
      sub_2614D54D8();
      unint64_t v2 = 0x80000002614E6490;
      sub_2613DC2B8();
      swift_allocError();
      *BOOL v3 = 0xD000000000000029;
      v3[1] = 0x80000002614E6490;
    }
    else
    {
      sub_2613DD918();
      swift_allocError();
      *uint64_t v4 = v2;
    }
    swift_willThrow();
  }
  return v2;
}

unint64_t sub_261485318()
{
  unint64_t result = qword_26A91E2D0[0];
  if (!qword_26A91E2D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91E2D0);
  }
  return result;
}

uint64_t sub_26148536C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2613C5EC8(&qword_26A915B20);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2614853D4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for VAFixedSpotterModelConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAFixedSpotterModelConfiguration);
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.maxNumberOfKeywords.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.vectorSizePerOutput.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

unsigned char *storeEnumTagSinglePayload for VAFixedSpotterModelConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2614855F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAFixedSpotterModelConfiguration.CodingKeys()
{
  return &type metadata for VAFixedSpotterModelConfiguration.CodingKeys;
}

unint64_t sub_26148562C()
{
  unint64_t result = qword_26A91E4E0[0];
  if (!qword_26A91E4E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91E4E0);
  }
  return result;
}

unint64_t sub_261485684()
{
  unint64_t result = qword_26A91E5F0;
  if (!qword_26A91E5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91E5F0);
  }
  return result;
}

unint64_t sub_2614856DC()
{
  unint64_t result = qword_26A91E5F8[0];
  if (!qword_26A91E5F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91E5F8);
  }
  return result;
}

uint64_t sub_261485730()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_processedAudioSamples;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261485778(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_processedAudioSamples);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*sub_2614857C4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261485820()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_newSamples;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261485868(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_newSamples);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*sub_2614858B4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261485910()
{
  return sub_2613E2B50();
}

uint64_t sub_26148591C(uint64_t a1)
{
  return sub_261485B14(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_embeddings, MEMORY[0x263F8EEA0]);
}

uint64_t (*sub_26148593C())()
{
  return j__swift_endAccess;
}

uint64_t sub_261485998()
{
  return sub_2613E2B50();
}

uint64_t sub_2614859A4(uint64_t a1)
{
  return sub_261485B14(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_silProbs, MEMORY[0x263F8EEA0]);
}

uint64_t (*sub_2614859C4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261485A20()
{
  return swift_retain();
}

uint64_t sub_261485A6C(uint64_t a1)
{
  return sub_261485B14(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_endpointer, MEMORY[0x263F8EED8]);
}

uint64_t (*sub_261485A8C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261485AE8()
{
  return sub_2613E2B50();
}

uint64_t sub_261485AF4(uint64_t a1)
{
  return sub_261485B14(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_floatArr, MEMORY[0x263F8EEA0]);
}

uint64_t sub_261485B14(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  unsigned int v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess();
  uint64_t v7 = *v6;
  *unsigned int v6 = a1;
  return a3(v7);
}

uint64_t (*sub_261485B74())()
{
  return j_j__swift_endAccess;
}

void *VAAVSAudioEnroller.__allocating_init(encoder:keywordIdentifier:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  id v12 = sub_26148828C(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v12;
}

void *VAAVSAudioEnroller.init(encoder:keywordIdentifier:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = sub_26148828C(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t sub_261485C90(objc_class *a1)
{
  uint64_t v3 = (uint64_t (*)(unsigned char *, uint64_t))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 336))(v21);
  v4.super.super.int64_t isa = a1;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v4, v5);
  if (v6) {
    return v3(v21, 1);
  }
  uint64_t v8 = v3(v21, 0);
  uint64_t v9 = (uint64_t (**)(uint64_t))(*(void *)v1 + 320);
  id v10 = *v9;
  uint64_t v11 = *(void *)((*v9)(v8) + 16);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v11;
  if (v11)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = v12 + 640;
      if (__OFADD__(v12, 640)) {
        break;
      }
      uint64_t v11 = *(void *)(v10(result) + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v11 >= v13) {
        uint64_t v11 = v12 + 640;
      }
      if (v11 < v12) {
        goto LABEL_24;
      }
      uint64_t result = v10(result);
      uint64_t v14 = *(void *)(result + 16);
      if (v14 < (unint64_t)v12 || v14 < v11) {
        goto LABEL_25;
      }
      unsigned __int8 v16 = sub_261485E8C(result, result + 32, v12, (2 * v11) | 1);
      uint64_t result = swift_bridgeObjectRelease();
      if (v16) {
        return result;
      }
      v12 += 640;
      if (v13 >= v20) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_15:
  unint64_t v17 = *(void *)(v10(result) + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 < v11)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  uint64_t result = v10(result);
  unint64_t v18 = *(void *)(result + 16);
  if (v18 < v11 || v18 < v17) {
    goto LABEL_27;
  }
  sub_261485E8C(result, result + 32, v11, (2 * v17) | 1);
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_261485E8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4))(void *, void)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for VASingleEnrollmentData();
  MEMORY[0x270FA5388](v9 - 8);
  id v48 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2614D50C8();
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v47 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (char *)&v46 - v14;
  unint64_t v15 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v4 + 192))(v51);
  uint64_t v16 = swift_unknownObjectRetain();
  sub_2613EC158(v16, a2, a3, a4);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t (*)(void *, void))v15(v51, 0);
  unint64_t v18 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t result = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v4 + 240))(v51);
  if (__OFADD__(*v19, v18))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *v19 += v18;
  uint64_t v20 = result(v51, 0);
  uint64_t v21 = *(uint64_t (**)(void))(*(void *)v4 + 176);
  uint64_t v22 = *(void *)(((uint64_t (*)(uint64_t))v21)(v20) + 16);
  uint64_t v23 = swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v4 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_maxSamplesPerEnrollment);
  if (v24 < v22)
  {
    uint64_t v25 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v50, v25, v11);
    swift_retain_n();
    uint64_t v26 = sub_2614D50A8();
    os_log_type_t v27 = sub_2614D5978();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v46 = v11;
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 134217984;
      uint64_t v29 = *(void *)(v21() + 16);
      swift_release();
      uint64_t result = (uint64_t (*)(void *, void))swift_bridgeObjectRelease();
      if (__OFSUB__(v29, v24))
      {
LABEL_22:
        __break(1u);
        return result;
      }
      v51[0] = v29 - v24;
      sub_2614D5B58();
      swift_release();
      _os_log_impl(&dword_2613B8000, v26, v27, "Enrollment is running long, need to reduce %ld samples", v28, 0xCu);
      MEMORY[0x263E38060](v28, -1, -1);

      uint64_t v11 = v46;
    }
    else
    {

      swift_release_n();
    }
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v50, v11);
    uint64_t v31 = ((uint64_t (*)(uint64_t))v21)(v30);
    uint64_t v32 = (*(uint64_t (**)(void))(*(void *)v4 + 200))();
    BOOL v33 = __OFSUB__(v24, v32);
    uint64_t result = (uint64_t (*)(void *, void))(v24 - v32);
    if (!v33)
    {
      uint64_t v34 = sub_2613F36A8((uint64_t)result, v31);
      (*(void (**)(uint64_t))(*(void *)v4 + 184))(v34);
      uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v4 + 208))(0);
      goto LABEL_10;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_10:
  uint64_t v35 = v11;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v4 + 368))(v51, v23);
  uint64_t v36 = v52;
  if (v52 == 1)
  {
    uint64_t v37 = sub_26146718C();
    os_log_type_t v38 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v47, v37, v35);
    uint64_t v39 = sub_2614D50A8();
    os_log_type_t v40 = sub_2614D5968();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_2613B8000, v39, v40, "Enrollment audio capture completed", v41, 2u);
      MEMORY[0x263E38060](v41, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v35);
    sub_261432FC0(v5 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_delegate, (uint64_t)v51);
    uint64_t v42 = v53;
    uint64_t v43 = (uint64_t)v48;
    if (v53)
    {
      uint64_t v44 = v54;
      sub_2613DBF24(v51, v53);
      uint64_t v45 = v49;
      (*(void (**)(void))(*(void *)v5 + 384))();
      if (!v45)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 8))(v43, v42, v44);
        sub_261454250(v43);
      }
      sub_2613DD718((uint64_t)v51);
    }
    else
    {
      sub_2614829B0((uint64_t)v51);
    }
  }
  return (uint64_t (*)(void *, void))v36;
}

uint64_t sub_26148647C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2614D50C8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v23 - v8;
  (*(void (**)(uint64_t))(*(void *)v1 + 376))(v7);
  v23[0] = 1;
  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v1 + 296))();
  uint64_t v13 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v12 + 440))(v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v15 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v15, v4);
    uint64_t v16 = sub_2614D50A8();
    os_log_type_t v17 = sub_2614D5968();
    BOOL v18 = os_log_type_enabled(v16, v17);
    char v19 = v23[0];
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 67109120;
      v23[1] = 1;
      sub_2614D5B58();
      _os_log_impl(&dword_2613B8000, v16, v17, "%{BOOL}d", v20, 8u);
      MEMORY[0x263E38060](v20, -1, -1);
    }

    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
  else
  {
    char v19 = 0;
  }
  uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 176))(v14) + 16);
  swift_bridgeObjectRelease();
  return sub_2614543D4(v21, *(void *)(v2 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_maxSamplesPerEnrollment), v19, a1);
}

uint64_t sub_261486818()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  type metadata accessor for VAStrideConfiguration();
  uint64_t v4 = static VAStrideConfiguration.forFlexibleAVS()();
  uint64_t v5 = (void *)MEMORY[0x263F8EED0];
  uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0xB8))();
  uint64_t v7 = (*(uint64_t (**)(void))((*v5 & *v4) + 0xD0))();
  uint64_t v8 = ((uint64_t (*)(void))(*v0)[25])();
  id v48 = (uint64_t (*)(void))(*v0)[22];
  uint64_t v9 = *(void *)(v48() + 16);
  uint64_t v10 = swift_bridgeObjectRelease();
  uint64_t v49 = v9 - v6;
  if (__OFSUB__(v9, v6))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (!v7)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    swift_unknownObjectRelease();
    __break(1u);
LABEL_58:
    uint64_t result = sub_2614D5DE8();
    __break(1u);
    return result;
  }
  uint64_t v45 = v4;
  BOOL v11 = v49 >= v8;
  if (v7 > 0) {
    BOOL v11 = v8 >= v49;
  }
  if (!v11)
  {
    uint64_t __n = 4 * v6;
    uint64_t v51 = v6;
    uint64_t v47 = v7;
    while (1)
    {
      int64_t v15 = __OFADD__(v8, v7) ? ((v8 + v7) >> 63) ^ 0x8000000000000000 : v8 + v7;
      uint64_t v16 = v8 + v6;
      if (__OFADD__(v8, v6)) {
        break;
      }
      if (v16 < v8) {
        goto LABEL_51;
      }
      uint64_t v17 = ((uint64_t (*)(uint64_t))v48)(v10);
      if (v8 < 0) {
        goto LABEL_52;
      }
      uint64_t v18 = v17;
      unint64_t v19 = *(void *)(v17 + 16);
      if (v19 < v8 || (uint64_t)v19 < v16) {
        goto LABEL_53;
      }
      uint64_t v12 = sub_2614D5FE8();
      swift_unknownObjectRetain_n();
      uint64_t v21 = swift_dynamicCastClass();
      if (!v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = MEMORY[0x263F8EE78];
      }
      uint64_t v22 = *(void *)(v21 + 16);
      swift_release();
      BOOL v23 = v22 == v51;
      uint64_t v6 = v51;
      if (v23)
      {
        uint64_t v24 = (void *)swift_dynamicCastClass();
        if (!v24)
        {
          swift_bridgeObjectRelease();
          uint64_t v24 = (void *)MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = (void *)MEMORY[0x263F8EE78];
        if (v16 != v8)
        {
          if (v6 < 1)
          {
            if (v6 < 0) {
              goto LABEL_58;
            }
          }
          else
          {
            sub_2613C23AC(&qword_26A914AC0);
            uint64_t v24 = (void *)swift_allocObject();
            int64_t v40 = j__malloc_size(v24);
            uint64_t v41 = v40 - 32;
            if (v40 < 32) {
              uint64_t v41 = v40 - 29;
            }
            v24[2] = v6;
            v24[3] = 2 * (v41 >> 2);
          }
          uint64_t v42 = v24 + 4;
          uint64_t v43 = (char *)(v18 + 32 + 4 * v8);
          if (v43 < (char *)v24 + 4 * v6 + 32 && (unint64_t)v42 < v18 + 32 + 4 * v16) {
            goto LABEL_58;
          }
          memcpy(v42, v43, __n);
        }
      }
      swift_bridgeObjectRelease();
      if (v24[2] == v6)
      {
        (*(void (**)(void *))(*v3[2] + 264))(v24);
        if (v2)
        {
          swift_release();

          return v12;
        }
        swift_release();
        type metadata accessor for EncoderPredictionAVS();
        uint64_t v25 = swift_dynamicCastClass();
        if (!v25) {
          goto LABEL_57;
        }
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)(v25 + 16);
        if (*(void *)(v27 + 16))
        {
          uint64_t v28 = (uint64_t (*)(unsigned char *))(*v3)[33];
          swift_bridgeObjectRetain();
          uint64_t v46 = (void (*)(unsigned char *, void))v28(v50);
          uint64_t v30 = v29;
          uint64_t v31 = *v29;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v30 = v31;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v31 = sub_26140C714(0, v31[2] + 1, 1, v31);
            *uint64_t v30 = v31;
          }
          unint64_t v34 = v31[2];
          unint64_t v33 = v31[3];
          if (v34 >= v33 >> 1)
          {
            uint64_t v31 = sub_26140C714((void *)(v33 > 1), v34 + 1, 1, v31);
            *uint64_t v30 = v31;
          }
          v31[2] = v34 + 1;
          v31[v34 + 4] = v27;
          v46(v50, 0);
          uint64_t v35 = *(void *)(v26 + 24);
          uint64_t v36 = (uint64_t (*)(unsigned char *))(*v3)[36];
          swift_bridgeObjectRetain();
          uint64_t v37 = (void (*)(unsigned char *, void))v36(v50);
          sub_2613D64FC(v35);
          v37(v50, 0);
          uint64_t v6 = v51;
        }
        os_log_type_t v38 = (void (*)(unsigned char *, void))((uint64_t (*)(unsigned char *))(*v3)[27])(v50);
        uint64_t v7 = v47;
        if (__OFADD__(*v39, v47)) {
          goto LABEL_54;
        }
        *v39 += v47;
        v38(v50, 0);
        uint64_t v10 = swift_unknownObjectRelease();
        uint64_t v2 = 0;
      }
      else
      {
        uint64_t v10 = swift_release();
        uint64_t v7 = v47;
      }
      BOOL v14 = v49 >= v15;
      if (v7 > 0) {
        BOOL v14 = v15 >= v49;
      }
      uint64_t v8 = v15;
      if (v14) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
LABEL_6:
  uint64_t v12 = ((uint64_t (*)(uint64_t))(*v3)[31])(v10);
  ((void (*)(void))(*v3)[34])();

  return v12;
}

uint64_t sub_261486E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = sub_2614D4CE8();
  uint64_t v110 = *(void *)(v6 - 8);
  uint64_t v111 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v112 = &v94[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v106 = sub_2614D50C8();
  uint64_t v109 = *(void *)(v106 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v106);
  char v107 = &v94[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  char v105 = (uint64_t (*)(void))&v94[-v11];
  uint64_t v120 = -1;
  uint64_t v119 = -1;
  uint64_t v12 = (void (**)(uint64_t))(*v1 + 272);
  uint64_t v13 = *v12;
  (*v12)(v10);
  uint64_t v14 = swift_bridgeObjectRelease();
  char v104 = v12;
  uint64_t v103 = v13;
  uint64_t v15 = ((uint64_t (*)(uint64_t))v13)(v14);
  uint64_t v16 = (uint64_t (**)(void))(*v1 + 296);
  uint64_t v17 = *v16;
  uint64_t v18 = (*v16)();
  float v19 = (*(float (**)(uint64_t))(*(void *)v18 + 216))(v18);
  uint64_t v20 = swift_release();
  uint64_t v21 = ((uint64_t (*)(uint64_t))v17)(v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 240))(v21);
  swift_release();
  uint64_t v23 = sub_26140DF80();
  float v24 = sub_26140DF88();
  uint64_t v25 = sub_26140DF98();
  uint64_t v26 = sub_26140DFA0(v15, v22, v23, v25, v19, v24);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(uint64_t (**)(uint64_t))(*v4 + 248);
  uint64_t v30 = *v4 + 248;
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v108 = v30;
  uint64_t v32 = v29(v31);
  uint64_t v33 = v26[2];
  uint64_t v113 = a1;
  uint64_t v114 = v3;
  uint64_t v115 = v32;
  if (!v33 || !*(void *)(v28 + 16)) {
    goto LABEL_16;
  }
  uint64_t v34 = sub_26140A8F8();
  uint64_t v35 = sub_26140E6C8((uint64_t)v26, v28, v34);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t v38 = sub_26140EA7C(v35, v37);
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v41 = *(void *)(v40 + 16);
  if (!v41)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (!*(void *)(v38 + 16))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v102 = v29;
  uint64_t v42 = *(void *)(v40 + 32 + 8 * v41 - 8);
  uint64_t v43 = *(void *)(v38 + 32);
  uint64_t v44 = v42 - v43;
  if (__OFSUB__(v42, v43))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v46 = ((uint64_t (*)(uint64_t))v17)(v45);
  uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 192))(v46);
  swift_release();
  if (v47 >= v44)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v76 = 2;
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v38 + 32);
  swift_bridgeObjectRelease();
  uint64_t v48 = *(void *)(v40 + 16);
  if (!v48)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v49 = *(void *)(v40 + 32 + 8 * v48 - 8);
  uint64_t v50 = swift_bridgeObjectRelease();
  uint64_t v51 = *(void *)((uint64_t (*)(uint64_t))v17)(v50);
  uint64_t v52 = (*(uint64_t (**)(void))(v51 + 288))();
  uint64_t v53 = swift_release();
  uint64_t v38 = v109;
  if (__OFSUB__(v37, v52))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v37 = (v37 - v52) & ~((v37 - v52) >> 63);
  uint64_t v120 = v37;
  uint64_t v54 = *(void *)((uint64_t (*)(uint64_t))v17)(v53);
  uint64_t v55 = (*(uint64_t (**)(void))(v54 + 312))();
  uint64_t v56 = swift_release();
  uint64_t v17 = (uint64_t (*)(void))(v49 + v55);
  if (__OFADD__(v49, v55))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v57 = v102;
  uint64_t v58 = *(void *)(v102(v56) + 16);
  swift_bridgeObjectRelease();
  if (v58 >= (uint64_t)v17) {
    uint64_t v59 = (uint64_t)v17;
  }
  else {
    uint64_t v59 = v58;
  }
  uint64_t v119 = v59;
  uint64_t v101 = v59 - v37;
  uint64_t v60 = (uint64_t (**)(void))v106;
  if (__OFSUB__(v59, v37)) {
    goto LABEL_36;
  }
  uint64_t v115 = v59;
  uint64_t v61 = sub_26146718C();
  char v62 = *(void (**)(void))(v38 + 16);
  uint64_t v17 = v105;
  uint64_t v99 = v61;
  uint64_t v100 = v38 + 16;
  char v98 = (void (*)(unsigned char *, uint64_t, uint64_t (**)(void)))v62;
  v62(v105);
  swift_retain_n();
  uint64_t v63 = sub_2614D50A8();
  os_log_type_t v64 = sub_2614D5968();
  int v65 = v64;
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v66 = swift_slowAlloc();
    uint64_t v97 = swift_slowAlloc();
    v118[0] = v97;
    *(_DWORD *)uint64_t v66 = 136316162;
    char v96 = (uint64_t (*)(void))v63;
    int v95 = v65;
    uint64_t v67 = v37;
    uint64_t v68 = v4[3];
    unint64_t v69 = v4[4];
    swift_bridgeObjectRetain();
    uint64_t v117 = sub_2613D875C(v68, v69, v118);
    sub_2614D5B58();
    swift_bridgeObjectRelease();
    *(_WORD *)(v66 + 12) = 2048;
    uint64_t v117 = v67;
    sub_2614D5B58();
    *(_WORD *)(v66 + 22) = 2048;
    uint64_t v70 = v115;
    uint64_t v117 = v115;
    sub_2614D5B58();
    *(_WORD *)(v66 + 32) = 2048;
    uint64_t v117 = v101;
    uint64_t v71 = sub_2614D5B58();
    *(_WORD *)(v66 + 42) = 2048;
    uint64_t v72 = *(void *)(((uint64_t (*)(uint64_t))v103)(v71) + 16);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v117 = v72;
    uint64_t v37 = v67;
    sub_2614D5B58();
    swift_release();
    uint64_t v17 = v96;
    _os_log_impl(&dword_2613B8000, (os_log_t)v96, (os_log_type_t)v95, "Enrollment %s clipping to [%ld , %ld](%ld total) frames from original %ld frames", (uint8_t *)v66, 0x34u);
    uint64_t v73 = v97;
    swift_arrayDestroy();
    MEMORY[0x263E38060](v73, -1, -1);
    uint64_t v74 = v66;
    uint64_t v57 = v102;
    MEMORY[0x263E38060](v74, -1, -1);

    uint64_t v38 = *(void *)(v109 + 8);
    uint64_t v16 = (uint64_t (**)(void))v106;
    uint64_t v75 = ((uint64_t (*)(uint64_t (*)(void)))v38)(v105);
  }
  else
  {

    swift_release_n();
    uint64_t v38 = *(void *)(v38 + 8);
    uint64_t v16 = v60;
    uint64_t v75 = ((uint64_t (*)(uint64_t (*)(void), uint64_t (**)(void)))v38)(v17, v60);
    uint64_t v70 = v115;
  }
  if (v70 < v37) {
    goto LABEL_37;
  }
  uint64_t v85 = v57(v75);
  uint64_t v86 = *(void *)(v85 + 16);
  if (v86 < (unint64_t)v37 || v86 < v115) {
    goto LABEL_38;
  }
  uint64_t v17 = (uint64_t (*)(void))v85;
  sub_2614D5FE8();
  swift_unknownObjectRetain_n();
  uint64_t v87 = swift_dynamicCastClass();
  if (!v87)
  {
    swift_bridgeObjectRelease();
    uint64_t v87 = MEMORY[0x263F8EE78];
  }
  uint64_t v88 = *(void *)(v87 + 16);
  swift_release();
  if (v88 == v101)
  {
    uint64_t v89 = swift_dynamicCastClass();
    if (!v89)
    {
      swift_bridgeObjectRelease();
      uint64_t v89 = MEMORY[0x263F8EE78];
    }
    goto LABEL_27;
  }
LABEL_39:
  unint64_t v93 = (2 * v115) | 1;
  swift_bridgeObjectRelease();
  uint64_t v89 = sub_2613DAE10((uint64_t)v17, (uint64_t)v17 + 32, v37, v93);
LABEL_27:
  uint64_t v115 = v89;
  swift_bridgeObjectRelease();
  v98(v107, v99, v16);
  char v90 = sub_2614D50A8();
  os_log_type_t v91 = sub_2614D5968();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v92 = 134217984;
    v118[0] = v101;
    sub_2614D5B58();
    _os_log_impl(&dword_2613B8000, v90, v91, "[Enroll] (clusterWindows+getMetaClusters): %ld", v92, 0xCu);
    MEMORY[0x263E38060](v92, -1, -1);
  }

  ((void (*)(unsigned char *, uint64_t (**)(void)))v38)(v107, v16);
  char v76 = 1;
LABEL_17:
  uint64_t v77 = (uint64_t)v112;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v110 + 16))(v112, (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_id, v111);
  uint64_t v78 = v4[3];
  uint64_t v79 = v4[4];
  int v80 = *(uint64_t (**)(uint64_t))(*v4 + 176);
  uint64_t v81 = swift_bridgeObjectRetain();
  uint64_t v82 = v80(v81);
  swift_beginAccess();
  uint64_t v83 = v120;
  swift_beginAccess();
  char v116 = v76;
  sub_2614542B4(v77, v115, v78, v79, v82, v83, v119, &v116, v113);
  return swift_bridgeObjectRelease();
}

uint64_t VAAVSAudioEnroller.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_id;
  uint64_t v2 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2614829B0(v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_delegate);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAAVSAudioEnroller.__deallocating_deinit()
{
  VAAVSAudioEnroller.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_261487A3C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352))();
}

uint64_t sub_261487A88()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 384))();
}

uint64_t sub_261487AD4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 368))();
}

uint64_t sub_261487B20@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_261432FC0(v1 + 64, a1);
}

uint64_t sub_261487B6C(uint64_t a1)
{
  swift_beginAccess();
  sub_2614814F4(a1, v1 + 64);
  return swift_endAccess();
}

uint64_t VAAVSAudioEnrollerFactory.__allocating_init(encoder:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  int v11 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 80) = 0u;
  *(void *)(v10 + 96) = 0;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 16) = a1;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a2;
  *(_DWORD *)(v10 + 40) = v11;
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + 24);
  swift_beginAccess();
  swift_retain();
  sub_261488464(a3, v10 + 64);
  swift_endAccess();
  sub_2614829B0(a3);
  if (a5) {
    a4 = *(void *)(a1 + 120);
  }
  swift_release();
  *(void *)(v10 + 104) = a4;
  return v10;
}

uint64_t VAAVSAudioEnrollerFactory.init(encoder:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v10 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 16) = a1;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *(_DWORD *)(v5 + 40) = v10;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 24);
  swift_beginAccess();
  swift_retain();
  sub_261488464(a3, v5 + 64);
  swift_endAccess();
  sub_2614829B0(a3);
  if (a5) {
    a4 = *(void *)(a1 + 120);
  }
  swift_release();
  *(void *)(v5 + 104) = a4;
  return v5;
}

uint64_t sub_261487D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void (*v11)(void *__return_ptr, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(void);
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  void v24[3];
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t (*v36)(void);
  uint64_t (**v37)(void);
  void *v38;
  uint64_t v39;
  void *v40;
  long long v41;
  uint64_t v42;
  long long v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  int v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  void v57[3];

  uint64_t v40 = a3;
  uint64_t v25 = sub_2614D50C8();
  v24[2] = *(void *)(v25 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v25);
  v24[1] = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (**)(void))(*(void *)v3 + 112);
  uint64_t v36 = *v8;
  uint64_t v37 = v8;
  uint64_t v9 = ((uint64_t (*)(uint64_t))v36)(v6);
  int v10 = *(_DWORD *)(v3 + 40);
  uint64_t v41 = *(_OWORD *)(v3 + 24);
  LODWORD(v42) = v10;
  uint64_t v43 = *(_OWORD *)(v3 + 48);
  int v11 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 136);
  uint64_t v12 = swift_bridgeObjectRetain();
  v11(v57, v12);
  uint64_t v13 = *(void *)(v3 + 104);
  uint64_t v39 = type metadata accessor for VAAVSAudioEnroller();
  swift_allocObject();
  uint64_t v38 = sub_26148828C(v9, a1, a2, (uint64_t *)&v41, (uint64_t)v57, v13);
  swift_release();
  VARuntimeParameters.init()((uint64_t)&v41);
  uint64_t v14 = (uint64_t (**)(void))v41;
  uint64_t v15 = DWORD2(v41);
  uint64_t v35 = BYTE12(v41);
  uint64_t v34 = BYTE13(v41);
  uint64_t v33 = v42;
  uint64_t v32 = v43;
  uint64_t v31 = BYTE8(v43);
  uint64_t v30 = v44;
  uint64_t v29 = v45;
  uint64_t v28 = v46;
  uint64_t v16 = v47;
  uint64_t v27 = v48;
  uint64_t v17 = v50;
  uint64_t v26 = v49;
  uint64_t v18 = v51;
  float v19 = v52;
  uint64_t v20 = v53;
  LOBYTE(v11) = v54;
  LOBYTE(a2) = v55;
  LOBYTE(a1) = v56;
  uint64_t v21 = v36();
  uint64_t v37 = v14;
  *(void *)&uint64_t v41 = v14;
  DWORD2(v41) = v15;
  BYTE12(v41) = v35;
  BYTE13(v41) = v34;
  uint64_t v42 = v33;
  *(void *)&uint64_t v43 = v32;
  BYTE8(v43) = v31;
  uint64_t v44 = v30;
  uint64_t v45 = v29;
  uint64_t v46 = v28;
  uint64_t v47 = v16;
  uint64_t v48 = v27;
  uint64_t v49 = v26;
  uint64_t v50 = v17;
  uint64_t v51 = v18;
  uint64_t v52 = v19;
  uint64_t v53 = v20;
  uint64_t v54 = (char)v11;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  (*(void (**)(long long *))(*(void *)v21 + 96))(&v41);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v23 = v40;
  v40[3] = v39;
  _DWORD v23[4] = &protocol witness table for VAAVSAudioEnroller;
  *uint64_t v23 = v38;
  return result;
}

uint64_t VAAVSAudioEnrollerFactory.deinit()
{
  swift_release();
  sub_2614829B0(v0 + 64);
  return v0;
}

uint64_t VAAVSAudioEnrollerFactory.__deallocating_deinit()
{
  swift_release();
  sub_2614829B0(v0 + 64);
  return swift_deallocClassInstance();
}

uint64_t sub_261488248()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

void *sub_26148828C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v28 = a6;
  uint64_t v13 = sub_2614D4CE8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a4;
  uint64_t v17 = a4[1];
  int v19 = *((_DWORD *)a4 + 4);
  uint64_t v20 = a4[3];
  uint64_t v21 = a4[4];
  uint64_t v26 = v20;
  uint64_t v27 = v17;
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_embeddings) = MEMORY[0x263F8EE78];
  *(void *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_silProbs) = v22;
  *(void *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_floatArr) = v22;
  v7[2] = a1;
  void v7[3] = a2;
  v7[4] = a3;
  v7[5] = v22;
  swift_retain();
  sub_2614D4CD8();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))((uint64_t)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_id, v16, v13);
  sub_261432FC0(a5, (uint64_t)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_delegate);
  *(void *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_maxSamplesPerEnrollment) = v28;
  *(void *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_processedAudioSamples) = 0;
  *(void *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_newSamples) = 0;
  type metadata accessor for AVSEndpointer();
  v29[0] = v18;
  v29[1] = v27;
  int v30 = v19;
  uint64_t v31 = v26;
  uint64_t v32 = v21;
  AVSEndpointer.__allocating_init(config:)((uint64_t)v29);
  uint64_t v24 = v23;
  sub_2614829B0(a5);
  *(void *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_endpointer) = v24;
  return v7;
}

uint64_t sub_261488464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(qword_26A915438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VAAVSAudioEnroller()
{
  uint64_t result = qword_26A91E680;
  if (!qword_26A91E680) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_261488518()
{
  return type metadata accessor for VAAVSAudioEnroller();
}

uint64_t sub_261488520()
{
  uint64_t result = sub_2614D4CE8();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for VAAVSAudioEnroller(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAAVSAudioEnroller);
}

uint64_t dispatch thunk of VAAVSAudioEnroller.__allocating_init(encoder:keywordIdentifier:endpointerConfig:delegate:maxSamplesPerEnrollment:)()
{
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of VAAVSAudioEnroller.addAudio(buffer:hostTime:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of VAAVSAudioEnroller.getEnrollmentProgress()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of VAAVSAudioEnroller.getEnrollmentData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t type metadata accessor for VAAVSAudioEnrollerFactory()
{
  return self;
}

uint64_t method lookup function for VAAVSAudioEnrollerFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAAVSAudioEnrollerFactory);
}

uint64_t dispatch thunk of VAAVSAudioEnrollerFactory.__allocating_init(encoder:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v5 + 160))(a1, a2, a3, a4, a5 & 1);
}

uint64_t dispatch thunk of VAAVSAudioEnrollerFactory.makeAudioEnroller(keywordIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

void *sub_261488750(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = a1;
  result[5] = a2;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (a2)
    {
      uint64_t v6 = sub_2614D56C8();
      *(void *)(v6 + 16) = a2;
      bzero((void *)(v6 + 32), 4 * a2);
    }
    else
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    v5[2] = sub_2613D1BF8(v6, a1);
    return v5;
  }
  return result;
}

uint64_t sub_2614887E8(uint64_t a1)
{
  uint64_t v4 = *(void **)(v2 + 16);
  if (!v4[2])
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16) != *(void *)(v4[4] + 16))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v3 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v4;
  if (result)
  {
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = (uint64_t)sub_2613D8EC8(v4);
  uint64_t v4 = (void *)result;
  *(void *)(v2 + 16) = result;
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if (v3 >= v4[2])
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4[v3 + 4] = v1;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v2 + 24);
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(v6 + 16);
  if (v10)
  {
    *(void *)(v2 + 24) = v9 % v10;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

void sub_2614888BC()
{
  uint64_t v1 = v0[4];
  if (v1 < 0)
  {
LABEL_17:
    __break(1u);
    return;
  }
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v4 = v0[3];
      BOOL v5 = __OFADD__(v2, v4);
      uint64_t v6 = v2 + v4;
      if (v5) {
        break;
      }
      unint64_t v7 = v6 % v1;
      if ((v7 & 0x8000000000000000) != 0) {
        goto LABEL_15;
      }
      uint64_t v8 = v0[2];
      if (v7 >= *(void *)(v8 + 16)) {
        goto LABEL_16;
      }
      uint64_t v9 = *(void *)(v8 + 8 * v7 + 32);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v3 = sub_26140C714(0, v3[2] + 1, 1, v3);
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1) {
        unint64_t v3 = sub_26140C714((void *)(v10 > 1), v11 + 1, 1, v3);
      }
      ++v2;
      v3[2] = v11 + 1;
      v3[v11 + 4] = v9;
      if (v1 == v2) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
}

void sub_2614889D4()
{
  uint64_t v1 = v0[5];
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      uint64_t v2 = sub_2614D56C8();
      *(void *)(v2 + 16) = v1;
      bzero((void *)(v2 + 32), 4 * v1);
    }
    else
    {
      uint64_t v2 = MEMORY[0x263F8EE78];
    }
    v0[2] = sub_2613D1BF8(v2, v0[4]);
    swift_bridgeObjectRelease();
    v0[3] = 0;
  }
}

uint64_t VACircularMatrixBuffer.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VACircularMatrixBuffer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VACircularMatrixBuffer()
{
  return self;
}

uint64_t method lookup function for VACircularMatrixBuffer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VACircularMatrixBuffer);
}

uint64_t VAA2TEncoderV2.__allocating_init(computeUnits:)()
{
  uint64_t v0 = swift_allocObject();
  VAA2TEncoderV2.init(computeUnits:)();
  return v0;
}

uint64_t VAA2TEncoderV2.init(computeUnits:)()
{
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D90]), sel_init);
  sub_26141C36C();
  sub_2614D55E8();
  sub_2614D55E8();
  if (v10 == v8 && v11 == v9)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v3 = 0;
  }
  else
  {
    char v4 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4)
    {
      uint64_t v3 = 0;
    }
    else
    {
      sub_2614D55E8();
      sub_2614D55E8();
      if (v10 == v8 && v11 == v9)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v5 = sub_2614D5FB8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0) {
          goto LABEL_12;
        }
      }
      uint64_t v3 = 3;
    }
  }
  objc_msgSend(v2, sel_setComputeUnits_, v3);
LABEL_12:
  type metadata accessor for at_encoder_rdr_125141826();
  uint64_t v6 = sub_26144B440(v2);
  if (v1)
  {
    swift_bridgeObjectRelease();

    type metadata accessor for VAA2TEncoderV2();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v0 + 16) = v6;
  }
  return v0;
}

uint64_t type metadata accessor for VAA2TEncoderV2()
{
  return self;
}

void (*sub_261488D5C(uint64_t a1))(unsigned char *, uint64_t)
{
  uint64_t v3 = v1;
  char v5 = (void (*)(unsigned char *, uint64_t))((uint64_t (*)(unsigned char *))(*v1)[18])(v20);
  sub_26141A68C(a1, v6);
  if (v2)
  {
    v5(v20, 1);
  }
  else
  {
    uint64_t v8 = ((uint64_t (*)(unsigned char *, void))v5)(v20, 0);
    char v5 = (void (*)(unsigned char *, uint64_t))v3;
    uint64_t v9 = ((uint64_t (*)(uint64_t))(*v3)[16])(v8);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      type metadata accessor for at_encoder_rdr_125141826Input();
      id v11 = v10;
      sub_26142AE30();
      uint64_t v12 = (*(uint64_t (**)(void))(*v3[2] + 136))();
      uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
      swift_release();
      uint64_t v15 = (uint64_t (*)(unsigned char *, void))((uint64_t (*)(unsigned char *))(*v3)[15])(v20);
      sub_26141A960(v14, v16);
      uint64_t v17 = v15(v20, 0);
      char v5 = (void (*)(unsigned char *, uint64_t))v3;
      uint64_t v18 = ((uint64_t (*)(uint64_t))(*v3)[13])(v17);
      if (v18)
      {
        char v5 = (void (*)(unsigned char *, uint64_t))v18;
      }
      else
      {
        sub_2613DC2B8();
        swift_allocError();
        *int v19 = 0xD00000000000001ELL;
        v19[1] = 0x80000002614E2C50;
        swift_willThrow();
      }

      swift_release();
    }
    else
    {
      sub_2613DC2B8();
      swift_allocError();
      *uint64_t v13 = 0xD00000000000001DLL;
      v13[1] = 0x80000002614E2C30;
      swift_willThrow();
    }
  }
  return v5;
}

uint64_t VAA2TEncoderV2.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t VAA2TEncoderV2.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_26148908C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t method lookup function for VAA2TEncoderV2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2TEncoderV2);
}

uint64_t dispatch thunk of VAA2TEncoderV2.__allocating_init(computeUnits:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of VAA2TEncoderV2.predict(featureExtractionBuffer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t sub_261489148@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  swift_beginAccess();
  return sub_261432FC0(v3, a1);
}

uint64_t sub_26148919C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  swift_beginAccess();
  sub_2614814F4(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_2614891F8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261489254()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2614892A0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_embeddings);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2614892F4())()
{
  return j__swift_endAccess;
}

uint64_t sub_261489350()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_processedAudioSamples;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261489398(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_processedAudioSamples);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_2614893E4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261489440()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_newSamples;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261489488(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_newSamples);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_2614894D4())()
{
  return j_j__swift_endAccess;
}

uint64_t VAA2AAudioEnrollerV2.__allocating_init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  VAA2AAudioEnrollerV2.init(encoder:keywordIdentifier:delegate:)(a1, a2, a3, a4);
  return v8;
}

void *VAA2AAudioEnrollerV2.init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_2614D4CE8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x263F8EE78];
  v4[5] = MEMORY[0x263F8EE78];
  v4[6] = v13;
  uint64_t v14 = (char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  *(_OWORD *)uint64_t v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((void *)v14 + 4) = 0;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_embeddings) = v13;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_numEmbeddingsPerEnrollment) = 48;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_maxSamplesPerEnrollment) = 31920;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_processedAudioSamples) = 0;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_newSamples) = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  sub_2614D4CD8();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id, v12, v9);
  uint64_t v15 = (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  swift_beginAccess();
  sub_2614814F4(a4, v15);
  swift_endAccess();
  return v4;
}

uint64_t (*sub_261489734(objc_class *a1))(long long *, void)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(*v1 + 288))(v6)) {
    goto LABEL_2;
  }
  uint64_t v14 = v1[2];
  VARuntimeParameters.init()((uint64_t)&v52);
  uint64_t v34 = v52;
  int v35 = DWORD2(v52);
  __int16 v36 = WORD6(v52);
  long long v37 = v53;
  LOBYTE(v38) = v54;
  uint64_t v39 = v55;
  char v40 = v56;
  char v41 = v57;
  int v42 = v58;
  char v43 = v59;
  uint64_t v44 = v60;
  uint64_t v45 = v61;
  __int16 v46 = v62;
  char v47 = v63;
  char v48 = v64;
  char v49 = v65;
  char v50 = v66;
  char v51 = v67;
  (*(void (**)(uint64_t *))(*(void *)v14 + 96))(&v34);
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t (*)(long long *, void))swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_2:
    uint64_t v9 = (uint64_t (*)(long long *, uint64_t))(*(uint64_t (**)(long long *))(*v3 + 208))(&v52);
    v10.super.super.int64_t isa = a1;
    VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v10, v11);
    if (v12)
    {
      return (uint64_t (*)(long long *, void))v9(&v52, 1);
    }
    else
    {
      uint64_t v15 = v9(&v52, 0);
      uint64_t v16 = *(uint64_t (**)(uint64_t))(*v3 + 192);
      uint64_t v17 = v16(v15);
      uint64_t v18 = (uint64_t (*)(long long *, void))(*(uint64_t (**)(long long *))(*v3 + 184))(&v52);
      sub_2613D64FC(v17);
      uint64_t v19 = v18(&v52, 0);
      uint64_t v20 = *(void *)(v16(v19) + 16);
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t (*)(long long *, void))(*(uint64_t (**)(long long *))(*v3 + 304))(&v52);
      if (__OFADD__(*v21, v20))
      {
        __break(1u);
      }
      else
      {
        *v21 += v20;
        uint64_t v22 = result(&v52, 0);
        uint64_t v23 = *(uint64_t (**)(uint64_t))(*v3 + 168);
        unint64_t v24 = *(void *)(v23(v22) + 16);
        uint64_t v25 = swift_bridgeObjectRelease();
        if (v24 >= 0x7CB1)
        {
          sub_2613C23AC(&qword_26A915268);
          uint64_t v26 = swift_allocObject();
          *(_OWORD *)(v26 + 16) = xmmword_2614D81E0;
          *(void *)(v26 + 56) = MEMORY[0x263F8D310];
          *(void *)(v26 + 32) = 0xD00000000000002ALL;
          *(void *)(v26 + 40) = 0x80000002614E6680;
          sub_2614D6068();
          uint64_t v27 = swift_bridgeObjectRelease();
          uint64_t v28 = v23(v27);
          uint64_t v29 = sub_2613F36A8(31920, v28);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(*v3 + 176))(v29);
        }
        uint64_t v30 = *(void *)(v23(v25) + 16);
        uint64_t result = (uint64_t (*)(long long *, void))swift_bridgeObjectRelease();
        if (v30 == 31920)
        {
          (*(void (**)(long long *__return_ptr, uint64_t (*)(long long *, void)))(*v3 + 216))(&v52, result);
          if (*((void *)&v53 + 1))
          {
            sub_2613E3434((uint64_t)&v52, (uint64_t)&v34);
            sub_2614829B0((uint64_t)&v52);
            uint64_t v31 = *((void *)&v37 + 1);
            uint64_t v32 = v38;
            sub_2613DBF24(&v34, *((uint64_t *)&v37 + 1));
            (*(void (**)(void))(*v3 + 344))();
            (*(void (**)(char *, uint64_t, uint64_t))(v32 + 8))(v8, v31, v32);
            sub_261454250((uint64_t)v8);
            sub_2613DD718((uint64_t)&v34);
          }
          else
          {
            sub_2614829B0((uint64_t)&v52);
          }
          uint64_t v54 = 0;
          long long v52 = 0u;
          long long v53 = 0u;
          return (uint64_t (*)(long long *, void))(*(uint64_t (**)(long long *))(*v3 + 224))(&v52);
        }
      }
    }
  }
  return result;
}

uint64_t sub_261489CA0()
{
  uint64_t v2 = v0;
  type metadata accessor for VAStrideConfiguration();
  uint64_t v3 = (void *)static VAStrideConfiguration.forFlexibleA2Av2()();
  char v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0xB8))();
  uint64_t v29 = v3;
  uint64_t v6 = (*(uint64_t (**)(void))((*v4 & *v3) + 0xD0))();
  uint64_t v7 = (*(uint64_t (**)(void))(*v2 + 264))();
  uint64_t v30 = *(uint64_t (**)(void))(*v2 + 168);
  uint64_t v8 = *(void *)(v30() + 16);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v31 = v8 - v5;
  if (__OFSUB__(v8, v5))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    return result;
  }
  if (!v6) {
    goto LABEL_53;
  }
  uint64_t v33 = v1;
  BOOL v10 = v31 >= v7;
  if (v6 > 0) {
    BOOL v10 = v7 >= v31;
  }
  if (!v10)
  {
    while (1)
    {
      int64_t v13 = __OFADD__(v7, v6) ? ((v7 + v6) >> 63) ^ 0x8000000000000000 : v7 + v6;
      uint64_t v14 = v7 + v5;
      if (__OFADD__(v7, v5)) {
        break;
      }
      if (v14 < v7) {
        goto LABEL_47;
      }
      uint64_t result = ((uint64_t (*)(uint64_t))v30)(result);
      if (v7 < 0) {
        goto LABEL_48;
      }
      uint64_t v15 = result;
      unint64_t v16 = *(void *)(result + 16);
      if (v16 < v7 || (uint64_t)v16 < v14) {
        goto LABEL_49;
      }
      sub_2614D5FE8();
      swift_unknownObjectRetain_n();
      uint64_t v18 = swift_dynamicCastClass();
      if (!v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = MEMORY[0x263F8EE78];
      }
      uint64_t v19 = *(void *)(v18 + 16);
      swift_release();
      if (v19 == v5)
      {
        uint64_t v20 = (void *)swift_dynamicCastClass();
        if (!v20)
        {
          swift_bridgeObjectRelease();
          uint64_t v20 = (void *)MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = (void *)MEMORY[0x263F8EE78];
        if (v14 != v7)
        {
          if (v5 >= 1)
          {
            sub_2613C23AC(&qword_26A914AC0);
            uint64_t v20 = (void *)swift_allocObject();
            int64_t v26 = j__malloc_size(v20);
            uint64_t v27 = v26 - 32;
            if (v26 < 32) {
              uint64_t v27 = v26 - 29;
            }
            void v20[2] = v5;
            v20[3] = 2 * (v27 >> 2);
          }
          memcpy(v20 + 4, (const void *)(v15 + 4 * v7 + 32), 4 * v5);
        }
      }
      swift_bridgeObjectRelease();
      if (v20[2] == v5)
      {
        uint64_t v11 = v2[2];
        uint64_t v21 = v33;
        (*(void (**)(void *))(*(void *)v11 + 80))(v20);
        uint64_t v33 = v21;
        if (v21)
        {
          swift_release();
LABEL_44:

          return v11;
        }
        swift_release();
        type metadata accessor for VAFeatureExtractingEncoderOutput();
        uint64_t result = swift_dynamicCastClass();
        if (!result)
        {
          swift_unknownObjectRelease();
          sub_2613DC2B8();
          swift_allocError();
          *uint64_t v28 = 0xD00000000000001ELL;
          v28[1] = 0x80000002614E35C0;
          swift_willThrow();
          goto LABEL_44;
        }
        if (*(unsigned char *)(result + 16) == 1)
        {
          uint64_t v22 = *(void *)(result + 40);
          if (!v22) {
            goto LABEL_54;
          }
          if (!*(void *)(v22 + 16)) {
            goto LABEL_51;
          }
          uint64_t v23 = *(void (**)(uint64_t))(*v2 + 248);
          uint64_t v24 = swift_bridgeObjectRetain();
          v23(v24);
        }
        uint64_t result = (*(uint64_t (**)(unsigned char *))(*v2 + 280))(v32);
        if (__OFADD__(*v25, v6)) {
          goto LABEL_50;
        }
        *v25 += v6;
        ((void (*)(unsigned char *, void))result)(v32, 0);
        uint64_t result = swift_unknownObjectRelease();
      }
      else
      {
        uint64_t result = swift_release();
      }
      BOOL v12 = v31 >= v13;
      if (v6 > 0) {
        BOOL v12 = v13 >= v31;
      }
      uint64_t v7 = v13;
      if (v12) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_6:
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*v2 + 240))(result);

  return v11;
}

uint64_t sub_26148A164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v1 + 168);
  uint64_t v4 = *(void *)(v3() + 16);
  uint64_t v5 = swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(((uint64_t (*)(uint64_t))v3)(v5) + 16);
  swift_bridgeObjectRelease();
  return sub_2614543D4(v4, 31920, v6 >> 4 > 0x7CA, a1);
}

int *sub_26148A1FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_2614D4CE8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id, v4);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*v1 + 328))(v8);
  if (v2) {
    return (int *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v11 = v9;
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[4];
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*v1 + 168);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = v14(v15);
  char v20 = 1;
  uint64_t v17 = sub_2614542AC();
  uint64_t v18 = sub_2614542AC();
  return sub_2614542B4((uint64_t)v7, v11, v12, v13, v16, v17, v18, &v20, a1);
}

uint64_t VAA2AAudioEnrollerV2.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id;
  uint64_t v2 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2614829B0(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AAudioEnrollerV2.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id;
  uint64_t v2 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2614829B0(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_26148A53C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320))();
}

uint64_t sub_26148A588()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 344))();
}

uint64_t sub_26148A5D4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 336))();
}

uint64_t VAA2AAudioEnrollerFactoryV2.__allocating_init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 40) = 0u;
  *(void *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 16) = a1;
  swift_beginAccess();
  sub_2614814F4(a2, v4 + 24);
  swift_endAccess();
  return v4;
}

uint64_t VAA2AAudioEnrollerFactoryV2.init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(void *)(v2 + 16) = a1;
  swift_beginAccess();
  sub_2614814F4(a2, v2 + 24);
  swift_endAccess();
  return v2;
}

void *sub_26148A720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v8)(void *__return_ptr, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  void v13[5];

  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v3 + 96))();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 120);
  uint64_t v9 = swift_bridgeObjectRetain();
  v8(v13, v9);
  BOOL v10 = type metadata accessor for VAA2AAudioEnrollerV2();
  uint64_t v11 = swift_allocObject();
  uint64_t result = VAA2AAudioEnrollerV2.init(encoder:keywordIdentifier:delegate:)(v7, a1, a2, (uint64_t)v13);
  a3[3] = v10;
  a3[4] = (uint64_t)&protocol witness table for VAA2AAudioEnrollerV2;
  *a3 = v11;
  return result;
}

uint64_t VAA2AAudioEnrollerFactoryV2.deinit()
{
  swift_release();
  sub_2614829B0(v0 + 24);
  return v0;
}

uint64_t VAA2AAudioEnrollerFactoryV2.__deallocating_deinit()
{
  swift_release();
  sub_2614829B0(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t sub_26148A868()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerV2()
{
  uint64_t result = qword_26A91E690;
  if (!qword_26A91E690) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_26148A8F8()
{
  return type metadata accessor for VAA2AAudioEnrollerV2();
}

uint64_t sub_26148A900()
{
  uint64_t result = sub_2614D4CE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for VAA2AAudioEnrollerV2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEnrollerV2);
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.__allocating_init(encoder:keywordIdentifier:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.addAudio(buffer:hostTime:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.getEnrollmentProgress()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.getEnrollmentData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerFactoryV2()
{
  return self;
}

uint64_t method lookup function for VAA2AAudioEnrollerFactoryV2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEnrollerFactoryV2);
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV2.__allocating_init(encoder:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV2.makeAudioEnroller(keywordIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t sub_26148AB24(uint64_t result, uint64_t a2)
{
  int64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_56;
  }
  uint64_t v4 = result;
  int64_t v5 = *(void *)(result + 16);
  int64_t v35 = *(void *)(*(void *)(a2 + 32) + 16);
  if (v5)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 8 * v6 + 32);
      uint64_t v9 = *(void *)(v8 + 16);
      int64_t v10 = *(void *)(v7 + 16);
      int64_t v11 = v10 + v9;
      if (__OFADD__(v10, v9))
      {
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result && v11 <= *(void *)(v7 + 24) >> 1)
      {
        if (*(void *)(v8 + 16)) {
          goto LABEL_15;
        }
      }
      else
      {
        if (v10 <= v11) {
          int64_t v12 = v10 + v9;
        }
        else {
          int64_t v12 = v10;
        }
        uint64_t result = (uint64_t)sub_2613D8310((char *)result, v12, 1, (char *)v7);
        uint64_t v7 = result;
        if (*(void *)(v8 + 16))
        {
LABEL_15:
          uint64_t v13 = *(void *)(v7 + 16);
          if ((*(void *)(v7 + 24) >> 1) - v13 < v9) {
            goto LABEL_53;
          }
          uint64_t result = (uint64_t)memcpy((void *)(v7 + 4 * v13 + 32), (const void *)(v8 + 32), 4 * v9);
          if (v9)
          {
            uint64_t v14 = *(void *)(v7 + 16);
            BOOL v15 = __OFADD__(v14, v9);
            uint64_t v16 = v14 + v9;
            if (v15) {
              goto LABEL_55;
            }
            *(void *)(v7 + 16) = v16;
          }
          goto LABEL_5;
        }
      }
      if (v9) {
        goto LABEL_51;
      }
LABEL_5:
      uint64_t result = swift_bridgeObjectRelease();
      if (v5 == ++v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
  }
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_21:
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  uint64_t v18 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v19 = *(void *)(a2 + 8 * v17 + 32);
    uint64_t v20 = *(void *)(v19 + 16);
    int64_t v21 = *(void *)(v18 + 16);
    int64_t v22 = v21 + v20;
    if (__OFADD__(v21, v20))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v22 <= *(void *)(v18 + 24) >> 1)
    {
      if (*(void *)(v19 + 16)) {
        goto LABEL_33;
      }
    }
    else
    {
      if (v21 <= v22) {
        int64_t v23 = v21 + v20;
      }
      else {
        int64_t v23 = v21;
      }
      uint64_t result = (uint64_t)sub_2613D8310((char *)result, v23, 1, (char *)v18);
      uint64_t v18 = result;
      if (*(void *)(v19 + 16))
      {
LABEL_33:
        uint64_t v24 = *(void *)(v18 + 16);
        if ((*(void *)(v18 + 24) >> 1) - v24 < v20) {
          goto LABEL_52;
        }
        uint64_t result = (uint64_t)memcpy((void *)(v18 + 4 * v24 + 32), (const void *)(v19 + 32), 4 * v20);
        if (v20)
        {
          uint64_t v25 = *(void *)(v18 + 16);
          BOOL v15 = __OFADD__(v25, v20);
          uint64_t v26 = v25 + v20;
          if (v15) {
            goto LABEL_54;
          }
          *(void *)(v18 + 16) = v26;
        }
        goto LABEL_23;
      }
    }
    if (v20) {
      goto LABEL_49;
    }
LABEL_23:
    uint64_t result = swift_bridgeObjectRelease();
    ++v17;
  }
  while (v2 != v17);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v27 = v2 * v35;
  if ((unsigned __int128)(v2 * (__int128)v35) >> 64 != (v2 * v35) >> 63) {
    goto LABEL_57;
  }
  if (v27 < 0) {
    goto LABEL_58;
  }
  if (v27)
  {
    uint64_t v28 = sub_2614D56C8();
    *(void *)(v28 + 16) = v27;
    bzero((void *)(v28 + 32), 4 * v27);
  }
  else
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
  }
  vDSP_mtrans((const float *)(v18 + 32), 1, (float *)(v28 + 32), 1, v35, v2);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v29 = v2 * v5;
  if ((unsigned __int128)(v2 * (__int128)v5) >> 64 == (v2 * v5) >> 63)
  {
    if (v29 < 0) {
      goto LABEL_60;
    }
    if (v29)
    {
      uint64_t v30 = sub_2614D56C8();
      *(void *)(v30 + 16) = v29;
      bzero((void *)(v30 + 32), 4 * v29);
    }
    else
    {
      uint64_t v30 = MEMORY[0x263F8EE78];
    }
    vDSP_mmul((const float *)(v7 + 32), 1, (const float *)(v28 + 32), 1, (float *)(v30 + 32), 1, v5, v2, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = MEMORY[0x270FA5388](*(void *)(v30 + 16));
    uint64_t v32 = sub_26148B198(v31, (uint64_t (*)(void *, uint64_t *))sub_26148B318);
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x270FA5388](*(void *)(v32 + 16));
    uint64_t v34 = sub_26148B198(v33, (uint64_t (*)(void *, uint64_t *))sub_26148B338);
    swift_bridgeObjectRelease();
    return v34;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

void sub_26148AF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = sub_26148AB24(a1, a2);
  uint64_t v5 = sub_2614D56C8();
  uint64_t v6 = v5;
  *(void *)(v5 + 16) = v3 + 1;
  if (v3) {
    memset_pattern16((void *)(v5 + 36), &unk_2614DE1B0, 4 * v3);
  }
  *(_DWORD *)(v6 + 32) = 0;
  uint64_t v7 = sub_2614D56C8();
  uint64_t v8 = v7;
  *(void *)(v7 + 16) = v3 + 1;
  *(_DWORD *)(v7 + 32) = 0;
  if (v3) {
    bzero((void *)(v7 + 36), 4 * v3);
  }
  if (v2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v4 + 32;
    while (1)
    {
      uint64_t v12 = v8;
      if (!*(void *)(v8 + 16)) {
        goto LABEL_28;
      }
      uint64_t v8 = v6;
      *(_DWORD *)(v12 + 32) = 2139095040;
      if (v3) {
        break;
      }
LABEL_7:
      ++v10;
      v11 += 4 * v3;
      v9 += v3;
      uint64_t v6 = v12;
      if (v10 == v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = v12;
        goto LABEL_24;
      }
    }
    if ((unsigned __int128)(v10 * (__int128)(uint64_t)v3) >> 64 != (uint64_t)(v10 * v3) >> 63)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v6 + 16);
    if (v3 < v13 && v13 >= 2)
    {
      uint64_t v14 = 0;
      unint64_t v15 = *(void *)(v4 + 16);
      uint64_t v16 = (float *)(v6 + 36);
      float v17 = INFINITY;
      while (v9 + v14 < v15)
      {
        uint64_t v18 = v14 + 1;
        if ((unint64_t)(v14 + 1) >= *(void *)(v12 + 16)) {
          goto LABEL_27;
        }
        uint64_t v19 = 4 * v14;
        float v20 = *v16;
        if (*v16 >= *(v16 - 1)) {
          float v20 = *(v16 - 1);
        }
        if (v17 >= v20) {
          float v17 = v20;
        }
        float v17 = *(float *)(v11 + v19) + v17;
        *(float *)(v12 + 36 + v19) = v17;
        ++v16;
        uint64_t v14 = v18;
        if (v3 == v18) {
          goto LABEL_7;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_30:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_24:
    if (v3 < *(void *)(v6 + 16))
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
}

void sub_26148B12C(uint64_t a1, vDSP_Length *a2, uint64_t a3)
{
  vDSP_Length v3 = *(void *)(a1 + 8);
  if (*(void *)(a3 + 16) == v3)
  {
    if (*(void *)a1)
    {
      vDSP_vneg((const float *)(a3 + 32), 1, *(float **)a1, 1, v3);
      *a2 = v3;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_26148B198(uint64_t result, uint64_t (*a2)(void *, uint64_t *))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = result;
  if (result)
  {
    uint64_t v5 = sub_2614D56C8();
    *(void *)(v5 + 16) = v4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  uint64_t v6 = v5 + 32;
  v7[1] = v4;
  uint64_t v8 = 0;
  v7[0] = v5 + 32;
  uint64_t result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(void *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(void *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_26148B298(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  vDSP_Length v3 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 16) != v3)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  float __B = a3;
  if (!*(void *)a2) {
    goto LABEL_5;
  }
  vDSP_vsadd((const float *)(a1 + 32), 1, &__B, *(float **)a2, 1, v3);
}

void sub_26148B318(uint64_t a1, vDSP_Length *a2)
{
  sub_26148B12C(a1, a2, **(void **)(v2 + 16));
}

void sub_26148B338(uint64_t a1, void *a2)
{
  float v4 = *(float *)(v2 + 16);
  uint64_t v5 = **(void **)(v2 + 24);
  sub_26148B298(v5, a1, v4);
  *a2 = *(void *)(v5 + 16);
}

uint64_t sub_26148B388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  swift_beginAccess();
  return sub_261432FC0(v3, a1);
}

uint64_t sub_26148B3DC(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  swift_beginAccess();
  sub_2614814F4(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_26148B438())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_26148B494()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_newSamples;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26148B4DC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_newSamples);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_26148B528())()
{
  return j__swift_endAccess;
}

uint64_t VAA2AAudioEnrollerV3.__allocating_init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  VAA2AAudioEnrollerV3.init(encoder:keywordIdentifier:delegate:)(a1, a2, a3, a4);
  return v8;
}

void *VAA2AAudioEnrollerV3.init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_2614D4CE8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x263F8EE78];
  v4[5] = MEMORY[0x263F8EE78];
  v4[6] = v13;
  uint64_t v14 = (char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  *(_OWORD *)uint64_t v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((void *)v14 + 4) = 0;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_numEmbeddingsPerEnrollment) = 48;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_maxSamplesPerEnrollment) = 31920;
  *(void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_newSamples) = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  sub_2614D4CD8();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id, v12, v9);
  uint64_t v15 = (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  swift_beginAccess();
  sub_2614814F4(a4, v15);
  swift_endAccess();
  return v4;
}

uint64_t sub_26148B770(objc_class *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for VASingleEnrollmentData();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2614D50C8();
  uint64_t v84 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(*(uint64_t (**)(uint64_t))(*v1 + 224))(v9))
  {
    uint64_t v17 = v1[2];
    VARuntimeParameters.init()((uint64_t)&v68);
    uint64_t v50 = v68;
    int v51 = DWORD2(v68);
    __int16 v52 = WORD6(v68);
    long long v53 = v69;
    LOBYTE(v54) = v70;
    uint64_t v55 = v71;
    char v56 = v72;
    char v57 = v73;
    int v58 = v74;
    char v59 = v75;
    uint64_t v60 = v76;
    uint64_t v61 = v77;
    __int16 v62 = v78;
    char v63 = v79;
    char v64 = v80;
    char v65 = v81;
    char v66 = v82;
    char v67 = v83;
    (*(void (**)(uint64_t *))(*(void *)v17 + 96))(&v50);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v2) {
      return result;
    }
  }
  uint64_t v12 = (uint64_t (*)(long long *, uint64_t))(*(uint64_t (**)(long long *))(*v3 + 192))(&v68);
  v13.super.super.int64_t isa = a1;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v13, v14);
  if (v15) {
    return v12(&v68, 1);
  }
  uint64_t v49 = v8;
  char v48 = v7;
  uint64_t v18 = v12(&v68, 0);
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*v3 + 176);
  uint64_t v20 = v19(v18);
  int64_t v21 = (uint64_t (*)(void))(*(uint64_t (**)(long long *))(*v3 + 168))(&v68);
  sub_2613D64FC(v20);
  uint64_t v22 = ((uint64_t (*)(long long *, void))v21)(&v68, 0);
  uint64_t v23 = (uint64_t)v3;
  uint64_t v24 = *(void *)(v19(v22) + 16);
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t (*)(long long *, void))(*(uint64_t (**)(long long *))(*v3 + 240))(&v68);
  if (__OFADD__(*v26, v24))
  {
    __break(1u);
  }
  else
  {
    *v26 += v24;
    uint64_t v27 = v25(&v68, 0);
    int64_t v21 = *(uint64_t (**)(void))(*v3 + 152);
    unint64_t v28 = *(void *)(v21(v27) + 16);
    uint64_t v29 = swift_bridgeObjectRelease();
    if (v28 < 0x7CB1) {
      goto LABEL_19;
    }
    uint64_t v30 = sub_26146718C();
    uint64_t v31 = v84;
    uint64_t v32 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v11, v30, v49);
    uint64_t v33 = sub_2614D50A8();
    os_log_type_t v34 = sub_2614D5978();
    if (os_log_type_enabled(v33, v34))
    {
      int64_t v35 = (uint8_t *)swift_slowAlloc();
      char v47 = v21;
      __int16 v36 = v35;
      *(_WORD *)int64_t v35 = 0;
      _os_log_impl(&dword_2613B8000, v33, v34, "Enrollment is running long, need to reduce", v35, 2u);
      long long v37 = v36;
      int64_t v21 = v47;
      MEMORY[0x263E38060](v37, -1, -1);
    }

    uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, v32);
    uint64_t v39 = v21(v38);
    uint64_t v23 = v39;
    if (*(void *)(v39 + 16) >= 0x7CB0uLL) {
      uint64_t v24 = 31920;
    }
    else {
      uint64_t v24 = *(void *)(v39 + 16);
    }
    sub_2614D5FE8();
    swift_unknownObjectRetain_n();
    uint64_t v40 = swift_dynamicCastClass();
    if (!v40)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = MEMORY[0x263F8EE78];
    }
    uint64_t v41 = *(void *)(v40 + 16);
    swift_release();
    if (v41 == v24)
    {
      uint64_t v42 = swift_dynamicCastClass();
      if (!v42)
      {
        swift_bridgeObjectRelease();
        uint64_t v42 = MEMORY[0x263F8EE78];
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = sub_2613DAF94(v23, v23 + 32, 0, (2 * v24) | 1);
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*v3 + 160))(v42);
LABEL_19:
  uint64_t v43 = *(void *)(v21(v29) + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v43 == 31920)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*v3 + 200))(&v68, result);
    if (*((void *)&v69 + 1))
    {
      sub_2613E3434((uint64_t)&v68, (uint64_t)&v50);
      sub_2614829B0((uint64_t)&v68);
      uint64_t v44 = *((void *)&v53 + 1);
      uint64_t v45 = v54;
      sub_2613DBF24(&v50, *((uint64_t *)&v53 + 1));
      uint64_t v46 = (uint64_t)v48;
      (*(void (**)(void))(*v3 + 280))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 8))(v46, v44, v45);
      sub_261454250(v46);
      sub_2613DD718((uint64_t)&v50);
    }
    else
    {
      sub_2614829B0((uint64_t)&v68);
    }
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    return (*(uint64_t (**)(long long *))(*v3 + 208))(&v68);
  }
  return result;
}

uint64_t sub_26148BE50()
{
  uint64_t v3 = v0;
  type metadata accessor for VAStrideConfiguration();
  float v4 = (void *)static VAStrideConfiguration.forFlexibleA2Av3()();
  uint64_t v5 = (void *)MEMORY[0x263F8EED0];
  uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x118))();
  int64_t v35 = v4;
  uint64_t v7 = (*(uint64_t (**)(void))((*v5 & *v4) + 0x130))();
  type metadata accessor for VAFeatureExtractingEncoderOutput();
  uint64_t v8 = VAFeatureExtractingEncoderOutput.__allocating_init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)(0, 0, 0, 0);
  uint64_t v38 = (uint64_t (*)(void))(*v3)[19];
  uint64_t v9 = *(void *)(v38() + 16);
  uint64_t v10 = swift_bridgeObjectRelease();
  uint64_t v37 = v9 - v6;
  if (__OFSUB__(v9, v6))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v39 = v9 + 1 - v6;
  if (__OFSUB__(v9 + 1, v6))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (!v7)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  BOOL v11 = v39 >= 0;
  if (v7 > 0) {
    BOOL v11 = v39 < 1;
  }
  if (!v11)
  {
    int64_t v14 = 0;
    uint64_t v36 = v7;
    while (1)
    {
      int64_t v2 = __OFADD__(v14, v7) ? ((v14 + v7) >> 63) ^ 0x8000000000000000 : v14 + v7;
      int64_t v15 = v14 + v6;
      if (__OFADD__(v14, v6)) {
        break;
      }
      if (v15 < v14) {
        goto LABEL_52;
      }
      uint64_t v16 = ((uint64_t (*)(uint64_t))v38)(v10);
      if (v14 < 0) {
        goto LABEL_53;
      }
      uint64_t v17 = v16;
      unint64_t v18 = *(void *)(v16 + 16);
      if (v18 < v14 || (uint64_t)v18 < v15) {
        goto LABEL_54;
      }
      uint64_t v20 = v3;
      sub_2614D5FE8();
      swift_unknownObjectRetain_n();
      uint64_t v21 = swift_dynamicCastClass();
      if (!v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = MEMORY[0x263F8EE78];
      }
      uint64_t v22 = *(void *)(v21 + 16);
      swift_release();
      if (v22 == v6)
      {
        uint64_t v23 = (void *)swift_dynamicCastClass();
        uint64_t v3 = v20;
        if (!v23)
        {
          swift_bridgeObjectRelease();
          uint64_t v23 = (void *)MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = (void *)MEMORY[0x263F8EE78];
        uint64_t v3 = v20;
        if (v15 != v14)
        {
          if (v6 < 1)
          {
            if (v6 < 0) {
              goto LABEL_59;
            }
          }
          else
          {
            sub_2613C23AC(&qword_26A914AC0);
            uint64_t v23 = (void *)swift_allocObject();
            int64_t v26 = j__malloc_size(v23);
            uint64_t v27 = v26 - 32;
            if (v26 < 32) {
              uint64_t v27 = v26 - 29;
            }
            v23[2] = v6;
            v23[3] = 2 * (v27 >> 2);
          }
          unint64_t v28 = v23 + 4;
          uint64_t v29 = (char *)(v17 + 32 + 4 * v14);
          if (v29 < (char *)v23 + 4 * v6 + 32 && (unint64_t)v28 < v17 + 32 + 4 * v15) {
            goto LABEL_59;
          }
          memcpy(v28, v29, 4 * v6);
        }
      }
      swift_bridgeObjectRelease();
      if (v23[2] != v6)
      {
        swift_release();
        sub_2613DC2B8();
        swift_allocError();
        *uint64_t v33 = 0xD00000000000002DLL;
        v33[1] = 0x80000002614E6740;
        swift_willThrow();
LABEL_46:

        goto LABEL_49;
      }
      uint64_t v24 = (*(uint64_t (**)(void *, BOOL))(*v3[2] + 312))(v23, v14 == v37);
      if (v1)
      {
        swift_release();
        goto LABEL_46;
      }
      uint64_t v12 = v24;
      swift_release();
      uint64_t v10 = swift_release();
      BOOL v25 = v39 >= v2;
      uint64_t v7 = v36;
      if (v36 > 0) {
        BOOL v25 = v2 >= v39;
      }
      int64_t v14 = v2;
      if (v25) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v12 = v8;
LABEL_8:
  if ((*(unsigned char *)(v12 + 16) & 1) == 0)
  {
    sub_2613DC2B8();
    swift_allocError();
    unint64_t v31 = 0xD000000000000019;
    uint64_t v32 = "Expected encodder feature";
    goto LABEL_48;
  }
  uint64_t v13 = *(void *)(v12 + 40);
  if (!v13)
  {
    sub_26148CA34();
    swift_allocError();
    unint64_t v31 = 0xD00000000000002FLL;
    uint64_t v32 = "Expected encoder output in VAA2AAudioEnrollerV3";
LABEL_48:
    *uint64_t v30 = v31;
    v30[1] = (unint64_t)(v32 - 32) | 0x8000000000000000;
    swift_willThrow();

LABEL_49:
    swift_release();
    return v2;
  }
  if (*(void *)(v13 + 16))
  {
    int64_t v2 = *(void *)(v13 + 32);
    swift_bridgeObjectRetain();
    swift_release();

    return v2;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  uint64_t result = sub_2614D5DE8();
  __break(1u);
  return result;
}

uint64_t sub_26148C3CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v1 + 152);
  uint64_t v4 = *(void *)(v3() + 16);
  uint64_t v5 = swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(((uint64_t (*)(uint64_t))v3)(v5) + 16);
  swift_bridgeObjectRelease();
  return sub_2614543D4(v4, 31920, v6 >> 4 > 0x7CA, a1);
}

int *sub_26148C464@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_2614D4CE8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id, v4);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*v1 + 264))(v8);
  if (v2) {
    return (int *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v11 = v9;
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[4];
  int64_t v14 = *(uint64_t (**)(uint64_t))(*v1 + 152);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = v14(v15);
  char v20 = 1;
  uint64_t v17 = sub_2614542AC();
  uint64_t v18 = sub_2614542AC();
  return sub_2614542B4((uint64_t)v7, v11, v12, v13, v16, v17, v18, &v20, a1);
}

uint64_t VAA2AAudioEnrollerV3.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id;
  uint64_t v2 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2614829B0(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate);
  return v0;
}

uint64_t VAA2AAudioEnrollerV3.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id;
  uint64_t v2 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2614829B0(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate);
  return swift_deallocClassInstance();
}

uint64_t sub_26148C784()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t sub_26148C7D0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t sub_26148C81C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 272))();
}

uint64_t VAA2AAudioEnrollerFactoryV3.__allocating_init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  sub_26148CA88(a2, v4 + 24);
  return v4;
}

uint64_t VAA2AAudioEnrollerFactoryV3.init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  sub_26148CA88(a2, v2 + 24);
  return v2;
}

void *sub_26148C8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  sub_261432FC0(v3 + 24, (uint64_t)v11);
  uint64_t v8 = type metadata accessor for VAA2AAudioEnrollerV3();
  uint64_t v9 = swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = VAA2AAudioEnrollerV3.init(encoder:keywordIdentifier:delegate:)(v7, a1, a2, (uint64_t)v11);
  a3[3] = v8;
  a3[4] = (uint64_t)&protocol witness table for VAA2AAudioEnrollerV3;
  *a3 = v9;
  return result;
}

uint64_t VAA2AAudioEnrollerFactoryV3.deinit()
{
  swift_release();
  sub_2614829B0(v0 + 24);
  return v0;
}

uint64_t VAA2AAudioEnrollerFactoryV3.__deallocating_deinit()
{
  swift_release();
  sub_2614829B0(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t sub_26148C9F0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

unint64_t sub_26148CA34()
{
  unint64_t result = qword_26A915B50;
  if (!qword_26A915B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915B50);
  }
  return result;
}

uint64_t sub_26148CA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(qword_26A915438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VAA2AAudioEnrollerV3()
{
  uint64_t result = qword_26A91E6A0;
  if (!qword_26A91E6A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_26148CB3C()
{
  return type metadata accessor for VAA2AAudioEnrollerV3();
}

uint64_t sub_26148CB44()
{
  uint64_t result = sub_2614D4CE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for VAA2AAudioEnrollerV3(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEnrollerV3);
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.__allocating_init(encoder:keywordIdentifier:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.addAudio(buffer:hostTime:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.getEnrollmentProgress()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.getEnrollmentData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerFactoryV3()
{
  return self;
}

uint64_t method lookup function for VAA2AAudioEnrollerFactoryV3(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEnrollerFactoryV3);
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV3.__allocating_init(encoder:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV3.makeAudioEnroller(keywordIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t VAA2AAudioEncoderModel.__allocating_init(computeUnits:)(char *a1)
{
  return VAA2AAudioEncoderModel.init(computeUnits:)(a1);
}

uint64_t VAA2AAudioEncoderModel.init(computeUnits:)(char *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *a1;
  type metadata accessor for VALog();
  uint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  swift_retain();
  sub_2614D5C38();
  sub_2614D54D8();
  LOBYTE(v16) = v8;
  sub_2614D5D48();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v18, v19, (uint64_t)v7);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D90]), sel_init);
  char v21 = v8;
  char v20 = 0;
  sub_26141C36C();
  sub_2614D55E8();
  sub_2614D55E8();
  if (v18 == v16 && v19 == v17)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v10 = 0;
  }
  else
  {
    char v11 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11)
    {
      uint64_t v10 = 0;
    }
    else
    {
      char v21 = v8;
      char v20 = 1;
      sub_2614D55E8();
      sub_2614D55E8();
      if (v18 == v16 && v19 == v17)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v12 = sub_2614D5FB8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0) {
          goto LABEL_12;
        }
      }
      uint64_t v10 = 3;
    }
  }
  objc_msgSend(v9, sel_setComputeUnits_, v10);
LABEL_12:
  type metadata accessor for all_audio2audio_encoder_ig2p();
  id v13 = v9;
  uint64_t v14 = sub_2614BB218(v13);
  if (v2)
  {
    swift_release();

    sub_26142D1B0((uint64_t)v7);
    type metadata accessor for VAA2AAudioEncoderModel();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v3 + 16) = v14;
    swift_release();
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_26142D1B0((uint64_t)v7);
    return sub_26141BF74();
  }
}

uint64_t type metadata accessor for VAA2AAudioEncoderModel()
{
  return self;
}

id sub_26148D0E8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == (*(uint64_t (**)(void))(*(void *)v1 + 168))())
  {
    sub_2613C23AC(&qword_26A915200);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2614DA520;
    unint64_t v7 = 0x263F08000uLL;
    *(void *)(v6 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v5);
    sub_2614D5678();
    id v8 = objc_allocWithZone(MEMORY[0x263F00DB0]);
    id result = sub_26141AF88(v6, 65568);
    if (!v2)
    {
      uint64_t v10 = result;
      if (v5)
      {
        uint64_t v23 = v3;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v5; ++i)
        {
          int v12 = *(_DWORD *)(a1 + 4 * i + 32);
          id v13 = objc_allocWithZone(*(Class *)(v7 + 2584));
          LODWORD(v14) = v12;
          unint64_t v15 = v7;
          id v16 = objc_msgSend(v13, sel_initWithFloat_, v14);
          objc_msgSend(v10, sel_setObject_atIndexedSubscript_, v16, i);

          unint64_t v7 = v15;
        }
        swift_bridgeObjectRelease();
        uint64_t v3 = v23;
      }
      type metadata accessor for all_audio2audio_encoder_ig2pInput();
      uint64_t v17 = sub_26142AE30(v10);
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v3 + 128))();
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 136))(v17);
      uint64_t v21 = swift_release();
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 88))(v21);
      swift_release();
      swift_release();
      return (id)v22;
    }
  }
  else
  {
    sub_26148D4F4();
    swift_allocError();
    *unint64_t v19 = 0xD000000000000014;
    v19[1] = 0x80000002614E6840;
    return (id)swift_willThrow();
  }
  return result;
}

id static VAA2AAudioEncoderModel.VACreateMLMultiArray(from:)(uint64_t a1)
{
  sub_2613C23AC(&qword_26A915200);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2614DA520;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(v3 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v4);
  sub_2614D5678();
  id v5 = objc_allocWithZone(MEMORY[0x263F00DB0]);
  id v6 = sub_26141AF88(v3, 65568);
  if (v1) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v4 == 0;
  }
  if (!v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(a1 + 4 * v8 + 32);
      id v10 = objc_allocWithZone(NSNumber);
      LODWORD(v11) = v9;
      id v12 = objc_msgSend(v10, sel_initWithFloat_, v11);
      objc_msgSend(v6, sel_setObject_atIndexedSubscript_, v12, v8);

      ++v8;
    }
    while (v4 != v8);
    swift_bridgeObjectRelease();
  }
  return v6;
}

unint64_t sub_26148D4F4()
{
  unint64_t result = qword_26A915B58;
  if (!qword_26A915B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915B58);
  }
  return result;
}

uint64_t sub_26148D548()
{
  type metadata accessor for VAStrideConfiguration();
  uint64_t v0 = static VAStrideConfiguration.forFlexibleA2A()();
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();

  return v1;
}

void sub_26148D5B8()
{
}

uint64_t sub_26148D5E8()
{
  return swift_release();
}

uint64_t VAA2AAudioEncoderModel.deinit()
{
  uint64_t v0 = VAAudioEncoderModel.deinit();
  swift_release();
  return v0;
}

uint64_t VAA2AAudioEncoderModel.__deallocating_deinit()
{
  VAAudioEncoderModel.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_26148D668()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t sub_26148D6A0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t method lookup function for VAA2AAudioEncoderModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AAudioEncoderModel);
}

uint64_t dispatch thunk of VAA2AAudioEncoderModel.__allocating_init(computeUnits:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModel.predict(currFrame:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModel.processingWindowSampleCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t sub_26148D760()
{
  sub_2614D5C38();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  type metadata accessor for VAEspressoV2Port();
  swift_bridgeObjectRetain();
  sub_2614D52F8();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  swift_bridgeObjectRetain();
  sub_2614D52F8();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t type metadata accessor for VAEspressoV2Port()
{
  return self;
}

uint64_t sub_26148D8C4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(v2 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    sub_2613D8F00(a1, a2);
    if (v5)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      type metadata accessor for VAEspressoV2Input();
      uint64_t result = swift_dynamicCastClass();
      if (result) {
        return result;
      }
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_2614D5C38();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  sub_2613DC2B8();
  swift_allocError();
  *BOOL v7 = 0xD000000000000022;
  v7[1] = 0x80000002614E68C0;
  return swift_willThrow();
}

uint64_t sub_26148D9F8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(v2 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    sub_2613D8F00(a1, a2);
    if (v5)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      type metadata accessor for VAEspressoV2Output();
      uint64_t result = swift_dynamicCastClass();
      if (result) {
        return result;
      }
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_2614D5C38();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  sub_2613DC2B8();
  swift_allocError();
  *BOOL v7 = 0xD000000000000023;
  v7[1] = 0x80000002614E68F0;
  return swift_willThrow();
}

uint64_t sub_26148DB30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_2614D50C8();
  uint64_t v170 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v169 = (char *)&v150 - v13;
  type metadata accessor for VABundleUtil();
  uint64_t v172 = a1;
  unint64_t v173 = a2;
  swift_bridgeObjectRetain();
  sub_2614D54D8();
  uint64_t v14 = static VABundleUtil.bundlePathFallback(path:)();
  uint64_t v171 = v4;
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = v14;
  unint64_t v18 = v15;
  LODWORD(v166) = a3;
  uint64_t v162 = a4;
  unint64_t v168 = v12;
  swift_bridgeObjectRelease();
  uint64_t v174 = v17;
  unint64_t v175 = v18;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_26146718C();
  uint64_t v20 = v170;
  uint64_t v21 = v170 + 16;
  uint64_t v22 = v17;
  char v165 = *(void (**)(char *, uint64_t, uint64_t))(v170 + 16);
  v165(v169, v19, v9);
  swift_bridgeObjectRetain_n();
  uint64_t v23 = sub_2614D50A8();
  os_log_type_t v24 = sub_2614D5958();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v167 = v9;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v163 = v21;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v172 = v28;
    uint64_t v164 = v19;
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v176 = sub_2613D875C(v22, v18, &v172);
    uint64_t v29 = v170;
    uint64_t v19 = v164;
    sub_2614D5B58();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2613B8000, v23, v24, "Loading model %s", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v30 = v28;
    uint64_t v9 = v167;
    MEMORY[0x263E38060](v30, -1, -1);
    unint64_t v31 = v27;
    uint64_t v21 = v163;
    MEMORY[0x263E38060](v31, -1, -1);
  }
  else
  {
    uint64_t v29 = v20;

    swift_bridgeObjectRelease_n();
  }
  uint64_t v32 = *(void (**)(char *, uint64_t))(v29 + 8);
  v32(v169, v9);
  uint64_t v33 = sub_26148F570;
  if (v166) {
    uint64_t v33 = sub_26148F53C;
  }
  os_log_type_t v34 = v171;
  uint64_t v35 = v33(1852399981, 0xE400000000000000, v22, v18, 1852399981, 0xE400000000000000, 1, 1);
  uint64_t v36 = v34;
  if (v34)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = v168;
    goto LABEL_11;
  }
  uint64_t v37 = v35;
  swift_bridgeObjectRelease();
  unint64_t v38 = sub_26148F644(MEMORY[0x263F8EE78]);
  uint64_t v39 = sub_26143179C();
  uint64_t v169 = (char *)v38;
  uint64_t v53 = *(void *)(v39 + 16);
  uint64_t v171 = v32;
  uint64_t v159 = v37;
  uint64_t v157 = v39;
  if (v53)
  {
    uint64_t v54 = (uint64_t *)(v39 + 40);
    unint64_t v155 = 0xD000000000000022;
    unint64_t v154 = 0x80000002614E6C30;
    unint64_t v153 = 0x80000002614E6C60;
    uint64_t v163 = v21;
    uint64_t v164 = v19;
    while (1)
    {
      uint64_t v160 = v53;
      uint64_t v55 = *(v54 - 1);
      uint64_t v56 = *v54;
      char v57 = v54;
      swift_bridgeObjectRetain();
      uint64_t v161 = v55;
      sub_261431928(v55, v56);
      sub_261431130();
      swift_release();
      uint64_t v166 = sub_261431000();
      sub_261431928(v161, v56);
      sub_2614311F0(v166);
      swift_release();
      int v58 = sub_261430E64();
      uint64_t v59 = sub_261430DB8();
      sub_261430F40();
      unsigned __int8 v60 = sub_261430A0C();
      swift_release();
      sub_261430F40();
      uint64_t v61 = sub_261430960();
      swift_release();
      __int16 v62 = sub_261430E90();
      uint64_t v63 = v60;
      uint64_t v64 = (uint64_t)v62;
      uint64_t v19 = v164;
      unint64_t v158 = v57 + 2;
      switch(v63)
      {
        case 1:
          switch(v61)
          {
            case 8:
              long long v68 = (uint64_t *)&unk_26A915C70;
              goto LABEL_42;
            case 4:
              long long v68 = (uint64_t *)&unk_26A915C78;
              goto LABEL_42;
            case 2:
              long long v68 = (uint64_t *)&unk_26A915C80;
LABEL_42:
              sub_2613C23AC(v68);
              uint64_t v70 = swift_allocObject();
              swift_bridgeObjectRetain();
              uint64_t v81 = v166;
              swift_retain();
              uint64_t v72 = v161;
              uint64_t v73 = v161;
              uint64_t v74 = v56;
              uint64_t v75 = (uint64_t)v58;
              uint64_t v76 = v59;
              uint64_t v77 = v81;
              char v78 = 1;
              goto LABEL_43;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v172 = 0;
          unint64_t v173 = 0xE000000000000000;
          sub_2614D5C38();
          swift_bridgeObjectRelease();
          uint64_t v172 = 0x6174616420746E49;
          unint64_t v79 = 0xEE0020657A697320;
          goto LABEL_45;
        case 2:
        case 3:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2613DC2B8();
          uint64_t v36 = (void *)swift_allocError();
          unint64_t v65 = v154;
          *char v66 = v155;
          v66[1] = v65;
          goto LABEL_46;
        case 4:
          switch(v61)
          {
            case 8:
              long long v69 = (uint64_t *)&unk_26A915C68;
              goto LABEL_35;
            case 4:
              long long v69 = (uint64_t *)&unk_26A9156F0;
LABEL_35:
              sub_2613C23AC(v69);
              goto LABEL_36;
            case 2:
              type metadata accessor for VAEspressoV2InputFp32Wrapped(0);
LABEL_36:
              uint64_t v70 = swift_allocObject();
              swift_bridgeObjectRetain();
              uint64_t v71 = v166;
              swift_retain();
              uint64_t v72 = v161;
              uint64_t v73 = v161;
              uint64_t v74 = v56;
              uint64_t v75 = (uint64_t)v58;
              uint64_t v76 = v59;
              uint64_t v77 = v71;
              char v78 = 4;
              goto LABEL_43;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v172 = 0;
          unint64_t v173 = 0xE000000000000000;
          sub_2614D5C38();
          swift_bridgeObjectRelease();
          uint64_t v172 = 0xD000000000000010;
          unint64_t v79 = v153;
LABEL_45:
          unint64_t v173 = v79;
          uint64_t v176 = v61;
          sub_2614D5F88();
          sub_2614D54D8();
          swift_bridgeObjectRelease();
          sub_2614D54D8();
          uint64_t v83 = v172;
          unint64_t v84 = v173;
          sub_2613DC2B8();
          uint64_t v36 = (void *)swift_allocError();
          uint64_t *v85 = v83;
          v85[1] = v84;
          uint64_t v19 = v164;
LABEL_46:
          uint64_t v72 = v161;
          swift_willThrow();
          uint64_t v82 = (uint64_t)v169;
          if (v36)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_102;
          }
LABEL_47:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v172 = v82;
          unint64_t v88 = sub_2613D8F00(v72, v56);
          uint64_t v89 = *((void *)v169 + 2);
          BOOL v90 = (v87 & 1) == 0;
          uint64_t v91 = v89 + v90;
          if (__OFADD__(v89, v90))
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            sub_2614D5FF8();
            __break(1u);
            JUMPOUT(0x26148F514);
          }
          char v92 = v87;
          if (*((void *)v169 + 3) >= v91)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_261494FD4();
            }
          }
          else
          {
            sub_261494CBC(v91, isUniquelyReferenced_nonNull_native);
            unint64_t v93 = sub_2613D8F00(v72, v56);
            if ((v92 & 1) != (v94 & 1)) {
              goto LABEL_108;
            }
            unint64_t v88 = v93;
          }
          int v95 = (void *)v172;
          uint64_t v21 = v163;
          uint64_t v169 = (char *)v172;
          if (v92)
          {
            uint64_t v96 = *(void *)(v172 + 56);
            swift_release();
            *(void *)(v96 + 8 * v88) = v156;
          }
          else
          {
            *(void *)(v172 + 8 * (v88 >> 6) + 64) |= 1 << v88;
            uint64_t v97 = (uint64_t *)(v95[6] + 16 * v88);
            *uint64_t v97 = v72;
            v97[1] = v56;
            *(void *)(v95[7] + 8 * v88) = v156;
            uint64_t v98 = v95[2];
            BOOL v99 = __OFADD__(v98, 1);
            uint64_t v100 = v98 + 1;
            if (v99) {
              goto LABEL_105;
            }
            v95[2] = v100;
            swift_bridgeObjectRetain();
          }
          uint64_t v19 = v164;
          uint64_t v37 = v159;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v53 = v160 - 1;
          uint64_t v101 = v162;
          uint64_t v54 = v158;
          if (v160 == 1) {
            goto LABEL_60;
          }
          break;
        default:
          switch(v61)
          {
            case 8:
              char v67 = (uint64_t *)&unk_26A915C88;
              break;
            case 4:
              char v67 = (uint64_t *)&unk_26A915C90;
              break;
            case 2:
              char v67 = (uint64_t *)&unk_26A915C98;
              break;
            default:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v172 = 0;
              unint64_t v173 = 0xE000000000000000;
              sub_2614D5C38();
              swift_bridgeObjectRelease();
              uint64_t v172 = 0x74616420746E4955;
              unint64_t v79 = 0xEF20657A69732061;
              goto LABEL_45;
          }
          sub_2613C23AC(v67);
          uint64_t v70 = swift_allocObject();
          swift_bridgeObjectRetain();
          uint64_t v80 = v166;
          swift_retain();
          uint64_t v72 = v161;
          uint64_t v73 = v161;
          uint64_t v74 = v56;
          uint64_t v75 = (uint64_t)v58;
          uint64_t v76 = v59;
          uint64_t v77 = v80;
          char v78 = 0;
LABEL_43:
          uint64_t v156 = v70;
          sub_26148FF8C(v73, v74, v75, v76, v77, v78, v64);
          uint64_t v82 = (uint64_t)v169;
          goto LABEL_47;
      }
    }
  }
  uint64_t v101 = v162;
LABEL_60:
  swift_bridgeObjectRelease();
  unint64_t v102 = sub_26148F644(MEMORY[0x263F8EE78]);
  uint64_t v103 = sub_2614316D4();
  uint64_t v166 = v102;
  uint64_t v104 = *(void *)(v103 + 16);
  unint64_t v155 = v103;
  if (!v104)
  {
LABEL_100:
    swift_bridgeObjectRelease();
    type metadata accessor for E5RTExecutionStream();
    uint64_t v147 = sub_261431B38();
    sub_261431C3C(v37);
    uint64_t result = swift_beginAccess();
    unint64_t v148 = v175;
    uint64_t *v101 = v174;
    v101[1] = v148;
    uint64_t v149 = v166;
    v101[2] = (uint64_t)v169;
    v101[3] = v149;
    v101[4] = v37;
    v101[5] = v147;
    return result;
  }
  unint64_t v158 = (uint64_t *)(v103 + 40);
  unint64_t v154 = 0x80000002614E6C30;
  unint64_t v152 = 0x80000002614E6C60;
  unint64_t v153 = 0xD000000000000022;
  uint64_t v163 = v21;
  while (2)
  {
    uint64_t v156 = v104;
    uint64_t v106 = *(v158 - 1);
    uint64_t v105 = *v158;
    swift_bridgeObjectRetain();
    uint64_t v107 = v105;
    uint64_t v160 = sub_261431864(v106, v105);
    uint64_t v161 = sub_261431130();
    uint64_t v157 = sub_261431000();
    sub_2614311F0(v157);
    uint64_t v108 = sub_261430E64();
    uint64_t v109 = sub_261430DB8();
    sub_261430F40();
    uint64_t v110 = v19;
    unsigned __int8 v111 = sub_261430A0C();
    swift_release();
    sub_261430F40();
    uint64_t v112 = sub_261430960();
    swift_release();
    uint64_t v113 = sub_261430E90();
    v158 += 2;
    uint64_t v114 = v111;
    uint64_t v115 = (uint64_t)v113;
    uint64_t v19 = v110;
    switch(v114)
    {
      case 1:
        switch(v112)
        {
          case 8:
            sub_2613C23AC(&qword_26A915B90);
            uint64_t v151 = swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v125 = v157;
            swift_retain();
            uint64_t v119 = sub_261492214(v106, v107, v108, v109, v125, 1, v115, MEMORY[0x263F8E5C0], &qword_26A915C48, &qword_26A915C40, &qword_26A915C38);
            break;
          case 4:
            sub_2613C23AC(&qword_26A915B98);
            uint64_t v151 = swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v126 = v157;
            swift_retain();
            uint64_t v119 = sub_2614925F0(v106, v107, v108, v109, v126, 1, v115, MEMORY[0x263F8E548], &qword_26A915C30, &qword_26A915C28, &qword_26A915C20);
            break;
          case 2:
            sub_2613C23AC(&qword_26A915BA0);
            uint64_t v151 = swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v120 = v157;
            swift_retain();
            uint64_t v119 = sub_2614929CC(v106, v107, v108, v109, v120, 1, v115, MEMORY[0x263F8E4F0], &qword_26A915C18, &qword_26A915C10, &qword_26A915C08);
            break;
          default:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v172 = 0;
            unint64_t v173 = 0xE000000000000000;
            sub_2614D5C38();
            swift_bridgeObjectRelease();
            uint64_t v172 = 0x6174616420746E49;
            unint64_t v124 = 0xEE0020657A697320;
            goto LABEL_87;
        }
        goto LABEL_83;
      case 2:
      case 3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2613DC2B8();
        uint64_t v36 = (void *)swift_allocError();
        unint64_t v116 = v154;
        *uint64_t v117 = v153;
        v117[1] = v116;
        goto LABEL_88;
      case 4:
        if (v112 == 8)
        {
          sub_2613C23AC(&qword_26A915B88);
          uint64_t v151 = swift_allocObject();
          swift_bridgeObjectRetain();
          uint64_t v129 = v157;
          swift_retain();
          uint64_t v119 = sub_261491E60(v106, v107, v108, v109, v129, 4, v115);
        }
        else
        {
          if (v112 == 4)
          {
            sub_2613C23AC(&qword_26A9156F8);
          }
          else
          {
            if (v112 != 2)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v172 = 0;
              unint64_t v173 = 0xE000000000000000;
              sub_2614D5C38();
              swift_bridgeObjectRelease();
              uint64_t v172 = 0xD000000000000010;
              unint64_t v124 = v152;
              goto LABEL_87;
            }
            type metadata accessor for VAEspressoV2OutputFp32Wrapped(0);
          }
          uint64_t v151 = swift_allocObject();
          swift_bridgeObjectRetain();
          uint64_t v121 = v157;
          swift_retain();
          uint64_t v119 = sub_261491AAC(v106, v107, v108, v109, v121, 4, v115);
        }
        goto LABEL_83;
      default:
        switch(v112)
        {
          case 8:
            sub_2613C23AC(&qword_26A915BA8);
            uint64_t v151 = swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v122 = v157;
            swift_retain();
            uint64_t v119 = sub_261492214(v106, v107, v108, v109, v122, 0, v115, MEMORY[0x263F8E970], &qword_26A915C00, &qword_26A915BF8, &qword_26A915BF0);
            goto LABEL_83;
          case 4:
            sub_2613C23AC(&qword_26A915BB0);
            uint64_t v151 = swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v123 = v157;
            swift_retain();
            uint64_t v119 = sub_2614925F0(v106, v107, v108, v109, v123, 0, v115, MEMORY[0x263F8E8F8], &qword_26A915BE8, &qword_26A915BE0, &qword_26A915BD8);
            goto LABEL_83;
          case 2:
            sub_2613C23AC(&qword_26A915BB8);
            uint64_t v151 = swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v118 = v157;
            swift_retain();
            uint64_t v119 = sub_2614929CC(v106, v107, v108, v109, v118, 0, v115, MEMORY[0x263F8E888], &qword_26A915BD0, &qword_26A915BC8, &qword_26A915BC0);
LABEL_83:
            uint64_t v109 = (uint64_t)v119;
            uint64_t v127 = v166;
            uint64_t v128 = v107;
LABEL_89:
            char v133 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v172 = v127;
            unint64_t v135 = sub_2613D8F00(v106, v128);
            uint64_t v136 = *(void *)(v166 + 16);
            BOOL v137 = (v134 & 1) == 0;
            uint64_t v138 = v136 + v137;
            if (__OFADD__(v136, v137)) {
              goto LABEL_106;
            }
            char v139 = v134;
            if (*(void *)(v166 + 24) >= v138)
            {
              if ((v133 & 1) == 0) {
                sub_261494FD4();
              }
            }
            else
            {
              sub_261494CBC(v138, v133);
              unint64_t v140 = sub_2613D8F00(v106, v107);
              if ((v139 & 1) != (v141 & 1)) {
                goto LABEL_108;
              }
              unint64_t v135 = v140;
            }
            uint64_t v142 = (void *)v172;
            uint64_t v166 = v172;
            if (v139)
            {
              uint64_t v143 = *(void *)(v172 + 56);
              swift_release();
              *(void *)(v143 + 8 * v135) = v109;
            }
            else
            {
              *(void *)(v172 + 8 * (v135 >> 6) + 64) |= 1 << v135;
              uint64_t v144 = (uint64_t *)(v142[6] + 16 * v135);
              *uint64_t v144 = v106;
              v144[1] = v107;
              *(void *)(v142[7] + 8 * v135) = v109;
              uint64_t v145 = v142[2];
              BOOL v99 = __OFADD__(v145, 1);
              uint64_t v146 = v145 + 1;
              if (v99) {
                goto LABEL_107;
              }
              v142[2] = v146;
              swift_bridgeObjectRetain();
            }
            uint64_t v19 = v110;
            uint64_t v37 = v159;
            uint64_t v101 = v162;
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v104 = v156 - 1;
            if (v156 == 1) {
              goto LABEL_100;
            }
            continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v172 = 0;
        unint64_t v173 = 0xE000000000000000;
        sub_2614D5C38();
        swift_bridgeObjectRelease();
        uint64_t v172 = 0x74616420746E4955;
        unint64_t v124 = 0xEF20657A69732061;
LABEL_87:
        unint64_t v173 = v124;
        uint64_t v176 = v112;
        sub_2614D5F88();
        sub_2614D54D8();
        swift_bridgeObjectRelease();
        sub_2614D54D8();
        uint64_t v130 = v172;
        unint64_t v131 = v173;
        sub_2613DC2B8();
        uint64_t v36 = (void *)swift_allocError();
        *uint64_t v132 = v130;
        v132[1] = v131;
        uint64_t v19 = v110;
LABEL_88:
        swift_willThrow();
        uint64_t v127 = v166;
        uint64_t v128 = 0;
        if (!v36) {
          goto LABEL_89;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
LABEL_102:
        swift_release();
        uint64_t v9 = v167;
        uint64_t v40 = v168;
        uint64_t v32 = v171;
LABEL_11:
        v165(v40, v19, v9);
        uint64_t v42 = v174;
        unint64_t v41 = v175;
        id v43 = v36;
        id v44 = v36;
        swift_bridgeObjectRetain();
        uint64_t v45 = sub_2614D50A8();
        os_log_type_t v46 = sub_2614D5978();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = swift_slowAlloc();
          uint64_t v171 = v32;
          uint64_t v48 = v47;
          uint64_t v49 = (void *)swift_slowAlloc();
          uint64_t v50 = swift_slowAlloc();
          uint64_t v172 = v50;
          *(_DWORD *)uint64_t v48 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v176 = sub_2613D875C(v42, v41, &v172);
          sub_2614D5B58();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v48 + 12) = 2112;
          id v51 = v36;
          uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v176 = v52;
          sub_2614D5B58();
          void *v49 = v52;

          _os_log_impl(&dword_2613B8000, v45, v46, "Error loading model: %s: %@", (uint8_t *)v48, 0x16u);
          sub_2613C23AC(&qword_26A914C10);
          swift_arrayDestroy();
          MEMORY[0x263E38060](v49, -1, -1);
          swift_arrayDestroy();
          MEMORY[0x263E38060](v50, -1, -1);
          MEMORY[0x263E38060](v48, -1, -1);

          v171(v168, v167);
        }
        else
        {
          swift_bridgeObjectRelease_n();

          v32(v40, v9);
        }
        return swift_willThrow();
    }
  }
}

uint64_t sub_26148F53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_26148F5A4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_261431670);
}

uint64_t sub_26148F570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_26148F5A4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_2614315A4);
}

uint64_t sub_26148F5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a9(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_26148F644(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_2613C23AC(&qword_26A915B80);
  uint64_t v2 = (void *)sub_2614D5DD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_2613D8F00(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_26148F760(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  sub_261492DA8(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

void *sub_26148F7F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  return sub_261491AAC(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_26148F88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  sub_26148FF8C(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t sub_26148F928(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (*(uint64_t (**)(void))(*v1 + 296))();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*v1 + 600);
  uint64_t v6 = *(void *)(v3 + 608);
  uint64_t v7 = *(void *)(v3 + 616);
  return v5(a1, v4, v6, v7);
}

uint64_t sub_26148F9E8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t sub_26148FA14()
{
  sub_2614D5718();
  sub_2614D5718();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_2614D55C8();
  sub_2614D5D38();
  swift_getWitnessTable();
  uint64_t v1 = sub_2614D5728();
  (*(void (**)(uint64_t))(*(void *)v0 + 624))(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_26148FB74()
{
  sub_2614D5718();
  sub_2614D5718();
  sub_2614D5718();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_2614D55C8();
  sub_2614D5D38();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_2614D55C8();
  sub_2614D5D38();
  swift_getWitnessTable();
  uint64_t v1 = sub_2614D5728();
  (*(void (**)(uint64_t))(*(void *)v0 + 624))(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_26148FD48()
{
  sub_2614D5718();
  sub_2614D5718();
  sub_2614D5718();
  sub_2614D5718();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_2614D55C8();
  sub_2614D5D38();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_2614D55C8();
  sub_2614D5D38();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_2614D55C8();
  sub_2614D5D38();
  swift_getWitnessTable();
  uint64_t v1 = sub_2614D5728();
  (*(void (**)(uint64_t))(*(void *)v0 + 624))(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_26148FF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 80) = 0;
  *(unsigned char *)(v7 + 88) = 1;
  *(void *)(v7 + 96) = 0;
  *(unsigned char *)(v7 + 104) = 1;
  *(void *)(v7 + 112) = 0;
  *(unsigned char *)(v7 + 120) = 1;
  *(void *)(v7 + 128) = 0;
  *(unsigned char *)(v7 + 136) = 1;
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(unsigned char *)(v7 + 168) = 2;
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = a2;
  *(void *)(v7 + 16) = a3;
  *(void *)(v7 + 24) = a4;
  *(void *)(v7 + 32) = a5;
  uint64_t v11 = sub_261430AC8(*(void *)(a5 + 16));
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for VAEspressoV2Port();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v7 + 56) = v11;
    *(unsigned char *)(v7 + 64) = a6;
    *(void *)(v7 + 72) = a7;
  }
  return v7;
}

uint64_t sub_261490070()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2614900C0()
{
  sub_261490070();
  return swift_deallocClassInstance();
}

uint64_t sub_2614900F4()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_261490140(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_261490194()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_2614901C8(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 64) = a1;
  return result;
}

uint64_t sub_261490208()
{
  uint64_t v1 = sub_2614D5C38();
  (*(void (**)(uint64_t))(*(void *)v0 + 272))(v1);
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_2614D54D8();
  (*(void (**)(uint64_t))(*(void *)v0 + 200))(v2);
  MEMORY[0x263E36790]();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_2614D54D8();
  (*(void (**)(uint64_t))(*(void *)v0 + 224))(v3);
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_2614D54D8();
  (*(void (**)(uint64_t))(*(void *)v0 + 320))(v4);
  sub_2614D5D48();
  uint64_t v5 = sub_2614D54D8();
  (*(void (**)(uint64_t))(*(void *)v0 + 344))(v5);
  MEMORY[0x263E36790]();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_261490480()
{
  if (*(unsigned char *)(v0 + 88) != 1) {
    return *(void *)(v0 + 80);
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 200))();
  uint64_t v2 = *(void *)(result + 16);
  if (!v2)
  {
    uint64_t v6 = 1;
LABEL_9:
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = v6;
    *(unsigned char *)(v0 + 88) = 0;
    return v6;
  }
  uint64_t v3 = (uint64_t *)(result + 32);
  uint64_t v4 = 1;
  while (1)
  {
    uint64_t v5 = *v3++;
    uint64_t v6 = v4 * v5;
    if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63) {
      break;
    }
    uint64_t v4 = v6;
    if (!--v2) {
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_261490520(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  *(unsigned char *)(v1 + 88) = 0;
  return result;
}

void *(*sub_26149052C(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = sub_261490480();
  return sub_261490574;
}

void *sub_261490574(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 80) = *result;
  *(unsigned char *)(v1 + 88) = 0;
  return result;
}

uint64_t sub_261490584()
{
  if (*(unsigned char *)(v0 + 104) != 1) {
    return *(void *)(v0 + 96);
  }
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 384))();
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 408))();
  uint64_t result = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    *(void *)(v0 + 96) = result;
    *(unsigned char *)(v0 + 104) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_261490630(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  *(unsigned char *)(v1 + 104) = 0;
  return result;
}

void *(*sub_26149063C(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = sub_261490584();
  return sub_261490684;
}

void *sub_261490684(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 96) = *result;
  *(unsigned char *)(v1 + 104) = 0;
  return result;
}

uint64_t sub_261490694()
{
  if (*(unsigned char *)(v0 + 120) != 1) {
    return *(void *)(v0 + 112);
  }
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 384))();
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 416))();
  uint64_t result = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    *(void *)(v0 + 112) = result;
    *(unsigned char *)(v0 + 120) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_261490740(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  *(unsigned char *)(v1 + 120) = 0;
  return result;
}

void *(*sub_26149074C(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = sub_261490694();
  return sub_261490794;
}

void *sub_261490794(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 112) = *result;
  *(unsigned char *)(v1 + 120) = 0;
  return result;
}

uint64_t sub_2614907A4()
{
  if (*(unsigned char *)(v0 + 136) != 1) {
    return *(void *)(v0 + 128);
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 344))();
  if (*(void *)(result + 16))
  {
    uint64_t v2 = *(void *)(result + 32);
    uint64_t v3 = swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 200))(v3);
    if (*(void *)(result + 16))
    {
      uint64_t v4 = *(void *)(result + 32);
      swift_bridgeObjectRelease();
      uint64_t result = v2 * v4;
      if ((unsigned __int128)(v2 * (__int128)v4) >> 64 == (v2 * v4) >> 63)
      {
        *(void *)(v0 + 128) = result;
        *(unsigned char *)(v0 + 136) = 0;
        return result;
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_261490870(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  *(unsigned char *)(v1 + 136) = 0;
  return result;
}

void *(*sub_26149087C(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = sub_2614907A4();
  return sub_2614908C4;
}

void *sub_2614908C4(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 128) = *result;
  *(unsigned char *)(v1 + 136) = 0;
  return result;
}

void *sub_2614908D4()
{
  uint64_t v1 = (void *)v0[18];
  if (v1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = (void *)(*(uint64_t (**)(void))(*v0 + 200))();
    if (v1[2] <= 3uLL)
    {
      do
      {
        sub_2613DFF6C((uint64_t)v1);
        uint64_t v1 = &unk_270D58FD0;
      }
      while (unk_270D58FE0 < 4uLL);
    }
    v0[18] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_261490990(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2614909A0(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_2614908D4();
  return sub_2614909E8;
}

uint64_t sub_2614909E8(void *a1)
{
  *(void *)(a1[1] + 144) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2614909F8()
{
  uint64_t v1 = v0[19];
  if (v1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = (*(uint64_t (**)(void))(*v0 + 344))();
    if (*(void *)(v1 + 16) <= 3uLL)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*v0 + 472);
      do
      {
        sub_2613C23AC(&qword_26A914B10);
        uint64_t v3 = swift_allocObject();
        *(_OWORD *)(v3 + 16) = xmmword_2614D81E0;
        *(void *)(v3 + 32) = v2();
        sub_2613DFF6C(v1);
        uint64_t v1 = v3;
      }
      while (*(void *)(v3 + 16) < 4uLL);
    }
    v0[19] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_261490B2C(uint64_t a1)
{
  *(void *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_261490B3C(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_2614909F8();
  return sub_261490B84;
}

uint64_t sub_261490B84(void *a1)
{
  *(void *)(a1[1] + 152) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_261490B94()
{
  if (v0[20])
  {
    uint64_t v1 = (void *)v0[20];
LABEL_3:
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  unint64_t v3 = (*(uint64_t (**)(void))(*v0 + 384))();
  uint64_t v1 = (void *)sub_261493654(0, v3);
  uint64_t v4 = (uint64_t (**)(void))(*v0 + 496);
  uint64_t v5 = *v4;
  uint64_t result = (*v4)();
  if (*(void *)(result + 16) < 4uLL)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v6 = *(void *)(result + 56);
  uint64_t v7 = swift_bridgeObjectRelease();
  uint64_t result = ((uint64_t (*)(uint64_t))v5)(v7);
  if (*(void *)(result + 16) < 3uLL)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v8 = *(void *)(result + 48);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v45 = v6 * v8;
  if ((unsigned __int128)(v6 * (__int128)v8) >> 64 != (v6 * v8) >> 63)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t result = ((uint64_t (*)(uint64_t))v5)(result);
  if (*(void *)(result + 16) < 2uLL)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v9 = *(void *)(result + 40);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v41 = v45 * v9;
  if ((unsigned __int128)(v45 * (__int128)v9) >> 64 != (v45 * v9) >> 63)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t result = ((uint64_t (*)(uint64_t))v5)(result);
  if (!*(void *)(result + 16))
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  uint64_t v10 = *(void *)(result + 32);
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 < 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (!v10)
  {
LABEL_57:
    v0[20] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  uint64_t v34 = v10;
  uint64_t v53 = v5;
  uint64_t v39 = 0;
  uint64_t v11 = 0;
  BOOL v12 = *(uint64_t (**)(uint64_t))(*v0 + 520);
  uint64_t v50 = 8 * v6;
  uint64_t v38 = 32;
  uint64_t v51 = v6;
  while (1)
  {
    uint64_t v40 = v11;
    uint64_t result = v12(result);
    if (!*(void *)(result + 16)) {
      break;
    }
    uint64_t v13 = *(void *)(result + 32);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = v40 * v13;
    if ((unsigned __int128)(v40 * (__int128)v13) >> 64 != (v40 * v13) >> 63) {
      goto LABEL_85;
    }
    uint64_t v36 = v40 * v41;
    if ((unsigned __int128)(v40 * (__int128)v41) >> 64 != (v40 * v41) >> 63) {
      goto LABEL_86;
    }
    uint64_t result = ((uint64_t (*)(uint64_t))v53)(result);
    if (*(void *)(result + 16) < 2uLL) {
      goto LABEL_87;
    }
    uint64_t v14 = *(void *)(result + 40);
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 < 0) {
      goto LABEL_88;
    }
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v42 = v39;
      uint64_t v43 = v38;
      uint64_t v35 = v14;
      while (1)
      {
        uint64_t v44 = v15;
        uint64_t result = v12(result);
        if (*(void *)(result + 16) < 2uLL) {
          break;
        }
        uint64_t v16 = *(void *)(result + 40);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v17 = v44 * v16;
        if ((unsigned __int128)(v44 * (__int128)v16) >> 64 != (v44 * v16) >> 63) {
          goto LABEL_73;
        }
        uint64_t v18 = v44 * v45;
        if ((unsigned __int128)(v44 * (__int128)v45) >> 64 != (v44 * v45) >> 63) {
          goto LABEL_74;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v53)(result);
        if (*(void *)(result + 16) < 3uLL) {
          goto LABEL_75;
        }
        uint64_t v19 = *(void *)(result + 48);
        uint64_t result = swift_bridgeObjectRelease();
        if (v19 < 0) {
          goto LABEL_76;
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v48 = v37 + v17;
          BOOL v21 = __OFADD__(v37, v17);
          BOOL v49 = v21;
          uint64_t v46 = v36 + v18;
          BOOL v22 = __OFADD__(v36, v18);
          BOOL v47 = v22;
          uint64_t v24 = v42;
          uint64_t v23 = v43;
          uint64_t v52 = v19;
          while (1)
          {
            uint64_t v54 = v20;
            uint64_t result = v12(result);
            if (*(void *)(result + 16) < 3uLL) {
              break;
            }
            uint64_t v25 = *(void *)(result + 48);
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v26 = v54 * v25;
            if ((unsigned __int128)(v54 * (__int128)v25) >> 64 != (v54 * v25) >> 63) {
              goto LABEL_64;
            }
            if ((unsigned __int128)(v54 * (__int128)v6) >> 64 != (v54 * v6) >> 63) {
              goto LABEL_65;
            }
            uint64_t result = ((uint64_t (*)(uint64_t))v53)(result);
            if (*(void *)(result + 16) < 4uLL) {
              goto LABEL_66;
            }
            uint64_t v27 = *(void *)(result + 56);
            uint64_t result = swift_bridgeObjectRelease();
            if (v27 < 0) {
              goto LABEL_67;
            }
            if (v27)
            {
              if (v49) {
                goto LABEL_68;
              }
              BOOL v28 = __OFADD__(v48, v26);
              uint64_t v29 = v48 + v26;
              if (v28) {
                goto LABEL_69;
              }
              if (v47) {
                goto LABEL_70;
              }
              if (__OFADD__(v46, v54 * v6)) {
                goto LABEL_71;
              }
              uint64_t v30 = 0;
              while (1)
              {
                uint64_t result = v12(result);
                if (*(void *)(result + 16) < 4uLL) {
                  break;
                }
                uint64_t v31 = *(void *)(result + 56);
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v32 = v30 * v31;
                if ((unsigned __int128)(v30 * (__int128)v31) >> 64 != (v30 * v31) >> 63) {
                  goto LABEL_59;
                }
                uint64_t v33 = v29 + v32;
                if (__OFADD__(v29, v32)) {
                  goto LABEL_60;
                }
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if (result)
                {
                  if (v24 < 0) {
                    goto LABEL_61;
                  }
                }
                else
                {
                  uint64_t result = (uint64_t)sub_26140F530(v1);
                  uint64_t v1 = (void *)result;
                  if (v24 < 0) {
                    goto LABEL_61;
                  }
                }
                if ((unint64_t)(v24 + v30) >= v1[2]) {
                  goto LABEL_62;
                }
                *(void *)((char *)&v1[v30++] + v23) = v33;
                if (v27 == v30) {
                  goto LABEL_34;
                }
              }
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              __break(1u);
              break;
            }
LABEL_34:
            uint64_t v20 = v54 + 1;
            uint64_t v6 = v51;
            v24 += v51;
            v23 += v50;
            if (v54 + 1 == v52) {
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          break;
        }
LABEL_20:
        uint64_t v15 = v44 + 1;
        v42 += v45;
        v43 += 8 * v45;
        if (v44 + 1 == v35) {
          goto LABEL_56;
        }
      }
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
LABEL_56:
    v39 += v41;
    uint64_t v11 = v40 + 1;
    v38 += 8 * v41;
    if (v40 + 1 == v34) {
      goto LABEL_57;
    }
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t sub_2614910F8(uint64_t a1)
{
  *(void *)(v1 + 160) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_261491108(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_261490B94();
  return sub_261491150;
}

uint64_t sub_261491150(void *a1)
{
  *(void *)(a1[1] + 160) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_261491160()
{
  int v1 = v0[168];
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 544))();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4)
  {
    BOOL v5 = 0;
    goto LABEL_12;
  }
  if (*(void *)(v2 + 32))
  {
    BOOL v5 = 1;
LABEL_12:
    swift_bridgeObjectRelease();
    v0[168] = v5;
    return v5;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v0 + 408);
  uint64_t v9 = v4 - 1;
  while (1)
  {
    uint64_t result = v8();
    BOOL v11 = __OFADD__(v7, result);
    v7 += result;
    if (v11) {
      break;
    }
    BOOL v5 = v9 != v6;
    if (v9 == v6) {
      goto LABEL_12;
    }
    if ((unint64_t)(v6 + 1) >= *(void *)(v3 + 16)) {
      goto LABEL_15;
    }
    uint64_t v12 = *(void *)(v3 + 40 + 8 * v6++);
    if (v12 != v7) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_261491288(uint64_t result)
{
  *(unsigned char *)(v1 + 168) = result;
  return result;
}

unsigned char *(*sub_261491290(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_261491160() & 1;
  return sub_2614912DC;
}

unsigned char *sub_2614912DC(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 168) = result[8];
  return result;
}

uint64_t sub_2614912EC(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  BOOL v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 568))(v9))
  {
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v4 + 544))();
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 384))();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v14 = result;
      if (!result)
      {
        return swift_bridgeObjectRelease();
      }
      if ((unint64_t)(result - 1) < *(void *)(v12 + 16))
      {
        uint64_t v15 = 0;
        do
        {
          sub_2614D5B48();
          (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(a1 + *(void *)(v8 + 72) * v15++, v11, a4);
        }
        while (v14 != v15);
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v16 = (void *)sub_2614D5AE8();
    size_t v17 = (*(uint64_t (**)(void))(*(void *)v4 + 424))();
    return (uint64_t)memcpy(v16, a3, v17);
  }
  return result;
}

uint64_t sub_261491570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  size_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 568))(v8);
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v3 + 544))();
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 384))();
    if (result < 0) {
      goto LABEL_15;
    }
    uint64_t v12 = result;
    if (result)
    {
      if ((unint64_t)(result - 1) >= *(void *)(v10 + 16))
      {
LABEL_16:
        __break(1u);
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = (void (**)(char *, uint64_t))(v6 + 8);
      while (1)
      {
        uint64_t result = sub_2614D5738();
        if ((v7 & 0x8000000000000000) != 0) {
          break;
        }
        uint64_t v15 = *(void *)(v10 + 8 * v13++ + 32);
        memcpy((void *)(a2 + v15), (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
        (*v14)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
        if (v12 == v13) {
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x270FA5388](v9);
    *(&v16 - 2) = a2;
    *(&v16 - 1) = v3;
    sub_2613C23AC(&qword_26A915B60);
    return sub_2614D5688();
  }
}

uint64_t sub_2614917F0()
{
  return 2;
}

uint64_t sub_2614917F8(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 384))();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v4 = sub_261495364(v3, a1, v1);
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_release();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 296))(v5);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v1 + 600))(v4, v6, MEMORY[0x263F8E888], MEMORY[0x263F8E8C0]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_26149192C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_261491964(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 176) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2614919AC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2614919E4(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 184) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_261491A2C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_261491A64(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 192) = a1;
  return swift_bridgeObjectRelease();
}

void *sub_261491AAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_26148FF8C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v37)
  {
    swift_bridgeObjectRelease();
LABEL_3:
    swift_release();
  }
  else
  {
    uint64_t v14 = a3[2];
    switch(v14)
    {
      case 1:
        swift_release();
        break;
      case 2:
        unint64_t v17 = a3[5];
        swift_retain();
        uint64_t v18 = sub_2613D1B04(v17, 0);
        if (!a3[2])
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x261491E50);
        }
        uint64_t v19 = v18;
        uint64_t v20 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v21 = sub_261418304(v19, v20, &qword_26A914AB8);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[22] = v21;
        break;
      case 3:
        unint64_t v22 = a3[6];
        swift_retain();
        uint64_t v23 = sub_2613D1B04(v22, 0);
        if (a3[2] < 2uLL) {
          goto LABEL_19;
        }
        uint64_t v24 = sub_261418304(v23, a3[5], &qword_26A914AB8);
        if (!a3[2]) {
          goto LABEL_20;
        }
        uint64_t v25 = v24;
        uint64_t v26 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v27 = sub_261418304(v25, v26, &qword_26A915020);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[23] = v27;
        break;
      case 4:
        unint64_t v28 = a3[7];
        swift_retain();
        uint64_t v29 = sub_2613D1B04(v28, 0);
        if (a3[2] < 3uLL) {
          goto LABEL_21;
        }
        uint64_t v30 = sub_261418304(v29, a3[6], &qword_26A914AB8);
        if (a3[2] < 2uLL) {
          goto LABEL_22;
        }
        uint64_t v31 = sub_261418304(v30, a3[5], &qword_26A915020);
        if (!a3[2]) {
          goto LABEL_23;
        }
        uint64_t v32 = v31;
        uint64_t v33 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v34 = sub_261418304(v32, v33, &qword_26A915B78);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[24] = v34;
        break;
      default:
        sub_2614D5C38();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v38, "Invalid rank: ");
        HIBYTE(v38[1]) = -18;
        v38[4] = v14;
        sub_2614D5F88();
        sub_2614D54D8();
        swift_bridgeObjectRelease();
        uint64_t v15 = v38[1];
        sub_2613DC2B8();
        swift_allocError();
        *uint64_t v16 = v38[0];
        v16[1] = v15;
        swift_willThrow();
        swift_release();
        goto LABEL_3;
    }
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *sub_261491E60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_26148FF8C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v37)
  {
    swift_bridgeObjectRelease();
LABEL_3:
    swift_release();
  }
  else
  {
    uint64_t v14 = a3[2];
    switch(v14)
    {
      case 1:
        swift_release();
        break;
      case 2:
        unint64_t v17 = a3[5];
        swift_retain();
        uint64_t v18 = sub_261493390(v17, 0.0);
        if (!a3[2])
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x261492204);
        }
        uint64_t v19 = v18;
        uint64_t v20 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v21 = sub_261418304(v19, v20, &qword_26A915C60);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[22] = v21;
        break;
      case 3:
        unint64_t v22 = a3[6];
        swift_retain();
        uint64_t v23 = sub_261493390(v22, 0.0);
        if (a3[2] < 2uLL) {
          goto LABEL_19;
        }
        uint64_t v24 = sub_261418304(v23, a3[5], &qword_26A915C60);
        if (!a3[2]) {
          goto LABEL_20;
        }
        uint64_t v25 = v24;
        uint64_t v26 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v27 = sub_261418304(v25, v26, &qword_26A915C58);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[23] = v27;
        break;
      case 4:
        unint64_t v28 = a3[7];
        swift_retain();
        uint64_t v29 = sub_261493390(v28, 0.0);
        if (a3[2] < 3uLL) {
          goto LABEL_21;
        }
        uint64_t v30 = sub_261418304(v29, a3[6], &qword_26A915C60);
        if (a3[2] < 2uLL) {
          goto LABEL_22;
        }
        uint64_t v31 = sub_261418304(v30, a3[5], &qword_26A915C58);
        if (!a3[2]) {
          goto LABEL_23;
        }
        uint64_t v32 = v31;
        uint64_t v33 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v34 = sub_261418304(v32, v33, &qword_26A915C50);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[24] = v34;
        break;
      default:
        sub_2614D5C38();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v38, "Invalid rank: ");
        HIBYTE(v38[1]) = -18;
        v38[4] = v14;
        sub_2614D5F88();
        sub_2614D54D8();
        swift_bridgeObjectRelease();
        uint64_t v15 = v38[1];
        sub_2613DC2B8();
        swift_allocError();
        *uint64_t v16 = v38[0];
        v16[1] = v15;
        swift_willThrow();
        swift_release();
        goto LABEL_3;
    }
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *sub_261492214(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v11[22] = 0;
  v11[23] = 0;
  v11[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_26148FF8C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v41)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    switch(a3[2])
    {
      case 1:
        swift_release();
        break;
      case 2:
        unint64_t v20 = a3[5];
        swift_retain();
        uint64_t v21 = sub_261493654(0, v20);
        if (!a3[2])
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x2614925E0);
        }
        uint64_t v22 = v21;
        uint64_t v23 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v24 = sub_261418304(v22, v23, a9);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[22] = v24;
        break;
      case 3:
        unint64_t v25 = a3[6];
        swift_retain();
        uint64_t v26 = sub_261493654(0, v25);
        if (a3[2] < 2uLL) {
          goto LABEL_18;
        }
        uint64_t v27 = sub_261418304(v26, a3[5], a9);
        if (!a3[2]) {
          goto LABEL_19;
        }
        uint64_t v28 = v27;
        uint64_t v29 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v30 = sub_261418304(v28, v29, a10);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[23] = v30;
        break;
      case 4:
        unint64_t v31 = a3[7];
        swift_retain();
        uint64_t v32 = sub_261493654(0, v31);
        if (a3[2] < 3uLL) {
          goto LABEL_20;
        }
        uint64_t v33 = sub_261418304(v32, a3[6], a9);
        if (a3[2] < 2uLL) {
          goto LABEL_21;
        }
        uint64_t v34 = sub_261418304(v33, a3[5], a10);
        uint64_t v35 = a3;
        if (!a3[2]) {
          goto LABEL_22;
        }
        uint64_t v36 = v34;
        uint64_t v37 = v35[4];
        swift_bridgeObjectRelease();
        uint64_t v38 = sub_261418304(v36, v37, a11);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[24] = v38;
        break;
      default:
        sub_2614D5C38();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v42, "Invalid rank: ");
        HIBYTE(v42[1]) = -18;
        v42[4] = a9;
        sub_2614D5F88();
        sub_2614D54D8();
        swift_bridgeObjectRelease();
        uint64_t v18 = v42[1];
        sub_2613DC2B8();
        swift_allocError();
        *uint64_t v19 = v42[0];
        v19[1] = v18;
        swift_willThrow();
        swift_release();
        swift_release();
        return v11;
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

void *sub_2614925F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v11[22] = 0;
  v11[23] = 0;
  v11[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_26148FF8C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v41)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    switch(a3[2])
    {
      case 1:
        swift_release();
        break;
      case 2:
        unint64_t v20 = a3[5];
        swift_retain();
        uint64_t v21 = sub_261493484(0, v20);
        if (!a3[2])
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x2614929BCLL);
        }
        uint64_t v22 = v21;
        uint64_t v23 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v24 = sub_261418304(v22, v23, a9);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[22] = v24;
        break;
      case 3:
        unint64_t v25 = a3[6];
        swift_retain();
        uint64_t v26 = sub_261493484(0, v25);
        if (a3[2] < 2uLL) {
          goto LABEL_18;
        }
        uint64_t v27 = sub_261418304(v26, a3[5], a9);
        if (!a3[2]) {
          goto LABEL_19;
        }
        uint64_t v28 = v27;
        uint64_t v29 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v30 = sub_261418304(v28, v29, a10);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[23] = v30;
        break;
      case 4:
        unint64_t v31 = a3[7];
        swift_retain();
        uint64_t v32 = sub_261493484(0, v31);
        if (a3[2] < 3uLL) {
          goto LABEL_20;
        }
        uint64_t v33 = sub_261418304(v32, a3[6], a9);
        if (a3[2] < 2uLL) {
          goto LABEL_21;
        }
        uint64_t v34 = sub_261418304(v33, a3[5], a10);
        uint64_t v35 = a3;
        if (!a3[2]) {
          goto LABEL_22;
        }
        uint64_t v36 = v34;
        uint64_t v37 = v35[4];
        swift_bridgeObjectRelease();
        uint64_t v38 = sub_261418304(v36, v37, a11);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[24] = v38;
        break;
      default:
        sub_2614D5C38();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v42, "Invalid rank: ");
        HIBYTE(v42[1]) = -18;
        v42[4] = a9;
        sub_2614D5F88();
        sub_2614D54D8();
        swift_bridgeObjectRelease();
        uint64_t v18 = v42[1];
        sub_2613DC2B8();
        swift_allocError();
        *uint64_t v19 = v42[0];
        v19[1] = v18;
        swift_willThrow();
        swift_release();
        swift_release();
        return v11;
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

void *sub_2614929CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v11[22] = 0;
  v11[23] = 0;
  v11[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_26148FF8C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v41)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    switch(a3[2])
    {
      case 1:
        swift_release();
        break;
      case 2:
        unint64_t v20 = a3[5];
        swift_retain();
        uint64_t v21 = sub_26149356C(0, v20);
        if (!a3[2])
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x261492D98);
        }
        uint64_t v22 = v21;
        uint64_t v23 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v24 = sub_261418304(v22, v23, a9);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[22] = v24;
        break;
      case 3:
        unint64_t v25 = a3[6];
        swift_retain();
        uint64_t v26 = sub_26149356C(0, v25);
        if (a3[2] < 2uLL) {
          goto LABEL_18;
        }
        uint64_t v27 = sub_261418304(v26, a3[5], a9);
        if (!a3[2]) {
          goto LABEL_19;
        }
        uint64_t v28 = v27;
        uint64_t v29 = a3[4];
        swift_bridgeObjectRelease();
        uint64_t v30 = sub_261418304(v28, v29, a10);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[23] = v30;
        break;
      case 4:
        unint64_t v31 = a3[7];
        swift_retain();
        uint64_t v32 = sub_26149356C(0, v31);
        if (a3[2] < 3uLL) {
          goto LABEL_20;
        }
        uint64_t v33 = sub_261418304(v32, a3[6], a9);
        if (a3[2] < 2uLL) {
          goto LABEL_21;
        }
        uint64_t v34 = sub_261418304(v33, a3[5], a10);
        uint64_t v35 = a3;
        if (!a3[2]) {
          goto LABEL_22;
        }
        uint64_t v36 = v34;
        uint64_t v37 = v35[4];
        swift_bridgeObjectRelease();
        uint64_t v38 = sub_261418304(v36, v37, a11);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[24] = v38;
        break;
      default:
        sub_2614D5C38();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v42, "Invalid rank: ");
        HIBYTE(v42[1]) = -18;
        v42[4] = a9;
        sub_2614D5F88();
        sub_2614D54D8();
        swift_bridgeObjectRelease();
        uint64_t v18 = v42[1];
        sub_2613DC2B8();
        swift_allocError();
        *uint64_t v19 = v42[0];
        v19[1] = v18;
        swift_willThrow();
        swift_release();
        swift_release();
        return v11;
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

void *sub_261492DA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v53 = (void *)a7;
  LODWORD(v52) = a6;
  uint64_t v50 = *v7;
  uint64_t v51 = a4;
  uint64_t v12 = *(void *)(v50 + 608);
  uint64_t v49 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v48 - v13;
  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v15 = a2;
  uint64_t v16 = a5;
  uint64_t v17 = v51;
  uint64_t v18 = v7;
  uint64_t v51 = v16;
  uint64_t v19 = v54;
  sub_26148FF8C(a1, v15, (uint64_t)a3, v17, v16, (char)v52, (uint64_t)v53);
  if (v19)
  {
    swift_bridgeObjectRelease();
LABEL_3:
    swift_release();
    return v18;
  }
  uint64_t v53 = v7 + 24;
  uint64_t v54 = 0;
  uint64_t v52 = v7 + 23;
  uint64_t v20 = v49;
  uint64_t v21 = a3[2];
  switch(v21)
  {
    case 1:
      swift_release();
      goto LABEL_19;
    case 2:
      swift_retain();
      sub_2614D5D88();
      if (a3[2] < 2uLL)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x261493380);
      }
      uint64_t v25 = sub_261495260((uint64_t)v14, a3[5], v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v12);
      v55[0] = v25;
      if (!a3[2]) {
        goto LABEL_22;
      }
      uint64_t v26 = a3[4];
      swift_bridgeObjectRelease();
      uint64_t v27 = sub_2614D5718();
      uint64_t v28 = sub_261495260((uint64_t)v55, v26, v27);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v18[22] = v28;
LABEL_19:
      swift_bridgeObjectRelease();
      return v18;
    case 3:
      swift_retain();
      sub_2614D5D88();
      if (a3[2] < 3uLL) {
        goto LABEL_23;
      }
      uint64_t v29 = sub_261495260((uint64_t)v14, a3[6], v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v12);
      v55[0] = v29;
      if (a3[2] < 2uLL) {
        goto LABEL_24;
      }
      uint64_t v30 = a3[5];
      uint64_t v31 = sub_2614D5718();
      uint64_t v32 = sub_261495260((uint64_t)v55, v30, v31);
      swift_bridgeObjectRelease();
      v55[0] = v32;
      if (!a3[2]) {
        goto LABEL_25;
      }
      uint64_t v33 = a3[4];
      swift_bridgeObjectRelease();
      uint64_t v34 = sub_2614D5718();
      uint64_t v35 = sub_261495260((uint64_t)v55, v33, v34);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v18[23] = v35;
      goto LABEL_19;
    case 4:
      swift_retain();
      uint64_t v36 = v12;
      sub_2614D5D88();
      if (a3[2] < 4uLL) {
        goto LABEL_26;
      }
      uint64_t v37 = sub_261495260((uint64_t)v14, a3[7], v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v36);
      v55[0] = v37;
      if (a3[2] < 3uLL) {
        goto LABEL_27;
      }
      uint64_t v38 = a3[6];
      uint64_t v39 = sub_2614D5718();
      uint64_t v40 = sub_261495260((uint64_t)v55, v38, v39);
      swift_bridgeObjectRelease();
      v55[0] = v40;
      if (a3[2] < 2uLL) {
        goto LABEL_28;
      }
      uint64_t v41 = a3[5];
      uint64_t v42 = sub_2614D5718();
      uint64_t v43 = sub_261495260((uint64_t)v55, v41, v42);
      swift_bridgeObjectRelease();
      v55[0] = v43;
      if (!a3[2]) {
        goto LABEL_29;
      }
      uint64_t v44 = a3[4];
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_2614D5718();
      uint64_t v46 = sub_261495260((uint64_t)v55, v44, v45);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v18[24] = v46;
      goto LABEL_19;
    default:
      v55[0] = 0;
      v55[1] = 0xE000000000000000;
      sub_2614D5C38();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      strcpy((char *)v55, "Invalid rank: ");
      HIBYTE(v55[1]) = -18;
      v55[4] = v21;
      sub_2614D5F88();
      sub_2614D54D8();
      swift_bridgeObjectRelease();
      uint64_t v22 = v55[0];
      uint64_t v23 = v55[1];
      sub_2613DC2B8();
      swift_allocError();
      *uint64_t v24 = v22;
      v24[1] = v23;
      swift_willThrow();
      swift_release();
      goto LABEL_3;
  }
}

uint64_t sub_261493390(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_2614D5D58();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_2614D56C8();
  *(void *)(result + 16) = a1;
  uint64_t v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_261493484(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_2614D5D58();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_2614D56C8();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(a1);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_26149356C(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_2614D5D58();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_2614D56C8();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  int16x8_t v7 = vdupq_n_s16(a1);
  uint64_t v8 = (int16x8_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_261493654(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_2614D5D58();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_2614D56C8();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v7 = vdupq_n_s64(a1);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_26149373C()
{
  return *(void *)(*(void *)(*(void *)(*(void *)v0 + 608) - 8) + 64);
}

uint64_t sub_261493768()
{
  (*(void (**)(void))(*(void *)v0 + 384))();
  return sub_2614D56D8();
}

uint64_t sub_2614937F8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

void *sub_261493824(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 608);
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  unint64_t v6 = (char *)&v32 - v5;
  uint64_t v36 = (*(uint64_t (**)(uint64_t))(v7 + 720))(v4);
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v1 + 200);
  uint64_t v39 = *(void *)v1 + 200;
  uint64_t v40 = v8;
  uint64_t result = (void *)v8();
  if (!result[2])
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v10 = result[4];
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v10 < 0) {
    goto LABEL_30;
  }
  if (v10)
  {
    int64_t v11 = 0;
    uint64_t v33 = v10;
    uint64_t v34 = v35 + 40;
    while (v11 != v10)
    {
      uint64_t result = (void *)((uint64_t (*)(void *))v40)(result);
      if (result[2] < 2uLL) {
        goto LABEL_27;
      }
      uint64_t v12 = result[5];
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (v12 < 0) {
        goto LABEL_28;
      }
      int64_t v41 = v11;
      if (v12)
      {
        unint64_t v13 = 0;
        uint64_t v14 = *(uint64_t (**)(unsigned char *))(*(void *)v2 + 664);
        uint64_t v37 = *(void *)v2 + 664;
        uint64_t v38 = v14;
        while (v12 != v13)
        {
          uint64_t result = (void *)((uint64_t (*)(void *))v40)(result);
          if (result[2] < 2uLL) {
            goto LABEL_23;
          }
          uint64_t v15 = result[5];
          uint64_t result = (void *)swift_bridgeObjectRelease();
          unint64_t v16 = v41;
          int64_t v17 = v41 * v15;
          if ((unsigned __int128)(v41 * (__int128)v15) >> 64 != (v41 * v15) >> 63) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(v17 + v13);
          if (__OFADD__(v17, v13)) {
            goto LABEL_25;
          }
          sub_2614D5738();
          uint64_t result = (void *)v38(v42);
          if (!*v18) {
            goto LABEL_31;
          }
          uint64_t v19 = (uint64_t (*)(unsigned char *, void))result;
          uint64_t v20 = v18;
          unint64_t v21 = v13 + 1;
          sub_2614D5718();
          sub_2614D5718();
          sub_2614D56A8();
          uint64_t v22 = *v20;
          sub_26149518C(v16, v22);
          unint64_t v23 = v16;
          uint64_t v24 = v12;
          uint64_t v25 = v6;
          uint64_t v26 = v2;
          uint64_t v27 = v22 + 8 * v23;
          sub_2614D56A8();
          uint64_t v28 = *(void *)(v27 + 32);
          uint64_t v2 = v26;
          unint64_t v6 = v25;
          uint64_t v12 = v24;
          sub_26149518C(v13, v28);
          char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          uint64_t v30 = v28 & 0xFFFFFFFFFFFFFF8;
          if ((isClassOrObjCExistentialType & 1) == 0) {
            uint64_t v30 = v28;
          }
          (*(void (**)(unint64_t, char *, uint64_t))(v35 + 40))(v30+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v13, v6, v3);
          uint64_t result = (void *)v19(v42, 0);
          ++v13;
          if (v24 == v21) {
            goto LABEL_5;
          }
        }
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        break;
      }
LABEL_5:
      int64_t v11 = v41 + 1;
      uint64_t v10 = v33;
      if (v41 + 1 == v33) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_20:
  uint64_t v31 = swift_bridgeObjectRelease();
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 648))(v31);
  if (!result) {
LABEL_32:
  }
    __break(1u);
  return result;
}

void *sub_261493BD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 608);
  uint64_t v46 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v39 - v4;
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(v6 + 720))(v3);
  uint64_t v7 = (uint64_t (**)(void))(*(void *)v1 + 200);
  uint64_t v8 = v1;
  uint64_t v52 = *v7;
  uint64_t result = (void *)v52();
  if (!result[2])
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v10 = result[4];
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v10 < 0) {
    goto LABEL_49;
  }
  uint64_t v11 = v10;
  if (v10)
  {
    int64_t v12 = 0;
    uint64_t v43 = v46 + 40;
    uint64_t v44 = v7;
    uint64_t v40 = v10;
    uint64_t v42 = v2;
    while (v12 != v11)
    {
      int64_t v51 = v12;
      uint64_t result = (void *)((uint64_t (*)(void *))v52)(result);
      if (result[2] < 2uLL) {
        goto LABEL_46;
      }
      uint64_t v13 = result[5];
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (v13 < 0) {
        goto LABEL_47;
      }
      if (v13)
      {
        int64_t v14 = 0;
        uint64_t v41 = v13;
        while (v14 != v13)
        {
          uint64_t result = (void *)((uint64_t (*)(void *))v52)(result);
          if (result[2] < 3uLL) {
            goto LABEL_43;
          }
          uint64_t v15 = result[6];
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v15 < 0) {
            goto LABEL_44;
          }
          if (v15)
          {
            unint64_t v16 = 0;
            int64_t v17 = *(uint64_t (**)(unsigned char *))(*(void *)v8 + 688);
            uint64_t v48 = *(void *)v8 + 688;
            uint64_t v49 = v17;
            uint64_t v47 = v15;
            while (v15 != v16)
            {
              uint64_t result = (void *)((uint64_t (*)(void *))v52)(result);
              if (result[2] < 2uLL) {
                goto LABEL_34;
              }
              uint64_t v18 = result[5];
              uint64_t result = (void *)swift_bridgeObjectRelease();
              int64_t v19 = v51 * v18;
              if ((unsigned __int128)(v51 * (__int128)v18) >> 64 != (v51 * v18) >> 63) {
                goto LABEL_35;
              }
              uint64_t result = (void *)((uint64_t (*)(void *))v52)(result);
              if (result[2] < 3uLL) {
                goto LABEL_36;
              }
              uint64_t v20 = result[6];
              uint64_t result = (void *)swift_bridgeObjectRelease();
              int64_t v21 = v19 * v20;
              if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63) {
                goto LABEL_37;
              }
              uint64_t result = (void *)((uint64_t (*)(void *))v52)(result);
              if (result[2] < 3uLL) {
                goto LABEL_38;
              }
              uint64_t v22 = result[6];
              uint64_t result = (void *)swift_bridgeObjectRelease();
              int64_t v23 = v14 * v22;
              if ((unsigned __int128)(v14 * (__int128)v22) >> 64 != (v14 * v22) >> 63) {
                goto LABEL_39;
              }
              BOOL v24 = __OFADD__(v21, v23);
              int64_t v25 = v21 + v23;
              if (v24) {
                goto LABEL_40;
              }
              uint64_t result = (void *)(v25 + v16);
              if (__OFADD__(v25, v16)) {
                goto LABEL_41;
              }
              sub_2614D5738();
              uint64_t result = (void *)v49(v53);
              if (!*v26) {
                goto LABEL_50;
              }
              uint64_t v27 = (uint64_t (*)(unsigned char *, void))result;
              uint64_t v28 = v26;
              unint64_t v50 = v16 + 1;
              sub_2614D5718();
              uint64_t v29 = v5;
              sub_2614D5718();
              sub_2614D5718();
              sub_2614D56A8();
              uint64_t v30 = *v28;
              int64_t v31 = v51;
              sub_26149518C(v51, v30);
              sub_2614D56A8();
              uint64_t v32 = *(void *)(v30 + 8 * v31 + 32);
              sub_26149518C(v14, v32);
              uint64_t v33 = v29;
              uint64_t v34 = v42;
              sub_2614D56A8();
              uint64_t v35 = *(void *)(v32 + 8 * v14 + 32);
              sub_26149518C(v16, v35);
              char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
              uint64_t v37 = v35 & 0xFFFFFFFFFFFFFF8;
              if ((isClassOrObjCExistentialType & 1) == 0) {
                uint64_t v37 = v35;
              }
              uint64_t v5 = v33;
              (*(void (**)(unint64_t, char *, uint64_t))(v46 + 40))(v37+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v16, v33, v34);
              uint64_t result = (void *)v27(v53, 0);
              unint64_t v16 = v50;
              uint64_t v15 = v47;
              if (v47 == v50) {
                goto LABEL_11;
              }
            }
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            break;
          }
LABEL_11:
          ++v14;
          uint64_t v13 = v41;
          if (v14 == v41) {
            goto LABEL_5;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        break;
      }
LABEL_5:
      int64_t v12 = v51 + 1;
      uint64_t v11 = v40;
      if (v51 + 1 == v40) {
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_31:
  uint64_t v38 = swift_bridgeObjectRelease();
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 672))(v38);
  if (!result) {
LABEL_51:
  }
    __break(1u);
  return result;
}

void *sub_2614940C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 608);
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v52 - v4;
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(v6 + 720))(v3);
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)v1 + 200);
  uint64_t v8 = *(void *)v1 + 200;
  uint64_t result = (void *)v7();
  if (!result[2])
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v10 = result[4];
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v10 < 0) {
    goto LABEL_72;
  }
  uint64_t v11 = v10;
  if (v10)
  {
    int64_t v12 = 0;
    uint64_t v55 = v59 + 40;
    uint64_t v56 = v8;
    char v57 = v7;
    uint64_t v52 = v10;
    while (v12 != v11)
    {
      int64_t v65 = v12;
      uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
      if (result[2] < 2uLL) {
        goto LABEL_69;
      }
      uint64_t v13 = result[5];
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (v13 < 0) {
        goto LABEL_70;
      }
      uint64_t v14 = v13;
      int64_t v15 = v65;
      if (v13)
      {
        int64_t v16 = 0;
        uint64_t v53 = v13;
        while (v16 != v14)
        {
          int64_t v64 = v16;
          uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
          if (result[2] < 3uLL) {
            goto LABEL_66;
          }
          uint64_t v17 = result[6];
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v17 < 0) {
            goto LABEL_67;
          }
          if (v17)
          {
            int64_t v18 = 0;
            uint64_t v54 = v17;
            while (v18 != v17)
            {
              uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
              if (result[2] < 4uLL) {
                goto LABEL_63;
              }
              uint64_t v19 = result[7];
              uint64_t result = (void *)swift_bridgeObjectRelease();
              if (v19 < 0) {
                goto LABEL_64;
              }
              int64_t v66 = v18;
              if (v19)
              {
                unint64_t v20 = 0;
                int64_t v21 = *(uint64_t (**)(unsigned char *))(*(void *)v1 + 712);
                uint64_t v61 = *(void *)v1 + 712;
                __int16 v62 = v21;
                uint64_t v60 = v19;
                while (v19 != v20)
                {
                  uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
                  if (result[2] < 2uLL) {
                    goto LABEL_47;
                  }
                  uint64_t v22 = result[5];
                  uint64_t result = (void *)swift_bridgeObjectRelease();
                  int64_t v23 = v65 * v22;
                  if ((unsigned __int128)(v65 * (__int128)v22) >> 64 != (v65 * v22) >> 63) {
                    goto LABEL_48;
                  }
                  uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
                  if (result[2] < 3uLL) {
                    goto LABEL_49;
                  }
                  uint64_t v24 = result[6];
                  uint64_t result = (void *)swift_bridgeObjectRelease();
                  int64_t v25 = v23 * v24;
                  if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63) {
                    goto LABEL_50;
                  }
                  uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
                  if (result[2] < 4uLL) {
                    goto LABEL_51;
                  }
                  uint64_t v26 = result[7];
                  uint64_t result = (void *)swift_bridgeObjectRelease();
                  int64_t v27 = v25 * v26;
                  if ((unsigned __int128)(v25 * (__int128)v26) >> 64 != (v25 * v26) >> 63) {
                    goto LABEL_52;
                  }
                  uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
                  if (result[2] < 3uLL) {
                    goto LABEL_53;
                  }
                  uint64_t v28 = result[6];
                  uint64_t result = (void *)swift_bridgeObjectRelease();
                  int64_t v29 = v64 * v28;
                  if ((unsigned __int128)(v64 * (__int128)v28) >> 64 != (v64 * v28) >> 63) {
                    goto LABEL_54;
                  }
                  uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
                  if (result[2] < 4uLL) {
                    goto LABEL_55;
                  }
                  uint64_t v30 = result[7];
                  uint64_t result = (void *)swift_bridgeObjectRelease();
                  int64_t v31 = v29 * v30;
                  if ((unsigned __int128)(v29 * (__int128)v30) >> 64 != (v29 * v30) >> 63) {
                    goto LABEL_56;
                  }
                  BOOL v32 = __OFADD__(v27, v31);
                  int64_t v33 = v27 + v31;
                  if (v32) {
                    goto LABEL_57;
                  }
                  uint64_t result = (void *)((uint64_t (*)(void *))v7)(result);
                  if (result[2] < 4uLL) {
                    goto LABEL_58;
                  }
                  uint64_t v34 = result[7];
                  uint64_t result = (void *)swift_bridgeObjectRelease();
                  unint64_t v35 = v66 * v34;
                  if ((unsigned __int128)(v66 * (__int128)v34) >> 64 != (v66 * v34) >> 63) {
                    goto LABEL_59;
                  }
                  BOOL v32 = __OFADD__(v33, v35);
                  unint64_t v36 = v33 + v35;
                  if (v32) {
                    goto LABEL_60;
                  }
                  uint64_t result = (void *)(v36 + v20);
                  if (__OFADD__(v36, v20)) {
                    goto LABEL_61;
                  }
                  sub_2614D5738();
                  uint64_t v37 = v1;
                  uint64_t result = (void *)v62(v67);
                  if (!*v38) {
                    goto LABEL_73;
                  }
                  uint64_t v39 = (uint64_t (*)(unsigned char *, void))result;
                  uint64_t v40 = v38;
                  unint64_t v63 = v20 + 1;
                  sub_2614D5718();
                  sub_2614D5718();
                  sub_2614D5718();
                  uint64_t v41 = v2;
                  sub_2614D5718();
                  sub_2614D56A8();
                  uint64_t v42 = *v40;
                  int64_t v43 = v65;
                  sub_26149518C(v65, v42);
                  sub_2614D56A8();
                  uint64_t v44 = *(void *)(v42 + 8 * v43 + 32);
                  int64_t v45 = v64;
                  sub_26149518C(v64, v44);
                  sub_2614D56A8();
                  uint64_t v46 = *(void *)(v44 + 8 * v45 + 32);
                  uint64_t v2 = v41;
                  int64_t v47 = v66;
                  sub_26149518C(v66, v46);
                  sub_2614D56A8();
                  uint64_t v48 = *(void *)(v46 + 8 * v47 + 32);
                  sub_26149518C(v20, v48);
                  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
                  uint64_t v50 = v48 & 0xFFFFFFFFFFFFFF8;
                  if ((isClassOrObjCExistentialType & 1) == 0) {
                    uint64_t v50 = v48;
                  }
                  (*(void (**)(unint64_t, char *, uint64_t))(v59 + 40))(v50+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v20, v5, v2);
                  uint64_t result = (void *)v39(v67, 0);
                  unint64_t v20 = v63;
                  uint64_t v19 = v60;
                  uint64_t v1 = v37;
                  uint64_t v7 = v57;
                  if (v60 == v63) {
                    goto LABEL_15;
                  }
                }
                __break(1u);
LABEL_47:
                __break(1u);
LABEL_48:
                __break(1u);
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
LABEL_51:
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
LABEL_58:
                __break(1u);
LABEL_59:
                __break(1u);
LABEL_60:
                __break(1u);
LABEL_61:
                __break(1u);
                break;
              }
LABEL_15:
              int64_t v18 = v66 + 1;
              uint64_t v17 = v54;
              if (v66 + 1 == v54) {
                goto LABEL_42;
              }
            }
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
            break;
          }
LABEL_42:
          int64_t v15 = v65;
          int64_t v16 = v64 + 1;
          uint64_t v14 = v53;
          if (v64 + 1 == v53) {
            goto LABEL_43;
          }
        }
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        break;
      }
LABEL_43:
      int64_t v12 = v15 + 1;
      uint64_t v11 = v52;
      if (v12 == v52) {
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_44:
  uint64_t v51 = swift_bridgeObjectRelease();
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 696))(v51);
  if (!result) {
LABEL_74:
  }
    __break(1u);
  return result;
}

uint64_t sub_2614946C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_261494700()
{
  sub_261494AF8();
  return swift_deallocClassInstance();
}

uint64_t sub_261494734()
{
  uint64_t v1 = sub_2614D4A28();
  MEMORY[0x270FA5388](v1 - 8);
  v23[1] = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_2613C23AC(&qword_26A915B70);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2613C23AC(&qword_26A915B68);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 384);
  uint64_t v13 = v12(v9);
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = v13;
    swift_retain();
    uint64_t v24 = v4;
    uint64_t v25 = v3;
    if (v14)
    {
      uint64_t v15 = sub_2614D56C8();
      *(void *)(v15 + 16) = v14;
    }
    else
    {
      uint64_t v15 = MEMORY[0x263F8EE78];
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v0 + 296))();
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v0 + 592))(v15 + 32, v14, v16, MEMORY[0x263F8E888], MEMORY[0x263F8E8C0]);
    uint64_t v18 = v12(v17);
    if (v14 >= v18)
    {
      *(void *)(v15 + 16) = v18;
      uint64_t v19 = swift_release();
      v12(v19);
      sub_2614D4A48();
      sub_2614D49D8();
      sub_2614D49C8();
      sub_2614D4A38();
      sub_2614D49E8();
      sub_2614D4A18();
      uint64_t v20 = v25;
      uint64_t v21 = sub_2614D49F8();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v20);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      swift_bridgeObjectRelease();
      return v21;
    }
    __break(1u);
  }
  uint64_t result = sub_2614D5D58();
  __break(1u);
  return result;
}

uint64_t sub_261494AF8()
{
  sub_261490070();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_261494B2C()
{
  sub_261490070();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_261494B78()
{
}

void sub_261494BDC()
{
}

uint64_t sub_261494C40()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376))();
}

uint64_t type metadata accessor for VAEspressoV2Input()
{
  return sub_261449E88();
}

uint64_t type metadata accessor for VAEspressoV2Output()
{
  return sub_261449E88();
}

uint64_t sub_261494CBC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_2613C23AC(&qword_26A915B80);
  char v36 = a2;
  uint64_t v6 = sub_2614D5DC8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_2614D6088();
    sub_2614D5478();
    uint64_t result = sub_2614D60B8();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_261494FD4()
{
  uint64_t v1 = v0;
  sub_2613C23AC(&qword_26A915B80);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2614D5DB8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_26149518C(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

void *sub_2614951E0@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void **)(v2 + 16);
  size_t v6 = (*(uint64_t (**)(void))(**(void **)(v2 + 24) + 424))();
  uint64_t result = memcpy(v5, a1, v6);
  *a2 = v5;
  return result;
}

uint64_t sub_261495260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2614D56B8();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    if (a2)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a3 - 8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      uint64_t v12 = a2 - 1;
      if (v12)
      {
        uint64_t v13 = *(void *)(v10 + 72);
        uint64_t v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    sub_2614D5718();
    return v8;
  }
  return result;
}

uint64_t sub_261495364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2613C23AC(&qword_26A915B68);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2613C23AC(&qword_26A915B70);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v20 = v12;
    uint64_t v21 = v7;
    uint64_t v19 = v3;
    uint64_t v23 = a3;
    uint64_t v22 = v6;
    if (a1)
    {
      uint64_t v15 = sub_2614D56C8();
      *(void *)(v15 + 16) = a1;
    }
    else
    {
      uint64_t v15 = MEMORY[0x263F8EE78];
    }
    sub_2614D4A38();
    swift_bridgeObjectRetain();
    sub_2614D49D8();
    sub_2614D4A48();
    sub_2614D49D8();
    sub_2614D4A08();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v20);
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 384))(v16);
    if (v17 <= a1)
    {
      *(void *)(v15 + 16) = v17;
      return v15;
    }
    __break(1u);
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = sub_2614D5D58();
  __break(1u);
  return result;
}

uint64_t sub_26149565C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = (*(uint64_t (**)(void))(*v2 + 296))();
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*v2 + 592))(v5, v6, v7, *(void *)(v4 + 608), *(void *)(v4 + 616));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v2 + 384))(v8);
  *a2 = result;
  return result;
}

uint64_t destroy for VAEspressoModelV2()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for VAEspressoModelV2(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for VAEspressoModelV2(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for VAEspressoModelV2(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VAEspressoModelV2(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for VAEspressoModelV2(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VAEspressoModelV2(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAEspressoModelV2()
{
  return &type metadata for VAEspressoModelV2;
}

uint64_t type metadata accessor for VAEspressoUtilsV2()
{
  return self;
}

uint64_t sub_261495A38()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for VAEspressoV2InputFp32Wrapped(uint64_t a1)
{
  return sub_2613C25C4(a1, qword_26A91E830);
}

uint64_t sub_261495A90()
{
  return swift_initClassMetadata2();
}

uint64_t sub_261495AC8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for VAEspressoV2OutputFp32Wrapped(uint64_t a1)
{
  return sub_2613C25C4(a1, (uint64_t *)&unk_26A91E8C0);
}

uint64_t sub_261495B30()
{
  return swift_initClassMetadata2();
}

float sub_261495B6C()
{
  return 0.00001;
}

uint64_t sub_261495B7C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_261495B88(uint64_t a1, float a2)
{
  uint64_t v2 = sub_261496078(a1, a2);
  uint64_t v3 = sub_261496228(v2, (float (*)(uint64_t, float))sub_2614961D8);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_261495C0C()
{
  return 24;
}

uint64_t sub_261495C14()
{
  return 600;
}

uint64_t sub_261495C1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = result;
    if (a3)
    {
      uint64_t v8 = sub_2614D56C8();
      *(void *)(v8 + 16) = a3;
      bzero((void *)(v8 + 32), 4 * a3);
      uint64_t v9 = sub_2614D56C8();
      *(void *)(v9 + 16) = a3;
      bzero((void *)(v9 + 32), 4 * a3);
    }
    else
    {
      uint64_t v9 = MEMORY[0x263F8EE78];
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    __n128 result = sub_2613D1BF8(v9, a2);
    *a4 = v6;
    a4[1] = a2;
    a4[2] = a3;
    a4[3] = 0;
    a4[4] = v8;
    a4[5] = result;
  }
  return result;
}

uint64_t sub_261495CE0(uint64_t a1)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = v2;
    uint64_t v8 = v2[5];
    v2 += 5;
    uint64_t v7 = v8;
    if (*(v2 - 4) < v6) {
      uint64_t v6 = *(v2 - 4);
    }
    *(v2 - 2) = v6;
    if (*(void *)(v7 + 16))
    {
      uint64_t v4 = a1;
      uint64_t v3 = *(void *)(v7 + 32);
      swift_bridgeObjectRetain();
      sub_2614661C0(0, 1);
      uint64_t v2 = (void *)*v2;
      swift_bridgeObjectRetain();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  uint64_t v2 = sub_26140C714(0, v2[2] + 1, 1, v2);
LABEL_6:
  unint64_t v10 = v2[2];
  unint64_t v9 = v2[3];
  if (v10 >= v9 >> 1) {
    uint64_t v2 = sub_26140C714((void *)(v9 > 1), v10 + 1, 1, v2);
  }
  v2[2] = v10 + 1;
  v2[v10 + 4] = v4;
  v1[5] = v2;
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_261463994(v11, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_261463BB4(v12, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  v1[4] = v13;
  return result;
}

uint64_t sub_261495E48(uint64_t a1)
{
  sub_261495CE0(a1);
  uint64_t v2 = sub_26149633C(*(void *)(v1 + 24), *(void *)(v1 + 32));
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_261463BB4(v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

float sub_261495EC4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (float *)(a1 + 32);
    if (v1 == 1)
    {
      uint64_t v3 = 0;
      float v4 = 0.0;
    }
    else
    {
      uint64_t v3 = v1 & 0x7FFFFFFFFFFFFFFELL;
      unint64_t v10 = (float *)(a1 + 36);
      float v4 = 0.0;
      uint64_t v11 = v1 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        float v4 = (float)(v4 + *(v10 - 1)) + *v10;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v1 == v3)
      {
LABEL_15:
        float v15 = v4 / (float)v1;
        uint64_t v21 = MEMORY[0x263F8EE78];
        sub_2613D917C(0, v1, 0);
        uint64_t v5 = v21;
        unint64_t v16 = *(void *)(v21 + 16);
        do
        {
          float v17 = *v2;
          uint64_t v22 = v5;
          unint64_t v18 = *(void *)(v5 + 24);
          uint64_t v6 = v16 + 1;
          if (v16 >= v18 >> 1)
          {
            sub_2613D917C(v18 > 1, v16 + 1, 1);
            uint64_t v5 = v22;
          }
          *(void *)(v5 + 16) = v6;
          *(float *)(v5 + 4 * v16 + 32) = (float)(v17 - v15) * (float)(v17 - v15);
          ++v2;
          ++v16;
          --v1;
        }
        while (v1);
        goto LABEL_5;
      }
    }
    int64_t v12 = v1 - v3;
    uint64_t v13 = (float *)(a1 + 4 * v3 + 32);
    do
    {
      float v14 = *v13++;
      float v4 = v4 + v14;
      --v12;
    }
    while (v12);
    goto LABEL_15;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v6)
  {
    float v8 = 0.0;
    goto LABEL_23;
  }
LABEL_5:
  if ((unint64_t)v6 >= 2)
  {
    uint64_t v9 = 0;
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    float v8 = 0.0;
    do
    {
      float v8 = (float)(v8 + *(float *)(v5 + 4 * v9 + 32)) + *(float *)(v5 + 4 * v9 + 36);
      v9 += 2;
    }
    while (v7 != v9);
    goto LABEL_22;
  }
  unint64_t v7 = 0;
  float v8 = 0.0;
  do
  {
    float v19 = *(float *)(v5 + 4 * v7++ + 32);
    float v8 = v8 + v19;
LABEL_22:
    ;
  }
  while (v6 != v7);
LABEL_23:
  swift_bridgeObjectRelease();
  return v8 / (float)v6;
}

uint64_t sub_261496078(uint64_t a1, float a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    sub_261495EC4(a1);
    return MEMORY[0x263F8EE78];
  }
  float v4 = (float *)(a1 + 32);
  if (v2 == 1)
  {
    uint64_t v5 = 0;
    float v6 = 0.0;
LABEL_8:
    int64_t v10 = v2 - v5;
    uint64_t v11 = (float *)(a1 + 4 * v5 + 32);
    do
    {
      float v12 = *v11++;
      float v6 = v6 + v12;
      --v10;
    }
    while (v10);
    goto LABEL_10;
  }
  uint64_t v5 = v2 & 0x7FFFFFFFFFFFFFFELL;
  float v8 = (float *)(a1 + 36);
  float v6 = 0.0;
  uint64_t v9 = v2 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    float v6 = (float)(v6 + *(v8 - 1)) + *v8;
    v8 += 2;
    v9 -= 2;
  }
  while (v9);
  if (v2 != v5) {
    goto LABEL_8;
  }
LABEL_10:
  float v13 = v6 / (float)v2;
  float v14 = sub_261495EC4(a1);
  uint64_t v19 = MEMORY[0x263F8EE78];
  sub_2613D917C(0, v2, 0);
  uint64_t result = v19;
  unint64_t v15 = *(void *)(v19 + 16);
  float v16 = sqrtf(v14 + a2);
  do
  {
    float v17 = *v4;
    uint64_t v20 = result;
    unint64_t v18 = *(void *)(result + 24);
    if (v15 >= v18 >> 1)
    {
      sub_2613D917C(v18 > 1, v15 + 1, 1);
      uint64_t result = v20;
    }
    *(void *)(result + 16) = v15 + 1;
    *(float *)(result + 4 * v15 + 32) = (float)(v17 - v13) / v16;
    ++v4;
    ++v15;
    --v2;
  }
  while (v2);
  return result;
}

unint64_t sub_2614961D8(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(*(void *)(v1 + 16) + 16) <= result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)(v1 + 24) + 16) <= result) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_261496228(uint64_t a1, float (*a2)(uint64_t, float))
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  sub_2613D917C(0, 0, 0);
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      float v7 = a2(v5, *(float *)(v6 + 4 * v5));
      unint64_t v9 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      if (v9 >= v8 >> 1) {
        sub_2613D917C(v8 > 1, v9 + 1, 1);
      }
      ++v5;
      *(void *)(v11 + 16) = v9 + 1;
      *(float *)(v11 + 4 * v9 + 32) = v7;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_26149633C(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    float v5 = (float)a1;
    uint64_t v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_2613D917C(0, v2, 0);
    uint64_t v6 = 0;
    uint64_t v3 = v11;
    unint64_t v7 = *(void *)(v11 + 16);
    do
    {
      float v8 = *(float *)(a2 + 4 * v6 + 32);
      unint64_t v9 = *(void *)(v11 + 24);
      if (v7 >= v9 >> 1) {
        sub_2613D917C(v9 > 1, v7 + 1, 1);
      }
      ++v6;
      *(void *)(v11 + 16) = v7 + 1;
      *(float *)(v11 + 4 * v7++ + 32) = v8 / v5;
    }
    while (v2 != v6);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t destroy for VALayerNorm()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s12VoiceActions11VALayerNormVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VALayerNorm(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for VALayerNorm(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VALayerNorm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for VALayerNorm(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VALayerNorm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VALayerNorm()
{
  return &type metadata for VALayerNorm;
}

uint64_t destroy for VACMVN()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VACMVN(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for VACMVN(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for VACMVN(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VACMVN(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VACMVN(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VACMVN()
{
  return &type metadata for VACMVN;
}

uint64_t sub_2614967EC()
{
  return 0;
}

uint64_t sub_2614967F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X8>, float a9@<S0>, double a10@<D1>, double a11@<D2>)
{
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(float *)(a8 + 16) = a9;
  *(double *)(a8 + 24) = a10;
  *(double *)(a8 + 32) = a11;
  *(void *)(a8 + 40) = a3;
  *(void *)(a8 + 48) = a4;
  *(unsigned char *)(a8 + 56) = a5;
  *(unsigned char *)(a8 + 57) = a6;
  *(unsigned char *)(a8 + 58) = a7;
  return result;
}

uint64_t sub_261496814(unsigned __int8 *a1, char *a2)
{
  return sub_2614968D4(*a1, *a2);
}

uint64_t sub_261496820(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6F69746365746564;
  }
  else {
    uint64_t v3 = 0x4164726F7779656BLL;
  }
  if (v2) {
    unint64_t v4 = 0xEC0000006F696475;
  }
  else {
    unint64_t v4 = 0xEA0000000000736ELL;
  }
  if (a2) {
    uint64_t v5 = 0x6F69746365746564;
  }
  else {
    uint64_t v5 = 0x4164726F7779656BLL;
  }
  if (a2) {
    unint64_t v6 = 0xEA0000000000736ELL;
  }
  else {
    unint64_t v6 = 0xEC0000006F696475;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2614D5FB8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2614968D4(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x64726F7779656BLL;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x64726F7779656BLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x65726F6373;
      break;
    case 2:
      uint64_t v5 = 0x4265636E656C6973;
      unint64_t v3 = 0xED000065726F6665;
      break;
    case 3:
      uint64_t v5 = 0x7544686365657073;
      unint64_t v3 = 0xEC000000676E6972;
      break;
    case 4:
      uint64_t v5 = 0x4165636E656C6973;
      unint64_t v3 = 0xEC00000072657466;
      break;
    case 5:
      uint64_t v5 = 0x6172467472617473;
      unint64_t v3 = 0xEA0000000000656DLL;
      break;
    case 6:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x656D617246646E65;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x65726F6373) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xED000065726F6665;
      if (v5 != 0x4265636E656C6973) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      uint64_t v7 = 0x7544686365657073;
      uint64_t v8 = 1735289202;
      goto LABEL_15;
    case 4:
      uint64_t v7 = 0x4165636E656C6973;
      uint64_t v8 = 1919251558;
LABEL_15:
      unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      if (v5 != v7) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v2 = 0x6172467472617473;
      unint64_t v6 = 0xEA0000000000656DLL;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x656D617246646E65) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v9 = 1;
      }
      else {
LABEL_22:
      }
        char v9 = sub_2614D5FB8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_261496B4C()
{
  return sub_261496C94();
}

uint64_t sub_261496B58()
{
  sub_2614D5478();
  return swift_bridgeObjectRelease();
}

uint64_t sub_261496C8C()
{
  return sub_261496C94();
}

uint64_t sub_261496C94()
{
  return sub_2614D60B8();
}

uint64_t sub_261496DDC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_26149B248();
  *a1 = result;
  return result;
}

void sub_261496E0C(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x64726F7779656BLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x65726F6373;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "silenceBefore");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 3:
      strcpy((char *)a1, "speechDuring");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      strcpy((char *)a1, "silenceAfter");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 5:
      *(void *)a1 = 0x6172467472617473;
      *(void *)(a1 + 8) = 0xEA0000000000656DLL;
      break;
    case 6:
      *(void *)a1 = 0x656D617246646E65;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_261496F24()
{
  uint64_t result = 0x64726F7779656BLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65726F6373;
      break;
    case 2:
      uint64_t result = 0x4265636E656C6973;
      break;
    case 3:
      uint64_t result = 0x7544686365657073;
      break;
    case 4:
      uint64_t result = 0x4165636E656C6973;
      break;
    case 5:
      uint64_t result = 0x6172467472617473;
      break;
    case 6:
      uint64_t result = 0x656D617246646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_261497024@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_26149B248();
  *a1 = result;
  return result;
}

uint64_t sub_26149704C(uint64_t a1)
{
  unint64_t v2 = sub_26149B294();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_261497088(uint64_t a1)
{
  unint64_t v2 = sub_26149B294();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VAKeywordDetection.encode(to:)(void *a1)
{
  uint64_t v3 = sub_2613C23AC(&qword_26A915CA0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  int v7 = *(unsigned __int8 *)(v1 + 56);
  int v12 = *(unsigned __int8 *)(v1 + 57);
  int v13 = v7;
  int v11 = *(unsigned __int8 *)(v1 + 58);
  sub_2613DBF24(a1, a1[3]);
  sub_26149B294();
  sub_2614D60F8();
  char v22 = 0;
  uint64_t v8 = v15;
  sub_2614D5F18();
  if (!v8)
  {
    char v21 = 1;
    sub_2614D5F38();
    char v20 = 2;
    sub_2614D5F28();
    char v19 = 3;
    sub_2614D5F28();
    char v18 = 4;
    sub_2614D5F28();
    char v17 = 5;
    sub_2614D5F68();
    char v16 = 6;
    sub_2614D5F68();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t VAKeywordDetection.description.getter()
{
  int v1 = *(_DWORD *)(v0 + 16);
  if (*(unsigned char *)(v0 + 56)) {
    uint64_t v2 = 0x3E6C69733CLL;
  }
  else {
    uint64_t v2 = 0x3E6863656570733CLL;
  }
  if (*(unsigned char *)(v0 + 58))
  {
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    uint64_t v7 = v2;
    swift_bridgeObjectRetain();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    uint64_t v7 = v2;
    sub_2614D54D8();
    swift_bridgeObjectRetain();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    sub_2614D54D8();
  }
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  sub_2613C23AC(qword_26A914E40);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x263F8D5C8];
  *(_OWORD *)(v3 + 16) = xmmword_2614D81E0;
  uint64_t v5 = MEMORY[0x263F8D648];
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = v5;
  *(_DWORD *)(v3 + 32) = v1;
  sub_2614D53E8();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  sub_2614D54D8();
  return v7;
}

uint64_t sub_2614975A8(void *a1)
{
  return VAKeywordDetection.encode(to:)(a1);
}

uint64_t VAKeywordResult.__allocating_init(detections:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t VAKeywordResult.init(detections:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t static VAKeywordResult.buildFromScoresMap(scores:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  char v9 = (void *)MEMORY[0x263F8EE78];
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    int v18 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * i);
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_261416300(0, v9[2] + 1, 1, v9);
      char v9 = (void *)result;
    }
    unint64_t v20 = v9[2];
    unint64_t v19 = v9[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t result = (uint64_t)sub_261416300((void *)(v19 > 1), v20 + 1, 1, v9);
      char v9 = (void *)result;
    }
    v9[2] = v20 + 1;
    char v21 = &v9[8 * v20];
    v21[4] = v17;
    v21[5] = v16;
    *((_DWORD *)v21 + 12) = v18;
    *(_OWORD *)(v21 + 7) = 0u;
    *(_OWORD *)(v21 + 9) = 0u;
    *((_WORD *)v21 + 44) = 0;
    *((unsigned char *)v21 + 90) = 1;
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v6) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v5 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v6)
  {
LABEL_25:
    swift_release();
    type metadata accessor for VAKeywordResult();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v9;
    return result;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_261497800()
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void))(*(void *)v0 + 88))();
  swift_bridgeObjectRetain();
  sub_261499FB4(&v2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_261497884()
{
  uint64_t v1 = (void *)sub_261497A68(MEMORY[0x263F8EE78]);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  uint64_t v4 = (_DWORD *)(v2 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v4 - 2);
    uint64_t v5 = *((void *)v4 - 1);
    int v7 = *v4;
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v10 = sub_2613D8F00(v6, v5);
    uint64_t v11 = v1[2];
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    char v14 = v9;
    if (v1[3] >= v13)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v9) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_26149AD80();
        if (v14) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_26149AA78(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v15 = sub_2613D8F00(v6, v5);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_19;
      }
      unint64_t v10 = v15;
      if (v14)
      {
LABEL_3:
        *(_DWORD *)(v1[7] + 4 * v10) = v7;
        goto LABEL_4;
      }
    }
    v1[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v17 = (uint64_t *)(v1[6] + 16 * v10);
    *uint64_t v17 = v6;
    v17[1] = v5;
    *(_DWORD *)(v1[7] + 4 * v10) = v7;
    uint64_t v18 = v1[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_18;
    }
    v1[2] = v20;
    swift_bridgeObjectRetain();
LABEL_4:
    v4 += 16;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!--v3) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = sub_2614D5FF8();
  __break(1u);
  return result;
}

unint64_t sub_261497A68(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_2613C23AC(&qword_26A915D18);
  uint64_t v2 = (void *)sub_2614D5DD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    int v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_2613D8F00(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_261497B7C()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 120))();
  uint64_t v2 = (void *)sub_261497A68(MEMORY[0x263F8EE78]);
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  uint64_t v4 = (_DWORD *)(v1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v4 - 2);
    uint64_t v5 = *((void *)v4 - 1);
    int v7 = *v4;
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v10 = sub_2613D8F00(v6, v5);
    uint64_t v11 = v2[2];
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    char v14 = v9;
    if (v2[3] >= v13)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v9) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_26149AD80();
        if (v14) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_26149AA78(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v15 = sub_2613D8F00(v6, v5);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_19;
      }
      unint64_t v10 = v15;
      if (v14)
      {
LABEL_3:
        *(_DWORD *)(v2[7] + 4 * v10) = v7;
        goto LABEL_4;
      }
    }
    v2[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v17 = (uint64_t *)(v2[6] + 16 * v10);
    *uint64_t v17 = v6;
    v17[1] = v5;
    *(_DWORD *)(v2[7] + 4 * v10) = v7;
    uint64_t v18 = v2[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_18;
    }
    v2[2] = v20;
    swift_bridgeObjectRetain();
LABEL_4:
    v4 += 16;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!--v3) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = sub_2614D5FF8();
  __break(1u);
  return result;
}

double sub_261497D5C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)((*(uint64_t (**)(void))(*(void *)v1 + 88))() + 16);
  uint64_t v4 = swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v4);
  uint64_t v6 = v5;
  if (!v5[2])
  {
    swift_bridgeObjectRelease();
LABEL_7:
    double result = 0.0;
    *(_OWORD *)(a1 + 43) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return result;
  }
  uint64_t v8 = v5[4];
  uint64_t v7 = v5[5];
  int v9 = *((_DWORD *)v6 + 12);
  char v10 = *((unsigned char *)v6 + 88);
  char v11 = *((unsigned char *)v6 + 89);
  char v12 = *((unsigned char *)v6 + 90);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v6 + 7);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v6 + 9);
  *(unsigned char *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 57) = v11;
  *(unsigned char *)(a1 + 58) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_261497E5C()
{
  uint64_t v1 = VARuntimeParameters.keywordsToThresholds.getter();
  uint64_t v2 = sub_26149A020(v1);
  uint64_t v3 = swift_bridgeObjectRelease();
  uint64_t v24 = v0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 88))(v3);
  uint64_t v5 = result;
  uint64_t v26 = *(void *)(result + 16);
  if (v26)
  {
    unint64_t v6 = 0;
    uint64_t v32 = v2[2];
    uint64_t v27 = result + 32;
    uint64_t v23 = v2 + 9;
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v25 = result;
    while (1)
    {
      if (v6 >= *(void *)(v5 + 16))
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v8 = v27 + (v6 << 6);
      uint64_t v10 = *(void *)v8;
      uint64_t v9 = *(void *)(v8 + 8);
      if (!v32) {
        goto LABEL_34;
      }
      int v11 = *(_DWORD *)(v8 + 16);
      long long v30 = *(_OWORD *)(v8 + 40);
      long long v31 = *(_OWORD *)(v8 + 24);
      char v12 = *(unsigned char *)(v8 + 56);
      char v28 = *(unsigned char *)(v8 + 58);
      char v29 = *(unsigned char *)(v8 + 57);
      uint64_t v13 = v2;
      BOOL v14 = v2[4] == v10 && v2[5] == v9;
      if (!v14 && (sub_2614D5FB8() & 1) == 0)
      {
        if (v32 == 1) {
          goto LABEL_33;
        }
        if (v2[6] != v10 || v2[7] != v9)
        {
          uint64_t result = sub_2614D5FB8();
          if ((result & 1) == 0) {
            break;
          }
        }
      }
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_261416300(0, v7[2] + 1, 1, v7);
        uint64_t v7 = (void *)result;
      }
      unint64_t v16 = v7[2];
      unint64_t v15 = v7[3];
      if (v16 >= v15 >> 1)
      {
        uint64_t result = (uint64_t)sub_261416300((void *)(v15 > 1), v16 + 1, 1, v7);
        uint64_t v7 = (void *)result;
      }
      ++v6;
      void v7[2] = v16 + 1;
      uint64_t v17 = &v7[8 * v16];
      v17[4] = v10;
      v17[5] = v9;
      *((_DWORD *)v17 + 12) = v11;
      *(_OWORD *)(v17 + 7) = v31;
      *(_OWORD *)(v17 + 9) = v30;
      *((unsigned char *)v17 + 88) = v12;
      *((unsigned char *)v17 + 89) = v29;
      *((unsigned char *)v17 + 90) = v28;
      uint64_t v5 = v25;
      uint64_t v2 = v13;
      if (v6 == v26)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(void *))(*(void *)v24 + 96))(v7);
      }
    }
    if (v32 == 2)
    {
LABEL_33:
      uint64_t v2 = v13;
LABEL_34:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2614D5C38();
      swift_bridgeObjectRelease();
      sub_2614D54D8();
      swift_bridgeObjectRelease();
      sub_2614D54D8();
      MEMORY[0x263E36790](v2, MEMORY[0x263F8D310]);
      sub_2614D54D8();
      swift_release();
      swift_bridgeObjectRelease();
      sub_2613DC2B8();
      swift_allocError();
      *char v22 = 0xD000000000000011;
      v22[1] = 0x80000002614E6CF0;
      return swift_willThrow();
    }
    uint64_t v18 = v23;
    uint64_t v19 = 2;
    while (1)
    {
      uint64_t v20 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        break;
      }
      if (*(v18 - 1) == v10 && *v18 == v9) {
        goto LABEL_14;
      }
      uint64_t result = sub_2614D5FB8();
      if (result) {
        goto LABEL_14;
      }
      v18 += 2;
      ++v19;
      if (v20 == v32) {
        goto LABEL_33;
      }
    }
LABEL_36:
    __break(1u);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    return (*(uint64_t (**)(void *))(*(void *)v24 + 96))(v7);
  }
  return result;
}

uint64_t sub_2614982D0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 120))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 90;
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v5 = VAKeywordDetection.description.getter();
      uint64_t v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_2613D864C(0, v4[2] + 1, 1, v4);
      }
      unint64_t v9 = v4[2];
      unint64_t v8 = v4[3];
      if (v9 >= v8 >> 1) {
        uint64_t v4 = sub_2613D864C((void *)(v8 > 1), v9 + 1, 1, v4);
      }
      v3 += 64;
      v4[2] = v9 + 1;
      uint64_t v10 = &v4[2 * v9];
      v10[4] = v5;
      v10[5] = v7;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  sub_2613C23AC(&qword_26A914A70);
  sub_2613DCEC0();
  uint64_t v11 = sub_2614D5338();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_261498464()
{
  return sub_2614D60B8();
}

uint64_t sub_2614984A8()
{
  return sub_2614D6098();
}

uint64_t sub_2614984D0()
{
  return sub_2614D60B8();
}

uint64_t sub_261498510()
{
  return 0x6F69746365746564;
}

uint64_t sub_26149852C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6F69746365746564 && a2 == 0xEA0000000000736ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_2614D5FB8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2614985D0(uint64_t a1)
{
  unint64_t v2 = sub_26149B30C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_26149860C(uint64_t a1)
{
  unint64_t v2 = sub_26149B30C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VAKeywordResult.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAKeywordResult.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2614986A0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2613C23AC(&qword_26A915CB0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2613DBF24(a1, a1[3]);
  sub_26149B30C();
  uint64_t v8 = sub_2614D60F8();
  v10[1] = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v8);
  sub_2613C23AC(&qword_26A915CB8);
  sub_26149B360();
  sub_2614D5F58();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_261498824()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_261498868()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_2614988AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  swift_beginAccess();
  return sub_26149B428(v3, a1);
}

uint64_t sub_261498900(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  swift_beginAccess();
  sub_26149B490(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_26149895C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614989B8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261498A00(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_261498A4C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261498AA8()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_261498AF0(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_261498B3C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261498B98()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_261498BE4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_audioBytes);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_261498C38())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261498C94()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261498CDC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_261498D28())()
{
  return j_j__swift_endAccess;
}

double sub_261498D84()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t sub_261498DCC(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_261498E20())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261498E7C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261498EC4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_261498F10())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_261498F6C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_261498FB4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_261499000())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_26149905C(char *a1, char *a2)
{
  return sub_261496820(*a1, *a2);
}

uint64_t sub_261499068()
{
  return sub_2614D60B8();
}

uint64_t sub_2614990F8()
{
  sub_2614D5478();
  return swift_bridgeObjectRelease();
}

uint64_t sub_261499174()
{
  return sub_2614D60B8();
}

uint64_t sub_261499200@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2614D5E08();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_261499260(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x4164726F7779656BLL;
  if (*v1) {
    uint64_t v2 = 0x6F69746365746564;
  }
  unint64_t v3 = 0xEC0000006F696475;
  if (*v1) {
    unint64_t v3 = 0xEA0000000000736ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2614992AC()
{
  if (*v0) {
    return 0x6F69746365746564;
  }
  else {
    return 0x4164726F7779656BLL;
  }
}

uint64_t sub_2614992F4@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2614D5E08();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_261499358(uint64_t a1)
{
  unint64_t v2 = sub_26149B4F8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_261499394(uint64_t a1)
{
  unint64_t v2 = sub_26149B4F8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2614993D0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2613C23AC(&qword_26A915CD0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2613DBF24(a1, a1[3]);
  sub_26149B4F8();
  uint64_t v8 = sub_2614D60F8();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v8);
  v10[7] = 1;
  sub_2613C23AC(&qword_26A915CB8);
  sub_26149B360();
  sub_2614D5F58();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_261499560()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2613C23AC(&qword_26A914EE0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2614D4CE8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  __int16 v62 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(double (**)(uint64_t))(*(void *)v0 + 360);
  if (v9(v7) <= 0.0)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    v66[0] = 0;
    v66[1] = 0xE000000000000000;
    sub_2614D5C38();
    uint64_t v10 = sub_2614D54D8();
    v9(v10);
    sub_2614D5848();
    sub_2614D54D8();
    uint64_t v11 = v66[0];
    uint64_t v12 = v66[1];
    uint64_t v13 = sub_2613D864C(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v15 = v13[2];
    unint64_t v14 = v13[3];
    if (v15 >= v14 >> 1) {
      uint64_t v13 = sub_2613D864C((void *)(v14 > 1), v15 + 1, 1, v13);
    }
    v13[2] = v15 + 1;
    unint64_t v16 = &v13[2 * v15];
    v16[4] = v11;
    v16[5] = v12;
  }
  uint64_t v63 = v6;
  uint64_t v64 = v5;
  uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v0 + 120))();
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = (char *)(v17 + 90);
    do
    {
      uint64_t v20 = *(void *)(v19 - 50);
      int v21 = *(_DWORD *)(v19 - 42);
      char v22 = *(v19 - 2);
      char v23 = *(v19 - 1);
      char v24 = *v19;
      v66[0] = *(void *)(v19 - 58);
      v66[1] = v20;
      int v67 = v21;
      long long v68 = *(_OWORD *)(v19 - 34);
      long long v69 = *(_OWORD *)(v19 - 18);
      char v70 = v22;
      char v71 = v23;
      char v72 = v24;
      uint64_t v25 = VAKeywordDetection.description.getter();
      uint64_t v27 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_2613D864C(0, v13[2] + 1, 1, v13);
      }
      unint64_t v29 = v13[2];
      unint64_t v28 = v13[3];
      if (v29 >= v28 >> 1) {
        uint64_t v13 = sub_2613D864C((void *)(v28 > 1), v29 + 1, 1, v13);
      }
      v19 += 64;
      v13[2] = v29 + 1;
      long long v30 = &v13[2 * v29];
      v30[4] = v25;
      v30[5] = v27;
      --v18;
    }
    while (v18);
  }
  uint64_t v31 = swift_bridgeObjectRelease();
  strcpy((char *)v66, "hostTime: ");
  BYTE3(v66[1]) = 0;
  HIDWORD(v66[1]) = -369098752;
  uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 264))(v31);
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  uint64_t v32 = v66[0];
  uint64_t v33 = v66[1];
  int64_t v34 = sub_2613D864C(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v36 = v34[2];
  unint64_t v35 = v34[3];
  if (v36 >= v35 >> 1) {
    int64_t v34 = sub_2613D864C((void *)(v35 > 1), v36 + 1, 1, v34);
  }
  uint64_t v37 = v63;
  v34[2] = v36 + 1;
  uint64_t v38 = &v34[2 * v36];
  v38[4] = v32;
  void v38[5] = v33;
  (*(void (**)(void))(*(void *)v1 + 240))();
  uint64_t v39 = v64;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v4, 1, v64) == 1)
  {
    sub_26149B54C((uint64_t)v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v62, v4, v39);
    sub_26149B5AC();
    sub_2614D5F88();
    v66[0] = 3826793;
    v66[1] = 0xE300000000000000;
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    uint64_t v40 = v66[0];
    uint64_t v41 = v66[1];
    unint64_t v43 = v34[2];
    unint64_t v42 = v34[3];
    if (v43 >= v42 >> 1) {
      int64_t v34 = sub_2613D864C((void *)(v42 > 1), v43 + 1, 1, v34);
    }
    v34[2] = v43 + 1;
    uint64_t v44 = &v34[2 * v43];
    v44[4] = v40;
    v44[5] = v41;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v62, v39);
  }
  v66[0] = v13;
  sub_2613C23AC(&qword_26A914A70);
  sub_2613DCEC0();
  sub_2614D5338();
  swift_bridgeObjectRelease();
  v66[0] = 91;
  v66[1] = 0xE100000000000000;
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  uint64_t v45 = v66[0];
  uint64_t v46 = v66[1];
  unint64_t v48 = v34[2];
  unint64_t v47 = v34[3];
  if (v48 >= v47 >> 1) {
    int64_t v34 = sub_2613D864C((void *)(v47 > 1), v48 + 1, 1, v34);
  }
  v34[2] = v48 + 1;
  uint64_t v49 = &v34[2 * v48];
  v49[4] = v45;
  v49[5] = v46;
  strcpy((char *)v66, "startFrame: ");
  BYTE5(v66[1]) = 0;
  HIWORD(v66[1]) = -5120;
  uint64_t v65 = (*(uint64_t (**)(void))(*(void *)v1 + 384))();
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  uint64_t v50 = v66[0];
  uint64_t v51 = v66[1];
  unint64_t v53 = v34[2];
  unint64_t v52 = v34[3];
  if (v53 >= v52 >> 1) {
    int64_t v34 = sub_2613D864C((void *)(v52 > 1), v53 + 1, 1, v34);
  }
  v34[2] = v53 + 1;
  uint64_t v54 = &v34[2 * v53];
  v54[4] = v50;
  v54[5] = v51;
  strcpy((char *)v66, "endFrame: ");
  BYTE3(v66[1]) = 0;
  HIDWORD(v66[1]) = -369098752;
  uint64_t v65 = (*(uint64_t (**)(void))(*(void *)v1 + 408))();
  sub_2614D5F88();
  sub_2614D54D8();
  swift_bridgeObjectRelease();
  uint64_t v55 = v66[0];
  uint64_t v56 = v66[1];
  unint64_t v58 = v34[2];
  unint64_t v57 = v34[3];
  if (v58 >= v57 >> 1) {
    int64_t v34 = sub_2613D864C((void *)(v57 > 1), v58 + 1, 1, v34);
  }
  v34[2] = v58 + 1;
  uint64_t v59 = &v34[2 * v58];
  v59[4] = v55;
  v59[5] = v56;
  v66[0] = v34;
  uint64_t v60 = sub_2614D5338();
  swift_bridgeObjectRelease();
  return v60;
}

uint64_t VAInstrumentedKeywordResult.__allocating_init(detections:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  uint64_t v4 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime) = 0;
  *(_DWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_audioBytes) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame) = 0;
  *(void *)(v2 + 16) = a1;
  return v2;
}

uint64_t VAInstrumentedKeywordResult.init(detections:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  uint64_t v4 = sub_2614D4CE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime) = 0;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_audioBytes) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame) = 0;
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_261499EB8()
{
  sub_26149B54C(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid);
  return swift_bridgeObjectRelease();
}

uint64_t VAInstrumentedKeywordResult.deinit()
{
  swift_bridgeObjectRelease();
  sub_26149B54C(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAInstrumentedKeywordResult.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  sub_26149B54C(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_261499FB4(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_26149B034((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_26149A108(v5);
  *a1 = v2;
  return result;
}

void *sub_26149A020(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_2613C23AC(&qword_26A914AC8);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_26149B048((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_2614288C0();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_26149A108(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_2614D5F78();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_142;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v99 = *a1;
      uint64_t v100 = *a1 + 64;
      uint64_t v101 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v103 = v100;
        uint64_t v104 = v101;
        do
        {
          float v105 = *(float *)(v103 + 16);
          if (*(float *)(v103 - 48) >= v105) {
            break;
          }
          if (!v99) {
            goto LABEL_146;
          }
          uint64_t v106 = *(void *)v103;
          uint64_t v107 = *(void *)(v103 + 8);
          char v108 = *(unsigned char *)(v103 + 56);
          char v109 = *(unsigned char *)(v103 + 57);
          uint64_t result = *(unsigned __int8 *)(v103 + 58);
          long long v110 = *(_OWORD *)(v103 + 24);
          long long v111 = *(_OWORD *)(v103 + 40);
          long long v112 = *(_OWORD *)(v103 - 48);
          *(_OWORD *)uint64_t v103 = *(_OWORD *)(v103 - 64);
          *(_OWORD *)(v103 + 16) = v112;
          long long v113 = *(_OWORD *)(v103 - 16);
          *(_OWORD *)(v103 + 32) = *(_OWORD *)(v103 - 32);
          *(_OWORD *)(v103 + 48) = v113;
          *(void *)(v103 - 56) = v107;
          *(float *)(v103 - 48) = v105;
          *(_OWORD *)(v103 - 40) = v110;
          *(_OWORD *)(v103 - 24) = v111;
          *(unsigned char *)(v103 - 8) = v108;
          *(unsigned char *)(v103 - 7) = v109;
          *(unsigned char *)(v103 - 6) = result;
          *(void *)(v103 - 64) = v106;
          v103 -= 64;
        }
        while (!__CFADD__(v104++, 1));
        --v101;
        v100 += 64;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_141;
    }
    uint64_t v6 = result;
    uint64_t v130 = v1;
    uint64_t v122 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      uint64_t result = sub_2614D56C8();
      *(void *)(result + 16) = v7;
      uint64_t v125 = result;
      uint64_t v129 = (float *)(result + 32);
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v123 = *a1 + 144;
      uint64_t v124 = *a1 + 16;
      uint64_t v11 = MEMORY[0x263F8EE78];
      uint64_t v126 = v6;
      uint64_t v127 = v3;
      uint64_t v128 = v10;
      while (1)
      {
        uint64_t v13 = v9++;
        if (v9 < v3)
        {
          float v14 = *(float *)(v124 + (v9 << 6));
          uint64_t v15 = v13 << 6;
          float v16 = *(float *)(v124 + (v13 << 6));
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            uint64_t v17 = (float *)(v123 + (v13 << 6));
            while (v16 < v14 != *(v17 - 16) >= *v17)
            {
              ++v9;
              v17 += 16;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }
          if (v16 < v14)
          {
            if (v9 < v13) {
              goto LABEL_143;
            }
            if (v13 < v9)
            {
              uint64_t v18 = (v9 << 6) - 64;
              uint64_t v19 = v9;
              uint64_t v20 = v13;
              do
              {
                if (v20 != --v19)
                {
                  if (!v10) {
                    goto LABEL_149;
                  }
                  uint64_t v25 = (long long *)(v10 + v15);
                  uint64_t v26 = (long long *)(v10 + v18);
                  uint64_t v27 = *(void *)(v10 + v15);
                  uint64_t v28 = *(void *)(v10 + v15 + 8);
                  int v29 = *(_DWORD *)(v10 + v15 + 16);
                  long long v30 = *(_OWORD *)(v10 + v15 + 24);
                  long long v31 = *(_OWORD *)(v10 + v15 + 40);
                  char v32 = *(unsigned char *)(v10 + v15 + 56);
                  char v33 = *(unsigned char *)(v10 + v15 + 57);
                  char v34 = *(unsigned char *)(v10 + v15 + 58);
                  if (v15 != v18 || (uint64_t result = (uint64_t)(v26 + 4), v25 >= v26 + 4))
                  {
                    long long v21 = *v26;
                    long long v22 = v26[1];
                    long long v23 = v26[3];
                    v25[2] = v26[2];
                    v25[3] = v23;
                    *uint64_t v25 = v21;
                    v25[1] = v22;
                  }
                  uint64_t v24 = v10 + v18;
                  *(void *)uint64_t v24 = v27;
                  *(void *)(v24 + 8) = v28;
                  *(_DWORD *)(v24 + 16) = v29;
                  *(_OWORD *)(v24 + 24) = v30;
                  *(_OWORD *)(v24 + 40) = v31;
                  *(unsigned char *)(v24 + 56) = v32;
                  *(unsigned char *)(v24 + 57) = v33;
                  *(unsigned char *)(v24 + 58) = v34;
                }
                ++v20;
                v18 -= 64;
                v15 += 64;
              }
              while (v20 < v19);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_140;
          }
          if (v9 - v13 < v6)
          {
            uint64_t v35 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_144;
            }
            if (v35 >= v3) {
              uint64_t v35 = v3;
            }
            if (v35 < v13)
            {
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              return result;
            }
            if (v9 != v35)
            {
              unint64_t v36 = (uint64_t *)(v10 + (v9 << 6));
              do
              {
                uint64_t v37 = v36;
                uint64_t v38 = v13;
                do
                {
                  float v39 = *((float *)v37 + 4);
                  if (*((float *)v37 - 12) >= v39) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_147;
                  }
                  uint64_t v40 = *v37;
                  uint64_t v41 = v37[1];
                  char v42 = *((unsigned char *)v37 + 56);
                  char v43 = *((unsigned char *)v37 + 57);
                  char v44 = *((unsigned char *)v37 + 58);
                  long long v45 = *(_OWORD *)(v37 + 3);
                  long long v46 = *(_OWORD *)(v37 + 5);
                  long long v47 = *((_OWORD *)v37 - 3);
                  *(_OWORD *)uint64_t v37 = *((_OWORD *)v37 - 4);
                  *((_OWORD *)v37 + 1) = v47;
                  long long v48 = *((_OWORD *)v37 - 1);
                  *((_OWORD *)v37 + 2) = *((_OWORD *)v37 - 2);
                  *((_OWORD *)v37 + 3) = v48;
                  *(v37 - 7) = v41;
                  *((float *)v37 - 12) = v39;
                  *(_OWORD *)(v37 - 5) = v45;
                  *(_OWORD *)(v37 - 3) = v46;
                  *((unsigned char *)v37 - 8) = v42;
                  *((unsigned char *)v37 - 7) = v43;
                  *((unsigned char *)v37 - 6) = v44;
                  ++v38;
                  *(v37 - 8) = v40;
                  v37 -= 8;
                }
                while (v9 != v38);
                ++v9;
                v36 += 8;
              }
              while (v9 != v35);
              uint64_t v9 = v35;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_135;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_26140F420(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v50 = *(void *)(v11 + 16);
        unint64_t v49 = *(void *)(v11 + 24);
        unint64_t v12 = v50 + 1;
        uint64_t v10 = v128;
        if (v50 >= v49 >> 1)
        {
          uint64_t result = (uint64_t)sub_26140F420((char *)(v49 > 1), v50 + 1, 1, (char *)v11);
          uint64_t v10 = v128;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v12;
        uint64_t v51 = v11 + 32;
        unint64_t v52 = (uint64_t *)(v11 + 32 + 16 * v50);
        *unint64_t v52 = v13;
        v52[1] = v9;
        if (v50)
        {
          while (1)
          {
            unint64_t v53 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v58 = v51 + 16 * v12;
              uint64_t v59 = *(void *)(v58 - 64);
              uint64_t v60 = *(void *)(v58 - 56);
              BOOL v64 = __OFSUB__(v60, v59);
              uint64_t v61 = v60 - v59;
              if (v64) {
                goto LABEL_124;
              }
              uint64_t v63 = *(void *)(v58 - 48);
              uint64_t v62 = *(void *)(v58 - 40);
              BOOL v64 = __OFSUB__(v62, v63);
              uint64_t v56 = v62 - v63;
              char v57 = v64;
              if (v64) {
                goto LABEL_125;
              }
              unint64_t v65 = v12 - 2;
              int64_t v66 = (uint64_t *)(v51 + 16 * (v12 - 2));
              uint64_t v68 = *v66;
              uint64_t v67 = v66[1];
              BOOL v64 = __OFSUB__(v67, v68);
              uint64_t v69 = v67 - v68;
              if (v64) {
                goto LABEL_126;
              }
              BOOL v64 = __OFADD__(v56, v69);
              uint64_t v70 = v56 + v69;
              if (v64) {
                goto LABEL_128;
              }
              if (v70 >= v61)
              {
                unint64_t v88 = (uint64_t *)(v51 + 16 * v53);
                uint64_t v90 = *v88;
                uint64_t v89 = v88[1];
                BOOL v64 = __OFSUB__(v89, v90);
                uint64_t v91 = v89 - v90;
                if (v64) {
                  goto LABEL_134;
                }
                BOOL v81 = v56 < v91;
                goto LABEL_87;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v82 = *(void *)(v11 + 32);
                uint64_t v83 = *(void *)(v11 + 40);
                BOOL v64 = __OFSUB__(v83, v82);
                uint64_t v75 = v83 - v82;
                char v76 = v64;
                goto LABEL_81;
              }
              uint64_t v55 = *(void *)(v11 + 32);
              uint64_t v54 = *(void *)(v11 + 40);
              BOOL v64 = __OFSUB__(v54, v55);
              uint64_t v56 = v54 - v55;
              char v57 = v64;
            }
            if (v57) {
              goto LABEL_127;
            }
            unint64_t v65 = v12 - 2;
            char v71 = (uint64_t *)(v51 + 16 * (v12 - 2));
            uint64_t v73 = *v71;
            uint64_t v72 = v71[1];
            BOOL v74 = __OFSUB__(v72, v73);
            uint64_t v75 = v72 - v73;
            char v76 = v74;
            if (v74) {
              goto LABEL_129;
            }
            uint64_t v77 = (uint64_t *)(v51 + 16 * v53);
            uint64_t v79 = *v77;
            uint64_t v78 = v77[1];
            BOOL v64 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v64) {
              goto LABEL_131;
            }
            if (__OFADD__(v75, v80)) {
              goto LABEL_133;
            }
            if (v75 + v80 >= v56)
            {
              BOOL v81 = v56 < v80;
LABEL_87:
              if (v81) {
                unint64_t v53 = v65;
              }
              goto LABEL_89;
            }
LABEL_81:
            if (v76) {
              goto LABEL_130;
            }
            unint64_t v84 = (uint64_t *)(v51 + 16 * v53);
            uint64_t v86 = *v84;
            uint64_t v85 = v84[1];
            BOOL v64 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v64) {
              goto LABEL_132;
            }
            if (v87 < v75) {
              goto LABEL_15;
            }
LABEL_89:
            unint64_t v92 = v53 - 1;
            if (v53 - 1 >= v12)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v10) {
              goto LABEL_148;
            }
            uint64_t v93 = v11;
            char v94 = (uint64_t *)(v51 + 16 * v92);
            uint64_t v95 = *v94;
            uint64_t v96 = (void *)(v51 + 16 * v53);
            uint64_t v97 = v96[1];
            uint64_t result = sub_26149A848((float *)(v10 + (*v94 << 6)), (float *)(v10 + (*v96 << 6)), v10 + (v97 << 6), v129);
            if (v130) {
              goto LABEL_97;
            }
            if (v97 < v95) {
              goto LABEL_121;
            }
            if (v53 > *(void *)(v93 + 16)) {
              goto LABEL_122;
            }
            *char v94 = v95;
            *(void *)(v51 + 16 * v92 + 8) = v97;
            unint64_t v98 = *(void *)(v93 + 16);
            if (v53 >= v98) {
              goto LABEL_123;
            }
            uint64_t v11 = v93;
            unint64_t v12 = v98 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v51 + 16 * v53), v96 + 2, 16 * (v98 - 1 - v53));
            *(void *)(v93 + 16) = v98 - 1;
            uint64_t v10 = v128;
            if (v98 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v126;
        uint64_t v3 = v127;
        if (v9 >= v127)
        {
          uint64_t v8 = v125;
          goto LABEL_107;
        }
      }
    }
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v129 = (float *)(MEMORY[0x263F8EE78] + 32);
    if (v3 == 1)
    {
      uint64_t v125 = MEMORY[0x263F8EE78];
      goto LABEL_13;
    }
    unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_107:
    uint64_t result = v11;
    uint64_t v125 = v8;
    if (v12 >= 2)
    {
      uint64_t v115 = *v122;
      do
      {
        unint64_t v116 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_136;
        }
        if (!v115) {
          goto LABEL_150;
        }
        uint64_t v117 = result;
        uint64_t v118 = *(void *)(result + 32 + 16 * v116);
        uint64_t v119 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_26149A848((float *)(v115 + (v118 << 6)), (float *)(v115 + (*(void *)(result + 32 + 16 * (v12 - 1)) << 6)), v115 + (v119 << 6), v129);
        if (v130) {
          break;
        }
        if (v119 < v118) {
          goto LABEL_137;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_26140F51C(v117);
          uint64_t v117 = result;
        }
        if (v116 >= *(void *)(v117 + 16)) {
          goto LABEL_138;
        }
        uint64_t v120 = (void *)(v117 + 32 + 16 * v116);
        void *v120 = v118;
        v120[1] = v119;
        unint64_t v121 = *(void *)(v117 + 16);
        if (v12 > v121) {
          goto LABEL_139;
        }
        memmove((void *)(v117 + 32 + 16 * (v12 - 1)), (const void *)(v117 + 32 + 16 * v12), 16 * (v121 - v12));
        uint64_t result = v117;
        *(void *)(v117 + 16) = v121 - 1;
        unint64_t v12 = v121 - 1;
      }
      while (v121 > 2);
    }
LABEL_97:
    swift_bridgeObjectRelease();
    *(void *)(v125 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_26149A848(float *__dst, float *__src, unint64_t a3, float *a4)
{
  int64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 63;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 63;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 6;
  if (v10 >= v13)
  {
    uint64_t v22 = v13 << 6;
    if (a4 != __src || (float *)((char *)__src + v22) <= a4) {
      memmove(a4, __src, v13 << 6);
    }
    uint64_t v15 = (float *)((char *)v4 + v22);
    if (v7 >= v6 || v11 < 64) {
      goto LABEL_43;
    }
    long long v23 = (float *)(a3 - 64);
    while (1)
    {
      uint64_t v24 = v23 + 16;
      if (*(v6 - 12) >= *(v15 - 12))
      {
        uint64_t v25 = v15 - 16;
        if (v24 != v15)
        {
          v15 -= 16;
          goto LABEL_40;
        }
        BOOL v26 = v23 >= v15;
        v15 -= 16;
        if (v26) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v25 = v6 - 16;
        if (v24 != v6)
        {
          v6 -= 16;
LABEL_40:
          long long v27 = *(_OWORD *)v25;
          long long v28 = *((_OWORD *)v25 + 1);
          long long v29 = *((_OWORD *)v25 + 3);
          *((_OWORD *)v23 + 2) = *((_OWORD *)v25 + 2);
          *((_OWORD *)v23 + 3) = v29;
          *(_OWORD *)long long v23 = v27;
          *((_OWORD *)v23 + 1) = v28;
          goto LABEL_41;
        }
        BOOL v26 = v23 >= v6;
        v6 -= 16;
        if (v26) {
          goto LABEL_40;
        }
      }
LABEL_41:
      if (v6 > v7)
      {
        v23 -= 16;
        if (v15 > v4) {
          continue;
        }
      }
      goto LABEL_43;
    }
  }
  size_t v14 = v10 << 6;
  if (a4 != __dst || (float *)((char *)__dst + v14) <= a4) {
    memmove(a4, __dst, v14);
  }
  uint64_t v15 = (float *)((char *)v4 + v14);
  if ((unint64_t)v6 < a3 && v8 >= 64)
  {
    while (1)
    {
      if (v4[4] >= v6[4])
      {
        uint64_t v18 = v4 + 16;
        uint64_t v17 = v4;
        float v16 = v6;
        if (v7 == v4)
        {
          v4 += 16;
          if (v7 < v18) {
            goto LABEL_20;
          }
        }
        else
        {
          v4 += 16;
        }
      }
      else
      {
        float v16 = v6 + 16;
        uint64_t v17 = v6;
        if (v7 == v6 && v7 < v16) {
          goto LABEL_20;
        }
      }
      long long v19 = *(_OWORD *)v17;
      long long v20 = *((_OWORD *)v17 + 1);
      long long v21 = *((_OWORD *)v17 + 3);
      *((_OWORD *)v7 + 2) = *((_OWORD *)v17 + 2);
      *((_OWORD *)v7 + 3) = v21;
      *(_OWORD *)uint64_t v7 = v19;
      *((_OWORD *)v7 + 1) = v20;
LABEL_20:
      v7 += 16;
      if (v4 < v15)
      {
        uint64_t v6 = v16;
        if ((unint64_t)v16 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_43:
  size_t v30 = ((char *)v15 - (char *)v4 + ((char *)v15 - (char *)v4 < 0 ? 0x3FuLL : 0)) & 0xFFFFFFFFFFFFFFC0;
  if (v6 != v4 || v6 >= (float *)((char *)v4 + v30)) {
    memmove(v6, v4, v30);
  }
  return 1;
}

uint64_t sub_26149AA78(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_2613C23AC(&qword_26A915D18);
  char v37 = a2;
  uint64_t v6 = sub_2614D5DC8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    long long v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    size_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_2614D6088();
    sub_2614D5478();
    uint64_t result = sub_2614D60B8();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    long long v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *long long v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  long long v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_26149AD80()
{
  uint64_t v1 = v0;
  sub_2613C23AC(&qword_26A915D18);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2614D5DB8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 4 * v15;
    int v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_26149AF30(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_2613C23AC(&qword_26A914C00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_26149B034(uint64_t a1)
{
  return sub_26149AF30(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_26149B048(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *char v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    int v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_26149B248()
{
  unint64_t v0 = sub_2614D5E08();
  swift_bridgeObjectRelease();
  if (v0 >= 7) {
    return 7;
  }
  else {
    return v0;
  }
}

unint64_t sub_26149B294()
{
  unint64_t result = qword_26A915CA8;
  if (!qword_26A915CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CA8);
  }
  return result;
}

uint64_t type metadata accessor for VAKeywordResult()
{
  return self;
}

unint64_t sub_26149B30C()
{
  unint64_t result = qword_26A91E8D0[0];
  if (!qword_26A91E8D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91E8D0);
  }
  return result;
}

unint64_t sub_26149B360()
{
  unint64_t result = qword_26A915CC0;
  if (!qword_26A915CC0)
  {
    sub_2613C5EC8(&qword_26A915CB8);
    sub_26149B3D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CC0);
  }
  return result;
}

unint64_t sub_26149B3D4()
{
  unint64_t result = qword_26A915CC8;
  if (!qword_26A915CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CC8);
  }
  return result;
}

uint64_t sub_26149B428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A914EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_26149B490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A914EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_26149B4F8()
{
  unint64_t result = qword_26A915CD8;
  if (!qword_26A915CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CD8);
  }
  return result;
}

uint64_t sub_26149B54C(uint64_t a1)
{
  uint64_t v2 = sub_2613C23AC(&qword_26A914EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_26149B5AC()
{
  unint64_t result = qword_26A915960;
  if (!qword_26A915960)
  {
    sub_2614D4CE8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915960);
  }
  return result;
}

unint64_t sub_26149B608()
{
  unint64_t result = qword_26A915CE0;
  if (!qword_26A915CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CE0);
  }
  return result;
}

unint64_t sub_26149B660()
{
  unint64_t result = qword_26A915CE8;
  if (!qword_26A915CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CE8);
  }
  return result;
}

unint64_t sub_26149B6B8()
{
  unint64_t result = qword_26A915CF0;
  if (!qword_26A915CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CF0);
  }
  return result;
}

unint64_t sub_26149B710()
{
  unint64_t result = qword_26A915CF8;
  if (!qword_26A915CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915CF8);
  }
  return result;
}

unint64_t sub_26149B768()
{
  unint64_t result = qword_26A915D00;
  if (!qword_26A915D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915D00);
  }
  return result;
}

unint64_t sub_26149B7C0()
{
  unint64_t result = qword_26A915D08;
  if (!qword_26A915D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915D08);
  }
  return result;
}

uint64_t initializeWithCopy for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  return a1;
}

__n128 initializeWithTake for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  return a1;
}

uint64_t getEnumTagSinglePayload for VAKeywordDetection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 59)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VAKeywordDetection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 59) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 59) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAKeywordDetection()
{
  return &type metadata for VAKeywordDetection;
}

unsigned char *storeEnumTagSinglePayload for VAKeywordDetection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26149BAF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAKeywordDetection.CodingKeys()
{
  return &type metadata for VAKeywordDetection.CodingKeys;
}

uint64_t method lookup function for VAKeywordResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAKeywordResult);
}

uint64_t dispatch thunk of VAKeywordResult.__allocating_init(detections:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VAKeywordResult.sortedDetections.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of VAKeywordResult.scores.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of VAKeywordResult.sortedScores.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of VAKeywordResult.resolveEquivalentKeywords(params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of VAKeywordResult.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of VAKeywordResult.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t sub_26149BC5C()
{
  return type metadata accessor for VAInstrumentedKeywordResult();
}

uint64_t type metadata accessor for VAInstrumentedKeywordResult()
{
  uint64_t result = qword_26A91F0E0;
  if (!qword_26A91F0E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_26149BCB0()
{
  sub_26149BD84();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for VAInstrumentedKeywordResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAInstrumentedKeywordResult);
}

void sub_26149BD84()
{
  if (!qword_26A915D10)
  {
    sub_2614D4CE8();
    unint64_t v0 = sub_2614D5AD8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26A915D10);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for VAInstrumentedKeywordResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26149BEA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAInstrumentedKeywordResult.CodingKeys()
{
  return &type metadata for VAInstrumentedKeywordResult.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for VAKeywordResult.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x26149BF7CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for VAKeywordResult.CodingKeys()
{
  return &type metadata for VAKeywordResult.CodingKeys;
}

unint64_t sub_26149BFB8()
{
  unint64_t result = qword_26A91F1F0[0];
  if (!qword_26A91F1F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91F1F0);
  }
  return result;
}

unint64_t sub_26149C010()
{
  unint64_t result = qword_26A91F300;
  if (!qword_26A91F300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91F300);
  }
  return result;
}

unint64_t sub_26149C068()
{
  unint64_t result = qword_26A91F308[0];
  if (!qword_26A91F308[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91F308);
  }
  return result;
}

uint64_t sub_26149C0BC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C104(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C150()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C198(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C1E4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C22C(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C278()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C2C0(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C30C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C354(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C3A0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C3E8(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C434()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C47C(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C4C8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C510(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C55C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C5A4(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_26149C5F0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_26149C638(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

double sub_26149C684()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  double v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

double sub_26149C71C()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  double v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

id VAStrideConfiguration.__allocating_init(audioSampleRate:samplesPerEncoding:samplesPerEncodingStride:samplesPerPredictionWindow:encodingsPerVerification:featureExtractionModelInputSize:featureExtractionNumFeaturesPerSlice:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int64_t v14 = (char *)objc_allocWithZone(v7);
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  unint64_t v15 = &v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  unint64_t v16 = &v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = a1;
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = a2;
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = a3;
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = a4;
  *(void *)&v14[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = a5;
  swift_beginAccess();
  *(void *)unint64_t v16 = a6;
  swift_beginAccess();
  *(void *)unint64_t v15 = a7;
  v19.receiver = v14;
  v19.super_class = v7;
  return objc_msgSendSuper2(&v19, sel_init);
}

id VAStrideConfiguration.init(audioSampleRate:samplesPerEncoding:samplesPerEncodingStride:samplesPerPredictionWindow:encodingsPerVerification:featureExtractionModelInputSize:featureExtractionNumFeaturesPerSlice:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  uint64_t v10 = &v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  int64_t v11 = &v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = a1;
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = a2;
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = a3;
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = a4;
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = a5;
  swift_beginAccess();
  *(void *)int64_t v11 = a6;
  swift_beginAccess();
  *(void *)uint64_t v10 = a7;
  v13.receiver = v7;
  v13.super_class = (Class)type metadata accessor for VAStrideConfiguration();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for VAStrideConfiguration()
{
  return self;
}

double sub_26149CA38()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  double v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

double sub_26149CAD0()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  double v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

id static VAStrideConfiguration.forFlexibleA2T()()
{
  uint64_t v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  double v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  int v3 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 22960;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(void *)int v3 = 142;
  swift_beginAccess();
  *(void *)double v2 = 40;
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id static VAStrideConfiguration.forFlexibleA2A()()
{
  uint64_t v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  double v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  int v3 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 19200;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 3840;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 19200;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(void *)int v3 = 176;
  swift_beginAccess();
  *(void *)double v2 = 40;
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id _s12VoiceActions21VAStrideConfigurationC16forFlexibleA2Tv2ACyFZ_0()
{
  uint64_t v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  double v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  int v3 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 32000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(void *)int v3 = 198;
  swift_beginAccess();
  *(void *)double v2 = 40;
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id static VAStrideConfiguration.forFixedA2T(modelConfig:)(void *a1)
{
  double v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0xC8))();
  uint64_t v4 = (*(uint64_t (**)(void))((*v2 & *a1) + 0xE0))();
  objc_super v5 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  unsigned int v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  uint64_t v7 = &v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  uint64_t v8 = (uint64_t *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = v3;
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *uint64_t v8 = v4;
  swift_beginAccess();
  *(void *)uint64_t v7 = 40;
  v10.receiver = v6;
  v10.super_class = v5;
  return objc_msgSendSuper2(&v10, sel_init);
}

id static VAStrideConfiguration.forFlexibleAVS()()
{
  uint64_t v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  double v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  uint64_t v3 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 160000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1000;
  swift_beginAccess();
  *(void *)uint64_t v3 = 176;
  swift_beginAccess();
  *(void *)double v2 = 40;
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id static VAStrideConfiguration.forTasrConfig(tasrConfig:)()
{
  uint64_t v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  double v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  uint64_t v3 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 32000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(void *)uint64_t v3 = 176;
  swift_beginAccess();
  *(void *)double v2 = 80;
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id static VAStrideConfiguration.forSpeechAPIConfig()()
{
  uint64_t v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  double v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  uint64_t v3 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 32000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(void *)uint64_t v3 = 176;
  swift_beginAccess();
  *(void *)double v2 = 40;
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id static VAStrideConfiguration.forVAD()()
{
  uint64_t v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  double v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  uint64_t v3 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(void *)uint64_t v3 = 176;
  swift_beginAccess();
  *(void *)double v2 = 40;
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id VAStrideConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VAStrideConfiguration.init()()
{
}

unint64_t sub_26149D5C0(char a1)
{
  unint64_t result = 0x6D61536F69647561;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
    case 3:
    case 8:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000024;
      break;
    case 7:
      unint64_t result = 0xD000000000000024;
      break;
    case 9:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_26149D6FC()
{
  return sub_26149D5C0(*v0);
}

uint64_t sub_26149D704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_26149E618(a1, a2);
  *a3 = result;
  return result;
}

void sub_26149D72C(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_26149D738(uint64_t a1)
{
  unint64_t v2 = sub_26149DC74();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_26149D774(uint64_t a1)
{
  unint64_t v2 = sub_26149DC74();
  return MEMORY[0x270FA00B8](a1, v2);
}

id VAStrideConfiguration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAStrideConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_26149D7E4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2613C23AC(&qword_26A915D70);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2613DBF24(a1, a1[3]);
  sub_26149DC74();
  uint64_t v9 = sub_2614D60F8();
  objc_super v10 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0xA0))(v9);
  v21[15] = 0;
  uint64_t v11 = sub_2614D5F48();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xB8))(v11);
    v21[14] = 1;
    uint64_t v12 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xD0))(v12);
    v21[13] = 2;
    uint64_t v13 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xE8))(v13);
    v21[12] = 3;
    uint64_t v14 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x100))(v14);
    v21[11] = 4;
    uint64_t v15 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x118))(v15);
    v21[10] = 5;
    uint64_t v16 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x130))(v16);
    v21[9] = 6;
    uint64_t v17 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x148))(v17);
    v21[8] = 7;
    uint64_t v18 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x160))(v18);
    v21[7] = 8;
    uint64_t v19 = sub_2614D5F48();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x178))(v19);
    v21[6] = 9;
    sub_2614D5F48();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_26149DC74()
{
  unint64_t result = qword_26A91F390[0];
  if (!qword_26A91F390[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91F390);
  }
  return result;
}

id VAStrideConfiguration.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return VAStrideConfiguration.init(from:)(a1);
}

id VAStrideConfiguration.init(from:)(void *a1)
{
  uint64_t v27 = sub_2613C23AC(&qword_26A915D78);
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  unint64_t v23 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  int64_t v22 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  uint64_t v5 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  uint64_t v6 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  uint64_t v7 = a1[3];
  BOOL v28 = a1;
  uint64_t v8 = sub_2613DBF24(a1, v7);
  sub_26149DC74();
  uint64_t v9 = v1;
  char v26 = v4;
  id v10 = v8;
  uint64_t v11 = v35;
  sub_2614D60D8();
  if (v11)
  {

    sub_2613DD718((uint64_t)v28);
    type metadata accessor for VAStrideConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v12 = (void *)v24;
    uint64_t v13 = v23;
    uint64_t v35 = (uint64_t *)v6;
    uint64_t v14 = v25;
    char v34 = 0;
    *(void *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = sub_2614D5EB8();
    char v34 = 1;
    *(void *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = sub_2614D5EB8();
    char v34 = 2;
    *(void *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = sub_2614D5EB8();
    char v34 = 3;
    *(void *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = sub_2614D5EB8();
    char v34 = 4;
    *(void *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = sub_2614D5EB8();
    char v34 = 5;
    uint64_t v21 = sub_2614D5EB8();
    swift_beginAccess();
    *uint64_t v12 = v21;
    char v33 = 6;
    uint64_t v16 = sub_2614D5EB8();
    swift_beginAccess();
    *uint64_t v13 = v16;
    char v32 = 7;
    uint64_t v17 = sub_2614D5EB8();
    swift_beginAccess();
    *int64_t v22 = v17;
    char v31 = 8;
    uint64_t v24 = sub_2614D5EB8();
    swift_beginAccess();
    *uint64_t v5 = v24;
    char v30 = 9;
    uint64_t v18 = sub_2614D5EB8();
    uint64_t v19 = v35;
    swift_beginAccess();
    *uint64_t v19 = v18;

    int v20 = (objc_class *)type metadata accessor for VAStrideConfiguration();
    v29.receiver = v9;
    v29.super_class = v20;
    id v10 = objc_msgSendSuper2(&v29, sel_init);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v27);
    sub_2613DD718((uint64_t)v28);
  }
  return v10;
}

uint64_t sub_26149E1C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 448))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_26149E204()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x1B8))();
}

uint64_t method lookup function for VAStrideConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAStrideConfiguration);
}

uint64_t dispatch thunk of VAStrideConfiguration.__allocating_init(audioSampleRate:samplesPerEncoding:samplesPerEncodingStride:samplesPerPredictionWindow:encodingsPerVerification:featureExtractionModelInputSize:featureExtractionNumFeaturesPerSlice:)()
{
  return (*(uint64_t (**)(void))(v0 + 416))();
}

uint64_t dispatch thunk of VAStrideConfiguration.predictionWindowDurationSec.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of VAStrideConfiguration.audioChunkDurationSec.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of VAStrideConfiguration.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of VAStrideConfiguration.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t getEnumTagSinglePayload for VAStrideConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VAStrideConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26149E4D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAStrideConfiguration.CodingKeys()
{
  return &type metadata for VAStrideConfiguration.CodingKeys;
}

unint64_t sub_26149E514()
{
  unint64_t result = qword_26A91F5A0[0];
  if (!qword_26A91F5A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91F5A0);
  }
  return result;
}

unint64_t sub_26149E56C()
{
  unint64_t result = qword_26A91F6B0;
  if (!qword_26A91F6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91F6B0);
  }
  return result;
}

unint64_t sub_26149E5C4()
{
  unint64_t result = qword_26A91F6B8[0];
  if (!qword_26A91F6B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91F6B8);
  }
  return result;
}

uint64_t sub_26149E618(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D61536F69647561 && a2 == 0xEF65746152656C70;
  if (v2 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002614E6E50 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002614E6E70 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002614E6E90 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002614E6430 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000002614E6EB0 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x80000002614E6ED0 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x80000002614E6F00 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002614E6F30 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x80000002614E6F50)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

void *sub_26149E9EC(uint64_t a1, uint64_t a2)
{
  unint64_t result = (void *)swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8EE78];
  result[3] = a2;
  result[4] = v5;
  result[2] = a1;
  return result;
}

uint64_t sub_26149EA38(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  char v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_26145066C(a1, (uint64_t)v6);
  BOOL v7 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 136))(v15);
  uint64_t v9 = v8;
  unint64_t v10 = *v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v10 = sub_261451E2C(0, *(void *)(v10 + 16) + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    unint64_t v10 = sub_261451E2C(v12 > 1, v13 + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  *(void *)(v10 + 16) = v13 + 1;
  sub_261452094((uint64_t)v6, v10+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v13);
  return v7(v15, 0);
}

uint64_t sub_26149EBCC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void *sub_26149EC0C()
{
  return &unk_2614DEBC0;
}

id sub_26149EC18(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions16AVSVerifierModel_resampleDuration] = *(void *)(a1 + 32);
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t sub_26149EC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_2614D50C8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v103 = (uint64_t)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = 0;
  unint64_t v114 = 0xE000000000000000;
  float v112 = -99999.0;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x70);
  uint64_t v12 = (*MEMORY[0x263F8EED0] & *v3) + 112;
  uint64_t v102 = *(void *)((char *)v3 + OBJC_IVAR____TtC12VoiceActions16AVSVerifierModel_resampleDuration);
  uint64_t v101 = v11;
  uint64_t v100 = v12;
  uint64_t v104 = ((uint64_t (*)(uint64_t))v11)(a1);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v89 = a2 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v90 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v99 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  unint64_t v98 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v91 = a2;
  swift_bridgeObjectRetain();
  int64_t v17 = 0;
  uint64_t v18 = (void *)MEMORY[0x263F8EE80];
  *(void *)&long long v19 = 134218242;
  long long v96 = v19;
  uint64_t v95 = MEMORY[0x263F8EE58] + 8;
  while (1)
  {
    if (v16)
    {
      uint64_t v93 = (v16 - 1) & v16;
      int64_t v94 = v17;
      unint64_t v20 = __clz(__rbit64(v16)) | (v17 << 6);
    }
    else
    {
      int64_t v21 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_64;
      }
      if (v21 >= v90) {
        goto LABEL_58;
      }
      unint64_t v22 = *(void *)(v89 + 8 * v21);
      int64_t v23 = v17 + 1;
      if (!v22)
      {
        int64_t v23 = v17 + 2;
        if (v17 + 2 >= v90) {
          goto LABEL_58;
        }
        unint64_t v22 = *(void *)(v89 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v17 + 3;
          if (v17 + 3 >= v90) {
            goto LABEL_58;
          }
          unint64_t v22 = *(void *)(v89 + 8 * v23);
          if (!v22)
          {
            uint64_t v24 = v17 + 4;
            if (v17 + 4 >= v90) {
              goto LABEL_58;
            }
            unint64_t v22 = *(void *)(v89 + 8 * v24);
            if (!v22)
            {
              while (1)
              {
                int64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_65;
                }
                if (v23 >= v90) {
                  break;
                }
                unint64_t v22 = *(void *)(v89 + 8 * v23);
                ++v24;
                if (v22) {
                  goto LABEL_20;
                }
              }
LABEL_58:
              swift_bridgeObjectRelease();
              swift_release();
              swift_beginAccess();
              swift_beginAccess();
              return (uint64_t)v18;
            }
            int64_t v23 = v17 + 4;
          }
        }
      }
LABEL_20:
      uint64_t v93 = (v22 - 1) & v22;
      int64_t v94 = v23;
      unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }
    uint64_t v25 = *(void *)(v91 + 56);
    char v26 = (uint64_t *)(*(void *)(v91 + 48) + 16 * v20);
    uint64_t v27 = v26[1];
    uint64_t v108 = *v26;
    uint64_t v28 = *(void *)(v25 + 8 * v20);
    objc_super v29 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 120);
    uint64_t v97 = v27;
    swift_bridgeObjectRetain();
    uint64_t v30 = swift_retain();
    uint64_t v31 = v29(v30);
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32) {
      break;
    }
LABEL_4:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v17 = v94;
    unint64_t v16 = v93;
  }
  uint64_t v107 = *(int *)(v88 + 20);
  uint64_t v33 = v87;
  unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v92 = v31;
  uint64_t v35 = v31 + v34;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v105 = *(void *)(v33 + 72);
  uint64_t v36 = v97;
  uint64_t v106 = v28;
  while (1)
  {
    uint64_t v37 = v103;
    sub_26145066C(v35, v103);
    uint64_t v38 = *(void *)(v37 + v107);
    swift_bridgeObjectRetain();
    sub_2614A48D4(v37, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
    uint64_t v39 = v101(v38, v102);
    swift_bridgeObjectRelease();
    sub_26148AF40(v104, v39);
    float v41 = v40;
    swift_bridgeObjectRelease();
    float v42 = -v41;
    uint64_t v43 = v18[2];
    uint64_t v44 = v108;
    uint64_t v109 = v35;
    uint64_t v110 = v32;
    if (v43)
    {
      swift_bridgeObjectRetain();
      sub_2613D8F00(v44, v36);
      char v46 = v45;
      swift_bridgeObjectRelease();
      if (v46)
      {
        if (!v18[2]) {
          goto LABEL_61;
        }
        swift_bridgeObjectRetain();
        unint64_t v47 = sub_2613D8F00(v44, v36);
        if ((v48 & 1) == 0) {
          goto LABEL_66;
        }
        float v49 = *(float *)(v18[7] + 4 * v47);
        swift_bridgeObjectRelease();
        if (v49 < v42) {
          float v49 = v42;
        }
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v111[0] = (uint64_t)v18;
        unint64_t v52 = sub_2613D8F00(v44, v36);
        uint64_t v53 = v18[2];
        BOOL v54 = (v51 & 1) == 0;
        uint64_t v55 = v53 + v54;
        if (__OFADD__(v53, v54)) {
          goto LABEL_62;
        }
        char v56 = v51;
        if (v18[3] >= v55)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v18 = (void *)v111[0];
            if ((v51 & 1) == 0) {
              goto LABEL_51;
            }
          }
          else
          {
            sub_26149AD80();
            uint64_t v18 = (void *)v111[0];
            if ((v56 & 1) == 0) {
              goto LABEL_51;
            }
          }
        }
        else
        {
          sub_26149AA78(v55, isUniquelyReferenced_nonNull_native);
          unint64_t v57 = sub_2613D8F00(v44, v36);
          if ((v56 & 1) != (v58 & 1)) {
            goto LABEL_67;
          }
          unint64_t v52 = v57;
          uint64_t v18 = (void *)v111[0];
          if ((v56 & 1) == 0)
          {
LABEL_51:
            v18[(v52 >> 6) + 8] |= 1 << v52;
            uint64_t v72 = (uint64_t *)(v18[6] + 16 * v52);
            uint64_t *v72 = v44;
            v72[1] = v36;
            *(float *)(v18[7] + 4 * v52) = v49;
            uint64_t v73 = v18[2];
            BOOL v70 = __OFADD__(v73, 1);
            uint64_t v71 = v73 + 1;
            if (v70) {
              goto LABEL_63;
            }
LABEL_52:
            v18[2] = v71;
            swift_bridgeObjectRetain();
            goto LABEL_53;
          }
        }
        *(float *)(v18[7] + 4 * v52) = v49;
        goto LABEL_53;
      }
    }
    swift_bridgeObjectRetain();
    char v59 = swift_isUniquelyReferenced_nonNull_native();
    v111[0] = (uint64_t)v18;
    unint64_t v61 = sub_2613D8F00(v44, v36);
    uint64_t v62 = v18[2];
    BOOL v63 = (v60 & 1) == 0;
    uint64_t v64 = v62 + v63;
    if (__OFADD__(v62, v63)) {
      break;
    }
    char v65 = v60;
    if (v18[3] >= v64)
    {
      if (v59)
      {
        uint64_t v18 = (void *)v111[0];
        if ((v60 & 1) == 0) {
          goto LABEL_47;
        }
      }
      else
      {
        sub_26149AD80();
        uint64_t v18 = (void *)v111[0];
        if ((v65 & 1) == 0) {
          goto LABEL_47;
        }
      }
    }
    else
    {
      sub_26149AA78(v64, v59);
      unint64_t v66 = sub_2613D8F00(v44, v36);
      if ((v65 & 1) != (v67 & 1)) {
        goto LABEL_67;
      }
      unint64_t v61 = v66;
      uint64_t v18 = (void *)v111[0];
      if ((v65 & 1) == 0)
      {
LABEL_47:
        v18[(v61 >> 6) + 8] |= 1 << v61;
        uint64_t v68 = (uint64_t *)(v18[6] + 16 * v61);
        *uint64_t v68 = v44;
        v68[1] = v36;
        *(float *)(v18[7] + 4 * v61) = v42;
        uint64_t v69 = v18[2];
        BOOL v70 = __OFADD__(v69, 1);
        uint64_t v71 = v69 + 1;
        if (v70) {
          goto LABEL_60;
        }
        goto LABEL_52;
      }
    }
    *(float *)(v18[7] + 4 * v61) = v42;
LABEL_53:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v112 < v42)
    {
      uint64_t v113 = v44;
      unint64_t v114 = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      float v112 = v42;
    }
    uint64_t v74 = sub_26146718C();
    (*v99)(v9, v74, v6);
    uint64_t v75 = sub_2614D50A8();
    os_log_type_t v76 = sub_2614D5968();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      v111[0] = v78;
      *(_DWORD *)uint64_t v77 = v96;
      *(double *)(v77 + 4) = v112;
      *(_WORD *)(v77 + 12) = 2080;
      uint64_t v79 = v3;
      uint64_t v80 = v9;
      uint64_t v81 = v6;
      uint64_t v82 = v113;
      unint64_t v83 = v114;
      swift_bridgeObjectRetain();
      uint64_t v84 = v82;
      uint64_t v3 = v79;
      *(void *)(v77 + 14) = sub_2613D875C(v84, v83, v111);
      uint64_t v6 = v81;
      uint64_t v9 = v80;
      uint64_t v36 = v97;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2613B8000, v75, v76, "With remap, lowest score: %f for %s", (uint8_t *)v77, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x263E38060](v78, -1, -1);
      MEMORY[0x263E38060](v77, -1, -1);
    }

    (*v98)(v9, v6);
    uint64_t v35 = v109 + v105;
    uint64_t v32 = v110 - 1;
    if (v110 == 1) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_67:
  uint64_t result = sub_2614D5FF8();
  __break(1u);
  return result;
}

uint64_t sub_26149F64C()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

id AVSVerifierModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AVSVerifierModel.init()()
{
}

id AVSVerifierModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AVSVerifierModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

__n128 sub_26149F76C@<Q0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  long long v3 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 80) = v3;
  long long v4 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 112) = v4;
  long long v5 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v5;
  __n128 result = *(__n128 *)(v1 + 48);
  long long v7 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v7;
  return result;
}

__n128 sub_26149F7C8(uint64_t a1)
{
  swift_beginAccess();
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 96) = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 128) = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v5;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 48) = result;
  *(_OWORD *)(v1 + 64) = v7;
  return result;
}

id sub_26149F824()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 144);
  return v1;
}

void sub_26149F868(uint64_t a1)
{
  swift_beginAccess();
  long long v3 = *(void **)(v1 + 144);
  *(void *)(v1 + 144) = a1;
}

uint64_t sub_26149F8B0()
{
  return swift_retain();
}

uint64_t sub_26149F8E8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 152) = a1;
  return swift_release();
}

uint64_t sub_26149F930()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_26149F968(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 168) = a1;
  return swift_bridgeObjectRelease();
}

float sub_26149F9B0()
{
  swift_beginAccess();
  return *(float *)(v0 + 184);
}

uint64_t sub_26149F9E4(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 184) = a1;
  return result;
}

float sub_26149FA24()
{
  swift_beginAccess();
  return *(float *)(v0 + 188);
}

uint64_t sub_26149FA58(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 188) = a1;
  return result;
}

uint64_t (*sub_26149FA98())()
{
  return j_j__swift_endAccess;
}

float sub_26149FAEC()
{
  swift_beginAccess();
  return *(float *)(v0 + 192);
}

uint64_t sub_26149FB20(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 192) = a1;
  return result;
}

float sub_26149FB60()
{
  swift_beginAccess();
  return *(float *)(v0 + 196);
}

uint64_t sub_26149FB94(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 196) = a1;
  return result;
}

uint64_t (*sub_26149FBD4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_26149FC28()
{
  swift_beginAccess();
  return *(void *)(v0 + 200);
}

uint64_t sub_26149FC5C(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 200) = a1;
  return result;
}

float sub_26149FC9C()
{
  swift_beginAccess();
  return *(float *)(v0 + 208);
}

uint64_t sub_26149FCD0(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 208) = a1;
  return result;
}

float sub_26149FD10()
{
  swift_beginAccess();
  return *(float *)(v0 + 212);
}

uint64_t sub_26149FD44(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 212) = a1;
  return result;
}

uint64_t (*sub_26149FD84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_26149FDD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 568))();
  *a2 = result;
  return result;
}

uint64_t sub_26149FE2C(uint64_t a1, uint64_t a2)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 576);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_26149FE88()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_26149FEC0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 216) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_26149FF08())()
{
  return j_j__swift_endAccess;
}

void sub_26149FF5C(uint64_t a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))(**(void **)a1 + 592))();
}

uint64_t sub_26149FFB0(float *a1, uint64_t a2)
{
  return (*(uint64_t (**)(float))(**(void **)a2 + 600))(*a1);
}

float sub_2614A0000()
{
  swift_beginAccess();
  return *(float *)(v0 + 224);
}

uint64_t sub_2614A0034(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 224) = a1;
  return result;
}

uint64_t sub_2614A0074@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 640))();
  *a2 = result;
  return result;
}

uint64_t sub_2614A00C8(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 648))(*a1);
}

uint64_t sub_2614A0118()
{
  swift_beginAccess();
  return *(void *)(v0 + 232);
}

uint64_t sub_2614A014C(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 232) = a1;
  return result;
}

uint64_t sub_2614A018C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 664))();
  *a2 = result;
  return result;
}

uint64_t sub_2614A01E0(uint64_t a1, uint64_t a2)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 672);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2614A023C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2614A0274(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 240) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t VAAVSVerifierModel.__allocating_init(configuration:)(uint64_t a1)
{
  return VAAVSVerifierModel.init(configuration:)(a1);
}

uint64_t VAAVSVerifierModel.init(configuration:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v39 = sub_2614D50C8();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for VASignpostInterval();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *(float *)a1;
  int v11 = *(_DWORD *)(a1 + 4);
  uint64_t v12 = *(void *)(a1 + 8);
  long long v53 = *(_OWORD *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 88);
  long long v49 = *(_OWORD *)(a1 + 72);
  long long v50 = v14;
  long long v51 = *(_OWORD *)(a1 + 104);
  uint64_t v52 = *(void *)(a1 + 120);
  long long v15 = *(_OWORD *)(a1 + 56);
  long long v47 = *(_OWORD *)(a1 + 40);
  long long v48 = v15;
  uint64_t v16 = MEMORY[0x263F8EE80];
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = v16;
  *(void *)(v2 + 176) = v16;
  *(_OWORD *)(v2 + 184) = xmmword_2614DEBB0;
  *(void *)(v2 + 200) = 150;
  __asm { FMOV            V0.2S, #-15.0 }
  *(void *)(v2 + 208) = _D0;
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 216) = MEMORY[0x263F8EE78];
  swift_retain_n();
  *(void *)(v2 + 240) = sub_261497A68(v22);
  type metadata accessor for VALog();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, (const char *)0xD000000000000017, 0x80000002614E6F90, (uint64_t)v9);
  *(_OWORD *)(v2 + 32) = v53;
  long long v23 = v50;
  *(_OWORD *)(v2 + 88) = v49;
  *(_OWORD *)(v2 + 104) = v23;
  *(_OWORD *)(v2 + 120) = v51;
  long long v24 = v48;
  *(_OWORD *)(v2 + 56) = v47;
  *(float *)(v2 + 16) = v10;
  *(_DWORD *)(v2 + 20) = v11;
  uint64_t v40 = v12;
  *(void *)(v2 + 24) = v12;
  *(void *)(v2 + 48) = v13;
  *(void *)(v2 + 136) = v52;
  *(_OWORD *)(v2 + 72) = v24;
  uint64_t v25 = (objc_class *)type metadata accessor for AVSVerifierModel();
  char v26 = (char *)objc_allocWithZone(v25);
  *(void *)&v26[OBJC_IVAR____TtC12VoiceActions16AVSVerifierModel_resampleDuration] = v13;
  v46.receiver = v26;
  v46.super_class = v25;
  *(void *)(v2 + 144) = objc_msgSendSuper2(&v46, sel_init);
  swift_beginAccess();
  sub_26140CE18(*(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 80), *(void *)(v2 + 128), (uint64_t)&v41, *(float *)(v2 + 72));
  double v27 = v41;
  uint64_t v28 = v42;
  int v29 = v43;
  uint64_t v30 = v44;
  uint64_t v31 = v45;
  type metadata accessor for AVSEndpointer();
  double v41 = v27;
  uint64_t v42 = v28;
  int v43 = v29;
  uint64_t v44 = v30;
  uint64_t v45 = v31;
  uint64_t v32 = v39;
  AVSEndpointer.__allocating_init(config:)((uint64_t)&v41);
  *(void *)(v2 + 152) = v33;
  uint64_t v34 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v34, v32);
  swift_retain();
  uint64_t v35 = sub_2614D50A8();
  os_log_type_t v36 = sub_2614D5968();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 134217984;
    double v41 = *(float *)(v2 + 72);
    sub_2614D5B58();
    swift_release_n();
    _os_log_impl(&dword_2613B8000, v35, v36, "AVS streaming endpointer has threshold %f", v37, 0xCu);
    MEMORY[0x263E38060](v37, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v32);
  *(float *)(v2 + 224) = v10;
  *(float *)(v2 + 228) = v10 * 1.5;
  *(void *)(v2 + 232) = v40;
  swift_release();
  VASignpostInterval.end(_:)((Swift::String_optional)0);
  sub_2614A48D4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for VASignpostInterval);
  return sub_26141BF74();
}

uint64_t sub_2614A074C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t VAAVSVerifierModel.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2614D50C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_26146718C();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = sub_2614D50A8();
  os_log_type_t v8 = sub_2614D5988();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_2613B8000, v7, v8, "deInit VAAVSVerifierModel", v9, 2u);
    MEMORY[0x263E38060](v9, -1, -1);
  }

  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[20])
  {
    v1[20] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
  }
  v1[20] = 0;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x263F8EE80];
  v1[21] = MEMORY[0x263F8EE80];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[22] = v11;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[27] = v10;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[30] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = VAVerifierModel.deinit();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t VAAVSVerifierModel.__deallocating_deinit()
{
  VAAVSVerifierModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2614A0A54()
{
  uint64_t v1 = *(void *)((*(uint64_t (**)(void))(*(void *)v0 + 352))() + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_2614A0AA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  type metadata accessor for AVSEndpointer();
  v10[0] = v2;
  v10[1] = v3;
  int v11 = v4;
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  __n128 v7 = AVSEndpointer.__allocating_init(config:)((uint64_t)v10);
  os_log_type_t v8 = *(uint64_t (**)(__n128))(*(void *)v1 + 312);
  return v8(v7);
}

uint64_t sub_2614A0B58(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_2614D5D98();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_31;
  }
LABEL_3:
  if (v2 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = 0;
      uint64_t v5 = (char *)MEMORY[0x263F8EE78];
      uint64_t v6 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v8 = *(void *)(MEMORY[0x263E36D80](v4, a1) + 16);
        uint64_t v9 = *(void *)(v8 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = sub_2614A4030(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v11 = *((void *)v5 + 2);
        unint64_t v10 = *((void *)v5 + 3);
        if (v11 >= v10 >> 1) {
          uint64_t v5 = sub_2614A4030((char *)(v10 > 1), v11 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v11 + 1;
        v5[v11 + 32] = v9 > 0;
        if (v9 >= 1)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_26140C714(0, v6[2] + 1, 1, v6);
          }
          unint64_t v13 = v6[2];
          unint64_t v12 = v6[3];
          if (v13 >= v12 >> 1) {
            uint64_t v6 = sub_26140C714((void *)(v12 > 1), v13 + 1, 1, v6);
          }
          _OWORD v6[2] = v13 + 1;
          v6[v13 + 4] = v8;
          uint64_t v7 = swift_bridgeObjectRetain();
          sub_2613D64FC(v7);
        }
        ++v4;
        swift_unknownObjectRelease();
      }
      while (v2 != v4);
    }
    else
    {
      uint64_t v14 = 0;
      long long v15 = (char *)MEMORY[0x263F8EE78];
      uint64_t v6 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 8 * v14 + 32) + 16);
        uint64_t v18 = *(void *)(v17 + 16);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v15 = sub_2614A4030(0, *((void *)v15 + 2) + 1, 1, v15);
        }
        unint64_t v20 = *((void *)v15 + 2);
        unint64_t v19 = *((void *)v15 + 3);
        if (v20 >= v19 >> 1) {
          long long v15 = sub_2614A4030((char *)(v19 > 1), v20 + 1, 1, v15);
        }
        *((void *)v15 + 2) = v20 + 1;
        v15[v20 + 32] = v18 > 0;
        if (v18 >= 1)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_26140C714(0, v6[2] + 1, 1, v6);
          }
          unint64_t v22 = v6[2];
          unint64_t v21 = v6[3];
          if (v22 >= v21 >> 1) {
            uint64_t v6 = sub_26140C714((void *)(v21 > 1), v22 + 1, 1, v6);
          }
          _OWORD v6[2] = v22 + 1;
          v6[v22 + 4] = v17;
          uint64_t v16 = swift_bridgeObjectRetain();
          sub_2613D64FC(v16);
        }
        ++v14;
        swift_release();
      }
      while (v2 != v14);
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

void sub_2614A0E9C(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v3;
  v178 = a2;
  uint64_t v6 = sub_2614D50C8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v177 = (char *)&v141 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  long long v15 = (char *)&v141 - v14;
  uint64_t v16 = *v2;
  uint64_t v17 = *(uint64_t (**)(void))(*v2 + 352);
  uint64_t v189 = v2;
  uint64_t v176 = v16 + 352;
  unint64_t v175 = v17;
  uint64_t v18 = *(void *)(((uint64_t (*)(uint64_t))v17)(v13) + 16);
  swift_bridgeObjectRelease();
  if (!v18)
  {
    sub_2613DC2B8();
    swift_allocError();
    *char v60 = 0xD000000000000029;
    unint64_t v61 = "Cannot predict. No enrolled phrases found";
LABEL_26:
    v60[1] = (unint64_t)(v61 - 32) | 0x8000000000000000;
    swift_willThrow();
    return;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x263E36D80](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v155(v160, v156, v10);
      uint64_t v138 = sub_2614D50A8();
      os_log_type_t v139 = sub_2614D5978();
      if (os_log_type_enabled(v138, v139))
      {
        unint64_t v140 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v140 = 0;
        _os_log_impl(&dword_2613B8000, v138, v139, "Cannot generate prediction from AVS VerifierModel.", v140, 2u);
        MEMORY[0x263E38060](v140, -1, -1);
      }

      v158(v160, v10);
      static VAVerifierModelOutput.none.getter(v178);

      return;
    }
    swift_unknownObjectRetain();
  }
  type metadata accessor for EncoderPredictionAVS();
  uint64_t v19 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (!v19)
  {
    sub_2613DC2B8();
    swift_allocError();
    *char v60 = 0xD00000000000001ELL;
    unint64_t v61 = "Unexpected encoder return type";
    goto LABEL_26;
  }
  uint64_t v160 = v10;
  uint64_t v171 = (char *)v6;
  sub_2614A20B8(a1);
  unint64_t v20 = v189;
  uint64_t v21 = (*(uint64_t (**)(void))(*v189 + 712))();
  unint64_t v10 = v22;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
LABEL_110:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_111:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  unint64_t v26 = *(unsigned __int8 *)(v25 + v24 + 31);
  uint64_t v27 = swift_bridgeObjectRelease();
  if ((v26 & 1) == 0 || !*(void *)(v21 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    static VAVerifierModelOutput.none.getter(v178);
    return;
  }
  uint64_t v152 = v21;
  uint64_t v28 = (uint64_t (**)(uint64_t))(*v20 + 304);
  uint64_t v170 = *v28;
  uint64_t v169 = v28;
  uint64_t v29 = v170(v27);
  char v30 = (*(uint64_t (**)(char *))(*(void *)v29 + 440))(v10);
  uint64_t v32 = v31;
  swift_release();
  if ((v30 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v33 = *(void *)(v32 + 16);
  if (!v33)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t v26 = *(void *)(v32 + 8 * v33 + 24);
  swift_bridgeObjectRelease();
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if (*((void *)v10 + 2) < v26)
  {
LABEL_103:
    __break(1u);
LABEL_104:
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_2613DAF94((uint64_t)v10, (uint64_t)(v10 + 32), 0, (2 * v26) | 1);
    goto LABEL_18;
  }
  uint64_t v34 = sub_2614D5FE8();
  swift_unknownObjectRetain_n();
  uint64_t v35 = swift_dynamicCastClass();
  if (!v35)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = MEMORY[0x263F8EE78];
  }
  os_log_type_t v36 = *(void **)(v35 + 16);
  swift_release();
  uint64_t v147 = v34;
  if (v36 != (void *)v26) {
    goto LABEL_104;
  }
  uint64_t v37 = swift_dynamicCastClass();
  if (!v37)
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
LABEL_18:
  uint64_t v38 = swift_bridgeObjectRelease();
  uint64_t v39 = v170;
  uint64_t v40 = v170(v38);
  float v41 = (*(float (**)(uint64_t))(*(void *)v40 + 216))(v40);
  uint64_t v42 = swift_release();
  uint64_t v43 = v39(v42);
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 240))(v43);
  swift_release();
  uint64_t v45 = sub_26140DF80();
  float v46 = sub_26140DF88();
  uint64_t v47 = sub_26140DF98();
  long long v48 = sub_26140DFA0(v37, v44, v45, v47, v41, v46);
  if (!v48[2] || !*(void *)(v49 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v62 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_91;
  }
  uint64_t v50 = sub_26140E6C8((uint64_t)v48, v49, 80);
  uint64_t v52 = v51;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v53 = sub_26146718C();
  BOOL v54 = *(void (**)(char *, uint64_t, char *))(v7 + 16);
  uint64_t v156 = v53;
  unint64_t v10 = v171;
  uint64_t v157 = v7 + 16;
  unint64_t v155 = v54;
  ((void (*)(char *))v54)(v15);
  swift_bridgeObjectRetain();
  uint64_t v55 = sub_2614D50A8();
  os_log_type_t v56 = sub_2614D5968();
  BOOL v57 = os_log_type_enabled(v55, v56);
  uint64_t v165 = v50;
  if (v57)
  {
    char v58 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v58 = 134217984;
    v179[0] = *(void *)(v50 + 16);
    sub_2614D5B58();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2613B8000, v55, v56, "[n_segs] (clusterWindows+getMetaClusters): %ld", v58, 0xCu);
    char v59 = v58;
    unint64_t v10 = v171;
    MEMORY[0x263E38060](v59, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  BOOL v63 = *(void (**)(char *, char *))(v7 + 8);
  uint64_t v159 = v7 + 8;
  unint64_t v158 = v63;
  v63(v15, v10);
  uint64_t v64 = *(void *)(v52 + 16);
  if (!v64) {
    goto LABEL_111;
  }
  uint64_t v65 = *(void *)(v52 + 8 * v64 + 24);
  uint64_t v66 = swift_bridgeObjectRelease();
  uint64_t v67 = *(void *)v170(v66);
  uint64_t v68 = (*(uint64_t (**)(void))(v67 + 312))();
  swift_release();
  BOOL v69 = __OFADD__(v65, v68);
  uint64_t v70 = v65 + v68;
  if (v69)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  uint64_t v71 = *(void *)(v37 + 16);
  uint64_t v72 = (void *)swift_release();
  if (v71 >= v70) {
    uint64_t v7 = v70;
  }
  else {
    uint64_t v7 = v71;
  }
  uint64_t v74 = *(void *)(v165 + 16);
  if (!v74)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  char v75 = 0;
  unint64_t v76 = 0;
  uint64_t v163 = v165 + 32;
  unint64_t v144 = (2 * v7) | 1;
  uint64_t v143 = v152 + 32;
  uint64_t v146 = v74 - 1;
  *(void *)&long long v73 = 134218754;
  long long v149 = v73;
  uint64_t v148 = MEMORY[0x263F8EE58] + 8;
  unint64_t v173 = (void *)MEMORY[0x263F8EE78];
  a1 = (unint64_t)v189;
  uint64_t v172 = v7;
  uint64_t v161 = v74;
  while (2)
  {
    unint64_t v77 = v76;
    while (1)
    {
      if (v77 >= *(void *)(v165 + 16)) {
        goto LABEL_95;
      }
      uint64_t v78 = *(void *)(v163 + 8 * v77);
      BOOL v69 = __OFSUB__(v7, v78);
      uint64_t v79 = v7 - v78;
      if (v69) {
        goto LABEL_96;
      }
      unint64_t v174 = v77;
      uint64_t v80 = v170((uint64_t)v72);
      uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 192))(v80);
      uint64_t v72 = (void *)swift_release();
      if (v81 < v79)
      {
        uint64_t v72 = (*(void *(**)(uint64_t *__return_ptr, void *))(*(void *)a1 + 256))(v179, v72);
        if (v79 < v188) {
          break;
        }
      }
      unint64_t v77 = v174 + 1;
      uint64_t v7 = v172;
      if (v161 == v174 + 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v75) {
          goto LABEL_89;
        }
        goto LABEL_90;
      }
    }
    uint64_t v82 = v170((uint64_t)v72);
    uint64_t v83 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 288))(v82);
    swift_release();
    if (__OFSUB__(v78, v83)) {
      goto LABEL_107;
    }
    uint64_t v84 = (v78 - v83) & ~((v78 - v83) >> 63);
    uint64_t v7 = v172;
    uint64_t v85 = v172 - v84;
    if (v172 < v84)
    {
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    unint64_t v86 = *(void *)(v152 + 16);
    if (v86 < v84 || (uint64_t)v86 < v172) {
      goto LABEL_109;
    }
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    uint64_t v88 = swift_dynamicCastClass();
    if (!v88)
    {
      swift_bridgeObjectRelease();
      uint64_t v88 = MEMORY[0x263F8EE78];
    }
    uint64_t v89 = *(void *)(v88 + 16);
    swift_release();
    if (v89 == v85)
    {
      uint64_t v90 = swift_dynamicCastClass();
      if (!v90)
      {
        swift_bridgeObjectRelease();
        uint64_t v90 = MEMORY[0x263F8EE78];
      }
    }
    else
    {
      uint64_t v136 = v152;
      swift_bridgeObjectRelease();
      uint64_t v90 = sub_2613DAE10(v136, v143, v84, v144);
    }
    uint64_t v145 = (void *)v90;
    swift_bridgeObjectRelease();
    if (v75) {
      swift_bridgeObjectRelease();
    }
    uint64_t v91 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 280);
    uint64_t v92 = v145;
    uint64_t v93 = swift_bridgeObjectRetain();
    a1 = v91(v93);
    long long v15 = (char *)v175();
    uint64_t v94 = (*(uint64_t (**)(void *, char *))((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x68))(v92, v15);
    if (v4) {
      goto LABEL_97;
    }
    uint64_t v95 = v94;
    uint64_t v164 = v84;
    unint64_t v142 = v174 + 1;

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v96 = 0;
    uint64_t v154 = v95;
    uint64_t v97 = *(void *)(v95 + 64);
    uint64_t v150 = v95 + 64;
    uint64_t v98 = 1 << *(unsigned char *)(v95 + 32);
    if (v98 < 64) {
      uint64_t v99 = ~(-1 << v98);
    }
    else {
      uint64_t v99 = -1;
    }
    unint64_t v100 = v99 & v97;
    int64_t v151 = (unint64_t)(v98 + 63) >> 6;
    unint64_t v153 = 0;
    unint64_t v26 = (unint64_t)v173;
    while (1)
    {
      a1 = (unint64_t)v189;
      if (v100)
      {
        uint64_t v167 = (v100 - 1) & v100;
        int64_t v168 = v96;
        unint64_t v101 = __clz(__rbit64(v100)) | (v96 << 6);
        goto LABEL_79;
      }
      int64_t v102 = v96 + 1;
      if (__OFADD__(v96, 1))
      {
        __break(1u);
        goto LABEL_101;
      }
      if (v102 >= v151) {
        break;
      }
      unint64_t v103 = *(void *)(v150 + 8 * v102);
      int64_t v104 = v96 + 1;
      if (!v103)
      {
        int64_t v104 = v96 + 2;
        if (v96 + 2 >= v151) {
          break;
        }
        unint64_t v103 = *(void *)(v150 + 8 * v104);
        if (!v103)
        {
          int64_t v104 = v96 + 3;
          if (v96 + 3 >= v151) {
            break;
          }
          unint64_t v103 = *(void *)(v150 + 8 * v104);
          if (!v103)
          {
            uint64_t v105 = v96 + 4;
            if (v96 + 4 >= v151) {
              break;
            }
            unint64_t v103 = *(void *)(v150 + 8 * v105);
            int64_t v104 = v96 + 4;
            if (!v103)
            {
              while (1)
              {
                int64_t v104 = v105 + 1;
                if (__OFADD__(v105, 1)) {
                  break;
                }
                if (v104 >= v151) {
                  goto LABEL_85;
                }
                unint64_t v103 = *(void *)(v150 + 8 * v104);
                ++v105;
                if (v103) {
                  goto LABEL_78;
                }
              }
              __break(1u);
              goto LABEL_106;
            }
          }
        }
      }
LABEL_78:
      uint64_t v167 = (v103 - 1) & v103;
      int64_t v168 = v104;
      unint64_t v101 = __clz(__rbit64(v103)) + (v104 << 6);
LABEL_79:
      uint64_t v106 = (uint64_t *)(*(void *)(v154 + 48) + 16 * v101);
      uint64_t v107 = *v106;
      unint64_t v108 = v106[1];
      float v109 = *(float *)(*(void *)(v154 + 56) + 4 * v101);
      swift_bridgeObjectRetain_n();
      double v110 = sub_26140C3F8();
      double v111 = sub_26140C3F8();
      char v112 = sub_2613D04A8();
      char v113 = sub_2613D04A8();
      char v114 = sub_2613F8710();
      uint64_t v162 = v107;
      sub_2614967F4(v107, v108, v164, v7, v112 & 1, v113 & 1, v114 & 1, (uint64_t)v179, v109, v110, v111);
      uint64_t v115 = v179[0];
      uint64_t v116 = v179[1];
      int v117 = v180;
      uint64_t v118 = v181;
      uint64_t v119 = v182;
      uint64_t v120 = v183;
      uint64_t v121 = v184;
      char v122 = v185;
      char v123 = v186;
      int v124 = v187;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      int v166 = v124;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        unint64_t v26 = (unint64_t)sub_261416300(0, *(void *)(v26 + 16) + 1, 1, (void *)v26);
      }
      uint64_t v126 = (void *)v26;
      unint64_t v127 = *(void *)(v26 + 16);
      unint64_t v173 = v126;
      unint64_t v128 = v126[3];
      if (v127 >= v128 >> 1) {
        unint64_t v173 = sub_261416300((void *)(v128 > 1), v127 + 1, 1, v173);
      }
      uint64_t v129 = v173;
      v173[2] = v127 + 1;
      uint64_t v130 = &v129[8 * v127];
      unint64_t v26 = (unint64_t)v129;
      v130[4] = v115;
      v130[5] = v116;
      *((_DWORD *)v130 + 12) = v117;
      v130[7] = v118;
      v130[8] = v119;
      v130[9] = v120;
      v130[10] = v121;
      *((unsigned char *)v130 + 88) = v122;
      *((unsigned char *)v130 + 89) = v123;
      *((unsigned char *)v130 + 90) = v166;
      long long v15 = v177;
      unint64_t v10 = v171;
      v155(v177, v156, v171);
      swift_bridgeObjectRetain();
      unint64_t v131 = sub_2614D50A8();
      os_log_type_t v132 = sub_2614D5968();
      if (os_log_type_enabled(v131, v132))
      {
        uint64_t v133 = swift_slowAlloc();
        uint64_t v134 = swift_slowAlloc();
        v179[0] = v134;
        *(_DWORD *)uint64_t v133 = v149;
        *(void *)(v133 + 4) = v164;
        *(_WORD *)(v133 + 12) = 2048;
        uint64_t v7 = v172;
        *(void *)(v133 + 14) = v172;
        *(_WORD *)(v133 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v133 + 24) = sub_2613D875C(v162, v108, v179);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v133 + 32) = 2048;
        *(double *)(v133 + 34) = v109;
        _os_log_impl(&dword_2613B8000, v131, v132, "\t[scores][%ld][%ld]: %s: %f", (uint8_t *)v133, 0x2Au);
        swift_arrayDestroy();
        uint64_t v135 = v134;
        unint64_t v26 = (unint64_t)v173;
        MEMORY[0x263E38060](v135, -1, -1);
        MEMORY[0x263E38060](v133, -1, -1);

        v158(v15, v10);
        uint64_t v4 = v153;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v158(v15, v10);
        uint64_t v4 = v153;
        uint64_t v7 = v172;
      }
      int64_t v96 = v168;
      unint64_t v100 = v167;
    }
LABEL_85:
    unint64_t v173 = (void *)v26;
    swift_release();
    char v75 = 1;
    uint64_t v72 = v145;
    unint64_t v76 = v142;
    if (v146 != v174) {
      continue;
    }
    break;
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_89:
  swift_bridgeObjectRelease();
LABEL_90:
  uint64_t v62 = v173;
LABEL_91:
  type metadata accessor for VAKeywordResult();
  uint64_t v137 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v62);
  sub_261481280(v137, v178);
}

uint64_t sub_2614A20B8(unint64_t a1)
{
  unint64_t v1 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
    type metadata accessor for EncoderPredictionAVS();
    if (swift_dynamicCastMetatype()) {
      return v1;
    }
    unint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v1;
    }
    unint64_t v5 = 0;
    while (v5 < v4)
    {
      swift_unknownObjectRetain();
      if (!swift_dynamicCastClass())
      {
        swift_unknownObjectRelease();
        return v2 | 1;
      }
      ++v5;
      swift_unknownObjectRelease();
      unint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5 == v4) {
        return v1;
      }
    }
    __break(1u);
  }
  type metadata accessor for EncoderPredictionAVS();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_2614D5D78();
  swift_bridgeObjectRelease();
  return v6;
}

void sub_2614A21C4()
{
}

uint64_t sub_2614A21F4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t VAAVSVerifierModel.makeRuntimeParameters()@<X0>(void *a1@<X8>)
{
  os_log_type_t v56 = a1;
  uint64_t v2 = sub_2614D50C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  VARuntimeParameters.init()((uint64_t)&v68);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 664))();
  uint64_t v8 = result;
  int64_t v9 = 0;
  uint64_t v10 = *(void *)(result + 64);
  uint64_t v59 = result + 64;
  uint64_t v11 = 1 << *(unsigned char *)(result + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v60 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v62 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
  BOOL v63 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v14 = (void *)MEMORY[0x263F8EE78];
  *(void *)&long long v7 = 136315394;
  long long v58 = v7;
  uint64_t v57 = MEMORY[0x263F8EE58] + 8;
  while (1)
  {
    if (v13)
    {
      uint64_t v64 = (v13 - 1) & v13;
      int64_t v65 = v9;
      unint64_t v15 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v60) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v59 + 8 * v16);
    int64_t v18 = v9 + 1;
    if (!v17)
    {
      int64_t v18 = v9 + 2;
      if (v9 + 2 >= v60) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v59 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v9 + 3;
        if (v9 + 3 >= v60) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v59 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v64 = (v17 - 1) & v17;
    int64_t v65 = v18;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_22:
    unint64_t v20 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v15);
    uint64_t v21 = v20[1];
    float v22 = *(float *)(*(void *)(v8 + 56) + 4 * v15);
    uint64_t v66 = *v20;
    unint64_t v67 = v21;
    swift_bridgeObjectRetain();
    sub_2614D54D8();
    uint64_t v23 = v66;
    unint64_t v24 = v67;
    sub_2614D5868();
    uint64_t v66 = v23;
    unint64_t v67 = v24;
    swift_bridgeObjectRetain();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = v66;
    unint64_t v25 = v67;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = sub_2613D864C(0, v14[2] + 1, 1, v14);
    }
    unint64_t v28 = v14[2];
    unint64_t v27 = v14[3];
    if (v28 >= v27 >> 1) {
      uint64_t v14 = sub_2613D864C((void *)(v27 > 1), v28 + 1, 1, v14);
    }
    v14[2] = v28 + 1;
    uint64_t v29 = &v14[2 * v28];
    v29[4] = v26;
    v29[5] = v25;
    uint64_t v30 = sub_26146718C();
    (*v63)(v5, v30, v2);
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_2614D50A8();
    os_log_type_t v32 = sub_2614D5968();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      unint64_t v61 = v14;
      uint64_t v35 = v8;
      os_log_type_t v36 = v5;
      uint64_t v37 = v2;
      uint64_t v38 = v34;
      uint64_t v66 = v34;
      *(_DWORD *)uint64_t v33 = v58;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 4) = sub_2613D875C(v26, v25, &v66);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2048;
      *(double *)(v33 + 14) = v22;
      _os_log_impl(&dword_2613B8000, v31, v32, "Command %s set to %f", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      uint64_t v39 = v38;
      uint64_t v2 = v37;
      unint64_t v5 = v36;
      uint64_t v8 = v35;
      uint64_t v14 = v61;
      MEMORY[0x263E38060](v39, -1, -1);
      MEMORY[0x263E38060](v33, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t result = (*v62)(v5, v2);
    unint64_t v13 = v64;
    int64_t v9 = v65;
  }
  uint64_t v19 = v9 + 4;
  if (v9 + 4 >= v60)
  {
LABEL_28:
    swift_release();
    swift_bridgeObjectRelease();
    int v40 = v69;
    char v41 = v70;
    char v42 = v71;
    char v43 = v73;
    uint64_t v44 = v74;
    char v45 = v75;
    char v46 = v76;
    int v47 = v77;
    char v48 = v78;
    __int16 v49 = v80;
    char v50 = v81;
    char v51 = v82;
    char v52 = v83;
    uint64_t result = v84;
    char v53 = v85;
    BOOL v54 = v56;
    *os_log_type_t v56 = v14;
    *((_DWORD *)v54 + 2) = v40;
    *((unsigned char *)v54 + 12) = v41;
    *((unsigned char *)v54 + 13) = v42;
    *((_OWORD *)v54 + 1) = v72;
    *((unsigned char *)v54 + 32) = v43;
    v54[5] = v44;
    *((unsigned char *)v54 + 48) = v45;
    *((unsigned char *)v54 + 49) = v46;
    *((_DWORD *)v54 + 13) = v47;
    *((unsigned char *)v54 + 56) = v48;
    *((_OWORD *)v54 + 4) = v79;
    *((_WORD *)v54 + 40) = v49;
    *((unsigned char *)v54 + 82) = v50;
    *((unsigned char *)v54 + 83) = v51;
    *((unsigned char *)v54 + 84) = v52;
    *((unsigned char *)v54 + 85) = result;
    *((unsigned char *)v54 + 86) = v53;
    return result;
  }
  unint64_t v17 = *(void *)(v59 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v9 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v60) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v59 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2614A2794@<X0>(void *a1@<X8>)
{
  return VAAVSVerifierModel.makeRuntimeParameters()(a1);
}

uint64_t sub_2614A27B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  long long v58 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v57 = (char *)&v56 - v8;
  int64_t v9 = (uint64_t *)(a1 + *(int *)(v7 + 24));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = *(uint64_t (**)(void))(*(void *)v1 + 352);
  uint64_t v13 = swift_bridgeObjectRetain_n();
  uint64_t v14 = ((uint64_t (*)(uint64_t))v12)(v13);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v60 = v10;
  if (v15 && (unint64_t v16 = sub_2613D8F00(v10, v11), (v17 & 1) != 0))
  {
    int64_t v18 = *(void **)(*(void *)(v14 + 56) + 8 * v16);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v19 = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for AVSCommand();
    int64_t v18 = (void *)swift_allocObject();
    uint64_t v20 = MEMORY[0x263F8EE78];
    v18[3] = v11;
    v18[4] = v20;
    v18[2] = v10;
    uint64_t v19 = swift_bridgeObjectRetain();
  }
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 280))(v19);
  uint64_t v22 = *(int *)(v4 + 20);
  uint64_t v61 = a1;
  uint64_t v23 = *(void *)(a1 + v22);
  uint64_t v24 = v12();
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v21) + 0x60))(v23, v24);
  float v27 = v26;

  uint64_t v28 = swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)((*(uint64_t (**)(uint64_t))(*v18 + 120))(v28) + 16);
  uint64_t v30 = swift_bridgeObjectRelease();
  if (v29 < (*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v30)
    || !*(void *)(v25 + 16)
    || (swift_bridgeObjectRetain(), sub_2613D8F00(v60, v11), char v32 = v31, swift_bridgeObjectRelease(), (v32 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)(v25 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v33 = sub_2613D8F00(v60, v11);
    if (v34)
    {
      float v35 = *(float *)(*(void *)(v25 + 56) + 4 * v33);
      swift_bridgeObjectRelease();
      uint64_t v36 = swift_bridgeObjectRelease();
      float v37 = (*(float (**)(uint64_t))(*(void *)v2 + 592))(v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35 < v37 || v27 == -99999.0)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = v61;
        uint64_t v40 = (uint64_t)v57;
        goto LABEL_20;
      }
LABEL_17:
      uint64_t v41 = v61;
      v63[0] = *(unsigned char *)(v61 + *(int *)(v4 + 40));
      LOBYTE(v62) = 1;
      if (static VASingleEnrollmentStatus.== infix(_:_:)(v63, (unsigned __int8 *)&v62))
      {
        (*(void (**)(uint64_t))(*v18 + 152))(v41);
        char v42 = *(uint64_t (**)(unsigned __int8 *))(*(void *)v2 + 368);
        swift_retain();
        char v43 = (void (*)(unsigned __int8 *, void))v42(v63);
        char v45 = v44;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v62 = *v45;
        uint64_t *v45 = 0x8000000000000000;
        sub_2614A45AC((uint64_t)v18, v60, v11, isUniquelyReferenced_nonNull_native);
        uint64_t *v45 = v62;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43(v63, 0);
        return swift_release();
      }
      swift_bridgeObjectRelease();
      uint64_t v39 = v41;
      uint64_t v40 = (uint64_t)v58;
LABEL_20:
      sub_26145066C(v39, v40);
      int v47 = (void (*)(unsigned __int8 *, void))(*(uint64_t (**)(unsigned __int8 *))(*(void *)v2 + 584))(v63);
      __int16 v49 = v48;
      unint64_t v50 = *v48;
      char v51 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v49 = v50;
      if ((v51 & 1) == 0)
      {
        unint64_t v50 = sub_261451E2C(0, *(void *)(v50 + 16) + 1, 1, v50);
        unint64_t *v49 = v50;
      }
      uint64_t v52 = v59;
      unint64_t v54 = *(void *)(v50 + 16);
      unint64_t v53 = *(void *)(v50 + 24);
      if (v54 >= v53 >> 1)
      {
        unint64_t v50 = sub_261451E2C(v53 > 1, v54 + 1, 1, v50);
        unint64_t *v49 = v50;
      }
      *(void *)(v50 + 16) = v54 + 1;
      sub_261452094(v40, v50+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v54);
      v47(v63, 0);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAAVSVerifierModel.setAudioEnrollments(enrollments:)(Swift::OpaquePointer enrollments)
{
  void (*v72)(uint64_t *__return_ptr, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t *v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  float (*v99)(void);
  uint64_t v100;
  float (**v101)(void);
  float (*v102)(void);
  uint64_t v103;
  float (*v104)(void);
  uint64_t v105;
  float (**v106)(void);
  float v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  uint64_t (*v119)(uint64_t *);
  void (*v120)(uint64_t *, void);
  double *v121;
  double *v122;
  char isUniquelyReferenced_nonNull_native;
  void *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t (*v134)(uint64_t *);
  uint64_t v135;
  void (*v136)(uint64_t *, void);
  double *v137;
  double *v138;
  char v139;
  void v140[2];
  long long v141;
  uint64_t *v142;
  uint64_t v143;
  int64_t v144;
  uint64_t v145;
  uint64_t (*v146)(uint64_t);
  uint64_t v147;
  char *v148;
  unint64_t v149;
  int64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  long long v156;
  void (**v157)(char *, uint64_t);
  void (**v158)(char *, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  char *v173;
  double v174;
  uint64_t v175;
  float v176;
  uint64_t v177[4];
  uint64_t v178;

  uint64_t v169 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v4 = *(void *)(v169 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v169);
  uint64_t v152 = (uint64_t)v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int64_t v151 = (uint64_t)v140 - v7;
  uint64_t v160 = sub_2614D50C8();
  uint64_t v8 = *(void *)(v160 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v160);
  unint64_t v173 = (char *)v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v148 = (char *)v140 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v162 = (char *)v140 - v13;
  uint64_t v14 = MEMORY[0x263F8EE78];
  (*(void (**)(void))(*v1 + 336))(MEMORY[0x263F8EE78]);
  uint64_t v15 = MEMORY[0x263F8EE80];
  (*(void (**)(void))(*v1 + 360))(MEMORY[0x263F8EE80]);
  (*(void (**)(uint64_t))(*v1 + 576))(v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*v1 + 672))(v15);
  uint64_t v17 = *((void *)enrollments._rawValue + 2);
  int v166 = v1;
  uint64_t v159 = v4;
  if (v17)
  {
    int64_t v18 = (char *)enrollments._rawValue
        + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v19 = *(void *)(v4 + 72);
    *(void *)&uint64_t v171 = v8 + 16;
    uint64_t v172 = v19;
    do
    {
      uint64_t v16 = sub_2614A27B8((uint64_t)v18);
      if (v2)
      {
        uint64_t v20 = sub_26146718C();
        uint64_t v21 = v160;
        (**(void (***)(char *, uint64_t, uint64_t))&v171)(v173, v20, v160);
        uint64_t v22 = sub_2614D50A8();
        os_log_type_t v23 = sub_2614D5978();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v24 = 0;
          _os_log_impl(&dword_2613B8000, v22, v23, "Error adding enrollment.", v24, 2u);
          uint64_t v25 = v24;
          uint64_t v21 = v160;
          MEMORY[0x263E38060](v25, -1, -1);
        }

        uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v173, v21);
        uint64_t v2 = 0;
        uint64_t v1 = v166;
      }
      v18 += v172;
      --v17;
    }
    while (v17);
  }
  v140[0] = v2;
  float v26 = *(uint64_t (**)(uint64_t))(*v1 + 352);
  uint64_t v145 = *v1 + 352;
  uint64_t v146 = v26;
  uint64_t v27 = v26(v16);
  int64_t v29 = 0;
  uint64_t v30 = *(void *)(v27 + 64);
  uint64_t v143 = v27 + 64;
  uint64_t v147 = v27;
  uint64_t v31 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & v30;
  unint64_t v144 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v157 = (void (**)(char *, uint64_t))(v8 + 8);
  unint64_t v158 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  unint64_t v142 = &v175;
  *(void *)&long long v28 = 136315650;
  uint64_t v141 = v28;
  v140[1] = MEMORY[0x263F8EE58] + 8;
  *(void *)&long long v28 = 134217984;
  uint64_t v156 = v28;
  if ((v32 & v30) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v34 = __clz(__rbit64(v33));
  uint64_t v35 = (v33 - 1) & v33;
  for (unint64_t i = v34 | (v29 << 6); ; unint64_t i = __clz(__rbit64(v38)) + (v29 << 6))
  {
    uint64_t v40 = (uint64_t *)(*(void *)(v147 + 48) + 16 * i);
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    uint64_t v43 = *(void *)(*(void *)(v147 + 56) + 8 * i);
    swift_bridgeObjectRetain_n();
    uint64_t v44 = swift_retain();
    uint64_t v45 = v146(v44);
    if (!*(void *)(v45 + 16)) {
      break;
    }
    unint64_t v155 = v42;
    unint64_t v46 = sub_2613D8F00(v42, v41);
    if ((v47 & 1) == 0) {
      goto LABEL_96;
    }
    long long v149 = v35;
    uint64_t v150 = v29;
    uint64_t v48 = *(void *)(*(void *)(v45 + 56) + 8 * v46);
    swift_retain();
    uint64_t v154 = v41;
    swift_bridgeObjectRelease();
    uint64_t v49 = swift_bridgeObjectRelease();
    uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 120))(v49);
    swift_release();
    unint64_t v51 = *(void *)(v50 + 16);
    uint64_t v52 = sub_2613D1B04(v51, 0);
    unint64_t v153 = v43;
    uint64_t v164 = v50;
    if (v51)
    {
      unint64_t v53 = 0;
      uint64_t v54 = v160;
      uint64_t v163 = v50 + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
      uint64_t v55 = (char *)MEMORY[0x263F8EE78];
      uint64_t v165 = (void *)MEMORY[0x263F8EE78];
      uint64_t v167 = v51;
      while (v53 < *(void *)(v50 + 16))
      {
        unint64_t v173 = *(char **)(v159 + 72);
        uint64_t v170 = *(int *)(v169 + 20);
        *(void *)&uint64_t v171 = v163 + (void)v173 * v53;
        uint64_t v56 = *(void *)(*(void *)(*(void *)&v171 + v170) + 16);
        uint64_t v57 = v165;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v57 = sub_2613E1088(0, v57[2] + 1, 1, v57);
        }
        unint64_t v59 = v57[2];
        unint64_t v58 = v57[3];
        uint64_t v165 = v57;
        if (v59 >= v58 >> 1) {
          uint64_t v165 = sub_2613E1088((void *)(v58 > 1), v59 + 1, 1, v165);
        }
        uint64_t v60 = v165;
        v165[2] = v59 + 1;
        v60[v59 + 4] = v56;
        uint64_t v61 = sub_26146718C();
        uint64_t v62 = v54;
        (*v158)(v162, v61, v54);
        swift_bridgeObjectRetain();
        BOOL v63 = sub_2614D50A8();
        os_log_type_t v64 = sub_2614D5968();
        if (os_log_type_enabled(v63, v64))
        {
          int64_t v65 = v55;
          uint64_t v66 = swift_slowAlloc();
          *(_DWORD *)uint64_t v66 = v156;
          *(void *)(v66 + 4) = *(void *)(*(void *)(*(void *)&v171 + v170) + 16);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2613B8000, v63, v64, "Command length %ld", (uint8_t *)v66, 0xCu);
          uint64_t v67 = v66;
          uint64_t v55 = v65;
          unint64_t v51 = v167;
          MEMORY[0x263E38060](v67, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        unint64_t v68 = v53;
        uint64_t v161 = v53 + 1;
        (*v157)(v162, v62);
        uint64_t v69 = 0;
        unint64_t v70 = v163;
        int64_t v168 = v68;
        do
        {
          if (v68 != v69)
          {
            uint64_t v172 = v52;
            uint64_t v71 = *(void *)(*(void *)&v171 + v170);
            long long v72 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*v166 + 256);
            char v73 = swift_bridgeObjectRetain();
            v72(v177, v73);
            sub_26140E548(v71, v178);
            uint64_t v74 = v55;
            char v76 = v75;
            swift_bridgeObjectRelease();
            int v77 = *(void *)(v70 + *(int *)(v169 + 20));
            char v78 = swift_bridgeObjectRetain();
            v72(v177, v78);
            sub_26140E548(v77, v178);
            __int16 v80 = v79;
            swift_bridgeObjectRelease();
            sub_26148AF40(v76, v80);
            char v82 = v81;
            swift_bridgeObjectRelease();
            uint64_t v55 = v74;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v55 = sub_2613D8310(0, *((void *)v74 + 2) + 1, 1, v74);
            }
            unsigned __int8 v84 = *((void *)v55 + 2);
            char v83 = *((void *)v55 + 3);
            uint64_t v52 = v172;
            unint64_t v51 = v167;
            unint64_t v68 = v168;
            if (v84 >= v83 >> 1) {
              uint64_t v55 = sub_2613D8310((char *)(v83 > 1), v84 + 1, 1, v55);
            }
            *((void *)v55 + 2) = v84 + 1;
            *(float *)&v55[4 * v84 + 32] = -v82;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v52 = (uint64_t)sub_2613D8E30(v52);
            }
            if (v68 >= *(void *)(v52 + 16))
            {
              __break(1u);
              goto LABEL_87;
            }
            *(float *)(v52 + 4 * v68 + 32) = *(float *)(v52 + 4 * v68 + 32) - v82;
          }
          ++v69;
          v70 += (unint64_t)v173;
        }
        while (v51 != v69);
        uint64_t v54 = v160;
        unint64_t v53 = v161;
        uint64_t v50 = v164;
        if (v161 == v51) {
          goto LABEL_49;
        }
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    uint64_t v55 = (char *)MEMORY[0x263F8EE78];
    uint64_t v165 = (void *)MEMORY[0x263F8EE78];
    uint64_t v54 = v160;
LABEL_49:
    char v85 = v165[2];
    if (!v85) {
      goto LABEL_90;
    }
    unint64_t v86 = v54;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    do
    {
      uint64_t v89 = v165[v87 + 4];
      BOOL v37 = __OFADD__(v88, v89);
      v88 += v89;
      if (v37)
      {
        __break(1u);
        goto LABEL_89;
      }
      ++v87;
    }
    while (v85 != v87);
    uint64_t v90 = sub_2614714B4(v52);
    if ((v90 & 0x100000000) != 0) {
      goto LABEL_97;
    }
    uint64_t v91 = *(void *)(v52 + 16);
    if (!v91) {
      goto LABEL_94;
    }
    uint64_t v92 = 0;
    if (*(float *)(v52 + 32) != *(float *)&v90)
    {
      uint64_t v93 = v91 - 1;
      while (v93 != v92)
      {
        uint64_t v94 = *(float *)(v52 + 36 + 4 * v92++);
        if (v94 == *(float *)&v90) {
          goto LABEL_59;
        }
      }
      goto LABEL_94;
    }
LABEL_59:
    uint64_t v95 = v166;
    int64_t v96 = (*(float (**)(void))(*v166 + 400))() * *(float *)&v90;
    uint64_t v176 = v96;
    uint64_t v97 = (*(uint64_t (**)(void))(*v95 + 496))();
    uint64_t v98 = *v95;
    *(void *)&uint64_t v171 = v88 / v85;
    if (v97 >= v88 / v85)
    {
      int64_t v104 = *(float (**)(void))(v98 + 520);
      if (v96 < v104())
      {
        int64_t v96 = v104();
        uint64_t v105 = swift_beginAccess();
        uint64_t v176 = v96;
      }
      uint64_t v106 = (float (**)(void))(*v95 + 544);
      int64_t v102 = *v106;
      if (((float (*)(uint64_t))*v106)(v105) < v96)
      {
LABEL_67:
        int64_t v96 = v102();
        unint64_t v103 = swift_beginAccess();
        uint64_t v176 = v96;
      }
    }
    else
    {
      uint64_t v99 = *(float (**)(void))(v98 + 424);
      if (v96 < v99())
      {
        int64_t v96 = v99();
        unint64_t v100 = swift_beginAccess();
        uint64_t v176 = v96;
      }
      unint64_t v101 = (float (**)(void))(*v95 + 448);
      int64_t v102 = *v101;
      if (((float (*)(uint64_t))*v101)(v100) < v96) {
        goto LABEL_67;
      }
    }
    uint64_t v172 = v52;
    if ((~LODWORD(v96) & 0x7F800000) == 0 && (LODWORD(v96) & 0x7FFFFF) != 0)
    {
      unint64_t v108 = (*(float (**)(uint64_t))(*v166 + 472))(v103);
      swift_beginAccess();
      uint64_t v176 = v108;
    }
    unint64_t v173 = v55;
    float v109 = sub_26146718C();
    double v110 = v148;
    (*v158)(v148, v109, v86);
    double v111 = v154;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    char v112 = sub_2614D50A8();
    char v113 = sub_2614D5968();
    char v114 = v113;
    if (os_log_type_enabled(v112, v113))
    {
      uint64_t v115 = swift_slowAlloc();
      uint64_t v170 = swift_slowAlloc();
      v177[0] = v170;
      *(_DWORD *)uint64_t v115 = v141;
      swift_bridgeObjectRetain();
      LODWORD(v168) = v114;
      uint64_t v116 = v155;
      unint64_t v174 = COERCE_DOUBLE(sub_2613D875C(v155, v111, v177));
      sub_2614D5B58();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v115 + 12) = 2048;
      unint64_t v174 = v171;
      sub_2614D5B58();
      *(_WORD *)(v115 + 22) = 2048;
      swift_beginAccess();
      unint64_t v174 = v176;
      sub_2614D5B58();
      _os_log_impl(&dword_2613B8000, v112, (os_log_type_t)v168, "Mean command length for %s was %ld; set to %f",
        (uint8_t *)v115,
        0x20u);
      int v117 = v170;
      swift_arrayDestroy();
      MEMORY[0x263E38060](v117, -1, -1);
      MEMORY[0x263E38060](v115, -1, -1);

      (*v157)(v148, v160);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      (*v157)(v110, v86);
      uint64_t v116 = v155;
    }
    swift_beginAccess();
    uint64_t v118 = v176;
    uint64_t v119 = *(uint64_t (**)(uint64_t *))(*v166 + 680);
    swift_bridgeObjectRetain();
    uint64_t v120 = (void (*)(uint64_t *, void))v119(v177);
    char v122 = v121;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v174 = *v122;
    uint64_t *v122 = -0.0;
    sub_2614A4444(v116, v111, isUniquelyReferenced_nonNull_native, v118);
    uint64_t *v122 = v174;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120(v177, 0);
    type metadata accessor for AVSCommand();
    int v124 = (void *)swift_allocObject();
    v124[4] = MEMORY[0x263F8EE78];
    uint64_t v125 = v124 + 4;
    v124[2] = v116;
    v124[3] = v111;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v92 >= *(void *)(v164 + 16)) {
      goto LABEL_91;
    }
    uint64_t v126 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
    unint64_t v127 = *(void *)(v159 + 72);
    unint64_t v128 = v164 + v126 + v127 * v92;
    uint64_t v129 = v151;
    sub_26145066C(v128, v151);
    swift_bridgeObjectRelease();
    sub_26145066C(v129, v152);
    swift_beginAccess();
    uint64_t v130 = *v125;
    unint64_t v131 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v125 = v130;
    if ((v131 & 1) == 0)
    {
      uint64_t v130 = sub_261451E2C(0, *(void *)(v130 + 16) + 1, 1, v130);
      *uint64_t v125 = v130;
    }
    uint64_t v133 = *(void *)(v130 + 16);
    os_log_type_t v132 = *(void *)(v130 + 24);
    if (v133 >= v132 >> 1)
    {
      uint64_t v130 = sub_261451E2C(v132 > 1, v133 + 1, 1, v130);
      *uint64_t v125 = v130;
    }
    *(void *)(v130 + 16) = v133 + 1;
    sub_261452094(v152, v130 + v126 + v133 * v127);
    swift_endAccess();
    sub_2614A48D4(v151, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
    uint64_t v134 = *(uint64_t (**)(uint64_t *))(*v166 + 392);
    uint64_t v135 = v154;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v136 = (void (*)(uint64_t *, void))v134(v177);
    uint64_t v138 = v137;
    os_log_type_t v139 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v174 = *v138;
    *uint64_t v138 = -0.0;
    sub_2614A45AC((uint64_t)v124, v155, v135, v139);
    *uint64_t v138 = v174;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v136(v177, 0);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v33 = v149;
    int64_t v29 = v150;
    if (v149) {
      goto LABEL_11;
    }
LABEL_12:
    BOOL v37 = __OFADD__(v29++, 1);
    if (v37) {
      goto LABEL_92;
    }
    if (v29 >= v144) {
      goto LABEL_87;
    }
    unint64_t v38 = *(void *)(v143 + 8 * v29);
    if (!v38)
    {
      int64_t v39 = v29 + 1;
      if (v29 + 1 >= v144) {
        goto LABEL_87;
      }
      unint64_t v38 = *(void *)(v143 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = v29 + 2;
        if (v29 + 2 >= v144) {
          goto LABEL_87;
        }
        unint64_t v38 = *(void *)(v143 + 8 * v39);
        if (!v38)
        {
          int64_t v39 = v29 + 3;
          if (v29 + 3 >= v144)
          {
LABEL_87:
            swift_release();
            return;
          }
          unint64_t v38 = *(void *)(v143 + 8 * v39);
          if (!v38)
          {
            while (1)
            {
              int64_t v29 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                break;
              }
              if (v29 >= v144) {
                goto LABEL_87;
              }
              unint64_t v38 = *(void *)(v143 + 8 * v29);
              ++v39;
              if (v38) {
                goto LABEL_22;
              }
            }
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
            break;
          }
        }
      }
      int64_t v29 = v39;
    }
LABEL_22:
    uint64_t v35 = (v38 - 1) & v38;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_96:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_97:
  __break(1u);
}

void sub_2614A3FE8(Swift::OpaquePointer a1)
{
}

uint64_t type metadata accessor for AVSVerifierModel()
{
  return self;
}

char *sub_2614A4030(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_2613C23AC(&qword_26A915038);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_261422EC8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2614A412C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_2613C23AC(qword_26A915D88);
  char v36 = a2;
  uint64_t v6 = sub_2614D5DC8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_2614D6088();
    sub_2614D5478();
    uint64_t result = sub_2614D60B8();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_2614A4444(uint64_t a1, uint64_t a2, char a3, float a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_2613D8F00(a1, a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_26149AD80();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(float *)(v18[7] + 4 * v12) = a4;
      return result;
    }
    goto LABEL_11;
  }
  sub_26149AA78(result, a3 & 1);
  uint64_t result = sub_2613D8F00(a1, a2);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = sub_2614D5FF8();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a1;
  v20[1] = a2;
  *(float *)(v18[7] + 4 * v12) = a4;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2614A45AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_2613D8F00(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2614A471C();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_2614A412C(v15, a4 & 1);
  unint64_t v21 = sub_2613D8F00(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_2614D5FF8();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;
  return swift_bridgeObjectRetain();
}

void *sub_2614A471C()
{
  uint64_t v1 = v0;
  sub_2613C23AC(qword_26A915D88);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2614D5DB8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2614A48D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AVSCommand()
{
  return self;
}

uint64_t sub_2614A495C()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AVSEnrollmentError()
{
  return sub_2614A4974();
}

uint64_t sub_2614A4974()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12VoiceActions18AVSEnrollmentErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_2614A495C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AVSEnrollmentError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_2614A495C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_2614A4974();
  return a1;
}

uint64_t assignWithTake for AVSEnrollmentError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_2614A4974();
  return a1;
}

uint64_t getEnumTagSinglePayload for AVSEnrollmentError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AVSEnrollmentError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_2614A4AF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_2614A4AFC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AVSEnrollmentError()
{
  return &type metadata for AVSEnrollmentError;
}

uint64_t method lookup function for AVSVerifierModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AVSVerifierModel);
}

uint64_t type metadata accessor for VAAVSVerifierModel()
{
  return self;
}

uint64_t method lookup function for VAAVSVerifierModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAAVSVerifierModel);
}

uint64_t dispatch thunk of VAAVSVerifierModel.enrollmentsRejected.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.enrollmentsRejected.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.enrollmentsRejected.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.rejectEnrollmentThreshold.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.rejectEnrollmentThreshold.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.rejectEnrollmentThreshold.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.minEnrollmentsBeforeRejecting.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.minEnrollmentsBeforeRejecting.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.minEnrollmentsBeforeRejecting.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.personalizedKeywordThresholds.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.personalizedKeywordThresholds.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.personalizedKeywordThresholds.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.__allocating_init(configuration:)()
{
  return (*(uint64_t (**)(void))(v0 + 688))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.maxKeywords.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.setEndpointerConfig(config:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.unwrapEncoderPredictionObject(predictionInput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.predict(predictionInput:shouldSkipVerifierInference:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t sub_2614A4E68(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_2614A4EB8(a1);
  return v2;
}

uint64_t sub_2614A4EB8(void *a1)
{
  uint64_t v3 = v1;
  *(void *)(v1 + 72) = 0x7475706E69;
  *(void *)(v1 + 80) = 0xE500000000000000;
  strcpy((char *)(v1 + 88), "keyword_mask");
  *(unsigned char *)(v1 + 101) = 0;
  *(_WORD *)(v1 + 102) = -5120;
  *(void *)(v1 + 104) = 0x6974636964657270;
  *(void *)(v1 + 112) = 0xEB00000000736E6FLL;
  *(void *)(v1 + 120) = 0x7374657366666FLL;
  *(void *)(v1 + 128) = 0xE700000000000000;
  *(void *)(v1 + 136) = 0x736874646977;
  *(void *)(v1 + 144) = 0xE600000000000000;
  char v5 = (void *)MEMORY[0x263F8EED0];
  uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x98))();
  if (!v6)
  {
    sub_2613DC2B8();
    swift_allocError();
    *unint64_t v15 = 0xD000000000000020;
    v15[1] = 0x80000002614E7230;
    swift_willThrow();
LABEL_7:

    goto LABEL_8;
  }
  unint64_t v7 = (void *)v6;
  uint64_t v8 = (void *)(*(uint64_t (**)(void))((*v5 & *a1) + 0xC8))();
  if (!v8)
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v16 = 0xD000000000000031;
    v16[1] = 0x80000002614E7260;
    swift_willThrow();

    goto LABEL_7;
  }
  uint64_t v98 = v8;
  *(void *)(v1 + 16) = a1;
  type metadata accessor for VAEspressoUtilsV2();
  int64_t v9 = *(uint64_t (**)(void))((*v5 & *v7) + 0x98);
  uint64_t v10 = a1;
  uint64_t v11 = v9();
  unint64_t v13 = v12;
  char v14 = sub_2613D04A8();
  sub_26148DB30(v11, v13, v14 & 1, (uint64_t *)v97);
  if (!v2)
  {
    uint64_t v20 = swift_bridgeObjectRelease();
    long long v21 = v97[1];
    *(_OWORD *)(v3 + 24) = v97[0];
    *(_OWORD *)(v3 + 40) = v21;
    *(_OWORD *)(v3 + 56) = v97[2];
    int64_t v22 = (void *)MEMORY[0x263F8EED0];
    int64_t v96 = v7;
    uint64_t v94 = *(void *)((*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0xB0))(v20) + 16);
    uint64_t v23 = swift_bridgeObjectRelease();
    int64_t v24 = *(uint64_t (**)(void))((*v22 & *v10) + 0x80);
    BOOL v25 = (void *)((uint64_t (*)(uint64_t))v24)(v23);
    uint64_t v26 = (*(uint64_t (**)(void))((*v22 & *v25) + 0x160))();

    id v27 = v98;
    uint64_t v28 = (*(uint64_t (**)(void))((*v22 & *v98) + 0x138))();
    if (v28)
    {
      uint64_t v29 = v28;
      if (v26 != 0x8000000000000000 || v28 != -1)
      {
        uint64_t v31 = *(void *)(v3 + 40);
        if (*(void *)(v31 + 16))
        {
          uint64_t v95 = v10;
          uint64_t v32 = *(void *)(v3 + 72);
          uint64_t v33 = *(void *)(v3 + 80);
          swift_bridgeObjectRetain();
          unint64_t v34 = sub_2613D8F00(v32, v33);
          if (v35)
          {
            uint64_t v91 = v26;
            uint64_t v36 = *(void *)(*(void *)(v31 + 56) + 8 * v34);
            swift_retain();
            swift_bridgeObjectRelease();
            sub_2613C23AC(&qword_26A914B10);
            uint64_t v37 = swift_allocObject();
            *(_OWORD *)(v37 + 16) = xmmword_2614D81C0;
            *(void *)(v37 + 32) = 1;
            unint64_t v38 = (void *)v24();
            int64_t v39 = (void *)MEMORY[0x263F8EED0];
            uint64_t v40 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v38) + 0x148))();

            *(void *)(v37 + 40) = v40;
            *(void *)(v37 + 48) = (*(uint64_t (**)(void))((*v39 & *v96) + 0xE0))();
            *(void *)(v37 + 56) = 1;
            uint64_t v93 = *(uint64_t (**)(void))(*(void *)v36 + 200);
            uint64_t v41 = (void *)v93();
            LOBYTE(v40) = sub_26144AA84(v41, (void *)v37);
            swift_bridgeObjectRelease();
            if (v40)
            {
              swift_bridgeObjectRelease();
              uint64_t v42 = *(void *)(v3 + 48);
              if (*(void *)(v42 + 16))
              {
                uint64_t v43 = *(void *)(v3 + 104);
                uint64_t v44 = *(void *)(v3 + 112);
                swift_bridgeObjectRetain();
                unint64_t v45 = sub_2613D8F00(v43, v44);
                if (v46)
                {
                  uint64_t v47 = *(void *)(*(void *)(v42 + 56) + 8 * v45);
                  swift_retain();
                  swift_bridgeObjectRelease();
                  uint64_t v48 = swift_allocObject();
                  *(_OWORD *)(v48 + 16) = xmmword_2614D81C0;
                  *(void *)(v48 + 32) = 1;
                  *(void *)(v48 + 40) = v94 + 1;
                  uint64_t v90 = v91 / v29;
                  *(void *)(v48 + 48) = v90;
                  *(void *)(v48 + 56) = 1;
                  uint64_t v89 = *(uint64_t (**)(void))(*(void *)v47 + 200);
                  uint64_t v49 = (void *)v89();
                  BOOL v50 = sub_26144AA84(v49, (void *)v48);
                  swift_bridgeObjectRelease();
                  if (v50)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v51 = sub_2614D56C8();
                    uint64_t v52 = v51;
                    *(void *)(v51 + 16) = v94 + 1;
                    *(_DWORD *)(v51 + 32) = 0;
                    if (v94) {
                      bzero((void *)(v51 + 36), 4 * v94);
                    }
                    *(void *)(v3 + 152) = sub_2613D1BF8(v52, v90);
                    uint64_t v53 = *(void *)(v3 + 48);
                    uint64_t v10 = v95;
                    id v54 = v98;
                    if (*(void *)(v53 + 16))
                    {
                      uint64_t v55 = *(void *)(v3 + 120);
                      uint64_t v56 = *(void *)(v3 + 128);
                      swift_bridgeObjectRetain();
                      unint64_t v57 = sub_2613D8F00(v55, v56);
                      if (v58)
                      {
                        uint64_t v59 = *(void *)(*(void *)(v53 + 56) + 8 * v57);
                        swift_retain();
                        swift_bridgeObjectRelease();
                        uint64_t v60 = swift_allocObject();
                        *(_OWORD *)(v60 + 16) = xmmword_2614D81C0;
                        *(void *)(v60 + 32) = 1;
                        *(void *)(v60 + 40) = v94;
                        *(void *)(v60 + 48) = v90;
                        *(void *)(v60 + 56) = 1;
                        uint64_t v88 = *(uint64_t (**)(void))(*(void *)v59 + 200);
                        uint64_t v61 = (void *)v88();
                        BOOL v62 = sub_26144AA84(v61, (void *)v60);
                        swift_bridgeObjectRelease();
                        if (v62)
                        {
                          swift_bridgeObjectRelease();
                          if (v94)
                          {
                            uint64_t v63 = sub_2614D56C8();
                            *(void *)(v63 + 16) = v94;
                            bzero((void *)(v63 + 32), 4 * v94);
                          }
                          else
                          {
                            uint64_t v63 = MEMORY[0x263F8EE78];
                          }
                          id v73 = v98;
                          *(void *)(v3 + 160) = sub_2613D1BF8(v63, v90);
                          uint64_t v74 = *(void *)(v3 + 48);
                          if (*(void *)(v74 + 16))
                          {
                            uint64_t v75 = *(void *)(v3 + 136);
                            uint64_t v76 = *(void *)(v3 + 144);
                            swift_bridgeObjectRetain();
                            unint64_t v77 = sub_2613D8F00(v75, v76);
                            if (v78)
                            {
                              uint64_t v79 = *(void *)(*(void *)(v74 + 56) + 8 * v77);
                              swift_retain();
                              swift_bridgeObjectRelease();
                              uint64_t v80 = swift_allocObject();
                              *(_OWORD *)(v80 + 16) = xmmword_2614D81C0;
                              *(void *)(v80 + 32) = 1;
                              *(void *)(v80 + 40) = v94;
                              *(void *)(v80 + 48) = v90;
                              *(void *)(v80 + 56) = 1;
                              uint64_t v92 = *(uint64_t (**)(void))(*(void *)v79 + 200);
                              char v81 = (void *)v92();
                              BOOL v82 = sub_26144AA84(v81, (void *)v80);
                              swift_bridgeObjectRelease();
                              if (v82)
                              {
                                swift_bridgeObjectRelease();
                                if (v94)
                                {
                                  uint64_t v83 = sub_2614D56C8();
                                  *(void *)(v83 + 16) = v94;
                                  bzero((void *)(v83 + 32), 4 * v94);
LABEL_57:
                                  uint64_t v87 = sub_2613D1BF8(v83, v90);
                                  swift_release();
                                  swift_release();
                                  swift_release();
                                  swift_release();

                                  *(void *)(v3 + 168) = v87;
                                  return v3;
                                }
LABEL_56:
                                uint64_t v83 = MEMORY[0x263F8EE78];
                                goto LABEL_57;
                              }
                              sub_2614D5C38();
                              sub_2614D54D8();
                              MEMORY[0x263E36790](v80, MEMORY[0x263F8D6C8]);
                              sub_2614D54D8();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              uint64_t v85 = sub_2614D54D8();
                              ((void (*)(uint64_t))v92)(v85);
                              MEMORY[0x263E36790]();
                              sub_2614D54D8();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              sub_2613DC2B8();
                              swift_allocError();
                              void *v86 = 0;
                              v86[1] = 0xE000000000000000;
                              swift_willThrow();

                              swift_release();
                              swift_release();
                              int v18 = 1;
                              goto LABEL_52;
                            }
                            swift_bridgeObjectRelease();
                          }
                          sub_2614D5C38();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          sub_2614D54D8();
                          swift_bridgeObjectRelease();
                          sub_2613DC2B8();
                          swift_allocError();
                          *unsigned __int8 v84 = 0xD000000000000015;
                          v84[1] = 0x80000002614E72E0;
                          swift_willThrow();

                          swift_release();
                          int v18 = 1;
                        }
                        else
                        {
                          sub_2614D5C38();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          sub_2614D54D8();
                          swift_bridgeObjectRelease();
                          sub_2614D54D8();
                          MEMORY[0x263E36790](v60, MEMORY[0x263F8D6C8]);
                          sub_2614D54D8();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v71 = sub_2614D54D8();
                          ((void (*)(uint64_t))v88)(v71);
                          MEMORY[0x263E36790]();
                          sub_2614D54D8();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          sub_2613DC2B8();
                          swift_allocError();
                          void *v72 = 0xD00000000000001ALL;
                          v72[1] = 0x80000002614E7300;
                          swift_willThrow();

                          swift_release();
                          int v18 = 0;
                        }
LABEL_52:
                        swift_release();
                        swift_release();
                        int v17 = 1;
                        goto LABEL_39;
                      }
                      swift_bridgeObjectRelease();
                    }
                    sub_2614D5C38();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    sub_2614D54D8();
                    swift_bridgeObjectRelease();
                    sub_2613DC2B8();
                    swift_allocError();
                    *unint64_t v70 = 0xD000000000000015;
                    v70[1] = 0x80000002614E72E0;
                    swift_willThrow();

                    int v18 = 0;
                    goto LABEL_52;
                  }
                  sub_2614D5C38();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  sub_2614D54D8();
                  swift_bridgeObjectRelease();
                  sub_2614D54D8();
                  MEMORY[0x263E36790](v48, MEMORY[0x263F8D6C8]);
                  sub_2614D54D8();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v68 = sub_2614D54D8();
                  ((void (*)(uint64_t))v89)(v68);
                  MEMORY[0x263E36790]();
                  sub_2614D54D8();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_2613DC2B8();
                  swift_allocError();
                  *uint64_t v69 = 0xD00000000000001ALL;
                  v69[1] = 0x80000002614E7300;
                  swift_willThrow();

                  swift_release();
                  goto LABEL_38;
                }
                swift_bridgeObjectRelease();
              }
              sub_2614D5C38();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              sub_2614D54D8();
              swift_bridgeObjectRelease();
              sub_2613DC2B8();
              swift_allocError();
              *uint64_t v67 = 0xD000000000000015;
              v67[1] = 0x80000002614E72E0;
              swift_willThrow();
            }
            else
            {
              sub_2614D5C38();
              swift_bridgeObjectRelease();
              MEMORY[0x263E36790](v37, MEMORY[0x263F8D6C8]);
              sub_2614D54D8();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v65 = sub_2614D54D8();
              ((void (*)(uint64_t))v93)(v65);
              MEMORY[0x263E36790]();
              sub_2614D54D8();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_2613DC2B8();
              swift_allocError();
              *uint64_t v66 = 0xD00000000000001FLL;
              v66[1] = 0x80000002614E72C0;
              swift_willThrow();
            }
LABEL_38:
            swift_release();
            int v18 = 0;
            int v17 = 0;
            uint64_t v10 = v95;
            goto LABEL_39;
          }
          swift_bridgeObjectRelease();
          id v27 = v98;
        }
        sub_2614D5C38();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_2614D54D8();
        swift_bridgeObjectRelease();
        sub_2613DC2B8();
        swift_allocError();
        *os_log_type_t v64 = 0xD000000000000014;
        v64[1] = 0x80000002614E72A0;
        swift_willThrow();

        int v18 = 0;
        int v17 = 0;
LABEL_39:

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }

  swift_bridgeObjectRelease();
LABEL_8:
  int v17 = 0;
  int v18 = 0;
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    swift_bridgeObjectRelease();
  }
  if (v18) {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for VAKWSModel();
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t type metadata accessor for VAKWSModel()
{
  return self;
}

uint64_t sub_2614A5FF4()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2614A6044(unint64_t a1, uint64_t a2)
{
  unint64_t v5 = sub_26141A14C(a1);
  uint64_t v6 = sub_26148D8C4(v2[9], v2[10]);
  if (!v3)
  {
    (*(void (**)(unint64_t))(*(void *)v6 + 624))(v5);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_26148D8C4(v2[11], v2[12]);
    (*(void (**)(uint64_t))(*(void *)v7 + 624))(a2);
    swift_release();
    sub_261431BD8();
    uint64_t v8 = sub_26148D9F8(v2[13], v2[14]);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 752))(v8);
    swift_release();
    a2 = sub_26141A248(v10);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_26148D9F8(v2[15], v2[16]);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 752))(v11);
    swift_release();
    sub_26141A248(v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_26148D9F8(v2[17], v2[18]);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 752))(v13);
    swift_release();
    sub_26141A248(v14);
  }
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_2614A6324()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2614A63CC()
{
  sub_2614A6324();
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for VAKWSModelError()
{
  return &type metadata for VAKWSModelError;
}

uint64_t (*sub_2614A6410())()
{
  return j__swift_endAccess;
}

uint64_t sub_2614A6464(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = a1;
  return MEMORY[0x270FA2498](sub_2614A6488, v1, 0);
}

uint64_t sub_2614A6488()
{
  (*(void (**)(void))(**(void **)(v0 + 16) + 104))(*(unsigned __int8 *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_2614A650C()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](sub_2614A652C, v0, 0);
}

uint64_t sub_2614A652C()
{
  char v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 96))();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = v1 & 1;
  return v2(v3);
}

uint64_t sub_2614A65B0()
{
  return sub_2614A66A4();
}

uint64_t sub_2614A65BC(uint64_t a1)
{
  return sub_2614A66F8(a1, &OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_requestInfo);
}

uint64_t (*sub_2614A65C8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614A6624()
{
  return sub_2614A66A4();
}

uint64_t sub_2614A6630(uint64_t a1)
{
  return sub_2614A66F8(a1, &OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_listeningTask);
}

uint64_t (*sub_2614A663C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614A6698()
{
  return sub_2614A66A4();
}

uint64_t sub_2614A66A4()
{
  return swift_retain();
}

uint64_t sub_2614A66EC(uint64_t a1)
{
  return sub_2614A66F8(a1, &OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_strategyLayer);
}

uint64_t sub_2614A66F8(uint64_t a1, void *a2)
{
  int v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *int v4 = a1;
  return swift_release();
}

uint64_t (*sub_2614A6748())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614A67A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory;
  swift_beginAccess();
  return sub_2614A67F8(v3, a1);
}

uint64_t sub_2614A67F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A9152F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2614A6860(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory;
  swift_beginAccess();
  sub_2614A68BC(a1, v3);
  return swift_endAccess();
}

uint64_t sub_2614A68BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A9152F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_2614A6924())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614A6980()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechInProgress);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_2614A69C8(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechInProgress);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_2614A6A14())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614A6A70()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numberOfChunksAfterEndOfSpeech;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614A6AB8(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numberOfChunksAfterEndOfSpeech);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_2614A6B04())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614A6B60()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechStartTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614A6BA8(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechStartTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_2614A6BF4())()
{
  return j_j__swift_endAccess;
}

uint64_t type metadata accessor for ThreadSafeBoolActor()
{
  return self;
}

uint64_t sub_2614A6C74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for VARuntimeParametersFactoryDummy();
  uint64_t result = sub_26141BF64();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for VARuntimeParametersFactoryDummy;
  *a1 = result;
  return result;
}

id sub_2614A6CB4(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_2614A6D00(a1, a2, a3);
}

id sub_2614A6D00(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_requestInfo] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_listeningTask] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_strategyLayer] = 0;
  uint64_t v7 = (uint64_t)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory];
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(void *)(v7 + 32) = 0;
  v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechInProgress] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numberOfChunksAfterEndOfSpeech] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechStartTime] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numFramesForAveraging] = 3;
  uint64_t v8 = OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock] = 0;
  uint64_t v9 = OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_threadSafeBool;
  type metadata accessor for ThreadSafeBoolActor();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v3;
  swift_defaultActor_initialize();
  *(unsigned char *)(v10 + 112) = 0;
  *(void *)&v3[v9] = v10;
  sub_2613E3434(a3, (uint64_t)v16);
  swift_beginAccess();
  sub_2614A68BC((uint64_t)v16, v7);
  swift_endAccess();
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  uint64_t v13 = *(void **)&v3[v8];
  *(void *)&v3[v8] = v12;

  id v14 = VAKeywordSpotter.init(delegate:configuration:)(a1, a2);
  sub_2613DD718(a3);
  return v14;
}

uint64_t sub_2614A6E7C()
{
  swift_release();
  swift_release();
  swift_release();
  sub_2613CC6A0(v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory, &qword_26A9152F8);

  return swift_release();
}

id VAKeywordSpotterBase.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2614D50C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = sub_2614D50A8();
  os_log_type_t v8 = sub_2614D5988();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_2613B8000, v7, v8, "deinit VAKeywordSpotterBase", v9, 2u);
    MEMORY[0x263E38060](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = &v1[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_listeningTask];
  swift_beginAccess();
  *(void *)uint64_t v10 = 0;
  swift_release();
  uint64_t v11 = &v1[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_strategyLayer];
  swift_beginAccess();
  *(void *)uint64_t v11 = 0;
  swift_release();
  id v12 = &v1[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_requestInfo];
  swift_beginAccess();
  *(void *)id v12 = 0;
  swift_release();
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v13 = (uint64_t)&v1[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory];
  swift_beginAccess();
  sub_2614A68BC((uint64_t)v19, v13);
  swift_endAccess();
  id v14 = *(void **)&v1[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock] = 0;

  unint64_t v15 = (objc_class *)type metadata accessor for VAKeywordSpotterBase();
  v18.receiver = v1;
  v18.super_class = v15;
  return objc_msgSendSuper2(&v18, sel_dealloc);
}

uint64_t type metadata accessor for VAKeywordSpotterBase()
{
  return self;
}

uint64_t static VAKeywordSpotterBase.isSupportedAudioFormat(_:)(void *a1)
{
  objc_msgSend(a1, sel_sampleRate);
  if (v2 == 16000.0
    && objc_msgSend(a1, sel_channelCount) == 1
    && objc_msgSend(a1, sel_commonFormat) == (id)3)
  {
    return objc_msgSend(a1, sel_isInterleaved) ^ 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_2614A72C0()
{
  v1[6] = v0;
  uint64_t v2 = sub_2614D50C8();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614A73C0, 0, 0);
}

uint64_t sub_2614A73C0()
{
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x118);
  uint64_t v3 = ((*MEMORY[0x263F8EED0] & *v1) + 280) & 0xFFFFFFFFFFFFLL | 0x3D45000000000000;
  v0[15] = v2;
  v0[16] = v3;
  uint64_t v4 = v2();
  swift_release();
  if (v4)
  {
    uint64_t v5 = v0[6];
    uint64_t v6 = OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_threadSafeBool;
    v0[17] = OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_threadSafeBool;
    uint64_t v7 = *(void *)(v5 + v6);
    v0[18] = v7;
    long long v21 = (uint64_t (*)(void))(*(void *)(*(void *)v7 + 128) + **(int **)(*(void *)v7 + 128));
    swift_retain();
    os_log_type_t v8 = (void *)swift_task_alloc();
    v0[19] = v8;
    *os_log_type_t v8 = v0;
    v8[1] = sub_2614A7668;
    uint64_t v9 = v21;
  }
  else
  {
    uint64_t v10 = v0[10];
    uint64_t v11 = v0[7];
    uint64_t v12 = v0[8];
    uint64_t v13 = sub_26146718C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v13, v11);
    id v14 = sub_2614D50A8();
    os_log_type_t v15 = sub_2614D5978();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_2613B8000, v14, v15, "Called stop() when keyword spotter was not running", v16, 2u);
      MEMORY[0x263E38060](v16, -1, -1);
    }
    uint64_t v17 = v0[10];
    uint64_t v18 = v0[7];
    uint64_t v19 = v0[8];

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
  }
  return v9();
}

uint64_t sub_2614A7668(char a1)
{
  *(unsigned char *)(*(void *)v1 + 25) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_2614A7788, 0, 0);
}

uint64_t sub_2614A7788()
{
  int v1 = *(unsigned __int8 *)(v0 + 25);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = sub_26146718C();
  *(void *)(v0 + 160) = v3;
  uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 168) = v4;
  *(void *)(v0 + 176) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v5 = *(void *)(v0 + 56);
  if (v1 == 1)
  {
    v4(*(void *)(v0 + 112), v3, v5);
    uint64_t v6 = sub_2614D50A8();
    os_log_type_t v7 = sub_2614D5988();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl(&dword_2613B8000, v6, v7, "Stop(): Ignoring when already in progress", v8, 2u);
      MEMORY[0x263E38060](v8, -1, -1);
    }
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 56);
    uint64_t v11 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    v4(*(void *)(v0 + 104), v3, v5);
    id v14 = sub_2614D50A8();
    os_log_type_t v15 = sub_2614D5988();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_2613B8000, v14, v15, "Stop(): starting", v16, 2u);
      MEMORY[0x263E38060](v16, -1, -1);
    }
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v18 = *(void *)(v0 + 104);
    uint64_t v19 = *(void *)(v0 + 56);
    uint64_t v20 = *(void *)(v0 + 64);
    uint64_t v21 = *(void *)(v0 + 48);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    *(void *)(v0 + 184) = v22;
    *(void *)(v0 + 192) = (v20 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v22(v18, v19);
    uint64_t v23 = *(void *)(v21 + v17);
    *(void *)(v0 + 200) = v23;
    BOOL v25 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v23 + 120) + **(int **)(*(void *)v23 + 120));
    swift_retain();
    int64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v24;
    *int64_t v24 = v0;
    v24[1] = sub_2614A7AA8;
    return v25(1);
  }
}

uint64_t sub_2614A7AA8()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_2614A7BC0, 0, 0);
}

uint64_t sub_2614A7BC0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 120))();
  *(void *)(v0 + 216) = v1;
  if (v1)
  {
    uint64_t v12 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 328) + **(int **)(*(void *)v1 + 328));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_2614A7EE0;
    return v12();
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 48)) + 0x130))();
    *(void *)(v0 + 232) = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      *(void *)(v0 + 240) = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v6;
      uint64_t v7 = sub_2613C23AC(&qword_26A914CA8);
      *(void *)(v0 + 256) = v7;
      *uint64_t v6 = v0;
      v6[1] = sub_2614A8228;
      uint64_t v8 = MEMORY[0x263F8D4F8];
      uint64_t v9 = MEMORY[0x263F8E4E0];
      return MEMORY[0x270FA1FB8](v0 + 16, v5, v8, v7, v9);
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(v0 + 48) + *(void *)(v0 + 136));
      *(void *)(v0 + 272) = v10;
      uint64_t v13 = (uint64_t (*)(void))(*(void *)(*(void *)v10 + 120) + **(int **)(*(void *)v10 + 120));
      swift_retain();
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_2614A8850;
      return v13(0);
    }
  }
}

uint64_t sub_2614A7EE0()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_2614A7FF8, 0, 0);
}

uint64_t sub_2614A7FF8()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 48)) + 0x130))();
  *(void *)(v0 + 232) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    *(void *)(v0 + 240) = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v3;
    uint64_t v4 = sub_2613C23AC(&qword_26A914CA8);
    *(void *)(v0 + 256) = v4;
    *uint64_t v3 = v0;
    v3[1] = sub_2614A8228;
    uint64_t v5 = MEMORY[0x263F8D4F8];
    uint64_t v6 = MEMORY[0x263F8E4E0];
    return MEMORY[0x270FA1FB8](v0 + 16, v2, v5, v4, v6);
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(v0 + 48) + *(void *)(v0 + 136));
    *(void *)(v0 + 272) = v7;
    uint64_t v10 = (uint64_t (*)(void))(*(void *)(*(void *)v7 + 120) + **(int **)(*(void *)v7 + 120));
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_2614A8850;
    return v10(0);
  }
}

uint64_t sub_2614A8228()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_2614A8324, 0, 0);
}

uint64_t sub_2614A8324()
{
  uint64_t v1 = *(void **)(v0 + 16);
  *(void *)(v0 + 264) = v1;
  if ((*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    (*(void (**)(void, void, void))(v0 + 168))(*(void *)(v0 + 96), *(void *)(v0 + 160), *(void *)(v0 + 56));
    os_log_type_t v15 = sub_2614D50A8();
    os_log_type_t v16 = sub_2614D5988();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_2613B8000, v15, v16, "Stop(): listening task completed", v17, 2u);
      MEMORY[0x263E38060](v17, -1, -1);
    }
    uint64_t v18 = *(void *)(v0 + 240);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    uint64_t v20 = *(void *)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 56);

    v19(v20, v21);
    sub_2614A8CB0(v18);
    swift_release();
    swift_release();
    uint64_t v22 = *(void *)(*(void *)(v0 + 48) + *(void *)(v0 + 136));
    *(void *)(v0 + 272) = v22;
    uint64_t v36 = (uint64_t (*)(void))(*(void *)(*(void *)v22 + 120) + **(int **)(*(void *)v22 + 120));
    swift_retain();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_2614A8850;
    goto LABEL_10;
  }
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);
  *(void *)(v0 + 32) = v1;
  id v6 = v1;
  swift_willThrowTypedImpl();
  v2(v4, v3, v5);
  id v7 = v1;
  id v8 = v1;
  uint64_t v9 = sub_2614D50A8();
  os_log_type_t v10 = sub_2614D5978();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    id v13 = v1;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v14;
    sub_2614D5B58();
    *uint64_t v12 = v14;
    sub_2614AC458(v1, 1);
    sub_2614AC458(v1, 1);
    _os_log_impl(&dword_2613B8000, v9, v10, "Error stopping spotter: %@", v11, 0xCu);
    sub_2613C23AC(&qword_26A914C10);
    swift_arrayDestroy();
    MEMORY[0x263E38060](v12, -1, -1);
    MEMORY[0x263E38060](v11, -1, -1);
  }
  else
  {
    sub_2614AC458(v1, 1);
    sub_2614AC458(v1, 1);
  }
  uint64_t v24 = *(void *)(v0 + 240);
  BOOL v25 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
  uint64_t v26 = *(void *)(v0 + 72);
  uint64_t v27 = *(void *)(v0 + 56);

  v25(v26, v27);
  uint64_t v28 = MEMORY[0x263E38150](v24 + 16);
  if (v28)
  {
    uint64_t v29 = (void *)v28;
    uint64_t v30 = *(void *)(v28 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_threadSafeBool);
    *(void *)(v0 + 288) = v30;
    swift_retain();

    uint64_t v36 = (uint64_t (*)(void))(*(void *)(*(void *)v30 + 120) + **(int **)(*(void *)v30 + 120));
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_2614A8AA8;
LABEL_10:
    return v36(0);
  }
  uint64_t v33 = *(void **)(v0 + 264);
  uint64_t v34 = *(void *)(v0 + 240);
  swift_willThrow();
  sub_2614AC458(v33, 1);
  sub_2614A8CB0(v34);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

uint64_t sub_2614A8850()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_2614A8968, 0, 0);
}

uint64_t sub_2614A8968()
{
  (*(void (**)(void, void, void))(v0 + 168))(*(void *)(v0 + 88), *(void *)(v0 + 160), *(void *)(v0 + 56));
  uint64_t v1 = sub_2614D50A8();
  os_log_type_t v2 = sub_2614D5988();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2613B8000, v1, v2, "Stop(): done", v3, 2u);
    MEMORY[0x263E38060](v3, -1, -1);
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 56);

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_2614A8AA8()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_2614A8BC0, 0, 0);
}

uint64_t sub_2614A8BC0()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = v0[30];
  swift_willThrow();
  sub_2614AC458(v1, 1);
  sub_2614A8CB0(v2);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_2614A8CB0(uint64_t a1)
{
  uint64_t v2 = sub_2614D50C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x263E38150](a1 + 16);
  if (v6)
  {
    id v7 = (void *)v6;
    uint64_t v8 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    uint64_t v9 = sub_2614D50A8();
    os_log_type_t v10 = sub_2614D5988();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_2613B8000, v9, v10, "Stop(): set requestInfo to nil after stopping spotter", v11, 2u);
      MEMORY[0x263E38060](v11, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v12 = (void *)MEMORY[0x263F8EED0];
    uint64_t v13 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x120))(0);
    if ((*(uint64_t (**)(uint64_t))((*v12 & *v7) + 0x130))(v13))
    {
      sub_2613C23AC(&qword_26A914CA8);
      sub_2614D57F8();
      swift_release();
    }
    (*(void (**)(void))((*v12 & *v7) + 0x138))(0);
  }
}

void sub_2614A8F40(void *a1, uint64_t a2)
{
  uint64_t v6 = sub_2614D50C8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2613C23AC(&qword_26A914BD8);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x118))(v11);
  swift_release();
  if (v14)
  {
    id v15 = objc_msgSend(a1, sel_format);
    sub_2614AC464(v15);

    if (!v3)
    {
      objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock), sel_lock);
      uint64_t v16 = sub_2614D5788();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
      uint64_t v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v18 = (void *)swift_allocObject();
      v18[2] = 0;
      v18[3] = 0;
      v18[4] = v17;
      v18[5] = a1;
      v18[6] = a2;
      id v19 = a1;
      sub_26141213C((uint64_t)v13, (uint64_t)&unk_26A915E00, (uint64_t)v18);
      swift_release();
    }
  }
  else
  {
    uint64_t v20 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
    uint64_t v21 = sub_2614D50A8();
    os_log_type_t v22 = sub_2614D5978();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_2613B8000, v21, v22, "Called addAudio() when keyword spotter was not running", v23, 2u);
      MEMORY[0x263E38060](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_2614A924C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v7 = sub_2614D50C8();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614A9310, 0, 0);
}

uint64_t sub_2614A9310()
{
  uint64_t v1 = v0[9] + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x263E38150](v1);
  v0[15] = v2;
  if (v2)
  {
    uint64_t v3 = *(int **)((*MEMORY[0x263F8EED0] & *v2) + 0x1F8);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[16] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_2614A94EC;
    uint64_t v6 = v0[10];
    uint64_t v5 = v0[11];
    return v13(v6, v5);
  }
  else
  {
    uint64_t v8 = v0[9] + 16;
    swift_beginAccess();
    uint64_t v9 = MEMORY[0x263E38150](v8);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      id v11 = *(id *)(v9 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock);
      objc_msgSend(v11, sel_unlock);
    }
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_2614A94EC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_2614A96BC;
  }
  else
  {

    uint64_t v3 = sub_2614A9608;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_2614A9608()
{
  uint64_t v1 = *(void *)(v0 + 72) + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x263E38150](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = *(id *)(v2 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock);
    objc_msgSend(v4, sel_unlock);
  }
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_2614A96BC()
{
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);

  uint64_t v5 = sub_26146718C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  id v6 = v1;
  id v7 = v1;
  uint64_t v8 = sub_2614D50A8();
  os_log_type_t v9 = sub_2614D5978();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void **)(v0 + 136);
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)id v11 = 138412290;
    id v13 = v10;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 64) = v14;
    sub_2614D5B58();
    *uint64_t v12 = v14;

    _os_log_impl(&dword_2613B8000, v8, v9, "Error adding audio: %@", v11, 0xCu);
    sub_2613C23AC(&qword_26A914C10);
    swift_arrayDestroy();
    MEMORY[0x263E38060](v12, -1, -1);
    MEMORY[0x263E38060](v11, -1, -1);
  }
  else
  {
    id v15 = *(void **)(v0 + 136);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  uint64_t v16 = *(void *)(v0 + 72) + 16;
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x263E38150](v16);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    id v19 = *(id *)(v17 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock);
    objc_msgSend(v19, sel_unlock);
  }
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_2614A991C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_2614D50C8();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614A99E0, 0, 0);
}

uint64_t sub_2614A99E0()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 32)) + 0x118))();
  swift_release();
  if (v2)
  {
    id v3 = objc_msgSend(*(id *)(v0 + 16), sel_format);
    sub_2614AC464(v3);

    uint64_t v16 = *(int **)((*v1 & **(void **)(v0 + 32)) + 0x1F8);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)v16 + *v16);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_2614A9C8C;
    uint64_t v18 = *(void *)(v0 + 24);
    uint64_t v19 = *(void *)(v0 + 16);
    return v20(v19, v18);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = sub_26146718C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v8 = sub_2614D50A8();
    os_log_type_t v9 = sub_2614D5978();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_2613B8000, v8, v9, "Called addAudioAsync() when keyword spotter was not running", v10, 2u);
      MEMORY[0x263E38060](v10, -1, -1);
    }
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v13 = *(void *)(v0 + 40);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_2614A9C8C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_2614A9DA4(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = sub_2614D50C8();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614A9E68, 0, 0);
}

uint64_t sub_2614A9E68()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 40)) + 0x118))();
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    uint64_t v6 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 336) + **(int **)(*(void *)v1 + 336));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_2614AA038;
    uint64_t v3 = v6;
  }
  else
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v4 = 0xD00000000000001ELL;
    v4[1] = 0x80000002614E7460;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v3();
}

uint64_t sub_2614AA038(char a1)
{
  *(unsigned char *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_2614AA138, 0, 0);
}

uint64_t sub_2614AA138(uint64_t a1, uint64_t a2, Swift::OpaquePointer *a3)
{
  if (*(unsigned char *)(v3 + 112) == 1)
  {
    uint64_t v5 = *(void *)(v3 + 56);
    uint64_t v4 = *(void *)(v3 + 64);
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = sub_26146718C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v8 = sub_2614D50A8();
    os_log_type_t v9 = sub_2614D5978();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_2613B8000, v8, v9, "Ignoring audio since stop is pending", v10, 2u);
      MEMORY[0x263E38060](v10, -1, -1);
    }
    uint64_t v11 = *(void *)(v3 + 64);
    uint64_t v12 = *(void *)(v3 + 48);
    uint64_t v13 = *(void *)(v3 + 56);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v3 + 8);
    goto LABEL_7;
  }
  v15.super._impl = (void *)(v3 + 16);
  v15.super.super.int64_t isa = *(Class *)(v3 + 24);
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v15, a3);
  uint64_t v16 = *(void *)(v3 + 16);
  *(void *)(v3 + 88) = v16;
  if (v17)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v3 + 8);
LABEL_7:
    return v14();
  }
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v3 + 72) + 344)
                                                 + **(int **)(**(void **)(v3 + 72) + 344));
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v3 + 96) = v19;
  *uint64_t v19 = v3;
  v19[1] = sub_2614AA3AC;
  uint64_t v20 = *(void *)(v3 + 32);
  return v21(v16, v20);
}

uint64_t sub_2614AA3AC()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2614AA534;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_2614AA4C8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2614AA4C8()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_2614AA534()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void *sub_2614AA5AC(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_2614D4CE8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  os_log_type_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x60))(v7);
  if (result)
  {
    uint64_t v12 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, sel_keywordSpotterDidStopWithSummaryWithJson_uuid_perfLogs_))
    {
      uint64_t v13 = *(uint64_t (**)(uint64_t))((*v10 & *v1) + 0x118);
      uint64_t v14 = swift_unknownObjectRetain();
      uint64_t v15 = v13(v14);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v15 + 376))();
        if (v3)
        {
          swift_unknownObjectRelease_n();
          return (void *)swift_release();
        }
        else
        {
          uint64_t v19 = *(void (**)(void))(*(void *)v16 + 136);
          uint64_t v20 = v18;
          uint64_t v24 = v17;
          v19();
          uint64_t v24 = v20;
          uint64_t v21 = (void *)sub_2614D5378();
          uint64_t v22 = (void *)sub_2614D4CC8();
          if (a1) {
            a1 = (void *)sub_2614D5648();
          }
          objc_msgSend(v12, sel_keywordSpotterDidStopWithSummaryWithJson_uuid_perfLogs_, v21, v22, a1);
          swift_bridgeObjectRelease();
          swift_release();
          swift_unknownObjectRelease_n();

          return (void *)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        }
      }
      else
      {
        return (void *)swift_unknownObjectRelease_n();
      }
    }
    else
    {
      return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

int64_t sub_2614AA840(uint64_t a1, float a2)
{
  uint64_t v5 = sub_2614D50C8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  os_log_type_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v40 - v11;
  uint64_t v13 = (void *)MEMORY[0x263F8EED0];
  uint64_t v14 = (*MEMORY[0x263F8EED0] & *v2) + 400;
  uint64_t v15 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x190);
  int64_t result = v15(v10);
  if (result < 1)
  {
    uint64_t v41 = v6;
    uint64_t v18 = *(void *)(a1 + 16);
    if (v18)
    {
      v40[0] = v5;
      v40[1] = v14;
      uint64_t v19 = 0;
      uint64_t v20 = a1 + 32;
      while (1)
      {
        uint64_t v21 = __OFADD__(v19, 3) ? 0x7FFFFFFFFFFFFFFFLL : v19 + 3;
        if (v19 < 0) {
          break;
        }
        if (v19 + 1 >= v18) {
          goto LABEL_28;
        }
        if (v19 + 2 >= v18) {
          goto LABEL_29;
        }
        float v22 = (float)((float)((float)(*(float *)(v20 + 4 * v19) + 0.0) + *(float *)(v20 + 4 * (v19 + 1)))
                    + *(float *)(v20 + 4 * (v19 + 2)))
            / 3.0;
        int64_t result = (*(uint64_t (**)(void))((*v13 & *v2) + 0x178))();
        if (result)
        {
          if (v22 > a2)
          {
            (*(void (**)(uint64_t))((*v13 & *v2) + 0x198))(1);
            type metadata accessor for VARequestContext(0);
            uint64_t v30 = mach_absolute_time();
            unint64_t v31 = (*(uint64_t (**)(void))((*v13 & *v2) + 0x1A8))();
            BOOL v32 = v30 >= v31;
            int64_t result = v30 - v31;
            if (v32)
            {
              double v33 = sub_2613FC478(result);
              uint64_t v34 = sub_26146718C();
              uint64_t v35 = v41;
              uint64_t v36 = v40[0];
              (*(void (**)(char *, uint64_t, void))(v41 + 16))(v12, v34, v40[0]);
              uint64_t v37 = sub_2614D50A8();
              os_log_type_t v38 = sub_2614D5968();
              if (os_log_type_enabled(v37, v38))
              {
                uint64_t v39 = swift_slowAlloc();
                *(_DWORD *)uint64_t v39 = 134218496;
                double v42 = v33;
                sub_2614D5B58();
                *(_WORD *)(v39 + 12) = 2048;
                double v42 = v22;
                sub_2614D5B58();
                *(_WORD *)(v39 + 22) = 2048;
                uint64_t v36 = v40[0];
                double v42 = a2;
                sub_2614D5B58();
                _os_log_impl(&dword_2613B8000, v37, v38, "Speech stopped in %f secs, silence probability %f > %f, wait for one more chunk", (uint8_t *)v39, 0x20u);
                MEMORY[0x263E38060](v39, -1, -1);
              }

              int64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v12, v36);
              int v17 = 0;
              return v17 | ((v15(result) > 0) << 16);
            }
LABEL_30:
            __break(1u);
            return result;
          }
        }
        else if (v22 < a2)
        {
          (*(void (**)(uint64_t))((*v13 & *v2) + 0x180))(1);
          uint64_t v23 = mach_absolute_time();
          (*(void (**)(uint64_t))((*v13 & *v2) + 0x1B0))(v23);
          uint64_t v24 = sub_26146718C();
          uint64_t v25 = v41;
          uint64_t v26 = v40[0];
          (*(void (**)(char *, uint64_t, void))(v41 + 16))(v9, v24, v40[0]);
          uint64_t v27 = sub_2614D50A8();
          os_log_type_t v28 = sub_2614D5968();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = swift_slowAlloc();
            *(_DWORD *)uint64_t v29 = 134218240;
            double v42 = v22;
            sub_2614D5B58();
            *(_WORD *)(v29 + 12) = 2048;
            double v42 = a2;
            sub_2614D5B58();
            _os_log_impl(&dword_2613B8000, v27, v28, "Speech started, silence probability %f < %f", (uint8_t *)v29, 0x16u);
            MEMORY[0x263E38060](v29, -1, -1);
          }

          int64_t result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v9, v26);
          int v17 = 1;
          return v17 | ((v15(result) > 0) << 16);
        }
        uint64_t v19 = v21;
        if (v21 >= v18)
        {
          int v17 = 0;
          return v17 | ((v15(result) > 0) << 16);
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    int v17 = 0;
  }
  else
  {
    (*(void (**)(void))((*v13 & *v2) + 0x180))(0);
    int64_t result = (*(uint64_t (**)(void))((*v13 & *v2) + 0x198))(0);
    int v17 = 256;
  }
  return v17 | ((v15(result) > 0) << 16);
}

void sub_2614AAE6C(uint64_t a1)
{
  uint64_t v4 = sub_2614D4CE8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x118))(v6);
  if (!v10)
  {
    sub_2613DC2B8();
    swift_allocError();
    void *v26 = 0x75716552206C694ELL;
    v26[1] = 0xEF6F666E49747365;
    swift_willThrow();
    return;
  }
  uint64_t v11 = v10;
  uint64_t v76 = v2;
  uint64_t v12 = (*(uint64_t (**)(void))((*v9 & *v1) + 0x148))();
  if (!v12)
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v27 = 0xD000000000000011;
    v27[1] = 0x80000002614E0F10;
    swift_willThrow();
LABEL_17:
    swift_release();
    return;
  }
  uint64_t v13 = v12;
  uint64_t v14 = (void *)(*(uint64_t (**)(void))((*v9 & *v1) + 0x78))();
  if (!v14)
  {
    sub_2613DC2B8();
    swift_allocError();
    *os_log_type_t v28 = 0xD000000000000011;
    v28[1] = 0x80000002614E0E20;
    swift_willThrow();
    swift_release();
    goto LABEL_17;
  }
  id v37 = v14;
  type metadata accessor for VAInstrumentedKeywordResult();
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)a1 + 88))();
  uint64_t v16 = VAInstrumentedKeywordResult.__allocating_init(detections:)(v15);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 280))(&v57);
  uint64_t v38 = v57;
  int v39 = v58;
  char v40 = v59;
  char v41 = v60;
  long long v42 = v61;
  char v43 = v62;
  uint64_t v44 = v63;
  char v45 = v64;
  char v46 = v65;
  int v47 = v66;
  char v48 = v67;
  uint64_t v49 = v68;
  uint64_t v50 = v69;
  __int16 v51 = v70;
  char v52 = v71;
  char v53 = v72;
  char v54 = v73;
  char v55 = v74;
  char v56 = v75;
  char v17 = sub_2614B8FE8();
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
LABEL_20:
    uint64_t v29 = v76;
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 384))(v16);
    if (!v29)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 136))(v30);
      (*(void (**)(uint64_t, char *))(*(void *)v13 + 80))(v16, v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    swift_release();
    swift_release();
    swift_release();

    return;
  }
  uint64_t v35 = v16;
  uint64_t v36 = v8;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 360))(v18);
  int64_t v20 = *(void *)(v19 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x263F8EE78];
LABEL_19:
    uint64_t v16 = v35;
    (*(void (**)(uint64_t))(*(void *)v35 + 320))(v22);
    uint64_t v8 = v36;
    goto LABEL_20;
  }
  uint64_t v32 = v5;
  uint64_t v33 = v4;
  uint64_t v34 = v13;
  uint64_t v57 = MEMORY[0x263F8EE78];
  sub_2613EB9C4(0, v20, 0);
  uint64_t v21 = 0;
  uint64_t v22 = v57;
  while (1)
  {
    float v23 = *(float *)(v19 + 4 * v21 + 32);
    if ((~LODWORD(v23) & 0x7F800000) == 0) {
      break;
    }
    if (v23 <= -32769.0) {
      goto LABEL_24;
    }
    if (v23 >= 32768.0) {
      goto LABEL_25;
    }
    uint64_t v57 = v22;
    unint64_t v25 = *(void *)(v22 + 16);
    unint64_t v24 = *(void *)(v22 + 24);
    if (v25 >= v24 >> 1)
    {
      sub_2613EB9C4(v24 > 1, v25 + 1, 1);
      uint64_t v22 = v57;
    }
    ++v21;
    *(void *)(v22 + 16) = v25 + 1;
    *(_WORD *)(v22 + 2 * v25 + 32) = (int)v23;
    if (v20 == v21)
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = v34;
      uint64_t v4 = v33;
      uint64_t v5 = v32;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_2614AB4D0()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
  if (v1)
  {
    uint64_t v2 = v1;
    if (objc_msgSend(v1, sel_respondsToSelector_, sel_keywordSpotterDidUpdateScoresWithVerboseLog_))
    {
      id v3 = (id)sub_2614D5378();
      objc_msgSend(v2, sel_keywordSpotterDidUpdateScoresWithVerboseLog_, v3);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void sub_2614AB5D0(uint64_t a1)
{
  uint64_t v3 = sub_2614D50C8();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v80 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v80 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v80 - v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v94, v14);
  uint64_t v17 = v95;
  if (v95)
  {
    uint64_t v87 = v13;
    uint64_t v88 = v7;
    uint64_t v89 = v16;
    uint64_t v90 = v1;
    uint64_t v91 = v4;
    uint64_t v92 = v3;
    uint64_t v18 = v94;
    float v19 = v96;
    char v20 = v97 & 1;
    unsigned int v21 = ((v97 | (v98 << 16)) >> 8) & 1;
    char v22 = v98 & 1;
    type metadata accessor for VAKeywordSpottedEvent();
    float v23 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 264);
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = v23(v24);
    double v26 = (*(double (**)(void))(*(void *)a1 + 360))();
    uint64_t v27 = (*(uint64_t (**)(void))(*(void *)a1 + 312))();
    os_log_type_t v28 = sub_2614B06C8(v18, v17, v25, v20, v21, v22, v27, v19, v26);
    swift_bridgeObjectRelease();
    if (v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech + 8])
    {
      double v29 = 0.0;
      uint64_t v30 = v92;
      if ((v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore] & 1) == 0)
      {
LABEL_4:
        unint64_t v31 = 0xE800000000000000;
        uint64_t v32 = 0x3E6863656570733CLL;
LABEL_10:
        os_log_t v85 = (os_log_t)v32;
        BOOL v37 = v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter] == 0;
        uint64_t v38 = 0x3E6863656570733CLL;
        if (v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter]) {
          uint64_t v38 = 0x3E6C69733CLL;
        }
        *(void *)&long long v86 = v38;
        if (v37) {
          unint64_t v39 = 0xE800000000000000;
        }
        else {
          unint64_t v39 = 0xE500000000000000;
        }
        if (v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_speechDuring] == 1)
        {
          unint64_t v40 = *(void *)&v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword + 8];
          uint64_t v84 = *(void *)&v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v94 = 2763306;
          unint64_t v95 = 0xE300000000000000;
          swift_bridgeObjectRetain();
          sub_2614D54D8();
          swift_bridgeObjectRelease();
          sub_2614D54D8();
          unint64_t v40 = v95;
          uint64_t v84 = v94;
        }
        uint64_t v41 = v91;
        uint64_t v42 = sub_26146718C();
        char v43 = *(void (**)(void, void, void))(v41 + 16);
        uint64_t v83 = v43;
        if (v29 <= 0.0)
        {
          uint64_t v61 = v30;
          char v62 = v87;
          v43(v87, v42, v61);
          uint64_t v63 = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v64 = sub_2614D50A8();
          os_log_type_t v65 = sub_2614D5958();
          LODWORD(v89) = v65;
          if (os_log_type_enabled(v64, v65))
          {
            uint64_t v66 = swift_slowAlloc();
            uint64_t v82 = v41 + 16;
            uint64_t v67 = v66;
            uint64_t v81 = swift_slowAlloc();
            uint64_t v94 = v81;
            *(_DWORD *)uint64_t v67 = 136315906;
            swift_bridgeObjectRetain();
            uint64_t v93 = sub_2613D875C((uint64_t)v85, v31, &v94);
            os_log_t v85 = v64;
            sub_2614D5B58();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v67 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v93 = sub_2613D875C(v84, v40, &v94);
            sub_2614D5B58();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v67 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v93 = sub_2613D875C(v86, v39, &v94);
            sub_2614D5B58();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v67 + 32) = 2080;
            sub_2613C23AC(qword_26A914E40);
            uint64_t v68 = swift_allocObject();
            *(_OWORD *)(v68 + 16) = xmmword_2614D81E0;
            int v69 = *(_DWORD *)&v63[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score];
            uint64_t v70 = MEMORY[0x263F8D648];
            *(void *)(v68 + 56) = MEMORY[0x263F8D5C8];
            *(void *)(v68 + 64) = v70;
            *(_DWORD *)(v68 + 32) = v69;
            uint64_t v71 = sub_2614D53E8();
            uint64_t v93 = sub_2613D875C(v71, v72, &v94);
            sub_2614D5B58();

            uint64_t v41 = v91;
            swift_bridgeObjectRelease();
            os_log_t v73 = v85;
            _os_log_impl(&dword_2613B8000, v85, (os_log_type_t)v89, "Result: \"%s%s%s\":%s", (uint8_t *)v67, 0x2Au);
            uint64_t v74 = v81;
            swift_arrayDestroy();
            MEMORY[0x263E38060](v74, -1, -1);
            MEMORY[0x263E38060](v67, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v75 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v62, v92);
        }
        else
        {
          v43(v89, v42, v30);
          uint64_t v44 = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v45 = sub_2614D50A8();
          os_log_type_t v46 = sub_2614D5958();
          LODWORD(v87) = v46;
          if (os_log_type_enabled(v45, v46))
          {
            uint64_t v47 = swift_slowAlloc();
            uint64_t v82 = swift_slowAlloc();
            uint64_t v94 = v82;
            *(_DWORD *)uint64_t v47 = 136316162;
            swift_bridgeObjectRetain();
            uint64_t v93 = sub_2613D875C((uint64_t)v85, v31, &v94);
            os_log_t v85 = v45;
            sub_2614D5B58();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v47 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v93 = sub_2613D875C(v84, v40, &v94);
            sub_2614D5B58();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v47 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v93 = sub_2613D875C(v86, v39, &v94);
            sub_2614D5B58();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v47 + 32) = 2080;
            sub_2613C23AC(qword_26A914E40);
            uint64_t v48 = swift_allocObject();
            long long v86 = xmmword_2614D81E0;
            *(_OWORD *)(v48 + 16) = xmmword_2614D81E0;
            int v49 = *(_DWORD *)&v44[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score];
            uint64_t v50 = MEMORY[0x263F8D648];
            *(void *)(v48 + 56) = MEMORY[0x263F8D5C8];
            *(void *)(v48 + 64) = v50;
            *(_DWORD *)(v48 + 32) = v49;
            uint64_t v51 = sub_2614D53E8();
            uint64_t v93 = sub_2613D875C(v51, v52, &v94);
            uint64_t v41 = v91;
            sub_2614D5B58();

            swift_bridgeObjectRelease();
            *(_WORD *)(v47 + 42) = 2080;
            uint64_t v53 = swift_allocObject();
            uint64_t v54 = MEMORY[0x263F8D538];
            *(_OWORD *)(v53 + 16) = v86;
            uint64_t v55 = MEMORY[0x263F8D5B8];
            *(void *)(v53 + 56) = v54;
            *(void *)(v53 + 64) = v55;
            *(double *)(v53 + 32) = v29;
            uint64_t v56 = sub_2614D53E8();
            uint64_t v93 = sub_2613D875C(v56, v57, &v94);
            sub_2614D5B58();
            swift_bridgeObjectRelease();
            os_log_t v58 = v85;
            _os_log_impl(&dword_2613B8000, v85, (os_log_type_t)v87, "Result: \"%s%s%s\":%s %s secs after end of speech", (uint8_t *)v47, 0x34u);
            uint64_t v59 = v82;
            swift_arrayDestroy();
            MEMORY[0x263E38060](v59, -1, -1);
            uint64_t v60 = v47;
            uint64_t v30 = v92;
            MEMORY[0x263E38060](v60, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v75 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v89, v30);
        }
        uint64_t v76 = (void *)MEMORY[0x263F8EED0];
        unint64_t v77 = v90;
        char v78 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v90) + 0x60))(v75);
        if (v78)
        {
          objc_msgSend(v78, sel_keywordSpotterDidDetectKeywordWithEvent_, v28);
          char v78 = (void *)swift_unknownObjectRelease();
        }
        uint64_t v79 = (*(uint64_t (**)(void *))((*v76 & *v77) + 0x118))(v78);
        if (v79)
        {
          (*(void (**)(uint64_t))(*(void *)v79 + 368))(a1);
          swift_release();
        }

        return;
      }
    }
    else
    {
      double v29 = *(double *)&v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech];
      uint64_t v30 = v92;
      if ((v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore] & 1) == 0) {
        goto LABEL_4;
      }
    }
    unint64_t v31 = 0xE500000000000000;
    uint64_t v32 = 0x3E6C69733CLL;
    goto LABEL_10;
  }
  uint64_t v33 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v33, v3);
  uint64_t v34 = sub_2614D50A8();
  os_log_type_t v35 = sub_2614D5978();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_2613B8000, v34, v35, "Did not actually have a keyword in keywordSpotterShouldTriggerKeyword", v36, 2u);
    MEMORY[0x263E38060](v36, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
}

void VAKeywordSpotterBase.__allocating_init(delegate:configuration:)()
{
}

void VAKeywordSpotterBase.init(delegate:configuration:)()
{
}

uint64_t sub_2614AC3A8()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t sub_2614AC3E4()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t sub_2614AC420()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_2614AC458(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_2614AC464(void *a1)
{
  objc_msgSend(a1, sel_sampleRate);
  if (v2 != 16000.0
    || objc_msgSend(a1, sel_channelCount) != 1
    || objc_msgSend(a1, sel_commonFormat) != (id)3
    || (uint64_t result = (uint64_t)objc_msgSend(a1, sel_isInterleaved), (result & 1) != 0))
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v4 = 0xD00000000000003ELL;
    v4[1] = 0x80000002614E75E0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2614AC534()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_2614AC57C()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_2613E3EDC;
  return sub_2614A924C((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t method lookup function for VAKeywordSpotterBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAKeywordSpotterBase);
}

uint64_t dispatch thunk of VAKeywordSpotterBase.addAudioAsyncNoChecks(buffer:hostTime:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x263F8EED0] & *v2) + 0x1F8);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_2613E3EDC;
  return v9(a1, a2);
}

uint64_t dispatch thunk of VAKeywordSpotterBase.keywordSpotterDidUpdateScores(verboseLog:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VAKeywordSpotterBase.keywordSpotterShouldTriggerKeyword(keywordResult:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

void sub_2614AC7D8()
{
}

uint64_t sub_2614AC7EC()
{
  swift_beginAccess();
  return MEMORY[0x263E38150](v0 + 16);
}

uint64_t sub_2614AC834(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_2614AC898(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x263E38150](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return sub_2614AC918;
}

void sub_2614AC918(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t sub_2614AC99C@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  int v3 = *(_DWORD *)(v1 + 40);
  char v4 = *(unsigned char *)(v1 + 44);
  char v5 = *(unsigned char *)(v1 + 45);
  char v6 = *(unsigned char *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  char v8 = *(unsigned char *)(v1 + 80);
  char v9 = *(unsigned char *)(v1 + 81);
  int v10 = *(_DWORD *)(v1 + 84);
  char v11 = *(unsigned char *)(v1 + 88);
  uint64_t v13 = *(void *)(v1 + 96);
  uint64_t v12 = *(void *)(v1 + 104);
  __int16 v14 = *(_WORD *)(v1 + 112);
  char v15 = *(unsigned char *)(v1 + 114);
  char v16 = *(unsigned char *)(v1 + 115);
  char v17 = *(unsigned char *)(v1 + 116);
  char v18 = *(unsigned char *)(v1 + 117);
  char v19 = *(unsigned char *)(v1 + 118);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 13) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 48);
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 49) = v9;
  *(_DWORD *)(a1 + 52) = v10;
  *(unsigned char *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v12;
  *(_WORD *)(a1 + 80) = v14;
  *(unsigned char *)(a1 + 82) = v15;
  *(unsigned char *)(a1 + 83) = v16;
  *(unsigned char *)(a1 + 84) = v17;
  *(unsigned char *)(a1 + 85) = v18;
  *(unsigned char *)(a1 + 86) = v19;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2614ACA7C(uint64_t *a1)
{
  uint64_t v22 = *a1;
  int v2 = *((_DWORD *)a1 + 2);
  char v3 = *((unsigned char *)a1 + 12);
  char v4 = *((unsigned char *)a1 + 13);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  char v7 = *((unsigned char *)a1 + 32);
  uint64_t v8 = a1[5];
  char v9 = *((unsigned char *)a1 + 48);
  int v10 = *((_DWORD *)a1 + 13);
  char v20 = *((unsigned char *)a1 + 56);
  char v21 = *((unsigned char *)a1 + 49);
  uint64_t v18 = a1[9];
  uint64_t v19 = a1[8];
  char v16 = *((unsigned char *)a1 + 82);
  __int16 v17 = *((_WORD *)a1 + 40);
  char v14 = *((unsigned char *)a1 + 84);
  char v15 = *((unsigned char *)a1 + 83);
  char v13 = *((unsigned char *)a1 + 85);
  char v11 = *((unsigned char *)a1 + 86);
  swift_beginAccess();
  *(void *)(v1 + 32) = v22;
  *(_DWORD *)(v1 + 40) = v2;
  *(unsigned char *)(v1 + 44) = v3;
  *(unsigned char *)(v1 + 45) = v4;
  *(void *)(v1 + 48) = v5;
  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7;
  *(void *)(v1 + 72) = v8;
  *(unsigned char *)(v1 + 80) = v9;
  *(unsigned char *)(v1 + 81) = v21;
  *(_DWORD *)(v1 + 84) = v10;
  *(unsigned char *)(v1 + 88) = v20;
  *(void *)(v1 + 96) = v19;
  *(void *)(v1 + 104) = v18;
  *(_WORD *)(v1 + 112) = v17;
  *(unsigned char *)(v1 + 114) = v16;
  *(unsigned char *)(v1 + 115) = v15;
  *(unsigned char *)(v1 + 116) = v14;
  *(unsigned char *)(v1 + 117) = v13;
  *(unsigned char *)(v1 + 118) = v11;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2614ACBC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  swift_beginAccess();
  return sub_2614ACC1C(v3, a1);
}

uint64_t sub_2614ACC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A915E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2614ACC84(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  swift_beginAccess();
  sub_2614ACCE0(a1, v3);
  return swift_endAccess();
}

uint64_t sub_2614ACCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2613C23AC(&qword_26A915E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_2614ACD48())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614ACDA4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2614ACDF0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_detections);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2614ACE44())()
{
  return j__swift_endAccess;
}

uint64_t sub_2614ACEA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v38 = sub_2614D5D28();
  uint64_t v4 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *a3;
  int v9 = *((_DWORD *)a3 + 2);
  char v10 = *((unsigned char *)a3 + 12);
  char v11 = *((unsigned char *)a3 + 13);
  uint64_t v12 = a3[2];
  uint64_t v13 = a3[3];
  int v35 = *((unsigned __int8 *)a3 + 32);
  uint64_t v34 = a3[5];
  int v14 = *((unsigned __int8 *)a3 + 48);
  int v32 = *((unsigned __int8 *)a3 + 49);
  int v33 = v14;
  int v15 = *((_DWORD *)a3 + 13);
  int v31 = *((unsigned __int8 *)a3 + 56);
  uint64_t v16 = a3[8];
  uint64_t v29 = a3[9];
  uint64_t v30 = v16;
  LODWORD(v16) = *((unsigned __int16 *)a3 + 40);
  int v27 = *((unsigned __int8 *)a3 + 82);
  int v28 = v16;
  LODWORD(v16) = *((unsigned __int8 *)a3 + 83);
  int v25 = *((unsigned __int8 *)a3 + 84);
  int v26 = v16;
  LODWORD(v16) = *((unsigned __int8 *)a3 + 85);
  int v23 = *((unsigned __int8 *)a3 + 86);
  int v24 = v16;
  *(void *)(v7 + 24) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v17 = v7 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  uint64_t v18 = sub_2614D5D08();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  swift_beginAccess();
  *(void *)(v7 + 24) = v36;
  swift_unknownObjectWeakAssign();
  *(void *)(v7 + 32) = v8;
  *(_DWORD *)(v7 + 40) = v9;
  *(unsigned char *)(v7 + 44) = v10;
  *(unsigned char *)(v7 + 45) = v11;
  *(void *)(v7 + 48) = v12;
  *(void *)(v7 + 56) = v13;
  *(unsigned char *)(v7 + 64) = v35;
  *(void *)(v7 + 72) = v34;
  *(unsigned char *)(v7 + 80) = v33;
  *(unsigned char *)(v7 + 81) = v32;
  *(_DWORD *)(v7 + 84) = v15;
  *(unsigned char *)(v7 + 88) = v31;
  uint64_t v19 = v29;
  *(void *)(v7 + 96) = v30;
  *(void *)(v7 + 104) = v19;
  *(_WORD *)(v7 + 112) = v28;
  *(unsigned char *)(v7 + 114) = v27;
  *(unsigned char *)(v7 + 115) = v26;
  *(unsigned char *)(v7 + 116) = v25;
  *(unsigned char *)(v7 + 117) = v24;
  *(unsigned char *)(v7 + 118) = v23;
  swift_retain();
  sub_2614D5D18();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v7 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock, v6, v38);
  *(void *)(v7 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_detections) = MEMORY[0x263F8EE78];
  swift_release();
  uint64_t v20 = sub_26141BF74();
  swift_unknownObjectRelease();
  return v20;
}

uint64_t sub_2614AD15C(uint64_t a1)
{
  void (*v53)(double *__return_ptr);
  uint64_t v54;
  float v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  void *v61;
  void v62[2];
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  float *v65;
  char *v66;
  uint64_t v67;
  double v68;
  int v69;
  __int16 v70;
  long long v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  double v86;
  unint64_t v87;
  long long v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;
  int v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;

  uint64_t v3 = v1;
  uint64_t v5 = sub_2614D50C8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  int v9 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v62 - v11;
  uint64_t v13 = (*(void *(**)(double *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v86, v10);
  uint64_t v14 = v87;
  if (v87)
  {
    uint64_t v66 = v12;
    uint64_t v67 = v6;
    uint64_t v15 = *(void *)&v86;
    float v16 = *(float *)&v88;
    (*(void (**)(double *__return_ptr, void *))(*(void *)v1 + 176))(&v86, v13);
    uint64_t v68 = v86;
    int v69 = v87;
    uint64_t v70 = WORD2(v87);
    uint64_t v71 = v88;
    unint64_t v72 = v89;
    os_log_t v73 = v90;
    uint64_t v74 = v91;
    uint64_t v75 = v92;
    uint64_t v76 = v93;
    unint64_t v77 = v94;
    char v78 = v95;
    uint64_t v79 = v96;
    uint64_t v80 = v97;
    uint64_t v81 = v98;
    uint64_t v82 = v99;
    uint64_t v83 = v100;
    uint64_t v84 = v101;
    os_log_t v85 = v102;
    uint64_t v17 = VARuntimeParameters.keywordsToThresholds.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(void *)(v17 + 16) || (unint64_t v18 = sub_2613D8F00(v15, v14), (v19 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2613DC2B8();
      swift_allocError();
      *uint64_t v37 = 0xD00000000000002ELL;
      v37[1] = 0x80000002614E7620;
      return swift_willThrow();
    }
    float v20 = *(float *)(*(void *)(v17 + 56) + 4 * v18);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v20 < v16)
    {
      uint64_t result = sub_2614ADAF4();
      if ((result & 1) == 0)
      {
        char v64 = v2;
        uint64_t v22 = *(uint64_t (**)(double *))(*(void *)v3 + 240);
        swift_retain();
        int v23 = (uint64_t (*)(double *, void))v22(&v86);
        int v25 = v24;
        MEMORY[0x263E36760]();
        if (*(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2614D5698();
        }
        sub_2614D56E8();
        sub_2614D5678();
        uint64_t v26 = v23(&v86, 0);
        int v27 = *(uint64_t (**)(void))(*(void *)v3 + 224);
        uint64_t v28 = *(void *)v3 + 224;
        unint64_t v29 = ((uint64_t (*)(uint64_t))v27)(v26);
        uint64_t v30 = v29 >> 62 ? sub_2614D5D98() : *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRelease();
        if (v30 >= 1)
        {
          os_log_type_t v65 = (float *)sub_26149EC0C();
          float v31 = *v65;
          unint64_t v32 = v27();
          unint64_t v33 = v32;
          if (v32 >> 62) {
            uint64_t v34 = sub_2614D5D98();
          }
          else {
            uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          uint64_t v63 = (uint64_t (*)(uint64_t))v27;
          v62[1] = v28;
          if (v34)
          {
            if (v34 < 1) {
              goto LABEL_48;
            }
            unint64_t v35 = 0;
            for (unint64_t i = 0; i != v34; ++i)
            {
              if ((v33 & 0xC000000000000001) != 0)
              {
                uint64_t v39 = MEMORY[0x263E36D80](i, v33);
              }
              else
              {
                uint64_t v39 = *(void *)(v33 + 8 * i + 32);
                swift_retain();
              }
              (*(void (**)(double *__return_ptr))(*(void *)v39 + 144))(&v86);
              if (v87)
              {
                float v38 = *(float *)&v88;
                swift_release();
                swift_bridgeObjectRelease();
              }
              else
              {
                float v38 = *v65;
                swift_release();
              }
              if (v31 < v38) {
                unint64_t v35 = i;
              }
            }
          }
          else
          {
            unint64_t v35 = 0;
          }
          uint64_t v44 = swift_bridgeObjectRelease();
          uint64_t v45 = v63(v44);
          if ((v45 & 0xC000000000000001) != 0)
          {
            uint64_t v47 = MEMORY[0x263E36D80](v35, v45);
            uint64_t v46 = v67;
LABEL_35:
            swift_bridgeObjectRelease();
            uint64_t v48 = sub_26146718C();
            int v49 = v66;
            (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v66, v48, v5);
            swift_retain_n();
            uint64_t v50 = sub_2614D50A8();
            int v51 = sub_2614D5968();
            if (!os_log_type_enabled(v50, (os_log_type_t)v51))
            {

              swift_release_n();
              (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v5);
LABEL_40:
              unint64_t v57 = (*(uint64_t (**)(void))(*(void *)v3 + 232))(MEMORY[0x263F8EE78]);
              if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v57))
              {
                uint64_t v59 = v58;
                uint64_t ObjectType = swift_getObjectType();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v47, ObjectType, v59);
                swift_release();
                return swift_unknownObjectRelease();
              }
              else
              {
                sub_2613DC2B8();
                swift_allocError();
                *uint64_t v61 = 0xD00000000000001ELL;
                v61[1] = 0x80000002614E7650;
                swift_willThrow();
                return swift_release();
              }
            }
            LODWORD(v65) = v51;
            uint64_t v52 = swift_slowAlloc();
            uint64_t v63 = (uint64_t (*)(uint64_t))swift_slowAlloc();
            uint64_t v68 = *(double *)&v63;
            *(_DWORD *)uint64_t v52 = 136315650;
            uint64_t v53 = *(void (**)(double *__return_ptr))(*(void *)v47 + 144);
            v53(&v86);
            if (v87)
            {
              long long v86 = COERCE_DOUBLE(sub_2613D875C(*(uint64_t *)&v86, v87, (uint64_t *)&v68));
              sub_2614D5B58();
              swift_release_n();
              uint64_t v54 = swift_bridgeObjectRelease();
              *(_WORD *)(v52 + 12) = 2048;
              ((void (*)(double *__return_ptr, uint64_t))v53)(&v86, v54);
              if (v87)
              {
                uint64_t v55 = *(float *)&v88;
                swift_bridgeObjectRelease();
                long long v86 = v55;
                sub_2614D5B58();
                swift_release_n();
                *(_WORD *)(v52 + 22) = 2048;
                long long v86 = v20;
                sub_2614D5B58();
                _os_log_impl(&dword_2613B8000, v50, (os_log_type_t)v65, "FINAL AVS KEYWORD DETECTED ((^D&^)): %s with score %f, using threshold %f", (uint8_t *)v52, 0x20u);
                uint64_t v56 = v63;
                swift_arrayDestroy();
                MEMORY[0x263E38060](v56, -1, -1);
                MEMORY[0x263E38060](v52, -1, -1);

                (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v5);
                goto LABEL_40;
              }
LABEL_50:
              uint64_t result = swift_release();
              __break(1u);
              return result;
            }
LABEL_49:
            swift_release_n();
            __break(1u);
            goto LABEL_50;
          }
          uint64_t v46 = v67;
          if ((v35 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v35 < *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v47 = *(void *)(v45 + 8 * v35 + 32);
            swift_retain();
            goto LABEL_35;
          }
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
      }
    }
  }
  else
  {
    uint64_t v40 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v40, v5);
    uint64_t v41 = sub_2614D50A8();
    os_log_type_t v42 = sub_2614D5968();
    if (os_log_type_enabled(v41, v42))
    {
      char v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v43 = 0;
      _os_log_impl(&dword_2613B8000, v41, v42, "Did not find a detection in StrategyLayerAVS:handleKeywordResult", v43, 2u);
      MEMORY[0x263E38060](v43, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_2614ADAF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2614D5D08();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A915E20);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  int v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v27 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)v27 - v14;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v0 + 176))(v31, v13);
  uint64_t v16 = v31[3];
  char v17 = v32;
  uint64_t v30 = v31[2];
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    v27[1] = v16;
    uint64_t v28 = v5;
    unint64_t v29 = v9;
    char v19 = *(void (**)(uint64_t))(*(void *)v0 + 200);
    v19(v18);
    float v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
    int v21 = v20(v15, 1, v2);
    sub_2614AE31C((uint64_t)v15);
    if (v21 != 1)
    {
      uint64_t v22 = v28;
      uint64_t v23 = sub_2614D5CE8();
      v19(v23);
      uint64_t result = v20(v12, 1, v2);
      if (result == 1)
      {
        __break(1u);
        return result;
      }
      sub_2614D5CF8();
      int v25 = *(void (**)(char *, uint64_t))(v3 + 8);
      v25(v22, v2);
      v25(v12, v2);
      if ((sub_2614D6108() & 1) == 0) {
        return 1;
      }
    }
    uint64_t v26 = v29;
    sub_2614D5CE8();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v26, 0, 1, v2);
    (*(void (**)(char *))(*(void *)v1 + 208))(v26);
  }
  return 0;
}

void sub_2614ADE0C()
{
}

uint64_t sub_2614ADE3C()
{
  sub_2613E3498(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2614AE31C(v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock;
  uint64_t v2 = sub_2614D5D28();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2614ADEE4()
{
  uint64_t v0 = VAStrategyLayer.deinit();
  sub_2613E3498(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2614AE31C(v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock;
  uint64_t v2 = sub_2614D5D28();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t VAStrategyProviderAVS.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t VAStrategyProviderAVS.init()()
{
  return v0;
}

uint64_t sub_2614ADFE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = sub_2614D5D28();
  uint64_t v4 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a3;
  int v8 = *((_DWORD *)a3 + 2);
  char v9 = *((unsigned char *)a3 + 12);
  char v10 = *((unsigned char *)a3 + 13);
  uint64_t v11 = a3[2];
  uint64_t v33 = a3[3];
  uint64_t v34 = v11;
  int v32 = *((unsigned __int8 *)a3 + 32);
  uint64_t v31 = a3[5];
  LODWORD(v11) = *((unsigned __int8 *)a3 + 48);
  int v29 = *((unsigned __int8 *)a3 + 49);
  int v30 = v11;
  int v12 = *((_DWORD *)a3 + 13);
  int v28 = *((unsigned __int8 *)a3 + 56);
  uint64_t v13 = a3[9];
  uint64_t v27 = a3[8];
  LODWORD(v11) = *((unsigned __int16 *)a3 + 40);
  int v25 = *((unsigned __int8 *)a3 + 82);
  int v26 = v11;
  LODWORD(v11) = *((unsigned __int8 *)a3 + 83);
  int v23 = *((unsigned __int8 *)a3 + 84);
  int v24 = v11;
  LODWORD(v11) = *((unsigned __int8 *)a3 + 85);
  int v21 = *((unsigned __int8 *)a3 + 86);
  int v22 = v11;
  type metadata accessor for VAStrategyAVS();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 24) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = v14 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  uint64_t v16 = sub_2614D5D08();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  swift_beginAccess();
  *(void *)(v14 + 24) = v35;
  swift_unknownObjectWeakAssign();
  *(void *)(v14 + 32) = v7;
  *(_DWORD *)(v14 + 40) = v8;
  *(unsigned char *)(v14 + 44) = v9;
  *(unsigned char *)(v14 + 45) = v10;
  uint64_t v17 = v33;
  *(void *)(v14 + 48) = v34;
  *(void *)(v14 + 56) = v17;
  *(unsigned char *)(v14 + 64) = v32;
  *(void *)(v14 + 72) = v31;
  *(unsigned char *)(v14 + 80) = v30;
  *(unsigned char *)(v14 + 81) = v29;
  *(_DWORD *)(v14 + 84) = v12;
  *(unsigned char *)(v14 + 88) = v28;
  *(void *)(v14 + 96) = v27;
  *(void *)(v14 + 104) = v13;
  *(_WORD *)(v14 + 112) = v26;
  *(unsigned char *)(v14 + 114) = v25;
  *(unsigned char *)(v14 + 115) = v24;
  *(unsigned char *)(v14 + 116) = v23;
  *(unsigned char *)(v14 + 117) = v22;
  *(unsigned char *)(v14 + 118) = v21;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2614D5D18();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v14 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock, v6, v36);
  *(void *)(v14 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_detections) = MEMORY[0x263F8EE78];
  swift_release();
  uint64_t v18 = sub_26141BF74();
  swift_unknownObjectRelease();
  return v18;
}

uint64_t VAStrategyProviderAVS.deinit()
{
  return v0;
}

uint64_t VAStrategyProviderAVS.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2614AE2D8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_2614AE31C(uint64_t a1)
{
  uint64_t v2 = sub_2613C23AC(&qword_26A915E20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for VAStrategyAVS()
{
  uint64_t result = qword_26A91F8C0;
  if (!qword_26A91F8C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2614AE3C8()
{
  return type metadata accessor for VAStrategyAVS();
}

void sub_2614AE3D0()
{
  sub_2614AE4BC();
  if (v0 <= 0x3F)
  {
    sub_2614D5D28();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_2614AE4BC()
{
  if (!qword_26A915E28)
  {
    sub_2614D5D08();
    unint64_t v0 = sub_2614D5AD8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26A915E28);
    }
  }
}

uint64_t type metadata accessor for VAStrategyProviderAVS()
{
  return self;
}

uint64_t method lookup function for VAStrategyProviderAVS(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAStrategyProviderAVS);
}

uint64_t dispatch thunk of VAStrategyProviderAVS.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of VAStrategyProviderAVS.getStrategy(delegate:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t normalizeFP32Array(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_2613D917C(0, v2, 0);
    uint64_t result = v8;
    uint64_t v4 = (float *)(a1 + 32);
    unint64_t v5 = *(void *)(v8 + 16);
    do
    {
      float v6 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        sub_2613D917C(v7 > 1, v5 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v5 + 1;
      *(float *)(result + 4 * v5 + 32) = v6 / 32767.0;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t normalizeEmbedding(_:)(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  vDSP_Length v2 = *(void *)(a1 + 16);
  LODWORD(__C[0]) = 2143289344;
  vDSP_svesq((const float *)(a1 + 32), 1, (float *)__C, v2);
  float v3 = *(float *)__C;
  __C[0] = a1;
  __C[3] = __C;
  float v6 = sqrtf(v3);
  return sub_26148B198(v2, (uint64_t (*)(void *, uint64_t *))sub_2614B03BC);
}

uint64_t EncoderPredictionAVS.embeddings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EncoderPredictionAVS.speech.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EncoderPredictionAVS.__allocating_init(embeddings:speech:normalize:)(uint64_t a1, uint64_t a2, char a3)
{
  __C[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = swift_allocObject();
  if (a3)
  {
    vDSP_Length v7 = *(void *)(a1 + 16);
    LODWORD(__C[0]) = 2143289344;
    vDSP_svesq((const float *)(a1 + 32), 1, (float *)__C, v7);
    __C[0] = a1;
    uint64_t v8 = MEMORY[0x270FA5388](*(void *)(a1 + 16));
    uint64_t v9 = sub_26148B198(v8, (uint64_t (*)(void *, uint64_t *))sub_2614B03BC);
    swift_bridgeObjectRelease();
    a1 = v9;
  }
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return v6;
}

uint64_t EncoderPredictionAVS.init(embeddings:speech:normalize:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a1;
  __C[1] = *MEMORY[0x263EF8340];
  if (a3)
  {
    vDSP_Length v6 = *(void *)(a1 + 16);
    LODWORD(__C[0]) = 2143289344;
    vDSP_svesq((const float *)(a1 + 32), 1, (float *)__C, v6);
    __C[0] = v5;
    uint64_t v7 = MEMORY[0x270FA5388](*(void *)(v5 + 16));
    uint64_t v8 = sub_26148B198(v7, (uint64_t (*)(void *, uint64_t *))sub_2614B03BC);
    swift_bridgeObjectRelease();
    uint64_t v5 = v8;
  }
  *(void *)(v3 + 16) = v5;
  *(void *)(v3 + 24) = a2;
  return v3;
}

uint64_t EncoderPredictionAVS.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EncoderPredictionAVS.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t static VAAVSAudioEncoderModel.modelName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_2614AE9CC()
{
  return swift_retain();
}

uint64_t sub_2614AEA04(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return swift_release();
}

uint64_t (*sub_2614AEA4C())()
{
  return j__swift_endAccess;
}

uint64_t sub_2614AEAA0()
{
  return *(void *)(v0 + 96);
}

double VAAVSAudioEncoderModel.bufferDurationSeconds.getter()
{
  return *(double *)(v0 + 112);
}

uint64_t VAAVSAudioEncoderModel.audioBufferMaxSamples.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t VAAVSAudioEncoderModel.embeddingMaxFrames.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t VAAVSAudioEncoderModel.__allocating_init(computeUnits:)(char *a1)
{
  return VAAVSAudioEncoderModel.init(computeUnits:)(a1);
}

uint64_t VAAVSAudioEncoderModel.init(computeUnits:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2614D50C8();
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v68 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v60 - v7;
  uint64_t v9 = type metadata accessor for VASignpostInterval();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *a1;
  type metadata accessor for VALog();
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  uint64_t v74 = 0;
  unint64_t v75 = 0xE000000000000000;
  swift_retain();
  sub_2614D5C38();
  sub_2614D54D8();
  char v73 = v12;
  sub_2614D5D48();
  uint64_t v71 = v11;
  static VALog.begin(_:_:)("VoiceActions with AVS", 21, 2u, (const char *)v74, v75, (uint64_t)v11);
  swift_bridgeObjectRelease();
  type metadata accessor for VAStrideConfiguration();
  uint64_t v13 = static VAStrideConfiguration.forFlexibleAVS()();
  uint64_t v14 = (void *)MEMORY[0x263F8EED0];
  uint64_t v15 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0xA0);
  *(void *)(v2 + 88) = v15();
  *(void *)(v2 + 96) = (*(uint64_t (**)(void))((*v14 & *v13) + 0xB8))();
  uint64_t v16 = *(uint64_t (**)(void))((*v14 & *v13) + 0xD0);
  *(void *)(v2 + 104) = v16();
  uint64_t v17 = v15();
  uint64_t result = v16();
  if (!result)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v17 == 0x8000000000000000 && result == -1) {
    goto LABEL_34;
  }
  *(void *)(v2 + 128) = v17 / result;
  *(double *)(v2 + 112) = (*(double (**)(void))((*v14 & *v13) + 0x1A8))();
  char v19 = *(uint64_t (**)(void))((*v14 & *v13) + 0x100);
  *(void *)(v2 + 120) = v19();
  uint64_t v20 = v19();
  uint64_t result = v16();
  if (!result)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v20 == 0x8000000000000000 && result == -1) {
    goto LABEL_35;
  }
  *(void *)(v2 + 136) = v20 / result;
  type metadata accessor for VAEspressoUtilsV2();
  char v21 = sub_2613D04A8();
  uint64_t v22 = v72;
  sub_26148DB30(0xD00000000000001ELL, 0x80000002614E7700, v21 & 1, (uint64_t *)&v76);
  if (v22)
  {
    sub_26142D1B0((uint64_t)v71);

LABEL_29:
    swift_release();
    swift_release();
    type metadata accessor for VAAVSAudioEncoderModel();
    return swift_deallocPartialClassInstance();
  }
  uint64_t v23 = sub_26146718C();
  uint64_t v24 = v69;
  int v25 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
  uint64_t v62 = v23;
  uint64_t v63 = v69 + 16;
  uint64_t v61 = v25;
  ((void (*)(char *))v25)(v8);
  v80[0] = v76;
  uint64_t v26 = *((void *)&v77 + 1);
  uint64_t v79 = *((void *)&v77 + 1);
  uint64_t v72 = v77;
  uint64_t v81 = v77;
  long long v27 = v78;
  sub_2613DC30C((uint64_t)v80);
  sub_2613DC338((uint64_t)&v81);
  sub_2613DC338((uint64_t)&v79);
  swift_retain();
  swift_retain();
  uint64_t v66 = v8;
  int v28 = sub_2614D50A8();
  os_log_type_t v29 = sub_2614D5968();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v67 = *((void *)&v27 + 1);
  uint64_t v65 = v27;
  uint64_t v64 = v26;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 134218240;
    uint64_t v74 = *(void *)(v72 + 16);
    v60[1] = 0;
    sub_2614D5B58();
    *(_WORD *)(v31 + 12) = 2048;
    uint64_t v74 = *(void *)(v26 + 16);
    sub_2614D5B58();
    sub_2613DC364((uint64_t)v80);
    sub_2613DC390((uint64_t)&v81);
    sub_2613DC390((uint64_t)&v79);
    swift_release();
    swift_release();
    _os_log_impl(&dword_2613B8000, v28, v29, "AVS model is loaded with %ld inputs and %ld outputs", (uint8_t *)v31, 0x16u);
    uint64_t v32 = v31;
    uint64_t v24 = v69;
    MEMORY[0x263E38060](v32, -1, -1);
  }
  else
  {
    sub_2613DC364((uint64_t)v80);
    sub_2613DC390((uint64_t)&v81);
    sub_2613DC390((uint64_t)&v79);

    swift_release();
    swift_release();
  }
  uint64_t v33 = *(void (**)(char *, uint64_t))(v24 + 8);
  v33(v66, v70);
  uint64_t v34 = v72;
  if (*(void *)(v72 + 16) != 1) {
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  sub_2613D8F00(0xD000000000000011, 0x80000002614E7760);
  char v36 = v35;
  sub_2613DC390((uint64_t)&v81);
  if ((v36 & 1) == 0) {
    goto LABEL_27;
  }
  if (!*(void *)(v34 + 16)) {
    goto LABEL_27;
  }
  unint64_t v37 = sub_2613D8F00(0xD000000000000011, 0x80000002614E7760);
  if ((v38 & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v39 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v34 + 56) + 8 * v37) + 200);
  uint64_t v40 = swift_retain();
  uint64_t v41 = v39(v40);
  uint64_t result = swift_release();
  if (*(void *)(v41 + 16) < 2uLL)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v42 = *(void *)(v41 + 40);
  swift_bridgeObjectRelease();
  if (v42 != 64)
  {
LABEL_27:
    sub_2613DC2B8();
    swift_allocError();
    *os_log_t v58 = 0xD00000000000001BLL;
    v58[1] = 0x80000002614E7740;
    swift_willThrow();

    sub_2613DC364((uint64_t)v80);
    sub_2613DC390((uint64_t)&v81);
    sub_2613DC390((uint64_t)&v79);
LABEL_28:
    swift_release();
    swift_release();
    sub_26142D1B0((uint64_t)v71);
    goto LABEL_29;
  }
  uint64_t v43 = v64;
  if (*(void *)(v64 + 16) != 3) {
    goto LABEL_31;
  }
  sub_2613DC338((uint64_t)&v79);
  sub_2613D8F00(0x6E69646465626D65, 0xEC000000745F7367);
  char v45 = v44;
  sub_2613DC390((uint64_t)&v79);
  if ((v45 & 1) == 0) {
    goto LABEL_31;
  }
  if (!*(void *)(v43 + 16)) {
    goto LABEL_31;
  }
  unint64_t v46 = sub_2613D8F00(0x6E69646465626D65, 0xEC000000745F7367);
  if ((v47 & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v48 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v43 + 56) + 8 * v46) + 200);
  uint64_t v49 = swift_retain();
  uint64_t v50 = v48(v49);
  uint64_t result = swift_release();
  if (*(void *)(v50 + 16) < 2uLL)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  uint64_t v51 = *(void *)(v50 + 40);
  swift_bridgeObjectRelease();
  if (v51 != 320)
  {
LABEL_31:
    sub_2613DC2B8();
    swift_allocError();
    void *v59 = 0xD00000000000001CLL;
    v59[1] = 0x80000002614E7780;
    swift_willThrow();

    sub_2613DC364((uint64_t)v80);
    sub_2613DC390((uint64_t)&v81);
    sub_2613DC390((uint64_t)&v79);
    goto LABEL_28;
  }
  long long v52 = v77;
  *(_OWORD *)(v2 + 16) = v76;
  *(_OWORD *)(v2 + 32) = v52;
  *(_OWORD *)(v2 + 48) = v78;
  type metadata accessor for VAAVSFeatureExtract();
  sub_2613DC30C((uint64_t)v80);
  sub_2613DC338((uint64_t)&v81);
  sub_2613DC338((uint64_t)&v79);
  swift_retain();
  uint64_t v53 = swift_retain();
  *(void *)(v2 + 64) = VAAVSFeatureExtract.__allocating_init()(v53);
  *(void *)(v2 + 72) = -1;
  swift_release();
  v61(v68, v62, v70);
  uint64_t v54 = sub_2614D50A8();
  os_log_type_t v55 = sub_2614D5968();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 134217984;
    uint64_t v74 = 64;
    sub_2614D5B58();
    _os_log_impl(&dword_2613B8000, v54, v55, "VAFeatureExtract created with %ld filters", v56, 0xCu);
    MEMORY[0x263E38060](v56, -1, -1);
  }

  v33(v68, v70);
  uint64_t v57 = (uint64_t)v71;
  VASignpostInterval.end(_:)((Swift::String_optional)0);

  sub_2613DC364((uint64_t)v80);
  sub_2613DC390((uint64_t)&v81);
  sub_2613DC390((uint64_t)&v79);
  swift_release();
  swift_release();
  sub_26142D1B0(v57);
  return sub_26141BF74();
}

uint64_t sub_2614AF548()
{
  type metadata accessor for VACircularMatrixBuffer();
  uint64_t v1 = sub_261488750(41, 64);
  uint64_t result = (*(uint64_t (**)(void *))(*v0 + 240))(v1);
  v0[9] = 0;
  return result;
}

uint64_t sub_2614AF5BC(uint64_t a1)
{
  uint64_t v3 = v2;
  void __C[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v1 + 232))();
  if (!v5)
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v18 = 0xD000000000000039;
    v18[1] = 0x80000002614E77A0;
    swift_willThrow();
    return v3;
  }
  uint64_t v6 = v5;
  if ((*(void *)(v1 + 72) & 0x8000000000000000) != 0)
  {
    sub_2613DC2B8();
    swift_allocError();
    *char v19 = 0xD000000000000021;
    v19[1] = 0x80000002614E7800;
LABEL_10:
    swift_willThrow();
    swift_release();
    return v3;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t (**)(void))(*(void *)v1 + 296);
  uint64_t v9 = *v8;
  if (v7 != (*v8)())
  {
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    sub_2614D5F88();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_2614D54D8();
    ((void (*)(uint64_t))v9)(v20);
    sub_2614D5F88();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0x80000002614E77E0;
    sub_26148D4F4();
    swift_allocError();
    *char v21 = 0xD000000000000018;
    v21[1] = 0x80000002614E77E0;
    goto LABEL_10;
  }
  normalizeFP32Array(_:)(a1);
  uint64_t v10 = *(void *)(v1 + 72);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  *(void *)(v1 + 72) = v12;
  uint64_t v13 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v1 + 64)) + 0x170))();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v6 + 168))(v13);
  uint64_t v14 = swift_bridgeObjectRelease();
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 288))(v15);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = v16;
    uint64_t v24 = v17;
    swift_bridgeObjectRelease();
    type metadata accessor for EncoderPredictionAVS();
    uint64_t v3 = swift_allocObject();
    vDSP_Length v25 = *(void *)(v23 + 16);
    LODWORD(__C[0]) = 2143289344;
    vDSP_svesq((const float *)(v23 + 32), 1, (float *)__C, v25);
    __C[0] = v23;
    uint64_t v26 = MEMORY[0x270FA5388](*(void *)(v23 + 16));
    uint64_t v27 = sub_26148B198(v26, (uint64_t (*)(void *, uint64_t *))sub_2614B03BC);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v27;
    *(void *)(v3 + 24) = v24;
  }
  return v3;
}

uint64_t sub_2614AFA20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v15 = a1;
  sub_2614D5718();
  uint64_t v4 = sub_2614D5718();
  uint64_t WitnessTable = swift_getWitnessTable();
  if (sub_2614D5928())
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  uint64_t v15 = sub_2614D52B8();
  v13[5] = v3;
  uint64_t result = sub_2614D5918();
  if (v14)
  {
    uint64_t v7 = MEMORY[0x263E36820](v14, a2);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v7 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = MEMORY[0x263F8E658];
        do
        {
          uint64_t v10 = v8 + 1;
          uint64_t v14 = v3;
          MEMORY[0x270FA5388](result);
          v13[2] = a2;
          v13[3] = v11;
          uint64_t v14 = sub_26145EFC8((void (*)(char *, char *))sub_2614B046C, (uint64_t)v13, v4, a2, MEMORY[0x263F8E628], WitnessTable, v9, v12);
          uint64_t result = sub_2614D5708();
          uint64_t v8 = v10;
        }
        while (v7 != v10);
      }
      return v15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_2614AFBC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = a1 + 32;
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  unint64_t result = v1 * v3;
  if ((unsigned __int128)(v1 * (__int128)v3) >> 64 == (v1 * v3) >> 63)
  {
    unint64_t result = sub_2613D1B04(result, 0);
    uint64_t v5 = result;
    if (v3)
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
LABEL_6:
      unint64_t v8 = v7 + 1;
      uint64_t v9 = v2;
      uint64_t v10 = v1;
      while (v7 < *(void *)(*(void *)v9 + 16))
      {
        int v11 = *(_DWORD *)(*(void *)v9 + 4 * v7 + 32);
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (unint64_t)sub_2613D8E30(v5);
          uint64_t v5 = result;
        }
        if (v6 >= *(void *)(v5 + 16)) {
          goto LABEL_16;
        }
        *(_DWORD *)(v5 + 4 * v6++ + 32) = v11;
        v9 += 8;
        if (!--v10)
        {
          ++v7;
          if (v8 == v3) {
            return v5;
          }
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    return v5;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_2614AFCD0()
{
  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*v0 + 280))();
  if (!*(void *)(v0[4] + 16)
    || (sub_2613D8F00(0xD000000000000011, 0x80000002614E7760), (v4 & 1) == 0)
    || (sub_2613C23AC(&qword_26A9156F0), (uint64_t v5 = swift_dynamicCastClass()) == 0))
  {
    swift_bridgeObjectRelease();
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v16 = 0xD000000000000027;
    v16[1] = 0x80000002614E7830;
    swift_willThrow();
    return v3;
  }
  unint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 624);
  swift_retain();
  v6(v3);
  swift_bridgeObjectRelease();
  sub_261431BD8();
  if (v2)
  {
LABEL_15:
    swift_release();
    return v3;
  }
  uint64_t v7 = v0[5];
  if (!*(void *)(v7 + 16)
    || (sub_2613D8F00(0x6E69646465626D65, 0xEC000000745F7367), (v8 & 1) == 0)
    || (sub_2613C23AC(&qword_26A9156F8), (uint64_t v9 = swift_dynamicCastClass()) == 0))
  {
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v18 = 0xD000000000000023;
    v18[1] = 0x80000002614E7860;
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 720);
  uint64_t v11 = swift_retain();
  uint64_t v3 = v10(v11);
  if (!*(void *)(v7 + 16)
    || (sub_2613D8F00(0x5F65636E656C6973, 0xE900000000000074), (v12 & 1) == 0)
    || (uint64_t v13 = swift_dynamicCastClass()) == 0)
  {
    swift_bridgeObjectRelease();
    sub_2614D5C38();
    swift_bridgeObjectRelease();
    sub_2613DC2B8();
    swift_allocError();
    *char v19 = 0xD000000000000020;
    v19[1] = 0x80000002614E7890;
    swift_willThrow();
    swift_release();
    goto LABEL_15;
  }
  uint64_t v14 = *(void (**)(uint64_t))(*(void *)v13 + 720);
  uint64_t v15 = swift_retain();
  v14(v15);
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_2614B0074()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t VAAVSAudioEncoderModel.deinit()
{
  uint64_t v0 = sub_2614D50C8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = sub_2614D50A8();
  os_log_type_t v6 = sub_2614D5988();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2613B8000, v5, v6, "deInit VAAVSAudioEncoderModel", v7, 2u);
    MEMORY[0x263E38060](v7, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v8 = VAAudioEncoderModel.deinit();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return v8;
}

uint64_t VAAVSAudioEncoderModel.__deallocating_deinit()
{
  VAAVSAudioEncoderModel.deinit();
  return swift_deallocClassInstance();
}

void sub_2614B02C8()
{
}

uint64_t sub_2614B02F8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t sub_2614B0338()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

void sub_2614B0364(uint64_t a1, uint64_t a2, float a3)
{
  vDSP_Length v3 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 16) == v3)
  {
    float v4 = a3;
    if (*(void *)a2)
    {
      vDSP_vsdiv((const float *)(a1 + 32), 1, &v4, *(float **)a2, 1, v3);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_2614B03BC(uint64_t a1, void *a2)
{
}

uint64_t type metadata accessor for VAAVSAudioEncoderModel()
{
  return self;
}

uint64_t type metadata accessor for EncoderPredictionAVS()
{
  return self;
}

void sub_2614B041C(uint64_t a1, void *a2)
{
  float v4 = *(float *)(v2 + 24);
  uint64_t v5 = **(void **)(v2 + 16);
  sub_2614B0364(v5, a1, v4);
  *a2 = *(void *)(v5 + 16);
}

uint64_t sub_2614B046C()
{
  return sub_2614D5738();
}

uint64_t method lookup function for EncoderPredictionAVS(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EncoderPredictionAVS);
}

uint64_t dispatch thunk of EncoderPredictionAVS.__allocating_init(embeddings:speech:normalize:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for VAAVSAudioEncoderModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAAVSAudioEncoderModel);
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.__allocating_init(computeUnits:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.predict(currFrame:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.matrixTranspose<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.matrixTransposeFlatten(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.computeEmbeddingsFromLogMels(featBuffer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.processingWindowSampleCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t VAKeywordSpottedEvent.keyword.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword);
  swift_bridgeObjectRetain();
  return v1;
}

float VAKeywordSpottedEvent.score.getter()
{
  return *(float *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score);
}

uint64_t VAKeywordSpottedEvent.hostTime.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_hostTime);
}

uint64_t VAKeywordSpottedEvent.intervalFromEndOfSpeech.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech);
}

uint64_t VAKeywordSpottedEvent.silenceBefore.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore);
}

uint64_t VAKeywordSpottedEvent.silenceAfter.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter);
}

uint64_t VAKeywordSpottedEvent.speechDuring.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_speechDuring);
}

uint64_t VAKeywordSpottedEvent.audioBytes.getter()
{
  return swift_bridgeObjectRetain();
}

id sub_2614B06C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, float a8, double a9)
{
  char v19 = objc_allocWithZone(v9);
  uint64_t v20 = &v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword];
  *uint64_t v20 = a1;
  v20[1] = a2;
  *(float *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score] = a8;
  *(void *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_hostTime] = a3;
  char v21 = (double *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech];
  *char v21 = a9;
  *((unsigned char *)v21 + 8) = 0;
  v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore] = a4;
  v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter] = a5;
  v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_speechDuring] = a6;
  *(void *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_audioBytes] = a7;
  v23.receiver = v19;
  v23.super_class = v9;
  return objc_msgSendSuper2(&v23, sel_init);
}

uint64_t type metadata accessor for VAKeywordSpottedEvent()
{
  return self;
}

id VAKeywordSpottedEvent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VAKeywordSpottedEvent.init()()
{
}

id VAKeywordSpottedEvent.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAKeywordSpottedEvent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for VAKeywordSpottedEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAKeywordSpottedEvent);
}

uint64_t sub_2614B090C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  swift_beginAccess();
  return sub_2614ACC1C(v3, a1);
}

uint64_t sub_2614B0960(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  swift_beginAccess();
  sub_2614ACCE0(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_2614B09BC())()
{
  return j__swift_endAccess;
}

uint64_t sub_2614B0A18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v38 = sub_2614D5D28();
  uint64_t v4 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  os_log_type_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *a3;
  int v9 = *((_DWORD *)a3 + 2);
  char v10 = *((unsigned char *)a3 + 12);
  char v11 = *((unsigned char *)a3 + 13);
  uint64_t v12 = a3[2];
  uint64_t v13 = a3[3];
  int v35 = *((unsigned __int8 *)a3 + 32);
  uint64_t v34 = a3[5];
  int v14 = *((unsigned __int8 *)a3 + 48);
  int v32 = *((unsigned __int8 *)a3 + 49);
  int v33 = v14;
  int v15 = *((_DWORD *)a3 + 13);
  int v31 = *((unsigned __int8 *)a3 + 56);
  uint64_t v16 = a3[8];
  uint64_t v29 = a3[9];
  uint64_t v30 = v16;
  LODWORD(v16) = *((unsigned __int16 *)a3 + 40);
  int v27 = *((unsigned __int8 *)a3 + 82);
  int v28 = v16;
  LODWORD(v16) = *((unsigned __int8 *)a3 + 83);
  int v25 = *((unsigned __int8 *)a3 + 84);
  int v26 = v16;
  LODWORD(v16) = *((unsigned __int8 *)a3 + 85);
  int v23 = *((unsigned __int8 *)a3 + 86);
  int v24 = v16;
  *(void *)(v7 + 24) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v17 = v7 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  uint64_t v18 = sub_2614D5D08();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  swift_beginAccess();
  *(void *)(v7 + 24) = v36;
  swift_unknownObjectWeakAssign();
  *(void *)(v7 + 32) = v8;
  *(_DWORD *)(v7 + 40) = v9;
  *(unsigned char *)(v7 + 44) = v10;
  *(unsigned char *)(v7 + 45) = v11;
  *(void *)(v7 + 48) = v12;
  *(void *)(v7 + 56) = v13;
  *(unsigned char *)(v7 + 64) = v35;
  *(void *)(v7 + 72) = v34;
  *(unsigned char *)(v7 + 80) = v33;
  *(unsigned char *)(v7 + 81) = v32;
  *(_DWORD *)(v7 + 84) = v15;
  *(unsigned char *)(v7 + 88) = v31;
  uint64_t v19 = v29;
  *(void *)(v7 + 96) = v30;
  *(void *)(v7 + 104) = v19;
  *(_WORD *)(v7 + 112) = v28;
  *(unsigned char *)(v7 + 114) = v27;
  *(unsigned char *)(v7 + 115) = v26;
  *(unsigned char *)(v7 + 116) = v25;
  *(unsigned char *)(v7 + 117) = v24;
  *(unsigned char *)(v7 + 118) = v23;
  swift_retain();
  sub_2614D5D18();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v7 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock, v6, v38);
  swift_release();
  uint64_t v20 = sub_26141BF74();
  swift_unknownObjectRelease();
  return v20;
}

uint64_t sub_2614B0CC0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2614D5D08();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2613C23AC(&qword_26A915E20);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v36 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v34 = (char *)v32 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  int v15 = (char *)v32 - v14;
  if (*(unsigned char *)(v1 + 45) == 1)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 144))(v13);
    if (v13)
    {
      uint64_t v17 = v16;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v38 = 0x203A746C75736552;
      unint64_t v39 = 0xE800000000000000;
      (*(void (**)(void))(*(void *)a1 + 160))();
      uint64_t v37 = v5;
      sub_2614D54D8();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v17 + 8))(v38, v39, ObjectType, v17);
      uint64_t v5 = v37;
      swift_bridgeObjectRelease();
      uint64_t v13 = swift_unknownObjectRelease();
    }
  }
  uint64_t v37 = a1;
  if (*(unsigned char *)(v1 + 64) == 1) {
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)(v1 + 48);
  v32[2] = *(void *)(v1 + 56);
  int v33 = v7;
  uint64_t v19 = *(void (**)(uint64_t))(*(void *)v1 + 168);
  v19(v13);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v5 + 48);
  uint64_t ObjectType = v4;
  int v21 = v20(v15, 1);
  sub_2614AE31C((uint64_t)v15);
  if (v21 == 1) {
    goto LABEL_8;
  }
  v32[1] = v18;
  uint64_t v22 = v33;
  uint64_t v23 = sub_2614D5CE8();
  int v24 = v34;
  v19(v23);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v24, 1, ObjectType);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  sub_2614D5CF8();
  int v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v27 = ObjectType;
  v26(v22, ObjectType);
  v26(v24, v27);
  uint64_t result = sub_2614D6108();
  if (result)
  {
LABEL_8:
    int v28 = v36;
    sub_2614D5CE8();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v28, 0, 1, ObjectType);
    uint64_t v13 = (*(uint64_t (**)(char *))(*(void *)v2 + 176))(v28);
LABEL_9:
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v13);
    if (result)
    {
      uint64_t v30 = v29;
      uint64_t v31 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v37, v31, v30);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_2614B110C()
{
}

uint64_t sub_2614B113C()
{
  sub_2613E3498(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2614AE31C(v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock;
  uint64_t v2 = sub_2614D5D28();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

uint64_t VAStrategyLayerPassthrough.deinit()
{
  uint64_t v0 = VAStrategyLayer.deinit();
  sub_2613E3498(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2614AE31C(v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock;
  uint64_t v2 = sub_2614D5D28();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t VAStrategyLayerPassthrough.__deallocating_deinit()
{
  uint64_t v0 = VAStrategyLayer.deinit();
  sub_2613E3498(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2614AE31C(v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock;
  uint64_t v2 = sub_2614D5D28();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2614B1340(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = sub_2614D5D28();
  uint64_t v4 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a3;
  int v8 = *((_DWORD *)a3 + 2);
  char v9 = *((unsigned char *)a3 + 12);
  char v10 = *((unsigned char *)a3 + 13);
  uint64_t v11 = a3[2];
  uint64_t v33 = a3[3];
  uint64_t v34 = v11;
  int v32 = *((unsigned __int8 *)a3 + 32);
  uint64_t v31 = a3[5];
  LODWORD(v11) = *((unsigned __int8 *)a3 + 48);
  int v29 = *((unsigned __int8 *)a3 + 49);
  int v30 = v11;
  int v12 = *((_DWORD *)a3 + 13);
  int v28 = *((unsigned __int8 *)a3 + 56);
  uint64_t v13 = a3[9];
  uint64_t v27 = a3[8];
  LODWORD(v11) = *((unsigned __int16 *)a3 + 40);
  int v25 = *((unsigned __int8 *)a3 + 82);
  int v26 = v11;
  LODWORD(v11) = *((unsigned __int8 *)a3 + 83);
  int v23 = *((unsigned __int8 *)a3 + 84);
  int v24 = v11;
  LODWORD(v11) = *((unsigned __int8 *)a3 + 85);
  int v21 = *((unsigned __int8 *)a3 + 86);
  int v22 = v11;
  type metadata accessor for VAStrategyLayerPassthrough();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 24) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = v14 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  uint64_t v16 = sub_2614D5D08();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  swift_beginAccess();
  *(void *)(v14 + 24) = v35;
  swift_unknownObjectWeakAssign();
  *(void *)(v14 + 32) = v7;
  *(_DWORD *)(v14 + 40) = v8;
  *(unsigned char *)(v14 + 44) = v9;
  *(unsigned char *)(v14 + 45) = v10;
  uint64_t v17 = v33;
  *(void *)(v14 + 48) = v34;
  *(void *)(v14 + 56) = v17;
  *(unsigned char *)(v14 + 64) = v32;
  *(void *)(v14 + 72) = v31;
  *(unsigned char *)(v14 + 80) = v30;
  *(unsigned char *)(v14 + 81) = v29;
  *(_DWORD *)(v14 + 84) = v12;
  *(unsigned char *)(v14 + 88) = v28;
  *(void *)(v14 + 96) = v27;
  *(void *)(v14 + 104) = v13;
  *(_WORD *)(v14 + 112) = v26;
  *(unsigned char *)(v14 + 114) = v25;
  *(unsigned char *)(v14 + 115) = v24;
  *(unsigned char *)(v14 + 116) = v23;
  *(unsigned char *)(v14 + 117) = v22;
  *(unsigned char *)(v14 + 118) = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_2614D5D18();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v14 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock, v6, v36);
  swift_release();
  uint64_t v18 = sub_26141BF74();
  swift_unknownObjectRelease();
  return v18;
}

uint64_t type metadata accessor for VAStrategyLayerPassthrough()
{
  uint64_t result = qword_26A91F8D0;
  if (!qword_26A91F8D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t VAStrategyProviderPassthrough.deinit()
{
  return v0;
}

uint64_t VAStrategyProviderPassthrough.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2614B1670()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_2614B16B4()
{
  return type metadata accessor for VAStrategyLayerPassthrough();
}

void sub_2614B16BC()
{
  sub_2614AE4BC();
  if (v0 <= 0x3F)
  {
    sub_2614D5D28();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for VAStrategyLayerPassthrough(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAStrategyLayerPassthrough);
}

uint64_t type metadata accessor for VAStrategyProviderPassthrough()
{
  return self;
}

uint64_t method lookup function for VAStrategyProviderPassthrough(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAStrategyProviderPassthrough);
}

uint64_t dispatch thunk of VAStrategyProviderPassthrough.getStrategy(delegate:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t sub_2614B1814@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_2614B1870(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_2614B1D34(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
}

uint64_t sub_2614B187C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B18C4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_2614B1910@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_2614B196C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_2614B1D34(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
}

uint64_t sub_2614B1978()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B19C0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_2614B1A0C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_2614B1A68(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_2614B1D34(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
}

uint64_t sub_2614B1A74()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B1ABC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_2614B1B08()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B1B50(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_2614B1B9C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B1BE4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_2614B1C30()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B1C78(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_2614B1CC4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x190))();
  *a2 = result;
  return result;
}

uint64_t sub_2614B1D28(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_2614B1D34(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime);
}

uint64_t sub_2614B1D34(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)(*a2 + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v6 = v5;
  return result;
}

uint64_t sub_2614B1D80()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B1DC8(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_2614B1E14()
{
  return swift_retain();
}

uint64_t sub_2614B1E60(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_timerTask);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_2614B1EB4())()
{
  return j__swift_endAccess;
}

uint64_t sub_2614B1F10()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_waitTimeForFirstPartial;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_2614B1F58(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_waitTimeForFirstPartial);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

id sub_2614B1FA4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_2614B1FD8(a1);
}

id sub_2614B1FD8(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_keywordTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_timerTask] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_waitTimeForFirstPartial] = 4;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for VATimingInfo();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for VATimingInfo()
{
  return self;
}

uint64_t sub_2614B20D0(uint64_t a1)
{
  return sub_2614B2620(a1, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime);
}

uint64_t sub_2614B20DC()
{
  uint64_t result = mach_absolute_time();
  *(void *)(v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_keywordTime) = result;
  return result;
}

uint64_t sub_2614B2100()
{
  uint64_t v1 = mach_absolute_time();
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v2 = v1;
  return result;
}

uint64_t sub_2614B2150(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_2614D50C8();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  int v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime;
  if (!*(void *)((char *)v3 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x1A8);
    uint64_t v33 = (*MEMORY[0x263F8EED0] & *v3) + 424;
    uint64_t v34 = v14;
    uint64_t v15 = v14(v10);
    swift_release();
    if (v15)
    {
      uint64_t v16 = sub_26146718C();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v16, v8);
      swift_bridgeObjectRetain_n();
      uint64_t v17 = sub_2614D50A8();
      os_log_type_t v18 = sub_2614D5968();
      int v32 = v17;
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        v36[0] = v31;
        int v30 = v19;
        *(_DWORD *)uint64_t v19 = 136315138;
        int v29 = v19 + 4;
        swift_bridgeObjectRetain();
        uint64_t v35 = sub_2613D875C(a1, a2, v36);
        sub_2614D5B58();
        swift_bridgeObjectRelease_n();
        uint64_t v20 = v32;
        os_log_type_t v21 = v18;
        int v22 = v30;
        _os_log_impl(&dword_2613B8000, v32, v21, "Got first partial \"%s\" after speech stopped, cancel timer", v30, 0xCu);
        uint64_t v23 = v31;
        swift_arrayDestroy();
        MEMORY[0x263E38060](v23, -1, -1);
        MEMORY[0x263E38060](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      if (v34(v24))
      {
        sub_2613C23AC(&qword_26A914CA8);
        sub_2614D57F8();
        swift_release();
      }
      (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x1B0))(0);
    }
    *(void *)((char *)v4 + v13) = mach_absolute_time();
  }
  uint64_t v25 = mach_absolute_time();
  if (a3)
  {
    int v26 = (void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
    swift_beginAccess();
  }
  else
  {
    int v26 = (void *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime);
  }
  uint64_t *v26 = v25;
  uint64_t result = sub_2614B3D4C();
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x1A8))();
    if (result)
    {
      sub_2613C23AC(&qword_26A914CA8);
      sub_2614D57F8();
      uint64_t result = swift_release();
    }
    int v28 = *(void **)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate);
    if (v28)
    {
      uint64_t result = (uint64_t)objc_msgSend(*(id *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate), sel_respondsToSelector_, sel_timingLogs_);
      if (result) {
        return (uint64_t)objc_msgSend(v28, sel_timingLogs_, v4);
      }
    }
  }
  return result;
}

uint64_t sub_2614B2594(uint64_t a1)
{
  uint64_t v3 = mach_absolute_time();
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
  swift_beginAccess();
  *uint64_t v4 = v3;
  uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = a1;
  return result;
}

uint64_t sub_2614B2614(uint64_t a1)
{
  return sub_2614B2620(a1, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
}

uint64_t sub_2614B2620(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = a1;
  return result;
}

uint64_t sub_2614B2668(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2613C23AC(&qword_26A914BD8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2614D50C8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    uint64_t v11 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    int v12 = sub_2614D50A8();
    os_log_type_t v13 = sub_2614D5968();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_2613B8000, v12, v13, "Speech stopped time before any partials, start 5 sec timer", v14, 2u);
      MEMORY[0x263E38060](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v15 = sub_2614D5788();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v16;
    uint64_t v18 = sub_2613EF35C((uint64_t)v6, (uint64_t)&unk_26A915EE0, (uint64_t)v17);
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x1B0))(v18);
  }
  uint64_t v19 = (void *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  swift_beginAccess();
  *uint64_t v19 = a1;
  uint64_t result = sub_2614B3D4C();
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x1A8))();
    if (result)
    {
      sub_2613C23AC(&qword_26A914CA8);
      sub_2614D57F8();
      uint64_t result = swift_release();
    }
    os_log_type_t v21 = *(void **)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate);
    if (v21)
    {
      uint64_t result = (uint64_t)objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate), sel_respondsToSelector_, sel_timingLogs_);
      if (result) {
        return (uint64_t)objc_msgSend(v21, sel_timingLogs_, v2);
      }
    }
  }
  return result;
}

uint64_t sub_2614B2A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = sub_2614D50C8();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614B2AD0, 0, 0);
}

uint64_t sub_2614B2AD0()
{
  uint64_t v1 = v0[6] + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x263E38150](v1);
  v0[11] = v2;
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x1C0);
    uint64_t v4 = ((*MEMORY[0x263F8EED0] & *v2) + 448) & 0xFFFFFFFFFFFFLL | 0x748D000000000000;
    v0[12] = v3;
    v0[13] = v4;
    unint64_t v5 = v3();
    if (is_mul_ok(v5, 0x3B9ACA00uLL))
    {
      uint64_t v6 = 1000000000 * v5;
      uint64_t v7 = (void *)swift_task_alloc();
      v0[14] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_2614B2C3C;
      unint64_t v5 = v6;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x270FA1FF0](v5);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_2614B2C3C()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_2614B3078;
  }
  else {
    uint64_t v2 = sub_2614B2D50;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2614B2D50()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(*(void *)(v0 + 88) + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime);
  uint64_t v3 = sub_26146718C();
  uint64_t v4 = *(void (**)(void, uint64_t, void))(v1 + 16);
  if (v2)
  {
    v4(*(void *)(v0 + 72), v3, *(void *)(v0 + 56));
    unint64_t v5 = sub_2614D50A8();
    os_log_type_t v6 = sub_2614D5968();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(NSObject **)(v0 + 88);
    if (v7)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_2613B8000, v5, v6, "Got partial after speech end", v9, 2u);
      MEMORY[0x263E38060](v9, -1, -1);
      uint64_t v10 = v5;
    }
    else
    {
      uint64_t v10 = *(NSObject **)(v0 + 88);
      uint64_t v8 = v5;
    }

    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 88);
    v4(*(void *)(v0 + 80), v3, *(void *)(v0 + 56));
    id v12 = v11;
    os_log_type_t v13 = sub_2614D50A8();
    os_log_type_t v14 = sub_2614D5968();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *(uint64_t (**)(void))(v0 + 96);
      uint64_t v16 = *(void **)(v0 + 88);
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134217984;
      *(void *)(v0 + 40) = v15();
      sub_2614D5B58();

      _os_log_impl(&dword_2613B8000, v13, v14, "No partials %llu sec after speech end, done", v17, 0xCu);
      MEMORY[0x263E38060](v17, -1, -1);
    }
    else
    {
    }
    uint64_t v18 = *(void **)(v0 + 88);
    uint64_t v19 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 80), *(void *)(v0 + 56));
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v18) + 0x1A8))(v19))
    {
      sub_2613C23AC(&qword_26A914CA8);
      sub_2614D57F8();
      swift_release();
    }
    uint64_t v20 = *(char **)(v0 + 88);
    os_log_type_t v21 = *(void **)&v20[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate];
    if (v21)
    {
      unsigned __int8 v22 = objc_msgSend(v21, sel_respondsToSelector_, sel_timingLogs_);
      uint64_t v23 = *(void **)(v0 + 88);
      if (v22) {
        objc_msgSend(v21, sel_timingLogs_, *(void *)(v0 + 88));
      }
    }
    else
    {
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_2614B3078()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL sub_2614B30F0()
{
  return *(void *)(v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime) != 0;
}

uint64_t sub_2614B3108(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2613C23AC(&qword_26A914BD8);
  MEMORY[0x270FA5388](v4 - 8);
  os_log_type_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_2614D50C8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(void *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    uint64_t v11 = sub_26146718C();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    id v12 = sub_2614D50A8();
    os_log_type_t v13 = sub_2614D5968();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_2613B8000, v12, v13, "Speech stopped frame before any partials, start 5 sec timer", v14, 2u);
      MEMORY[0x263E38060](v14, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v15 = sub_2614D5788();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v16;
    uint64_t v18 = sub_2613EF35C((uint64_t)v6, (uint64_t)&unk_26A915EF0, (uint64_t)v17);
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x1B0))(v18);
  }
  uint64_t v19 = mach_absolute_time();
  uint64_t v20 = (void *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  swift_beginAccess();
  *uint64_t v20 = v19;
  os_log_type_t v21 = (void *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame);
  swift_beginAccess();
  *os_log_type_t v21 = a1;
  uint64_t result = sub_2614B3D4C();
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x1A8))();
    if (result)
    {
      sub_2613C23AC(&qword_26A914CA8);
      sub_2614D57F8();
      uint64_t result = swift_release();
    }
    uint64_t v23 = *(void **)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate);
    if (v23)
    {
      uint64_t result = (uint64_t)objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate), sel_respondsToSelector_, sel_timingLogs_);
      if (result) {
        return (uint64_t)objc_msgSend(v23, sel_timingLogs_, v2);
      }
    }
  }
  return result;
}

uint64_t sub_2614B34CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = sub_2614D50C8();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614B359C, 0, 0);
}

uint64_t sub_2614B359C()
{
  uint64_t v1 = v0[6] + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x263E38150](v1);
  v0[11] = v2;
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x1C0);
    uint64_t v4 = ((*MEMORY[0x263F8EED0] & *v2) + 448) & 0xFFFFFFFFFFFFLL | 0x748D000000000000;
    v0[12] = v3;
    v0[13] = v4;
    unint64_t v5 = v3();
    if (is_mul_ok(v5, 0x3B9ACA00uLL))
    {
      uint64_t v6 = 1000000000 * v5;
      uint64_t v7 = (void *)swift_task_alloc();
      v0[14] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_2614B3708;
      unint64_t v5 = v6;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x270FA1FF0](v5);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_2614B3708()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_2614B50AC;
  }
  else {
    uint64_t v2 = sub_2614B50B0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

void sub_2614B381C()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
  unint64_t v3 = v2();
  uint64_t v4 = *(uint64_t (**)(void))((*v1 & *v0) + 0xB8);
  if (v4() < v3)
  {
    type metadata accessor for VARequestContext(0);
    unint64_t v5 = v2();
    unint64_t v6 = v4();
    BOOL v7 = v5 >= v6;
    unint64_t v8 = v5 - v6;
    if (v7) {
      sub_2613FC478(v8);
    }
    else {
      __break(1u);
    }
  }
}

void sub_2614B38F8()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
  if (v2())
  {
    unint64_t v3 = v2();
    uint64_t v4 = *(uint64_t (**)(void))((*v1 & *v0) + 0xD0);
    unint64_t v5 = v4();
    type metadata accessor for VARequestContext(0);
    if (v5 >= v3)
    {
      unint64_t v10 = v4();
      unint64_t v11 = v2();
      BOOL v8 = v10 >= v11;
      unint64_t v12 = v10 - v11;
      if (v8)
      {
        sub_2613FC478(v12);
        return;
      }
    }
    else
    {
      unint64_t v6 = v2();
      unint64_t v7 = v4();
      BOOL v8 = v6 >= v7;
      unint64_t v9 = v6 - v7;
      if (v8)
      {
        sub_2613FC478(v9);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void sub_2614B3A2C()
{
  uint64_t v1 = OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime;
  unint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime);
  if (v2)
  {
    unint64_t v3 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8);
    if (v3() < v2)
    {
      type metadata accessor for VARequestContext(0);
      unint64_t v4 = *(void *)((char *)v0 + v1);
      unint64_t v5 = v3();
      BOOL v6 = v4 >= v5;
      unint64_t v7 = v4 - v5;
      if (v6) {
        sub_2613FC478(v7);
      }
      else {
        __break(1u);
      }
    }
  }
}

void sub_2614B3ADC()
{
  type metadata accessor for VARequestContext(0);
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  unint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
  unint64_t v3 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))();
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (v4) {
    sub_2613FC478(v5);
  }
  else {
    __break(1u);
  }
}

void sub_2614B3B84()
{
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    uint64_t v1 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
    unint64_t v2 = v1();
    uint64_t v3 = OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime;
    unint64_t v4 = *(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime);
    type metadata accessor for VARequestContext(0);
    unint64_t v5 = v1();
    if (v4 >= v2)
    {
      BOOL v7 = v4 >= v5;
      unint64_t v9 = v4 - v5;
      if (v7)
      {
        sub_2613FC478(v9);
        return;
      }
    }
    else
    {
      unint64_t v6 = *(void *)((char *)v0 + v3);
      BOOL v7 = v5 >= v6;
      unint64_t v8 = v5 - v6;
      if (v7)
      {
        sub_2613FC478(v8);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void sub_2614B3C6C()
{
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    uint64_t v1 = (void *)MEMORY[0x263F8EED0];
    unint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178);
    if (v2())
    {
      type metadata accessor for VARequestContext(0);
      unint64_t v3 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xE8))();
      unint64_t v4 = v2();
      BOOL v5 = v3 >= v4;
      unint64_t v6 = v3 - v4;
      if (v5) {
        sub_2613FC478(v6);
      }
      else {
        __break(1u);
      }
    }
  }
}

uint64_t sub_2614B3D4C()
{
  uint64_t v1 = sub_2614D50C8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  BOOL v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  unint64_t v8 = (char *)&v18 - v7;
  unint64_t v9 = (void *)MEMORY[0x263F8EED0];
  unint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
  if (((uint64_t (*)(uint64_t))v10)(v6) && (*(uint64_t (**)(void))((*v9 & *v0) + 0xD0))()) {
    return 1;
  }
  if (v10())
  {
    uint64_t v12 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v8, v12, v1);
    os_log_type_t v13 = sub_2614D50A8();
    os_log_type_t v14 = sub_2614D5968();
    if (!os_log_type_enabled(v13, v14))
    {
LABEL_12:

      (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
      return 0;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_2613B8000, v13, v14, "Waiting for speech end after final", v15, 2u);
LABEL_11:
    MEMORY[0x263E38060](v15, -1, -1);
    goto LABEL_12;
  }
  uint64_t result = (*(uint64_t (**)(void))((*v9 & *v0) + 0xD0))();
  if (!result) {
    return result;
  }
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    uint64_t v16 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v16, v1);
    os_log_type_t v13 = sub_2614D50A8();
    os_log_type_t v17 = sub_2614D5968();
    if (!os_log_type_enabled(v13, v17))
    {
      unint64_t v8 = v5;
      goto LABEL_12;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_2613B8000, v13, v17, "Waiting for final after speech end", v15, 2u);
    unint64_t v8 = v5;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_2614B401C()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))())
  {
    sub_2613C23AC(&qword_26A914CA8);
    sub_2614D57F8();
    swift_release();
  }
  (*(void (**)(void))((*v1 & *v0) + 0x1B0))(0);
  uint64_t v2 = (void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
  swift_beginAccess();
  *uint64_t v2 = 0;
  uint64_t v3 = (void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame);
  swift_beginAccess();
  *uint64_t v3 = 0;
  uint64_t v4 = (void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  swift_beginAccess();
  *uint64_t v4 = 0;
  BOOL v5 = (void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame);
  swift_beginAccess();
  *BOOL v5 = 0;
  *(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime) = 0;
  uint64_t v6 = (void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v6 = 0;
  *(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime) = 0;
  *(void *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_keywordTime) = 0;
  return result;
}

unint64_t sub_2614B41D0()
{
  sub_2613C23AC(&qword_26A915EF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81D0;
  *(void *)(inited + 32) = 0xD00000000000001BLL;
  *(void *)(inited + 40) = 0x80000002614E7C50;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  *(double *)(inited + 48) = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x238))();
  *(void *)(inited + 56) = 0xD000000000000015;
  *(void *)(inited + 64) = 0x80000002614E7C70;
  *(double *)(inited + 72) = (*(double (**)(void))((*v2 & *v0) + 0x228))();
  *(void *)(inited + 80) = 0x6420686365657073;
  *(void *)(inited + 88) = 0xEF6E6F6974617275;
  *(double *)(inited + 96) = (*(double (**)(void))((*v2 & *v0) + 0x240))();
  *(void *)(inited + 104) = 0xD000000000000015;
  *(void *)(inited + 112) = 0x80000002614E7C90;
  *(double *)(inited + 120) = (*(double (**)(void))((*v2 & *v0) + 0x248))();
  *(void *)(inited + 128) = 0xD000000000000019;
  *(void *)(inited + 136) = 0x80000002614E7CB0;
  *(double *)(inited + 144) = (*(double (**)(void))((*v2 & *v0) + 0x250))();
  *(void *)(inited + 152) = 0xD000000000000013;
  *(void *)(inited + 160) = 0x80000002614E7CD0;
  *(double *)(inited + 168) = (*(double (**)(void))((*v2 & *v0) + 0x230))();
  return sub_2614B4464(inited);
}

unint64_t sub_2614B4464(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_2613C23AC(&qword_26A915F00);
  uint64_t v2 = (void *)sub_2614D5DD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_2613D8F00(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_2614B45E0()
{
  sub_2614D5C38();
  uint64_t v1 = sub_2614D54D8();
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x238))(v1);
  sub_2614D5848();
  uint64_t v3 = sub_2614D54D8();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x230))(v3);
  sub_2614D5848();
  uint64_t v4 = sub_2614D54D8();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x228))(v4);
  sub_2614D5848();
  uint64_t v5 = sub_2614D54D8();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x240))(v5);
  sub_2614D5848();
  uint64_t v6 = sub_2614D54D8();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x248))(v6);
  sub_2614D5848();
  uint64_t v7 = sub_2614D54D8();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x250))(v7);
  sub_2614D5848();
  return 0;
}

id VATimingInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VATimingInfo.init()()
{
}

id VATimingInfo.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VATimingInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2614B4A18()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2614B4A54()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_2613E3EDC;
  return sub_2614B2A00((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_2614B4AEC()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_2614B4B2C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_2613F49F0;
  return sub_2614B34CC((uint64_t)v3, v4, v5, v2);
}

uint64_t method lookup function for VATimingInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VATimingInfo);
}

uint64_t dispatch thunk of VATimingInfo.speechStartTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of VATimingInfo.speechEndTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of VATimingInfo.finalResultTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of VATimingInfo.loopStartTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of VATimingInfo.setLoopStartTime(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of VATimingInfo.setKeyword(text:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of VATimingInfo.setPartialAsFinal(partial:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VATimingInfo.setToken(text:isFinal:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VATimingInfo.speechStarted(frame:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VATimingInfo.speechStarted(time:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of VATimingInfo.speechEnded(time:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VATimingInfo.gotAnyResults()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VATimingInfo.speechEnded(frame:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VATimingInfo.speechStartToFinal()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VATimingInfo.speechEndToFinal()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VATimingInfo.speechStartToFirstToken()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of VATimingInfo.speechDuration()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of VATimingInfo.lastPartialToFinal()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of VATimingInfo.partialAsFinalToFinal()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of VATimingInfo.reset()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of VATimingInfo.logs()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x270))();
}

uint64_t sub_2614B50B4()
{
  return 20;
}

uint64_t static VAA2AVerifierModelV2.maxEnrollments.getter()
{
  return 20;
}

uint64_t VAA2AVerifierModelV2.__allocating_init(computeUnits:)(unsigned __int8 *a1)
{
  return VAA2AVerifierModelV2.init(computeUnits:)(a1);
}

uint64_t VAA2AVerifierModelV2.init(computeUnits:)(unsigned __int8 *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *a1;
  uint64_t v9 = MEMORY[0x263F8EE78];
  v3[3] = MEMORY[0x263F8EE78];
  v3[4] = v9;
  v3[5] = v9;
  v3[6] = v9;
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  swift_retain();
  sub_2614D5C38();
  sub_2614D54D8();
  char v18 = v8;
  sub_2614D5D48();
  type metadata accessor for VALog();
  sub_2614D54D8();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v16, v17, (uint64_t)v7);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D90]), sel_init);
  uint64_t v11 = v10;
  if (v8) {
    uint64_t v12 = 3;
  }
  else {
    uint64_t v12 = 0;
  }
  objc_msgSend(v10, sel_setComputeUnits_, v12);
  type metadata accessor for quant_verifier_aa_fp32();
  id v13 = v11;
  uint64_t v14 = sub_26144D168(v13);
  if (v2)
  {

    sub_2614506D0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VASignpostInterval);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for VAA2AVerifierModelV2();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    v3[2] = v14;
    swift_release();
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_2614506D0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VASignpostInterval);
    return sub_26141BF74();
  }
}

uint64_t type metadata accessor for VAA2AVerifierModelV2()
{
  return self;
}

uint64_t sub_2614B539C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v84 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v85 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v63 - v7;
  uint64_t v68 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  int v76 = *((unsigned __int8 *)a1 + 12);
  int v75 = *((unsigned __int8 *)a1 + 13);
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  int v12 = *((unsigned __int8 *)a1 + 32);
  uint64_t v13 = a1[5];
  int v82 = *((unsigned __int8 *)a1 + 48);
  int v74 = *((unsigned __int8 *)a1 + 49);
  int v14 = *((_DWORD *)a1 + 13);
  int v73 = *((unsigned __int8 *)a1 + 56);
  uint64_t v81 = a1[8];
  uint64_t v80 = a1[9];
  int v79 = *((unsigned __int8 *)a1 + 80);
  int v78 = *((unsigned __int8 *)a1 + 81);
  int v77 = *((unsigned __int8 *)a1 + 82);
  int v72 = *((unsigned __int8 *)a1 + 83);
  int v71 = *((unsigned __int8 *)a1 + 84);
  int v70 = *((unsigned __int8 *)a1 + 85);
  int v69 = *((unsigned __int8 *)a1 + 86);
  uint64_t v91 = v68;
  int v92 = v9;
  char v93 = v76;
  char v94 = v75;
  uint64_t v95 = v10;
  uint64_t v96 = v11;
  char v97 = v12;
  uint64_t v98 = v13;
  char v99 = v82;
  char v100 = v74;
  int v101 = v14;
  char v102 = v73;
  uint64_t v103 = v81;
  uint64_t v104 = v80;
  char v105 = v79;
  char v106 = v78;
  char v107 = v77;
  char v108 = v72;
  char v109 = v71;
  char v110 = v70;
  char v111 = v69;
  uint64_t v15 = *(void *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v16 = v15;
  uint64_t v17 = v68;
  uint64_t v18 = sub_2613D1BF8((uint64_t)&unk_270D59948, v16);
  (*(void (**)(uint64_t))(*(void *)v1 + 264))(v18);
  (*(void (**)(void))(*(void *)v1 + 216))(MEMORY[0x263F8EE78]);
  uint64_t v91 = v17;
  int v92 = v9;
  char v93 = v76;
  char v94 = v75;
  uint64_t v67 = v10;
  uint64_t v95 = v10;
  uint64_t v96 = v11;
  uint64_t v66 = v11;
  int v65 = v12;
  char v97 = v12;
  uint64_t v64 = v13;
  uint64_t v98 = v13;
  char v99 = v82;
  char v100 = v74;
  int v101 = v14;
  char v102 = v73;
  uint64_t v103 = v81;
  uint64_t v104 = v80;
  char v105 = v79;
  char v106 = v78;
  char v107 = v77;
  char v108 = v72;
  char v109 = v71;
  char v110 = v70;
  char v111 = v69;
  uint64_t result = VARuntimeParameters.keywordsNoThresholds.getter();
  uint64_t v20 = result;
  uint64_t v90 = *(void *)(result + 16);
  if (v90)
  {
    unint64_t v21 = 0;
    unsigned __int8 v22 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 232);
    uint64_t v87 = *(void *)v1 + 232;
    uint64_t v88 = v22;
    uint64_t v86 = result + 32;
    uint64_t v112 = v1;
    uint64_t v83 = result;
    while (v21 < *(void *)(v20 + 16))
    {
      uint64_t v23 = (uint64_t *)(v86 + 16 * v21);
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      uint64_t v26 = swift_bridgeObjectRetain();
      uint64_t v27 = v88(v26);
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        unint64_t v89 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
        uint64_t v29 = v27 + v89;
        uint64_t v30 = *(void *)(v84 + 72);
        while (1)
        {
          sub_26145066C(v29, (uint64_t)v8);
          uint64_t v31 = &v8[*(int *)(v4 + 24)];
          BOOL v32 = *(void *)v31 == v24 && *((void *)v31 + 1) == v25;
          if (v32 || (sub_2614D5FB8() & 1) != 0) {
            break;
          }
          sub_2614506D0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
          v29 += v30;
          if (!--v28)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v2 = v112;
            goto LABEL_20;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_26145066C((uint64_t)v8, v85);
        uint64_t v33 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v112 + 224))(&v91);
        uint64_t v35 = v34;
        unint64_t v36 = *v34;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v35 = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v36 = sub_261451E2C(0, *(void *)(v36 + 16) + 1, 1, v36);
          *uint64_t v35 = v36;
        }
        unint64_t v39 = *(void *)(v36 + 16);
        unint64_t v38 = *(void *)(v36 + 24);
        if (v39 >= v38 >> 1)
        {
          unint64_t v36 = sub_261451E2C(v38 > 1, v39 + 1, 1, v36);
          *uint64_t v35 = v36;
        }
        uint64_t v2 = v112;
        *(void *)(v36 + 16) = v39 + 1;
        sub_261452094(v85, v36 + v89 + v39 * v30);
        v33(&v91, 0);
        uint64_t result = sub_2614506D0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
LABEL_20:
        uint64_t v20 = v83;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      if (++v21 == v90)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = v68;
        uint64_t v40 = v67;
        uint64_t v41 = v66;
        char v42 = v65;
        uint64_t v43 = v64;
        char v44 = v82;
        uint64_t v45 = v81;
        uint64_t v46 = v80;
        char v47 = v79;
        char v48 = v78;
        char v49 = v77;
        char v50 = v76;
        char v51 = v75;
        char v52 = v74;
        char v53 = v73;
        char v54 = v72;
        char v55 = v71;
        char v56 = v70;
        char v57 = v69;
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = v67;
    uint64_t v41 = v66;
    char v42 = v65;
    uint64_t v43 = v64;
    char v44 = v82;
    uint64_t v45 = v81;
    uint64_t v46 = v80;
    char v47 = v79;
    char v48 = v78;
    char v49 = v77;
    char v50 = v76;
    char v51 = v75;
    char v52 = v74;
    char v53 = v73;
    char v54 = v72;
    char v55 = v71;
    char v56 = v70;
    char v57 = v69;
LABEL_23:
    uint64_t v91 = v17;
    int v92 = v9;
    char v93 = v50;
    char v94 = v51;
    uint64_t v95 = v40;
    uint64_t v96 = v41;
    char v97 = v42;
    uint64_t v98 = v43;
    char v99 = v44;
    char v100 = v52;
    int v101 = v14;
    char v102 = v53;
    uint64_t v103 = v45;
    uint64_t v104 = v46;
    char v105 = v47;
    char v106 = v48;
    char v107 = v49;
    char v108 = v54;
    char v109 = v55;
    char v110 = v56;
    char v111 = v57;
    uint64_t v58 = *(void *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
    uint64_t v59 = swift_bridgeObjectRelease();
    uint64_t v60 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 208))(v59) + 16);
    uint64_t v61 = swift_bridgeObjectRelease();
    if (v58 == v60)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 304))(v61);
    }
    else
    {
      sub_2613DC2B8();
      swift_allocError();
      void *v62 = 0xD00000000000003CLL;
      v62[1] = 0x80000002614E4A50;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_2614B5BCC()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v0 + 192))(MEMORY[0x263F8EE78]);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 208))(v7);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (void (**)(char *))(*(void *)v0 + 296);
    unint64_t v21 = *v10;
    uint64_t v11 = v8 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v12 = *(void *)(v4 + 72);
    v17[1] = v8;
    uint64_t v18 = v12;
    uint64_t v19 = v10;
    while (1)
    {
      sub_26145066C(v11, (uint64_t)v6);
      v21(v6);
      if (v1) {
        break;
      }
      uint64_t v13 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v2 + 200))(v20);
      uint64_t v15 = v14;
      MEMORY[0x263E36760]();
      if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2614D5698();
      }
      sub_2614D56E8();
      sub_2614D5678();
      v13(v20, 0);
      sub_2614506D0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
      v11 += v18;
      if (!--v9) {
        return swift_bridgeObjectRelease();
      }
    }
    sub_2614506D0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2614B5E38(unint64_t a1, char a2)
{
  uint64_t v6 = sub_2614D50C8();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_2614D5D98();
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_2614D5D98();
      unint64_t v8 = swift_bridgeObjectRelease();
      if (v11 >= 2) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
      if (v11 >= 2)
      {
LABEL_4:
        sub_2613DC2B8();
        swift_allocError();
        unint64_t v13 = 0xD00000000000001FLL;
        int v14 = "Did not expect multiple buffers";
LABEL_19:
        *uint64_t v12 = v13;
        v12[1] = (unint64_t)(v14 - 32) | 0x8000000000000000;
        swift_willThrow();
        return v2;
      }
LABEL_7:
      if ((a1 & 0xC000000000000001) != 0)
      {
        MEMORY[0x263E36D80](0, a1);
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_27;
        }
        swift_unknownObjectRetain();
      }
      type metadata accessor for VAFeatureExtractingEncoderOutput();
      uint64_t v16 = swift_dynamicCastClass();
      if (!v16)
      {
        swift_unknownObjectRelease();
        sub_2613DC2B8();
        swift_allocError();
        unint64_t v13 = 0xD000000000000018;
        int v14 = "Unexpected type of input";
        goto LABEL_19;
      }
      uint64_t v11 = v16;
      if ((*(unsigned char *)(v16 + 16) & 1) == 0) {
        goto LABEL_31;
      }
      unint64_t v8 = (*(uint64_t (**)(void))(*(void *)v2 + 184))();
      if (!(v8 >> 62))
      {
        uint64_t v17 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v18 = swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_14;
        }
LABEL_28:
        uint64_t v27 = sub_26146718C();
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v27, v6);
        uint64_t v28 = sub_2614D50A8();
        os_log_type_t v29 = sub_2614D5978();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v30 = 0;
          _os_log_impl(&dword_2613B8000, v28, v29, "No enrollments set for this model", v30, 2u);
          MEMORY[0x263E38060](v30, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_31:
        type metadata accessor for VAResultGeneratorInput();
        char v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        goto LABEL_32;
      }
LABEL_27:
      v32[1] = v8;
      uint64_t v26 = sub_2614D5D98();
      uint64_t v18 = swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_14:
        if (a2)
        {
          uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 256))(v18);
LABEL_16:
          type metadata accessor for VAResultGeneratorInput();
          uint64_t v19 = *(void *)(v11 + 32);
          swift_bridgeObjectRetain();
          char v20 = 1;
          uint64_t v21 = v2;
          uint64_t v22 = v19;
LABEL_32:
          uint64_t v2 = VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(v20, v21, v22);
          swift_unknownObjectRelease();
          return v2;
        }
        if (*(void *)(v11 + 40))
        {
          uint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 328);
          uint64_t v24 = swift_bridgeObjectRetain();
          uint64_t v2 = v23(v24);
          swift_bridgeObjectRelease();
          if (!v3) {
            goto LABEL_16;
          }
        }
        else
        {
          sub_2613DC2B8();
          swift_allocError();
          *uint64_t v25 = 0xD00000000000001ELL;
          v25[1] = 0x80000002614E35C0;
          swift_willThrow();
        }
        swift_unknownObjectRelease();
        return v2;
      }
      goto LABEL_28;
    }
  }
  type metadata accessor for VAResultGeneratorInput();
  return VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(0, 0, 0);
}

uint64_t sub_2614B62BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 312))(a1, a2);
  if (!v4)
  {
    uint64_t v13 = result;
    if (*(unsigned char *)(result + 16))
    {
      uint64_t v50 = 0;
      char v51 = a3;
      uint64_t v14 = *(void *)((*(uint64_t (**)(void))(*(void *)v3 + 208))() + 16);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v57 = v14;
      if (v14)
      {
        char v52 = v11;
        unint64_t v15 = 0;
        uint64_t v59 = (void *)MEMORY[0x263F8EE78];
        uint64_t v55 = v13;
        uint64_t v56 = v3;
        uint64_t v53 = v9;
        uint64_t v54 = v8;
        while (1)
        {
          uint64_t v16 = *(void *)(v13 + 24);
          if (!v16) {
            break;
          }
          if (v15 >= *(void *)(v16 + 16))
          {
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            break;
          }
          uint64_t v17 = *(void *)(v16 + 8 * v15 + 32);
          uint64_t v18 = *(void *)(v17 + 16);
          if (!v18) {
            goto LABEL_25;
          }
          float v19 = *(float *)(v17 + 32);
          uint64_t v20 = v18 - 1;
          if (v20)
          {
            uint64_t v21 = (float *)(v17 + 36);
            do
            {
              float v22 = *v21++;
              float v23 = v22;
              if (v19 < v22) {
                float v19 = v23;
              }
              --v20;
            }
            while (v20);
          }
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 232))(result);
          if (v15 >= *(void *)(result + 16)) {
            goto LABEL_26;
          }
          uint64_t v24 = (uint64_t)v52;
          sub_26145066C(result+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v15, (uint64_t)v52);
          swift_bridgeObjectRelease();
          uint64_t v25 = (uint64_t *)(v24 + *(int *)(v8 + 24));
          uint64_t v27 = *v25;
          uint64_t v26 = v25[1];
          swift_bridgeObjectRetain();
          sub_2614506D0(v24, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
          double v28 = sub_26140C3F8();
          double v29 = sub_26140C3F8();
          uint64_t v30 = sub_2614967EC();
          uint64_t v31 = sub_2614967EC();
          char v32 = sub_2613D04A8();
          char v33 = sub_2613D04A8();
          char v34 = sub_2613F8710();
          sub_2614967F4(v27, v26, v30, v31, v32 & 1, v33 & 1, v34 & 1, (uint64_t)v60, v19, v28, v29);
          uint64_t v35 = v60[1];
          uint64_t v58 = v60[0];
          int v36 = v61;
          uint64_t v37 = v62;
          uint64_t v38 = v63;
          uint64_t v39 = v64;
          uint64_t v40 = v65;
          char v41 = v66;
          char v42 = v67;
          char v43 = v68;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_261416300(0, v59[2] + 1, 1, v59);
            uint64_t v59 = (void *)result;
          }
          unint64_t v45 = v59[2];
          unint64_t v44 = v59[3];
          if (v45 >= v44 >> 1)
          {
            uint64_t result = (uint64_t)sub_261416300((void *)(v44 > 1), v45 + 1, 1, v59);
            uint64_t v59 = (void *)result;
          }
          ++v15;
          uint64_t v47 = v58;
          uint64_t v46 = v59;
          v59[2] = v45 + 1;
          char v48 = &v46[8 * v45];
          v48[4] = v47;
          v48[5] = v35;
          *((_DWORD *)v48 + 12) = v36;
          v48[7] = v37;
          v48[8] = v38;
          v48[9] = v39;
          v48[10] = v40;
          *((unsigned char *)v48 + 88) = v41;
          *((unsigned char *)v48 + 89) = v42;
          *((unsigned char *)v48 + 90) = v43;
          uint64_t v3 = v56;
          uint64_t v8 = v54;
          uint64_t v13 = v55;
          uint64_t v9 = v53;
          if (v15 == v57) {
            goto LABEL_22;
          }
        }
        __break(1u);
      }
      else
      {
        uint64_t v59 = (void *)MEMORY[0x263F8EE78];
LABEL_22:
        type metadata accessor for VAKeywordResult();
        uint64_t v49 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v59);
        sub_261481280(v49, v51);
        return swift_release();
      }
    }
    else
    {
      static VAVerifierModelOutput.none.getter(a3);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_2614B66A0(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_2613C23AC(&qword_26A915200);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2614DA520;
  sub_2614095F0();
  *(void *)(v5 + 32) = sub_2614D5A78();
  sub_2614D5678();
  id v6 = objc_allocWithZone(MEMORY[0x263F00DB0]);
  id v7 = sub_26141AF88(v5, 65568);
  if (!v2)
  {
    unint64_t v8 = (unint64_t)v7;
    uint64_t v9 = (void *)sub_2614D5A78();
    objc_msgSend((id)v8, sel_setObject_atIndexedSubscript_, v9, 0);

    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_2614DA520;
    *(void *)(v10 + 32) = sub_2614D5A78();
    sub_2614D5678();
    id v11 = objc_allocWithZone(MEMORY[0x263F00DB0]);
    id v13 = sub_26141AF88(v10, 65568);
    uint64_t v14 = (void *)sub_2614D5A78();
    objc_msgSend(v13, sel_setObject_atIndexedSubscript_, v14, 0);

    char v48 = *(uint64_t (**)(void))(*(void *)v3 + 184);
    unint64_t v15 = v48();
    if (v15 >> 62) {
      goto LABEL_22;
    }
    for (uint64_t i = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = sub_2614D5D98())
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = sub_2613D1BF8(MEMORY[0x263F8EE78], i);
      unint64_t v17 = ((uint64_t (*)(uint64_t))v48)(v5);
      uint64_t v45 = a1;
      uint64_t v46 = v3;
      if (v17 >> 62)
      {
        uint64_t v18 = sub_2614D5D98();
        swift_bridgeObjectRelease();
        if (v18 < 0) {
          __break(1u);
        }
        if (!v18)
        {
LABEL_26:

          return v5;
        }
      }
      else
      {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
        if (!v18) {
          goto LABEL_26;
        }
      }
      uint64_t v47 = (void *)v8;
      type metadata accessor for quant_verifier_aa_fp32Input();
      unint64_t v8 = 0;
      char v43 = (void *)v18;
      id v44 = v13;
      while (v18 != v8)
      {
        sub_2614B6FF8(a1);
        uint64_t v20 = v19;
        uint64_t v21 = ((uint64_t (*)(uint64_t))v48)(v19);
        if ((v21 & 0xC000000000000001) != 0)
        {
          id v22 = (id)MEMORY[0x263E36D80](v8, v21);
        }
        else
        {
          if (v8 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_20;
          }
          id v22 = *(id *)(v21 + 8 * v8 + 32);
        }
        uint64_t v23 = (uint64_t)v22;
        swift_bridgeObjectRelease();
        id v24 = v47;
        id v41 = v13;
        char v42 = v24;
        uint64_t v25 = sub_26142E588(v20, v23, (uint64_t)v24, (uint64_t)v41);
        uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v3 + 160))();
        uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v26 + 136))(v25);
        swift_release();
        sub_2613C23AC(&qword_26A914AC0);
        a1 = swift_allocObject();
        *(_OWORD *)(a1 + 16) = xmmword_2614D8210;
        uint64_t v49 = (void *)v5;
        double v28 = *(uint64_t (**)(void))(*(void *)v27 + 88);
        double v29 = (void *)v28();
        id v30 = objc_msgSend(v29, sel_objectAtIndexedSubscript_, 0);

        objc_msgSend(v30, sel_floatValue);
        int v32 = v31;

        *(_DWORD *)(a1 + 32) = v32;
        char v33 = (void *)v28();
        id v34 = objc_msgSend(v33, sel_objectAtIndexedSubscript_, 1);

        objc_msgSend(v34, sel_floatValue);
        int v36 = v35;

        *(_DWORD *)(a1 + 36) = v36;
        uint64_t v37 = (void *)v28();
        uint64_t v5 = (uint64_t)v49;
        id v13 = v37;
        id v38 = objc_msgSend(v37, sel_objectAtIndexedSubscript_, 2);

        objc_msgSend(v38, sel_floatValue);
        int v40 = v39;

        *(_DWORD *)(a1 + 40) = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = (uint64_t)sub_2613D8EC8(v49);
        }
        uint64_t v3 = v46;
        if (v8 >= *(void *)(v5 + 16)) {
          goto LABEL_21;
        }
        *(void *)(v5 + 8 * v8 + 32) = a1;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        ++v8;
        id v13 = v44;
        uint64_t v18 = (uint64_t)v43;
        a1 = v45;
        if (v43 == (void *)v8)
        {

          return v5;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      ;
    }
  }
  return v5;
}

void sub_2614B6C64()
{
}

uint64_t sub_2614B6C94()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t VAA2AVerifierModelV2.deinit()
{
  uint64_t v0 = VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AVerifierModelV2.__deallocating_deinit()
{
  VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2614B6D94()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t sub_2614B6DD4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t sub_2614B6E14()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 312))();
}

uint64_t sub_2614B6E60()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAA2AVerifierModelV2.setAudioEnrollments(enrollments:)(Swift::OpaquePointer enrollments)
{
  if (*((void *)enrollments._rawValue + 2) < 0x15uLL)
  {
    uint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 240);
    uint64_t v4 = swift_bridgeObjectRetain();
    v3(v4);
  }
  else
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v2 = 0xD000000000000018;
    v2[1] = 0x80000002614E7EF0;
    swift_willThrow();
  }
}

uint64_t sub_2614B6F4C(uint64_t a1)
{
  if (*(void *)(a1 + 16) < 0x15uLL)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(**(void **)v1 + 240);
    uint64_t v5 = swift_bridgeObjectRetain();
    return v4(v5);
  }
  else
  {
    sub_2613DC2B8();
    swift_allocError();
    *uint64_t v2 = 0xD000000000000018;
    v2[1] = 0x80000002614E7EF0;
    return swift_willThrow();
  }
}

void sub_2614B6FF8(uint64_t a1)
{
  sub_2613C23AC(&qword_26A915200);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2614DA500;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(v3 + 32) = sub_2614D58B8();
  uint64_t v21 = v4;
  if (!v4)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = a1 + 32;
  *(void *)(v3 + 40) = sub_2614D58B8();
  if (!*(void *)(v6 + 16))
  {
LABEL_21:
    __break(1u);
    return;
  }
  *(void *)(v3 + 48) = sub_2614D58B8();
  sub_2614D5678();
  id v7 = objc_allocWithZone(MEMORY[0x263F00DB0]);
  id v25 = sub_26141AF88(v3, 65568);
  if (!v1)
  {
    uint64_t v8 = 0;
    uint64_t v22 = v5;
    while (1)
    {
      uint64_t v24 = *(void *)(v5 + 8 * v8);
      uint64_t v23 = *(void *)(v24 + 16);
      if (v23) {
        break;
      }
LABEL_6:
      ++v8;
      uint64_t v5 = v22;
      if (v8 == v21) {
        return;
      }
    }
    unint64_t v9 = 0;
    while (v9 < *(void *)(v24 + 16))
    {
      uint64_t v10 = *(void *)(*(void *)(v24 + 32 + 8 * v9) + 16);
      if (v10)
      {
        unint64_t v11 = 0;
        uint64_t v12 = *(void *)(v22 + 8 * v8);
        while (1)
        {
          uint64_t v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_2614DA500;
          *(void *)(v13 + 32) = sub_2614D58B8();
          *(void *)(v13 + 40) = sub_2614D58B8();
          *(void *)(v13 + 48) = sub_2614D58B8();
          sub_2614D5678();
          if (v9 >= *(void *)(v12 + 16)) {
            break;
          }
          uint64_t v14 = *(void *)(v12 + 32 + 8 * v9);
          if (v11 >= *(void *)(v14 + 16)) {
            goto LABEL_18;
          }
          unint64_t v15 = v11 + 1;
          int v16 = *(_DWORD *)(v14 + 4 * v11 + 32);
          id v17 = objc_allocWithZone(NSNumber);
          LODWORD(v18) = v16;
          id v19 = objc_msgSend(v17, sel_initWithFloat_, v18);
          sub_2614095F0();
          uint64_t v20 = (void *)sub_2614D5648();
          swift_bridgeObjectRelease();
          objc_msgSend(v25, sel_setObject_forKeyedSubscript_, v19, v20);

          unint64_t v11 = v15;
          if (v10 == v15) {
            goto LABEL_9;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
        break;
      }
LABEL_9:
      if (++v9 == v23) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
}

uint64_t method lookup function for VAA2AVerifierModelV2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AVerifierModelV2);
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.maxKeywords.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.__allocating_init(computeUnits:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.didStartListening(requestParams:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.predictScores(predictionInput:shouldSkipVerifierInference:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.predict(predictionInput:shouldSkipVerifierInference:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

VoiceActions::VAComputeUnits_optional __swiftcall VAComputeUnits.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_2614D5E08();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t VAComputeUnits.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x796C6E4F757063;
  }
}

uint64_t sub_2614B7450(char *a1, char *a2)
{
  return sub_2614B745C(*a1, *a2);
}

uint64_t sub_2614B745C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000012;
  }
  else {
    unint64_t v3 = 0x796C6E4F757063;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0x80000002614E7F50;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000012;
  }
  else {
    unint64_t v5 = 0x796C6E4F757063;
  }
  if (a2) {
    unint64_t v6 = 0x80000002614E7F50;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2614D5FB8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2614B7504()
{
  return sub_2614B750C();
}

uint64_t sub_2614B750C()
{
  return sub_2614D60B8();
}

uint64_t sub_2614B7594()
{
  return sub_2614B759C();
}

uint64_t sub_2614B759C()
{
  sub_2614D5478();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2614B760C()
{
  return sub_2614B7614();
}

uint64_t sub_2614B7614()
{
  return sub_2614D60B8();
}

VoiceActions::VAComputeUnits_optional sub_2614B7698(Swift::String *a1)
{
  return VAComputeUnits.init(rawValue:)(*a1);
}

uint64_t sub_2614B76A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VAComputeUnits.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2614B76CC()
{
  return sub_2614D5618();
}

uint64_t sub_2614B772C()
{
  return sub_2614D55F8();
}

float static VARuntimeParameters.defaultThreshold.getter()
{
  return 0.8;
}

uint64_t VARuntimeParameters.keywords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VARuntimeParameters.keywords.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*VARuntimeParameters.keywords.modify())()
{
  return nullsub_1;
}

float VARuntimeParameters.defaultThreshold.getter()
{
  return *(float *)(v0 + 8);
}

void VARuntimeParameters.defaultThreshold.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*VARuntimeParameters.defaultThreshold.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.returnKeywordAudio.getter()
{
  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t VARuntimeParameters.returnKeywordAudio.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 12) = result;
  return result;
}

uint64_t (*VARuntimeParameters.returnKeywordAudio.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.verbose.getter()
{
  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t VARuntimeParameters.verbose.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 13) = result;
  return result;
}

uint64_t (*VARuntimeParameters.verbose.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.debounce.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t VARuntimeParameters.debounce.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 16) = result;
  *(void *)(v3 + 24) = a2;
  *(unsigned char *)(v3 + 32) = a3 & 1;
  return result;
}

uint64_t (*VARuntimeParameters.debounce.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.maximumBufferSamples.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t VARuntimeParameters.maximumBufferSamples.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*VARuntimeParameters.maximumBufferSamples.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.stopWhenEmpty.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t VARuntimeParameters.stopWhenEmpty.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 49) = result;
  return result;
}

uint64_t (*VARuntimeParameters.stopWhenEmpty.modify())()
{
  return nullsub_1;
}

float VARuntimeParameters.minimumSilenceProbability.getter()
{
  return *(float *)(v0 + 52);
}

void VARuntimeParameters.minimumSilenceProbability.setter(float a1)
{
  *(float *)(v1 + 52) = a1;
}

uint64_t (*VARuntimeParameters.minimumSilenceProbability.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.runInferenceOnlyWhenSpeechActive.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t VARuntimeParameters.runInferenceOnlyWhenSpeechActive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

uint64_t (*VARuntimeParameters.runInferenceOnlyWhenSpeechActive.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.extraTasrBias.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VARuntimeParameters.extraTasrBias.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*VARuntimeParameters.extraTasrBias.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.preSilenceCheckOverride.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t VARuntimeParameters.preSilenceCheckOverride.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t (*VARuntimeParameters.preSilenceCheckOverride.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.postSilenceCheckOverride.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t VARuntimeParameters.postSilenceCheckOverride.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 81) = result;
  return result;
}

uint64_t (*VARuntimeParameters.postSilenceCheckOverride.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.duringSpeechCheckOverride.getter()
{
  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t VARuntimeParameters.duringSpeechCheckOverride.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 82) = result;
  return result;
}

uint64_t (*VARuntimeParameters.duringSpeechCheckOverride.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.saveKeywordAudio.getter()
{
  return *(unsigned __int8 *)(v0 + 83);
}

uint64_t VARuntimeParameters.saveKeywordAudio.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 83) = result;
  return result;
}

uint64_t (*VARuntimeParameters.saveKeywordAudio.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.returnAudioForTasrFinalResult.getter()
{
  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t VARuntimeParameters.returnAudioForTasrFinalResult.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 84) = result;
  return result;
}

uint64_t (*VARuntimeParameters.returnAudioForTasrFinalResult.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.usePartialResultsForKeywordDetection.getter()
{
  return *(unsigned __int8 *)(v0 + 85);
}

uint64_t VARuntimeParameters.usePartialResultsForKeywordDetection.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 85) = result;
  return result;
}

uint64_t (*VARuntimeParameters.usePartialResultsForKeywordDetection.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.blockModelInference.getter()
{
  return *(unsigned __int8 *)(v0 + 86);
}

uint64_t VARuntimeParameters.blockModelInference.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 86) = result;
  return result;
}

uint64_t (*VARuntimeParameters.blockModelInference.modify())()
{
  return nullsub_1;
}

void VARuntimeParameters.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 8) = 1061997773;
  *(_WORD *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 52) = 1050253722;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 514;
  *(unsigned char *)(a1 + 82) = 2;
  *(_DWORD *)(a1 + 83) = 0;
}

uint64_t sub_2614B7BAC()
{
  uint64_t v0 = sub_2614D4B78();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  unint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  char v7 = (char *)&v16 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v16 - v12;
  sub_2613CC63C(v11, qword_26A91F8E8);
  sub_2613C2624(v0, (uint64_t)qword_26A91F8E8);
  sub_2614D4B28();
  sub_2614D4B18();
  sub_2614D4B48();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v7, v0);
  v14(v10, v0);
  sub_2614D4B08();
  sub_2614D4B48();
  v14(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, v0);
}

uint64_t static VARuntimeParameters.allowedCharacterSet.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A91F8E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_2614D4B78();
  uint64_t v3 = sub_2613C2624(v2, (uint64_t)qword_26A91F8E8);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t static VARuntimeParameters.isValidKeyword(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_2614D4B78();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  uint64_t v25 = 58;
  unint64_t v26 = 0xE100000000000000;
  sub_2613DC3BC();
  uint64_t v9 = sub_2614D5BD8();
  if (v9)
  {
    uint64_t v27 = 58;
    unint64_t v28 = 0xE100000000000000;
    MEMORY[0x270FA5388](v9);
    *(&v22 - 2) = (uint64_t)&v27;
    swift_bridgeObjectRetain();
    if (*(void *)(sub_2613D7D10(1, 0, sub_261422840, (uint64_t)(&v22 - 4), a1, a2) + 16) < 2uLL)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      swift_once();
      goto LABEL_14;
    }
    uint64_t v23 = v7;
    uint64_t v24 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v7 = v23;
    uint64_t v9 = sub_2614D5888();
    if ((v9 & 0x100000000) != 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v27 = 58;
  unint64_t v28 = 0xE100000000000000;
  MEMORY[0x270FA5388](v9);
  *(&v22 - 2) = (uint64_t)&v27;
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)sub_2613D7D10(0x7FFFFFFFFFFFFFFFLL, 1, sub_261422840, (uint64_t)(&v22 - 4), a1, a2);
  if (!v10[2])
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = v10[4];
  uint64_t v12 = v10[5];
  uint64_t v13 = v10[6];
  uint64_t v14 = v10[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = MEMORY[0x263E36570](v11, v12, v13, v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v27 = v15;
  unint64_t v28 = v17;
  if (qword_26A91F8E0 != -1) {
    goto LABEL_20;
  }
LABEL_14:
  sub_2613C2624(v4, (uint64_t)qword_26A91F8E8);
  sub_2614D4B58();
  sub_2614D5B98();
  uint64_t v20 = v19 & 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t VARuntimeParameters.keywordsToThresholds.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE80];
  }
  int v3 = v0[2];
  swift_bridgeObjectRetain();
  unint64_t v54 = sub_2613DC3BC();
  uint64_t v52 = v1;
  uint64_t v4 = (unint64_t *)(v1 + 40);
  uint64_t v5 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    uint64_t v7 = *(v4 - 1);
    unint64_t v6 = *v4;
    uint64_t v57 = v7;
    uint64_t v58 = v6;
    v56[0] = 58;
    v56[1] = 0xE100000000000000;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_2614D5BD8();
    if (v8) {
      break;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v57 = (uint64_t)v5;
    unint64_t v30 = sub_2613D8F00(v7, v6);
    uint64_t v31 = v5[2];
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      goto LABEL_45;
    }
    char v34 = v29;
    if (v5[3] >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_26149AD80();
      }
    }
    else
    {
      sub_26149AA78(v33, isUniquelyReferenced_nonNull_native);
      unint64_t v35 = sub_2613D8F00(v7, v6);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_48;
      }
      unint64_t v30 = v35;
    }
    uint64_t v5 = (void *)v57;
    if (v34)
    {
      *(_DWORD *)(*(void *)(v57 + 56) + 4 * v30) = v3;
    }
    else
    {
      *(void *)(v57 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v37 = (uint64_t *)(v5[6] + 16 * v30);
      *uint64_t v37 = v7;
      v37[1] = v6;
      *(_DWORD *)(v5[7] + 4 * v30) = v3;
      uint64_t v38 = v5[2];
      BOOL v39 = __OFADD__(v38, 1);
      uint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_47;
      }
      uint64_t v5[2] = v40;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v4 += 2;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v5;
    }
  }
  uint64_t v53 = v2;
  uint64_t v57 = 58;
  uint64_t v58 = 0xE100000000000000;
  MEMORY[0x270FA5388](v8);
  char v51 = &v57;
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)sub_2613D7D10(0x7FFFFFFFFFFFFFFFLL, 1, sub_261422840, (uint64_t)&v50, v7, v6);
  swift_bridgeObjectRelease();
  if (v9[2])
  {
    uint64_t v10 = v9[4];
    uint64_t v11 = v9[5];
    uint64_t v12 = v9[6];
    uint64_t v13 = v9[7];
    swift_bridgeObjectRetain();
    uint64_t v14 = MEMORY[0x263E36570](v10, v11, v12, v13);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (v9[2] < 2uLL) {
      goto LABEL_46;
    }
    uint64_t v17 = v9[8];
    uint64_t v18 = v9[9];
    uint64_t v20 = v9[10];
    uint64_t v19 = v9[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263E36570](v17, v18, v20, v19);
    uint64_t v23 = v22;
    uint64_t v24 = swift_bridgeObjectRelease();
    LODWORD(v56[0]) = 0;
    uint64_t v25 = MEMORY[0x270FA5388](v24);
    char v51 = v56;
    if ((v23 & 0x1000000000000000) != 0 || !(v23 & 0x2000000000000000 | v21 & 0x1000000000000000))
    {
      sub_2614D5C28();
    }
    else
    {
      MEMORY[0x270FA5388](v25);
      if ((v23 & 0x2000000000000000) != 0)
      {
        uint64_t v57 = v21;
        uint64_t v58 = v23 & 0xFFFFFFFFFFFFFFLL;
        BOOL v42 = (v21 > 0x20u || ((0x100003E01uLL >> v21) & 1) == 0)
           && (id v41 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
           && *v41 == 0;
        char v55 = v42;
        swift_bridgeObjectRelease();
LABEL_31:
        uint64_t v2 = v53;
        if (v55)
        {
          float v43 = *(float *)v56;
          char v44 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v57 = (uint64_t)v5;
          sub_2614A4444(v14, v16, v44, v43);
          uint64_t v5 = (void *)v57;
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v45 = sub_2613D8F00(v14, v16);
          char v47 = v46;
          swift_bridgeObjectRelease();
          if ((v47 & 1) == 0)
          {
LABEL_38:
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
          char v48 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v57 = (uint64_t)v5;
          if ((v48 & 1) == 0)
          {
            sub_26149AD80();
            uint64_t v5 = (void *)v57;
          }
          swift_bridgeObjectRelease();
          sub_2614B9BE0(v45, (uint64_t)v5);
        }
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      if ((v21 & 0x1000000000000000) != 0)
      {
        uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v27 = v21 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v26 = sub_2614D5C98();
      }
      char v55 = sub_2614B9EA8(v26, v27, (void (*)(uint64_t *__return_ptr))sub_2614B9F78) & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t result = sub_2614D5FF8();
  __break(1u);
  return result;
}

uint64_t VARuntimeParameters.keywordsNoThresholds.getter()
{
  int v1 = *(_DWORD *)(v0 + 8);
  char v2 = *(unsigned char *)(v0 + 12);
  char v3 = *(unsigned char *)(v0 + 13);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(unsigned char *)(v0 + 48);
  char v7 = *(unsigned char *)(v0 + 49);
  int v8 = *(_DWORD *)(v0 + 52);
  char v9 = *(unsigned char *)(v0 + 56);
  __int16 v10 = *(_WORD *)(v0 + 80);
  char v11 = *(unsigned char *)(v0 + 82);
  char v12 = *(unsigned char *)(v0 + 83);
  char v13 = *(unsigned char *)(v0 + 84);
  char v14 = *(unsigned char *)(v0 + 85);
  char v15 = *(unsigned char *)(v0 + 86);
  uint64_t v19 = *(void **)v0;
  int v20 = v1;
  char v21 = v2;
  char v22 = v3;
  long long v23 = *(_OWORD *)(v0 + 16);
  char v24 = v4;
  uint64_t v25 = v5;
  char v26 = v6;
  char v27 = v7;
  int v28 = v8;
  char v29 = v9;
  long long v30 = *(_OWORD *)(v0 + 64);
  __int16 v31 = v10;
  char v32 = v11;
  char v33 = v12;
  char v34 = v13;
  char v35 = v14;
  char v36 = v15;
  uint64_t v16 = VARuntimeParameters.keywordsToThresholds.getter();
  uint64_t v17 = sub_2614B9DB8(v16, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_26149B048);
  swift_bridgeObjectRelease();
  uint64_t v19 = v17;
  swift_retain();
  sub_26142D288((uint64_t *)&v19);
  swift_release();
  return (uint64_t)v19;
}

uint64_t VARuntimeParameters.allKeywordsAreValid.getter()
{
  uint64_t v26 = sub_2614D4B78();
  MEMORY[0x270FA5388](v26);
  uint64_t v25 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = *(void *)(*(void *)v0 + 16);
  if (!v3) {
    return 1;
  }
  char v24 = (void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v23 = swift_bridgeObjectRetain();
  for (uint64_t i = (unint64_t *)(v23 + 40); ; i += 2)
  {
    uint64_t v5 = *(i - 1);
    unint64_t v6 = *i;
    uint64_t v7 = HIBYTE(*i) & 0xF;
    if ((*i & 0x2000000000000000) == 0) {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7) {
      goto LABEL_22;
    }
    uint64_t v30 = *(i - 1);
    unint64_t v31 = v6;
    uint64_t v28 = 58;
    unint64_t v29 = 0xE100000000000000;
    unint64_t v8 = sub_2613DC3BC();
    swift_bridgeObjectRetain();
    unint64_t v27 = v8;
    uint64_t v9 = sub_2614D5BD8();
    if (v9)
    {
      uint64_t v30 = 58;
      unint64_t v31 = 0xE100000000000000;
      MEMORY[0x270FA5388](v9);
      *(&v23 - 2) = (uint64_t)&v30;
      swift_bridgeObjectRetain();
      uint64_t result = sub_2613D7D10(1, 0, sub_261422840, (uint64_t)(&v23 - 4), v5, v6);
      if (*(void *)(result + 16) < 2uLL) {
        goto LABEL_24;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v9 = sub_2614D5888();
      if ((v9 & 0x100000000) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    uint64_t v30 = 58;
    unint64_t v31 = 0xE100000000000000;
    MEMORY[0x270FA5388](v9);
    *(&v23 - 2) = (uint64_t)&v30;
    swift_bridgeObjectRetain();
    uint64_t result = sub_2613D7D10(0x7FFFFFFFFFFFFFFFLL, 1, sub_261422840, (uint64_t)(&v23 - 4), v5, v6);
    if (!*(void *)(result + 16)) {
      break;
    }
    uint64_t v11 = *(void *)(result + 32);
    uint64_t v12 = *(void *)(result + 40);
    uint64_t v13 = *(void *)(result + 48);
    uint64_t v14 = *(void *)(result + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x263E36570](v11, v12, v13, v14);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (!v18)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v30 = v15;
    unint64_t v31 = v17;
    if (qword_26A91F8E0 != -1) {
      swift_once();
    }
    uint64_t v19 = v26;
    sub_2613C2624(v26, (uint64_t)qword_26A91F8E8);
    int v20 = v25;
    sub_2614D4B58();
    sub_2614D5B98();
    char v22 = v21;
    (*v24)(v20, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      goto LABEL_22;
    }
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_2614B8BA8()
{
  uint64_t v40 = sub_2614D4B78();
  MEMORY[0x270FA5388](v40);
  uint64_t v3 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  if (!*(void *)(*v0 + 16)) {
    return 0;
  }
  uint64_t v38 = v1;
  uint64_t v5 = v0[8];
  unint64_t v6 = v0[9];
  *(void *)&long long v43 = v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_2613C23AC(&qword_26A914A70);
  unint64_t v39 = sub_2613DCEC0();
  sub_2614D5338();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_2614D5428();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  *(void *)&long long v43 = v8;
  *((void *)&v43 + 1) = v10;
  uint64_t v48 = 95;
  unint64_t v49 = 0xE100000000000000;
  uint64_t v46 = 32;
  unint64_t v47 = 0xE100000000000000;
  unint64_t v11 = sub_2613DC3BC();
  char v35 = (long long *)v11;
  unint64_t v36 = v11;
  uint64_t v33 = MEMORY[0x263F8D310];
  unint64_t v34 = v11;
  uint64_t v12 = sub_2614D5BB8();
  unint64_t v14 = v13;
  uint64_t v15 = swift_bridgeObjectRelease();
  uint64_t v48 = v12;
  unint64_t v49 = v14;
  if (v6)
  {
    v37[2] = v7;
    *(void *)&long long v43 = 44;
    *((void *)&v43 + 1) = 0xE100000000000000;
    MEMORY[0x270FA5388](v15);
    char v35 = &v43;
    swift_bridgeObjectRetain_n();
    uint64_t v16 = sub_2613D7D10(0x7FFFFFFFFFFFFFFFLL, 1, sub_261422840, (uint64_t)&v33, v5, v6);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v16 + 16);
    v37[1] = v16;
    if (v17)
    {
      uint64_t v18 = (void (**)(char *, uint64_t))(v38 + 8);
      uint64_t v19 = (void *)MEMORY[0x263F8EE78];
      int v20 = (uint64_t *)(v16 + 56);
      do
      {
        uint64_t v21 = *(v20 - 1);
        uint64_t v22 = *v20;
        long long v43 = *(_OWORD *)(v20 - 3);
        uint64_t v44 = v21;
        uint64_t v45 = v22;
        swift_bridgeObjectRetain();
        sub_2614D4AF8();
        sub_261422FB0();
        sub_2614D5BA8();
        (*v18)(v3, v40);
        swift_bridgeObjectRelease();
        uint64_t v23 = sub_2614D5428();
        uint64_t v25 = v24;
        swift_bridgeObjectRelease();
        *(void *)&long long v43 = v23;
        *((void *)&v43 + 1) = v25;
        uint64_t v46 = 95;
        unint64_t v47 = 0xE100000000000000;
        uint64_t v41 = 32;
        unint64_t v42 = 0xE100000000000000;
        char v35 = (long long *)v11;
        unint64_t v36 = v11;
        unint64_t v34 = v11;
        uint64_t v33 = MEMORY[0x263F8D310];
        uint64_t v26 = sub_2614D5BB8();
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = sub_2613D864C(0, v19[2] + 1, 1, v19);
        }
        unint64_t v30 = v19[2];
        unint64_t v29 = v19[3];
        if (v30 >= v29 >> 1) {
          uint64_t v19 = sub_2613D864C((void *)(v29 > 1), v30 + 1, 1, v19);
        }
        _OWORD v19[2] = v30 + 1;
        unint64_t v31 = &v19[2 * v30];
        void v31[4] = v26;
        v31[5] = v28;
        v20 += 4;
        --v17;
      }
      while (v17);
    }
    else
    {
      uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v43 = v19;
    sub_2614D5338();
    swift_bridgeObjectRelease();
    *(void *)&long long v43 = 44;
    *((void *)&v43 + 1) = 0xE100000000000000;
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    sub_2614D54D8();
    swift_bridgeObjectRelease();
    return v48;
  }
  return v12;
}

uint64_t sub_2614B8FE8()
{
  return ((v0[12] | v0[83]) | v0[84]) & 1;
}

void sub_2614B9004(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 8) = 1061997773;
  *(_WORD *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 52) = 1050253722;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 514;
  *(unsigned char *)(a1 + 82) = 2;
  *(_DWORD *)(a1 + 83) = 0;
}

uint64_t VARuntimeParametersFactoryDummy.deinit()
{
  return v0;
}

uint64_t VARuntimeParametersFactoryDummy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2614B9078()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_2614B90BC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_2614B9118(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x68);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_2614B917C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_delegate;
  swift_beginAccess();
  return MEMORY[0x263E38150](v1);
}

uint64_t sub_2614B91C8()
{
  return swift_unknownObjectRelease();
}

void (*sub_2614B9224(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x263E38150](v5);
  return sub_2613E2A50;
}

uint64_t sub_2614B92A8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_2614B9304(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & **a2) + 0x80);
  id v4 = *a1;
  return v3(v2);
}

void *sub_2614B936C()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_2614B93BC(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_2614B9410())()
{
  return j__swift_endAccess;
}

id VAKeywordSpotter.__allocating_init(delegate:configuration:)(uint64_t a1, void *a2)
{
  id v4 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit();
  uint64_t v5 = (void **)&v4[OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration];
  *(void *)&v4[OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration] = 0;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  unint64_t v6 = *v5;
  *uint64_t v5 = a2;
  id v7 = a2;

  v10.receiver = v4;
  v10.super_class = v2;
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  swift_unknownObjectRelease();

  return v8;
}

id VAKeywordSpotter.init(delegate:configuration:)(uint64_t a1, void *a2)
{
  swift_unknownObjectWeakInit();
  id v4 = (void **)&v2[OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration];
  *(void *)&v2[OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration] = 0;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  uint64_t v5 = *v4;
  *id v4 = a2;
  id v6 = a2;

  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for VAKeywordSpotter();
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  swift_unknownObjectRelease();

  return v7;
}

void *sub_2614B961C()
{
  id v2 = (void *)MEMORY[0x263F8EED0];
  id v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
  if (v3 && (uint64_t v1 = v3, v4 = (void *)(*(uint64_t (**)(void))((*v2 & *v3) + 0x98))(), v1, v4))
  {
    uint64_t v5 = (*(uint64_t (**)(void))((*v2 & *v4) + 0xB0))();
    uint64_t v1 = sub_2614B9DB8(v5, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_2614281D4);

    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2613DC2B8();
    swift_allocError();
    *id v6 = 0xD000000000000020;
    v6[1] = 0x80000002614E7230;
    swift_willThrow();
  }
  return v1;
}

uint64_t sub_2614B9764()
{
  sub_2613DC2B8();
  swift_allocError();
  *uint64_t v0 = 0xD000000000000023;
  v0[1] = 0x80000002614E7F70;
  return swift_willThrow();
}

uint64_t sub_2614B97C8()
{
  return MEMORY[0x270FA2498](sub_2614B97E4, 0, 0);
}

uint64_t sub_2614B97E4()
{
  sub_2613DC2B8();
  swift_allocError();
  *uint64_t v1 = 0xD000000000000023;
  v1[1] = 0x80000002614E7F70;
  swift_willThrow();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_2614B9888()
{
  return MEMORY[0x270FA2498](sub_2614BAA14, 0, 0);
}

uint64_t sub_2614B98A4()
{
  sub_2613DC2B8();
  swift_allocError();
  *uint64_t v0 = 0xD000000000000025;
  v0[1] = 0x80000002614E7FA0;
  return swift_willThrow();
}

id VAKeywordSpotter.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2614D50C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_26146718C();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  id v7 = sub_2614D50A8();
  os_log_type_t v8 = sub_2614D5988();
  if (os_log_type_enabled(v7, v8))
  {
    objc_super v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v9 = 0;
    _os_log_impl(&dword_2613B8000, v7, v8, "deinit VAKeywordSpotter", v9, 2u);
    MEMORY[0x263E38060](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  objc_super v10 = (void **)&v1[OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration];
  swift_beginAccess();
  unint64_t v11 = *v10;
  *objc_super v10 = 0;

  uint64_t v12 = (objc_class *)type metadata accessor for VAKeywordSpotter();
  v14.receiver = v1;
  v14.super_class = v12;
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

id VAKeywordSpotter.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VAKeywordSpotter.init()()
{
}

unint64_t sub_2614B9BE0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_2614D5C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_2614D6088();
        swift_bridgeObjectRetain();
        sub_2614D5478();
        uint64_t v9 = sub_2614D60B8();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_DWORD *)(v14 + 4 * v3);
          uint64_t v16 = (_DWORD *)(v14 + 4 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_2614B9DB8(uint64_t a1, uint64_t (*a2)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_2613C23AC(&qword_26A914AC8);
  uint64_t v5 = (void *)swift_allocObject();
  int64_t v6 = j__malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 17;
  }
  uint64_t v5[2] = v2;
  v5[3] = 2 * (v7 >> 4);
  uint64_t v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_2614288C0();
  if (v8 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v5;
}

uint64_t sub_2614B9EA8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *sub_2614B9F08@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_2614B9F78@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t type metadata accessor for VAKeywordSpotter()
{
  return self;
}

unint64_t sub_2614B9FE4()
{
  unint64_t result = qword_26A915F28;
  if (!qword_26A915F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915F28);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VAComputeUnits(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2614BA104);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAComputeUnits()
{
  return &type metadata for VAComputeUnits;
}

uint64_t destroy for VARuntimeParameters()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_WORD *)(a1 + 85) = *(_WORD *)(a2 + 85);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  return a1;
}

__n128 initializeWithTake for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 79) = *(void *)(a2 + 79);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  return a1;
}

uint64_t getEnumTagSinglePayload for VARuntimeParameters(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 87)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VARuntimeParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 86) = 0;
    *(_WORD *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 87) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 87) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VARuntimeParameters()
{
  return &type metadata for VARuntimeParameters;
}

uint64_t dispatch thunk of VARuntimeParametersFactory.makeRuntimeParameters()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for VARuntimeParametersFactoryDummy()
{
  return self;
}

uint64_t method lookup function for VARuntimeParametersFactoryDummy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VARuntimeParametersFactoryDummy);
}

uint64_t dispatch thunk of VARuntimeParametersFactoryDummy.makeRuntimeParameters()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t method lookup function for VAKeywordSpotter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAKeywordSpotter);
}

uint64_t dispatch thunk of VAKeywordSpotter.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of VAKeywordSpotter.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of VAKeywordSpotter.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of VAKeywordSpotter.configuration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of VAKeywordSpotter.configuration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VAKeywordSpotter.configuration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VAKeywordSpotter.__allocating_init(delegate:configuration:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of VAKeywordSpotter.fixedSpotterKeywordsTrainedFor()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of VAKeywordSpotter.startWithKeywords(params:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of VAKeywordSpotter.addAudio(buffer:hostTime:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of VAKeywordSpotter.addAudioAsync(buffer:hostTime:)(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = *(int **)((*MEMORY[0x263F8EED0] & *v2) + 0xB0);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *BOOL v7 = v3;
  v7[1] = sub_2613E3EDC;
  return v9(a1, a2);
}

uint64_t dispatch thunk of VAKeywordSpotter.stop()()
{
  uint64_t v2 = *(int **)((*MEMORY[0x263F8EED0] & *v0) + 0xB8);
  long long v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_2613F49F0;
  return v5();
}

uint64_t dispatch thunk of VAKeywordSpotter.makeDefaultRuntimeParams()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

ValueMetadata *type metadata accessor for VAKeywordSpotterError()
{
  return &type metadata for VAKeywordSpotterError;
}

ValueMetadata *type metadata accessor for VABufferLimitExceededError()
{
  return &type metadata for VABufferLimitExceededError;
}

uint64_t sub_2614BAA98()
{
  uint64_t v0 = sub_26142A908((uint64_t)&unk_270D59CA0);
  swift_arrayDestroy();
  return v0;
}

id sub_2614BAAE0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x61775F7475706E69 && a2 == 0xE900000000000076;
  if (!v3 && (sub_2614D5FB8() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 88))();
  id v5 = objc_msgSend(self, sel_featureValueWithMultiArray_, v4);

  return v5;
}

void sub_2614BACB8()
{
}

uint64_t sub_2614BACD0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = MEMORY[0x263F8D5C8];
  uint64_t v3 = MEMORY[0x263F00C60];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

void sub_2614BAD38()
{
}

void sub_2614BAD50()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (void *)sub_2614D5378();
  id v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  if (!v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  id v4 = objc_msgSend(v3, sel_multiArrayValue);

  if (!v4) {
LABEL_5:
  }
    __break(1u);
}

uint64_t sub_2614BADD0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 104))();
  uint64_t v2 = MEMORY[0x263F8D5C8];
  uint64_t v3 = MEMORY[0x263F00C60];
  return MEMORY[0x270EE7598](v1, v2, v3);
}

uint64_t sub_2614BAF84(void *a1, void *a2)
{
  swift_allocObject();
  uint64_t v4 = sub_2614BC314((uint64_t)a1, (uint64_t)a2);

  return v4;
}

uint64_t sub_2614BAFE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2614D4C78();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A9150A0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_2614198FC();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  uint64_t v11 = (void *)sub_2614D5378();
  uint64_t v12 = (void *)sub_2614D5378();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_2614D4C58();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2614BB218(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2614D4C78();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v18 - v11;
  (*(void (**)(uint64_t))(v1 + 88))(v10);
  uint64_t v13 = sub_261405618(0, qword_26A915340);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  id v14 = a1;
  id v15 = sub_26142AB08((uint64_t)v9, (uint64_t)v14);
  if (v2)
  {
  }
  else
  {
    id v16 = v15;

    uint64_t v13 = (*(uint64_t (**)(id))(v3 + 96))(v16);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v13;
}

uint64_t sub_2614BB3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_2614D4C78();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_2614BB4E8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_2614D4C78();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2614BB5A8, 0, 0);
}

uint64_t sub_2614BB5A8()
{
  uint64_t v6 = v0[3];
  (*(void (**)(void))(v6 + 88))();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 128) + **(int **)(v6 + 128));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614298B4;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return v5(v2, v3);
}

uint64_t sub_2614BB6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  sub_2614D5A58();
  return swift_release();
}

uint64_t sub_2614BB76C(uint64_t a1, uint64_t a2)
{
  sub_261405618(0, qword_26A915340);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2614BB834;
  return MEMORY[0x270EE7960](a1, a2);
}

uint64_t sub_2614BB834(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 24) = a1;
    return MEMORY[0x270FA2498](sub_2614BB980, 0, 0);
  }
}

uint64_t sub_2614BB980()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for all_audio2audio_encoder_ig2p();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_2614BB9F4(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00DD0]), sel_init);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, id))(*(void *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_2614BBA80(uint64_t a1, uint64_t a2)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  id v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  id v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    type metadata accessor for all_audio2audio_encoder_ig2pOutput();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v8;
    id v9 = v7;
  }
  else
  {
    id v10 = v12[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_2614BBB58(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_2614BBB7C, 0, 0);
}

uint64_t sub_2614BBB7C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2614BBC1C;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return MEMORY[0x270EE7938](v3, v2);
}

uint64_t sub_2614BBC1C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return MEMORY[0x270FA2498](sub_2614BBD68, 0, 0);
  }
}

uint64_t sub_2614BBD68()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for all_audio2audio_encoder_ig2pOutput();
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_2614BBDDC(void *a1)
{
  type metadata accessor for all_audio2audio_encoder_ig2pInput();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 136);
  id v5 = a1;
  uint64_t v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_2614BBE70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2613C23AC(&qword_26A915318);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)v16 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)v16 - v9, a1, v4);
  sub_261405618(0, (unint64_t *)&qword_26A915320);
  v11(v8, (uint64_t)v10, v4);
  sub_26142AAAC();
  uint64_t v12 = sub_2614D5948();
  type metadata accessor for all_audio2audio_encoder_ig2pInput();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_2614BC03C(unint64_t a1, uint64_t a2)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2613C23AC(&qword_26A9153C0);
    sub_2614D5D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2614D5FD8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F00D18]);
  sub_2613C23AC(&qword_26A9153C0);
  uint64_t v7 = (void *)sub_2614D5648();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  uint64_t v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  id v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  id v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = v10;
    v22[0] = (id)MEMORY[0x263F8EE78];
    if (v5)
    {
      swift_bridgeObjectRetain();
      id v16 = v11;
      uint64_t v13 = sub_2614D5D98();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v14 = v11;
    }
    sub_26142A848(v13, 0);
    sub_2614D5678();
    unint64_t v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0) {
      __break(1u);
    }
    unint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        id v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for all_audio2audio_encoder_ig2pOutput();
        *(void *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        uint64_t v21 = swift_retain();
        MEMORY[0x263E36760](v21);
        if (*(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_2614D5698();
        ++v19;
        sub_2614D56E8();
        sub_2614D5678();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v15 = v22[0];
    sub_2614D4BF8();

    swift_willThrow();
  }
}

uint64_t sub_2614BC314(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_2613C23AC(&qword_26A915330);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2614D81F0;
  *(void *)(inited + 32) = 0x343834315F726176;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_featureValueWithMultiArray_, a1);
  uint64_t v9 = sub_261405618(0, &qword_26A915338);
  *(void *)(inited + 48) = v8;
  *(void *)(inited + 72) = v9;
  *(void *)(inited + 80) = 0x3836315F726176;
  *(void *)(inited + 88) = 0xE700000000000000;
  id v10 = objc_msgSend(v7, sel_featureValueWithMultiArray_, a2);
  *(void *)(inited + 120) = v9;
  *(void *)(inited + 96) = v10;
  sub_26142907C(inited);
  id v11 = objc_allocWithZone(MEMORY[0x263F00D40]);
  *(void *)(v3 + 16) = sub_26142A760();
  return v3;
}

uint64_t sub_2614BC478()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2614BC4B0(id a1, char a2)
{
  uint64_t v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if (a2)
  {
    id v7 = a1;
    v4(a1, 1);
    sub_26142ADBC(a1);
  }
  else
  {
    type metadata accessor for all_audio2audio_encoder_ig2p();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    id v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for all_audio2audio_encoder_ig2p()
{
  return self;
}

uint64_t type metadata accessor for all_audio2audio_encoder_ig2pOutput()
{
  return self;
}

uint64_t type metadata accessor for all_audio2audio_encoder_ig2pInput()
{
  return self;
}

uint64_t static VAA2AVerifierModel.maxEnrollments.getter()
{
  return 3;
}

void *sub_2614BC5D4()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t VAA2AVerifierModel.__allocating_init(computeUnits:)(unsigned __int8 *a1)
{
  return VAA2AVerifierModel.init(computeUnits:)(a1);
}

uint64_t VAA2AVerifierModel.init(computeUnits:)(unsigned __int8 *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *a1;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
  type metadata accessor for VALog();
  id v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  swift_retain();
  sub_2614D5C38();
  sub_2614D54D8();
  char v17 = v8;
  sub_2614D5D48();
  sub_2614D54D8();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v15, v16, (uint64_t)v7);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D90]), sel_init);
  id v10 = v9;
  if (v8) {
    uint64_t v11 = 3;
  }
  else {
    uint64_t v11 = 0;
  }
  objc_msgSend(v9, sel_setComputeUnits_, v11);
  type metadata accessor for _3enrollments_quant_all_verifier_aa();
  id v12 = v10;
  uint64_t v13 = sub_26145BC60(v12);
  if (v2)
  {

    sub_2614506D0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VASignpostInterval);
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for VAA2AVerifierModel();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v3 + 16) = v13;
    swift_release();
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_2614506D0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VASignpostInterval);
    return sub_26141BF74();
  }
}

uint64_t type metadata accessor for VAA2AVerifierModel()
{
  return self;
}

void sub_2614BC8E8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = v3;
  uint64_t v9 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x263E36D80](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    swift_unknownObjectRetain();
  }
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    sub_2613DC2B8();
    swift_allocError();
    *unint64_t v18 = 0xD00000000000001ELL;
    v18[1] = 0x80000002614E35C0;
    swift_willThrow();
    return;
  }
  unint64_t v4 = v13;
  uint64_t v92 = v10;
  char v93 = v12;
  uint64_t v95 = v2;
  sub_2613C23AC(&qword_26A915200);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2614DA520;
  sub_2614095F0();
  *(void *)(v14 + 32) = sub_2614D5A78();
  v96[0] = v14;
  sub_2614D5678();
  uint64_t v15 = v96[0];
  id v16 = objc_allocWithZone(MEMORY[0x263F00DB0]);
  char v17 = (char *)sub_26141AF88(v15, 65568);
  if (v3)
  {
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v6 = v17;
  unint64_t v89 = 0;
  uint64_t v19 = (char *)objc_msgSend((id)v4, sel_shape);
  uint64_t v2 = sub_2614D5658();

  uint64_t v90 = v9;
  if ((v2 & 0xC000000000000001) != 0) {
    goto LABEL_41;
  }
  if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  for (id i = *(id *)(v2 + 32); ; id i = (id)MEMORY[0x263E36D80](0, v2))
  {
    uint64_t v21 = i;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setObject_atIndexedSubscript_, v21, 0);

    uint64_t v9 = v95;
    uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v95 + 168))();
    if (!v22)
    {
      static VAVerifierModelOutput.none.getter(a2);
      swift_unknownObjectRelease();

      return;
    }
    uint64_t v23 = (void *)v22;
    uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v9 + 192))();
    if (!v24)
    {
      static VAVerifierModelOutput.none.getter(a2);
      swift_unknownObjectRelease();

      return;
    }
    uint64_t v25 = (void *)v24;
    char v94 = (void *)type metadata accessor for _3enrollments_quant_all_verifier_aaInput();
    swift_unknownObjectRetain();
    id v26 = v23;
    uint64_t v19 = v6;
    id v27 = v25;
    uint64_t v28 = v4;
    unint64_t v29 = v27;
    id v79 = v26;
    unint64_t v30 = sub_26142E588(v28, (uint64_t)v26, (uint64_t)v19, (uint64_t)v27);
    uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v9 + 144))();
    char v32 = v89;
    uint64_t v33 = (*(uint64_t (**)(uint64_t *))(*(void *)v31 + 136))(v30);
    unint64_t v34 = v32;
    if (v32)
    {
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      return;
    }
    uint64_t v87 = v30;
    id v78 = v29;
    uint64_t v88 = a2;
    uint64_t v6 = (char *)v33;
    uint64_t v35 = swift_release();
    unint64_t v36 = (uint64_t (**)(void))(*(void *)v9 + 216);
    uint64_t v84 = *v36;
    uint64_t v83 = v36;
    a2 = *(uint64_t **)(((uint64_t (*)(uint64_t))v84)(v35) + 16);
    uint64_t v37 = swift_bridgeObjectRelease();
    uint64_t v38 = *(uint64_t (**)(void))(*(void *)v6 + 88);
    uint64_t v85 = *(void *)v6 + 88;
    uint64_t v86 = v38;
    unint64_t v39 = (void *)((uint64_t (*)(uint64_t))v38)(v37);
    id v40 = objc_msgSend(v39, sel_shape);

    uint64_t v2 = sub_2614D5658();
    unint64_t v89 = 0;
    if ((v2 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v41 = *(id *)(v2 + 32);
      goto LABEL_20;
    }
    __break(1u);
LABEL_45:
    id v46 = (id)MEMORY[0x263E36D80](0, v2);
    uint64_t v6 = v93;
LABEL_24:
    a2 = v87;
    swift_bridgeObjectRelease();
    unint64_t v47 = (unint64_t)objc_msgSend(v46, sel_integerValue);

    if ((v47 & 0x8000000000000000) != 0) {
      goto LABEL_47;
    }
    if (!v47)
    {
      char v94 = (void *)MEMORY[0x263F8EE78];
LABEL_36:
      type metadata accessor for VAKeywordResult();
      uint64_t v76 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v94);
      sub_261481280(v76, v34);
      swift_release();
      swift_release();

      goto LABEL_37;
    }
    unint64_t v4 = 0;
    char v94 = (void *)MEMORY[0x263F8EE78];
    uint64_t v81 = v5;
    id v80 = (id)v47;
    while (1)
    {
      uint64_t v48 = (void *)v86();
      id v49 = objc_msgSend(v48, sel_objectAtIndexedSubscript_, v4);

      objc_msgSend(v49, sel_floatValue);
      float v51 = v50;

      uint64_t v2 = v9;
      uint64_t v52 = v84();
      if (v4 >= *(void *)(v52 + 16)) {
        break;
      }
      sub_26145066C(v52+ ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(void *)(v92 + 72) * v4, (uint64_t)v6);
      swift_bridgeObjectRelease();
      uint64_t v53 = (uint64_t *)&v6[*(int *)(v90 + 24)];
      uint64_t v54 = *v53;
      uint64_t v55 = v53[1];
      swift_bridgeObjectRetain();
      sub_2614506D0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VASingleEnrollmentData);
      double v56 = sub_26140C3F8();
      double v57 = sub_26140C3F8();
      uint64_t v58 = sub_2614967EC();
      uint64_t v59 = sub_2614967EC();
      char v60 = sub_2613D04A8();
      char v61 = sub_2613D04A8();
      char v62 = sub_2613F8710();
      sub_2614967F4(v54, v55, v58, v59, v60 & 1, v61 & 1, v62 & 1, (uint64_t)v96, v51, v56, v57);
      uint64_t v63 = v96[0];
      uint64_t v64 = v96[1];
      int v65 = v97;
      uint64_t v66 = v98;
      uint64_t v67 = v99;
      uint64_t v68 = v100;
      uint64_t v69 = v101;
      char v70 = v102;
      int v91 = v103;
      char v71 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v94 = sub_261416300(0, v94[2] + 1, 1, v94);
      }
      unint64_t v73 = v94[2];
      unint64_t v72 = v94[3];
      if (v73 >= v72 >> 1) {
        char v94 = sub_261416300((void *)(v72 > 1), v73 + 1, 1, v94);
      }
      ++v4;
      int v74 = v94;
      v94[2] = v73 + 1;
      int v75 = &v74[8 * v73];
      v75[4] = v63;
      v75[5] = v64;
      *((_DWORD *)v75 + 12) = v65;
      v75[7] = v66;
      v75[8] = v67;
      v75[9] = v68;
      v75[10] = v69;
      *((unsigned char *)v75 + 88) = v70;
      *((unsigned char *)v75 + 89) = v91;
      *((unsigned char *)v75 + 90) = v71;
      uint64_t v5 = v81;
      a2 = v87;
      unint64_t v34 = v88;
      uint64_t v9 = v95;
      uint64_t v6 = v93;
      if (v80 == (id)v4) {
        goto LABEL_36;
      }
    }
LABEL_40:
    __break(1u);
LABEL_41:
    ;
  }
LABEL_43:
  id v41 = (id)MEMORY[0x263E36D80](0, v2);
LABEL_20:
  unint64_t v42 = v41;
  swift_bridgeObjectRelease();
  long long v43 = (uint64_t *)objc_msgSend(v42, sel_integerValue);

  if (a2 != v43)
  {
    static VAVerifierModelOutput.none.getter(v88);
    swift_release();
    swift_release();

LABEL_37:
    swift_unknownObjectRelease();
    return;
  }
  int v77 = v19;
  int v82 = v6;
  uint64_t v44 = (void *)v86();
  id v45 = objc_msgSend(v44, sel_shape);

  uint64_t v2 = sub_2614D5658();
  unint64_t v34 = v88;
  if ((v2 & 0xC000000000000001) != 0) {
    goto LABEL_45;
  }
  uint64_t v6 = v93;
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v46 = *(id *)(v2 + 32);
    goto LABEL_24;
  }
  __break(1u);
LABEL_47:
  __break(1u);
}

uint64_t sub_2614BD1D8()
{
  return 3;
}

void sub_2614BD1E0()
{
}

uint64_t sub_2614BD210()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t VAA2AVerifierModel.deinit()
{
  uint64_t v0 = VAVerifierModel.deinit();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AVerifierModel.__deallocating_deinit()
{
  uint64_t v0 = VAVerifierModel.deinit();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2614BD2F8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAA2AVerifierModel.setAudioEnrollments(enrollments:)(Swift::OpaquePointer enrollments)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void (**)(uint64_t))(*(void *)v1 + 224);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v45 = v1;
  v5(v6);
  uint64_t v7 = *((void *)enrollments._rawValue + 2);
  if (!v7)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = type metadata accessor for VASingleEnrollmentData();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  id v41 = (char *)enrollments._rawValue
      + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
  uint64_t v9 = *(void *)&v41[*(int *)(v8 + 20)];
  uint64_t v46 = *(void *)(v9 + 16);
  if (!v46)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 16);
  sub_2613C23AC(&qword_26A915200);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2614DA520;
  *(void *)(v11 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v7);
  sub_2614D5678();
  id v12 = objc_allocWithZone(MEMORY[0x263F00DB0]);
  id v13 = sub_26141AF88(v11, 65568);
  if (!v3)
  {
    uint64_t v47 = v10;
    uint64_t v44 = v7;
    uint64_t v14 = (*(uint64_t (**)(id))(*(void *)v45 + 200))(v13);
    uint64_t v15 = 0;
    id v16 = *(uint64_t (**)(uint64_t))(*(void *)v45 + 192);
    while (1)
    {
      uint64_t v17 = v16(v14);
      if (!v17) {
        goto LABEL_24;
      }
      unint64_t v18 = (void *)v17;
      id v19 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v46);
      objc_msgSend(v18, sel_setObject_atIndexedSubscript_, v19, v15);

      if (v44 == ++v15)
      {
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_2614DA500;
        *(void *)(v20 + 32) = sub_2614D58B8();
        *(void *)(v20 + 40) = sub_2614D58B8();
        uint64_t v21 = v10;
        *(void *)(v20 + 48) = sub_2614D58B8();
        sub_2614D5678();
        id v22 = objc_allocWithZone(MEMORY[0x263F00DB0]);
        id v23 = sub_26141AF88(v20, 65568);
        uint64_t v24 = 0;
LABEL_10:
        unint64_t v25 = 0;
        uint64_t v26 = v24;
        uint64_t v40 = v24 + 1;
        while (!v21)
        {
LABEL_11:
          if (++v25 == v46)
          {
            uint64_t v24 = v40;
            if (v40 == v44) {
              goto LABEL_21;
            }
            goto LABEL_10;
          }
        }
        unint64_t v27 = 0;
        uint64_t v28 = *(void *)&v41[*(void *)(v42 + 72) * v26 + *(int *)(v43 + 20)];
        while (1)
        {
          uint64_t v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = xmmword_2614DA500;
          *(void *)(v29 + 32) = sub_2614D58B8();
          *(void *)(v29 + 40) = sub_2614D58B8();
          *(void *)(v29 + 48) = sub_2614D58B8();
          sub_2614D5678();
          if (v25 >= *(void *)(v28 + 16)) {
            break;
          }
          uint64_t v30 = *(void *)(v28 + 32 + 8 * v25);
          if (v27 >= *(void *)(v30 + 16)) {
            goto LABEL_20;
          }
          unint64_t v31 = v27 + 1;
          int v32 = *(_DWORD *)(v30 + 4 * v27 + 32);
          id v33 = objc_allocWithZone(NSNumber);
          LODWORD(v34) = v32;
          id v35 = objc_msgSend(v33, sel_initWithFloat_, v34);
          sub_2614095F0();
          unint64_t v36 = (void *)sub_2614D5648();
          swift_bridgeObjectRelease();
          objc_msgSend(v23, sel_setObject_forKeyedSubscript_, v35, v36);

          unint64_t v27 = v31;
          BOOL v37 = v47 == v31;
          uint64_t v21 = v47;
          if (v37) {
            goto LABEL_11;
          }
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        uint64_t v38 = *(void (**)(id))(*(void *)v45 + 176);
        id v39 = v23;
        v38(v23);

        return;
      }
    }
  }
}

void sub_2614BD798(Swift::OpaquePointer a1)
{
}

uint64_t method lookup function for VAA2AVerifierModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAA2AVerifierModel);
}

uint64_t dispatch thunk of VAA2AVerifierModel.__allocating_init(computeUnits:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of VAA2AVerifierModel.predict(predictionInput:shouldSkipVerifierInference:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of VAA2AVerifierModel.maxKeywords.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t sub_2614BD860()
{
  swift_beginAccess();
  return *(void *)(v0 + 104);
}

uint64_t sub_2614BD894(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t sub_2614BD8D4()
{
  return swift_retain();
}

uint64_t sub_2614BD90C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 120) = a1;
  return swift_release();
}

uint64_t sub_2614BD954()
{
  return swift_retain();
}

uint64_t sub_2614BD98C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  return swift_release();
}

double sub_2614BD9D4()
{
  swift_beginAccess();
  return *(double *)(v0 + 136);
}

uint64_t sub_2614BDA08(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 136) = a1;
  return result;
}

uint64_t sub_2614BDA48()
{
  swift_beginAccess();
  return *(void *)(v0 + 144);
}

uint64_t sub_2614BDA7C(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 144) = a1;
  return result;
}

uint64_t sub_2614BDABC()
{
  swift_beginAccess();
  return MEMORY[0x263E38150](v0 + 160);
}

uint64_t sub_2614BDB04(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 168) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_2614BDB68(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x263E38150](v1 + 160);
  uint64_t v5 = *(void *)(v1 + 168);
  v3[3] = v4;
  v3[4] = v5;
  return sub_2614BDBE8;
}

void sub_2614BDBE8(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 168) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t sub_2614BDC6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated;
  swift_beginAccess();
  return sub_2614ACC1C(v3, a1);
}

uint64_t sub_2614BDCC0(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated;
  swift_beginAccess();
  sub_2614ACCE0(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_2614BDD1C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_2614BDD78(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  swift_allocObject();
  uint64_t v8 = sub_2614BF268(a1, a2, a3, a4);
  swift_unknownObjectRelease();

  return v8;
}

uint64_t sub_2614BDDF0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v66 = sub_2614D50C8();
  uint64_t v4 = *(void *)(v66 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v66);
  uint64_t v7 = (char *)&ObjectType - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v64 = (char *)&ObjectType - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  int v65 = (char *)&ObjectType - v11;
  int v12 = *(unsigned __int8 *)(v1 + 29);
  if (v12 == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 344))(v10);
    if (v10)
    {
      uint64_t v14 = v13;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v67 = 0x203A746C75736552;
      unint64_t v68 = 0xE800000000000000;
      (*(void (**)(void))(*(void *)a1 + 160))();
      uint64_t v63 = v4;
      sub_2614D54D8();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v14 + 8))(v67, v68, ObjectType, v14);
      uint64_t v4 = v63;
      swift_bridgeObjectRelease();
      uint64_t v10 = swift_unknownObjectRelease();
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v67, v10);
  unint64_t v15 = v68;
  if (!v68)
  {
    uint64_t v37 = sub_26146718C();
    uint64_t v38 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v37, v66);
    id v39 = sub_2614D50A8();
    os_log_type_t v40 = sub_2614D5968();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = v4;
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_2613B8000, v39, v40, "Did not find a detection in StrategyLayerDefault:handleKeywordResult", v42, 2u);
      uint64_t v43 = v42;
      uint64_t v4 = v41;
      MEMORY[0x263E38060](v43, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v38);
  }
  uint64_t v16 = v67;
  float v17 = *(float *)&v69;
  int v18 = *(_DWORD *)(v1 + 24);
  char v19 = *(unsigned char *)(v1 + 28);
  char v20 = *(unsigned char *)(v1 + 48);
  uint64_t v21 = *(void *)(v1 + 56);
  char v22 = *(unsigned char *)(v1 + 64);
  char v23 = *(unsigned char *)(v1 + 65);
  int v24 = *(_DWORD *)(v1 + 68);
  char v25 = *(unsigned char *)(v1 + 72);
  __int16 v26 = *(_WORD *)(v1 + 96);
  char v27 = *(unsigned char *)(v1 + 98);
  char v28 = *(unsigned char *)(v1 + 99);
  char v29 = *(unsigned char *)(v1 + 100);
  char v30 = *(unsigned char *)(v1 + 101);
  char v31 = *(unsigned char *)(v1 + 102);
  uint64_t v67 = *(void *)(v1 + 16);
  LODWORD(v68) = v18;
  BYTE4(v68) = v19;
  BYTE5(v68) = v12;
  long long v69 = *(_OWORD *)(v1 + 32);
  char v70 = v20;
  uint64_t v71 = v21;
  char v72 = v22;
  char v73 = v23;
  int v74 = v24;
  char v75 = v25;
  long long v76 = *(_OWORD *)(v1 + 80);
  __int16 v77 = v26;
  char v78 = v27;
  char v79 = v28;
  char v80 = v29;
  char v81 = v30;
  char v82 = v31;
  uint64_t v32 = VARuntimeParameters.keywordsToThresholds.getter();
  if (!*(void *)(v32 + 16))
  {
LABEL_26:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  unint64_t v33 = sub_2613D8F00(v16, v15);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  float v35 = *(float *)(*(void *)(v32 + 56) + 4 * v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35 > v17)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(void))(*(void *)v2 + 232))(0);
    return (*(uint64_t (**)(void))(*(void *)v2 + 256))(0);
  }
  if (sub_2614BE66C(a1))
  {
    if (v12)
    {
      uint64_t v44 = sub_26146718C();
      uint64_t v46 = v65;
      uint64_t v45 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v65, v44, v66);
      swift_bridgeObjectRetain_n();
      uint64_t v47 = sub_2614D50A8();
      os_log_type_t v48 = sub_2614D5968();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        uint64_t v67 = v50;
        *(_DWORD *)uint64_t v49 = 136315394;
        swift_bridgeObjectRetain();
        double v83 = COERCE_DOUBLE(sub_2613D875C(v16, v15, &v67));
        sub_2614D5B58();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v49 + 12) = 2048;
        double v83 = v17;
        sub_2614D5B58();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2613B8000, v47, v48, "Ignoring repeated result in consecutive stride:%s %f", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x263E38060](v50, -1, -1);
        MEMORY[0x263E38060](v49, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v65, v66);
      }
LABEL_24:

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v46, v45);
    }
    return swift_bridgeObjectRelease();
  }
  if (sub_2614BEA74())
  {
    if (v12)
    {
      uint64_t v51 = sub_26146718C();
      uint64_t v46 = v64;
      uint64_t v45 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v64, v51, v66);
      swift_bridgeObjectRetain_n();
      uint64_t v47 = sub_2614D50A8();
      os_log_type_t v52 = sub_2614D5968();
      if (os_log_type_enabled(v47, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        uint64_t v67 = v54;
        *(_DWORD *)uint64_t v53 = 136315394;
        swift_bridgeObjectRetain();
        double v83 = COERCE_DOUBLE(sub_2613D875C(v16, v15, &v67));
        sub_2614D5B58();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v53 + 12) = 2048;
        double v83 = v17;
        sub_2614D5B58();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2613B8000, v47, v52, "Debounce without speech detector: Ignoring %s %f", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x263E38060](v54, -1, -1);
        MEMORY[0x263E38060](v53, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v64, v66);
      }
      goto LABEL_24;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v55 = mach_absolute_time();
  (*(void (**)(uint64_t))(*(void *)v2 + 208))(v55);
  double v56 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 232);
  uint64_t v57 = swift_retain();
  uint64_t v58 = v56(v57);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v58);
  if (result)
  {
    uint64_t v60 = v59;
    uint64_t v61 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(a1, v61, v60);
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_2614BE66C(uint64_t a1)
{
  uint64_t v3 = sub_2614D50C8();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v33, v5);
  uint64_t v9 = v34;
  if (!v34)
  {
    uint64_t v25 = sub_26146718C();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v25, v3);
    __int16 v26 = sub_2614D50A8();
    os_log_type_t v27 = sub_2614D5968();
    if (os_log_type_enabled(v26, v27))
    {
      char v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v28 = 0;
      _os_log_impl(&dword_2613B8000, v26, v27, "No keyword detected when StrategyLayerDefault.isRepeatedKeywordInConsecutiveStride called", v28, 2u);
      MEMORY[0x263E38060](v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    goto LABEL_13;
  }
  uint64_t v10 = v33;
  uint64_t v11 = ((uint64_t (*)(void *))(*v1)[31])(v8);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    char v29 = (void (*)(uint64_t))(*v1)[32];
    uint64_t v30 = swift_retain();
    v29(v30);
LABEL_13:
    char v24 = 0;
    return v24 & 1;
  }
  uint64_t v12 = v11;
  type metadata accessor for VARequestContext(0);
  unint64_t v13 = (*(uint64_t (**)(void))(*(void *)a1 + 264))();
  unint64_t v14 = (*(uint64_t (**)(void))(*(void *)v12 + 264))();
  BOOL v15 = v13 >= v14;
  unint64_t result = v13 - v14;
  if (!v15)
  {
    __break(1u);
    return result;
  }
  double v17 = sub_2613FC478(result);
  if (v17 == (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v1[19]) + 0x1A8))())
  {
    int v18 = (uint64_t (**)(uint64_t, uint64_t))(*v1 + 53);
    char v19 = *v18;
    uint64_t v20 = (*v18)(v10, v9);
    uint64_t v22 = v21;
    if (v20 == v19(v10, v9) && v22 == v23) {
      char v24 = 1;
    }
    else {
      char v24 = sub_2614D5FB8();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v24 = 0;
  }
  swift_bridgeObjectRelease();
  char v31 = (void (*)(uint64_t))(*v1)[32];
  uint64_t v32 = swift_retain();
  v31(v32);
  swift_release();
  return v24 & 1;
}

uint64_t sub_2614BEA74()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2614D5D08();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2613C23AC(&qword_26A915E20);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v23 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  BOOL v15 = (char *)v23 - v14;
  if ((*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    uint64_t v16 = *(void *)(v0 + 32);
    v23[0] = *(void *)(v0 + 40);
    v23[1] = v16;
    double v17 = *(void (**)(uint64_t))(*(void *)v0 + 368);
    void v23[2] = *(void *)v0 + 368;
    char v24 = v17;
    v17(v13);
    int v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
    int v19 = v18(v15, 1, v2);
    sub_2614AE31C((uint64_t)v15);
    if (v19 != 1)
    {
      uint64_t v20 = sub_2614D5CE8();
      v24(v20);
      uint64_t result = v18(v12, 1, v2);
      if (result == 1)
      {
        __break(1u);
        return result;
      }
      sub_2614D5CF8();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      v22(v5, v2);
      v22(v12, v2);
      if ((sub_2614D6108() & 1) == 0) {
        return 1;
      }
    }
    sub_2614D5CE8();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
    (*(void (**)(char *))(*(void *)v1 + 376))(v9);
  }
  return 0;
}

uint64_t sub_2614BED64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2614D4B78();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = a1;
  v10[1] = a2;
  sub_2614D4B18();
  sub_2613DC3BC();
  uint64_t v8 = sub_2614D5BA8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

void sub_2614BEE68()
{
}

uint64_t sub_2614BEE98()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  sub_2613E3498(v0 + 160);
  sub_2614AE31C(v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_clock;
  uint64_t v2 = sub_2614D5D28();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

uint64_t sub_2614BEF50()
{
  uint64_t v0 = VAStrategyLayer.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  sub_2613E3498(v0 + 160);
  sub_2614AE31C(v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_clock;
  uint64_t v2 = sub_2614D5D28();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_2614BF008()
{
  sub_2614BEF50();
  return swift_deallocClassInstance();
}

uint64_t VAStrategyProviderDefault.__allocating_init(strideConfig:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t VAStrategyProviderDefault.init(strideConfig:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_2614BF09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 8);
  char v7 = *(unsigned char *)(a3 + 12);
  char v8 = *(unsigned char *)(a3 + 13);
  char v9 = *(unsigned char *)(a3 + 32);
  uint64_t v10 = *(void *)(a3 + 40);
  char v11 = *(unsigned char *)(a3 + 48);
  char v12 = *(unsigned char *)(a3 + 49);
  int v13 = *(_DWORD *)(a3 + 52);
  char v14 = *(unsigned char *)(a3 + 56);
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v16 = *(void *)(a3 + 72);
  __int16 v17 = *(_WORD *)(a3 + 80);
  char v18 = *(unsigned char *)(a3 + 82);
  char v19 = *(unsigned char *)(a3 + 83);
  char v20 = *(unsigned char *)(a3 + 84);
  char v21 = *(unsigned char *)(a3 + 85);
  char v22 = *(unsigned char *)(a3 + 86);
  uint64_t v27 = *(void *)a3;
  int v28 = v6;
  char v29 = v7;
  char v30 = v8;
  long long v31 = *(_OWORD *)(a3 + 16);
  char v32 = v9;
  uint64_t v33 = v10;
  char v34 = v11;
  char v35 = v12;
  int v36 = v13;
  char v37 = v14;
  uint64_t v38 = v15;
  uint64_t v39 = v16;
  __int16 v40 = v17;
  char v41 = v18;
  char v42 = v19;
  char v43 = v20;
  char v44 = v21;
  char v45 = v22;
  uint64_t v23 = *(void **)(v3 + 16);
  type metadata accessor for VAStrategyDefault();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v24 = v23;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_2614BF268(a1, a2, &v27, v24);
  swift_unknownObjectRelease();

  return v25;
}

uint64_t VAStrategyProviderDefault.deinit()
{
  return v0;
}

uint64_t VAStrategyProviderDefault.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2614BF224()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_2614BF268(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v38 = a1;
  uint64_t v39 = a4;
  uint64_t v37 = a2;
  uint64_t v40 = sub_2614D5D28();
  uint64_t v6 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a3;
  int v10 = *((_DWORD *)a3 + 2);
  char v11 = *((unsigned char *)a3 + 12);
  char v12 = *((unsigned char *)a3 + 13);
  uint64_t v13 = a3[2];
  uint64_t v14 = a3[3];
  int v36 = *((unsigned __int8 *)a3 + 32);
  uint64_t v35 = a3[5];
  int v15 = *((unsigned __int8 *)a3 + 48);
  int v33 = *((unsigned __int8 *)a3 + 49);
  int v34 = v15;
  int v16 = *((_DWORD *)a3 + 13);
  int v32 = *((unsigned __int8 *)a3 + 56);
  uint64_t v17 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = v17;
  LODWORD(v17) = *((unsigned __int16 *)a3 + 40);
  int v28 = *((unsigned __int8 *)a3 + 82);
  int v29 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a3 + 83);
  int v26 = *((unsigned __int8 *)a3 + 84);
  int v27 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a3 + 85);
  int v24 = *((unsigned __int8 *)a3 + 86);
  int v25 = v17;
  *(void *)(v4 + 168) = 0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  swift_unknownObjectWeakInit();
  uint64_t v18 = v4 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated;
  uint64_t v19 = sub_2614D5D08();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  swift_beginAccess();
  *(void *)(v4 + 168) = v37;
  swift_unknownObjectWeakAssign();
  *(void *)(v4 + 16) = v9;
  *(_DWORD *)(v4 + 24) = v10;
  *(unsigned char *)(v4 + 28) = v11;
  *(unsigned char *)(v4 + 29) = v12;
  *(void *)(v4 + 32) = v13;
  *(void *)(v4 + 40) = v14;
  *(unsigned char *)(v4 + 48) = v36;
  *(void *)(v4 + 56) = v35;
  *(unsigned char *)(v4 + 64) = v34;
  *(unsigned char *)(v4 + 65) = v33;
  *(_DWORD *)(v4 + 68) = v16;
  *(unsigned char *)(v4 + 72) = v32;
  uint64_t v20 = v30;
  *(void *)(v4 + 80) = v31;
  *(void *)(v4 + 88) = v20;
  *(_WORD *)(v4 + 96) = v29;
  *(unsigned char *)(v4 + 98) = v28;
  *(unsigned char *)(v4 + 99) = v27;
  *(unsigned char *)(v4 + 100) = v26;
  *(unsigned char *)(v4 + 101) = v25;
  *(unsigned char *)(v4 + 102) = v24;
  char v21 = v39;
  *(void *)(v4 + 152) = v39;
  swift_retain();
  id v22 = v21;
  sub_2614D5D18();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v4 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_clock, v8, v40);
  swift_release();
  return sub_26141BF74();
}

uint64_t type metadata accessor for VAStrategyDefault()
{
  uint64_t result = qword_26A91FC80;
  if (!qword_26A91FC80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2614BF54C()
{
  return type metadata accessor for VAStrategyDefault();
}

void sub_2614BF554()
{
  sub_2614AE4BC();
  if (v0 <= 0x3F)
  {
    sub_2614D5D28();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for VAStrategyProviderDefault()
{
  return self;
}

uint64_t method lookup function for VAStrategyProviderDefault(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAStrategyProviderDefault);
}

uint64_t dispatch thunk of VAStrategyProviderDefault.__allocating_init(strideConfig:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of VAStrategyProviderDefault.getStrategy(delegate:params:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

const char *sub_2614BF6D4()
{
  return "VAD_ANE.e5";
}

uint64_t static VAConfiguration.defaultVADFilename.getter()
{
  return 0x2E454E415F444156;
}

void *sub_2614BF6FC()
{
  return &unk_265581688;
}

unint64_t static VAConfiguration.defaultVisionKWSModelFilename.getter()
{
  return 0xD000000000000017;
}

void *sub_2614BF724()
{
  return &unk_265581698;
}

unint64_t static VAConfiguration.defaultVisionKWSModelConfigFilename.getter()
{
  return 0xD000000000000023;
}

id sub_2614BF74C()
{
  unint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void sub_2614BF7A4(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

void *sub_2614BF7F8()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_2614BF848(void *a1)
{
}

uint64_t sub_2614BF854()
{
  return sub_2614A66A4();
}

uint64_t sub_2614BF860(uint64_t a1)
{
  return sub_2614A66F8(a1, &OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig);
}

void *sub_2614BF86C()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_2614BF8BC(void *a1)
{
}

uint64_t sub_2614BF8C8()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2614BF920(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2614BF980()
{
  return sub_2614A66A4();
}

uint64_t sub_2614BF98C(uint64_t a1)
{
  return sub_2614A66F8(a1, &OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig);
}

id static VAConfiguration.buildForFlexibleA2A()()
{
  return sub_2614C0044((uint64_t (*)(void))static VAStrideConfiguration.forFlexibleA2A());
}

id sub_2614BF9B0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_2614C13B0(a1, a2, a3, a4, a5);

  return v12;
}

uint64_t type metadata accessor for VAConfiguration()
{
  return self;
}

id static VAConfiguration.buildForFlexibleA2Av2()()
{
  return sub_2614BFAFC(static VAStrideConfiguration.forFlexibleA2Av2(), (uint64_t (*)(void))static VAResultGeneratorConfiguration.buildForFlexibleSpotter());
}

id static VAConfiguration.buildForFlexibleA2Av3()()
{
  return sub_2614BFAFC(static VAStrideConfiguration.forFlexibleA2Av3(), static VAResultGeneratorConfiguration.buildForA2AV3());
}

id static VAConfiguration.buildForFlexibleA2T()()
{
  return sub_2614BFAFC((uint64_t (*)(void))static VAStrideConfiguration.forFlexibleA2T(), (uint64_t (*)(void))static VAResultGeneratorConfiguration.buildForFlexibleSpotter());
}

id static VAConfiguration.buildForFlexibleA2Tv2()()
{
  return sub_2614BFAFC(static VAStrideConfiguration.forFlexibleA2Tv2(), (uint64_t (*)(void))static VAResultGeneratorConfiguration.buildForFlexibleSpotter());
}

id sub_2614BFAFC(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  type metadata accessor for VAStrideConfiguration();
  uint64_t v4 = (void *)a1();
  type metadata accessor for VAResultGeneratorConfiguration();
  uint64_t v5 = (void *)a2();
  id v6 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
  id v7 = sub_2614C13B0(v4, 0, v5, 0x2E454E415F444156, 0xEA00000000003565);

  return v7;
}

id static VAConfiguration.buildForTasr(tasrConfig:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
  uint64_t v1 = swift_retain();
  id v2 = sub_2614C14F0(v1);
  swift_release();
  return v2;
}

id sub_2614BFBE4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_2614C14F0(a1);
  swift_release();
  return v4;
}

id static VAConfiguration.buildForSpeechAPISpotter(speechAPISpotterConfig:)(uint64_t a1)
{
  id v2 = (objc_class *)type metadata accessor for VAConfiguration();
  id v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  id v4 = &v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = &v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig];
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  swift_retain_n();
  id v6 = v3;
  swift_release();
  type metadata accessor for VAStrideConfiguration();
  *(void *)&v6[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = static VAStrideConfiguration.forSpeechAPIConfig()();

  v9.receiver = v6;
  v9.super_class = v2;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  swift_release();
  return v7;
}

id sub_2614BFD30(uint64_t a1)
{
  id v2 = v1;
  id v4 = (char *)objc_allocWithZone(v1);
  *(void *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  *(void *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  *(void *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  uint64_t v5 = &v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  id v6 = &v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig];
  *(void *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  swift_beginAccess();
  *(void *)id v6 = a1;
  id v7 = v4;
  swift_retain();
  swift_release();
  type metadata accessor for VAStrideConfiguration();
  *(void *)&v7[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = static VAStrideConfiguration.forSpeechAPIConfig()();

  v10.receiver = v7;
  v10.super_class = v2;
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  swift_release();
  return v8;
}

void *static VAConfiguration.buildForFixedWithCustomModel(modelFilepath:)(uint64_t a1, unint64_t a2)
{
  type metadata accessor for VAFixedSpotterModelConfiguration();
  uint64_t result = static VAFixedSpotterModelConfiguration.buildForFixedA2T(modelFilepath:modelConfigJsonFilepath:)(a1, a2, 0, 0);
  if (!v2)
  {
    id v6 = result;
    type metadata accessor for VAStrideConfiguration();
    id v7 = static VAStrideConfiguration.forFixedA2T(modelConfig:)(v6);
    type metadata accessor for VAResultGeneratorConfiguration();
    id v8 = static VAResultGeneratorConfiguration.buildForFixedSpotter(fixedConfig:waitFrames:)(v6, 1);
    id v9 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
    id v10 = sub_2614C13B0(v7, v6, v8, 0x2E454E415F444156, 0xEA00000000003565);

    return v10;
  }
  return result;
}

void *static VAConfiguration.buildForFixedVCWakeupRuntime()()
{
  return sub_2614BFF58(1);
}

void *static VAConfiguration.buildForFixedVCWakeupEval()()
{
  return sub_2614BFF58(3);
}

void *sub_2614BFF58(uint64_t a1)
{
  type metadata accessor for VAFixedSpotterModelConfiguration();
  uint64_t result = static VAFixedSpotterModelConfiguration.buildForFixedA2TDefault()();
  if (!v1)
  {
    id v4 = result;
    type metadata accessor for VAStrideConfiguration();
    id v5 = static VAStrideConfiguration.forFixedA2T(modelConfig:)(v4);
    type metadata accessor for VAResultGeneratorConfiguration();
    id v6 = static VAResultGeneratorConfiguration.buildForFixedSpotter(fixedConfig:waitFrames:)(v4, a1);
    id v7 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
    id v8 = sub_2614C13B0(v5, v4, v6, 0x2E454E415F444156, 0xEA00000000003565);

    return v8;
  }
  return result;
}

id static VAConfiguration.buildForFlexibleAVS()()
{
  return sub_2614C0044((uint64_t (*)(void))static VAStrideConfiguration.forFlexibleAVS());
}

id sub_2614C0044(uint64_t (*a1)(void))
{
  type metadata accessor for VAStrideConfiguration();
  uint64_t v2 = (void *)a1();
  id v3 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
  id v4 = sub_2614C13B0(v2, 0, 0, 0, 0);

  return v4;
}

unint64_t static VAConfiguration.buildFromConfigFile(jsonFile:)()
{
  type metadata accessor for VAConfiguration();
  uint64_t v1 = sub_2614C1850(&qword_26A915F88, v0, (void (*)(uint64_t))type metadata accessor for VAConfiguration);
  sub_261418A5C(v1, &v6);
  unint64_t v2 = v6;
  if (v7)
  {
    if (v6 == 0x8000000000000000)
    {
      sub_2614D5C38();
      swift_bridgeObjectRelease();
      sub_2614D54D8();
      unint64_t v2 = 0x80000002614E1C00;
      sub_2613DC2B8();
      swift_allocError();
      *id v3 = 0xD000000000000023;
      v3[1] = 0x80000002614E1C00;
    }
    else
    {
      sub_2613DD918();
      swift_allocError();
      *id v4 = v2;
    }
    swift_willThrow();
  }
  return v2;
}

void *static VAConfiguration.buildForFixedBreakthrough()()
{
  type metadata accessor for VAFixedSpotterModelConfiguration();
  uint64_t result = static VAFixedSpotterModelConfiguration.buildForFixedA2TBreakthrough()();
  if (!v0)
  {
    unint64_t v2 = result;
    type metadata accessor for VAStrideConfiguration();
    id v3 = static VAStrideConfiguration.forFixedA2T(modelConfig:)(v2);
    type metadata accessor for VAResultGeneratorConfiguration();
    uint64_t v4 = sub_2613F8710();
    id v5 = static VAResultGeneratorConfiguration.buildForFixedSpotter(fixedConfig:waitFrames:)(v2, v4);
    id v6 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
    id v7 = sub_2614C13B0(v3, v2, v5, 0x2E454E415F444156, 0xEA00000000003565);

    return v7;
  }
  return result;
}

void *sub_2614C02CC()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t result = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
  if (result)
  {
    id v3 = result;
    char v4 = (*(uint64_t (**)(void))((*v1 & *result) + 0xD8))();

    return (void *)(v4 & 1);
  }
  return result;
}

void *sub_2614C035C()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t result = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
  if (result)
  {
    id v3 = result;
    char v4 = (*(uint64_t (**)(void))((*v1 & *result) + 0xF0))();

    return (void *)(v4 & 1);
  }
  return result;
}

unint64_t sub_2614C03EC()
{
  unint64_t result = 0x6F43656469727473;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E6F436465786966;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2614C049C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2614C1BAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2614C04C4(uint64_t a1)
{
  unint64_t v2 = sub_2614C1640();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2614C0500(uint64_t a1)
{
  unint64_t v2 = sub_2614C1640();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VAConfiguration.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return VAConfiguration.init(from:)(a1);
}

uint64_t VAConfiguration.init(from:)(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_2613C23AC(&qword_26A915F90);
  uint64_t v31 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v41 = (id *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig];
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  uint64_t v32 = OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  int v34 = a1;
  uint64_t v35 = (id *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig];
  *uint64_t v35 = 0;
  id v8 = &v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(void *)id v8 = 0;
  *((void *)v8 + 1) = 0;
  int v36 = v8;
  uint64_t v33 = OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig;
  *(void *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  sub_2613DBF24(a1, a1[3]);
  sub_2614C1640();
  id v9 = v3;
  sub_2614D60D8();
  if (v2)
  {
    id v12 = v9;
    id v13 = v36;
    uint64_t v14 = v41;
    sub_2613DD718((uint64_t)v34);
    int v15 = v35;

    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    type metadata accessor for VAConfiguration();
    swift_deallocPartialClassInstance();
    return (uint64_t)v13;
  }
  uint64_t v10 = v31;
  type metadata accessor for VAStrideConfiguration();
  LOBYTE(v39) = 0;
  sub_2614C1850(&qword_26A915F98, 255, (void (*)(uint64_t))type metadata accessor for VAStrideConfiguration);
  uint64_t result = sub_2614D5E78();
  uint64_t v30 = v7;
  int v16 = v41;
  if (v40)
  {
    uint64_t v17 = v9;
    uint64_t v18 = OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig;
    *(void *)&v9[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = v40;
    type metadata accessor for VAFixedSpotterModelConfiguration();
    LOBYTE(v40) = 1;
    sub_2614C1850(&qword_26A915B40, 255, (void (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration);
    sub_2614D5E78();
    uint64_t v19 = v35;
    v29[1] = v18;
    uint64_t v20 = v39;
    swift_beginAccess();
    char v21 = *v16;
    *int v16 = v20;

    type metadata accessor for VAResultGeneratorConfiguration();
    LOBYTE(v39) = 2;
    sub_2614C1850(&qword_26A914DC8, 255, (void (*)(uint64_t))type metadata accessor for VAResultGeneratorConfiguration);
    sub_2614D5E78();
    id v22 = v38;
    swift_beginAccess();
    uint64_t v23 = *v19;
    *uint64_t v19 = v22;

    LOBYTE(v38) = 3;
    uint64_t result = sub_2614D5E38();
    if (v24)
    {
      uint64_t v25 = result;
      uint64_t v26 = v24;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v30, v5);
      int v27 = (uint64_t *)v36;
      swift_beginAccess();
      *int v27 = v25;
      v27[1] = v26;

      swift_bridgeObjectRelease();
      int v28 = (objc_class *)type metadata accessor for VAConfiguration();
      v37.receiver = v17;
      v37.super_class = v28;
      id v13 = objc_msgSendSuper2(&v37, sel_init);
      sub_2613DD718((uint64_t)v34);
      return (uint64_t)v13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2614C0A44(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_2613C23AC(&qword_26A915FA0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2613DBF24(a1, a1[3]);
  sub_2614C1640();
  uint64_t v9 = sub_2614D60F8();
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  id v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x80))(v9);
  uint64_t v17 = (uint64_t)v11;
  char v19 = 0;
  type metadata accessor for VAStrideConfiguration();
  sub_2614C1850(&qword_26A915FA8, 255, (void (*)(uint64_t))type metadata accessor for VAStrideConfiguration);
  sub_2614D5F58();
  if (v2)
  {
  }
  else
  {

    id v12 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0x98))();
    uint64_t v17 = (uint64_t)v12;
    char v19 = 1;
    sub_2613C23AC(&qword_26A915FB0);
    sub_2614C1694();
    sub_2614D5F58();

    id v13 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xC8))();
    uint64_t v17 = (uint64_t)v13;
    char v19 = 2;
    sub_2613C23AC(&qword_26A915FC0);
    sub_2614C173C();
    sub_2614D5F58();

    uint64_t v17 = (*(uint64_t (**)(void))((*v10 & *v3) + 0xE0))();
    uint64_t v18 = v14;
    char v19 = 3;
    sub_2613C23AC(&qword_26A914A98);
    sub_2614C17E4();
    sub_2614D5F58();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2614C0E00(uint64_t a1, uint64_t a2)
{
  sub_2614C1850(&qword_26A915F88, a2, (void (*)(uint64_t))type metadata accessor for VAConfiguration);
  uint64_t v2 = sub_2614C0EE0();
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v6)
  {
    if (v2 == 0x8000000000000000)
    {
      return 0xD00000000000001CLL;
    }
    else
    {
      sub_2614D5D48();
      sub_2613FA5C8(v3, v5, 1);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_2614C0EE0()
{
  uint64_t v0 = sub_2614D5408();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_2614D4AA8();
  MEMORY[0x270FA5388](v1);
  sub_2614D4AE8();
  swift_allocObject();
  sub_2614D4AD8();
  sub_2613C23AC(&qword_26A914DE0);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2614D81F0;
  sub_2614D4A98();
  sub_2614D4A88();
  sub_2614C1850(&qword_26A914DE8, 255, MEMORY[0x263F06130]);
  sub_2613C23AC(&qword_26A914DF0);
  sub_2613FA5F4();
  sub_2614D5BF8();
  sub_2614D4AB8();
  type metadata accessor for VAConfiguration();
  sub_2614C1850(&qword_26A915FD8, v2, (void (*)(uint64_t))type metadata accessor for VAConfiguration);
  uint64_t v3 = sub_2614D4AC8();
  unint64_t v5 = v4;
  sub_2614D53F8();
  uint64_t v6 = sub_2614D53C8();
  if (v7)
  {
    uint64_t v8 = v6;
    sub_2613C2314(v3, v5);
    swift_release();
  }
  else
  {
    sub_2613C2314(v3, v5);
    swift_release();
    return 0;
  }
  return v8;
}

id VAConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VAConfiguration.init()()
{
}

id VAConfiguration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2614C1318@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 312))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_2614C1354()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x140))();
}

id sub_2614C13B0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v11 = (void **)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig];
  *(void *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  *(void *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  id v12 = (void **)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig];
  *(void *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  id v13 = &v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = 0;
  *(void *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  *(void *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = a1;
  swift_beginAccess();
  uint64_t v14 = *v11;
  *id v11 = a2;
  int v15 = v5;
  id v16 = a1;
  id v17 = a2;

  swift_beginAccess();
  uint64_t v18 = *v12;
  *id v12 = a3;
  id v19 = a3;

  swift_beginAccess();
  *(void *)id v13 = a4;
  *((void *)v13 + 1) = a5;

  swift_bridgeObjectRelease();
  v21.receiver = v15;
  v21.super_class = (Class)type metadata accessor for VAConfiguration();
  return objc_msgSendSuper2(&v21, sel_init);
}

id sub_2614C14F0(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  uint64_t v3 = &v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig];
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  unint64_t v4 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *unint64_t v4 = 0;
  v4[1] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  swift_beginAccess();
  *(void *)uint64_t v3 = a1;
  unint64_t v5 = v1;
  swift_retain();
  uint64_t v6 = swift_release();
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(v6);
  uint64_t v9 = v8;
  swift_beginAccess();
  *unint64_t v4 = v7;
  v4[1] = v9;
  swift_bridgeObjectRelease();
  type metadata accessor for VAStrideConfiguration();
  *(void *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = static VAStrideConfiguration.forTasrConfig(tasrConfig:)();

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for VAConfiguration();
  return objc_msgSendSuper2(&v11, sel_init);
}

unint64_t sub_2614C1640()
{
  unint64_t result = qword_26A91FC90[0];
  if (!qword_26A91FC90[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91FC90);
  }
  return result;
}

unint64_t sub_2614C1694()
{
  unint64_t result = qword_26A915FB8;
  if (!qword_26A915FB8)
  {
    sub_2613C5EC8(&qword_26A915FB0);
    sub_2614C1850(&qword_26A915B48, 255, (void (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915FB8);
  }
  return result;
}

unint64_t sub_2614C173C()
{
  unint64_t result = qword_26A915FC8;
  if (!qword_26A915FC8)
  {
    sub_2613C5EC8(&qword_26A915FC0);
    sub_2614C1850(qword_26A914E00, 255, (void (*)(uint64_t))type metadata accessor for VAResultGeneratorConfiguration);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915FC8);
  }
  return result;
}

unint64_t sub_2614C17E4()
{
  unint64_t result = qword_26A915FD0;
  if (!qword_26A915FD0)
  {
    sub_2613C5EC8(&qword_26A914A98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A915FD0);
  }
  return result;
}

uint64_t sub_2614C1850(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for VAConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VAConfiguration);
}

uint64_t dispatch thunk of VAConfiguration.preSilenceCheckEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VAConfiguration.postSilenceCheckEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VAConfiguration.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of VAConfiguration.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

unsigned char *storeEnumTagSinglePayload for VAConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2614C1A6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VAConfiguration.CodingKeys()
{
  return &type metadata for VAConfiguration.CodingKeys;
}

unint64_t sub_2614C1AA8()
{
  unint64_t result = qword_26A91FEA0[0];
  if (!qword_26A91FEA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91FEA0);
  }
  return result;
}

unint64_t sub_2614C1B00()
{
  unint64_t result = qword_26A91FFB0;
  if (!qword_26A91FFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A91FFB0);
  }
  return result;
}

unint64_t sub_2614C1B58()
{
  unint64_t result = qword_26A91FFB8[0];
  if (!qword_26A91FFB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A91FFB8);
  }
  return result;
}

uint64_t sub_2614C1BAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43656469727473 && a2 == 0xEC0000006769666ELL;
  if (v2 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F436465786966 && a2 == 0xEB00000000676966 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002614E5BD0 || (sub_2614D5FB8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002614E1B10)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_2614D5FB8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_2614C1D90()
{
  swift_beginAccess();
  return *(unsigned int *)(v0 + 516);
}

uint64_t sub_2614C1DC4(int a1)
{
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v1 + 516) = a1;
  return result;
}

uint64_t (*sub_2614C1E04())()
{
  return j__swift_endAccess;
}

unint64_t VATransducer.__allocating_init(config:debug:)(uint64_t a1)
{
  return sub_2614C2EC4(a1);
}

unint64_t VATransducer.init(config:debug:)(uint64_t a1)
{
  return sub_2614C2EC4(a1);
}

uint64_t sub_2614C1EBC()
{
  uint64_t v94 = sub_2614D50C8();
  *(void *)&long long v93 = *(void *)(v94 - 8);
  uint64_t v1 = MEMORY[0x270FA5388](v94);
  int v3 = (void *)((char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = MEMORY[0x270FA5388](v1);
  char v6 = (char *)&v74 - v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v74 - v7;
  int v9 = *(_DWORD *)(v0 + 464);
  sub_26147355C();
  sub_261473574();
  LODWORD(v95) = v9;
  uint64_t v10 = v168;
  sub_26147357C((uint64_t)v158);
  if (v10) {
    return (uint64_t)v3;
  }
  int v91 = v8;
  uint64_t v92 = v6;
  int64_t v168 = v3;
  long long v155 = v158[8];
  long long v156 = v158[9];
  uint64_t v157 = v159;
  long long v151 = v158[4];
  long long v152 = v158[5];
  long long v153 = v158[6];
  long long v154 = v158[7];
  long long v147 = v158[0];
  long long v148 = v158[1];
  long long v149 = v158[2];
  long long v150 = v158[3];
  sub_261473568();
  sub_261473574();
  sub_26147357C((uint64_t)v160);
  long long v144 = v160[8];
  long long v145 = v160[9];
  uint64_t v146 = v161;
  long long v140 = v160[4];
  long long v141 = v160[5];
  long long v142 = v160[6];
  long long v143 = v160[7];
  long long v136 = v160[0];
  long long v137 = v160[1];
  long long v138 = v160[2];
  long long v139 = v160[3];
  sub_261473574();
  sub_26147357C((uint64_t)v162);
  long long v133 = v162[8];
  long long v134 = v162[9];
  uint64_t v135 = v163;
  long long v129 = v162[4];
  long long v130 = v162[5];
  long long v131 = v162[6];
  long long v132 = v162[7];
  long long v125 = v162[0];
  long long v126 = v162[1];
  long long v127 = v162[2];
  long long v128 = v162[3];
  sub_261473574();
  sub_26147357C((uint64_t)v164);
  uint64_t v90 = (uint64_t *)v0;
  long long v122 = v164[8];
  long long v123 = v164[9];
  uint64_t v124 = v165;
  long long v118 = v164[4];
  long long v119 = v164[5];
  long long v120 = v164[6];
  long long v121 = v164[7];
  long long v114 = v164[0];
  long long v115 = v164[1];
  long long v116 = v164[2];
  long long v117 = v164[3];
  sub_261473574();
  sub_26147357C((uint64_t)v166);
  uint64_t v95 = 0;
  long long v110 = v166[7];
  long long v111 = v166[8];
  long long v112 = v166[9];
  long long v106 = v166[3];
  long long v107 = v166[4];
  long long v108 = v166[5];
  long long v109 = v166[6];
  long long v103 = v166[0];
  uint64_t v113 = v167;
  long long v104 = v166[1];
  long long v105 = v166[2];
  unint64_t v12 = sub_2614731C4();
  float v13 = 0.0;
  uint64_t v14 = sub_2613D1B04(v12, 0);
  uint64_t v101 = 0;
  uint64_t v102 = v14;
  int v15 = v90;
  id v16 = (uint64_t (**)(void))(*v90 + 824);
  uint64_t v87 = *v16;
  uint64_t v17 = *(void *)(v87() + 16);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    int v3 = (void *)MEMORY[0x263F8EE78];
LABEL_54:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  uint64_t v18 = *(int (**)(void))(*v15 + 968);
  uint64_t v88 = *v15 + 968;
  unint64_t v89 = v18;
  uint64_t v86 = v15[55];
  uint64_t v19 = swift_beginAccess();
  unint64_t v20 = 0;
  uint64_t v84 = (void (**)(char *, uint64_t))(v93 + 8);
  uint64_t v85 = (void (**)(char *, uint64_t, uint64_t))(v93 + 16);
  char v81 = &v97;
  int v3 = (void *)MEMORY[0x263F8EE78];
  char v80 = &v98;
  *((void *)&v21 + 1) = 2;
  long long v93 = xmmword_2614D81E0;
  *(void *)&long long v21 = 136315394;
  long long v79 = v21;
  uint64_t v78 = MEMORY[0x263F8EE58] + 8;
  *(void *)&long long v21 = 134218240;
  long long v77 = v21;
  *(void *)&long long v21 = 67109120;
  long long v74 = v21;
  double v83 = v16;
  for (uint64_t i = ((uint64_t (*)(uint64_t))v87)(v19); ; uint64_t i = ((uint64_t (*)(uint64_t))v24)(v27))
  {
    if ((v20 & 0x8000000000000000) != 0) {
      goto LABEL_58;
    }
    if (v20 >= *(void *)(i + 16)) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_2613C23AC(&qword_26A914AC0);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = v93;
    *(float *)(v28 + 32) = (float)v89();
    sub_2613CC7E4();
    swift_bridgeObjectRelease();
    uint64_t v29 = v95;
    sub_2614734AC(v86);
    if (v29)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    sub_2613D7400();
    swift_bridgeObjectRetain();
    sub_2613CC7E4();
    swift_bridgeObjectRelease();
    sub_2613CC7E4();
    swift_bridgeObjectRelease();
    sub_2614734AC(v15[45]);
    uint64_t v30 = v126;
    if ((v126 & 0x8000000000000000) != 0) {
      goto LABEL_64;
    }
    if ((void)v126)
    {
      uint64_t v31 = sub_2614D56C8();
      *(void *)(v31 + 16) = v30;
      bzero((void *)(v31 + 32), 4 * v30);
      int v15 = v90;
    }
    else
    {
      uint64_t v31 = MEMORY[0x263F8EE78];
    }
    uint64_t v100 = v31;
    sub_2613D7400();
    unsigned int v99 = 0;
    uint64_t v32 = v100;
    uint64_t v33 = *(void *)(v100 + 16);
    if (!v33) {
      goto LABEL_60;
    }
    float v34 = *(float *)(v100 + 32);
    uint64_t v35 = v33 - 1;
    uint64_t v95 = 0;
    if (v33 != 1)
    {
      swift_beginAccess();
      uint64_t v45 = 0;
      uint64_t v46 = v32 + 36;
      do
      {
        uint64_t v47 = v45 + 1;
        if (v34 < *(float *)(v46 + 4 * v45))
        {
          if (v47 < (uint64_t)0xFFFFFFFF80000000)
          {
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          if (v47 > 0x7FFFFFFF) {
            goto LABEL_57;
          }
          unsigned int v99 = v45 + 1;
          float v34 = *(float *)(v46 + 4 * v45);
        }
        ++v45;
      }
      while (v35 != v47);
    }
    uint64_t v36 = swift_beginAccess();
    uint64_t v37 = (int)v99;
    if (v99)
    {
      if (__OFADD__(v101, 1)) {
        goto LABEL_61;
      }
      ++v101;
      uint64_t v38 = (uint64_t (*)(void))v89;
      if (((unsigned int (*)(uint64_t))v89)(v36) == v37)
      {
        int v39 = v38();
        uint64_t v40 = (*(uint64_t (**)(void))(*v15 + 536))();
        if (*(void *)(v40 + 16) && (unint64_t v41 = sub_2613D8F78(v39), (v42 & 1) != 0))
        {
          char v43 = (uint64_t *)(*(void *)(v40 + 56) + 16 * v41);
          unint64_t v44 = v43[1];
          uint64_t v82 = *v43;
          swift_bridgeObjectRetain();
        }
        else
        {
          unint64_t v44 = 0xE700000000000000;
          uint64_t v82 = 0x6E776F6E6B6E55;
        }
        swift_bridgeObjectRelease();
        uint64_t v57 = sub_26146718C();
        uint64_t v58 = v91;
        uint64_t v59 = v94;
        (*v85)(v91, v57, v94);
        swift_bridgeObjectRetain();
        uint64_t v60 = sub_2614D50A8();
        os_log_type_t v61 = sub_2614D5978();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc();
          os_log_t v76 = v60;
          uint64_t v63 = v62;
          uint64_t v64 = swift_slowAlloc();
          uint64_t v97 = v64;
          *(_DWORD *)uint64_t v63 = v79;
          uint64_t v75 = v63 + 4;
          swift_bridgeObjectRetain();
          uint64_t v96 = sub_2613D875C(v82, v44, &v97);
          sub_2614D5B58();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v63 + 12) = 2048;
          uint64_t v96 = v101;
          sub_2614D5B58();
          os_log_t v65 = v76;
          _os_log_impl(&dword_2613B8000, v76, v61, "Ignoring repeated symbol %s, non-blank cycle count %ld", (uint8_t *)v63, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x263E38060](v64, -1, -1);
          MEMORY[0x263E38060](v63, -1, -1);

          (*v84)(v58, v94);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*v84)(v58, v59);
        }
        uint64_t v24 = v87;
        int v15 = v90;
      }
      else
      {
        uint64_t v48 = (*(uint64_t (**)(void))(*v15 + 536))();
        if (*(void *)(v48 + 16) && (unint64_t v49 = sub_2613D8F78(v37), (v50 & 1) != 0))
        {
          uint64_t v51 = (uint64_t *)(*(void *)(v48 + 56) + 16 * v49);
          uint64_t v53 = *v51;
          uint64_t v52 = v51[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v3 = sub_2613D864C(0, v3[2] + 1, 1, v3);
          }
          unint64_t v55 = v3[2];
          unint64_t v54 = v3[3];
          if (v55 >= v54 >> 1) {
            int v3 = sub_2613D864C((void *)(v54 > 1), v55 + 1, 1, v3);
          }
          v3[2] = v55 + 1;
          double v56 = &v3[2 * v55];
          v56[4] = v53;
          v56[5] = v52;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v66 = sub_26146718C();
          (*v85)(v92, v66, v94);
          uint64_t v67 = sub_2614D50A8();
          os_log_type_t v68 = sub_2614D5978();
          if (os_log_type_enabled(v67, v68))
          {
            uint64_t v69 = swift_slowAlloc();
            *(_DWORD *)uint64_t v69 = v74;
            *(_DWORD *)(v69 + 4) = v99;
            _os_log_impl(&dword_2613B8000, v67, v68, "No symbol for %d", (uint8_t *)v69, 8u);
            MEMORY[0x263E38060](v69, -1, -1);
          }

          (*v84)(v92, v94);
        }
        (*(void (**)(void))(*v15 + 976))(v99);
        uint64_t v24 = v87;
      }
      if (v101 >= 2)
      {
        uint64_t v70 = sub_26146718C();
        (*v85)((char *)v168, v70, v94);
        uint64_t v71 = sub_2614D50A8();
        os_log_type_t v72 = sub_2614D5978();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = swift_slowAlloc();
          *(_DWORD *)uint64_t v73 = v77;
          uint64_t v97 = v101;
          sub_2614D5B58();
          *(_WORD *)(v73 + 12) = 2048;
          uint64_t v97 = 2;
          int v15 = v90;
          sub_2614D5B58();
          _os_log_impl(&dword_2613B8000, v71, v72, "Escaping loop... non-blank cycle count %ld >= %ld", (uint8_t *)v73, 0x16u);
          MEMORY[0x263E38060](v73, -1, -1);
        }

        (*v84)((char *)v168, v94);
        BOOL v23 = __OFADD__(v20++, 1);
        uint64_t v24 = v87;
        if (v23) {
          goto LABEL_63;
        }
        uint64_t v101 = 0;
        (*(void (**)(void))(*v15 + 976))(0);
      }
    }
    else
    {
      uint64_t v101 = 0;
      BOOL v23 = __OFADD__(v20++, 1);
      if (v23) {
        goto LABEL_62;
      }
      uint64_t v24 = v87;
    }
    float v13 = v13 + v34;
    uint64_t v25 = swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(((uint64_t (*)(uint64_t))v24)(v25) + 16);
    uint64_t v27 = swift_bridgeObjectRelease();
    if ((uint64_t)v20 >= v26) {
      goto LABEL_54;
    }
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  uint64_t result = sub_2614D5D58();
  __break(1u);
  return result;
}

uint64_t sub_2614C2D34()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t VATransducer.deinit()
{
  uint64_t v0 = VACTCEncoder.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VATransducer.__deallocating_deinit()
{
  VACTCEncoder.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2614C2E9C()
{
  return (*(uint64_t (**)(void))(v0 + 992))();
}

unint64_t sub_2614C2EC4(uint64_t a1)
{
  void *(*v48)(uint64_t *__return_ptr);
  uint64_t v49;
  long long v50;
  uint64_t v51;
  int v52;
  long long v53;
  uint64_t v54;
  long long v55;
  char v56;
  char v57;
  uint64_t v58;

  uint64_t v3 = v2;
  uint64_t v4 = v1;
  *(_DWORD *)(v1 + 516) = 0;
  char v6 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 384);
  uint64_t v7 = swift_retain();
  unint64_t v8 = a1;
  uint64_t v9 = v6(v7);
  if (!v10)
  {
    swift_release();
    sub_2613DC2B8();
    swift_allocError();
    unint64_t v26 = 0xD000000000000021;
    uint64_t v27 = "VATransducer needs labelModelPath";
LABEL_7:
    *uint64_t v25 = v26;
    v25[1] = (unint64_t)(v27 - 32) | 0x8000000000000000;
    swift_willThrow();
    goto LABEL_8;
  }
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  unint64_t v8 = a1;
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)a1 + 408))();
  if (!v14)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_2613DC2B8();
    swift_allocError();
    unint64_t v26 = 0xD000000000000022;
    uint64_t v27 = "VATransducer needs joinerModelPath";
    goto LABEL_7;
  }
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  unint64_t v49 = v11;
  uint64_t v17 = type metadata accessor for VAEspressoUtils();
  uint64_t v48 = *(void *(**)(uint64_t *__return_ptr))(*(void *)a1 + 336);
  uint64_t v18 = v48(&v58);
  uint64_t v57 = v58;
  uint64_t v47 = *(uint64_t (**)(void *))(*(void *)a1 + 360);
  uint64_t v19 = v47(v18);
  uint64_t v20 = v3;
  uint64_t v22 = v21;
  char v23 = sub_2613D04A8();
  uint64_t v24 = v19;
  unint64_t v8 = v17;
  static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(v15, v16, &v57, v24, v22, v23 & 1, &v50);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = swift_bridgeObjectRelease();
    uint64_t v30 = v51;
    int v31 = v52;
    long long v32 = v53;
    uint64_t v33 = v54;
    char v34 = v56;
    *(_OWORD *)(v4 + 360) = v50;
    *(void *)(v4 + 376) = v30;
    *(_DWORD *)(v4 + 384) = v31;
    *(_OWORD *)(v4 + 392) = v32;
    *(void *)(v4 + 408) = v33;
    *(_OWORD *)(v4 + 416) = v55;
    *(unsigned char *)(v4 + 432) = v34;
    uint64_t v35 = ((void *(*)(uint64_t *__return_ptr, uint64_t))v48)(&v58, v29);
    uint64_t v57 = v58;
    uint64_t v36 = v47(v35);
    uint64_t v38 = v37;
    char v39 = sub_2613D04A8();
    static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(v49, v12, &v57, v36, v38, v39 & 1, &v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = v51;
    int v41 = v52;
    long long v42 = v53;
    uint64_t v43 = v54;
    char v44 = v56;
    *(_OWORD *)(v4 + 440) = v50;
    *(void *)(v4 + 456) = v40;
    *(_DWORD *)(v4 + 464) = v41;
    *(_OWORD *)(v4 + 472) = v42;
    *(void *)(v4 + 488) = v43;
    *(_OWORD *)(v4 + 496) = v55;
    *(unsigned char *)(v4 + 512) = v44;
    swift_release();
    swift_retain();
    char v45 = sub_2613D04A8();
    unint64_t v8 = sub_2613D0508(a1, v45 & 1);
    uint64_t v46 = *(void (**)(uint64_t, unint64_t))(*(void *)v8 + 856);
    swift_retain();
    v46(0x5F7265646F636E65, 0xEB0000000074756FLL);
    swift_release();
    swift_release();
    return v8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_8:
  swift_release();
  type metadata accessor for VATransducer();
  swift_deallocPartialClassInstance();
  return v8;
}

uint64_t type metadata accessor for VATransducer()
{
  return self;
}

uint64_t method lookup function for VATransducer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VATransducer);
}

uint64_t dispatch thunk of VATransducer.__allocating_init(config:debug:)()
{
  return (*(uint64_t (**)(void))(v0 + 992))();
}

double ConvertMachTimeToSeconds(unint64_t a1)
{
  if (qword_26A920050 != -1) {
    dispatch_once(&qword_26A920050, &unk_270D59DA8);
  }
  return *(double *)&qword_26A920040 * (double)a1;
}

double sub_2614C3D20()
{
  if (!mach_timebase_info((mach_timebase_info_t)&dword_26A920048))
  {
    LODWORD(result) = dword_26A920048;
    LODWORD(v1) = *(_DWORD *)algn_26A92004C;
    double result = (double)*(unint64_t *)&result / (double)v1 / 1000000000.0;
    qword_26A920040 = *(void *)&result;
  }
  return result;
}

void sub_2614C3E0C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2614C3EE8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_2614C3E60(uint64_t a1)
{
  sub_2614C3E9C(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2614C3E9C(void **__p)
{
  if (__p)
  {
    unint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      unint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_2614C3EE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 49) < 0) {
      operator delete(*(void **)(i - 72));
    }
  }
  a1[1] = v2;
}

void sub_2614C4004(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2614C40B4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_2614C419C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2614C4DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_2614C572C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2614C6110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, _Unwind_Exception *exception_object)
{
  if (v19) {
    operator delete(v19);
  }

  _Unwind_Resume(a1);
}

void sub_2614C637C()
{
}

void *sub_2614C6394(unint64_t a1)
{
  if (a1 >> 62) {
    sub_2614C7990();
  }
  return operator new(4 * a1);
}

BOOL sub_2614C63CC(uint64_t a1, int a2, char *a3, char *a4, int a5, int a6, _DWORD *a7, _DWORD *a8, float a9)
{
  unint64_t v9 = *(void *)(a1 + 64);
  if (v9 >= a2) {
    __assert_rtn("VerifySilenceAfter", "OnlineFstSpottingDecoder.hpp", 437, "frame_num > speech_frame_offset");
  }
  uint64_t v11 = a4;
  unint64_t v12 = a3;
  uint64_t v14 = a4 - a3;
  if (a4 != a3)
  {
    unint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    unint64_t v17 = v15 + v16;
    unint64_t v18 = (v15 + v16) >> 10;
    uint64_t v20 = *(char **)(a1 + 16);
    uint64_t v19 = *(char **)(a1 + 24);
    uint64_t v21 = &v20[8 * v18];
    int64_t v22 = v19 - v20;
    if (v19 == v20)
    {
      uint64_t v23 = 0;
      uint64_t v26 = 0;
      unint64_t v24 = v15 >> 10;
      uint64_t v25 = &v20[8 * (v15 >> 10)];
    }
    else
    {
      uint64_t v23 = *(void *)v21 + 4 * (v17 & 0x3FF);
      unint64_t v24 = v15 >> 10;
      uint64_t v25 = &v20[8 * (v15 >> 10)];
      uint64_t v26 = *(void *)v25 + 4 * (v15 & 0x3FF);
    }
    unint64_t v241 = v14 >> 2;
    int v240 = a6;
    uint64_t v238 = a7;
    char v239 = a8;
    int v236 = a2;
    int v237 = a5;
    if (v23 == v26) {
      unint64_t v27 = 0;
    }
    else {
      unint64_t v27 = ((v23 - *(void *)v21) >> 2) + ((v21 - v25) << 7) - ((v26 - *(void *)v25) >> 2);
    }
    uint64_t v28 = (void *)(a1 + 8);
    if (v27 < v16 - v27)
    {
      unint64_t v29 = v14 >> 2;
      unint64_t v234 = v27;
      if (v241 > v15)
      {
        uint64_t v30 = v19 - v20;
        if (v19 == v20) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = (v22 << 7) - 1;
        }
        if (v19 == v20) {
          unint64_t v32 = v241 - v15 + 1;
        }
        else {
          unint64_t v32 = v241 - v15;
        }
        if ((v32 & 0x3FF) != 0) {
          unint64_t v33 = (v32 >> 10) + 1;
        }
        else {
          unint64_t v33 = v32 >> 10;
        }
        unint64_t v34 = v31 - v17;
        if (v33 >= v34 >> 10) {
          unint64_t v35 = v34 >> 10;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v33 <= v34 >> 10)
        {
          for (*(void *)(a1 + 40) = v15 + (v35 << 10); v35; --v35)
          {
            uint64_t v57 = *(void *)(a1 + 24);
            v245.n128_u64[0] = *(void *)(v57 - 8);
            *(void *)(a1 + 24) = v57 - 8;
            sub_2614C7864(a1 + 8, &v245);
          }
        }
        else
        {
          unint64_t v36 = v33 - v35;
          uint64_t v37 = *(char **)(a1 + 8);
          uint64_t v38 = *(void *)(a1 + 32) - (void)v37;
          if (v33 - v35 <= (v38 >> 3) - (v30 >> 3))
          {
            if (v36)
            {
              unint64_t v80 = v27;
              if (v20 == v37)
              {
LABEL_79:
                unint64_t v83 = v36;
                do
                {
                  v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
                  sub_2614C7750((void *)(a1 + 8), &v245);
                  --v83;
                }
                while (v83);
                v35 += v36;
                unint64_t v15 = *(void *)(a1 + 40);
              }
              else
              {
                while (1)
                {
                  v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
                  sub_2614C7864(a1 + 8, &v245);
                  uint64_t v81 = *(void *)(a1 + 16);
                  uint64_t v82 = *(void *)(a1 + 24) - v81 == 8 ? 1023 : 1024;
                  unint64_t v15 = v82 + *(void *)(a1 + 40);
                  *(void *)(a1 + 40) = v15;
                  if (!--v36) {
                    break;
                  }
                  if (v81 == *v28) {
                    goto LABEL_79;
                  }
                }
              }
              unint64_t v27 = v80;
            }
            for (*(void *)(a1 + 40) = v15 + (v35 << 10); v35; --v35)
            {
              uint64_t v84 = *(void *)(a1 + 24);
              v245.n128_u64[0] = *(void *)(v84 - 8);
              *(void *)(a1 + 24) = v84 - 8;
              sub_2614C7864(a1 + 8, &v245);
            }
          }
          else
          {
            BOOL v39 = v19 == v20;
            unint64_t v40 = v33 << 10;
            if (v38 >> 2 <= v36 + (v30 >> 3)) {
              unint64_t v41 = v36 + (v30 >> 3);
            }
            else {
              unint64_t v41 = v38 >> 2;
            }
            uint64_t v247 = a1 + 32;
            if (v41) {
              unint64_t v41 = (unint64_t)sub_2614C7718(v41);
            }
            else {
              uint64_t v42 = 0;
            }
            unint64_t v85 = v40 - v39;
            v245.n128_u64[0] = v41;
            v245.n128_u64[1] = v41;
            *(void *)&long long v246 = v41;
            *((void *)&v246 + 1) = v41 + 8 * v42;
            do
            {
              char v244 = operator new(0x1000uLL);
              sub_2614C7750(&v245, &v244);
              --v36;
            }
            while (v36);
            unint64_t v232 = v85;
            uint64_t v86 = *(void *)(a1 + 24);
            for (uint64_t i = (char *)v246; v35; --v35)
            {
              if (i == *((char **)&v246 + 1))
              {
                uint64_t v88 = (char *)v245.n128_u64[1];
                unint64_t v89 = (void *)v245.n128_u64[0];
                if (v245.n128_u64[1] <= v245.n128_u64[0])
                {
                  if (i == (char *)v245.n128_u64[0]) {
                    unint64_t v96 = 1;
                  }
                  else {
                    unint64_t v96 = (uint64_t)&i[-v245.n128_u64[0]] >> 2;
                  }
                  uint64_t v97 = (char *)sub_2614C7718(v96);
                  uint64_t v100 = i - v88;
                  BOOL v99 = i == v88;
                  uint64_t i = &v97[8 * (v96 >> 2)];
                  if (!v99)
                  {
                    uint64_t i = &v97[8 * (v96 >> 2) + (v100 & 0xFFFFFFFFFFFFFFF8)];
                    uint64_t v101 = 8 * (v100 >> 3);
                    uint64_t v102 = &v97[8 * (v96 >> 2)];
                    do
                    {
                      uint64_t v103 = *(void *)v88;
                      v88 += 8;
                      *(void *)uint64_t v102 = v103;
                      v102 += 8;
                      v101 -= 8;
                    }
                    while (v101);
                  }
                  v245.n128_u64[0] = (unint64_t)v97;
                  v245.n128_u64[1] = (unint64_t)&v97[8 * (v96 >> 2)];
                  *(void *)&long long v246 = i;
                  *((void *)&v246 + 1) = &v97[8 * v98];
                  if (v89) {
                    operator delete(v89);
                  }
                }
                else
                {
                  uint64_t v90 = (uint64_t)(v245.n128_u64[1] - v245.n128_u64[0]) >> 3;
                  if (v90 >= -1) {
                    uint64_t v91 = v90 + 1;
                  }
                  else {
                    uint64_t v91 = v90 + 2;
                  }
                  unint64_t v92 = v245.n128_u64[1] - 8 * (v91 >> 1);
                  size_t v93 = (size_t)&i[-v245.n128_u64[1]];
                  if (i != (char *)v245.n128_u64[1])
                  {
                    uint64_t v94 = (void *)(v245.n128_u64[1] - 8 * (v91 >> 1));
                    memmove(v94, (const void *)v245.n128_u64[1], v93);
                    unint64_t v92 = (unint64_t)v94;
                    uint64_t i = v88;
                  }
                  unint64_t v95 = (unint64_t)&i[-8 * (v91 >> 1)];
                  uint64_t i = (char *)(v92 + v93);
                  v245.n128_u64[1] = v95;
                  *(void *)&long long v246 = v92 + v93;
                }
              }
              *(void *)uint64_t i = *(void *)(v86 - 8);
              uint64_t i = (char *)(v246 + 8);
              *(void *)&long long v246 = v246 + 8;
              uint64_t v86 = *(void *)(a1 + 24) - 8;
              *(void *)(a1 + 24) = v86;
            }
            long long v104 = *(uint64_t **)(a1 + 16);
            if (v104 == (uint64_t *)v86)
            {
              long long v104 = (uint64_t *)v86;
            }
            else
            {
              do
              {
                if (i == *((char **)&v246 + 1))
                {
                  long long v105 = (char *)v245.n128_u64[1];
                  long long v106 = (void *)v245.n128_u64[0];
                  if (v245.n128_u64[1] <= v245.n128_u64[0])
                  {
                    if (i == (char *)v245.n128_u64[0]) {
                      unint64_t v112 = 1;
                    }
                    else {
                      unint64_t v112 = (uint64_t)&i[-v245.n128_u64[0]] >> 2;
                    }
                    uint64_t v113 = (char *)sub_2614C7718(v112);
                    uint64_t v115 = i - v105;
                    BOOL v99 = i == v105;
                    uint64_t i = &v113[8 * (v112 >> 2)];
                    if (!v99)
                    {
                      uint64_t i = &v113[8 * (v112 >> 2) + (v115 & 0xFFFFFFFFFFFFFFF8)];
                      uint64_t v116 = 8 * (v115 >> 3);
                      long long v117 = &v113[8 * (v112 >> 2)];
                      do
                      {
                        uint64_t v118 = *(void *)v105;
                        v105 += 8;
                        *(void *)long long v117 = v118;
                        v117 += 8;
                        v116 -= 8;
                      }
                      while (v116);
                    }
                    v245.n128_u64[0] = (unint64_t)v113;
                    v245.n128_u64[1] = (unint64_t)&v113[8 * (v112 >> 2)];
                    *(void *)&long long v246 = i;
                    *((void *)&v246 + 1) = &v113[8 * v114];
                    if (v106) {
                      operator delete(v106);
                    }
                  }
                  else
                  {
                    uint64_t v107 = (uint64_t)(v245.n128_u64[1] - v245.n128_u64[0]) >> 3;
                    if (v107 >= -1) {
                      uint64_t v108 = v107 + 1;
                    }
                    else {
                      uint64_t v108 = v107 + 2;
                    }
                    unint64_t v109 = v245.n128_u64[1] - 8 * (v108 >> 1);
                    long long v110 = &i[-v245.n128_u64[1]];
                    if (i != (char *)v245.n128_u64[1])
                    {
                      memmove((void *)(v245.n128_u64[1] - 8 * (v108 >> 1)), (const void *)v245.n128_u64[1], (size_t)&i[-v245.n128_u64[1]]);
                      uint64_t i = v105;
                    }
                    unint64_t v111 = (unint64_t)&i[-8 * (v108 >> 1)];
                    uint64_t i = &v110[v109];
                    v245.n128_u64[1] = v111;
                    *(void *)&long long v246 = &v110[v109];
                  }
                }
                uint64_t v119 = *v104++;
                *(void *)uint64_t i = v119;
                uint64_t i = (char *)(v246 + 8);
                *(void *)&long long v246 = v246 + 8;
              }
              while (v104 != *(uint64_t **)(a1 + 24));
              uint64_t v86 = *(void *)(a1 + 16);
            }
            long long v140 = *(void **)(a1 + 8);
            *(__n128 *)(a1 + 8) = v245;
            v245.n128_u64[0] = (unint64_t)v140;
            v245.n128_u64[1] = v86;
            *(void *)&long long v246 = v104;
            uint64_t v141 = *((void *)&v246 + 1);
            *(void *)(a1 + 24) = i;
            *(void *)(a1 + 32) = v141;
            *(void *)(a1 + 40) += v232;
            if (v140) {
              operator delete(v140);
            }
            unint64_t v27 = v234;
          }
        }
        unint64_t v15 = *(void *)(a1 + 40);
        uint64_t v20 = *(char **)(a1 + 16);
        uint64_t v19 = *(char **)(a1 + 24);
        unint64_t v24 = v15 >> 10;
        unint64_t v29 = v241;
      }
      long long v142 = (void **)&v20[8 * v24];
      if (v19 == v20) {
        long long v143 = 0;
      }
      else {
        long long v143 = (char *)*v142 + 4 * (v15 & 0x3FF);
      }
      if (v29 > v27)
      {
        long long v144 = &v12[4 * (v29 - v27)];
        if (v27 < v29 >> 1) {
          long long v144 = &v11[-4 * v27];
        }
        if (v144 != v12)
        {
          uint64_t v145 = *(void *)(a1 + 48);
          uint64_t v146 = (char *)*v142;
          long long v147 = v144;
          long long v148 = v142;
          long long v149 = v143;
          do
          {
            if (v149 == v146)
            {
              long long v150 = (char *)*--v148;
              uint64_t v146 = v150;
              long long v149 = v150 + 4096;
            }
            int v151 = *((_DWORD *)v147 - 1);
            v147 -= 4;
            *((_DWORD *)v149 - 1) = v151;
            v149 -= 4;
            --v15;
            ++v145;
          }
          while (v147 != v12);
          *(void *)(a1 + 40) = v15;
          *(void *)(a1 + 48) = v145;
          unint64_t v12 = v144;
          unint64_t v29 = v234;
          if (!v234) {
            goto LABEL_258;
          }
          goto LABEL_177;
        }
        unint64_t v29 = v27;
      }
      long long v149 = v143;
      long long v148 = (void **)&v20[8 * v24];
      if (v29)
      {
LABEL_177:
        unint64_t v152 = v29;
        long long v153 = (void **)sub_2614C733C(v142, (uint64_t)v143, v29);
        long long v155 = v154;
        if (v143 != v154)
        {
          int64x2_t v156 = *(int64x2_t *)(a1 + 40);
          uint64_t v157 = (char *)*v148;
          unint64_t v158 = v153;
          uint64_t v159 = v154;
          do
          {
            if (v149 == v157)
            {
              uint64_t v160 = (char *)*--v148;
              uint64_t v157 = v160;
              long long v149 = v160 + 4096;
            }
            if (v159 == *v158)
            {
              uint64_t v161 = (uint64_t)*--v158;
              uint64_t v159 = (char *)(v161 + 4096);
            }
            int v162 = *((_DWORD *)v159 - 1);
            v159 -= 4;
            *((_DWORD *)v149 - 1) = v162;
            v149 -= 4;
            int64x2_t v156 = vaddq_s64(v156, (int64x2_t)xmmword_2614DF8D0);
          }
          while (v159 != v143);
          *(int64x2_t *)(a1 + 40) = v156;
        }
        if (v152 < v234)
        {
          v163.n128_u64[0] = (unint64_t)v142;
          v163.n128_u64[1] = (unint64_t)v143;
          __n128 v242 = v163;
          uint64_t v164 = (uint64_t *)v153;
          uint64_t v165 = sub_2614C733C(v142, (uint64_t)v143, v234);
          __n128 v245 = v242;
          sub_2614C7390(v164, v155, v165, v166, (uint64_t)&v245);
          long long v143 = (char *)v245.n128_u64[1];
          long long v142 = (void **)v245.n128_u64[0];
        }
        if (v12 != v11)
        {
          uint64_t v169 = *v142;
          int64_t v168 = v142 + 1;
          uint64_t v167 = v169;
          while (1)
          {
            uint64_t v170 = v167 - v143 + 4096;
            if ((v11 - v12) >> 2 >= v170 >> 2) {
              uint64_t v171 = v170 >> 2;
            }
            else {
              uint64_t v171 = (v11 - v12) >> 2;
            }
            if (v171) {
              memmove(v143, v12, 4 * v171);
            }
            v12 += 4 * v171;
            if (v12 == v11) {
              break;
            }
            uint64_t v172 = *v168++;
            uint64_t v167 = v172;
            long long v143 = v172;
          }
        }
      }
LABEL_258:
      int v224 = *(_DWORD *)(a1 + 48) - *(_DWORD *)(a1 + 56);
      if (v224 < 1)
      {
        unint64_t v9 = *(void *)(a1 + 64);
      }
      else
      {
        unsigned int v225 = v224 + 1;
        do
        {
          *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_2614DF8E0);
          sub_2614C72E4(a1 + 8);
          unint64_t v9 = *(void *)(a1 + 64) + 1;
          *(void *)(a1 + 64) = v9;
          --v225;
        }
        while (v225 > 1);
      }
      a6 = v240;
      a7 = v238;
      a8 = v239;
      a2 = v236;
      a5 = v237;
      goto LABEL_264;
    }
    uint64_t v43 = (v22 << 7) - 1;
    uint64_t v44 = v19 - v20;
    if (v19 == v20) {
      uint64_t v43 = 0;
    }
    unint64_t v45 = v43 - v17;
    BOOL v46 = v241 >= v45;
    unint64_t v47 = v241 - v45;
    if (v47 != 0 && v46)
    {
      if (v19 == v20) {
        unint64_t v48 = v47 + 1;
      }
      else {
        unint64_t v48 = v47;
      }
      if ((v48 & 0x3FF) != 0) {
        unint64_t v49 = (v48 >> 10) + 1;
      }
      else {
        unint64_t v49 = v48 >> 10;
      }
      if (v49 >= v24) {
        unint64_t v50 = v24;
      }
      else {
        unint64_t v50 = v49;
      }
      unint64_t v235 = v27;
      if (v49 <= v24)
      {
        for (*(void *)(a1 + 40) = v15 - (v50 << 10); v50; --v50)
        {
          uint64_t v58 = *(void **)(a1 + 16);
          uint64_t v61 = *v58;
          uint64_t v59 = (char *)(v58 + 1);
          uint64_t v60 = v61;
          *(void *)(a1 + 16) = v59;
          if (v19 == *(char **)(a1 + 32))
          {
            uint64_t v62 = (uint64_t)&v59[-*v28];
            if ((unint64_t)v59 <= *v28)
            {
              if (v19 == (char *)*v28) {
                unint64_t v70 = 1;
              }
              else {
                unint64_t v70 = (uint64_t)&v19[-*v28] >> 2;
              }
              uint64_t v71 = (char *)sub_2614C7718(v70);
              uint64_t v73 = &v71[8 * (v70 >> 2)];
              long long v74 = *(uint64_t **)(a1 + 16);
              uint64_t v19 = v73;
              uint64_t v75 = *(void *)(a1 + 24) - (void)v74;
              if (v75)
              {
                uint64_t v19 = &v73[v75 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v76 = 8 * (v75 >> 3);
                long long v77 = &v71[8 * (v70 >> 2)];
                do
                {
                  uint64_t v78 = *v74++;
                  *(void *)long long v77 = v78;
                  v77 += 8;
                  v76 -= 8;
                }
                while (v76);
              }
              long long v79 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v71;
              *(void *)(a1 + 16) = v73;
              *(void *)(a1 + 24) = v19;
              *(void *)(a1 + 32) = &v71[8 * v72];
              if (v79)
              {
                operator delete(v79);
                uint64_t v19 = *(char **)(a1 + 24);
              }
            }
            else
            {
              uint64_t v63 = v62 >> 3;
              BOOL v64 = v62 >> 3 < -1;
              uint64_t v65 = (v62 >> 3) + 2;
              if (v64) {
                uint64_t v66 = v65;
              }
              else {
                uint64_t v66 = v63 + 1;
              }
              uint64_t v67 = &v59[-8 * (v66 >> 1)];
              int64_t v68 = v19 - v59;
              if (v19 != v59)
              {
                memmove(&v59[-8 * (v66 >> 1)], v59, v19 - v59);
                uint64_t v19 = *(char **)(a1 + 16);
              }
              uint64_t v69 = &v19[-8 * (v66 >> 1)];
              uint64_t v19 = &v67[v68];
              *(void *)(a1 + 16) = v69;
              *(void *)(a1 + 24) = &v67[v68];
            }
          }
          *(void *)uint64_t v19 = v60;
          uint64_t v19 = (char *)(*(void *)(a1 + 24) + 8);
          *(void *)(a1 + 24) = v19;
        }
      }
      else
      {
        unint64_t v51 = v49 - v50;
        uint64_t v52 = *(void *)(a1 + 32) - *(void *)(a1 + 8);
        if (v51 <= (v52 >> 3) - (v44 >> 3))
        {
          if (v51)
          {
            while (*(void *)(a1 + 32) != *(void *)(a1 + 24))
            {
              v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
              sub_2614C7750((void *)(a1 + 8), &v245);
              if (!--v51)
              {
                uint64_t v19 = *(char **)(a1 + 24);
                goto LABEL_203;
              }
            }
            for (uint64_t j = 0; j != v51; ++j)
            {
              v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
              sub_2614C7864(a1 + 8, &v245);
              uint64_t v19 = *(char **)(a1 + 24);
              if (&v19[-*(void *)(a1 + 16)] == (char *)8) {
                uint64_t v174 = 1023;
              }
              else {
                uint64_t v174 = 1024;
              }
              uint64_t v175 = v174 + *(void *)(a1 + 40);
              *(void *)(a1 + 40) = v175;
            }
            v50 += v51;
          }
          else
          {
LABEL_203:
            uint64_t v175 = *(void *)(a1 + 40);
          }
          for (*(void *)(a1 + 40) = v175 - (v50 << 10); v50; --v50)
          {
            uint64_t v176 = *(void **)(a1 + 16);
            uint64_t v179 = *v176;
            uint64_t v177 = (char *)(v176 + 1);
            uint64_t v178 = v179;
            *(void *)(a1 + 16) = v177;
            if (v19 == *(char **)(a1 + 32))
            {
              uint64_t v180 = (uint64_t)&v177[-*v28];
              if ((unint64_t)v177 <= *v28)
              {
                if (v19 == (char *)*v28) {
                  unint64_t v187 = 1;
                }
                else {
                  unint64_t v187 = (uint64_t)&v19[-*v28] >> 2;
                }
                uint64_t v188 = (char *)sub_2614C7718(v187);
                v190 = &v188[8 * (v187 >> 2)];
                uint64_t v191 = *(uint64_t **)(a1 + 16);
                uint64_t v19 = v190;
                uint64_t v192 = *(void *)(a1 + 24) - (void)v191;
                if (v192)
                {
                  uint64_t v19 = &v190[v192 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v193 = 8 * (v192 >> 3);
                  uint64_t v194 = &v188[8 * (v187 >> 2)];
                  do
                  {
                    uint64_t v195 = *v191++;
                    *(void *)uint64_t v194 = v195;
                    v194 += 8;
                    v193 -= 8;
                  }
                  while (v193);
                }
                unint64_t v196 = *(void **)(a1 + 8);
                *(void *)(a1 + 8) = v188;
                *(void *)(a1 + 16) = v190;
                *(void *)(a1 + 24) = v19;
                *(void *)(a1 + 32) = &v188[8 * v189];
                if (v196)
                {
                  operator delete(v196);
                  uint64_t v19 = *(char **)(a1 + 24);
                }
              }
              else
              {
                uint64_t v181 = v180 >> 3;
                BOOL v64 = v180 >> 3 < -1;
                uint64_t v182 = (v180 >> 3) + 2;
                if (v64) {
                  uint64_t v183 = v182;
                }
                else {
                  uint64_t v183 = v181 + 1;
                }
                uint64_t v184 = &v177[-8 * (v183 >> 1)];
                int64_t v185 = v19 - v177;
                if (v19 != v177)
                {
                  memmove(&v177[-8 * (v183 >> 1)], v177, v19 - v177);
                  uint64_t v19 = *(char **)(a1 + 16);
                }
                char v186 = &v19[-8 * (v183 >> 1)];
                uint64_t v19 = &v184[v185];
                *(void *)(a1 + 16) = v186;
                *(void *)(a1 + 24) = &v184[v185];
              }
            }
            *(void *)uint64_t v19 = v178;
            uint64_t v19 = (char *)(*(void *)(a1 + 24) + 8);
            *(void *)(a1 + 24) = v19;
          }
        }
        else
        {
          unint64_t v53 = v52 >> 2;
          if (v53 <= v51 + (v44 >> 3)) {
            unint64_t v54 = (char *)(v51 + (v44 >> 3));
          }
          else {
            unint64_t v54 = (char *)v53;
          }
          unint64_t v55 = (v44 >> 3) - v50;
          uint64_t v247 = a1 + 32;
          if (v54) {
            unint64_t v54 = (char *)sub_2614C7718((unint64_t)v54);
          }
          else {
            uint64_t v56 = 0;
          }
          v245.n128_u64[0] = (unint64_t)v54;
          v245.n128_u64[1] = (unint64_t)&v54[8 * v55];
          *(void *)&long long v246 = v245.n128_u64[1];
          *((void *)&v246 + 1) = &v54[8 * v56];
          do
          {
            char v244 = operator new(0x1000uLL);
            sub_2614C7750(&v245, &v244);
            --v51;
          }
          while (v51);
          unint64_t v233 = v50 << 10;
          if (v50)
          {
            long long v120 = *(void **)(a1 + 16);
            long long v121 = (char *)v246;
            do
            {
              if (v121 == *((char **)&v246 + 1))
              {
                long long v122 = (char *)v245.n128_u64[1];
                long long v123 = (void *)v245.n128_u64[0];
                if (v245.n128_u64[1] <= v245.n128_u64[0])
                {
                  if (v121 == (char *)v245.n128_u64[0]) {
                    unint64_t v130 = 1;
                  }
                  else {
                    unint64_t v130 = (uint64_t)&v121[-v245.n128_u64[0]] >> 2;
                  }
                  long long v131 = (char *)sub_2614C7718(v130);
                  uint64_t v133 = v121 - v122;
                  BOOL v99 = v121 == v122;
                  long long v121 = &v131[8 * (v130 >> 2)];
                  if (!v99)
                  {
                    long long v121 = &v131[8 * (v130 >> 2) + (v133 & 0xFFFFFFFFFFFFFFF8)];
                    uint64_t v134 = 8 * (v133 >> 3);
                    uint64_t v135 = &v131[8 * (v130 >> 2)];
                    do
                    {
                      uint64_t v136 = *(void *)v122;
                      v122 += 8;
                      *(void *)uint64_t v135 = v136;
                      v135 += 8;
                      v134 -= 8;
                    }
                    while (v134);
                  }
                  v245.n128_u64[0] = (unint64_t)v131;
                  v245.n128_u64[1] = (unint64_t)&v131[8 * (v130 >> 2)];
                  *(void *)&long long v246 = v121;
                  *((void *)&v246 + 1) = &v131[8 * v132];
                  if (v123) {
                    operator delete(v123);
                  }
                }
                else
                {
                  uint64_t v124 = (uint64_t)(v245.n128_u64[1] - v245.n128_u64[0]) >> 3;
                  if (v124 >= -1) {
                    uint64_t v125 = v124 + 1;
                  }
                  else {
                    uint64_t v125 = v124 + 2;
                  }
                  unint64_t v126 = v245.n128_u64[1] - 8 * (v125 >> 1);
                  size_t v127 = (size_t)&v121[-v245.n128_u64[1]];
                  if (v121 != (char *)v245.n128_u64[1])
                  {
                    long long v128 = (void *)(v245.n128_u64[1] - 8 * (v125 >> 1));
                    memmove(v128, (const void *)v245.n128_u64[1], v127);
                    unint64_t v126 = (unint64_t)v128;
                    long long v121 = v122;
                  }
                  unint64_t v129 = (unint64_t)&v121[-8 * (v125 >> 1)];
                  long long v121 = (char *)(v126 + v127);
                  v245.n128_u64[1] = v129;
                  *(void *)&long long v246 = v126 + v127;
                }
              }
              *(void *)long long v121 = *v120;
              long long v121 = (char *)(v246 + 8);
              *(void *)&long long v246 = v246 + 8;
              long long v120 = (void *)(*(void *)(a1 + 16) + 8);
              *(void *)(a1 + 16) = v120;
              --v50;
            }
            while (v50);
          }
          for (k = *(void **)(a1 + 24); k != *(void **)(a1 + 16); sub_2614C7864((uint64_t)&v245, k))
            --k;
          long long v138 = *(void **)(a1 + 8);
          long long v139 = v246;
          *(__n128 *)(a1 + 8) = v245;
          v245.n128_u64[0] = (unint64_t)v138;
          v245.n128_u64[1] = (unint64_t)k;
          *(_OWORD *)(a1 + 24) = v139;
          *(void *)(a1 + 40) -= v233;
          if (v138)
          {
            operator delete(v138);
            uint64_t v19 = *(char **)(a1 + 24);
          }
          else
          {
            uint64_t v19 = (char *)v139;
          }
        }
      }
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v20 = *(char **)(a1 + 16);
      unint64_t v17 = *(void *)(a1 + 40) + v16;
      unint64_t v18 = v17 >> 10;
      unint64_t v27 = v235;
    }
    uint64_t v197 = &v20[8 * v18];
    if (v19 == v20) {
      uint64_t v198 = 0;
    }
    else {
      uint64_t v198 = (char *)(*(void *)v197 + 4 * (v17 & 0x3FF));
    }
    uint64_t v199 = v241;
    unint64_t v200 = v16 - v27;
    if (v200 >= v241)
    {
      char v205 = v198;
      unint64_t v204 = (char **)&v20[8 * v18];
      if (!v241) {
        goto LABEL_258;
      }
    }
    else
    {
      uint64_t v201 = &v11[4 * (v200 - v241)];
      if (v200 < v241 >> 1) {
        uint64_t v201 = &v12[4 * v200];
      }
      if (v201 == v11)
      {
        char v205 = v198;
        unint64_t v204 = (char **)&v20[8 * v18];
      }
      else
      {
        v202 = *(char **)v197;
        uint64_t v203 = v201;
        unint64_t v204 = (char **)v197;
        char v205 = v198;
        do
        {
          *(_DWORD *)char v205 = *(_DWORD *)v203;
          v205 += 4;
          if (v205 - v202 == 4096)
          {
            uint64_t v206 = v204[1];
            ++v204;
            v202 = v206;
            char v205 = v206;
          }
          v203 += 4;
          ++v16;
        }
        while (v203 != v11);
        *(void *)(a1 + 48) = v16;
        uint64_t v11 = v201;
      }
      uint64_t v199 = v200;
      if (!v200) {
        goto LABEL_258;
      }
    }
    unint64_t v243 = v199;
    unint64_t v207 = sub_2614C74C4(v197, (uint64_t)v198, v199);
    if (v198 != v208)
    {
      char v209 = *v204;
      v210 = v207;
      uint64_t v211 = v208;
      do
      {
        *(_DWORD *)char v205 = *(_DWORD *)v211;
        v205 += 4;
        if (v205 - v209 == 4096)
        {
          unint64_t v212 = v204[1];
          ++v204;
          char v209 = v212;
          char v205 = v212;
        }
        v211 += 4;
        if (&v211[-*v210] == (char *)4096)
        {
          uint64_t v213 = (char *)v210[1];
          ++v210;
          uint64_t v211 = v213;
        }
        ++v16;
      }
      while (v211 != v198);
      *(void *)(a1 + 48) = v16;
    }
    if (v243 < v200)
    {
      char v214 = (char **)v207;
      uint64_t v215 = v208;
      uint64_t v216 = (char **)sub_2614C74C4(v197, (uint64_t)v198, v200);
      sub_2614C751C(&v245, v216, v217, v214, v215, v197, v198);
      uint64_t v198 = (char *)*((void *)&v246 + 1);
      uint64_t v197 = (char *)v246;
    }
    if (v11 != v12)
    {
      uint64_t v220 = *(char **)v197;
      char v219 = (uint64_t *)(v197 - 8);
      uint64_t v218 = v220;
      while (1)
      {
        uint64_t v221 = v198 - v218;
        if ((v11 - v12) >> 2 >= v221 >> 2) {
          uint64_t v222 = v221 >> 2;
        }
        else {
          uint64_t v222 = (v11 - v12) >> 2;
        }
        v11 -= 4 * v222;
        if (v222) {
          memmove(&v198[-4 * v222], v11, 4 * v222);
        }
        if (v11 == v12) {
          break;
        }
        uint64_t v223 = (char *)*v219--;
        uint64_t v218 = v223;
        uint64_t v198 = v223 + 4096;
      }
    }
    goto LABEL_258;
  }
LABEL_264:
  LODWORD(v226) = a2 - v9;
  unint64_t v227 = *(void *)(a1 + 48);
  if (v227 - (a2 - (int)v9) < a6) {
    return 0;
  }
  *a7 = -1;
  int v229 = 0;
  if ((a5 & 0x80000000) == 0)
  {
    uint64_t v226 = (int)v226;
    if (v227 <= (int)v226) {
      unint64_t v227 = (int)v226;
    }
    uint64_t v230 = (int)v226 + a5 + 1;
    int v231 = -1;
    do
    {
      if (v227 == v226) {
        break;
      }
      if (*(float *)(*(void *)(*(void *)(a1 + 16)
                                + (((unint64_t)(v226 + *(void *)(a1 + 40)) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((v226 + *(void *)(a1 + 40)) & 0x3FF)) <= a9)
      {
        if (v231 == -1)
        {
          *a7 = v226;
          int v231 = v226;
        }
        ++v229;
      }
      ++v226;
    }
    while (v230 != v226);
  }
  if (a8) {
    *a8 = v229;
  }
  return v229 >= a6;
}

void sub_2614C7258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2614C72E4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0x800)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v1 > 0x7FF;
}

void *sub_2614C733C(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 2);
    if (v3 < 1) {
      result -= (unint64_t)(1023 - v3) >> 10;
    }
    else {
      result += (unint64_t)v3 >> 10;
    }
  }
  return result;
}

double sub_2614C7390(uint64_t *a1, unsigned char *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v19 = *(void **)a5;
    uint64_t v20 = *(char **)(a5 + 8);
    unint64_t v18 = a4;
  }
  else
  {
    unint64_t v8 = a1 + 1;
    sub_2614C79C4(&v22, a2, (unsigned char *)(*a1 + 4096), *(void **)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    unint64_t v9 = *(void **)a5;
    for (uint64_t i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *v8;
      uint64_t v13 = (char *)*v9;
      while (1)
      {
        uint64_t v14 = v13 - i + 4096;
        if ((4096 - 4 * v11) >> 2 >= v14 >> 2) {
          uint64_t v15 = v14 >> 2;
        }
        else {
          uint64_t v15 = (4096 - 4 * v11) >> 2;
        }
        if (v15) {
          memmove(i, (const void *)(v12 + 4 * v11), 4 * v15);
        }
        v11 += v15;
        if (v11 == 1024) {
          break;
        }
        uint64_t v16 = (char *)v9[1];
        ++v9;
        uint64_t v13 = v16;
        uint64_t i = v16;
      }
      i += 4 * v15;
      if ((char *)(*v9 + 4096) == i)
      {
        unint64_t v17 = (char *)v9[1];
        ++v9;
        uint64_t i = v17;
      }
      *(void *)a5 = v9;
      *(void *)(a5 + 8) = i;
    }
    a2 = (unsigned char *)*a3;
    unint64_t v18 = a4;
    uint64_t v19 = v9;
    uint64_t v20 = i;
  }
  sub_2614C79C4(&v22, a2, v18, v19, v20);
  double result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

void *sub_2614C74C4(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = ((a2 - *result) >> 2) - a3;
    if (v3 < 1) {
      result -= (unint64_t)(1023 - v3) >> 10;
    }
    else {
      result += (unint64_t)v3 >> 10;
    }
  }
  return result;
}

__n128 sub_2614C751C(__n128 *a1, char **a2, char *a3, char **a4, char *a5, void *a6, char *a7)
{
  if (a2 == a4)
  {
    long long v23 = a3;
    uint64_t v22 = a5;
    unint64_t v24 = a6;
    uint64_t v25 = a7;
  }
  else
  {
    uint64_t v12 = a4 - 1;
    sub_2614C765C(&v27, *a4, a5, a6, a7);
    uint64_t v14 = (char *)v28.n128_u64[1];
    uint64_t v13 = (void *)v28.n128_u64[0];
    if (v12 != a2)
    {
      uint64_t v15 = *(char **)v28.n128_u64[0];
      do
      {
        uint64_t v16 = *v12;
        unint64_t v17 = *v12 + 4096;
        while (1)
        {
          uint64_t v18 = v14 - v15;
          if ((v17 - v16) >> 2 >= v18 >> 2) {
            uint64_t v19 = v18 >> 2;
          }
          else {
            uint64_t v19 = (v17 - v16) >> 2;
          }
          v17 -= 4 * v19;
          v14 -= 4 * v19;
          if (v19) {
            memmove(v14, v17, 4 * v19);
          }
          if (v17 == v16) {
            break;
          }
          uint64_t v20 = (char *)*--v13;
          uint64_t v15 = v20;
          uint64_t v14 = v20 + 4096;
        }
        uint64_t v15 = (char *)*v13;
        if ((char *)(*v13 + 4096) == v14)
        {
          uint64_t v21 = (char *)v13[1];
          ++v13;
          uint64_t v15 = v21;
          uint64_t v14 = v21;
        }
        --v12;
      }
      while (v12 != a2);
    }
    uint64_t v22 = *a2 + 4096;
    long long v23 = a3;
    unint64_t v24 = v13;
    uint64_t v25 = v14;
  }
  sub_2614C765C(&v27, v23, v22, v24, v25);
  __n128 result = v28;
  a1->n128_u64[0] = (unint64_t)a4;
  a1->n128_u64[1] = (unint64_t)a5;
  a1[1] = result;
  return result;
}

void *sub_2614C765C(void *result, char *a2, char *a3, void *a4, char *a5)
{
  char v6 = a4;
  unint64_t v8 = result;
  if (a2 == a3)
  {
    unint64_t v9 = a2;
  }
  else
  {
    unint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 2 >= v12 >> 2) {
        uint64_t v13 = v12 >> 2;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 2;
      }
      v11 -= 4 * v13;
      a5 -= 4 * v13;
      if (v13) {
        __n128 result = memmove(a5, v11, 4 * v13);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *unint64_t v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void *sub_2614C7718(unint64_t a1)
{
  if (a1 >> 61) {
    sub_2614C7990();
  }
  return operator new(8 * a1);
}

void sub_2614C7750(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      unint64_t v17 = (char *)sub_2614C7718(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        long long v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)long long v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_2614C7864(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_2614C7718(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_2614C797C(void *a1)
{
}

void sub_2614C7990()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  unint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *sub_2614C79C4(void *result, unsigned char *__src, unsigned char *a3, void *a4, char *__dst)
{
  uint64_t v6 = a4;
  uint64_t v8 = result;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      if ((a3 - v9) >> 2 >= v11 >> 2) {
        uint64_t v12 = v11 >> 2;
      }
      else {
        uint64_t v12 = (a3 - v9) >> 2;
      }
      if (v12) {
        __n128 result = memmove(__dst, v9, 4 * v12);
      }
      v9 += 4 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)v6[1];
      ++v6;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)(*v6 + 4096) == __dst)
    {
      uint64_t v14 = (char *)v6[1];
      ++v6;
      __dst = v14;
    }
  }
  *uint64_t v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void sub_2614C7A78(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2614C7AD4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2655810E8, MEMORY[0x263F8C060]);
}

void sub_2614C7AC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2614C7AD4(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_2614C8B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,void *a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v43 + 144) = v42;

  a33 = &a29;
  sub_2614C3E0C((void ***)&a33);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_2614C8CCC(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x263E373E0](v23, a1);
  if (v23[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        sub_2614C9774();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      uint64_t v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x263E373F0](v23);
  return a1;
}

void sub_2614C8F68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x263E373F0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2614C8F3CLL);
}

void sub_2614C8FD4(_Unwind_Exception *a1)
{
}

void *sub_2614C8FE8(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_2614C908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_2614C90A0(void *a1)
{
  uint64_t v2 = a1[23];
  uint64_t v3 = a1[24];
  if (v2 != v3)
  {
    int v4 = voiceactions::kLogZero;
    do
    {
      *(_DWORD *)uint64_t v2 = voiceactions::kNolabel;
      *(_DWORD *)(v2 + 4) = v4;
      *(_DWORD *)(v2 + 8) = voiceactions::kNoTime;
      *(void *)(v2 + 20) = 0;
      *(void *)(v2 + 12) = 0;
      v2 += 32;
    }
    while (v2 != v3);
  }
  sub_2614C9184((uint64_t)(a1 + 26));
  uint64_t v5 = (void *)a1[20];
  if (v5)
  {
    uint64_t v6 = a1 + 18;
    do
    {
      sub_2614C91D8((uint64_t)&v8, (uint64_t)(v5 + 2));
      uint64_t v7 = sub_2614C9240(v6, v8, &v8);
      sub_2614C9184((uint64_t)(v7 + 24));
      if (v10 < 0) {
        operator delete(__p);
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
}

void sub_2614C9168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_2614C9184(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    **(unsigned char **)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
  }
  float result = *(float *)&voiceactions::kLogZero;
  *(_DWORD *)(a1 + 24) = voiceactions::kLogZero;
  *(float *)(a1 + 28) = result;
  int v2 = voiceactions::kNoTime;
  *(_DWORD *)(a1 + 32) = voiceactions::kNoTime;
  *(_DWORD *)(a1 + 36) = v2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_2614C91D8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_2614C96D8((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  return a1;
}

char *sub_2614C9240(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      char v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          char v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 2;
  char v10 = (char *)operator new(0x60uLL);
  *(void *)char v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *((void *)v10 + 11) = 0;
  int v13 = voiceactions::kLogZero;
  *((_DWORD *)v10 + 12) = voiceactions::kLogZero;
  *((_DWORD *)v10 + 13) = v13;
  int v14 = voiceactions::kNoTime;
  *((_DWORD *)v10 + 14) = voiceactions::kNoTime;
  *((_DWORD *)v10 + 15) = v14;
  *((void *)v10 + 8) = 0;
  *((void *)v10 + 9) = 0;
  *((_DWORD *)v10 + 20) = 0;
  *((_DWORD *)v10 + 21) = v13;
  float v15 = (float)(unint64_t)(a1[3] + 1);
  float v16 = *((float *)a1 + 8);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v27 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_2614C7990();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = (void *)*a1;
          *a1 = (uint64_t)v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*v12;
          if (*v12)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v25) = v12;
            uint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*a1 + 8 * v31))
                  {
                    *(void *)(*a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *uint64_t v24 = *v30;
                  *uint64_t v30 = **(void **)(*a1 + 8 * v31);
                  **(void **)(*a1 + 8 * v31) = v30;
                  uint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                uint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v36 = (void *)*a1;
        *a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v32 = *a1;
  unint64_t v33 = *(void **)(*a1 + 8 * v3);
  if (v33)
  {
    *(void *)char v10 = *v33;
LABEL_72:
    *unint64_t v33 = v10;
    goto LABEL_73;
  }
  *(void *)char v10 = *v12;
  *uint64_t v12 = v10;
  *(void *)(v32 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v34 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7) {
        v34 %= v7;
      }
    }
    else
    {
      v34 &= v7 - 1;
    }
    unint64_t v33 = (void *)(*a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_2614C9660(_Unwind_Exception *a1)
{
  sub_2614C9678(1, v1);
  _Unwind_Resume(a1);
}

void sub_2614C9678(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *sub_2614C96D8(unsigned char *__dst, void *__src, unint64_t a3)
{
  long long v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2614C9774();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint8x8_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    uint64_t v5[2] = v7 | 0x8000000000000000;
    *long long v5 = v8;
    long long v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_2614C9774()
{
}

char *sub_2614C978C(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  int v14 = __dst;
  float v15 = __dst;
  v12[0] = a1;
  v12[1] = &v14;
  id v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_2614C96D8(v4, *(void **)v6, *((void *)v6 + 1));
        uint8x8_t v8 = v15;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        uint8x8_t v8 = v4;
      }
      long long v9 = *(long long *)((char *)v6 + 24);
      long long v10 = *(long long *)((char *)v6 + 40);
      *(_OWORD *)(v4 + 49) = *(long long *)((char *)v6 + 49);
      *(_OWORD *)(v4 + 40) = v10;
      *(_OWORD *)(v4 + 24) = v9;
      uint64_t v6 = (long long *)((char *)v6 + 72);
      uint64_t v4 = v8 + 72;
      float v15 = v8 + 72;
    }
    while (v6 != a3);
  }
  char v13 = 1;
  sub_2614C98B4((uint64_t)v12);
  return v4;
}

void sub_2614C9854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2614C9868(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    sub_2614C7990();
  }
  return operator new(72 * a1);
}

uint64_t sub_2614C98B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 49) < 0) {
        operator delete(*(void **)(v3 - 72));
      }
      v3 -= 72;
    }
  }
  return a1;
}

uint64_t sub_2614C9914(uint64_t *a1, long long *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    sub_2614C637C();
  }
  uint64_t v6 = a1 + 2;
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v7 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v20 = v6;
  if (v7)
  {
    long long v9 = (char *)sub_2614C9868(v7);
  }
  else
  {
    long long v9 = 0;
    uint64_t v8 = 0;
  }
  long long v10 = &v9[72 * v2];
  v17[0] = v9;
  v17[1] = v10;
  unint64_t v18 = v10;
  unint64_t v19 = &v9[72 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    sub_2614C96D8(v10, *(void **)a2, *((void *)a2 + 1));
    long long v10 = v18;
  }
  else
  {
    long long v11 = *a2;
    *((void *)v10 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v10 = v11;
  }
  uint64_t v12 = &v9[72 * v2];
  long long v13 = *(long long *)((char *)a2 + 49);
  long long v14 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)(v12 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v12 + 24) = v14;
  *(_OWORD *)(v12 + 49) = v13;
  unint64_t v18 = v10 + 72;
  sub_2614CADB8(a1, v17);
  uint64_t v15 = a1[1];
  sub_2614CAE4C((uint64_t)v17);
  return v15;
}

void sub_2614C9A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2614CAE4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2614C9A70(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v9 = a1;
  uint64_t v123 = a1 + 144;
  uint64_t v124 = a1 + 72;
  uint64_t v125 = (void *)(a1 + 8);
  unint64_t v10 = a1 + 24;
  while (1)
  {
    uint64_t v11 = a2 - v9;
    uint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v9) >> 3);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (*(float *)(a2 - 12) < *(float *)(v9 + 60))
          {
            sub_2614CA7CC((uint64_t *)v9, a2 - 72);
          }
          break;
        case 3:
          sub_2614CA8C0(v9, v9 + 72, a2 - 72);
          break;
        case 4:
          sub_2614CA980(v9, v9 + 72, v9 + 144, a2 - 72);
          break;
        case 5:
          sub_2614CAA28(v9, v9 + 72, v9 + 144, v9 + 216, a2 - 72);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 1727) {
      break;
    }
    if (!a3)
    {
      if (v9 != a2)
      {
        int64_t v72 = (unint64_t)(v12 - 2) >> 1;
        int64_t v73 = v72;
        do
        {
          int64_t v74 = v73;
          if (v72 >= v73)
          {
            uint64_t v75 = (2 * v73) | 1;
            unint64_t v76 = v9 + 72 * v75;
            if (2 * v74 + 2 < v12 && *(float *)(v9 + 72 * v75 + 60) < *(float *)(v76 + 132))
            {
              v76 += 72;
              uint64_t v75 = 2 * v74 + 2;
            }
            float v77 = *(float *)(v9 + 72 * v74 + 60);
            if (*(float *)(v76 + 60) >= v77)
            {
              unint64_t v78 = v9 + 72 * v74;
              long long v131 = *(void **)v78;
              *(void *)&v153[7] = *(void *)(v78 + 15);
              *(void *)long long v153 = *(void *)(v78 + 8);
              char v129 = *(unsigned char *)(v78 + 23);
              *(void *)unint64_t v78 = 0;
              *(void *)(v78 + 8) = 0;
              *(void *)(v78 + 16) = 0;
              int v147 = *(_DWORD *)(v78 + 56);
              long long v135 = *(_OWORD *)(v78 + 24);
              long long v141 = *(_OWORD *)(v78 + 40);
              char v126 = *(unsigned char *)(v78 + 64);
              do
              {
                unint64_t v79 = v78;
                unint64_t v78 = v76;
                if (*(char *)(v79 + 23) < 0) {
                  operator delete(*(void **)v79);
                }
                long long v80 = *(_OWORD *)v78;
                *(void *)(v79 + 16) = *(void *)(v78 + 16);
                *(_OWORD *)unint64_t v79 = v80;
                *(unsigned char *)(v78 + 23) = 0;
                *(unsigned char *)unint64_t v78 = 0;
                long long v81 = *(_OWORD *)(v78 + 24);
                long long v82 = *(_OWORD *)(v78 + 40);
                *(_OWORD *)(v79 + 49) = *(_OWORD *)(v78 + 49);
                *(_OWORD *)(v79 + 40) = v82;
                *(_OWORD *)(v79 + 24) = v81;
                if (v72 < v75) {
                  break;
                }
                uint64_t v83 = (2 * v75) | 1;
                unint64_t v76 = v9 + 72 * v83;
                if (2 * v75 + 2 < v12 && *(float *)(v9 + 72 * v83 + 60) < *(float *)(v76 + 132))
                {
                  v76 += 72;
                  uint64_t v83 = 2 * v75 + 2;
                }
                uint64_t v75 = v83;
              }
              while (*(float *)(v76 + 60) >= v77);
              if (*(char *)(v78 + 23) < 0) {
                operator delete(*(void **)v78);
              }
              *(void *)unint64_t v78 = v131;
              *(void *)(v78 + 15) = *(void *)&v153[7];
              *(void *)(v78 + 8) = *(void *)v153;
              *(unsigned char *)(v78 + 23) = v129;
              *(_OWORD *)(v78 + 24) = v135;
              *(_OWORD *)(v78 + 40) = v141;
              *(_DWORD *)(v78 + 56) = v147;
              *(float *)(v78 + 60) = v77;
              *(unsigned char *)(v78 + 64) = v126;
            }
          }
          int64_t v73 = v74 - 1;
        }
        while (v74);
        int64_t v84 = v11 / 0x48uLL;
        do
        {
          if (v84 >= 2)
          {
            uint64_t v85 = 0;
            uint64_t v86 = *(void *)v9;
            *(void *)long long v149 = *(void *)(v9 + 8);
            *(void *)&v149[7] = *(void *)(v9 + 15);
            char v87 = *(unsigned char *)(v9 + 23);
            *(void *)(v9 + 8) = 0;
            *(void *)(v9 + 16) = 0;
            *(void *)unint64_t v9 = 0;
            long long v136 = *(_OWORD *)(v9 + 24);
            *(_OWORD *)long long v142 = *(_OWORD *)(v9 + 40);
            *(_OWORD *)&v142[9] = *(_OWORD *)(v9 + 49);
            unint64_t v88 = v9;
            do
            {
              uint64_t v89 = v85 + 1;
              unint64_t v90 = v88 + 72 * (v85 + 1);
              uint64_t v91 = 2 * v85;
              uint64_t v85 = (2 * v85) | 1;
              int64_t v92 = v91 + 2;
              if (v92 < v84 && *(float *)(v88 + 72 * v89 + 60) < *(float *)(v90 + 132))
              {
                v90 += 72;
                uint64_t v85 = v92;
              }
              if (*(char *)(v88 + 23) < 0) {
                operator delete(*(void **)v88);
              }
              long long v93 = *(_OWORD *)v90;
              *(void *)(v88 + 16) = *(void *)(v90 + 16);
              *(_OWORD *)unint64_t v88 = v93;
              *(unsigned char *)(v90 + 23) = 0;
              *(unsigned char *)unint64_t v90 = 0;
              long long v94 = *(_OWORD *)(v90 + 24);
              long long v95 = *(_OWORD *)(v90 + 40);
              *(_OWORD *)(v88 + 49) = *(_OWORD *)(v90 + 49);
              *(_OWORD *)(v88 + 40) = v95;
              *(_OWORD *)(v88 + 24) = v94;
              unint64_t v88 = v90;
            }
            while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
            unint64_t v96 = (long long *)(v90 + 24);
            uint64_t v97 = (void **)(a2 - 72);
            int v98 = *(char *)(v90 + 23);
            if (v90 == a2 - 72)
            {
              if (v98 < 0) {
                operator delete(*(void **)v90);
              }
              *(void *)unint64_t v90 = v86;
              *(void *)(v90 + 15) = *(void *)&v149[7];
              *(void *)(v90 + 8) = *(void *)v149;
              *(unsigned char *)(v90 + 23) = v87;
              *(_OWORD *)(v90 + 49) = *(_OWORD *)&v142[9];
              *unint64_t v96 = v136;
              *(_OWORD *)(v90 + 40) = *(_OWORD *)v142;
            }
            else
            {
              if (v98 < 0) {
                operator delete(*(void **)v90);
              }
              long long v99 = *(_OWORD *)v97;
              *(void *)(v90 + 16) = *(void *)(a2 - 56);
              *(_OWORD *)unint64_t v90 = v99;
              *(unsigned char *)(a2 - 49) = 0;
              *(unsigned char *)(a2 - 72) = 0;
              long long v100 = *(_OWORD *)(a2 - 48);
              long long v101 = *(_OWORD *)(a2 - 32);
              *(_OWORD *)(v90 + 49) = *(_OWORD *)(a2 - 23);
              *unint64_t v96 = v100;
              *(_OWORD *)(v90 + 40) = v101;
              if (*(char *)(a2 - 49) < 0) {
                operator delete(*v97);
              }
              uint64_t v102 = (_OWORD *)(a2 - 48);
              *(void *)(a2 - 72) = v86;
              *(void *)(a2 - 57) = *(void *)&v149[7];
              *(void *)(a2 - 64) = *(void *)v149;
              *(unsigned char *)(a2 - 49) = v87;
              *(_OWORD *)((char *)v102 + 25) = *(_OWORD *)&v142[9];
              *uint64_t v102 = v136;
              v102[1] = *(_OWORD *)v142;
              uint64_t v103 = v90 + 72 - v9;
              if (v103 >= 73)
              {
                unint64_t v104 = (unint64_t)(-2 - 0x71C71C71C71C71C7 * (v103 >> 3)) >> 1;
                float v105 = *(float *)(v90 + 60);
                if (*(float *)(v9 + 72 * v104 + 60) < v105)
                {
                  long long v106 = *(void **)v90;
                  *(void *)unint64_t v158 = *(void *)(v90 + 8);
                  *(void *)&v158[7] = *(void *)(v90 + 15);
                  char v127 = *(unsigned char *)(v90 + 23);
                  *(void *)(v90 + 8) = 0;
                  *(void *)(v90 + 16) = 0;
                  *(void *)unint64_t v90 = 0;
                  int v157 = *(_DWORD *)(v90 + 56);
                  long long v154 = *v96;
                  long long v156 = *(_OWORD *)(v90 + 40);
                  char v107 = *(unsigned char *)(v90 + 64);
                  do
                  {
                    if (*(char *)(v90 + 23) < 0) {
                      operator delete(*(void **)v90);
                    }
                    unint64_t v108 = v9 + 72 * v104;
                    long long v109 = *(_OWORD *)v108;
                    *(void *)(v90 + 16) = *(void *)(v108 + 16);
                    *(_OWORD *)unint64_t v90 = v109;
                    *(unsigned char *)(v108 + 23) = 0;
                    *(unsigned char *)unint64_t v108 = 0;
                    long long v110 = *(_OWORD *)(v108 + 24);
                    long long v111 = *(_OWORD *)(v108 + 40);
                    *(_OWORD *)(v90 + 49) = *(_OWORD *)(v108 + 49);
                    *(_OWORD *)(v90 + 40) = v111;
                    *(_OWORD *)(v90 + 24) = v110;
                    if (!v104) {
                      break;
                    }
                    unint64_t v104 = (v104 - 1) >> 1;
                    unint64_t v90 = v108;
                  }
                  while (*(float *)(v9 + 72 * v104 + 60) < v105);
                  if (*(char *)(v108 + 23) < 0) {
                    operator delete(*(void **)v108);
                  }
                  *(void *)unint64_t v108 = v106;
                  *(void *)(v108 + 15) = *(void *)&v158[7];
                  *(void *)(v108 + 8) = *(void *)v158;
                  *(unsigned char *)(v108 + 23) = v127;
                  *(_DWORD *)(v108 + 56) = v157;
                  *(_OWORD *)(v108 + 24) = v154;
                  *(_OWORD *)(v108 + 40) = v156;
                  *(float *)(v108 + 60) = v105;
                  *(unsigned char *)(v108 + 64) = v107;
                }
              }
            }
          }
          a2 -= 72;
        }
        while ((unint64_t)v84-- > 2);
      }
      return;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = v9 + 72 * ((unint64_t)v12 >> 1);
    uint64_t v15 = a2 - 72;
    if ((unint64_t)v11 < 0x2401)
    {
      sub_2614CA8C0(v14, v9, v15);
    }
    else
    {
      sub_2614CA8C0(v9, v14, v15);
      unint64_t v16 = v9 + 72 * v13;
      sub_2614CA8C0(v124, v16 - 72, a2 - 144);
      sub_2614CA8C0(v123, v16 + 72, a2 - 216);
      sub_2614CA8C0(v16 - 72, v14, v16 + 72);
      sub_2614CA7CC((uint64_t *)v9, v14);
    }
    uint64_t v17 = a3 - 1;
    uint64_t v130 = v17;
    if (a4)
    {
      float v18 = *(float *)(v9 + 60);
    }
    else
    {
      float v18 = *(float *)(v9 + 60);
      if (*(float *)(v9 - 12) >= v18)
      {
        uint64_t v37 = *(void *)v9;
        *(void *)int v151 = *(void *)(v9 + 8);
        *(void *)&v151[7] = *(void *)(v9 + 15);
        char v38 = *(unsigned char *)(v9 + 23);
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)unint64_t v9 = 0;
        long long v133 = *(_OWORD *)(v9 + 24);
        long long v139 = *(_OWORD *)(v9 + 40);
        int v145 = *(_DWORD *)(v9 + 56);
        if (v18 >= *(float *)(a2 - 12))
        {
          unint64_t v41 = v9 + 72;
          do
          {
            a1 = v41;
            if (v41 >= a2) {
              break;
            }
            float v42 = *(float *)(v41 + 60);
            v41 += 72;
          }
          while (v18 >= v42);
        }
        else
        {
          unint64_t v39 = v9;
          do
          {
            a1 = v39 + 72;
            float v40 = *(float *)(v39 + 132);
            v39 += 72;
          }
          while (v18 >= v40);
        }
        unint64_t v43 = a2;
        if (a1 < a2)
        {
          unint64_t v44 = a2;
          do
          {
            unint64_t v43 = v44 - 72;
            float v45 = *(float *)(v44 - 12);
            v44 -= 72;
          }
          while (v18 < v45);
        }
        char v46 = *(unsigned char *)(v9 + 64);
        while (a1 < v43)
        {
          sub_2614CA7CC((uint64_t *)a1, v43);
          do
          {
            float v47 = *(float *)(a1 + 132);
            a1 += 72;
          }
          while (v18 >= v47);
          do
          {
            float v48 = *(float *)(v43 - 12);
            v43 -= 72;
          }
          while (v18 < v48);
        }
        uint64_t v49 = v17;
        unint64_t v50 = (void **)(a1 - 72);
        BOOL v4 = a1 - 72 >= v9;
        BOOL v5 = a1 - 72 == v9;
        if (a1 - 72 != v9)
        {
          if (*(char *)(v9 + 23) < 0) {
            operator delete(*(void **)v9);
          }
          long long v51 = *(_OWORD *)v50;
          *(void *)(v9 + 16) = *(void *)(a1 - 56);
          *(_OWORD *)unint64_t v9 = v51;
          *(unsigned char *)(a1 - 49) = 0;
          *(unsigned char *)(a1 - 72) = 0;
          long long v52 = *(_OWORD *)(a1 - 48);
          long long v53 = *(_OWORD *)(a1 - 32);
          *(_OWORD *)(v9 + 49) = *(_OWORD *)(a1 - 23);
          *(_OWORD *)(v9 + 24) = v52;
          *(_OWORD *)(v9 + 40) = v53;
        }
        if (*(char *)(a1 - 49) < 0) {
          operator delete(*v50);
        }
        a4 = 0;
        *(void *)(a1 - 72) = v37;
        *(void *)(a1 - 57) = *(void *)&v151[7];
        *(void *)(a1 - 64) = *(void *)v151;
        *(unsigned char *)(a1 - 49) = v38;
        *(_DWORD *)(a1 - 16) = v145;
        *(_OWORD *)(a1 - 48) = v133;
        *(_OWORD *)(a1 - 32) = v139;
        *(float *)(a1 - 12) = v18;
        *(unsigned char *)(a1 - 8) = v46;
        a3 = v49;
        goto LABEL_1;
      }
    }
    uint64_t v19 = *(void *)v9;
    *(void *)long long v150 = *v125;
    *(void *)&v150[7] = *(void *)((char *)v125 + 7);
    char v20 = *(unsigned char *)(v9 + 23);
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)unint64_t v9 = 0;
    int v144 = *(_DWORD *)(v10 + 32);
    long long v132 = *(_OWORD *)v10;
    long long v138 = *(_OWORD *)(v10 + 16);
    unint64_t v21 = v9;
    char v22 = *(unsigned char *)(v9 + 64);
    do
    {
      unint64_t v23 = v21;
      v21 += 72;
    }
    while (*(float *)(v23 + 132) < v18);
    unint64_t v24 = a2;
    if (v23 == v9)
    {
      unint64_t v27 = a2;
      while (v21 < v27)
      {
        unint64_t v25 = v27 - 72;
        float v28 = *(float *)(v27 - 12);
        v27 -= 72;
        if (v28 < v18) {
          goto LABEL_22;
        }
      }
      unint64_t v25 = v27;
    }
    else
    {
      do
      {
        unint64_t v25 = v24 - 72;
        float v26 = *(float *)(v24 - 12);
        v24 -= 72;
      }
      while (v26 >= v18);
    }
LABEL_22:
    a1 = v21;
    if (v21 < v25)
    {
      unint64_t v29 = v25;
      do
      {
        sub_2614CA7CC((uint64_t *)a1, v29);
        do
        {
          float v30 = *(float *)(a1 + 132);
          a1 += 72;
        }
        while (v30 < v18);
        do
        {
          float v31 = *(float *)(v29 - 12);
          v29 -= 72;
        }
        while (v31 >= v18);
      }
      while (a1 < v29);
    }
    uint64_t v32 = (void **)(a1 - 72);
    if (a1 - 72 != v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      long long v33 = *(_OWORD *)v32;
      *(void *)(v9 + 16) = *(void *)(a1 - 56);
      *(_OWORD *)unint64_t v9 = v33;
      *(unsigned char *)(a1 - 49) = 0;
      *(unsigned char *)(a1 - 72) = 0;
      long long v34 = *(_OWORD *)(a1 - 48);
      long long v35 = *(_OWORD *)(a1 - 32);
      *(_OWORD *)(v10 + 25) = *(_OWORD *)(a1 - 23);
      *(_OWORD *)unint64_t v10 = v34;
      *(_OWORD *)(v10 + 16) = v35;
    }
    if (*(char *)(a1 - 49) < 0) {
      operator delete(*v32);
    }
    *(void *)(a1 - 72) = v19;
    *(void *)(a1 - 57) = *(void *)&v150[7];
    *(void *)(a1 - 64) = *(void *)v150;
    *(unsigned char *)(a1 - 49) = v20;
    *(_DWORD *)(a1 - 16) = v144;
    *(_OWORD *)(a1 - 48) = v132;
    *(_OWORD *)(a1 - 32) = v138;
    *(float *)(a1 - 12) = v18;
    *(unsigned char *)(a1 - 8) = v22;
    a3 = v130;
    if (v21 < v25) {
      goto LABEL_39;
    }
    BOOL v36 = sub_2614CAAFC(v9, a1 - 72);
    if (!sub_2614CAAFC(a1, a2))
    {
      if (v36) {
        goto LABEL_1;
      }
LABEL_39:
      sub_2614C9A70(v9, a1 - 72, v130, a4 & 1);
      a4 = 0;
      goto LABEL_1;
    }
    a2 = a1 - 72;
    if (v36) {
      return;
    }
  }
  unint64_t v54 = (void *)(v9 + 72);
  BOOL v56 = v9 == a2 || v54 == (void *)a2;
  if (a4)
  {
    if (!v56)
    {
      uint64_t v57 = 0;
      unint64_t v58 = v9;
      do
      {
        uint64_t v59 = v54;
        if (*(float *)(v58 + 132) < *(float *)(v58 + 60))
        {
          uint64_t v60 = *v54;
          *(void *)unint64_t v152 = *(void *)(v58 + 80);
          *(void *)&v152[7] = *(void *)(v58 + 87);
          char v61 = *(unsigned char *)(v58 + 95);
          v54[1] = 0;
          v54[2] = 0;
          *unint64_t v54 = 0;
          long long v134 = *(_OWORD *)(v58 + 96);
          long long v140 = *(_OWORD *)(v58 + 112);
          int v146 = *(_DWORD *)(v58 + 128);
          float v62 = *(float *)(v58 + 132);
          char v63 = *(unsigned char *)(v58 + 136);
          uint64_t v64 = v57;
          while (1)
          {
            uint64_t v65 = v9 + v64;
            uint64_t v66 = (void **)(v9 + v64 + 72);
            if (*(char *)(v9 + v64 + 95) < 0) {
              operator delete(*v66);
            }
            *(_OWORD *)uint64_t v66 = *(_OWORD *)v65;
            *(void *)(v9 + v64 + 88) = *(void *)(v65 + 16);
            *(unsigned char *)(v65 + 23) = 0;
            *(unsigned char *)uint64_t v65 = 0;
            long long v67 = *(_OWORD *)(v65 + 40);
            *(_OWORD *)(v65 + 96) = *(_OWORD *)(v65 + 24);
            *(_OWORD *)(v65 + 112) = v67;
            *(_OWORD *)(v65 + 121) = *(_OWORD *)(v65 + 49);
            if (!v64) {
              break;
            }
            uint64_t v68 = v9 + v64;
            float v69 = *(float *)(v9 + v64 - 12);
            v64 -= 72;
            if (v62 >= v69)
            {
              uint64_t v70 = v9 + v64 + 72;
              unint64_t v71 = v68 + 24;
              goto LABEL_94;
            }
          }
          unint64_t v71 = v9 + 24;
          uint64_t v70 = v9;
LABEL_94:
          if (*(char *)(v70 + 23) < 0) {
            operator delete(*(void **)v70);
          }
          *(void *)uint64_t v70 = v60;
          *(void *)(v70 + 15) = *(void *)&v152[7];
          *(void *)(v70 + 8) = *(void *)v152;
          *(unsigned char *)(v70 + 23) = v61;
          *(_DWORD *)(v71 + 32) = v146;
          *(_OWORD *)unint64_t v71 = v134;
          *(_OWORD *)(v71 + 16) = v140;
          *(float *)(v70 + 60) = v62;
          *(unsigned char *)(v70 + 64) = v63;
        }
        unint64_t v54 = v59 + 9;
        v57 += 72;
        unint64_t v58 = (unint64_t)v59;
      }
      while (v59 + 9 != (void *)a2);
    }
  }
  else if (!v56)
  {
    do
    {
      uint64_t v113 = v54;
      if (*(float *)(v9 + 132) < *(float *)(v9 + 60))
      {
        uint64_t v114 = *v54;
        *(void *)long long v155 = *(void *)(v9 + 80);
        *(void *)&v155[7] = *(void *)(v9 + 87);
        char v115 = *(unsigned char *)(v9 + 95);
        v54[1] = 0;
        v54[2] = 0;
        *unint64_t v54 = 0;
        long long v137 = *(_OWORD *)(v9 + 96);
        long long v143 = *(_OWORD *)(v9 + 112);
        int v148 = *(_DWORD *)(v9 + 128);
        float v116 = *(float *)(v9 + 132);
        char v117 = *(unsigned char *)(v9 + 136);
        uint64_t v118 = v54;
        do
        {
          uint64_t v119 = v118;
          if (*((char *)v118 + 23) < 0) {
            operator delete((void *)*v118);
          }
          *(_OWORD *)uint64_t v118 = *(_OWORD *)(v118 - 9);
          long long v120 = *((_OWORD *)v118 - 2);
          *(_OWORD *)(v118 + 3) = *((_OWORD *)v118 - 3);
          v118[2] = *(v118 - 7);
          *((unsigned char *)v118 - 72) = 0;
          v118 -= 9;
          *((unsigned char *)v119 - 49) = 0;
          *(_OWORD *)(v119 + 5) = v120;
          float v121 = *((float *)v119 - 21);
          *(_OWORD *)((char *)v119 + 49) = *(_OWORD *)((char *)v119 - 23);
        }
        while (v116 < v121);
        if (*((char *)v119 - 49) < 0) {
          operator delete((void *)*v118);
        }
        long long v122 = v119 - 6;
        void *v118 = v114;
        *(void *)((char *)v119 - 57) = *(void *)&v155[7];
        *(v119 - 8) = *(void *)v155;
        *((unsigned char *)v119 - 49) = v115;
        *((_DWORD *)v122 + 8) = v148;
        *(_OWORD *)long long v122 = v137;
        *((_OWORD *)v122 + 1) = v143;
        *((float *)v119 - 3) = v116;
        *((unsigned char *)v119 - 8) = v117;
      }
      unint64_t v54 = v113 + 9;
      unint64_t v9 = (unint64_t)v113;
    }
    while (v113 + 9 != (void *)a2);
  }
}

  unint64_t v9 = a1;
  uint64_t v123 = a1 + 144;
  uint64_t v124 = a1 + 72;
  uint64_t v125 = (void *)(a1 + 8);
  unint64_t v10 = a1 + 24;
  while (1)
  {
    uint64_t v11 = a2 - v9;
    uint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v9) >> 3);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (*(float *)(a2 - 12) < *(float *)(v9 + 60))
          {
            sub_2614CA7CC((uint64_t *)v9, a2 - 72);
          }
          break;
        case 3:
          sub_2614CA8C0(v9, v9 + 72, a2 - 72);
          break;
        case 4:
          sub_2614CA980(v9, v9 + 72, v9 + 144, a2 - 72);
          break;
        case 5:
          sub_2614CAA28(v9, v9 + 72, v9 + 144, v9 + 216, a2 - 72);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 1727) {
      break;
    }
    if (!a3)
    {
      if (v9 != a2)
      {
        int64_t v72 = (unint64_t)(v12 - 2) >> 1;
        int64_t v73 = v72;
        do
        {
          int64_t v74 = v73;
          if (v72 >= v73)
          {
            uint64_t v75 = (2 * v73) | 1;
            unint64_t v76 = v9 + 72 * v75;
            if (2 * v74 + 2 < v12 && *(float *)(v9 + 72 * v75 + 60) < *(float *)(v76 + 132))
            {
              v76 += 72;
              uint64_t v75 = 2 * v74 + 2;
            }
            float v77 = *(float *)(v9 + 72 * v74 + 60);
            if (*(float *)(v76 + 60) >= v77)
            {
              unint64_t v78 = v9 + 72 * v74;
              long long v131 = *(void **)v78;
              *(void *)&v153[7] = *(void *)(v78 + 15);
              *(void *)long long v153 = *(void *)(v78 + 8);
              char v129 = *(unsigned char *)(v78 + 23);
              *(void *)unint64_t v78 = 0;
              *(void *)(v78 + 8) = 0;
              *(void *)(v78 + 16) = 0;
              int v147 = *(_DWORD *)(v78 + 56);
              long long v135 = *(_OWORD *)(v78 + 24);
              long long v141 = *(_OWORD *)(v78 + 40);
              char v126 = *(unsigned char *)(v78 + 64);
              do
              {
                unint64_t v79 = v78;
                unint64_t v78 = v76;
                if (*(char *)(v79 + 23) < 0) {
                  operator delete(*(void **)v79);
                }
                long long v80 = *(_OWORD *)v78;
                *(void *)(v79 + 16) = *(void *)(v78 + 16);
                *(_OWORD *)unint64_t v79 = v80;
                *(unsigned char *)(v78 + 23) = 0;
                *(unsigned char *)unint64_t v78 = 0;
                long long v81 = *(_OWORD *)(v78 + 24);
                long long v82 = *(_OWORD *)(v78 + 40);
                *(_OWORD *)(v79 + 49) = *(_OWORD *)(v78 + 49);
                *(_OWORD *)(v79 + 40) = v82;
                *(_OWORD *)(v79 + 24) = v81;
                if (v72 < v75) {
                  break;
                }
                uint64_t v83 = (2 * v75) | 1;
                unint64_t v76 = v9 + 72 * v83;
                if (2 * v75 + 2 < v12 && *(float *)(v9 + 72 * v83 + 60) < *(float *)(v76 + 132))
                {
                  v76 += 72;
                  uint64_t v83 = 2 * v75 + 2;
                }
                uint64_t v75 = v83;
              }
              while (*(float *)(v76 + 60) >= v77);
              if (*(char *)(v78 + 23) < 0) {
                operator delete(*(void **)v78);
              }
              *(void *)unint64_t v78 = v131;
              *(void *)(v78 + 15) = *(void *)&v153[7];
              *(void *)(v78 + 8) = *(void *)v153;
              *(unsigned char *)(v78 + 23) = v129;
              *(_OWORD *)(v78 + 24) = v135;
              *(_OWORD *)(v78 + 40) = v141;
              *(_DWORD *)(v78 + 56) = v147;
              *(float *)(v78 + 60) = v77;
              *(unsigned char *)(v78 + 64) = v126;
            }
          }
          int64_t v73 = v74 - 1;
        }
        while (v74);
        int64_t v84 = v11 / 0x48uLL;
        do
        {
          if (v84 >= 2)
          {
            uint64_t v85 = 0;
            uint64_t v86 = *(void *)v9;
            *(void *)long long v149 = *(void *)(v9 + 8);
            *(void *)&v149[7] = *(void *)(v9 + 15);
            char v87 = *(unsigned char *)(v9 + 23);
            *(void *)(v9 + 8) = 0;
            *(void *)(v9 + 16) = 0;
            *(void *)unint64_t v9 = 0;
            long long v136 = *(_OWORD *)(v9 + 24);
            *(_OWORD *)long long v142 = *(_OWORD *)(v9 + 40);
            *(_OWORD *)&v142[9] = *(_OWORD *)(v9 + 49);
            unint64_t v88 = v9;
            do
            {
              uint64_t v89 = v85 + 1;
              unint64_t v90 = v88 + 72 * (v85 + 1);
              uint64_t v91 = 2 * v85;
              uint64_t v85 = (2 * v85) | 1;
              int64_t v92 = v91 + 2;
              if (v92 < v84 && *(float *)(v88 + 72 * v89 + 60) < *(float *)(v90 + 132))
              {
                v90 += 72;
                uint64_t v85 = v92;
              }
              if (*(char *)(v88 + 23) < 0) {
                operator delete(*(void **)v88);
              }
              long long v93 = *(_OWORD *)v90;
              *(void *)(v88 + 16) = *(void *)(v90 + 16);
              *(_OWORD *)unint64_t v88 = v93;
              *(unsigned char *)(v90 + 23) = 0;
              *(unsigned char *)unint64_t v90 = 0;
              long long v94 = *(_OWORD *)(v90 + 24);
              long long v95 = *(_OWORD *)(v90 + 40);
              *(_OWORD *)(v88 + 49) = *(_OWORD *)(v90 + 49);
              *(_OWORD *)(v88 + 40) = v95;
              *(_OWORD *)(v88 + 24) = v94;
              unint64_t v88 = v90;
            }
            while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
            unint64_t v96 = (long long *)(v90 + 24);
            uint64_t v97 = (void **)(a2 - 72);
            int v98 = *(char *)(v90 + 23);
            if (v90 == a2 - 72)
            {
              if (v98 < 0) {
                operator delete(*(void **)v90);
              }
              *(void *)unint64_t v90 = v86;
              *(void *)(v90 + 15) = *(void *)&v149[7];
              *(void *)(v90 + 8) = *(void *)v149;
              *(unsigned char *)(v90 + 23) = v87;
              *(_OWORD *)(v90 + 49) = *(_OWORD *)&v142[9];
              *unint64_t v96 = v136;
              *(_OWORD *)(v90 + 40) = *(_OWORD *)v142;
            }
            else
            {
              if (v98 < 0) {
                operator delete(*(void **)v90);
              }
              long long v99 = *(_OWORD *)v97;
              *(void *)(v90 + 16) = *(void *)(a2 - 56);
              *(_OWORD *)unint64_t v90 = v99;
              *(unsigned char *)(a2 - 49) = 0;
              *(unsigned char *)(a2 - 72) = 0;
              long long v100 = *(_OWORD *)(a2 - 48);
              long long v101 = *(_OWORD *)(a2 - 32);
              *(_OWORD *)(v90 + 49) = *(_OWORD *)(a2 - 23);
              *unint64_t v96 = v100;
              *(_OWORD *)(v90 + 40) = v101;
              if (*(char *)(a2 - 49) < 0) {
                operator delete(*v97);
              }
              uint64_t v102 = (_OWORD *)(a2 - 48);
              *(void *)(a2 - 72) = v86;
              *(void *)(a2 - 57) = *(void *)&v149[7];
              *(void *)(a2 - 64) = *(void *)v149;
              *(unsigned char *)(a2 - 49) = v87;
              *(_OWORD *)((char *)v102 + 25) = *(_OWORD *)&v142[9];
              *uint64_t v102 = v136;
              v102[1] = *(_OWORD *)v142;
              uint64_t v103 = v90 + 72 - v9;
              if (v103 >= 73)
              {
                unint64_t v104 = (unint64_t)(-2 - 0x71C71C71C71C71C7 * (v103 >> 3)) >> 1;
                float v105 = *(float *)(v90 + 60);
                if (*(float *)(v9 + 72 * v104 + 60) < v105)
                {
                  long long v106 = *(void **)v90;
                  *(void *)unint64_t v158 = *(void *)(v90 + 8);
                  *(void *)&v158[7] = *(void *)(v90 + 15);
                  char v127 = *(unsigned char *)(v90 + 23);
                  *(void *)(v90 + 8) = 0;
                  *(void *)(v90 + 16) = 0;
                  *(void *)unint64_t v90 = 0;
                  int v157 = *(_DWORD *)(v90 + 56);
                  long long v154 = *v96;
                  long long v156 = *(_OWORD *)(v90 + 40);
                  char v107 = *(unsigned char *)(v90 + 64);
                  do
                  {
                    if (*(char *)(v90 + 23) < 0) {
                      operator delete(*(void **)v90);
                    }
                    unint64_t v108 = v9 + 72 * v104;
                    long long v109 = *(_OWORD *)v108;
                    *(void *)(v90 + 16) = *(void *)(v108 + 16);
                    *(_OWORD *)unint64_t v90 = v109;
                    *(unsigned char *)(v108 + 23) = 0;
                    *(unsigned char *)unint64_t v108 = 0;
                    long long v110 = *(_OWORD *)(v108 + 24);
                    long long v111 = *(_OWORD *)(v108 + 40);
                    *(_OWORD *)(v90 + 49) = *(_OWORD *)(v108 + 49);
                    *(_OWORD *)(v90 + 40) = v111;
                    *(_OWORD *)(v90 + 24) = v110;
                    if (!v104) {
                      break;
                    }
                    unint64_t v104 = (v104 - 1) >> 1;
                    unint64_t v90 = v108;
                  }
                  while (*(float *)(v9 + 72 * v104 + 60) < v105);
                  if (*(char *)(v108 + 23) < 0) {
                    operator delete(*(void **)v108);
                  }
                  *(void *)unint64_t v108 = v106;
                  *(void *)(v108 + 15) = *(void *)&v158[7];
                  *(void *)(v108 + 8) = *(void *)v158;
                  *(unsigned char *)(v108 + 23) = v127;
                  *(_DWORD *)(v108 + 56) = v157;
                  *(_OWORD *)(v108 + 24) = v154;
                  *(_OWORD *)(v108 + 40) = v156;
                  *(float *)(v108 + 60) = v105;
                  *(unsigned char *)(v108 + 64) = v107;
                }
              }
            }
          }
          a2 -= 72;
        }
        while ((unint64_t)v84-- > 2);
      }
      return;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = v9 + 72 * ((unint64_t)v12 >> 1);
    uint64_t v15 = a2 - 72;
    if ((unint64_t)v11 < 0x2401)
    {
      sub_2614CA8C0(v14, v9, v15);
    }
    else
    {
      sub_2614CA8C0(v9, v14, v15);
      unint64_t v16 = v9 + 72 * v13;
      sub_2614CA8C0(v124, v16 - 72, a2 - 144);
      sub_2614CA8C0(v123, v16 + 72, a2 - 216);
      sub_2614CA8C0(v16 - 72, v14, v16 + 72);
      sub_2614CA7CC((uint64_t *)v9, v14);
    }
    uint64_t v17 = a3 - 1;
    uint64_t v130 = v17;
    if (a4)
    {
      float v18 = *(float *)(v9 + 60);
    }
    else
    {
      float v18 = *(float *)(v9 + 60);
      if (*(float *)(v9 - 12) >= v18)
      {
        uint64_t v37 = *(void *)v9;
        *(void *)int v151 = *(void *)(v9 + 8);
        *(void *)&v151[7] = *(void *)(v9 + 15);
        char v38 = *(unsigned char *)(v9 + 23);
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)unint64_t v9 = 0;
        long long v133 = *(_OWORD *)(v9 + 24);
        long long v139 = *(_OWORD *)(v9 + 40);
        int v145 = *(_DWORD *)(v9 + 56);
        if (v18 >= *(float *)(a2 - 12))
        {
          unint64_t v41 = v9 + 72;
          do
          {
            a1 = v41;
            if (v41 >= a2) {
              break;
            }
            float v42 = *(float *)(v41 + 60);
            v41 += 72;
          }
          while (v18 >= v42);
        }
        else
        {
          unint64_t v39 = v9;
          do
          {
            a1 = v39 + 72;
            float v40 = *(float *)(v39 + 132);
            v39 += 72;
          }
          while (v18 >= v40);
        }
        unint64_t v43 = a2;
        if (a1 < a2)
        {
          unint64_t v44 = a2;
          do
          {
            unint64_t v43 = v44 - 72;
            float v45 = *(float *)(v44 - 12);
            v44 -= 72;
          }
          while (v18 < v45);
        }
        char v46 = *(unsigned char *)(v9 + 64);
        while (a1 < v43)
        {
          sub_2614CA7CC((uint64_t *)a1, v43);
          do
          {
            float v47 = *(float *)(a1 + 132);
            a1 += 72;
          }
          while (v18 >= v47);
          do
          {
            float v48 = *(float *)(v43 - 12);
            v43 -= 72;
          }
          while (v18 < v48);
        }
        uint64_t v49 = v17;
        unint64_t v50 = (void **)(a1 - 72);
        BOOL v4 = a1 - 72 >= v9;
        BOOL v5 = a1 - 72 == v9;
        if (a1 - 72 != v9)
        {
          if (*(char *)(v9 + 23) < 0) {
            operator delete(*(void **)v9);
          }
          long long v51 = *(_OWORD *)v50;
          *(void *)(v9 + 16) = *(void *)(a1 - 56);
          *(_OWORD *)unint64_t v9 = v51;
          *(unsigned char *)(a1 - 49) = 0;
          *(unsigned char *)(a1 - 72) = 0;
          long long v52 = *(_OWORD *)(a1 - 48);
          long long v53 = *(_OWORD *)(a1 - 32);
          *(_OWORD *)(v9 + 49) = *(_OWORD *)(a1 - 23);
          *(_OWORD *)(v9 + 24) = v52;
          *(_OWORD *)(v9 + 40) = v53;
        }
        if (*(char *)(a1 - 49) < 0) {
          operator delete(*v50);
        }
        a4 = 0;
        *(void *)(a1 - 72) = v37;
        *(void *)(a1 - 57) = *(void *)&v151[7];
        *(void *)(a1 - 64) = *(void *)v151;
        *(unsigned char *)(a1 - 49) = v38;
        *(_DWORD *)(a1 - 16) = v145;
        *(_OWORD *)(a1 - 48) = v133;
        *(_OWORD *)(a1 - 32) = v139;
        *(float *)(a1 - 12) = v18;
        *(unsigned char *)(a1 - 8) = v46;
        a3 = v49;
        goto LABEL_1;
      }
    }
    uint64_t v19 = *(void *)v9;
    *(void *)long long v150 = *v125;
    *(void *)&v150[7] = *(void *)((char *)v125 + 7);
    char v20 = *(unsigned char *)(v9 + 23);
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)unint64_t v9 = 0;
    int v144 = *(_DWORD *)(v10 + 32);
    long long v132 = *(_OWORD *)v10;
    long long v138 = *(_OWORD *)(v10 + 16);
    unint64_t v21 = v9;
    char v22 = *(unsigned char *)(v9 + 64);
    do
    {
      unint64_t v23 = v21;
      v21 += 72;
    }
    while (*(float *)(v23 + 132) < v18);
    unint64_t v24 = a2;
    if (v23 == v9)
    {
      unint64_t v27 = a2;
      while (v21 < v27)
      {
        unint64_t v25 = v27 - 72;
        float v28 = *(float *)(v27 - 12);
        v27 -= 72;
        if (v28 < v18) {
          goto LABEL_22;
        }
      }
      unint64_t v25 = v27;
    }
    else
    {
      do
      {
        unint64_t v25 = v24 - 72;
        float v26 = *(float *)(v24 - 12);
        v24 -= 72;
      }
      while (v26 >= v18);
    }
LABEL_22:
    a1 = v21;
    if (v21 < v25)
    {
      unint64_t v29 = v25;
      do
      {
        sub_2614CA7CC((uint64_t *)a1, v29);
        do
        {
          float v30 = *(float *)(a1 + 132);
          a1 += 72;
        }
        while (v30 < v18);
        do
        {
          float v31 = *(float *)(v29 - 12);
          v29 -= 72;
        }
        while (v31 >= v18);
      }
      while (a1 < v29);
    }
    uint64_t v32 = (void **)(a1 - 72);
    if (a1 - 72 != v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      long long v33 = *(_OWORD *)v32;
      *(void *)(v9 + 16) = *(void *)(a1 - 56);
      *(_OWORD *)unint64_t v9 = v33;
      *(unsigned char *)(a1 - 49) = 0;
      *(unsigned char *)(a1 - 72) = 0;
      long long v34 = *(_OWORD *)(a1 - 48);
      long long v35 = *(_OWORD *)(a1 - 32);
      *(_OWORD *)(v10 + 25) = *(_OWORD *)(a1 - 23);
      *(_OWORD *)unint64_t v10 = v34;
      *(_OWORD *)(v10 + 16) = v35;
    }
    if (*(char *)(a1 - 49) < 0) {
      operator delete(*v32);
    }
    *(void *)(a1 - 72) = v19;
    *(void *)(a1 - 57) = *(void *)&v150[7];
    *(void *)(a1 - 64) = *(void *)v150;
    *(unsigned char *)(a1 - 49) = v20;
    *(_DWORD *)(a1 - 16) = v144;
    *(_OWORD *)(a1 - 48) = v132;
    *(_OWORD *)(a1 - 32) = v138;
    *(float *)(a1 - 12) = v18;
    *(unsigned char *)(a1 - 8) = v22;
    a3 = v130;
    if (v21 < v25) {
      goto LABEL_39;
    }
    BOOL v36 = sub_2614D307C(v9, a1 - 72);
    if (!sub_2614D307C(a1, a2))
    {
      if (v36) {
        goto LABEL_1;
      }
LABEL_39:
      sub_2614D2320(v9, a1 - 72, v130, a4 & 1);
      a4 = 0;
      goto LABEL_1;
    }
    a2 = a1 - 72;
    if (v36) {
      return;
    }
  }
  unint64_t v54 = (void *)(v9 + 72);
  BOOL v56 = v9 == a2 || v54 == (void *)a2;
  if (a4)
  {
    if (!v56)
    {
      uint64_t v57 = 0;
      unint64_t v58 = v9;
      do
      {
        uint64_t v59 = v54;
        if (*(float *)(v58 + 132) < *(float *)(v58 + 60))
        {
          uint64_t v60 = *v54;
          *(void *)unint64_t v152 = *(void *)(v58 + 80);
          *(void *)&v152[7] = *(void *)(v58 + 87);
          char v61 = *(unsigned char *)(v58 + 95);
          v54[1] = 0;
          v54[2] = 0;
          *unint64_t v54 = 0;
          long long v134 = *(_OWORD *)(v58 + 96);
          long long v140 = *(_OWORD *)(v58 + 112);
          int v146 = *(_DWORD *)(v58 + 128);
          float v62 = *(float *)(v58 + 132);
          char v63 = *(unsigned char *)(v58 + 136);
          uint64_t v64 = v57;
          while (1)
          {
            uint64_t v65 = v9 + v64;
            uint64_t v66 = (void **)(v9 + v64 + 72);
            if (*(char *)(v9 + v64 + 95) < 0) {
              operator delete(*v66);
            }
            *(_OWORD *)uint64_t v66 = *(_OWORD *)v65;
            *(void *)(v9 + v64 + 88) = *(void *)(v65 + 16);
            *(unsigned char *)(v65 + 23) = 0;
            *(unsigned char *)uint64_t v65 = 0;
            long long v67 = *(_OWORD *)(v65 + 40);
            *(_OWORD *)(v65 + 96) = *(_OWORD *)(v65 + 24);
            *(_OWORD *)(v65 + 112) = v67;
            *(_OWORD *)(v65 + 121) = *(_OWORD *)(v65 + 49);
            if (!v64) {
              break;
            }
            uint64_t v68 = v9 + v64;
            float v69 = *(float *)(v9 + v64 - 12);
            v64 -= 72;
            if (v62 >= v69)
            {
              uint64_t v70 = v9 + v64 + 72;
              unint64_t v71 = v68 + 24;
              goto LABEL_94;
            }
          }
          unint64_t v71 = v9 + 24;
          uint64_t v70 = v9;
LABEL_94:
          if (*(char *)(v70 + 23) < 0) {
            operator delete(*(void **)v70);
          }
          *(void *)uint64_t v70 = v60;
          *(void *)(v70 + 15) = *(void *)&v152[7];
          *(void *)(v70 + 8) = *(void *)v152;
          *(unsigned char *)(v70 + 23) = v61;
          *(_DWORD *)(v71 + 32) = v146;
          *(_OWORD *)unint64_t v71 = v134;
          *(_OWORD *)(v71 + 16) = v140;
          *(float *)(v70 + 60) = v62;
          *(unsigned char *)(v70 + 64) = v63;
        }
        unint64_t v54 = v59 + 9;
        v57 += 72;
        unint64_t v58 = (unint64_t)v59;
      }
      while (v59 + 9 != (void *)a2);
    }
  }
  else if (!v56)
  {
    do
    {
      uint64_t v113 = v54;
      if (*(float *)(v9 + 132) < *(float *)(v9 + 60))
      {
        uint64_t v114 = *v54;
        *(void *)long long v155 = *(void *)(v9 + 80);
        *(void *)&v155[7] = *(void *)(v9 + 87);
        char v115 = *(unsigned char *)(v9 + 95);
        v54[1] = 0;
        v54[2] = 0;
        *unint64_t v54 = 0;
        long long v137 = *(_OWORD *)(v9 + 96);
        long long v143 = *(_OWORD *)(v9 + 112);
        int v148 = *(_DWORD *)(v9 + 128);
        float v116 = *(float *)(v9 + 132);
        char v117 = *(unsigned char *)(v9 + 136);
        uint64_t v118 = v54;
        do
        {
          uint64_t v119 = v118;
          if (*((char *)v118 + 23) < 0) {
            operator delete((void *)*v118);
          }
          *(_OWORD *)uint64_t v118 = *(_OWORD *)(v118 - 9);
          long long v120 = *((_OWORD *)v118 - 2);
          *(_OWORD *)(v118 + 3) = *((_OWORD *)v118 - 3);
          v118[2] = *(v118 - 7);
          *((unsigned char *)v118 - 72) = 0;
          v118 -= 9;
          *((unsigned char *)v119 - 49) = 0;
          *(_OWORD *)(v119 + 5) = v120;
          float v121 = *((float *)v119 - 21);
          *(_OWORD *)((char *)v119 + 49) = *(_OWORD *)((char *)v119 - 23);
        }
        while (v116 < v121);
        if (*((char *)v119 - 49) < 0) {
          operator delete((void *)*v118);
        }
        long long v122 = v119 - 6;
        void *v118 = v114;
        *(void *)((char *)v119 - 57) = *(void *)&v155[7];
        *(v119 - 8) = *(void *)v155;
        *((unsigned char *)v119 - 49) = v115;
        *((_DWORD *)v122 + 8) = v148;
        *(_OWORD *)long long v122 = v137;
        *((_OWORD *)v122 + 1) = v143;
        *((float *)v119 - 3) = v116;
        *((unsigned char *)v119 - 8) = v117;
      }
      unint64_t v54 = v113 + 9;
      unint64_t v9 = (unint64_t)v113;
    }
    while (v113 + 9 != (void *)a2);
  }
}

__n128 sub_2614CA7CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *(void *)uint64_t v12 = a1[1];
  *(void *)&v12[7] = *(uint64_t *)((char *)a1 + 15);
  char v4 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v10 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)&v11[9] = *(_OWORD *)((char *)a1 + 49);
  uint64_t v5 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v6 = (_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 49);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)((char *)a1 + 49) = v7;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = *(void *)v12;
  *(void *)(a2 + 15) = *(void *)&v12[7];
  *(unsigned char *)(a2 + 23) = v4;
  *uint64_t v6 = v10;
  v6[1] = *(_OWORD *)v11;
  __n128 result = *(__n128 *)&v11[9];
  *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)&v11[9];
  return result;
}

double sub_2614CA8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  v6.n128_u32[0] = *(_DWORD *)(a2 + 60);
  float v7 = *(float *)(a3 + 60);
  if (v6.n128_f32[0] >= *(float *)(a1 + 60))
  {
    if (v7 >= v6.n128_f32[0]) {
      return v6.n128_f64[0];
    }
    __n128 v6 = sub_2614CA7CC((uint64_t *)a2, a3);
    v6.n128_u32[0] = *(_DWORD *)(a2 + 60);
    if (v6.n128_f32[0] >= *(float *)(v5 + 60)) {
      return v6.n128_f64[0];
    }
    a1 = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 >= v6.n128_f32[0])
    {
      __n128 v6 = sub_2614CA7CC((uint64_t *)a1, a2);
      v6.n128_u32[0] = *(_DWORD *)(a3 + 60);
      if (v6.n128_f32[0] >= *(float *)(a2 + 60)) {
        return v6.n128_f64[0];
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }
  v6.n128_u64[0] = sub_2614CA7CC((uint64_t *)a1, v8).n128_u64[0];
  return v6.n128_f64[0];
}

double sub_2614CA980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8.n128_f64[0] = sub_2614CA8C0(a1, a2, a3);
  v8.n128_u32[0] = *(_DWORD *)(a4 + 60);
  if (v8.n128_f32[0] < *(float *)(a3 + 60))
  {
    __n128 v8 = sub_2614CA7CC((uint64_t *)a3, a4);
    v8.n128_u32[0] = *(_DWORD *)(a3 + 60);
    if (v8.n128_f32[0] < *(float *)(a2 + 60))
    {
      __n128 v8 = sub_2614CA7CC((uint64_t *)a2, a3);
      v8.n128_u32[0] = *(_DWORD *)(a2 + 60);
      if (v8.n128_f32[0] < *(float *)(a1 + 60))
      {
        v8.n128_u64[0] = sub_2614CA7CC((uint64_t *)a1, a2).n128_u64[0];
      }
    }
  }
  return v8.n128_f64[0];
}

double sub_2614CAA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10.n128_f64[0] = sub_2614CA980(a1, a2, a3, a4);
  v10.n128_u32[0] = *(_DWORD *)(a5 + 60);
  if (v10.n128_f32[0] < *(float *)(a4 + 60))
  {
    __n128 v10 = sub_2614CA7CC((uint64_t *)a4, a5);
    v10.n128_u32[0] = *(_DWORD *)(a4 + 60);
    if (v10.n128_f32[0] < *(float *)(a3 + 60))
    {
      __n128 v10 = sub_2614CA7CC((uint64_t *)a3, a4);
      v10.n128_u32[0] = *(_DWORD *)(a3 + 60);
      if (v10.n128_f32[0] < *(float *)(a2 + 60))
      {
        __n128 v10 = sub_2614CA7CC((uint64_t *)a2, a3);
        v10.n128_u32[0] = *(_DWORD *)(a2 + 60);
        if (v10.n128_f32[0] < *(float *)(a1 + 60))
        {
          v10.n128_u64[0] = sub_2614CA7CC((uint64_t *)a1, a2).n128_u64[0];
        }
      }
    }
  }
  return v10.n128_f64[0];
}

BOOL sub_2614CAAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 12) < *(float *)(a1 + 60))
      {
        sub_2614CA7CC((uint64_t *)a1, a2 - 72);
        return 1;
      }
      return result;
    case 3uLL:
      sub_2614CA8C0(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_2614CA980(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_2614CAA28(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v6 = a1 + 144;
      sub_2614CA8C0(a1, a1 + 72, a1 + 144);
      uint64_t v7 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    float v10 = *(float *)(v7 + 60);
    if (v10 < *(float *)(v6 + 60))
    {
      uint64_t v21 = *(void *)v7;
      *(void *)unint64_t v25 = *(void *)(v7 + 8);
      *(void *)&v25[7] = *(void *)(v7 + 15);
      char v11 = *(unsigned char *)(v7 + 23);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      long long v22 = *(_OWORD *)(v7 + 24);
      long long v23 = *(_OWORD *)(v7 + 40);
      int v24 = *(_DWORD *)(v7 + 56);
      uint64_t v12 = v8;
      char v13 = *(unsigned char *)(v7 + 64);
      while (1)
      {
        uint64_t v14 = a1 + v12;
        uint64_t v15 = (void **)(a1 + v12 + 216);
        if (*(char *)(a1 + v12 + 239) < 0) {
          operator delete(*v15);
        }
        *(_OWORD *)uint64_t v15 = *(_OWORD *)(v14 + 144);
        *(void *)(a1 + v12 + 232) = *(void *)(v14 + 160);
        *(unsigned char *)(v14 + 167) = 0;
        *(unsigned char *)(v14 + 144) = 0;
        long long v16 = *(_OWORD *)(v14 + 184);
        *(_OWORD *)(v14 + 240) = *(_OWORD *)(v14 + 168);
        *(_OWORD *)(v14 + 256) = v16;
        *(_OWORD *)(v14 + 265) = *(_OWORD *)(v14 + 193);
        if (v12 == -144) {
          break;
        }
        uint64_t v17 = a1 + v12;
        float v18 = *(float *)(a1 + v12 + 132);
        v12 -= 72;
        if (v10 >= v18)
        {
          uint64_t v19 = a1 + v12 + 216;
          uint64_t v20 = v17 + 168;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1 + 24;
      uint64_t v19 = a1;
LABEL_14:
      if (*(char *)(v19 + 23) < 0) {
        operator delete(*(void **)v19);
      }
      *(void *)uint64_t v19 = v21;
      *(void *)(v19 + 8) = *(void *)v25;
      *(void *)(v19 + 15) = *(void *)&v25[7];
      *(unsigned char *)(v19 + 23) = v11;
      *(_OWORD *)uint64_t v20 = v22;
      *(_OWORD *)(v20 + 16) = v23;
      *(_DWORD *)(v20 + 32) = v24;
      *(float *)(v19 + 60) = v10;
      ++v9;
      *(unsigned char *)(v19 + 64) = v13;
      if (v9 == 8) {
        return v7 + 72 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 72;
    v7 += 72;
    if (v7 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_2614CADB8(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 72;
      long long v6 = *(_OWORD *)(v3 - 72);
      *(void *)(v4 - 56) = *(void *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v6;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 72) = 0;
      long long v7 = *(_OWORD *)(v3 - 48);
      long long v8 = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 23) = *(_OWORD *)(v3 - 23);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 32) = v8;
      v4 -= 72;
      v3 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  *BOOL result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2614CAE4C(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 9;
      *(void *)(a1 + 16) = v2 - 9;
      if (*((char *)v2 - 49) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2614CAEB0(uint64_t result, float *a2, int a3, int a4, int a5, char a6, float a7)
{
  *(float *)(result + 4) = a2[1] + a7;
  float v7 = a2[4];
  *(float *)(result + 16) = v7;
  int v8 = *((_DWORD *)a2 + 3);
  *(_DWORD *)(result + 12) = v8;
  int v9 = *((_DWORD *)a2 + 6);
  *(_DWORD *)(result + 24) = v9;
  if (a3 == a5)
  {
    *(_DWORD *)(result + 12) = v8 + 1;
    *(float *)(result + 16) = v7 + a7;
  }
  else if ((a6 & 1) == 0)
  {
    *(_DWORD *)(result + 24) = v9 + 1;
  }
  *(float *)(result + 8) = a2[2];
  float v10 = *a2;
  if (a4) {
    float v10 = *(float *)&a4;
  }
  *(float *)BOOL result = v10;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5) + 1;
  return result;
}

unsigned __int8 *sub_2614CAF24(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_2614CB388((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_2614CB7D8(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  long long v16 = (char *)operator new(0x48uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = v16 + 16;
  float v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_2614C96D8(v17, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)uint64_t v17 = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_2614C7990();
          }
          float v26 = operator new(8 * *(void *)&prime);
          unint64_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          unint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            long long v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *unint64_t v29 = *v35;
                  *long long v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  long long v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                unint64_t v29 = v35;
                long long v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        float v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *uint64_t v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    uint64_t v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2614CB87C((uint64_t)v41);
  return i;
}

void sub_2614CB370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2614CB87C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_2614CB388(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v4 = (uint64_t *)a1;
  }
  else {
    uint64_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      char v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      unint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      long long v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL sub_2614CB7D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void sub_2614CB87C(uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2614CB8D4((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_2614CB8D4(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  sub_2614CB938(&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_2614CB938(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2614CB98C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2614CB98C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t *sub_2614CB9DC(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (unint64_t result = *v5; result; unint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void sub_2614CC7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,void *a40)
{
  a37.__locale_ = (std::locale::__imp *)&a18;
  sub_2614CB938((void ***)&a37);
  a37.__locale_ = (std::locale::__imp *)&a40;
  sub_2614CB938((void ***)&a37);

  _Unwind_Resume(a1);
}

void *sub_2614CCA98(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2614C9774();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *sub_2614CCB48(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2614C7990();
  }
  return operator new(24 * a1);
}

uint64_t *sub_2614CCB90(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 24;
      long long v6 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *unint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2614CCC14(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_2614CCC78(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_2614D08D8(result, a4);
    unint64_t result = sub_2614D0928((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_2614CCCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2614CB938(&a9);
  _Unwind_Resume(a1);
}

void sub_2614CCD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  uint64_t v227 = 0;
  os_log_type_t v228 = 0;
  unint64_t v229 = 0;
  if (a3 != a4)
  {
    uint64_t v5 = a4;
    uint64_t v6 = a3;
    unint64_t v7 = (unint64_t)&v229;
    uint64_t v8 = (uint64_t *)(a2 + 440);
    uint64_t v220 = (float *)(a2 + 512);
    uint64_t v9 = a2 + 400;
    uint64_t v213 = (void *)(a2 + 456);
    uint64_t v218 = a2 + 400;
    while (1)
    {
      if (*(char *)(v6 + 23) < 0) {
        sub_2614C96D8(&__dst, *(void **)v6, *(void *)(v6 + 8));
      }
      else {
        std::string __dst = *(std::string *)v6;
      }
      voiceactions::StringSplit(&__dst, " \t", (uint64_t *)&__str);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) >= 2) {
        break;
      }
LABEL_127:
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      sub_2614CB938((void ***)&v232);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v6 += 24;
      if (v6 == v5) {
        goto LABEL_130;
      }
    }
    if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      sub_2614C96D8(&v224, *(void **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
      v224.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v10;
    }
    std::string::size_type v11 = std::string::find(&v224, 58, 0);
    if (v11 == -1)
    {
      float v14 = -1.0;
    }
    else
    {
      std::string::size_type v12 = v11;
      std::string::basic_string(&v232, (const std::string *)__str.__r_.__value_.__l.__data_, 0, v11, (std::allocator<char> *)&v223);
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
      std::string v224 = v232;
      BOOL v13 = std::string::basic_string(&v232, (const std::string *)__str.__r_.__value_.__l.__data_, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v223);
      float v14 = std::stof(v13, 0);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v232.__r_.__value_.__l.__data_);
      }
      std::string::operator=((std::string *)__str.__r_.__value_.__l.__data_, &v224);
    }
    voiceactions::StringJoin(&__str, " ", &v223);
    uint64_t v15 = v228;
    if ((unint64_t)v228 >= v229)
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v228[-v227] >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2614C637C();
      }
      if (0x5555555555555556 * ((uint64_t)(v229 - v227) >> 3) > v18) {
        unint64_t v18 = 0x5555555555555556 * ((uint64_t)(v229 - v227) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v229 - v227) >> 3) >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      unint64_t v234 = &v229;
      if (v19)
      {
        uint64_t v21 = (char *)sub_2614CCB48(v19);
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v20 = 0;
      }
      std::string::size_type v23 = (std::string::size_type)&v21[24 * v17];
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v232.__r_.__value_.__l.__size_ = v23;
      v232.__r_.__value_.__r.__words[2] = v23;
      unint64_t v233 = &v21[24 * v20];
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_2614C96D8((unsigned char *)v23, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
        std::string::size_type v23 = v232.__r_.__value_.__r.__words[2];
      }
      else
      {
        long long v24 = *(_OWORD *)&v223.__r_.__value_.__l.__data_;
        *(void *)(v23 + 16) = *((void *)&v223.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v23 = v24;
      }
      v232.__r_.__value_.__r.__words[2] = v23 + 24;
      sub_2614CCB90(&v227, &v232);
      uint64_t v22 = v228;
      sub_2614CCC14((uint64_t)&v232);
    }
    else
    {
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_2614C96D8(v228, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v16 = *(_OWORD *)&v223.__r_.__value_.__l.__data_;
        *((void *)v228 + 2) = *((void *)&v223.__r_.__value_.__l + 2);
        *uint64_t v15 = v16;
      }
      uint64_t v22 = (char *)v15 + 24;
    }
    os_log_type_t v228 = v22;
    memset(&v232, 0, sizeof(v232));
    sub_2614CE99C((char *)&v232, (long long *)(__str.__r_.__value_.__r.__words[0] + 24), (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((int64_t)(__str.__r_.__value_.__l.__size_ - (__str.__r_.__value_.__r.__words[0] + 24)) >> 3));
    voiceactions::StringJoin(&v232, "_", &__p);
    int v231 = &v232;
    sub_2614CB938((void ***)&v231);
    if (v14 != -1.0)
    {
      sub_2614C8CCC(MEMORY[0x263F8C0F8], (uint64_t)"Custom threshold ", 17);
      uint64_t v25 = (void *)std::ostream::operator<<();
      uint64_t v26 = sub_2614C8CCC(v25, (uint64_t)" for \"", 6);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
LABEL_121:
      uint64_t v65 = sub_2614C8CCC(v26, (uint64_t)p_dst, size);
      sub_2614C8CCC(v65, (uint64_t)"\"\n", 2);
      *(float *)&v232.__r_.__value_.__l.__data_ = v14;
      unint64_t v233 = 0;
      *(_OWORD *)&v232.__r_.__value_.__r.__words[1] = 0uLL;
      sub_2614CE99C(&v232.__r_.__value_.__s.__data_[8], (long long *)(__str.__r_.__value_.__r.__words[0] + 24), (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((int64_t)(__str.__r_.__value_.__l.__size_ - (__str.__r_.__value_.__r.__words[0] + 24)) >> 3));
      uint64_t v230 = &v224;
      uint64_t v66 = sub_2614CAF24(v9, (unsigned __int8 *)&v224, (long long **)&v230);
      *((_DWORD *)v66 + 10) = v232.__r_.__value_.__l.__data_;
      sub_2614CED84((uint64_t *)v66 + 6);
      *((_OWORD *)v66 + 3) = *(_OWORD *)&v232.__r_.__value_.__r.__words[1];
      *((void *)v66 + 8) = v233;
      unint64_t v233 = 0;
      *(_OWORD *)&v232.__r_.__value_.__r.__words[1] = 0uLL;
      int v231 = (std::string *)&v232.__r_.__value_.__r.__words[1];
      sub_2614CB938((void ***)&v231);
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
      *((float *)sub_2614CEB20(a1, (unsigned __int8 *)&v224, (long long **)&v232) + 10) = v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v223.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
      goto LABEL_127;
    }
    if (sub_2614CEA24((void *)(a2 + 440), (unsigned __int8 *)&__p))
    {
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      float v14 = *((float *)sub_2614CEB20(a2 + 440, (unsigned __int8 *)&__p, (long long **)&v232) + 10);
      sub_2614C8CCC(MEMORY[0x263F8C0F8], (uint64_t)"Threshold from file ", 20);
      uint64_t v29 = (void *)std::ostream::operator<<();
      uint64_t v26 = sub_2614C8CCC(v29, (uint64_t)" for \"", 6);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      goto LABEL_121;
    }
    sub_2614CCA98(&v232, "DEFAULT");
    uint64_t v30 = sub_2614CEA24((void *)(a2 + 440), (unsigned __int8 *)&v232);
    uint64_t v31 = v30;
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v232.__r_.__value_.__l.__data_);
      if (v31) {
        goto LABEL_51;
      }
    }
    else if (v30)
    {
LABEL_51:
      uint64_t v32 = sub_2614CCA98(&v232, "DEFAULT");
      unint64_t v33 = sub_2614CB388((uint64_t)v32);
      unint64_t v34 = v33;
      unint64_t v35 = *(void *)(a2 + 448);
      if (v35)
      {
        uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
        v36.i16[0] = vaddlv_u8(v36);
        unint64_t v37 = v36.u32[0];
        if (v36.u32[0] > 1uLL)
        {
          unint64_t v7 = v33;
          if (v33 >= v35) {
            unint64_t v7 = v33 % v35;
          }
        }
        else
        {
          unint64_t v7 = (v35 - 1) & v33;
        }
        unint64_t v52 = *(void ***)(*v8 + 8 * v7);
        if (v52)
        {
          unint64_t v53 = (char *)*v52;
          if (*v52)
          {
            do
            {
              unint64_t v54 = *((void *)v53 + 1);
              if (v54 == v34)
              {
                if (sub_2614CB7D8((unsigned __int8 *)v53 + 16, (unsigned __int8 *)&v232))
                {
                  uint64_t v5 = a4;
                  unint64_t v7 = (unint64_t)&v229;
                  goto LABEL_113;
                }
              }
              else
              {
                if (v37 > 1)
                {
                  if (v54 >= v35) {
                    v54 %= v35;
                  }
                }
                else
                {
                  v54 &= v35 - 1;
                }
                if (v54 != v7) {
                  break;
                }
              }
              unint64_t v53 = *(char **)v53;
            }
            while (v53);
          }
        }
      }
      unint64_t v53 = (char *)operator new(0x30uLL);
      *(void *)unint64_t v53 = 0;
      *((void *)v53 + 1) = v34;
      *(std::string *)(v53 + 16) = v232;
      memset(&v232, 0, sizeof(v232));
      *((_DWORD *)v53 + 10) = 0;
      float v55 = (float)(unint64_t)(*(void *)(a2 + 464) + 1);
      float v56 = *(float *)(a2 + 472);
      if (!v35 || (float)(v56 * (float)v35) < v55)
      {
        BOOL v57 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3) {
          BOOL v57 = 1;
        }
        unint64_t v58 = v57 | (2 * v35);
        unint64_t v59 = vcvtps_u32_f32(v55 / v56);
        if (v58 <= v59) {
          size_t v60 = v59;
        }
        else {
          size_t v60 = v58;
        }
        sub_2614D06DC(a2 + 440, v60);
        unint64_t v35 = *(void *)(a2 + 448);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35) {
            unint64_t v7 = v34 % v35;
          }
          else {
            unint64_t v7 = v34;
          }
        }
        else
        {
          unint64_t v7 = (v35 - 1) & v34;
        }
      }
      uint64_t v61 = *v8;
      uint64_t v62 = *(void **)(*v8 + 8 * v7);
      if (v62)
      {
        *(void *)unint64_t v53 = *v62;
        uint64_t v5 = a4;
        unint64_t v7 = (unint64_t)&v229;
      }
      else
      {
        *(void *)unint64_t v53 = *v213;
        *uint64_t v213 = v53;
        *(void *)(v61 + 8 * v7) = v213;
        uint64_t v5 = a4;
        unint64_t v7 = (unint64_t)&v229;
        if (!*(void *)v53) {
          goto LABEL_112;
        }
        unint64_t v63 = *(void *)(*(void *)v53 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v63 >= v35) {
            v63 %= v35;
          }
        }
        else
        {
          v63 &= v35 - 1;
        }
        uint64_t v62 = (void *)(*v8 + 8 * v63);
      }
      void *v62 = v53;
LABEL_112:
      ++*(void *)(a2 + 464);
LABEL_113:
      float v14 = *((float *)v53 + 10);
      uint64_t v9 = v218;
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v232.__r_.__value_.__l.__data_);
      }
      sub_2614C8CCC(MEMORY[0x263F8C0F8], (uint64_t)"Using override threshold ", 25);
      uint64_t v64 = (void *)std::ostream::operator<<();
      uint64_t v26 = sub_2614C8CCC(v64, (uint64_t)" for \"", 6);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      goto LABEL_121;
    }
    std::string::size_type v38 = __str.__r_.__value_.__r.__words[0];
    float v14 = 0.0;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) >= 2)
    {
      uint64_t v39 = 0;
      unint64_t v40 = 1;
      do
      {
        std::string::size_type v41 = v38 + v39;
        uint64_t v42 = v38 + v39 + 24;
        if (*(char *)(v41 + 47) < 0)
        {
          sub_2614C96D8(&v232, *(void **)v42, *(void *)(v41 + 32));
        }
        else
        {
          long long v43 = *(_OWORD *)v42;
          v232.__r_.__value_.__r.__words[2] = *(void *)(v42 + 16);
          *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v43;
        }
        if (sub_2614CEA24((void *)(a2 + 440), (unsigned __int8 *)&v232))
        {
          int v231 = &v232;
          uint64_t v44 = (float *)(sub_2614CEB20(a2 + 440, (unsigned __int8 *)&v232, (long long **)&v231) + 40);
        }
        else
        {
          uint64_t v45 = sub_2614C8CCC(MEMORY[0x263F8C0F8], (uint64_t)"Missing threshold for ", 22);
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v46 = &v232;
          }
          else {
            uint64_t v46 = (std::string *)v232.__r_.__value_.__r.__words[0];
          }
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v47 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v47 = v232.__r_.__value_.__l.__size_;
          }
          uint64_t v48 = sub_2614C8CCC(v45, (uint64_t)v46, v47);
          sub_2614C8CCC(v48, (uint64_t)", using default ", 16);
          uint64_t v49 = (void *)std::ostream::operator<<();
          sub_2614C8CCC(v49, (uint64_t)"\n", 1);
          uint64_t v44 = v220;
        }
        float v50 = *v44;
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v232.__r_.__value_.__l.__data_);
        }
        float v14 = v14 + v50;
        ++v40;
        std::string::size_type v38 = __str.__r_.__value_.__r.__words[0];
        v39 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) > v40);
    }
    sub_2614C8CCC(MEMORY[0x263F8C0F8], (uint64_t)"Computed threshold ", 19);
    uint64_t v9 = v218;
    unint64_t v7 = (unint64_t)&v229;
    unint64_t v51 = (void *)std::ostream::operator<<();
    uint64_t v26 = sub_2614C8CCC(v51, (uint64_t)" for \"", 6);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    goto LABEL_121;
  }
LABEL_130:
  uint64_t v67 = a1 + 16;
  uint64_t v68 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v69 = (unint64_t)"\n";
  while (1)
  {
    uint64_t v67 = *(void *)v67;
    if (!v67) {
      break;
    }
    sub_2614C8CCC(v68, (uint64_t)"threshold[ \"", 12);
    int v70 = *(char *)(v67 + 39);
    if (v70 >= 0) {
      uint64_t v71 = v67 + 16;
    }
    else {
      uint64_t v71 = *(void *)(v67 + 16);
    }
    if (v70 >= 0) {
      uint64_t v72 = *(unsigned __int8 *)(v67 + 39);
    }
    else {
      uint64_t v72 = *(void *)(v67 + 24);
    }
    sub_2614C8CCC(v68, v71, v72);
    sub_2614C8CCC(v68, (uint64_t)"\"] = ", 5);
    uint64_t v73 = (void *)std::ostream::operator<<();
    sub_2614C8CCC(v73, (uint64_t)"\n", 1);
  }
  uint64_t v221 = (char **)(a2 + 80);
  sub_2614CEDC0((uint64_t *)(a2 + 80));
  if (*(void *)(a2 + 128))
  {
    uint64_t v74 = *(void **)(a2 + 120);
    if (v74)
    {
      do
      {
        uint64_t v75 = (void *)*v74;
        operator delete(v74);
        uint64_t v74 = v75;
      }
      while (v75);
    }
    *(void *)(a2 + 120) = 0;
    uint64_t v76 = *(void *)(a2 + 112);
    if (v76)
    {
      for (uint64_t i = 0; i != v76; ++i)
        *(void *)(*(void *)(a2 + 104) + 8 * i) = 0;
    }
    *(void *)(a2 + 128) = 0;
  }
  sub_2614CCA98(&v232, "<eps>");
  sub_2614CEE18(a2, &v232);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  sub_2614CCA98(&v232, "<eps>");
  sub_2614CF27C(a2, (long long *)&v232);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  memset(&v232, 0, sizeof(v232));
  sub_2614CF2F4(v221, (uint64_t)&v232);
  if (v232.__r_.__value_.__r.__words[0]) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 511) < 0)
  {
    if (*(void *)(a2 + 496)) {
      goto LABEL_154;
    }
  }
  else if (*(unsigned char *)(a2 + 511))
  {
LABEL_154:
    int v78 = sub_2614CF27C(a2, (long long *)(a2 + 488));
    goto LABEL_157;
  }
  int v78 = -1;
LABEL_157:
  *(_DWORD *)(a2 + 480) = v78;
  unint64_t v79 = *(void ***)(a2 + 80);
  unint64_t v80 = (char *)v79[1];
  unint64_t v81 = (char *)v79[2];
  if (v80 >= v81)
  {
    unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (unsigned char *)*v79) >> 3);
    unint64_t v84 = v83 + 1;
    if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2614C637C();
    }
    unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((v81 - (unsigned char *)*v79) >> 3);
    if (2 * v85 > v84) {
      unint64_t v84 = 2 * v85;
    }
    if (v85 >= 0x555555555555555) {
      unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v86 = v84;
    }
    if (v86) {
      unint64_t v86 = (unint64_t)sub_2614CCB48(v86);
    }
    else {
      uint64_t v87 = 0;
    }
    unint64_t v88 = v86 + 24 * v83;
    unint64_t v89 = v86 + 24 * v87;
    *(void *)unint64_t v88 = 0;
    *(_DWORD *)(v88 + 8) = v78;
    *(void *)(v88 + 12) = 0;
    *(unsigned char *)(v88 + 20) = 0;
    int v82 = (void *)(v88 + 24);
    uint64_t v91 = (char *)*v79;
    unint64_t v90 = (char *)v79[1];
    if (v90 != *v79)
    {
      do
      {
        long long v92 = *(_OWORD *)(v90 - 24);
        *(void *)(v88 - 11) = *(void *)(v90 - 11);
        *(_OWORD *)(v88 - 24) = v92;
        v88 -= 24;
        v90 -= 24;
      }
      while (v90 != v91);
      unint64_t v90 = (char *)*v79;
    }
    *unint64_t v79 = (void *)v88;
    v79[1] = v82;
    v79[2] = (void *)v89;
    if (v90) {
      operator delete(v90);
    }
  }
  else
  {
    *(void *)unint64_t v80 = 0;
    *((_DWORD *)v80 + 2) = v78;
    *(void *)(v80 + 12) = 0;
    int v82 = v80 + 24;
    v80[20] = 0;
  }
  v79[1] = v82;
  uint64_t v93 = v227;
  unint64_t v217 = v228;
  if ((unsigned char *)v227 != v228)
  {
    uint64_t v215 = (void *)(a2 + 120);
    while (1)
    {
      if (*(char *)(v93 + 23) < 0)
      {
        sub_2614C96D8(&v232, *(void **)v93, *(void *)(v93 + 8));
      }
      else
      {
        long long v94 = *(_OWORD *)v93;
        v232.__r_.__value_.__r.__words[2] = *(void *)(v93 + 16);
        *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v94;
      }
      if (std::string::find(&v232, 58, 0) != -1) {
        __assert_rtn("CompileFstFromProns", "OnlineFstSpottingDecoder.hpp", 821, "line.find(':') == std::string::npos");
      }
      voiceactions::StringSplit(&v232, " \t", (uint64_t *)&__dst);
      std::string::size_type v95 = __dst.__r_.__value_.__r.__words[0];
      if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        sub_2614C96D8(&__str, *(void **)__dst.__r_.__value_.__l.__data_, *(void *)(__dst.__r_.__value_.__r.__words[0] + 8));
        std::string::size_type v95 = __dst.__r_.__value_.__r.__words[0];
      }
      else
      {
        long long v96 = *(_OWORD *)__dst.__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = *(void *)(__dst.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v96;
      }
      memset(&v224, 0, sizeof(v224));
      sub_2614CE99C((char *)&v224, (long long *)(v95 + 24), (long long *)__dst.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - (v95 + 24)) >> 3));
      uint64_t v219 = v93;
      sub_2614CED84((uint64_t *)&__dst);
      std::string __dst = v224;
      memset(&v224, 0, sizeof(v224));
      v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
      sub_2614CB938((void ***)&v223);
      int v97 = -1 - 1431655765 * ((*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
      std::string::size_type v98 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        unint64_t v99 = 1;
        do
        {
          int v100 = sub_2614CF27C(a2, (long long *)(v98 + 24 * (v99 - 1)));
          memset(&v224, 0, sizeof(v224));
          sub_2614CF2F4(v221, (uint64_t)&v224);
          if (v224.__r_.__value_.__r.__words[0]) {
            operator delete(v224.__r_.__value_.__l.__data_);
          }
          uint64_t v101 = *(void *)(a2 + 88);
          int v102 = v97 + 2 * v99;
          int v103 = v102 - 1;
          int v104 = *(_DWORD *)(a2 + 480);
          unint64_t v105 = *(void *)(v101 - 16);
          unint64_t v106 = *(void *)(v101 - 8);
          if (v105 >= v106)
          {
            uint64_t v108 = *(void *)(v101 - 24);
            unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105 - v108) >> 3);
            unint64_t v110 = v109 + 1;
            if (v109 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2614C637C();
            }
            unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - v108) >> 3);
            if (2 * v111 > v110) {
              unint64_t v110 = 2 * v111;
            }
            if (v111 >= 0x555555555555555) {
              unint64_t v112 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v112 = v110;
            }
            if (v112) {
              unint64_t v112 = (unint64_t)sub_2614CCB48(v112);
            }
            else {
              uint64_t v113 = 0;
            }
            unint64_t v114 = v112 + 24 * v109;
            *(_DWORD *)unint64_t v114 = v103;
            *(_DWORD *)(v114 + 4) = v103;
            *(_DWORD *)(v114 + 8) = v104;
            *(void *)(v114 + 12) = 0;
            *(unsigned char *)(v114 + 20) = 0;
            float v116 = *(char **)(v101 - 24);
            char v115 = *(char **)(v101 - 16);
            unint64_t v117 = v114;
            if (v115 != v116)
            {
              do
              {
                long long v118 = *(_OWORD *)(v115 - 24);
                *(void *)(v117 - 11) = *(void *)(v115 - 11);
                *(_OWORD *)(v117 - 24) = v118;
                v117 -= 24;
                v115 -= 24;
              }
              while (v115 != v116);
              char v115 = *(char **)(v101 - 24);
            }
            unint64_t v107 = v114 + 24;
            *(void *)(v101 - 24) = v117;
            *(void *)(v101 - 16) = v114 + 24;
            *(void *)(v101 - 8) = v112 + 24 * v113;
            if (v115) {
              operator delete(v115);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v105 = v103;
            *(_DWORD *)(v105 + 4) = v103;
            *(_DWORD *)(v105 + 8) = v104;
            *(void *)(v105 + 12) = 0;
            unint64_t v107 = v105 + 24;
            *(unsigned char *)(v105 + 20) = 0;
          }
          *(void *)(v101 - 16) = v107;
          uint64_t v119 = *(void *)(a2 + 88);
          if (v99 == 1) {
            int v120 = 0;
          }
          else {
            int v120 = v97 + 2 * (v99 - 1);
          }
          int v121 = *(_DWORD *)(a2 + 480);
          unint64_t v122 = *(void *)(v119 - 16);
          unint64_t v123 = *(void *)(v119 - 8);
          if (v122 >= v123)
          {
            uint64_t v125 = *(void *)(v119 - 24);
            unint64_t v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - v125) >> 3);
            unint64_t v127 = v126 + 1;
            if (v126 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2614C637C();
            }
            unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - v125) >> 3);
            if (2 * v128 > v127) {
              unint64_t v127 = 2 * v128;
            }
            if (v128 >= 0x555555555555555) {
              unint64_t v129 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v129 = v127;
            }
            if (v129) {
              unint64_t v129 = (unint64_t)sub_2614CCB48(v129);
            }
            else {
              uint64_t v130 = 0;
            }
            unint64_t v131 = v129 + 24 * v126;
            *(_DWORD *)unint64_t v131 = v103;
            *(_DWORD *)(v131 + 4) = v120;
            *(_DWORD *)(v131 + 8) = v121;
            *(void *)(v131 + 12) = 0;
            *(unsigned char *)(v131 + 20) = 0;
            long long v133 = *(char **)(v119 - 24);
            long long v132 = *(char **)(v119 - 16);
            unint64_t v134 = v131;
            if (v132 != v133)
            {
              do
              {
                long long v135 = *(_OWORD *)(v132 - 24);
                *(void *)(v134 - 11) = *(void *)(v132 - 11);
                *(_OWORD *)(v134 - 24) = v135;
                v134 -= 24;
                v132 -= 24;
              }
              while (v132 != v133);
              long long v132 = *(char **)(v119 - 24);
            }
            unint64_t v124 = v131 + 24;
            *(void *)(v119 - 24) = v134;
            *(void *)(v119 - 16) = v131 + 24;
            *(void *)(v119 - 8) = v129 + 24 * v130;
            if (v132) {
              operator delete(v132);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v122 = v103;
            *(_DWORD *)(v122 + 4) = v120;
            *(_DWORD *)(v122 + 8) = v121;
            *(void *)(v122 + 12) = 0;
            unint64_t v124 = v122 + 24;
            *(unsigned char *)(v122 + 20) = 0;
          }
          *(void *)(v119 - 16) = v124;
          memset(&v224, 0, sizeof(v224));
          sub_2614CF2F4(v221, (uint64_t)&v224);
          if (v224.__r_.__value_.__r.__words[0]) {
            operator delete(v224.__r_.__value_.__l.__data_);
          }
          uint64_t v136 = *(void *)(a2 + 88);
          unint64_t v137 = *(void *)(v136 - 16);
          unint64_t v138 = *(void *)(v136 - 8);
          if (v137 >= v138)
          {
            uint64_t v140 = *(void *)(v136 - 24);
            unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v137 - v140) >> 3);
            unint64_t v142 = v141 + 1;
            if (v141 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2614C637C();
            }
            unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - v140) >> 3);
            if (2 * v143 > v142) {
              unint64_t v142 = 2 * v143;
            }
            if (v143 >= 0x555555555555555) {
              unint64_t v144 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v144 = v142;
            }
            if (v144) {
              unint64_t v144 = (unint64_t)sub_2614CCB48(v144);
            }
            else {
              uint64_t v145 = 0;
            }
            unint64_t v146 = v144 + 24 * v141;
            *(_DWORD *)unint64_t v146 = v102;
            *(_DWORD *)(v146 + 4) = v102;
            *(_DWORD *)(v146 + 8) = v100;
            *(void *)(v146 + 12) = 0;
            *(unsigned char *)(v146 + 20) = 0;
            int v148 = *(char **)(v136 - 24);
            int v147 = *(char **)(v136 - 16);
            unint64_t v149 = v146;
            if (v147 != v148)
            {
              do
              {
                long long v150 = *(_OWORD *)(v147 - 24);
                *(void *)(v149 - 11) = *(void *)(v147 - 11);
                *(_OWORD *)(v149 - 24) = v150;
                v149 -= 24;
                v147 -= 24;
              }
              while (v147 != v148);
              int v147 = *(char **)(v136 - 24);
            }
            unint64_t v139 = v146 + 24;
            *(void *)(v136 - 24) = v149;
            *(void *)(v136 - 16) = v146 + 24;
            *(void *)(v136 - 8) = v144 + 24 * v145;
            if (v147) {
              operator delete(v147);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v137 = v102;
            *(_DWORD *)(v137 + 4) = v102;
            *(_DWORD *)(v137 + 8) = v100;
            *(void *)(v137 + 12) = 0;
            unint64_t v139 = v137 + 24;
            *(unsigned char *)(v137 + 20) = 0;
          }
          *(void *)(v136 - 16) = v139;
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3) == v99)
            unint64_t v69 = sub_2614CEE18(a2, &__str);
          else {
            unint64_t v69 = 0;
          }
          uint64_t v151 = *(void *)(a2 + 88);
          long long v153 = *(char **)(v151 - 16);
          unint64_t v152 = *(void *)(v151 - 8);
          if ((unint64_t)v153 >= v152)
          {
            long long v155 = *(char **)(v151 - 24);
            unint64_t v156 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3);
            unint64_t v157 = v156 + 1;
            if (v156 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2614C637C();
            }
            unint64_t v158 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v152 - (void)v155) >> 3);
            if (2 * v158 > v157) {
              unint64_t v157 = 2 * v158;
            }
            if (v158 >= 0x555555555555555) {
              unint64_t v159 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v159 = v157;
            }
            if (v159)
            {
              unint64_t v159 = (unint64_t)sub_2614CCB48(v159);
              long long v155 = *(char **)(v151 - 24);
              long long v153 = *(char **)(v151 - 16);
            }
            else
            {
              uint64_t v160 = 0;
            }
            unint64_t v161 = v159 + 24 * v156;
            *(_DWORD *)unint64_t v161 = v102;
            *(_DWORD *)(v161 + 4) = v120;
            *(_DWORD *)(v161 + 8) = v100;
            *(_DWORD *)(v161 + 12) = v69;
            *(_DWORD *)(v161 + 16) = 0;
            *(unsigned char *)(v161 + 20) = 0;
            unint64_t v162 = v161;
            if (v153 != v155)
            {
              do
              {
                long long v163 = *(_OWORD *)(v153 - 24);
                *(void *)(v162 - 11) = *(void *)(v153 - 11);
                *(_OWORD *)(v162 - 24) = v163;
                v162 -= 24;
                v153 -= 24;
              }
              while (v153 != v155);
              long long v155 = *(char **)(v151 - 24);
            }
            long long v154 = (_DWORD *)(v161 + 24);
            *(void *)(v151 - 24) = v162;
            *(void *)(v151 - 16) = v161 + 24;
            *(void *)(v151 - 8) = v159 + 24 * v160;
            if (v155) {
              operator delete(v155);
            }
          }
          else
          {
            *(_DWORD *)long long v153 = v102;
            *((_DWORD *)v153 + 1) = v120;
            *((_DWORD *)v153 + 2) = v100;
            *((_DWORD *)v153 + 3) = v69;
            *((_DWORD *)v153 + 4) = 0;
            long long v154 = v153 + 24;
            v153[20] = 0;
          }
          *(void *)(v151 - 16) = v154;
          uint64_t v164 = *(void *)(a2 + 88);
          int v166 = *(char **)(v164 - 16);
          unint64_t v165 = *(void *)(v164 - 8);
          if ((unint64_t)v166 >= v165)
          {
            int64_t v168 = *(char **)(v164 - 24);
            unint64_t v169 = 0xAAAAAAAAAAAAAAABLL * ((v166 - v168) >> 3);
            unint64_t v170 = v169 + 1;
            if (v169 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2614C637C();
            }
            unint64_t v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165 - (void)v168) >> 3);
            if (2 * v171 > v170) {
              unint64_t v170 = 2 * v171;
            }
            if (v171 >= 0x555555555555555) {
              unint64_t v172 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v172 = v170;
            }
            if (v172)
            {
              unint64_t v172 = (unint64_t)sub_2614CCB48(v172);
              int64_t v168 = *(char **)(v164 - 24);
              int v166 = *(char **)(v164 - 16);
            }
            else
            {
              uint64_t v173 = 0;
            }
            unint64_t v174 = v172 + 24 * v169;
            *(_DWORD *)unint64_t v174 = v102;
            *(_DWORD *)(v174 + 4) = v103;
            *(_DWORD *)(v174 + 8) = v100;
            *(_DWORD *)(v174 + 12) = v69;
            *(_DWORD *)(v174 + 16) = 0;
            *(unsigned char *)(v174 + 20) = 0;
            unint64_t v175 = v174;
            if (v166 != v168)
            {
              do
              {
                long long v176 = *(_OWORD *)(v166 - 24);
                *(void *)(v175 - 11) = *(void *)(v166 - 11);
                *(_OWORD *)(v175 - 24) = v176;
                v175 -= 24;
                v166 -= 24;
              }
              while (v166 != v168);
              int64_t v168 = *(char **)(v164 - 24);
            }
            uint64_t v167 = (_DWORD *)(v174 + 24);
            *(void *)(v164 - 24) = v175;
            *(void *)(v164 - 16) = v174 + 24;
            *(void *)(v164 - 8) = v172 + 24 * v173;
            if (v168) {
              operator delete(v168);
            }
          }
          else
          {
            *(_DWORD *)int v166 = v102;
            *((_DWORD *)v166 + 1) = v103;
            *((_DWORD *)v166 + 2) = v100;
            *((_DWORD *)v166 + 3) = v69;
            *((_DWORD *)v166 + 4) = 0;
            uint64_t v167 = v166 + 24;
            v166[20] = 0;
          }
          *(void *)(v164 - 16) = v167;
          std::string::size_type v98 = __dst.__r_.__value_.__r.__words[0];
        }
        while (0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3) > v99++);
        int v97 = -1 - 1431655765 * ((*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
      }
      unint64_t v178 = *(void *)(a2 + 112);
      if (v178)
      {
        uint8x8_t v179 = (uint8x8_t)vcnt_s8((int8x8_t)v178);
        v179.i16[0] = vaddlv_u8(v179);
        if (v179.u32[0] > 1uLL)
        {
          unint64_t v69 = v97;
          if (v178 <= v97) {
            unint64_t v69 = v97 % v178;
          }
        }
        else
        {
          unint64_t v69 = (v178 - 1) & v97;
        }
        uint64_t v180 = *(void ***)(*(void *)(a2 + 104) + 8 * v69);
        if (v180)
        {
          uint64_t v181 = *v180;
          if (*v180)
          {
            do
            {
              unint64_t v182 = v181[1];
              if (v182 == v97)
              {
                if (*((_DWORD *)v181 + 4) == v97)
                {
                  uint64_t v204 = v219;
                  goto LABEL_348;
                }
              }
              else
              {
                if (v179.u32[0] > 1uLL)
                {
                  if (v182 >= v178) {
                    v182 %= v178;
                  }
                }
                else
                {
                  v182 &= v178 - 1;
                }
                if (v182 != v69) {
                  break;
                }
              }
              uint64_t v181 = (void *)*v181;
            }
            while (v181);
          }
        }
      }
      uint64_t v181 = operator new(0x18uLL);
      void *v181 = 0;
      v181[1] = v97;
      *((_DWORD *)v181 + 4) = v97;
      *((_DWORD *)v181 + 5) = 0;
      float v183 = (float)(unint64_t)(*(void *)(a2 + 128) + 1);
      float v184 = *(float *)(a2 + 136);
      if (!v178 || (float)(v184 * (float)v178) < v183) {
        break;
      }
LABEL_338:
      uint64_t v201 = *(void *)(a2 + 104);
      v202 = *(void **)(v201 + 8 * v69);
      uint64_t v204 = v219;
      if (v202)
      {
        void *v181 = *v202;
      }
      else
      {
        void *v181 = *v215;
        *uint64_t v215 = v181;
        *(void *)(v201 + 8 * v69) = v215;
        if (!*v181) {
          goto LABEL_347;
        }
        unint64_t v203 = *(void *)(*v181 + 8);
        if ((v178 & (v178 - 1)) != 0)
        {
          if (v203 >= v178) {
            v203 %= v178;
          }
        }
        else
        {
          v203 &= v178 - 1;
        }
        v202 = (void *)(*(void *)(a2 + 104) + 8 * v203);
      }
      void *v202 = v181;
LABEL_347:
      ++*(void *)(a2 + 128);
LABEL_348:
      *((_DWORD *)v181 + 5) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
      sub_2614CB938((void ***)&__str);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v232.__r_.__value_.__l.__data_);
      }
      uint64_t v93 = v204 + 24;
      if ((unsigned char *)v93 == v217) {
        goto LABEL_363;
      }
    }
    BOOL v185 = (v178 & (v178 - 1)) != 0;
    if (v178 < 3) {
      BOOL v185 = 1;
    }
    unint64_t v186 = v185 | (2 * v178);
    unint64_t v187 = vcvtps_u32_f32(v183 / v184);
    if (v186 <= v187) {
      int8x8_t prime = (int8x8_t)v187;
    }
    else {
      int8x8_t prime = (int8x8_t)v186;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v178 = *(void *)(a2 + 112);
    }
    if (*(void *)&prime > v178) {
      goto LABEL_304;
    }
    if (*(void *)&prime < v178)
    {
      unint64_t v195 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 128) / *(float *)(a2 + 136));
      if (v178 < 3 || (uint8x8_t v196 = (uint8x8_t)vcnt_s8((int8x8_t)v178), v196.i16[0] = vaddlv_u8(v196), v196.u32[0] > 1uLL))
      {
        unint64_t v195 = std::__next_prime(v195);
      }
      else
      {
        uint64_t v197 = 1 << -(char)__clz(v195 - 1);
        if (v195 >= 2) {
          unint64_t v195 = v197;
        }
      }
      if (*(void *)&prime <= v195) {
        int8x8_t prime = (int8x8_t)v195;
      }
      if (*(void *)&prime >= v178)
      {
        unint64_t v178 = *(void *)(a2 + 112);
      }
      else
      {
        if (prime)
        {
LABEL_304:
          if (*(void *)&prime >> 61) {
            sub_2614C7990();
          }
          uint64_t v189 = operator new(8 * *(void *)&prime);
          v190 = *(void **)(a2 + 104);
          *(void *)(a2 + 104) = v189;
          if (v190) {
            operator delete(v190);
          }
          uint64_t v191 = 0;
          *(int8x8_t *)(a2 + 112) = prime;
          do
            *(void *)(*(void *)(a2 + 104) + 8 * v191++) = 0;
          while (*(void *)&prime != v191);
          uint64_t v192 = (void *)*v215;
          if (*v215)
          {
            unint64_t v193 = v192[1];
            uint8x8_t v194 = (uint8x8_t)vcnt_s8(prime);
            v194.i16[0] = vaddlv_u8(v194);
            if (v194.u32[0] > 1uLL)
            {
              if (v193 >= *(void *)&prime) {
                v193 %= *(void *)&prime;
              }
            }
            else
            {
              v193 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a2 + 104) + 8 * v193) = v215;
            uint64_t v198 = (void *)*v192;
            if (*v192)
            {
              do
              {
                unint64_t v199 = v198[1];
                if (v194.u32[0] > 1uLL)
                {
                  if (v199 >= *(void *)&prime) {
                    v199 %= *(void *)&prime;
                  }
                }
                else
                {
                  v199 &= *(void *)&prime - 1;
                }
                if (v199 != v193)
                {
                  uint64_t v200 = *(void *)(a2 + 104);
                  if (!*(void *)(v200 + 8 * v199))
                  {
                    *(void *)(v200 + 8 * v199) = v192;
                    goto LABEL_329;
                  }
                  void *v192 = *v198;
                  *uint64_t v198 = **(void **)(*(void *)(a2 + 104) + 8 * v199);
                  **(void **)(*(void *)(a2 + 104) + 8 * v199) = v198;
                  uint64_t v198 = v192;
                }
                unint64_t v199 = v193;
LABEL_329:
                uint64_t v192 = v198;
                uint64_t v198 = (void *)*v198;
                unint64_t v193 = v199;
              }
              while (v198);
            }
          }
          unint64_t v178 = (unint64_t)prime;
          goto LABEL_333;
        }
        char v205 = *(void **)(a2 + 104);
        *(void *)(a2 + 104) = 0;
        if (v205) {
          operator delete(v205);
        }
        unint64_t v178 = 0;
        *(void *)(a2 + 112) = 0;
      }
    }
LABEL_333:
    if ((v178 & (v178 - 1)) != 0)
    {
      if (v178 <= v97) {
        unint64_t v69 = v97 % v178;
      }
      else {
        unint64_t v69 = v97;
      }
    }
    else
    {
      unint64_t v69 = (v178 - 1) & v97;
    }
    goto LABEL_338;
  }
LABEL_363:
  uint64_t v206 = *(unint64_t **)(a2 + 80);
  unint64_t v207 = *(unint64_t **)(a2 + 88);
  if (v206 == v207)
  {
    uint64_t v212 = *(void *)(a2 + 80);
  }
  else
  {
    do
    {
      unint64_t v208 = *v206;
      unint64_t v209 = v206[1];
      v206 += 3;
      unint64_t v210 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - v208) >> 3));
      if (v209 == v208) {
        uint64_t v211 = 0;
      }
      else {
        uint64_t v211 = v210;
      }
      sub_2614CF474(v208, v209, v211, 1);
    }
    while (v206 != v207);
    uint64_t v206 = *(unint64_t **)(a2 + 80);
    uint64_t v212 = *(void *)(a2 + 88);
  }
  sub_2614CE718((void **)(a2 + 184), (int)(-1431655765 * ((unint64_t)(v212 - (void)v206) >> 3)));
  sub_2614C90A0((void *)a2);
  v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
  sub_2614CB938((void ***)&v232);
}

void sub_2614CE4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void **a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50)
{
  sub_2614D067C(1, v50);
  if (*(char *)(v51 - 137) < 0) {
    operator delete(*(void **)(v51 - 160));
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  a29 = &a36;
  sub_2614CB938(&a29);
  if (a48 < 0) {
    operator delete(a43);
  }
  a43 = &a49;
  sub_2614CB938((void ***)&a43);
  sub_2614C3E60(a11);
  _Unwind_Resume(a1);
}

void sub_2614CE718(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = (v4 - (unsigned char *)*a1) >> 5;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[32 * a2];
    }
  }
  else
  {
    unint64_t v7 = a1[2];
    if (a2 - v6 <= (v7 - v4) >> 5)
    {
      uint64_t v22 = &v4[32 * (a2 - v6)];
      int v23 = voiceactions::kLogZero;
      do
      {
        *(_DWORD *)uint64_t v4 = voiceactions::kNolabel;
        *((_DWORD *)v4 + 1) = v23;
        *((_DWORD *)v4 + 2) = voiceactions::kNoTime;
        *(void *)(v4 + 20) = 0;
        *(void *)(v4 + 12) = 0;
        *((_DWORD *)v4 + 7) = v23;
        v4 += 32;
      }
      while (v4 != v22);
      a1[1] = v22;
    }
    else
    {
      if (a2 >> 59) {
        sub_2614C637C();
      }
      unint64_t v8 = v7 - v5;
      unint64_t v9 = (v7 - v5) >> 4;
      if (v9 <= a2) {
        unint64_t v9 = a2;
      }
      if (v8 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >> 59) {
        sub_2614C7990();
      }
      std::string::size_type v11 = (char *)operator new(32 * v10);
      std::string::size_type v12 = &v11[32 * v6];
      BOOL v13 = &v11[32 * a2];
      int v14 = voiceactions::kLogZero;
      int v15 = voiceactions::kNolabel;
      int v16 = voiceactions::kNoTime;
      unint64_t v17 = v12;
      do
      {
        *(_DWORD *)unint64_t v17 = v15;
        *((_DWORD *)v17 + 1) = v14;
        *((_DWORD *)v17 + 2) = v16;
        *(void *)(v17 + 20) = 0;
        *(void *)(v17 + 12) = 0;
        *((_DWORD *)v17 + 7) = v14;
        v17 += 32;
      }
      while (v17 != v13);
      unint64_t v18 = &v11[32 * v10];
      uint64_t v20 = (char *)*a1;
      unint64_t v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          long long v21 = *((_OWORD *)v19 - 1);
          *((_OWORD *)v12 - 2) = *((_OWORD *)v19 - 2);
          *((_OWORD *)v12 - 1) = v21;
          v12 -= 32;
          v19 -= 32;
        }
        while (v19 != v20);
        unint64_t v19 = (char *)*a1;
      }
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v18;
      if (v19)
      {
        operator delete(v19);
      }
    }
  }
}

void voiceactions::StringSplit(std::string *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_2614CCA98(__p, a2);
  voiceactions::StringSplit(a1, (unsigned __int8 *)__p, a3);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2614CE910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void voiceactions::StringJoin(std::string *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  sub_2614CCA98(__p, a2);
  voiceactions::StringJoin(a1, (uint64_t)__p, a3);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2614CE980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2614CE99C(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    sub_2614D08D8(result, a4);
    unint64_t result = sub_2614D0928((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_2614CEA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2614CB938(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2614CEA24(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_2614CB388((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (sub_2614CB7D8(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

char *sub_2614CEB20(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_2614CB388((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      BOOL v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_2614CB7D8((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          BOOL v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  BOOL v13 = (char *)operator new(0x30uLL);
  *(void *)BOOL v13 = 0;
  *((void *)v13 + 1) = v8;
  int v15 = v13 + 16;
  int v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_2614C96D8(v15, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)int v15 = v17;
  }
  *((_DWORD *)v13 + 10) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_2614D06DC(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)BOOL v13 = *v25;
LABEL_41:
    *uint64_t v25 = v13;
    goto LABEL_42;
  }
  *(void *)BOOL v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_2614CED60(_Unwind_Exception *a1)
{
  sub_2614D067C(0, v1);
  _Unwind_Resume(a1);
}

void sub_2614CED84(uint64_t *a1)
{
  if (*a1)
  {
    sub_2614CB98C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_2614CEDC0(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      int8x8_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_2614CEE18(uint64_t a1, std::string *a2)
{
  int8x8_t v5 = (uint64_t *)(a1 + 320);
  if (sub_2614CEA24((void *)(a1 + 320), (unsigned __int8 *)a2)) {
    goto LABEL_76;
  }
  uint64_t v6 = *(void *)(a1 + 344);
  uint8x8_t v36 = a2;
  *((_DWORD *)sub_2614D0240(v5, (unsigned __int8 *)a2, (long long **)&v36) + 10) = v6;
  unint64_t v7 = *(void *)(a1 + 368);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = (int)v6;
      if (v7 <= (int)v6) {
        unint64_t v2 = (int)v6 % v7;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & (int)v6;
    }
    unint64_t v9 = *(void ***)(*(void *)(a1 + 360) + 8 * v2);
    if (v9)
    {
      uint8x8_t v10 = (std::string *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t size = v10->__r_.__value_.__l.__size_;
          if (size == (int)v6)
          {
            if (LODWORD(v10->__r_.__value_.__r.__words[2]) == v6) {
              goto LABEL_75;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (size >= v7) {
                size %= v7;
              }
            }
            else
            {
              size &= v7 - 1;
            }
            if (size != v2) {
              break;
            }
          }
          uint8x8_t v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = (std::string **)(a1 + 376);
  uint8x8_t v10 = (std::string *)operator new(0x30uLL);
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = (int)v6;
  LODWORD(v10->__r_.__value_.__r.__words[2]) = v6;
  v10[1].__r_.__value_.__r.__words[0] = 0;
  v10[1].__r_.__value_.__l.__size_ = 0;
  v10[1].__r_.__value_.__r.__words[2] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 384) + 1);
  float v14 = *(float *)(a1 + 392);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *(void *)(a1 + 368);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 384) / *(float *)(a1 + 392));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 368);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            sub_2614C7990();
          }
          float v19 = operator new(8 * *(void *)&prime);
          BOOL v20 = *(void **)(a1 + 360);
          *(void *)(a1 + 360) = v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          *(int8x8_t *)(a1 + 368) = prime;
          do
            *(void *)(*(void *)(a1 + 360) + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          unint64_t v22 = *v12;
          if (*v12)
          {
            unint64_t v23 = v22->__r_.__value_.__l.__size_;
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 360) + 8 * v23) = v12;
            uint64_t v28 = (std::string *)v22->__r_.__value_.__r.__words[0];
            if (v22->__r_.__value_.__r.__words[0])
            {
              do
              {
                unint64_t v29 = v28->__r_.__value_.__l.__size_;
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  uint64_t v30 = *(void *)(a1 + 360);
                  if (!*(void *)(v30 + 8 * v29))
                  {
                    *(void *)(v30 + 8 * v29) = v22;
                    goto LABEL_56;
                  }
                  v22->__r_.__value_.__r.__words[0] = v28->__r_.__value_.__r.__words[0];
                  v28->__r_.__value_.__r.__words[0] = **(void **)(*(void *)(a1 + 360) + 8 * v29);
                  **(void **)(*(void *)(a1 + 360) + 8 * v29) = v28;
                  uint64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_56:
                unint64_t v22 = v28;
                uint64_t v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_60;
        }
        unint64_t v35 = *(void **)(a1 + 360);
        *(void *)(a1 + 360) = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 368) = 0;
      }
    }
LABEL_60:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= (int)v6) {
        unint64_t v2 = (int)v6 % v7;
      }
      else {
        unint64_t v2 = (int)v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & (int)v6;
    }
  }
  uint64_t v31 = *(void *)(a1 + 360);
  uint64_t v32 = *(std::string ***)(v31 + 8 * v2);
  if (v32)
  {
    v10->__r_.__value_.__r.__words[0] = (std::string::size_type)*v32;
  }
  else
  {
    v10->__r_.__value_.__r.__words[0] = (std::string::size_type)*v12;
    *unint64_t v12 = v10;
    *(void *)(v31 + 8 * v2) = v12;
    if (!v10->__r_.__value_.__r.__words[0]) {
      goto LABEL_74;
    }
    unint64_t v33 = *(void *)(v10->__r_.__value_.__r.__words[0] + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    uint64_t v32 = (std::string **)(*(void *)(a1 + 360) + 8 * v33);
  }
  *uint64_t v32 = v10;
LABEL_74:
  ++*(void *)(a1 + 384);
LABEL_75:
  std::string::operator=(v10 + 1, a2);
LABEL_76:
  uint8x8_t v36 = a2;
  return *((unsigned int *)sub_2614D0240(v5, (unsigned __int8 *)a2, (long long **)&v36) + 10);
}

void sub_2614CF258(_Unwind_Exception *a1)
{
  if (v1[47] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2614CF27C(uint64_t a1, long long *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 280);
  if (!sub_2614CEA24((void *)(a1 + 280), (unsigned __int8 *)a2))
  {
    uint64_t v5 = *(void *)(a1 + 304);
    unint64_t v7 = a2;
    *((_DWORD *)sub_2614D0240(v4, (unsigned __int8 *)a2, &v7) + 10) = v5;
  }
  unint64_t v7 = a2;
  return *((unsigned int *)sub_2614D0240(v4, (unsigned __int8 *)a2, &v7) + 10);
}

void sub_2614CF2F4(char **a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v5)
  {
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    *((void *)v4 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v6 = v4 + 24;
    goto LABEL_18;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2614C637C();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  if (v8 > 0xAAAAAAAAAAAAAAALL) {
    sub_2614C7990();
  }
  uint64_t v10 = 3 * v8;
  unint64_t v11 = (char *)operator new(24 * v8);
  unint64_t v12 = &v11[24 * v7];
  float v13 = &v11[8 * v10];
  *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
  *((void *)v12 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = v12 + 24;
  float v14 = *a1;
  BOOL v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    *((void *)v12 - 3) = 0;
    *((void *)v12 - 2) = 0;
    v12 -= 24;
    *((void *)v12 + 2) = 0;
    long long v16 = *(_OWORD *)(v15 - 24);
    v15 -= 24;
    *(_OWORD *)unint64_t v12 = v16;
    *((void *)v12 + 2) = *((void *)v15 + 2);
    *(void *)BOOL v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
  }
  while (v15 != v14);
  BOOL v15 = *a1;
  unint64_t v17 = a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v15)
  {
    float v18 = v17;
    do
    {
      BOOL v20 = (void *)*((void *)v18 - 3);
      v18 -= 24;
      float v19 = v20;
      if (v20)
      {
        *((void *)v17 - 2) = v19;
        operator delete(v19);
      }
      unint64_t v17 = v18;
    }
    while (v18 != v15);
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
LABEL_18:
  a1[1] = v6;
}

double sub_2614CF474(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (long long *)(a2 - 24);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return *(double *)&v36;
              case 2uLL:
                if (*(_DWORD *)(a2 - 20) > *(_DWORD *)(v11 + 4))
                {
                  *(void *)&v101[16] = *(void *)(v11 + 16);
                  *(_OWORD *)uint64_t v101 = *(_OWORD *)v11;
                  long long v36 = *v10;
                  *(void *)(v11 + 13) = *(void *)(a2 - 11);
                  *(_OWORD *)unint64_t v11 = v36;
                  *(void *)&long long v36 = *(void *)v101;
                  *(void *)(a2 - 11) = *(void *)&v101[13];
                  *uint64_t v10 = *(_OWORD *)v101;
                }
                break;
              case 3uLL:
                sub_2614CFD04((long long *)v11, (long long *)(v11 + 24), (long long *)(a2 - 24));
                break;
              case 4uLL:
                *(void *)&long long v36 = sub_2614CFE2C(v11, v11 + 24, v11 + 48, a2 - 24).n128_u64[0];
                break;
              case 5uLL:
                *(void *)&long long v36 = sub_2614CFF20(v11, v11 + 24, v11 + 48, v11 + 72, a2 - 24).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return *(double *)&v36;
          }
          if (v12 <= 575)
          {
            std::string::size_type v47 = (_DWORD *)(v11 + 24);
            BOOL v49 = v11 == a2 || v47 == (_DWORD *)a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                uint64_t v51 = (_DWORD *)v11;
                do
                {
                  unint64_t v52 = v47;
                  int v53 = v51[7];
                  if (v53 > v51[1])
                  {
                    int v54 = *v52;
                    long long v102 = *((_OWORD *)v51 + 2);
                    uint64_t v55 = v50;
                    while (1)
                    {
                      uint64_t v56 = v11 + v55;
                      long long v36 = *(_OWORD *)(v11 + v55);
                      *(_OWORD *)(v56 + 24) = v36;
                      *(void *)(v56 + 37) = *(void *)(v11 + v55 + 13);
                      if (!v55) {
                        break;
                      }
                      v55 -= 24;
                      if (v53 <= *(_DWORD *)(v56 - 20))
                      {
                        uint64_t v57 = v11 + v55 + 24;
                        goto LABEL_82;
                      }
                    }
                    uint64_t v57 = v11;
LABEL_82:
                    *(_DWORD *)uint64_t v57 = v54;
                    *(_DWORD *)(v57 + 4) = v53;
                    *(void *)(v57 + 8) = v102;
                    *(void *)(v57 + 13) = *(void *)((char *)&v102 + 5);
                  }
                  std::string::size_type v47 = v52 + 6;
                  v50 += 24;
                  uint64_t v51 = v52;
                }
                while (v52 + 6 != (_DWORD *)a2);
              }
            }
            else if (!v49)
            {
              do
              {
                unint64_t v90 = (unint64_t)v47;
                int v91 = *(_DWORD *)(a1 + 28);
                if (v91 > *(_DWORD *)(a1 + 4))
                {
                  int v92 = *v47;
                  long long v105 = *(_OWORD *)(a1 + 32);
                  do
                  {
                    long long v36 = *(_OWORD *)(v47 - 6);
                    *(_OWORD *)std::string::size_type v47 = v36;
                    *(void *)((char *)v47 + 13) = *(void *)((char *)v47 - 11);
                    int v93 = *(v47 - 11);
                    v47 -= 6;
                  }
                  while (v91 > v93);
                  *std::string::size_type v47 = v92;
                  v47[1] = v91;
                  *(void *)((char *)v47 + 13) = *(void *)((char *)&v105 + 5);
                  *((void *)v47 + 1) = v105;
                }
                std::string::size_type v47 = (_DWORD *)(v90 + 24);
                a1 = v90;
              }
              while (v90 + 24 != a2);
            }
            return *(double *)&v36;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v58 = (v13 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  unint64_t v62 = v11 + 24 * v61;
                  if (2 * v60 + 2 < (uint64_t)v13)
                  {
                    int v63 = *(_DWORD *)(v62 + 4);
                    int v64 = *(_DWORD *)(v62 + 28);
                    v62 += 24 * (v63 > v64);
                    if (v63 > v64) {
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  unint64_t v65 = v11 + 24 * v60;
                  int v66 = *(_DWORD *)(v65 + 4);
                  if (*(_DWORD *)(v62 + 4) <= v66)
                  {
                    int v67 = *(_DWORD *)v65;
                    long long v103 = *(_OWORD *)(v65 + 8);
                    do
                    {
                      unint64_t v68 = v65;
                      unint64_t v65 = v62;
                      long long v69 = *(_OWORD *)v62;
                      *(void *)(v68 + 13) = *(void *)(v62 + 13);
                      *(_OWORD *)unint64_t v68 = v69;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      unint64_t v62 = v11 + 24 * v70;
                      uint64_t v71 = 2 * v61 + 2;
                      if (v71 < (uint64_t)v13)
                      {
                        int v72 = *(_DWORD *)(v62 + 4);
                        int v73 = *(_DWORD *)(v62 + 28);
                        v62 += 24 * (v72 > v73);
                        if (v72 > v73) {
                          uint64_t v70 = v71;
                        }
                      }
                      uint64_t v61 = v70;
                    }
                    while (*(_DWORD *)(v62 + 4) <= v66);
                    *(_DWORD *)unint64_t v65 = v67;
                    *(_DWORD *)(v65 + 4) = v66;
                    *(void *)(v65 + 8) = v103;
                    *(void *)(v65 + 13) = *(void *)((char *)&v103 + 5);
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              int64_t v74 = v12 / 0x18uLL;
              do
              {
                uint64_t v75 = 0;
                *(void *)&v104[16] = *(void *)(v11 + 16);
                *(_OWORD *)int v104 = *(_OWORD *)v11;
                unint64_t v76 = v11;
                do
                {
                  uint64_t v77 = v76 + 24 * v75 + 24;
                  uint64_t v78 = (2 * v75) | 1;
                  uint64_t v79 = 2 * v75 + 2;
                  if (v79 < v74)
                  {
                    int v80 = *(_DWORD *)(v77 + 4);
                    int v81 = *(_DWORD *)(v77 + 28);
                    v77 += 24 * (v80 > v81);
                    if (v80 > v81) {
                      uint64_t v78 = v79;
                    }
                  }
                  long long v82 = *(_OWORD *)v77;
                  *(void *)(v76 + 13) = *(void *)(v77 + 13);
                  *(_OWORD *)unint64_t v76 = v82;
                  unint64_t v76 = v77;
                  uint64_t v75 = v78;
                }
                while (v78 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                a2 -= 24;
                if (v77 == a2)
                {
                  *(void *)&long long v36 = *(void *)v104;
                  *(void *)(v77 + 13) = *(void *)&v104[13];
                  *(_OWORD *)uint64_t v77 = *(_OWORD *)v104;
                }
                else
                {
                  long long v36 = *(_OWORD *)a2;
                  *(void *)(v77 + 13) = *(void *)(a2 + 13);
                  *(_OWORD *)uint64_t v77 = v36;
                  *(void *)&long long v36 = *(void *)v104;
                  *(void *)(a2 + 13) = *(void *)&v104[13];
                  *(_OWORD *)a2 = *(_OWORD *)v104;
                  uint64_t v83 = v77 - v11 + 24;
                  if (v83 >= 25)
                  {
                    unint64_t v84 = (unint64_t)(-2 - 0x5555555555555555 * (v83 >> 3)) >> 1;
                    uint64_t v85 = v11 + 24 * v84;
                    int v86 = *(_DWORD *)(v77 + 4);
                    if (*(_DWORD *)(v85 + 4) > v86)
                    {
                      int v87 = *(_DWORD *)v77;
                      long long v97 = *(_OWORD *)(v77 + 8);
                      do
                      {
                        uint64_t v88 = v77;
                        uint64_t v77 = v85;
                        long long v36 = *(_OWORD *)v85;
                        *(void *)(v88 + 13) = *(void *)(v85 + 13);
                        *(_OWORD *)uint64_t v88 = v36;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        uint64_t v85 = v11 + 24 * v84;
                      }
                      while (*(_DWORD *)(v85 + 4) > v86);
                      *(_DWORD *)uint64_t v77 = v87;
                      *(_DWORD *)(v77 + 4) = v86;
                      *(void *)(v77 + 8) = v97;
                      *(void *)(v77 + 13) = *(void *)((char *)&v97 + 5);
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return *(double *)&v36;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v11 + 24 * (v13 >> 1);
          if ((unint64_t)v12 >= 0xC01)
          {
            sub_2614CFD04((long long *)a1, (long long *)(a1 + 24 * (v13 >> 1)), (long long *)(a2 - 24));
            uint64_t v16 = 3 * v14;
            unint64_t v17 = (long long *)(a1 + 24 * v14 - 24);
            sub_2614CFD04((long long *)(a1 + 24), v17, (long long *)(a2 - 48));
            float v18 = (long long *)(a1 + 24 + 8 * v16);
            sub_2614CFD04((long long *)(a1 + 48), v18, (long long *)(a2 - 72));
            sub_2614CFD04(v17, (long long *)v15, v18);
            *(void *)&v98[16] = *(void *)(a1 + 16);
            *(_OWORD *)std::string::size_type v98 = *(_OWORD *)a1;
            uint64_t v19 = *(void *)(v15 + 13);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 13) = v19;
            *(void *)(v15 + 13) = *(void *)&v98[13];
            *(_OWORD *)unint64_t v15 = *(_OWORD *)v98;
          }
          else
          {
            sub_2614CFD04((long long *)(a1 + 24 * (v13 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          if (a4) {
            break;
          }
          int v20 = *(_DWORD *)(a1 + 4);
          if (*(_DWORD *)(a1 - 20) > v20) {
            goto LABEL_12;
          }
          int v37 = *(_DWORD *)a1;
          long long v36 = *(_OWORD *)(a1 + 8);
          long long v96 = v36;
          if (v20 <= *(_DWORD *)(a2 - 20))
          {
            unint64_t v40 = a1 + 24;
            do
            {
              unint64_t v11 = v40;
              if (v40 >= a2) {
                break;
              }
              int v41 = *(_DWORD *)(v40 + 4);
              v40 += 24;
            }
            while (v20 <= v41);
          }
          else
          {
            unint64_t v38 = a1;
            do
            {
              unint64_t v11 = v38 + 24;
              int v39 = *(_DWORD *)(v38 + 28);
              v38 += 24;
            }
            while (v20 <= v39);
          }
          unint64_t v42 = a2;
          if (v11 < a2)
          {
            unint64_t v43 = a2;
            do
            {
              unint64_t v42 = v43 - 24;
              int v44 = *(_DWORD *)(v43 - 20);
              v43 -= 24;
            }
            while (v20 > v44);
          }
          while (v11 < v42)
          {
            *(void *)&v100[16] = *(void *)(v11 + 16);
            *(_OWORD *)int v100 = *(_OWORD *)v11;
            long long v36 = *(_OWORD *)v42;
            *(void *)(v11 + 13) = *(void *)(v42 + 13);
            *(_OWORD *)unint64_t v11 = v36;
            *(void *)&long long v36 = *(void *)v100;
            *(void *)(v42 + 13) = *(void *)&v100[13];
            *(_OWORD *)unint64_t v42 = *(_OWORD *)v100;
            do
            {
              int v45 = *(_DWORD *)(v11 + 28);
              v11 += 24;
            }
            while (v20 <= v45);
            do
            {
              int v46 = *(_DWORD *)(v42 - 20);
              v42 -= 24;
            }
            while (v20 > v46);
          }
          BOOL v4 = v11 - 24 >= a1;
          BOOL v5 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            long long v36 = *(_OWORD *)(v11 - 24);
            *(void *)(a1 + 13) = *(void *)(v11 - 11);
            *(_OWORD *)a1 = v36;
          }
          a4 = 0;
          *(_DWORD *)(v11 - 24) = v37;
          *(_DWORD *)(v11 - 20) = v20;
          *(void *)(v11 - 11) = *(void *)((char *)&v96 + 5);
          *(void *)(v11 - 16) = v96;
        }
        int v20 = *(_DWORD *)(a1 + 4);
LABEL_12:
        int v21 = *(_DWORD *)a1;
        long long v95 = *(_OWORD *)(a1 + 8);
        unint64_t v22 = a1;
        do
        {
          unint64_t v23 = v22;
          v22 += 24;
        }
        while (*(_DWORD *)(v23 + 28) > v20);
        unint64_t v24 = a2;
        if (v23 == a1)
        {
          unint64_t v27 = a2;
          while (v22 < v27)
          {
            unint64_t v25 = v27 - 24;
            int v28 = *(_DWORD *)(v27 - 20);
            v27 -= 24;
            if (v28 > v20) {
              goto LABEL_22;
            }
          }
          unint64_t v25 = v27;
        }
        else
        {
          do
          {
            unint64_t v25 = v24 - 24;
            int v26 = *(_DWORD *)(v24 - 20);
            v24 -= 24;
          }
          while (v26 <= v20);
        }
LABEL_22:
        unint64_t v11 = v22;
        if (v22 < v25)
        {
          unint64_t v29 = v25;
          do
          {
            *(_OWORD *)unint64_t v99 = *(_OWORD *)v11;
            long long v30 = *(_OWORD *)v11;
            *(void *)&v99[16] = *(void *)(v11 + 16);
            uint64_t v31 = *(void *)(v29 + 13);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v29;
            *(void *)(v11 + 13) = v31;
            *(void *)(v29 + 13) = *(void *)&v99[13];
            *(_OWORD *)unint64_t v29 = v30;
            do
            {
              int v32 = *(_DWORD *)(v11 + 28);
              v11 += 24;
            }
            while (v32 > v20);
            do
            {
              int v33 = *(_DWORD *)(v29 - 20);
              v29 -= 24;
            }
            while (v33 <= v20);
          }
          while (v11 < v29);
        }
        if (v11 - 24 != a1)
        {
          long long v34 = *(_OWORD *)(v11 - 24);
          *(void *)(a1 + 13) = *(void *)(v11 - 11);
          *(_OWORD *)a1 = v34;
        }
        *(_DWORD *)(v11 - 24) = v21;
        *(_DWORD *)(v11 - 20) = v20;
        *(void *)(v11 - 11) = *(void *)((char *)&v95 + 5);
        *(void *)(v11 - 16) = v95;
        if (v22 >= v25) {
          break;
        }
LABEL_33:
        sub_2614CF474(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_2614D005C(a1, v11 - 24);
      if (sub_2614D005C(v11, a2)) {
        break;
      }
      if (!v35) {
        goto LABEL_33;
      }
    }
    a2 = v11 - 24;
    if (!v35) {
      continue;
    }
    return *(double *)&v36;
  }
}

long long *sub_2614CFD04(long long *result, long long *a2, long long *a3)
{
  int v3 = *((_DWORD *)a2 + 1);
  int v4 = *((_DWORD *)a3 + 1);
  if (v3 <= *((_DWORD *)result + 1))
  {
    if (v4 > v3)
    {
      *(_OWORD *)unint64_t v15 = *a2;
      long long v7 = *a2;
      *(void *)&v15[16] = *((void *)a2 + 2);
      uint64_t v8 = *(void *)((char *)a3 + 13);
      *a2 = *a3;
      *(void *)((char *)a2 + 13) = v8;
      *a3 = v7;
      *(void *)((char *)a3 + 13) = *(void *)&v15[13];
      if (*((_DWORD *)a2 + 1) > *((_DWORD *)result + 1))
      {
        *(_OWORD *)uint64_t v16 = *result;
        long long v9 = *result;
        *(void *)&v16[16] = *((void *)result + 2);
        uint64_t v10 = *(void *)((char *)a2 + 13);
        *unint64_t result = *a2;
        *(void *)((char *)result + 13) = v10;
        *a2 = v9;
        *(void *)((char *)a2 + 13) = *(void *)&v16[13];
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      *(_OWORD *)unint64_t v17 = *result;
      long long v11 = *result;
      *(void *)&v17[16] = *((void *)result + 2);
      uint64_t v12 = *(void *)((char *)a2 + 13);
      *unint64_t result = *a2;
      *(void *)((char *)result + 13) = v12;
      *a2 = v11;
      *(void *)((char *)a2 + 13) = *(void *)&v17[13];
      if (*((_DWORD *)a3 + 1) <= *((_DWORD *)a2 + 1)) {
        return result;
      }
      long long v5 = *a2;
      *(_OWORD *)unint64_t v14 = *a2;
      *(void *)&v14[16] = *((void *)a2 + 2);
      uint64_t v13 = *(void *)((char *)a3 + 13);
      *a2 = *a3;
      *(void *)((char *)a2 + 13) = v13;
    }
    else
    {
      long long v5 = *result;
      *(_OWORD *)unint64_t v14 = *result;
      *(void *)&v14[16] = *((void *)result + 2);
      uint64_t v6 = *(void *)((char *)a3 + 13);
      *unint64_t result = *a3;
      *(void *)((char *)result + 13) = v6;
    }
    *a3 = v5;
    *(void *)((char *)a3 + 13) = *(void *)&v14[13];
  }
  return result;
}

__n128 sub_2614CFE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2614CFD04((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)a3;
    *(void *)&v12[16] = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a4 + 13);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 13) = v9;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 13) = *(void *)&v12[13];
    if (*(_DWORD *)(a3 + 4) > *(_DWORD *)(a2 + 4))
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)a2;
      *(void *)&v13[16] = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a3 + 13);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 13) = v10;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 13) = *(void *)&v13[13];
      if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a1 + 4))
      {
        *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)a1;
        *(void *)&v14[16] = *(void *)(a1 + 16);
        uint64_t v11 = *(void *)(a2 + 13);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 13) = v11;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 13) = *(void *)&v14[13];
      }
    }
  }
  return result;
}

__n128 sub_2614CFF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_2614CFE2C(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)(a5 + 4) > *(_DWORD *)(a4 + 4))
  {
    *(_OWORD *)unint64_t v15 = *(_OWORD *)a4;
    __n128 result = *(__n128 *)a4;
    *(void *)&v15[16] = *(void *)(a4 + 16);
    uint64_t v11 = *(void *)(a5 + 13);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 13) = v11;
    *(__n128 *)a5 = result;
    *(void *)(a5 + 13) = *(void *)&v15[13];
    if (*(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
      __n128 result = *(__n128 *)a3;
      *(void *)&v16[16] = *(void *)(a3 + 16);
      uint64_t v12 = *(void *)(a4 + 13);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 13) = v12;
      *(__n128 *)a4 = result;
      *(void *)(a4 + 13) = *(void *)&v16[13];
      if (*(_DWORD *)(a3 + 4) > *(_DWORD *)(a2 + 4))
      {
        *(_OWORD *)unint64_t v17 = *(_OWORD *)a2;
        __n128 result = *(__n128 *)a2;
        *(void *)&v17[16] = *(void *)(a2 + 16);
        uint64_t v13 = *(void *)(a3 + 13);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 13) = v13;
        *(__n128 *)a3 = result;
        *(void *)(a3 + 13) = *(void *)&v17[13];
        if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a1 + 4))
        {
          *(_OWORD *)float v18 = *(_OWORD *)a1;
          __n128 result = *(__n128 *)a1;
          *(void *)&v18[16] = *(void *)(a1 + 16);
          uint64_t v14 = *(void *)(a2 + 13);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 13) = v14;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 13) = *(void *)&v18[13];
        }
      }
    }
  }
  return result;
}

BOOL sub_2614D005C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 20) > *(_DWORD *)(a1 + 4))
      {
        *(_OWORD *)unint64_t v17 = *(_OWORD *)a1;
        long long v6 = *(_OWORD *)a1;
        *(void *)&v17[16] = *(void *)(a1 + 16);
        uint64_t v7 = *(void *)(a2 - 11);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 13) = v7;
        *(_OWORD *)(a2 - 24) = v6;
        *(void *)(a2 - 11) = *(void *)&v17[13];
      }
      return result;
    case 3uLL:
      sub_2614CFD04((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_2614CFE2C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_2614CFF20(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v8 = a1 + 48;
      sub_2614CFD04((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v9 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    int v12 = *(_DWORD *)(v9 + 4);
    if (v12 > *(_DWORD *)(v8 + 4))
    {
      int v13 = *(_DWORD *)v9;
      long long v18 = *(_OWORD *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 85) = *(void *)(a1 + v14 + 61);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (v12 <= *(_DWORD *)(v15 + 28))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v16 = v13;
      *(_DWORD *)(v16 + 4) = v12;
      *(void *)(v16 + 8) = v18;
      *(void *)(v16 + 13) = *(void *)((char *)&v18 + 5);
      if (++v11 == 8) {
        return v9 + 24 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2) {
      return 1;
    }
  }
}

char *sub_2614D0240(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_2614CB388((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      int v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_2614CB7D8((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          int v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  int v13 = (char *)operator new(0x30uLL);
  *(void *)int v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = v13 + 16;
  uint64_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_2614C96D8(v15, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)uint64_t v15 = v17;
  }
  long long v18 = a1 + 2;
  *((_DWORD *)v13 + 10) = 0;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_2614C7990();
          }
          unint64_t v25 = operator new(8 * *(void *)&prime);
          int v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            long long v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *int v28 = *v34;
                  *long long v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  long long v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                int v28 = v34;
                long long v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  int v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)int v13 = *v37;
LABEL_75:
    *int v37 = v13;
    goto LABEL_76;
  }
  *(void *)int v13 = *v18;
  *long long v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    int v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_2614D0658(_Unwind_Exception *a1)
{
  sub_2614D067C(0, v1);
  _Unwind_Resume(a1);
}

void sub_2614D067C(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_2614D06DC(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      uint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_2614C7990();
  }
  long long v5 = operator new(8 * prime);
  long long v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  unint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *unint64_t v8 = *v14;
          *unint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        unint64_t v8 = v14;
        unint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

char *sub_2614D08D8(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2614C637C();
  }
  BOOL result = (char *)sub_2614CCB48(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_2614D0928(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v11 = __dst;
  uint8x8_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_2614C96D8(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint8x8_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2614D09E8((uint64_t)v9);
  return v4;
}

void sub_2614D09D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2614D09E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

std::string *voiceactions::StringJoin@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__r.__words[0] != size)
  {
    long long v5 = (std::string::__raw *)result;
    int v7 = 0;
    std::string::size_type v8 = result->__r_.__value_.__r.__words[0];
    do
    {
      int v9 = *(unsigned __int8 *)(v8 + 23);
      if ((v9 & 0x80u) != 0) {
        int v9 = *(_DWORD *)(v8 + 8);
      }
      v7 += v9;
      v8 += 24;
    }
    while (v8 != size);
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(a2 + 8);
    }
    std::string::reserve(a3, v10 * (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - result->__r_.__value_.__r.__words[0]) >> 3) - 1) + v7);
    std::string::size_type v11 = v5->__words[0];
    if (*(char *)(v5->__words[0] + 23) < 0)
    {
      uint64_t v13 = *(const std::string::value_type **)v11;
      std::string::size_type v12 = *(void *)(v11 + 8);
    }
    else
    {
      std::string::size_type v12 = *(unsigned __int8 *)(v5->__words[0] + 23);
      uint64_t v13 = (const std::string::value_type *)v5->__words[0];
    }
    BOOL result = std::string::append(a3, v13, v12);
    for (std::string::size_type i = v11 + 24; i != v5->__words[1]; i += 24)
    {
      if (*(char *)(a2 + 23) >= 0) {
        size_t v15 = (const std::string::value_type *)a2;
      }
      else {
        size_t v15 = *(const std::string::value_type **)a2;
      }
      std::string::append(a3, v15, v10);
      if (*(char *)(i + 23) < 0)
      {
        long long v17 = *(const std::string::value_type **)i;
        std::string::size_type v16 = *(void *)(i + 8);
      }
      else
      {
        std::string::size_type v16 = *(unsigned __int8 *)(i + 23);
        long long v17 = (const std::string::value_type *)i;
      }
      BOOL result = std::string::append(a3, v17, v16);
    }
  }
  return result;
}

void sub_2614D0B74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void voiceactions::StringSplit(std::string *__str@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  BOOL v8 = v6 < 0;
  if (v6 >= 0) {
    int v9 = __str;
  }
  else {
    int v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if (!v8) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  uint64_t v10 = a2[23];
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v11 = a2;
  }
  else {
    std::string::size_type v11 = *(unsigned __int8 **)a2;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (size) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
    std::string::size_type v17 = -1;
    a3[2] = 0;
    goto LABEL_25;
  }
  uint64_t v13 = (unsigned __int8 *)v9 + size;
  unint64_t v14 = v9;
LABEL_16:
  uint64_t v15 = v10;
  std::string::size_type v16 = v11;
  while (v14->__r_.__value_.__s.__data_[0] != *v16)
  {
    ++v16;
    if (!--v15)
    {
      unint64_t v14 = (std::string *)((char *)v14 + 1);
      if (v14 != (std::string *)v13) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
  }
  if (v14 == (std::string *)v13) {
    goto LABEL_24;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::size_type v17 = (char *)v14 - (char *)v9;
  if (v14 != v9)
  {
LABEL_25:
    std::string::basic_string(&__p, __str, 0, v17, (std::allocator<char> *)&v56);
    unint64_t v18 = a3[2];
    unint64_t v19 = a3[1];
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a3) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2614C637C();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a3) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      int64_t v60 = a3 + 2;
      if (v24) {
        unint64_t v24 = (unint64_t)sub_2614CCB48(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      unint64_t v26 = v24 + 24 * v21;
      unint64_t v56 = v24;
      unint64_t v57 = v26;
      unint64_t v59 = v24 + 24 * v25;
      long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v26 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v26 = v27;
      memset(&__p, 0, sizeof(__p));
      unint64_t v58 = v26 + 24;
      sub_2614CCB90(a3, &v56);
      uint64_t v28 = a3[1];
      sub_2614CCC14((uint64_t)&v56);
      int v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a3[1] = v28;
      if (v29 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v19 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v19 = v20;
      a3[1] = v19 + 24;
    }
    if (v17 == -1) {
      return;
    }
    goto LABEL_39;
  }
  do
  {
LABEL_39:
    std::string::size_type v30 = v17 + 1;
    int v31 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    BOOL v32 = v31 < 0;
    if (v31 >= 0) {
      uint64_t v33 = __str;
    }
    else {
      uint64_t v33 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v32) {
      std::string::size_type v34 = __str->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v34 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    uint64_t v35 = a2[23];
    if ((v35 & 0x80u) == 0) {
      uint64_t v36 = a2;
    }
    else {
      uint64_t v36 = *(unsigned __int8 **)a2;
    }
    if ((v35 & 0x80u) != 0) {
      uint64_t v35 = *((void *)a2 + 1);
    }
    if (v34 <= v30 || v35 == 0)
    {
      std::string::size_type v17 = -1;
    }
    else
    {
      unint64_t v38 = (unsigned __int8 *)v33 + v30;
      int v39 = (unsigned __int8 *)v33 + v34;
LABEL_56:
      uint64_t v40 = v35;
      int v41 = v36;
      while (*v38 != *v41)
      {
        ++v41;
        if (!--v40)
        {
          if (++v38 != v39) {
            goto LABEL_56;
          }
          unint64_t v38 = v39;
          break;
        }
      }
      std::string::size_type v42 = v38 - (unsigned __int8 *)v33;
      if (v38 == v39) {
        std::string::size_type v17 = -1;
      }
      else {
        std::string::size_type v17 = v42;
      }
    }
    if (v17 != v30)
    {
      std::string::basic_string(&__p, __str, v30, v17 - v30, (std::allocator<char> *)&v56);
      unint64_t v44 = a3[1];
      unint64_t v43 = a3[2];
      if (v44 >= v43)
      {
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *a3) >> 3);
        unint64_t v47 = v46 + 1;
        if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2614C637C();
        }
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a3) >> 3);
        if (2 * v48 > v47) {
          unint64_t v47 = 2 * v48;
        }
        if (v48 >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v47;
        }
        int64_t v60 = a3 + 2;
        if (v49) {
          unint64_t v49 = (unint64_t)sub_2614CCB48(v49);
        }
        else {
          uint64_t v50 = 0;
        }
        unint64_t v51 = v49 + 24 * v46;
        unint64_t v56 = v49;
        unint64_t v57 = v51;
        unint64_t v59 = v49 + 24 * v50;
        long long v52 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v51 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v51 = v52;
        memset(&__p, 0, sizeof(__p));
        unint64_t v58 = v51 + 24;
        sub_2614CCB90(a3, &v56);
        uint64_t v53 = a3[1];
        sub_2614CCC14((uint64_t)&v56);
        int v54 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a3[1] = v53;
        if (v54 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v45 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v44 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v44 = v45;
        a3[1] = v44 + 24;
      }
    }
  }
  while (v17 != -1);
}

void sub_2614D0F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2614CB938((void ***)&__p);
  _Unwind_Resume(a1);
}

void *sub_2614D0F7C(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x263E373A0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    int v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    BOOL v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2614D10DC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2614D109CLL);
  }
  __cxa_rethrow();
}

void sub_2614D1158(_Unwind_Exception *a1)
{
}

void *sub_2614D116C(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x263E37390](a1 + 2);
  std::istream::~istream();
  MEMORY[0x263E37490](a1 + 53);
  return a1;
}

uint64_t sub_2614D1238(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2614CB8D4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2614D1298(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2614D1300(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_2614D134C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2614CEDC0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_2614D13A0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2614D1468(uint64_t a1)
{
  sub_2614D14A0(a1);
  JUMPOUT(0x263E374C0);
}

uint64_t sub_2614D14A0(uint64_t a1)
{
  *(void *)a1 = &unk_270D59DD8;
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  sub_2614C3E60(a1 + 440);
  sub_2614D1238(a1 + 400);
  sub_2614D1298(a1 + 360);
  sub_2614C3E60(a1 + 320);
  sub_2614C3E60(a1 + 280);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  sub_2614D1298(a1 + 144);
  sub_2614D1300(a1 + 104);
  unint64_t v4 = (void **)(a1 + 80);
  sub_2614D134C(&v4);
  sub_2614D13A0(a1 + 8);
  return a1;
}

void sub_2614D15CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2614D163C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2614D16B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2614D1728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2614D17A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2614D1814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2614D1B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

intptr_t sub_2614D1B40(uint64_t a1)
{
  if (objc_opt_respondsToSelector()) {
    [*(id *)(*(void *)(a1 + 32) + 24) keywordSpotterDidStop];
  }
  uint64_t v2 = [*(id *)(a1 + 32) configuration];
  uint64_t v3 = [v2 runtime];
  int v4 = [v3 batchDecode];

  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 40);
    int v73 = 0;
    unint64_t v74 = 0;
    unint64_t v72 = 0;
    uint64_t v6 = *(void **)(v5 + 160);
    if (v6)
    {
      do
      {
        sub_2614C91D8((uint64_t)__p, (uint64_t)(v6 + 2));
        int v7 = v73;
        if ((unint64_t)v73 >= v74)
        {
          uint64_t v9 = (void **)sub_2614C9914((uint64_t *)&v72, (long long *)&__p[8]);
        }
        else
        {
          if ((v76[7] & 0x80000000) != 0)
          {
            sub_2614C96D8(v73, *(void **)&__p[8], *(unint64_t *)&__p[16]);
          }
          else
          {
            long long v8 = *(_OWORD *)&__p[8];
            v73[2] = *(void **)v76;
            *(_OWORD *)int v7 = v8;
          }
          long long v10 = *(_OWORD *)&v76[8];
          long long v11 = *(_OWORD *)&v76[24];
          *(_OWORD *)((char *)v7 + 49) = *(_OWORD *)&v76[33];
          *(_OWORD *)(v7 + 5) = v11;
          *(_OWORD *)(v7 + 3) = v10;
          uint64_t v9 = v7 + 9;
        }
        int v73 = v9;
        if ((v76[7] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
      unint64_t v12 = v72;
      uint64_t v13 = v73;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v12 = 0;
    }
    unint64_t v31 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v13 - v12) >> 3));
    if (v13 == (void **)v12) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v31;
    }
    sub_2614D2320(v12, (unint64_t)v13, v32, 1);
    uint64_t v33 = v73;
    unint64_t v34 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v73 - v72) >> 3);
    int v35 = 954437177 * ((uint64_t)((uint64_t)v73 - v72) >> 3);
    unint64_t v36 = (int)v34 - v34;
    if ((int)v34 <= v34)
    {
      if ((int)v34 >= v34)
      {
        unint64_t v44 = v73;
        goto LABEL_48;
      }
      unint64_t v44 = (void **)(v72 + 72 * v35);
      while (v33 != v44)
      {
        if (*((char *)v33 - 49) < 0) {
          operator delete(*(v33 - 9));
        }
        v33 -= 9;
      }
    }
    else
    {
      if (0x8E38E38E38E38E39 * ((uint64_t)(v74 - (void)v73) >> 3) < v36)
      {
        if (0x38E38E3900000000 * ((uint64_t)((uint64_t)v73 - v72) >> 3) < 0) {
          sub_2614C637C();
        }
        *(void *)&v76[8] = &v74;
        unint64_t v37 = 0x1C71C71C71C71C72 * ((uint64_t)(v74 - v72) >> 3);
        if (v37 <= (int)v34) {
          unint64_t v37 = (int)v34;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v74 - v72) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v38 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v38 = v37;
        }
        int v39 = (char *)sub_2614C9868(v38);
        uint64_t v40 = &v39[72 * v34];
        *(void *)std::string __p = v39;
        *(void *)&__p[8] = v40;
        *(void *)unint64_t v76 = &v39[72 * v41];
        int v42 = voiceactions::kLogZero;
        int v43 = voiceactions::kNoTime;
        do
        {
          *((_OWORD *)v40 + 2) = 0uLL;
          *((_OWORD *)v40 + 3) = 0uLL;
          *((void *)v40 + 8) = 0;
          *(_OWORD *)uint64_t v40 = 0uLL;
          *((_OWORD *)v40 + 1) = 0uLL;
          *((_DWORD *)v40 + 6) = v42;
          *((_DWORD *)v40 + 7) = v42;
          *((_DWORD *)v40 + 8) = v43;
          *((_DWORD *)v40 + 9) = v43;
          *((void *)v40 + 5) = 0;
          *((void *)v40 + 6) = 0;
          *((_DWORD *)v40 + 14) = 0;
          *((_DWORD *)v40 + 15) = v42;
          v40 += 72;
        }
        while (v40 != &v39[72 * v35]);
        *(void *)&__p[16] = &v39[72 * v35];
        sub_2614CADB8((uint64_t *)&v72, __p);
        sub_2614CAE4C((uint64_t)__p);
        unint64_t v44 = v73;
        goto LABEL_48;
      }
      unint64_t v44 = &v73[9 * v36];
      int v45 = voiceactions::kLogZero;
      int v46 = voiceactions::kNoTime;
      do
      {
        *((_OWORD *)v33 + 2) = 0uLL;
        *((_OWORD *)v33 + 3) = 0uLL;
        v33[8] = 0;
        *(_OWORD *)uint64_t v33 = 0uLL;
        *((_OWORD *)v33 + 1) = 0uLL;
        *((_DWORD *)v33 + 6) = v45;
        *((_DWORD *)v33 + 7) = v45;
        *((_DWORD *)v33 + 8) = v46;
        *((_DWORD *)v33 + 9) = v46;
        v33[5] = 0;
        v33[6] = 0;
        *((_DWORD *)v33 + 14) = 0;
        *((_DWORD *)v33 + 15) = v45;
        v33 += 9;
      }
      while (v33 != v44);
    }
    int v73 = v44;
LABEL_48:
    uint64_t v47 = v72;
    if ((void **)v72 != v44)
    {
      int v48 = 1;
      unint64_t v49 = (FILE **)MEMORY[0x263EF8348];
      do
      {
        if (*(char *)(v47 + 23) < 0)
        {
          sub_2614C96D8(__p, *(void **)v47, *(void *)(v47 + 8));
        }
        else
        {
          long long v50 = *(_OWORD *)v47;
          *(void *)&__p[16] = *(void *)(v47 + 16);
          *(_OWORD *)std::string __p = v50;
        }
        long long v51 = *(_OWORD *)(v47 + 24);
        long long v52 = *(_OWORD *)(v47 + 40);
        *(_OWORD *)&v76[25] = *(_OWORD *)(v47 + 49);
        *(_OWORD *)unint64_t v76 = v51;
        *(_OWORD *)&v76[16] = v52;
        if (__p[23] >= 0) {
          uint64_t v53 = __p;
        }
        else {
          uint64_t v53 = *(const char **)__p;
        }
        fprintf(*v49, "Final Result %d %s %f %d %d %d\n", v48, v53, *(float *)v76, *(_DWORD *)&v76[8], *(_DWORD *)&v76[12], *(_DWORD *)&v76[28]);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        v47 += 72;
        ++v48;
      }
      while ((void **)v47 != v44);
    }
    if (objc_opt_respondsToSelector())
    {
      id v71 = *(id *)(*(void *)(a1 + 32) + 24);
      int v54 = objc_opt_new();
      uint64_t v55 = v72;
      unint64_t v56 = v73;
      if ((void **)v72 != v73)
      {
        do
        {
          if (*(char *)(v55 + 23) < 0)
          {
            sub_2614C96D8(__p, *(void **)v55, *(void *)(v55 + 8));
          }
          else
          {
            long long v57 = *(_OWORD *)v55;
            *(void *)&__p[16] = *(void *)(v55 + 16);
            *(_OWORD *)std::string __p = v57;
          }
          long long v58 = *(_OWORD *)(v55 + 24);
          long long v59 = *(_OWORD *)(v55 + 40);
          *(_OWORD *)&v76[25] = *(_OWORD *)(v55 + 49);
          *(_OWORD *)unint64_t v76 = v58;
          *(_OWORD *)&v76[16] = v59;
          int64_t v60 = NSString;
          int v61 = __p[23];
          unint64_t v62 = *(unsigned char **)__p;
          uint64_t v63 = [NSString defaultCStringEncoding];
          if (v61 >= 0) {
            int v64 = __p;
          }
          else {
            int v64 = v62;
          }
          unint64_t v65 = [v60 stringWithCString:v64 encoding:v63];
          int v66 = [VATKeywordSpotterResult alloc];
          LODWORD(v67) = *(_DWORD *)v76;
          LODWORD(v68) = *(_DWORD *)&v76[32];
          long long v69 = [(VATKeywordSpotterResult *)v66 initWithKeyword:v65 cost:*(unsigned int *)&v76[8] threshold:*(unsigned int *)&v76[12] start:*(unsigned int *)&v76[28] end:v67 duration:v68];
          [(VATKeywordSpotterResult *)v69 set_isNbestEntry:1];
          [v54 addObject:v69];

          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v55 += 72;
        }
        while ((void **)v55 != v56);
      }
      [v71 keywordSpotted:0 nbestResults:v54 filePath:*(void *)(*(void *)(a1 + 32) + 96) fileByteCount:*(void *)(*(void *)(a1 + 32) + 120) fileDuration:*(double *)(*(void *)(a1 + 32) + 104)];
    }
    *(void *)std::string __p = &v72;
    sub_2614C3E0C((void ***)__p);
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  unint64_t v14 = [*(id *)(a1 + 32) configuration];
  uint64_t v15 = [v14 runtime];
  if ([v15 postKeywordSilence])
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(v16 + 136);
    uint64_t v17 = *(void *)(v16 + 144);

    if (v17 != v18)
    {
      *(_DWORD *)std::string __p = -1;
      LODWORD(v72) = 0;
      unint64_t v19 = *(void **)(a1 + 32);
      uint64_t v20 = v19[5];
      int v21 = *(_DWORD *)(v19[17] + 36);
      unint64_t v22 = [v19 configuration];
      unint64_t v23 = [v22 decoder];
      unint64_t v24 = [v23 postKeywordSilence];
      [v24 silenceProbability];
      float v26 = v25;
      long long v27 = [*(id *)(a1 + 32) configuration];
      uint64_t v28 = [v27 decoder];
      int v29 = [v28 postKeywordSilence];
      LODWORD(v20) = sub_2614C63CC(v20, v21, 0, 0, 8, [v29 minSilenceFrameCountAtEndOfKeyword], __p, &v72, v26);

      if (v20) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 136) + 36) = *(_DWORD *)__p;
      }
      std::string::size_type v30 = _VATLoggingFacility(kVATLogCategoryFramework);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_2613B8000, v30, OS_LOG_TYPE_INFO, "Audio ended before we could get enough silence for keyword, triggering cached keyword", buf, 2u);
      }

      [*(id *)(a1 + 32) _handleValidResult:*(void *)(a1 + 32) + 136];
    }
  }
  else
  {
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_2614D2214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,void *__p,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void sub_2614D2320(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
BOOL sub_2614D307C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 12) < *(float *)(a1 + 60))
      {
        sub_2614CA7CC((uint64_t *)a1, a2 - 72);
        return 1;
      }
      return result;
    case 3uLL:
      sub_2614CA8C0(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_2614CA980(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_2614CAA28(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v6 = a1 + 144;
      sub_2614CA8C0(a1, a1 + 72, a1 + 144);
      uint64_t v7 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    float v10 = *(float *)(v7 + 60);
    if (v10 < *(float *)(v6 + 60))
    {
      uint64_t v21 = *(void *)v7;
      *(void *)unint64_t v25 = *(void *)(v7 + 8);
      *(void *)&v25[7] = *(void *)(v7 + 15);
      char v11 = *(unsigned char *)(v7 + 23);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      long long v22 = *(_OWORD *)(v7 + 24);
      long long v23 = *(_OWORD *)(v7 + 40);
      int v24 = *(_DWORD *)(v7 + 56);
      uint64_t v12 = v8;
      char v13 = *(unsigned char *)(v7 + 64);
      while (1)
      {
        uint64_t v14 = a1 + v12;
        uint64_t v15 = (void **)(a1 + v12 + 216);
        if (*(char *)(a1 + v12 + 239) < 0) {
          operator delete(*v15);
        }
        *(_OWORD *)uint64_t v15 = *(_OWORD *)(v14 + 144);
        *(void *)(a1 + v12 + 232) = *(void *)(v14 + 160);
        *(unsigned char *)(v14 + 167) = 0;
        *(unsigned char *)(v14 + 144) = 0;
        long long v16 = *(_OWORD *)(v14 + 184);
        *(_OWORD *)(v14 + 240) = *(_OWORD *)(v14 + 168);
        *(_OWORD *)(v14 + 256) = v16;
        *(_OWORD *)(v14 + 265) = *(_OWORD *)(v14 + 193);
        if (v12 == -144) {
          break;
        }
        uint64_t v17 = a1 + v12;
        float v18 = *(float *)(a1 + v12 + 132);
        v12 -= 72;
        if (v10 >= v18)
        {
          uint64_t v19 = a1 + v12 + 216;
          uint64_t v20 = v17 + 168;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1 + 24;
      uint64_t v19 = a1;
LABEL_14:
      if (*(char *)(v19 + 23) < 0) {
        operator delete(*(void **)v19);
      }
      *(void *)uint64_t v19 = v21;
      *(void *)(v19 + 8) = *(void *)v25;
      *(void *)(v19 + 15) = *(void *)&v25[7];
      *(unsigned char *)(v19 + 23) = v11;
      *(_OWORD *)uint64_t v20 = v22;
      *(_OWORD *)(v20 + 16) = v23;
      *(_DWORD *)(v20 + 32) = v24;
      *(float *)(v19 + 60) = v10;
      ++v9;
      *(unsigned char *)(v19 + 64) = v13;
      if (v9 == 8) {
        return v7 + 72 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 72;
    v7 += 72;
    if (v7 == a2) {
      return 1;
    }
  }
}

void sub_2614D3550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

intptr_t sub_2614D3568(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_2614D3820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_2614D3878(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v10 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (!WeakRetained)
  {
    int v9 = _VATLoggingFacility(kVATLogCategoryFramework);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_2613B8000, v9, OS_LOG_TYPE_FAULT, "Checking keyword failure in VATKeywordSpotter", buf, 2u);
    }

    exit(-1);
  }
  [WeakRetained _acousticCallback:v10 rows:a3 cols:a4];
}

void sub_2614D394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2614D3B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_2614D3E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char *a37)
{
  a37 = &a12;
  sub_2614CB938((void ***)&a37);
  std::string __p = &a34;
  sub_2614CB938((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_2614D4064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2614D4220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2614D42EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VATKeywordSpotter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2614D44E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t voiceactions::GetResultSize(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    uint64_t v4 = *a1;
    do
    {
      int v5 = *(unsigned __int8 *)(v4 + 23);
      if ((v5 & 0x80u) != 0) {
        int v5 = *(_DWORD *)(v4 + 8);
      }
      LODWORD(v3) = v3 + v5;
      v4 += 24;
    }
    while (v4 != v2);
    uint64_t v3 = (int)v3;
  }
  return v3 + (0xAAAAAAAAAAAAAAABLL * ((v2 - *a1) >> 3) - 1) * a2;
}

void voiceactions::StringJoin(std::string *a1@<X0>, unsigned __int8 a2@<W1>, std::string *a3@<X8>)
{
  char v4 = 1;
  LOWORD(__p) = a2;
  voiceactions::StringJoin(a1, (uint64_t)&__p, a3);
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_2614D4644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void voiceactions::StringSplit(std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  char v4 = 1;
  LOWORD(__p) = a2;
  voiceactions::StringSplit(a1, (unsigned __int8 *)&__p, a3);
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_2614D46AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id _VATLoggingFacility(uint64_t a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_2614D4958;
  block[3] = &unk_265581740;
  block[4] = a1;
  if (qword_26A920060 != -1) {
    dispatch_once(&qword_26A920060, block);
  }
  uint64_t v1 = (void *)qword_26A920058;
  return v1;
}

uint64_t sub_2614D4958(uint64_t a1)
{
  qword_26A920058 = (uint64_t)os_log_create("com.apple.voiceactions", *(const char **)(a1 + 32));
  return MEMORY[0x270F9A758]();
}

uint64_t sub_2614D4998()
{
  return MEMORY[0x270F9CC48]();
}

uint64_t sub_2614D49A8()
{
  return MEMORY[0x270F9CC50]();
}

uint64_t sub_2614D49B8()
{
  return MEMORY[0x270F9CC58]();
}

uint64_t sub_2614D49C8()
{
  return MEMORY[0x270F9CC70]();
}

uint64_t sub_2614D49D8()
{
  return MEMORY[0x270F9CCB8]();
}

uint64_t sub_2614D49E8()
{
  return MEMORY[0x270F9CCC0]();
}

uint64_t sub_2614D49F8()
{
  return MEMORY[0x270F9CCC8]();
}

uint64_t sub_2614D4A08()
{
  return MEMORY[0x270F9CD00]();
}

uint64_t sub_2614D4A18()
{
  return MEMORY[0x270F9CD10]();
}

uint64_t sub_2614D4A28()
{
  return MEMORY[0x270F9CD38]();
}

uint64_t sub_2614D4A38()
{
  return MEMORY[0x270F9CD70]();
}

uint64_t sub_2614D4A48()
{
  return MEMORY[0x270F9CD78]();
}

uint64_t sub_2614D4A58()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t sub_2614D4A68()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t sub_2614D4A78()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t sub_2614D4A88()
{
  return MEMORY[0x270EEDE28]();
}

uint64_t sub_2614D4A98()
{
  return MEMORY[0x270EEDE38]();
}

uint64_t sub_2614D4AA8()
{
  return MEMORY[0x270EEDE58]();
}

uint64_t sub_2614D4AB8()
{
  return MEMORY[0x270EEDE70]();
}

uint64_t sub_2614D4AC8()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t sub_2614D4AD8()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t sub_2614D4AE8()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t sub_2614D4AF8()
{
  return MEMORY[0x270EEE098]();
}

uint64_t sub_2614D4B08()
{
  return MEMORY[0x270EEE0C0]();
}

uint64_t sub_2614D4B18()
{
  return MEMORY[0x270EEE0D0]();
}

uint64_t sub_2614D4B28()
{
  return MEMORY[0x270EEE108]();
}

uint64_t sub_2614D4B38()
{
  return MEMORY[0x270EEE188]();
}

uint64_t sub_2614D4B48()
{
  return MEMORY[0x270EEE1A8]();
}

uint64_t sub_2614D4B58()
{
  return MEMORY[0x270EEE208]();
}

uint64_t sub_2614D4B68()
{
  return MEMORY[0x270EEE218]();
}

uint64_t sub_2614D4B78()
{
  return MEMORY[0x270EEE258]();
}

uint64_t sub_2614D4B88()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_2614D4B98()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_2614D4BA8()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_2614D4BB8()
{
  return MEMORY[0x270EEEA90]();
}

uint64_t sub_2614D4BC8()
{
  return MEMORY[0x270EEEAE8]();
}

uint64_t sub_2614D4BD8()
{
  return MEMORY[0x270EEEDD8]();
}

uint64_t sub_2614D4BE8()
{
  return MEMORY[0x270EEF830]();
}

uint64_t sub_2614D4BF8()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_2614D4C08()
{
  return MEMORY[0x270EEFC10]();
}

uint64_t sub_2614D4C18()
{
  return MEMORY[0x270EEFC48]();
}

uint64_t sub_2614D4C28()
{
  return MEMORY[0x270EEFCB0]();
}

uint64_t sub_2614D4C38()
{
  return MEMORY[0x270EEFD28]();
}

uint64_t sub_2614D4C48()
{
  return MEMORY[0x270EEFD78]();
}

uint64_t sub_2614D4C58()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t sub_2614D4C68()
{
  return MEMORY[0x270EEFF18]();
}

uint64_t sub_2614D4C78()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t sub_2614D4C88()
{
  return MEMORY[0x270EEFFC8]();
}

uint64_t sub_2614D4C98()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_2614D4CA8()
{
  return MEMORY[0x270EF0178]();
}

uint64_t sub_2614D4CB8()
{
  return MEMORY[0x270EF01C0]();
}

uint64_t sub_2614D4CC8()
{
  return MEMORY[0x270EF0C88]();
}

uint64_t sub_2614D4CD8()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t sub_2614D4CE8()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t sub_2614D4CF8()
{
  return MEMORY[0x270EF0F40]();
}

uint64_t sub_2614D4D08()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_2614D4D18()
{
  return MEMORY[0x270F18248]();
}

uint64_t sub_2614D4D28()
{
  return MEMORY[0x270F18290]();
}

uint64_t sub_2614D4D38()
{
  return MEMORY[0x270F449C0]();
}

uint64_t sub_2614D4D48()
{
  return MEMORY[0x270F44A18]();
}

uint64_t sub_2614D4D58()
{
  return MEMORY[0x270F44A20]();
}

uint64_t sub_2614D4D68()
{
  return MEMORY[0x270F44A28]();
}

uint64_t sub_2614D4D78()
{
  return MEMORY[0x270F44AA8]();
}

uint64_t sub_2614D4D88()
{
  return MEMORY[0x270F44AB0]();
}

uint64_t sub_2614D4D98()
{
  return MEMORY[0x270F44AB8]();
}

uint64_t sub_2614D4DA8()
{
  return MEMORY[0x270F44AC0]();
}

uint64_t sub_2614D4DB8()
{
  return MEMORY[0x270F44AC8]();
}

uint64_t sub_2614D4DC8()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t sub_2614D4DF8()
{
  return MEMORY[0x270F44B10]();
}

uint64_t sub_2614D4E08()
{
  return MEMORY[0x270F44B18]();
}

uint64_t sub_2614D4E18()
{
  return MEMORY[0x270F44B38]();
}

uint64_t sub_2614D4E28()
{
  return MEMORY[0x270F44B48]();
}

uint64_t sub_2614D4E38()
{
  return MEMORY[0x270F44B78]();
}

uint64_t sub_2614D4E48()
{
  return MEMORY[0x270F44B88]();
}

uint64_t sub_2614D4E58()
{
  return MEMORY[0x270F44B98]();
}

uint64_t sub_2614D4E68()
{
  return MEMORY[0x270F44BC0]();
}

uint64_t sub_2614D4E78()
{
  return MEMORY[0x270F44BF0]();
}

uint64_t sub_2614D4E88()
{
  return MEMORY[0x270F44C10]();
}

uint64_t sub_2614D4E98()
{
  return MEMORY[0x270F44C20]();
}

uint64_t sub_2614D4EA8()
{
  return MEMORY[0x270F44C38]();
}

uint64_t sub_2614D4EB8()
{
  return MEMORY[0x270F44C98]();
}

uint64_t sub_2614D4EC8()
{
  return MEMORY[0x270F44CA0]();
}

uint64_t sub_2614D4EE8()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t sub_2614D4EF8()
{
  return MEMORY[0x270F44D10]();
}

uint64_t sub_2614D4F08()
{
  return MEMORY[0x270F44D60]();
}

uint64_t sub_2614D4F18()
{
  return MEMORY[0x270F44D68]();
}

uint64_t sub_2614D4F28()
{
  return MEMORY[0x270F44D88]();
}

uint64_t sub_2614D4F38()
{
  return MEMORY[0x270F44D90]();
}

uint64_t sub_2614D4F48()
{
  return MEMORY[0x270F44D98]();
}

uint64_t sub_2614D4F58()
{
  return MEMORY[0x270F44DB0]();
}

uint64_t sub_2614D4F68()
{
  return MEMORY[0x270F44DD8]();
}

uint64_t sub_2614D4F78()
{
  return MEMORY[0x270F44DE8]();
}

uint64_t sub_2614D4F88()
{
  return MEMORY[0x270F44DF0]();
}

uint64_t sub_2614D4F98()
{
  return MEMORY[0x270F44E00]();
}

uint64_t sub_2614D4FA8()
{
  return MEMORY[0x270F44E10]();
}

uint64_t sub_2614D4FB8()
{
  return MEMORY[0x270F44E18]();
}

uint64_t sub_2614D4FC8()
{
  return MEMORY[0x270F44E28]();
}

uint64_t sub_2614D4FD8()
{
  return MEMORY[0x270FA2C68]();
}

uint64_t sub_2614D4FE8()
{
  return MEMORY[0x270FA2CC0]();
}

uint64_t sub_2614D4FF8()
{
  return MEMORY[0x270FA2CE8]();
}

uint64_t sub_2614D5008()
{
  return MEMORY[0x270FA2CF8]();
}

uint64_t sub_2614D5018()
{
  return MEMORY[0x270FA2D00]();
}

uint64_t sub_2614D5028()
{
  return MEMORY[0x270FA2D58]();
}

uint64_t sub_2614D5038()
{
  return MEMORY[0x270FA2D70]();
}

uint64_t sub_2614D5048()
{
  return MEMORY[0x270FA2D88]();
}

uint64_t sub_2614D5058()
{
  return MEMORY[0x270FA2D90]();
}

uint64_t sub_2614D5068()
{
  return MEMORY[0x270FA2DB0]();
}

uint64_t sub_2614D5078()
{
  return MEMORY[0x270FA2DD0]();
}

uint64_t sub_2614D5088()
{
  return MEMORY[0x270FA2DE0]();
}

uint64_t sub_2614D5098()
{
  return MEMORY[0x270FA2DF0]();
}

uint64_t sub_2614D50A8()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_2614D50B8()
{
  return MEMORY[0x270FA2E18]();
}

uint64_t sub_2614D50C8()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_2614D50D8()
{
  return MEMORY[0x270FA2E30]();
}

uint64_t sub_2614D5108()
{
  return MEMORY[0x270EFE180]();
}

uint64_t sub_2614D5118()
{
  return MEMORY[0x270EFE188]();
}

uint64_t sub_2614D5128()
{
  return MEMORY[0x270EFE1E8]();
}

uint64_t sub_2614D5138()
{
  return MEMORY[0x270EFE1F0]();
}

uint64_t sub_2614D5148()
{
  return MEMORY[0x270EFE1F8]();
}

uint64_t sub_2614D5158()
{
  return MEMORY[0x270EFE200]();
}

uint64_t sub_2614D5168()
{
  return MEMORY[0x270EFE208]();
}

uint64_t sub_2614D5178()
{
  return MEMORY[0x270EFE210]();
}

uint64_t sub_2614D5188()
{
  return MEMORY[0x270EFE218]();
}

uint64_t sub_2614D5198()
{
  return MEMORY[0x270EFE220]();
}

uint64_t sub_2614D51A8()
{
  return MEMORY[0x270EFE228]();
}

uint64_t sub_2614D51B8()
{
  return MEMORY[0x270EFE230]();
}

uint64_t sub_2614D51C8()
{
  return MEMORY[0x270EFE238]();
}

uint64_t sub_2614D51D8()
{
  return MEMORY[0x270EFE240]();
}

uint64_t sub_2614D51E8()
{
  return MEMORY[0x270EFE248]();
}

uint64_t sub_2614D51F8()
{
  return MEMORY[0x270EFE250]();
}

uint64_t sub_2614D5208()
{
  return MEMORY[0x270EFE258]();
}

uint64_t sub_2614D5218()
{
  return MEMORY[0x270EFE260]();
}

uint64_t sub_2614D5228()
{
  return MEMORY[0x270EFE268]();
}

uint64_t sub_2614D5238()
{
  return MEMORY[0x270EFE270]();
}

uint64_t sub_2614D5248()
{
  return MEMORY[0x270EFE2C0]();
}

uint64_t sub_2614D5258()
{
  return MEMORY[0x270EFE2C8]();
}

uint64_t sub_2614D5268()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t sub_2614D5278()
{
  return MEMORY[0x270FA09D0]();
}

uint64_t sub_2614D5288()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_2614D5298()
{
  return MEMORY[0x270FA0A00]();
}

uint64_t sub_2614D52A8()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_2614D52B8()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t sub_2614D52C8()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_2614D52D8()
{
  return MEMORY[0x270EF1830]();
}

uint64_t sub_2614D52E8()
{
  return MEMORY[0x270EF1840]();
}

uint64_t sub_2614D52F8()
{
  return MEMORY[0x270F9D060]();
}

uint64_t sub_2614D5308()
{
  return MEMORY[0x270F9D0B8]();
}

uint64_t sub_2614D5318()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_2614D5328()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_2614D5338()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_2614D5348()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_2614D5358()
{
  return MEMORY[0x270EF18A8]();
}

uint64_t sub_2614D5368()
{
  return MEMORY[0x270EF18B0]();
}

uint64_t sub_2614D5378()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_2614D5388()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_2614D5398()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_2614D53A8()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_2614D53B8()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t sub_2614D53C8()
{
  return MEMORY[0x270EF1A10]();
}

uint64_t sub_2614D53D8()
{
  return MEMORY[0x270EF1A18]();
}

uint64_t sub_2614D53E8()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t sub_2614D53F8()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t sub_2614D5408()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t sub_2614D5418()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_2614D5428()
{
  return MEMORY[0x270F9D5F8]();
}

uint64_t sub_2614D5438()
{
  return MEMORY[0x270F9D620]();
}

uint64_t sub_2614D5448()
{
  return MEMORY[0x270F9D648]();
}

uint64_t sub_2614D5458()
{
  return MEMORY[0x270F9D668]();
}

uint64_t sub_2614D5468()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t sub_2614D5478()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_2614D5488()
{
  return MEMORY[0x270F9D740]();
}

uint64_t sub_2614D5498()
{
  return MEMORY[0x270F9D748]();
}

uint64_t sub_2614D54A8()
{
  return MEMORY[0x270F9D758]();
}

uint64_t sub_2614D54B8()
{
  return MEMORY[0x270F9D760]();
}

uint64_t sub_2614D54C8()
{
  return MEMORY[0x270F9D788]();
}

uint64_t sub_2614D54D8()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_2614D54E8()
{
  return MEMORY[0x270F9D7C0]();
}

uint64_t sub_2614D54F8()
{
  return MEMORY[0x270F9D7D8]();
}

uint64_t sub_2614D5508()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_2614D5518()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t sub_2614D5528()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_2614D5548()
{
  return MEMORY[0x270F9D810]();
}

uint64_t sub_2614D5558()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_2614D5568()
{
  return MEMORY[0x270F9D878]();
}

uint64_t sub_2614D5578()
{
  return MEMORY[0x270F9D880]();
}

uint64_t sub_2614D5588()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t sub_2614D5598()
{
  return MEMORY[0x270F9D8D8]();
}

uint64_t sub_2614D55A8()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_2614D55B8()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t sub_2614D55C8()
{
  return MEMORY[0x270F9DA20]();
}

uint64_t sub_2614D55D8()
{
  return MEMORY[0x270F9DA28]();
}

uint64_t sub_2614D55E8()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t sub_2614D55F8()
{
  return MEMORY[0x270F9DA80]();
}

uint64_t sub_2614D5608()
{
  return MEMORY[0x270F9DA98]();
}

uint64_t sub_2614D5618()
{
  return MEMORY[0x270F9DB00]();
}

uint64_t sub_2614D5628()
{
  return MEMORY[0x270F9DB18]();
}

uint64_t sub_2614D5638()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_2614D5648()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_2614D5658()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_2614D5668()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t sub_2614D5678()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_2614D5688()
{
  return MEMORY[0x270F9DBE8]();
}

uint64_t sub_2614D5698()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_2614D56A8()
{
  return MEMORY[0x270F9DC08]();
}

uint64_t sub_2614D56B8()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_2614D56C8()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_2614D56D8()
{
  return MEMORY[0x270F9DC28]();
}

uint64_t sub_2614D56E8()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_2614D56F8()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t sub_2614D5708()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t sub_2614D5718()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_2614D5728()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t sub_2614D5738()
{
  return MEMORY[0x270F9DD28]();
}

uint64_t sub_2614D5748()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t sub_2614D5758()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_2614D5778()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t sub_2614D5788()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t sub_2614D5798()
{
  return MEMORY[0x270FA1F18]();
}

uint64_t sub_2614D57A8()
{
  return MEMORY[0x270FA1F30]();
}

uint64_t sub_2614D57B8()
{
  return MEMORY[0x270FA1F48]();
}

uint64_t sub_2614D57C8()
{
  return MEMORY[0x270FA1F50]();
}

uint64_t sub_2614D57D8()
{
  return MEMORY[0x270FA1F60]();
}

uint64_t sub_2614D57F8()
{
  return MEMORY[0x270FA1FB0]();
}

uint64_t sub_2614D5828()
{
  return MEMORY[0x270FA2080]();
}

uint64_t sub_2614D5838()
{
  return MEMORY[0x270F9DD60]();
}

uint64_t sub_2614D5848()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t sub_2614D5858()
{
  return MEMORY[0x270EF1C48]();
}

uint64_t sub_2614D5868()
{
  return MEMORY[0x270F9DDF8]();
}

uint64_t sub_2614D5878()
{
  return MEMORY[0x270F9DE48]();
}

uint64_t sub_2614D5888()
{
  return MEMORY[0x270F9DE88]();
}

uint64_t sub_2614D5898()
{
  return MEMORY[0x270EF1C98]();
}

uint64_t sub_2614D58A8()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t sub_2614D58B8()
{
  return MEMORY[0x270EF1CE0]();
}

uint64_t sub_2614D58C8()
{
  return MEMORY[0x270F9E080]();
}

uint64_t sub_2614D58D8()
{
  return MEMORY[0x270FA2B98]();
}

uint64_t sub_2614D58E8()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t sub_2614D58F8()
{
  return MEMORY[0x270F9E0C0]();
}

uint64_t sub_2614D5908()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_2614D5918()
{
  return MEMORY[0x270F9E140]();
}

uint64_t sub_2614D5928()
{
  return MEMORY[0x270F9E178]();
}

uint64_t sub_2614D5938()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_2614D5948()
{
  return MEMORY[0x270EE7910]();
}

uint64_t sub_2614D5958()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_2614D5968()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t sub_2614D5978()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_2614D5988()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_2614D5998()
{
  return MEMORY[0x270EF1F60]();
}

uint64_t sub_2614D59A8()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t sub_2614D59B8()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t sub_2614D59C8()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t sub_2614D59D8()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t sub_2614D59E8()
{
  return MEMORY[0x270FA0DD0]();
}

uint64_t sub_2614D59F8()
{
  return MEMORY[0x270FA2E90]();
}

uint64_t sub_2614D5A08()
{
  return MEMORY[0x270FA2EA8]();
}

uint64_t sub_2614D5A18()
{
  return MEMORY[0x270FA2EB8]();
}

uint64_t sub_2614D5A28()
{
  return MEMORY[0x270FA0F10]();
}

uint64_t sub_2614D5A38()
{
  return MEMORY[0x270FA0F28]();
}

uint64_t sub_2614D5A58()
{
  return MEMORY[0x270EE7950]();
}

uint64_t sub_2614D5A78()
{
  return MEMORY[0x270EF2198]();
}

uint64_t sub_2614D5A88()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_2614D5A98()
{
  return MEMORY[0x270FA2EC8]();
}

uint64_t sub_2614D5AA8()
{
  return MEMORY[0x270FA2ED8]();
}

uint64_t sub_2614D5AB8()
{
  return MEMORY[0x270FA2EE0]();
}

uint64_t sub_2614D5AC8()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t sub_2614D5AD8()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_2614D5AE8()
{
  return MEMORY[0x270F9E400]();
}

uint64_t sub_2614D5AF8()
{
  return MEMORY[0x270F9E4A0]();
}

uint64_t sub_2614D5B08()
{
  return MEMORY[0x270F9E4B0]();
}

uint64_t sub_2614D5B18()
{
  return MEMORY[0x270F9E4E8]();
}

uint64_t sub_2614D5B28()
{
  return MEMORY[0x270F9E4F8]();
}

uint64_t sub_2614D5B38()
{
  return MEMORY[0x270F9E508]();
}

uint64_t sub_2614D5B48()
{
  return MEMORY[0x270F9E528]();
}

uint64_t sub_2614D5B58()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_2614D5B68()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_2614D5B78()
{
  return MEMORY[0x270EF23D8]();
}

uint64_t sub_2614D5B88()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t sub_2614D5B98()
{
  return MEMORY[0x270EF2448]();
}

uint64_t sub_2614D5BA8()
{
  return MEMORY[0x270EF2478]();
}

uint64_t sub_2614D5BB8()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t sub_2614D5BC8()
{
  return MEMORY[0x270EF2570]();
}

uint64_t sub_2614D5BD8()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t sub_2614D5BE8()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_2614D5BF8()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_2614D5C08()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_2614D5C18()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_2614D5C28()
{
  return MEMORY[0x270F9E988]();
}

uint64_t sub_2614D5C38()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_2614D5C48()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_2614D5C58()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_2614D5C68()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_2614D5C78()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t sub_2614D5C88()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t sub_2614D5C98()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_2614D5CA8()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_2614D5CB8()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_2614D5CC8()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_2614D5CD8()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_2614D5CE8()
{
  return MEMORY[0x270FA2160]();
}

uint64_t sub_2614D5CF8()
{
  return MEMORY[0x270FA2198]();
}

uint64_t sub_2614D5D08()
{
  return MEMORY[0x270FA21A0]();
}

uint64_t sub_2614D5D18()
{
  return MEMORY[0x270FA21A8]();
}

uint64_t sub_2614D5D28()
{
  return MEMORY[0x270FA21B0]();
}

uint64_t sub_2614D5D38()
{
  return MEMORY[0x270F9ECD0]();
}

uint64_t sub_2614D5D48()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_2614D5D58()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_2614D5D68()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_2614D5D78()
{
  return MEMORY[0x270F9F000]();
}

uint64_t sub_2614D5D88()
{
  return MEMORY[0x270F9F030]();
}

uint64_t sub_2614D5D98()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_2614D5DA8()
{
  return MEMORY[0x270F9F088]();
}

uint64_t sub_2614D5DB8()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_2614D5DC8()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_2614D5DD8()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_2614D5DE8()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_2614D5E08()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_2614D5E18()
{
  return MEMORY[0x270F9F250]();
}

uint64_t sub_2614D5E28()
{
  return MEMORY[0x270F9F258]();
}

uint64_t sub_2614D5E38()
{
  return MEMORY[0x270F9F270]();
}

uint64_t sub_2614D5E48()
{
  return MEMORY[0x270F9F278]();
}

uint64_t sub_2614D5E58()
{
  return MEMORY[0x270F9F288]();
}

uint64_t sub_2614D5E68()
{
  return MEMORY[0x270F9F290]();
}

uint64_t sub_2614D5E78()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t sub_2614D5E88()
{
  return MEMORY[0x270F9F2C0]();
}

uint64_t sub_2614D5E98()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t sub_2614D5EA8()
{
  return MEMORY[0x270F9F2F0]();
}

uint64_t sub_2614D5EB8()
{
  return MEMORY[0x270F9F308]();
}

uint64_t sub_2614D5EC8()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_2614D5ED8()
{
  return MEMORY[0x270F9F360]();
}

uint64_t sub_2614D5EE8()
{
  return MEMORY[0x270F9F390]();
}

uint64_t sub_2614D5EF8()
{
  return MEMORY[0x270F9F3B0]();
}

uint64_t sub_2614D5F08()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t sub_2614D5F18()
{
  return MEMORY[0x270F9F428]();
}

uint64_t sub_2614D5F28()
{
  return MEMORY[0x270F9F430]();
}

uint64_t sub_2614D5F38()
{
  return MEMORY[0x270F9F440]();
}

uint64_t sub_2614D5F48()
{
  return MEMORY[0x270F9F448]();
}

uint64_t sub_2614D5F58()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_2614D5F68()
{
  return MEMORY[0x270F9F478]();
}

uint64_t sub_2614D5F78()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_2614D5F88()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_2614D5FA8()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_2614D5FB8()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_2614D5FC8()
{
  return MEMORY[0x270F9F878]();
}

uint64_t sub_2614D5FD8()
{
  return MEMORY[0x270F9F918]();
}

uint64_t sub_2614D5FE8()
{
  return MEMORY[0x270F9F920]();
}

uint64_t sub_2614D5FF8()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_2614D6008()
{
  return MEMORY[0x270EF2680]();
}

uint64_t sub_2614D6018()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_2614D6028()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_2614D6038()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_2614D6048()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_2614D6068()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t sub_2614D6078()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t sub_2614D6088()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_2614D6098()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_2614D60A8()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_2614D60B8()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_2614D60C8()
{
  return MEMORY[0x270F9FCF8]();
}

uint64_t sub_2614D60D8()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_2614D60E8()
{
  return MEMORY[0x270F9FD88]();
}

uint64_t sub_2614D60F8()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_2614D6108()
{
  return MEMORY[0x270F9FFA8]();
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x270EE7E10](retstr, value, *(void *)&timescale);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

NSString *NSUserName(void)
{
  return (NSString *)MEMORY[0x270EF2C70]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987C0]();
}

float std::stof(const std::string *__str, size_t *__idx)
{
  MEMORY[0x270F98B70](__str, __idx);
  return result;
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B78](__str, __idx, *(void *)&__base);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

{
  return MEMORY[0x270F9A3C8]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x270FA0150]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x270FA0178]();
}

void bzero(void *a1, size_t a2)
{
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x270ED9470](queue);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x270F27B00]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x270F27B90]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x270F27BB0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x270F27BC0]();
}

uint64_t e5rt_execution_stream_operation_get_num_inputs()
{
  return MEMORY[0x270F27BF0]();
}

uint64_t e5rt_execution_stream_operation_get_num_outputs()
{
  return MEMORY[0x270F27BF8]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x270F27CF0]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x270F27DF8]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x270F27E10]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_size()
{
  return MEMORY[0x270F27E20]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x270F27E58]();
}

uint64_t e5rt_tensor_desc_get_size()
{
  return MEMORY[0x270F27E60]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x270F27E68]();
}

uint64_t e5rt_tensor_desc_retain_dtype()
{
  return MEMORY[0x270F27E88]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x270F27EE0]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x270F27F08]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x270F27F20]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x270F27F78]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x270F28068]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x270F28090]();
}

void exit(int a1)
{
}

float exp2f(float a1)
{
  MEMORY[0x270ED9868](a1);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x270FA0250]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}

void vDSP_deq22(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_mmov(const float *__A, float *__C, vDSP_Length __M, vDSP_Length __N, vDSP_Length __TA, vDSP_Length __TC)
{
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_mtrans(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vflt16(const __int16 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vneg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_zvabs(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}