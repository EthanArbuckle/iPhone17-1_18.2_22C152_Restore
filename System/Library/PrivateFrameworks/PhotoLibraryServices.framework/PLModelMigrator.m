@interface PLModelMigrator
+ (BOOL)_readBooleanFlagWithKey:(id)a3 fromMetadataWithMOC:(id)a4 pathManager:(id)a5;
+ (BOOL)_writeNumber:(id)a3 forKey:(id)a4 pathManager:(id)a5 error:(id *)a6;
+ (BOOL)enumerateObjectsWithIncrementalSaveDefaultBatchSizeFetchRequest:(id)a3 managedObjectContext:(id)a4 count:(unint64_t *)a5 error:(id *)a6 block:(id)a7;
+ (BOOL)executeBatchDeleteWithEntityName:(id)a3 predicate:(id)a4 managedObjectContext:(id)a5 error:(id *)a6;
+ (BOOL)executeBatchUpdateWithEntityName:(id)a3 predicate:(id)a4 propertiesToUpdate:(id)a5 managedObjectContext:(id)a6 error:(id *)a7;
+ (BOOL)graphPersonResetRequiredForPreviousStoreVersion:(unint64_t)a3;
+ (BOOL)markAssetsWithThumbsForTableRebuildInContext:(id)a3;
+ (BOOL)performFaceAnalysisResetWithResetLevel:(int64_t)a3 pathManager:(id)a4 context:(id)a5;
+ (BOOL)rebuildMomentsInContext:(id)a3 pathManager:(id)a4 deleteExistingMoments:(BOOL)a5 targetedAssetOIDs:(id)a6;
+ (BOOL)resetThumbnailIndexesAndInitiateThumbnailRebuildRequestIfSuccessfulForForThumbnailManager:(id)a3 deferHintChanges:(BOOL)a4 inContext:(id)a5;
+ (BOOL)shouldImportAssetsFromDCIMSubDirectoryAtURL:(id)a3 assetsKind:(int *)a4;
+ (BOOL)shouldPromptUserForLibrarySchemaMismatch;
+ (BOOL)shouldPromptUserForRebuildWithLibraryPathManager:(id)a3;
+ (BOOL)waitForDataMigratorToExit;
+ (id)_readNumberWithKey:(id)a3 fromMetadataWithMOC:(id)a4 pathManager:(id)a5 error:(id *)a6;
+ (id)extractPathToAssetUUIDRecoveryMappingFromDatabasePath:(id)a3;
+ (id)schemaIncompatibilityDetailsForStoreMetadata:(id)a3 model:(id)a4;
+ (int)currentModelVersion;
- (BOOL)_addCameraCaptureDeviceForAssetsInStore:(id)a3;
- (BOOL)_addCloudKindSubtypeAndBurstFlagsInStore:(id)a3;
- (BOOL)_addLocalVideoKeyFrameResourceInStore:(id)a3 deferHintChanges:(BOOL)a4;
- (BOOL)_addLocationHashesToAssets:(id)a3;
- (BOOL)_addRAWPackedBadgeAttributeForAllRAWAssetsInStore:(id)a3;
- (BOOL)_addUUIDsToCollectionLists:(id)a3 skipMomentLists:(BOOL)a4;
- (BOOL)_addUUIDsToExistingKeywordsInStore:(id)a3;
- (BOOL)_applyDataProtectionToDCIMFromClassBToClassC;
- (BOOL)_batchOfflineDeleteFromDatabaseOnlyAssets:(id)a3 inManagedObjectContext:(id)a4 error:(id *)a5;
- (BOOL)_cleanupInvalidAlbumsAndFoldersInStore:(id)a3;
- (BOOL)_cleanupLegacyFiles;
- (BOOL)_clearAvalancheUUIDOnCloudSharedAssetsWithStore:(id)a3;
- (BOOL)_convertAssetDepthStatesToDepthTypeInStore:(id)a3;
- (BOOL)_convertNameSourceFromBoolToIntForDeferredRebuildFaceInStore:(id)a3;
- (BOOL)_copyAssetDescriptionToAccessibilityDescription:(id)a3;
- (BOOL)_createImportSessionAlbums:(id)a3;
- (BOOL)_createPhotoDataDirectoryIfNecessary:(BOOL *)a3 error:(id *)a4;
- (BOOL)_deleteAllMemoriesInStore:(id)a3;
- (BOOL)_deleteCloudSharedAndSynced:(BOOL)a3 assetReferencesInStore:(id)a4;
- (BOOL)_deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore:(id)a3;
- (BOOL)_deleteExtraneousAdjustedFullSizeResourcesForSloMoAssetsWithStore:(id)a3;
- (BOOL)_deleteLocalVideoKeyFrameResourcesForNonVideosInStore:(id)a3 deferHintChanges:(BOOL)a4;
- (BOOL)_deleteOrphanedExtendedAttributes:(id)a3;
- (BOOL)_deleteOrphanedUnverifiedPeople:(id)a3;
- (BOOL)_deletePersistentHistoryInStore:(id)a3;
- (BOOL)_deletePersonsMissingUUIDInStore:(id)a3;
- (BOOL)_deletePhotoCloudSharingMetadataInManagedObjectContext:(id)a3 error:(id *)a4;
- (BOOL)_deletePhotoStreamAssetReferencesInStore:(id)a3;
- (BOOL)_deleteVideoThumbsMadeFromPreferredFrameInStore:(id)a3;
- (BOOL)_disableICloudPhoto;
- (BOOL)_discardUnusedCustomRenderedValuesInStore:(id)a3;
- (BOOL)_emptyResourceTablesInStagedStore:(id)a3;
- (BOOL)_ensureAllUserVerifiedPersonsHaveFaceCropsInStore:(id)a3;
- (BOOL)_filterSceneClassificationsInStore:(id)a3;
- (BOOL)_fixAdjustedAssets:(id)a3;
- (BOOL)_fixAdjustedStableHashesInStore:(id)a3;
- (BOOL)_fixAlbumAndFolderSortAscending:(id)a3;
- (BOOL)_fixAssetMasterResources:(id)a3;
- (BOOL)_fixCloudMasterCloudLocalState:(id)a3;
- (BOOL)_fixCloudSharedGIFsInStore:(id)a3;
- (BOOL)_fixCloudSharedVideosInStore:(id)a3;
- (BOOL)_fixCorruptedOrientationsInStore:(id)a3;
- (BOOL)_fixCustomRenderedValues:(id)a3;
- (BOOL)_fixDuplicatedAssets:(id)a3;
- (BOOL)_fixDuplicatedRootFolderAndOrphanedAlbumsInStore:(id)a3;
- (BOOL)_fixEmptyVideoResourcePathsInStore:(id)a3;
- (BOOL)_fixFaceAlgorithmVersion:(id)a3;
- (BOOL)_fixHasLocationSmartAlbum:(id)a3;
- (BOOL)_fixImportedAssetsFromCMMSavedInDCIMWithWrongSavedAssetType:(id)a3;
- (BOOL)_fixIncorrectAddedDateForAssetsInStore:(id)a3;
- (BOOL)_fixIncorrectHeifMetadataInStore:(id)a3;
- (BOOL)_fixIncorrectThumbnailTablesInStore:(id)a3 deferHintChanges:(BOOL)a4;
- (BOOL)_fixInitialSyncMarker;
- (BOOL)_fixInvalidPostMigrationFileSystemImportedAssets:(id)a3;
- (BOOL)_fixItemIdentifierForVideoCmplInStore:(id)a3;
- (BOOL)_fixKeywordsInStagedStore:(id)a3;
- (BOOL)_fixKindSubtypeForLoopingVideoLivePhotosInStore:(id)a3;
- (BOOL)_fixLastPrefetchDateInStore:(id)a3;
- (BOOL)_fixLocalPathForVideoCmplDerivativesInStore:(id)a3;
- (BOOL)_fixLocallyAvailableFlagForThumbnailsInStore:(id)a3;
- (BOOL)_fixLocationValuesInStore:(id)a3;
- (BOOL)_fixMasterCloudLocalStateEnum:(id)a3;
- (BOOL)_fixMemoriesWithAssetLists:(id)a3;
- (BOOL)_fixMergedPeopleThatShouldBeVerified:(id)a3;
- (BOOL)_fixMovieAttributesInStore:(id)a3;
- (BOOL)_fixNilCloudMasterGUID:(id)a3;
- (BOOL)_fixNonDuplicatedAssets:(id)a3 adjusted:(BOOL)a4;
- (BOOL)_fixOriginalPropertiesForCloudSharedAssetsInStore:(id)a3;
- (BOOL)_fixRawWithZeroDimensions:(id)a3;
- (BOOL)_fixRejectedKeyFace:(id)a3;
- (BOOL)_fixSharedStreamVideoResourcesInStore:(id)a3;
- (BOOL)_fixSidecarUTIsAndDataStoreSubtype:(id)a3;
- (BOOL)_fixTrashedDate:(id)a3;
- (BOOL)_fixUTIForRDMigrationInStore:(id)a3;
- (BOOL)_fixUTIforSlowMoInStore:(id)a3;
- (BOOL)_fixUnpushedVideoComplementResourcesInStore:(id)a3;
- (BOOL)_fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore:(id)a3;
- (BOOL)_fixVideoDimensionsForAsset:(id)a3;
- (BOOL)_fixVideoDimensionsInStore:(id)a3;
- (BOOL)_fixVideoJPGPath:(id)a3;
- (BOOL)_fixVisibleBurstAsset:(id)a3;
- (BOOL)_fixWhiteBalanceValuesInStore:(id)a3;
- (BOOL)_fixWhitelistOwnerForPendingInvitationsInStore:(id)a3;
- (BOOL)_fixZeroDurationPhotoIrisWithLocalResourcesInStore:(id)a3 assumeAdjustedIrisIsVisible:(BOOL)a4;
- (BOOL)_fixZeroTrashedDateForEntityName:(id)a3 inManagedObjectContext:(id)a4;
- (BOOL)_fixupAlbumOrderInAlbumListInStore:(id)a3;
- (BOOL)_fixupAssetPersistence:(id)a3;
- (BOOL)_fixupBrokenBurstPicksInStore:(id)a3;
- (BOOL)_fixupCloudResourcesInStore:(id)a3;
- (BOOL)_fixupCroppedUnadjustedAssets:(id)a3;
- (BOOL)_fixupImportedAssetsInStore:(id)a3;
- (BOOL)_fixupImportedEventsInStore:(id)a3;
- (BOOL)_fixupResourceTypeUnknownInStore:(id)a3;
- (BOOL)_fixupSharedStreamOrientationsInStore:(id)a3;
- (BOOL)_fixupSharedVideosWithoutThumbnailsInStore:(id)a3;
- (BOOL)_fixupSyncedAssetAttributesInStore:(id)a3;
- (BOOL)_flattenUnknownCustomRenderedValues:(id)a3;
- (BOOL)_forceAlbumMetadataToDiskInStore:(id)a3;
- (BOOL)_forceSoftResetSync;
- (BOOL)_generateAddedDateForAssetsInStore:(id)a3;
- (BOOL)_identifyVariationsAndDepthAdjustmentsForAsset:(id)a3;
- (BOOL)_identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure:(BOOL)a3 inStore:(id)a4;
- (BOOL)_initiateLightweightReimportOfAllPhotoCloudSharingMetadataInStore:(id)a3;
- (BOOL)_invalidateReverseGeocodingDataInStore:(id)a3;
- (BOOL)_invalidateZeroHDRGainInStore:(id)a3;
- (BOOL)_isFileSystemImportRequiredForLibrary:(id)a3;
- (BOOL)_isFilesystemImportConfigurationDisabled;
- (BOOL)_isReasonableCreationDate:(id)a3;
- (BOOL)_markAllProcessedAnalysisStatesDirtyForWorkerType:(signed __int16)a3 withStartingWorkerFlags:(int)a4 inStore:(id)a5;
- (BOOL)_markMigrationVerifiedTypePersonsInStore:(id)a3;
- (BOOL)_markOldPhotoIrisEditsEvaluatedInStore:(id)a3;
- (BOOL)_markPhotoIrisVideoOrphansInStore:(id)a3;
- (BOOL)_migrateAssetLocationData:(id)a3;
- (BOOL)_migrateCandidateBitsToDeferredProcessingCandidateOptions:(id)a3;
- (BOOL)_migrateCloudResourcesRelationshipsInStagedStore:(id)a3;
- (BOOL)_migrateDetectedFacesGroupInStagedStore:(id)a3;
- (BOOL)_migrateLegacySlomoAdjustmentsInStore:(id)a3 fromLegacySLMFormat:(BOOL)a4;
- (BOOL)_migrateMetadataAndMigrationHistoryWithStore:(id)a3;
- (BOOL)_migrateOriginalColorSpaceInStagedStore:(id)a3;
- (BOOL)_migrateRejectedFacesGroupInStagedStore:(id)a3;
- (BOOL)_migrateResourceUTIAndCodecInStagedStore:(id)a3;
- (BOOL)_migrateTransformableUUIDsToStringsInStore:(id)a3;
- (BOOL)_migrateVersionSpecific1kResourcesInStore:(id)a3 deferHintChanges:(BOOL)a4;
- (BOOL)_migrateVideoKeyFrameTimeValuesInStagedStore:(id)a3;
- (BOOL)_move1kResourcesOutOfMastersDir:(id)a3;
- (BOOL)_moveCloudSharedDerivativesInStore:(id)a3;
- (BOOL)_moveGpsHorizontalAccuracyToNewAttribute:(id)a3;
- (BOOL)_moveMyPhotoStreamToAlbumsListInStore:(id)a3;
- (BOOL)_nukeWallpaperRemnantsInStore:(id)a3;
- (BOOL)_performChangesOnBatchFetchedObjects:(id)a3 inMOC:(id)a4 batchSize:(unint64_t)a5 objectHandler:(id)a6 error:(id *)a7;
- (BOOL)_performMigrationCacheDateCreatedOnResources:(BOOL)a3 cacheItemIdentifierOnResources:(BOOL)a4 store:(id)a5;
- (BOOL)_persistImportSessionAlbumType:(id)a3;
- (BOOL)_persistMemoriesInStore:(id)a3;
- (BOOL)_persistMetadataToFileSystemForAlbum:(id)a3;
- (BOOL)_persistPersonsInStore:(id)a3;
- (BOOL)_persistPhotoIrisVisibilityStateToDiskInStore:(id)a3;
- (BOOL)_persistPlaceAnnotationData:(id)a3;
- (BOOL)_persistResourceTypeAttributeOnAlternateImageResourcesInStore:(id)a3;
- (BOOL)_persistStoreUUIDToMobileCPLPlist:(id)a3;
- (BOOL)_persistVideoComplPropertiesInStore:(id)a3;
- (BOOL)_populateAdjustmentTimestampsOnAssets:(id)a3;
- (BOOL)_populateAdjustmentsStateForAssetsInStore:(id)a3;
- (BOOL)_populateAlbumAndFolderOrderKeysInStagedStore:(id)a3;
- (BOOL)_populateCloudNameSourceOnFacesInStore:(id)a3;
- (BOOL)_populateCloudResourceLocalStateInStor:(id)a3;
- (BOOL)_populateCloudVerifiedTypeOnPersonsInStore:(id)a3;
- (BOOL)_populateDurationAndHDRTypeFromAdditionalAssetAttributesInStagedStore:(id)a3;
- (BOOL)_populateFaceRegionsInStore:(id)a3;
- (BOOL)_populateLatLongInAsset:(id)a3;
- (BOOL)_populateLightweightReimportDirectoryWithPhotoCloudSharingAssetsInManagedObjectContext:(id)a3 error:(id *)a4;
- (BOOL)_populateNilOriginalFilename:(id)a3;
- (BOOL)_populateNilOriginalFilenameOnMaster:(id)a3;
- (BOOL)_populateRepresentativeAssets:(id)a3;
- (BOOL)_populateUserKeyFacePickSourceForPersonInStore:(id)a3;
- (BOOL)_populateVideoCpFieldsInStagedStore:(id)a3;
- (BOOL)_postProcessFromVersion6006Store:(id)a3;
- (BOOL)_processDeletesForUUIDs:(id)a3;
- (BOOL)_purgeCloudSharedResourcesInStore:(id)a3;
- (BOOL)_rebuildMomentsInStore:(id)a3 deleteExistingMoments:(BOOL)a4 targetedAssetOIDs:(id)a5;
- (BOOL)_rebuildWideCaptureThumbsInStore:(id)a3;
- (BOOL)_reconstructImageExtendedAttributes:(id)a3;
- (BOOL)_recordCurrentVersionMetadataInPersistentStore:(id)a3 migrationType:(int64_t)a4 forceRebuildReason:(id)a5 sourceModelVersion:(id)a6 updateLegacyMigrationState:(BOOL)a7 journalRebuildRequred:(BOOL)a8;
- (BOOL)_recoverSingleBurstPhotos:(id)a3;
- (BOOL)_refactorLargeVideoRecipeResourcesInStore:(id)a3;
- (BOOL)_refreshTriggerValues:(id)a3;
- (BOOL)_regenerateMonthHighlightTitlesWithStore:(id)a3;
- (BOOL)_regenerateReferenceKeyDataInStore:(id)a3;
- (BOOL)_regenerateSharedStreamsDataStoreKeysDataInStore:(id)a3 deferHintChanges:(BOOL)a4;
- (BOOL)_relocateCPLMarkerFiles;
- (BOOL)_removeAllLocalVideoKeyFrameResourcesRevert14037InStore:(id)a3;
- (BOOL)_removeAllSharedAssetDCIMFilesInStore:(id)a3;
- (BOOL)_removeAutoloopCacheIfExists;
- (BOOL)_removeAutoloopWorkerStatesInStore:(id)a3;
- (BOOL)_removeCameraRollInStore:(id)a3;
- (BOOL)_removeCloudSharedFileAtPath:(id)a3 withFileManager:(id)a4 error:(id *)a5;
- (BOOL)_removeDuplicatedCloudSharedComments:(id)a3;
- (BOOL)_removeEvents:(id)a3;
- (BOOL)_removeInvalidAdjustmentResourceDataInStore:(id)a3;
- (BOOL)_removeInvalidImportSessionAlbums:(id)a3;
- (BOOL)_removeOldPersonMetadataInStore:(id)a3;
- (BOOL)_removeResourceModelManualIdentityConstraintInStore:(id)a3;
- (BOOL)_removeUnneededAnalysisStateTableEntries:(id)a3;
- (BOOL)_removeUntrackedCloudResourceImageDerivativesInStore:(id)a3;
- (BOOL)_removeUntrackedPersonMetadataInStore:(id)a3;
- (BOOL)_removingDuplicatedCloudAssetGuid:(id)a3;
- (BOOL)_renumberLocalAvailabilityAndLocalAvailabilityTargetsInStore:(id)a3;
- (BOOL)_repairCTMOriginalVideosWithSOCAvailableBitInStore:(id)a3;
- (BOOL)_repairCTMOriginalVideosWithoutAdjustmentsInStore:(id)a3;
- (BOOL)_repairDuplicateSingletonFetchingAlbumsInStore:(id)a3;
- (BOOL)_repairLegacyMigrationDuplicateVersionCloudResources:(id)a3;
- (BOOL)_repairOrphanedProjectAlbumsInStore:(id)a3;
- (BOOL)_repairReframedAssetsWithoutSOCAvailableBitWithStore:(id)a3;
- (BOOL)_repairTableThumbFragmentation;
- (BOOL)_repairWallpaperAlbumsInStore:(id)a3 containerUUID:(id)a4 title:(id)a5;
- (BOOL)_repersistDuplicatedAssets:(id)a3;
- (BOOL)_repushAllUserSmartAlbum:(id)a3;
- (BOOL)_repushAssetsMatchingPredicate:(id)a3 inStore:(id)a4 withMaster:(BOOL)a5;
- (BOOL)_repushAssetsWithAnyUserConfirmedFaceInStore:(id)a3;
- (BOOL)_repushMemoriesWithNewFeaturesInStore:(id)a3;
- (BOOL)_repushPersonsWithMergeTargetInStore:(id)a3;
- (BOOL)_requestAvailabilityChangeForAssetsMissing1kResourcesInStore:(id)a3;
- (BOOL)_resetAlbumToFolderOrderKeyForAlbums:(id)a3;
- (BOOL)_resetAnalysisStateForVideosInStore:(id)a3;
- (BOOL)_resetAssetLocationShiftingAndRevGeoInStore:(id)a3;
- (BOOL)_resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore:(id)a3;
- (BOOL)_resetFailedAssets:(id)a3;
- (BOOL)_resetFailedCloudMasters:(id)a3;
- (BOOL)_resetLimitedLibraryFilterDataInStore:(id)a3;
- (BOOL)_resetUploadAttempts:(id)a3;
- (BOOL)_retryQuarantinedAssetsAndFixResourceRelation:(id)a3;
- (BOOL)_revalidateImportSessionDates:(id)a3;
- (BOOL)_runMigrationStepWithName:(id)a3 fetchRequest:(id)a4 store:(id)a5 migrationHandler:(id)a6;
- (BOOL)_runMigrationStepWithPrettyFunction:(const char *)a3 store:(id)a4 migrationHandler:(id)a5;
- (BOOL)_runPairingForAssetsInStore:(id)a3;
- (BOOL)_saveChangesToPhotoIrisInStore:(id)a3 matchingPredicate:(id)a4 countChanged:(unint64_t *)a5 error:(id *)a6 changeBlock:(id)a7;
- (BOOL)_scavengeCameraProcessingAdjustmentMetadataForAssetsInStore:(id)a3;
- (BOOL)_setImportedByInPLCloudMaster:(id)a3;
- (BOOL)_setPlaybackStyleForAnimatedGIFsInStore:(id)a3;
- (BOOL)_setUserTypeOnKeyFace:(id)a3;
- (BOOL)_setupRootFolderInStore:(id)a3;
- (BOOL)_shouldTriggerLightweightMigrationFailureForInternalTesting;
- (BOOL)_storeContainsFaceCrops:(id)a3 success:(BOOL *)a4;
- (BOOL)_tagScreenshotsForAssetsInStore:(id)a3;
- (BOOL)_trimInvalidAlbumAssetsMappingRecords;
- (BOOL)_tryToPromoteUnknownAssetsInStore:(id)a3;
- (BOOL)_unQuarantineAssetsIfPossibleInStore:(id)a3;
- (BOOL)_unquarantineClass:(Class)a3 inManagedObject:(id)a4;
- (BOOL)_unquarantinedQuarantinedItems:(id)a3;
- (BOOL)_updateAlbumDatesInStore:(id)a3;
- (BOOL)_updateCPLMarkerFiles;
- (BOOL)_updateKeyAssetInMemory:(id)a3;
- (BOOL)_updateKindSubtypeForPanoramaPhotosNeedsReset:(BOOL)a3 inStore:(id)a4;
- (BOOL)_updateMissingFileSystemVolumeUuidInStore:(id)a3;
- (BOOL)_updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore:(id)a3;
- (BOOL)_updatePlaybackStylesAndVariationsInStore:(id)a3;
- (BOOL)_updatePlaybackWithBatchUpdateRequest:(id)a3 targetDescription:(id)a4 inContext:(id)a5;
- (BOOL)_updateSuggestionStartAndEndDatesInStore:(id)a3;
- (BOOL)_validateOrDeleteFileAtPath:(id)a3 forCloudResource:(id)a4;
- (BOOL)_verifyAndFixBrokenLocalAvailabilityForResourceWithFileIDsInStore:(id)a3;
- (BOOL)_verifyCloudAssetsLocalAvailability:(id)a3;
- (BOOL)clearVisionWorkerCache;
- (BOOL)debug_resetThumbnailsAndInitiateRebuildRequestInStore:(id)a3;
- (BOOL)deleteAllAssetAnalysisStatesInStore:(id)a3;
- (BOOL)deleteAnalysisStatesInStore:(id)a3 forWorkerType:(signed __int16)a4;
- (BOOL)didRecordCurrentMigrationMetadata;
- (BOOL)faceQualityResetRequiredForPreviousStoreVersion:(unint64_t)a3;
- (BOOL)fixPossiblyIncorrectAddedDateForAsset:(id)a3;
- (BOOL)fixupStatesWithUnreachableAssetUUIDsInStore:(id)a3;
- (BOOL)fixupUnknownAnalysisStatesInStore:(id)a3;
- (BOOL)isCloudPhotoLibraryEnabled;
- (BOOL)isLoadingFacesFromFileSystem;
- (BOOL)isPhotoLibraryDatabaseReadyForOpen:(id *)a3;
- (BOOL)isPostProcessingLightweightMigration;
- (BOOL)markAllDirtyFaceAnalysisStatesWithFaceDetectionWorkerFlagsInStore:(id)a3;
- (BOOL)markAllSceneAnalysisStatesDirtyAndClearDistanceIdentitiesInStoreAndClearSceneprints:(id)a3;
- (BOOL)markUserConfirmedFacesAndCorrespondingFaceAnalysisStatesDirtyInStore:(id)a3;
- (BOOL)migratePurgeableResources;
- (BOOL)postProcessMigratedStore:(id)a3 migrationUUID:(id)a4 fromVersion:(int)a5 progress:(id)a6 progressUnitCount:(unint64_t)a7;
- (BOOL)postProcessThumbnailsOnlyIfVersionMismatchOrMissing:(BOOL *)a3 coordinator:(id)a4;
- (BOOL)processWelterweightMigrationStageOnStore:(id)a3 migrationUUID:(id)a4 fromVersion:(int)a5 toVersion:(int)a6 migrationContext:(id)a7 progress:(id)a8 progressUnitCount:(unint64_t)a9;
- (BOOL)rebuildAllMomentsInStore:(id)a3 deleteExistingMoments:(BOOL)a4;
- (BOOL)rebuildTargetedMomentsInStore:(id)a3 targetedAssetOIDs:(id)a4;
- (BOOL)reconsiderAllowedForAnalysisOnAssetsMarkedNotAllowedInStore:(id)a3;
- (BOOL)relocateOriginalUBFPaths:(id)a3;
- (BOOL)resetAnalysisStateForVideosWithMoc:(id)a3;
- (BOOL)resetFaceQualityInStore:(id)a3;
- (BOOL)resetManualOrderForNonFavoritePeopleInManagedObjectContext:(id)a3;
- (BOOL)resetManualOrderForNonFavoritePeopleInStore:(id)a3;
- (BOOL)resetRejectedFacesOnAllPersonsInStore:(id)a3;
- (BOOL)sceneStepRequiredForPreviousStoreVersion:(unint64_t)a3;
- (BOOL)shouldCreateDatabase;
- (BOOL)skipDataProtectionForFilePath:(id)a3;
- (BOOL)touchAnalysisStateSortTokensInStoreInStore:(id)a3;
- (BOOL)updateCompletedMigrationStateWithError:(id *)a3;
- (BOOL)validateModelEntityNames:(id *)a3;
- (NSDictionary)options;
- (NSFileManager)fileManager;
- (NSProgress)progress;
- (PLCoreAnalyticsEventManager)analyticsEventManager;
- (PLDeviceRestoreMigrationPostProcessingSupport)postProcessingToken;
- (PLDeviceRestoreMigrationSupport)deviceRestoreMigrationSupport;
- (PLGraphCache)graphCache;
- (PLModelMigrator)initWithPathManager:(id)a3;
- (PLPhotoLibraryPathManager)pathManager;
- (id)_dateForFirstCRVSPhoto;
- (id)_dateForVariations;
- (id)_dateForWideGamutCapture;
- (id)_dateWithiTunesTimeInterval:(double)a3;
- (id)_eventNameFromDate:(id)a3;
- (id)_fetchRequestToIdentifyAdjustedDepthAndVariationsCandidates;
- (id)_fetchRequestToIdentifyBakedInVariationsCandidatesIncludingLongExposure:(BOOL)a3;
- (id)_iTunesPhotosLastSyncMetadata;
- (id)_importFileSystemImportAssets:(id)a3 intoLibrary:(id)a4 type:(unsigned __int8)a5 progress:(id)a6;
- (id)_loadOriginalVideoMetadataFromAsset:(id)a3 timeZoneLookup:(id)a4 error:(id *)a5;
- (id)_migrationThumbnailManagerWithStore:(id)a3;
- (id)_newSyncedPropertiesByAssetUUIDs:(BOOL)a3;
- (id)_orderedAssetsToImportInLibrary:(id)a3;
- (id)_orderedAssetsToImportInLibrary:(id)a3 cameraRollOnly:(BOOL)a4;
- (id)_predicateForInconsistentHeifAssets;
- (id)_syncedPropertiesForAssetUUID:(id)a3;
- (id)archivedAssetUUIDForURL:(id)a3;
- (id)generatePathToAssetUUIDRecoveryMapping;
- (id)managedObjectContextForMigrationInStore:(id)a3 name:(const char *)a4 concurrencyType:(unint64_t)a5;
- (id)managedObjectContextForMigrationWithName:(const char *)a3 persistentStoreCoordinator:(id)a4 concurrencyType:(unint64_t)a5;
- (id)migrationLogger;
- (id)newDeviceRestoreMigrationSupport;
- (id)newShortLivedLibraryForRebuildWithName:(const char *)a3;
- (id)newShortLivedLibraryWithName:(const char *)a3;
- (int)_migrateLegacySlomoAdjustmentsForAsset:(id)a3;
- (int64_t)attemptLightweightMigrationFromVersion:(id)a3 onStore:(id)a4 withMetadata:(id)a5 orStoreURL:(id)a6 options:(id)a7 coordinator:(id)a8 migrationPolicy:(unsigned int)a9 error:(id *)a10;
- (int64_t)checkForceRebuildIndicatorFile;
- (int64_t)createNewDatabaseWithMigrationType:(int64_t)a3 forceRebuildReason:(id)a4 coordinator:(id)a5 error:(id *)a6;
- (int64_t)legacyMigrationState;
- (int64_t)migrateOrCreateDatabaseIfNecessaryWithPersistentContainer:(id)a3 migrationPolicy:(unsigned int)a4 error:(id *)a5;
- (int64_t)promptUserIfNeededForRebuildReason:(id)a3 migrationError:(id)a4;
- (os_unfair_lock_s)containedObjectsLock;
- (os_unfair_lock_s)lightweightMigrationLock;
- (os_unfair_lock_s)recordMigrationMetadataLock;
- (os_unfair_lock_s)storeMetadataLock;
- (signed)_migrationHistoryOriginFromLatestDataMigration;
- (unint64_t)_assetCountForContext:(id)a3;
- (unint64_t)_assetCountForLibrary:(id)a3;
- (unint64_t)_assetCountForStore:(id)a3;
- (void)_addUBFBundleScopedOrderedAssetsToImport:(id)a3 onDiskURLsToSkip:(id)a4;
- (void)_applySyncedProperties:(id)a3 toAsset:(id)a4;
- (void)_convertImplicitDownloadAndKeepOriginalsEnabledToExplicit;
- (void)_failed_recordCurrentVersionMetadata;
- (void)_failed_repairSingletonObjectsInNewDatabaseWithNilContextError:(id)a3;
- (void)_failed_repairSingletonObjectsInNewDatabaseWithNoPersistentStores;
- (void)_failed_repairSingletonObjectsInNewDatabaseWithRepairError:(id)a3;
- (void)_failed_repairSingletonObjectsWithError:(id)a3;
- (void)_failed_repairSingletonObjectsWithErrorTypeNSCoreDataError;
- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreIncompatibleSchemaError;
- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreIncompatibleVersionHashError;
- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreInvalidTypeError;
- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreOpenError;
- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreTimeoutError;
- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreTypeMismatchError;
- (void)_failed_repairSingletonObjectsWithErrorTypeOtherCoreDataError;
- (void)_failed_repairSingletonObjectsWithErrorTypeOtherPhotosError;
- (void)_failed_repairSingletonObjectsWithErrorTypeOtherSQLiteError;
- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorInvalidState;
- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorInvalidURL;
- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorLibraryRequiresMigration;
- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorLibraryTooNew;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_CANTOPEN;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_CORRUPT;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_ERROR;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_FULL;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_LOCKED;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_MISUSE;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_NOTADB;
- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_PERM;
- (void)_failed_repairSingletonObjectsWithInvalidDatabaseFile;
- (void)_failed_repairSingletonObjectsWithInvalidFileTypeLibraryDirectory;
- (void)_failed_repairSingletonObjectsWithMissingDatabaseFile;
- (void)_failed_repairSingletonObjectsWithMissingLibraryDirectory;
- (void)_failed_repairSingletonObjectsWithNilContextError:(id)a3;
- (void)_failed_repairSingletonObjectsWithNoPersistentStores;
- (void)_failed_repairSingletonObjectsWithRepairError:(id)a3;
- (void)_fixIncorrectHeifMetadataForAsset:(id)a3;
- (void)_fixPathForResource:(id)a3 withPath:(id)a4;
- (void)_generateAlbumMetadataFromLastiTunesSyncedPlist;
- (void)_handleCreateOptionsUsingContext:(id)a3;
- (void)_importAfterCrash:(id)a3 dictionariesByPhotoStreamID:(id)a4 completionBlock:(id)a5;
- (void)_importAllDCIMAssetsInLibrary:(id)a3 progress:(id)a4 progressFraction:(id)a5 rebuildComplete:(BOOL)a6;
- (void)_loadFacesFileSystemDataIntoDatabase;
- (void)_loadFileSystemDataIntoDatabaseIfNeededWithReason:(id)a3 progress:(id)a4 requestBackgroundMigrationRegistration:(BOOL *)a5;
- (void)_migratePersonContactInfo;
- (void)_populateFaceRegionsForAsset:(id)a3;
- (void)_prepareForImportDeleteCorruptAssetsWithImporter:(id)a3 context:(id)a4;
- (void)_rebuildAssetsFromJournal:(id)a3 inLibrary:(id)a4 progress:(id)a5 progressFraction:(id)a6;
- (void)_recordCurrentVersionMetadataIfNeededForDataMigrationInPersistentStore:(id)a3;
- (void)_removeFileAt:(id)a3 forResource:(id)a4;
- (void)_repairInProgressDCIMLockedAssetTransfersInOrderedAssetsToImport:(id)a3 baseDirectory:(id)a4 photoDataLockedAssetsURL:(id)a5 photoDataCPLAssetsURL:(id)a6 photoStreamsBaseURL:(id)a7;
- (void)_repairInProgressLockedAssetTransfersInOrderedAssetsToImport:(id)a3;
- (void)_repairMetadataAndSingletonsForMigrationType:(int64_t)a3 forceRebuildReason:(id)a4 journalRebuildRequired:(BOOL)a5;
- (void)_repairPotentialModelCorruptionInLibrary:(id)a3;
- (void)_setIsPostProcessingLightWeightMigration:(BOOL)a3;
- (void)_updateImportedSavedAssetTypeForFileSystemImportedAsset:(id)a3 type:(unsigned __int8)a4 importAssetKind:(int)a5 isCPLAssetsDirectory:(BOOL)a6 destinationAlbum:(id)a7;
- (void)_validateCurrentModelVersionAttempt:(int64_t)a3;
- (void)_validateCurrentModelVersionFailedWithMismatchedVersion:(int64_t)a3;
- (void)_validateCurrentModelVersionFailedWithNoVersionFromServer;
- (void)applyDataProtectionToAllPhotosFilesOnce;
- (void)applyDataProtectionToPhotosPaths:(id)a3 fromKeyClass:(int)a4 toKeyClass:(int)a5;
- (void)archiveAssetUUIDForPathPlist:(id)a3;
- (void)cleanupModelForDataMigrationForRestoreType:(int64_t)a3;
- (void)dontImportFileSystemDataIntoDatabaseWithPhotoLibrary:(id)a3;
- (void)filesystemImportResultsUpdateKeywordWithImportedAssets:(id)a3;
- (void)handleGreenChanges:(id)a3;
- (void)importAfterCrash:(id)a3 dictionariesByPhotoStreamID:(id)a4 completionBlock:(id)a5;
- (void)loadFacesFileSystemDataIntoDatabase;
- (void)loadFileSystemAssetsNotifyCompleted:(id)a3;
- (void)loadFileSystemAssetsNotifyEnter;
- (void)loadFileSystemAssetsNotifyLeave;
- (void)loadFileSystemDataIntoDatabaseIfNeededWithReason:(id)a3 completionHandler:(id)a4;
- (void)migratePersonContactInfo;
- (void)migrationLoggerClose;
- (void)postProcessFixesAfterOTARestoreForCompleteAsset:(id)a3 fixAddedDate:(BOOL)a4 isMegaBackup:(BOOL)a5;
- (void)removeUnpairedTimelapsePreviewsInContext:(id)a3 fromDuplicatedUUIDs:(id)a4;
- (void)repairSingletonObjectsInDatabase;
- (void)setContainedObjectsLock:(os_unfair_lock_s)a3;
- (void)setDidRecordCurrentMigrationMetadata:(BOOL)a3;
- (void)setFileManager:(id)a3;
- (void)setLightweightMigrationLock:(os_unfair_lock_s)a3;
- (void)setLoadingFacesFromFileSystem:(BOOL)a3;
- (void)setOptions:(id)a3;
- (void)setProgress:(id)a3;
- (void)setRecordMigrationMetadataLock:(os_unfair_lock_s)a3;
- (void)setStoreMetadataLock:(os_unfair_lock_s)a3;
- (void)validateCurrentModelVersion;
@end

@implementation PLModelMigrator

+ (int)currentModelVersion
{
  return +[PLModelMigration currentModelVersion];
}

+ (BOOL)shouldPromptUserForLibrarySchemaMismatch
{
  return MEMORY[0x19F38BDA0](a1, a2) && (MEMORY[0x19F38BDB0]() & 1) != 0;
}

- (BOOL)reconsiderAllowedForAnalysisOnAssetsMarkedNotAllowedInStore:(id)a3
{
  v23[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) reconsiderAllowedForAnalysisOnAssetsMarkedNotAllowedInStore:]", *MEMORY[0x1E4F1C1C0]);
  v7 = (void *)MEMORY[0x1E4F1C0D0];
  v8 = +[PLManagedAsset entityName];
  v9 = [v7 fetchRequestWithEntityName:v8];

  [v9 setFetchBatchSize:100];
  v23[0] = @"additionalAttributes";
  v23[1] = @"mediaAnalysisAttributes";
  v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:2];
  [v9 setRelationshipKeyPathsForPrefetching:v10];

  v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == NO", @"additionalAttributes.allowedForAnalysis");
  [v9 setPredicate:v11];

  v12 = [v6 executeFetchRequest:v9 error:0];
  v13 = [v6 enumerateWithIncrementalSaveUsingObjects:v12 withBlock:&__block_literal_global_184];
  [v6 reset];
  v14 = PLMigrationGetLog();
  v15 = v14;
  if (v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v13;
      v16 = "Failed to reconsider allowed for analysis for assets marked as not allowed, error: %@";
      v17 = v15;
      os_log_type_t v18 = OS_LOG_TYPE_ERROR;
      uint32_t v19 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v17, v18, v16, buf, v19);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v16 = "Reconsidered allowed for analysis for assets marked as not allowed.";
    v17 = v15;
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    uint32_t v19 = 2;
    goto LABEL_6;
  }

  return v13 == 0;
}

void __94__PLModelMigrator_AssetAnalysis__reconsiderAllowedForAnalysisOnAssetsMarkedNotAllowedInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 calculateAllowedForAnalysis];
  id v4 = [v2 additionalAttributes];

  [v4 setAllowedForAnalysis:v3];
}

- (BOOL)resetAnalysisStateForVideosWithMoc:(id)a3
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  v5 = +[PLManagedAsset entityName];
  v6 = [v4 fetchRequestWithEntityName:v5];

  v18[0] = @"mediaAnalysisAttributes";
  v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v7];

  v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d AND %K != 0", @"kind", 1, @"videoKeyFrameValue");
  [v6 setPredicate:v8];

  [v6 setFetchBatchSize:100];
  [v6 setResultType:1];
  uint64_t v17 = 0;
  v9 = [v3 executeFetchRequest:v6 error:&v17];
  if (!v9) {
    goto LABEL_6;
  }
  v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"asset IN %@ AND analysisState = %d", v9, 20];
  v11 = objc_opt_class();
  v12 = +[PLAssetAnalysisState entityName];
  LODWORD(v11) = [v11 executeBatchUpdateWithEntityName:v12 predicate:v10 propertiesToUpdate:&unk_1EEBF2810 managedObjectContext:v3 error:0];

  if (v11)
  {
    v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Reset analysis state for video assets with non-zero bestKeyFrame values", buf, 2u);
    }
    BOOL v14 = 1;
  }
  else
  {
LABEL_6:
    v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Failed to reset analysis state for video assets with non-zero bestKeyFrame values", buf, 2u);
    }
    BOOL v14 = 0;
  }

  return v14;
}

- (BOOL)markUserConfirmedFacesAndCorrespondingFaceAnalysisStatesDirtyInStore:(id)a3
{
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) markUserConfirmedFacesAndCorrespondingFaceAnalysisStatesDirtyInStore:]", *MEMORY[0x1E4F1C1C0]);
  v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"nameSource == %d", 1);
  v8 = objc_opt_class();
  v9 = +[PLDetectedFace entityName];
  LODWORD(v8) = [v8 executeBatchUpdateWithEntityName:v9 predicate:v7 propertiesToUpdate:&unk_1EEBF2798 managedObjectContext:v6 error:0];

  if (v8)
  {
    v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(SUBQUERY(asset.detectedFaces, $f, $f.nameSource == %d).@count != 0) AND workerType == %d", 1, 4];
    v11 = (void *)MEMORY[0x1E4F1C0D0];
    v12 = +[PLAssetAnalysisState entityName];
    v13 = [v11 fetchRequestWithEntityName:v12];

    [v13 setResultType:1];
    [v13 setPredicate:v10];
    id v29 = 0;
    BOOL v14 = [v6 executeFetchRequest:v13 error:&v29];
    id v15 = v29;
    v16 = v15;
    if (v14)
    {
      id v28 = v15;
      [MEMORY[0x1E4F28F60] predicateWithFormat:@"self IN %@ AND analysisState != %d", v14, 20];
      id v27 = v4;
      uint64_t v17 = v10;
      v19 = os_log_type_t v18 = v5;
      v20 = objc_opt_class();
      v21 = +[PLAssetAnalysisState entityName];
      LODWORD(v20) = [v20 executeBatchUpdateWithEntityName:v21 predicate:v19 propertiesToUpdate:&unk_1EEBF27C0 managedObjectContext:v6 error:0];

      v5 = v18;
      v10 = v17;
      id v4 = v27;
      if (v20)
      {
        v22 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"self IN %@ AND analysisState = %d", v14, 20];
        v23 = objc_opt_class();
        v24 = +[PLAssetAnalysisState entityName];
        char v25 = [v23 executeBatchUpdateWithEntityName:v24 predicate:v22 propertiesToUpdate:&unk_1EEBF27E8 managedObjectContext:v6 error:0];
      }
      else
      {
        char v25 = 0;
      }
      v16 = v28;
    }
    else
    {
      char v25 = 0;
    }
  }
  else
  {
    char v25 = 0;
  }

  return v25;
}

- (BOOL)markAllDirtyFaceAnalysisStatesWithFaceDetectionWorkerFlagsInStore:(id)a3
{
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) markAllDirtyFaceAnalysisStatesWithFaceDetectionWorkerFlagsInStore:]", *MEMORY[0x1E4F1C1C0]);
  v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"workerType == %d AND analysisState != %d AND analysisState != %d", 4, 20, 10);
  v8 = +[PLAssetAnalysisState entityName];
  LOBYTE(self) = [(id)objc_opt_class() executeBatchUpdateWithEntityName:v8 predicate:v7 propertiesToUpdate:&unk_1EEBF2770 managedObjectContext:v6 error:0];

  return (char)self;
}

- (BOOL)resetRejectedFacesOnAllPersonsInStore:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) resetRejectedFacesOnAllPersonsInStore:]", *MEMORY[0x1E4F1C1C0]);
  v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"rejectedFaces.@count > 0"];
  v8 = (void *)MEMORY[0x1E4F1C0D0];
  v9 = +[PLPerson entityName];
  v10 = [v8 fetchRequestWithEntityName:v9];

  [v10 setPredicate:v7];
  id v18 = 0;
  v11 = [v6 executeFetchRequest:v10 error:&v18];
  v12 = v18;
  if (v11
    && ([v6 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:&__block_literal_global_111_4108],
        uint64_t v13 = objc_claimAutoreleasedReturnValue(),
        v12,
        (v12 = v13) == 0))
  {
    v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = [v11 count];
      *(_DWORD *)buf = 134217984;
      uint64_t v20 = v16;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Reset rejected faces on %lu persons", buf, 0xCu);
    }
    BOOL v15 = 1;
  }
  else
  {
    BOOL v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = (uint64_t)v12;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "Failed to reset rejected faces with error %@", buf, 0xCu);
    }

    BOOL v15 = 0;
  }

  return v15;
}

void __72__PLModelMigrator_AssetAnalysis__resetRejectedFacesOnAllPersonsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 mutableRejectedFaces];
  [v3 removeAllObjects];

  id v4 = [MEMORY[0x1E4F1CAD0] set];
  [v2 setRejectedFacesNeedingFaceCrops:v4];
}

- (BOOL)clearVisionWorkerCache
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_DEFAULT, "Clearing vision worker cache files...", buf, 2u);
  }

  id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  v5 = [(PLModelMigrator *)self pathManager];
  v6 = [v5 privateCacheDirectoryWithSubType:5];

  if ([v4 fileExistsAtPath:v6])
  {
    id v16 = 0;
    char v7 = [v4 removeItemAtPath:v6 error:&v16];
    v8 = v16;
    v9 = PLMigrationGetLog();
    v10 = v9;
    if (v7)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v11 = "Cleared vision worker cache files.";
        v12 = v10;
        os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
        uint32_t v14 = 2;
LABEL_12:
        _os_log_impl(&dword_19B3C7000, v12, v13, v11, buf, v14);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v8;
      v11 = "Failed to remove vision worker cache files: %@";
      v12 = v10;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      uint32_t v14 = 12;
      goto LABEL_12;
    }

    goto LABEL_14;
  }
  v8 = PLMigrationGetLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "No vision worker cache files found to clear.", buf, 2u);
  }
  char v7 = 1;
LABEL_14:

  return v7;
}

- (BOOL)touchAnalysisStateSortTokensInStoreInStore:(id)a3
{
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) touchAnalysisStateSortTokensInStoreInStore:]", *MEMORY[0x1E4F1C1C0]);
  char v7 = (void *)MEMORY[0x1E4F1C0D0];
  v8 = +[PLAssetAnalysisState entityName];
  v9 = [v7 fetchRequestWithEntityName:v8];

  [v9 setFetchBatchSize:100];
  v10 = [v6 executeFetchRequest:v9 error:0];
  v11 = [v6 enumerateWithIncrementalSaveUsingObjects:v10 shouldRefreshAfterSave:1 withBlock:&__block_literal_global_105];
  BOOL v12 = v11 == 0;

  return v12;
}

void __77__PLModelMigrator_AssetAnalysis__touchAnalysisStateSortTokensInStoreInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 sortToken];
  objc_msgSend(v2, "setSortToken:");
}

- (BOOL)fixupStatesWithUnreachableAssetUUIDsInStore:(id)a3
{
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) fixupStatesWithUnreachableAssetUUIDsInStore:]", *MEMORY[0x1E4F1C1C0]);
  char v7 = (void *)MEMORY[0x1E4F1C0D0];
  v8 = +[PLAssetAnalysisState entityName];
  v9 = [v7 fetchRequestWithEntityName:v8];

  v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"asset != nil && assetUUID != asset.uuid"];
  [v9 setPredicate:v10];

  [v9 setFetchBatchSize:100];
  v11 = [v6 executeFetchRequest:v9 error:0];
  BOOL v12 = [v6 enumerateWithIncrementalSaveUsingObjects:v11 shouldRefreshAfterSave:1 withBlock:&__block_literal_global_4121];
  BOOL v13 = v12 == 0;

  return v13;
}

void __78__PLModelMigrator_AssetAnalysis__fixupStatesWithUnreachableAssetUUIDsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v2 = [v4 asset];
  id v3 = [v2 uuid];

  if (v3) {
    [v4 setAssetUUID:v3];
  }
}

- (BOOL)fixupUnknownAnalysisStatesInStore:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) fixupUnknownAnalysisStatesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = objc_alloc(MEMORY[0x1E4F1C0D0]);
  v8 = +[PLAssetAnalysisState entityName];
  v9 = (void *)[v7 initWithEntityName:v8];

  v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"analysisState = %d", 0);
  [v9 setPredicate:v10];

  v11 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v9];
  id v18 = 0;
  id v12 = (id)[v6 executeRequest:v11 error:&v18];
  id v13 = v18;
  uint32_t v14 = PLMigrationGetLog();
  BOOL v15 = v14;
  if (v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v16 = [v13 userInfo];
      *(_DWORD *)buf = 138412546;
      id v20 = v13;
      __int16 v21 = 2112;
      v22 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "fixupUnknownAnalysisStatesInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Deleted all unknown assets states.", buf, 2u);
  }

  return v13 == 0;
}

- (BOOL)deleteAnalysisStatesInStore:(id)a3 forWorkerType:(signed __int16)a4
{
  int v4 = a4;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x19F38D3B0]();
  v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v6, "-[PLModelMigrator(AssetAnalysis) deleteAnalysisStatesInStore:forWorkerType:]", *MEMORY[0x1E4F1C1C0]);
  v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"workerType", v4);
  v10 = objc_opt_class();
  v11 = +[PLAssetAnalysisState entityName];
  LOBYTE(v10) = [v10 executeBatchDeleteWithEntityName:v11 predicate:v9 managedObjectContext:v8 error:0];

  return (char)v10;
}

- (BOOL)deleteAllAssetAnalysisStatesInStore:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) deleteAllAssetAnalysisStatesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = objc_alloc(MEMORY[0x1E4F1C0D0]);
  v8 = +[PLAssetAnalysisState entityName];
  v9 = (void *)[v7 initWithEntityName:v8];

  v10 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v9];
  id v17 = 0;
  id v11 = (id)[v6 executeRequest:v10 error:&v17];
  id v12 = v17;
  id v13 = PLMigrationGetLog();
  uint32_t v14 = v13;
  if (v12)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      BOOL v15 = [v12 userInfo];
      *(_DWORD *)buf = 138412546;
      id v19 = v12;
      __int16 v20 = 2112;
      __int16 v21 = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "deleteAllAssetAnalysisStatesInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Deleted all assets states.", buf, 2u);
  }

  return v12 == 0;
}

- (BOOL)_markAllProcessedAnalysisStatesDirtyForWorkerType:(signed __int16)a3 withStartingWorkerFlags:(int)a4 inStore:(id)a5
{
  uint64_t v5 = *(void *)&a4;
  int v6 = a3;
  v17[2] = *MEMORY[0x1E4F143B8];
  id v8 = a5;
  v9 = (void *)MEMORY[0x19F38D3B0]();
  v10 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v8, "-[PLModelMigrator(AssetAnalysis) _markAllProcessedAnalysisStatesDirtyForWorkerType:withStartingWorkerFlags:inStore:]", *MEMORY[0x1E4F1C1C0]);
  id v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"workerType == %ld AND analysisState == %ld", v6, 20);
  v16[0] = @"analysisState";
  v16[1] = @"workerFlags";
  v17[0] = &unk_1EEBED1A0;
  id v12 = [NSNumber numberWithInt:v5];
  v17[1] = v12;
  id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];

  uint32_t v14 = +[PLAssetAnalysisState entityName];
  LOBYTE(self) = [(id)objc_opt_class() executeBatchUpdateWithEntityName:v14 predicate:v11 propertiesToUpdate:v13 managedObjectContext:v10 error:0];

  return (char)self;
}

- (BOOL)resetFaceQualityInStore:(id)a3
{
  v13[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  int v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) resetFaceQualityInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d", @"qualityMeasure", 0);
  id v12 = @"qualityMeasure";
  v13[0] = &unk_1EEBED188;
  id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:1];
  v9 = objc_opt_class();
  v10 = +[PLDetectedFace entityName];
  LOBYTE(v9) = [v9 executeBatchUpdateWithEntityName:v10 predicate:v7 propertiesToUpdate:v8 managedObjectContext:v6 error:0];

  return (char)v9;
}

- (BOOL)faceQualityResetRequiredForPreviousStoreVersion:(unint64_t)a3
{
  return a3 < 0x2B46;
}

- (BOOL)resetManualOrderForNonFavoritePeopleInStore:(id)a3
{
  id v3 = self;
  id v4 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", a3, "-[PLModelMigrator(AssetAnalysis) resetManualOrderForNonFavoritePeopleInStore:]", *MEMORY[0x1E4F1C1C0]);
  LOBYTE(v3) = [(PLModelMigrator *)v3 resetManualOrderForNonFavoritePeopleInManagedObjectContext:v4];

  return (char)v3;
}

- (BOOL)resetManualOrderForNonFavoritePeopleInManagedObjectContext:(id)a3
{
  v46[2] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v4 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K != %d AND (%K == nil OR %K == %@)", @"type", 1, @"fullName", @"fullName", &stru_1EEB2EB80];
  uint64_t v5 = +[PLPerson fetchRequest];
  v36 = (void *)v4;
  [v5 setPredicate:v4];
  int v6 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"faceCount" ascending:0];
  v46[0] = v6;
  id v7 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"personUUID" ascending:1];
  v46[1] = v7;
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v46 count:2];

  [v5 setSortDescriptors:v8];
  id v40 = 0;
  v9 = [v3 executeFetchRequest:v5 error:&v40];
  id v10 = v40;
  if (!v9)
  {
    id v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v43 = "-[PLModelMigrator(AssetAnalysis) resetManualOrderForNonFavoritePeopleInManagedObjectContext:]";
      __int16 v44 = 2112;
      id v45 = v10;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "%s failed to fetch unnamed persons with error %@", buf, 0x16u);
    }
    id v17 = 0;
    BOOL v27 = 0;
    id v12 = v5;
    id v16 = v8;
    id v19 = v3;
    goto LABEL_25;
  }
  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K != %d AND %K != nil AND %K != %@", @"type", 1, @"fullName", @"fullName", &stru_1EEB2EB80];
  id v12 = +[PLPerson fetchRequest];

  [v12 setPredicate:v11];
  id v13 = (void *)[objc_alloc(MEMORY[0x1E4F29008]) initWithKey:@"fullName" ascending:1 selector:sel_localizedCaseInsensitiveCompare_];
  v41[0] = v13;
  uint32_t v14 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"faceCount" ascending:0];
  v41[1] = v14;
  BOOL v15 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"personUUID" ascending:1];
  v41[2] = v15;
  id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:3];

  [v12 setSortDescriptors:v16];
  id v39 = v10;
  id v17 = [v3 executeFetchRequest:v12 error:&v39];
  id v18 = v39;

  id v19 = v3;
  if (!v17)
  {
    v34 = PLMigrationGetLog();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v43 = "-[PLModelMigrator(AssetAnalysis) resetManualOrderForNonFavoritePeopleInManagedObjectContext:]";
      __int16 v44 = 2112;
      id v45 = v18;
      _os_log_impl(&dword_19B3C7000, v34, OS_LOG_TYPE_ERROR, "%s failed to fetch named persons with error %@", buf, 0x16u);
    }

    id v17 = 0;
    BOOL v27 = 0;
    id v10 = v18;
    goto LABEL_25;
  }

  if (![v9 count] && !objc_msgSend(v17, "count"))
  {
    BOOL v27 = 1;
    goto LABEL_26;
  }
  __int16 v20 = v3;
  unint64_t v21 = 4294966271;
  uint64_t v22 = [v9 count];
  unint64_t v23 = [v17 count] + v22;
  if (v23) {
    unint64_t v21 = 0xFFFFFBFF / v23;
  }
  if (v21 <= 1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v21;
  }
  unint64_t v25 = 1024;
  do
  {
    unint64_t v26 = v25;
    v25 >>= 1;
  }
  while (v26 > v24);
  id v11 = [v17 arrayByAddingObjectsFromArray:v9];
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __93__PLModelMigrator_AssetAnalysis__resetManualOrderForNonFavoritePeopleInManagedObjectContext___block_invoke;
  v38[3] = &__block_descriptor_40_e25_v32__0__PLPerson_8Q16_B24l;
  v38[4] = v26;
  id v19 = v20;
  id v10 = [v20 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:v38];

  BOOL v27 = v10 == 0;
  id v28 = PLMigrationGetLog();
  id v29 = v28;
  if (v10)
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v43 = "-[PLModelMigrator(AssetAnalysis) resetManualOrderForNonFavoritePeopleInManagedObjectContext:]";
      __int16 v44 = 2112;
      id v45 = v10;
      v30 = "%s failed to save with error %@";
      v31 = v29;
      os_log_type_t v32 = OS_LOG_TYPE_ERROR;
      uint32_t v33 = 22;
LABEL_23:
      _os_log_impl(&dword_19B3C7000, v31, v32, v30, buf, v33);
    }
  }
  else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v43 = (const char *)v23;
    v30 = "Sorted %lu non-favorite persons";
    v31 = v29;
    os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
    uint32_t v33 = 12;
    goto LABEL_23;
  }

LABEL_25:
  id v18 = v10;
LABEL_26:

  return v27;
}

uint64_t __93__PLModelMigrator_AssetAnalysis__resetManualOrderForNonFavoritePeopleInManagedObjectContext___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  if ((unint64_t)(*(void *)(a1 + 32) * a3) >= 0xFFFFFFFE) {
    uint64_t v3 = 4294967294;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32) * a3;
  }
  return [a2 setManualOrder:v3];
}

- (BOOL)markAllSceneAnalysisStatesDirtyAndClearDistanceIdentitiesInStoreAndClearSceneprints:(id)a3
{
  v43[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = *MEMORY[0x1E4F1C1C0];
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) markAllSceneAnalysisStatesDirtyAndClearDistanceIdentitiesInStoreAndClearSceneprints:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = (void *)MEMORY[0x1E4F1C038];
  v9 = +[PLAdditionalAssetAttributes entityName];
  id v10 = [v8 batchUpdateRequestWithEntityName:v9];

  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"distanceIdentity != nil"];
  [v10 setPredicate:v11];

  v42 = @"distanceIdentity";
  id v12 = [MEMORY[0x1E4F28C68] expressionForConstantValue:0];
  v43[0] = v12;
  id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v43 forKeys:&v42 count:1];
  [v10 setPropertiesToUpdate:v13];

  [v10 setResultType:0];
  id v39 = 0;
  uint32_t v14 = [v7 executeRequest:v10 error:&v39];
  id v15 = v39;
  BOOL v16 = v14 != 0;
  if (!v14)
  {
    id v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v41 = (uint64_t)v15;
      _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "Batch update request failed, setting distance identities to nil, error: %@", buf, 0xCu);
    }
  }
  [v7 reset];

  id v18 = (void *)MEMORY[0x19F38D3B0]();
  id v19 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator(AssetAnalysis) markAllSceneAnalysisStatesDirtyAndClearDistanceIdentitiesInStoreAndClearSceneprints:]", v6);
  __int16 v20 = (void *)MEMORY[0x1E4F1C0D0];
  unint64_t v21 = +[PLSceneprint entityName];
  uint64_t v22 = [v20 fetchRequestWithEntityName:v21];

  [v22 setFetchBatchSize:100];
  id v38 = 0;
  unint64_t v23 = [v19 executeFetchRequest:v22 error:&v38];
  id v24 = v38;
  if (v23)
  {
    uint64_t v25 = [v23 count];
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = __118__PLModelMigrator_AssetAnalysis__markAllSceneAnalysisStatesDirtyAndClearDistanceIdentitiesInStoreAndClearSceneprints___block_invoke;
    v36[3] = &unk_1E58630D0;
    v37 = v19;
    unint64_t v26 = [v37 enumerateWithIncrementalSaveUsingObjects:v23 withBlock:v36];

    BOOL v27 = PLMigrationGetLog();
    id v28 = v27;
    if (v26)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v41 = (uint64_t)v26;
        id v29 = "Failed to delete sceneprint with error: %@";
        v30 = v28;
        os_log_type_t v31 = OS_LOG_TYPE_ERROR;
LABEL_14:
        _os_log_impl(&dword_19B3C7000, v30, v31, v29, buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v41 = v25;
      id v29 = "Deleted %lu sceneprints";
      v30 = v28;
      os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_14;
    }

    os_log_type_t v32 = v37;
    goto LABEL_16;
  }
  os_log_type_t v32 = PLMigrationGetLog();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v41 = (uint64_t)v24;
    _os_log_impl(&dword_19B3C7000, v32, OS_LOG_TYPE_ERROR, "Failed to fetch Sceneprints with error: %@", buf, 0xCu);
  }
  BOOL v16 = 0;
  unint64_t v26 = v24;
LABEL_16:

  uint32_t v33 = PLMigrationGetLog();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    v34 = @"NO";
    if (v16) {
      v34 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v41 = (uint64_t)v34;
    _os_log_impl(&dword_19B3C7000, v33, OS_LOG_TYPE_DEFAULT, "Performed scene analysis reset, success: %@", buf, 0xCu);
  }

  return v16;
}

uint64_t __118__PLModelMigrator_AssetAnalysis__markAllSceneAnalysisStatesDirtyAndClearDistanceIdentitiesInStoreAndClearSceneprints___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteObject:a2];
}

- (BOOL)sceneStepRequiredForPreviousStoreVersion:(unint64_t)a3
{
  return a3 >> 2 < 0xCD1;
}

+ (BOOL)performFaceAnalysisResetWithResetLevel:(int64_t)a3 pathManager:(id)a4 context:(id)a5
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = a5;
  if (a3 < 1)
  {
    BOOL v22 = 1;
    goto LABEL_22;
  }
  v36 = @"faceAdjustmentVersion";
  v9 = [MEMORY[0x1E4F1CA98] null];
  v37[0] = v9;
  id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:&v36 count:1];

  id v11 = +[PLManagedAsset entityName];
  id v29 = 0;
  BOOL v12 = +[PLModelMigrator executeBatchUpdateWithEntityName:v11 predicate:0 propertiesToUpdate:v10 managedObjectContext:v8 error:&v29];
  id v13 = v29;

  if (!v12)
  {
    unint64_t v23 = PLBackendGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      int64_t v31 = (int64_t)v13;
      _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "Failed to batch reset faceAdjustmentVersion: %@", buf, 0xCu);
    }

    BOOL v22 = 0;
    goto LABEL_21;
  }
  if ((unint64_t)a3 >= 2)
  {
    uint32_t v14 = (void *)MEMORY[0x19F38D3B0]();
    id v15 = +[PLDetectedFaceGroup entityName];
    BOOL v16 = +[PLModelMigrator executeBatchDeleteWithEntityName:v15 predicate:0 managedObjectContext:v8 error:0];

    if (!v16)
    {
      id v17 = PLBackendGetLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        int64_t v31 = 0;
        _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "Failed to batch delete face groups %@", buf, 0xCu);
      }
    }
    v34 = @"state";
    v35 = &unk_1EEBED218;
    id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    if (v16)
    {
      id v19 = +[PLFaceCrop entityName];
      id v28 = 0;
      BOOL v20 = +[PLModelMigrator executeBatchUpdateWithEntityName:v19 predicate:0 propertiesToUpdate:v18 managedObjectContext:v8 error:&v28];
      id v21 = v28;

      if (v20)
      {
        BOOL v22 = 1;
LABEL_20:

        goto LABEL_21;
      }
    }
    else
    {
      id v21 = 0;
    }
    id v24 = PLBackendGetLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      int64_t v31 = (int64_t)v21;
      _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_ERROR, "Failed to batch set face crops to dirty: %@", buf, 0xCu);
    }

    BOOL v22 = 0;
    goto LABEL_20;
  }
  BOOL v22 = 1;
LABEL_21:

LABEL_22:
  uint64_t v25 = PLBackendGetLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    unint64_t v26 = @"NO";
    if (v22) {
      unint64_t v26 = @"YES";
    }
    *(_DWORD *)buf = 134218242;
    int64_t v31 = a3;
    __int16 v32 = 2112;
    uint32_t v33 = v26;
    _os_log_impl(&dword_19B3C7000, v25, OS_LOG_TYPE_INFO, "Performed face analysis reset with level: %lu, success: %@", buf, 0x16u);
  }

  return v22;
}

+ (BOOL)graphPersonResetRequiredForPreviousStoreVersion:(unint64_t)a3
{
  return a3 < 0x3BC5;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_progress, 0);
  objc_storeStrong((id *)&self->_fileManager, 0);
  objc_storeStrong((id *)&self->_options, 0);
  objc_storeStrong((id *)&self->_lazyGraphCache, 0);
  objc_storeStrong((id *)&self->_fileSystemLoadGroup, 0);
  objc_storeStrong((id *)&self->_fileSystemLoadQueue, 0);
  objc_storeStrong((id *)&self->_lazyMigrationLogger, 0);
  objc_storeStrong((id *)&self->_lazyDeviceRestoreMigrationPostProcessingSupport, 0);
  objc_storeStrong((id *)&self->_lazyDeviceRestoreMigrationSupport, 0);
  objc_storeStrong((id *)&self->_lazyCoreAnalysticsEventManager, 0);
  objc_storeStrong((id *)&self->_thumbnailManager, 0);
  objc_storeStrong((id *)&self->_pathManager, 0);
  objc_storeStrong((id *)&self->_syncedPropertiesByUUID, 0);
  objc_storeStrong((id *)&self->_transaction, 0);
}

- (void)setDidRecordCurrentMigrationMetadata:(BOOL)a3
{
  self->_didRecordCurrentMigrationMetadata = a3;
}

- (BOOL)didRecordCurrentMigrationMetadata
{
  return self->_didRecordCurrentMigrationMetadata;
}

- (void)setRecordMigrationMetadataLock:(os_unfair_lock_s)a3
{
  self->_recordMigrationMetadataLock = a3;
}

- (os_unfair_lock_s)recordMigrationMetadataLock
{
  return self->_recordMigrationMetadataLock;
}

- (void)setProgress:(id)a3
{
}

- (NSProgress)progress
{
  return (NSProgress *)objc_getProperty(self, a2, 152, 1);
}

- (void)setLightweightMigrationLock:(os_unfair_lock_s)a3
{
  self->_lightweightMigrationLock = a3;
}

- (os_unfair_lock_s)lightweightMigrationLock
{
  return self->_lightweightMigrationLock;
}

- (void)setStoreMetadataLock:(os_unfair_lock_s)a3
{
  self->_storeMetadataLock = a3;
}

- (os_unfair_lock_s)storeMetadataLock
{
  return self->_storeMetadataLock;
}

- (void)setContainedObjectsLock:(os_unfair_lock_s)a3
{
  self->_containedObjectsLock = a3;
}

- (os_unfair_lock_s)containedObjectsLock
{
  return self->_containedObjectsLock;
}

- (void)setFileManager:(id)a3
{
}

- (NSFileManager)fileManager
{
  return self->_fileManager;
}

- (void)setOptions:(id)a3
{
}

- (NSDictionary)options
{
  return (NSDictionary *)objc_getProperty(self, a2, 136, 1);
}

- (PLPhotoLibraryPathManager)pathManager
{
  return self->_pathManager;
}

- (BOOL)_migrateResourceUTIAndCodecInStagedStore:(id)a3
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  id v29 = v4;
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _migrateResourceUTIAndCodecInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v6 = +[PLPersistentHistoryTransactionModifiers transactionAuthorFromChangeSource:2];
  [v5 setTransactionAuthor:v6];

  +[PLCloudMaster deleteOrphanedMastersWithManagedObjectContext:v5];
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLInternalResource entityName];
  v9 = [v7 fetchRequestWithEntityName:v8];

  [v9 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1BB0];
  uint64_t v38 = 0;
  id v39 = (unsigned int *)&v38;
  uint64_t v40 = 0x3020000000;
  int v41 = 0;
  id v10 = [NSString stringWithUTF8String:"-[PLModelMigrator _migrateResourceUTIAndCodecInStagedStore:]"];
  id v11 = [v5 pathManager];
  BOOL v12 = [v5 persistentStoreCoordinator];
  id v13 = [v5 transactionAuthor];
  uint32_t v14 = [PLEnumerateAndSaveController alloc];
  id v15 = [v5 pathManager];
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = __60__PLModelMigrator__migrateResourceUTIAndCodecInStagedStore___block_invoke;
  v33[3] = &unk_1E5869E58;
  id v16 = v10;
  id v34 = v16;
  id v17 = v12;
  id v35 = v17;
  id v18 = v11;
  id v36 = v18;
  id v19 = v13;
  id v37 = v19;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __60__PLModelMigrator__migrateResourceUTIAndCodecInStagedStore___block_invoke_3;
  v32[3] = &unk_1E58670D0;
  v32[4] = &v38;
  BOOL v20 = [(PLEnumerateAndSaveController *)v14 initWithName:@"migrateUTIAndCodec" fetchRequest:v9 context:v5 pathManager:v15 concurrent:1 refreshAllAfterSave:1 generateContextBlock:v33 didFetchObjectIDsBlock:0 processResultBlock:v32];

  id v31 = 0;
  BOOL v21 = [(PLEnumerateAndSaveController *)v20 processObjectsWithError:&v31];
  id v22 = v31;
  if (v21)
  {
    unint64_t v23 = PLMigrationGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      signed int v24 = atomic_load(v39 + 10);
      *(_DWORD *)buf = 134217984;
      id v43 = (id)v24;
      uint64_t v25 = "Reset %ld asset image request hints.";
      unint64_t v26 = v23;
      os_log_type_t v27 = OS_LOG_TYPE_DEFAULT;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v26, v27, v25, buf, 0xCu);
    }
  }
  else
  {
    unint64_t v23 = PLMigrationGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v43 = v22;
      uint64_t v25 = "Error resetting image request hints, %@";
      unint64_t v26 = v23;
      os_log_type_t v27 = OS_LOG_TYPE_ERROR;
      goto LABEL_6;
    }
  }

  _Block_object_dispose(&v38, 8);

  return v21;
}

id __60__PLModelMigrator__migrateResourceUTIAndCodecInStagedStore___block_invoke(uint64_t a1)
{
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F1C110]) initWithConcurrencyType:1];
  [v2 setName:*(void *)(a1 + 32)];
  [v2 setPersistentStoreCoordinator:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __60__PLModelMigrator__migrateResourceUTIAndCodecInStagedStore___block_invoke_2;
  v7[3] = &unk_1E5873A50;
  id v3 = v2;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  [v3 performBlockAndWait:v7];
  id v4 = v10;
  id v5 = v3;

  return v5;
}

void __60__PLModelMigrator__migrateResourceUTIAndCodecInStagedStore___block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  id v4 = [v9 valueForKeyPath:@"uniformTypeIdentifier.identifier"];
  if ([v4 length])
  {
    id v5 = +[PLUniformTypeIdentifier utiWithIdentifier:v4];
    [v9 willChangeValueForKey:@"compactUTI"];
    uint64_t v6 = [v5 compactRepresentation];
    [v9 setPrimitiveValue:v6 forKey:@"compactUTI"];

    [v9 didChangeValueForKey:@"compactUTI"];
    [v9 willChangeValueForKey:@"utiConformanceHint"];
    id v7 = objc_msgSend(NSNumber, "numberWithShort:", objc_msgSend(v5, "conformanceHint"));
    [v9 setPrimitiveValue:v7 forKey:@"utiConformanceHint"];

    [v9 didChangeValueForKey:@"utiConformanceHint"];
  }
  id v8 = [v9 valueForKeyPath:@"codec.fourCharCodeName"];
  if ([v8 length])
  {
    [v9 willChangeValueForKey:@"codecFourCharCodeName"];
    [v9 setPrimitiveValue:v8 forKey:@"codecFourCharCodeName"];
    [v9 didChangeValueForKey:@"codecFourCharCodeName"];
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 1u);
}

uint64_t __60__PLModelMigrator__migrateResourceUTIAndCodecInStagedStore___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) userInfo];
  [v3 setObject:v2 forKeyedSubscript:@"com.apple.photos.PLModelMigratorPathManagerKey"];

  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(void **)(a1 + 32);
  return [v5 setTransactionAuthor:v4];
}

- (BOOL)_discardUnusedCustomRenderedValuesInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _discardUnusedCustomRenderedValuesInStore:]", a3, &__block_literal_global_2676);
}

BOOL __61__PLModelMigrator__discardUnusedCustomRenderedValuesInStore___block_invoke(uint64_t a1, void *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4F1C038];
  id v3 = a2;
  uint64_t v4 = +[PLManagedAsset entityName];
  id v5 = [v2 batchUpdateRequestWithEntityName:v4];

  uint64_t v6 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(NOT %K IN %@) AND (%K == %d)", @"hdrType", &unk_1EEBF1B98, @"kind", 0];
  [v5 setPredicate:v6];
  id v17 = @"hdrType";
  v18[0] = &unk_1EEBEDF38;
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
  [v5 setPropertiesToUpdate:v7];

  [v5 setResultType:2];
  id v14 = 0;
  id v8 = [v3 executeRequest:v5 error:&v14];

  id v9 = v14;
  id v10 = PLMigrationGetLog();
  id v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = [v8 result];
      *(_DWORD *)buf = 138412290;
      id v16 = v12;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Discard unused customRenderedValue successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v16 = v9;
    _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "Batch update request failed, setting customRenderedValue: %@", buf, 0xCu);
  }

  return v8 != 0;
}

- (BOOL)_deleteLocalVideoKeyFrameResourcesForNonVideosInStore:(id)a3 deferHintChanges:(BOOL)a4
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __90__PLModelMigrator__deleteLocalVideoKeyFrameResourcesForNonVideosInStore_deferHintChanges___block_invoke;
  v5[3] = &__block_descriptor_33_e32_B16__0__NSManagedObjectContext_8l;
  BOOL v6 = a4;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _deleteLocalVideoKeyFrameResourcesForNonVideosInStore:deferHintChanges:]", a3, v5);
}

uint64_t __90__PLModelMigrator__deleteLocalVideoKeyFrameResourcesForNonVideosInStore_deferHintChanges___block_invoke(uint64_t a1, void *a2)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v23 = 0;
  signed int v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = 0;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLInternalResource entityName];
  BOOL v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d AND %K != %d", @"recipeID", 65749, @"asset.kind", 1);
  [v6 setPredicate:v7];
  v33[0] = @"asset";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v8];

  id v22 = 0;
  id v9 = [v3 executeFetchRequest:v6 error:&v22];
  id v10 = v22;
  if (!v9) {
    goto LABEL_3;
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __90__PLModelMigrator__deleteLocalVideoKeyFrameResourcesForNonVideosInStore_deferHintChanges___block_invoke_2;
  v18[3] = &unk_1E5867088;
  id v11 = v3;
  char v21 = *(unsigned char *)(a1 + 32);
  id v19 = v11;
  BOOL v20 = &v23;
  uint64_t v12 = [v11 enumerateWithIncrementalSaveUsingObjects:v9 withBlock:v18];

  id v10 = (id)v12;
  if (!v12)
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (const char *)v24[3];
      *(_DWORD *)buf = 134217984;
      id v28 = v16;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Deleted %lu video key frame resources on non-video assets", buf, 0xCu);
    }
    id v10 = 0;
    uint64_t v15 = 1;
  }
  else
  {
LABEL_3:
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = [v10 userInfo];
      *(_DWORD *)buf = 136446722;
      id v28 = "-[PLModelMigrator _deleteLocalVideoKeyFrameResourcesForNonVideosInStore:deferHintChanges:]_block_invoke";
      __int16 v29 = 2112;
      id v30 = v10;
      __int16 v31 = 2112;
      __int16 v32 = v14;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "%{public}s: failed: %@ %@", buf, 0x20u);
    }
    uint64_t v15 = 0;
  }

  _Block_object_dispose(&v23, 8);
  return v15;
}

void __90__PLModelMigrator__deleteLocalVideoKeyFrameResourcesForNonVideosInStore_deferHintChanges___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 asset];
  id v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  BOOL v6 = [v4 pathForLocalVideoKeyFrame];
  id v12 = 0;
  char v7 = [v5 removeItemAtPath:v6 error:&v12];
  id v8 = v12;

  if ((v7 & 1) == 0 && (PLIsErrorFileNotFound() & 1) == 0)
  {
    id v9 = PLMigrationGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = [v4 pathForLocalVideoKeyFrame];
      id v11 = [v8 userInfo];
      *(_DWORD *)buf = 136446978;
      id v14 = "-[PLModelMigrator _deleteLocalVideoKeyFrameResourcesForNonVideosInStore:deferHintChanges:]_block_invoke_2";
      __int16 v15 = 2112;
      id v16 = v10;
      __int16 v17 = 2112;
      id v18 = v8;
      __int16 v19 = 2112;
      BOOL v20 = v11;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_ERROR, "%{public}s: failed to remove file at path: %@ error: %@ %@", buf, 0x2Au);
    }
  }
  if ([v3 isLocallyAvailable])
  {
    [v3 markAsNotLocallyAvailable];
    [*(id *)(a1 + 32) deleteObject:v3];
    if (!*(unsigned char *)(a1 + 48)) {
      [v4 recalculateImageRequestHints];
    }
  }
  else
  {
    [*(id *)(a1 + 32) deleteObject:v3];
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

- (BOOL)_deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __80__PLModelMigrator__deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore___block_invoke;
  v4[3] = &unk_1E58669F8;
  v4[4] = self;
  v4[5] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore:]", a3, v4);
}

uint64_t __80__PLModelMigrator__deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLManagedFolder entityName];
  BOOL v6 = [v4 fetchRequestWithEntityName:v5];

  char v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K = %d AND %K = %@", @"kind", 4000, @"cloudGUID", @"----Project-Root-Folder----"];
  [v6 setPredicate:v7];

  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __80__PLModelMigrator__deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore___block_invoke_2;
  void v17[3] = &unk_1E5867060;
  v17[4] = *(void *)(a1 + 32);
  id v18 = 0;
  id v8 = (id)[v3 enumerateObjectsFromFetchRequest:v6 count:&v18 usingDefaultBatchSizeWithBlock:v17];
  if ([v3 hasChanges])
  {
    id v16 = 0;
    uint64_t v9 = [v3 save:&v16];
    id v10 = v16;
    id v11 = PLMigrationGetLog();
    id v12 = v11;
    if (v9)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        BOOL v20 = v18;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Deleted %lu empty project root folder with wrong folder kind", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v13 = NSStringFromSelector(*(SEL *)(a1 + 40));
      id v14 = [v10 userInfo];
      *(_DWORD *)buf = 138543874;
      BOOL v20 = v13;
      __int16 v21 = 2112;
      id v22 = v10;
      __int16 v23 = 2112;
      signed int v24 = v14;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

void __80__PLModelMigrator__deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 delete];
  id v4 = [*(id *)(a1 + 32) pathManager];
  [v3 removePersistedFileSystemDataWithPathManager:v4];
}

- (BOOL)_repairDuplicateSingletonFetchingAlbumsInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _repairDuplicateSingletonFetchingAlbumsInStore:]", a3, &__block_literal_global_2661);
}

uint64_t __66__PLModelMigrator__repairDuplicateSingletonFetchingAlbumsInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = (void *)MEMORY[0x1E4F1C0D0];
  id v4 = +[PLFetchingAlbum entityName];
  id v5 = [v3 fetchRequestWithEntityName:v4];

  BOOL v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d", @"kind", 1507);
  [v5 setPredicate:v6];

  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __66__PLModelMigrator__repairDuplicateSingletonFetchingAlbumsInStore___block_invoke_2;
  v21[3] = &unk_1E5867038;
  id v9 = v7;
  id v22 = v9;
  id v10 = v8;
  id v23 = v10;
  id v11 = [v2 enumerateObjectsFromFetchRequest:v5 count:0 usingDefaultBatchSizeWithBlock:v21];
  if (v11)
  {
LABEL_2:
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v25 = "-[PLModelMigrator _repairDuplicateSingletonFetchingAlbumsInStore:]_block_invoke";
      __int16 v26 = 2112;
      os_log_type_t v27 = v11;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%{public}s: failed with error: %@", buf, 0x16u);
    }
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  if ([v10 count])
  {
    id v14 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithObjectIDs:v10];
    [v14 setResultType:2];
    id v20 = 0;
    __int16 v15 = [v2 executeRequest:v14 error:&v20];
    id v11 = (char *)v20;
    if (!v15)
    {
      __int16 v19 = PLMigrationGetLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = v11;
        _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "Failed to delete duplicate singleton fetching albums: %@", buf, 0xCu);
      }

      goto LABEL_2;
    }
    id v16 = [v15 result];
    uint64_t v17 = [v16 unsignedIntegerValue];
  }
  else
  {
    uint64_t v17 = 0;
    id v11 = 0;
  }
  id v12 = PLMigrationGetLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v25 = (const char *)v17;
    _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Removed %lu duplicate singleton fetching albums", buf, 0xCu);
  }
  uint64_t v13 = 1;
LABEL_12:

  return v13;
}

void __66__PLModelMigrator__repairDuplicateSingletonFetchingAlbumsInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 kind];
  LOBYTE(v3) = [v3 containsObject:v5];

  if (v3)
  {
    BOOL v6 = *(void **)(a1 + 40);
    [v4 objectID];
  }
  else
  {
    BOOL v6 = *(void **)(a1 + 32);
    [v4 kind];
  }
  id v7 = (id)objc_claimAutoreleasedReturnValue();

  [v6 addObject:v7];
}

- (BOOL)_resetLimitedLibraryFilterDataInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _resetLimitedLibraryFilterDataInStore:]", a3, &__block_literal_global_2655);
}

BOOL __57__PLModelMigrator__resetLimitedLibraryFilterDataInStore___block_invoke(uint64_t a1, void *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1C038];
  id v3 = a2;
  id v4 = +[PLLimitedLibraryFetchFilter entityName];
  id v5 = [v2 batchUpdateRequestWithEntityName:v4];

  uint64_t v17 = @"fetchFilterData";
  BOOL v6 = [MEMORY[0x1E4F1C9B8] data];
  v18[0] = v6;
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
  [v5 setPropertiesToUpdate:v7];

  [v5 setResultType:2];
  id v14 = 0;
  id v8 = [v3 executeRequest:v5 error:&v14];

  id v9 = v14;
  id v10 = PLMigrationGetLog();
  id v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [v8 result];
      *(_DWORD *)buf = 138412290;
      id v16 = v12;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Reset limited-library fetchFilterData successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v16 = v9;
    _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "Batch update request failed, resetting limited-library fetchFilterData, error: %@", buf, 0xCu);
  }

  return v8 != 0;
}

- (BOOL)_unQuarantineAssetsIfPossibleInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _unQuarantineAssetsIfPossibleInStore:]", a3, &__block_literal_global_2647);
}

BOOL __56__PLModelMigrator__unQuarantineAssetsIfPossibleInStore___block_invoke(uint64_t a1, void *a2)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = (void *)MEMORY[0x1E4F1C0D0];
  id v4 = +[PLManagedAsset entityName];
  id v5 = [v3 fetchRequestWithEntityName:v4];

  BOOL v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d AND %K == %d", @"cloudLocalState", 4, @"master.cloudLocalState", 4);
  [v5 setPredicate:v6];

  v24[0] = @"master";
  v24[1] = @"modernResources";
  v24[2] = @"master.assets";
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:3];
  [v5 setRelationshipKeyPathsForPrefetching:v7];

  [v5 setFetchBatchSize:100];
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  id v15 = 0;
  id v8 = [v2 executeFetchRequest:v5 error:&v15];
  id v9 = v15;
  if (v8)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __56__PLModelMigrator__unQuarantineAssetsIfPossibleInStore___block_invoke_2;
    v14[3] = &unk_1E5866718;
    v14[4] = &v16;
    id v10 = [v2 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:v14];

    id v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (const char *)v17[3];
      *(_DWORD *)buf = 134217984;
      __int16 v21 = v12;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Un-quarantined %lu assets", buf, 0xCu);
    }
  }
  else
  {
    id v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v21 = "-[PLModelMigrator _unQuarantineAssetsIfPossibleInStore:]_block_invoke";
      __int16 v22 = 2112;
      id v23 = v9;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "%{public}s: failed with error: %@", buf, 0x16u);
    }
    id v10 = v9;
  }

  _Block_object_dispose(&v16, 8);
  return v8 != 0;
}

uint64_t __56__PLModelMigrator__unQuarantineAssetsIfPossibleInStore___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result = [a2 unQuarantineIfPossible];
  if (result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  return result;
}

- (void)_convertImplicitDownloadAndKeepOriginalsEnabledToExplicit
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = PLReadCloudPhotoLibraryKeepOriginalsEnabled_Legacy();
  if (!v2)
  {
    int v3 = PLIsEDUMode();
    id v4 = PLMigrationGetLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = @"download and keep originals";
      if (v3) {
        id v5 = @"optimize storage";
      }
      int v6 = 138412290;
      id v7 = v5;
      _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_DEFAULT, "Converting implicit to explicit iCPL mode in defaults: %@", (uint8_t *)&v6, 0xCu);
    }

    PLWriteCloudPhotoLibraryKeepOriginalsEnabled_Legacy(v3 ^ 1u);
  }
}

- (BOOL)_convertAssetDepthStatesToDepthTypeInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _convertAssetDepthStatesToDepthTypeInStore:]", a3, &__block_literal_global_2633);
}

BOOL __62__PLModelMigrator__convertAssetDepthStatesToDepthTypeInStore___block_invoke(uint64_t a1, void *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1C038];
  id v3 = a2;
  id v4 = +[PLManagedAsset entityName];
  id v5 = [v2 batchUpdateRequestWithEntityName:v4];

  int v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"(%K = %d) OR (%K = %d) OR (%K = %d) OR (%K = %d)", @"depthType", 2, @"depthType", 3, @"hdrType", 7, @"hdrType", 8);
  [v5 setPredicate:v6];

  uint64_t v17 = @"depthType";
  v18[0] = &unk_1EEBEDF20;
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
  [v5 setPropertiesToUpdate:v7];

  [v5 setResultType:2];
  id v14 = 0;
  uint64_t v8 = [v3 executeRequest:v5 error:&v14];

  id v9 = v14;
  id v10 = PLMigrationGetLog();
  id v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [v8 result];
      *(_DWORD *)buf = 138412290;
      id v16 = v12;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Convert asset depth states to depth type successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v16 = v9;
    _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "Batch update request failed, setting depthType: %@", buf, 0xCu);
  }

  return v8 != 0;
}

- (BOOL)_updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __78__PLModelMigrator__updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore___block_invoke;
  v4[3] = &unk_1E5866D78;
  v4[4] = self;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore:]", a3, v4);
}

uint64_t __78__PLModelMigrator__updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v37 = objc_alloc_init(MEMORY[0x1E4F8CDF0]);
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x2020000000;
  int v62 = 0;
  uint64_t v57 = 0;
  v58 = &v57;
  uint64_t v59 = 0x2020000000;
  uint64_t v60 = 0;
  uint64_t v53 = 0;
  v54 = &v53;
  uint64_t v55 = 0x2020000000;
  uint64_t v56 = 0;
  uint64_t v49 = 0;
  v50 = &v49;
  uint64_t v51 = 0x2020000000;
  uint64_t v52 = 0;
  id v3 = (void *)MEMORY[0x1E4F1C0D0];
  id v4 = +[PLManagedAsset entityName];
  id v5 = [v3 fetchRequestWithEntityName:v4];

  int v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d AND %K == %d", @"kindSubtype", 101, @"kind", 1);
  [v5 setPredicate:v6];

  [v5 setFetchBatchSize:100];
  v71[0] = @"additionalAttributes.unmanagedAdjustment";
  v71[1] = @"master.mediaMetadata";
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v71 count:2];
  [v5 setRelationshipKeyPathsForPrefetching:v7];

  id v48 = 0;
  uint64_t v8 = [v2 executeFetchRequest:v5 error:&v48];
  id v9 = v48;
  if (!v8) {
    goto LABEL_12;
  }
  id v10 = PLMigrationGetLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = [v8 count];
    *(_DWORD *)buf = 134217984;
    v64 = (const char *)v11;
    _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Adding hfr state for %lu existing Mogul assets", buf, 0xCu);
  }

  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  void v43[2] = __78__PLModelMigrator__updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore___block_invoke_2629;
  v43[3] = &unk_1E5867460;
  uint64_t v12 = *(void *)(a1 + 32);
  id v45 = &v57;
  v43[4] = v12;
  id v13 = v37;
  id v44 = v13;
  v46 = v61;
  v47 = &v53;
  uint64_t v14 = [v2 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:v43];

  id v9 = (id)v14;
  if (v14) {
    goto LABEL_13;
  }
  id v15 = (void *)MEMORY[0x1E4F1C0D0];
  id v16 = +[PLManagedAsset entityName];
  id v5 = [v15 fetchRequestWithEntityName:v16];

  uint64_t v17 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v18 = +[PLManagedAsset predicateForAdjustedAssetsWithKeyPathToAsset:0];
  v70[0] = v18;
  uint64_t v19 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kind", 1);
  v70[1] = v19;
  id v20 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d", @"kindSubtype", 101);
  v70[2] = v20;
  __int16 v21 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForUpdateMogulSubtypeExclusions"), 1);
  v70[3] = v21;
  __int16 v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v70 count:4];
  id v23 = [v17 andPredicateWithSubpredicates:v22];
  [v5 setPredicate:v23];

  [v5 setFetchBatchSize:100];
  v69 = @"master.mediaMetadata";
  signed int v24 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v69 count:1];
  [v5 setRelationshipKeyPathsForPrefetching:v24];

  id v42 = 0;
  uint64_t v25 = [v2 executeFetchRequest:v5 error:&v42];
  id v9 = v42;
  if (v25)
  {
    __int16 v26 = PLMigrationGetLog();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = [v25 count];
      *(_DWORD *)buf = 134217984;
      v64 = (const char *)v27;
      _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_DEFAULT, "Checking %lu non-Mogul adjusted videos if original is slomo (and if so update kindSubtype and hfr state)", buf, 0xCu);
    }

    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __78__PLModelMigrator__updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore___block_invoke_2631;
    v38[3] = &unk_1E586B2F0;
    v38[4] = *(void *)(a1 + 32);
    id v39 = v13;
    uint64_t v40 = v61;
    int v41 = &v49;
    uint64_t v28 = [v2 enumerateWithIncrementalSaveUsingObjects:v25 withBlock:v38];

    id v9 = (id)v28;
    if (!v28)
    {
      __int16 v29 = PLMigrationGetLog();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = (const char *)v58[3];
        __int16 v31 = (void *)v54[3];
        __int16 v32 = (void *)v50[3];
        *(_DWORD *)buf = 134218496;
        v64 = v30;
        __int16 v65 = 2048;
        id v66 = v31;
        __int16 v67 = 2048;
        v68 = v32;
        _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_DEFAULT, "updated %lu standard slomo assets, %lu nonstandard adjusted slomo assets, %lu original-only slomo assets", buf, 0x20u);
      }
      id v9 = 0;
      uint64_t v33 = 1;
      goto LABEL_16;
    }
  }
  else
  {
LABEL_12:
  }
LABEL_13:
  __int16 v29 = PLMigrationGetLog();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    id v34 = [v9 userInfo];
    *(_DWORD *)buf = 136315650;
    v64 = "-[PLModelMigrator _updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore:]_block_invoke";
    __int16 v65 = 2112;
    id v66 = v9;
    __int16 v67 = 2112;
    v68 = v34;
    _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
  }
  uint64_t v33 = 0;
LABEL_16:

  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v57, 8);
  _Block_object_dispose(v61, 8);

  return v33;
}

void __78__PLModelMigrator__updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore___block_invoke_2629(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F8CE18];
  id v5 = [v3 additionalAttributes];
  int v6 = [v5 unmanagedAdjustment];
  id v7 = [v6 adjustmentFormatIdentifier];
  uint64_t v8 = [v3 additionalAttributes];
  id v9 = [v8 unmanagedAdjustment];
  id v10 = [v9 adjustmentFormatVersion];
  LODWORD(v4) = [v4 isRecognizedSlowMotionFormatWithIdentifier:v7 version:v10];

  if (v4)
  {
    [v3 setHighFrameRateState:3];
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
  else
  {
    uint64_t v11 = (void *)a1[4];
    uint64_t v12 = a1[5];
    id v21 = 0;
    id v13 = [v11 _loadOriginalVideoMetadataFromAsset:v3 timeZoneLookup:v12 error:&v21];
    id v14 = v21;
    if (!v13)
    {
      uint64_t v15 = *(void *)(a1[7] + 8);
      int v16 = *(_DWORD *)(v15 + 24);
      if (v16 <= 2)
      {
        *(_DWORD *)(v15 + 24) = v16 + 1;
        uint64_t v17 = PLMigrationGetLog();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = [v3 uuid];
          uint64_t v19 = [v14 userInfo];
          *(_DWORD *)buf = 136315906;
          id v23 = "-[PLModelMigrator _updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore:]_block_invoke";
          __int16 v24 = 2112;
          uint64_t v25 = v18;
          __int16 v26 = 2112;
          id v27 = v14;
          __int16 v28 = 2112;
          __int16 v29 = v19;
          _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "%s: failed to load metadata for asset with uuid %@, not fatal, will proceed with migration, error: %@ %@", buf, 0x2Au);
        }
      }
    }
    if ([v13 isSloMo]) {
      uint64_t v20 = 3;
    }
    else {
      uint64_t v20 = 2;
    }
    [v3 setHighFrameRateState:v20];
    ++*(void *)(*(void *)(a1[8] + 8) + 24);
  }
}

void __78__PLModelMigrator__updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore___block_invoke_2631(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  id v13 = 0;
  int v6 = [v4 _loadOriginalVideoMetadataFromAsset:v3 timeZoneLookup:v5 error:&v13];
  id v7 = v13;
  if (!v6)
  {
    uint64_t v8 = *(void *)(a1[6] + 8);
    int v9 = *(_DWORD *)(v8 + 24);
    if (v9 <= 2)
    {
      *(_DWORD *)(v8 + 24) = v9 + 1;
      id v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = [v3 uuid];
        uint64_t v12 = [v7 userInfo];
        *(_DWORD *)buf = 136315906;
        uint64_t v15 = "-[PLModelMigrator _updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore:]_block_invoke";
        __int16 v16 = 2112;
        uint64_t v17 = v11;
        __int16 v18 = 2112;
        id v19 = v7;
        __int16 v20 = 2112;
        id v21 = v12;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%s: failed to load metadata for asset with uuid %@, not fatal, will proceed with migration, error: %@ %@", buf, 0x2Au);
      }
    }
  }
  if ([v6 isSloMo])
  {
    [v3 setHighFrameRateState:1];
    [v3 setKindSubtype:101];
    ++*(void *)(*(void *)(a1[7] + 8) + 24);
  }
}

- (id)_loadOriginalVideoMetadataFromAsset:(id)a3 timeZoneLookup:(id)a4 error:(id *)a5
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  int v9 = [v7 master];
  id v10 = [v9 mediaMetadata];
  uint64_t v11 = [v10 data];

  if (v11)
  {
    id v12 = objc_alloc(MEMORY[0x1E4F8CC48]);
    id v13 = [v7 master];
    id v14 = [v13 mediaMetadata];
    uint64_t v15 = [v14 data];
    __int16 v16 = (void *)[v12 initWithAVProxyData:v15 timeZoneLookup:v8];

    goto LABEL_7;
  }
  if (([v7 isReferencedAsset] & 1) == 0)
  {
    id v21 = objc_alloc(MEMORY[0x1E4F8CC48]);
    uint64_t v22 = (void *)MEMORY[0x1E4F1CB10];
    id v23 = [v7 pathForOriginalFile];
    __int16 v24 = [v22 fileURLWithPath:v23];
    __int16 v16 = (void *)[v21 initWithAVURL:v24 timeZoneLookup:v8];

LABEL_7:
    __int16 v20 = 0;
    if (!a5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v17 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v18 = *MEMORY[0x1E4F8C500];
  uint64_t v26 = *MEMORY[0x1E4F28228];
  v27[0] = @"skipping reference asset";
  id v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  __int16 v20 = [v17 errorWithDomain:v18 code:46502 userInfo:v19];

  __int16 v16 = 0;
  if (a5) {
LABEL_8:
  }
    *a5 = v20;
LABEL_9:

  return v16;
}

- (BOOL)_resetAssetLocationShiftingAndRevGeoInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _resetAssetLocationShiftingAndRevGeoInStore:]", a3, &__block_literal_global_2616);
}

BOOL __63__PLModelMigrator__resetAssetLocationShiftingAndRevGeoInStore___block_invoke(uint64_t a1, void *a2)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1C038];
  id v3 = a2;
  id v4 = +[PLAdditionalAssetAttributes entityName];
  uint64_t v5 = [v2 batchUpdateRequestWithEntityName:v4];

  [v5 setResultType:2];
  int v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != nil", @"shiftedLocationData");
  [v5 setPredicate:v6];

  v25[0] = @"reverseLocationDataIsValid";
  v25[1] = @"shiftedLocationIsValid";
  v26[0] = MEMORY[0x1E4F1CC28];
  v26[1] = MEMORY[0x1E4F1CC28];
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:2];
  [v5 setPropertiesToUpdate:v7];

  id v18 = 0;
  id v8 = [v3 executeRequest:v5 error:&v18];

  id v9 = v18;
  id v10 = PLMigrationGetLog();
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [v8 result];
      *(_DWORD *)buf = 138412290;
      __int16 v20 = v12;
      id v13 = "Invalidated reverse geocoding and shifted location data for %@ assets";
      id v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      uint32_t v16 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v14, v15, v13, buf, v16);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    id v12 = [v9 userInfo];
    *(_DWORD *)buf = 136315650;
    __int16 v20 = "-[PLModelMigrator _resetAssetLocationShiftingAndRevGeoInStore:]_block_invoke";
    __int16 v21 = 2112;
    id v22 = v9;
    __int16 v23 = 2112;
    __int16 v24 = v12;
    id v13 = "%s: failed to update: %@ %@";
    id v14 = v11;
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    uint32_t v16 = 32;
    goto LABEL_6;
  }

  return v8 != 0;
}

- (BOOL)_resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __85__PLModelMigrator__resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore:]", a3, v4);
}

uint64_t __85__PLModelMigrator__resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v5 = +[PLAdditionalAssetAttributes entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d", @"cloudRecoveryState", &unk_1EEBEE0D0);
  [v6 setPredicate:v7];

  [v6 setFetchBatchSize:100];
  uint64_t v18 = 0;
  id v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  id v17 = 0;
  id v8 = [v3 executeFetchRequest:v6 error:&v17];
  id v9 = v17;
  if (!v8) {
    goto LABEL_3;
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __85__PLModelMigrator__resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore___block_invoke_2613;
  v16[3] = &unk_1E5867010;
  v16[4] = &v18;
  uint64_t v10 = [v3 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:v16];

  id v9 = (id)v10;
  if (!v10)
  {
    uint64_t v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = (void *)v19[3];
      *(_DWORD *)buf = 134217984;
      __int16 v23 = v14;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Reset cloud recovery state for %lu assets", buf, 0xCu);
    }
    id v9 = 0;
    uint64_t v13 = 1;
  }
  else
  {
LABEL_3:
    uint64_t v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      __int16 v23 = v12;
      __int16 v24 = 2112;
      id v25 = v9;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "%@: failed with error: %@", buf, 0x16u);
    }
    uint64_t v13 = 0;
  }

  _Block_object_dispose(&v18, 8);
  return v13;
}

void __85__PLModelMigrator__resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore___block_invoke_2613(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 cloudRecoveryState])
  {
    [v3 setCloudRecoveryState:0];
    [v3 setCloudStateRecoveryAttemptsCount:0];
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

- (BOOL)_invalidateZeroHDRGainInStore:(id)a3
{
  id v4 = a3;
  pl_dispatch_once();
  LOBYTE(self) = -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _invalidateZeroHDRGainInStore:]", v4, &__block_literal_global_2604);

  return (char)self;
}

BOOL __49__PLModelMigrator__invalidateZeroHDRGainInStore___block_invoke(uint64_t a1, void *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_DEFAULT, "Invalidating zero hdrGain for assets", buf, 2u);
  }

  id v4 = objc_alloc(MEMORY[0x1E4F1C038]);
  uint64_t v5 = +[PLManagedAsset entityName];
  int v6 = (void *)[v4 initWithEntityName:v5];

  [v6 setResultType:2];
  id v19 = @"hdrGain";
  id v7 = [MEMORY[0x1E4F1CA98] null];
  v20[0] = v7;
  id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
  [v6 setPropertiesToUpdate:v8];

  id v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"hdrGain", 0);
  [v6 setPredicate:v9];

  id v16 = 0;
  uint64_t v10 = [v2 executeRequest:v6 error:&v16];
  id v11 = v16;
  id v12 = PLMigrationGetLog();
  uint64_t v13 = v12;
  if (v11)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v11;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Failed to invalidate zero hdrGain assets: %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [v10 result];
    *(_DWORD *)buf = 138412290;
    id v18 = v14;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Invalidated %@ assets with zero hdrGain", buf, 0xCu);
  }
  [v2 reset];

  return v11 == 0;
}

- (BOOL)_repairWallpaperAlbumsInStore:(id)a3 containerUUID:(id)a4 title:(id)a5
{
  id v9 = a4;
  id v10 = a5;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __69__PLModelMigrator__repairWallpaperAlbumsInStore_containerUUID_title___block_invoke;
  v14[3] = &unk_1E5866FE8;
  id v15 = v9;
  id v16 = self;
  id v17 = v10;
  SEL v18 = a2;
  id v11 = v10;
  id v12 = v9;
  LOBYTE(a3) = -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _repairWallpaperAlbumsInStore:containerUUID:title:]", a3, v14);

  return (char)a3;
}

uint64_t __69__PLModelMigrator__repairWallpaperAlbumsInStore_containerUUID_title___block_invoke(void *a1, void *a2)
{
  v62[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v5 = +[PLManagedAlbum entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K == %@", @"uuid", a1[4]];
  v62[0] = @"assets";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v62 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v8];

  [v6 setPredicate:v7];
  id v53 = 0;
  id v9 = [v3 executeFetchRequest:v6 error:&v53];
  id v10 = v53;
  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  if ((unint64_t)[v9 count] >= 2)
  {
    id v39 = [MEMORY[0x1E4F28B00] currentHandler];
    [v39 handleFailureInMethod:a1[7], a1[5], @"PLModelMigrator.m", 14821, @"found more than one locket album with UUID %@", a1[4] object file lineNumber description];
  }
  if ([v9 count])
  {
    id v43 = v10;
    v46 = [v9 firstObject];
    id v12 = [v46 assets];
    uint64_t v13 = [v12 array];
    [v11 addObjectsFromArray:v13];

    uint64_t v40 = [v11 count];
    int v41 = 0;
    goto LABEL_7;
  }
  uint64_t v14 = +[PLGenericAlbum insertAlbumWithKind:2 title:a1[6] uuid:a1[4] inManagedObjectContext:v3];
  if (v14)
  {
    id v43 = v10;
    v46 = v14;
    uint64_t v40 = 0;
    int v41 = 1;
LABEL_7:
    id v15 = (void *)MEMORY[0x1E4F1C0D0];
    id v16 = +[PLGenericAlbum entityName];
    id v17 = [v15 fetchRequestWithEntityName:v16];

    id v42 = a1;
    uint64_t v18 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K == %@ AND %K != %@", @"title", a1[6], @"uuid", a1[4]];

    v61 = @"assets";
    id v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v61 count:1];
    [v17 setRelationshipKeyPathsForPrefetching:v19];

    id v45 = (void *)v18;
    [v17 setPredicate:v18];
    id v52 = v43;
    uint64_t v20 = [v3 executeFetchRequest:v17 error:&v52];
    id v44 = v52;

    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v9 = v20;
    uint64_t v21 = [v9 countByEnumeratingWithState:&v48 objects:v60 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v49;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v49 != v23) {
            objc_enumerationMutation(v9);
          }
          id v25 = *(void **)(*((void *)&v48 + 1) + 8 * i);
          uint64_t v26 = [v25 assets];
          id v27 = [v26 array];
          [v11 addObjectsFromArray:v27];

          [v3 deleteObject:v25];
        }
        uint64_t v22 = [v9 countByEnumeratingWithState:&v48 objects:v60 count:16];
      }
      while (v22);
    }

    __int16 v28 = v46;
    if ([v11 count]) {
      [v46 setAssets:v11];
    }
    if ([v3 hasChanges])
    {
      id v47 = 0;
      char v29 = [v3 save:&v47];
      id v30 = v47;
      __int16 v31 = v30;
      if (v29)
      {

        [v3 reset];
        __int16 v32 = PLMigrationGetLog();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = [v11 count] - v40;
          uint64_t v34 = [v9 count];
          *(_DWORD *)buf = 134218496;
          uint64_t v55 = v33;
          __int16 v56 = 2048;
          uint64_t v57 = v34;
          __int16 v58 = 1024;
          int v59 = v41;
          _os_log_impl(&dword_19B3C7000, v32, OS_LOG_TYPE_DEFAULT, "wallpaper repair migrated %ld assets from %ld albums, created=%d", buf, 0x1Cu);
        }

        uint64_t v35 = 1;
        goto LABEL_25;
      }
      id v36 = PLMigrationGetLog();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        id v37 = NSStringFromSelector((SEL)v42[7]);
        *(_DWORD *)buf = 138412546;
        uint64_t v55 = (uint64_t)v37;
        __int16 v56 = 2112;
        uint64_t v57 = (uint64_t)v31;
        _os_log_impl(&dword_19B3C7000, v36, OS_LOG_TYPE_ERROR, "%@ failed: %@", buf, 0x16u);
      }
    }
    [v3 reset];
    uint64_t v35 = 0;
LABEL_25:
    id v10 = v44;
    id v7 = v45;
    goto LABEL_26;
  }
  __int16 v28 = PLMigrationGetLog();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v28, OS_LOG_TYPE_ERROR, "failed to insert locket album", buf, 2u);
  }
  uint64_t v35 = 0;
  id v17 = v6;
LABEL_26:

  return v35;
}

- (BOOL)_removeDuplicatedCloudSharedComments:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _removeDuplicatedCloudSharedComments:]", a3, &__block_literal_global_2591);
}

uint64_t __56__PLModelMigrator__removeDuplicatedCloudSharedComments___block_invoke(uint64_t a1, void *a2)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = (void *)MEMORY[0x1E4F1C0D0];
  id v4 = +[PLCloudSharedComment entityName];
  uint64_t v5 = [v3 fetchRequestWithEntityName:v4];

  v58[0] = @"commentDate";
  int v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v58 count:1];
  [v5 setPropertiesToFetch:v6];

  uint64_t v57 = @"commentDate";
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v57 count:1];
  [v5 setPropertiesToGroupBy:v7];

  id v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"count(SELF) > 1"];
  [v5 setHavingPredicate:v8];

  [v5 setResultType:2];
  id v50 = 0;
  uint64_t v38 = v2;
  id v9 = [v2 executeFetchRequest:v5 error:&v50];
  id v10 = v50;
  id v11 = v10;
  if (v9)
  {
    id v33 = v10;
    uint64_t v35 = v5;
    id v12 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v9, "count"));
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    uint64_t v34 = v9;
    obuint64_t j = v9;
    uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v56 count:16];
    if (v39)
    {
      uint64_t v37 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v39; ++i)
        {
          if (*(void *)v47 != v37) {
            objc_enumerationMutation(obj);
          }
          uint64_t v40 = [*(id *)(*((void *)&v46 + 1) + 8 * i) objectForKey:@"commentDate"];
          uint64_t v14 = +[PLCloudSharedComment cloudSharedCommentsWithCommentDate:inManagedObjectContext:](PLCloudSharedComment, "cloudSharedCommentsWithCommentDate:inManagedObjectContext:");
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          uint64_t v15 = [v14 countByEnumeratingWithState:&v42 objects:v55 count:16];
          if (v15)
          {
            uint64_t v16 = v15;
            char v17 = 0;
            char v18 = 0;
            id v19 = 0;
            uint64_t v20 = *(void *)v43;
            do
            {
              for (uint64_t j = 0; j != v16; ++j)
              {
                if (*(void *)v43 != v20) {
                  objc_enumerationMutation(v14);
                }
                uint64_t v22 = *(void **)(*((void *)&v42 + 1) + 8 * j);
                if (v17)
                {
                  if ([*(id *)(*((void *)&v42 + 1) + 8 * j) matchesCommentText:v19 isLike:v18 & 1])
                  {
                    uint64_t v23 = [v22 objectID];
                    [v12 addObject:v23];
                  }
                }
                else
                {
                  uint64_t v24 = [*(id *)(*((void *)&v42 + 1) + 8 * j) commentText];

                  char v18 = [v22 isLikeBoolValue];
                  id v19 = (void *)v24;
                }
                char v17 = 1;
              }
              uint64_t v16 = [v14 countByEnumeratingWithState:&v42 objects:v55 count:16];
            }
            while (v16);
          }
          else
          {
            id v19 = 0;
          }
        }
        uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v56 count:16];
      }
      while (v39);
    }

    if ([v12 count])
    {
      id v25 = [objc_alloc(MEMORY[0x1E4F1C018]) initWithObjectIDs:v12];
      [v25 setResultType:2];
      id v41 = 0;
      uint64_t v26 = [v38 executeRequest:v25 error:&v41];
      id v27 = v41;
      __int16 v28 = PLMigrationGetLog();
      char v29 = v28;
      id v11 = v33;
      if (v27)
      {
        uint64_t v5 = v35;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v30 = [v12 count];
          *(_DWORD *)buf = 134218242;
          uint64_t v52 = v30;
          __int16 v53 = 2112;
          id v54 = v33;
          _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_ERROR, "Failed to delete %lu duplicated cloud shared comments: %@", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v5 = v35;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v31 = [v26 result];
          *(_DWORD *)buf = 138412290;
          uint64_t v52 = (uint64_t)v31;
          _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_DEFAULT, "Deleted %@ duplicated cloud shared comments", buf, 0xCu);
        }
      }
    }
    else
    {
      id v25 = PLMigrationGetLog();
      id v11 = v33;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B3C7000, v25, OS_LOG_TYPE_DEFAULT, "No duplicated cloud shared comments found.", buf, 2u);
      }
      uint64_t v5 = v35;
    }
    id v9 = v34;
  }
  else
  {
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v52 = (uint64_t)v11;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "_removeDuplicatedCloudSharedComments: Error executing fetch request, error:%@", buf, 0xCu);
    }
  }

  return 1;
}

- (BOOL)_refactorLargeVideoRecipeResourcesInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __61__PLModelMigrator__refactorLargeVideoRecipeResourcesInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _refactorLargeVideoRecipeResourcesInStore:]", a3, v4);
}

BOOL __61__PLModelMigrator__refactorLargeVideoRecipeResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000;
  uint64_t v29 = 0;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v5 = +[PLManagedAsset entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  v37[0] = @"modernResources";
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v7];

  id v8 = (void *)MEMORY[0x1E4F28BA0];
  id v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"kind", 1);
  v36[0] = v9;
  id v10 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForAssetsEligibleForCloudKitTransport"), 1);
  v36[1] = v10;
  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SUBQUERY(%K, $r, $r.%K = %d).@count > 0", @"modernResources", @"recipeID", 131473];
  v36[2] = v11;
  id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:3];
  uint64_t v13 = [v8 andPredicateWithSubpredicates:v12];
  [v6 setPredicate:v13];

  id v25 = 0;
  uint64_t v14 = [v3 executeFetchRequest:v6 error:&v25];
  uint64_t v15 = v25;
  if (v14)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __61__PLModelMigrator__refactorLargeVideoRecipeResourcesInStore___block_invoke_2;
    v24[3] = &unk_1E5866718;
    void v24[4] = &v26;
    uint64_t v16 = [v3 enumerateWithIncrementalSaveUsingObjects:v14 withBlock:v24];
    BOOL v17 = v16 == 0;
    if (v16)
    {
      char v18 = PLMigrationGetLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector(*(SEL *)(a1 + 32));
        id v19 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = [v16 userInfo];
        *(_DWORD *)buf = 138543874;
        id v31 = v19;
        __int16 v32 = 2112;
        id v33 = v16;
        __int16 v34 = 2112;
        uint64_t v35 = v20;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
      }
    }
    else
    {
      char v18 = PLMigrationGetLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = (void *)v27[3];
        *(_DWORD *)buf = 134217984;
        id v31 = v22;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "updated %lu resources.", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      id v31 = v21;
      __int16 v32 = 2112;
      id v33 = v15;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%@: failed to fetch with error: %@", buf, 0x16u);
    }
    BOOL v17 = 0;
  }

  _Block_object_dispose(&v26, 8);
  return v17;
}

void __61__PLModelMigrator__refactorLargeVideoRecipeResourcesInStore___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [v3 persistedResourcesMatching:&__block_literal_global_2589];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v9 = objc_msgSend(v3, "persistedResourcesWithRecipeID:andVersion:", 131077, objc_msgSend(v8, "version"));
        id v10 = [v9 anyObject];

        if (v10) {
          [v10 deleteResource];
        }
        [v8 setRecipeID:131077];
        if ((int)[v8 localAvailability] >= 1)
        {
          id v11 = objc_msgSend(v3, "pathForCPLResourceType:adjusted:", objc_msgSend(v8, "cplType"), objc_msgSend(v8, "isAdjustedResource"));
          id v12 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v11 isDirectory:0];
          uint64_t v13 = [v12 path];
          [v8 markAsLocallyAvailableWithFilePath:v13];
        }
        ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
}

BOOL __61__PLModelMigrator__refactorLargeVideoRecipeResourcesInStore___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 recipeID] == 131473;
}

- (BOOL)_repairCTMOriginalVideosWithoutAdjustmentsInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __69__PLModelMigrator__repairCTMOriginalVideosWithoutAdjustmentsInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _repairCTMOriginalVideosWithoutAdjustmentsInStore:]", a3, v4);
}

BOOL __69__PLModelMigrator__repairCTMOriginalVideosWithoutAdjustmentsInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v5 = +[PLManagedAsset entityName];
  uint64_t v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(%K = %d) and (%K = %d) and SUBQUERY(modernResources, $r, $r.resourceType = %d and $r.version = %d).@count == 0", @"kind", 1, @"deferredProcessingNeeded", 2, 10, 0];
  [v6 setPredicate:v7];

  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  int v23 = 0;
  id v19 = 0;
  id v8 = [v3 executeFetchRequest:v6 error:&v19];
  id v9 = v19;
  if (v8)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __69__PLModelMigrator__repairCTMOriginalVideosWithoutAdjustmentsInStore___block_invoke_2;
    v18[3] = &unk_1E5866718;
    void v18[4] = &v20;
    id v10 = [v3 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:v18];
    BOOL v11 = v10 == 0;
    if (v10)
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector(*(SEL *)(a1 + 32));
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v14 = [v10 userInfo];
        *(_DWORD *)buf = 138543874;
        id v25 = v13;
        __int16 v26 = 2112;
        id v27 = v10;
        __int16 v28 = 2112;
        uint64_t v29 = v14;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
      }
    }
    else
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *((_DWORD *)v21 + 6);
        *(_DWORD *)buf = 67109120;
        LODWORD(v25) = v16;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Repaired %d assets without adjustments but deferredProcessingNeeded set.", buf, 8u);
      }
    }
  }
  else
  {
    id v10 = PLMigrationGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v15 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      id v25 = v15;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%@: failed to fetch assets for fetch request with error: %@", buf, 0x16u);
    }
    BOOL v11 = 0;
  }

  _Block_object_dispose(&v20, 8);
  return v11;
}

void __69__PLModelMigrator__repairCTMOriginalVideosWithoutAdjustmentsInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 hasAdjustments] & 1) == 0)
  {
    [v3 setDeferredProcessingNeeded:0];
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

- (BOOL)_addLocalVideoKeyFrameResourceInStore:(id)a3 deferHintChanges:(BOOL)a4
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __74__PLModelMigrator__addLocalVideoKeyFrameResourceInStore_deferHintChanges___block_invoke;
  v5[3] = &__block_descriptor_41_e32_B16__0__NSManagedObjectContext_8l;
  BOOL v6 = a4;
  void v5[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _addLocalVideoKeyFrameResourceInStore:deferHintChanges:]", a3, v5);
}

uint64_t __74__PLModelMigrator__addLocalVideoKeyFrameResourceInStore_deferHintChanges___block_invoke(uint64_t a1, void *a2)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v5 = +[PLManagedAsset entityName];
  BOOL v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = (void *)MEMORY[0x1E4F28BA0];
  id v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kind", 1);
  v31[0] = v8;
  id v9 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForAddingLocalVideoKeyFrameResourceExclusions"), 1);
  v31[1] = v9;
  id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:2];
  BOOL v11 = [v7 andPredicateWithSubpredicates:v10];
  [v6 setPredicate:v11];

  id v22 = 0;
  id v12 = [v3 executeFetchRequest:v6 error:&v22];
  id v13 = v22;
  if (!v12) {
    goto LABEL_3;
  }
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __74__PLModelMigrator__addLocalVideoKeyFrameResourceInStore_deferHintChanges___block_invoke_2;
  v20[3] = &unk_1E5866FA0;
  v20[4] = &v23;
  char v21 = *(unsigned char *)(a1 + 40);
  uint64_t v14 = [v3 enumerateWithIncrementalSaveUsingObjects:v12 shouldRefreshAfterSave:1 withBlock:v20];

  id v13 = (id)v14;
  if (!v14)
  {
    long long v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *((_DWORD *)v24 + 6);
      *(_DWORD *)buf = 67109120;
      LODWORD(v28) = v18;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Added %d local video key frame resources", buf, 8u);
    }
    id v13 = 0;
    uint64_t v17 = 1;
  }
  else
  {
LABEL_3:
    long long v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      __int16 v28 = v16;
      __int16 v29 = 2112;
      id v30 = v13;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "%@: failed with error: %@", buf, 0x16u);
    }
    uint64_t v17 = 0;
  }

  _Block_object_dispose(&v23, 8);
  return v17;
}

void __74__PLModelMigrator__addLocalVideoKeyFrameResourceInStore_deferHintChanges___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 videoKeyFrameTime];
    BOOL v5 = (v11 & 0x1D) == 1;
  }
  else
  {
    BOOL v5 = 0;
  }
  uint64_t v6 = [v4 localVideoKeyFrameResource];
  id v7 = (void *)v6;
  if (v5 && v6 == 0)
  {
    id v10 = +[PLResourceInstaller onDemand_installLocalVideoKeyFrameForAsset:v4];
    if (v10) {
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
  else
  {
    if (v6) {
      char v9 = v5;
    }
    else {
      char v9 = 1;
    }
    if ((v9 & 1) == 0)
    {
      [v4 pruneLocalVideoKeyFrameImage];
      [v7 deleteResource];
    }
  }
  if (([v4 hasAdjustments] & 1) == 0 && (((v7 == 0) ^ v5) & 1) == 0 && !*(unsigned char *)(a1 + 40)) {
    [v4 recalculateImageRequestHints];
  }
}

- (BOOL)_addRAWPackedBadgeAttributeForAllRAWAssetsInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __69__PLModelMigrator__addRAWPackedBadgeAttributeForAllRAWAssetsInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _addRAWPackedBadgeAttributeForAllRAWAssetsInStore:]", a3, v4);
}

uint64_t __69__PLModelMigrator__addRAWPackedBadgeAttributeForAllRAWAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C0D0];
  BOOL v5 = +[PLInternalResource entityName];
  uint64_t v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d AND %K == %d AND %K == %d", @"utiConformanceHint", 2, @"dataStoreSubtype", 1, @"dataStoreClassID", 0);
  [v6 setPredicate:v7];

  v27[0] = @"asset";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v8];

  id v22 = 0;
  char v9 = [v3 executeFetchRequest:v6 error:&v22];
  id v10 = v22;
  uint64_t v18 = 0;
  id v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  if (!v9) {
    goto LABEL_3;
  }
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __69__PLModelMigrator__addRAWPackedBadgeAttributeForAllRAWAssetsInStore___block_invoke_2;
  void v17[3] = &unk_1E58716C8;
  v17[4] = &v18;
  uint64_t v11 = [v3 enumerateWithIncrementalSaveUsingObjects:v9 withBlock:v17];

  id v10 = (id)v11;
  if (!v11)
  {
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      long long v15 = (void *)v19[3];
      *(_DWORD *)buf = 134217984;
      uint64_t v24 = v15;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Added RAW packed badge attributes to %lu assets", buf, 0xCu);
    }
    id v10 = 0;
    uint64_t v14 = 1;
  }
  else
  {
LABEL_3:
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      uint64_t v24 = v13;
      __int16 v25 = 2112;
      id v26 = v10;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%@: failed with error: %@", buf, 0x16u);
    }
    uint64_t v14 = 0;
  }

  _Block_object_dispose(&v18, 8);
  return v14;
}

void __69__PLModelMigrator__addRAWPackedBadgeAttributeForAllRAWAssetsInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 asset];
  [v3 setRAWBadgeAttribute:3];

  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

- (BOOL)_persistResourceTypeAttributeOnAlternateImageResourcesInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __81__PLModelMigrator__persistResourceTypeAttributeOnAlternateImageResourcesInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _persistResourceTypeAttributeOnAlternateImageResourcesInStore:]", a3, v4);
}

BOOL __81__PLModelMigrator__persistResourceTypeAttributeOnAlternateImageResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v13 = 0;
  id v3 = (void *)MEMORY[0x1E4F1C0D0];
  id v4 = a2;
  BOOL v5 = +[PLInternalResource entityName];
  uint64_t v6 = [v3 fetchRequestWithEntityName:v5];

  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d AND %K == %d AND %K == %d AND %K >= %d", @"dataStoreClassID", 0, @"resourceType", 4, @"version", 0, @"localAvailability", 1);
  [v6 setPredicate:v7];

  id v8 = [v4 enumerateObjectsFromFetchRequest:v6 count:&v13 usingDefaultBatchSizeWithBlock:&__block_literal_global_2568];

  char v9 = PLMigrationGetLog();
  id v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      long long v15 = v11;
      __int16 v16 = 2112;
      uint64_t v17 = v8;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%@: failed with error: %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    long long v15 = v13;
    _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Persisted resourceType to %lu alternate image resources", buf, 0xCu);
  }

  return v8 == 0;
}

void __81__PLModelMigrator__persistResourceTypeAttributeOnAlternateImageResourcesInStore___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = [v2 fileURL];
  if (v3)
  {
    id v4 = v2;
    if ([v4 resourceType] == 4 && !objc_msgSend(v4, "version"))
    {
      char v8 = [v4 recipeID];

      if ((v8 & 1) == 0)
      {
        BOOL v5 = objc_alloc_init(PLValidatedExternalResource);
        [(PLValidatedExternalResource *)v5 setResourceType:4];
        [(PLValidatedExternalResource *)v5 setFileURL:v3];
        [(PLValidatedExternalResource *)v5 persistResourceTypeToFileURL];
        goto LABEL_7;
      }
    }
    else
    {
    }
  }
  PLMigrationGetLog();
  BOOL v5 = (PLValidatedExternalResource *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(&v5->super, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = [v2 asset];
    id v7 = [v6 uuid];
    int v9 = 138543362;
    id v10 = v7;
    _os_log_impl(&dword_19B3C7000, &v5->super, OS_LOG_TYPE_ERROR, "Resource UR unexpectedly nil or resource type/version/recipeID don't metch for alternate-imaage resource for asset: %{public}@", (uint8_t *)&v9, 0xCu);
  }
LABEL_7:
}

- (BOOL)_repairCTMOriginalVideosWithSOCAvailableBitInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __70__PLModelMigrator__repairCTMOriginalVideosWithSOCAvailableBitInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _repairCTMOriginalVideosWithSOCAvailableBitInStore:]", a3, v4);
}

BOOL __70__PLModelMigrator__repairCTMOriginalVideosWithSOCAvailableBitInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  BOOL v5 = +[PLManagedAsset entityName];
  uint64_t v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(%K = %d) and SUBQUERY(modernResources, $r, $r.resourceType = %d and $r.version = %d).@count == 0", @"kind", 1, 10, 0];
  [v6 setPredicate:v7];

  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  int v23 = 0;
  id v19 = 0;
  char v8 = [v3 executeFetchRequest:v6 error:&v19];
  int v9 = v19;
  if (v8)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __70__PLModelMigrator__repairCTMOriginalVideosWithSOCAvailableBitInStore___block_invoke_2;
    v18[3] = &unk_1E5866718;
    void v18[4] = &v20;
    id v10 = [v3 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:v18];
    BOOL v11 = v10 == 0;
    if (v10)
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector(*(SEL *)(a1 + 32));
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v14 = [v10 userInfo];
        *(_DWORD *)buf = 138543874;
        id v25 = v13;
        __int16 v26 = 2112;
        id v27 = v10;
        __int16 v28 = 2112;
        __int16 v29 = v14;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
      }
    }
    else
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *((_DWORD *)v21 + 6);
        *(_DWORD *)buf = 67109120;
        LODWORD(v25) = v16;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Repaired %d assets without soc available bit.", buf, 8u);
      }
    }
  }
  else
  {
    id v10 = PLMigrationGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v15 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      id v25 = v15;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%@: failed to fetch assets for fetch request with error: %@", buf, 0x16u);
    }
    BOOL v11 = 0;
  }

  _Block_object_dispose(&v20, 8);
  return v11;
}

void __70__PLModelMigrator__repairCTMOriginalVideosWithSOCAvailableBitInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v5 = a2;
  char v3 = [v5 cameraProcessingAdjustmentState];
  id v4 = v5;
  if (v3)
  {
    objc_msgSend(v5, "setCameraProcessingAdjustmentState:", objc_msgSend(v5, "cameraProcessingAdjustmentState") & 0xFFFE);
    if ([v5 hasAdjustments]) {
      [v5 setDeferredProcessingNeeded:2];
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    id v4 = v5;
  }
}

- (BOOL)_removeResourceModelManualIdentityConstraintInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __71__PLModelMigrator__removeResourceModelManualIdentityConstraintInStore___block_invoke;
  v4[3] = &unk_1E5866D78;
  v4[4] = self;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _removeResourceModelManualIdentityConstraintInStore:]", a3, v4);
}

uint64_t __71__PLModelMigrator__removeResourceModelManualIdentityConstraintInStore___block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v1 = [*(id *)(a1 + 32) pathManager];
  id v2 = [v1 photosDatabasePath];
  char v3 = PLOpenSQLTransactionWithDBPath((const char *)[v2 fileSystemRepresentation]);

  if (!v3)
  {
    id v4 = PLMigrationGetLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_ERROR, "Unable to open db in order to remove manual index.", buf, 2u);
    }
    goto LABEL_17;
  }
  [NSString stringWithFormat:@"DROP INDEX IF EXISTS RADAR_45737537_UNIQUE_INDEX"];
  errmsg = 0;
  id v4 = objc_claimAutoreleasedReturnValue();
  int v5 = sqlite3_exec(v3, (const char *)[v4 UTF8String], 0, 0, &errmsg);
  if (v5)
  {
    int v6 = v5;
    id v7 = PLMigrationGetLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      int v13 = v6;
      __int16 v14 = 2080;
      long long v15 = errmsg;
      _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_ERROR, "Error while removing manual index: %d %s", buf, 0x12u);
    }

    if (errmsg) {
      sqlite3_free(errmsg);
    }
    PLRollbackSQLTransactionAndCloseDB(v3);
LABEL_17:
    uint64_t v8 = 0;
    goto LABEL_18;
  }
  if (!PLCommitSQLTransactionAndCloseDB(v3))
  {
    int v9 = PLMigrationGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_ERROR, "Unable to commit transaction for index removal.", buf, 2u);
    }

    goto LABEL_17;
  }

  id v4 = PLMigrationGetLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_DEFAULT, "Removed manual index for resource model identity constraint.", buf, 2u);
  }
  uint64_t v8 = 1;
LABEL_18:

  return v8;
}

- (BOOL)_removeAllLocalVideoKeyFrameResourcesRevert14037InStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __75__PLModelMigrator__removeAllLocalVideoKeyFrameResourcesRevert14037InStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _removeAllLocalVideoKeyFrameResourcesRevert14037InStore:]", a3, v4);
}

uint64_t __75__PLModelMigrator__removeAllLocalVideoKeyFrameResourcesRevert14037InStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  int v5 = +[PLInternalResource entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == 65749", @"recipeID");
  [v6 setPredicate:v7];

  id v23 = 0;
  uint64_t v8 = [v3 executeFetchRequest:v6 error:&v23];
  id v9 = v23;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  if (!v8) {
    goto LABEL_3;
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __75__PLModelMigrator__removeAllLocalVideoKeyFrameResourcesRevert14037InStore___block_invoke_2;
  v16[3] = &unk_1E5866F58;
  id v17 = v3;
  uint64_t v18 = &v19;
  uint64_t v10 = [v17 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:v16];

  id v9 = (id)v10;
  if (!v10)
  {
    BOOL v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v14 = (void *)v20[3];
      *(_DWORD *)buf = 134217984;
      id v25 = v14;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Reverting 14037, removed %lu resources", buf, 0xCu);
    }
    id v9 = 0;
    uint64_t v13 = 1;
  }
  else
  {
LABEL_3:
    BOOL v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      id v25 = v12;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "%@: failed with error: %@", buf, 0x16u);
    }
    uint64_t v13 = 0;
  }

  _Block_object_dispose(&v19, 8);
  return v13;
}

uint64_t __75__PLModelMigrator__removeAllLocalVideoKeyFrameResourcesRevert14037InStore___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result = [*(id *)(a1 + 32) deleteObject:a2];
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

- (BOOL)_copyAssetDescriptionToAccessibilityDescription:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __67__PLModelMigrator__copyAssetDescriptionToAccessibilityDescription___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _copyAssetDescriptionToAccessibilityDescription:]", a3, v4);
}

uint64_t __67__PLModelMigrator__copyAssetDescriptionToAccessibilityDescription___block_invoke(uint64_t a1, void *a2)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  int v5 = +[PLManagedAsset entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != NULL", @"additionalAttributes.assetDescription.longDescription");
  [v6 setPredicate:v7];

  v21[0] = @"additionalAttributes";
  v21[1] = @"additionalAttributes.assetDescription";
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:2];
  [v6 setRelationshipKeyPathsForPrefetching:v8];

  id v9 = (id)[v3 enumerateObjectsFromFetchRequest:v6 count:0 usingDefaultBatchSizeWithBlock:&__block_literal_global_2544];
  if ([v3 hasChanges])
  {
    id v16 = 0;
    uint64_t v10 = [v3 save:&v16];
    id v11 = v16;
    id v12 = PLMigrationGetLog();
    uint64_t v13 = v12;
    if (v10)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v18) = 0;
        _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Copied %d asset descriptions fields to accessibility description fields.", buf, 8u);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      __int16 v14 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v14;
      __int16 v19 = 2112;
      id v20 = v11;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "%@: failed to save with error: %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

void __67__PLModelMigrator__copyAssetDescriptionToAccessibilityDescription___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v2 = [v3 longDescription];
  if ([v2 length])
  {
    [v3 setAccessibilityDescription:v2];
    [v3 persistMetadataToFilesystem];
  }
}

- (BOOL)_clearAvalancheUUIDOnCloudSharedAssetsWithStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _clearAvalancheUUIDOnCloudSharedAssetsWithStore:]", a3, &__block_literal_global_2535);
}

BOOL __67__PLModelMigrator__clearAvalancheUUIDOnCloudSharedAssetsWithStore___block_invoke(uint64_t a1, void *a2)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1C038];
  id v3 = a2;
  id v4 = +[PLManagedAsset entityName];
  int v5 = [v2 batchUpdateRequestWithEntityName:v4];

  int v6 = (void *)MEMORY[0x1E4F28BA0];
  id v7 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v24[0] = v7;
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != nil", @"avalancheUUID");
  v24[1] = v8;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:2];
  uint64_t v10 = [v6 andPredicateWithSubpredicates:v9];

  [v5 setPredicate:v10];
  uint64_t v22 = @"avalancheUUID";
  id v11 = [MEMORY[0x1E4F1CA98] null];
  id v23 = v11;
  id v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
  [v5 setPropertiesToUpdate:v12];

  [v5 setResultType:2];
  id v19 = 0;
  uint64_t v13 = [v3 executeRequest:v5 error:&v19];

  id v14 = v19;
  long long v15 = PLMigrationGetLog();
  id v16 = v15;
  if (v13)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = [v13 result];
      *(_DWORD *)buf = 138412290;
      id v21 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Batch update to clear avalancheUUID successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v21 = v14;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "Batch update to clear avalancheUUID failed, error: %@", buf, 0xCu);
  }

  return v13 != 0;
}

- (BOOL)_repairReframedAssetsWithoutSOCAvailableBitWithStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __72__PLModelMigrator__repairReframedAssetsWithoutSOCAvailableBitWithStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _repairReframedAssetsWithoutSOCAvailableBitWithStore:]", a3, v4);
}

BOOL __72__PLModelMigrator__repairReframedAssetsWithoutSOCAvailableBitWithStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  int v5 = +[PLManagedAsset entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(%K = %d) and SUBQUERY(modernResources, $r, $r.resourceType = %d and $r.version = %d).@count > 0", @"kind", 1, 10, 0];
  [v6 setPredicate:v7];

  uint64_t v20 = 0;
  id v21 = &v20;
  uint64_t v22 = 0x2020000000;
  int v23 = 0;
  id v19 = 0;
  uint64_t v8 = [v3 executeFetchRequest:v6 error:&v19];
  id v9 = v19;
  if (v8)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __72__PLModelMigrator__repairReframedAssetsWithoutSOCAvailableBitWithStore___block_invoke_2;
    v18[3] = &unk_1E5866718;
    void v18[4] = &v20;
    uint64_t v10 = [v3 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:v18];
    BOOL v11 = v10 == 0;
    if (v10)
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector(*(SEL *)(a1 + 32));
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        id v14 = [v10 userInfo];
        *(_DWORD *)buf = 138543874;
        id v25 = v13;
        __int16 v26 = 2112;
        id v27 = v10;
        __int16 v28 = 2112;
        __int16 v29 = v14;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
      }
    }
    else
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *((_DWORD *)v21 + 6);
        *(_DWORD *)buf = 67109120;
        LODWORD(v25) = v16;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Repaired %d assets without soc available bit.", buf, 8u);
      }
    }
  }
  else
  {
    uint64_t v10 = PLMigrationGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v15 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      id v25 = v15;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%@: failed to fetch assets for fetch request with error: %@", buf, 0x16u);
    }
    BOOL v11 = 0;
  }

  _Block_object_dispose(&v20, 8);
  return v11;
}

void __72__PLModelMigrator__repairReframedAssetsWithoutSOCAvailableBitWithStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v8 = a2;
  char v3 = [v8 cameraProcessingAdjustmentState];
  id v4 = v8;
  if ((v3 & 1) == 0)
  {
    objc_msgSend(v8, "setCameraProcessingAdjustmentState:", objc_msgSend(v8, "cameraProcessingAdjustmentState") | 1);
    if ([v8 cloudLocalState] == 2) {
      [v8 setCloudLocalState:0];
    }
    int v5 = [v8 master];
    int v6 = [v5 cloudLocalState];

    if (v6 == 2)
    {
      id v7 = [v8 master];
      [v7 setCloudLocalState:0];
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    id v4 = v8;
  }
}

- (BOOL)_migrateMetadataAndMigrationHistoryWithStore:(id)a3
{
  id v4 = a3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __64__PLModelMigrator__migrateMetadataAndMigrationHistoryWithStore___block_invoke;
  v7[3] = &unk_1E5866D50;
  id v8 = v4;
  id v9 = self;
  id v5 = v4;
  LOBYTE(self) = -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _migrateMetadataAndMigrationHistoryWithStore:]", v5, v7);

  return (char)self;
}

uint64_t __64__PLModelMigrator__migrateMetadataAndMigrationHistoryWithStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v67 = 0;
  v68 = 0;
  BOOL v4 = +[PLMigrationHistory currentMigrationHistoryIndex:&v68 withManagedObjectContext:v3 error:&v67];
  id v5 = v67;
  if (v4)
  {
    if (((unint64_t)v68 & 0x8000000000000000) == 0)
    {
      int v6 = PLMigrationGetLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v72 = v68;
        _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEFAULT, "Migration history already migrated from metadata, curent index: %lld", buf, 0xCu);
      }
      uint64_t v7 = 1;
      goto LABEL_52;
    }
    id v8 = [*(id *)(a1 + 32) metadata];
    int v6 = [v8 mutableCopy];

    if (!v6)
    {
      id v27 = PLMigrationGetLog();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v72 = "-[PLModelMigrator _migrateMetadataAndMigrationHistoryWithStore:]_block_invoke";
        _os_log_impl(&dword_19B3C7000, v27, OS_LOG_TYPE_ERROR, "%{public}s no metadata found in store", buf, 0xCu);
      }
      uint64_t v7 = 0;
      goto LABEL_51;
    }
    uint64_t v51 = a1;
    id v52 = v5;
    id v9 = v3;
    v68 = 0;
    uint64_t v10 = [v6 allKeys];
    BOOL v11 = [v10 sortedArrayUsingSelector:sel_compare_];

    id v54 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v12 = v11;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v63 objects:v70 count:16];
    __int16 v53 = v12;
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v64;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v64 != v15) {
            objc_enumerationMutation(v12);
          }
          id v17 = *(void **)(*((void *)&v63 + 1) + 8 * i);
          if ([v17 hasPrefix:@"MetadataArchive_"])
          {
            uint64_t v18 = [v6 objectForKeyedSubscript:v17];
            id v19 = (void *)[v18 mutableCopy];

            ++v68;
            uint64_t v20 = +[PLMigrationHistory migrateLegacyMigrationHistoryWithMetadata:index:outGlobalKeyValues:managedObjectContext:](PLMigrationHistory, "migrateLegacyMigrationHistoryWithMetadata:index:outGlobalKeyValues:managedObjectContext:", v19);
            [v54 addObject:v20];
            [v6 removeObjectForKey:v17];

            id v12 = v53;
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v63 objects:v70 count:16];
      }
      while (v14);
    }

    id v21 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v3 = v9;
    uint64_t v22 = +[PLMigrationHistory migrateLegacyMigrationHistoryWithMetadata:v6 index:v68 outGlobalKeyValues:v21 managedObjectContext:v9];
    [v54 addObject:v22];
    uint64_t v23 = [*(id *)(v51 + 40) pathManager];
    +[PLGlobalKeyValue migrateLocaleIdentifierToGlobalKeyValues:v21 withPathManager:v23];

    uint64_t v24 = v21;
    +[PLGlobalKeyValue populateWithDictionary:v21 managedObjectContext:v9 replaceExisting:0];
    id v25 = [*(id *)(v51 + 32) metadata];
    LOBYTE(v23) = [v25 isEqualToDictionary:v6];

    if (v23)
    {
      id v5 = v52;
      if (![v9 hasChanges])
      {
        __int16 v26 = PLMigrationGetLog();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_DEFAULT, "No migration history or global key values found to migrate.", buf, 2u);
        }
        goto LABEL_46;
      }
    }
    else
    {
      [*(id *)(v51 + 32) setMetadata:v6];
      [v9 hasChanges];
      id v5 = v52;
    }
    id v62 = v5;
    char v28 = [v9 save:&v62];
    id v29 = v62;

    if ((v28 & 1) == 0)
    {
      __int16 v26 = PLMigrationGetLog();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v72 = "-[PLModelMigrator _migrateMetadataAndMigrationHistoryWithStore:]_block_invoke";
        __int16 v73 = 2114;
        id v74 = v29;
        _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_ERROR, "%{public}s failed to save migrated migration history: %{public}@", buf, 0x16u);
      }
      uint64_t v7 = 0;
      id v5 = v29;
      goto LABEL_50;
    }
    long long v48 = v29;
    long long v49 = v22;
    id v50 = v21;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id v30 = v54;
    uint64_t v31 = [v30 countByEnumeratingWithState:&v58 objects:v69 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v59;
      do
      {
        for (uint64_t j = 0; j != v32; ++j)
        {
          if (*(void *)v59 != v33) {
            objc_enumerationMutation(v30);
          }
          uint64_t v35 = *(const char **)(*((void *)&v58 + 1) + 8 * j);
          id v36 = PLMigrationGetLog();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v72 = v35;
            _os_log_impl(&dword_19B3C7000, v36, OS_LOG_TYPE_DEFAULT, "Migrated migration history to: %{public}@ ", buf, 0xCu);
          }
        }
        uint64_t v32 = [v30 countByEnumeratingWithState:&v58 objects:v69 count:16];
      }
      while (v32);
    }

    uint64_t v37 = PLMigrationGetLog();
    uint64_t v24 = v50;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v72 = (const char *)v50;
      _os_log_impl(&dword_19B3C7000, v37, OS_LOG_TYPE_DEFAULT, "Migrated global key values to: %{public}@ ", buf, 0xCu);
    }

    uint64_t v38 = PLMigrationGetLog();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v72 = (const char *)v6;
      _os_log_impl(&dword_19B3C7000, v38, OS_LOG_TYPE_DEFAULT, "Migrated library metadata to: %{public}@ ", buf, 0xCu);
    }

    uint64_t v39 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v40 = [*(id *)(v51 + 40) pathManager];
    id v41 = [v40 photoDirectoryWithType:8];
    __int16 v26 = [v39 fileURLWithPath:v41];

    long long v42 = [[PLJournal alloc] initWithBaseURL:v26 payloadClass:objc_opt_class()];
    long long v43 = [v30 objectEnumerator];
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 3221225472;
    v56[2] = __64__PLModelMigrator__migrateMetadataAndMigrationHistoryWithStore___block_invoke_2528;
    v56[3] = &unk_1E5866F30;
    id v44 = v43;
    id v57 = v44;
    id v55 = v48;
    LOBYTE(v39) = [(PLJournal *)v42 createSnapshotUsingNextPayloadBlock:v56 createOnlyIfNecessary:0 error:&v55];
    id v5 = v55;

    id v3 = v9;
    uint64_t v22 = v49;
    if ((v39 & 1) == 0)
    {
      id v45 = v5;
      long long v46 = PLMigrationGetLog();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v72 = "-[PLModelMigrator _migrateMetadataAndMigrationHistoryWithStore:]_block_invoke_2";
        __int16 v73 = 2114;
        id v74 = v45;
        _os_log_impl(&dword_19B3C7000, v46, OS_LOG_TYPE_ERROR, "%{public}s failed to persist migration history to journal: %{public}@", buf, 0x16u);
      }

      id v5 = v45;
      uint64_t v24 = v50;
    }

LABEL_46:
    uint64_t v7 = 1;
LABEL_50:

    id v27 = v53;
LABEL_51:

    goto LABEL_52;
  }
  int v6 = PLMigrationGetLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v72 = "-[PLModelMigrator _migrateMetadataAndMigrationHistoryWithStore:]_block_invoke";
    __int16 v73 = 2114;
    id v74 = v5;
    _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_ERROR, "%{public}s unable to query current history index, %{public}@", buf, 0x16u);
  }
  uint64_t v7 = 0;
LABEL_52:

  return v7;
}

id __64__PLModelMigrator__migrateMetadataAndMigrationHistoryWithStore___block_invoke_2528(uint64_t a1)
{
  v1 = [*(id *)(a1 + 32) nextObject];
  id v2 = v1;
  if (v1)
  {
    id v3 = [v1 payloadForChangedKeys:0];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

- (BOOL)_moveGpsHorizontalAccuracyToNewAttribute:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __60__PLModelMigrator__moveGpsHorizontalAccuracyToNewAttribute___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _moveGpsHorizontalAccuracyToNewAttribute:]", a3, v4);
}

uint64_t __60__PLModelMigrator__moveGpsHorizontalAccuracyToNewAttribute___block_invoke(uint64_t a1, void *a2)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  BOOL v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLManagedAsset entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  uint64_t v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != nil", @"locationData");
  [v6 setPredicate:v7];

  v26[0] = @"additionalAttributes";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v8];

  uint64_t v18 = 0;
  id v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __60__PLModelMigrator__moveGpsHorizontalAccuracyToNewAttribute___block_invoke_2;
  void v17[3] = &unk_1E5866718;
  v17[4] = &v18;
  id v9 = (id)[v3 enumerateObjectsFromFetchRequest:v6 count:0 usingDefaultBatchSizeWithBlock:v17];
  if ([v3 hasChanges])
  {
    id v16 = 0;
    uint64_t v10 = [v3 save:&v16];
    id v11 = v16;
    if (v10)
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = (void *)v19[3];
        *(_DWORD *)buf = 134217984;
        uint64_t v23 = v13;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Moved %ld assets' GPS horizontal accuracy.", buf, 0xCu);
      }
    }
    else
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = NSStringFromSelector(*(SEL *)(a1 + 32));
        *(_DWORD *)buf = 138412546;
        uint64_t v23 = v14;
        __int16 v24 = 2112;
        id v25 = v11;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%@: failed to save: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  _Block_object_dispose(&v18, 8);

  return v10;
}

void __60__PLModelMigrator__moveGpsHorizontalAccuracyToNewAttribute___block_invoke_2(uint64_t a1, void *a2)
{
  id v12 = a2;
  id v3 = [v12 locationData];
  BOOL v4 = [v12 dateCreated];
  id v5 = +[PLManagedAsset newLocationFromLocationData:v3 timestampIfMissing:v4];

  [v5 coordinate];
  if (CLLocationCoordinate2DIsValid(v14) && ([v5 horizontalAccuracy], v6 != 0.0))
  {
    [v5 horizontalAccuracy];
    double v11 = v10;
    uint64_t v7 = [v12 additionalAttributes];
    id v8 = v7;
    double v9 = v11;
  }
  else
  {
    uint64_t v7 = [v12 additionalAttributes];
    id v8 = v7;
    double v9 = -1.0;
  }
  [v7 setGpsHorizontalAccuracy:v9];

  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

- (BOOL)_migrateCandidateBitsToDeferredProcessingCandidateOptions:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __77__PLModelMigrator__migrateCandidateBitsToDeferredProcessingCandidateOptions___block_invoke;
  v4[3] = &__block_descriptor_46_e32_B16__0__NSManagedObjectContext_8l;
  int v5 = 2097154;
  __int16 v6 = 16;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _migrateCandidateBitsToDeferredProcessingCandidateOptions:]", a3, v4);
}

uint64_t __77__PLModelMigrator__migrateCandidateBitsToDeferredProcessingCandidateOptions___block_invoke(uint64_t a1, void *a2)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  BOOL v4 = (void *)MEMORY[0x1E4F1C0D0];
  int v5 = +[PLManagedAsset entityName];
  __int16 v6 = [v4 fetchRequestWithEntityName:v5];

  v37[0] = @"additionalAttributes";
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v7];

  id v8 = [MEMORY[0x1E4F1CA48] array];
  double v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"cameraProcessingAdjustmentState", *(unsigned __int16 *)(a1 + 40) | 1u);
  [v8 addObject:v9];

  double v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"cameraProcessingAdjustmentState", *(unsigned __int16 *)(a1 + 42) | 1u);
  [v8 addObject:v10];

  double v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"cameraProcessingAdjustmentState", *(unsigned __int16 *)(a1 + 44) | 1u);
  [v8 addObject:v11];

  id v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"cameraProcessingAdjustmentState", *(unsigned __int16 *)(a1 + 40) | *(unsigned __int16 *)(a1 + 42) | 1u);
  [v8 addObject:v12];

  uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"cameraProcessingAdjustmentState", *(unsigned __int16 *)(a1 + 40) | *(unsigned __int16 *)(a1 + 44) | 1u);
  [v8 addObject:v13];

  CLLocationCoordinate2D v14 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"cameraProcessingAdjustmentState", *(unsigned __int16 *)(a1 + 42) | *(unsigned __int16 *)(a1 + 44) | 1u);
  [v8 addObject:v14];

  uint64_t v15 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"cameraProcessingAdjustmentState", *(unsigned __int16 *)(a1 + 40) | *(unsigned __int16 *)(a1 + 42) | *(unsigned __int16 *)(a1 + 44) | 1u);
  [v8 addObject:v15];

  id v16 = [MEMORY[0x1E4F28BA0] orPredicateWithSubpredicates:v8];
  [v6 setPredicate:v16];

  uint64_t v29 = 0;
  id v30 = &v29;
  uint64_t v31 = 0x2020000000;
  uint64_t v32 = 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = __77__PLModelMigrator__migrateCandidateBitsToDeferredProcessingCandidateOptions___block_invoke_2;
  v25[3] = &unk_1E5866EE8;
  __int16 v26 = *(_WORD *)(a1 + 40);
  __int16 v27 = *(_WORD *)(a1 + 42);
  __int16 v28 = *(_WORD *)(a1 + 44);
  v25[4] = &v29;
  id v17 = (id)[v3 enumerateObjectsFromFetchRequest:v6 count:0 usingDefaultBatchSizeWithBlock:v25];
  if ([v3 hasChanges])
  {
    id v24 = 0;
    uint64_t v18 = [v3 save:&v24];
    id v19 = v24;
    if (v18)
    {
      uint64_t v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = (void *)v30[3];
        *(_DWORD *)buf = 134217984;
        __int16 v34 = v21;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "Migrated %ld soc assets' candidate bits.", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = NSStringFromSelector(*(SEL *)(a1 + 32));
        *(_DWORD *)buf = 138412546;
        __int16 v34 = v22;
        __int16 v35 = 2112;
        id v36 = v19;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "%@: failed to save: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v18 = 1;
  }
  _Block_object_dispose(&v29, 8);

  return v18;
}

void __77__PLModelMigrator__migrateCandidateBitsToDeferredProcessingCandidateOptions___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  LODWORD(v4) = (unsigned __int16)(*(_WORD *)(a1 + 40) & [v3 cameraProcessingAdjustmentState]) != 0;
  if ((*(unsigned __int16 *)(a1 + 42) & [v3 cameraProcessingAdjustmentState]) != 0) {
    LODWORD(v4) = v4 | 4;
  }
  if ((*(unsigned __int16 *)(a1 + 44) & [v3 cameraProcessingAdjustmentState]) != 0) {
    uint64_t v4 = v4 | 2;
  }
  else {
    uint64_t v4 = v4;
  }
  int v5 = [v3 additionalAttributes];
  [v5 setDeferredProcessingCandidateOptions:v4];

  objc_msgSend(v3, "setCameraProcessingAdjustmentState:", objc_msgSend(v3, "cameraProcessingAdjustmentState") & ((*(unsigned __int16 *)(a1 + 44) | *(unsigned __int16 *)(a1 + 40) | *(unsigned __int16 *)(a1 + 42)) ^ 0xFFFF));
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

- (BOOL)_repairLegacyMigrationDuplicateVersionCloudResources:(id)a3
{
  return 1;
}

- (BOOL)_repairTableThumbFragmentation
{
  return 1;
}

- (BOOL)_repushAllUserSmartAlbum:(id)a3
{
  return 1;
}

- (BOOL)_repairOrphanedProjectAlbumsInStore:(id)a3
{
  return 1;
}

- (BOOL)_runPairingForAssetsInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __47__PLModelMigrator__runPairingForAssetsInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _runPairingForAssetsInStore:]", a3, v4);
}

uint64_t __47__PLModelMigrator__runPairingForAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(PLPairing);
  id v13 = 0;
  [(PLPairing *)v4 processPairingForEntireLibraryInContext:v3 error:&v13];
  id v5 = v13;
  if (v5)
  {
    __int16 v6 = PLMigrationGetLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v15 = v5;
      _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_ERROR, "Error while attempting to pair CTM assets in the library: %@", buf, 0xCu);
    }
    uint64_t v7 = 0;
LABEL_13:

    goto LABEL_14;
  }
  if ([v3 hasChanges])
  {
    id v12 = 0;
    uint64_t v7 = [v3 save:&v12];
    __int16 v6 = v12;
    id v8 = PLMigrationGetLog();
    double v9 = v8;
    if (v7)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Processed assets for CTM pairing.", buf, 2u);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      double v10 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138412546;
      id v15 = v10;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_ERROR, "%@: failed to save: %@", buf, 0x16u);
    }
    goto LABEL_13;
  }
  uint64_t v7 = 1;
LABEL_14:

  return v7;
}

- (BOOL)_scavengeCameraProcessingAdjustmentMetadataForAssetsInStore:(id)a3
{
  id v5 = a3;
  __int16 v6 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:590400000.0];
  v18[0] = 0;
  v18[1] = v18;
  void v18[2] = 0x2020000000;
  v18[3] = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke;
  void v17[3] = &unk_1E5866E48;
  v17[4] = v18;
  uint64_t v7 = (void *)MEMORY[0x19F38D650](v17);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke_2;
  v11[3] = &unk_1E5866EC0;
  id v8 = v6;
  id v12 = v8;
  id v13 = @"IMG_S";
  id v9 = v7;
  id v15 = v18;
  SEL v16 = a2;
  id v14 = v9;
  LOBYTE(self) = -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _scavengeCameraProcessingAdjustmentMetadataForAssetsInStore:]", v5, v11);

  _Block_object_dispose(v18, 8);
  return (char)self;
}

void __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke(uint64_t a1, void *a2, int a3)
{
  id v14 = a2;
  id v5 = [v14 additionalAttributes];
  __int16 v6 = [v5 spatialOverCaptureGroupIdentifier];

  uint64_t v7 = v14;
  if (!v6)
  {
    id v8 = [v14 metadataFromMediaPropertiesOrOriginalResource];
    id v9 = [v8 spatialOverCaptureIdentifier];
    if (v9)
    {
      double v10 = [v14 additionalAttributes];
      [v10 setSpatialOverCaptureGroupIdentifier:v9];

      if (a3 && [v14 hasAdjustments])
      {
        double v11 = [v14 additionalAttributes];
        id v12 = [v11 unmanagedAdjustment];
        char v13 = [v12 adjustmentRenderTypes];

        if ((v13 & 0x10) != 0) {
          objc_msgSend(v14, "setCameraProcessingAdjustmentState:", objc_msgSend(v14, "cameraProcessingAdjustmentState") | 4);
        }
        if ((v13 & 0x20) != 0)
        {
          objc_msgSend(v14, "setCameraProcessingAdjustmentState:", objc_msgSend(v14, "cameraProcessingAdjustmentState") | 4);
          objc_msgSend(v14, "setCameraProcessingAdjustmentState:", objc_msgSend(v14, "cameraProcessingAdjustmentState") | 8);
        }
      }
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }

    uint64_t v7 = v14;
  }
}

uint64_t __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke_2(uint64_t a1, void *a2)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLManagedAsset entityName];
  __int16 v6 = [v4 fetchRequestWithEntityName:v5];

  uint64_t v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K > %@ AND %K BEGINSWITH[c] %@", @"dateCreated", *(void *)(a1 + 32), @"additionalAttributes.originalFilename", *(void *)(a1 + 40)];
  [v6 setPredicate:v7];

  v34[0] = @"master.mediaMetadata";
  v34[1] = @"additionalAttributes";
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v34 count:2];
  [v6 setRelationshipKeyPathsForPrefetching:v8];

  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke_3;
  v25[3] = &unk_1E5866E70;
  id v28 = *(id *)(a1 + 48);
  id v26 = *(id *)(a1 + 40);
  id v10 = v9;
  id v27 = v10;
  id v11 = (id)[v3 enumerateObjectsFromFetchRequest:v6 count:0 usingDefaultBatchSizeWithBlock:v25];
  id v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K > %@ AND %K IN %@", @"dateCreated", *(void *)(a1 + 32), @"additionalAttributes.originalFilename", v10];
  [v6 setPredicate:v12];

  v33[0] = @"master.mediaMetadata";
  v33[1] = @"additionalAttributes";
  void v33[2] = @"additionalAttributes.unmanagedAdjustment";
  char v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:3];
  [v6 setRelationshipKeyPathsForPrefetching:v13];

  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke_4;
  void v23[3] = &unk_1E5866E98;
  id v24 = *(id *)(a1 + 48);
  id v14 = (id)[v3 enumerateObjectsFromFetchRequest:v6 count:0 usingDefaultBatchSizeWithBlock:v23];
  if ([v3 hasChanges])
  {
    id v22 = 0;
    uint64_t v15 = [v3 save:&v22];
    id v16 = v22;
    id v17 = PLMigrationGetLog();
    uint64_t v18 = v17;
    if (v15)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v19 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        *(_DWORD *)buf = 134217984;
        id v30 = v19;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Scavenged camera processing adjustment metadata for %ld assets.", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = NSStringFromSelector(*(SEL *)(a1 + 64));
      *(_DWORD *)buf = 138412546;
      id v30 = v20;
      __int16 v31 = 2112;
      id v32 = v16;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "%@: failed to save: %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v15 = 1;
  }

  return v15;
}

void __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void (**)(uint64_t, id, void))(v3 + 16);
  id v5 = a2;
  v4(v3, v5, 0);
  id v7 = [v5 originalFilename];

  __int16 v6 = objc_msgSend(v7, "stringByReplacingCharactersInRange:withString:", objc_msgSend(*(id *)(a1 + 32), "length") - 1, 1, &stru_1EEB2EB80);
  if ([v6 length]) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

uint64_t __79__PLModelMigrator__scavengeCameraProcessingAdjustmentMetadataForAssetsInStore___block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (BOOL)_fixInvalidPostMigrationFileSystemImportedAssets:(id)a3
{
  return 1;
}

- (BOOL)_fixAdjustedStableHashesInStore:(id)a3
{
  return 1;
}

- (BOOL)_fixUnpushedVideoComplementResourcesInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __63__PLModelMigrator__fixUnpushedVideoComplementResourcesInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _fixUnpushedVideoComplementResourcesInStore:]", a3, v4);
}

uint64_t __63__PLModelMigrator__fixUnpushedVideoComplementResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  void v43[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLManagedAsset entityName];
  __int16 v6 = [v4 fetchRequestWithEntityName:v5];

  v43[0] = @"modernResources";
  v43[1] = @"master";
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v43 count:2];
  [v6 setRelationshipKeyPathsForPrefetching:v7];

  id v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d && %K == %d && %K != NULL", @"kind", 0, @"kindSubtype", 2, @"master");
  [v6 setPredicate:v8];
  uint64_t v31 = 0;
  id v32 = &v31;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  uint64_t v27 = 0;
  id v28 = &v27;
  uint64_t v29 = 0x2020000000;
  uint64_t v30 = 0;
  uint64_t v23 = 0;
  id v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = 0;
  id v22 = 0;
  id v9 = [v3 executeFetchRequest:v6 error:&v22];
  id v10 = v22;
  if (v9)
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __63__PLModelMigrator__fixUnpushedVideoComplementResourcesInStore___block_invoke_2;
    void v21[3] = &unk_1E5866858;
    void v21[4] = &v27;
    v21[5] = &v31;
    v21[6] = &v23;
    id v11 = [v3 enumerateWithIncrementalSaveUsingObjects:v9 withBlock:v21];

    if (v11)
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        char v13 = NSStringFromSelector(*(SEL *)(a1 + 32));
        *(_DWORD *)buf = 138543618;
        id v36 = v13;
        __int16 v37 = 2114;
        id v38 = v11;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%{public}@: save failed: %{public}@", buf, 0x16u);
      }
      uint64_t v14 = 0;
    }
    else
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = NSStringFromSelector(*(SEL *)(a1 + 32));
        id v17 = (void *)v28[3];
        uint64_t v18 = v32[3];
        uint64_t v19 = v24[3];
        *(_DWORD *)buf = 138544130;
        id v36 = v16;
        __int16 v37 = 2048;
        id v38 = v17;
        __int16 v39 = 2048;
        uint64_t v40 = v18;
        __int16 v41 = 2048;
        uint64_t v42 = v19;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@: resources repushed: %lu, resources created: %lu, resource creation failed: %lu", buf, 0x2Au);
      }
      id v11 = 0;
      uint64_t v14 = 1;
    }
  }
  else
  {
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138543618;
      id v36 = v15;
      __int16 v37 = 2114;
      id v38 = v10;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%{public}@: fetch failed: %{public}@", buf, 0x16u);
    }
    uint64_t v14 = 0;
    id v11 = v10;
  }

  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);

  return v14;
}

void __63__PLModelMigrator__fixUnpushedVideoComplementResourcesInStore___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 firstPersistedResourceMatching:&__block_literal_global_2498];
  if (v4)
  {
    id v5 = v4;
    if (![v4 cloudLocalState])
    {
      __int16 v6 = [v5 fingerprint];

      if (!v6)
      {
        uint64_t v7 = a1 + 32;
LABEL_7:
        ++*(void *)(*(void *)(*(void *)v7 + 8) + 24);
        id v9 = [v3 master];
        [v9 setCloudLocalState:0];

        [v3 setCloudLocalState:0];
      }
    }
  }
  else
  {
    uint64_t v8 = +[PLResourceInstaller onDemand_installOriginalVideoComplementResourceIfPresentForAsset:v3];
    if (v8)
    {
      id v5 = (void *)v8;
      uint64_t v7 = a1 + 40;
      goto LABEL_7;
    }
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    id v10 = PLBackendGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = [v3 uuid];
      id v12 = [v3 pathForVideoComplementFile];
      int v13 = 138543618;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v12;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "Unable to create resource for original video complement for asset uuid: %{public}@, resource is missing from CPL and not locally available at path: %{public}@", (uint8_t *)&v13, 0x16u);
    }
    id v5 = 0;
  }
}

BOOL __63__PLModelMigrator__fixUnpushedVideoComplementResourcesInStore___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 cplType] == 18;
}

- (BOOL)_fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __74__PLModelMigrator__fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore:]", a3, v4);
}

BOOL __74__PLModelMigrator__fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v5 = +[PLInternalResource fetchRequest];
  __int16 v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d && %K == %d", @"cloudLocalState", 3, @"remoteAvailability", 0);
  [v5 setPredicate:v6];
  id v18 = 0;
  uint64_t v7 = [v3 executeFetchRequest:v5 error:&v18];
  id v8 = v18;
  if (v7)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __74__PLModelMigrator__fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore___block_invoke_2;
    v16[3] = &unk_1E58758A8;
    uint64_t v17 = v4;
    uint64_t v9 = [v3 enumerateWithIncrementalSaveUsingObjects:v7 withBlock:v16];

    BOOL v10 = v9 == 0;
    if (v9)
    {
      id v11 = PLMigrationGetLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = NSStringFromSelector(*(SEL *)(a1 + 32));
        *(_DWORD *)buf = 138543362;
        uint64_t v20 = v12;
        _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "%{public}@: failed", buf, 0xCu);
      }
    }
    int v13 = v17;
    id v8 = (id)v9;
  }
  else
  {
    int v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138543362;
      uint64_t v20 = v14;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "%{public}@: fetch failed", buf, 0xCu);
    }
    BOOL v10 = 0;
  }

  [v4 enumerateKeysAndObjectsUsingBlock:&__block_literal_global_2493];
  return v10;
}

void __74__PLModelMigrator__fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v10 = a2;
  [v10 setRemoteAvailability:1];
  id v3 = *(void **)(a1 + 32);
  id v4 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v10, "cplType"));
  id v5 = [v3 objectForKeyedSubscript:v4];

  if (v5)
  {
    __int16 v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "unsignedIntegerValue") + 1);
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v10, "cplType"));
    [v7 setObject:v6 forKeyedSubscript:v8];
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 32);
    __int16 v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v10, "cplType"));
    [v9 setObject:&unk_1EEBEE0B8 forKeyedSubscript:v6];
  }
}

void __74__PLModelMigrator__fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore___block_invoke_2490(uint64_t a1, void *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  __int16 v6 = PLMigrationGetLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134218240;
    uint64_t v8 = [v5 unsignedIntegerValue];
    __int16 v9 = 2048;
    uint64_t v10 = [v4 unsignedIntegerValue];
    _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEFAULT, "fixed remote availability for %lu resources with cpl type %lu", (uint8_t *)&v7, 0x16u);
  }
}

- (BOOL)_fixSharedStreamVideoResourcesInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __57__PLModelMigrator__fixSharedStreamVideoResourcesInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _fixSharedStreamVideoResourcesInStore:]", a3, v4);
}

uint64_t __57__PLModelMigrator__fixSharedStreamVideoResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v27 = 0;
  id v28 = &v27;
  uint64_t v29 = 0x2020000000;
  uint64_t v30 = 0;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLManagedAsset entityName];
  __int16 v6 = [v4 fetchRequestWithEntityName:v5];

  v34[0] = @"modernResources";
  int v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v34 count:1];
  [v6 setRelationshipKeyPathsForPrefetching:v7];

  uint64_t v8 = (void *)MEMORY[0x1E4F28BA0];
  __int16 v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kind", 1);
  v33[0] = v9;
  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v33[1] = v10;
  uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:2];
  id v12 = [v8 andPredicateWithSubpredicates:v11];

  [v6 setPredicate:v12];
  id v26 = 0;
  int v13 = [v3 executeFetchRequest:v6 error:&v26];
  uint64_t v14 = v26;
  if (v13)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __57__PLModelMigrator__fixSharedStreamVideoResourcesInStore___block_invoke_2;
    void v23[3] = &unk_1E586E198;
    uint64_t v25 = &v27;
    id v24 = v3;
    uint64_t v15 = [v24 enumerateWithIncrementalSaveUsingObjects:v13 withBlock:v23];

    if (v15)
    {
      id v16 = PLMigrationGetLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = NSStringFromSelector(*(SEL *)(a1 + 32));
        *(_DWORD *)buf = 138543362;
        id v32 = v17;
        _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%{public}@: failed", buf, 0xCu);
      }
      uint64_t v18 = 0;
      uint64_t v14 = v15;
    }
    else
    {

      uint64_t v14 = PLMigrationGetLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = (void *)v28[3];
        *(_DWORD *)buf = 134217984;
        id v32 = v21;
        _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "added %lu shared stream video resources", buf, 0xCu);
      }
      uint64_t v18 = 1;
    }
  }
  else
  {
    uint64_t v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138543362;
      id v32 = v20;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "%{public}@: fetch failed", buf, 0xCu);
    }
    uint64_t v18 = 0;
  }

  _Block_object_dispose(&v27, 8);
  return v18;
}

void __57__PLModelMigrator__fixSharedStreamVideoResourcesInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 modernResources];
  id v4 = [v3 objectsPassingTest:&__block_literal_global_2484];

  if (![v4 count])
  {
    id v5 = +[PLResourceDataStoreManager updateDerivativeResourcesForAsset:v6 forLifecycleEvent:2];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v5 count];
  }
  objc_msgSend(*(id *)(a1 + 32), "refreshObject:mergeChanges:", v6, objc_msgSend(v6, "hasChanges"));
}

BOOL __57__PLModelMigrator__fixSharedStreamVideoResourcesInStore___block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v3 = [v2 dataStoreSubtype] == 7 || objc_msgSend(v2, "dataStoreSubtype") == 8;

  return v3;
}

- (BOOL)_removeAllSharedAssetDCIMFilesInStore:(id)a3
{
  return 1;
}

- (BOOL)_removeCloudSharedFileAtPath:(id)a3 withFileManager:(id)a4 error:(id *)a5
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  __int16 v9 = (void *)MEMORY[0x1E4F8B980];
  id v10 = a3;
  uint64_t v11 = [v9 systemLibraryPathManager];
  id v12 = (void *)MEMORY[0x1E4F1CB10];
  int v13 = [v11 photoDirectoryWithType:22];
  uint64_t v14 = [v12 fileURLWithPath:v13];

  uint64_t v15 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v10];

  uint64_t v20 = 2;
  if ([v8 getRelationship:&v20 ofDirectoryAtURL:v14 toItemAtURL:v15 error:a5])
  {
    if (!v20)
    {
      char v18 = [v8 removeItemAtURL:v15 error:a5];
      goto LABEL_7;
    }
    id v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = NSStringFromSelector(a2);
      *(_DWORD *)buf = 138412546;
      id v22 = v17;
      __int16 v23 = 2112;
      id v24 = v15;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEBUG, "%@: not cloud shared url: %@", buf, 0x16u);
    }
  }
  char v18 = 0;
LABEL_7:

  return v18;
}

- (BOOL)relocateOriginalUBFPaths:(id)a3
{
  return 1;
}

- (BOOL)_cleanupLegacyFiles
{
  return 1;
}

- (BOOL)_relocateCPLMarkerFiles
{
  return 1;
}

- (BOOL)_verifyAndFixBrokenLocalAvailabilityForResourceWithFileIDsInStore:(id)a3
{
  id v5 = a3;
  id v6 = [(PLModelMigrator *)self pathManager];
  int v7 = [v6 capabilities];
  int v8 = [v7 isCentralizedCacheDeleteCapable];

  if (v8)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __85__PLModelMigrator__verifyAndFixBrokenLocalAvailabilityForResourceWithFileIDsInStore___block_invoke;
    v10[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
    v10[4] = a2;
    -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _verifyAndFixBrokenLocalAvailabilityForResourceWithFileIDsInStore:]", v5, v10);
  }

  return 1;
}

uint64_t __85__PLModelMigrator__verifyAndFixBrokenLocalAvailabilityForResourceWithFileIDsInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  int v13 = 0;
  id v10 = 0;
  uint64_t v11 = 0;
  BOOL v3 = +[PLCacheDeleteSupport verifyAndFixLocalAvailabilityForMissingResourcesUsingFileIDInManagedObjectContext:a2 countPresent:&v13 countMissing:&v12 countUnableToVerify:&v11 error:&v10];
  id v4 = v10;
  id v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = NSStringFromSelector(*(SEL *)(a1 + 32));
    *(_DWORD *)buf = 138544130;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    id v17 = v13;
    __int16 v18 = 2048;
    uint64_t v19 = v12;
    __int16 v20 = 2048;
    uint64_t v21 = v11;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: Count present: %ld, missing: %ld, unable to verify: %ld\n", buf, 0x2Au);
  }
  if (!v3)
  {
    int v7 = PLMigrationGetLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)buf = 138543618;
      uint64_t v15 = v8;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_ERROR, "%{public}@: encountered errors while verifying fileIDs: %@", buf, 0x16u);
    }
  }

  return 1;
}

- (BOOL)_move1kResourcesOutOfMastersDir:(id)a3
{
  return 1;
}

- (BOOL)_requestAvailabilityChangeForAssetsMissing1kResourcesInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __80__PLModelMigrator__requestAvailabilityChangeForAssetsMissing1kResourcesInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _requestAvailabilityChangeForAssetsMissing1kResourcesInStore:]", a3, v4);
}

BOOL __80__PLModelMigrator__requestAvailabilityChangeForAssetsMissing1kResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  uint64_t v29 = 0;
  id v4 = +[PLResourceRecipe recipeFromID:65747];
  id v5 = [v4 supportedVersionsForLocalResourceGeneration];
  id v6 = [v5 firstObject];
  uint64_t v7 = [v6 integerValue];

  int v8 = objc_alloc_init(PLValidatedExternalResource);
  [(PLValidatedExternalResource *)v8 setResourceType:0];
  [(PLValidatedExternalResource *)v8 setVersion:v7];
  [(PLValidatedExternalResource *)v8 setRecipeID:65747];
  __int16 v9 = [v4 uti];
  [(PLValidatedExternalResource *)v8 setUniformTypeIdentifier:v9];

  id v10 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v11 = +[PLManagedAsset entityName];
  uint64_t v12 = [v10 fetchRequestWithEntityName:v11];

  v36[0] = @"modernResources";
  int v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:1];
  [v12 setRelationshipKeyPathsForPrefetching:v13];

  uint64_t v14 = [v3 executeFetchRequest:v12 error:0];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __80__PLModelMigrator__requestAvailabilityChangeForAssetsMissing1kResourcesInStore___block_invoke_2;
  v22[3] = &unk_1E5866DE0;
  int v25 = v7;
  id v15 = v4;
  id v23 = v15;
  id v24 = &v26;
  __int16 v16 = [v3 enumerateWithIncrementalSaveUsingObjects:v14 withBlock:v22];
  if (v16)
  {
    id v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector(*(SEL *)(a1 + 32));
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v19 = [v16 userInfo];
      *(_DWORD *)buf = 138543874;
      id v31 = v18;
      __int16 v32 = 2112;
      uint64_t v33 = v16;
      __int16 v34 = 2112;
      __int16 v35 = v19;
      _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    id v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v20 = (void *)v27[3];
      *(_DWORD *)buf = 134217984;
      id v31 = v20;
      _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "requested 1k for %lu assets.", buf, 0xCu);
    }
  }

  _Block_object_dispose(&v26, 8);
  return v16 == 0;
}

void __80__PLModelMigrator__requestAvailabilityChangeForAssetsMissing1kResourcesInStore___block_invoke_2(uint64_t a1, void *a2)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  v23[0] = v4;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:1];
  id v6 = +[PLResourceGenerator expectedLocalResourceRecipesForAsset:v3 versions:v5];

  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  int v8 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  __int16 v9 = [v7 setWithObject:v8];
  id v10 = +[PLResourceGenerator locallyUnavailableRecipesFromRecipes:v6 versions:v9 asset:v3];

  if ([v10 containsObject:*(void *)(a1 + 32)])
  {
    uint64_t v11 = [*(id *)(a1 + 32) chooseIngredientsFrom:v3 version:*(unsigned int *)(a1 + 48)];

    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 48);
      uint64_t v13 = [v3 width];
      uint64_t v14 = [v3 height];
      uint64_t v15 = *(void *)(a1 + 32);
      LOWORD(v21) = [v3 kind];
      __int16 v16 = +[PLResourceInstaller generateValidatedExternalImageResourceOfType:0 forFilePath:0 requireFileToBePresent:0 version:v12 basedOnFullSizeWidth:v13 andHeight:v14 recipe:v15 assetKind:v21 error:0];
      uint64_t v22 = v16;
      id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v22 count:1];
      id v18 = +[PLResourceDataStoreManager storeExternalResources:v17 forAsset:v3 forLifecycleEvent:2 error:0];

      uint64_t v19 = [v18 anyObject];
      __int16 v20 = v19;
      if (v19)
      {
        [v19 setLocalAvailabilityTarget:1];
        ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      }
    }
  }
}

- (BOOL)_regenerateReferenceKeyDataInStore:(id)a3
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = a3;
  id v6 = +[PLManagedAsset entityName];
  uint64_t v7 = [v4 fetchRequestWithEntityName:v6];

  int v8 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForReferencedAsset"), 1);
  [v7 setFetchBatchSize:100];
  [v7 setPredicate:v8];
  v14[0] = @"modernResources";
  __int16 v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
  [v7 setRelationshipKeyPathsForPrefetching:v9];

  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _regenerateReferenceKeyDataInStore:]");
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __54__PLModelMigrator__regenerateReferenceKeyDataInStore___block_invoke;
  v13[3] = &__block_descriptor_40_e28_B24__0__NSManagedObject_8Q16lu32l8;
  v13[4] = v10;
  LOBYTE(self) = [(PLModelMigrator *)self _runMigrationStepWithName:v11 fetchRequest:v7 store:v5 migrationHandler:v13];

  return (char)self;
}

uint64_t __54__PLModelMigrator__regenerateReferenceKeyDataInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = objc_msgSend(a2, "modernResources", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (([v7 isDerivative] & 1) == 0)
        {
          int v8 = [v7 dataStoreKey];
          if (objc_opt_isKindOfClass())
          {
            __int16 v9 = -[PLPrimaryResourceDataStoreReferenceFileKey initWithResourceType:]([PLPrimaryResourceDataStoreReferenceFileKey alloc], "initWithResourceType:", [v7 resourceType]);
            uint64_t v10 = [(PLPrimaryResourceDataStoreReferenceFileKey *)v9 keyData];
            [v7 setDataStoreKeyData:v10];
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  return 1;
}

- (BOOL)_fixupResourceTypeUnknownInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _fixupResourceTypeUnknownInStore:]", a3, &__block_literal_global_2472);
}

BOOL __52__PLModelMigrator__fixupResourceTypeUnknownInStore___block_invoke(uint64_t a1, void *a2)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_DEFAULT, "Renumbering PLResourceTypeUnknown from 32 to 31...", buf, 2u);
  }

  uint64_t v4 = (void *)MEMORY[0x1E4F1C038];
  uint64_t v5 = +[PLInternalResource entityName];
  id v6 = [v4 batchUpdateRequestWithEntityName:v5];

  uint64_t v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"resourceType", 32);
  [v6 setPredicate:v7];

  id v18 = @"resourceType";
  v19[0] = &unk_1EEBEE0A0;
  int v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  [v6 setPropertiesToUpdate:v8];

  [v6 setResultType:2];
  id v15 = 0;
  __int16 v9 = [v2 executeRequest:v6 error:&v15];

  id v10 = v15;
  uint64_t v11 = PLMigrationGetLog();
  long long v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      long long v13 = [v9 result];
      *(_DWORD *)buf = 138412290;
      id v17 = v13;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Batch update to remap PLResourceTypeUnknown from 32 to 31 successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v17 = v10;
    _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "Batch update to remap PLResourceTypeUnknown from 32 to 31 failed, error: %@", buf, 0xCu);
  }

  return v9 != 0;
}

- (BOOL)_migrateVersionSpecific1kResourcesInStore:(id)a3 deferHintChanges:(BOOL)a4
{
  return 1;
}

- (BOOL)_renumberLocalAvailabilityAndLocalAvailabilityTargetsInStore:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _renumberLocalAvailabilityAndLocalAvailabilityTargetsInStore:]", a3, &__block_literal_global_2465);
}

BOOL __80__PLModelMigrator__renumberLocalAvailabilityAndLocalAvailabilityTargetsInStore___block_invoke(uint64_t a1, void *a2)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = (void *)MEMORY[0x1E4F1C038];
  uint64_t v4 = +[PLInternalResource entityName];
  uint64_t v5 = [v3 batchUpdateRequestWithEntityName:v4];

  id v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"localAvailability", 0);
  [v5 setPredicate:v6];

  uint64_t v27 = @"localAvailability";
  v28[0] = &unk_1EEBEE088;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:&v27 count:1];
  [v5 setPropertiesToUpdate:v7];

  [v5 setResultType:2];
  id v22 = 0;
  int v8 = [v2 executeRequest:v5 error:&v22];
  id v9 = v22;
  id v10 = PLMigrationGetLog();
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      long long v12 = [v8 result];
      *(_DWORD *)buf = 138412290;
      id v26 = v12;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Batch update to remap localAvailability none/0 to none/-1 request successful with result %@", buf, 0xCu);
    }
    long long v13 = (void *)MEMORY[0x1E4F1C038];
    long long v14 = +[PLInternalResource entityName];
    uint64_t v5 = [v13 batchUpdateRequestWithEntityName:v14];

    id v23 = @"localAvailabilityTarget";
    id v24 = &unk_1EEBEDF38;
    id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    [v5 setPropertiesToUpdate:v15];

    [v5 setResultType:2];
    id v21 = 0;
    uint64_t v11 = [v2 executeRequest:v5 error:&v21];
    id v9 = v21;
    BOOL v16 = v11 != 0;
    id v17 = PLMigrationGetLog();
    id v18 = v17;
    if (v11)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = [v11 result];
        *(_DWORD *)buf = 138412290;
        id v26 = v19;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Batch update to remap localAvailabilityTarget to neutral/0 request successful with result %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = v9;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "Batch update to remap localAvailabilityTarget to neutral/0 request failed, error: %@", buf, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = v9;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "Batch update to remap localAvailability none/0 to none/-1 request failed, error: %@", buf, 0xCu);
    }
    BOOL v16 = 0;
  }

  [v2 reset];
  return v16;
}

- (BOOL)migratePurgeableResources
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(PLModelMigrator *)self pathManager];
  uint64_t v4 = [v3 capabilities];
  int v5 = [v4 isCentralizedCacheDeleteCapable];

  id v6 = PLMigrationGetLog();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEFAULT, "Migrating purgeable resources", (uint8_t *)&v12, 2u);
    }

    int v8 = [(PLModelMigrator *)self pathManager];
    id v6 = +[PLCPLSettings settingsWithPathManager:v8];

    [v6 setRunOnceFlag:4 error:0];
  }
  else if (v7)
  {
    id v9 = [(PLModelMigrator *)self pathManager];
    id v10 = [v9 libraryURL];
    int v12 = 138412290;
    long long v13 = v10;
    _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEFAULT, "Skip migrating purgeable resources, not supported for library at %@", (uint8_t *)&v12, 0xCu);
  }
  return 1;
}

- (BOOL)_migrateVideoKeyFrameTimeValuesInStagedStore:(id)a3
{
  void v28[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _migrateVideoKeyFrameTimeValuesInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v7 = (void *)MEMORY[0x1E4F1C038];
  int v8 = +[PLManagedAsset entityName];
  id v9 = [v7 batchUpdateRequestWithEntityName:v8];

  v27[0] = @"videoKeyFrameValue";
  id v10 = [MEMORY[0x1E4F28C68] expressionForKeyPath:@"mediaAnalysisAttributes.bestKeyFrameValue"];
  v27[1] = @"videoKeyFrameTimeScale";
  v28[0] = v10;
  uint64_t v11 = [MEMORY[0x1E4F28C68] expressionForKeyPath:@"mediaAnalysisAttributes.bestKeyFrameTimeScale"];
  v28[1] = v11;
  int v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:2];
  [v9 setPropertiesToUpdate:v12];

  [v9 setResultType:2];
  id v20 = 0;
  long long v13 = [v6 executeRequest:v9 error:&v20];
  id v14 = v20;
  id v15 = PLMigrationGetLog();
  BOOL v16 = v15;
  if (v13)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = [v13 result];
      *(_DWORD *)buf = 138412290;
      id v22 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Migrated %@ assets video key frame values from MediaAnalysisAttributes table to Asset table", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    id v18 = [v14 userInfo];
    *(_DWORD *)buf = 136315650;
    id v22 = "-[PLModelMigrator _migrateVideoKeyFrameTimeValuesInStagedStore:]";
    __int16 v23 = 2112;
    id v24 = v14;
    __int16 v25 = 2112;
    id v26 = v18;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
  }

  return v13 != 0;
}

- (BOOL)_emptyResourceTablesInStagedStore:(id)a3
{
  BOOL v3 = +[PLResourceInstaller resetInternalResourcesInStore:a3 resetUTIs:1 resetCodecs:1 resetMasters:0 migrator:self];
  if (!v3)
  {
    id v4 = PLMigrationGetLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_ERROR, "Failed to empty resource tables.", v6, 2u);
    }
  }
  return v3;
}

- (BOOL)_invalidateReverseGeocodingDataInStore:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  long long v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 1;
  int v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _invalidateReverseGeocodingDataInStore:]", 1);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __58__PLModelMigrator__invalidateReverseGeocodingDataInStore___block_invoke;
  v9[3] = &unk_1E5875E68;
  id v7 = v6;
  id v10 = v7;
  uint64_t v11 = &v12;
  [v7 performBlockAndWait:v9];

  LOBYTE(v5) = *((unsigned char *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return (char)v5;
}

void __58__PLModelMigrator__invalidateReverseGeocodingDataInStore___block_invoke(uint64_t a1)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1C038];
  BOOL v3 = +[PLAdditionalAssetAttributes entityName];
  id v4 = [v2 batchUpdateRequestWithEntityName:v3];

  id v20 = @"reverseLocationDataIsValid";
  v21[0] = MEMORY[0x1E4F1CC28];
  int v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v20 count:1];
  [v4 setPropertiesToUpdate:v5];

  [v4 setResultType:2];
  id v6 = *(void **)(a1 + 32);
  id v13 = 0;
  id v7 = [v6 executeRequest:v4 error:&v13];
  id v8 = v13;
  id v9 = PLMigrationGetLog();
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [v7 result];
      *(_DWORD *)buf = 138412290;
      char v15 = v11;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Invalidated reverse geocoding data for %@ assets", buf, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = [v8 userInfo];
      *(_DWORD *)buf = 136315650;
      char v15 = "-[PLModelMigrator _invalidateReverseGeocodingDataInStore:]_block_invoke";
      __int16 v16 = 2112;
      id v17 = v8;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

- (BOOL)_fixLocationValuesInStore:(id)a3
{
  return 1;
}

- (BOOL)_regenerateSharedStreamsDataStoreKeysDataInStore:(id)a3 deferHintChanges:(BOOL)a4
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  id v6 = (void *)MEMORY[0x1E4F1C0D0];
  id v7 = a3;
  id v8 = +[PLManagedAsset entityName];
  id v9 = [v6 fetchRequestWithEntityName:v8];

  id v10 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  [v9 setFetchBatchSize:100];
  [v9 setPredicate:v10];
  v16[0] = @"albums";
  v16[1] = @"modernResources";
  uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:2];
  [v9 setRelationshipKeyPathsForPrefetching:v11];

  uint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _regenerateSharedStreamsDataStoreKeysDataInStore:deferHintChanges:]");
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __85__PLModelMigrator__regenerateSharedStreamsDataStoreKeysDataInStore_deferHintChanges___block_invoke;
  v14[3] = &__block_descriptor_33_e28_B24__0__NSManagedObject_8Q16l;
  BOOL v15 = a4;
  LOBYTE(self) = [(PLModelMigrator *)self _runMigrationStepWithName:v12 fetchRequest:v9 store:v7 migrationHandler:v14];

  return (char)self;
}

uint64_t __85__PLModelMigrator__regenerateSharedStreamsDataStoreKeysDataInStore_deferHintChanges___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 albums];
  int v5 = [v4 anyObject];

  if ([v5 kindValue] == 1505)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v6 = [v3 modernResources];
    uint64_t v7 = [v6 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v21 = a1;
      char v22 = 0;
      uint64_t v9 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v24 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          uint64_t v12 = [v11 dataStoreKeyData];
          if (v12)
          {
            id v13 = (void *)v12;
            int v14 = [v11 dataStoreClassID];
            int v15 = +[PLSharedStreamsDataStore storeClassID];

            if (v14 == v15)
            {
              __int16 v16 = -[PLSharedStreamsDataStoreKey initWithAsset:album:type:]([PLSharedStreamsDataStoreKey alloc], "initWithAsset:album:type:", v3, v5, [v11 dataStoreSubtype]);
              id v17 = v16;
              if (v16
                && ([(PLSharedStreamsDataStoreKey *)v16 keyData],
                    __int16 v18 = objc_claimAutoreleasedReturnValue(),
                    v18,
                    v18))
              {
                uint64_t v19 = [(PLSharedStreamsDataStoreKey *)v17 keyData];
                [v11 setDataStoreKeyData:v19];

                char v22 = 1;
              }
              else
              {
                [v11 markAsNotLocallyAvailable];
              }
            }
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v8);

      if ((v22 & 1) != 0 && !*(unsigned char *)(v21 + 32)) {
        [v3 recalculateImageRequestHints];
      }
    }
    else
    {
    }
  }

  return 1;
}

- (BOOL)_fixUTIForRDMigrationInStore:(id)a3
{
  return 1;
}

- (BOOL)_fixSidecarUTIsAndDataStoreSubtype:(id)a3
{
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = a3;
  id v6 = +[PLInternalResource entityName];
  uint64_t v7 = [v4 fetchRequestWithEntityName:v6];

  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K >= %d AND %K = %d", @"localAvailability", 1, @"resourceType", 5);
  [v7 setPredicate:v8];

  uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _fixSidecarUTIsAndDataStoreSubtype:]");
  LOBYTE(self) = [(PLModelMigrator *)self _runMigrationStepWithName:v9 fetchRequest:v7 store:v5 migrationHandler:&__block_literal_global_2443];

  return (char)self;
}

uint64_t __54__PLModelMigrator__fixSidecarUTIsAndDataStoreSubtype___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 dataStoreKey];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = [v3 extension];
    uint64_t v5 = [v4 caseInsensitiveCompare:*MEMORY[0x1E4F8D2F0]];

    if (!v5)
    {
      id v6 = [MEMORY[0x1E4F8CDF8] supplementalResourceXMPType];
      uint64_t v7 = [v6 identifier];
      uint64_t v8 = +[PLUniformTypeIdentifier utiWithIdentifier:v7];
      [v2 setUniformTypeIdentifier:v8];
    }
  }
  uint64_t v9 = [v2 uniformTypeIdentifier];
  id v10 = [v9 identifier];
  uint64_t v11 = [MEMORY[0x1E4F8CDF8] supplementalResourceAAEType];
  uint64_t v12 = [v11 identifier];
  if ([v10 isEqualToString:v12])
  {
    uint64_t v13 = [v2 dataStoreSubtype];

    if (v13 != 22) {
      [v2 setDataStoreSubtype:22];
    }
  }
  else
  {
  }
  return 1;
}

- (BOOL)_removeUnneededAnalysisStateTableEntries:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", a3, "-[PLModelMigrator _removeUnneededAnalysisStateTableEntries:]", *MEMORY[0x1E4F1C1C0]);
  id v4 = objc_alloc(MEMORY[0x1E4F1C0D0]);
  uint64_t v5 = +[PLAssetAnalysisState entityName];
  id v6 = (void *)[v4 initWithEntityName:v5];

  uint64_t v7 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v8 = +[PLAssetAnalysisState workerTypesPersistingAnalysisState];
  uint64_t v9 = [v7 predicateWithFormat:@"NOT (workerType IN %@)", v8];

  [v6 setPredicate:v9];
  id v10 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v6];
  id v20 = 0;
  uint64_t v11 = [v3 executeRequest:v10 error:&v20];
  id v12 = v20;
  uint64_t v13 = PLMigrationGetLog();
  int v14 = v13;
  if (v11)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int v15 = "deleted unused analysis state table entries";
      __int16 v16 = v14;
      os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
      uint32_t v18 = 2;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v16, v17, v15, buf, v18);
    }
  }
  else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v22 = v12;
    int v15 = "error deleting unused analysis state table entries: %@";
    __int16 v16 = v14;
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    uint32_t v18 = 12;
    goto LABEL_6;
  }

  return v11 != 0;
}

- (BOOL)_reconstructImageExtendedAttributes:(id)a3
{
  v13[1] = *MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = a3;
  id v6 = +[PLManagedAsset entityName];
  uint64_t v7 = [v4 fetchRequestWithEntityName:v6];

  v13[0] = @"master";
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:1];
  [v7 setRelationshipKeyPathsForPrefetching:v8];

  uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"kind == %d AND extendedAttributes != nil AND extendedAttributes.iso == 0", 0);
  [v7 setPredicate:v9];

  id v10 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _reconstructImageExtendedAttributes:]");
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __55__PLModelMigrator__reconstructImageExtendedAttributes___block_invoke;
  v12[3] = &unk_1E5866AE0;
  v12[4] = self;
  LOBYTE(self) = [(PLModelMigrator *)self _runMigrationStepWithName:v10 fetchRequest:v7 store:v5 migrationHandler:v12];

  return (char)self;
}

uint64_t __55__PLModelMigrator__reconstructImageExtendedAttributes___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)[v2 newShortLivedLibraryWithName:"-[PLModelMigrator _reconstructImageExtendedAttributes:]_block_invoke"];
  id v5 = objc_alloc(MEMORY[0x1E4F8CC48]);
  id v6 = [v3 imageProperties];
  uint64_t v7 = (void *)MEMORY[0x1E4F8CDF8];
  uint64_t v8 = [v3 uniformTypeIdentifier];
  uint64_t v9 = [v7 typeWithIdentifier:v8];
  id v10 = [v4 libraryBundle];
  uint64_t v11 = [v10 timeZoneLookup];
  id v12 = (void *)[v5 initWithImageProperties:v6 contentType:v9 timeZoneLookup:v11];

  [v3 updateImageExtendedAttributesFromMetadata:v12];
  return 1;
}

- (BOOL)_fixHasLocationSmartAlbum:(id)a3
{
  return 1;
}

- (BOOL)_fixWhiteBalanceValuesInStore:(id)a3
{
  return 1;
}

- (BOOL)_fixKindSubtypeForLoopingVideoLivePhotosInStore:(id)a3
{
  return 1;
}

- (BOOL)_updateAlbumDatesInStore:(id)a3
{
  id v4 = a3;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 1;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _updateAlbumDatesInStore:]", 1);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __44__PLModelMigrator__updateAlbumDatesInStore___block_invoke;
  v10[3] = &unk_1E5875E68;
  id v8 = v7;
  id v11 = v8;
  id v12 = &v13;
  [v8 performBlockAndWait:v10];

  LOBYTE(v6) = *((unsigned char *)v14 + 24);
  _Block_object_dispose(&v13, 8);

  return (char)v6;
}

void __44__PLModelMigrator__updateAlbumDatesInStore___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  +[PLPhotoLibrary refreshCachedCountsAndDates:1 onAssetsContainerClass:objc_opt_class() inContext:*(void *)(a1 + 32) withPredicate:0];
  if ([*(id *)(a1 + 32) hasChanges])
  {
    id v2 = PLMigrationGetLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 32) updatedObjects];
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = [v3 count];
      _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_DEFAULT, "Updating dates on %ld albums", buf, 0xCu);
    }
    id v4 = *(void **)(a1 + 32);
    id v8 = 0;
    char v5 = [v4 save:&v8];
    id v6 = v8;
    if ((v5 & 1) == 0)
    {
      uint64_t v7 = PLBackendGetLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v10 = (uint64_t)v6;
        _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_ERROR, "Failed to update dates on albums %@", buf, 0xCu);
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
  }
}

- (BOOL)_updateCPLMarkerFiles
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v4 = [@"/var/mobile/Media/PhotoData" stringByAppendingPathComponent:@"pauseICloudPhotos"];
  if (![v3 fileExistsAtPath:v4])
  {
    id v8 = 0;
    goto LABEL_10;
  }
  char v5 = [(PLModelMigrator *)self pathManager];
  id v6 = [v5 pauseICloudPhotosFilePath];

  id v40 = 0;
  int v7 = [v3 moveItemAtPath:v4 toPath:v6 error:&v40];
  id v8 = v40;
  uint64_t v9 = PLMigrationGetLog();
  uint64_t v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v42 = v4;
      __int16 v43 = 2112;
      id v44 = v6;
      uint64_t v11 = "Migrated pause marker from %@ to %@";
      id v12 = v10;
      os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
      uint32_t v14 = 22;
LABEL_8:
      _os_log_impl(&dword_19B3C7000, v12, v13, v11, buf, v14);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412802;
    uint64_t v42 = v4;
    __int16 v43 = 2112;
    id v44 = v6;
    __int16 v45 = 2112;
    id v46 = v8;
    uint64_t v11 = "Failed to migrate pause marker from %@ to %@: %@";
    id v12 = v10;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    uint32_t v14 = 32;
    goto LABEL_8;
  }

LABEL_10:
  uint64_t v15 = [@"/var/mobile/Media/PhotoData" stringByAppendingPathComponent:@"enableICloudPhotos"];
  if (![v3 fileExistsAtPath:v15])
  {
    id v19 = v8;
    goto LABEL_19;
  }
  char v16 = [(PLModelMigrator *)self pathManager];
  os_log_type_t v17 = [v16 enableICloudPhotosFilePath];

  id v39 = v8;
  int v18 = [v3 moveItemAtPath:v15 toPath:v17 error:&v39];
  id v19 = v39;

  id v20 = PLMigrationGetLog();
  uint64_t v21 = v20;
  if (v18)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v42 = v15;
      __int16 v43 = 2112;
      id v44 = v17;
      id v22 = "Migrated enable marker from %@ to %@";
      uint64_t v23 = v21;
      os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
      uint32_t v25 = 22;
LABEL_17:
      _os_log_impl(&dword_19B3C7000, v23, v24, v22, buf, v25);
    }
  }
  else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412802;
    uint64_t v42 = v15;
    __int16 v43 = 2112;
    id v44 = v17;
    __int16 v45 = 2112;
    id v46 = v19;
    id v22 = "Failed to migrate enable marker from %@ to %@: %@";
    uint64_t v23 = v21;
    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    uint32_t v25 = 32;
    goto LABEL_17;
  }

LABEL_19:
  long long v26 = [@"/var/mobile/Media/PhotoData" stringByAppendingPathComponent:@"disableICloudPhotos"];
  if ([v3 fileExistsAtPath:v26])
  {
    uint64_t v27 = [(PLModelMigrator *)self pathManager];
    uint64_t v28 = [v27 disableICloudPhotosFilePath];

    id v38 = v19;
    int v29 = [v3 moveItemAtPath:v26 toPath:v28 error:&v38];
    id v30 = v38;

    id v31 = PLMigrationGetLog();
    __int16 v32 = v31;
    if (v29)
    {
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v42 = v15;
        __int16 v43 = 2112;
        id v44 = v28;
        uint64_t v33 = "Migrated disable marker from %@ to %@";
        __int16 v34 = v32;
        os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
        uint32_t v36 = 22;
LABEL_26:
        _os_log_impl(&dword_19B3C7000, v34, v35, v33, buf, v36);
      }
    }
    else if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v42 = v26;
      __int16 v43 = 2112;
      id v44 = v28;
      __int16 v45 = 2112;
      id v46 = v30;
      uint64_t v33 = "Failed to migrate disable marker from %@ to %@: %@";
      __int16 v34 = v32;
      os_log_type_t v35 = OS_LOG_TYPE_ERROR;
      uint32_t v36 = 32;
      goto LABEL_26;
    }

    goto LABEL_28;
  }
  id v30 = v19;
LABEL_28:

  return 1;
}

- (BOOL)_updateMissingFileSystemVolumeUuidInStore:(id)a3
{
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = a3;
  id v6 = +[PLFileSystemVolume entityName];
  int v7 = [v4 fetchRequestWithEntityName:v6];

  id v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"uuid == nil"];
  [v7 setPredicate:v8];

  uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _updateMissingFileSystemVolumeUuidInStore:]");
  LOBYTE(self) = [(PLModelMigrator *)self _runMigrationStepWithName:v9 fetchRequest:v7 store:v5 migrationHandler:&__block_literal_global_2417];

  return (char)self;
}

uint64_t __61__PLModelMigrator__updateMissingFileSystemVolumeUuidInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = (void *)MEMORY[0x1E4F8BA08];
  id v3 = a2;
  id v4 = [v2 UUIDString];
  [v3 setUuid:v4];

  return 1;
}

- (BOOL)_deleteExtraneousAdjustedFullSizeResourcesForSloMoAssetsWithStore:(id)a3
{
  v29[4] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _deleteExtraneousAdjustedFullSizeResourcesForSloMoAssetsWithStore:]", *MEMORY[0x1E4F1C1C0]);
  int v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLInternalResource entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"asset.%K == %d", @"kindSubtype", 101);
  v29[0] = v11;
  id v12 = +[PLManagedAsset predicateForAdjustedAssetsWithKeyPathToAsset:@"asset"];
  v29[1] = v12;
  os_log_type_t v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K <= %d", @"localAvailability", 0xFFFFFFFFLL);
  v29[2] = v13;
  uint32_t v14 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"remoteAvailability", 0);
  v29[3] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:4];
  char v16 = [v10 andPredicateWithSubpredicates:v15];
  [v9 setPredicate:v16];

  os_log_type_t v17 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v9];
  [v17 setResultType:2];
  id v24 = 0;
  int v18 = [v6 executeRequest:v17 error:&v24];
  id v19 = v24;
  id v20 = PLMigrationGetLog();
  uint64_t v21 = v20;
  if (v18)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = [v18 result];
      *(_DWORD *)buf = 136315394;
      long long v26 = "-[PLModelMigrator _deleteExtraneousAdjustedFullSizeResourcesForSloMoAssetsWithStore:]";
      __int16 v27 = 2112;
      id v28 = v22;
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_DEFAULT, "%s deleted %@ resource rows.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    long long v26 = "-[PLModelMigrator _deleteExtraneousAdjustedFullSizeResourcesForSloMoAssetsWithStore:]";
    __int16 v27 = 2112;
    id v28 = v19;
    _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "%s failed: %@", buf, 0x16u);
  }

  [v6 reset];

  return v18 != 0;
}

- (BOOL)_fixImportedAssetsFromCMMSavedInDCIMWithWrongSavedAssetType:(id)a3
{
  v46[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v5 = *MEMORY[0x1E4F1C1C0];
  os_log_type_t v35 = v4;
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixImportedAssetsFromCMMSavedInDCIMWithWrongSavedAssetType:]", *MEMORY[0x1E4F1C1C0]);
  int v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"additionalAttributes.importedBy", 7);
  v46[0] = v11;
  id v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudPhotoLibraryAsset"), 1);
  v46[1] = v12;
  os_log_type_t v13 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K CONTAINS %@", @"directory", @"DCIM"];
  v46[2] = v13;
  uint32_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v46 count:3];
  uint64_t v15 = [v10 andPredicateWithSubpredicates:v14];
  [v9 setPredicate:v15];

  [v9 setResultType:1];
  id v37 = 0;
  char v16 = [v6 executeFetchRequest:v9 error:&v37];
  id v17 = v37;
  if (!v16)
  {
    int v18 = PLMigrationGetLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v31 = [v17 userInfo];
      *(_DWORD *)buf = 136315650;
      __int16 v41 = "-[PLModelMigrator _fixImportedAssetsFromCMMSavedInDCIMWithWrongSavedAssetType:]";
      __int16 v42 = 2112;
      id v43 = v17;
      __int16 v44 = 2112;
      __int16 v45 = v31;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "%s: failed to fetch object IDs: %@ %@", buf, 0x20u);
    }
    BOOL v27 = 0;
    goto LABEL_13;
  }
  if ([v16 count])
  {
    uint64_t v33 = v6;
    int v18 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixImportedAssetsFromCMMSavedInDCIMWithWrongSavedAssetType:]", v5);
    id v19 = (void *)MEMORY[0x1E4F1C038];
    id v20 = +[PLManagedAsset entityName];
    uint64_t v21 = [v19 batchUpdateRequestWithEntityName:v20];

    id v22 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"self in %@", v16];
    [v21 setPredicate:v22];

    id v38 = @"savedAssetType";
    uint64_t v23 = objc_msgSend(NSNumber, "numberWithShort:", objc_msgSend(MEMORY[0x1E4F8BA10], "savedAssetTypeForCameraAsset"));
    id v39 = v23;
    id v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    [v21 setPropertiesToUpdate:v24];

    [v21 setResultType:2];
    id v36 = 0;
    uint32_t v25 = [v18 executeRequest:v21 error:&v36];
    long long v26 = (char *)v36;
    BOOL v27 = v25 != 0;
    id v28 = PLMigrationGetLog();
    int v29 = v28;
    if (v25)
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = [v25 result];
        *(_DWORD *)buf = 138412290;
        __int16 v41 = v30;
        _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_DEFAULT, "Set savedAssetType to Camera for %@ imported CMM assets that are saved in DCIM folder with CloudPhotoLibrary savedAssetType", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v41 = v26;
      _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_ERROR, "Failed to fix imported CMM assets that are saved in DCIM folder with CloudPhotoLibrary savedAssetType with error with error %@", buf, 0xCu);
    }

    id v6 = v33;
LABEL_13:

    goto LABEL_14;
  }
  BOOL v27 = 1;
LABEL_14:

  return v27;
}

- (BOOL)_resetAnalysisStateForVideosInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __55__PLModelMigrator__resetAnalysisStateForVideosInStore___block_invoke;
  v4[3] = &unk_1E5866D78;
  v4[4] = self;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _resetAnalysisStateForVideosInStore:]", a3, v4);
}

uint64_t __55__PLModelMigrator__resetAnalysisStateForVideosInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) resetAnalysisStateForVideosWithMoc:a2];
}

- (BOOL)_deleteVideoThumbsMadeFromPreferredFrameInStore:(id)a3
{
  id v4 = a3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __67__PLModelMigrator__deleteVideoThumbsMadeFromPreferredFrameInStore___block_invoke;
  v7[3] = &unk_1E5866D50;
  void v7[4] = self;
  id v8 = v4;
  id v5 = v4;
  LOBYTE(self) = -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _deleteVideoThumbsMadeFromPreferredFrameInStore:]", v5, v7);

  return (char)self;
}

uint64_t __67__PLModelMigrator__deleteVideoThumbsMadeFromPreferredFrameInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLManagedAsset entityName];
  id v6 = [v4 fetchRequestWithEntityName:v5];

  int v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d AND %K != 0", @"kind", 1, @"videoKeyFrameValue");
  [v6 setPredicate:v7];

  [v6 setFetchBatchSize:100];
  id v20 = 0;
  id v8 = [v3 executeFetchRequest:v6 error:&v20];
  uint64_t v9 = v20;
  uint64_t v10 = [v8 count];
  if (v8)
  {
    uint64_t v11 = v10;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __67__PLModelMigrator__deleteVideoThumbsMadeFromPreferredFrameInStore___block_invoke_2;
    v18[3] = &unk_1E5875CB8;
    id v12 = *(void **)(a1 + 40);
    void v18[4] = *(void *)(a1 + 32);
    id v19 = v12;
    os_log_type_t v13 = [v3 enumerateWithIncrementalSaveUsingObjects:v8 shouldRefreshAfterSave:1 withBlock:v18];

    if (!v13)
    {
      os_log_type_t v13 = PLMigrationGetLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        id v22 = v11;
        _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Deleted thumbnails for %lu video assets with non-zero videoKeyFrame values and marked for rebuild", buf, 0xCu);
      }
      uint64_t v14 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v9;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "Failed to fetch video assets with non-zero videoKeyFrame values with error %@", buf, 0xCu);
    }

    os_log_type_t v13 = 0;
  }
  char v16 = PLMigrationGetLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v22 = v13;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "Failed to enumerate thumbnails for video assets with non-zero videoKeyFrame values with error %@", buf, 0xCu);
  }

  uint64_t v14 = 0;
LABEL_12:

  return v14;
}

void __67__PLModelMigrator__deleteVideoThumbsMadeFromPreferredFrameInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v8 = a2;
  id v4 = [v2 _migrationThumbnailManagerWithStore:v3];
  id v5 = [v8 thumbnailIdentifier];
  uint64_t v6 = (int)[v8 thumbnailIndex];
  int v7 = [v8 uuid];
  [v4 deleteThumbnailsWithIdentifier:v5 orIndex:v6 uuid:v7];

  [v8 setEffectiveThumbnailIndex:0x7FFFFFFFFFFFFFFFLL];
}

- (BOOL)_filterSceneClassificationsInStore:(id)a3
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v26 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  id v24 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _filterSceneClassificationsInStore:]");
  uint32_t v25 = [NSString stringWithFormat:@"%@-%@", @"scene-thresholds", &unk_1EEBEE070];
  id v4 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  id v5 = [v4 URLForResource:v25 withExtension:@"plist"];

  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v5];
  uint64_t v23 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v26, "-[PLModelMigrator _filterSceneClassificationsInStore:]", *MEMORY[0x1E4F1C1C0]);
  int v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLSceneClassification entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  [v9 setFetchBatchSize:100];
  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"sceneIdentifier >= 0"];
  [v9 setPredicate:v10];
  if (v6)
  {
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = &v33;
    uint64_t v34 = 0x2020000000;
    uint64_t v35 = 0;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = __54__PLModelMigrator__filterSceneClassificationsInStore___block_invoke;
    void v28[3] = &unk_1E5866D28;
    id v29 = v6;
    id v30 = &v33;
    if ([(PLModelMigrator *)self _runMigrationStepWithName:v24 fetchRequest:v9 store:v26 migrationHandler:v28])
    {
      uint64_t v11 = PLMigrationGetLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [NSNumber numberWithUnsignedInteger:*(void *)(*((void *)&v33 + 1) + 24)];
        *(_DWORD *)buf = 138412290;
        __int16 v32 = v12;
        _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Deleted %@ sceneclassifications", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = PLMigrationGetLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "Failed to delete sceneclassifications", buf, 2u);
      }
    }

    _Block_object_dispose(&v33, 8);
    BOOL v17 = 1;
  }
  else
  {
    os_log_type_t v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v33) = 138412290;
      *(void *)((char *)&v33 + 4) = v5;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Failed to located scene thresholds file: %@. Deleting everying", (uint8_t *)&v33, 0xCu);
    }

    uint64_t v14 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v9];
    [v14 setResultType:2];
    id v27 = 0;
    uint64_t v15 = [v23 executeRequest:v14 error:&v27];
    id v16 = v27;
    BOOL v17 = v15 != 0;
    int v18 = PLMigrationGetLog();
    id v19 = v18;
    if (v15)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = [v15 result];
        LODWORD(v33) = 138412290;
        *(void *)((char *)&v33 + 4) = v20;
        _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_DEFAULT, "Deleted %@ sceneclassifications", (uint8_t *)&v33, 0xCu);
      }
    }
    else if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v33) = 138412290;
      *(void *)((char *)&v33 + 4) = v16;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "Failed to delete sceneclassifications with error: %@", (uint8_t *)&v33, 0xCu);
    }
  }

  return v17;
}

uint64_t __54__PLModelMigrator__filterSceneClassificationsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 managedObjectContext];
  id v5 = v3;
  uint64_t v6 = NSString;
  int v7 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v5, "sceneIdentifier"));
  id v8 = [v6 stringWithFormat:@"%@", v7];

  uint64_t v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];

  if (v9)
  {
    uint64_t v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];
    [v10 doubleValue];
    double v12 = v11;
  }
  else
  {
    double v12 = 1.79769313e308;
  }
  [v5 confidence];
  if (v13 < v12)
  {
    [v4 deleteObject:v5];
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }

  return 1;
}

- (BOOL)_ensureAllUserVerifiedPersonsHaveFaceCropsInStore:(id)a3
{
  id v4 = a3;
  id v5 = +[PLPerson fetchRequest];
  uint64_t v6 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K = %d AND %K.@count > 0 AND SUBQUERY(%K, $f, $f.%K = %d).@count = 0", @"verifiedType", 1, @"detectedFaces", @"detectedFaces", @"nameSource", 1];
  [v5 setPredicate:v6];

  int v7 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _ensureAllUserVerifiedPersonsHaveFaceCropsInStore:]");
  LOBYTE(self) = [(PLModelMigrator *)self _runMigrationStepWithName:v7 fetchRequest:v5 store:v4 migrationHandler:&__block_literal_global_2374];

  return (char)self;
}

uint64_t __69__PLModelMigrator__ensureAllUserVerifiedPersonsHaveFaceCropsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 keyFace];

  if (v3)
  {
    id v4 = [v2 keyFace];
    [v4 setEffectiveNameSource:1];
  }
  return 1;
}

- (BOOL)_removeUntrackedPersonMetadataInStore:(id)a3
{
  v83[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _removeUntrackedPersonMetadataInStore:]", *MEMORY[0x1E4F1C1C0]);
  int v7 = +[PLPerson fetchRequest];
  id v8 = +[PLPerson predicateForPersistence];
  [v7 setPredicate:v8];

  [v7 setFetchBatchSize:100];
  v83[0] = @"personUUID";
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v83 count:1];
  [v7 setPropertiesToFetch:v9];

  id v74 = 0;
  uint64_t v10 = [v6 executeFetchRequest:v7 error:&v74];
  id v11 = v74;
  if (v10)
  {
    id v55 = v7;
    __int16 v56 = v6;
    double v12 = [MEMORY[0x1E4F1CA80] set];
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    id v54 = v10;
    id v13 = v10;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v70 objects:v82 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v71;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v71 != v16) {
            objc_enumerationMutation(v13);
          }
          int v18 = [*(id *)(*((void *)&v70 + 1) + 8 * i) personUUID];
          [v12 addObject:v18];
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v70 objects:v82 count:16];
      }
      while (v15);
    }

    id v19 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v20 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v21 = [(PLModelMigrator *)self pathManager];
    id v22 = [v21 privateDirectoryWithSubType:5 createIfNeeded:0 error:0];
    uint64_t v23 = [v20 fileURLWithPath:v22 isDirectory:1];

    id v69 = v11;
    id v24 = [v19 contentsOfDirectoryAtURL:v23 includingPropertiesForKeys:0 options:1 error:&v69];
    id v25 = v69;

    long long v60 = v19;
    __int16 v53 = v23;
    id v57 = v24;
    if (v24)
    {
      uint64_t v51 = v5;
      id v52 = v4;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      obuint64_t j = v24;
      uint64_t v26 = [obj countByEnumeratingWithState:&v65 objects:v81 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        long long v58 = 0;
        uint64_t v28 = *(void *)v66;
        char v59 = 1;
        do
        {
          for (uint64_t j = 0; j != v27; ++j)
          {
            if (*(void *)v66 != v28) {
              objc_enumerationMutation(obj);
            }
            id v30 = *(void **)(*((void *)&v65 + 1) + 8 * j);
            id v31 = [v30 path];
            id v64 = 0;
            BOOL v32 = +[PLPersistedPersonMetadata isValidPath:v31 outPersonUUID:&v64];
            id v33 = v64;

            if (v32 && ([v12 containsObject:v33] & 1) == 0)
            {
              id v63 = v25;
              char v34 = [v60 removeItemAtURL:v30 error:&v63];
              id v35 = v63;

              if (v34)
              {
                ++v58;
                char v59 = 1;
              }
              else
              {
                uint64_t v36 = PLMigrationGetLog();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                {
                  id v37 = [v35 userInfo];
                  int buf = 136315650;
                  v76 = "-[PLModelMigrator _removeUntrackedPersonMetadataInStore:]";
                  __int16 v77 = 2112;
                  id v78 = v35;
                  __int16 v79 = 2112;
                  v80 = v37;
                  _os_log_impl(&dword_19B3C7000, v36, OS_LOG_TYPE_ERROR, "%s: failed to remove item: %@ %@", (uint8_t *)&buf, 0x20u);
                }
                char v59 = 0;
              }
              id v25 = v35;
            }
          }
          uint64_t v27 = [obj countByEnumeratingWithState:&v65 objects:v81 count:16];
        }
        while (v27);
      }
      else
      {
        long long v58 = 0;
        char v59 = 1;
      }

      long long v48 = PLMigrationGetLog();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        int buf = 134217984;
        v76 = v58;
        _os_log_impl(&dword_19B3C7000, v48, OS_LOG_TYPE_DEFAULT, "Removed %lu untracked person metadata files", (uint8_t *)&buf, 0xCu);
      }

      id v5 = v51;
      id v4 = v52;
      int v7 = v55;
      uint64_t v6 = v56;
      long long v49 = v53;
      uint64_t v10 = v54;
      char v47 = v59;
    }
    else
    {
      unsigned __int8 v62 = 0;
      __int16 v41 = [v23 path];
      int v42 = [v19 fileExistsAtPath:v41 isDirectory:&v62];
      int v43 = v62;

      __int16 v44 = PLMigrationGetLog();
      __int16 v45 = v44;
      if (v42 && v43)
      {
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          id v46 = [v25 userInfo];
          int buf = 136315650;
          v76 = "-[PLModelMigrator _removeUntrackedPersonMetadataInStore:]";
          __int16 v77 = 2112;
          id v78 = v25;
          __int16 v79 = 2112;
          v80 = v46;
          _os_log_impl(&dword_19B3C7000, v45, OS_LOG_TYPE_ERROR, "%s: failed to return contents of directory: %@ %@", (uint8_t *)&buf, 0x20u);
        }
        char v47 = 0;
      }
      else
      {
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          int buf = 136315138;
          v76 = "-[PLModelMigrator _removeUntrackedPersonMetadataInStore:]";
          _os_log_impl(&dword_19B3C7000, v45, OS_LOG_TYPE_DEFAULT, "%s: no faces metadata directory exists", (uint8_t *)&buf, 0xCu);
        }
        char v47 = 1;
      }
      int v7 = v55;
      uint64_t v6 = v56;
      long long v49 = v53;
      uint64_t v10 = v54;
    }
    BOOL v40 = v47 & 1;
    id v11 = v25;
  }
  else
  {
    id v38 = PLMigrationGetLog();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      id v39 = [v11 userInfo];
      int buf = 136315650;
      v76 = "-[PLModelMigrator _removeUntrackedPersonMetadataInStore:]";
      __int16 v77 = 2112;
      id v78 = v11;
      __int16 v79 = 2112;
      v80 = v39;
      _os_log_impl(&dword_19B3C7000, v38, OS_LOG_TYPE_ERROR, "%s: failed to fetch persons: %@ %@", (uint8_t *)&buf, 0x20u);
    }
    BOOL v40 = 0;
  }

  return v40;
}

- (BOOL)_populateCloudVerifiedTypeOnPersonsInStore:(id)a3
{
  v28[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateCloudVerifiedTypeOnPersonsInStore:]", *MEMORY[0x1E4F1C1C0]);
  int v7 = (void *)MEMORY[0x1E4F1C038];
  id v8 = +[PLPerson entityName];
  uint64_t v9 = [v7 batchUpdateRequestWithEntityName:v8];

  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d AND %K != %d", @"verifiedType", 0, @"verifiedType", 0xFFFFFFFFLL);
  [v9 setPredicate:v10];

  uint64_t v27 = @"cloudVerifiedType";
  id v11 = [MEMORY[0x1E4F28C68] expressionForKeyPath:@"verifiedType"];
  v28[0] = v11;
  double v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:&v27 count:1];
  [v9 setPropertiesToUpdate:v12];

  [v9 setResultType:2];
  id v20 = 0;
  id v13 = [v6 executeRequest:v9 error:&v20];
  id v14 = v20;
  uint64_t v15 = PLMigrationGetLog();
  uint64_t v16 = v15;
  if (v13)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v17 = [v13 result];
      *(_DWORD *)int buf = 138412290;
      id v22 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Populated cloud verified type for %@ persons", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    int v18 = [v14 userInfo];
    *(_DWORD *)int buf = 136315650;
    id v22 = "-[PLModelMigrator _populateCloudVerifiedTypeOnPersonsInStore:]";
    __int16 v23 = 2112;
    id v24 = v14;
    __int16 v25 = 2112;
    uint64_t v26 = v18;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
  }

  return v13 != 0;
}

- (BOOL)_populateCloudNameSourceOnFacesInStore:(id)a3
{
  v28[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateCloudNameSourceOnFacesInStore:]", *MEMORY[0x1E4F1C1C0]);
  int v7 = (void *)MEMORY[0x1E4F1C038];
  id v8 = +[PLDetectedFace entityName];
  uint64_t v9 = [v7 batchUpdateRequestWithEntityName:v8];

  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d AND %K != %d", @"nameSource", 0, @"nameSource", 2);
  [v9 setPredicate:v10];

  uint64_t v27 = @"cloudNameSource";
  id v11 = [MEMORY[0x1E4F28C68] expressionForKeyPath:@"nameSource"];
  v28[0] = v11;
  double v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:&v27 count:1];
  [v9 setPropertiesToUpdate:v12];

  [v9 setResultType:2];
  id v20 = 0;
  id v13 = [v6 executeRequest:v9 error:&v20];
  id v14 = v20;
  uint64_t v15 = PLMigrationGetLog();
  uint64_t v16 = v15;
  if (v13)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v17 = [v13 result];
      *(_DWORD *)int buf = 138412290;
      id v22 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Populated cloud name source for %@ faces", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    int v18 = [v14 userInfo];
    *(_DWORD *)int buf = 136315650;
    id v22 = "-[PLModelMigrator _populateCloudNameSourceOnFacesInStore:]";
    __int16 v23 = 2112;
    id v24 = v14;
    __int16 v25 = 2112;
    uint64_t v26 = v18;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
  }

  return v13 != 0;
}

- (BOOL)_markMigrationVerifiedTypePersonsInStore:(id)a3
{
  v58[5] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  id v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _markMigrationVerifiedTypePersonsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"verifiedType", 1);
  int v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K.@count = 0", @"detectedFaces");
  uint64_t v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K = nil OR %K = %@", @"fullName", @"fullName", &stru_1EEB2EB80];
  uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = nil", @"contactMatchingDictionary");
  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"type", 0);
  id v11 = (void *)MEMORY[0x1E4F28BA0];
  v58[0] = v6;
  v58[1] = v7;
  __int16 v45 = (void *)v9;
  id v46 = (void *)v8;
  v58[2] = v8;
  v58[3] = v9;
  __int16 v44 = (void *)v10;
  void v58[4] = v10;
  double v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v58 count:5];
  uint64_t v13 = [v11 andPredicateWithSubpredicates:v12];

  id v14 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v15 = +[PLPerson entityName];
  uint64_t v16 = [v14 fetchRequestWithEntityName:v15];

  int v43 = (void *)v13;
  [v16 setPredicate:v13];
  [v16 setResultType:1];
  id v49 = 0;
  BOOL v17 = [v5 executeFetchRequest:v16 error:&v49];
  id v18 = v49;
  if (v17)
  {
    id v40 = v4;
    id v19 = (void *)MEMORY[0x1E4F1C038];
    id v20 = +[PLPerson entityName];
    uint64_t v21 = [v19 batchUpdateRequestWithEntityName:v20];

    id v22 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"self IN %@", v17];
    [v21 setPredicate:v22];

    __int16 v56 = @"verifiedType";
    id v57 = &unk_1EEBEE058;
    __int16 v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v57 forKeys:&v56 count:1];
    [v21 setPropertiesToUpdate:v23];

    [v21 setResultType:2];
    id v48 = v18;
    id v24 = [v5 executeRequest:v21 error:&v48];
    id v25 = v48;

    BOOL v26 = v24 != 0;
    uint64_t v27 = PLMigrationGetLog();
    uint64_t v28 = v27;
    if (v24)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        [v24 result];
        __int16 v41 = v7;
        id v29 = v6;
        id v30 = v5;
        id v31 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)int buf = 138412290;
        uint64_t v51 = v31;
        BOOL v32 = "Mark migration verified type on %@ persons";
        id v33 = v28;
        os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
        uint32_t v35 = 12;
LABEL_10:
        _os_log_impl(&dword_19B3C7000, v33, v34, v32, buf, v35);

        id v5 = v30;
        uint64_t v6 = v29;
        int v7 = v41;
      }
    }
    else if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      [v25 userInfo];
      __int16 v41 = v7;
      id v29 = v6;
      id v30 = v5;
      id v31 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136315650;
      uint64_t v51 = "-[PLModelMigrator _markMigrationVerifiedTypePersonsInStore:]";
      __int16 v52 = 2112;
      id v53 = v25;
      __int16 v54 = 2112;
      id v55 = v31;
      BOOL v32 = "%s: failed to update: %@ %@";
      id v33 = v28;
      os_log_type_t v34 = OS_LOG_TYPE_ERROR;
      uint32_t v35 = 32;
      goto LABEL_10;
    }

    id v4 = v40;
    goto LABEL_12;
  }
  int v42 = v7;
  uint64_t v36 = v6;
  id v37 = v5;
  uint64_t v21 = PLMigrationGetLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    id v38 = [v18 userInfo];
    *(_DWORD *)int buf = 136315650;
    uint64_t v51 = "-[PLModelMigrator _markMigrationVerifiedTypePersonsInStore:]";
    __int16 v52 = 2112;
    id v53 = v18;
    __int16 v54 = 2112;
    id v55 = v38;
    _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "%s: failed to fetch object IDs: %@ %@", buf, 0x20u);
  }
  BOOL v26 = 0;
  id v25 = v18;
  id v5 = v37;
  uint64_t v6 = v36;
  int v7 = v42;
LABEL_12:

  return v26;
}

- (BOOL)_storeContainsFaceCrops:(id)a3 success:(BOOL *)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  int v7 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v6, "-[PLModelMigrator _storeContainsFaceCrops:success:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v9 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v10 = +[PLFaceCrop entityName];
  id v11 = [v9 fetchRequestWithEntityName:v10];

  [v11 setFetchLimit:1];
  id v19 = 0;
  uint64_t v12 = [v8 countForFetchRequest:v11 error:&v19];
  id v13 = v19;
  BOOL v14 = v12 != 0x7FFFFFFFFFFFFFFFLL;
  if (v12 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      [v13 userInfo];
      v16 = id v18 = v7;
      *(_DWORD *)int buf = 136315650;
      uint64_t v21 = "-[PLModelMigrator _storeContainsFaceCrops:success:]";
      __int16 v22 = 2112;
      id v23 = v13;
      __int16 v24 = 2112;
      id v25 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "%s failed to count face crops in store: %@ %@", buf, 0x20u);

      int v7 = v18;
    }
    goto LABEL_7;
  }
  if (v12)
  {
    uint64_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Library contains at least 1 faceCrop, skipping some steps to prepare local model for faces sync", buf, 2u);
    }
LABEL_7:

    goto LABEL_8;
  }
  BOOL v14 = 0;
LABEL_8:

  if (a4) {
    *a4 = v12 != 0x7FFFFFFFFFFFFFFFLL;
  }

  return v14;
}

- (BOOL)_removeAutoloopCacheIfExists
{
  id v2 = (void *)MEMORY[0x1E4F1CB10];
  id v3 = [(PLModelMigrator *)self pathManager];
  id v4 = [v3 privateCacheDirectoryWithSubType:11];
  char v5 = 1;
  id v6 = [v2 fileURLWithPath:v4 isDirectory:1];

  if (v6)
  {
    int v7 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v8 = [v6 path];
    int v9 = [v7 directoryExistsAtPath:v8];

    if (v9)
    {
      uint64_t v10 = [MEMORY[0x1E4F28CB8] defaultManager];
      char v5 = [v10 removeItemAtURL:v6 error:0];
    }
    else
    {
      char v5 = 1;
    }
  }

  return v5;
}

- (BOOL)_fixUTIforSlowMoInStore:(id)a3
{
  v31[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  int v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixUTIforSlowMoInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = objc_alloc(MEMORY[0x1E4F1C038]);
  int v9 = +[PLManagedAsset entityName];
  uint64_t v10 = (void *)[v8 initWithEntityName:v9];

  [v10 setResultType:2];
  id v11 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v12 = [(id)*MEMORY[0x1E4F44410] identifier];
  id v13 = [v11 predicateWithFormat:@"%K = %d AND %K = %@", @"kindSubtype", 101, @"uniformTypeIdentifier", v12];

  [v10 setPredicate:v13];
  id v30 = @"uniformTypeIdentifier";
  BOOL v14 = [(id)*MEMORY[0x1E4F44490] identifier];
  v31[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:&v30 count:1];
  [v10 setPropertiesToUpdate:v15];

  id v23 = 0;
  uint64_t v16 = [v7 executeRequest:v10 error:&v23];
  id v17 = v23;
  id v18 = PLMigrationGetLog();
  id v19 = v18;
  if (v16)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [v16 result];
      *(_DWORD *)int buf = 138412290;
      id v25 = v20;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_DEFAULT, "Fixed UTI for %@ slow-mo videos", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = [v17 userInfo];
    *(_DWORD *)int buf = 136315650;
    id v25 = "-[PLModelMigrator _fixUTIforSlowMoInStore:]";
    __int16 v26 = 2112;
    id v27 = v17;
    __int16 v28 = 2112;
    id v29 = v21;
    _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
  }

  return v16 != 0;
}

- (BOOL)_unquarantineClass:(Class)a3 inManagedObject:(id)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1E4F1C0D0];
  id v6 = a4;
  int v7 = [(objc_class *)a3 entityName];
  id v8 = [v5 fetchRequestWithEntityName:v7];

  int v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudLocalState == %d", 4);
  [v8 setPredicate:v9];
  [v8 setFetchBatchSize:100];
  uint64_t v10 = [v6 executeFetchRequest:v8 error:0];
  id v11 = [v6 enumerateWithIncrementalSaveUsingObjects:v10 withBlock:&__block_literal_global_2328];

  uint64_t v12 = PLMigrationGetLog();
  id v13 = v12;
  if (v11)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      BOOL v14 = [(objc_class *)a3 entityName];
      uint64_t v15 = [v11 userInfo];
      *(_DWORD *)int buf = 138412802;
      uint64_t v19 = (uint64_t)v14;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      id v23 = v15;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "unquarantined %@ failed: %@ %@", buf, 0x20u);

LABEL_6:
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = [v10 count];
    BOOL v14 = [(objc_class *)a3 entityName];
    *(_DWORD *)int buf = 134218242;
    uint64_t v19 = v16;
    __int16 v20 = 2112;
    uint64_t v21 = v14;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "unquarantined %lu %@", buf, 0x16u);
    goto LABEL_6;
  }

  return v11 == 0;
}

void __54__PLModelMigrator__unquarantineClass_inManagedObject___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v3;
    [v2 setUploadAttempts:0];
    [v2 setLastUploadAttemptDate:0];
  }
  if (objc_opt_respondsToSelector()) {
    [v3 setCloudLocalState:0];
  }
}

- (BOOL)_unquarantinedQuarantinedItems:(id)a3
{
  v19[8] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _unquarantinedQuarantinedItems:]", *MEMORY[0x1E4F1C1C0]);
  v19[0] = objc_opt_class();
  v19[1] = objc_opt_class();
  void v19[2] = objc_opt_class();
  v19[3] = objc_opt_class();
  v19[4] = objc_opt_class();
  v19[5] = objc_opt_class();
  v19[6] = objc_opt_class();
  v19[7] = objc_opt_class();
  [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        if (!-[PLModelMigrator _unquarantineClass:inManagedObject:](self, "_unquarantineClass:inManagedObject:", *(void *)(*((void *)&v14 + 1) + 8 * i), v6, (void)v14))
        {
          BOOL v12 = 0;
          goto LABEL_11;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  BOOL v12 = 1;
LABEL_11:

  return v12;
}

- (BOOL)_retryQuarantinedAssetsAndFixResourceRelation:(id)a3
{
  v22[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _retryQuarantinedAssetsAndFixResourceRelation:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLCloudResource entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  v22[0] = @"cloudMaster";
  v22[1] = @"asset";
  uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v22 count:2];
  [v9 setRelationshipKeyPathsForPrefetching:v10];

  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"cloudMaster != nil && asset != nil"];
  [v9 setPredicate:v11];
  [v9 setFetchBatchSize:100];
  BOOL v12 = [v6 executeFetchRequest:v9 error:0];
  id v13 = [v6 enumerateWithIncrementalSaveUsingObjects:v12 withBlock:&__block_literal_global_2325];
  long long v14 = PLMigrationGetLog();
  long long v15 = v14;
  if (v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      long long v16 = [v13 userInfo];
      int v18 = 138412546;
      uint64_t v19 = (uint64_t)v13;
      __int16 v20 = 2112;
      uint64_t v21 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_retryQuarantinedAssetsAndFixResourceRelation saveResource: failed: %@ %@", (uint8_t *)&v18, 0x16u);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 134217984;
    uint64_t v19 = [v12 count];
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Fixed %lu resources", (uint8_t *)&v18, 0xCu);
  }

  return v13 == 0;
}

void __65__PLModelMigrator__retryQuarantinedAssetsAndFixResourceRelation___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v4 = [v2 asset];
  [v4 setUploadAttempts:0];
  [v4 setLastUploadAttemptDate:0];
  [v4 setCloudLocalState:0];
  id v3 = [v2 cloudMaster];
  [v3 setCloudLocalState:0];
  [v2 setAsset:0];
}

- (BOOL)_deletePersonsMissingUUIDInStore:(id)a3
{
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = a3;
  id v6 = +[PLPerson entityName];
  id v7 = [v4 fetchRequestWithEntityName:v6];

  uint64_t v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"personUUID == nil OR personUUID == ''"];
  [v7 setPredicate:v8];

  LOBYTE(self) = [(PLModelMigrator *)self _runMigrationStepWithName:@"deletePersonsMissingUUID" fetchRequest:v7 store:v5 migrationHandler:&__block_literal_global_2320];
  return (char)self;
}

uint64_t __52__PLModelMigrator__deletePersonsMissingUUIDInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_DEFAULT, "Deleting person missing UUID: %@", (uint8_t *)&v5, 0xCu);
  }

  [v2 deletePersonWithReason:1];
  return 1;
}

- (BOOL)_repushPersonsWithMergeTargetInStore:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _repushPersonsWithMergeTargetInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLPerson entityName];
  uint64_t v10 = [v8 fetchRequestWithEntityName:v9];

  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"mergeTargetPerson != nil"];
  [v10 setPredicate:v11];

  [v10 setFetchBatchSize:100];
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000;
  int v25 = 0;
  BOOL v12 = [v7 executeFetchRequest:v10 error:0];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __56__PLModelMigrator__repushPersonsWithMergeTargetInStore___block_invoke;
  void v21[3] = &unk_1E5866BD8;
  void v21[4] = &v22;
  id v13 = [v7 enumerateWithIncrementalSaveUsingObjects:v12 withBlock:v21];
  if (v13)
  {
    long long v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      id v27 = v13;
      long long v15 = "Failed to fetch persons with merge target: %@";
      long long v16 = v14;
      os_log_type_t v17 = OS_LOG_TYPE_ERROR;
      uint32_t v18 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v16, v17, v15, buf, v18);
    }
  }
  else
  {
    long long v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *((_DWORD *)v23 + 6);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v27) = v19;
      long long v15 = "Will repush %d persons with merge target";
      long long v16 = v14;
      os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
      uint32_t v18 = 8;
      goto LABEL_6;
    }
  }

  [v7 reset];
  _Block_object_dispose(&v22, 8);

  return v13 == 0;
}

void __56__PLModelMigrator__repushPersonsWithMergeTargetInStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 cloudLocalState])
  {
    [v3 setCloudLocalState:0];
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

- (BOOL)_persistStoreUUIDToMobileCPLPlist:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = (void *)MEMORY[0x1E4F8B890];
  uint64_t v7 = *MEMORY[0x1E4F8BB00];
  uint64_t v8 = [(PLModelMigrator *)self pathManager];
  uint64_t v9 = [v6 readCPLPlistObjectWithKey:v7 pathManager:v8];

  if (!v9)
  {
    uint64_t v10 = [v4 metadata];
    id v11 = [v10 objectForKey:*MEMORY[0x1E4F1BF90]];

    BOOL v12 = (void *)MEMORY[0x1E4F8B890];
    id v13 = [(PLModelMigrator *)self pathManager];
    [v12 saveCPLPlistObject:v11 forKey:v7 pathManager:v13];

    long long v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      os_log_type_t v17 = v11;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Persist the storeUUID %@", (uint8_t *)&v16, 0xCu);
    }
  }

  return 1;
}

- (BOOL)_fixNilCloudMasterGUID:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000;
  int v30 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixNilCloudMasterGUID:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLCloudMaster entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"cloudMasterGUID == nil OR cloudMasterGUID == ''"];
  [v9 setPredicate:v10];
  [v9 setFetchBatchSize:100];
  id v11 = [v6 executeFetchRequest:v9 error:0];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __42__PLModelMigrator__fixNilCloudMasterGUID___block_invoke;
  v19[3] = &unk_1E5866CC0;
  uint64_t v21 = &v27;
  id v12 = v6;
  id v20 = v12;
  uint64_t v22 = &v23;
  id v13 = [v12 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:v19];
  if (v13)
  {
    long long v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      long long v15 = [v13 userInfo];
      *(_DWORD *)int buf = 138412546;
      *(void *)BOOL v32 = v13;
      *(_WORD *)&v32[8] = 2112;
      id v33 = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_fixNilCloudMasterGUID failed: %@ %@", buf, 0x16u);
    }
  }
  else
  {
    long long v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *((_DWORD *)v28 + 6);
      int v17 = *((_DWORD *)v24 + 6);
      *(_DWORD *)int buf = 67109376;
      *(_DWORD *)BOOL v32 = v16;
      *(_WORD *)&v32[4] = 1024;
      *(_DWORD *)&v32[6] = v17;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Fixed %d assets, deleted %d masters", buf, 0xEu);
    }
  }

  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);

  return v13 == 0;
}

void __42__PLModelMigrator__fixNilCloudMasterGUID___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 assets];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)v17;
    *(void *)&long long v6 = 138412290;
    long long v15 = v6;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        objc_msgSend(v10, "setCloudLocalState:", 0, v15);
        [v10 setMaster:0];
        ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        id v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = [v10 uuid];
          *(_DWORD *)int buf = v15;
          uint64_t v21 = v12;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Marking asset %@ unpushed, master doesn't have a valid cloudMasterGUID", buf, 0xCu);
        }
      }
      uint64_t v7 = [v4 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v7);
  }
  id v13 = PLMigrationGetLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    long long v14 = [v3 scopedIdentifier];
    *(_DWORD *)int buf = 138412290;
    uint64_t v21 = v14;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Deleting master %@ to force master creation", buf, 0xCu);
  }
  [*(id *)(a1 + 32) deleteObject:v3];
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

- (BOOL)_fixAssetMasterResources:(id)a3
{
  v41[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v32 = 0;
  id v33 = &v32;
  uint64_t v34 = 0x2020000000;
  int v35 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  int v31 = 0;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixAssetMasterResources:]", *MEMORY[0x1E4F1C1C0]);
  long long v6 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v7 = +[PLManagedAsset entityName];
  uint64_t v8 = [v6 fetchRequestWithEntityName:v7];

  v41[0] = @"master";
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:1];
  [v8 setRelationshipKeyPathsForPrefetching:v9];

  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudLocalState == %d", 2);
  [v8 setPredicate:v10];
  [v8 setFetchBatchSize:100];
  id v27 = 0;
  id v11 = [v5 executeFetchRequest:v8 error:&v27];
  id v12 = v27;
  if (v11)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = __44__PLModelMigrator__fixAssetMasterResources___block_invoke;
    void v23[3] = &unk_1E5866C98;
    uint64_t v25 = &v32;
    int v26 = &v28;
    uint64_t v24 = v5;
    id v13 = [v24 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:v23];
    BOOL v14 = v13 == 0;
    if (v13)
    {
      long long v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        long long v16 = [v13 userInfo];
        *(_DWORD *)int buf = 138412546;
        id v37 = (const char *)v13;
        __int16 v38 = 2112;
        *(void *)id v39 = v16;
        _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_fixAssetMasterResources failed: %@ %@", buf, 0x16u);
      }
    }
    else
    {
      long long v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = [v11 count];
        int v19 = *((_DWORD *)v33 + 6);
        int v20 = *((_DWORD *)v29 + 6);
        *(_DWORD *)int buf = 134218496;
        id v37 = (const char *)v18;
        __int16 v38 = 1024;
        *(_DWORD *)id v39 = v19;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = v20;
        _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Fixed %lu assets (noMaster: %d, noOriginal: %d)", buf, 0x18u);
      }
    }

    long long v17 = v24;
  }
  else
  {
    long long v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      id v37 = "-[PLModelMigrator _fixAssetMasterResources:]";
      __int16 v38 = 2112;
      *(void *)id v39 = v10;
      *(_WORD *)&v39[8] = 2112;
      id v40 = v12;
      _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "%s fetch failed with predicate %@, error: %@", buf, 0x20u);
    }
    BOOL v14 = 0;
  }

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);

  return v14;
}

void __44__PLModelMigrator__fixAssetMasterResources___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 master];
  if (v4)
  {
    uint64_t v5 = [v3 uuid];
    long long v6 = +[PLCloudResource cloudResourceForResourceType:1 forAssetUuid:v5 forCloudMaster:v4];

    if (!v6)
    {
      id v24 = v3;
      uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
      uint64_t v8 = v4;
      uint64_t v9 = [v4 assets];
      uint64_t v10 = [v7 setWithSet:v9];

      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      id v11 = v10;
      uint64_t v12 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v26 != v14) {
              objc_enumerationMutation(v11);
            }
            long long v16 = *(void **)(*((void *)&v25 + 1) + 8 * i);
            [v16 setCloudLocalState:0];
            [v16 setMaster:0];
            ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
            long long v17 = PLMigrationGetLog();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v18 = [v16 uuid];
              int v19 = [v8 scopedIdentifier];
              *(_DWORD *)int buf = 138412546;
              uint64_t v30 = v18;
              __int16 v31 = 2112;
              uint64_t v32 = v19;
              _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "Marking asset %@ in master %@ unpushed, don't have original resource", buf, 0x16u);
            }
          }
          uint64_t v13 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
        }
        while (v13);
      }

      int v20 = PLMigrationGetLog();
      id v4 = v8;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = [v8 scopedIdentifier];
        *(_DWORD *)int buf = 138412290;
        uint64_t v30 = v21;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "Deleting master %@ to force master creation", buf, 0xCu);
      }
      [*(id *)(a1 + 32) deleteObject:v8];

      long long v6 = 0;
      id v3 = v24;
    }
  }
  else
  {
    [v3 setCloudLocalState:0];
    uint64_t v22 = PLMigrationGetLog();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = [v3 uuid];
      *(_DWORD *)int buf = 138412290;
      uint64_t v30 = v23;
      _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_DEFAULT, "Marking asset %@ unpushed, don't have master", buf, 0xCu);
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

- (BOOL)_repushAssetsWithAnyUserConfirmedFaceInStore:(id)a3
{
  id v4 = (void *)MEMORY[0x1E4F28F60];
  id v5 = a3;
  long long v6 = [v4 predicateWithFormat:@"SUBQUERY(detectedFaces, $f, $f.nameSource == %d).@count != 0", 1];
  LOBYTE(self) = [(PLModelMigrator *)self _repushAssetsMatchingPredicate:v6 inStore:v5 withMaster:0];

  return (char)self;
}

- (BOOL)_repushAssetsMatchingPredicate:(id)a3 inStore:(id)a4 withMaster:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v32 = a3;
  id v8 = a4;
  uint64_t v9 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v9);
  uint64_t v29 = v8;
  uint64_t v10 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v8, "-[PLModelMigrator _repushAssetsMatchingPredicate:inStore:withMaster:]", *MEMORY[0x1E4F1C1C0]);
  id v11 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v12 = +[PLManagedAsset entityName];
  uint64_t v13 = [v11 fetchRequestWithEntityName:v12];

  __int16 v31 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d AND %K != %d", @"cloudLocalState", 0, @"cloudLocalState", 4);
  uint64_t v14 = +[PLManagedAsset predicateForSupportedAssetTypesForUpload];
  long long v15 = [MEMORY[0x1E4F1CA48] array];
  [v15 addObject:v31];
  [v15 addObject:v14];
  if (v32) {
    objc_msgSend(v15, "addObject:");
  }
  long long v16 = [MEMORY[0x1E4F28BA0] andPredicateWithSubpredicates:v15];
  [v13 setPredicate:v16];

  [v13 setFetchBatchSize:100];
  id v39 = 0;
  long long v17 = [v10 executeFetchRequest:v13 error:&v39];
  id v18 = v39;
  if (v17)
  {
    *(void *)id v46 = 0;
    *(void *)&v46[8] = v46;
    *(void *)&v46[16] = 0x2020000000;
    id v47 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x2020000000;
    uint64_t v38 = 0;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    void v33[2] = __69__PLModelMigrator__repushAssetsMatchingPredicate_inStore_withMaster___block_invoke;
    void v33[3] = &unk_1E5866C70;
    BOOL v19 = v5;
    BOOL v34 = v5;
    void v33[4] = &v35;
    v33[5] = v46;
    int v20 = [v10 enumerateWithIncrementalSaveUsingObjects:v17 withBlock:v33];
    BOOL v21 = v20 == 0;
    if (v20)
    {
      uint64_t v22 = PLMigrationGetLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        __int16 v41 = "-[PLModelMigrator _repushAssetsMatchingPredicate:inStore:withMaster:]";
        __int16 v42 = 2112;
        int v43 = v20;
        _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "%s save failed with error: %@", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v22 = PLMigrationGetLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v24 = *(void **)(*(void *)&v46[8] + 24);
        if (v19)
        {
          long long v27 = *(void **)(*(void *)&v46[8] + 24);
          objc_msgSend(NSString, "stringWithFormat:", @"and %lu masters ", v36[3]);
          long long v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
          id v24 = v27;
        }
        else
        {
          long long v25 = &stru_1EEB2EB80;
        }
        long long v28 = v25;
        *(_DWORD *)int buf = 136315650;
        __int16 v41 = "-[PLModelMigrator _repushAssetsMatchingPredicate:inStore:withMaster:]";
        __int16 v42 = 2048;
        int v43 = v24;
        __int16 v44 = 2112;
        __int16 v45 = v25;
        _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_DEFAULT, "%s marked %lu assets %@to be repushed", buf, 0x20u);
        if (v19) {
      }
        }
    }

    _Block_object_dispose(&v35, 8);
    _Block_object_dispose(v46, 8);
  }
  else
  {
    uint64_t v23 = PLMigrationGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v46 = 136315650;
      *(void *)&void v46[4] = "-[PLModelMigrator _repushAssetsMatchingPredicate:inStore:withMaster:]";
      *(_WORD *)&v46[12] = 2112;
      *(void *)&v46[14] = v32;
      *(_WORD *)&v46[22] = 2112;
      id v47 = v18;
      _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "%s fetch failed with predicate %@, error: %@", v46, 0x20u);
    }

    BOOL v21 = 0;
  }

  return v21;
}

void __69__PLModelMigrator__repushAssetsMatchingPredicate_inStore_withMaster___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 setCloudLocalState:0];
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = [v4 master];
    [v3 setCloudLocalState:0];

    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

- (id)_predicateForInconsistentHeifAssets
{
  v9[3] = *MEMORY[0x1E4F143B8];
  id v2 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K ENDSWITH[c] '.jpg'", @"filename");
  id v3 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == 'public.data' OR %K == nil OR %K == ''", @"uniformTypeIdentifier", @"uniformTypeIdentifier", @"uniformTypeIdentifier");
  id v4 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K ENDSWITH[c] '.heic' OR %K ENDSWITH[c] '.heif'", @"additionalAttributes.originalFilename", @"additionalAttributes.originalFilename");
  BOOL v5 = (void *)MEMORY[0x1E4F28BA0];
  v9[0] = v3;
  v9[1] = v4;
  v9[2] = v2;
  long long v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:3];
  uint64_t v7 = [v5 andPredicateWithSubpredicates:v6];

  return v7;
}

- (void)_fixIncorrectHeifMetadataForAsset:(id)a3
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  long long v6 = [(PLModelMigrator *)self _predicateForInconsistentHeifAssets];
  if ([v6 evaluateWithObject:v5])
  {
    uint64_t v7 = PLMigrationGetLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = NSStringFromSelector(a2);
      *(_DWORD *)int buf = 138412546;
      id v64 = v8;
      __int16 v65 = 2112;
      uint64_t v66 = (uint64_t)v5;
      _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_DEFAULT, "%@: Attempting to fix incorrect HEIF metadata for asset: %@", buf, 0x16u);
    }
    if ([v5 width] && objc_msgSend(v5, "height"))
    {
LABEL_13:
      char v59 = v6;
      long long v61 = [v5 additionalAttributes];
      long long v15 = [v61 originalFilename];
      long long v16 = [v15 pathExtension];
      uint64_t v17 = [v16 uppercaseString];

      id v18 = [v5 pathForOriginalFile];
      BOOL v19 = [v5 filename];
      int v20 = [v19 stringByDeletingPathExtension];
      uint64_t v21 = [v20 stringByAppendingPathExtension:v17];

      uint64_t v22 = [v18 stringByDeletingPathExtension];
      long long v60 = (void *)v17;
      uint64_t v23 = [v22 stringByAppendingPathExtension:v17];

      id v24 = [MEMORY[0x1E4F28CB8] defaultManager];
      int v25 = [v24 fileExistsAtPath:v18];

      if (!v25)
      {
        id v58 = 0;
        goto LABEL_22;
      }
      long long v26 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v62 = 0;
      int v27 = [v26 moveItemAtPath:v18 toPath:v23 error:&v62];
      id v58 = v62;

      long long v28 = PLMigrationGetLog();
      uint64_t v29 = v28;
      if (v27)
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = NSStringFromSelector(a2);
          *(_DWORD *)int buf = 138412802;
          id v64 = v30;
          __int16 v65 = 2112;
          uint64_t v66 = (uint64_t)v18;
          __int16 v67 = 2112;
          long long v68 = v23;
          __int16 v31 = "%@: Moved original resource from %@ to %@";
          id v32 = v29;
          os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
LABEL_20:
          _os_log_impl(&dword_19B3C7000, v32, v33, v31, buf, 0x20u);
        }
      }
      else if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = NSStringFromSelector(a2);
        *(_DWORD *)int buf = 138412802;
        id v64 = v30;
        __int16 v65 = 2112;
        uint64_t v66 = (uint64_t)v18;
        __int16 v67 = 2112;
        long long v68 = v23;
        __int16 v31 = "%@: Failed to move the original resource from %@ to %@";
        id v32 = v29;
        os_log_type_t v33 = OS_LOG_TYPE_ERROR;
        goto LABEL_20;
      }

LABEL_22:
      [v5 setFilename:v21];
      BOOL v34 = PLMigrationGetLog();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = NSStringFromSelector(a2);
        *(_DWORD *)int buf = 138412546;
        id v64 = v35;
        __int16 v65 = 2112;
        uint64_t v66 = v21;
        _os_log_impl(&dword_19B3C7000, v34, OS_LOG_TYPE_DEFAULT, "%@: Changed asset filename to %@", buf, 0x16u);
      }
      uint64_t v36 = (void *)v21;
      uint64_t v37 = a2;

      uint64_t v38 = [v5 master];
      id v39 = [v5 uuid];
      id v40 = +[PLCloudResource cloudResourceForResourceType:1 forAssetUuid:v39 forCloudMaster:v38];

      if (v40)
      {
        [v40 setFilePath:v23];
        __int16 v41 = PLMigrationGetLog();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v42 = NSStringFromSelector(v37);
          *(_DWORD *)int buf = 138412546;
          id v64 = v42;
          __int16 v65 = 2112;
          uint64_t v66 = (uint64_t)v23;
          _os_log_impl(&dword_19B3C7000, v41, OS_LOG_TYPE_DEFAULT, "%@: Changed filepath of original resource to %@", buf, 0x16u);
        }
      }
      [v5 setUniformTypeIdentifierFromOriginalFile];
      if (v38)
      {
        int v43 = [v5 uniformTypeIdentifier];
        [v38 setUniformTypeIdentifier:v43];
      }
      __int16 v44 = v37;
      if (v40)
      {
        __int16 v45 = [v5 uniformTypeIdentifier];
        [v40 setUniformTypeIdentifier:v45];
      }
      id v46 = PLMigrationGetLog();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        id v47 = NSStringFromSelector(v37);
        uint64_t v48 = [v5 uniformTypeIdentifier];
        *(_DWORD *)int buf = 138412546;
        id v64 = v47;
        __int16 v65 = 2112;
        uint64_t v66 = (uint64_t)v48;
        _os_log_impl(&dword_19B3C7000, v46, OS_LOG_TYPE_DEFAULT, "%@: Changed UTI to %@", buf, 0x16u);

        __int16 v44 = v37;
      }

      if ([v5 kind] != 3) {
        goto LABEL_42;
      }
      int v49 = [v5 promoteFromUnknownKind];
      id v50 = PLMigrationGetLog();
      uint64_t v51 = v50;
      if (v49)
      {
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v52 = NSStringFromSelector(v44);
          int v53 = [v5 kind];
          *(_DWORD *)int buf = 138412546;
          id v64 = v52;
          __int16 v65 = 1024;
          LODWORD(v66) = v53;
          __int16 v54 = "%@: Promoted asset kind from Unknown to %d";
          id v55 = v51;
          os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
          uint32_t v57 = 18;
LABEL_40:
          _os_log_impl(&dword_19B3C7000, v55, v56, v54, buf, v57);
        }
      }
      else if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        __int16 v52 = NSStringFromSelector(v44);
        *(_DWORD *)int buf = 138412290;
        id v64 = v52;
        __int16 v54 = "%@: Failed to promote the asset kind from Unknown";
        id v55 = v51;
        os_log_type_t v56 = OS_LOG_TYPE_ERROR;
        uint32_t v57 = 12;
        goto LABEL_40;
      }

LABEL_42:
      long long v6 = v59;
      goto LABEL_43;
    }
    uint64_t v9 = [v5 imageProperties];
    if (v9)
    {
      [v5 setOriginalSizeAndOrientationFromImageProperties:v9];
      [v5 setSizeAndOrientationFromImageProperties:v9];
      uint64_t v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = NSStringFromSelector(a2);
        *(_DWORD *)int buf = 138412290;
        id v64 = v11;
        uint64_t v12 = "%@: Fixed asset dimensions";
        uint64_t v13 = v10;
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
LABEL_11:
        _os_log_impl(&dword_19B3C7000, v13, v14, v12, buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = NSStringFromSelector(a2);
        *(_DWORD *)int buf = 138412290;
        id v64 = v11;
        uint64_t v12 = "%@: Failed to read image properties to fix asset dimensions";
        uint64_t v13 = v10;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
        goto LABEL_11;
      }
    }

    goto LABEL_13;
  }
LABEL_43:
}

- (BOOL)_fixIncorrectHeifMetadataInStore:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  long long v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixIncorrectHeifMetadataInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = [(PLModelMigrator *)self _predicateForInconsistentHeifAssets];
  [v9 setPredicate:v10];

  [v9 setFetchBatchSize:100];
  id v23 = 0;
  id v11 = [v6 executeFetchRequest:v9 error:&v23];
  id v12 = v23;
  if (v11)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __52__PLModelMigrator__fixIncorrectHeifMetadataInStore___block_invoke;
    void v22[3] = &unk_1E5872990;
    void v22[4] = self;
    uint64_t v13 = [v6 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:v22];

    BOOL v14 = v13 == 0;
    long long v15 = PLMigrationGetLog();
    long long v16 = v15;
    if (v13)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412290;
        id v25 = v13;
        uint64_t v17 = "Failed to fix incorrect metadata for HEIF assets: %@";
        id v18 = v16;
        os_log_type_t v19 = OS_LOG_TYPE_ERROR;
LABEL_10:
        _os_log_impl(&dword_19B3C7000, v18, v19, v17, buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      id v25 = 0;
      uint64_t v17 = "Fixed incorrect metadata for %ld HEIF assets";
      id v18 = v16;
      os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_10;
    }

    goto LABEL_12;
  }
  int v20 = PLMigrationGetLog();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 138412290;
    id v25 = v12;
    _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "Can't fetch HEIF assets with incorrect metadata: %@", buf, 0xCu);
  }

  BOOL v14 = 0;
  uint64_t v13 = v12;
LABEL_12:
  [v6 reset];

  return v14;
}

uint64_t __52__PLModelMigrator__fixIncorrectHeifMetadataInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _fixIncorrectHeifMetadataForAsset:a2];
}

- (BOOL)_fixRawWithZeroDimensions:(id)a3
{
  v15[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  long long v6 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d AND (%K == 0 OR %K == 0 OR %K == 0 OR %K == 0)", @"kind", 0, @"width", @"height", @"additionalAttributes.originalWidth", @"additionalAttributes.originalHeight");
  [v9 setPredicate:v10];

  v15[0] = @"additionalAttributes";
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:1];
  [v9 setRelationshipKeyPathsForPrefetching:v11];

  [v9 setFetchBatchSize:100];
  id v12 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _fixRawWithZeroDimensions:]");
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __45__PLModelMigrator__fixRawWithZeroDimensions___block_invoke;
  v14[3] = &__block_descriptor_40_e28_B24__0__NSManagedObject_8Q16l;
  void v14[4] = a2;
  [(PLModelMigrator *)self _runMigrationStepWithName:v12 fetchRequest:v9 store:v5 migrationHandler:v14];

  return 1;
}

BOOL __45__PLModelMigrator__fixRawWithZeroDimensions___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 isRAW])
  {
    id v4 = PLMigrationGetLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = NSStringFromSelector(*(SEL *)(a1 + 32));
      int v16 = 138412546;
      uint64_t v17 = v5;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_DEFAULT, "%@: Attempting to fix zero dimensions of raw image: %@", (uint8_t *)&v16, 0x16u);
    }
    long long v6 = [v3 imageProperties];
    uint64_t v7 = [v6 count];
    BOOL v8 = v7 != 0;
    if (v7)
    {
      if (![v3 originalWidth] || !objc_msgSend(v3, "originalHeight"))
      {
        uint64_t v9 = PLMigrationGetLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = NSStringFromSelector(*(SEL *)(a1 + 32));
          int v16 = 138412290;
          uint64_t v17 = v10;
          _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "%@: Fixed original width/height for raw image", (uint8_t *)&v16, 0xCu);
        }
        [v3 setOriginalSizeAndOrientationFromImageProperties:v6];
      }
      if (![v3 width] || !objc_msgSend(v3, "height"))
      {
        id v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = NSStringFromSelector(*(SEL *)(a1 + 32));
          int v16 = 138412290;
          uint64_t v17 = v12;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "%@: Fixed width/height for raw image", (uint8_t *)&v16, 0xCu);
        }
        [v3 setSizeAndOrientationFromImageProperties:v6];
      }
    }
    else
    {
      uint64_t v13 = PLMigrationGetLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        BOOL v14 = NSStringFromSelector(*(SEL *)(a1 + 32));
        int v16 = 138412290;
        uint64_t v17 = v14;
        _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "%@: Failed to fetch image properties to fix zero dimensions of raw image", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else
  {
    BOOL v8 = 1;
  }

  return v8;
}

- (BOOL)_populateCloudResourceLocalStateInStor:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  long long v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateCloudResourceLocalStateInStor:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v8 = PLMigrationGetLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Populating cloudLocalState for cloudResources", buf, 2u);
  }

  uint64_t v9 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v10 = +[PLCloudResource entityName];
  id v11 = [v9 fetchRequestWithEntityName:v10];

  id v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudMaster.cloudLocalState == %d OR asset.cloudLocalState == %d", 1, 1);
  [v11 setPredicate:v12];
  [v11 setFetchBatchSize:100];
  *(void *)int buf = 0;
  id v23 = buf;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  id v21 = 0;
  uint64_t v13 = [v7 executeFetchRequest:v11 error:&v21];
  id v14 = v21;
  if (v13)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = __58__PLModelMigrator__populateCloudResourceLocalStateInStor___block_invoke;
    v20[3] = &unk_1E5866C28;
    v20[4] = buf;
    long long v15 = [v7 enumerateWithIncrementalSaveUsingObjects:v13 withBlock:v20];

    if (v15)
    {
      int v16 = PLMigrationGetLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v26 = 138412290;
        id v27 = v15;
        _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "Failed to populate cloudLocalState for cloudResources: %@", v26, 0xCu);
      }
      BOOL v17 = 0;
    }
    else
    {
      int v16 = PLMigrationGetLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v18 = (void *)*((void *)v23 + 3);
        *(_DWORD *)uint64_t v26 = 134217984;
        id v27 = v18;
        _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Populated cloudLocalState for %ld cloudResources", v26, 0xCu);
      }
      long long v15 = 0;
      BOOL v17 = 1;
    }
  }
  else
  {
    int v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v26 = 138412290;
      id v27 = v14;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "Can't fetch cloudResources: %@", v26, 0xCu);
    }
    BOOL v17 = 0;
    long long v15 = v14;
  }

  [v7 reset];
  _Block_object_dispose(buf, 8);

  return v17;
}

uint64_t __58__PLModelMigrator__populateCloudResourceLocalStateInStor___block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = [a2 setCloudLocalState:3];
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

- (BOOL)_fixZeroTrashedDateForEntityName:(id)a3 inManagedObjectContext:(id)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  uint64_t v20 = 0;
  id v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  uint64_t v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:v5];
  BOOL v8 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v9 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:0.0];
  uint64_t v10 = [v8 predicateWithFormat:@"trashedDate == %@", v9];
  [v7 setPredicate:v10];

  [v7 setFetchBatchSize:100];
  id v19 = 0;
  id v11 = [v6 executeFetchRequest:v7 error:&v19];
  id v12 = v19;
  if (v11)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __75__PLModelMigrator__fixZeroTrashedDateForEntityName_inManagedObjectContext___block_invoke;
    v18[3] = &unk_1E5866A48;
    void v18[4] = &v20;
    uint64_t v13 = [v6 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:v18];

    if (v13)
    {
      id v14 = PLMigrationGetLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412546;
        *(void *)uint64_t v25 = v5;
        *(_WORD *)&v25[8] = 2112;
        *(void *)&v25[10] = v13;
        _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "Failed to zero trashed date (%@): %@", buf, 0x16u);
      }
      BOOL v15 = 0;
    }
    else
    {
      id v14 = PLMigrationGetLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = v21[3];
        *(_DWORD *)int buf = 67109378;
        *(_DWORD *)uint64_t v25 = v16;
        *(_WORD *)&void v25[4] = 2112;
        *(void *)&v25[6] = v5;
        _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Fixed %d zero trashed date (%@), setting them to nil", buf, 0x12u);
      }
      uint64_t v13 = 0;
      BOOL v15 = 1;
    }
  }
  else
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412546;
      *(void *)uint64_t v25 = v5;
      *(_WORD *)&v25[8] = 2112;
      *(void *)&v25[10] = v12;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "Can't fetch request _fixZeroTrashedDate (%@): %@", buf, 0x16u);
    }
    BOOL v15 = 0;
    uint64_t v13 = v12;
  }

  _Block_object_dispose(&v20, 8);
  return v15;
}

uint64_t __75__PLModelMigrator__fixZeroTrashedDateForEntityName_inManagedObjectContext___block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = [a2 setValue:0 forKey:@"trashedDate"];
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

- (BOOL)_fixTrashedDate:(id)a3
{
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixTrashedDate:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v8 = +[PLManagedAsset entityName];
  BOOL v9 = [(PLModelMigrator *)self _fixZeroTrashedDateForEntityName:v8 inManagedObjectContext:v7];

  if (v9)
  {
    uint64_t v10 = +[PLGenericAlbum entityName];
    BOOL v11 = [(PLModelMigrator *)self _fixZeroTrashedDateForEntityName:v10 inManagedObjectContext:v7];
  }
  else
  {
    BOOL v11 = 0;
  }
  [v7 reset];

  return v11;
}

- (BOOL)_fixMasterCloudLocalStateEnum:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = PLMigrationGetLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_DEFAULT, "Fixing cloudLocalState enum for master", buf, 2u);
  }

  BOOL v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixMasterCloudLocalStateEnum:]", *MEMORY[0x1E4F1C1C0]);
  id v9 = objc_alloc(MEMORY[0x1E4F1C038]);
  uint64_t v10 = +[PLCloudMaster entityName];
  BOOL v11 = (void *)[v9 initWithEntityName:v10];

  [v11 setResultType:2];
  [v11 setPropertiesToUpdate:&unk_1EEBF28D8];
  id v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudLocalState == %d", 1);
  [v11 setPredicate:v12];

  id v19 = 0;
  uint64_t v13 = [v8 executeRequest:v11 error:&v19];
  id v14 = v19;
  BOOL v15 = PLMigrationGetLog();
  uint64_t v16 = v15;
  if (v14)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      id v21 = v14;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "Failed to fix pushed masters: %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v17 = [v13 result];
    *(_DWORD *)int buf = 138412290;
    id v21 = v17;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Fixed %@ pushed masters, setting them to CPLIsUploaded", buf, 0xCu);
  }
  [v8 reset];

  return v14 == 0;
}

- (BOOL)_tryToPromoteUnknownAssetsInStore:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(PLModelMigrator *)self isCloudPhotoLibraryEnabled])
  {
    uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
    id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _tryToPromoteUnknownAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
    id v20 = 0;
    uint64_t v7 = +[PLManagedAsset assetsToConsiderForTypePromotionInContext:v6 withExtensions:&unk_1EEBF1B80 error:&v20];
    id v8 = v20;
    uint64_t v16 = 0;
    BOOL v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    if (v7)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = __53__PLModelMigrator__tryToPromoteUnknownAssetsInStore___block_invoke;
      v15[3] = &unk_1E5866718;
      v15[4] = &v16;
      id v9 = [v6 enumerateWithIncrementalSaveUsingObjects:v7 shouldRefreshAfterSave:1 withBlock:v15];

      if (v9)
      {
        uint64_t v10 = PLMigrationGetLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 138412290;
          id v22 = v9;
          _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "Failed to enumerate unknown assets for promotion with error %@", buf, 0xCu);
        }
        BOOL v11 = 0;
      }
      else
      {
        id v12 = [(PLModelMigrator *)self _migrationThumbnailManagerWithStore:v4];
        [v12 addRebuildThumbnailsRequest];

        uint64_t v10 = PLMigrationGetLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = (void *)v17[3];
          *(_DWORD *)int buf = 134217984;
          id v22 = v13;
          _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Promoted %lu assets from asset type unknown.", buf, 0xCu);
        }
        id v9 = 0;
        BOOL v11 = 1;
      }
    }
    else
    {
      uint64_t v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412290;
        id v22 = v8;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "Failed to fetch for unknown assets for promotion with error %@", buf, 0xCu);
      }
      BOOL v11 = 0;
      id v9 = v8;
    }

    _Block_object_dispose(&v16, 8);
  }
  else
  {
    BOOL v11 = 1;
  }

  return v11;
}

uint64_t __53__PLModelMigrator__tryToPromoteUnknownAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = [a2 promoteFromUnknownKind];
  if (result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  return result;
}

- (BOOL)_rebuildWideCaptureThumbsInStore:(id)a3
{
  v44[2] = *MEMORY[0x1E4F143B8];
  id v36 = a3;
  uint64_t v30 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v35 = self;
  BOOL v34 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v36, "-[PLModelMigrator _rebuildWideCaptureThumbsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v5 = +[PLManagedAsset entityName];
  id v32 = [v4 fetchRequestWithEntityName:v5];

  uint64_t v6 = [(PLModelMigrator *)self _dateForWideGamutCapture];
  uint64_t v7 = (void *)MEMORY[0x1E4F28BA0];
  os_log_type_t v33 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K >= %@", @"dateCreated", v6];
  v43[0] = v33;
  id v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K = %@", @"originalColorSpace", @"Display P3"];
  v43[1] = v8;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v43 count:2];
  uint64_t v10 = [v7 andPredicateWithSubpredicates:v9];
  v44[0] = v10;
  BOOL v11 = (void *)MEMORY[0x1E4F28BA0];
  id v12 = +[PLManagedAsset predicateForAdjustedAssetsWithKeyPathToAsset:0];
  v42[0] = v12;
  __int16 v31 = (void *)v6;
  uint64_t v13 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K >= %@", @"adjustmentTimestamp", v6];
  v42[1] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v42 count:2];
  BOOL v15 = [v11 andPredicateWithSubpredicates:v14];
  v44[1] = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v44 count:2];
  BOOL v17 = [v7 orPredicateWithSubpredicates:v16];
  [v32 setPredicate:v17];

  [v32 setFetchBatchSize:100];
  uint64_t v18 = [(PLModelMigrator *)v35 _migrationThumbnailManagerWithStore:v36];
  id v39 = 0;
  uint64_t v19 = [v34 executeFetchRequest:v32 error:&v39];
  id v20 = v39;
  uint64_t v21 = [v19 count];
  if (!v19 || v20)
  {
    id v27 = PLMigrationGetLog();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      __int16 v41 = v20;
      _os_log_impl(&dword_19B3C7000, v27, OS_LOG_TYPE_ERROR, "Failed to fetch wide gamut capture assets with error %@", buf, 0xCu);
    }

    uint64_t v24 = 0;
    uint64_t v25 = v31;
  }
  else
  {
    uint64_t v22 = v21;
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    void v37[2] = __52__PLModelMigrator__rebuildWideCaptureThumbsInStore___block_invoke;
    v37[3] = &unk_1E5872990;
    id v23 = v18;
    id v38 = v23;
    uint64_t v24 = [v34 enumerateWithIncrementalSaveUsingObjects:v19 shouldRefreshAfterSave:1 withBlock:v37];

    uint64_t v25 = v31;
    if (!v24)
    {
      [v23 addRebuildThumbnailsRequest];
      uint64_t v24 = PLMigrationGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134217984;
        __int16 v41 = v22;
        _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_DEFAULT, "Deleted thumbnails for %lu wide gamut captures and marked for rebuild", buf, 0xCu);
      }
      BOOL v26 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v28 = PLMigrationGetLog();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 138412290;
    __int16 v41 = v24;
    _os_log_impl(&dword_19B3C7000, v28, OS_LOG_TYPE_ERROR, "Failed to enumerate thumbnails for wide gamut captures with error %@", buf, 0xCu);
  }

  BOOL v26 = 0;
LABEL_13:

  return v26;
}

void __52__PLModelMigrator__rebuildWideCaptureThumbsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v6 = a2;
  id v3 = [v6 thumbnailIdentifier];
  uint64_t v4 = (int)[v6 thumbnailIndex];
  uint64_t v5 = [v6 uuid];
  [v2 deleteThumbnailsWithIdentifier:v3 orIndex:v4 uuid:v5];

  [v6 setEffectiveThumbnailIndex:0x7FFFFFFFFFFFFFFFLL];
}

- (id)_dateForWideGamutCapture
{
  id v2 = [MEMORY[0x1E4F1C9A8] calendarWithIdentifier:*MEMORY[0x1E4F1C318]];
  id v3 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v3 setYear:2016];
  [v3 setMonth:6];
  [v3 setDay:1];
  uint64_t v4 = [v2 dateFromComponents:v3];

  return v4;
}

- (BOOL)_removeUntrackedCloudResourceImageDerivativesInStore:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _removeUntrackedCloudResourceImageDerivativesInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLCloudResource entityName];
  id v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"isLocallyAvailable == NO AND isAvailable == YES AND filePath != nil AND (type == %d OR type == %d)", 4, 5);
  [v9 setPredicate:v10];

  uint64_t v24 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  v19[0] = 0;
  v19[1] = v19;
  void v19[2] = 0x2020000000;
  v19[3] = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __72__PLModelMigrator__removeUntrackedCloudResourceImageDerivativesInStore___block_invoke;
  v18[3] = &unk_1E5866C00;
  void v18[4] = &v20;
  void v18[5] = v19;
  BOOL v11 = [v6 enumerateObjectsFromFetchRequest:v9 count:&v24 usingDefaultBatchSizeWithBlock:v18];
  if (v11)
  {
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      BOOL v26 = v11;
      uint64_t v13 = "Failed to remove untracked images with error %@";
      id v14 = v12;
      os_log_type_t v15 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v14, v15, v13, buf, 0xCu);
    }
  }
  else
  {
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = (void *)v21[3];
      *(_DWORD *)int buf = 134217984;
      BOOL v26 = v16;
      uint64_t v13 = "Removed %lu untracked images.";
      id v14 = v12;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_6;
    }
  }

  _Block_object_dispose(v19, 8);
  _Block_object_dispose(&v20, 8);

  return v11 == 0;
}

void __72__PLModelMigrator__removeUntrackedCloudResourceImageDerivativesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v5 = [v3 filePath];
  int v6 = [v4 fileExistsAtPath:v5];

  if (v6)
  {
    uint64_t v7 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v8 = [v3 filePath];
    id v13 = 0;
    int v9 = [v7 removeItemAtPath:v8 error:&v13];
    id v10 = v13;

    if (v9)
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    else
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      BOOL v11 = PLMigrationGetLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        *(_DWORD *)int buf = 134218242;
        uint64_t v15 = v12;
        __int16 v16 = 2112;
        id v17 = v10;
        _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "Failed to remove file (%lu total failures so far) with error: %@", buf, 0x16u);
      }
    }
  }
}

- (BOOL)_fixupCroppedUnadjustedAssets:(id)a3
{
  void v31[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  int v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupCroppedUnadjustedAssets:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  int v9 = [v7 fetchRequestWithEntityName:v8];

  [v9 setFetchBatchSize:100];
  id v10 = (void *)MEMORY[0x1E4F28BA0];
  BOOL v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kind", 0);
  v31[0] = v11;
  uint64_t v12 = +[PLManagedAsset predicateForUnadjustedAssetsWithKeyPathToAsset:0];
  v31[1] = v12;
  id v13 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K IN %@", @"orientation", &unk_1EEBF1B68];
  void v31[2] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:3];
  uint64_t v15 = [v10 andPredicateWithSubpredicates:v14];
  [v9 setPredicate:v15];

  __int16 v16 = [v6 executeFetchRequest:v9 error:0];
  uint64_t v25 = 0;
  BOOL v26 = &v25;
  uint64_t v27 = 0x2020000000;
  uint64_t v28 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __49__PLModelMigrator__fixupCroppedUnadjustedAssets___block_invoke;
  void v24[3] = &unk_1E5866718;
  void v24[4] = &v25;
  id v17 = [v6 enumerateWithIncrementalSaveUsingObjects:v16 withBlock:v24];
  if (v17)
  {
    uint64_t v18 = PLMigrationGetLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      uint64_t v30 = v17;
      uint64_t v19 = "_fixupCroppedUnadjustedAssets failed: %@";
      uint64_t v20 = v18;
      os_log_type_t v21 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v20, v21, v19, buf, 0xCu);
    }
  }
  else
  {
    uint64_t v18 = PLMigrationGetLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = (void *)v26[3];
      *(_DWORD *)int buf = 134217984;
      uint64_t v30 = v22;
      uint64_t v19 = "Fixed %lu CroppedUnadjustedAssets";
      uint64_t v20 = v18;
      os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_6;
    }
  }

  _Block_object_dispose(&v25, 8);

  return v17 == 0;
}

void __49__PLModelMigrator__fixupCroppedUnadjustedAssets___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  double v3 = (double)[v7 originalWidth];
  double v4 = (double)[v7 originalHeight];
  unint64_t v5 = (int)[v7 originalOrientation] - 5;
  if (v5 >= 4) {
    double v6 = v3;
  }
  else {
    double v6 = v4;
  }
  if (v5 >= 4) {
    double v3 = v4;
  }
  if ([v7 width] != (int)v6 || objc_msgSend(v7, "height") != (int)v3)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    [v7 setWidth:(uint64_t)v6];
    [v7 setHeight:(uint64_t)v3];
  }
}

- (BOOL)_trimInvalidAlbumAssetsMappingRecords
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = [(PLModelMigrator *)self pathManager];
  id v3 = [v2 photosDatabasePath];
  double v4 = (const char *)[v3 fileSystemRepresentation];

  unint64_t v5 = PLOpenSQLTransactionWithDBPath(v4);
  if (!v5) {
    return 1;
  }
  double v6 = v5;
  errmsg = 0;
  [NSString stringWithFormat:@"DELETE FROM %@ WHERE ROWID IN(                                SELECT                                     MAP.ROWID                                 FROM                                     %@ AS MAP                                     LEFT OUTER JOIN ZGENERICASSET AS ASSET ON MAP.%@ = ASSET.Z_PK                                     LEFT OUTER JOIN ZGENERICALBUM AS ALBUM ON MAP.%@ = ALBUM.Z_PK                                     LEFT OUTER JOIN Z_PRIMARYKEY AS PK ON ALBUM.Z_ENT = PK.Z_ENT                                 WHERE                                     ASSET.ZUUID IS NULL OR                                     ALBUM.ZUUID IS NULL OR                                     PK.Z_NAME IN ('FetchingAlbum'))", @"Z_15ASSETS", @"Z_15ASSETS", @"Z_22ASSETS", @"Z_15ALBUMS"];
  id v7 = objc_claimAutoreleasedReturnValue();
  int v8 = sqlite3_exec(v6, (const char *)[v7 UTF8String], 0, 0, &errmsg);
  BOOL v9 = v8 == 0;
  if (v8)
  {
    int v10 = v8;
    BOOL v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109378;
      int v17 = v10;
      __int16 v18 = 2080;
      uint64_t v19 = errmsg;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Failed to clear invalid asset to album mapping records, %d %s", buf, 0x12u);
    }

    PLRollbackSQLTransactionAndCloseDB(v6);
  }
  else
  {
    int v12 = sqlite3_changes(v6);
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v17 = v12;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Cleared %d invalid asset to album mapping records.", buf, 8u);
    }

    PLCommitSQLTransactionAndCloseDB(v6);
  }

  return v9;
}

- (BOOL)_fixRejectedKeyFace:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  double v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixRejectedKeyFace:]", *MEMORY[0x1E4F1C1C0]);
  int v8 = (void *)MEMORY[0x1E4F1C0D0];
  BOOL v9 = +[PLPerson entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  BOOL v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"verifiedType = %d AND rejectedFaces.@count == 0", 1);
  [v10 setPredicate:v11];

  [v10 setFetchBatchSize:100];
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  int v25 = 0;
  int v12 = [v7 executeFetchRequest:v10 error:0];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __39__PLModelMigrator__fixRejectedKeyFace___block_invoke;
  void v21[3] = &unk_1E5866BD8;
  void v21[4] = &v22;
  id v13 = [v7 enumerateWithIncrementalSaveUsingObjects:v12 withBlock:v21];
  if (v13)
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      uint64_t v27 = v13;
      uint64_t v15 = "Failed to fix faces: %@";
      __int16 v16 = v14;
      os_log_type_t v17 = OS_LOG_TYPE_ERROR;
      uint32_t v18 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v16, v17, v15, buf, v18);
    }
  }
  else
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *((_DWORD *)v23 + 6);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v27) = v19;
      uint64_t v15 = "Fixed %d faces keyFace, setting them to nil";
      __int16 v16 = v14;
      os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
      uint32_t v18 = 8;
      goto LABEL_6;
    }
  }

  [v7 reset];
  _Block_object_dispose(&v22, 8);

  return v13 == 0;
}

void __39__PLModelMigrator__fixRejectedKeyFace___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 keyFace];
  if (v3)
  {
    id v4 = [v6 rejectedFaces];
    int v5 = [v4 containsObject:v3];

    if (v5)
    {
      [v6 setKeyFace:0 pickSource:0];
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
}

- (BOOL)_fixMergedPeopleThatShouldBeVerified:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixMergedPeopleThatShouldBeVerified:]", *MEMORY[0x1E4F1C1C0]);
  int v8 = (void *)MEMORY[0x1E4F1C0D0];
  BOOL v9 = +[PLPerson entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  BOOL v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"verifiedType = %d AND detectedFaces.@count > 1", 0);
  [v10 setPredicate:v11];

  [v10 setFetchBatchSize:100];
  int v12 = [v7 executeFetchRequest:v10 error:0];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __56__PLModelMigrator__fixMergedPeopleThatShouldBeVerified___block_invoke;
  void v22[3] = &unk_1E586F978;
  id v23 = v7;
  id v13 = v7;
  id v14 = [v13 enumerateWithIncrementalSaveUsingObjects:v12 withBlock:v22];
  uint64_t v15 = PLMigrationGetLog();
  __int16 v16 = v15;
  if (v14)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      int v25 = v14;
      os_log_type_t v17 = "Failed to verified unverified person: %@";
      uint32_t v18 = v16;
      os_log_type_t v19 = OS_LOG_TYPE_ERROR;
      uint32_t v20 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v18, v19, v17, buf, v20);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    LODWORD(v25) = 0;
    os_log_type_t v17 = "Verified %d unverified person";
    uint32_t v18 = v16;
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    uint32_t v20 = 8;
    goto LABEL_6;
  }

  [v13 reset];

  return v14 == 0;
}

void __56__PLModelMigrator__fixMergedPeopleThatShouldBeVerified___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 associatedFaceGroup];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v5 = [v3 detectedFaces];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v16 = a1;
    os_log_type_t v17 = v4;
    uint64_t v8 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v19 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "faceGroup", v16);
        if (v10)
        {
          BOOL v11 = v10;
          int v12 = [v10 uuid];
          id v13 = [v3 associatedFaceGroup];
          id v14 = [v13 uuid];
          char v15 = [v12 isEqualToString:v14];

          if ((v15 & 1) == 0)
          {

            [v3 setAssociatedFaceGroup:0];
            [v3 setEffectiveVerifiedType:1];
            id v4 = v17;
            +[PLPerson createAssociatedPersonForFaceGroup:v17 inManagedObjectContext:*(void *)(v16 + 32)];
            goto LABEL_13;
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v7) {
        continue;
      }
      break;
    }

    id v4 = v17;
  }
  else
  {
  }
LABEL_13:
}

- (BOOL)_refreshTriggerValues:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  uint64_t v4 = pl_dispatch_once();
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0](v4);
  uint64_t v6 = [v3 persistentStoreCoordinator];
  id v16 = 0;
  char v7 = [v6 _refreshTriggerValuesInStore:v3 error:&v16];
  id v8 = v16;
  BOOL v9 = PLMigrationGetLog();
  int v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      BOOL v11 = "Refreshed trigger values";
      int v12 = v10;
      os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
      uint32_t v14 = 2;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v12, v13, v11, buf, v14);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 138412290;
    id v18 = v8;
    BOOL v11 = "Failed to refresh trigger values: %@";
    int v12 = v10;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    uint32_t v14 = 12;
    goto LABEL_6;
  }

  return 1;
}

- (BOOL)_setUserTypeOnKeyFace:(id)a3
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _setUserTypeOnKeyFace:]", *MEMORY[0x1E4F1C1C0]);
  char v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLDetectedFace entityName];
  BOOL v9 = [v7 fetchRequestWithEntityName:v8];

  int v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"nameSource = 1"];
  [v9 setPredicate:v10];

  [v9 setFetchBatchSize:100];
  uint64_t v32 = 0;
  os_log_type_t v33 = &v32;
  uint64_t v34 = 0x2020000000;
  int v35 = 0;
  BOOL v11 = [v6 executeFetchRequest:v9 error:0];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  void v31[2] = __41__PLModelMigrator__setUserTypeOnKeyFace___block_invoke;
  void v31[3] = &unk_1E5872848;
  void v31[4] = &v32;
  int v12 = [v6 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:v31];
  if (!v12)
  {
    char v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *((_DWORD *)v33 + 6);
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Reset %d faces' nameSource to type auto", (uint8_t *)&buf, 8u);
    }

    os_log_type_t v17 = (void *)MEMORY[0x1E4F1C0D0];
    id v18 = +[PLDetectedFace entityName];
    os_log_type_t v13 = [v17 fetchRequestWithEntityName:v18];

    uint64_t v19 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"person.verifiedType = %d AND (faceGroupBeingKeyFace != nil OR personBeingKeyFace != nil)", 1);
    [v13 setPredicate:v19];

    [v13 setFetchBatchSize:100];
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v39 = 0x2020000000;
    int v40 = 0;
    long long v20 = [v6 executeFetchRequest:v13 error:0];
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = __41__PLModelMigrator__setUserTypeOnKeyFace___block_invoke_2193;
    v30[3] = &unk_1E5872848;
    v30[4] = &buf;
    long long v21 = [v6 enumerateWithIncrementalSaveUsingObjects:v20 withBlock:v30];
    BOOL v14 = v21 == 0;
    if (v21)
    {
      uint64_t v22 = PLMigrationGetLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)id v36 = 138412290;
        uint64_t v37 = v21;
        uint64_t v23 = "Failed to marked faces: %@";
        uint64_t v24 = v22;
        os_log_type_t v25 = OS_LOG_TYPE_ERROR;
        uint32_t v26 = 12;
LABEL_12:
        _os_log_impl(&dword_19B3C7000, v24, v25, v23, v36, v26);
      }
    }
    else
    {
      uint64_t v22 = PLMigrationGetLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = *(_DWORD *)(*((void *)&buf + 1) + 24);
        *(_DWORD *)id v36 = 67109120;
        LODWORD(v37) = v27;
        uint64_t v23 = "Marked %d faces' nameSource to type user";
        uint64_t v24 = v22;
        os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
        uint32_t v26 = 8;
        goto LABEL_12;
      }
    }

    _Block_object_dispose(&buf, 8);
    goto LABEL_14;
  }
  os_log_type_t v13 = PLMigrationGetLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Failed to reset faces: %@", (uint8_t *)&buf, 0xCu);
  }
  BOOL v14 = 0;
LABEL_14:

  [v6 reset];
  _Block_object_dispose(&v32, 8);

  return v14;
}

void __41__PLModelMigrator__setUserTypeOnKeyFace___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 setEffectiveNameSource:0];
  id v3 = [v6 associatedAssetForFaceOrTorso:0 orTemporal:0];
  int v4 = [v3 cloudLocalState];

  if (v4)
  {
    uint64_t v5 = [v6 associatedAssetForFaceOrTorso:0 orTemporal:0];
    [v5 setCloudLocalState:0];
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void __41__PLModelMigrator__setUserTypeOnKeyFace___block_invoke_2193(uint64_t a1, void *a2)
{
  id v8 = a2;
  BOOL v3 = [v8 nameSource] == 1;
  int v4 = v8;
  if (!v3)
  {
    [v8 setEffectiveNameSource:1];
    uint64_t v5 = [v8 associatedAssetForFaceOrTorso:0 orTemporal:0];
    int v6 = [v5 cloudLocalState];

    if (v6)
    {
      char v7 = [v8 associatedAssetForFaceOrTorso:0 orTemporal:0];
      [v7 setCloudLocalState:0];
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v4 = v8;
  }
}

- (BOOL)_recoverSingleBurstPhotos:(id)a3
{
  v53[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v39 = v4;
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _recoverSingleBurstPhotos:]", *MEMORY[0x1E4F1C1C0]);
  id v6 = objc_alloc_init(MEMORY[0x1E4F1C0B8]);
  [v6 setName:@"count"];
  char v7 = [MEMORY[0x1E4F28C68] expressionWithFormat:@"count:(avalancheUUID)"];
  [v6 setExpression:v7];

  [v6 setExpressionResultType:300];
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  BOOL v9 = +[PLManagedAsset entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  v53[0] = @"avalancheUUID";
  v53[1] = v6;
  BOOL v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v53 count:2];
  [v10 setPropertiesToFetch:v11];

  [v10 setPropertiesToGroupBy:&unk_1EEBF1B50];
  [v10 setResultType:2];
  id v12 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  v46[2] = __45__PLModelMigrator__recoverSingleBurstPhotos___block_invoke;
  v46[3] = &unk_1E5871D18;
  id v13 = v12;
  id v47 = v13;
  BOOL v14 = [v5 enumerateObjectsFromFetchRequest:v10 count:0 usingDefaultBatchSizeWithBlock:v46];
  char v15 = (void *)MEMORY[0x1E4F1C0D0];
  int v16 = +[PLManagedAsset entityName];
  os_log_type_t v17 = [v15 fetchRequestWithEntityName:v16];

  id v18 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v19 = [v13 allObjects];
  long long v20 = [v18 predicateWithFormat:@"avalancheUUID IN %@", v19];
  [v17 setPredicate:v20];

  id v45 = v14;
  long long v21 = [v5 executeFetchRequest:v17 error:&v45];
  id v22 = v45;

  if (!v21)
  {
    uint64_t v30 = PLMigrationGetLog();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = [v22 userInfo];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v50 = (uint64_t)v22;
      __int16 v51 = 2112;
      __int16 v52 = v32;
      _os_log_impl(&dword_19B3C7000, v30, OS_LOG_TYPE_ERROR, "_recoverSingleBurstPhotos: failed: %@ %@", buf, 0x16u);
    }
    goto LABEL_20;
  }
  id v37 = v22;
  uint64_t v36 = [v21 count];
  +[PLAvalanche disolveBurstForAssets:v21 permanently:0];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v23 = v21;
  uint64_t v24 = [v23 countByEnumeratingWithState:&v41 objects:v48 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v42 != v26) {
          objc_enumerationMutation(v23);
        }
        [*(id *)(*((void *)&v41 + 1) + 8 * i) persistMetadataToFilesystem];
      }
      uint64_t v25 = [v23 countByEnumeratingWithState:&v41 objects:v48 count:16];
    }
    while (v25);
  }

  if ([v5 hasChanges])
  {
    uint64_t v28 = PLMigrationGetLog();
    id v22 = v37;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v50 = v36;
      _os_log_impl(&dword_19B3C7000, v28, OS_LOG_TYPE_DEFAULT, "Recover %lu single burst photo", buf, 0xCu);
    }

    id v40 = 0;
    char v29 = [v5 save:&v40];
    uint64_t v30 = v40;
    if (v29)
    {
      BOOL v31 = 1;
LABEL_21:

      goto LABEL_22;
    }
    os_log_type_t v33 = PLMigrationGetLog();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = [v30 userInfo];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v50 = (uint64_t)v30;
      __int16 v51 = 2112;
      __int16 v52 = v34;
      _os_log_impl(&dword_19B3C7000, v33, OS_LOG_TYPE_ERROR, "_recoverSingleBurstPhotos: failed: %@ %@", buf, 0x16u);
    }
LABEL_20:
    BOOL v31 = 0;
    goto LABEL_21;
  }
  BOOL v31 = 1;
  id v22 = v37;
LABEL_22:

  return v31;
}

void __45__PLModelMigrator__recoverSingleBurstPhotos___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  BOOL v3 = [v7 objectForKeyedSubscript:@"count"];
  uint64_t v4 = [v3 integerValue];

  if (v4 == 1)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = [v7 objectForKeyedSubscript:@"avalancheUUID"];
    [v5 addObject:v6];
  }
}

- (void)_repairMetadataAndSingletonsForMigrationType:(int64_t)a3 forceRebuildReason:(id)a4 journalRebuildRequired:(BOOL)a5
{
  id v7 = a4;
  if ((PLIsAssetsd() & 1) == 0)
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:10793 description:@"-[PLModelMigrator addSingletonObjectsToDatabase] can only be called from assetsd"];
  }
  if (PLIsAssetsd())
  {
    pl_dispatch_once();
    id v9 = v7;
    pl_dispatch_sync();
  }
}

void __106__PLModelMigrator__repairMetadataAndSingletonsForMigrationType_forceRebuildReason_journalRebuildRequired___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    PLStringFromMigrationType(v2, 1);
    BOOL v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    BOOL v3 = @"repairing singletons";
  }
  uint64_t v4 = [*(id *)(a1 + 32) pathManager];
  uint64_t v5 = [v4 libraryURL];
  id v25 = 0;
  id v6 = +[PLManagedObjectContext contextForRepairingSingletonObjectsWithReason:v3 libraryURL:v5 error:&v25];
  id v7 = v25;

  if (!v6)
  {
    id v8 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 64)) {
      objc_msgSend(v8, "_failed_repairSingletonObjectsInNewDatabaseWithNilContextError:", v7);
    }
    else {
      objc_msgSend(v8, "_failed_repairSingletonObjectsWithNilContextError:", v7);
    }
  }
  id v9 = [v6 persistentStoreCoordinator];
  int v10 = [v9 persistentStores];
  BOOL v11 = [v10 firstObject];

  if (!v11)
  {
    id v12 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 64)) {
      objc_msgSend(v12, "_failed_repairSingletonObjectsInNewDatabaseWithNoPersistentStores");
    }
    else {
      objc_msgSend(v12, "_failed_repairSingletonObjectsWithNoPersistentStores");
    }
  }
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  id v18 = __106__PLModelMigrator__repairMetadataAndSingletonsForMigrationType_forceRebuildReason_journalRebuildRequired___block_invoke_3;
  uint64_t v19 = &unk_1E5868C10;
  id v13 = v6;
  uint64_t v14 = *(void *)(a1 + 32);
  id v20 = v13;
  uint64_t v21 = v14;
  char v24 = *(unsigned char *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 48);
  uint64_t v23 = v15;
  [v13 performBlockAndWait:&v16];
  if (*(unsigned char *)(a1 + 64)
    && (objc_msgSend(*(id *)(a1 + 32), "_recordCurrentVersionMetadataInPersistentStore:migrationType:forceRebuildReason:sourceModelVersion:updateLegacyMigrationState:journalRebuildRequred:", v11, *(void *)(a1 + 48), *(void *)(a1 + 40), 0, 1, *(unsigned __int8 *)(a1 + 65), v16, v17, v18, v19) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_failed_recordCurrentVersionMetadata");
  }
}

void __106__PLModelMigrator__repairMetadataAndSingletonsForMigrationType_forceRebuildReason_journalRebuildRequired___block_invoke_3(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) setIsInitializingSingletons:1];
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = [*(id *)(a1 + 40) pathManager];
  id v21 = 0;
  LOBYTE(v2) = +[PLModelMigrationAction_RepairSingletons repairSingletonObjectsInDatabaseUsingContext:v2 pathManager:v3 error:&v21];
  id v4 = v21;

  if ((v2 & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 64)) {
      objc_msgSend(v5, "_failed_repairSingletonObjectsInNewDatabaseWithRepairError:", v4);
    }
    else {
      objc_msgSend(v5, "_failed_repairSingletonObjectsWithRepairError:", v4);
    }
  }
  if ((*(void *)(a1 + 48) | 2) == 3)
  {
    id v6 = (void *)MEMORY[0x1E4F8B858];
    id v7 = [*(id *)(a1 + 40) pathManager];
    id v8 = [v7 libraryURL];
    id v9 = [v6 appPrivateDataForLibraryURL:v8];

    int v10 = [v9 valueForKey:@"PLModelMigrator.CreateOptions"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [*(id *)(a1 + 40) setOptions:v10];
      BOOL v11 = [v10 objectForKeyedSubscript:@"LibraryCreateOptions"];
      id v12 = v11;
      if (v11) {
        +[PLGlobalValues setLibraryCreateOptions:managedObjectContext:](PLGlobalValues, "setLibraryCreateOptions:managedObjectContext:", [v11 unsignedIntValue], *(void *)(a1 + 32));
      }
      id v13 = PLMigrationGetLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v23 = v10;
        _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "restored appPrivateData library create options: %@", buf, 0xCu);
      }
    }
  }
  if (*(unsigned char *)(a1 + 64)) {
    [*(id *)(a1 + 40) _handleCreateOptionsUsingContext:*(void *)(a1 + 32)];
  }
  if ([*(id *)(a1 + 32) hasChanges])
  {
    uint64_t v14 = *(void **)(a1 + 32);
    id v20 = 0;
    char v15 = [v14 save:&v20];
    id v16 = v20;
    if ((v15 & 1) == 0)
    {
      uint64_t v17 = PLMigrationGetLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        id v18 = NSStringFromSelector(*(SEL *)(a1 + 56));
        uint64_t v19 = [v16 userInfo];
        *(_DWORD *)long long buf = 138412802;
        uint64_t v23 = v18;
        __int16 v24 = 2112;
        id v25 = v16;
        __int16 v26 = 2112;
        int v27 = v19;
        _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
      }
    }
  }
  [*(id *)(a1 + 32) setIsInitializingSingletons:0];
}

void __106__PLModelMigrator__repairMetadataAndSingletonsForMigrationType_forceRebuildReason_journalRebuildRequired___block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.assetsd.migrator.singletonrepair", 0);
  v1 = (void *)_repairMetadataAndSingletonsForMigrationType_forceRebuildReason_journalRebuildRequired__isolation;
  _repairMetadataAndSingletonsForMigrationType_forceRebuildReason_journalRebuildRequired__isolation = (uint64_t)v0;
}

- (void)_failed_recordCurrentVersionMetadata
{
  uint64_t v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_ERROR, "Failed to save current metadata", v3, 2u);
  }

  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithRepairError:(id)a3
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v4;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsWithRepairError: %@", (uint8_t *)&v6, 0xCu);
  }

  [(PLModelMigrator *)self _failed_repairSingletonObjectsWithError:v4];
}

- (void)_failed_repairSingletonObjectsInNewDatabaseWithRepairError:(id)a3
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v4;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsInNewDatabaseWithRepairError: %@", (uint8_t *)&v6, 0xCu);
  }

  [(PLModelMigrator *)self _failed_repairSingletonObjectsWithError:v4];
}

- (void)_failed_repairSingletonObjectsInNewDatabaseWithNilContextError:(id)a3
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v4;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsInNewDatabaseWithNilContextError: %@", (uint8_t *)&v6, 0xCu);
  }

  [(PLModelMigrator *)self _failed_repairSingletonObjectsWithError:v4];
}

- (void)_failed_repairSingletonObjectsWithNilContextError:(id)a3
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v4;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsWithNilContextError: %@", (uint8_t *)&v6, 0xCu);
  }

  [(PLModelMigrator *)self _failed_repairSingletonObjectsWithError:v4];
}

- (void)_failed_repairSingletonObjectsWithError:(id)a3
{
  id v4 = a3;
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v16 = 138412290;
    id v17 = v4;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsWithError: %@", (uint8_t *)&v16, 0xCu);
  }

  int v6 = [v4 domain];
  int v7 = [v6 isEqualToString:*MEMORY[0x1E4F8C500]];

  if (v7)
  {
    uint64_t v8 = [v4 code];
    if (v8 > 46101)
    {
      if (v8 == 46102)
      {
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypePLPhotosErrorInvalidURL];
        goto LABEL_46;
      }
      if (v8 == 46502)
      {
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypePLPhotosErrorInvalidState];
        goto LABEL_46;
      }
    }
    else
    {
      if (v8 == 46006)
      {
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypePLPhotosErrorLibraryTooNew];
        goto LABEL_46;
      }
      if (v8 == 46007)
      {
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypePLPhotosErrorLibraryRequiresMigration];
        goto LABEL_46;
      }
    }
    [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeOtherPhotosError];
LABEL_46:
    char v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412290;
      id v17 = v4;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsWithError: %@", (uint8_t *)&v16, 0xCu);
    }

    __break(1u);
    JUMPOUT(0x19B5C4B10);
  }
  id v9 = [v4 domain];
  int v10 = [v9 isEqualToString:*MEMORY[0x1E4F281F8]];

  if (!v10) {
    goto LABEL_46;
  }
  BOOL v11 = [v4 userInfo];
  id v12 = [v11 objectForKey:*MEMORY[0x1E4F1BF50]];

  if (v12)
  {
    int v14 = [v12 intValue];
    switch(v14)
    {
      case 1:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_ERROR];
        goto LABEL_45;
      case 2:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
        goto LABEL_33;
      case 3:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_PERM];
        goto LABEL_45;
      case 6:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_LOCKED];
        goto LABEL_45;
      case 11:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_CORRUPT];
        goto LABEL_45;
      case 13:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_FULL];
        goto LABEL_45;
      case 14:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_CANTOPEN];
        goto LABEL_45;
      default:
        if (v14 == 21)
        {
          [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_MISUSE];
        }
        else if (v14 == 26)
        {
          [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeSQLITE_NOTADB];
        }
        else
        {
LABEL_33:
          [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeOtherSQLiteError];
        }
        break;
    }
    goto LABEL_45;
  }
  uint64_t v13 = [v4 code];
  if (v13 <= 134059)
  {
    switch(v13)
    {
      case 134000:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreInvalidTypeError];
        goto LABEL_45;
      case 134010:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreTypeMismatchError];
        goto LABEL_45;
      case 134020:
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreIncompatibleSchemaError];
        goto LABEL_45;
    }
  }
  else if (v13 > 134089)
  {
    if (v13 == 134090)
    {
      [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreTimeoutError];
      goto LABEL_45;
    }
    if (v13 == 134100)
    {
      [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreIncompatibleVersionHashError];
      goto LABEL_45;
    }
  }
  else
  {
    if (v13 == 134060)
    {
      [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeNSCoreDataError];
      goto LABEL_45;
    }
    if (v13 == 134080)
    {
      [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreOpenError];
LABEL_45:

      goto LABEL_46;
    }
  }
  [(PLModelMigrator *)self _failed_repairSingletonObjectsWithErrorTypeOtherCoreDataError];
  goto LABEL_45;
}

- (void)_failed_repairSingletonObjectsWithErrorTypeOtherCoreDataError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeNSCoreDataError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreInvalidTypeError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreTypeMismatchError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreIncompatibleSchemaError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreIncompatibleVersionHashError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreTimeoutError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeNSPersistentStoreOpenError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeOtherSQLiteError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_MISUSE
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_LOCKED
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_ERROR
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_CANTOPEN
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_PERM
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_FULL
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_NOTADB
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeSQLITE_CORRUPT
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypeOtherPhotosError
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorInvalidURL
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorInvalidState
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorLibraryTooNew
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithErrorTypePLPhotosErrorLibraryRequiresMigration
{
  BOOL v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = NSStringFromSelector(a2);
    int v5 = 138543362;
    int v6 = v4;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
  }
  __break(1u);
}

- (void)_failed_repairSingletonObjectsInNewDatabaseWithNoPersistentStores
{
  [(PLModelMigrator *)self _failed_repairSingletonObjectsWithNoPersistentStores];
  uint64_t v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsInNewDatabaseWithNoPersistentStores", v3, 2u);
  }

  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithNoPersistentStores
{
  BOOL v3 = [MEMORY[0x1E4F8B908] fileManager];
  char v13 = 0;
  id v4 = [(PLModelMigrator *)self pathManager];
  int v5 = [v4 libraryURL];
  int v6 = [v5 path];
  char v7 = [v3 fileExistsAtPath:v6 isDirectory:&v13];

  if (v7)
  {
    if (v13)
    {
      uint64_t v8 = [(PLModelMigrator *)self pathManager];
      id v9 = [v8 photosDatabasePath];
      char v10 = [v3 fileExistsAtPath:v9 isDirectory:0];

      if (v10) {
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithInvalidDatabaseFile];
      }
      else {
        [(PLModelMigrator *)self _failed_repairSingletonObjectsWithMissingDatabaseFile];
      }
    }
    else
    {
      [(PLModelMigrator *)self _failed_repairSingletonObjectsWithInvalidFileTypeLibraryDirectory];
    }
  }
  else
  {
    [(PLModelMigrator *)self _failed_repairSingletonObjectsWithMissingLibraryDirectory];
  }
  BOOL v11 = PLMigrationGetLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v12 = 0;
    _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "_failed_repairSingletonObjectsInNewDatabaseWithNoPersistentStores", v12, 2u);
  }

  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithInvalidDatabaseFile
{
  uint64_t v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_ERROR, "Repair singleton objects in new database failed, cannot open database. Exiting", v3, 2u);
  }

  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithMissingDatabaseFile
{
  uint64_t v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_ERROR, "Repair singleton objects in new database failed, cannot create database. Exiting", v3, 2u);
  }

  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithInvalidFileTypeLibraryDirectory
{
  uint64_t v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_ERROR, "Repair singleton objects in new database failed, invalid file type library directory. Exiting", v3, 2u);
  }

  __break(1u);
}

- (void)_failed_repairSingletonObjectsWithMissingLibraryDirectory
{
  uint64_t v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_ERROR, "Repair singleton objects in new database failed, missing library directory. Exiting", v3, 2u);
  }

  __break(1u);
}

- (void)repairSingletonObjectsInDatabase
{
}

- (BOOL)_deletePhotoCloudSharingMetadataInManagedObjectContext:(id)a3 error:(id *)a4
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    int v27 = [MEMORY[0x1E4F28B00] currentHandler];
    [v27 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:10553 description:@"_deleteAllLocalSharedAlbumsMetadataAndMoveTheAssetDataIntoACacheFolder only valid in assetsd!"];
  }
  uint64_t v8 = PLMigrationGetLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Deleting all photo cloud sharing metadata from photo library database", buf, 2u);
  }

  id v9 = +[PLGenericAlbum albumsWithKind:1505 inManagedObjectContext:v7];
  if (![v9 count]) {
    goto LABEL_11;
  }
  char v10 = PLMigrationGetLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = [v9 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v31 = v11;
    _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Deleting %tu shared albums", buf, 0xCu);
  }

  uint64_t v12 = [v7 enumerateWithIncrementalSaveUsingObjects:v9 withBlock:&__block_literal_global_2157];
  if (v12)
  {
    char v13 = (void *)v12;
    int v14 = 0;
    if (![0 count])
    {
      char v15 = 0;
      int v16 = 0;
      goto LABEL_18;
    }
  }
  else
  {
LABEL_11:
    int v14 = +[PLManagedAsset assetsWithValidatedSavedAssetTypeMask:inManagedObjectContext:](PLManagedAsset, "assetsWithValidatedSavedAssetTypeMask:inManagedObjectContext:", [MEMORY[0x1E4F8BA10] maskForCloudSharedAsset], v7);
    if (![v14 count]) {
      goto LABEL_17;
    }
    char v13 = 0;
  }
  id v17 = PLMigrationGetLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = [v14 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v31 = v18;
    _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "Deleting %tu shared assets", buf, 0xCu);
  }

  uint64_t v19 = [v7 enumerateWithIncrementalSaveUsingObjects:v14 withBlock:&__block_literal_global_2160];

  if (v19)
  {
    int v16 = 0;
    char v15 = 0;
    char v13 = (void *)v19;
    goto LABEL_18;
  }
LABEL_17:
  int v16 = +[PLCloudFeedEntry allEntriesInManagedObjectContext:v7];
  char v13 = 0;
  char v15 = 1;
LABEL_18:
  if ([v16 count])
  {
    id v20 = PLMigrationGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = [v16 count];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v31 = v21;
      _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "Deleting %tu remaining cloud feed entries", buf, 0xCu);
    }

    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = __80__PLModelMigrator__deletePhotoCloudSharingMetadataInManagedObjectContext_error___block_invoke_2162;
    void v28[3] = &unk_1E5866B88;
    id v29 = v7;
    uint64_t v22 = [v29 enumerateWithIncrementalSaveUsingObjects:v16 withBlock:v28];

    id v23 = v22;
    if (v22)
    {
      id v24 = v23;
      goto LABEL_24;
    }
    id v24 = 0;
LABEL_27:
    BOOL v25 = 1;
    goto LABEL_29;
  }
  id v24 = v13;
  if (v15) {
    goto LABEL_27;
  }
LABEL_24:
  if (a4)
  {
    id v24 = v24;
    BOOL v25 = 0;
    *a4 = v24;
  }
  else
  {
    BOOL v25 = 0;
  }
LABEL_29:

  return v25;
}

uint64_t __80__PLModelMigrator__deletePhotoCloudSharingMetadataInManagedObjectContext_error___block_invoke_2162(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteObject:a2];
}

uint64_t __80__PLModelMigrator__deletePhotoCloudSharingMetadataInManagedObjectContext_error___block_invoke_2158(uint64_t a1, void *a2)
{
  return [a2 deleteFromDatabaseOnly];
}

uint64_t __80__PLModelMigrator__deletePhotoCloudSharingMetadataInManagedObjectContext_error___block_invoke(uint64_t a1, void *a2)
{
  return [a2 deleteFromDatabaseOnly];
}

- (BOOL)_deletePhotoStreamAssetReferencesInStore:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    id v20 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v21 = NSStringFromSelector(a2);
    [v20 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 10526, @"%@ can only be called from assetsd", v21 object file lineNumber description];
  }
  int v6 = (void *)MEMORY[0x19F38D3B0]();
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _deletePhotoStreamAssetReferencesInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = +[PLManagedAsset assetsWithValidatedSavedAssetTypeMask:inManagedObjectContext:](PLManagedAsset, "assetsWithValidatedSavedAssetTypeMask:inManagedObjectContext:", [MEMORY[0x1E4F8BA10] maskForPhotoStreamAsset], v7);
  if (![v8 count])
  {
    id v16 = 0;
LABEL_18:
    BOOL v18 = 1;
    goto LABEL_19;
  }
  id v9 = PLMigrationGetLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v29 = [v8 count];
    _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Deleting %lu my photo stream assets", buf, 0xCu);
  }

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v10 = v8;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v10);
        }
        [*(id *)(*((void *)&v23 + 1) + 8 * i) deleteFromDatabaseOnly];
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v12);
  }

  id v22 = 0;
  char v15 = [v7 save:&v22];
  id v16 = v22;
  if (v15) {
    goto LABEL_18;
  }
  id v17 = PLMigrationGetLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v29 = (uint64_t)v16;
    _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "Failed to remove old my photo stream assets %@", buf, 0xCu);
  }

  BOOL v18 = 0;
LABEL_19:
  [v7 reset];

  return v18;
}

- (BOOL)_deleteCloudSharedAndSynced:(BOOL)a3 assetReferencesInStore:(id)a4
{
  BOOL v4 = a3;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  if ((PLIsAssetsd() & 1) == 0)
  {
    uint64_t v32 = [MEMORY[0x1E4F28B00] currentHandler];
    os_log_type_t v33 = NSStringFromSelector(a2);
    [v32 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 10478, @"%@ can only be called from assetsd", v33 object file lineNumber description];
  }
  uint64_t v8 = (void *)MEMORY[0x19F38D3B0]();
  id v9 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v7, "-[PLModelMigrator _deleteCloudSharedAndSynced:assetReferencesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v40 = 0;
  BOOL v10 = [(PLModelMigrator *)self _deletePhotoCloudSharingMetadataInManagedObjectContext:v9 error:&v40];
  id v11 = v40;
  uint64_t v12 = PLMigrationGetLog();
  uint64_t v13 = v12;
  if (!v10)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v43 = (uint64_t)v11;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Failed to delete photo cloud sharing data %@", buf, 0xCu);
    }
    BOOL v25 = 0;
    goto LABEL_31;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Deleted all iCloud shared albums, assets, and feed entries", buf, 2u);
  }

  if (v4)
  {
    int v14 = +[PLGenericAlbum allSyncedAlbumsInManagedObjectContext:v9];
    uint64_t v15 = [v14 count];
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v13 = v14;
    uint64_t v16 = [v13 countByEnumeratingWithState:&v36 objects:v41 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v37 != v18) {
            objc_enumerationMutation(v13);
          }
          [*(id *)(*((void *)&v36 + 1) + 8 * i) delete];
        }
        uint64_t v17 = [v13 countByEnumeratingWithState:&v36 objects:v41 count:16];
      }
      while (v17);
    }

    id v35 = v11;
    char v20 = [v9 save:&v35];
    id v21 = v35;

    id v22 = PLMigrationGetLog();
    long long v23 = v22;
    if ((v20 & 1) == 0)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v43 = (uint64_t)v21;
        _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "Failed to delete synced albums %@", buf, 0xCu);
      }

      BOOL v25 = 0;
      id v11 = v21;
      goto LABEL_31;
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v43 = v15;
      _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_DEFAULT, "Deleted %ld iTunes synced albums", buf, 0xCu);
    }

    uint64_t v13 = +[PLManagedAsset assetsWithValidatedSavedAssetTypeMask:inManagedObjectContext:](PLManagedAsset, "assetsWithValidatedSavedAssetTypeMask:inManagedObjectContext:", [MEMORY[0x1E4F8BA10] maskForFinderSyncedAsset], v9);
    uint64_t v24 = [v13 count];
    id v34 = v21;
    BOOL v25 = [(PLModelMigrator *)self _batchOfflineDeleteFromDatabaseOnlyAssets:v13 inManagedObjectContext:v9 error:&v34];
    id v11 = v34;

    long long v26 = PLMigrationGetLog();
    int v27 = v26;
    if (v25)
    {
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v43 = v24;
        uint64_t v28 = "Deleted %ld iTunes synced assets";
        uint64_t v29 = v27;
        os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
LABEL_29:
        _os_log_impl(&dword_19B3C7000, v29, v30, v28, buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v43 = (uint64_t)v11;
      uint64_t v28 = "Failed to delete synced assets %@";
      uint64_t v29 = v27;
      os_log_type_t v30 = OS_LOG_TYPE_ERROR;
      goto LABEL_29;
    }

LABEL_31:
    goto LABEL_32;
  }
  BOOL v25 = 1;
LABEL_32:

  return v25;
}

- (BOOL)_batchOfflineDeleteFromDatabaseOnlyAssets:(id)a3 inManagedObjectContext:(id)a4 error:(id *)a5
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if ([v7 count])
  {
    uint64_t v24 = a5;
    id v9 = objc_alloc_init(MEMORY[0x1E4F1C0D0]);
    int v27 = +[PLManagedObject entityInManagedObjectContext:v8];
    [v9 setEntity:v27];
    [v9 setReturnsObjectsAsFaults:0];
    [v9 setFetchBatchSize:100];
    BOOL v10 = [v27 relationshipsByName];
    id v11 = [v10 allKeys];
    [v9 setRelationshipKeyPathsForPrefetching:v11];

    uint64_t v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"self IN %@", v7];
    [v9 setPredicate:v12];

    v30[0] = 0;
    long long v26 = [v8 executeFetchRequest:v9 error:v30];
    BOOL v25 = v30[0];
    BOOL v28 = v26 != 0;
    if (v26)
    {
      unint64_t v13 = [v26 count];
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      do
      {
        if (v14 >= v13) {
          break;
        }
        uint64_t v16 = (void *)MEMORY[0x19F38D3B0]();
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = [v7 objectAtIndex:v14 + v17];
          [v18 deleteFromDatabaseOnly];

          unint64_t v19 = v14 + v17 + 1;
          if (v17 > 0x62) {
            break;
          }
          ++v17;
        }
        while (v19 < v13);
        uint64_t v29 = v15;
        char v20 = [v8 save:&v29];
        id v21 = v29;

        uint64_t v15 = v21;
        if ((v20 & 1) == 0)
        {
          id v22 = PLMigrationGetLog();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v32 = v15;
            _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "Save failed. Rolling back changes. (%@)", buf, 0xCu);
          }

          [v8 rollback];
        }
        unint64_t v14 = v19;
      }
      while ((v20 & 1) != 0);
      if (v24)
      {
        uint64_t v15 = v15;
        id *v24 = v15;
      }
    }
    else
    {
      uint64_t v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v32 = v25;
        _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "could not batch fault in to-be-deleted assets: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    BOOL v28 = 1;
  }

  return v28;
}

- (BOOL)_deleteOrphanedExtendedAttributes:(id)a3
{
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _deleteOrphanedExtendedAttributes:]", a3, &__block_literal_global_2144);
}

BOOL __53__PLModelMigrator__deleteOrphanedExtendedAttributes___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  BOOL v3 = +[PLExtendedAttributes entityName];
  BOOL v4 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:v3];
  id v5 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"asset == nil"];
  [v4 setPredicate:v5];

  int v6 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v4];
  [v6 setResultType:2];
  id v13 = 0;
  id v7 = [v2 executeRequest:v6 error:&v13];

  id v8 = v13;
  id v9 = PLMigrationGetLog();
  BOOL v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [v7 result];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Deleted all %@ orphaned %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    id v17 = v8;
    _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "Failed to delete orphaned %@, %@", buf, 0x16u);
  }

  return v7 != 0;
}

- (BOOL)_updateSuggestionStartAndEndDatesInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __60__PLModelMigrator__updateSuggestionStartAndEndDatesInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _updateSuggestionStartAndEndDatesInStore:]", a3, v4);
}

BOOL __60__PLModelMigrator__updateSuggestionStartAndEndDatesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (void *)MEMORY[0x1E4F1C0D0];
  id v4 = a2;
  id v5 = [v3 fetchRequestWithEntityName:@"Suggestion"];
  int v6 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"startDate == nil OR endDate == nil"];
  [v5 setPredicate:v6];

  id v7 = [v5 execute:0];
  id v8 = [v4 enumerateWithIncrementalSaveUsingObjects:v7 withBlock:&__block_literal_global_2142];

  id v9 = PLMigrationGetLog();
  BOOL v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v11 = NSStringFromSelector(*(SEL *)(a1 + 32));
      uint64_t v12 = [v8 userInfo];
      int v14 = 138543874;
      uint64_t v15 = (uint64_t)v11;
      __int16 v16 = 2112;
      id v17 = v8;
      __int16 v18 = 2112;
      unint64_t v19 = v12;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", (uint8_t *)&v14, 0x20u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134217984;
    uint64_t v15 = [v7 count];
    _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "updated %lu suggestions with nil startDates", (uint8_t *)&v14, 0xCu);
  }

  return v8 == 0;
}

uint64_t __60__PLModelMigrator__updateSuggestionStartAndEndDatesInStore___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 updateStartAndEndDate];
}

- (BOOL)_addUUIDsToExistingKeywordsInStore:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  BOOL v3 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", a3, "-[PLModelMigrator _addUUIDsToExistingKeywordsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v4 = (void *)MEMORY[0x1E4F1C0D0];
  id v5 = +[PLManagedKeyword entityName];
  int v6 = [v4 fetchRequestWithEntityName:v5];

  [v6 setFetchBatchSize:100];
  id v7 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == nil", @"uuid");
  [v6 setPredicate:v7];

  id v8 = [v3 executeFetchRequest:v6 error:0];
  id v9 = [v3 enumerateWithIncrementalSaveUsingObjects:v8 withBlock:&__block_literal_global_2133];
  BOOL v10 = PLMigrationGetLog();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      __int16 v18 = v9;
      uint64_t v12 = "Failed to add uuids to keywords, error: %@";
      id v13 = v11;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v13, v14, v12, buf, v15);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v12 = "Added uuids to existing keywords";
    id v13 = v11;
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    uint32_t v15 = 2;
    goto LABEL_6;
  }

  [v3 reset];
  return v9 == 0;
}

void __54__PLModelMigrator__addUUIDsToExistingKeywordsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = (void *)MEMORY[0x1E4F8BA08];
  id v3 = a2;
  id v4 = [v2 UUIDString];
  [v3 setUuid:v4];
}

- (BOOL)_deletePersistentHistoryInStore:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __51__PLModelMigrator__deletePersistentHistoryInStore___block_invoke;
  v4[3] = &__block_descriptor_40_e32_B16__0__NSManagedObjectContext_8l;
  v4[4] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _deletePersistentHistoryInStore:]", a3, v4);
}

BOOL __51__PLModelMigrator__deletePersistentHistoryInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v13 = 0;
  BOOL v3 = +[PLPersistentHistoryUtilities deleteHistoryBeforeToken:0 withContext:a2 error:&v13];
  id v4 = v13;
  id v5 = PLMigrationGetLog();
  int v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)long long buf = 138412290;
      uint32_t v15 = v7;
      id v8 = "%@: Deleted persistent history";
      id v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
      uint32_t v11 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v9, v10, v8, buf, v11);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    id v7 = NSStringFromSelector(*(SEL *)(a1 + 32));
    *(_DWORD *)long long buf = 138412546;
    uint32_t v15 = v7;
    __int16 v16 = 2112;
    id v17 = v4;
    id v8 = "%@: failed to deleted persistent history: %@";
    id v9 = v6;
    os_log_type_t v10 = OS_LOG_TYPE_ERROR;
    uint32_t v11 = 22;
    goto LABEL_6;
  }

  return v3;
}

- (BOOL)_nukeWallpaperRemnantsInStore:(id)a3
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int v6 = (void *)MEMORY[0x19F38D3B0]();
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _nukeWallpaperRemnantsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = [v5 metadata];
  id v9 = (void *)[v8 mutableCopy];

  [v9 removeObjectForKey:@"PLWallpaperFileHash"];
  os_log_type_t v10 = [v7 persistentStoreCoordinator];
  [v10 setMetadata:v9 forPersistentStore:v5];

  uint32_t v11 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"AlbumList"];
  uint64_t v31 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"identifier = %d", 6);
  objc_msgSend(v11, "setPredicate:");
  [v11 setFetchBatchSize:100];
  id v38 = 0;
  uint64_t v12 = [v7 executeFetchRequest:v11 error:&v38];
  id v13 = v38;
  uint64_t v32 = v12;
  if (!v13)
  {
    if ([v12 count])
    {
      BOOL v28 = v6;
      uint64_t v29 = a2;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v16 = v12;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v34 objects:v39 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            if (*(void *)v35 != v19) {
              objc_enumerationMutation(v16);
            }
            id v21 = *(void **)(*((void *)&v34 + 1) + 8 * i);
            if ([v21 albumListType] == 6) {
              [v7 deleteObject:v21];
            }
          }
          uint64_t v18 = [v16 countByEnumeratingWithState:&v34 objects:v39 count:16];
        }
        while (v18);
      }

      int v6 = v28;
      a2 = v29;
    }
    id v33 = 0;
    char v22 = [v7 save:&v33];
    os_log_type_t v14 = v33;
    if (v22)
    {
      BOOL v23 = 1;
      goto LABEL_21;
    }
    uint32_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector(a2);
      uint64_t v24 = v30 = a2;
      *(_DWORD *)long long buf = 138412546;
      long long v41 = v24;
      __int16 v42 = 2112;
      uint64_t v43 = v14;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "%@: failed to save: %@", buf, 0x16u);

      a2 = v30;
    }
    goto LABEL_19;
  }
  os_log_type_t v14 = PLMigrationGetLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint32_t v15 = NSStringFromSelector(a2);
    *(_DWORD *)long long buf = 138412546;
    long long v41 = v15;
    __int16 v42 = 2112;
    uint64_t v43 = v13;
    _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "%@: failed to fetch wallpaper album list: %@", buf, 0x16u);
LABEL_19:
  }
  BOOL v23 = 0;
LABEL_21:

  BOOL v25 = PLMigrationGetLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    long long v26 = NSStringFromSelector(a2);
    *(_DWORD *)long long buf = 138412546;
    long long v41 = v26;
    __int16 v42 = 1024;
    LODWORD(v43) = v23;
    _os_log_impl(&dword_19B3C7000, v25, OS_LOG_TYPE_DEFAULT, "%@: finished %d", buf, 0x12u);
  }

  return v23;
}

- (BOOL)_identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure:(BOOL)a3 inStore:(id)a4
{
  BOOL v4 = a3;
  v17[1] = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = [(PLModelMigrator *)self _fetchRequestToIdentifyBakedInVariationsCandidatesIncludingLongExposure:v4];
  id v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s (BakedInVariations)", "-[PLModelMigrator _identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure:inStore:]");
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __94__PLModelMigrator__identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure_inStore___block_invoke;
  void v16[3] = &unk_1E5866AE0;
  void v16[4] = self;
  BOOL v9 = [(PLModelMigrator *)self _runMigrationStepWithName:v8 fetchRequest:v7 store:v6 migrationHandler:v16];

  if (v9)
  {
    if ([(PLModelMigrator *)self isCloudPhotoLibraryEnabled])
    {
      BOOL v10 = 1;
    }
    else
    {
      uint32_t v11 = [(PLModelMigrator *)self _fetchRequestToIdentifyAdjustedDepthAndVariationsCandidates];
      v17[0] = @"additionalAttributes.unmanagedAdjustment";
      uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:1];
      [v11 setRelationshipKeyPathsForPrefetching:v12];

      id v13 = objc_msgSend(NSString, "stringWithFormat:", @"%s (adjustments_iCPLOff)", "-[PLModelMigrator _identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure:inStore:]");
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = __94__PLModelMigrator__identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure_inStore___block_invoke_2;
      v15[3] = &unk_1E5866AE0;
      v15[4] = self;
      BOOL v10 = [(PLModelMigrator *)self _runMigrationStepWithName:v13 fetchRequest:v11 store:v6 migrationHandler:v15];
    }
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

uint64_t __94__PLModelMigrator__identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure_inStore___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _identifyVariationsAndDepthAdjustmentsForAsset:a2];
}

uint64_t __94__PLModelMigrator__identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure_inStore___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _identifyVariationsAndDepthAdjustmentsForAsset:a2];
}

- (id)_fetchRequestToIdentifyAdjustedDepthAndVariationsCandidates
{
  void v16[4] = *MEMORY[0x1E4F143B8];
  BOOL v3 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"playbackVariation", 0);
  BOOL v4 = (void *)MEMORY[0x1E4F28F60];
  id v5 = [(PLModelMigrator *)self _dateForVariations];
  id v6 = [v4 predicateWithFormat:@"%K >= %@", @"adjustmentTimestamp", v5];

  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K in %@", @"playbackStyle", &unk_1EEBF1B38];
  id v8 = +[PLManagedAsset predicateForAdjustedAssetsWithKeyPathToAsset:0];
  BOOL v9 = (void *)MEMORY[0x1E4F28BA0];
  v16[0] = v6;
  v16[1] = v7;
  void v16[2] = v3;
  void v16[3] = v8;
  BOOL v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:4];
  uint32_t v11 = [v9 andPredicateWithSubpredicates:v10];

  uint64_t v12 = (void *)MEMORY[0x1E4F1C0D0];
  id v13 = +[PLManagedAsset entityName];
  os_log_type_t v14 = [v12 fetchRequestWithEntityName:v13];

  [v14 setPredicate:v11];
  return v14;
}

- (id)_fetchRequestToIdentifyBakedInVariationsCandidatesIncludingLongExposure:(BOOL)a3
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    BOOL v4 = [&unk_1EEBF1B20 arrayByAddingObject:&unk_1EEBEDF98];
  }
  else
  {
    BOOL v4 = &unk_1EEBF1B20;
  }
  id v5 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"playbackVariation", 0);
  id v6 = (void *)MEMORY[0x1E4F28F60];
  id v7 = [(PLModelMigrator *)self _dateForVariations];
  id v8 = [v6 predicateWithFormat:@"%K >= %@", @"dateCreated", v7];

  BOOL v9 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K in %@", @"playbackStyle", v4];
  BOOL v10 = +[PLManagedAsset predicateForUnadjustedAssetsWithKeyPathToAsset:0];
  uint32_t v11 = (void *)MEMORY[0x1E4F28BA0];
  v18[0] = v8;
  v18[1] = v9;
  void v18[2] = v5;
  v18[3] = v10;
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:4];
  id v13 = [v11 andPredicateWithSubpredicates:v12];

  os_log_type_t v14 = (void *)MEMORY[0x1E4F1C0D0];
  uint32_t v15 = +[PLManagedAsset entityName];
  id v16 = [v14 fetchRequestWithEntityName:v15];

  [v16 setPredicate:v13];
  return v16;
}

- (BOOL)_identifyVariationsAndDepthAdjustmentsForAsset:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if (![v3 hasAdjustments])
  {
    if ([v3 isVideo])
    {
      BOOL v4 = [v3 avAssetProxyForOriginalAllowReadFromFile:1];
      if (v4)
      {
        char v18 = [v3 updatePlaybackVariationAndLoopingStyleFromAVAsset:v4];
LABEL_15:
        char v13 = v18;
LABEL_30:

        goto LABEL_31;
      }
      long long v26 = PLMigrationGetLog();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = [v3 uuid];
        BOOL v28 = [v3 pathToOriginalVideoFile];
        int v31 = 138412546;
        uint64_t v32 = v27;
        __int16 v33 = 2112;
        long long v34 = v28;
        uint64_t v29 = "Failed to create avAsset from video asset %@, %@";
LABEL_27:
        _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v31, 0x16u);
      }
    }
    else
    {
      if (![v3 isPhotoIris]) {
        goto LABEL_20;
      }
      BOOL v4 = [v3 metadataFromMediaPropertiesOrOriginalResource];
      if (v4)
      {
        char v18 = [v3 updatePlaybackVariationAndStyleFromOriginalMetadata:v4];
        goto LABEL_15;
      }
      long long v26 = PLMigrationGetLog();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = [v3 uuid];
        BOOL v28 = [v3 mainFileURL];
        int v31 = 138412546;
        uint64_t v32 = v27;
        __int16 v33 = 2112;
        long long v34 = v28;
        uint64_t v29 = "Failed to get image properties from live photo asset %@, %@";
        goto LABEL_27;
      }
    }

    goto LABEL_29;
  }
  if (([v3 isPhotoIris] & 1) != 0 || objc_msgSend(v3, "isVideo"))
  {
    BOOL v4 = [v3 pathForFullsizeRenderVideoFile];
    id v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v6 = [v5 fileExistsAtPath:v4];

    if (v6)
    {
      id v7 = (void *)MEMORY[0x1E4F16330];
      id v8 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v4];
      BOOL v9 = [v7 assetWithURL:v8];

      if (v9)
      {
        BOOL v10 = [v3 additionalAttributes];
        uint32_t v11 = [v10 unmanagedAdjustment];
        uint64_t v12 = [v11 adjustmentRenderTypes];

        char v13 = [v3 updatePlaybackVariationAndLoopingStyleFromAVAsset:v9];
        uint64_t v14 = objc_msgSend(v3, "updateAdjustmentRenderTypes:withPlaybackVariation:", v12, objc_msgSend(v3, "playbackVariation"));
        goto LABEL_7;
      }
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  if ([v3 isPhoto])
  {
    BOOL v4 = [v3 pathForFullsizeRenderImageFile];
    uint64_t v19 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v20 = [v19 fileExistsAtPath:v4];

    if (v20)
    {
      id v21 = objc_alloc(MEMORY[0x1E4F8CC48]);
      char v22 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v4 isDirectory:0];
      id v23 = objc_alloc_init(MEMORY[0x1E4F8CDF0]);
      BOOL v9 = (void *)[v21 initWithMediaURL:v22 options:12 timeZoneLookup:v23 shouldCache:0];

      if (v9)
      {
        uint64_t v24 = [v3 additionalAttributes];
        BOOL v25 = [v24 unmanagedAdjustment];
        uint64_t v12 = [v25 adjustmentRenderTypes];

        LODWORD(v24) = [v3 depthType];
        [v3 setDepthTypeFromMetadata:v9];
        char v13 = [v3 depthType] != v24;
        uint64_t v14 = objc_msgSend(v3, "updateAdjustmentRenderTypes:withDepthType:", v12, objc_msgSend(v3, "depthType"));
LABEL_7:
        if (v14 != v12)
        {
          uint64_t v15 = v14;
          id v16 = [v3 additionalAttributes];
          uint64_t v17 = [v16 unmanagedAdjustment];
          [v17 setAdjustmentRenderTypes:v15];

          char v13 = 1;
        }
        goto LABEL_24;
      }
LABEL_23:
      char v13 = 0;
LABEL_24:

      goto LABEL_30;
    }
LABEL_29:
    char v13 = 0;
    goto LABEL_30;
  }
LABEL_20:
  char v13 = 0;
LABEL_31:

  return v13;
}

- (id)_dateForVariations
{
  id v2 = [MEMORY[0x1E4F1C9A8] calendarWithIdentifier:*MEMORY[0x1E4F1C318]];
  id v3 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v3 setYear:2017];
  [v3 setMonth:6];
  [v3 setDay:5];
  BOOL v4 = [v2 dateFromComponents:v3];

  return v4;
}

- (BOOL)_runMigrationStepWithName:(id)a3 fetchRequest:(id)a4 store:(id)a5 migrationHandler:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v33 = 0;
  long long v34 = &v33;
  uint64_t v35 = 0x2020000000;
  char v36 = 1;
  uint64_t v14 = pl_dispatch_once();
  uint64_t v15 = (void *)MEMORY[0x19F38D3B0](v14);
  id v16 = v10;
  uint64_t v17 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v12, [v16 UTF8String], 1);
  uint64_t v18 = [v11 fetchBatchSize];
  if (!v18)
  {
    uint64_t v18 = 100;
    [v11 setFetchBatchSize:100];
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = __81__PLModelMigrator__runMigrationStepWithName_fetchRequest_store_migrationHandler___block_invoke;
  v25[3] = &unk_1E586D680;
  id v19 = v17;
  id v26 = v19;
  id v20 = v11;
  id v27 = v20;
  id v21 = v16;
  id v28 = v21;
  uint64_t v29 = self;
  int v31 = &v33;
  uint64_t v32 = v18;
  id v22 = v13;
  id v30 = v22;
  [v19 performBlockAndWait:v25];

  char v23 = *((unsigned char *)v34 + 24);
  _Block_object_dispose(&v33, 8);

  return v23;
}

void __81__PLModelMigrator__runMigrationStepWithName_fetchRequest_store_migrationHandler___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v22 = 0;
  BOOL v4 = [v2 executeFetchRequest:v3 error:&v22];
  id v5 = v22;
  int v6 = PLMigrationGetLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = [v4 count];
    uint64_t v8 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 134218242;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v8;
    _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEBUG, "Processing %lu objects for %@.", buf, 0x16u);
  }

  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  int v28 = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 80);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __81__PLModelMigrator__runMigrationStepWithName_fetchRequest_store_migrationHandler___block_invoke_2099;
  v19[3] = &unk_1E5866AB8;
  id v11 = *(void **)(a1 + 56);
  id v20 = *(id *)(a1 + 64);
  id v21 = buf;
  id v18 = 0;
  LOBYTE(v9) = [v11 _performChangesOnBatchFetchedObjects:v4 inMOC:v9 batchSize:v10 objectHandler:v19 error:&v18];
  id v12 = v18;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v9;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      int v15 = *(_DWORD *)(*(void *)&buf[8] + 24);
      *(_DWORD *)char v23 = 138412546;
      uint64_t v24 = v14;
      __int16 v25 = 1024;
      LODWORD(v26) = v15;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Migration step %@ successfully processed %d objects", v23, 0x12u);
    }
  }
  else
  {
    id v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)char v23 = 138412546;
      uint64_t v24 = v17;
      __int16 v25 = 2112;
      id v26 = v12;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%@ save failed: %@", v23, 0x16u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
  }

  _Block_object_dispose(buf, 8);
}

uint64_t __81__PLModelMigrator__runMigrationStepWithName_fetchRequest_store_migrationHandler___block_invoke_2099(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return result;
}

- (BOOL)_runMigrationStepWithPrettyFunction:(const char *)a3 store:(id)a4 migrationHandler:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 1;
  uint64_t v10 = (void *)MEMORY[0x19F38D3B0]();
  pl_dispatch_once();
  id v11 = [(PLModelMigrator *)self managedObjectContextForMigrationInStore:v8 name:a3 concurrencyType:1];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __78__PLModelMigrator__runMigrationStepWithPrettyFunction_store_migrationHandler___block_invoke;
  v15[3] = &unk_1E58753C0;
  id v18 = &v19;
  id v12 = v9;
  id v17 = v12;
  id v13 = v11;
  id v16 = v13;
  [v13 performBlockAndWait:v15];

  LOBYTE(v10) = *((unsigned char *)v20 + 24);
  _Block_object_dispose(&v19, 8);

  return (char)v10;
}

uint64_t __78__PLModelMigrator__runMigrationStepWithPrettyFunction_store_migrationHandler___block_invoke(void *a1)
{
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (*(uint64_t (**)(void))(a1[5] + 16))();
  id v2 = (void *)a1[4];
  return [v2 reset];
}

- (BOOL)_updatePlaybackStylesAndVariationsInStore:(id)a3
{
  v68[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = pl_dispatch_once();
  uint64_t v7 = (void *)MEMORY[0x19F38D3B0](v6);
  id v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _updatePlaybackStylesAndVariationsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v9 = (void *)MEMORY[0x1E4F1C038];
  uint64_t v10 = +[PLManagedAsset entityName];
  id v11 = [v9 batchUpdateRequestWithEntityName:v10];

  id v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"playbackStyle", 1);
  [v11 setPredicate:v12];

  v67[0] = @"playbackVariation";
  v67[1] = @"playbackStyle";
  v68[0] = &unk_1EEBEDF68;
  v68[1] = &unk_1EEBEDF80;
  id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v68 forKeys:v67 count:2];
  [v11 setPropertiesToUpdate:v13];

  LODWORD(v13) = [(PLModelMigrator *)self _updatePlaybackWithBatchUpdateRequest:v11 targetDescription:@"autoloop" inContext:v8];
  if (!v13) {
    goto LABEL_9;
  }
  uint64_t v14 = (void *)MEMORY[0x1E4F1C038];
  int v15 = +[PLManagedAsset entityName];
  id v16 = [v14 batchUpdateRequestWithEntityName:v15];

  id v17 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"playbackStyle", 3);
  [v16 setPredicate:v17];

  v65[0] = @"playbackVariation";
  v65[1] = @"playbackStyle";
  v66[0] = &unk_1EEBEDF98;
  v66[1] = &unk_1EEBEDF98;
  id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v66 forKeys:v65 count:2];
  [v16 setPropertiesToUpdate:v18];

  LODWORD(v18) = [(PLModelMigrator *)self _updatePlaybackWithBatchUpdateRequest:v16 targetDescription:@"longexposure" inContext:v8];
  if (!v18) {
    goto LABEL_9;
  }
  uint64_t v19 = (void *)MEMORY[0x1E4F1C038];
  id v20 = +[PLManagedAsset entityName];
  uint64_t v21 = [v19 batchUpdateRequestWithEntityName:v20];

  char v22 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"playbackStyle", 4);
  [v21 setPredicate:v22];

  v63[0] = @"playbackVariation";
  v63[1] = @"playbackStyle";
  v64[0] = &unk_1EEBEDFB0;
  v64[1] = &unk_1EEBEDF80;
  char v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v64 forKeys:v63 count:2];
  [v21 setPropertiesToUpdate:v23];

  LODWORD(v23) = [(PLModelMigrator *)self _updatePlaybackWithBatchUpdateRequest:v21 targetDescription:@"pingpong" inContext:v8];
  if (v23)
  {
    __int16 v51 = v5;
    __int16 v52 = v7;
    uint64_t v24 = (void *)MEMORY[0x1E4F1C038];
    __int16 v25 = +[PLManagedAsset entityName];
    id v26 = [v24 batchUpdateRequestWithEntityName:v25];

    id v27 = +[PLManagedAsset videoComplementVisibilityStatePlayablePredicate];
    int v28 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d AND %K = 0", @"kindSubtype", 2, @"playbackStyle");
    uint64_t v29 = (void *)MEMORY[0x1E4F28BA0];
    v62[0] = v28;
    v62[1] = v27;
    id v30 = [MEMORY[0x1E4F1C978] arrayWithObjects:v62 count:2];
    int v31 = [v29 andPredicateWithSubpredicates:v30];

    [v26 setPredicate:v31];
    long long v60 = @"playbackStyle";
    long long v61 = &unk_1EEBEDF98;
    uint64_t v32 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v61 forKeys:&v60 count:1];
    [v26 setPropertiesToUpdate:v32];

    LODWORD(v32) = [(PLModelMigrator *)self _updatePlaybackWithBatchUpdateRequest:v26 targetDescription:@"live photo" inContext:v8];
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v33 = (void *)MEMORY[0x1E4F1C038];
    long long v34 = +[PLManagedAsset entityName];
    uint64_t v35 = [v33 batchUpdateRequestWithEntityName:v34];

    char v36 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d and %K = 0", @"kind", 0, @"playbackStyle");
    [v35 setPredicate:v36];

    id v58 = @"playbackStyle";
    char v59 = &unk_1EEBEDF68;
    long long v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v59 forKeys:&v58 count:1];
    [v35 setPropertiesToUpdate:v37];

    BOOL v38 = [(PLModelMigrator *)self _updatePlaybackWithBatchUpdateRequest:v35 targetDescription:@"image" inContext:v8];
    if (v38)
    {
      long long v39 = (void *)MEMORY[0x1E4F1C038];
      id v40 = +[PLManagedAsset entityName];
      long long v41 = [v39 batchUpdateRequestWithEntityName:v40];

      __int16 v42 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"(%K == %d or %K == %d) and (%K = 0)", @"kind", 1, @"kind", 2, @"playbackVariation");
      [v41 setPredicate:v42];

      os_log_type_t v56 = @"playbackStyle";
      uint32_t v57 = &unk_1EEBEDFC8;
      uint64_t v43 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v57 forKeys:&v56 count:1];
      [v41 setPropertiesToUpdate:v43];

      [v41 setResultType:2];
      id v53 = 0;
      uint64_t v44 = [v8 executeRequest:v41 error:&v53];
      id v45 = v53;
      BOOL v46 = v44 != 0;
      id v47 = PLMigrationGetLog();
      uint64_t v48 = v47;
      uint64_t v7 = v52;
      if (v44)
      {
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          int v49 = [v44 result];
          *(_DWORD *)long long buf = 138412290;
          id v55 = v49;
          _os_log_impl(&dword_19B3C7000, v48, OS_LOG_TYPE_DEFAULT, "updating autoloop playback successful with result %@", buf, 0xCu);

          uint64_t v7 = v52;
        }
      }
      else if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v55 = v45;
        _os_log_impl(&dword_19B3C7000, v48, OS_LOG_TYPE_ERROR, "Batch update request failed, updating autoloop playback, error: %@", buf, 0xCu);
      }

      id v5 = v51;
    }
    else
    {
LABEL_11:
      BOOL v46 = 0;
      id v5 = v51;
      uint64_t v7 = v52;
    }
  }
  else
  {
LABEL_9:
    BOOL v46 = 0;
  }
  [v8 reset];

  return v46;
}

- (BOOL)_updatePlaybackWithBatchUpdateRequest:(id)a3 targetDescription:(id)a4 inContext:(id)a5
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = a5;
  id v9 = a3;
  [v9 setResultType:2];
  id v16 = 0;
  uint64_t v10 = [v8 executeRequest:v9 error:&v16];

  id v11 = v16;
  id v12 = PLMigrationGetLog();
  id v13 = v12;
  if (v10)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = [v10 result];
      *(_DWORD *)long long buf = 138412546;
      id v18 = v7;
      __int16 v19 = 2112;
      id v20 = v14;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Updating %@ playback successful with result %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    id v18 = v7;
    __int16 v19 = 2112;
    id v20 = v11;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Batch update request failed, updating %@ playback, error: %@", buf, 0x16u);
  }

  return v10 != 0;
}

- (BOOL)_fixMovieAttributesInStore:(id)a3
{
  id v5 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 1;
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0]();
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _fixMovieAttributesInStore:]", 1);
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  id v9 = +[PLManagedAsset entityName];
  uint64_t v10 = [v8 fetchRequestWithEntityName:v9];

  id v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d AND %K = %d", @"kind", 1, @"kindSubtype", 0);
  [v10 setPredicate:v11];
  [v10 setFetchBatchSize:100];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __46__PLModelMigrator__fixMovieAttributesInStore___block_invoke;
  v15[3] = &unk_1E5873DC0;
  id v12 = v7;
  id v16 = v12;
  id v13 = v10;
  id v17 = v13;
  id v18 = &v20;
  SEL v19 = a2;
  [v12 performBlockAndWait:v15];

  LOBYTE(v6) = *((unsigned char *)v21 + 24);
  _Block_object_dispose(&v20, 8);

  return (char)v6;
}

void __46__PLModelMigrator__fixMovieAttributesInStore___block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  id v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v16 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v16];
  id v5 = v16;
  if (v5)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    uint64_t v6 = PLMigrationGetLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector(*(SEL *)(a1 + 56));
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      id v8 = [v5 userInfo];
      *(_DWORD *)long long buf = 138412802;
      id v22 = v7;
      __int16 v23 = 2112;
      uint64_t v24 = (uint64_t)v5;
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_ERROR, "%@ failed to fetch movie assets: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    id v9 = *(void **)(a1 + 32);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    void v15[2] = __46__PLModelMigrator__fixMovieAttributesInStore___block_invoke_2057;
    v15[3] = &unk_1E5866718;
    void v15[4] = &v17;
    uint64_t v6 = [v9 enumerateWithIncrementalSaveUsingObjects:v4 withBlock:v15];
    if (v6)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      uint64_t v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector(*(SEL *)(a1 + 56));
        id v11 = (id)objc_claimAutoreleasedReturnValue();
        id v12 = [v6 userInfo];
        *(_DWORD *)long long buf = 138412802;
        id v22 = v11;
        __int16 v23 = 2112;
        uint64_t v24 = (uint64_t)v6;
        __int16 v25 = 2112;
        id v26 = v12;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
      }
    }
    else
    {
      uint64_t v10 = PLMomentsGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = (void *)v18[3];
        uint64_t v14 = [v4 count];
        *(_DWORD *)long long buf = 134218240;
        id v22 = v13;
        __int16 v23 = 2048;
        uint64_t v24 = v14;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Update kind sub type for %lu of %lu movie assets.", buf, 0x16u);
      }
    }
  }
  _Block_object_dispose(&v17, 8);
}

void __46__PLModelMigrator__fixMovieAttributesInStore___block_invoke_2057(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = [v9 avAssetProxyForOriginalAllowReadFromFile:0];
  if (v3)
  {
    id v4 = objc_alloc(MEMORY[0x1E4F8CC48]);
    id v5 = [v9 photoLibrary];
    uint64_t v6 = [v5 libraryBundle];
    id v7 = [v6 timeZoneLookup];
    id v8 = (void *)[v4 initWithAVAsset:v3 timeZoneLookup:v7];

    [v9 updateVideoAttributesFromMetadata:v8 overwriteOriginalProperties:1];
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

- (BOOL)_setPlaybackStyleForAnimatedGIFsInStore:(id)a3
{
  id v5 = a3;
  uint64_t v22 = 0;
  __int16 v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 1;
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0]();
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _setPlaybackStyleForAnimatedGIFsInStore:]", 1);
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  id v9 = +[PLManagedAsset entityName];
  uint64_t v10 = [v8 fetchRequestWithEntityName:v9];

  id v11 = (void *)MEMORY[0x1E4F28F60];
  id v12 = [(id)*MEMORY[0x1E4F443D0] identifier];
  id v13 = [v11 predicateWithFormat:@"kind == %d AND uniformTypeIdentifier == %@ AND playbackStyle != %d", 0, v12, 2];
  [v10 setPredicate:v13];

  [v10 setFetchBatchSize:100];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = __59__PLModelMigrator__setPlaybackStyleForAnimatedGIFsInStore___block_invoke;
  void v17[3] = &unk_1E5873DC0;
  id v14 = v7;
  id v18 = v14;
  id v15 = v10;
  id v19 = v15;
  uint64_t v20 = &v22;
  SEL v21 = a2;
  [v14 performBlockAndWait:v17];

  LOBYTE(v6) = *((unsigned char *)v23 + 24);
  _Block_object_dispose(&v22, 8);

  return (char)v6;
}

void __59__PLModelMigrator__setPlaybackStyleForAnimatedGIFsInStore___block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  id v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v16 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v16];
  id v5 = v16;
  if (v5)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    uint64_t v6 = PLMigrationGetLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector(*(SEL *)(a1 + 56));
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      id v8 = [v5 userInfo];
      *(_DWORD *)long long buf = 138412802;
      id v22 = v7;
      __int16 v23 = 2112;
      uint64_t v24 = (uint64_t)v5;
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_ERROR, "%@ failed to fetch GIF assets: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    id v9 = *(void **)(a1 + 32);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    void v15[2] = __59__PLModelMigrator__setPlaybackStyleForAnimatedGIFsInStore___block_invoke_2056;
    v15[3] = &unk_1E5866718;
    void v15[4] = &v17;
    uint64_t v6 = [v9 enumerateWithIncrementalSaveUsingObjects:v4 withBlock:v15];
    if (v6)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      uint64_t v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector(*(SEL *)(a1 + 56));
        id v11 = (id)objc_claimAutoreleasedReturnValue();
        id v12 = [v6 userInfo];
        *(_DWORD *)long long buf = 138412802;
        id v22 = v11;
        __int16 v23 = 2112;
        uint64_t v24 = (uint64_t)v6;
        __int16 v25 = 2112;
        id v26 = v12;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
      }
    }
    else
    {
      uint64_t v10 = PLMomentsGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = (void *)v18[3];
        uint64_t v14 = [v4 count];
        *(_DWORD *)long long buf = 134218240;
        id v22 = v13;
        __int16 v23 = 2048;
        uint64_t v24 = v14;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Set playback style for %lu of %lu GIFs.", buf, 0x16u);
      }
    }
  }
  _Block_object_dispose(&v17, 8);
}

void __59__PLModelMigrator__setPlaybackStyleForAnimatedGIFsInStore___block_invoke_2056(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = [v3 metadataFromMediaPropertiesOrOriginalResource];
  objc_msgSend(v3, "updatePlaybackVariationAndStyleFromOriginalMetadata:");
  int v4 = [v3 playbackStyle];

  if (v4 == 2) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

- (BOOL)_removeAutoloopWorkerStatesInStore:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _removeAutoloopWorkerStatesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLAssetAnalysisState entityName];
  id v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"workerType = %d", 5);
  [v9 setPredicate:v10];

  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v9];
  [v11 setResultType:2];
  id v18 = 0;
  id v12 = [v6 executeRequest:v11 error:&v18];
  id v13 = v18;
  uint64_t v14 = PLMigrationGetLog();
  id v15 = v14;
  if (v12)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v12 result];
      *(_DWORD *)long long buf = 138412290;
      id v20 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "_removeAutoloopWorkerStatesInStore deleted %@ autoloop analysis states.", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v20 = v13;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_removeAutoloopWorkerStatesInStore failed: %@", buf, 0xCu);
  }

  [v6 reset];

  return v12 != 0;
}

- (BOOL)_fixInitialSyncMarker
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = [(PLModelMigrator *)self pathManager];
  id v3 = CPLStatusFromPathManager(v2);
  id v4 = [v3 initialSyncDate];

  if (v4)
  {
    id v14 = 0;
    int v5 = [v3 writeInitialSyncMarker:&v14];
    id v6 = v14;
    id v7 = PLMigrationGetLog();
    id v8 = v7;
    if (v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        id v9 = "Rewriting initial sync marker";
        uint64_t v10 = v8;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
        uint32_t v12 = 2;
LABEL_7:
        _os_log_impl(&dword_19B3C7000, v10, v11, v9, buf, v12);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v16 = v6;
      id v9 = "Fail to write initial sync marker, error: %@";
      uint64_t v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 12;
      goto LABEL_7;
    }
  }
  return 1;
}

- (BOOL)_removingDuplicatedCloudAssetGuid:(id)a3
{
  void v28[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v24 = 0;
  __int16 v25 = &v24;
  uint64_t v26 = 0x2020000000;
  char v27 = 1;
  int v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _removingDuplicatedCloudAssetGuid:]", 1);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  id v9 = [v7 fetchRequestWithEntityName:v8];

  [v9 setPropertiesToGroupBy:&unk_1EEBF1AF0];
  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"count(SELF) > 1"];
  [v9 setHavingPredicate:v10];

  [v9 setResultType:2];
  [v9 setPropertiesToFetch:&unk_1EEBF1B08];
  os_log_type_t v11 = (void *)MEMORY[0x1E4F28BA0];
  uint32_t v12 = +[PLManagedAsset predicateForSupportedAssetTypesForUpload];
  v28[0] = v12;
  id v13 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"cloudAssetGUID != nil && complete == 1"];
  v28[1] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:2];
  id v15 = [v11 andPredicateWithSubpredicates:v14];

  [v9 setPredicate:v15];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __53__PLModelMigrator__removingDuplicatedCloudAssetGuid___block_invoke;
  v19[3] = &unk_1E5875368;
  id v16 = v6;
  id v20 = v16;
  id v17 = v9;
  id v21 = v17;
  id v22 = self;
  __int16 v23 = &v24;
  [v16 performBlockAndWait:v19];

  LOBYTE(v5) = *((unsigned char *)v25 + 24) != 0;
  _Block_object_dispose(&v24, 8);

  return (char)v5;
}

void __53__PLModelMigrator__removingDuplicatedCloudAssetGuid___block_invoke(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  id v22 = &v21;
  uint64_t v23 = 0x2020000000;
  uint64_t v24 = 0;
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v20 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v20];
  id v5 = v20;
  if (v4)
  {
    id v6 = (void *)a1[4];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __53__PLModelMigrator__removingDuplicatedCloudAssetGuid___block_invoke_2042;
    void v16[3] = &unk_1E5866A90;
    id v7 = v6;
    uint64_t v8 = a1[6];
    id v17 = v7;
    uint64_t v18 = v8;
    uint64_t v19 = &v21;
    uint64_t v9 = [v7 enumerateWithIncrementalSaveUsingObjects:v4 withBlock:v16];

    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v9 == 0;
    if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
    {
      uint64_t v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = v22[3];
        *(_DWORD *)long long buf = 134217984;
        uint64_t v26 = v11;
        uint32_t v12 = "Removed %lu duplicated assets";
        id v13 = v10;
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
LABEL_9:
        _os_log_impl(&dword_19B3C7000, v13, v14, v12, buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v26 = v9;
        uint32_t v12 = "RemoveDuplicateMigration: Error fetching, error:%@";
        id v13 = v10;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
        goto LABEL_9;
      }
    }

    id v15 = v17;
    id v5 = (id)v9;
    goto LABEL_11;
  }
  id v15 = PLMigrationGetLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v26 = (uint64_t)v5;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "RemoveDuplicateMigration: Error executing fetch request, error:%@", buf, 0xCu);
  }
LABEL_11:

  _Block_object_dispose(&v21, 8);
}

void __53__PLModelMigrator__removingDuplicatedCloudAssetGuid___block_invoke_2042(uint64_t a1, void *a2)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 objectForKey:@"cloudAssetGUID"];
  id v5 = (void *)MEMORY[0x1E4F1C0D0];
  id v6 = +[PLManagedAsset entityName];
  id v7 = [v5 fetchRequestWithEntityName:v6];

  v73[0] = @"master.resources";
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v73 count:1];
  [v7 setRelationshipKeyPathsForPrefetching:v8];

  [v7 setFetchBatchSize:100];
  uint64_t v9 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v10 = +[PLManagedAsset predicateForSupportedAssetTypesForUpload];
  v72[0] = v10;
  uint64_t v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"cloudAssetGUID == %@ && cloudAssetGUID != nil && complete == 1", v4];
  v72[1] = v11;
  uint32_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v72 count:2];
  id v13 = [v9 andPredicateWithSubpredicates:v12];

  [v7 setPredicate:v13];
  uint64_t v56 = a1;
  os_log_type_t v14 = *(void **)(a1 + 32);
  id v65 = 0;
  id v15 = [v14 executeFetchRequest:v7 error:&v65];
  id v16 = v65;
  if (!v15)
  {
    uint64_t v21 = PLMigrationGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v68 = v16;
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "RemoveDuplicateMigration: Error fetching, error:%@", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if ((unint64_t)[v15 count] >= 2)
  {
    id v49 = v16;
    uint64_t v50 = v13;
    __int16 v51 = v7;
    __int16 v52 = v4;
    id v53 = v3;
    id v17 = [MEMORY[0x1E4F1CA48] array];
    id v55 = [MEMORY[0x1E4F28CB8] defaultManager];
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    uint64_t v48 = v15;
    id v18 = v15;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v61 objects:v71 count:16];
    if (!v19)
    {

      goto LABEL_28;
    }
    uint64_t v20 = v19;
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)v62;
    id v54 = v18;
    while (1)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v62 != v22) {
          objc_enumerationMutation(v18);
        }
        uint64_t v24 = *(void **)(*((void *)&v61 + 1) + 8 * i);
        if (v21) {
          goto LABEL_20;
        }
        if ([*(id *)(v56 + 40) isCloudPhotoLibraryEnabled])
        {
          __int16 v25 = v17;
          uint64_t v26 = [v24 master];
          uint64_t v27 = [v24 uuid];
          int v28 = +[PLCloudResource cloudResourceForResourceType:1 forAssetUuid:v27 forCloudMaster:v26];
          uint64_t v29 = [v28 filePath];
          id v30 = [(id)v29 lastPathComponent];

          int v31 = [v24 filename];
          LOBYTE(v29) = [v30 isEqualToString:v31];

          if ((v29 & 1) == 0)
          {

            id v17 = v25;
            uint64_t v21 = 0;
            id v18 = v54;
LABEL_19:

LABEL_20:
            [v17 addObject:v24];
            continue;
          }
          uint64_t v32 = v24;
          uint64_t v33 = PLMigrationGetLog();
          id v17 = v25;
          uint64_t v21 = v32;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            long long v34 = [v32 uuid];
            *(_DWORD *)long long buf = 138412546;
            id v68 = v34;
            __int16 v69 = 2112;
            long long v70 = v30;
            _os_log_impl(&dword_19B3C7000, v33, OS_LOG_TYPE_DEFAULT, "RemoveDuplicateMigration: Found a match, keeping asset %@ (%@)", buf, 0x16u);
          }
          id v18 = v54;
        }
        else
        {
          uint64_t v26 = [v24 pathForOriginalFile];
          if (![v55 fileExistsAtPath:v26]) {
            goto LABEL_19;
          }
          uint64_t v21 = v24;
          uint64_t v35 = PLMigrationGetLog();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            char v36 = [v21 uuid];
            *(_DWORD *)long long buf = 138412546;
            id v68 = v36;
            __int16 v69 = 2112;
            long long v70 = v26;
            _os_log_impl(&dword_19B3C7000, v35, OS_LOG_TYPE_DEFAULT, "RemoveDuplicateMigration: Found a match, keeping asset %@ (%@)", buf, 0x16u);
          }
        }
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v61 objects:v71 count:16];
      if (!v20)
      {

        if (!v21)
        {
LABEL_28:
          long long v37 = PLMigrationGetLog();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v38 = [v17 firstObject];
            long long v39 = [v38 uuid];
            *(_DWORD *)long long buf = 138412290;
            id v68 = v39;
            _os_log_impl(&dword_19B3C7000, v37, OS_LOG_TYPE_DEFAULT, "RemoveDuplicateMigration: Keeping asset %@", buf, 0xCu);
          }
          [v17 removeObjectAtIndex:0];
          uint64_t v21 = 0;
        }
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        id v40 = v17;
        uint64_t v41 = [v40 countByEnumeratingWithState:&v57 objects:v66 count:16];
        if (v41)
        {
          uint64_t v42 = v41;
          uint64_t v43 = *(void *)v58;
          do
          {
            for (uint64_t j = 0; j != v42; ++j)
            {
              if (*(void *)v58 != v43) {
                objc_enumerationMutation(v40);
              }
              id v45 = *(void **)(*((void *)&v57 + 1) + 8 * j);
              BOOL v46 = PLMigrationGetLog();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                id v47 = [v45 uuid];
                *(_DWORD *)long long buf = 138412290;
                id v68 = v47;
                _os_log_impl(&dword_19B3C7000, v46, OS_LOG_TYPE_DEFAULT, "RemoveDuplicateMigration: Will delete asset %@", buf, 0xCu);
              }
              [v45 deleteFromDatabaseOnly];
              ++*(void *)(*(void *)(*(void *)(v56 + 48) + 8) + 24);
            }
            uint64_t v42 = [v40 countByEnumeratingWithState:&v57 objects:v66 count:16];
          }
          while (v42);
        }

        id v4 = v52;
        id v3 = v53;
        id v13 = v50;
        id v7 = v51;
        id v15 = v48;
        id v16 = v49;
LABEL_41:

        break;
      }
    }
  }
}

- (BOOL)_convertNameSourceFromBoolToIntForDeferredRebuildFaceInStore:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v35 = 0;
  char v36 = &v35;
  uint64_t v37 = 0x2020000000;
  char v38 = 1;
  id v6 = (void *)MEMORY[0x19F38D3B0]();
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _convertNameSourceFromBoolToIntForDeferredRebuildFaceInStore:]", 1);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLDeferredRebuildFace entityName];
  uint64_t v10 = [v8 fetchRequestWithEntityName:v9];

  [v10 setFetchBatchSize:100];
  uint64_t v29 = 0;
  id v30 = &v29;
  uint64_t v31 = 0x3032000000;
  uint64_t v32 = __Block_byref_object_copy__21966;
  uint64_t v33 = __Block_byref_object_dispose__21967;
  id v34 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  uint64_t v28 = 0;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __80__PLModelMigrator__convertNameSourceFromBoolToIntForDeferredRebuildFaceInStore___block_invoke;
  v19[3] = &unk_1E58696E0;
  id v11 = v7;
  id v20 = v11;
  id v12 = v10;
  id v21 = v12;
  uint64_t v22 = &v29;
  uint64_t v23 = &v35;
  uint64_t v24 = &v25;
  [v11 performBlockAndWait:v19];
  if (*((unsigned char *)v36 + 24))
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v14 = (void *)v26[3];
      *(_DWORD *)long long buf = 134217984;
      id v40 = v14;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Fixed %lu deferred rebuild faces", buf, 0xCu);
    }
  }
  else
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v15 = NSStringFromSelector(a2);
      uint64_t v16 = v30[5];
      *(_DWORD *)long long buf = 138412546;
      id v40 = v15;
      __int16 v41 = 2112;
      uint64_t v42 = v16;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "%@ failed with error: %@", buf, 0x16u);
    }
  }

  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);

  BOOL v17 = *((unsigned char *)v36 + 24) != 0;
  _Block_object_dispose(&v35, 8);

  return v17;
}

void __80__PLModelMigrator__convertNameSourceFromBoolToIntForDeferredRebuildFaceInStore___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v5 != 0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v5 count];
    uint64_t v6 = [*(id *)(a1 + 32) enumerateWithIncrementalSaveUsingObjects:v5 withBlock:&__block_literal_global_2029];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                           + 40) == 0;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      if ([*(id *)(a1 + 32) hasChanges])
      {
        uint64_t v9 = *(void **)(a1 + 32);
        uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
        id v12 = *(id *)(v10 + 40);
        char v11 = [v9 save:&v12];
        objc_storeStrong((id *)(v10 + 40), v12);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v11;
      }
    }
  }
}

void __80__PLModelMigrator__convertNameSourceFromBoolToIntForDeferredRebuildFaceInStore___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend(v2, "setNameSource:", objc_msgSend(v2, "nameSource") == 0);
}

- (BOOL)_populateUserKeyFacePickSourceForPersonInStore:(id)a3
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2020000000;
  char v39 = 1;
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _populateUserKeyFacePickSourceForPersonInStore:]", 1);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLPerson entityName];
  uint64_t v10 = [v8 fetchRequestWithEntityName:v9];

  char v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"keyFace.nameSource == %d AND verifiedType == %d", 1, 1);
  [v10 setPredicate:v11];

  [v10 setFetchBatchSize:100];
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x3032000000;
  uint64_t v33 = __Block_byref_object_copy__21966;
  id v34 = __Block_byref_object_dispose__21967;
  id v35 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  uint64_t v29 = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __66__PLModelMigrator__populateUserKeyFacePickSourceForPersonInStore___block_invoke;
  v20[3] = &unk_1E58696E0;
  id v12 = v7;
  id v21 = v12;
  id v13 = v10;
  id v22 = v13;
  uint64_t v23 = &v30;
  uint64_t v24 = &v36;
  uint64_t v25 = &v26;
  [v12 performBlockAndWait:v20];
  if (*((unsigned char *)v37 + 24))
  {
    os_log_type_t v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = (void *)v27[3];
      *(_DWORD *)long long buf = 134217984;
      __int16 v41 = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Populated user keyFacePickSource on %lu assets", buf, 0xCu);
    }
  }
  else
  {
    os_log_type_t v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = NSStringFromSelector(a2);
      uint64_t v17 = v31[5];
      *(_DWORD *)long long buf = 138412546;
      __int16 v41 = v16;
      __int16 v42 = 2112;
      uint64_t v43 = v17;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "%@ failed with error: %@", buf, 0x16u);
    }
  }

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);

  BOOL v18 = *((unsigned char *)v37 + 24) != 0;
  _Block_object_dispose(&v36, 8);

  return v18;
}

void __66__PLModelMigrator__populateUserKeyFacePickSourceForPersonInStore___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v5 != 0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v5 count];
    uint64_t v6 = [*(id *)(a1 + 32) enumerateWithIncrementalSaveUsingObjects:v5 withBlock:&__block_literal_global_2025];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                           + 40) == 0;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      if ([*(id *)(a1 + 32) hasChanges])
      {
        uint64_t v9 = *(void **)(a1 + 32);
        uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
        id v12 = *(id *)(v10 + 40);
        char v11 = [v9 save:&v12];
        objc_storeStrong((id *)(v10 + 40), v12);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v11;
      }
    }
  }
}

uint64_t __66__PLModelMigrator__populateUserKeyFacePickSourceForPersonInStore___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 setKeyFacePickSource:1];
}

- (BOOL)_populateAdjustmentTimestampsOnAssets:(id)a3
{
  v25[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v21 = 0;
  id v22 = &v21;
  uint64_t v23 = 0x2020000000;
  char v24 = 1;
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _populateAdjustmentTimestampsOnAssets:]", 1);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  uint64_t v10 = [v8 fetchRequestWithEntityName:v9];

  char v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"additionalAttributes.unmanagedAdjustment.adjustmentTimestamp != nil"];
  [v10 setPredicate:v11];

  v25[0] = @"additionalAttributes.unmanagedAdjustment.adjustmentTimestamp";
  id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:1];
  [v10 setRelationshipKeyPathsForPrefetching:v12];

  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __57__PLModelMigrator__populateAdjustmentTimestampsOnAssets___block_invoke;
  void v16[3] = &unk_1E5873DC0;
  id v13 = v7;
  id v17 = v13;
  id v14 = v10;
  id v18 = v14;
  uint64_t v19 = &v21;
  SEL v20 = a2;
  [v13 performBlockAndWait:v16];

  LOBYTE(v6) = *((unsigned char *)v22 + 24) != 0;
  _Block_object_dispose(&v21, 8);

  return (char)v6;
}

void __57__PLModelMigrator__populateAdjustmentTimestampsOnAssets___block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  char v11 = 0;
  id v2 = (id)[*(id *)(a1 + 32) enumerateObjectsFromFetchRequest:*(void *)(a1 + 40) count:&v11 usingDefaultBatchSizeWithBlock:&__block_literal_global_2020];
  if ([*(id *)(a1 + 32) hasChanges])
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v10 = 0;
    char v4 = [v3 save:&v10];
    id v5 = v10;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v4;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      uint64_t v6 = PLMigrationGetLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = NSStringFromSelector(*(SEL *)(a1 + 56));
        uint64_t v8 = [v5 userInfo];
        *(_DWORD *)long long buf = 138412802;
        id v13 = v7;
        __int16 v14 = 2112;
        id v15 = v5;
        __int16 v16 = 2112;
        id v17 = v8;
        _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
      }
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v9 = PLMigrationGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      id v13 = v11;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Populated adjustmentTimestamps on %lu assets", buf, 0xCu);
    }
  }
}

void __57__PLModelMigrator__populateAdjustmentTimestampsOnAssets___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 additionalAttributes];
  char v4 = [v3 unmanagedAdjustment];
  id v5 = [v4 adjustmentTimestamp];

  [v2 setAdjustmentTimestamp:v5];
}

- (BOOL)_migrateCloudResourcesRelationshipsInStagedStore:(id)a3
{
  v28[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = pl_dispatch_once();
  uint64_t v7 = (void *)MEMORY[0x19F38D3B0](v6);
  uint64_t v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _migrateCloudResourcesRelationshipsInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v9 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"AdditionalAssetAttributes"];
  id v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"cloudMaster != nil OR cloudResources.@count > 0"];
  [v9 setPredicate:v10];

  v28[0] = @"asset";
  char v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:1];
  [v9 setRelationshipKeyPathsForPrefetching:v11];

  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  id v12 = [v8 executeFetchRequest:v9 error:0];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __68__PLModelMigrator__migrateCloudResourcesRelationshipsInStagedStore___block_invoke;
  v19[3] = &unk_1E5866A48;
  void v19[4] = &v20;
  id v13 = [v8 enumerateWithIncrementalSaveUsingObjects:v12 shouldRefreshAfterSave:1 withBlock:v19];
  if (v13)
  {
    __int16 v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = NSStringFromSelector(a2);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v25 = v15;
      __int16 v26 = 2112;
      uint64_t v27 = v13;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "%@ failed to migrate cloudResources fields: %@", buf, 0x16u);
    }
  }
  else
  {
    __int16 v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = NSStringFromSelector(a2);
      uint64_t v17 = v21[3];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v25 = v16;
      __int16 v26 = 1024;
      LODWORD(v27) = v17;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "%@ migrated cloudResources fields on %d assets", buf, 0x12u);
    }
  }

  _Block_object_dispose(&v20, 8);

  return v13 == 0;
}

void __68__PLModelMigrator__migrateCloudResourcesRelationshipsInStagedStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [v3 valueForKey:@"cloudMaster"];
  char v4 = [v3 valueForKey:@"cloudResources"];
  id v5 = [v3 valueForKey:@"asset"];

  [v5 setValue:v6 forKey:@"master"];
  [v5 setValue:v4 forKey:@"resources"];
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

- (BOOL)_revalidateImportSessionDates:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"ImportSession"];
  [v5 setFetchBatchSize:100];
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  id v6 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _revalidateImportSessionDates:]");
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __49__PLModelMigrator__revalidateImportSessionDates___block_invoke;
  v15[3] = &unk_1E5866A20;
  void v15[4] = &v16;
  BOOL v7 = [(PLModelMigrator *)self _runMigrationStepWithName:v6 fetchRequest:v5 store:v4 migrationHandler:v15];

  if (v7)
  {
    uint64_t v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = v17[3];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v21 = v9;
      id v10 = "Revalidate %lu import session albums.";
      char v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
      uint32_t v13 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v11, v12, v10, buf, v13);
    }
  }
  else
  {
    uint64_t v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v10 = "_revalidateImportSessionDates failed.";
      char v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 2;
      goto LABEL_6;
    }
  }

  _Block_object_dispose(&v16, 8);
  return v7;
}

uint64_t __49__PLModelMigrator__revalidateImportSessionDates___block_invoke(uint64_t a1, void *a2)
{
  return 1;
}

- (BOOL)_setImportedByInPLCloudMaster:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
  [v5 setFetchBatchSize:100];
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  id v6 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "-[PLModelMigrator _setImportedByInPLCloudMaster:]");
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __49__PLModelMigrator__setImportedByInPLCloudMaster___block_invoke;
  v15[3] = &unk_1E5866A20;
  void v15[4] = &v16;
  BOOL v7 = [(PLModelMigrator *)self _runMigrationStepWithName:v6 fetchRequest:v5 store:v4 migrationHandler:v15];

  if (v7)
  {
    uint64_t v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = v17[3];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v21 = v9;
      id v10 = "setImportedBy for %lu masters";
      char v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
      uint32_t v13 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v11, v12, v10, buf, v13);
    }
  }
  else
  {
    uint64_t v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v10 = "_setImportedByInPLCloudMaster failed.";
      char v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 2;
      goto LABEL_6;
    }
  }

  _Block_object_dispose(&v16, 8);
  return v7;
}

uint64_t __49__PLModelMigrator__setImportedByInPLCloudMaster___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 assets];
  id v5 = [v4 allObjects];

  if ([v5 count])
  {
    id v6 = [v5 firstObject];
    BOOL v7 = [v6 additionalAttributes];
    objc_msgSend(v3, "setImportedBy:", objc_msgSend(v7, "importedBy"));

    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }

  return 1;
}

- (BOOL)_persistImportSessionAlbumType:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _persistImportSessionAlbumType:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"ImportSession"];
  [v7 setFetchBatchSize:100];
  uint64_t v13 = 0;
  __int16 v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __50__PLModelMigrator__persistImportSessionAlbumType___block_invoke;
  v12[3] = &unk_1E58669D0;
  v12[4] = self;
  void v12[5] = &v13;
  id v8 = (id)[v6 enumerateObjectsFromFetchRequest:v7 count:0 usingDefaultBatchSizeWithBlock:v12];
  uint64_t v9 = PLMigrationGetLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = v14[3];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v18 = v10;
    _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Persisted %lu import session albums.", buf, 0xCu);
  }

  _Block_object_dispose(&v13, 8);

  return 1;
}

uint64_t __50__PLModelMigrator__persistImportSessionAlbumType___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = [*(id *)(a1 + 32) _persistMetadataToFileSystemForAlbum:a2];
  if (result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return result;
}

- (BOOL)_createImportSessionAlbums:(id)a3
{
  v41[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = pl_dispatch_once();
  BOOL v7 = (void *)MEMORY[0x19F38D3B0](v6);
  id v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _createImportSessionAlbums:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v9 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v10 = +[PLManagedAsset entityName];
  char v11 = [v9 fetchRequestWithEntityName:v10];

  os_log_type_t v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"additionalAttributes.importSessionID != NULL"];
  [v11 setPredicate:v12];

  v41[0] = @"additionalAttributes";
  uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:1];
  [v11 setRelationshipKeyPathsForPrefetching:v13];

  __int16 v14 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"additionalAttributes.importSessionID" ascending:1];
  id v40 = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v40 count:1];
  [v11 setSortDescriptors:v15];

  [v11 setFetchBatchSize:100];
  uint64_t v16 = [v8 executeFetchRequest:v11 error:0];
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  uint64_t v33 = 0;
  v28[0] = 0;
  v28[1] = v28;
  void v28[2] = 0x3032000000;
  void v28[3] = __Block_byref_object_copy__21966;
  void v28[4] = __Block_byref_object_dispose__21967;
  id v29 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __46__PLModelMigrator__createImportSessionAlbums___block_invoke;
  void v24[3] = &unk_1E5866C98;
  __int16 v26 = v28;
  id v17 = v8;
  id v25 = v17;
  uint64_t v27 = &v30;
  uint64_t v18 = [v17 enumerateWithIncrementalSaveUsingObjects:v16 withBlock:v24];
  if (v18)
  {
    uint64_t v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector(a2);
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v21 = [v18 userInfo];
      *(_DWORD *)long long buf = 138543874;
      id v35 = v20;
      __int16 v36 = 2112;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      char v39 = v21;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = (void *)v31[3];
      *(_DWORD *)long long buf = 134217984;
      id v35 = v22;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_DEFAULT, "Added %lu assets to importSessionAlbums", buf, 0xCu);
    }
  }

  [v17 reset];
  _Block_object_dispose(v28, 8);

  _Block_object_dispose(&v30, 8);

  return v18 == 0;
}

void __46__PLModelMigrator__createImportSessionAlbums___block_invoke(void *a1, void *a2)
{
  id v12 = a2;
  id v3 = [v12 additionalAttributes];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 valueForKey:@"importSessionID"];
    uint64_t v6 = [v12 importSession];
    BOOL v7 = v6;
    if (v6)
    {
      id v8 = [v6 importSessionID];
      char v9 = [v8 isEqualToString:v5];

      if (v9) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = [*(id *)(*(void *)(a1[5] + 8) + 40) importSessionID];
    if ([v10 isEqualToString:v5])
    {
      id v11 = *(id *)(*(void *)(a1[5] + 8) + 40);

      if (v11)
      {
LABEL_11:
        [v12 setImportSession:v11];
        [v11 updateImportDatesFromAddedAsset:v12];

LABEL_12:
        [v4 setValue:0 forKey:@"importSessionID"];
        ++*(void *)(*(void *)(a1[6] + 8) + 24);

        goto LABEL_13;
      }
    }
    else
    {
    }
    id v11 = +[PLImportSession albumWithImportSessionID:v5 inManagedObjectContext:a1[4]];
    if (!v11)
    {
      id v11 = +[PLImportSession insertNewImportSessionAlbumWithImportSessionID:v5 inManagedObjectContext:a1[4]];
    }
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), v11);
    goto LABEL_11;
  }
LABEL_13:
}

- (BOOL)_removeInvalidImportSessionAlbums:(id)a3
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __53__PLModelMigrator__removeInvalidImportSessionAlbums___block_invoke;
  v4[3] = &unk_1E58669F8;
  v4[4] = self;
  void v4[5] = a2;
  return -[PLModelMigrator _runMigrationStepWithPrettyFunction:store:migrationHandler:](self, "_runMigrationStepWithPrettyFunction:store:migrationHandler:", "-[PLModelMigrator _removeInvalidImportSessionAlbums:]", a3, v4);
}

BOOL __53__PLModelMigrator__removeInvalidImportSessionAlbums___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"ImportSession"];
  id v5 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"importSessionID == NULL"];
  [v4 setPredicate:v5];

  uint64_t v6 = [v3 executeFetchRequest:v4 error:0];
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __53__PLModelMigrator__removeInvalidImportSessionAlbums___block_invoke_2;
  v13[3] = &unk_1E58669D0;
  v13[4] = *(void *)(a1 + 32);
  void v13[5] = &v14;
  BOOL v7 = [v3 enumerateWithIncrementalSaveUsingObjects:v6 withBlock:v13];
  if (v7)
  {
    id v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector(*(SEL *)(a1 + 40));
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v10 = [v7 userInfo];
      *(_DWORD *)long long buf = 138543874;
      id v19 = v9;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      __int16 v22 = 2112;
      uint64_t v23 = v10;
      _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    id v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)v15[3];
      *(_DWORD *)long long buf = 134217984;
      id v19 = v11;
      _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "removed %lu invalid importSession ", buf, 0xCu);
    }
  }

  _Block_object_dispose(&v14, 8);
  return v7 == 0;
}

void __53__PLModelMigrator__removeInvalidImportSessionAlbums___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 pathManager];
  [v4 removePersistedFileSystemDataWithPathManager:v5];

  [v4 delete];
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

- (BOOL)_migrateDetectedFacesGroupInStagedStore:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = pl_dispatch_once();
  BOOL v7 = (void *)MEMORY[0x19F38D3B0](v6);
  id v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _migrateDetectedFacesGroupInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  id v9 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v10 = +[PLDetectedFace entityName];
  id v11 = [v9 fetchRequestWithEntityName:v10];

  id v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"faceGroups.@count > 0"];
  [v11 setPredicate:v12];

  uint64_t v34 = 0;
  id v35 = &v34;
  uint64_t v36 = 0x2020000000;
  uint64_t v37 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  uint64_t v33 = 0;
  uint64_t v13 = [v8 executeFetchRequest:v11 error:0];
  uint64_t v23 = MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  id v25 = __59__PLModelMigrator__migrateDetectedFacesGroupInStagedStore___block_invoke;
  __int16 v26 = &unk_1E5866980;
  uint64_t v28 = &v34;
  id v14 = v8;
  id v27 = v14;
  id v29 = &v30;
  uint64_t v15 = [v14 enumerateWithIncrementalSaveUsingObjects:v13 shouldRefreshAfterSave:1 withBlock:&v23];
  if (v15)
  {
    uint64_t v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = objc_msgSend(v15, "userInfo", context, v23, v24, v25, v26);
      *(_DWORD *)long long buf = 136315650;
      char v39 = "-[PLModelMigrator _migrateDetectedFacesGroupInStagedStore:]";
      __int16 v40 = 2112;
      *(void *)__int16 v41 = v15;
      *(_WORD *)&v41[8] = 2112;
      __int16 v42 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%s: failed to migrate detected faces group: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromSelector(a2);
      uint64_t v18 = (char *)objc_claimAutoreleasedReturnValue();
      uint64_t v19 = v35[3];
      uint64_t v20 = v31[3];
      *(_DWORD *)long long buf = 138412802;
      char v39 = v18;
      __int16 v40 = 1024;
      *(_DWORD *)__int16 v41 = v19;
      *(_WORD *)&void v41[4] = 1024;
      *(_DWORD *)&v41[6] = v20;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "%@ migrated %d persons with detectedFacesGroups, deleted %d rejectedFacesGroup", buf, 0x18u);
    }
  }

  [v14 reset];
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);

  return v15 == 0;
}

void __59__PLModelMigrator__migrateDetectedFacesGroupInStagedStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 valueForKey:@"faceGroups"];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __59__PLModelMigrator__migrateDetectedFacesGroupInStagedStore___block_invoke_2;
  v8[3] = &unk_1E58669A8;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 32);
  id v5 = (id)v7;
  long long v10 = v7;
  uint64_t v11 = *(void *)(a1 + 48);
  id v6 = v3;
  [v4 enumerateObjectsUsingBlock:v8];
}

void __59__PLModelMigrator__migrateDetectedFacesGroupInStagedStore___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)&v16[13] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 valueForKey:@"faceGroupType"];
  int v5 = [v4 intValue];

  if (v5 == 5)
  {
    id v9 = PLMigrationGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v13 = 138412546;
      id v14 = (const char *)v3;
      __int16 v15 = 2112;
      *(void *)uint64_t v16 = v10;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Found rejected faceGroup %@ in detectedFace %@", (uint8_t *)&v13, 0x16u);
    }

    [*(id *)(a1 + 40) deleteObject:v3];
    uint64_t v11 = *(void *)(a1 + 56);
    goto LABEL_14;
  }
  if (v5 == 1)
  {
    id v6 = [*(id *)(a1 + 32) valueForKey:@"faceGroup"];

    if (v6)
    {
      long long v7 = PLMigrationGetLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v13 = 138412546;
        id v14 = (const char *)v3;
        __int16 v15 = 2112;
        *(void *)uint64_t v16 = v8;
        _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_ERROR, "Found more than 1 faceGroup %@ for detectedFace %@ during staged migration", (uint8_t *)&v13, 0x16u);
      }

      goto LABEL_15;
    }
    [*(id *)(a1 + 32) setValue:v3 forKey:@"faceGroup"];
    uint64_t v11 = *(void *)(a1 + 48);
LABEL_14:
    ++*(void *)(*(void *)(v11 + 8) + 24);
    goto LABEL_15;
  }
  id v12 = PLMigrationGetLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v13 = 136315650;
    id v14 = "-[PLModelMigrator _migrateDetectedFacesGroupInStagedStore:]_block_invoke";
    __int16 v15 = 1024;
    *(_DWORD *)uint64_t v16 = v5;
    void v16[2] = 2112;
    *(void *)&void v16[3] = v3;
    _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "%s: Unknown faceGroupType %d for faceGroup %@", (uint8_t *)&v13, 0x1Cu);
  }

LABEL_15:
}

- (BOOL)_migrateRejectedFacesGroupInStagedStore:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = pl_dispatch_once();
  long long v7 = (void *)MEMORY[0x19F38D3B0](v6);
  uint64_t v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _migrateRejectedFacesGroupInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  id v9 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v10 = +[PLPerson entityName];
  uint64_t v11 = [v9 fetchRequestWithEntityName:v10];

  [v11 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1AD8];
  id v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"rejectedFacesGroup != nil"];
  [v11 setPredicate:v12];

  uint64_t v34 = 0;
  id v35 = &v34;
  uint64_t v36 = 0x2020000000;
  uint64_t v37 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  uint64_t v33 = 0;
  int v13 = [v8 executeFetchRequest:v11 error:0];
  uint64_t v23 = MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  id v25 = __59__PLModelMigrator__migrateRejectedFacesGroupInStagedStore___block_invoke;
  __int16 v26 = &unk_1E5866980;
  uint64_t v28 = &v34;
  id v14 = v8;
  id v27 = v14;
  id v29 = &v30;
  __int16 v15 = [v14 enumerateWithIncrementalSaveUsingObjects:v13 shouldRefreshAfterSave:1 withBlock:&v23];
  if (v15)
  {
    uint64_t v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = objc_msgSend(v15, "userInfo", context, v23, v24, v25, v26);
      *(_DWORD *)long long buf = 136315650;
      char v39 = "-[PLModelMigrator _migrateRejectedFacesGroupInStagedStore:]";
      __int16 v40 = 2112;
      *(void *)__int16 v41 = v15;
      *(_WORD *)&v41[8] = 2112;
      __int16 v42 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%s: failed to migrate rejected faces group: %@ %@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromSelector(a2);
      uint64_t v18 = (char *)objc_claimAutoreleasedReturnValue();
      uint64_t v19 = v35[3];
      uint64_t v20 = v31[3];
      *(_DWORD *)long long buf = 138412802;
      char v39 = v18;
      __int16 v40 = 1024;
      *(_DWORD *)__int16 v41 = v19;
      *(_WORD *)&void v41[4] = 1024;
      *(_DWORD *)&v41[6] = v20;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "%@ migrated %d persons with rejectedFacesGroup, deleted %d rejectedFacesGroup", buf, 0x18u);
    }
  }

  [v14 reset];
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);

  return v15 == 0;
}

void __59__PLModelMigrator__migrateRejectedFacesGroupInStagedStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 valueForKey:@"rejectedFacesGroup"];
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 valueForKey:@"faces"];
    if (v6)
    {
      [v3 setValue:v6 forKey:@"rejectedFaces"];
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    [*(id *)(a1 + 32) deleteObject:v5];
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  else
  {
    long long v7 = PLMigrationGetLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      id v9 = "-[PLModelMigrator _migrateRejectedFacesGroupInStagedStore:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_ERROR, "%s: failed to find rejectedFacesGroup for person %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

- (BOOL)_migrateOriginalColorSpaceInStagedStore:(id)a3
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _migrateOriginalColorSpaceInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  long long v7 = (void *)MEMORY[0x1E4F1C038];
  int v8 = +[PLManagedAsset entityName];
  id v9 = [v7 batchUpdateRequestWithEntityName:v8];

  __int16 v26 = @"originalColorSpace";
  __int16 v10 = [MEMORY[0x1E4F28C68] expressionForKeyPath:@"additionalAttributes.originalColorSpace"];
  v27[0] = v10;
  id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  [v9 setPropertiesToUpdate:v11];

  [v9 setResultType:2];
  id v19 = 0;
  uint64_t v12 = [v6 executeRequest:v9 error:&v19];
  id v13 = v19;
  id v14 = PLMigrationGetLog();
  __int16 v15 = v14;
  if (v12)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = [v12 result];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v21 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Updated %@ assets", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = [v13 userInfo];
    *(_DWORD *)long long buf = 136315650;
    uint64_t v21 = "-[PLModelMigrator _migrateOriginalColorSpaceInStagedStore:]";
    __int16 v22 = 2112;
    id v23 = v13;
    __int16 v24 = 2112;
    id v25 = v17;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
  }

  return v12 != 0;
}

- (BOOL)_performMigrationCacheDateCreatedOnResources:(BOOL)a3 cacheItemIdentifierOnResources:(BOOL)a4 store:(id)a5
{
  BOOL v5 = a4;
  void v31[2] = *MEMORY[0x1E4F143B8];
  id v9 = a5;
  __int16 v10 = v9;
  if (a3 || v5)
  {
    if (!v9)
    {
      id v23 = [MEMORY[0x1E4F28B00] currentHandler];
      [v23 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 9279, @"Invalid parameter not satisfying: %@", @"store != nil" object file lineNumber description];
    }
    uint64_t v12 = (void *)MEMORY[0x19F38D3B0]();
    id v13 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v10, "-[PLModelMigrator _performMigrationCacheDateCreatedOnResources:cacheItemIdentifierOnResources:store:]", *MEMORY[0x1E4F1C1C0]);
    id v14 = (void *)MEMORY[0x1E4F1C0D0];
    __int16 v15 = +[PLManagedAsset entityName];
    uint64_t v16 = [v14 fetchRequestWithEntityName:v15];

    v31[0] = @"master";
    v31[1] = @"resources";
    uint64_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:2];
    [v16 setRelationshipKeyPathsForPrefetching:v17];

    [v16 setFetchBatchSize:100];
    uint64_t v18 = [v13 executeFetchRequest:v16 error:0];
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __101__PLModelMigrator__performMigrationCacheDateCreatedOnResources_cacheItemIdentifierOnResources_store___block_invoke;
    void v24[3] = &__block_descriptor_34_e31_v32__0__PLManagedAsset_8Q16_B24l;
    BOOL v25 = a3;
    BOOL v26 = v5;
    id v19 = [v13 enumerateWithIncrementalSaveUsingObjects:v18 withBlock:v24];
    BOOL v11 = v19 == 0;
    if (v19)
    {
      uint64_t v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = [v19 userInfo];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v28 = v19;
        __int16 v29 = 2112;
        uint64_t v30 = v21;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "_performMigrationWithMarkThumbnailsAsAltAvailable:cacheDateCreatedOnResources:cacheItemIdentifierOnResources:store: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    BOOL v11 = 1;
  }

  return v11;
}

void __101__PLModelMigrator__performMigrationCacheDateCreatedOnResources_cacheItemIdentifierOnResources_store___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 32))
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    BOOL v5 = [v3 master];
    uint64_t v6 = [v5 resources];

    uint64_t v7 = [v6 countByEnumeratingWithState:&v51 objects:v58 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v52 != v9) {
            objc_enumerationMutation(v6);
          }
          BOOL v11 = *(void **)(*((void *)&v51 + 1) + 8 * i);
          uint64_t v12 = [v4 master];
          id v13 = [v12 creationDate];
          [v11 setDateCreated:v13];
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v51 objects:v58 count:16];
      }
      while (v8);
    }

    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v14 = [v4 resources];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v47 objects:v57 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v48;
      do
      {
        for (uint64_t j = 0; j != v16; ++j)
        {
          if (*(void *)v48 != v17) {
            objc_enumerationMutation(v14);
          }
          id v19 = *(void **)(*((void *)&v47 + 1) + 8 * j);
          uint64_t v20 = [v4 master];
          uint64_t v21 = [v20 creationDate];
          [v19 setDateCreated:v21];
        }
        uint64_t v16 = [v14 countByEnumeratingWithState:&v47 objects:v57 count:16];
      }
      while (v16);
    }
  }
  if (*(unsigned char *)(a1 + 33))
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    __int16 v22 = [v4 resources];
    uint64_t v23 = [v22 countByEnumeratingWithState:&v43 objects:v56 count:16];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)v44;
      do
      {
        for (uint64_t k = 0; k != v24; ++k)
        {
          if (*(void *)v44 != v25) {
            objc_enumerationMutation(v22);
          }
          id v27 = *(void **)(*((void *)&v43 + 1) + 8 * k);
          uint64_t v28 = [v4 cloudAssetGUID];
          [v27 setItemIdentifier:v28];
        }
        uint64_t v24 = [v22 countByEnumeratingWithState:&v43 objects:v56 count:16];
      }
      while (v24);
    }

    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    __int16 v29 = objc_msgSend(v4, "master", 0);
    uint64_t v30 = [v29 resources];

    uint64_t v31 = [v30 countByEnumeratingWithState:&v39 objects:v55 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v40;
      do
      {
        for (uint64_t m = 0; m != v32; ++m)
        {
          if (*(void *)v40 != v33) {
            objc_enumerationMutation(v30);
          }
          id v35 = *(void **)(*((void *)&v39 + 1) + 8 * m);
          uint64_t v36 = [v4 master];
          uint64_t v37 = [v36 scopedIdentifier];
          __int16 v38 = [v37 identifier];
          [v35 setItemIdentifier:v38];
        }
        uint64_t v32 = [v30 countByEnumeratingWithState:&v39 objects:v55 count:16];
      }
      while (v32);
    }
  }
}

- (BOOL)_moveMyPhotoStreamToAlbumsListInStore:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
    __int16 v22 = NSStringFromSelector(a2);
    [v21 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 9231, @"%@ can only be called from assetsd", v22 object file lineNumber description];
  }
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _moveMyPhotoStreamToAlbumsListInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = +[PLGenericAlbum albumWithKind:1500 inManagedObjectContext:v7];
  if (v8)
  {
    uint64_t v9 = +[PLManagedAlbumList allStreamedAlbumsListInManagedObjectContext:v7];
    __int16 v10 = +[PLManagedAlbumList albumListInManagedObjectContext:v7];
    BOOL v11 = [v9 albums];
    uint64_t v12 = [v11 indexOfObject:v8];
    if (v12 != 0x7FFFFFFFFFFFFFFFLL)
    {
      [v11 removeObjectAtIndex:v12];
      id v13 = PLMigrationGetLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Removed My Photo Stream album from streams list", buf, 2u);
      }
    }
    id v14 = [v10 albums];
    if ([v14 indexOfObject:v8] == 0x7FFFFFFFFFFFFFFFLL)
    {
      [v10 insertIntoOrderedAlbumsAtIndexByPriorityForAlbum:v8];
      uint64_t v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Added My Photo Stream album to albums list", buf, 2u);
      }
    }
    if ([v7 hasChanges])
    {
      uint64_t v24 = v6;
      id v25 = 0;
      char v16 = [v7 save:&v25];
      id v17 = v25;
      char v18 = v16 ^ 1;
      if ((v16 & 1) == 0)
      {
        id v19 = PLMigrationGetLog();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = [v17 userInfo];
          *(_DWORD *)long long buf = 138412546;
          id v27 = v17;
          __int16 v28 = 2112;
          __int16 v29 = v23;
          _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "Failed to move My Photo Stream to albums list %@ %@", buf, 0x16u);
        }
      }

      uint64_t v6 = v24;
    }
    else
    {
      char v18 = 0;
    }
  }
  else
  {
    char v18 = 0;
  }

  return v18 ^ 1;
}

- (BOOL)_fixupAssetPersistence:(id)a3
{
  void v20[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupAssetPersistence:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  __int16 v10 = [v8 fetchRequestWithEntityName:v9];

  BOOL v11 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForFixupAssetPersistenceExclusions"), 1);
  v20[0] = v12;
  id v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != 0", @"complete");
  v20[1] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:2];
  uint64_t v15 = [v11 andPredicateWithSubpredicates:v14];
  [v10 setPredicate:v15];

  id v19 = @"additionalAttributes";
  char v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v19 count:1];
  [v10 setRelationshipKeyPathsForPrefetching:v16];

  id v17 = (id)[v7 enumerateObjectsFromFetchRequest:v10 count:0 usingDefaultBatchSizeWithBlock:&__block_literal_global_1948];
  [v7 reset];

  return 1;
}

uint64_t __42__PLModelMigrator__fixupAssetPersistence___block_invoke(uint64_t a1, void *a2)
{
  return [a2 persistMetadataToFilesystem];
}

- (BOOL)_persistVideoComplPropertiesInStore:(id)a3
{
  void v37[4] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _persistVideoComplPropertiesInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLManagedAsset entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  __int16 v10 = (void *)MEMORY[0x1E4F28BA0];
  BOOL v11 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudPhotoLibraryAsset"), 1);
  v37[0] = v11;
  uint64_t v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kindSubtype", 2);
  v37[1] = v12;
  id v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != 0", @"videoCpDurationValue");
  void v37[2] = v13;
  id v14 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != 0", @"complete");
  v37[3] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:4];
  char v16 = [v10 andPredicateWithSubpredicates:v15];
  [v9 setPredicate:v16];

  uint64_t v36 = @"additionalAttributes";
  id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v36 count:1];
  [v9 setRelationshipKeyPathsForPrefetching:v17];

  uint64_t v28 = 0;
  __int16 v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v31 = 0;
  char v18 = [MEMORY[0x1E4F28CB8] defaultManager];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = __55__PLModelMigrator__persistVideoComplPropertiesInStore___block_invoke;
  v25[3] = &unk_1E586F878;
  id v19 = v18;
  id v26 = v19;
  id v27 = &v28;
  id v20 = (id)[v6 enumerateObjectsFromFetchRequest:v9 count:0 usingDefaultBatchSizeWithBlock:v25];
  [v6 reset];
  uint64_t v21 = PLMigrationGetLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = v29[3];
    *(_DWORD *)long long buf = 67109376;
    int v33 = 1;
    __int16 v34 = 2048;
    uint64_t v35 = v22;
    _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_DEFAULT, "_persistVideoComplPropertiesInStore: finished %d with %ld assets", buf, 0x12u);
  }

  _Block_object_dispose(&v28, 8);

  return 1;
}

void __55__PLModelMigrator__persistVideoComplPropertiesInStore___block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = [v10 mainFileURL];
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = [v3 path];
    LODWORD(v5) = [v5 fileExistsAtPath:v6];

    if (v5)
    {
      uint64_t v7 = [MEMORY[0x1E4F8B900] filesystemPersistenceBatchItemForFileAtURL:v4];
      uint64_t v8 = [v10 videoComplementData];
      [v7 setData:v8 forKey:*MEMORY[0x1E4F8C380]];

      uint64_t v9 = [v10 videoCpVisibilityState];
      [v7 setUInt16:v9 forKey:*MEMORY[0x1E4F8C478]];
      [v7 persist];
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
  }
}

- (BOOL)_persistPlaceAnnotationData:(id)a3
{
  v15[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _persistPlaceAnnotationData:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  id v10 = [v8 fetchRequestWithEntityName:v9];

  BOOL v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"additionalAttributes.placeAnnotationData != nil"];
  [v10 setPredicate:v11];

  v15[0] = @"additionalAttributes";
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:1];
  [v10 setRelationshipKeyPathsForPrefetching:v12];

  id v13 = (id)[v7 enumerateObjectsFromFetchRequest:v10 count:0 usingDefaultBatchSizeWithBlock:&__block_literal_global_1945];
  [v7 reset];

  return 1;
}

uint64_t __47__PLModelMigrator__persistPlaceAnnotationData___block_invoke(uint64_t a1, void *a2)
{
  return [a2 persistMetadataToFilesystem];
}

- (BOOL)_fixVideoDimensionsInStore:(id)a3
{
  v30[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixVideoDimensionsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  id v10 = [v8 fetchRequestWithEntityName:v9];

  BOOL v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"kind == %d AND complete != 0", 1);
  [v10 setPredicate:v11];

  v30[0] = @"additionalAttributes";
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:1];
  [v10 setRelationshipKeyPathsForPrefetching:v12];

  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __46__PLModelMigrator__fixVideoDimensionsInStore___block_invoke;
  void v22[3] = &unk_1E586F878;
  void v22[4] = self;
  void v22[5] = &v23;
  id v13 = (id)[v7 enumerateObjectsFromFetchRequest:v10 count:0 usingDefaultBatchSizeWithBlock:v22];
  if ([v7 hasChanges])
  {
    id v21 = 0;
    int v14 = [v7 save:&v21];
    id v15 = v21;
    if ((v14 & 1) == 0)
    {
      char v16 = PLMigrationGetLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = [v15 userInfo];
        *(_DWORD *)long long buf = 138412546;
        *(void *)uint64_t v28 = v15;
        *(_WORD *)&v28[8] = 2112;
        __int16 v29 = v17;
        _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "_fixVideoDimensionsInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    int v14 = 1;
  }
  char v18 = PLMigrationGetLog();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *((_DWORD *)v24 + 6);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v28 = v14;
    *(_WORD *)&void v28[4] = 1024;
    *(_DWORD *)&v28[6] = v19;
    _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "_fixVideoDimensionsInStore: finished %d with %d assets", buf, 0xEu);
  }

  [v7 reset];
  _Block_object_dispose(&v23, 8);

  return v14;
}

uint64_t __46__PLModelMigrator__fixVideoDimensionsInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = [*(id *)(a1 + 32) _fixVideoDimensionsForAsset:a2];
  if (result) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return result;
}

- (BOOL)_fixVideoDimensionsForAsset:(id)a3
{
  id v3 = a3;
  if (![v3 height] || !objc_msgSend(v3, "width"))
  {
    uint64_t v6 = [v3 fileURLForFullsizeRenderVideo];
    uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    if (v6
      && ([v6 path],
          uint64_t v7 = objc_claimAutoreleasedReturnValue(),
          char v8 = [v5 fileExistsAtPath:v7],
          v7,
          (v8 & 1) != 0))
    {
      uint64_t v9 = v6;
    }
    else
    {
      uint64_t v9 = [v3 mainFileURL];

      if (!v9)
      {
        BOOL v4 = 0;
        goto LABEL_14;
      }
      id v10 = [v9 path];
      int v11 = [v5 fileExistsAtPath:v10];

      if (!v11)
      {
        BOOL v4 = 0;
        goto LABEL_13;
      }
      uint64_t v6 = v9;
    }
    +[PLManagedAsset dimensionsForVideoAtURL:v6];
    double v13 = v12;
    [v3 setHeight:(uint64_t)v14];
    [v3 setWidth:(uint64_t)v13];
    BOOL v4 = 1;
LABEL_13:

    goto LABEL_14;
  }
  BOOL v4 = 0;
  uint64_t v5 = 0;
LABEL_14:
  if (![v3 originalHeight] || !objc_msgSend(v3, "originalWidth"))
  {
    if (!v5) {
      uint64_t v5 = objc_opt_new();
    }
    id v15 = [v3 mainFileURL];
    char v16 = [v15 path];
    int v17 = [v5 fileExistsAtPath:v16];

    if (v17)
    {
      char v18 = [v3 mainFileURL];
      +[PLManagedAsset dimensionsForVideoAtURL:v18];
      double v20 = v19;
      double v22 = v21;

      [v3 setOriginalHeight:(uint64_t)v22];
      [v3 setOriginalWidth:(uint64_t)v20];
      BOOL v4 = 1;
    }
  }

  return v4;
}

- (BOOL)_populateAdjustmentsStateForAssetsInStore:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateAdjustmentsStateForAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
  char v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  id v10 = [v8 fetchRequestWithEntityName:v9];

  int v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"additionalAttributes.editorBundleID != NULL"];
  [v10 setPredicate:v11];

  uint64_t v20 = 0;
  id v12 = (id)[v7 enumerateObjectsFromFetchRequest:v10 count:&v20 usingDefaultBatchSizeWithBlock:&__block_literal_global_1937];
  if ([v7 hasChanges])
  {
    id v19 = 0;
    int v13 = [v7 save:&v19];
    id v14 = v19;
    if ((v13 & 1) == 0)
    {
      id v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        char v16 = [v14 userInfo];
        *(_DWORD *)long long buf = 138412546;
        *(void *)double v22 = v14;
        *(_WORD *)&v22[8] = 2112;
        *(void *)&v22[10] = v16;
        _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_populateHasAdjustmentsForAssetsInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    int v13 = 1;
  }
  int v17 = PLMigrationGetLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)double v22 = v13;
    *(_WORD *)&void v22[4] = 2048;
    *(void *)&void v22[6] = v20;
    _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "_populateHasAdjustmentsForAssetsInStore: finished %d with %lu assets", buf, 0x12u);
  }

  return v13;
}

uint64_t __61__PLModelMigrator__populateAdjustmentsStateForAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  return [a2 setAdjustmentsState:2];
}

- (BOOL)_fixEmptyVideoResourcePathsInStore:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixEmptyVideoResourcePathsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudResource"];
  char v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"(type = %d OR type = %d OR type = %d) AND cloudMaster != nil AND filePath = nil", 18, 6, 7);
  [v7 setPredicate:v8];
  [v7 setFetchBatchSize:100];
  uint64_t v9 = [v6 executeFetchRequest:v7 error:0];
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000;
  uint64_t v29 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __54__PLModelMigrator__fixEmptyVideoResourcePathsInStore___block_invoke;
  v18[3] = &unk_1E5866938;
  id v10 = v6;
  id v19 = v10;
  uint64_t v20 = &v26;
  double v21 = &v22;
  int v11 = [v10 enumerateWithIncrementalSaveUsingObjects:v9 shouldRefreshAfterSave:1 withBlock:v18];
  if (v11)
  {
    id v12 = PLMigrationGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = [v11 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)uint64_t v31 = v11;
      *(_WORD *)&v31[8] = 2112;
      *(void *)&v31[10] = v13;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "_fixEmptyVideoResourcePathsInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  id v14 = PLMigrationGetLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = v27[3];
    uint64_t v16 = v23[3];
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)uint64_t v31 = v11 == 0;
    *(_WORD *)&void v31[4] = 2048;
    *(void *)&v31[6] = v15;
    *(_WORD *)&v31[14] = 2048;
    *(void *)&v31[16] = v16;
    _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "_fixEmptyVideoResourcePathsInStore: finished %d fixed %lu resources, skipped %lu resources", buf, 0x1Cu);
  }

  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);

  return v11 == 0;
}

void __54__PLModelMigrator__fixEmptyVideoResourcePathsInStore___block_invoke(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 assetUuid];
  if (v4)
  {
    uint64_t v5 = +[PLManagedAsset assetWithUUID:v4 inManagedObjectContext:a1[4]];
    if (v5)
    {
      uint64_t v6 = -[NSObject pathForCPLResourceType:adjusted:](v5, "pathForCPLResourceType:adjusted:", (int)[v3 type], 0);
      if (v6)
      {
        uint64_t v7 = v6;
        [v3 setFilePath:v6];
        ++*(void *)(*(void *)(a1[5] + 8) + 24);
      }
      else
      {
        ++*(void *)(*(void *)(a1[6] + 8) + 24);
        char v8 = PLMigrationGetLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v9 = 138412546;
          id v10 = v3;
          __int16 v11 = 2112;
          id v12 = v5;
          _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_ERROR, "_fixEmptyVideoResourcePathsInStore: Unable to find a path for cloudResource %@ with asset %@", (uint8_t *)&v9, 0x16u);
        }

        uint64_t v7 = 0;
      }
    }
    else
    {
      ++*(void *)(*(void *)(a1[6] + 8) + 24);
      uint64_t v7 = PLMigrationGetLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 138412290;
        id v10 = v3;
        _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_DEBUG, "_fixEmptyVideoResourcePathsInStore: Unable to find asset for cloudResource: %@", (uint8_t *)&v9, 0xCu);
      }
    }
  }
  else
  {
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
    uint64_t v5 = PLMigrationGetLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_DEBUG, "_fixEmptyVideoResourcePathsInStore: CloudResource %@ has no assetUUID", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (BOOL)_fixLocalPathForVideoCmplDerivativesInStore:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixLocalPathForVideoCmplDerivativesInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v6 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudResource"];
  uint64_t v7 = (void *)MEMORY[0x1E4F28F60];
  char v8 = [(id)*MEMORY[0x1E4F44490] identifier];
  int v9 = [v7 predicateWithFormat:@"(type = %d OR type = %d) AND cloudMaster != nil AND filePath LIKE %@ AND uniformTypeIdentifier == %@", 6, 7, @"*.MP4", v8];

  [v6 setPredicate:v9];
  [v6 setFetchBatchSize:100];
  id v10 = [v5 executeFetchRequest:v6 error:0];
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000;
  uint64_t v30 = 0;
  __int16 v11 = [MEMORY[0x1E4F28CB8] defaultManager];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __63__PLModelMigrator__fixLocalPathForVideoCmplDerivativesInStore___block_invoke;
  void v22[3] = &unk_1E5866910;
  id v12 = v11;
  id v23 = v12;
  id v13 = v5;
  id v24 = v13;
  uint64_t v25 = &v27;
  uint64_t v26 = &v31;
  id v14 = [v13 enumerateWithIncrementalSaveUsingObjects:v10 shouldRefreshAfterSave:1 withBlock:v22];
  if (v14)
  {
    uint64_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = [v14 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)uint64_t v36 = v14;
      *(_WORD *)&v36[8] = 2112;
      *(void *)&v36[10] = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_fixLocalPathForVideoCmplDerivativesInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  int v17 = PLMigrationGetLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = v32[3];
    uint64_t v19 = v28[3];
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)uint64_t v36 = v14 == 0;
    *(_WORD *)&uint8_t v36[4] = 2048;
    *(void *)&v36[6] = v18;
    *(_WORD *)&v36[14] = 2048;
    *(void *)&v36[16] = v19;
    _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "_fixLocalPathForVideoCmplDerivativesInStore: finished %d with %lu resources, moved %lu files", buf, 0x1Cu);
  }

  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);

  return v14 == 0;
}

void __63__PLModelMigrator__fixLocalPathForVideoCmplDerivativesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 filePath];
  if (v4) {
    objc_msgSend(v3, "setIsLocallyAvailable:", objc_msgSend(*(id *)(a1 + 32), "fileExistsAtPath:", v4));
  }
  uint64_t v5 = [v3 assetUuid];
  if (v5)
  {
    uint64_t v6 = +[PLManagedAsset assetWithUUID:v5 inManagedObjectContext:*(void *)(a1 + 40)];
    uint64_t v7 = v6;
    if (v6)
    {
      if ([v6 kindSubtype] != 2)
      {
        char v8 = PLMigrationGetLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v18 = v3;
          _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_ERROR, "Found non-Iris video resource %@ with incorrect path.", buf, 0xCu);
        }
      }
      uint64_t v9 = -[NSObject pathForCPLResourceType:adjusted:](v7, "pathForCPLResourceType:adjusted:", (int)[v3 type], 0);
      if (v9)
      {
        id v10 = v9;
        if (([v4 isEqualToString:v9] & 1) == 0)
        {
          [v3 setFilePath:v10];
          if ([v3 isLocallyAvailable])
          {
            __int16 v11 = *(void **)(a1 + 32);
            id v16 = 0;
            int v12 = [v11 moveItemAtPath:v4 toPath:v10 error:&v16];
            id v13 = v16;
            if (v12)
            {
              ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
            }
            else
            {
              uint64_t v15 = PLMigrationGetLog();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138413058;
                id v18 = v4;
                __int16 v19 = 2112;
                uint64_t v20 = v10;
                __int16 v21 = 2112;
                id v22 = v3;
                __int16 v23 = 2112;
                id v24 = v13;
                _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "Unable to move %@ to %@ for cloudResource %@. Error: %@", buf, 0x2Au);
              }

              [v3 setIsLocallyAvailable:0];
            }
          }
          ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        }
      }
      else
      {
        id v14 = PLMigrationGetLog();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          id v18 = v3;
          __int16 v19 = 2112;
          uint64_t v20 = v7;
          _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "Unable to find a path for cloudResource %@ with asset %@", buf, 0x16u);
        }

        id v10 = 0;
      }
    }
    else
    {
      id v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v18 = v3;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "_fixLocalPathForVideoCmplDerivativesInStore: Unable to find asset for cloudResource: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v7 = PLMigrationGetLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v3;
      _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_DEFAULT, "_fixLocalPathForVideoCmplDerivativesInStore: CloudResource %@ has no assetUUID", buf, 0xCu);
    }
  }
}

- (BOOL)_fixItemIdentifierForVideoCmplInStore:(id)a3
{
  v28[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixItemIdentifierForVideoCmplInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudResource"];
  char v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"(type = %d OR type = %d) AND itemIdentifier != cloudMaster.cloudMasterGUID", 6, 7);
  [v7 setPredicate:v8];
  [v7 setFetchBatchSize:100];
  v28[0] = @"cloudMaster";
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:1];
  [v7 setRelationshipKeyPathsForPrefetching:v9];

  id v10 = [v6 executeFetchRequest:v7 error:0];
  uint64_t v22 = 0;
  __int16 v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  __int16 v11 = [MEMORY[0x1E4F28CB8] defaultManager];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __57__PLModelMigrator__fixItemIdentifierForVideoCmplInStore___block_invoke;
  v19[3] = &unk_1E5866790;
  id v12 = v11;
  id v20 = v12;
  __int16 v21 = &v22;
  id v13 = [v6 enumerateWithIncrementalSaveUsingObjects:v10 shouldRefreshAfterSave:1 withBlock:v19];
  if (v13)
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = [v13 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)uint64_t v27 = v13;
      *(_WORD *)&v27[8] = 2112;
      *(void *)&v27[10] = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_fixItemIdentifierForVideoCmplInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  id v16 = PLMigrationGetLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = v23[3];
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v27 = v13 == 0;
    *(_WORD *)&v27[4] = 2048;
    *(void *)&v27[6] = v17;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "_fixItemIdentifierForVideoCmplInStore: finished %d with %lu assets", buf, 0x12u);
  }

  _Block_object_dispose(&v22, 8);

  return v13 == 0;
}

void __57__PLModelMigrator__fixItemIdentifierForVideoCmplInStore___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 cloudMaster];
  id v4 = [v3 scopedIdentifier];
  uint64_t v5 = [v4 identifier];

  if (v5) {
    [v7 setItemIdentifier:v5];
  }
  uint64_t v6 = [v7 filePath];
  if (v6) {
    objc_msgSend(v7, "setIsLocallyAvailable:", objc_msgSend(*(id *)(a1 + 32), "fileExistsAtPath:", v6));
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

- (BOOL)_markPhotoIrisVideoOrphansInStore:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _markPhotoIrisVideoOrphansInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  char v8 = +[PLManagedAsset entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  id v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"kind = %d and kindSubtype = %d AND complete != 0 AND duration != nil AND duration > 0 AND duration < %f", 1, 0, 0x4010000000000000);
  [v9 setPredicate:v10];
  [v9 setFetchBatchSize:100];
  __int16 v11 = [v6 executeFetchRequest:v9 error:0];
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __53__PLModelMigrator__markPhotoIrisVideoOrphansInStore___block_invoke;
  v18[3] = &unk_1E5866718;
  void v18[4] = &v19;
  id v12 = [v6 enumerateWithIncrementalSaveUsingObjects:v11 shouldRefreshAfterSave:1 withBlock:v18];
  if (v12)
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = [v12 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)uint64_t v24 = v12;
      *(_WORD *)&v24[8] = 2112;
      *(void *)&v24[10] = v14;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "_markPhotoIrisVideoOrphansInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  uint64_t v15 = PLMigrationGetLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = v20[3];
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v24 = v12 == 0;
    *(_WORD *)&void v24[4] = 2048;
    *(void *)&v24[6] = v16;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "_markPhotoIrisVideoOrphansInStore: finished %d with %lu assets", buf, 0x12u);
  }

  _Block_object_dispose(&v19, 8);

  return v12 == 0;
}

void __53__PLModelMigrator__markPhotoIrisVideoOrphansInStore___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 pathForOriginalFile];
  if (v3)
  {
    id v4 = PFVideoComplementMetadataForVideoAtPath();
    uint64_t v5 = [v4 pairingIdentifier];
    if (v5)
    {
      [v6 setMediaGroupUUID:v5];
      [v6 persistMetadataToFilesystem];
      [v6 setCloudLocalState:0];
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
}

- (BOOL)_fixZeroDurationPhotoIrisWithLocalResourcesInStore:(id)a3 assumeAdjustedIrisIsVisible:(BOOL)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  id v6 = (void *)MEMORY[0x1E4F28F60];
  id v7 = a3;
  char v8 = [v6 predicateWithFormat:@"videoCpDurationValue == 0"];
  id v17 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __98__PLModelMigrator__fixZeroDurationPhotoIrisWithLocalResourcesInStore_assumeAdjustedIrisIsVisible___block_invoke;
  v15[3] = &__block_descriptor_33_e51_v24__0__PLManagedAsset_8__NSManagedObjectContext_16l;
  BOOL v16 = a4;
  BOOL v9 = [(PLModelMigrator *)self _saveChangesToPhotoIrisInStore:v7 matchingPredicate:v8 countChanged:&v18 error:&v17 changeBlock:v15];

  id v10 = v17;
  if (!v9)
  {
    __int16 v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = [v10 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)id v20 = v10;
      *(_WORD *)&v20[8] = 2112;
      *(void *)&v20[10] = v12;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "_fixZeroDurationPhotoIrisInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  id v13 = PLMigrationGetLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)id v20 = v9;
    *(_WORD *)&void v20[4] = 2048;
    *(void *)&v20[6] = v18;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "_fixZeroDurationPhotoIrisInStore: finished %d with %lu assets", buf, 0x12u);
  }

  return v9;
}

void __98__PLModelMigrator__fixZeroDurationPhotoIrisWithLocalResourcesInStore_assumeAdjustedIrisIsVisible___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 pathForVideoComplementFile];
  uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  int v6 = [v5 fileExistsAtPath:v4];

  if (v6)
  {
    id v7 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v4 isDirectory:0];
    id v26 = 0;
    uint64_t v8 = *MEMORY[0x1E4F1C5F8];
    id v25 = 0;
    char v9 = [v7 getResourceValue:&v26 forKey:v8 error:&v25];
    id v10 = v26;
    id v11 = v25;
    if (v9)
    {
      id v12 = PFVideoComplementMetadataForVideoAtPath();
      id v13 = [v12 pairingIdentifier];
      if (v12)
      {
        [v12 videoDuration];
        [v12 imageDisplayTime];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v19 = 0;
      }
      [v3 updatePhotoIrisMetadataWithMediaGroupUUID:v13 videoDuration:&v22 stillDisplayTime:&v19];

      if ([v3 hasAdjustments])
      {
        int v14 = *(unsigned __int8 *)(a1 + 32);
        uint64_t v15 = 11;
        if (!v14)
        {
          BOOL v16 = [v3 pathForFullsizeRenderVideoFile];
          id v17 = [MEMORY[0x1E4F28CB8] defaultManager];
          int v18 = [v17 fileExistsAtPath:v16];

          if (v18) {
            uint64_t v15 = 11;
          }
          else {
            uint64_t v15 = 3;
          }
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      objc_msgSend(v3, "setVideoCpVisibilityState:", v15, v19, v20, v21, v22, v23, v24);
      [v3 persistMetadataToFilesystem];
    }
    else
    {
      id v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v28 = v11;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "_fixZeroDurationPhotoIrisWithLocalResourcesInStore: failed to get size of video complement with error: %@", buf, 0xCu);
      }
    }
  }
}

- (BOOL)_repushMemoriesWithNewFeaturesInStore:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  int v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _repushMemoriesWithNewFeaturesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLMemory entityName];
  char v9 = [v7 fetchRequestWithEntityName:v8];

  id v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudLocalState != %d AND (blacklistedFeature != nil OR extendedCuratedAssets.@count > 0)", 0);
  [v9 setPredicate:v10];
  [v9 setFetchBatchSize:100];
  id v24 = 0;
  id v11 = [v6 executeFetchRequest:v9 error:&v24];
  id v12 = v24;
  if (v11)
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v30 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = __57__PLModelMigrator__repushMemoriesWithNewFeaturesInStore___block_invoke;
    void v23[3] = &unk_1E58668C8;
    uint8_t v23[4] = buf;
    id v13 = [v6 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:v23];
    BOOL v14 = v13 == 0;
    if (v13)
    {
      uint64_t v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)id v25 = 136315394;
        id v26 = "-[PLModelMigrator _repushMemoriesWithNewFeaturesInStore:]";
        __int16 v27 = 2112;
        id v28 = v13;
        BOOL v16 = "%s save failed with error: %@";
        id v17 = v15;
        os_log_type_t v18 = OS_LOG_TYPE_ERROR;
LABEL_10:
        _os_log_impl(&dword_19B3C7000, v17, v18, v16, v25, 0x16u);
      }
    }
    else
    {
      uint64_t v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void **)(*(void *)&buf[8] + 24);
        *(_DWORD *)id v25 = 136315394;
        id v26 = "-[PLModelMigrator _repushMemoriesWithNewFeaturesInStore:]";
        __int16 v27 = 2048;
        id v28 = v20;
        BOOL v16 = "%s for %lu memories.";
        id v17 = v15;
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_10;
      }
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_12;
  }
  uint64_t v19 = PLMigrationGetLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[PLModelMigrator _repushMemoriesWithNewFeaturesInStore:]";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v12;
    _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "%s fetch failed with error: %@", buf, 0x16u);
  }

  BOOL v14 = 0;
LABEL_12:

  return v14;
}

uint64_t __57__PLModelMigrator__repushMemoriesWithNewFeaturesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = [a2 setCloudLocalState:0];
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

- (BOOL)_fixWhitelistOwnerForPendingInvitationsInStore:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  int v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixWhitelistOwnerForPendingInvitationsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = objc_alloc(MEMORY[0x1E4F1C038]);
  char v9 = +[PLCloudSharedAlbum entityName];
  id v10 = (void *)[v8 initWithEntityName:v9];

  [v10 setResultType:2];
  [v10 setPropertiesToUpdate:&unk_1EEBF28B0];
  id v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudRelationshipState == %d AND cloudOwnerIsWhitelisted == YES", 1);
  [v10 setPredicate:v11];
  id v18 = 0;
  id v12 = [v7 executeRequest:v10 error:&v18];
  id v13 = v18;
  BOOL v14 = PLMigrationGetLog();
  uint64_t v15 = v14;
  if (v12)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v16 = [v12 result];
      *(_DWORD *)long long buf = 138412290;
      id v20 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Reset cloudOwnerIsWhitelisted to NO for %@ pending shared album invitations.", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v20 = v13;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "Failed to reset cloudOwnerIsWhitelisted for pending shared album invitations: %@", buf, 0xCu);
  }

  [v7 reset];

  return v12 != 0;
}

- (BOOL)_persistPhotoIrisVisibilityStateToDiskInStore:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  id v4 = (void *)MEMORY[0x1E4F28F60];
  id v5 = a3;
  int v6 = objc_msgSend(v4, "predicateWithFormat:", @"videoCpVisibilityState != %d", 0);
  id v13 = 0;
  BOOL v7 = [(PLModelMigrator *)self _saveChangesToPhotoIrisInStore:v5 matchingPredicate:v6 countChanged:&v14 error:&v13 changeBlock:&__block_literal_global_1896];

  id v8 = v13;
  if (!v7)
  {
    char v9 = PLMigrationGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = [v8 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)BOOL v16 = v8;
      *(_WORD *)&v16[8] = 2112;
      *(void *)&v16[10] = v10;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_ERROR, "_persistPhotoIrisVisibilityStateToDiskInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  id v11 = PLMigrationGetLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)BOOL v16 = v7;
    *(_WORD *)&void v16[4] = 2048;
    *(void *)&v16[6] = v14;
    _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "_persistPhotoIrisVisibilityStateToDiskInStore: finished %d with %lu assets", buf, 0x12u);
  }

  return v7;
}

uint64_t __65__PLModelMigrator__persistPhotoIrisVisibilityStateToDiskInStore___block_invoke(uint64_t a1, void *a2)
{
  return [a2 persistMetadataToFilesystem];
}

- (BOOL)_markOldPhotoIrisEditsEvaluatedInStore:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  id v4 = (void *)MEMORY[0x1E4F28F60];
  id v5 = a3;
  int v6 = objc_msgSend(v4, "predicateWithFormat:", @"videoCpVisibilityState = %d AND additionalAttributes.unmanagedAdjustment != nil", 0);
  id v13 = 0;
  BOOL v7 = [(PLModelMigrator *)self _saveChangesToPhotoIrisInStore:v5 matchingPredicate:v6 countChanged:&v14 error:&v13 changeBlock:&__block_literal_global_1891];

  id v8 = v13;
  if (!v7)
  {
    char v9 = PLMigrationGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = [v8 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)BOOL v16 = v8;
      *(_WORD *)&v16[8] = 2112;
      *(void *)&v16[10] = v10;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_ERROR, "_markOldPhotoIrisEditsEvaluatedInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  id v11 = PLMigrationGetLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)BOOL v16 = v7;
    *(_WORD *)&void v16[4] = 2048;
    *(void *)&v16[6] = v14;
    _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "_markOldPhotoIrisEditsEvaluatedInStore: finished %d with %lu assets", buf, 0x12u);
  }

  return v7;
}

uint64_t __58__PLModelMigrator__markOldPhotoIrisEditsEvaluatedInStore___block_invoke(uint64_t a1, void *a2)
{
  return [a2 setVideoCpVisibilityState:2];
}

- (BOOL)_saveChangesToPhotoIrisInStore:(id)a3 matchingPredicate:(id)a4 countChanged:(unint64_t *)a5 error:(id *)a6 changeBlock:(id)a7
{
  v41[2] = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a7;
  if (!v14)
  {
    BOOL v23 = 1;
    goto LABEL_15;
  }
  uint64_t v15 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v36 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v12, "-[PLModelMigrator _saveChangesToPhotoIrisInStore:matchingPredicate:countChanged:error:changeBlock:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v16 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v17 = +[PLManagedAsset entityName];
  id v18 = [v16 fetchRequestWithEntityName:v17];

  uint64_t v19 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"kindSubtype = %d", 2);
  id v35 = v13;
  uint64_t v33 = v19;
  if (v13)
  {
    id v20 = (void *)MEMORY[0x1E4F28BA0];
    v41[0] = v19;
    v41[1] = v13;
    uint64_t v21 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:2];
    id v22 = [v20 andPredicateWithSubpredicates:v21];
  }
  else
  {
    id v22 = v19;
  }
  [v18 setPredicate:v22];
  [v18 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1AC0];
  [v18 setFetchBatchSize:100];
  id v40 = 0;
  id v24 = [v36 executeFetchRequest:v18 error:&v40];
  id v25 = v40;
  id v34 = v14;
  if (!v24)
  {
    BOOL v23 = 0;
    if (!a5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  void v37[2] = __99__PLModelMigrator__saveChangesToPhotoIrisInStore_matchingPredicate_countChanged_error_changeBlock___block_invoke;
  v37[3] = &unk_1E5866880;
  id v39 = v14;
  id v38 = v36;
  [v38 enumerateWithIncrementalSaveUsingObjects:v24 shouldRefreshAfterSave:1 withBlock:v37];
  id v26 = v15;
  __int16 v27 = a5;
  id v28 = a6;
  v30 = id v29 = v12;

  BOOL v23 = v30 == 0;
  id v25 = (id)v30;
  id v12 = v29;
  a6 = v28;
  a5 = v27;
  uint64_t v15 = v26;
  if (a5) {
LABEL_8:
  }
    *a5 = [v24 count];
LABEL_9:

  if (a6) {
    char v31 = v23;
  }
  else {
    char v31 = 1;
  }
  id v14 = v34;
  if ((v31 & 1) == 0) {
    *a6 = v25;
  }

  id v13 = v35;
LABEL_15:

  return v23;
}

uint64_t __99__PLModelMigrator__saveChangesToPhotoIrisInStore_matchingPredicate_countChanged_error_changeBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32));
}

- (BOOL)_moveCloudSharedDerivativesInStore:(id)a3
{
  v40[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  int v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _moveCloudSharedDerivativesInStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  char v9 = [v7 fetchRequestWithEntityName:v8];

  id v10 = (void *)MEMORY[0x1E4F28BA0];
  id v11 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v40[0] = v11;
  id v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K > %d", @"cloudPlaceholderKind", 2);
  v40[1] = v12;
  id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:2];
  id v14 = [v10 andPredicateWithSubpredicates:v13];

  [v9 setPredicate:v14];
  [v9 setFetchBatchSize:100];
  uint64_t v15 = [v6 executeFetchRequest:v9 error:0];
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2020000000;
  uint64_t v35 = 0;
  uint64_t v28 = 0;
  id v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v31 = 0;
  BOOL v16 = [MEMORY[0x1E4F28CB8] defaultManager];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __54__PLModelMigrator__moveCloudSharedDerivativesInStore___block_invoke;
  void v24[3] = &unk_1E5866C98;
  id v17 = v16;
  id v25 = v17;
  id v26 = &v32;
  __int16 v27 = &v28;
  id v18 = [v6 enumerateWithIncrementalSaveUsingObjects:v15 withBlock:v24];
  if (v18)
  {
    uint64_t v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v37 = v18;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "_moveCloudSharedDerivativesInStore failed: %@", buf, 0xCu);
    }
  }
  id v20 = PLMigrationGetLog();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = (void *)v33[3];
    uint64_t v22 = v29[3];
    *(_DWORD *)long long buf = 134218240;
    uint64_t v37 = v21;
    __int16 v38 = 2048;
    uint64_t v39 = v22;
    _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "_moveCloudSharedDerivativesInStore: moved %lu failed %lu cloud shared asset derivatives", buf, 0x16u);
  }

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);

  return v18 == 0;
}

void __54__PLModelMigrator__moveCloudSharedDerivativesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = [a2 pathForOriginalFile];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 stringByDeletingPathExtension];
    int v6 = [v5 stringByAppendingPathExtension:@"deriv.JPG"];

    char v13 = 0;
    if ([*(id *)(a1 + 32) fileExistsAtPath:v6 isDirectory:&v13] && !v13)
    {
      BOOL v7 = PLMigrationGetLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v15 = v6;
        __int16 v16 = 2112;
        id v17 = v4;
        _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_DEFAULT, "found derivative file at %@, moving to %@", buf, 0x16u);
      }

      if (![*(id *)(a1 + 32) fileExistsAtPath:v4 isDirectory:&v13] || v13)
      {
        char v9 = *(void **)(a1 + 32);
        id v12 = 0;
        int v10 = [v9 moveItemAtPath:v6 toPath:v4 error:&v12];
        id v8 = v12;
        if (v10)
        {
          ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        }
        else
        {
          ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          id v11 = PLMigrationGetLog();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412802;
            uint64_t v15 = v6;
            __int16 v16 = 2112;
            id v17 = v4;
            __int16 v18 = 2112;
            uint64_t v19 = v8;
            _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "couldn't move cloud shared derivative from %@ to %@. Error: %@", buf, 0x20u);
          }
        }
      }
      else
      {
        id v8 = PLMigrationGetLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v15 = v4;
          _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_ERROR, "found unexpected original file at %@, skipping", buf, 0xCu);
        }
      }
    }
  }
}

- (BOOL)_purgeCloudSharedResourcesInStore:(id)a3
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  int v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  BOOL v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _purgeCloudSharedResourcesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  char v9 = +[PLManagedAsset entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  id v11 = (void *)MEMORY[0x1E4F28BA0];
  id v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v25[0] = v12;
  char v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K > %d", @"cloudPlaceholderKind", 2);
  v25[1] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:2];
  uint64_t v15 = [v11 andPredicateWithSubpredicates:v14];

  [v10 setPredicate:v15];
  [v10 setFetchBatchSize:100];
  __int16 v16 = [v7 executeFetchRequest:v10 error:0];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __53__PLModelMigrator__purgeCloudSharedResourcesInStore___block_invoke;
  void v21[3] = &unk_1E5872990;
  id v22 = v6;
  id v17 = v6;
  __int16 v18 = [v7 enumerateWithIncrementalSaveUsingObjects:v16 withBlock:v21];
  if (v18)
  {
    uint64_t v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v18;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "_purgeCloudSharedResourcesInStore failed: %@", buf, 0xCu);
    }
  }

  return v18 == 0;
}

void __53__PLModelMigrator__purgeCloudSharedResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v23 = a2;
  id v3 = [v23 allFileURLs];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        unsigned __int8 v25 = 0;
        char v9 = *(void **)(a1 + 32);
        int v10 = [v8 path];
        LODWORD(v9) = [v9 fileExistsAtPath:v10 isDirectory:&v25];
        int v11 = v25;

        if (v9) {
          BOOL v12 = v11 == 0;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12)
        {
          char v13 = *(void **)(a1 + 32);
          id v24 = 0;
          int v14 = [v13 removeItemAtURL:v8 error:&v24];
          id v15 = v24;
          __int16 v16 = PLMigrationGetLog();
          id v17 = v16;
          if (v14)
          {
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v31 = v8;
              __int16 v18 = v17;
              os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
              uint64_t v20 = "deleted derivative file at %@";
              uint32_t v21 = 12;
              goto LABEL_16;
            }
          }
          else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v31 = v8;
            __int16 v32 = 2112;
            id v33 = v15;
            __int16 v18 = v17;
            os_log_type_t v19 = OS_LOG_TYPE_ERROR;
            uint64_t v20 = "couldn't delete file at %@. Error: %@";
            uint32_t v21 = 22;
LABEL_16:
            _os_log_impl(&dword_19B3C7000, v18, v19, v20, buf, v21);
          }

          continue;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v5);
  }

  if (![v23 hasMasterThumb])
  {
    uint64_t v22 = 2;
    goto LABEL_24;
  }
  if ([v23 cloudPlaceholderKind] != 3)
  {
    uint64_t v22 = 3;
LABEL_24:
    [v23 setCloudPlaceholderKind:v22];
  }
}

- (BOOL)_fixOriginalPropertiesForCloudSharedAssetsInStore:(id)a3
{
  v47[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  BOOL v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixOriginalPropertiesForCloudSharedAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  char v9 = +[PLManagedAsset entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  [v10 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1AA8];
  int v11 = (void *)MEMORY[0x1E4F28BA0];
  BOOL v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v47[0] = v12;
  char v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == 0 OR %K == 0 OR %K == nil", @"additionalAttributes.originalWidth", @"additionalAttributes.originalHeight", @"additionalAttributes.originalFilename");
  v47[1] = v13;
  int v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:2];
  id v15 = [v11 andPredicateWithSubpredicates:v14];

  [v10 setPredicate:v15];
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2020000000;
  uint64_t v32 = 0;
  id v33 = &v32;
  uint64_t v34 = 0x2020000000;
  uint64_t v35 = 0;
  uint64_t v28 = 0;
  long long v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v31 = 0;
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = __69__PLModelMigrator__fixOriginalPropertiesForCloudSharedAssetsInStore___block_invoke;
  v27[3] = &unk_1E5866858;
  v27[4] = &v36;
  v27[5] = &v32;
  v27[6] = &v28;
  id v16 = (id)[v7 enumerateObjectsFromFetchRequest:v10 count:&v40 usingDefaultBatchSizeWithBlock:v27];
  if ([v7 hasChanges])
  {
    id v26 = 0;
    int v17 = [v7 save:&v26];
    id v18 = v26;
    if ((v17 & 1) == 0)
    {
      os_log_type_t v19 = PLMigrationGetLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = [v18 userInfo];
        *(_DWORD *)long long buf = 138412546;
        *(void *)long long v42 = v18;
        *(_WORD *)&v42[8] = 2112;
        *(void *)&v42[10] = v20;
        _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "_fixOriginalPropertiesForCloudSharedAssetsInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    int v17 = 1;
  }
  uint32_t v21 = PLMigrationGetLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = v37[3];
    uint64_t v23 = v33[3];
    uint64_t v24 = v29[3];
    *(_DWORD *)long long buf = 67110144;
    *(_DWORD *)long long v42 = v17;
    *(_WORD *)&v42[4] = 2048;
    *(void *)&v42[6] = v40;
    *(_WORD *)&v42[14] = 2048;
    *(void *)&v42[16] = v22;
    __int16 v43 = 2048;
    uint64_t v44 = v23;
    __int16 v45 = 2048;
    uint64_t v46 = v24;
    _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_DEFAULT, "_fixOriginalPropertiesForCloudSharedAssetsInStore: finished %d with %lu assets, fixed %lu original filename, %lu original width, %lu original height", buf, 0x30u);
  }

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);

  return v17;
}

void __69__PLModelMigrator__fixOriginalPropertiesForCloudSharedAssetsInStore___block_invoke(void *a1, void *a2)
{
  id v5 = a2;
  id v3 = [v5 filename];
  if (v3)
  {
    id v4 = [v5 originalFilename];

    if (!v4)
    {
      [v5 setOriginalFilename:v3];
      ++*(void *)(*(void *)(a1[4] + 8) + 24);
    }
  }
  if (![v5 originalWidth] && objc_msgSend(v5, "width"))
  {
    objc_msgSend(v5, "setOriginalWidth:", objc_msgSend(v5, "width"));
    ++*(void *)(*(void *)(a1[5] + 8) + 24);
  }
  if (![v5 originalHeight] && objc_msgSend(v5, "height"))
  {
    objc_msgSend(v5, "setOriginalHeight:", objc_msgSend(v5, "height"));
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
}

- (BOOL)_fixCloudSharedGIFsInStore:(id)a3
{
  id v30[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixCloudSharedGIFsInStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  char v9 = [v7 fetchRequestWithEntityName:v8];

  int v10 = (void *)MEMORY[0x1E4F28BA0];
  int v11 = 1;
  BOOL v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v30[0] = v12;
  char v13 = (void *)MEMORY[0x1E4F28F60];
  int v14 = [(id)*MEMORY[0x1E4F443D0] identifier];
  id v15 = [v13 predicateWithFormat:@"%K == %@", @"uniformTypeIdentifier", v14];
  v30[1] = v15;
  id v16 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K ENDSWITH[c] %@", @"filename", @"JPG"];
  void v30[2] = v16;
  int v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:3];
  id v18 = [v10 andPredicateWithSubpredicates:v17];

  [v9 setPredicate:v18];
  uint64_t v27 = 0;
  id v19 = (id)[v6 enumerateObjectsFromFetchRequest:v9 count:&v27 usingDefaultBatchSizeWithBlock:&__block_literal_global_1855];
  if ([v6 hasChanges])
  {
    id v26 = 0;
    int v11 = [v6 save:&v26];
    id v20 = v26;
    if ((v11 & 1) == 0)
    {
      uint32_t v21 = PLMigrationGetLog();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = [v20 userInfo];
        *(_DWORD *)long long buf = 138412546;
        *(void *)long long v29 = v20;
        *(_WORD *)&v29[8] = 2112;
        *(void *)&v29[10] = v22;
        _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "_fixCloudSharedGIFsInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  uint64_t v23 = PLMigrationGetLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)long long v29 = v11;
    *(_WORD *)&v29[4] = 2048;
    *(void *)&v29[6] = v27;
    _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_DEFAULT, "_fixCloudSharedGIFsInStore: finished %d with %lu assets", buf, 0x12u);
  }

  return v11;
}

void __46__PLModelMigrator__fixCloudSharedGIFsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v2 = [v5 filename];
  id v3 = [v2 stringByDeletingPathExtension];
  id v4 = [v3 stringByAppendingPathExtension:@"GIF"];

  if (([v2 isEqualToString:v4] & 1) == 0) {
    [v5 setFilename:v4];
  }
}

- (BOOL)_fixCloudSharedVideosInStore:(id)a3
{
  v66[3] = *MEMORY[0x1E4F143B8];
  id v35 = a3;
  uint64_t v3 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v3);
  id v33 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v4 = [(PLModelMigrator *)self pathManager];
  uint64_t v32 = [v4 photoDirectoryWithType:12];

  uint64_t v34 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v35, "-[PLModelMigrator _fixCloudSharedVideosInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v5 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v6 = +[PLManagedAsset entityName];
  uint64_t v36 = [v5 fetchRequestWithEntityName:v6];

  BOOL v7 = (void *)MEMORY[0x1E4F28BA0];
  id v8 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v66[0] = v8;
  char v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"kind", 1);
  v66[1] = v9;
  int v10 = (void *)MEMORY[0x1E4F28BA0];
  int v11 = (void *)MEMORY[0x1E4F28F60];
  BOOL v12 = [(id)*MEMORY[0x1E4F44410] identifier];
  char v13 = [v11 predicateWithFormat:@"%K == %@", @"uniformTypeIdentifier", v12];
  v65[0] = v13;
  int v14 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K BEGINSWITH %@", @"directory", @"/var/mobile/Media"];
  v65[1] = v14;
  id v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v65 count:2];
  id v16 = [v10 orPredicateWithSubpredicates:v15];
  void v66[2] = v16;
  int v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v66 count:3];
  id v18 = [v7 andPredicateWithSubpredicates:v17];

  [v36 setPredicate:v18];
  uint64_t v58 = 0;
  uint64_t v54 = 0;
  id v55 = &v54;
  uint64_t v56 = 0x2020000000;
  uint64_t v57 = 0;
  uint64_t v50 = 0;
  long long v51 = &v50;
  uint64_t v52 = 0x2020000000;
  uint64_t v53 = 0;
  uint64_t v46 = 0;
  long long v47 = &v46;
  uint64_t v48 = 0x2020000000;
  uint64_t v49 = 0;
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = __48__PLModelMigrator__fixCloudSharedVideosInStore___block_invoke;
  v39[3] = &unk_1E5866830;
  id v19 = v32;
  id v40 = v19;
  long long v41 = self;
  __int16 v43 = &v54;
  uint64_t v44 = &v50;
  __int16 v45 = &v46;
  id v20 = v33;
  id v42 = v20;
  id v21 = (id)[v34 enumerateObjectsFromFetchRequest:v36 count:&v58 usingDefaultBatchSizeWithBlock:v39];
  if ([v34 hasChanges])
  {
    id v38 = 0;
    int v22 = [v34 save:&v38];
    id v23 = v38;
    if ((v22 & 1) == 0)
    {
      uint64_t v24 = PLMigrationGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v25 = [v23 userInfo];
        *(_DWORD *)long long buf = 138412546;
        *(void *)long long v60 = v23;
        *(_WORD *)&v60[8] = 2112;
        *(void *)&v60[10] = v25;
        _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_ERROR, "_fixCloudSharedVideosInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    int v22 = 1;
  }
  id v26 = PLMigrationGetLog();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = v55[3];
    uint64_t v28 = v51[3];
    uint64_t v29 = v47[3];
    *(_DWORD *)long long buf = 67110144;
    *(_DWORD *)long long v60 = v22;
    *(_WORD *)&v60[4] = 2048;
    *(void *)&v60[6] = v58;
    *(_WORD *)&v60[14] = 2048;
    *(void *)&v60[16] = v27;
    __int16 v61 = 2048;
    uint64_t v62 = v28;
    __int16 v63 = 2048;
    uint64_t v64 = v29;
    _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_DEFAULT, "_fixCloudSharedVideosInStore: finished %d with %lu assets, fixed %lu UTI, %lu directory, %lu filename", buf, 0x30u);
  }

  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);

  return v22;
}

void __48__PLModelMigrator__fixCloudSharedVideosInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F29088]);
  id v5 = [v3 thumbnailIdentifier];
  uint64_t v6 = (void *)[v4 initWithString:v5];

  BOOL v7 = NSString;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v30 = v6;
  char v9 = [v6 path];
  int v10 = [v7 stringWithFormat:@"%@/%@", v8, v9];

  int v11 = [v3 uniformTypeIdentifier];
  BOOL v12 = (void *)*MEMORY[0x1E4F44438];
  char v13 = [(id)*MEMORY[0x1E4F44438] identifier];

  if (v11 != v13)
  {
    int v14 = [v12 identifier];
    [v3 setUniformTypeIdentifier:v14];

    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  }
  id v15 = [v3 directory];
  id v16 = [*(id *)(a1 + 40) pathManager];
  int v17 = [v16 assetAbbreviatedMetadataDirectoryForDirectory:v15 type:31 bundleScope:0];

  if (([v15 isEqualToString:v17] & 1) == 0)
  {
    [v3 setDirectory:v17];
    ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  }
  id v18 = [v3 filename];
  id v19 = [v18 stringByDeletingPathExtension];
  id v20 = [v19 stringByAppendingPathExtension:@"MP4"];

  if (([v18 isEqualToString:v20] & 1) == 0)
  {
    [v3 setFilename:v20];
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  }
  id v21 = NSString;
  uint64_t v22 = *(void *)(a1 + 32);
  id v23 = [v3 thumbnailIdentifier];
  uint64_t v24 = [v21 stringWithFormat:@"%@/%@", v22, v23];

  if (([v10 isEqualToString:v24] & 1) == 0
    && [*(id *)(a1 + 48) fileExistsAtPath:v10])
  {
    unsigned __int8 v25 = *(void **)(a1 + 48);
    id v31 = 0;
    char v26 = [v25 moveItemAtPath:v10 toPath:v24 error:&v31];
    id v27 = v31;
    if ((v26 & 1) == 0)
    {
      uint64_t v28 = PLMigrationGetLog();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = [v27 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v33 = v27;
        __int16 v34 = 2112;
        id v35 = v29;
        _os_log_impl(&dword_19B3C7000, v28, OS_LOG_TYPE_ERROR, "_fixCloudSharedVideosInStore: failed to move master thumb: %@ %@, abandoning thumbnail instead.", buf, 0x16u);
      }
      [v3 setCloudPlaceholderKind:2];
      [v3 setEffectiveThumbnailIndex:0x7FFFFFFFFFFFFFFFLL];
    }
  }
}

- (BOOL)_fixupSharedVideosWithoutThumbnailsInStore:(id)a3
{
  void v28[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  BOOL v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupSharedVideosWithoutThumbnailsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  char v9 = +[PLManagedAsset entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  int v11 = (void *)MEMORY[0x1E4F28BA0];
  int v12 = 1;
  char v13 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v28[0] = v13;
  int v14 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"kindSubtype", 100);
  v28[1] = v14;
  id v15 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == -1", @"thumbnailIndex");
  void v28[2] = v15;
  id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:3];
  int v17 = [v11 andPredicateWithSubpredicates:v16];
  [v10 setPredicate:v17];

  uint64_t v25 = 0;
  id v18 = (id)[v7 enumerateObjectsFromFetchRequest:v10 count:&v25 usingDefaultBatchSizeWithBlock:&__block_literal_global_1837];
  if ([v7 hasChanges])
  {
    id v24 = 0;
    int v12 = [v7 save:&v24];
    id v19 = v24;
    if ((v12 & 1) == 0)
    {
      id v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v21 = [v19 userInfo];
        *(_DWORD *)long long buf = 138412546;
        *(void *)id v27 = v19;
        *(_WORD *)&v27[8] = 2112;
        *(void *)&v27[10] = v21;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "_fixupSharedVideosWithoutThumbnailsInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  uint64_t v22 = PLMigrationGetLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)id v27 = v12;
    *(_WORD *)&v27[4] = 2048;
    *(void *)&v27[6] = v25;
    _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_DEFAULT, "_fixupSharedVideosWithoutThumbnailsInStore: finished %d with %lu assets", buf, 0x12u);
  }

  return v12;
}

uint64_t __62__PLModelMigrator__fixupSharedVideosWithoutThumbnailsInStore___block_invoke(uint64_t a1, void *a2)
{
  return [a2 setCloudPlaceholderKind:2];
}

- (BOOL)_addCloudKindSubtypeAndBurstFlagsInStore:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  BOOL v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _addCloudKindSubtypeAndBurstFlagsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  char v9 = +[PLManagedAsset entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  int v11 = +[PLManagedAsset predicateForSupportedAssetTypesForUpload];
  [v10 setPredicate:v11];

  [v10 setFetchBatchSize:100];
  int v12 = [v7 executeFetchRequest:v10 error:0];
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  v21[0] = 0;
  v21[1] = v21;
  void v21[2] = 0x2020000000;
  void v21[3] = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __60__PLModelMigrator__addCloudKindSubtypeAndBurstFlagsInStore___block_invoke;
  void v20[3] = &unk_1E5866808;
  void v20[4] = &v22;
  void v20[5] = v21;
  char v13 = [v7 enumerateWithIncrementalSaveUsingObjects:v12 shouldRefreshAfterSave:1 withBlock:v20];
  if (v13)
  {
    int v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = [v13 userInfo];
      *(_DWORD *)long long buf = 138412546;
      *(void *)id v27 = v13;
      *(_WORD *)&v27[8] = 2112;
      *(void *)&v27[10] = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_addCloudKindSubtypeAndBurstFlagsInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  id v16 = PLMigrationGetLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = [v12 count];
    uint64_t v18 = v23[3];
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)id v27 = v13 == 0;
    *(_WORD *)&v27[4] = 2048;
    *(void *)&v27[6] = v17;
    *(_WORD *)&v27[14] = 2048;
    *(void *)&v27[16] = v18;
    __int16 v28 = 2048;
    uint64_t v29 = v18;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "_addCloudKindSubtypeAndBurstFlagsInStore: finished %d with %lu assets (%lu cloudKindSubType %lu cloudBurstFlag)", buf, 0x26u);
  }

  _Block_object_dispose(v21, 8);
  _Block_object_dispose(&v22, 8);

  return v13 == 0;
}

void __60__PLModelMigrator__addCloudKindSubtypeAndBurstFlagsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 additionalAttributes];
  uint64_t v4 = objc_msgSend(v6, "cplAssetSubtypeFromPLAssetSubtype:", objc_msgSend(v6, "kindSubtype"));
  if (v4 != (int)[v3 cloudKindSubtype])
  {
    [v3 setCloudKindSubtype:(__int16)v4];
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  uint64_t v5 = objc_msgSend(v6, "cplBurstFlagsFromPLAvalancheType:", objc_msgSend(v6, "avalanchePickType"));
  if (v5 != (int)[v3 cloudAvalanchePickType])
  {
    [v3 setCloudAvalanchePickType:v5];
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

- (BOOL)_tagScreenshotsForAssetsInStore:(id)a3
{
  v36[5] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v25 = v4;
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _tagScreenshotsForAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  int v31 = 0;
  id v6 = (void *)MEMORY[0x1E4F1C0D0];
  BOOL v7 = +[PLManagedAsset entityName];
  uint64_t v8 = [v6 fetchRequestWithEntityName:v7];

  char v9 = (void *)MEMORY[0x1E4F28BA0];
  int v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kind", 0);
  v36[0] = v10;
  int v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kindSubtype", 0);
  v36[1] = v11;
  int v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForTagScreenshotsExclusions"), 1);
  void v36[2] = v12;
  char v13 = (void *)MEMORY[0x1E4F28F60];
  int v14 = [(id)*MEMORY[0x1E4F44460] identifier];
  id v15 = [v13 predicateWithFormat:@"%K == %@", @"uniformTypeIdentifier", v14];
  void v36[3] = v15;
  id v16 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != 0", @"complete");
  uint8_t v36[4] = v16;
  uint64_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:5];
  uint64_t v18 = [v9 andPredicateWithSubpredicates:v17];
  [v8 setPredicate:v18];

  [v8 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1A90];
  [v8 setFetchBatchSize:100];
  id v19 = [v5 executeFetchRequest:v8 error:0];
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = __51__PLModelMigrator__tagScreenshotsForAssetsInStore___block_invoke;
  v27[3] = &unk_1E5866718;
  v27[4] = &v28;
  id v20 = [v5 enumerateWithIncrementalSaveUsingObjects:v19 withBlock:v27];
  if (v20)
  {
    id v21 = PLMigrationGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = [v20 userInfo];
      *(_DWORD *)long long buf = 138412546;
      id v33 = v20;
      __int16 v34 = 2112;
      id v35 = v22;
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "_tagScreenshotsForAssetsInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  else
  {
    id v21 = PLMigrationGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *((_DWORD *)v29 + 6);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v23;
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_DEFAULT, "Tagged %d screenshots", buf, 8u);
    }
  }

  _Block_object_dispose(&v28, 8);

  return v20 == 0;
}

void __51__PLModelMigrator__tagScreenshotsForAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 updateKindSubtypeIfScreenshot])
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if ([v3 cloudLocalState]) {
      [v3 setCloudLocalState:0];
    }
  }
}

- (BOOL)_addCameraCaptureDeviceForAssetsInStore:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _addCameraCaptureDeviceForAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v20 = 0;
  id v21 = &v20;
  uint64_t v22 = 0x2020000000;
  int v23 = 0;
  BOOL v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLManagedAsset entityName];
  char v9 = [v7 fetchRequestWithEntityName:v8];

  int v10 = (void *)MEMORY[0x1E4F28F60];
  int v11 = [(id)*MEMORY[0x1E4F44410] identifier];
  int v12 = [v10 predicateWithFormat:@"uniformTypeIdentifier == %@ AND complete != 0 AND width <= 1280 AND height <= 1280", v11];
  [v9 setPredicate:v12];

  [v9 setFetchBatchSize:100];
  char v13 = [v6 executeFetchRequest:v9 error:0];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __59__PLModelMigrator__addCameraCaptureDeviceForAssetsInStore___block_invoke;
  v19[3] = &unk_1E5866718;
  void v19[4] = &v20;
  int v14 = [v6 enumerateWithIncrementalSaveUsingObjects:v13 withBlock:v19];
  if (v14)
  {
    id v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = [v14 userInfo];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v25 = v14;
      __int16 v26 = 2112;
      id v27 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_addCameraCaptureDeviceForAssetsInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  else
  {
    id v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *((_DWORD *)v21 + 6);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v25) = v17;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Added camera capture device to %d assets", buf, 8u);
    }
  }

  _Block_object_dispose(&v20, 8);

  return v14 == 0;
}

void __59__PLModelMigrator__addCameraCaptureDeviceForAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = [v3 metadataFromMediaPropertiesOrOriginalResource];
  int v4 = objc_msgSend(v3, "updatePlaybackVariationAndStyleFromOriginalMetadata:");

  if (v4) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

- (BOOL)_fixIncorrectAddedDateForAssetsInStore:(id)a3
{
  void v31[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  BOOL v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixIncorrectAddedDateForAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  char v9 = +[PLManagedAsset entityName];
  int v10 = [v8 fetchRequestWithEntityName:v9];

  int v11 = (void *)MEMORY[0x1E4F28BA0];
  int v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForFixIncorrectAddedDateExclusions"), 0);
  v31[0] = v12;
  char v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != 0", @"complete");
  v31[1] = v13;
  int v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:2];
  id v15 = [v11 andPredicateWithSubpredicates:v14];
  [v10 setPredicate:v15];

  [v10 setFetchBatchSize:100];
  id v16 = [v7 executeFetchRequest:v10 error:0];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __58__PLModelMigrator__fixIncorrectAddedDateForAssetsInStore___block_invoke;
  void v22[3] = &unk_1E586F878;
  void v22[4] = self;
  void v22[5] = &v23;
  int v17 = [v7 enumerateWithIncrementalSaveUsingObjects:v16 withBlock:v22];
  if (v17)
  {
    uint64_t v18 = PLMigrationGetLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v19 = [v17 userInfo];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v28 = v17;
      __int16 v29 = 2112;
      uint64_t v30 = v19;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "_fixIncorrectAddedDateForAssetsInStore: failed: %@ %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v18 = PLMigrationGetLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *((_DWORD *)v24 + 6);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v28) = v20;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Fixed %d incorrect added date", buf, 8u);
    }
  }

  _Block_object_dispose(&v23, 8);

  return v17 == 0;
}

uint64_t __58__PLModelMigrator__fixIncorrectAddedDateForAssetsInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = [*(id *)(a1 + 32) fixPossiblyIncorrectAddedDateForAsset:a2];
  if (result) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return result;
}

- (BOOL)fixPossiblyIncorrectAddedDateForAsset:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 dateCreated];
  id v6 = [v4 addedDate];
  BOOL v7 = v6;
  if (v6)
  {
    [v6 timeIntervalSinceDate:v5];
    if (v8 <= 60.0)
    {
      BOOL v11 = 0;
      id v10 = 0;
      goto LABEL_28;
    }
    char v9 = [v4 cameraMake];
    if ([v9 isEqualToString:@"Apple"]
      && [(PLModelMigrator *)self _isReasonableCreationDate:v5])
    {
      id v10 = v5;
    }
    else
    {
      int v12 = [v4 pathForOriginalFile];
      char v13 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v10 = 0;
      if ([v13 fileExistsAtPath:v12 isDirectory:0])
      {
        uint64_t v24 = 0;
        int v14 = [v13 attributesOfItemAtPath:v12 error:&v24];
        id v15 = v14;
        if (v14)
        {
          id v16 = [v14 fileCreationDate];
          int v17 = v16;
          if (!v16) {
            goto LABEL_22;
          }
          [v16 timeIntervalSinceDate:v5];
          if (v18 < 0.0) {
            double v18 = -v18;
          }
          if (v18 < 60.0) {
            goto LABEL_20;
          }
          id v19 = [v4 modificationDate];
          [v17 timeIntervalSinceDate:v19];
          double v21 = v20;

          double v22 = -v21;
          if (v21 >= 0.0) {
            double v22 = v21;
          }
          if (v22 < 60.0) {
LABEL_20:
          }
            id v10 = v17;
          else {
LABEL_22:
          }
            id v10 = 0;
        }
        else
        {
          id v10 = 0;
        }
      }
    }

    if (!v10) {
      goto LABEL_27;
    }
  }
  else
  {
    id v10 = v5;
    if (!v10)
    {
LABEL_27:
      BOOL v11 = 0;
      goto LABEL_28;
    }
  }
  [v4 setAddedDate:v10];
  [v4 persistMetadataToFilesystem];
  if ([v4 cloudLocalState]) {
    [v4 setCloudLocalState:0];
  }
  BOOL v11 = 1;
LABEL_28:

  return v11;
}

- (BOOL)_isReasonableCreationDate:(id)a3
{
  id v3 = a3;
  id v4 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v5 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:0.0];
  [v3 timeIntervalSinceDate:v4];
  if (v6 >= 0.0)
  {
    BOOL v8 = 0;
  }
  else
  {
    [v5 timeIntervalSinceDate:v3];
    BOOL v8 = v7 < 0.0;
  }

  return v8;
}

- (BOOL)_generateAddedDateForAssetsInStore:(id)a3
{
  void v28[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  double v6 = (void *)MEMORY[0x19F38D3B0](v5);
  double v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _generateAddedDateForAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v8 = (void *)MEMORY[0x1E4F1C0D0];
  char v9 = +[PLManagedAsset entityName];
  id v10 = [v8 fetchRequestWithEntityName:v9];

  BOOL v11 = (void *)MEMORY[0x1E4F28BA0];
  int v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForGenerateAddedDateExclusions"), 0);
  v28[0] = v12;
  char v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != 0", @"complete");
  v28[1] = v13;
  int v14 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == nil", @"addedDate");
  void v28[2] = v14;
  id v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:3];
  id v16 = [v11 andPredicateWithSubpredicates:v15];
  [v10 setPredicate:v16];

  id v17 = (id)[v7 enumerateObjectsFromFetchRequest:v10 count:0 usingDefaultBatchSizeWithBlock:&__block_literal_global_1820];
  if ([v7 hasChanges])
  {
    id v23 = 0;
    char v18 = [v7 save:&v23];
    id v19 = v23;
    if ((v18 & 1) == 0)
    {
      double v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        double v21 = [v19 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v25 = v19;
        __int16 v26 = 2112;
        id v27 = v21;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "_generateAddedDateForAssetsInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v18 = 1;
  }

  return v18;
}

void __54__PLModelMigrator__generateAddedDateForAssetsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v2 = [v3 dateCreated];
  [v3 setAddedDate:v2];

  [v3 persistMetadataToFilesystem];
}

- (BOOL)_repersistDuplicatedAssets:(id)a3
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v80 = (void *)MEMORY[0x19F38D3B0]();
  v87 = self;
  v81 = v4;
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _repersistDuplicatedAssets:]", *MEMORY[0x1E4F1C1C0]);
  double v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  double v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
  BOOL v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"assets.@count > 1"];
  [v7 setPredicate:v8];

  __int16 v79 = v7;
  [v5 executeFetchRequest:v7 error:0];
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v84 = [obj countByEnumeratingWithState:&v127 objects:v138 count:16];
  if (v84)
  {
    uint64_t v83 = *(void *)v128;
    char v9 = off_1E585E000;
    v88 = v5;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v128 != v83) {
          objc_enumerationMutation(obj);
        }
        uint64_t v86 = v10;
        BOOL v11 = *(void **)(*((void *)&v127 + 1) + 8 * v10);
        v85 = (void *)MEMORY[0x19F38D3B0]();
        v89 = v11;
        int v12 = +[PLCloudResource cloudResourcesForResourceType:1 forCloudMaster:v11];
        char v13 = [MEMORY[0x1E4F1CA80] set];
        v110 = [MEMORY[0x1E4F1CA80] set];
        long long v123 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        id v91 = v12;
        v90 = v13;
        uint64_t v93 = [v91 countByEnumeratingWithState:&v123 objects:v137 count:16];
        if (v93)
        {
          char v14 = 0;
          uint64_t v92 = *(void *)v124;
          do
          {
            id v15 = 0;
            do
            {
              char v108 = v14;
              if (*(void *)v124 != v92) {
                objc_enumerationMutation(v91);
              }
              v106 = v15;
              id v16 = *(void **)(*((void *)&v123 + 1) + 8 * (void)v15);
              uint64_t v17 = MEMORY[0x19F38D3B0]();
              char v18 = [v16 filePath];
              int v19 = [v13 containsObject:v18];

              double v20 = [v16 filePath];
              if (v19) {
                double v21 = v110;
              }
              else {
                double v21 = v13;
              }
              [v21 addObject:v20];

              double v22 = v9[401];
              id v23 = [v16 assetUuid];
              uint64_t v24 = [(__objc2_class *)v22 assetWithUUID:v23 inManagedObjectContext:v5];

              id v25 = (void *)MEMORY[0x1E4F1C0D0];
              __int16 v26 = [(__objc2_class *)v9[401] entityName];
              id v27 = [v25 fetchRequestWithEntityName:v26];

              uint64_t v28 = (void *)MEMORY[0x1E4F28F60];
              v102 = v24;
              __int16 v29 = [v24 cloudAssetGUID];
              uint64_t v30 = [v28 predicateWithFormat:@"cloudAssetGUID == %@", v29];

              v98 = (void *)v30;
              [v27 setPredicate:v30];
              id v122 = 0;
              int v31 = [v5 executeFetchRequest:v27 error:&v122];
              id v32 = v122;
              uint64_t v94 = [v31 count];
              context = (void *)v17;
              v100 = v27;
              v95 = v32;
              v96 = v31;
              if ((unint64_t)[v31 count] < 2)
              {
                if (v108) {
                  goto LABEL_26;
                }
              }
              else
              {
                long long v121 = 0u;
                long long v119 = 0u;
                long long v120 = 0u;
                long long v118 = 0u;
                id v33 = v31;
                uint64_t v34 = [v33 countByEnumeratingWithState:&v118 objects:v136 count:16];
                if (v34)
                {
                  uint64_t v35 = v34;
                  uint64_t v36 = 0;
                  uint64_t v37 = *(void *)v119;
                  do
                  {
                    for (uint64_t i = 0; i != v35; ++i)
                    {
                      if (*(void *)v119 != v37) {
                        objc_enumerationMutation(v33);
                      }
                      uint64_t v39 = *(void **)(*((void *)&v118 + 1) + 8 * i);
                      id v40 = [v39 pathForOriginalFile];
                      [v39 setCloudAssetGUID:0];
                      [v39 setCloudLocalState:0];
                      if (([v6 fileExistsAtPath:v40 isDirectory:0] & 1) == 0)
                      {
                        long long v41 = +[PLAssetTransactionReason transactionReason:@"[_repersistDuplicatedAssets]The original file is not on disk, deleting asset."];
                        [v39 deleteWithReason:v41];
                        ++v36;
                      }
                    }
                    uint64_t v35 = [v33 countByEnumeratingWithState:&v118 objects:v136 count:16];
                  }
                  while (v35);
                }
                else
                {
                  uint64_t v36 = 0;
                }

                uint64_t v5 = v88;
                char v9 = off_1E585E000;
                char v13 = v90;
                if (v108 & 1 | (v36 != v94))
                {
LABEL_26:
                  [v89 setCloudLocalState:0];
                  char v14 = 1;
                  goto LABEL_30;
                }
              }
              char v14 = 0;
LABEL_30:
              id v42 = [v102 pathForOriginalFile];
              int v43 = [v6 fileExistsAtPath:v42 isDirectory:0];

              if (v43) {
                [v102 persistMetadataToFilesystem];
              }

              id v15 = v106 + 1;
            }
            while (v106 + 1 != (char *)v93);
            uint64_t v93 = [v91 countByEnumeratingWithState:&v123 objects:v137 count:16];
          }
          while (v93);
        }

        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        id v107 = v91;
        uint64_t v109 = [v107 countByEnumeratingWithState:&v114 objects:v135 count:16];
        if (v109)
        {
          uint64_t v44 = *(void **)v115;
          contexta = *(void **)v115;
          do
          {
            for (uint64_t j = 0; j != v109; ++j)
            {
              if (*(void **)v115 != v44) {
                objc_enumerationMutation(v107);
              }
              uint64_t v46 = *(void **)(*((void *)&v114 + 1) + 8 * j);
              long long v47 = (void *)MEMORY[0x19F38D3B0]();
              uint64_t v48 = [v46 filePath];
              int v49 = [v110 containsObject:v48];

              if (v49)
              {
                uint64_t v50 = v9[401];
                long long v51 = [v46 assetUuid];
                uint64_t v52 = [(__objc2_class *)v50 assetWithUUID:v51 inManagedObjectContext:v5];

                if (v52)
                {
                  uint64_t v53 = [v52 cloudAssetGUID];

                  if (!v53)
                  {
                    v103 = [v52 pathForOriginalFile];
                    uint64_t v54 = [v52 uuid];
                    id v55 = [v52 photoDataCPLResourceDestinationDirectoryCreateIfNeededWithIdentifier:v54];

                    uint64_t v56 = [(PLModelMigrator *)v87 pathManager];
                    uint64_t v57 = [v56 assetAbbreviatedMetadataDirectoryForDirectory:v55 type:31 bundleScope:0];
                    [v52 setDirectory:v57];

                    uint64_t v58 = v9[401];
                    uint64_t v59 = [v52 uniformTypeIdentifier];
                    uint64_t v60 = [(__objc2_class *)v58 preferredFileExtensionForType:v59];

                    __int16 v61 = NSString;
                    uint64_t v62 = [v52 uuid];
                    v101 = (void *)v60;
                    uint64_t v63 = [v61 stringWithFormat:@"%@.%@", v62, v60];

                    v99 = (void *)v63;
                    [v52 setFilename:v63];
                    uint64_t v64 = [v52 pathForOriginalFile];
                    uint64_t v65 = [v64 stringByDeletingLastPathComponent];

                    id v113 = 0;
                    v97 = (void *)v65;
                    LOBYTE(v65) = [v6 createDirectoryIfNeededAtPath:v65 error:&v113];
                    id v66 = v113;
                    if ((v65 & 1) == 0)
                    {
                      __int16 v67 = PLMigrationGetLog();
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                      {
                        id v68 = [v66 userInfo];
                        *(_DWORD *)long long buf = 138412546;
                        id v132 = v66;
                        __int16 v133 = 2112;
                        v134 = v68;
                        _os_log_impl(&dword_19B3C7000, v67, OS_LOG_TYPE_ERROR, "_repersistDuplicatedAssets: failed to create directory: %@ %@", buf, 0x16u);
                      }
                    }
                    id v112 = v66;
                    char v69 = [v6 copyItemAtPath:v103 toPath:v64 error:&v112];
                    id v70 = v112;

                    if ((v69 & 1) == 0)
                    {
                      long long v71 = PLMigrationGetLog();
                      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                      {
                        long long v72 = [v70 userInfo];
                        *(_DWORD *)long long buf = 138412546;
                        id v132 = v70;
                        __int16 v133 = 2112;
                        v134 = v72;
                        _os_log_impl(&dword_19B3C7000, v71, OS_LOG_TYPE_ERROR, "_repersistDuplicatedAssets: failed to copy originalFile: %@ %@", buf, 0x16u);
                      }
                    }

                    char v9 = off_1E585E000;
                  }
                }

                uint64_t v44 = contexta;
              }
            }
            uint64_t v109 = [v107 countByEnumeratingWithState:&v114 objects:v135 count:16];
          }
          while (v109);
        }

        uint64_t v10 = v86 + 1;
      }
      while (v86 + 1 != v84);
      uint64_t v84 = [obj countByEnumeratingWithState:&v127 objects:v138 count:16];
    }
    while (v84);
  }

  if ([v5 hasChanges])
  {
    id v111 = 0;
    char v73 = [v5 save:&v111];
    id v74 = v111;
    if ((v73 & 1) == 0)
    {
      uint64_t v75 = PLMigrationGetLog();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        [v74 userInfo];
        __int16 v77 = v76 = v5;
        *(_DWORD *)long long buf = 138412546;
        id v132 = v74;
        __int16 v133 = 2112;
        v134 = v77;
        _os_log_impl(&dword_19B3C7000, v75, OS_LOG_TYPE_ERROR, "_repersistDuplicatedAssets: failed: %@ %@", buf, 0x16u);

        uint64_t v5 = v76;
      }
    }
  }
  else
  {
    char v73 = 1;
  }

  return v73;
}

- (BOOL)_fixKeywordsInStagedStore:(id)a3
{
  v80[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  id v55 = v4;
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixKeywordsInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  double v6 = +[PLManagedObject entityInManagedObjectContext:v5];
  double v7 = (void *)MEMORY[0x1E4F1C0D0];
  BOOL v8 = [v6 name];
  char v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = [MEMORY[0x1E4F28C68] expressionWithFormat:@"count:(title)"];
  id v11 = objc_alloc_init(MEMORY[0x1E4F1C0B8]);
  [v11 setName:@"count"];
  uint64_t v52 = (void *)v10;
  [v11 setExpression:v10];
  [v11 setExpressionResultType:300];
  __int16 v61 = v6;
  int v12 = [v6 propertiesByName];
  uint64_t v13 = [v12 objectForKey:@"title"];

  v80[0] = v13;
  v80[1] = v11;
  long long v51 = v11;
  char v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v80 count:2];
  [v9 setPropertiesToFetch:v14];

  uint64_t v50 = (void *)v13;
  uint64_t v79 = v13;
  id v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v79 count:1];
  [v9 setPropertiesToGroupBy:v15];

  [v9 setResultType:2];
  uint64_t v53 = v9;
  id v16 = [v5 executeFetchRequest:v9 error:0];
  uint64_t v17 = [MEMORY[0x1E4F1CA48] array];
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  obuint64_t j = v16;
  uint64_t v18 = [obj countByEnumeratingWithState:&v71 objects:v78 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v72;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v72 != v20) {
          objc_enumerationMutation(obj);
        }
        double v22 = *(void **)(*((void *)&v71 + 1) + 8 * i);
        id v23 = [v22 objectForKey:@"count"];
        uint64_t v24 = [v23 integerValue];

        if (v24 >= 2)
        {
          id v25 = [v22 objectForKey:@"title"];
          __int16 v26 = PLMigrationGetLog();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            id v77 = v25;
            _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_DEFAULT, "Found dupeKeyword: %@", buf, 0xCu);
          }

          [v17 addObject:v25];
        }
      }
      uint64_t v19 = [obj countByEnumeratingWithState:&v71 objects:v78 count:16];
    }
    while (v19);
  }

  uint64_t v60 = [MEMORY[0x1E4F1CA48] array];
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v56 = v17;
  uint64_t v27 = [v56 countByEnumeratingWithState:&v67 objects:v75 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v59 = *(void *)v68;
    char v58 = 1;
    do
    {
      for (uint64_t j = 0; j != v28; ++j)
      {
        if (*(void *)v68 != v59) {
          objc_enumerationMutation(v56);
        }
        uint64_t v30 = *(void *)(*((void *)&v67 + 1) + 8 * j);
        int v31 = (void *)MEMORY[0x1E4F1C0D0];
        id v32 = [v61 name];
        id v33 = [v31 fetchRequestWithEntityName:v32];

        uint64_t v34 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"title == %@", v30];
        [v33 setPredicate:v34];

        [v33 setFetchBatchSize:100];
        id v66 = 0;
        uint64_t v35 = [v5 executeFetchRequest:v33 error:&v66];
        id v36 = v66;
        uint64_t v37 = (void *)[objc_alloc(MEMORY[0x1E4F1C108]) initWithEntity:v61 insertIntoManagedObjectContext:v5];
        [v37 setValue:v30 forKey:@"title"];
        v63[0] = MEMORY[0x1E4F143A8];
        v63[1] = 3221225472;
        void v63[2] = __45__PLModelMigrator__fixKeywordsInStagedStore___block_invoke;
        v63[3] = &unk_1E58667E0;
        id v38 = v37;
        id v64 = v38;
        id v65 = v60;
        uint64_t v39 = [v5 enumerateWithIncrementalSaveUsingObjects:v35 withBlock:v63];
        if (v39)
        {
          id v40 = PLMigrationGetLog();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            id v77 = v36;
            _os_log_impl(&dword_19B3C7000, v40, OS_LOG_TYPE_ERROR, "Uniquing Keywords failed - error: %@", buf, 0xCu);
          }

          char v58 = 0;
        }
        else
        {
          [v5 reset];
        }
      }
      uint64_t v28 = [v56 countByEnumeratingWithState:&v67 objects:v75 count:16];
    }
    while (v28);
  }
  else
  {
    char v58 = 1;
  }

  if ([v60 count])
  {
    long long v41 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithObjectIDs:v60];
    id v62 = 0;
    id v42 = [v5 executeRequest:v41 error:&v62];
    id v43 = v62;
    uint64_t v44 = PLMigrationGetLog();
    __int16 v45 = v44;
    if (v43)
    {
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v77 = v43;
        uint64_t v46 = "Error deleting keywords: %@";
        long long v47 = v45;
        os_log_type_t v48 = OS_LOG_TYPE_ERROR;
LABEL_32:
        _os_log_impl(&dword_19B3C7000, v47, v48, v46, buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v77 = v42;
      uint64_t v46 = "Deleted keywords: %@";
      long long v47 = v45;
      os_log_type_t v48 = OS_LOG_TYPE_DEBUG;
      goto LABEL_32;
    }
  }

  return v58 & 1;
}

void __45__PLModelMigrator__fixKeywordsInStagedStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = objc_msgSend(v3, "valueForKey:", @"assetAttributes", 0);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        char v9 = [*(id *)(*((void *)&v12 + 1) + 8 * v8) mutableSetValueForKey:@"keywords"];
        [v9 addObject:*(void *)(a1 + 32)];

        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  uint64_t v10 = *(void **)(a1 + 40);
  id v11 = [v3 objectID];
  [v10 addObject:v11];
}

- (BOOL)_fixFaceAlgorithmVersion:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixFaceAlgorithmVersion:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C038];
  char v9 = +[PLDetectedFace entityName];
  uint64_t v10 = [v8 batchUpdateRequestWithEntityName:v9];

  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"faceAlgorithmVersion == 0"];
  [v10 setPredicate:v11];

  [v10 setPropertiesToUpdate:&unk_1EEBF2888];
  [v10 setResultType:2];
  id v18 = 0;
  long long v12 = [v7 executeRequest:v10 error:&v18];
  id v13 = v18;
  long long v14 = PLMigrationGetLog();
  long long v15 = v14;
  if (v12)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v12 result];
      *(_DWORD *)long long buf = 138412290;
      id v20 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Fixing faceAlgorithmVersion successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v20 = v13;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "Batch update request failed, setting faceAlgorithmVersion from 0 to 2, error: %@", buf, 0xCu);
  }

  [v7 reset];

  return v12 != 0;
}

- (BOOL)_fixAlbumAndFolderSortAscending:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixAlbumAndFolderSortAscending:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v6 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  uint64_t v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"customSortAscending == NO"];
  [v6 setPredicate:v7];
  [v6 setFetchBatchSize:100];
  uint64_t v8 = [v5 executeFetchRequest:v6 error:0];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        [v13 setCustomSortAscending:1];
        [v13 setCloudLocalState:0];
        [(PLModelMigrator *)self _persistMetadataToFileSystemForAlbum:v13];
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v10);
  }
  if ([v5 hasChanges])
  {
    long long v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [v8 count];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v28 = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Fixed sort ascending on %lu album", buf, 0xCu);
    }

    id v22 = 0;
    char v16 = [v5 save:&v22];
    id v17 = v22;
    if ((v16 & 1) == 0)
    {
      id v18 = PLMigrationGetLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = [v17 userInfo];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v28 = (uint64_t)v17;
        __int16 v29 = 2112;
        uint64_t v30 = v19;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "_fixAlbumAndFolderSortAscending: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v16 = 1;
  }

  return v16;
}

- (void)_handleCreateOptionsUsingContext:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(PLModelMigrator *)self options];
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 objectForKeyedSubscript:@"DefaultAlbumUUID"];
    uint64_t v8 = [v6 objectForKeyedSubscript:@"DefaultAlbumTitle"];
    if (v7)
    {
      uint64_t v9 = PLMigrationGetLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if (v8) {
          uint64_t v10 = v8;
        }
        else {
          uint64_t v10 = v7;
        }
        int v12 = 138412290;
        id v13 = v10;
        _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "creating album %@ from migration options", (uint8_t *)&v12, 0xCu);
      }

      id v11 = +[PLGenericAlbum insertAlbumWithKind:2 title:v8 uuid:v7 inManagedObjectContext:v4];
    }
  }
}

- (BOOL)_deleteOrphanedUnverifiedPeople:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _deleteOrphanedUnverifiedPeople:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLPerson entityName];
  uint64_t v10 = [v8 fetchRequestWithEntityName:v9];

  id v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"verifiedType == %d AND faceCount == 0 AND associatedFaceGroup == nil", 0);
  [v10 setPredicate:v11];

  int v12 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v10];
  [v12 setResultType:2];
  id v19 = 0;
  id v13 = [v7 executeRequest:v12 error:&v19];
  id v14 = v19;
  uint64_t v15 = PLMigrationGetLog();
  char v16 = v15;
  if (v13)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = [v13 result];
      *(_DWORD *)long long buf = 138412290;
      id v21 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "_deleteOrphanedUnverifiedPeople deleted %@ orphaned people", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v21 = v14;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "_deleteOrphanedUnverifiedPeople failed: %@", buf, 0xCu);
  }

  [v7 reset];

  return v13 != 0;
}

- (BOOL)_processDeletesForUUIDs:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 count];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = [(PLPhotoLibraryPathManager *)self->_pathManager deletedMemoryUUIDsFilePath];
    uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v9 = [v8 fileExistsAtPath:v7];

    if (v9)
    {
      uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithContentsOfFile:v7];
      if ([v10 count]) {
        [v4 addObjectsFromArray:v10];
      }
    }
    int v11 = [v4 writeToFile:v7 atomically:1];
    int v12 = PLMigrationGetLog();
    id v13 = v12;
    if (v11)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 134218242;
        uint64_t v19 = v6;
        __int16 v20 = 2112;
        id v21 = v7;
        id v14 = "Persisted %lu deletedMemoryUUIDs to %@";
        uint64_t v15 = v13;
        os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_19B3C7000, v15, v16, v14, (uint8_t *)&v18, 0x16u);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v18 = 134218242;
      uint64_t v19 = v6;
      __int16 v20 = 2112;
      id v21 = v7;
      id v14 = "Failed to persist %lu deletedMemoryUUIDs to %@";
      uint64_t v15 = v13;
      os_log_type_t v16 = OS_LOG_TYPE_ERROR;
      goto LABEL_12;
    }

    goto LABEL_14;
  }
  LOBYTE(v11) = 1;
LABEL_14:

  return v11;
}

- (BOOL)_fixMemoriesWithAssetLists:(id)a3
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  long long v67 = v4;
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixMemoriesWithAssetLists:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"Memory"];
  uint64_t v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"representativeAssets.@count > 500"];
  [v7 setPredicate:v8];

  [v7 setFetchBatchSize:100];
  int v9 = [MEMORY[0x1E4F1CA48] array];
  id v65 = v7;
  uint64_t v10 = [v6 executeFetchRequest:v7 error:0];
  id v77 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  obuint64_t j = v10;
  uint64_t v11 = [obj countByEnumeratingWithState:&v107 objects:v118 count:16];
  uint64_t v93 = v9;
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v73 = *(void *)v108;
    do
    {
      uint64_t v13 = 0;
      id v68 = (id)v12;
      do
      {
        if (*(void *)v108 != v73) {
          objc_enumerationMutation(obj);
        }
        uint64_t v78 = v13;
        id v14 = *(void **)(*((void *)&v107 + 1) + 8 * v13);
        uint64_t v15 = [v14 valueForKeyPath:@"curatedAssets.objectID"];
        os_log_type_t v16 = [v14 valueForKeyPath:@"movieCuratedAssets.objectID"];
        [v14 valueForKeyPath:@"representativeAssets.objectID"];
        v88 = v15;
        uint64_t v86 = v16;
        id v84 = (id)objc_claimAutoreleasedReturnValue();
        id v17 = objc_msgSend(NSString, "stringWithFormat:", @"curated%lu+movie%lu+rep%lu", objc_msgSend(v15, "count"), objc_msgSend(v16, "count"), objc_msgSend(v84, "count"));
        int v18 = [v77 objectForKey:v17];
        if (v18)
        {
          uint64_t v19 = v18;
          __int16 v20 = [v18 allKeys];
          uint64_t v21 = [v20 count];

          if (v21)
          {
            long long v71 = v17;
            unint64_t v22 = 0;
            char v75 = 0;
            v80 = v19;
            v82 = v14;
            do
            {
              id v91 = objc_msgSend(NSString, "stringWithFormat:", @"variant%d", v22);
              long long v23 = objc_msgSend(v19, "objectForKey:");
              if (!v23)
              {
                long long v23 = [MEMORY[0x1E4F1CA48] arrayWithObject:v14];
              }
              long long v24 = [v23 firstObject];
              uint64_t v25 = [v24 valueForKeyPath:@"curatedAssets.objectID"];
              uint64_t v26 = [v24 valueForKeyPath:@"movieCuratedAssets.objectID"];
              uint64_t v27 = [v24 valueForKeyPath:@"representativeAssets.objectID"];
              v90 = (void *)v25;
              uint64_t v28 = [MEMORY[0x1E4F1CA80] setWithSet:v25];
              [v28 minusSet:v88];
              __int16 v29 = (void *)v26;
              uint64_t v30 = [MEMORY[0x1E4F1CA80] setWithSet:v26];
              [v30 minusSet:v86];
              int v31 = [MEMORY[0x1E4F1CA80] setWithSet:v27];
              [v31 minusSet:v84];
              if (![v28 count] && !objc_msgSend(v30, "count") && !objc_msgSend(v31, "count"))
              {
                [v23 addObject:v82];
                char v75 = 1;
              }

              ++v22;
              uint64_t v19 = v80;
              uint64_t v32 = [v80 allKeys];
              unint64_t v33 = [v32 count];

              id v14 = v82;
            }
            while (v33 > v22);
            int v9 = v93;
            uint64_t v12 = (uint64_t)v68;
            id v17 = v71;
            if (v75)
            {
              uint64_t v34 = v78;
              goto LABEL_21;
            }
          }
          uint64_t v35 = NSString;
          id v36 = [v19 allKeys];
          uint64_t v37 = objc_msgSend(v35, "stringWithFormat:", @"variant%lu", objc_msgSend(v36, "count"));

          id v38 = [MEMORY[0x1E4F1CA48] arrayWithObject:v14];
          [v19 setObject:v38 forKey:v37];
        }
        else
        {
          uint64_t v19 = [MEMORY[0x1E4F1CA60] dictionary];
          [v77 setObject:v19 forKey:v17];
          uint64_t v37 = [MEMORY[0x1E4F1CA48] arrayWithObject:v14];
          [v19 setObject:v37 forKey:@"variant0"];
        }
        uint64_t v34 = v78;

LABEL_21:
        uint64_t v13 = v34 + 1;
      }
      while (v13 != v12);
      uint64_t v12 = [obj countByEnumeratingWithState:&v107 objects:v118 count:16];
    }
    while (v12);
  }

  BOOL v39 = [(PLModelMigrator *)self isCloudPhotoLibraryEnabled];
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  id v69 = [v77 allKeys];
  uint64_t v74 = [v69 countByEnumeratingWithState:&v103 objects:v117 count:16];
  id v40 = 0;
  if (v74)
  {
    uint64_t v72 = *(void *)v104;
    do
    {
      uint64_t v41 = 0;
      do
      {
        if (*(void *)v104 != v72)
        {
          uint64_t v42 = v41;
          objc_enumerationMutation(v69);
          uint64_t v41 = v42;
        }
        uint64_t v76 = v41;
        id v43 = [v77 objectForKey:*(void *)(*((void *)&v103 + 1) + 8 * v41)];
        long long v99 = 0u;
        long long v100 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        id v85 = [v43 allKeys];
        uint64_t v44 = [v85 countByEnumeratingWithState:&v99 objects:v116 count:16];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = *(void *)v100;
          uint64_t v79 = *(void *)v100;
          v81 = v43;
          do
          {
            uint64_t v47 = 0;
            uint64_t v83 = v45;
            do
            {
              if (*(void *)v100 != v46) {
                objc_enumerationMutation(v85);
              }
              os_log_type_t v48 = [v43 objectForKey:*(void *)(*((void *)&v99 + 1) + 8 * v47)];
              if ((unint64_t)[v48 count] >= 2)
              {
                v87 = v48;
                uint64_t v89 = v47;
                long long v97 = 0u;
                long long v98 = 0u;
                long long v95 = 0u;
                long long v96 = 0u;
                id v49 = v48;
                uint64_t v50 = [v49 countByEnumeratingWithState:&v95 objects:v115 count:16];
                if (v50)
                {
                  uint64_t v51 = v50;
                  uint64_t v52 = *(void *)v96;
                  do
                  {
                    uint64_t v92 = v40;
                    for (uint64_t i = 0; i != v51; ++i)
                    {
                      if (*(void *)v96 != v52) {
                        objc_enumerationMutation(v49);
                      }
                      uint64_t v54 = *(void **)(*((void *)&v95 + 1) + 8 * i);
                      if (v39
                        && [*(id *)(*((void *)&v95 + 1) + 8 * i) cloudLocalState] == 1)
                      {
                        id v55 = [v54 uuid];
                        if (v55)
                        {
                          [v9 addObject:v55];
                        }
                        else
                        {
                          id v56 = PLMigrationGetLog();
                          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)long long buf = 138412290;
                            id v112 = (char *)v54;
                            _os_log_impl(&dword_19B3C7000, v56, OS_LOG_TYPE_ERROR, "Memory %@ missing uuid", buf, 0xCu);
                          }

                          int v9 = v93;
                        }
                      }
                      uint64_t v57 = [(PLModelMigrator *)self pathManager];
                      [v54 removePersistedFileSystemDataWithPathManager:v57];

                      [v6 deleteObject:v54];
                    }
                    id v40 = &v92[v51];
                    uint64_t v51 = [v49 countByEnumeratingWithState:&v95 objects:v115 count:16];
                  }
                  while (v51);
                }

                uint64_t v46 = v79;
                id v43 = v81;
                uint64_t v45 = v83;
                os_log_type_t v48 = v87;
                uint64_t v47 = v89;
              }

              ++v47;
            }
            while (v47 != v45);
            uint64_t v45 = [v85 countByEnumeratingWithState:&v99 objects:v116 count:16];
          }
          while (v45);
        }

        uint64_t v41 = v76 + 1;
      }
      while (v76 + 1 != v74);
      uint64_t v74 = [v69 countByEnumeratingWithState:&v103 objects:v117 count:16];
    }
    while (v74);
  }

  id v94 = 0;
  char v58 = [v6 save:&v94];
  id v59 = v94;
  uint64_t v60 = PLMigrationGetLog();
  __int16 v61 = v60;
  if (v58)
  {
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      id v112 = v40;
      _os_log_impl(&dword_19B3C7000, v61, OS_LOG_TYPE_DEFAULT, "_fixMemoriesWithAssetLists deleted %ld", buf, 0xCu);
    }

    BOOL v62 = [(PLModelMigrator *)self _processDeletesForUUIDs:v9];
  }
  else
  {
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      uint64_t v63 = [v59 userInfo];
      *(_DWORD *)long long buf = 138412546;
      id v112 = (char *)v59;
      __int16 v113 = 2112;
      long long v114 = v63;
      _os_log_impl(&dword_19B3C7000, v61, OS_LOG_TYPE_ERROR, "_fixMemoriesWithAssetLists failed: %@ %@", buf, 0x16u);
    }
    BOOL v62 = 0;
  }
  [v6 reset];

  return v62;
}

- (BOOL)_updateKeyAssetInMemory:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _updateKeyAssetInMemory:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"Memory"];
  int v9 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"keyAsset = nil"];
  [v8 setPredicate:v9];

  [v8 setFetchBatchSize:100];
  uint64_t v35 = 0;
  id v36 = &v35;
  uint64_t v37 = 0x2020000000;
  uint64_t v38 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  objc_initWeak(&location, v10);

  uint64_t v11 = [v7 executeFetchRequest:v8 error:0];
  uint64_t v21 = MEMORY[0x1E4F143A8];
  uint64_t v22 = 3221225472;
  long long v23 = __43__PLModelMigrator__updateKeyAssetInMemory___block_invoke;
  long long v24 = &unk_1E58667B8;
  uint64_t v27 = &v35;
  uint64_t v25 = self;
  objc_copyWeak(&v29, &location);
  id v12 = v7;
  id v26 = v12;
  uint64_t v28 = &v31;
  uint64_t v13 = [v12 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:&v21];
  if (v13)
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = objc_msgSend(v13, "userInfo", v21, v22, v23, v24, v25);
      *(_DWORD *)long long buf = 138412546;
      id v40 = v13;
      __int16 v41 = 2112;
      uint64_t v42 = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_updateKeyAssetInMemory failed: %@ %@", buf, 0x16u);
    }
    BOOL v16 = 0;
  }
  else
  {
    id v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = (void *)v36[3];
      uint64_t v19 = (void *)v32[3];
      *(_DWORD *)long long buf = 134218240;
      id v40 = v18;
      __int16 v41 = 2048;
      uint64_t v42 = v19;
      _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "_updateKeyAssetInMemory fixed %ld deleted %ld", buf, 0x16u);
    }

    id v14 = objc_loadWeakRetained(&location);
    BOOL v16 = -[PLModelMigrator _processDeletesForUUIDs:](self, "_processDeletesForUUIDs:", v14, v21, v22, v23, v24, v25);
  }

  [v12 reset];
  objc_destroyWeak(&v29);

  objc_destroyWeak(&location);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);

  return v16;
}

void __43__PLModelMigrator__updateKeyAssetInMemory___block_invoke(id *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 calculateKeyAsset];
  if (v4)
  {
    [v3 setKeyAsset:v4];
    uint64_t v5 = a1 + 6;
  }
  else
  {
    if ([a1[4] isCloudPhotoLibraryEnabled]
      && [v3 cloudLocalState] == 1)
    {
      uint64_t v6 = [v3 uuid];
      if (v6)
      {
        WeakRetained = objc_loadWeakRetained(a1 + 8);
        [WeakRetained addObject:v6];
      }
      else
      {
        WeakRetained = PLMigrationGetLog();
        if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR))
        {
          int v9 = 138412290;
          id v10 = v3;
          _os_log_impl(&dword_19B3C7000, WeakRetained, OS_LOG_TYPE_ERROR, "Memory %@ missing uuid", (uint8_t *)&v9, 0xCu);
        }
      }
    }
    uint64_t v8 = [a1[4] pathManager];
    [v3 removePersistedFileSystemDataWithPathManager:v8];

    [a1[5] deleteObject:v3];
    uint64_t v5 = a1 + 7;
  }
  ++*(void *)(*((void *)*v5 + 1) + 24);
}

- (BOOL)_fixLocallyAvailableFlagForThumbnailsInStore:(id)a3
{
  v47[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v31 = v4;
  uint64_t v34 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixLocallyAvailableFlagForThumbnailsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v6 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v7 = +[PLCloudResource entityName];
  uint64_t v35 = [v6 fetchRequestWithEntityName:v7];

  uint64_t v33 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"type == %d AND isLocallyAvailable == YES", 5);
  uint64_t v8 = (void *)MEMORY[0x1E4F28BA0];
  int v9 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SUBQUERY(cloudMaster.assets, $asset, $asset.adjustmentsState = %d AND $asset.thumbnailIndex = -1).@count != 0", 0];
  v47[0] = v9;
  id v10 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v11 = +[PLManagedAsset predicateForUnadjustedAssetsWithKeyPathToAsset:@"asset"];
  v46[0] = v11;
  id v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"asset.thumbnailIndex = -1"];
  v46[1] = v12;
  uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v46 count:2];
  id v14 = [v10 andPredicateWithSubpredicates:v13];
  v47[1] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:2];
  BOOL v16 = [v8 orPredicateWithSubpredicates:v15];

  id v17 = (void *)MEMORY[0x1E4F28BA0];
  v45[0] = v33;
  v45[1] = v16;
  int v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:2];
  uint64_t v19 = [v17 andPredicateWithSubpredicates:v18];

  [v35 setFetchBatchSize:100];
  [v35 setPredicate:v19];
  __int16 v20 = [v34 executeFetchRequest:v35 error:0];
  uint64_t v39 = 0;
  id v40 = &v39;
  uint64_t v41 = 0x2020000000;
  int v42 = 0;
  uint64_t v21 = [MEMORY[0x1E4F28CB8] defaultManager];
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  void v36[2] = __64__PLModelMigrator__fixLocallyAvailableFlagForThumbnailsInStore___block_invoke;
  void v36[3] = &unk_1E5866790;
  id v22 = v21;
  id v37 = v22;
  uint64_t v38 = &v39;
  long long v23 = [v34 enumerateWithIncrementalSaveUsingObjects:v20 withBlock:v36];
  if (v23)
  {
    long long v24 = PLMigrationGetLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v44 = v23;
      uint64_t v25 = "Batch update request failed fixing locallyAvailableFlagForThumbnails, error: %@";
      id v26 = v24;
      os_log_type_t v27 = OS_LOG_TYPE_ERROR;
      uint32_t v28 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v26, v27, v25, buf, v28);
    }
  }
  else
  {
    long long v24 = PLMigrationGetLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = *((_DWORD *)v40 + 6);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v44) = v29;
      uint64_t v25 = "Fixed %d locallyAvailableFlagForThumbnails";
      id v26 = v24;
      os_log_type_t v27 = OS_LOG_TYPE_DEFAULT;
      uint32_t v28 = 8;
      goto LABEL_6;
    }
  }

  [v34 reset];
  _Block_object_dispose(&v39, 8);

  return v23 == 0;
}

void __64__PLModelMigrator__fixLocallyAvailableFlagForThumbnailsInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 filePath];
  if ([*(id *)(a1 + 32) fileExistsAtPath:v4])
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v9 = 0;
    char v6 = [v5 removeItemAtPath:v4 error:&v9];
    id v7 = v9;
    if ((v6 & 1) == 0)
    {
      uint64_t v8 = PLMigrationGetLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        id v11 = v3;
        __int16 v12 = 2112;
        id v13 = v7;
        _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_ERROR, "Failed to remove thumbnail resource for %@: %@", buf, 0x16u);
      }
    }
  }
  [v3 setIsLocallyAvailable:0];
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

- (BOOL)_fixLastPrefetchDateInStore:(id)a3
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  char v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixLastPrefetchDateInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C038];
  id v9 = +[PLCloudResource entityName];
  id v10 = [v8 batchUpdateRequestWithEntityName:v9];

  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"lastPrefetchDate == %@", @"<null>"];
  [v10 setPredicate:v11];

  long long v23 = @"lastPrefetchDate";
  __int16 v12 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:0.0];
  v24[0] = v12;
  id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:&v23 count:1];
  [v10 setPropertiesToUpdate:v13];

  [v10 setResultType:2];
  id v20 = 0;
  uint64_t v14 = [v7 executeRequest:v10 error:&v20];
  id v15 = v20;
  BOOL v16 = PLMigrationGetLog();
  id v17 = v16;
  if (v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = [v14 result];
      *(_DWORD *)long long buf = 138412290;
      id v22 = v18;
      _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "Fixing lastPrefetchDate successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v22 = v15;
    _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_ERROR, "Batch update request failed fixing lastPrefetchDate, error: %@", buf, 0xCu);
  }

  [v7 reset];

  return v14 != 0;
}

- (BOOL)_removeCameraRollInStore:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  char v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _removeCameraRollInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  id v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"kind = %d", 1000);
  [v8 setPredicate:v9];

  id v23 = 0;
  id v10 = [v7 executeFetchRequest:v8 error:&v23];
  id v11 = v23;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __44__PLModelMigrator__removeCameraRollInStore___block_invoke;
  void v21[3] = &unk_1E5866768;
  id v22 = v7;
  id v12 = v7;
  id v13 = [v12 enumerateWithIncrementalSaveUsingObjects:v10 withBlock:v21];
  uint64_t v14 = PLMigrationGetLog();
  id v15 = v14;
  if (v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v25 = v13;
      BOOL v16 = "Failed to delete camera roll: %@";
      id v17 = v15;
      os_log_type_t v18 = OS_LOG_TYPE_ERROR;
      uint32_t v19 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v17, v18, v16, buf, v19);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    BOOL v16 = "Deleted camera roll";
    id v17 = v15;
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    uint32_t v19 = 2;
    goto LABEL_6;
  }

  [v12 reset];

  return v13 == 0;
}

uint64_t __44__PLModelMigrator__removeCameraRollInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteObject:a2];
}

- (BOOL)_applyDataProtectionToDCIMFromClassBToClassC
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v3 = [(PLModelMigrator *)self pathManager];
  id v4 = [v3 photoDirectoryWithType:4];

  v7[0] = v4;
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  [(PLModelMigrator *)self applyDataProtectionToPhotosPaths:v5 fromKeyClass:2 toKeyClass:3];

  return 1;
}

- (BOOL)_deleteAllMemoriesInStore:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  char v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _deleteAllMemoriesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"Memory"];
  [v7 setFetchBatchSize:100];
  uint64_t v8 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:100];
  objc_initWeak(&location, v8);

  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 0;
  id v9 = [v6 executeFetchRequest:v7 error:0];
  BOOL v10 = [(PLModelMigrator *)self isCloudPhotoLibraryEnabled];
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __45__PLModelMigrator__deleteAllMemoriesInStore___block_invoke;
  void v26[3] = &unk_1E5866740;
  BOOL v30 = v10;
  objc_copyWeak(&v29, &location);
  id v11 = v6;
  id v27 = v11;
  uint32_t v28 = &v31;
  id v12 = [v11 enumerateWithIncrementalSaveUsingObjects:v9 withBlock:v26];
  if (v12)
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v37 = (uint64_t)v12;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Failed to delete memories: %@", buf, 0xCu);
    }
    goto LABEL_14;
  }
  uint64_t v14 = PLMigrationGetLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *((_DWORD *)v32 + 6);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v37) = v15;
    _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Deleted %d memories", buf, 8u);
  }

  id v16 = objc_loadWeakRetained(&location);
  uint64_t v17 = [v16 count];

  if (v17)
  {
    id v13 = [(PLPhotoLibraryPathManager *)self->_pathManager deletedMemoryUUIDsFilePath];
    id v18 = objc_loadWeakRetained(&location);
    int v19 = [v18 writeToFile:v13 atomically:1];

    if (v19)
    {
      id v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218242;
        uint64_t v37 = v17;
        __int16 v38 = 2112;
        uint64_t v39 = v13;
        uint64_t v21 = "Persisted %lu deletedMemoryUUIDs to %@";
        id v22 = v20;
        os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_19B3C7000, v22, v23, v21, buf, 0x16u);
      }
    }
    else
    {
      id v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218242;
        uint64_t v37 = v17;
        __int16 v38 = 2112;
        uint64_t v39 = v13;
        uint64_t v21 = "Failed to persist %lu deletedMemoryUUIDs to %@";
        id v22 = v20;
        os_log_type_t v23 = OS_LOG_TYPE_ERROR;
        goto LABEL_12;
      }
    }

LABEL_14:
  }
  [v11 reset];

  objc_destroyWeak(&v29);
  _Block_object_dispose(&v31, 8);
  objc_destroyWeak(&location);

  return v12 == 0;
}

void __45__PLModelMigrator__deleteAllMemoriesInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 56) && [v3 cloudLocalState] == 1)
  {
    uint64_t v5 = [v4 uuid];
    if (v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      [WeakRetained addObject:v5];
    }
    else
    {
      WeakRetained = PLMigrationGetLog();
      if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR))
      {
        int v7 = 138412290;
        uint64_t v8 = v4;
        _os_log_impl(&dword_19B3C7000, WeakRetained, OS_LOG_TYPE_ERROR, "Memory %@ missing uuid", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  [*(id *)(a1 + 32) deleteObject:v4];
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

- (BOOL)_fixCustomRenderedValues:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  char v6 = (void *)MEMORY[0x19F38D3B0](v5);
  int v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixCustomRenderedValues:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  BOOL v10 = [v8 fetchRequestWithEntityName:v9];

  id v11 = (void *)MEMORY[0x1E4F28F60];
  id v12 = [(PLModelMigrator *)self _dateForFirstCRVSPhoto];
  id v13 = [(id)*MEMORY[0x1E4F44410] identifier];
  uint64_t v14 = [v11 predicateWithFormat:@"dateCreated >= %@ AND %K == %@ AND uniformTypeIdentifier == %@", v12, @"hdrType", &unk_1EEBEDF38, v13];
  [v10 setPredicate:v14];

  [v10 setFetchBatchSize:100];
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  int v28 = 0;
  int v15 = [v7 executeFetchRequest:v10 error:0];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  void v24[2] = __44__PLModelMigrator__fixCustomRenderedValues___block_invoke;
  void v24[3] = &unk_1E5866718;
  void v24[4] = &v25;
  id v16 = [v7 enumerateWithIncrementalSaveUsingObjects:v15 withBlock:v24];
  if (v16)
  {
    uint64_t v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      BOOL v30 = v16;
      id v18 = "Failed to fix custom rendered value: %@";
      int v19 = v17;
      os_log_type_t v20 = OS_LOG_TYPE_ERROR;
      uint32_t v21 = 12;
LABEL_6:
      _os_log_impl(&dword_19B3C7000, v19, v20, v18, buf, v21);
    }
  }
  else
  {
    uint64_t v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *((_DWORD *)v26 + 6);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v30) = v22;
      id v18 = "Fixed %d custom rendered value";
      int v19 = v17;
      os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
      uint32_t v21 = 8;
      goto LABEL_6;
    }
  }

  [v7 reset];
  _Block_object_dispose(&v25, 8);

  return v16 == 0;
}

void __44__PLModelMigrator__fixCustomRenderedValues___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 metadataFromMediaPropertiesOrOriginalResource];
  [v3 setDepthTypeFromMetadata:v4];

  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

- (id)_dateForFirstCRVSPhoto
{
  id v2 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  id v3 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v3 setYear:2016];
  [v3 setMonth:5];
  [v3 setDay:1];
  id v4 = [v2 dateFromComponents:v3];

  return v4;
}

- (BOOL)_flattenUnknownCustomRenderedValues:(id)a3
{
  v23[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  char v6 = (void *)MEMORY[0x19F38D3B0](v5);
  int v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _flattenUnknownCustomRenderedValues:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C038];
  uint64_t v9 = +[PLManagedAsset entityName];
  BOOL v10 = [v8 batchUpdateRequestWithEntityName:v9];

  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K == %@", @"hdrType", &unk_1EEBEDF20];
  [v10 setPredicate:v11];

  int v22 = @"hdrType";
  v23[0] = &unk_1EEBEDF38;
  id v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
  [v10 setPropertiesToUpdate:v12];

  [v10 setResultType:2];
  id v19 = 0;
  id v13 = [v7 executeRequest:v10 error:&v19];
  id v14 = v19;
  int v15 = PLMigrationGetLog();
  id v16 = v15;
  if (v13)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = [v13 result];
      *(_DWORD *)long long buf = 138412290;
      id v21 = v17;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Flattened assets successful with result %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v21 = v14;
    _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "Batch update request failed, flattening custom rendered values from 1 to 0, error: %@", buf, 0xCu);
  }

  [v7 reset];

  return v13 != 0;
}

- (BOOL)_populateNilOriginalFilename:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  char v6 = (void *)MEMORY[0x19F38D3B0](v5);
  int v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateNilOriginalFilename:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v19 = 0;
  os_log_type_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  BOOL v10 = [v8 fetchRequestWithEntityName:v9];

  [v10 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1A78];
  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"additionalAttributes.originalFilename == nil"];
  [v10 setPredicate:v11];

  id v12 = [v7 executeFetchRequest:v10 error:0];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __48__PLModelMigrator__populateNilOriginalFilename___block_invoke;
  v18[3] = &unk_1E5866718;
  void v18[4] = &v19;
  id v13 = [v7 enumerateWithIncrementalSaveUsingObjects:v12 withBlock:v18];
  if (v13)
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = [v13 userInfo];
      *(_DWORD *)long long buf = 138412546;
      long long v24 = v13;
      __int16 v25 = 2112;
      uint64_t v26 = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_populateNilOriginalFilename: failed: %@ %@", buf, 0x16u);
    }
  }
  else
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *((_DWORD *)v20 + 6);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v24) = v16;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Fixed %d originalFilenames", buf, 8u);
    }
  }

  _Block_object_dispose(&v19, 8);

  return v13 == 0;
}

void __48__PLModelMigrator__populateNilOriginalFilename___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 cloudAssetGUID];
  if (v3)
  {
    id v4 = NSString;
    uint64_t v5 = [v7 fileExtension];
    char v6 = [v4 stringWithFormat:@"%@.%@", v3, v5];

    [v7 setOriginalFilename:v6];
    [v7 persistMetadataToFilesystem];
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

- (BOOL)_populateNilOriginalFilenameOnMaster:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(PLModelMigrator *)self isCloudPhotoLibraryEnabled])
  {
    uint64_t v5 = pl_dispatch_once();
    char v6 = (void *)MEMORY[0x19F38D3B0](v5);
    id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateNilOriginalFilenameOnMaster:]", *MEMORY[0x1E4F1C1C0]);
    uint64_t v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
    uint64_t v9 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"originalFilename == nil"];
    [v8 setPredicate:v9];
    [v8 setFetchBatchSize:100];
    BOOL v10 = [v7 executeFetchRequest:v8 error:0];
    id v11 = [v7 enumerateWithIncrementalSaveUsingObjects:v10 withBlock:&__block_literal_global_1692];
    BOOL v12 = v11 == 0;
    id v13 = PLMigrationGetLog();
    id v14 = v13;
    if (v11)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v15 = [v11 userInfo];
        int v17 = 138412546;
        uint64_t v18 = (uint64_t)v11;
        __int16 v19 = 2112;
        os_log_type_t v20 = v15;
        _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_populateNilOriginalFilenameOnMaster: failed: %@ %@", (uint8_t *)&v17, 0x16u);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 134217984;
      uint64_t v18 = [v10 count];
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Fix %lu cloudMaster nil original filename", (uint8_t *)&v17, 0xCu);
    }
  }
  else
  {
    BOOL v12 = 1;
  }

  return v12;
}

void __56__PLModelMigrator__populateNilOriginalFilenameOnMaster___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 assets];
  id v4 = [v3 allObjects];
  id v6 = [v4 firstObject];

  uint64_t v5 = [v6 originalFilename];
  [v2 setOriginalFilename:v5];

  [v2 setCloudLocalState:0];
}

- (BOOL)_removeOldPersonMetadataInStore:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = (void *)MEMORY[0x1E4F1CB10];
  id v7 = [(PLModelMigrator *)self pathManager];
  uint64_t v8 = [v7 privateDirectoryWithSubType:4 createIfNeeded:1 error:0];
  uint64_t v9 = [v6 fileURLWithPath:v8 isDirectory:1];

  LOBYTE(v7) = +[PLPhotoLibrary removeFaceMetadataAtURL:v9 includingPeople:1];

  return (char)v7;
}

- (BOOL)_persistPersonsInStore:(id)a3
{
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _persistPersonsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = +[PLPerson fetchRequest];
  uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d", @"verifiedType", 0);
  [v8 setPredicate:v9];

  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __42__PLModelMigrator__persistPersonsInStore___block_invoke;
  v12[3] = &unk_1E586F978;
  v12[4] = self;
  id v10 = (id)[v7 enumerateObjectsFromFetchRequest:v8 count:0 usingDefaultBatchSizeWithBlock:v12];

  return 1;
}

void __42__PLModelMigrator__persistPersonsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 pathManager];
  [v3 persistMetadataToFileSystemWithPathManager:v4];
}

- (BOOL)_persistMemoriesInStore:(id)a3
{
  v14[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _persistMemoriesInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"Memory"];
  uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != %d", @"pendingState", 1);
  [v8 setPredicate:v9];

  v14[0] = @"curatedAssets";
  v14[1] = @"representativeAssets";
  void v14[2] = @"movieCuratedAssets";
  id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:3];
  [v8 setRelationshipKeyPathsForPrefetching:v10];

  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __43__PLModelMigrator__persistMemoriesInStore___block_invoke;
  v13[3] = &unk_1E58666F0;
  v13[4] = self;
  id v11 = (id)[v7 enumerateObjectsFromFetchRequest:v8 count:0 usingDefaultBatchSizeWithBlock:v13];
  [v7 reset];

  return 1;
}

void __43__PLModelMigrator__persistMemoriesInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 pathManager];
  [v3 persistMetadataToFileSystemWithPathManager:v4];
}

- (BOOL)_populateLatLongInAsset:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateLatLongInAsset:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v9 = +[PLManagedAsset entityName];
  id v10 = [v8 fetchRequestWithEntityName:v9];

  id v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"locationData != NULL"];
  [v10 setPredicate:v11];

  [v10 setFetchBatchSize:100];
  BOOL v12 = [v7 executeFetchRequest:v10 error:0];
  id v13 = [v7 enumerateWithIncrementalSaveUsingObjects:v12 withBlock:&__block_literal_global_1667];
  if (v13)
  {
    id v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = [v13 userInfo];
      int v17 = 138412546;
      uint64_t v18 = v13;
      __int16 v19 = 2112;
      os_log_type_t v20 = v15;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_populateLatLongInAsset failed: %@ %@", (uint8_t *)&v17, 0x16u);
    }
  }

  return v13 == 0;
}

void __43__PLModelMigrator__populateLatLongInAsset___block_invoke(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v2 = [v11 locationData];

  if (v2)
  {
    id v3 = [v11 locationData];
    id v4 = [v11 dateCreated];
    id v5 = +[PLManagedAsset newLocationFromLocationData:v3 timestampIfMissing:v4];

    id v6 = NSNumber;
    [v5 coordinate];
    id v7 = objc_msgSend(v6, "numberWithDouble:");
    [v11 setValue:v7 forKey:@"latitude"];

    uint64_t v8 = NSNumber;
    [v5 coordinate];
    id v10 = [v8 numberWithDouble:v9];
    [v11 setValue:v10 forKey:@"longitude"];
  }
}

- (BOOL)_populateRepresentativeAssets:(id)a3
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateRepresentativeAssets:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"Memory"];
  double v9 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"representativeAssets.@count = 0 && curatedAssets.@count > 0"];
  [v8 setPredicate:v9];

  v20[0] = @"curatedAssets";
  id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1];
  [v8 setRelationshipKeyPathsForPrefetching:v10];

  [v8 setFetchBatchSize:100];
  id v11 = [v7 executeFetchRequest:v8 error:0];
  BOOL v12 = [v7 enumerateWithIncrementalSaveUsingObjects:v11 withBlock:&__block_literal_global_1659];
  if (v12)
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = [v12 userInfo];
      int v16 = 138412546;
      int v17 = v12;
      __int16 v18 = 2112;
      __int16 v19 = v14;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "_fixupCloudResourcesInStore failed: %@ %@", (uint8_t *)&v16, 0x16u);
    }
  }

  return v12 == 0;
}

void __49__PLModelMigrator__populateRepresentativeAssets___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 curatedAssets];
  [v2 setValue:v3 forKey:@"representativeAssets"];
}

- (BOOL)_fixCloudMasterCloudLocalState:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixCloudMasterCloudLocalState:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudLocalState == %d", 0);
  [v7 setPredicate:v8];
  [v7 setFetchBatchSize:100];
  double v9 = [v6 executeFetchRequest:v7 error:0];
  id v10 = [v6 enumerateWithIncrementalSaveUsingObjects:v9 withBlock:&__block_literal_global_1647];
  id v11 = PLMigrationGetLog();
  BOOL v12 = v11;
  if (v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v13 = [v10 userInfo];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v16 = (uint64_t)v10;
      __int16 v17 = 2112;
      __int16 v18 = v13;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "_fixCloudMasterCloudLocalState: failed: %@ %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v16 = [v9 count];
    _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Fix %lu cloudMaster cloudLocalState", buf, 0xCu);
  }

  return v10 == 0;
}

void __50__PLModelMigrator__fixCloudMasterCloudLocalState___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v2 = [v5 assets];
  id v3 = [v2 allObjects];
  id v4 = [v3 firstObject];

  if (v4 && [v4 cloudLocalState]) {
    objc_msgSend(v5, "setCloudLocalState:", objc_msgSend(v4, "cloudLocalState"));
  }
}

- (BOOL)_resetUploadAttempts:(id)a3
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _resetUploadAttempts:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLManagedAsset entityName];
  double v9 = [v7 fetchRequestWithEntityName:v8];

  id v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"additionalAttributes.uploadAttempts > 0"];
  id v11 = (void *)MEMORY[0x1E4F28BA0];
  v25[0] = v10;
  BOOL v12 = +[PLManagedAsset predicateForSupportedAssetTypesForUpload];
  v25[1] = v12;
  id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:2];
  id v14 = [v11 andPredicateWithSubpredicates:v13];

  [v9 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1A60];
  [v9 setPredicate:v14];
  [v9 setFetchBatchSize:100];
  int v15 = [v6 executeFetchRequest:v9 error:0];
  uint64_t v16 = [v6 enumerateWithIncrementalSaveUsingObjects:v15 withBlock:&__block_literal_global_1645];
  __int16 v17 = PLMigrationGetLog();
  __int16 v18 = v17;
  if (v16)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = [v16 userInfo];
      int v21 = 138412546;
      uint64_t v22 = (uint64_t)v16;
      __int16 v23 = 2112;
      long long v24 = v19;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "_resetUploadAttempts: failed: %@ %@", (uint8_t *)&v21, 0x16u);
    }
  }
  else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 134217984;
    uint64_t v22 = [v15 count];
    _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Reset %lu upload attempts", (uint8_t *)&v21, 0xCu);
  }

  return v16 == 0;
}

void __40__PLModelMigrator__resetUploadAttempts___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 setUploadAttempts:0];
  [v2 setLastUploadAttemptDate:0];
  [v2 setCloudLocalState:0];
}

- (BOOL)_resetFailedCloudMasters:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _resetFailedCloudMasters:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudLocalState == %d", 2);
  [v7 setPredicate:v8];
  [v7 setFetchBatchSize:100];
  double v9 = [v6 executeFetchRequest:v7 error:0];
  id v10 = [v6 enumerateWithIncrementalSaveUsingObjects:v9 withBlock:&__block_literal_global_1637];
  id v11 = PLMigrationGetLog();
  BOOL v12 = v11;
  if (v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v13 = [v10 userInfo];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v16 = (uint64_t)v10;
      __int16 v17 = 2112;
      __int16 v18 = v13;
      _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "_resetFailedCloudMasters failed: %@ %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v16 = [v9 count];
    _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "Reset %lu failed masters", buf, 0xCu);
  }

  return v10 == 0;
}

uint64_t __44__PLModelMigrator__resetFailedCloudMasters___block_invoke(uint64_t a1, void *a2)
{
  return [a2 setCloudLocalState:0];
}

- (BOOL)_resetFailedAssets:(id)a3
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _resetFailedAssets:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLManagedAsset entityName];
  double v9 = [v7 fetchRequestWithEntityName:v8];

  id v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"cloudLocalState == %d", 2);
  id v11 = (void *)MEMORY[0x1E4F28BA0];
  v25[0] = v10;
  BOOL v12 = +[PLManagedAsset predicateForSupportedAssetTypesForUpload];
  v25[1] = v12;
  id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:2];
  id v14 = [v11 andPredicateWithSubpredicates:v13];

  [v9 setPredicate:v14];
  [v9 setFetchBatchSize:100];
  int v15 = [v6 executeFetchRequest:v9 error:0];
  uint64_t v16 = [v6 enumerateWithIncrementalSaveUsingObjects:v15 withBlock:&__block_literal_global_1634];
  __int16 v17 = PLMigrationGetLog();
  __int16 v18 = v17;
  if (v16)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = [v16 userInfo];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v22 = (uint64_t)v16;
      __int16 v23 = 2112;
      long long v24 = v19;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "_resetFailedAssets: failed: %@ %@", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v22 = [v15 count];
    _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Reset %lu failed assets", buf, 0xCu);
  }

  return v16 == 0;
}

void __38__PLModelMigrator__resetFailedAssets___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 setUploadAttempts:0];
  [v2 setLastUploadAttemptDate:0];
  [v2 setCloudLocalState:0];
}

- (BOOL)_fixVideoJPGPath:(id)a3
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v41 = (void *)MEMORY[0x19F38D3B0]();
  int v42 = v4;
  id v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixVideoJPGPath:]", *MEMORY[0x1E4F1C1C0]);
  id v6 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
  [v6 setFetchBatchSize:100];
  uint64_t v39 = v6;
  uint64_t v40 = v5;
  [v5 executeFetchRequest:v6 error:0];
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v46 = [obj countByEnumeratingWithState:&v66 objects:v77 count:16];
  if (v46)
  {
    uint64_t v45 = *(void *)v67;
    uint64_t v44 = *MEMORY[0x1E4F44448];
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v67 != v45) {
          objc_enumerationMutation(obj);
        }
        uint64_t v48 = v7;
        uint64_t v8 = *(void **)(*((void *)&v66 + 1) + 8 * v7);
        context = (void *)MEMORY[0x19F38D3B0]();
        double v9 = (void *)MEMORY[0x1E4F8CDF8];
        id v10 = [v8 uniformTypeIdentifier];
        id v11 = [v9 typeWithIdentifier:v10];
        int v12 = [v11 conformsToType:v44];

        if (v12)
        {
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          id v49 = [v8 assets];
          uint64_t v51 = [v49 countByEnumeratingWithState:&v62 objects:v76 count:16];
          if (v51)
          {
            uint64_t v50 = *(void *)v63;
            while (2)
            {
              uint64_t v13 = 0;
              do
              {
                if (*(void *)v63 != v50) {
                  objc_enumerationMutation(v49);
                }
                id v14 = *(void **)(*((void *)&v62 + 1) + 8 * v13);
                if ([v14 kind] != 1)
                {
                  uint64_t v31 = PLMigrationGetLog();
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v32 = [v14 uuid];
                    uint64_t v33 = [v8 scopedIdentifier];
                    *(_DWORD *)long long buf = 138412546;
                    id v73 = v32;
                    __int16 v74 = 2112;
                    char v75 = v33;
                    _os_log_impl(&dword_19B3C7000, v31, OS_LOG_TYPE_ERROR, "_fixVideoJPGPath: asset %@ kind is showing that this is not a video while the master %@ uti thinks it is.", buf, 0x16u);
                  }
                  goto LABEL_38;
                }
                uint64_t v52 = v13;
                long long v60 = 0u;
                long long v61 = 0u;
                long long v58 = 0u;
                long long v59 = 0u;
                uint64_t v15 = [&unk_1EEBF1A48 countByEnumeratingWithState:&v58 objects:v71 count:16];
                if (v15)
                {
                  uint64_t v16 = v15;
                  uint64_t v17 = *(void *)v59;
                  do
                  {
                    for (uint64_t i = 0; i != v16; ++i)
                    {
                      if (*(void *)v59 != v17) {
                        objc_enumerationMutation(&unk_1EEBF1A48);
                      }
                      uint64_t v19 = *(void **)(*((void *)&v58 + 1) + 8 * i);
                      uint64_t v20 = [v19 unsignedIntegerValue];
                      int v21 = [v14 uuid];
                      uint64_t v22 = +[PLCloudResource cloudResourceForResourceType:v20 forAssetUuid:v21 forCloudMaster:v8];

                      if (v22)
                      {
                        __int16 v23 = objc_msgSend(v14, "pathForCPLResourceType:adjusted:", objc_msgSend(v19, "unsignedIntegerValue"), 0);
                        [(PLModelMigrator *)self _fixPathForResource:v22 withPath:v23];
                      }
                    }
                    uint64_t v16 = [&unk_1EEBF1A48 countByEnumeratingWithState:&v58 objects:v71 count:16];
                  }
                  while (v16);
                }
                if ([v14 hasAdjustments])
                {
                  long long v56 = 0u;
                  long long v57 = 0u;
                  long long v54 = 0u;
                  long long v55 = 0u;
                  uint64_t v24 = [&unk_1EEBF1A48 countByEnumeratingWithState:&v54 objects:v70 count:16];
                  if (v24)
                  {
                    uint64_t v25 = v24;
                    uint64_t v26 = *(void *)v55;
                    do
                    {
                      for (uint64_t j = 0; j != v25; ++j)
                      {
                        if (*(void *)v55 != v26) {
                          objc_enumerationMutation(&unk_1EEBF1A48);
                        }
                        int v28 = *(void **)(*((void *)&v54 + 1) + 8 * j);
                        id v29 = +[PLCloudResource legacyCloudResourceForResourceType:forAsset:](PLCloudResource, "legacyCloudResourceForResourceType:forAsset:", [v28 unsignedIntegerValue], v14);
                        if (v29)
                        {
                          BOOL v30 = objc_msgSend(v14, "pathForCPLResourceType:adjusted:", objc_msgSend(v28, "unsignedIntegerValue"), 1);
                          [(PLModelMigrator *)self _fixPathForResource:v29 withPath:v30];
                        }
                      }
                      uint64_t v25 = [&unk_1EEBF1A48 countByEnumeratingWithState:&v54 objects:v70 count:16];
                    }
                    while (v25);
                  }
                }
                +[PLCloudResource repairCloudPlaceholderKindForVideoAsset:v14];
                uint64_t v13 = v52 + 1;
              }
              while (v52 + 1 != v51);
              uint64_t v51 = [v49 countByEnumeratingWithState:&v62 objects:v76 count:16];
              if (v51) {
                continue;
              }
              break;
            }
          }
LABEL_38:
        }
        uint64_t v7 = v48 + 1;
      }
      while (v48 + 1 != v46);
      uint64_t v46 = [obj countByEnumeratingWithState:&v66 objects:v77 count:16];
    }
    while (v46);
  }

  if ([v40 hasChanges])
  {
    id v53 = 0;
    char v34 = [v40 save:&v53];
    id v35 = v53;
    if ((v34 & 1) == 0)
    {
      id v36 = PLMigrationGetLog();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = [v35 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v73 = v35;
        __int16 v74 = 2112;
        char v75 = v37;
        _os_log_impl(&dword_19B3C7000, v36, OS_LOG_TYPE_ERROR, "_fixVideoJPGPath: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v34 = 1;
  }

  return v34;
}

- (void)_fixPathForResource:(id)a3 withPath:(id)a4
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (v7)
  {
    uint64_t v8 = [v6 filePath];
    double v9 = v8;
    if (v8)
    {
      if ([v8 isEqualToString:v7])
      {
LABEL_13:
        objc_msgSend(v6, "setIsLocallyAvailable:", -[PLModelMigrator _validateOrDeleteFileAtPath:forCloudResource:](self, "_validateOrDeleteFileAtPath:forCloudResource:", v7, v6));
        goto LABEL_14;
      }
      [v6 setFilePath:v7];
      id v10 = [MEMORY[0x1E4F28CB8] defaultManager];
      if ([v10 fileExistsAtPath:v9])
      {
        if (![(PLModelMigrator *)self _validateOrDeleteFileAtPath:v7 forCloudResource:v6])[v10 moveItemAtPath:v9 toPath:v7 error:0]; {
        [v10 removeItemAtPath:v9 error:0];
        }
      }
    }
    else
    {
      [v6 setFilePath:v7];
      id v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = 138412546;
        id v12 = v6;
        __int16 v13 = 2112;
        id v14 = v7;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "_fixVideoJPGPath: resource %@, found nil resourcePath, setting to corrected path %@", (uint8_t *)&v11, 0x16u);
      }
    }

    goto LABEL_13;
  }
  double v9 = PLMigrationGetLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v11 = 138412290;
    id v12 = v6;
    _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_ERROR, "_fixVideoJPGPath: can't correct cloudResource %@ path to nil", (uint8_t *)&v11, 0xCu);
  }
LABEL_14:
}

- (BOOL)_validateOrDeleteFileAtPath:(id)a3 forCloudResource:(id)a4
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  if ([v8 fileExistsAtPath:v6])
  {
    double v9 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v6 isDirectory:0];
    id v17 = 0;
    int v10 = [v9 getResourceValue:&v17 forKey:*MEMORY[0x1E4F1C5F8] error:0];
    id v11 = v17;
    id v12 = v11;
    if (v10)
    {
      uint64_t v13 = [v11 integerValue];
      if (v13 == [v7 fileSize])
      {
        BOOL v14 = 1;
LABEL_10:

        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v15 = PLMigrationGetLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        id v19 = v7;
        __int16 v20 = 2112;
        id v21 = v6;
        _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_fixVideoJPGPath: resource %@ can't get the fileSize for file at path %@", buf, 0x16u);
      }
    }
    [(PLModelMigrator *)self _removeFileAt:v6 forResource:v7];
    BOOL v14 = 0;
    goto LABEL_10;
  }
  BOOL v14 = 0;
LABEL_11:

  return v14;
}

- (void)_removeFileAt:(id)a3 forResource:(id)a4
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  if (v5)
  {
    id v7 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v8 = [v7 removeItemAtPath:v5 error:0];
    double v9 = PLMigrationGetLog();
    int v10 = v9;
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138412546;
        id v15 = v6;
        __int16 v16 = 2112;
        id v17 = v5;
        id v11 = "_fixVideoJPGPath: resource %@ removing file at: %@";
        id v12 = v10;
        os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
LABEL_9:
        _os_log_impl(&dword_19B3C7000, v12, v13, v11, (uint8_t *)&v14, 0x16u);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412546;
      id v15 = v6;
      __int16 v16 = 2112;
      id v17 = v5;
      id v11 = "_fixVideoJPGPath: resource %@, can't delete resource from %@";
      id v12 = v10;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      goto LABEL_9;
    }

    goto LABEL_11;
  }
  id v7 = PLMigrationGetLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    int v14 = 138412290;
    id v15 = v6;
    _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_ERROR, "_fixVideoJPGPath: resource %@, can't delete resource from nil path", (uint8_t *)&v14, 0xCu);
  }
LABEL_11:
}

- (BOOL)_fixNonDuplicatedAssets:(id)a3 adjusted:(BOOL)a4
{
  BOOL v4 = a4;
  v71[2] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v6, "-[PLModelMigrator _fixNonDuplicatedAssets:adjusted:]", *MEMORY[0x1E4F1C1C0]);
  int v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
  uint64_t v9 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(SUBQUERY(assets, $att, $att.adjustmentsState != %d).@count != 0)", 0];
  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(SUBQUERY(assets, $att, $att.adjustmentsState == %d).@count == 0)", 0];
  id v11 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"assets.@count == 1"];
  os_log_type_t v13 = (void *)v12;
  long long v55 = (void *)v10;
  long long v56 = (void *)v9;
  if (v4) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v10;
  }
  v71[0] = v12;
  v71[1] = v14;
  id v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v71 count:2];
  uint64_t v16 = [v11 andPredicateWithSubpredicates:v15];

  long long v54 = (void *)v16;
  [v8 setPredicate:v16];
  long long v57 = v8;
  long long v58 = v7;
  [v7 executeFetchRequest:v8 error:0];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v17 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v63;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v63 != v19) {
          objc_enumerationMutation(obj);
        }
        id v21 = *(void **)(*((void *)&v62 + 1) + 8 * i);
        uint64_t v22 = (void *)MEMORY[0x19F38D3B0]();
        __int16 v23 = [v21 assets];
        uint64_t v24 = [v23 anyObject];

        uint64_t v25 = +[PLCloudResource cloudResourcesForResourceType:5 forCloudMaster:v21];
        uint64_t v26 = [v25 firstObject];

        if (v26)
        {
          uint64_t v27 = [v24 uuid];
          [v26 setAssetUuid:v27];
        }
        int v28 = +[PLCloudResource cloudResourcesForResourceType:4 forCloudMaster:v21];
        id v29 = [v28 firstObject];

        if (v29)
        {
          BOOL v30 = [v24 uuid];
          [v29 setAssetUuid:v30];
        }
        uint64_t v31 = +[PLCloudResource cloudResourcesForResourceType:3 forCloudMaster:v21];
        uint64_t v32 = [v31 firstObject];

        if (v32)
        {
          uint64_t v33 = [v24 uuid];
          [v32 setAssetUuid:v33];
        }
        char v34 = +[PLCloudResource cloudResourcesForResourceType:2 forCloudMaster:v21];
        id v35 = [v34 firstObject];

        if (v35)
        {
          id v36 = [v24 uuid];
          [v35 setAssetUuid:v36];
        }
        uint64_t v37 = +[PLCloudResource cloudResourcesForResourceType:7 forCloudMaster:v21];
        __int16 v38 = [v37 firstObject];

        if (v38)
        {
          uint64_t v39 = [v24 uuid];
          [v38 setAssetUuid:v39];
        }
        uint64_t v40 = +[PLCloudResource cloudResourcesForResourceType:6 forCloudMaster:v21];
        uint64_t v41 = [v40 firstObject];

        if (v41)
        {
          int v42 = [v24 uuid];
          [v41 setAssetUuid:v42];
        }
        uint64_t v43 = +[PLCloudResource cloudResourcesForResourceType:1 forCloudMaster:v21];
        uint64_t v44 = [v43 firstObject];

        if (v44)
        {
          uint64_t v45 = [v24 uuid];
          [v44 setAssetUuid:v45];
        }
        uint64_t v46 = +[PLCloudResource cloudResourcesForResourceType:17 forCloudMaster:v21];
        uint64_t v47 = [v46 firstObject];

        if (v47)
        {
          uint64_t v48 = [v24 uuid];
          [v47 setAssetUuid:v48];
        }
      }
      uint64_t v18 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
    }
    while (v18);
  }

  if ([v58 hasChanges])
  {
    id v61 = 0;
    char v49 = [v58 save:&v61];
    id v50 = v61;
    if ((v49 & 1) == 0)
    {
      uint64_t v51 = PLMigrationGetLog();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        uint64_t v52 = [v50 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v67 = v50;
        __int16 v68 = 2112;
        long long v69 = v52;
        _os_log_impl(&dword_19B3C7000, v51, OS_LOG_TYPE_ERROR, "_fixNonAdjustedNonDuplicatedAssets: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v49 = 1;
  }

  return v49;
}

- (BOOL)_fixDuplicatedAssets:(id)a3
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v42 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v46 = self;
  uint64_t v43 = v4;
  id v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixDuplicatedAssets:]", *MEMORY[0x1E4F1C1C0]);
  id v6 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudMaster"];
  [v6 setFetchBatchSize:100];
  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"assets.@count > 1"];
  [v6 setPredicate:v7];

  uint64_t v41 = v6;
  [v5 executeFetchRequest:v6 error:0];
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v38 = [v8 countByEnumeratingWithState:&v52 objects:v61 count:16];
  if (v38)
  {
    uint64_t v9 = *(void *)v53;
    uint64_t v40 = v8;
    uint64_t v37 = *(void *)v53;
    uint64_t v45 = v5;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v53 != v9) {
          objc_enumerationMutation(v8);
        }
        uint64_t v39 = v10;
        id v11 = *(void **)(*((void *)&v52 + 1) + 8 * v10);
        context = (void *)MEMORY[0x19F38D3B0]();
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        uint64_t v12 = [v11 assets];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v48 objects:v60 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v49;
          while (2)
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v49 != v15) {
                objc_enumerationMutation(v12);
              }
              uint64_t v17 = *(void **)(*((void *)&v48 + 1) + 8 * i);
              uint64_t v18 = [v17 uuid];
              uint64_t v19 = +[PLCloudResource cloudResourceForResourceType:1 forAssetUuid:v18 forCloudMaster:v11];

              if (v19
                || ([v17 cloudAssetGUID],
                    __int16 v20 = objc_claimAutoreleasedReturnValue(),
                    v20,
                    !v20))
              {
              }
              else
              {
                if ([v17 isCloudPhotoLibraryAsset])
                {
                  id v21 = [v17 cloudAssetGUID];
                  uint64_t v22 = [v17 photoDataCPLResourceDestinationDirectoryCreateIfNeededWithIdentifier:v21];

                  __int16 v23 = [(PLModelMigrator *)v46 pathManager];
                  uint64_t v24 = [v23 assetAbbreviatedMetadataDirectoryForDirectory:v22 type:31 bundleScope:0];
                  [v17 setDirectory:v24];

                  uint64_t v25 = [v17 uniformTypeIdentifier];
                  uint64_t v26 = +[PLManagedAsset preferredFileExtensionForType:v25];

                  uint64_t v27 = NSString;
                  [v17 cloudAssetGUID];
                  v29 = int v28 = v12;
                  BOOL v30 = [v27 stringWithFormat:@"%@.%@", v29, v26];

                  uint64_t v12 = v28;
                  [v17 setFilename:v30];

                  id v5 = v45;
                }
                if (!+[PLCloudResource legacyCreateNewResourcesIn:v11 inManagedObjectContext:v5 forAsset:v17])
                {

                  BOOL v33 = 0;
                  id v8 = v40;
                  id v32 = v40;
                  goto LABEL_25;
                }
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v48 objects:v60 count:16];
            if (v14) {
              continue;
            }
            break;
          }
        }

        uint64_t v10 = v39 + 1;
        id v8 = v40;
        uint64_t v9 = v37;
      }
      while (v39 + 1 != v38);
      uint64_t v38 = [v40 countByEnumeratingWithState:&v52 objects:v61 count:16];
    }
    while (v38);
  }

  if ([v5 hasChanges])
  {
    id v47 = 0;
    char v31 = [v5 save:&v47];
    id v32 = v47;
    if (v31)
    {
      BOOL v33 = 1;
    }
    else
    {
      id v35 = PLMigrationGetLog();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        id v36 = [v32 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v57 = v32;
        __int16 v58 = 2112;
        long long v59 = v36;
        _os_log_impl(&dword_19B3C7000, v35, OS_LOG_TYPE_ERROR, "_fixDuplicatedAssets: failed: %@ %@", buf, 0x16u);
      }
      BOOL v33 = 0;
    }
LABEL_25:
  }
  else
  {
    BOOL v33 = 1;
  }

  return v33;
}

- (BOOL)_fixVisibleBurstAsset:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  context = (void *)MEMORY[0x19F38D3B0]();
  BOOL v33 = v4;
  id v5 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixVisibleBurstAsset:]", *MEMORY[0x1E4F1C1C0]);
  id v6 = (void *)MEMORY[0x1E4F1C0D0];
  id v7 = +[PLManagedAsset entityName];
  id v8 = [v6 fetchRequestWithEntityName:v7];

  [v8 setFetchBatchSize:100];
  uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"avalancheUUID != NULL AND visibilityState = %d AND trashedState = %d", 0, 0);
  [v8 setPredicate:v9];

  uint64_t v10 = v5;
  char v31 = v8;
  [v5 executeFetchRequest:v8 error:0];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    int v35 = 0;
    uint64_t v13 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v38 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        uint64_t v16 = (void *)MEMORY[0x19F38D3B0]();
        uint64_t v17 = [v15 avalancheUUID];
        char v18 = [v15 avalanchePickType];
        if ((v18 & 8) == 0)
        {
          char v19 = v18;
          __int16 v20 = (void *)MEMORY[0x1E4F1C0D0];
          id v21 = +[PLManagedAsset entityName];
          uint64_t v22 = [v20 fetchRequestWithEntityName:v21];

          [v22 setFetchBatchSize:100];
          __int16 v23 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"avalancheUUID == %@ AND trashedState != %d", v17, 0];
          [v22 setPredicate:v23];

          uint64_t v24 = [v10 executeFetchRequest:v22 error:0];
          if ([v24 count])
          {
            [v15 setAvalanchePickType:v19 & 4 | 8u];
            [v15 setCloudLocalState:0];
            ++v35;
            if ([v15 complete]) {
              [v15 persistMetadataToFilesystem];
            }
          }
        }
      }
      uint64_t v12 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v12);
  }
  else
  {
    int v35 = 0;
  }

  if ([v10 hasChanges])
  {
    id v36 = 0;
    char v25 = [v10 save:&v36];
    id v26 = v36;
    if ((v25 & 1) == 0)
    {
      uint64_t v27 = PLMigrationGetLog();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v28 = [v26 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v42 = v26;
        __int16 v43 = 2112;
        uint64_t v44 = v28;
        _os_log_impl(&dword_19B3C7000, v27, OS_LOG_TYPE_ERROR, "_fixVisibleBurstAsset: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v25 = 1;
  }
  id v29 = PLMigrationGetLog();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v42) = v35;
    _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_DEFAULT, "_fixVisibleBurstAsset: fixed %d burst assets", buf, 8u);
  }

  return v25;
}

- (BOOL)_fixAdjustedAssets:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v24 = 0;
  char v25 = &v24;
  uint64_t v26 = 0x2020000000;
  char v27 = 1;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixAdjustedAssets:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = +[PLManagedAsset predicateForAdjustedAssetsWithKeyPathToAsset:0];
  [v9 setPredicate:v10];

  uint64_t v11 = [MEMORY[0x1E4F28CB8] defaultManager];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __38__PLModelMigrator__fixAdjustedAssets___block_invoke;
  void v21[3] = &unk_1E586F878;
  id v12 = v11;
  id v22 = v12;
  __int16 v23 = &v24;
  id v13 = (id)[v6 enumerateObjectsFromFetchRequest:v9 count:0 usingDefaultBatchSizeWithBlock:v21];
  if (*((unsigned char *)v25 + 24) && [v6 hasChanges])
  {
    id v20 = 0;
    char v14 = [v6 save:&v20];
    id v15 = v20;
    *((unsigned char *)v25 + 24) = v14;
    if ((v14 & 1) == 0)
    {
      uint64_t v16 = PLMigrationGetLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = [v15 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v29 = v15;
        __int16 v30 = 2112;
        char v31 = v17;
        _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "_fixAdjustedAssets: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  BOOL v18 = *((unsigned char *)v25 + 24) != 0;
  _Block_object_dispose(&v24, 8);

  return v18;
}

void __38__PLModelMigrator__fixAdjustedAssets___block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  [v5 resources];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v31 = [v6 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v31)
  {
    uint64_t v7 = *(void *)v35;
    id v29 = v6;
    uint64_t v30 = *(void *)v35;
    id v28 = v5;
    do
    {
      for (uint64_t i = 0; i != v31; ++i)
      {
        if (*(void *)v35 != v7) {
          objc_enumerationMutation(v6);
        }
        uint64_t v9 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v10 = (void *)MEMORY[0x19F38D3B0]();
        uint64_t v11 = [v5 uuid];
        [v9 setAssetUuid:v11];

        id v12 = [v9 filePath];
        id v13 = objc_msgSend(v5, "pathForCPLResourceType:adjusted:", (int)objc_msgSend(v9, "type"), 1);
        LOBYTE(v11) = [v12 isEqualToString:v13];
        uint64_t v14 = [*(id *)(a1 + 32) fileExistsAtPath:v12 isDirectory:0];
        if (v11)
        {
          [v9 setIsLocallyAvailable:v14];
          goto LABEL_21;
        }
        if (v14)
        {
          id v15 = objc_msgSend(v13, "stringByDeletingLastPathComponent", v14);
          uint64_t v16 = *(void **)(a1 + 32);
          id v33 = 0;
          char v17 = [v16 createDirectoryIfNeededAtPath:v15 error:&v33];
          id v18 = v33;
          if (v17)
          {
            char v19 = *(void **)(a1 + 32);
            id v32 = v18;
            char v20 = [v19 moveItemAtPath:v12 toPath:v13 error:&v32];
            id v21 = v32;

            if (v20)
            {
              uint64_t v22 = 1;
LABEL_19:
              id v5 = v28;

              id v6 = v29;
              goto LABEL_20;
            }
            __int16 v23 = PLMigrationGetLog();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              char v25 = [v21 userInfo];
              *(_DWORD *)long long buf = 138412546;
              id v39 = v21;
              __int16 v40 = 2112;
              uint64_t v41 = v25;
              _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "_fixAdjustedAssets: failed: %@ %@", buf, 0x16u);
            }
            id v18 = v21;
          }
          else
          {
            __int16 v23 = PLMigrationGetLog();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              uint64_t v24 = [v18 userInfo];
              *(_DWORD *)long long buf = 138412546;
              id v39 = v18;
              __int16 v40 = 2112;
              uint64_t v41 = v24;
              _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "_fixAdjustedAssets: failed: %@ %@", buf, 0x16u);
            }
          }

          uint64_t v22 = 0;
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
          id v21 = v18;
          goto LABEL_19;
        }
        uint64_t v22 = 0;
LABEL_20:
        [v9 setIsLocallyAvailable:v22];
        [v9 setFilePath:v13];
        uint64_t v7 = v30;
LABEL_21:
        int v26 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

        if (!v26) {
          goto LABEL_24;
        }
      }
      uint64_t v31 = [v6 countByEnumeratingWithState:&v34 objects:v42 count:16];
    }
    while (v31);
  }
LABEL_24:

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a4 = 1;
  }
}

- (BOOL)_migrateLegacySlomoAdjustmentsInStore:(id)a3 fromLegacySLMFormat:(BOOL)a4
{
  BOOL v52 = a4;
  v70[2] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v6);
  uint64_t v7 = self;
  long long v51 = v5;
  id v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _migrateLegacySlomoAdjustmentsInStore:fromLegacySLMFormat:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v9 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v10 = +[PLManagedAsset entityName];
  uint64_t v11 = [v9 fetchRequestWithEntityName:v10];

  uint64_t v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"complete != 0"];
  id v13 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %d", @"kindSubtype");
  v70[0] = v14;
  id v15 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForMigrateLegacyVideoAdjustmentsExclusions"), 0);
  v70[1] = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v70 count:2];
  uint64_t v17 = [v13 andPredicateWithSubpredicates:v16];

  id v18 = (void *)MEMORY[0x1E4F28BA0];
  uint64_t v46 = (void *)v17;
  id v47 = (void *)v12;
  v69[0] = v17;
  v69[1] = v12;
  char v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v69 count:2];
  uint64_t v20 = [v18 andPredicateWithSubpredicates:v19];

  uint64_t v45 = (void *)v20;
  [v11 setPredicate:v20];
  [v11 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1A30];
  long long v48 = v11;
  long long v49 = v8;
  [v8 executeFetchRequest:v11 error:0];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v21 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
  if (!v21)
  {
    uint64_t v56 = 0;
    long long v53 = 0;
    long long v54 = 0;
    goto LABEL_28;
  }
  uint64_t v22 = v21;
  uint64_t v56 = 0;
  long long v53 = 0;
  long long v54 = 0;
  uint64_t v23 = *(void *)v59;
  do
  {
    for (uint64_t i = 0; i != v22; ++i)
    {
      if (*(void *)v59 != v23) {
        objc_enumerationMutation(obj);
      }
      char v25 = *(void **)(*((void *)&v58 + 1) + 8 * i);
      int v26 = (void *)MEMORY[0x19F38D3B0]();
      int v27 = [(PLModelMigrator *)v7 _migrateLegacySlomoAdjustmentsForAsset:v25];
      if (!v27)
      {
        ++v56;
        goto LABEL_24;
      }
      int v28 = v27;
      id v29 = [v25 pathForAdjustmentFile];
      uint64_t v30 = [MEMORY[0x1E4F28CB8] defaultManager];
      char v31 = [v30 fileExistsAtPath:v29];

      if (v31)
      {
        if (v28 == 2)
        {
          ++v54;
        }
        else if (v28 == 1)
        {
          ++v53;
        }
        goto LABEL_23;
      }
      id v32 = PLMigrationGetLog();
      BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
      if (v28 == 1)
      {
        if (v52)
        {
          if (v33)
          {
            long long v34 = [v25 pathForLegacySlalomRegionsArchive];
            *(_DWORD *)long long buf = 138412546;
            id v63 = v34;
            __int16 v64 = 2112;
            long long v65 = v29;
            _os_log_impl(&dword_19B3C7000, v32, OS_LOG_TYPE_ERROR, "_migrateLegacySlomoAdjustmentsInStore failed to migrate %@ to %@", buf, 0x16u);
          }
          goto LABEL_22;
        }
        if (v33)
        {
          *(_DWORD *)long long buf = 138412290;
          id v63 = v29;
          long long v35 = v32;
          long long v36 = "_migrateLegacySlomoAdjustmentsInStore failed to migrate %@ to updated format";
          goto LABEL_21;
        }
      }
      else if (v33)
      {
        *(_DWORD *)long long buf = 138412290;
        id v63 = v29;
        long long v35 = v32;
        long long v36 = "_migrateLegacySlomoAdjustmentsInStore failed to create default adjustments at %@";
LABEL_21:
        _os_log_impl(&dword_19B3C7000, v35, OS_LOG_TYPE_ERROR, v36, buf, 0xCu);
      }
LABEL_22:

LABEL_23:
LABEL_24:
    }
    uint64_t v22 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
  }
  while (v22);
LABEL_28:

  long long v37 = PLMigrationGetLog();
  BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
  if (v52)
  {
    if (v38)
    {
      *(_DWORD *)long long buf = 134218496;
      id v63 = v53;
      __int16 v64 = 2048;
      long long v65 = v54;
      __int16 v66 = 2048;
      uint64_t v67 = v56;
      id v39 = "Slo-mo assets: migrated %ld SLM files, created defaults for %ld files, and did nothing for %ld";
      goto LABEL_33;
    }
  }
  else if (v38)
  {
    *(_DWORD *)long long buf = 134218496;
    id v63 = v53;
    __int16 v64 = 2048;
    long long v65 = v54;
    __int16 v66 = 2048;
    uint64_t v67 = v56;
    id v39 = "Slo-mo assets: migrated %ld adjustments files, created defaults for %ld files, and did nothing for %ld";
LABEL_33:
    _os_log_impl(&dword_19B3C7000, v37, OS_LOG_TYPE_DEFAULT, v39, buf, 0x20u);
  }

  if ([v49 hasChanges])
  {
    id v57 = 0;
    char v40 = [v49 save:&v57];
    id v41 = v57;
    if ((v40 & 1) == 0)
    {
      id v42 = PLMigrationGetLog();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = [v41 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v63 = v41;
        __int16 v64 = 2112;
        long long v65 = v43;
        _os_log_impl(&dword_19B3C7000, v42, OS_LOG_TYPE_ERROR, "_migrateLegacySlomoAdjustmentsInStore failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v40 = 1;
  }

  return v40;
}

- (int)_migrateLegacySlomoAdjustmentsForAsset:(id)a3
{
  id v3 = a3;
  if ([v3 migrateLegacyVideoAdjustments])
  {
    int v4 = 1;
  }
  else if ([v3 setDefaultAdjustmentsIfNecessaryWithMainFileMetadata:0])
  {
    int v4 = 2;
  }
  else
  {
    int v4 = 0;
  }

  return v4;
}

- (BOOL)_performChangesOnBatchFetchedObjects:(id)a3 inMOC:(id)a4 batchSize:(unint64_t)a5 objectHandler:(id)a6 error:(id *)a7
{
  id v11 = a3;
  id v12 = a4;
  id v13 = (void (**)(id, void *, unint64_t))a6;
  uint64_t v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 1;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __92__PLModelMigrator__performChangesOnBatchFetchedObjects_inMOC_batchSize_objectHandler_error___block_invoke;
  void v22[3] = &unk_1E5873ED8;
  id v21 = v12;
  id v23 = v21;
  uint64_t v24 = &v26;
  char v25 = a7;
  uint64_t v14 = (void (**)(void))MEMORY[0x19F38D650](v22);
  unint64_t v15 = 0;
  do
  {
    if (v15 >= [v11 count]) {
      break;
    }
    uint64_t v16 = (void *)MEMORY[0x19F38D3B0]();
    uint64_t v17 = [v11 objectAtIndexedSubscript:v15];
    v13[2](v13, v17, v15);
    if (a5 && !((v15 + 1) % a5))
    {
      v14[2](v14);
      [v21 reset];
    }
    int v18 = *((unsigned __int8 *)v27 + 24);

    ++v15;
  }
  while (v18);
  if (*((unsigned char *)v27 + 24))
  {
    v14[2](v14);
    BOOL v19 = *((unsigned char *)v27 + 24) != 0;
  }
  else
  {
    BOOL v19 = 0;
  }

  _Block_object_dispose(&v26, 8);
  return v19;
}

uint64_t __92__PLModelMigrator__performChangesOnBatchFetchedObjects_inMOC_batchSize_objectHandler_error___block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) hasChanges];
  if (result)
  {
    uint64_t result = [*(id *)(a1 + 32) save:*(void *)(a1 + 48)];
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    if (*(unsigned char *)(v3 + 24)) {
      char v4 = result;
    }
    else {
      char v4 = 0;
    }
    *(unsigned char *)(v3 + 24) = v4;
  }
  return result;
}

- (BOOL)_fixCorruptedOrientationsInStore:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _fixCorruptedOrientationsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"(additionalAttributes.unmanagedAdjustment != nil) AND (complete != 0)"];
  uint64_t v9 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v10 = +[PLManagedAsset entityName];
  id v11 = [v9 fetchRequestWithEntityName:v10];

  [v11 setFetchBatchSize:100];
  [v11 setPredicate:v8];
  [v11 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1A18];
  id v12 = [v7 executeFetchRequest:v11 error:0];
  id v13 = PLMigrationGetLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v23 = [v12 count];
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Found %lu assets with managed adjustments to check orientation.", buf, 0xCu);
  }

  id v21 = 0;
  BOOL v14 = [(PLModelMigrator *)self _performChangesOnBatchFetchedObjects:v12 inMOC:v7 batchSize:100 objectHandler:&__block_literal_global_1584 error:&v21];
  id v15 = v21;
  if (!v14)
  {
    uint64_t v16 = PLMigrationGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = NSStringFromSelector(a2);
      [v15 userInfo];
      int v18 = v20 = v6;
      *(_DWORD *)long long buf = 138412802;
      uint64_t v23 = (uint64_t)v17;
      __int16 v24 = 2112;
      id v25 = v15;
      __int16 v26 = 2112;
      int v27 = v18;
      _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);

      uint64_t v6 = v20;
    }
  }

  return v14;
}

void __52__PLModelMigrator__fixCorruptedOrientationsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v2 = [v10 mainFileURL];
  CFDataRef v3 = (const __CFData *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithContentsOfURL:v2 options:1 error:0];
  if ([(__CFData *)v3 length])
  {
    char v4 = CGImageSourceCreateWithData(v3, 0);
    CFDictionaryRef v5 = CGImageSourceCopyPropertiesAtIndex(v4, 0, 0);
    uint64_t v6 = [(__CFDictionary *)v5 objectForKeyedSubscript:*MEMORY[0x1E4F2FCA0]];
    uint64_t v7 = [v6 shortValue];
    int v8 = [v10 originalOrientation];
    if (v7) {
      BOOL v9 = v8 == v7;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      [v10 setOriginalOrientation:v7];
    }
    CFRelease(v4);
  }
}

- (BOOL)_persistMetadataToFileSystemForAlbum:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v4 isValidForPersistence]) {
        goto LABEL_4;
      }
LABEL_7:
      BOOL v6 = 0;
      goto LABEL_8;
    }
  }
  if (([v4 isValidForPersistence] & 1) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  CFDictionaryRef v5 = [(PLModelMigrator *)self pathManager];
  [v4 persistMetadataToFileSystemWithPathManager:v5];

  BOOL v6 = 1;
LABEL_8:

  return v6;
}

- (BOOL)_forceAlbumMetadataToDiskInStore:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    id v25 = [MEMORY[0x1E4F28B00] currentHandler];
    __int16 v26 = NSStringFromSelector(a2);
    [v25 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 6470, @"%@ can only be called from assetsd", v26 object file lineNumber description];
  }
  uint64_t v6 = pl_dispatch_once();
  uint64_t v7 = (void *)MEMORY[0x19F38D3B0](v6);
  int v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _forceAlbumMetadataToDiskInStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v9 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  id v35 = 0;
  id v10 = [v8 executeFetchRequest:v9 error:&v35];
  id v11 = v35;
  if (v10)
  {
    if ([v10 count])
    {
      id v27 = v11;
      uint64_t v28 = v8;
      char v29 = v7;
      id v30 = v5;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v12 = v10;
      uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v38 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        id v15 = 0;
        uint64_t v16 = *(void *)v32;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v32 != v16) {
              objc_enumerationMutation(v12);
            }
            uint64_t v18 = *(void *)(*((void *)&v31 + 1) + 8 * i);
            BOOL v19 = (void *)MEMORY[0x19F38D3B0]();
            v15 += [(PLModelMigrator *)self _persistMetadataToFileSystemForAlbum:v18];
          }
          uint64_t v14 = [v12 countByEnumeratingWithState:&v31 objects:v38 count:16];
        }
        while (v14);
      }
      else
      {
        id v15 = 0;
      }

      uint64_t v7 = v29;
      id v5 = v30;
      id v11 = v27;
      int v8 = v28;
    }
    else
    {
      id v15 = 0;
    }
    uint64_t v20 = PLMigrationGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      id v37 = v15;
      id v21 = "Persisted %lu albums and folders.";
      uint64_t v22 = v20;
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v20 = PLMigrationGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v37 = v11;
      id v21 = "Ignoring _forceAlbumMetadataToDiskInStore: fetch failure: %@";
      uint64_t v22 = v20;
      os_log_type_t v23 = OS_LOG_TYPE_ERROR;
LABEL_20:
      _os_log_impl(&dword_19B3C7000, v22, v23, v21, buf, 0xCu);
    }
  }

  return 1;
}

- (BOOL)_setupRootFolderInStore:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    uint64_t v16 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v17 = NSStringFromSelector(a2);
    [v16 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 6440, @"%@ can only be called from assetsd", v17 object file lineNumber description];
  }
  uint64_t v6 = pl_dispatch_once();
  uint64_t v7 = (void *)MEMORY[0x19F38D3B0](v6);
  int v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _setupRootFolderInStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v9 = +[PLManagedAlbumList albumListInManagedObjectContext:v8];
  id v10 = +[PLGenericAlbum albumWithKind:3999 inManagedObjectContext:v8];
  +[PLManagedAlbumList pushChangesFromAlbumContainer:v9 toAlbumContainer:v10];
  if ([v8 hasChanges])
  {
    id v18 = 0;
    char v11 = [v8 save:&v18];
    id v12 = v18;
    if ((v11 & 1) == 0)
    {
      uint64_t v13 = PLMigrationGetLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = [v12 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v14;
        _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "_setupRootFolderInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v11 = 1;
  }

  return v11;
}

- (BOOL)_fixDuplicatedRootFolderAndOrphanedAlbumsInStore:(id)a3
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = pl_dispatch_once();
  uint64_t v7 = (void *)MEMORY[0x19F38D3B0](v6);
  uint64_t v72 = self;
  int v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _fixDuplicatedRootFolderAndOrphanedAlbumsInStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v9 = (void *)MEMORY[0x1E4F1C0D0];
  id v10 = +[PLManagedFolder entityName];
  char v11 = [v9 fetchRequestWithEntityName:v10];

  id v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"kind = %d", 3999);
  [v11 setPredicate:v12];

  id v87 = 0;
  uint64_t v13 = [v8 executeFetchRequest:v11 error:&v87];
  id v14 = v87;
  if ((unint64_t)[v13 count] >= 2)
  {
    __int16 v74 = v14;
    char v75 = v8;
    long long v71 = v11;
    id v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = [v13 count];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v89 = v16;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Found %lu root folders, attempting repair", buf, 0xCu);
    }
    aSelector = a2;

    uint64_t v17 = [MEMORY[0x1E4F1CA48] array];
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v70 = v13;
    id v18 = v13;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v83 objects:v95 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      __int16 v68 = v7;
      id v69 = v5;
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = *(void *)v84;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v84 != v23) {
            objc_enumerationMutation(v18);
          }
          id v25 = *(void **)(*((void *)&v83 + 1) + 8 * i);
          __int16 v26 = [v25 albums];
          unint64_t v27 = [v26 count];

          if (v27 > v21)
          {
            uint64_t v28 = v25;

            unint64_t v21 = v27;
            uint64_t v22 = v28;
          }
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v83 objects:v95 count:16];
      }
      while (v20);

      if (!v21)
      {
        uint64_t v7 = v68;
        id v5 = v69;
        goto LABEL_34;
      }
      char v29 = [v22 albums];
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      id v30 = v18;
      uint64_t v31 = [v30 countByEnumeratingWithState:&v79 objects:v94 count:16];
      if (v31)
      {
        uint64_t v32 = v31;
        uint64_t v33 = *(void *)v80;
        do
        {
          for (uint64_t j = 0; j != v32; ++j)
          {
            if (*(void *)v80 != v33) {
              objc_enumerationMutation(v30);
            }
            id v35 = *(NSObject **)(*((void *)&v79 + 1) + 8 * j);
            if (v35 != v22)
            {
              long long v36 = [*(id *)(*((void *)&v79 + 1) + 8 * j) albums];
              uint64_t v37 = [v36 count];

              if (v37)
              {
                BOOL v38 = [v35 albums];
                uint64_t v39 = [v38 array];
                [v29 addObjectsFromArray:v39];
              }
              [v35 delete];
              [v17 addObject:v35];
            }
          }
          uint64_t v32 = [v30 countByEnumeratingWithState:&v79 objects:v94 count:16];
        }
        while (v32);
      }

      uint64_t v7 = v68;
      id v5 = v69;
    }
    else
    {
      uint64_t v22 = 0;
      char v29 = v18;
    }

LABEL_34:
    uint64_t v43 = (void *)MEMORY[0x1E4F1CA80];
    uint64_t v44 = +[PLManagedAlbum validKindsForPersistence];
    uint64_t v45 = [v43 setWithArray:v44];

    uint64_t v46 = +[PLManagedFolder validKindsForPersistence];
    [v45 addObjectsFromArray:v46];

    [v45 removeObject:&unk_1EEBEDEA8];
    [v45 addObject:&unk_1EEBEDEC0];
    if ([v45 count])
    {
      id v47 = (void *)MEMORY[0x1E4F1C0D0];
      long long v48 = +[PLGenericAlbum entityName];
      long long v49 = [v47 fetchRequestWithEntityName:v48];

      long long v50 = (void *)MEMORY[0x1E4F28F60];
      long long v51 = [v45 allObjects];
      BOOL v52 = [v50 predicateWithFormat:@"%K IN %@ AND %K = NULL", @"kind", v51, @"parentFolder", aSelector];
      [v49 setPredicate:v52];

      id v78 = v74;
      long long v53 = [v75 executeFetchRequest:v49 error:&v78];
      id v54 = v78;

      if ([v53 count])
      {
        long long v55 = PLMigrationGetLog();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v56 = [v53 count];
          *(_DWORD *)long long buf = 134217984;
          uint64_t v89 = v56;
          _os_log_impl(&dword_19B3C7000, v55, OS_LOG_TYPE_DEFAULT, "Found %lu orpaned albums/folders, adding to root folder", buf, 0xCu);
        }

        id v57 = [v22 albums];
        [v57 addObjectsFromArray:v53];
      }
      __int16 v74 = v54;
    }
    if ([v75 hasChanges])
    {
      long long v58 = +[PLManagedAlbumList albumListInManagedObjectContext:v75];
      +[PLManagedAlbumList pushChangesFromAlbumContainer:v22 toAlbumContainer:v58];
      long long v59 = [(PLModelMigrator *)v72 pathManager];
      [v22 persistMetadataToFileSystemWithPathManager:v59];

      v77[0] = MEMORY[0x1E4F143A8];
      v77[1] = 3221225472;
      v77[2] = __68__PLModelMigrator__fixDuplicatedRootFolderAndOrphanedAlbumsInStore___block_invoke;
      v77[3] = &unk_1E58758A8;
      v77[4] = v72;
      [v17 enumerateObjectsUsingBlock:v77];
      id v76 = 0;
      char v40 = [v75 save:&v76];
      id v60 = v76;
      long long v61 = PLMigrationGetLog();
      uint64_t v62 = v61;
      if (v40)
      {
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v63 = [v17 count];
          *(_DWORD *)long long buf = 134217984;
          uint64_t v89 = v63;
          _os_log_impl(&dword_19B3C7000, v62, OS_LOG_TYPE_DEFAULT, "Deleted %lu duplicated root folders, attempting repair", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        id v73 = NSStringFromSelector(aSelector);
        uint64_t v64 = [v60 userInfo];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v89 = (uint64_t)v73;
        __int16 v90 = 2112;
        id v91 = v60;
        __int16 v92 = 2112;
        uint64_t v93 = v64;
        long long v65 = (void *)v64;
        _os_log_impl(&dword_19B3C7000, v62, OS_LOG_TYPE_ERROR, "%{public}@: failed: %@ %@", buf, 0x20u);
      }
    }
    else
    {
      char v40 = 1;
    }

    id v14 = v74;
    int v8 = v75;
    uint64_t v13 = v70;
    char v11 = v71;
LABEL_49:

    goto LABEL_50;
  }
  if (!v13)
  {
    id v41 = a2;
    uint64_t v22 = PLMigrationGetLog();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v42 = NSStringFromSelector(v41);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v89 = (uint64_t)v42;
      __int16 v90 = 2114;
      id v91 = v14;
      _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "%{public}@: failed: %{public}@", buf, 0x16u);
    }
    char v40 = 1;
    goto LABEL_49;
  }
  char v40 = 1;
LABEL_50:

  return v40;
}

void __68__PLModelMigrator__fixDuplicatedRootFolderAndOrphanedAlbumsInStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 pathManager];
  [v3 removePersistedFileSystemDataWithPathManager:v4];
}

- (BOOL)_removeInvalidAdjustmentResourceDataInStore:(id)a3
{
  void v26[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _removeInvalidAdjustmentResourceDataInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  int v8 = +[PLManagedAsset entityName];
  BOOL v9 = [v7 fetchRequestWithEntityName:v8];

  id v10 = (void *)MEMORY[0x1E4F28BA0];
  char v11 = +[PLManagedAsset predicateForAdjustedAssetsWithKeyPathToAsset:0];
  v26[0] = v11;
  id v12 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SUBQUERY(resources, $r, $r.type == %d).@count > 1", 13];
  v26[1] = v12;
  uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:2];
  id v14 = [v10 andPredicateWithSubpredicates:v13];
  [v9 setPredicate:v14];

  id v15 = (id)[v6 enumerateObjectsFromFetchRequest:v9 count:0 usingDefaultBatchSizeWithBlock:&__block_literal_global_1564];
  if ([v6 hasChanges])
  {
    id v21 = 0;
    char v16 = [v6 save:&v21];
    id v17 = v21;
    if ((v16 & 1) == 0)
    {
      id v18 = PLMigrationGetLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = [v17 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v23 = v17;
        __int16 v24 = 2112;
        id v25 = v19;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "_removeInvalidAdjustmentResourceDataInStore: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v16 = 1;
  }

  return v16;
}

void __63__PLModelMigrator__removeInvalidAdjustmentResourceDataInStore___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = [v2 resources];
  id v4 = [v2 syncedAdjustmentFingerprint];
  id v5 = [MEMORY[0x1E4F1CA80] set];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (!v7)
  {

    goto LABEL_19;
  }
  uint64_t v8 = v7;
  id v17 = v2;
  char v9 = 0;
  uint64_t v10 = *(void *)v19;
  do
  {
    uint64_t v11 = 0;
    do
    {
      if (*(void *)v19 != v10) {
        objc_enumerationMutation(v6);
      }
      id v12 = *(void **)(*((void *)&v18 + 1) + 8 * v11);
      uint64_t v13 = (void *)MEMORY[0x19F38D3B0]();
      if ([v12 type] != 13) {
        goto LABEL_11;
      }
      if (v9)
      {
        char v9 = 1;
        goto LABEL_12;
      }
      id v14 = [v12 fingerprint];
      int v15 = [v14 isEqualToString:v4];

      if (v15)
      {
        char v9 = 1;
LABEL_11:
        [v5 addObject:v12];
        goto LABEL_12;
      }
      char v9 = 0;
LABEL_12:
      ++v11;
    }
    while (v8 != v11);
    uint64_t v16 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
    uint64_t v8 = v16;
  }
  while (v16);

  id v2 = v17;
  if (v9) {
    [v17 setResources:v5];
  }
LABEL_19:
}

- (BOOL)_migrateAssetLocationData:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _migrateAssetLocationData:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLManagedAsset entityName];
  char v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"locationData != nil"];
  [v9 setPredicate:v10];

  [v6 executeFetchRequest:v9 error:0];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        id v17 = (void *)MEMORY[0x19F38D3B0]();
        [v16 migrateLocationDataIfNeededAfterOTARestore:0];
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v13);
  }

  if ([v6 hasChanges])
  {
    id v24 = 0;
    char v18 = [v6 save:&v24];
    id v19 = v24;
    if (v18)
    {
      long long v20 = PLMomentsGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = [v11 count];
        *(_DWORD *)long long buf = 134217984;
        uint64_t v30 = v21;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "Successfully migrated location data for %lu assets.", buf, 0xCu);
      }
    }
    else
    {
      long long v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = [v19 userInfo];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v30 = (uint64_t)v19;
        __int16 v31 = 2112;
        uint64_t v32 = v22;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "_migrateAssetLocationData failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v18 = 1;
  }

  return v18;
}

- (BOOL)_addLocationHashesToAssets:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _addLocationHashesToAssets:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v8 = +[PLManagedAsset entityName];
  char v9 = [v7 fetchRequestWithEntityName:v8];

  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"locationData != nil"];
  [v9 setPredicate:v10];

  [v9 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1A00];
  char v18 = 0;
  id v11 = (id)[v6 enumerateObjectsFromFetchRequest:v9 count:&v18 usingDefaultBatchSizeWithBlock:&__block_literal_global_1559];
  if ([v6 hasChanges])
  {
    id v17 = 0;
    char v12 = [v6 save:&v17];
    id v13 = v17;
    if (v12)
    {
      uint64_t v14 = PLMomentsGetLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        id v20 = v18;
        _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "Successfully generated location hashes for %lu assets.", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v14 = PLMigrationGetLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v15 = [v13 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v20 = v13;
        __int16 v21 = 2112;
        uint64_t v22 = v15;
        _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "_addLocationHashesToAssets failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v12 = 1;
  }

  return v12;
}

void __46__PLModelMigrator__addLocationHashesToAssets___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = [v2 location];
  uint64_t v4 = objc_msgSend(v3, "pl_locationHash");
  id v5 = PLMomentsGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    [v3 coordinate];
    uint64_t v7 = v6;
    [v3 coordinate];
    v9[0] = 67109633;
    v9[1] = v4;
    __int16 v10 = 2049;
    uint64_t v11 = v7;
    __int16 v12 = 2049;
    uint64_t v13 = v8;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_DEBUG, "Generating hash (%d) for asset location (%{private}f, %{private}f)", (uint8_t *)v9, 0x1Cu);
  }

  [v2 setLocationHash:v4];
}

- (BOOL)_addUUIDsToCollectionLists:(id)a3 skipMomentLists:(BOOL)a4
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    uint64_t v34 = [MEMORY[0x1E4F28B00] currentHandler];
    id v35 = NSStringFromSelector(a2);
    [v34 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 6191, @"%@ can only be called from assetsd", v35 object file lineNumber description];
  }
  uint64_t v7 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v7);
  BOOL v38 = v6;
  uint64_t v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v6, "-[PLModelMigrator _addUUIDsToCollectionLists:skipMomentLists:]", *MEMORY[0x1E4F1C1C0]);
  char v9 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"AlbumList"];
  __int16 v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"uuid == nil"];
  [v9 setPredicate:v10];

  uint64_t v39 = v8;
  [v8 executeFetchRequest:v9 error:0];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = [v11 countByEnumeratingWithState:&v45 objects:v54 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v46;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v46 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        id v17 = (void *)MEMORY[0x19F38D3B0]();
        char v18 = [MEMORY[0x1E4F8BA08] UUIDString];
        [v16 setValue:v18 forKey:@"uuid"];
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v45 objects:v54 count:16];
    }
    while (v13);
  }

  if (!a4)
  {
    id v19 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"MomentList"];
    id v20 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"uuid == nil"];
    [v19 setPredicate:v20];

    [v39 executeFetchRequest:v19 error:0];
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = [v21 countByEnumeratingWithState:&v41 objects:v53 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v42;
      do
      {
        for (uint64_t j = 0; j != v23; ++j)
        {
          if (*(void *)v42 != v24) {
            objc_enumerationMutation(v21);
          }
          long long v26 = *(void **)(*((void *)&v41 + 1) + 8 * j);
          long long v27 = (void *)MEMORY[0x19F38D3B0]();
          long long v28 = [MEMORY[0x1E4F8BA08] UUIDString];
          [v26 setValue:v28 forKey:@"uuid"];
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v41 objects:v53 count:16];
      }
      while (v23);
    }
  }
  if ([v39 hasChanges])
  {
    id v40 = 0;
    char v29 = [v39 save:&v40];
    id v30 = v40;
    if ((v29 & 1) == 0)
    {
      __int16 v31 = PLMigrationGetLog();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = [v30 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v50 = v30;
        __int16 v51 = 2112;
        BOOL v52 = v32;
        _os_log_impl(&dword_19B3C7000, v31, OS_LOG_TYPE_ERROR, "_addUUIDsToCollectionLists:skipMomentLists: failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v29 = 1;
  }

  return v29;
}

- (BOOL)_regenerateMonthHighlightTitlesWithStore:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _regenerateMonthHighlightTitlesWithStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v7 = [PLMomentGenerationDataManager alloc];
  uint64_t v8 = [(PLModelMigrator *)self pathManager];
  char v9 = [(PLMomentGenerationDataManager *)v7 initWithManagedObjectContext:v6 pathManagerForLightweightMigration:v8];

  __int16 v10 = [(PLMomentGenerationDataManager *)v9 generator];
  id v15 = 0;
  char v11 = [v10 regenerateMonthHighlightTitlesWithManager:v9 error:&v15];
  id v12 = v15;

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v17 = v12;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Unable to regenerate month highlight titles, %@", buf, 0xCu);
    }
  }
  return v11;
}

- (BOOL)_rebuildMomentsInStore:(id)a3 deleteExistingMoments:(BOOL)a4 targetedAssetOIDs:(id)a5
{
  BOOL v6 = a4;
  id v8 = a3;
  id v9 = a5;
  if (PLPlatformMomentsSupported())
  {
    __int16 v10 = (void *)MEMORY[0x19F38D3B0]();
    char v11 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v8, "-[PLModelMigrator _rebuildMomentsInStore:deleteExistingMoments:targetedAssetOIDs:]", *MEMORY[0x1E4F1C1C0]);
    id v12 = objc_opt_class();
    uint64_t v13 = [(PLModelMigrator *)self pathManager];
    char v14 = [v12 rebuildMomentsInContext:v11 pathManager:v13 deleteExistingMoments:v6 targetedAssetOIDs:v9];
  }
  else
  {
    char v14 = 1;
  }

  return v14;
}

- (BOOL)rebuildAllMomentsInStore:(id)a3 deleteExistingMoments:(BOOL)a4
{
  return [(PLModelMigrator *)self _rebuildMomentsInStore:a3 deleteExistingMoments:a4 targetedAssetOIDs:0];
}

- (BOOL)rebuildTargetedMomentsInStore:(id)a3 targetedAssetOIDs:(id)a4
{
  return [(PLModelMigrator *)self _rebuildMomentsInStore:a3 deleteExistingMoments:0 targetedAssetOIDs:a4];
}

- (BOOL)_fixupSyncedAssetAttributesInStore:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v5 = 1;
  id v6 = [(PLModelMigrator *)self _newSyncedPropertiesByAssetUUIDs:1];
  if ([v6 count])
  {
    uint64_t v7 = pl_dispatch_once();
    id v8 = (void *)MEMORY[0x19F38D3B0](v7);
    id v9 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupSyncedAssetAttributesInStore:]", *MEMORY[0x1E4F1C1C0]);
    __int16 v10 = (void *)MEMORY[0x1E4F1C0D0];
    char v11 = +[PLManagedAsset entityName];
    id v12 = [v10 fetchRequestWithEntityName:v11];

    char v5 = 1;
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForFinderSyncedAsset"), 1);
    [v12 setPredicate:v13];

    [v12 setPropertiesToFetch:&unk_1EEBF19D0];
    [v12 setRelationshipKeyPathsForPrefetching:&unk_1EEBF19E8];
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = __54__PLModelMigrator__fixupSyncedAssetAttributesInStore___block_invoke;
    void v20[3] = &unk_1E5875CB8;
    id v21 = v6;
    uint64_t v22 = self;
    id v14 = (id)[v9 enumerateObjectsFromFetchRequest:v12 count:0 usingDefaultBatchSizeWithBlock:v20];
    if ([v9 hasChanges])
    {
      id v19 = 0;
      char v5 = [v9 save:&v19];
      id v15 = v19;
      if ((v5 & 1) == 0)
      {
        uint64_t v16 = PLMigrationGetLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          id v17 = [v15 userInfo];
          *(_DWORD *)long long buf = 138412546;
          id v24 = v15;
          __int16 v25 = 2112;
          long long v26 = v17;
          _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "_fixupSyncedAssetAttributesInStore failed: %@ %@", buf, 0x16u);
        }
      }
    }
  }

  return v5;
}

void __54__PLModelMigrator__fixupSyncedAssetAttributesInStore___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = [v3 uuid];
  id v4 = [*(id *)(a1 + 32) objectForKey:v5];
  [*(id *)(a1 + 40) _applySyncedProperties:v4 toAsset:v3];
}

- (BOOL)_cleanupInvalidAlbumsAndFoldersInStore:(id)a3
{
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _cleanupInvalidAlbumsAndFoldersInStore:]", *MEMORY[0x1E4F1C1C0]);
  +[PLGenericAlbum removeInvalidAlbumsAndFoldersInManagedObjectContext:v7];

  return 1;
}

- (BOOL)_fixupCloudResourcesInStore:(id)a3
{
  v29[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupCloudResourcesInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  id v9 = +[PLManagedAsset entityName];
  __int16 v10 = [v8 fetchRequestWithEntityName:v9];

  char v11 = (void *)MEMORY[0x1E4F28BA0];
  id v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCameraAsset"), 1);
  v29[0] = v12;
  uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != nil", @"cloudAssetGUID");
  v29[1] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:2];
  id v15 = [v11 andPredicateWithSubpredicates:v14];
  [v10 setPredicate:v15];

  [v10 setRelationshipKeyPathsForPrefetching:&unk_1EEBF19B8];
  uint64_t v16 = [v7 executeFetchRequest:v10 error:0];
  id v17 = [MEMORY[0x1E4F28CB8] defaultManager];
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  void v23[2] = __47__PLModelMigrator__fixupCloudResourcesInStore___block_invoke;
  void v23[3] = &unk_1E5872990;
  id v24 = v17;
  id v18 = v17;
  id v19 = [v7 enumerateWithIncrementalSaveUsingObjects:v16 withBlock:v23];
  if (v19)
  {
    id v20 = PLMigrationGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v21 = [v19 userInfo];
      *(_DWORD *)long long buf = 138412546;
      long long v26 = v19;
      __int16 v27 = 2112;
      long long v28 = v21;
      _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "_fixupCloudResourcesInStore failed: %@ %@", buf, 0x16u);
    }
  }

  return v19 == 0;
}

void __47__PLModelMigrator__fixupCloudResourcesInStore___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 pathForOriginalFile];
  if (([*(id *)(a1 + 32) fileExistsAtPath:v3] & 1) == 0
    && ![v4 cloudPlaceholderKind])
  {
    [v4 setCloudPlaceholderKind:3];
  }
}

- (BOOL)_fixupSharedStreamOrientationsInStore:(id)a3
{
  void v36[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  id v6 = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupSharedStreamOrientationsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  id v9 = +[PLManagedAsset entityName];
  __int16 v10 = [v8 fetchRequestWithEntityName:v9];

  char v11 = (void *)MEMORY[0x1E4F28BA0];
  id v12 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForIncludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForCloudSharedAsset"), 1);
  v36[0] = v12;
  uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != 1", @"additionalAttributes.originalOrientation");
  v36[1] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:2];
  id v15 = [v11 andPredicateWithSubpredicates:v14];
  [v10 setPredicate:v15];

  [v10 setRelationshipKeyPathsForPrefetching:&unk_1EEBF19A0];
  uint64_t v16 = [v7 executeFetchRequest:v10 error:0];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v28 != v19) {
          objc_enumerationMutation(v16);
        }
        [*(id *)(*((void *)&v27 + 1) + 8 * i) setOriginalOrientation:1];
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v18);
  }
  if ([v7 hasChanges])
  {
    id v26 = 0;
    char v21 = [v7 save:&v26];
    id v22 = v26;
    if ((v21 & 1) == 0)
    {
      uint64_t v23 = PLMigrationGetLog();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = [v22 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v32 = v22;
        __int16 v33 = 2112;
        uint64_t v34 = v24;
        _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "_fixupSharedStreamOrientationsInStore failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v21 = 1;
  }

  return v21;
}

- (BOOL)_populateFaceRegionsInStore:(id)a3
{
  v32[2] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _populateFaceRegionsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = (void *)MEMORY[0x1E4F1C0D0];
  id v9 = +[PLManagedAsset entityName];
  __int16 v10 = [v8 fetchRequestWithEntityName:v9];

  [v10 setFetchBatchSize:100];
  char v11 = (void *)MEMORY[0x1E4F28BA0];
  id v12 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", @"kind", 0);
  v32[0] = v12;
  uint64_t v13 = objc_msgSend(MEMORY[0x1E4F8BA10], "predicateForExcludeMask:useIndex:", objc_msgSend(MEMORY[0x1E4F8BA10], "maskForPopulateFaceRegionsExclusions"), 1);
  v32[1] = v13;
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:2];
  id v15 = [v11 andPredicateWithSubpredicates:v14];
  [v10 setPredicate:v15];

  [v10 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1988];
  uint64_t v16 = [v7 executeFetchRequest:v10 error:0];
  uint64_t v17 = PLMigrationGetLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v27 = [v16 count];
    _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "Found %lu assets to populate face regions.", buf, 0xCu);
  }

  id v24 = 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = __47__PLModelMigrator__populateFaceRegionsInStore___block_invoke;
  void v25[3] = &unk_1E5866688;
  uint8_t v25[4] = self;
  BOOL v18 = [(PLModelMigrator *)self _performChangesOnBatchFetchedObjects:v16 inMOC:v7 batchSize:100 objectHandler:v25 error:&v24];
  id v19 = v24;
  if (!v18)
  {
    id v20 = PLMigrationGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      char v21 = NSStringFromSelector(a2);
      id v22 = [v19 userInfo];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v27 = (uint64_t)v21;
      __int16 v28 = 2112;
      id v29 = v19;
      __int16 v30 = 2112;
      __int16 v31 = v22;
      _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
    }
  }

  return v18;
}

uint64_t __47__PLModelMigrator__populateFaceRegionsInStore___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _populateFaceRegionsForAsset:a2];
}

- (void)_populateFaceRegionsForAsset:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [v3 mainFileURL];
  if (v4)
  {
    CFDataRef v5 = (const __CFData *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithContentsOfURL:v4 options:1 error:0];
  }
  else
  {
    id v6 = PLMigrationGetLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [v3 uuid];
      int v11 = 138412546;
      id v12 = v7;
      __int16 v13 = 1024;
      int v14 = [v3 savedAssetType];
      _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEFAULT, "Found asset %@ of type %hd with nil mainFileURL, skipping", (uint8_t *)&v11, 0x12u);
    }
    CFDataRef v5 = 0;
  }
  if ([(__CFData *)v5 length])
  {
    id v8 = CGImageSourceCreateWithData(v5, 0);
    CGImageMetadataRef v9 = CGImageSourceCopyMetadataAtIndex(v8, 0, 0);
    if (v9)
    {
      CGImageMetadataRef v10 = v9;
      [v3 setFaceRegionsFromImageMetadata:v9];
      CFRelease(v10);
    }
    CFRelease(v8);
  }
}

- (BOOL)_populateVideoCpFieldsInStagedStore:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = pl_dispatch_once();
  uint64_t v7 = (void *)MEMORY[0x19F38D3B0](v6);
  id v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _populateVideoCpFieldsInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  CGImageMetadataRef v9 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"AdditionalAssetAttributes"];
  CGImageMetadataRef v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"videoCpVisibilityState != 0 OR videoCpDurationValue != 0"];
  [v9 setPredicate:v10];

  [v9 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1970];
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  int v11 = [v8 executeFetchRequest:v9 error:0];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __55__PLModelMigrator__populateVideoCpFieldsInStagedStore___block_invoke;
  v18[3] = &unk_1E5866660;
  id v19 = @"videoCpDurationValue";
  id v20 = @"videoCpVisibilityState";
  char v21 = &v22;
  id v12 = [v8 enumerateWithIncrementalSaveUsingObjects:v11 shouldRefreshAfterSave:1 withBlock:v18];
  if (v12)
  {
    __int16 v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = NSStringFromSelector(a2);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v27 = v14;
      __int16 v28 = 2112;
      id v29 = v12;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "%@ failed to update videoCp fields assets: %@", buf, 0x16u);
    }
  }
  else
  {
    __int16 v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = NSStringFromSelector(a2);
      uint64_t v16 = v23[3];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v27 = v15;
      __int16 v28 = 1024;
      LODWORD(v29) = v16;
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "%@ updated videpCp fields on %d assets", buf, 0x12u);
    }
  }

  _Block_object_dispose(&v22, 8);

  return v12 == 0;
}

void __55__PLModelMigrator__populateVideoCpFieldsInStagedStore___block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v7 = [v4 valueForKey:v3];
  id v5 = [v4 valueForKey:a1[5]];
  uint64_t v6 = [v4 valueForKey:@"asset"];

  [v6 setValue:v7 forKey:a1[4]];
  [v6 setValue:v5 forKey:a1[5]];
  ++*(void *)(*(void *)(a1[6] + 8) + 24);
}

- (BOOL)_populateAlbumAndFolderOrderKeysInStagedStore:(id)a3
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  long long v108 = v4;
  uint64_t v118 = *MEMORY[0x1E4F1C1C0];
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateAlbumAndFolderOrderKeysInStagedStore:]");
  id v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"Album"];
  CGImageMetadataRef v9 = +[PLManagedAlbum albumSupportsAssetOrderKeysPredicate];
  [v8 setPredicate:v9];

  [v8 setRelationshipKeyPathsForPrefetching:&unk_1EEBF1940];
  CGImageMetadataRef v10 = [v7 executeFetchRequest:v8 error:0];
  if (![v10 count]) {
    goto LABEL_10;
  }
  objc_initWeak(&location, self);
  int v11 = [PLRelationshipOrderKeyManager alloc];
  v155[0] = MEMORY[0x1E4F143A8];
  v155[1] = 3221225472;
  v155[2] = __65__PLModelMigrator__populateAlbumAndFolderOrderKeysInStagedStore___block_invoke;
  v155[3] = &unk_1E5866638;
  objc_copyWeak(&v157, &location);
  id v156 = v108;
  id v12 = [(PLRelationshipOrderKeyManager *)v11 initWithGenerateContextBlock:v155];
  [(PLRelationshipOrderKeyManager *)v12 migration_updateLegacyOrderValuesForAssetsInAlbums:v10 managedObjectContext:v7];
  if (![v7 hasChanges])
  {

    objc_destroyWeak(&v157);
    objc_destroyWeak(&location);
LABEL_10:

    goto LABEL_11;
  }
  id v154 = 0;
  char v13 = [v7 save:&v154];
  int v14 = v154;
  if ((v13 & 1) == 0)
  {
    uint64_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      char v116 = v13;
      NSStringFromSelector(a2);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v17 = [v14 userInfo];
      *(_DWORD *)long long buf = 138412802;
      id v167 = v16;
      __int16 v168 = 2112;
      v169 = v14;
      __int16 v170 = 2112;
      long long v114 = (void *)v17;
      uint64_t v171 = v17;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "%@ failed to update order values for album assets: %@ %@", buf, 0x20u);
      id v111 = v16;

      char v13 = v116;
    }
  }
  objc_destroyWeak(&v157);
  objc_destroyWeak(&location);

  if ((v13 & 1) == 0)
  {
    BOOL v18 = 0;
    goto LABEL_76;
  }
LABEL_11:
  long long v101 = (void *)MEMORY[0x19F38D3B0]();
  long long v117 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v108, "-[PLModelMigrator _populateAlbumAndFolderOrderKeysInStagedStore:]", v118);
  context = (void *)MEMORY[0x19F38D3B0]();
  long long v115 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  id v19 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"kind == %d OR kind == %d", 4000, 3999);
  [v115 setPredicate:v19];

  id v153 = 0;
  id v20 = [v117 executeFetchRequest:v115 error:&v153];
  long long v107 = v153;
  if (!v20)
  {
    id v73 = PLMigrationGetLog();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      __int16 v74 = NSStringFromSelector(a2);
      char v75 = [v107 userInfo];
      *(_DWORD *)long long buf = 138412802;
      id v167 = v74;
      __int16 v168 = 2112;
      v169 = v107;
      __int16 v170 = 2112;
      uint64_t v171 = (uint64_t)v75;
      _os_log_impl(&dword_19B3C7000, v73, OS_LOG_TYPE_ERROR, "%@ failed to fetch folder: %@ %@", buf, 0x20u);
    }
    goto LABEL_74;
  }
  objc_initWeak((id *)buf, self);
  char v21 = [PLRelationshipOrderKeyManager alloc];
  v150[0] = MEMORY[0x1E4F143A8];
  v150[1] = 3221225472;
  v150[2] = __65__PLModelMigrator__populateAlbumAndFolderOrderKeysInStagedStore___block_invoke_1463;
  v150[3] = &unk_1E5866638;
  objc_copyWeak(&v152, (id *)buf);
  id v22 = v108;
  id v151 = v22;
  uint64_t v23 = [(PLRelationshipOrderKeyManager *)v21 initWithGenerateContextBlock:v150];
  long long v148 = 0u;
  long long v149 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  id v24 = v20;
  uint64_t v25 = [v24 countByEnumeratingWithState:&v146 objects:v165 count:16];
  if (v25)
  {
    uint64_t v26 = *(void *)v147;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v147 != v26) {
          objc_enumerationMutation(v24);
        }
        uint64_t v28 = *(void *)(*((void *)&v146 + 1) + 8 * i);
        id v29 = (void *)MEMORY[0x19F38D3B0]();
        [(PLRelationshipOrderKeyManager *)v23 migration_updateLegacyChildCollectionOrderKeysInFolder:v28];
      }
      uint64_t v25 = [v24 countByEnumeratingWithState:&v146 objects:v165 count:16];
    }
    while (v25);
  }

  objc_destroyWeak(&v152);
  objc_destroyWeak((id *)buf);
  if ([v117 hasChanges])
  {
    id v145 = 0;
    char v30 = [v117 save:&v145];
    __int16 v31 = v145;
    id v32 = v31;
    if ((v30 & 1) == 0)
    {
      long long v79 = PLMigrationGetLog();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        long long v80 = NSStringFromSelector(a2);
        long long v81 = [v32 userInfo];
        *(_DWORD *)long long buf = 138412802;
        id v167 = v80;
        __int16 v168 = 2112;
        v169 = v32;
        __int16 v170 = 2112;
        uint64_t v171 = (uint64_t)v81;
        _os_log_impl(&dword_19B3C7000, v79, OS_LOG_TYPE_ERROR, "%@ failed to fixup child order keys: %@ %@", buf, 0x20u);
      }
      goto LABEL_74;
    }
  }

  long long v101 = (void *)MEMORY[0x19F38D3B0]();
  long long v117 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v22, "-[PLModelMigrator _populateAlbumAndFolderOrderKeysInStagedStore:]", v118);
  context = (void *)MEMORY[0x19F38D3B0]();
  long long v115 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  [v115 setIncludesPropertyValues:0];
  [v115 setResultType:1];
  __int16 v33 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"kind == %@ OR kind == %@", &unk_1EEBEDE90, &unk_1EEBEDEA8];
  [v115 setPredicate:v33];

  id v144 = 0;
  uint64_t v34 = [v117 executeFetchRequest:v115 error:&v144];
  long long v107 = v144;
  if (!v34)
  {
    id v76 = PLMigrationGetLog();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      id v77 = NSStringFromSelector(a2);
      id v78 = [v107 userInfo];
      *(_DWORD *)long long buf = 138412802;
      id v167 = v77;
      __int16 v168 = 2112;
      v169 = v107;
      __int16 v170 = 2112;
      uint64_t v171 = (uint64_t)v78;
      _os_log_impl(&dword_19B3C7000, v76, OS_LOG_TYPE_ERROR, "%@ failed to fetch folders: %@ %@", buf, 0x20u);
    }
    [v117 reset];
LABEL_74:
    BOOL v18 = 0;
    goto LABEL_75;
  }
  long long v142 = 0u;
  long long v143 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  obuint64_t j = v34;
  long long v105 = (void *)[obj countByEnumeratingWithState:&v140 objects:v164 count:16];
  if (!v105) {
    goto LABEL_39;
  }
  uint64_t v102 = *(void *)v141;
  while (2)
  {
    for (uint64_t j = 0; j != v105; uint64_t j = (char *)j + 1)
    {
      if (*(void *)v141 != v102) {
        objc_enumerationMutation(obj);
      }
      uint64_t v36 = *(void *)(*((void *)&v140 + 1) + 8 * (void)j);
      id v112 = (void *)MEMORY[0x19F38D3B0]();
      uint64_t v119 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
      [v119 setPropertiesToFetch:&unk_1EEBF1958];
      uint64_t v37 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"parentFolder = %@", v36];
      [v119 setPredicate:v37];

      BOOL v38 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"albumToFolderOrderKey" ascending:1];
      v163 = v38;
      uint64_t v39 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v163 count:1];
      [v119 setSortDescriptors:v39];

      id v139 = 0;
      id v40 = [v117 executeFetchRequest:v119 error:&v139];
      id v109 = v139;
      long long v41 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", 2 * objc_msgSend(v40, "count"));
      long long v137 = 0u;
      long long v138 = 0u;
      long long v135 = 0u;
      long long v136 = 0u;
      id v42 = v40;
      uint64_t v43 = [v42 countByEnumeratingWithState:&v135 objects:v162 count:16];
      if (v43)
      {
        uint64_t v44 = *(void *)v136;
        do
        {
          for (uint64_t k = 0; k != v43; ++k)
          {
            if (*(void *)v136 != v44) {
              objc_enumerationMutation(v42);
            }
            long long v46 = *(void **)(*((void *)&v135 + 1) + 8 * k);
            long long v47 = [v46 objectID];
            [v41 addObject:v47];

            long long v48 = [v46 valueForKey:@"albumToFolderOrderKey"];
            [v41 addObject:v48];
          }
          uint64_t v43 = [v42 countByEnumeratingWithState:&v135 objects:v162 count:16];
        }
        while (v43);
      }

      id v134 = 0;
      int v49 = [v117 _updateLocationsOfObjectsToLocationByOrderKey:v41 inRelationshipWithName:@"childCollections" onObjectWithID:v36 error:&v134];
      id v50 = v134;
      if (!v49)
      {
        long long v53 = PLMigrationGetLog();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          long long v82 = NSStringFromSelector(a2);
          long long v83 = [v50 userInfo];
          *(_DWORD *)long long buf = 138412802;
          id v167 = v82;
          __int16 v168 = 2112;
          v169 = v50;
          __int16 v170 = 2112;
          uint64_t v171 = (uint64_t)v83;
          _os_log_impl(&dword_19B3C7000, v53, OS_LOG_TYPE_ERROR, "%@ failed to update location values in childCollections: %@ %@", buf, 0x20u);
        }
        goto LABEL_73;
      }
      id v133 = 0;
      char v51 = [v117 save:&v133];
      BOOL v52 = v133;
      long long v53 = v52;
      if ((v51 & 1) == 0)
      {
        long long v84 = PLMigrationGetLog();
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          long long v85 = NSStringFromSelector(a2);
          long long v86 = [v53 userInfo];
          *(_DWORD *)long long buf = 138412802;
          id v167 = v85;
          __int16 v168 = 2112;
          v169 = v53;
          __int16 v170 = 2112;
          uint64_t v171 = (uint64_t)v86;
          _os_log_impl(&dword_19B3C7000, v84, OS_LOG_TYPE_ERROR, "%@ failed to save updated location values in childCollections: %@ %@", buf, 0x20u);
        }
LABEL_73:

        [v117 reset];

        goto LABEL_74;
      }
    }
    long long v105 = (void *)[obj countByEnumeratingWithState:&v140 objects:v164 count:16];
    if (v105) {
      continue;
    }
    break;
  }
LABEL_39:

  [v117 reset];
  context = (void *)MEMORY[0x19F38D3B0]();
  long long v115 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  [v115 setIncludesPropertyValues:0];
  [v115 setResultType:1];
  id v54 = +[PLManagedAlbum albumSupportsAssetOrderKeysPredicate];
  [v115 setPredicate:v54];

  id v132 = 0;
  long long v95 = [v117 executeFetchRequest:v115 error:&v132];
  long long v107 = v132;
  if (v95)
  {
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    uint64_t v96 = v95;
    id obja = (id)[v96 countByEnumeratingWithState:&v128 objects:v161 count:16];
    if (!obja)
    {
      BOOL v18 = 1;
      goto LABEL_87;
    }
    uint64_t v97 = *(void *)v129;
LABEL_42:
    uint64_t v110 = 0;
    while (1)
    {
      if (*(void *)v129 != v97) {
        objc_enumerationMutation(v96);
      }
      __int16 v113 = *(void **)(*((void *)&v128 + 1) + 8 * v110);
      long long v106 = (void *)MEMORY[0x19F38D3B0]();
      long long v120 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"AssetToAlbumOrder"];
      uint64_t v55 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"album = %@", v113];
      [v120 setPredicate:v55];

      uint64_t v56 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"orderValue" ascending:1];
      v160 = v56;
      id v57 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v160 count:1];
      [v120 setSortDescriptors:v57];

      id v127 = 0;
      long long v58 = [v117 executeFetchRequest:v120 error:&v127];
      id v103 = v127;
      long long v59 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", 2 * objc_msgSend(v58, "count"));
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      id v60 = v58;
      uint64_t v61 = [v60 countByEnumeratingWithState:&v123 objects:v159 count:16];
      if (v61)
      {
        uint64_t v62 = *(void *)v124;
        do
        {
          for (uint64_t m = 0; m != v61; ++m)
          {
            if (*(void *)v124 != v62) {
              objc_enumerationMutation(v60);
            }
            uint64_t v64 = *(void **)(*((void *)&v123 + 1) + 8 * m);
            long long v65 = [v64 objectIDsForRelationshipNamed:@"asset"];
            __int16 v66 = [v65 firstObject];

            if (v66)
            {
              [v59 addObject:v66];
              uint64_t v67 = [v64 valueForKey:@"orderValue"];
              [v59 addObject:v67];
            }
          }
          uint64_t v61 = [v60 countByEnumeratingWithState:&v123 objects:v159 count:16];
        }
        while (v61);
      }

      id v122 = 0;
      int v68 = [v117 _updateLocationsOfObjectsToLocationByOrderKey:v59 inRelationshipWithName:@"assets" onObjectWithID:v113 error:&v122];
      id v69 = v122;
      if (!v68) {
        break;
      }
      id v121 = 0;
      char v70 = [v117 save:&v121];
      long long v71 = v121;
      uint64_t v72 = v71;
      if ((v70 & 1) == 0)
      {
        __int16 v92 = PLMigrationGetLog();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          uint64_t v93 = NSStringFromSelector(a2);
          id v94 = [v72 userInfo];
          *(_DWORD *)long long buf = 138412802;
          id v167 = v93;
          __int16 v168 = 2112;
          v169 = v72;
          __int16 v170 = 2112;
          uint64_t v171 = (uint64_t)v94;
          _os_log_impl(&dword_19B3C7000, v92, OS_LOG_TYPE_ERROR, "%@ failed to save updated location values in assets: %@ %@", buf, 0x20u);
        }
LABEL_85:

        goto LABEL_86;
      }

      if ((id)++v110 == obja)
      {
        id obja = (id)[v96 countByEnumeratingWithState:&v128 objects:v161 count:16];
        BOOL v18 = 1;
        if (obja) {
          goto LABEL_42;
        }
        goto LABEL_87;
      }
    }
    uint64_t v72 = PLMigrationGetLog();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      __int16 v90 = NSStringFromSelector(a2);
      id v91 = [v69 userInfo];
      *(_DWORD *)long long buf = 138412802;
      id v167 = v90;
      __int16 v168 = 2112;
      v169 = v69;
      __int16 v170 = 2112;
      uint64_t v171 = (uint64_t)v91;
      _os_log_impl(&dword_19B3C7000, v72, OS_LOG_TYPE_ERROR, "%@ failed to update location values in assets: %@ %@", buf, 0x20u);
    }
    goto LABEL_85;
  }
  uint64_t v96 = PLMigrationGetLog();
  if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
  {
    v88 = NSStringFromSelector(a2);
    uint64_t v89 = [v107 userInfo];
    *(_DWORD *)long long buf = 138412802;
    id v167 = v88;
    __int16 v168 = 2112;
    v169 = v107;
    __int16 v170 = 2112;
    uint64_t v171 = (uint64_t)v89;
    _os_log_impl(&dword_19B3C7000, v96, OS_LOG_TYPE_ERROR, "%@ failed to fetch albums: %@ %@", buf, 0x20u);
  }
LABEL_86:
  BOOL v18 = 0;
LABEL_87:

LABEL_75:

LABEL_76:

  return v18;
}

id __65__PLModelMigrator__populateAlbumAndFolderOrderKeysInStagedStore___block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = [WeakRetained managedObjectContextForMigrationInStore:*(void *)(a1 + 32) name:a2 concurrencyType:1];

  return v5;
}

id __65__PLModelMigrator__populateAlbumAndFolderOrderKeysInStagedStore___block_invoke_1463(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = [WeakRetained managedObjectContextForMigrationInStore:*(void *)(a1 + 32) name:a2 concurrencyType:1];

  return v5;
}

- (BOOL)_resetAlbumToFolderOrderKeyForAlbums:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v6 = (void *)MEMORY[0x19F38D3B0](v5);
  id v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _resetAlbumToFolderOrderKeyForAlbums:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  CGImageMetadataRef v9 = (void *)MEMORY[0x1E4F28F60];
  CGImageMetadataRef v10 = [NSNumber numberWithInt:2];
  int v11 = [NSNumber numberWithInt:4000];
  id v12 = [v9 predicateWithFormat:@"kind == %@ OR kind == %@", v10, v11];
  [v8 setPredicate:v12];

  [v7 executeFetchRequest:v8 error:0];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v27 != v16) {
          objc_enumerationMutation(v13);
        }
        BOOL v18 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        id v19 = (void *)MEMORY[0x19F38D3B0]();
        [v18 setCloudLocalState:0];
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v15);
  }

  if ([v7 hasChanges])
  {
    id v25 = 0;
    char v20 = [v7 save:&v25];
    id v21 = v25;
    if ((v20 & 1) == 0)
    {
      id v22 = PLMigrationGetLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = [v21 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v31 = v21;
        __int16 v32 = 2112;
        __int16 v33 = v23;
        _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "_resetAlbumToFolderOrderKeyForAlbums failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v20 = 1;
  }

  return v20;
}

- (BOOL)_fixupAlbumOrderInAlbumListInStore:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupAlbumOrderInAlbumListInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v7 = +[PLManagedAlbumList albumListInManagedObjectContext:v6];
  id v8 = [v7 albums];
  CGImageMetadataRef v9 = (void *)[v8 copy];

  CGImageMetadataRef v10 = [MEMORY[0x1E4F1CA48] array];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v11 = v9;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v29 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        uint64_t v17 = (void *)MEMORY[0x19F38D3B0]();
        if ([v16 kindValue] == 2) {
          [v10 addObject:v16];
        }
        else {
          [v7 insertIntoOrderedAlbumsAtIndexByPriorityForAlbum:v16];
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
    }
    while (v13);
  }

  BOOL v18 = [v7 albums];
  [v18 removeObjectsInArray:v10];

  id v19 = [v7 albums];
  [v19 addObjectsFromArray:v10];

  char v20 = +[PLGenericAlbum albumWithKind:3999 inManagedObjectContext:v6];
  +[PLManagedAlbumList pushChangesFromAlbumContainer:v7 toAlbumContainer:v20];
  if ([v6 hasChanges])
  {
    id v27 = 0;
    char v21 = [v6 save:&v27];
    id v22 = v27;
    if ((v21 & 1) == 0)
    {
      uint64_t v23 = PLMigrationGetLog();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = [v22 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v33 = v22;
        __int16 v34 = 2112;
        uint64_t v35 = v24;
        _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "_fixupAlbumOrderInAlbumListInStore failed: %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v21 = 1;
  }

  return v21;
}

- (BOOL)_fixupImportedAssetsInStore:(id)a3
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  uint64_t v38 = MEMORY[0x19F38D3B0](v5);
  id v36 = v4;
  long long v41 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupImportedAssetsInStore:]", *MEMORY[0x1E4F1C1C0]);
  uint64_t v6 = +[PLGenericAlbum albumWithKind:inManagedObjectContext:](PLGenericAlbum, "albumWithKind:inManagedObjectContext:", 1604);
  id v7 = [MEMORY[0x1E4F1CA48] array];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v37 = v6;
  id v8 = [v6 assets];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v51 objects:v61 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = 0;
    uint64_t v12 = *(void *)v52;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v52 != v12) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void **)(*((void *)&v51 + 1) + 8 * i);
        if (![v14 savedAssetType])
        {
          if (!v11)
          {
            id v11 = [MEMORY[0x1E4F1CA48] array];
            [v7 addObject:v11];
          }
          [v11 addObject:v14];
          if ((unint64_t)[v11 count] >= 0x64)
          {

            id v11 = 0;
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v51 objects:v61 count:16];
    }
    while (v10);
  }
  else
  {
    id v11 = 0;
  }

  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v15 = v7;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v47 objects:v60 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = 0;
    obuint64_t j = v15;
    uint64_t v40 = *(void *)v48;
    while (2)
    {
      for (uint64_t j = 0; j != v17; ++j)
      {
        if (*(void *)v48 != v40) {
          objc_enumerationMutation(obj);
        }
        id v20 = *(id *)(*((void *)&v47 + 1) + 8 * j);

        char v21 = (void *)MEMORY[0x19F38D3B0]();
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        id v11 = v20;
        uint64_t v22 = [v11 countByEnumeratingWithState:&v43 objects:v59 count:16];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = *(void *)v44;
          do
          {
            for (uint64_t k = 0; k != v23; ++k)
            {
              if (*(void *)v44 != v24) {
                objc_enumerationMutation(v11);
              }
              objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * k), "setSavedAssetType:", objc_msgSend(MEMORY[0x1E4F8BA10], "savedAssetTypeForImportedByCameraConnectionKit"));
            }
            v18 += v23;
            uint64_t v23 = [v11 countByEnumeratingWithState:&v43 objects:v59 count:16];
          }
          while (v23);
        }

        id v42 = 0;
        char v26 = [v41 save:&v42];
        id v27 = v42;
        long long v28 = v27;
        if ((v26 & 1) == 0)
        {
          id v33 = PLMigrationGetLog();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            __int16 v34 = [v28 userInfo];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v56 = v28;
            __int16 v57 = 2112;
            long long v58 = v34;
            _os_log_impl(&dword_19B3C7000, v33, OS_LOG_TYPE_ERROR, "_fixupImportedAssetsInStore failed: %@ %@", buf, 0x16u);
          }
          uint64_t v15 = obj;

          BOOL v31 = 0;
          goto LABEL_38;
        }
      }
      uint64_t v15 = obj;
      uint64_t v17 = [obj countByEnumeratingWithState:&v47 objects:v60 count:16];
      if (v17) {
        continue;
      }
      break;
    }

    if (!v18)
    {
      BOOL v31 = 1;
      __int16 v32 = v36;
      long long v30 = v37;
      long long v29 = (void *)v38;
      goto LABEL_40;
    }
    id v11 = PLMigrationGetLog();
    long long v30 = v37;
    long long v29 = (void *)v38;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v56) = v18;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Fixed asset save type on %d CCK assets", buf, 8u);
    }
    BOOL v31 = 1;
    __int16 v32 = v36;
  }
  else
  {

    BOOL v31 = 1;
    id v11 = v15;
LABEL_38:
    __int16 v32 = v36;
    long long v30 = v37;
    long long v29 = (void *)v38;
  }

LABEL_40:

  return v31;
}

- (BOOL)_fixupImportedEventsInStore:(id)a3
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  char v26 = v4;
  uint64_t v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupImportedEventsInStore:]", *MEMORY[0x1E4F1C1C0]);
  id v27 = +[PLManagedAlbumList importListInManagedObjectContext:v6];
  id v7 = +[PLManagedAlbumList eventListInManagedObjectContext:v6];
  id v8 = [v7 albums];
  uint64_t v9 = [MEMORY[0x1E4F1CAA0] orderedSetWithOrderedSet:v8];
  uint64_t v10 = [v9 count];
  id v11 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v12 = [MEMORY[0x1E4F28E60] indexSet];
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      uint64_t v14 = (void *)MEMORY[0x19F38D3B0]();
      uint64_t v15 = [v9 objectAtIndex:i];
      if ([v15 kindValue] == 12)
      {
        [v11 addObject:v15];
        [v12 addIndex:i];
      }
    }
  }
  uint64_t v16 = [v11 count];
  if (v16)
  {
    uint64_t v17 = [v27 albums];
    uint64_t v18 = objc_msgSend(MEMORY[0x1E4F28D60], "indexSetWithIndexesInRange:", 0, v16);
    [v17 insertObjects:v11 atIndexes:v18];
    [v8 removeObjectsAtIndexes:v12];
  }
  if ([v6 hasChanges])
  {
    id v28 = 0;
    char v19 = [v6 save:&v28];
    id v20 = v28;
    char v21 = PLMigrationGetLog();
    uint64_t v22 = v21;
    if (v19)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v30) = v16;
        _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_DEFAULT, "Moved %d import events into import list", buf, 8u);
      }
    }
    else if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = [v20 userInfo];
      *(_DWORD *)long long buf = 138412546;
      id v30 = v20;
      __int16 v31 = 2112;
      __int16 v32 = v23;
      _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "_fixupImportedEventsInStore failed: %@ %@", buf, 0x16u);
    }
  }
  else
  {
    char v19 = 1;
  }

  return v19;
}

- (BOOL)_updateKindSubtypeForPanoramaPhotosNeedsReset:(BOOL)a3 inStore:(id)a4
{
  BOOL v4 = a3;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  if ((PLIsAssetsd() & 1) == 0)
  {
    id v27 = [MEMORY[0x1E4F28B00] currentHandler];
    id v28 = NSStringFromSelector(a2);
    [v27 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 5520, @"%@ can only be called from assetsd", v28 object file lineNumber description];
  }
  id v8 = [v7 URL];
  id v9 = [v8 path];
  uint64_t v10 = (const char *)[v9 fileSystemRepresentation];

  id v11 = PLOpenSQLTransactionWithDBPath(v10);
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v12 = v11;
  errmsg = 0;
  if (!v4)
  {
LABEL_10:
    uint64_t v18 = [NSString stringWithFormat:@"SET ZKINDSUBTYPE=%d, ZCLOUDLOCALSTATE=%d", 1, 0];
    char v19 = objc_msgSend(NSString, "stringWithFormat:", @"(((cast(ZWIDTH as real) / cast(ZHEIGHT as real)) > %f) OR (cast(ZHEIGHT as real) / cast(ZWIDTH as real)) > %f) ", 0x4000000000000000, 0x4000000000000000);
    id v20 = objc_msgSend(NSString, "stringWithFormat:", @"(ZHEIGHT > %d AND ZHEIGHT < %d AND ZWIDTH > %d and ZWIDTH < %d)", 800, 30000, 800, 30000);
    id v21 = [NSString stringWithFormat:@"UPDATE ZASSET %@ WHERE %@ AND %@", v18, v19, v20];
    int v15 = sqlite3_exec(v12, (const char *)[v21 UTF8String], 0, 0, &errmsg);

    if (v15) {
      goto LABEL_11;
    }
    int v24 = sqlite3_changes(v12);
    id v25 = PLMigrationGetLog();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v31 = v24;
      _os_log_impl(&dword_19B3C7000, v25, OS_LOG_TYPE_DEFAULT, "Updated %d panorama photos with subtypes", buf, 8u);
    }

    PLCommitSQLTransactionAndCloseDB(v12);
LABEL_17:
    BOOL v23 = 1;
    goto LABEL_18;
  }
  objc_msgSend(NSString, "stringWithFormat:", @"UPDATE ZASSET SET ZKINDSUBTYPE=%d WHERE ZKINDSUBTYPE=%d", 0, 1);
  id v13 = objc_claimAutoreleasedReturnValue();
  int v14 = sqlite3_exec(v12, (const char *)[v13 UTF8String], 0, 0, &errmsg);
  if (!v14)
  {
    int v16 = sqlite3_changes(v12);
    uint64_t v17 = PLMigrationGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v31 = v16;
      _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "Reset %d panorama photo subtypes", buf, 8u);
    }

    goto LABEL_10;
  }
  int v15 = v14;

LABEL_11:
  uint64_t v22 = PLMigrationGetLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109378;
    int v31 = v15;
    __int16 v32 = 2080;
    uint64_t v33 = errmsg;
    _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "Failed to update panorama subtypes, %d %s", buf, 0x12u);
  }

  PLRollbackSQLTransactionAndCloseDB(v12);
  BOOL v23 = 0;
LABEL_18:

  return v23;
}

- (BOOL)_initiateLightweightReimportOfAllPhotoCloudSharingMetadataInStore:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F8B980];
  uint64_t v6 = [(PLModelMigrator *)self pathManager];
  id v7 = [v6 libraryURL];
  LODWORD(v5) = [v5 isSystemPhotoLibraryURL:v7];

  if (v5)
  {
    id v8 = (void *)MEMORY[0x19F38D3B0]();
    id v9 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _initiateLightweightReimportOfAllPhotoCloudSharingMetadataInStore:]", *MEMORY[0x1E4F1C1C0]);
    id v29 = 0;
    BOOL v10 = [(PLModelMigrator *)self _populateLightweightReimportDirectoryWithPhotoCloudSharingAssetsInManagedObjectContext:v9 error:&v29];
    id v11 = v29;
    if (!v10)
    {
      uint64_t v12 = PLMigrationGetLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = [v11 userInfo];
        *(_DWORD *)long long buf = 138412546;
        id v31 = v11;
        __int16 v32 = 2112;
        uint64_t v33 = v13;
        _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_ERROR, "Unable to populate the photo cloud sharing lightweight reimport cache %@ %@", buf, 0x16u);
      }
    }
    id v28 = 0;
    BOOL v14 = [(PLModelMigrator *)self _deletePhotoCloudSharingMetadataInManagedObjectContext:v9 error:&v28];
    id v15 = v28;
    int v16 = v15;
    if (v14)
    {
      id v27 = 0;
      BOOL v17 = +[PLPhotoSharingHelper removeCloudSharingDirectories:&v27];
      id v18 = v27;
      char v19 = v18;
      if (v17)
      {

        id v20 = PLMigrationGetLog();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "Telling mstreamd to forget everything to initiate lightweight reimport of photo cloud sharing metadata ", buf, 2u);
        }

        +[PLPhotoSharingHelper forgetSharingPersonID:0];
        id v21 = +[PLNotificationManager sharedManager];
        [v21 discardAllNotifications];
        BOOL v22 = 1;
LABEL_17:

        goto LABEL_18;
      }
    }
    else
    {
      char v19 = v15;
    }
    id v21 = PLMigrationGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      BOOL v23 = [v19 localizedDescription];
      int v24 = [v19 userInfo];
      id v25 = [v24 description];
      *(_DWORD *)long long buf = 138412546;
      id v31 = v23;
      __int16 v32 = 2112;
      uint64_t v33 = v25;
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "Failed to initiate lightweight reimport of photo cloud sharing metadata %@ %@", buf, 0x16u);
    }
    BOOL v22 = 0;
    int v16 = v19;
    goto LABEL_17;
  }
  BOOL v22 = 1;
LABEL_18:

  return v22;
}

- (BOOL)_populateLightweightReimportDirectoryWithPhotoCloudSharingAssetsInManagedObjectContext:(id)a3 error:(id *)a4
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  id v87 = a3;
  long long v108 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v6 = [(PLModelMigrator *)self pathManager];
  v88 = [v6 photoDirectoryWithType:22];

  id v7 = [(PLModelMigrator *)self pathManager];
  id v91 = [v7 privateCacheDirectoryWithSubType:3];

  id v8 = PLMigrationGetLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)long long v131 = v91;
    _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Moving all photo cloud sharing asset data into lightweight reimport cache directory %@", buf, 0xCu);
  }

  if ([v108 fileExistsAtPath:v88])
  {
    id v9 = +[PLGenericAlbum albumsWithKind:1505 inManagedObjectContext:v87];
    if (![v9 count])
    {
      id v11 = PLMigrationGetLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "No photo cloud sharing albums found, nothing to move", buf, 2u);
      }
      goto LABEL_107;
    }
    char v129 = 0;
    __int16 v90 = v9;
    if ([v108 fileExistsAtPath:v91 isDirectory:&v129] && v129)
    {
      BOOL v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Found existing lightweight reimport cloud sharing data cache directory, merging asset data", buf, 2u);
      }

      id v11 = 0;
    }
    else
    {
      id v128 = 0;
      char v14 = [v108 createDirectoryAtPath:v91 withIntermediateDirectories:1 attributes:0 error:&v128];
      id v11 = v128;
      if ((v14 & 1) == 0)
      {
        long long v81 = PLMigrationGetLog();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          long long v82 = [v11 localizedDescription];
          [v11 userInfo];
          v84 = long long v83 = v11;
          long long v85 = [v84 description];
          *(_DWORD *)long long buf = 138412802;
          *(void *)long long v131 = v91;
          *(_WORD *)&v131[8] = 2112;
          *(void *)&v131[10] = v82;
          __int16 v132 = 2112;
          id v133 = v85;
          _os_log_impl(&dword_19B3C7000, v81, OS_LOG_TYPE_ERROR, "Unable to create photo cloud sharing lightweight reimport cache directory %@: %@ %@", buf, 0x20u);

          id v11 = v83;
          id v9 = v90;
        }
        if (a4)
        {
          id v11 = v11;
          BOOL v12 = 0;
          *a4 = v11;
          goto LABEL_108;
        }
LABEL_118:
        BOOL v12 = 0;
        goto LABEL_108;
      }
    }
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    id v15 = v9;
    uint64_t v97 = [v15 countByEnumeratingWithState:&v124 objects:v139 count:16];
    if (v97)
    {
      int v107 = 0;
      int v106 = 0;
      uint64_t v95 = *(void *)v125;
      uint64_t v89 = *MEMORY[0x1E4F8C4D0];
      uint64_t v96 = v15;
      do
      {
        for (uint64_t i = 0; i != v97; uint64_t i = v25 + 1)
        {
          if (*(void *)v125 != v95) {
            objc_enumerationMutation(v15);
          }
          uint64_t v101 = i;
          BOOL v17 = *(void **)(*((void *)&v124 + 1) + 8 * i);
          id v18 = [v17 assets];
          char v19 = (void *)[v18 copy];

          uint64_t v102 = v19;
          if ([v19 count])
          {
            uint64_t v20 = [v17 cloudPersonID];
            long long v98 = [v17 cloudGUID];
            long long v100 = +[PLCloudSharedAlbum lightweightReimportDirectoryNameWithGUID:cloudPersonID:](PLCloudSharedAlbum, "lightweightReimportDirectoryNameWithGUID:cloudPersonID:");
            uint64_t v21 = objc_msgSend(v91, "stringByAppendingPathComponent:");
            int v22 = [v108 fileExistsAtPath:v21 isDirectory:&v129];
            if (v129) {
              int v23 = v22;
            }
            else {
              int v23 = 0;
            }
            uint64_t v110 = (void *)v21;
            int v92 = v23;
            long long v99 = (void *)v20;
            if (v23)
            {
              int v24 = PLMigrationGetLog();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                *(void *)long long v131 = v100;
                _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_DEFAULT, "Found existing lightweight reimport cloud sharing data cache directory for album '%@', merging asset data", buf, 0xCu);
              }

LABEL_31:
              id v94 = v11;
              uint64_t v93 = MEMORY[0x19F38D3B0]();
              id v109 = [MEMORY[0x1E4F1CA60] dictionary];
              id v111 = [MEMORY[0x1E4F1CA60] dictionary];
              long long v119 = 0u;
              long long v120 = 0u;
              long long v121 = 0u;
              long long v122 = 0u;
              obuint64_t j = v102;
              uint64_t v27 = [obj countByEnumeratingWithState:&v119 objects:v138 count:16];
              id v28 = v108;
              if (!v27) {
                goto LABEL_75;
              }
              uint64_t v29 = v27;
              uint64_t v30 = *(void *)v120;
              uint64_t v112 = *(void *)v120;
              while (2)
              {
                uint64_t v31 = 0;
                uint64_t v113 = v29;
LABEL_34:
                if (*(void *)v120 != v30) {
                  objc_enumerationMutation(obj);
                }
                __int16 v32 = *(void **)(*((void *)&v119 + 1) + 8 * v31);
                uint64_t v33 = [v32 cloudPlaceholderKind];
                uint64_t v34 = [v32 cloudAssetGUID];
                if (v33 > 7) {
                  goto LABEL_56;
                }
                if (((1 << v33) & 0x98) != 0)
                {
                  uint64_t v35 = [v32 filename];
                  if (v35)
                  {
                    uint64_t v36 = [v111 objectForKey:v35];
                    if (v36)
                    {
                      uint64_t v37 = (void *)v36;
                      [v109 removeObjectForKey:v36];
                      uint64_t v38 = +[PLManagedAsset lightweightReimportFileNameWithGUID:v37 type:0];
                      uint64_t v39 = [v110 stringByAppendingPathComponent:v38];
                      uint64_t v40 = PLMigrationGetLog();
                      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)long long buf = 138412802;
                        *(void *)long long v131 = v38;
                        *(_WORD *)&v131[8] = 2112;
                        *(void *)&v131[10] = v34;
                        __int16 v132 = 2112;
                        id v133 = v37;
                        _os_log_impl(&dword_19B3C7000, v40, OS_LOG_TYPE_DEBUG, "Found two assets pointing to the same file %@ on disk, ommiting %@ and %@ from the reimport cache", buf, 0x20u);
                      }

                      id v118 = 0;
                      char v41 = [v28 removeItemAtPath:v39 error:&v118];
                      id v42 = v118;
                      if ((v41 & 1) == 0)
                      {
                        long long v43 = PLMigrationGetLog();
                        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                        {
                          id v103 = [v42 localizedDescription];
                          long long v104 = [v42 userInfo];
                          long long v44 = [v104 description];
                          *(_DWORD *)long long buf = 138413314;
                          *(void *)long long v131 = v34;
                          *(_WORD *)&v131[8] = 2112;
                          *(void *)&v131[10] = v37;
                          __int16 v132 = 2112;
                          id v133 = v39;
                          __int16 v134 = 2112;
                          long long v135 = v103;
                          __int16 v136 = 2112;
                          long long v137 = v44;
                          _os_log_impl(&dword_19B3C7000, v43, OS_LOG_TYPE_ERROR, "Unable to remove shared asset data with references from %@ and %@ at path %@, %@ %@", buf, 0x34u);

                          id v28 = v108;
                        }
                        goto LABEL_70;
                      }
                      goto LABEL_71;
                    }
                  }
                  uint64_t v48 = [v32 pathForOriginalFile];
                  uint64_t v37 = (void *)v48;
                  if (v35) {
                    BOOL v49 = v48 == 0;
                  }
                  else {
                    BOOL v49 = 1;
                  }
                  if (v49)
                  {
                    uint64_t v38 = PLMigrationGetLog();
                    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = 138412802;
                      *(void *)long long v131 = v34;
                      *(_WORD *)&v131[8] = 2112;
                      *(void *)&v131[10] = v35;
                      __int16 v132 = 2112;
                      id v133 = v37;
                      _os_log_impl(&dword_19B3C7000, v38, OS_LOG_TYPE_DEFAULT, "Skipping asset %@ with missing filename or path (%@, %@)", buf, 0x20u);
                    }
                    id v42 = 0;
                  }
                  else
                  {
                    [v111 setObject:v34 forKey:v35];
                    uint64_t v38 = +[PLManagedAsset lightweightReimportFileNameWithGUID:v34 type:0];
                    uint64_t v39 = [v110 stringByAppendingPathComponent:v38];
                    id v117 = 0;
                    char v50 = [v28 linkItemAtPath:v37 toPath:v39 error:&v117];
                    id v51 = v117;
                    id v42 = v51;
                    if (v50) {
                      goto LABEL_61;
                    }
                    if ([v51 code] != 516) {
                      goto LABEL_67;
                    }
                    long long v53 = PLMigrationGetLog();
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = 138412290;
                      *(void *)long long v131 = v34;
                      _os_log_impl(&dword_19B3C7000, v53, OS_LOG_TYPE_DEFAULT, "Attempting to replace existing cached image for %@", buf, 0xCu);
                    }

                    if ([v108 removeItemAtPath:v37 error:0]
                      && (id v116 = v42,
                          char v54 = [v108 linkItemAtPath:v37 toPath:v39 error:&v116],
                          id v55 = v116,
                          v42,
                          id v42 = v55,
                          (v54 & 1) != 0))
                    {
LABEL_61:
                      ++v107;
                      long long v43 = [MEMORY[0x1E4F1CA60] dictionary];
                      long long v52 = [NSNumber numberWithInt:v33];
                      [v43 setObject:v52 forKey:@"cloudPlaceholderKind"];

                      [v109 setObject:v43 forKey:v34];
                    }
                    else
                    {
LABEL_67:
                      ++v106;
                      long long v43 = PLMigrationGetLog();
                      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v56 = [v42 localizedDescription];
                        long long v105 = [v42 userInfo];
                        __int16 v57 = [v105 description];
                        *(_DWORD *)long long buf = 138413314;
                        *(void *)long long v131 = v34;
                        *(_WORD *)&v131[8] = 2112;
                        *(void *)&v131[10] = v37;
                        __int16 v132 = 2112;
                        id v133 = v39;
                        __int16 v134 = 2112;
                        long long v135 = v56;
                        __int16 v136 = 2112;
                        long long v137 = v57;
                        _os_log_impl(&dword_19B3C7000, v43, OS_LOG_TYPE_ERROR, "Unable to link shared asset data for %@ from %@ to %@, %@ %@", buf, 0x34u);
                      }
                    }
                    id v28 = v108;
LABEL_70:

LABEL_71:
                  }

                  uint64_t v30 = v112;
                  uint64_t v29 = v113;
LABEL_73:

                  if (v29 == ++v31)
                  {
                    uint64_t v29 = [obj countByEnumeratingWithState:&v119 objects:v138 count:16];
                    if (!v29)
                    {
LABEL_75:

                      id v58 = v109;
                      if ([v109 count])
                      {
                        long long v59 = [v110 stringByAppendingPathComponent:v89];
                        id v9 = v90;
                        id v11 = v94;
                        if (v92)
                        {
                          id v60 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfFile:v59];
                          uint64_t v61 = v60;
                          if (v60 && [v60 count])
                          {
                            [v61 addEntriesFromDictionary:v109];
                            id v58 = v61;

                            long long v115 = v94;
                            char v62 = [v108 removeItemAtPath:v59 error:&v115];
                            id v11 = v115;

                            if ((v62 & 1) == 0)
                            {
                              uint64_t v63 = PLMigrationGetLog();
                              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                              {
                                uint64_t v64 = [v11 localizedDescription];
                                long long v65 = [v11 userInfo];
                                __int16 v66 = [v65 description];
                                *(_DWORD *)long long buf = 138412802;
                                *(void *)long long v131 = v59;
                                *(_WORD *)&v131[8] = 2112;
                                *(void *)&v131[10] = v64;
                                __int16 v132 = 2112;
                                id v133 = v66;
                                _os_log_impl(&dword_19B3C7000, v63, OS_LOG_TYPE_ERROR, "Unable to remove previous cached album info dictionary from %@, %@ %@", buf, 0x20u);
                              }
                            }
                            id v9 = v90;
                          }
                          else
                          {
                            id v58 = v109;
                          }
                        }
                        id v73 = v58;
                        __int16 v74 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v58 format:100 options:0 error:0];
                        if (([v74 writeToFile:v59 options:1073741825 error:0] & 1) == 0)
                        {
                          char v75 = PLMigrationGetLog();
                          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)long long buf = 138412290;
                            *(void *)long long v131 = v59;
                            _os_log_impl(&dword_19B3C7000, v75, OS_LOG_TYPE_ERROR, "Failed to write cached album info dictionary %@", buf, 0xCu);
                          }
                        }
                        uint64_t v67 = (void *)v93;
                        id v58 = v73;
                      }
                      else
                      {
                        id v9 = v90;
                        uint64_t v67 = (void *)v93;
                        id v11 = v94;
                      }

                      goto LABEL_96;
                    }
                    continue;
                  }
                  goto LABEL_34;
                }
                break;
              }
              if (((1 << v33) & 5) != 0)
              {
                uint64_t v35 = PLMigrationGetLog();
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 138412546;
                  *(void *)long long v131 = v34;
                  *(_WORD *)&v131[8] = 1024;
                  *(_DWORD *)&v131[10] = v33;
                  long long v45 = v35;
                  os_log_type_t v46 = OS_LOG_TYPE_DEBUG;
                  long long v47 = "Skipping cloud shared asset %@ with placeholder kind: %d";
                  goto LABEL_58;
                }
              }
              else
              {
LABEL_56:
                uint64_t v35 = PLMigrationGetLog();
                if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 67109378;
                  *(_DWORD *)long long v131 = v33;
                  *(_WORD *)&v131[4] = 2112;
                  *(void *)&v131[6] = v34;
                  long long v45 = v35;
                  os_log_type_t v46 = OS_LOG_TYPE_ERROR;
                  long long v47 = "Invalid cloud shared asset placeholder kind: %d for shared asset %@";
LABEL_58:
                  _os_log_impl(&dword_19B3C7000, v45, v46, v47, buf, 0x12u);
                }
              }
              id v42 = 0;
              goto LABEL_73;
            }

            id v123 = 0;
            char v26 = [v108 createDirectoryAtPath:v21 withIntermediateDirectories:1 attributes:0 error:&v123];
            id v11 = v123;
            if (v26) {
              goto LABEL_31;
            }
            int v68 = PLMigrationGetLog();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              id v69 = [v11 localizedDescription];
              char v70 = [v11 userInfo];
              [v70 description];
              v72 = long long v71 = v11;
              *(_DWORD *)long long buf = 138412802;
              *(void *)long long v131 = v110;
              *(_WORD *)&v131[8] = 2112;
              *(void *)&v131[10] = v69;
              __int16 v132 = 2112;
              id v133 = v72;
              _os_log_impl(&dword_19B3C7000, v68, OS_LOG_TYPE_ERROR, "Unable to create photo cloud sharing lightweight reimport cache directory '%@' for album: %@ %@", buf, 0x20u);

              id v11 = v71;
            }

LABEL_96:
            id v15 = v96;
            uint64_t v25 = v101;
          }
          else
          {
            id v15 = v96;
            uint64_t v25 = v101;
          }
        }
        uint64_t v97 = [v15 countByEnumeratingWithState:&v124 objects:v139 count:16];
      }
      while (v97);

      if (v107 >= 1)
      {
        id v76 = PLMigrationGetLog();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)long long v131 = v107;
          *(_WORD *)&v131[4] = 1024;
          *(_DWORD *)&v131[6] = v106;
          id v77 = "Successfully cached %d shared asset image files to lightweight reimport cloud sharing data cache (%d failed)";
          id v78 = v76;
          uint32_t v79 = 14;
LABEL_105:
          _os_log_impl(&dword_19B3C7000, v78, OS_LOG_TYPE_DEFAULT, v77, buf, v79);
          goto LABEL_106;
        }
        goto LABEL_106;
      }
      if (v106 >= 1)
      {
        long long v86 = PLMigrationGetLog();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)long long v131 = v106;
          _os_log_impl(&dword_19B3C7000, v86, OS_LOG_TYPE_ERROR, "Failed to cache any shared asset image files to lightweight reimport cloud sharing data cache (%d failed)", buf, 8u);
        }

        goto LABEL_118;
      }
    }
    else
    {
    }
    id v76 = PLMigrationGetLog();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      id v77 = "No shared asset image files found, none cached to lightweight reimport cloud sharing data cache";
      id v78 = v76;
      uint32_t v79 = 2;
      goto LABEL_105;
    }
LABEL_106:

LABEL_107:
    BOOL v12 = 1;
LABEL_108:
    id v13 = v108;

    goto LABEL_109;
  }
  id v9 = PLMigrationGetLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "No cloud sharing data directory found, no photo shared asset data to migrate", buf, 2u);
  }
  BOOL v12 = 1;
  id v13 = v108;
LABEL_109:

  return v12;
}

- (BOOL)_postProcessFromVersion6006Store:(id)a3
{
  id v4 = a3;
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_DEFAULT, "Rebuild photo cloud sharing metadata", buf, 2u);
  }

  if (![(PLModelMigrator *)self _initiateLightweightReimportOfAllPhotoCloudSharingMetadataInStore:v4])goto LABEL_17; {
  uint64_t v6 = PLMigrationGetLog();
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v17 = 0;
    _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEFAULT, "Fixing imported CCK events list.", v17, 2u);
  }

  if (![(PLModelMigrator *)self _fixupImportedEventsInStore:v4]) {
    goto LABEL_17;
  }
  id v7 = PLMigrationGetLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v16 = 0;
    _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_DEFAULT, "Fixing CCK asset types", v16, 2u);
  }

  if (![(PLModelMigrator *)self _fixupImportedAssetsInStore:v4]) {
    goto LABEL_17;
  }
  id v8 = [(PLModelMigrator *)self pathManager];
  int v9 = [v8 isDCIM];

  if (!v9) {
    goto LABEL_14;
  }
  BOOL v10 = PLMigrationGetLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v15 = 0;
    _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Fixing sync'd asset attributes", v15, 2u);
  }

  if ([(PLModelMigrator *)self _fixupSyncedAssetAttributesInStore:v4])
  {
LABEL_14:
    id v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v14 = 0;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Moving My Photo Stream to Albums list.", v14, 2u);
    }

    BOOL v12 = [(PLModelMigrator *)self _moveMyPhotoStreamToAlbumsListInStore:v4];
  }
  else
  {
LABEL_17:
    BOOL v12 = 0;
  }

  return v12;
}

- (void)applyDataProtectionToAllPhotosFilesOnce
{
  id v2 = self;
  v76[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(PLModelMigrator *)self pathManager];
  char v4 = [v3 isDataProtectionComplete];

  if (v4) {
    return;
  }
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_DEFAULT, "Applying Photos data protection", buf, 2u);
  }

  unint64_t v6 = 0x1E4F1C000uLL;
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v8 = v7;
  int v9 = [(PLModelMigrator *)v2 pathManager];
  if ([v9 isDCIM])
  {
    BOOL v10 = [v9 photoDirectoryWithType:4];
    v76[0] = v10;
    id v11 = [v9 iTunesPhotosDirectory];
    v76[1] = v11;
    BOOL v12 = [v9 photoDirectoryWithType:14];
    v76[2] = v12;
    id v55 = [MEMORY[0x1E4F1C978] arrayWithObjects:v76 count:3];

    uint64_t v56 = [MEMORY[0x1E4F1CA48] array];
    context = (void *)MEMORY[0x19F38D3B0]();
    id v13 = [v9 photoDirectoryWithType:33];
    char v14 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v15 = [v14 contentsOfDirectoryAtPath:v13 error:0];

    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    id v16 = v15;
    uint64_t v17 = [v16 countByEnumeratingWithState:&v67 objects:v75 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      obuint64_t j = v16;
      long long v53 = v9;
      char v19 = 0;
      uint64_t v20 = *(void *)v68;
      uint64_t v21 = v56;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v68 != v20) {
            objc_enumerationMutation(obj);
          }
          int v23 = *(void **)(*((void *)&v67 + 1) + 8 * i);
          char v24 = objc_msgSend(v23, "isEqualToString:", @"Caches", v53);
          uint64_t v25 = [v13 stringByAppendingPathComponent:v23];
          char v26 = (void *)v25;
          if (v24)
          {
            uint64_t v27 = v19;
            char v19 = (void *)v25;
          }
          else
          {
            if (![(PLModelMigrator *)v2 skipDataProtectionForFilePath:v25]) {
              [v56 addObject:v26];
            }
            uint64_t v27 = v26;
          }
        }
        uint64_t v18 = [obj countByEnumeratingWithState:&v67 objects:v75 count:16];
      }
      while (v18);
      id v16 = obj;

      if (!v19)
      {
        int v9 = v53;
        unint64_t v6 = 0x1E4F1C000;
LABEL_46:

        [v55 arrayByAddingObjectsFromArray:v21];
        v49 = uint64_t v48 = v21;
        [(PLModelMigrator *)v2 applyDataProtectionToPhotosPaths:v49 fromKeyClass:4 toKeyClass:3];

        goto LABEL_47;
      }
      __int16 v57 = v2;
      id v28 = [MEMORY[0x1E4F28CB8] defaultManager];
      uint64_t v29 = [v28 contentsOfDirectoryAtPath:v19 error:0];

      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      id v30 = v29;
      uint64_t v31 = [v30 countByEnumeratingWithState:&v63 objects:v74 count:16];
      if (v31)
      {
        uint64_t v32 = v31;
        uint64_t v33 = 0;
        uint64_t v34 = *(void *)v64;
        do
        {
          for (uint64_t j = 0; j != v32; ++j)
          {
            if (*(void *)v64 != v34) {
              objc_enumerationMutation(v30);
            }
            uint64_t v36 = *(void **)(*((void *)&v63 + 1) + 8 * j);
            char v37 = [v36 isEqualToString:@"search"];
            uint64_t v38 = [v19 stringByAppendingPathComponent:v36];
            uint64_t v39 = (void *)v38;
            if (v37)
            {
              uint64_t v40 = v33;
              uint64_t v33 = (void *)v38;
            }
            else
            {
              if (![(PLModelMigrator *)v57 skipDataProtectionForFilePath:v38]) {
                [v56 addObject:v39];
              }
              uint64_t v40 = v39;
            }
          }
          uint64_t v32 = [v30 countByEnumeratingWithState:&v63 objects:v74 count:16];
        }
        while (v32);

        if (!v33)
        {
          int v9 = v53;
          unint64_t v6 = 0x1E4F1C000;
          uint64_t v21 = v56;
          id v2 = v57;
          id v16 = obj;
          goto LABEL_46;
        }
        char v41 = [MEMORY[0x1E4F28CB8] defaultManager];
        id v42 = [v41 contentsOfDirectoryAtPath:v33 error:0];

        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        id v30 = v42;
        uint64_t v43 = [v30 countByEnumeratingWithState:&v59 objects:v73 count:16];
        int v9 = v53;
        unint64_t v6 = 0x1E4F1C000;
        if (v43)
        {
          uint64_t v44 = v43;
          uint64_t v45 = *(void *)v60;
          do
          {
            for (uint64_t k = 0; k != v44; ++k)
            {
              if (*(void *)v60 != v45) {
                objc_enumerationMutation(v30);
              }
              long long v47 = [v33 stringByAppendingPathComponent:*(void *)(*((void *)&v59 + 1) + 8 * k)];
              if (![(PLModelMigrator *)v57 skipDataProtectionForFilePath:v47]) {
                [v56 addObject:v47];
              }
            }
            uint64_t v44 = [v30 countByEnumeratingWithState:&v59 objects:v73 count:16];
          }
          while (v44);
        }

        uint64_t v21 = v56;
      }
      else
      {
        uint64_t v33 = v30;
        int v9 = v53;
        unint64_t v6 = 0x1E4F1C000uLL;
      }

      id v2 = v57;
      id v16 = obj;
    }
    else
    {
      char v19 = 0;
      uint64_t v33 = v16;
      uint64_t v21 = v56;
    }

    goto LABEL_46;
  }
LABEL_47:
  char v50 = [(PLModelMigrator *)v2 pathManager];
  [v50 setDataProtectionComplete:1];

  id v51 = PLMigrationGetLog();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(v6 + 2504) timeIntervalSinceReferenceDate];
    *(_DWORD *)long long buf = 134217984;
    double v72 = v52 - v8;
    _os_log_impl(&dword_19B3C7000, v51, OS_LOG_TYPE_DEFAULT, "Data protection completed in %1.1fs", buf, 0xCu);
  }
}

- (void)applyDataProtectionToPhotosPaths:(id)a3 fromKeyClass:(int)a4 toKeyClass:(int)a5
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  double v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v8 = v6;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v27 objects:v39 count:16];
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(void *)v28;
    *(void *)&long long v10 = 138413058;
    long long v24 = v10;
    id v26 = v8;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v28 != v12) {
          objc_enumerationMutation(v8);
        }
        char v14 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        if (!-[PLModelMigrator skipDataProtectionForFilePath:](self, "skipDataProtectionForFilePath:", v14, v24))
        {
          if ([v7 fileExistsAtPath:v14 isDirectory:0])
          {
            id v15 = v14;
            [v15 fileSystemRepresentation];
            int inited = aks_migrate_path_delayInitStub(v16);
            if (inited)
            {
              int v18 = inited;
              char v19 = v7;
              int v20 = *__error();
              uint64_t v21 = PLMigrationGetLog();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              {
                int v22 = NSStringFromSelector(a2);
                int v23 = strerror(v20);
                *(_DWORD *)long long buf = v24;
                uint64_t v32 = v22;
                __int16 v33 = 2112;
                id v34 = v15;
                __int16 v35 = 1024;
                int v36 = v18;
                __int16 v37 = 2080;
                uint64_t v38 = v23;
                _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "%@ failed to migrate data protection for path: %@ %d %s", buf, 0x26u);
              }
              double v7 = v19;
              id v8 = v26;
            }
          }
        }
      }
      uint64_t v11 = [v8 countByEnumeratingWithState:&v27 objects:v39 count:16];
    }
    while (v11);
  }
}

- (BOOL)skipDataProtectionForFilePath:(id)a3
{
  id v4 = a3;
  if (([v4 hasSuffix:@".sqlite"] & 1) != 0
    || ([v4 hasSuffix:@"-wal"] & 1) != 0
    || ([v4 hasSuffix:@"-shm"] & 1) != 0
    || ([v4 hasSuffix:@"-journal"] & 1) != 0)
  {
    goto LABEL_7;
  }
  uint64_t v5 = [(PLModelMigrator *)self pathManager];
  if (![v5 isDCIM])
  {

    goto LABEL_10;
  }
  char v6 = [v4 hasSuffix:*MEMORY[0x1E4F8BB08]];

  if ((v6 & 1) == 0)
  {
LABEL_10:
    BOOL v7 = 0;
    goto LABEL_8;
  }
LABEL_7:
  BOOL v7 = 1;
LABEL_8:

  return v7;
}

- (BOOL)_fixupBrokenBurstPicksInStore:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  context = (void *)MEMORY[0x19F38D3B0](v5);
  char v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _fixupBrokenBurstPicksInStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  uint64_t v9 = [v7 fetchRequestWithEntityName:v8];

  long long v10 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"avalanchePickType != %d && avalancheUUID = NULL", 0);
  [v9 setPredicate:v10];

  [v6 executeFetchRequest:v9 error:0];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = [v11 countByEnumeratingWithState:&v29 objects:v39 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v30 != v15) {
          objc_enumerationMutation(v11);
        }
        uint64_t v17 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        int v18 = (void *)MEMORY[0x19F38D3B0]();
        [v17 setAvalanchePickType:0];
        [v17 setVisibilityState:0];
      }
      v14 += v13;
      uint64_t v13 = [v11 countByEnumeratingWithState:&v29 objects:v39 count:16];
    }
    while (v13);
  }
  else
  {
    uint64_t v14 = 0;
  }

  if (![v6 hasChanges])
  {
    LOBYTE(v19) = 1;
LABEL_18:
    if (v14 >= 1)
    {
      long long v24 = PLMigrationGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v34) = v14;
        _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_DEFAULT, "Fixed up %d broken burst assets", buf, 8u);
      }
    }
    goto LABEL_22;
  }
  id v28 = 0;
  int v19 = [v6 save:&v28];
  id v20 = v28;
  if ((v19 & 1) == 0)
  {
    uint64_t v21 = PLMigrationGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v22 = NSStringFromSelector(a2);
      int v23 = [v20 userInfo];
      *(_DWORD *)long long buf = 138412802;
      id v34 = v22;
      __int16 v35 = 2112;
      id v36 = v20;
      __int16 v37 = 2112;
      uint64_t v38 = v23;
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
    }
  }

  if (v19) {
    goto LABEL_18;
  }
LABEL_22:

  return v19;
}

- (BOOL)_populateDurationAndHDRTypeFromAdditionalAssetAttributesInStagedStore:(id)a3
{
  aSelector = a2;
  v48[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = pl_dispatch_once();
  long long v32 = (void *)MEMORY[0x19F38D3B0](v5);
  __int16 v33 = v4;
  char v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v4, "-[PLModelMigrator _populateDurationAndHDRTypeFromAdditionalAssetAttributesInStagedStore:]", *MEMORY[0x1E4F1C1C0]);
  BOOL v7 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"AdditionalAssetAttributes"];
  id v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"((duration != NULL) AND (duration > 0.0)) OR ((highDynamicRangeType != NULL) && (highDynamicRangeType != 0))"];
  [v7 setPredicate:v8];

  [v7 setPropertiesToFetch:&unk_1EEBF1928];
  v48[0] = @"asset";
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v48 count:1];
  [v7 setRelationshipKeyPathsForPrefetching:v9];

  id v34 = v6;
  long long v31 = v7;
  [v6 executeFetchRequest:v7 error:0];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    int v12 = 0;
    int v36 = 0;
    uint64_t v13 = *(void *)v39;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v39 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v38 + 1) + 8 * v14);
        double v16 = (void *)MEMORY[0x19F38D3B0](v10);
        uint64_t v17 = objc_msgSend(v15, "valueForKey:", @"duration", aSelector);
        int v18 = [v15 valueForKey:@"highDynamicRangeType"];
        int v19 = [v15 valueForKey:@"asset"];
        [v17 floatValue];
        if (v20 > 0.0)
        {
          [v19 setValue:v17 forKey:@"duration"];
          ++v36;
        }
        if ([v18 integerValue])
        {
          [v19 setValue:v18 forKey:@"highDynamicRangeType"];
          ++v12;
        }

        ++v14;
      }
      while (v11 != v14);
      uint64_t v10 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
      uint64_t v11 = v10;
    }
    while (v10);
  }
  else
  {
    int v12 = 0;
    int v36 = 0;
  }

  if (![v34 hasChanges]) {
    goto LABEL_17;
  }
  id v37 = 0;
  int v21 = [v34 save:&v37];
  id v22 = v37;
  int v23 = v22;
  if (v21)
  {

LABEL_17:
    objc_msgSend(v34, "reset", aSelector);
    if (v36 > 0 || v12 >= 1)
    {
      long long v24 = PLMigrationGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)uint64_t v43 = v36;
        *(_WORD *)&v43[4] = 1024;
        *(_DWORD *)&v43[6] = v12;
        _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_DEFAULT, "Populated duration on %d and HDR type on %d assets", buf, 0xEu);
      }
    }
    BOOL v25 = 1;
    goto LABEL_26;
  }
  id v26 = PLMigrationGetLog();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    long long v27 = NSStringFromSelector(aSelector);
    id v28 = [v23 userInfo];
    *(_DWORD *)long long buf = 138412802;
    *(void *)uint64_t v43 = v27;
    *(_WORD *)&v43[8] = 2112;
    uint64_t v44 = v23;
    __int16 v45 = 2112;
    os_log_type_t v46 = v28;
    _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
  }
  [v34 reset];
  BOOL v25 = 0;
LABEL_26:

  return v25;
}

- (BOOL)_migrateTransformableUUIDsToStringsInStore:(id)a3
{
  id v5 = a3;
  uint64_t v15 = 0;
  double v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 1;
  uint64_t v6 = pl_dispatch_once();
  BOOL v7 = (void *)MEMORY[0x19F38D3B0](v6);
  id v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _migrateTransformableUUIDsToStringsInStore:]", *MEMORY[0x1E4F1C1C0]);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __62__PLModelMigrator__migrateTransformableUUIDsToStringsInStore___block_invoke;
  v11[3] = &unk_1E5866610;
  id v9 = v8;
  id v12 = v9;
  uint64_t v13 = &v15;
  SEL v14 = a2;
  [&unk_1EEBF2860 enumerateKeysAndObjectsUsingBlock:v11];
  [v9 reset];

  LOBYTE(v7) = *((unsigned char *)v16 + 24);
  _Block_object_dispose(&v15, 8);

  return (char)v7;
}

void __62__PLModelMigrator__migrateTransformableUUIDsToStringsInStore___block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:v7];
  if ([v8 count] == 1)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4F28F60];
    uint64_t v11 = [v8 firstObject];
    id v12 = objc_msgSend(v10, "predicateWithFormat:", @"%K != NULL", v11);
  }
  else
  {
    __int16 v33 = a4;
    id v34 = v9;
    uint64_t v13 = [MEMORY[0x1E4F1CA48] array];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v14 = v8;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v40 objects:v46 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v41 != v17) {
            objc_enumerationMutation(v14);
          }
          int v19 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K != NULL", *(void *)(*((void *)&v40 + 1) + 8 * i));
          [v13 addObject:v19];
        }
        uint64_t v16 = [v14 countByEnumeratingWithState:&v40 objects:v46 count:16];
      }
      while (v16);
    }

    id v12 = [MEMORY[0x1E4F28BA0] orPredicateWithSubpredicates:v13];

    id v9 = v34;
    a4 = v33;
  }
  [v9 setPredicate:v12];
  uint64_t v39 = 0;
  float v20 = *(void **)(a1 + 32);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  void v37[2] = __62__PLModelMigrator__migrateTransformableUUIDsToStringsInStore___block_invoke_2;
  v37[3] = &unk_1E58758A8;
  id v21 = v8;
  id v38 = v21;
  id v22 = [v20 enumerateObjectsFromFetchRequest:v9 count:&v39 usingDefaultBatchSizeWithBlock:v37];
  if (v22)
  {
    int v23 = PLMigrationGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      long long v24 = NSStringFromSelector(*(SEL *)(a1 + 48));
      BOOL v25 = [v22 userInfo];
      *(_DWORD *)long long buf = 138412802;
      *(void *)__int16 v45 = v24;
      *(_WORD *)&v45[8] = 2112;
      *(void *)&v45[10] = v22;
      *(_WORD *)&v45[18] = 2112;
      *(void *)&v45[20] = v25;
      _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  else if ([*(id *)(a1 + 32) hasChanges])
  {
    id v26 = *(void **)(a1 + 32);
    id v36 = 0;
    char v27 = [v26 save:&v36];
    id v28 = v36;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v27;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      long long v29 = PLMigrationGetLog();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        __int16 v35 = NSStringFromSelector(*(SEL *)(a1 + 48));
        uint64_t v30 = [v28 userInfo];
        *(_DWORD *)long long buf = 138412802;
        *(void *)__int16 v45 = v35;
        *(_WORD *)&v45[8] = 2112;
        *(void *)&v45[10] = v28;
        *(_WORD *)&v45[18] = 2112;
        *(void *)&v45[20] = v30;
        long long v31 = (void *)v30;
        _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_ERROR, "%@ failed: %@ %@", buf, 0x20u);
      }
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    long long v32 = PLMigrationGetLog();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)__int16 v45 = v39;
      *(_WORD *)&v45[4] = 2112;
      *(void *)&v45[6] = v7;
      *(_WORD *)&v45[14] = 2112;
      *(void *)&v45[16] = v21;
      _os_log_impl(&dword_19B3C7000, v32, OS_LOG_TYPE_DEFAULT, "Migrated %d %@ %@ to strings", buf, 0x1Cu);
    }
  }
  else
  {
    *a4 = 1;
  }
}

void __62__PLModelMigrator__migrateTransformableUUIDsToStringsInStore___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend(v9, "stringByAppendingString:", @"String", (void)v12);
        uint64_t v11 = [v3 valueForKey:v9];
        [v3 setValue:v11 forKey:v10];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

- (BOOL)isPostProcessingLightweightMigration
{
  return self->_isPostProcessingLightWeightMigration;
}

- (BOOL)processWelterweightMigrationStageOnStore:(id)a3 migrationUUID:(id)a4 fromVersion:(int)a5 toVersion:(int)a6 migrationContext:(id)a7 progress:(id)a8 progressUnitCount:(unint64_t)a9
{
  uint64_t v11 = *(void *)&a6;
  uint64_t v12 = *(void *)&a5;
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  id v74 = a3;
  id v16 = a4;
  id v77 = a7;
  id v79 = a8;
  if ((PLIsAssetsd() & 1) == 0)
  {
    long long v67 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v68 = NSStringFromSelector(a2);
    [v67 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 4878, @"%@ only valid in assetsd!", v68 object file lineNumber description];
  }
  uint64_t v17 = +[PLModelMigrator currentModelVersion];
  if ((int)v17 <= (int)v12)
  {
    long long v69 = [MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v69, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"PLModelMigrator.m", 4882, @"Previous store version %d must be less than current version %d", v12, v17);
  }
  if ((int)v17 <= (int)v11)
  {
    long long v70 = [MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v70, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"PLModelMigrator.m", 4883, @"target version %d must be less than the current version %d", v11, v17);
  }
  if ((int)v12 <= 6005)
  {
    long long v71 = [MEMORY[0x1E4F28B00] currentHandler];
    [v71 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:4884 description:@"Previous store version is unsupported"];
  }
  BOOL v18 = v11 == 8012 || v11 == 8000;
  __int16 v19 = v18;
  if (v18) {
    __int16 v20 = 2;
  }
  else {
    __int16 v20 = 1;
  }
  if ((int)v12 < 8318 || v12 >> 1 == 4500)
  {
    __int16 v19 = v20;
    BOOL v22 = v11 == 9021;
  }
  else
  {
    BOOL v22 = 0;
  }
  __int16 v23 = v11 == 9049;
  if (v11 == 9300) {
    ++v23;
  }
  if (v11 == 10113) {
    ++v23;
  }
  if (v11 == 10123) {
    ++v23;
  }
  if (v11 == 10405) {
    ++v23;
  }
  if (v11 == 10407) {
    ++v23;
  }
  if (v11 == 12329) {
    ++v23;
  }
  unsigned __int16 v24 = v23 + v22 + v19;
  if (v11 == 14206 || (uint64_t v25 = 0, (int)v12 >= 15000) && v11 == 15054)
  {
    ++v24;
    uint64_t v25 = 1;
  }
  uint64_t v75 = v25;
  int v73 = v12;
  if (v11 == 15062) {
    unsigned __int16 v26 = v24 + 1;
  }
  else {
    unsigned __int16 v26 = v24;
  }
  char v27 = [PLModelMigrationActionProcessor alloc];
  id v28 = [(PLModelMigrator *)self pathManager];
  long long v29 = [(PLModelMigrator *)self analyticsEventManager];
  uint64_t v30 = [(PLModelMigrator *)self migrationLogger];
  id v78 = v16;
  long long v31 = [(PLModelMigrationActionProcessor *)v27 initWithUUID:v16 pathManager:v28 migrationActionType:4 analyticsEventManager:v29 logger:v30 progressUnitCount:v26];

  long long v32 = [(PLModelMigrationActionProcessor *)v31 progress];

  if (v32)
  {
    __int16 v33 = [(PLModelMigrationActionProcessor *)v31 progress];
    [v79 addChild:v33 withPendingUnitCount:a9];
  }
  context = (void *)MEMORY[0x19F38D3B0]();
  v102[0] = MEMORY[0x1E4F143A8];
  v102[1] = 3221225472;
  v102[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke;
  v102[3] = &unk_1E5871CA0;
  v102[4] = self;
  id v34 = v74;
  id v103 = v34;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Populating duration and HDR type on assets" ifRequired:v11 == 8000 block:v102];
  v100[0] = MEMORY[0x1E4F143A8];
  v100[1] = 3221225472;
  v100[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_2;
  v100[3] = &unk_1E5871CA0;
  v100[4] = self;
  id v35 = v34;
  id v101 = v35;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating transformable UUIDs to strings" ifRequired:v11 == 8012 block:v100];
  v98[0] = MEMORY[0x1E4F143A8];
  v98[1] = 3221225472;
  v98[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_3;
  v98[3] = &unk_1E5871CA0;
  v98[4] = self;
  id v36 = v35;
  id v99 = v36;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Populate synced orderKeys for albums and folders" ifRequired:v22 block:v98];
  v96[0] = MEMORY[0x1E4F143A8];
  v96[1] = 3221225472;
  v96[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_4;
  v96[3] = &unk_1E5871CA0;
  v96[4] = self;
  id v37 = v36;
  id v97 = v37;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Populating videoCpVisibilityState and videoCpDurationValue on assets" ifRequired:v11 == 9049 block:v96];
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 3221225472;
  v94[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_5;
  v94[3] = &unk_1E5871CA0;
  v94[4] = self;
  id v38 = v37;
  id v95 = v38;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating PLCloudResource relationships" ifRequired:v11 == 9300 block:v94];
  v92[0] = MEMORY[0x1E4F143A8];
  v92[1] = 3221225472;
  v92[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_6;
  v92[3] = &unk_1E5871CA0;
  v92[4] = self;
  id v39 = v38;
  id v93 = v39;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating originalColorSpace" ifRequired:v11 == 10113 block:v92];
  v90[0] = MEMORY[0x1E4F143A8];
  v90[1] = 3221225472;
  v90[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_7;
  v90[3] = &unk_1E5871CA0;
  v90[4] = self;
  id v40 = v39;
  id v91 = v40;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating keywords" ifRequired:v11 == 10123 block:v90];
  v88[0] = MEMORY[0x1E4F143A8];
  v88[1] = 3221225472;
  v88[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_8;
  v88[3] = &unk_1E5871CA0;
  v88[4] = self;
  id v41 = v40;
  id v89 = v41;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating rejectedFacesGroup" ifRequired:v11 == 10405 block:v88];
  v86[0] = MEMORY[0x1E4F143A8];
  v86[1] = 3221225472;
  v86[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_9;
  v86[3] = &unk_1E5871CA0;
  v86[4] = self;
  id v42 = v41;
  id v87 = v42;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating detecedFacesGroup" ifRequired:v11 == 10407 block:v86];
  v84[0] = MEMORY[0x1E4F143A8];
  v84[1] = 3221225472;
  v84[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_10;
  v84[3] = &unk_1E5871CA0;
  v84[4] = self;
  id v43 = v42;
  id v85 = v43;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Emptying resources tables" ifRequired:v11 == 12329 block:v84];
  v82[0] = MEMORY[0x1E4F143A8];
  v82[1] = 3221225472;
  v82[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_11;
  v82[3] = &unk_1E5871CA0;
  v82[4] = self;
  id v44 = v43;
  id v83 = v44;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating video key frame values from MediaAnalysisTable to Asset table" ifRequired:v75 block:v82];
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 3221225472;
  v80[2] = __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_12;
  v80[3] = &unk_1E5871CA0;
  v80[4] = self;
  id v45 = v44;
  id v81 = v45;
  [(PLModelMigrationActionProcessor *)v31 performActionWithName:@"Migrating UTI and Codec from relationship to table integrated values" ifRequired:v11 == 15062 block:v80];
  if ([(PLModelMigrationActionProcessor *)v31 isSuccess])
  {
    os_log_type_t v46 = PLMigrationGetLog();
    BOOL v47 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);

    uint64_t v48 = v78;
    if (!v47) {
      goto LABEL_60;
    }
    BOOL v49 = [(PLModelMigrator *)self migrationLogger];

    if (v49)
    {
      long long v139 = 0u;
      long long v138 = 0u;
      long long v137 = 0u;
      long long v136 = 0u;
      long long v135 = 0u;
      long long v134 = 0u;
      long long v133 = 0u;
      long long v132 = 0u;
      long long v131 = 0u;
      long long v130 = 0u;
      long long v129 = 0u;
      long long v128 = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      long long v124 = 0u;
      long long v125 = 0u;
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v109 = 0u;
      char v50 = PLMigrationGetLog();
      os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
      int v104 = 67109376;
      int v105 = v73;
      __int16 v106 = 1024;
      int v107 = v11;
      LODWORD(v72) = 14;
      id v51 = (uint8_t *)_os_log_send_and_compose_impl();

      double v52 = [(PLModelMigrator *)self migrationLogger];
      long long v53 = v52;
      char v54 = v51;
      uint64_t v55 = 4993;
      uint64_t v56 = 0;
      goto LABEL_52;
    }
    long long v61 = PLMigrationGetLog();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v73;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v11;
      long long v62 = "Successfully processed lightweight migration stage of photo database from version %d to %d.";
      long long v63 = v61;
      os_log_type_t v64 = OS_LOG_TYPE_DEFAULT;
LABEL_58:
      _os_log_impl(&dword_19B3C7000, v63, v64, v62, buf, 0xEu);
      goto LABEL_59;
    }
    goto LABEL_59;
  }
  [(PLModelMigrationActionProcessor *)v31 setSuccess:0];
  __int16 v57 = PLMigrationGetLog();
  BOOL v58 = os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);

  uint64_t v48 = v78;
  if (!v58) {
    goto LABEL_60;
  }
  long long v59 = [(PLModelMigrator *)self migrationLogger];

  if (!v59)
  {
    long long v61 = PLMigrationGetLog();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v73;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v11;
      long long v62 = "Failed to process lightweight migration stage of photo database from version %d to %d.  Requires full database rebuild.";
      long long v63 = v61;
      os_log_type_t v64 = OS_LOG_TYPE_ERROR;
      goto LABEL_58;
    }
LABEL_59:

    goto LABEL_60;
  }
  long long v139 = 0u;
  long long v138 = 0u;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  long long v128 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v109 = 0u;
  long long v60 = PLMigrationGetLog();
  os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
  int v104 = 67109376;
  int v105 = v73;
  __int16 v106 = 1024;
  int v107 = v11;
  LODWORD(v72) = 14;
  id v51 = (uint8_t *)_os_log_send_and_compose_impl();

  double v52 = [(PLModelMigrator *)self migrationLogger];
  long long v53 = v52;
  char v54 = v51;
  uint64_t v55 = 4996;
  uint64_t v56 = 16;
LABEL_52:
  objc_msgSend(v52, "logWithMessage:fromCodeLocation:type:", v54, "PLModelMigrator.m", v55, v56);

  if (v51 != buf) {
    free(v51);
  }
LABEL_60:

  BOOL v65 = [(PLModelMigrationActionProcessor *)v31 isSuccess];

  return v65;
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateDurationAndHDRTypeFromAdditionalAssetAttributesInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateTransformableUUIDsToStringsInStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateAlbumAndFolderOrderKeysInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateVideoCpFieldsInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_5(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateCloudResourcesRelationshipsInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_6(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateOriginalColorSpaceInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_7(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixKeywordsInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateRejectedFacesGroupInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_9(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateDetectedFacesGroupInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_10(uint64_t a1)
{
  return [*(id *)(a1 + 32) _emptyResourceTablesInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_11(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateVideoKeyFrameTimeValuesInStagedStore:*(void *)(a1 + 40)];
}

uint64_t __140__PLModelMigrator_processWelterweightMigrationStageOnStore_migrationUUID_fromVersion_toVersion_migrationContext_progress_progressUnitCount___block_invoke_12(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateResourceUTIAndCodecInStagedStore:*(void *)(a1 + 40)];
}

- (void)postProcessFixesAfterOTARestoreForCompleteAsset:(id)a3 fixAddedDate:(BOOL)a4 isMegaBackup:(BOOL)a5
{
  BOOL v6 = a4;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  if (PLIsAssetsd())
  {
    if (a5)
    {
LABEL_3:
      int v10 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v12 = NSStringFromSelector(a2);
    [v11 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 4792, @"%@ only valid in assetsd!", v12 object file lineNumber description];

    if (a5) {
      goto LABEL_3;
    }
  }
  int v10 = [v9 hasAllThumbs];
LABEL_6:
  long long v13 = PLMigrationGetLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    NSStringFromSelector(a2);
    long long v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
    long long v15 = [v9 filename];
    id v16 = [v9 uuid];
    uint64_t v17 = [v9 objectID];
    *(_DWORD *)long long buf = 138413314;
    id v51 = v14;
    __int16 v52 = 2112;
    id v53 = v15;
    __int16 v54 = 2112;
    uint64_t v55 = v16;
    __int16 v56 = 2112;
    __int16 v57 = v17;
    __int16 v58 = 1024;
    int v59 = v10 ^ 1;
    _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "%@ for %@ %@ (%@), shouldGenerateThumbnails: %d", buf, 0x30u);
  }
  BOOL v18 = (void *)MEMORY[0x19F38D3B0]();
  __int16 v19 = [v9 addedDate];

  if (v19)
  {
    if (v6) {
      [(PLModelMigrator *)self fixPossiblyIncorrectAddedDateForAsset:v9];
    }
  }
  else
  {
    __int16 v20 = [v9 dateCreated];
    [v9 setAddedDate:v20];
  }
  if ([v9 hasAdjustments]) {
    [v9 adjustmentTimestamp];
  }
  else {
  id v21 = [v9 dateCreated];
  }
  BOOL v22 = [(PLModelMigrator *)self _dateForVariations];
  uint64_t v23 = [v22 compare:v21];

  if ([v9 isVideo])
  {
    [(PLModelMigrator *)self _fixVideoDimensionsForAsset:v9];
    if ([v9 kindSubtype] == 101)
    {
      [MEMORY[0x1E4F8BA10] maskForMigrateLegacyVideoAdjustmentsExclusions];
      [v9 savedAssetType];
      if ((PLValidatedSavedAssetTypeApplies() & 1) == 0)
      {
        int v24 = [(PLModelMigrator *)self _migrateLegacySlomoAdjustmentsForAsset:v9];
        if (v24)
        {
          int v25 = v24;
          unsigned __int16 v26 = PLMigrationGetLog();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            char v27 = @"to default";
            if (v25 == 1) {
              char v27 = @"from SLM";
            }
            *(_DWORD *)long long buf = 138412290;
            id v51 = v27;
            _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_DEFAULT, "Migrated slomo adjustment %@", buf, 0xCu);
          }
        }
      }
    }
    if (v23 == -1) {
      [(PLModelMigrator *)self _identifyVariationsAndDepthAdjustmentsForAsset:v9];
    }
    goto LABEL_40;
  }
  if (![v9 isPhoto])
  {
    if (![v9 isUnknown]) {
      goto LABEL_40;
    }
    int v29 = [v9 promoteFromUnknownKind];
    uint64_t v30 = PLMigrationGetLog();
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      if (v31)
      {
        long long v32 = [v9 filename];
        __int16 v33 = [v9 uuid];
        int v34 = [v9 kind];
        *(_DWORD *)long long buf = 138412802;
        id v51 = v32;
        __int16 v52 = 2112;
        id v53 = v33;
        __int16 v54 = 1024;
        LODWORD(v55) = v34;
        id v35 = "Promoted unkown asset %@ %@ to type %d";
        id v36 = v30;
        uint32_t v37 = 28;
LABEL_38:
        _os_log_impl(&dword_19B3C7000, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
      }
    }
    else if (v31)
    {
      long long v32 = [v9 filename];
      __int16 v33 = [v9 uuid];
      *(_DWORD *)long long buf = 138412546;
      id v51 = v32;
      __int16 v52 = 2112;
      id v53 = v33;
      id v35 = "Failed to promote unknown asset %@ %@";
      id v36 = v30;
      uint32_t v37 = 22;
      goto LABEL_38;
    }

    goto LABEL_40;
  }
  [v9 updateKindSubtypeIfScreenshot];
  id v28 = [v9 metadataFromMediaPropertiesOrOriginalResource];
  [v9 setCameraCaptureDeviceFromMetadata:v28];
  [(PLModelMigrator *)self _populateFaceRegionsForAsset:v9];
  [v9 updatePlaybackVariationAndStyleFromOriginalMetadata:v28];
  [(PLModelMigrator *)self _fixIncorrectHeifMetadataForAsset:v9];
  if (v23 == -1 && (([v9 hasAdjustments] & 1) != 0 || objc_msgSend(v9, "isPhotoIris"))) {
    [(PLModelMigrator *)self _identifyVariationsAndDepthAdjustmentsForAsset:v9];
  }

LABEL_40:
  [v9 migrateLocationDataIfNeededAfterOTARestore:1];
  [v9 persistMetadataToFilesystem];
  if ((v10 & 1) == 0)
  {
    id v38 = [v9 persistedResourcesMatching:&__block_literal_global_1300];
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = __93__PLModelMigrator_postProcessFixesAfterOTARestoreForCompleteAsset_fixAddedDate_isMegaBackup___block_invoke_2;
    void v48[3] = &unk_1E5868AA8;
    id v39 = (__CFString *)v9;
    BOOL v49 = v39;
    [v38 enumerateObjectsUsingBlock:v48];
    [(__CFString *)v39 generateAndUpdateThumbnailsWithPreviewImage:0 thumbnailImage:0 fromImageSource:0 imageData:0 forceSRGBConversion:0];
    id v47 = 0;
    BOOL v40 = +[PLResourceInstaller installInternalResourcesForExistingAsset:v39 assumeNoExistingResources:0 referencedResourceURLs:0 error:&v47];
    id v41 = v47;
    if (!v40)
    {
      id v42 = PLMigrationGetLog();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        id v51 = v39;
        __int16 v52 = 2112;
        id v53 = v41;
        _os_log_impl(&dword_19B3C7000, v42, OS_LOG_TYPE_ERROR, "Failed to install resources after OTA restore of asset: %@, reason: %@", buf, 0x16u);
      }
    }
    [(__CFString *)v39 setDeferredProcessingNeeded:[(__CFString *)v39 expectedDeferredProcessingNeededOnAssetCreation]];
    if ([(__CFString *)v39 deferredProcessingNeeded])
    {
      id v43 = [(__CFString *)v39 photoLibrary];
      id v44 = [v43 libraryServicesManager];
      id v45 = [v44 backgroundJobService];
      os_log_type_t v46 = [(__CFString *)v39 photoLibrary];
      [v45 signalBackgroundProcessingNeededOnLibrary:v46];
    }
  }
}

void __93__PLModelMigrator_postProcessFixesAfterOTARestoreForCompleteAsset_fixAddedDate_isMegaBackup___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 managedObjectContext];
  [v4 deleteObject:v3];
}

uint64_t __93__PLModelMigrator_postProcessFixesAfterOTARestoreForCompleteAsset_fixAddedDate_isMegaBackup___block_invoke(uint64_t a1, void *a2)
{
  return [a2 recipeID] & 1;
}

- (BOOL)_shouldTriggerLightweightMigrationFailureForInternalTesting
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!MEMORY[0x19F38BDA0](self, a2)) {
    return 0;
  }
  id v3 = [(PLModelMigrator *)self pathManager];
  id v4 = [v3 photoDirectoryWithType:33];
  uint64_t v5 = [v4 stringByAppendingPathComponent:@"lightweightfail"];

  BOOL v6 = [(PLModelMigrator *)self pathManager];
  uint64_t v7 = [v6 photoDirectoryWithType:33];
  id v8 = [v7 stringByAppendingPathComponent:@"lightweightcrash"];

  id v9 = [MEMORY[0x1E4F28CB8] defaultManager];
  LODWORD(v7) = [v9 fileExistsAtPath:v5];

  int v10 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v11 = v10;
  if (v7)
  {
    id v24 = 0;
    int v12 = [v10 removeItemAtPath:v5 error:&v24];
    id v13 = v24;

    long long v14 = PLMigrationGetLog();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (v12)
    {
      if (v15)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "[INTERNAL ONLY] Found lightweightfail indicator file, forcing lightweight migration to fail (assetsd will rebuild w/o crashing)", buf, 2u);
      }
      BOOL v16 = 1;
      goto LABEL_16;
    }
    if (v15)
    {
      *(_DWORD *)long long buf = 138412290;
      id v26 = v13;
      id v21 = "[INTERNAL ONLY] Unable to remove lightweightfail indicator file - ignoring! %@";
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  int v17 = [v10 fileExistsAtPath:v8];

  if (!v17)
  {
    BOOL v16 = 0;
    goto LABEL_18;
  }
  BOOL v18 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v23 = 0;
  int v19 = [v18 removeItemAtPath:v8 error:&v23];
  id v13 = v23;

  long long v14 = PLMigrationGetLog();
  BOOL v20 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (!v19)
  {
    if (v20)
    {
      *(_DWORD *)long long buf = 138412290;
      id v26 = v13;
      id v21 = "[INTERNAL ONLY] Unable to remove lightweightcrash indicator file - ignoring! %@";
LABEL_14:
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
    }
LABEL_15:
    BOOL v16 = 0;
LABEL_16:

LABEL_18:
    return v16;
  }
  if (v20)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "[INTERNAL ONLY] Found lightweightcrash indicator file, forcing lightweight migration to crash (assetsd will rebuild after restarting)", buf, 2u);
  }

  qword_1E93E3018 = (uint64_t)"[INTERNAL ONLY] Found lightweightcrash indicator file, forcing lightweight migration to cra"
                             "sh (assetsd will rebuild after restarting)";
  __break(1u);
  return result;
}

- (BOOL)postProcessMigratedStore:(id)a3 migrationUUID:(id)a4 fromVersion:(int)a5 progress:(id)a6 progressUnitCount:(unint64_t)a7
{
  uint64_t v996 = *MEMORY[0x1E4F143B8];
  id v451 = a3;
  id v523 = a4;
  id v507 = a6;
  if ((PLIsAssetsd() & 1) == 0)
  {
    v434 = [MEMORY[0x1E4F28B00] currentHandler];
    v435 = NSStringFromSelector(a2);
    [v434 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 3288, @"%@ only valid in assetsd!", v435 object file lineNumber description];
  }
  int v13 = postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount__postProcessMigratedStoreGuard;
  if (postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount__postProcessMigratedStoreGuard >= 1)
  {
    long long v14 = PLMigrationGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount__postProcessMigratedStoreGuard;
      BOOL v16 = [MEMORY[0x1E4F29060] callStackSymbols];
      v965[0] = 67109634;
      v965[1] = v15;
      LOWORD(v965[2]) = 2112;
      *(void *)((char *)&v965[2] + 2) = 0;
      HIWORD(v965[4]) = 2112;
      *(void *)&v965[5] = v16;
      _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_ERROR, "Violating post processing guard (%d), postProcessMigratedStore:fromVersion: should never run simultaneously:\n\n----------------------PREVIOUS STACK %@\n\n-------------------CURRENT STACK %@", (uint8_t *)v965, 0x1Cu);
    }
    int v13 = postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount__postProcessMigratedStoreGuard;
  }
  postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount__postProcessMigratedStoreGuard = v13 + 1;
  [(PLModelMigrator *)self _setIsPostProcessingLightWeightMigration:1];
  HIDWORD(v438) = +[PLModelMigrator currentModelVersion];
  if (SHIDWORD(v438) <= a5)
  {
    v436 = [MEMORY[0x1E4F28B00] currentHandler];
    [v436 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:3302 description:@"Previous store version must be less than current version"];
  }
  if (a5 <= 6005)
  {
    v437 = [MEMORY[0x1E4F28B00] currentHandler];
    [v437 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:3303 description:@"Previous store version is unsupported"];
  }
  uint64_t v17 = MEMORY[0x19F38D3B0]();
  BOOL v18 = PLMigrationGetLog();
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);

  if (v19)
  {
    BOOL v20 = [(PLModelMigrator *)self migrationLogger];

    if (v20)
    {
      long long v994 = 0u;
      long long v995 = 0u;
      long long v992 = 0u;
      long long v993 = 0u;
      long long v990 = 0u;
      long long v991 = 0u;
      long long v988 = 0u;
      long long v989 = 0u;
      long long v986 = 0u;
      long long v987 = 0u;
      long long v984 = 0u;
      long long v985 = 0u;
      long long v982 = 0u;
      long long v983 = 0u;
      long long v980 = 0u;
      long long v981 = 0u;
      long long v978 = 0u;
      long long v979 = 0u;
      long long v976 = 0u;
      long long v977 = 0u;
      long long v974 = 0u;
      long long v975 = 0u;
      long long v972 = 0u;
      long long v973 = 0u;
      long long v970 = 0u;
      long long v971 = 0u;
      long long v968 = 0u;
      long long v969 = 0u;
      long long v966 = 0u;
      long long v967 = 0u;
      memset(v965, 0, sizeof(v965));
      id v21 = PLMigrationGetLog();
      os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
      int v961 = 67109376;
      int v962 = a5;
      __int16 v963 = 1024;
      int v964 = HIDWORD(v438);
      LODWORD(v438) = 14;
      BOOL v22 = (_DWORD *)_os_log_send_and_compose_impl();

      id v23 = [(PLModelMigrator *)self migrationLogger];
      objc_msgSend(v23, "logWithMessage:fromCodeLocation:type:", v22, "PLModelMigrator.m", 3316, 1);

      if (v22 != v965) {
        free(v22);
      }
    }
    else
    {
      id v24 = PLMigrationGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v965[0] = 67109376;
        v965[1] = a5;
        LOWORD(v965[2]) = 1024;
        *(_DWORD *)((char *)&v965[2] + 2) = HIDWORD(v438);
        _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_INFO, "Beginning post-processing lightweight migration from %d to %d", (uint8_t *)v965, 0xEu);
      }
    }
  }
  unsigned int v25 = a5 - 16040;
  int v26 = _os_feature_enabled_impl();
  if (a5 < 17038) {
    int v27 = v26;
  }
  else {
    int v27 = 0;
  }
  int v504 = PLPlatformMomentsSupported();
  BOOL v28 = v25 < 0x8D;
  if (v25 < 0x8D) {
    int v29 = 1;
  }
  else {
    int v29 = v27;
  }
  if (a5 < 13340) {
    int v30 = 1;
  }
  else {
    int v30 = v29;
  }
  int v494 = v30;
  int v31 = PLPlatformMomentsSupported() & v30;
  if (v31) {
    int v32 = 2;
  }
  else {
    int v32 = 1;
  }
  if (a5 == 6006) {
    int v33 = v32;
  }
  else {
    int v33 = v31;
  }
  BOOL v34 = [(PLModelMigrator *)self isCloudPhotoLibraryEnabled];
  id v35 = [(PLModelMigrator *)self pathManager];
  unsigned int v445 = [v35 isDeviceRestoreSupported];

  id v36 = [(PLModelMigrator *)self pathManager];
  int v37 = [v36 isDeviceRestoreSupported];

  int v38 = v33 + v37;
  context = (void *)v17;
  BOOL v446 = v28;
  unint64_t v483 = a7;
  if (a5 < 12136 || (a5 - 13001) <= 0x103)
  {
    unsigned int v439 = PLPlatformSearchSupported();
    v38 += PLPlatformSearchSupported();
  }
  else
  {
    unsigned int v439 = 0;
  }
  __int16 v39 = a5 < 8006;
  unsigned int v40 = a5 - 9000;
  BOOL v41 = a5 >= 8023 && (a5 - 9306) >= 0x460;
  unsigned int v521 = a5 - 11000;
  unsigned int v43 = !v41 || (a5 - 11000) < 0x13;
  unsigned int v509 = a5 - 9000;
  if (v40 < 0x2C) {
    uint64_t v44 = 1;
  }
  else {
    uint64_t v44 = v43;
  }
  BOOL v45 = v40 < 0x2C || a5 < 8062;
  BOOL v46 = a5 < 8044 && !v34;
  if (a5 < 8008) {
    ++v39;
  }
  if (a5 < 8011) {
    ++v39;
  }
  if (a5 < 8027) {
    ++v39;
  }
  if (a5 < 8029) {
    ++v39;
  }
  if (a5 < 8030) {
    ++v39;
  }
  if (a5 < 8061) {
    ++v39;
  }
  if (a5 < 8033) {
    ++v39;
  }
  if (a5 < 8045) {
    ++v39;
  }
  if (a5 < 8046) {
    ++v39;
  }
  if (a5 < 8052) {
    ++v39;
  }
  __int16 v47 = v39 + ((a5 < 8027) ^ (a5 < 8049));
  if ((a5 - 8047) < 4) {
    ++v47;
  }
  BOOL v449 = v45;
  uint64_t v448 = v44;
  BOOL v453 = v46;
  __int16 v48 = v47 + v45 + v44 + v46 + v38;
  BOOL v49 = a5 < 8058 && v34;
  char v50 = [(PLModelMigrator *)self pathManager];
  int v51 = [v50 isDeviceRestoreSupported];

  if (v51)
  {
    __int16 v52 = [(PLModelMigrator *)self deviceRestoreMigrationSupport];
    if ([v52 isRestoreFromBackupSourceCloud])
    {
      id v53 = [(PLModelMigrator *)self postProcessingToken];
      int v54 = [v53 isModelMigrationRestorePostProcessingComplete] ^ 1;
    }
    else
    {
      int v54 = 0;
    }
  }
  else
  {
    int v54 = 0;
  }
  BOOL v450 = v49;
  if (v49) {
    __int16 v55 = 2;
  }
  else {
    __int16 v55 = 1;
  }
  if (a5 >= 8058) {
    __int16 v55 = 0;
  }
  __int16 v56 = a5 < 8064;
  if (a5 < 8065) {
    ++v56;
  }
  BOOL v57 = a5 >= 8200 && (a5 - 8300) >= 3;
  uint64_t v58 = !v57;
  uint64_t v452 = v58;
  if (!v57) {
    ++v56;
  }
  __int16 v59 = v56 + v55;
  unsigned int v60 = a5 & 0xFFFFFFFE;
  BOOL v61 = a5 < 8101 || v60 == 8200;
  uint64_t v62 = v61;
  uint64_t v443 = v62;
  BOOL v63 = v61 && v34;
  BOOL v454 = v63;
  if (v61) {
    __int16 v64 = v34 + 1;
  }
  else {
    __int16 v64 = v34;
  }
  if (!v61) {
    __int16 v64 = 0;
  }
  __int16 v65 = v59 + v64 + v48;
  char v520 = v54;
  if (a5 < 8302) {
    uint64_t v66 = v54 ^ 1u;
  }
  else {
    uint64_t v66 = 0;
  }
  __int16 v67 = a5 < 8304;
  BOOL v68 = a5 < 9015 && v34;
  BOOL v69 = a5 < 9009 && v34;
  BOOL v456 = v69;
  BOOL v70 = a5 < 9051 && v34;
  if (a5 < 8312) {
    ++v67;
  }
  if (a5 < 9001) {
    ++v67;
  }
  if (a5 < 9004) {
    ++v67;
  }
  if (a5 < 9010) {
    ++v67;
  }
  if (a5 < 9011) {
    ++v67;
  }
  if (a5 < 9023) {
    ++v67;
  }
  if (a5 < 9031) {
    ++v67;
  }
  if (a5 < 9037) {
    ++v67;
  }
  if (a5 < 9041) {
    ++v67;
  }
  if (a5 < 9042) {
    ++v67;
  }
  if (a5 < 9046) {
    ++v67;
  }
  if (a5 < 9047) {
    ++v67;
  }
  if (a5 < 9048) {
    ++v67;
  }
  if (a5 < 9201) {
    ++v67;
  }
  if (a5 < 9204) {
    ++v67;
  }
  if (v509 < 0x22) {
    ++v67;
  }
  if (v509 < 0x28) {
    ++v67;
  }
  BOOL v71 = a5 < 8318 || v60 == 9000;
  uint64_t v72 = v71;
  uint64_t v455 = v72;
  __int16 v73 = v67 + ((a5 < 8029) ^ (a5 < 9038));
  if (v71) {
    ++v73;
  }
  BOOL v459 = v70;
  BOOL v457 = v68;
  uint64_t v444 = v66;
  __int16 v74 = v68 + v70 + v65 + v66;
  if (a5 >= 9205) {
    __int16 v75 = 0;
  }
  else {
    __int16 v75 = 3;
  }
  __int16 v76 = v73 + v74 + v75;
  BOOL v463 = [(PLModelMigrator *)self sceneStepRequiredForPreviousStoreVersion:a5];
  __int16 v77 = [(PLModelMigrator *)self sceneStepRequiredForPreviousStoreVersion:a5];
  char v78 = 0;
  BOOL v79 = a5 < 10067 && v34;
  if (a5 >= 10027) {
    __int16 v80 = a5 < 9302;
  }
  else {
    __int16 v80 = (a5 < 9302) + 1;
  }
  unsigned int v81 = a5 - 10000;
  if (a5 < 10036) {
    ++v80;
  }
  if (a5 < 10041) {
    ++v80;
  }
  if (a5 < 10065) {
    ++v80;
  }
  if (a5 < 10070) {
    ++v80;
  }
  if (a5 < 10079) {
    ++v80;
  }
  if (a5 < 10088) {
    ++v80;
  }
  if (a5 < 10102) {
    ++v80;
  }
  if (a5 < 10106) {
    ++v80;
  }
  if (a5 < 10109) {
    ++v80;
  }
  if (a5 < 10112) {
    ++v80;
  }
  if (v81 < 0x25) {
    ++v80;
  }
  if ((a5 & 0xFFFFFFFC) == 0x2754) {
    ++v80;
  }
  if (v81 < 0x67) {
    ++v80;
  }
  unsigned int v447 = a5 - 10000;
  if (v81 < 0x75) {
    ++v80;
  }
  BOOL v460 = v79;
  __int16 v82 = v80 + v79 + v77;
  BOOL v461 = a5 < 10118 && v34;
  if (v461) {
    __int16 v83 = 2;
  }
  else {
    __int16 v83 = 0;
  }
  __int16 v502 = v82 + v83 + v76;
  unsigned int v458 = a5 & 0xFFFFFFFE;
  BOOL v84 = a5 < 10151 && v34;
  BOOL v511 = v84;
  unsigned int v508 = a5 - 11001;
  BOOL v85 = (a5 - 11001) < 0x30 || a5 < 10203;
  BOOL v510 = v85;
  BOOL v87 = a5 < 10300 || (a5 - 10400) < 3;
  BOOL v514 = v87;
  BOOL v89 = a5 < 10427 || v521 < 0x17;
  BOOL v513 = v89;
  BOOL v90 = a5 < 11007 && v34;
  BOOL v516 = v90;
  BOOL v91 = a5 < 11011 && v34;
  BOOL v515 = v91;
  BOOL v92 = (a5 - 11014) < 7 && v34;
  BOOL v517 = v92;
  BOOL v94 = a5 < 10428 || v521 < 0x1B;
  BOOL v512 = v94;
  BOOL v95 = (a5 - 11004) < 0x1B && v34;
  BOOL v518 = v95;
  BOOL v96 = a5 == 11038 && v34;
  BOOL v519 = v96;
  if (a5 < 11043 && v34) {
    char v78 = [MEMORY[0x1E4F59840] serverSupportsVision];
  }
  char v465 = v78;
  BOOL v464 = [(PLModelMigrator *)self faceQualityResetRequiredForPreviousStoreVersion:a5];
  __int16 v98 = [(PLModelMigrator *)self faceQualityResetRequiredForPreviousStoreVersion:a5];
  BOOL v99 = (a5 - 11048) < 0x10 && v34;
  BOOL v100 = a5 < 11074 && v34;
  BOOL v101 = a5 < 11075 && v34;
  BOOL v102 = a5 < 11076 && v34;
  BOOL v103 = a5 < 11077 && v34;
  BOOL v104 = a5 < 11081 && v34;
  BOOL v105 = a5 < 11089 && v34;
  BOOL v106 = a5 < 13016 && v34;
  __int16 v107 = (a5 < 10150)
       + (a5 < 10123)
       + (a5 < 10203)
       + (a5 < 10204)
       + (a5 < 10206)
       + (a5 < 10207)
       + (a5 < 11000)
       + (a5 < 11001)
       + (a5 < 11022)
       + (a5 < 11024)
       + (a5 < 11025)
       + (a5 < 11043);
  if (a5 < 11047) {
    ++v107;
  }
  if (a5 < 11048) {
    ++v107;
  }
  if (a5 < 11049) {
    ++v107;
  }
  if (a5 < 11052) {
    ++v107;
  }
  if (a5 < 11060) {
    ++v107;
  }
  if (a5 < 11061) {
    ++v107;
  }
  char v108 = !v34;
  if (a5 < 11063) {
    ++v107;
  }
  if (a5 < 11068) {
    ++v107;
  }
  if (a5 < 11069) {
    ++v107;
  }
  if (a5 < 11070) {
    ++v107;
  }
  if (a5 < 11079) {
    ++v107;
  }
  if (a5 < 11080) {
    ++v107;
  }
  if (a5 < 11200) {
    ++v107;
  }
  if (a5 < 11203) {
    ++v107;
  }
  if (a5 < 12000)
  {
    ++v107;
    char v108 = 1;
  }
  if (a5 < 12035) {
    ++v107;
  }
  if (a5 < 13027) {
    ++v107;
  }
  if (a5 < 13036) {
    ++v107;
  }
  if (a5 < 13050) {
    ++v107;
  }
  if (a5 < 12036) {
    ++v107;
  }
  __int16 v109 = v107 + (v60 == 10124) + ((a5 - 11022) < 4) + ((a5 - 10425) < 0x25B);
  if (v508 < 0x40) {
    ++v109;
  }
  if ((a5 - 10075) >= 0x3F1) {
    __int16 v110 = v109;
  }
  else {
    __int16 v110 = v109 + 1;
  }
  unsigned int v111 = a5 - 12000;
  if ((a5 - 11079) < 0xC) {
    ++v110;
  }
  unsigned int v112 = a5 - 13000;
  BOOL v113 = v111 >= 0x42 && v112 >= 0x1A;
  uint64_t v114 = !v113;
  uint64_t v472 = v114;
  __int16 v115 = v110 + v510 + v514 + v513 + v512;
  if (!v113) {
    ++v115;
  }
  BOOL v116 = v111 >= 0x40 && v112 >= 0x15;
  uint64_t v117 = !v116;
  uint64_t v473 = v117;
  if (!v116) {
    ++v115;
  }
  BOOL v118 = v111 >= 0x58 && v112 >= 0x38;
  uint64_t v119 = !v118;
  uint64_t v477 = v119;
  if (!v118) {
    ++v115;
  }
  BOOL v466 = v100;
  BOOL v467 = v101;
  BOOL v468 = v102;
  BOOL v469 = v103;
  BOOL v470 = v104;
  BOOL v471 = v105;
  BOOL v474 = v106;
  BOOL v462 = v99;
  __int16 v120 = v115
       + v511
       + v516
       + v515
       + v519
       + v100
       + v101
       + v102
       + v103
       + v104
       + v105
       + v106
       + v517
       + v518
       + v99
       + v502
       + v98;
  BOOL v122 = a5 >= 0x2F3E && a5 != 12097 && v112 >= 0x3E;
  uint64_t v123 = !v122;
  if (v122) {
    __int16 v124 = v120;
  }
  else {
    __int16 v124 = v120 + 1;
  }
  BOOL v125 = (v108 & 1) == 0;
  if (v108) {
    uint64_t v126 = 0;
  }
  else {
    uint64_t v126 = v123;
  }
  uint64_t v476 = v126;
  if (v125) {
    __int16 v127 = v124;
  }
  else {
    __int16 v127 = v120;
  }
  __int16 v128 = a5 < 13089;
  BOOL v129 = a5 < 13180 && v34;
  if (a5 < 13099) {
    ++v128;
  }
  if (a5 < 13103) {
    ++v128;
  }
  if (a5 < 13106) {
    ++v128;
  }
  if (a5 < 13117) {
    ++v128;
  }
  if (a5 < 13119) {
    ++v128;
  }
  if (a5 < 13137) {
    ++v128;
  }
  if (a5 < 13152) {
    ++v128;
  }
  if (a5 < 13187) {
    ++v128;
  }
  BOOL v130 = v111 >= 0x77 && v112 >= 0x46;
  uint64_t v131 = !v130;
  uint64_t v475 = v131;
  if (!v130) {
    ++v128;
  }
  BOOL v132 = v111 >= 0x7D && v112 >= 0x52;
  uint64_t v133 = !v132;
  uint64_t v478 = v133;
  if (!v132) {
    ++v128;
  }
  BOOL v480 = v129;
  __int16 v134 = v128 + v129 + v127;
  BOOL v135 = v111 >= 0x12C && v112 >= 0xBC;
  uint64_t v136 = !v135;
  if (v135) {
    __int16 v137 = v134;
  }
  else {
    __int16 v137 = v134 + 1;
  }
  if (!v34) {
    uint64_t v136 = 0;
  }
  uint64_t v481 = v136;
  if (v34) {
    __int16 v138 = v137;
  }
  else {
    __int16 v138 = v134;
  }
  unsigned int v139 = PLPlatformExtendedAttributesSupported();
  __int16 v140 = PLPlatformExtendedAttributesSupported();
  if (v112 < 0xFA) {
    uint64_t v141 = v139;
  }
  else {
    uint64_t v141 = 0;
  }
  if (v112 < 0xFA) {
    __int16 v142 = v140;
  }
  else {
    __int16 v142 = 0;
  }
  BOOL v143 = (a5 - 13355) < 0x9D && v34;
  if (a5 >= 13193) {
    __int16 v144 = a5 < 13191;
  }
  else {
    __int16 v144 = (a5 < 13191) + 1;
  }
  if (a5 < 13195) {
    ++v144;
  }
  if (a5 < 13196) {
    ++v144;
  }
  if (a5 < 13200) {
    ++v144;
  }
  if (a5 < 13307) {
    ++v144;
  }
  if (a5 < 13222) {
    ++v144;
  }
  if (a5 < 13242) {
    ++v144;
  }
  if (a5 < 13301) {
    ++v144;
  }
  if (a5 < 13304) {
    ++v144;
  }
  if (a5 < 13309) {
    ++v144;
  }
  if (a5 < 13323) {
    ++v144;
  }
  if (a5 < 13260) {
    ++v144;
  }
  if (a5 < 13351) {
    ++v144;
  }
  if (a5 < 13533) {
    ++v144;
  }
  if (a5 < 14005) {
    ++v144;
  }
  if (a5 < 14009) {
    ++v144;
  }
  if (a5 < 18083) {
    ++v144;
  }
  if (a5 < 14016) {
    ++v144;
  }
  if (a5 < 14021) {
    ++v144;
  }
  if (a5 < 14025) {
    ++v144;
  }
  if (a5 < 14027) {
    ++v144;
  }
  if (a5 < 14032) {
    ++v144;
  }
  if (a5 == 14037) {
    ++v144;
  }
  if (a5 < 14039) {
    ++v144;
  }
  if (v112 < 0xE3) {
    ++v144;
  }
  if (v112 < 0x12F) {
    ++v144;
  }
  if (v112 < 0x1F8) {
    ++v144;
  }
  if (v112 < 0x213) {
    ++v144;
  }
  if (v112 < 0x1FB) {
    ++v144;
  }
  if ((a5 - 13513) < 3) {
    ++v144;
  }
  unsigned int v145 = a5 - 15000;
  BOOL v146 = (a5 - 14021) >= 0x13 && v145 >= 3;
  uint64_t v147 = !v146;
  if (!v146) {
    ++v144;
  }
  BOOL v148 = a5 < 14043 || a5 >> 3 == 1875;
  uint64_t v149 = v148;
  if (v148) {
    ++v144;
  }
  BOOL v150 = a5 >= 14044 && v145 >= 9;
  uint64_t v151 = !v150;
  if (!v150) {
    ++v144;
  }
  BOOL v152 = a5 >= 14045 && v145 >= 0xA;
  uint64_t v153 = !v152;
  if (!v152) {
    ++v144;
  }
  BOOL v154 = (a5 - 14040) >= 6 && (a5 - 15003) >= 8;
  uint64_t v155 = !v154;
  if (!v154) {
    ++v144;
  }
  BOOL v156 = a5 >= 14047 && v145 >= 0xD;
  uint64_t v157 = !v156;
  if (!v156) {
    ++v144;
  }
  BOOL v158 = a5 >= 14051 && v145 >= 0x10;
  uint64_t v159 = !v158;
  if (!v158) {
    ++v144;
  }
  __int16 v160 = v144 + v143 + v138 + v142;
  uint64_t v497 = v159;
  uint64_t v495 = v157;
  uint64_t v492 = v155;
  uint64_t v490 = v153;
  uint64_t v488 = v151;
  uint64_t v486 = v149;
  uint64_t v485 = v147;
  BOOL v484 = v143;
  uint64_t v482 = v141;
  if ((a5 - 14001) < 0x3A || v145 <= 0x15)
  {
    v161 = [(PLModelMigrator *)self options];
    if (v161)
    {
      v162 = (void *)MEMORY[0x1E4F8B980];
      v163 = [(PLModelMigrator *)self pathManager];
      v164 = [v163 libraryURL];
      unsigned int v440 = [v162 isSystemPhotoLibraryURL:v164] ^ 1;
    }
    else
    {
      unsigned int v440 = 0;
    }

    uint64_t v165 = [(PLModelMigrator *)self options];
    if (v165)
    {
      v166 = (void *)v165;
      id v167 = (void *)MEMORY[0x1E4F8B980];
      __int16 v168 = [(PLModelMigrator *)self pathManager];
      v169 = [v168 libraryURL];
      LODWORD(v167) = [v167 isSystemPhotoLibraryURL:v169] ^ 1;

      v160 += (__int16)v167;
    }
  }
  else
  {
    unsigned int v440 = 0;
  }
  __int16 v170 = [(PLModelMigrator *)self pathManager];
  int64_t v171 = +[PLThumbnailManagerCore requiredThumbnailResetTypeWithPathManager:v170 comparedToConfigPhase:1];

  unint64_t v172 = v171 - 1;
  if (a5 >= 15059) {
    __int16 v173 = 1;
  }
  else {
    __int16 v173 = 2;
  }
  BOOL v174 = a5 >= 14060 && v145 >= 0x17;
  uint64_t v175 = !v174;
  uint64_t v487 = v175;
  if (!v174) {
    ++v173;
  }
  BOOL v176 = a5 >= 14087 && v145 >= 0x1E;
  uint64_t v177 = !v176;
  uint64_t v489 = v177;
  unsigned int v178 = a5 - 14000;
  if (!v176) {
    ++v173;
  }
  BOOL v179 = v178 >= 0x59 && v145 >= 0x20;
  uint64_t v180 = !v179;
  uint64_t v491 = v180;
  if (!v179) {
    ++v173;
  }
  BOOL v181 = a5 >= 14093 && v145 >= 0x24;
  uint64_t v182 = !v181;
  uint64_t v493 = v182;
  if (!v181) {
    ++v173;
  }
  BOOL v183 = a5 >= 14101 && v145 >= 0x26;
  uint64_t v184 = !v183;
  uint64_t v496 = v184;
  if (!v183) {
    ++v173;
  }
  BOOL v185 = a5 >= 14102 && v145 >= 0x27;
  uint64_t v186 = !v185;
  uint64_t v498 = v186;
  if (!v185) {
    ++v173;
  }
  BOOL v187 = a5 >= 14103 && v145 >= 0x28;
  uint64_t v188 = !v187;
  uint64_t v499 = v188;
  if (!v187) {
    ++v173;
  }
  BOOL v189 = v178 >= 0x6A && v145 >= 0x29;
  uint64_t v190 = !v189;
  uint64_t v500 = v190;
  if (!v189) {
    ++v173;
  }
  BOOL v191 = a5 >= 14204 && v145 >= 0x32;
  uint64_t v192 = !v191;
  uint64_t v501 = v192;
  if (!v191) {
    ++v173;
  }
  BOOL v193 = a5 >= 14205 && v145 >= 0x34;
  uint64_t v194 = !v193;
  uint64_t v503 = v194;
  if (!v193) {
    ++v173;
  }
  unsigned __int16 v195 = v173 + v160;
  if (v172 < 2) {
    ++v195;
  }
  BOOL v197 = a5 < 14201 || v145 < 0x2D || v458 == 10124;
  int64_t v442 = v171;
  BOOL v198 = v197 || v171 == 2;
  uint64_t v199 = v198;
  uint64_t v522 = v199;
  if (v198) {
    unsigned __int16 v200 = v195 + 1;
  }
  else {
    unsigned __int16 v200 = v195;
  }
  v201 = [PLModelMigrationActionProcessor alloc];
  v202 = [(PLModelMigrator *)self pathManager];
  v203 = [(PLModelMigrator *)self analyticsEventManager];
  v204 = [(PLModelMigrator *)self migrationLogger];
  v205 = [(PLModelMigrationActionProcessor *)v201 initWithUUID:v523 pathManager:v202 migrationActionType:1 analyticsEventManager:v203 logger:v204 progressUnitCount:v200];

  v206 = [(PLModelMigrationActionProcessor *)v205 progress];

  if (v206)
  {
    v207 = [(PLModelMigrationActionProcessor *)v205 progress];
    [v507 addChild:v207 withPendingUnitCount:v483];
  }
  uint64_t v441 = v504 & v494;
  v505 = [(PLModelMigrator *)self analyticsEventManager];
  [v505 startRecordingTimedEventToken];
  double v209 = v208;
  if ([(PLModelMigrator *)self _shouldTriggerLightweightMigrationFailureForInternalTesting])
  {
    [(PLModelMigrationActionProcessor *)v205 setSuccess:0];
  }
  BOOL v479 = v112 < 0x12F;
  v958[0] = MEMORY[0x1E4F143A8];
  v958[1] = 3221225472;
  v958[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke;
  v958[3] = &unk_1E5866570;
  v958[4] = self;
  id v210 = v451;
  id v959 = v210;
  char v960 = v520;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Delete iCloud restore synced/shared content" ifRequired:v445 block:v958];
  v956[0] = MEMORY[0x1E4F143A8];
  v956[1] = 3221225472;
  v956[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_459;
  v956[3] = &unk_1E5871CA0;
  v956[4] = self;
  id v211 = v210;
  id v957 = v211;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Post processing from 6006" ifRequired:a5 == 6006 block:v956];
  v954[0] = MEMORY[0x1E4F143A8];
  v954[1] = 3221225472;
  v954[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2;
  v954[3] = &unk_1E5871CA0;
  v954[4] = self;
  id v212 = v211;
  id v955 = v212;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Updating panorama subtypes" ifRequired:v443 block:v954];
  v951[0] = MEMORY[0x1E4F143A8];
  v951[1] = 3221225472;
  v951[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3;
  v951[3] = &unk_1E5866570;
  v951[4] = self;
  id v213 = v212;
  id v952 = v213;
  BOOL v953 = v446;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Rebuilding all moments after lightweight migration." ifRequired:v441 block:v951];
  v948[0] = MEMORY[0x1E4F143A8];
  v948[1] = 3221225472;
  v948[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_474;
  v948[3] = &unk_1E5866570;
  v948[4] = self;
  id v214 = v213;
  id v949 = v214;
  BOOL v950 = a5 < 13340;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Adding UUIDs to AlbumLists and MomentLists" ifRequired:a5 < 8006 block:v948];
  v946[0] = MEMORY[0x1E4F143A8];
  v946[1] = 3221225472;
  v946[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_478;
  v946[3] = &unk_1E5871CA0;
  v946[4] = self;
  id v215 = v214;
  id v947 = v215;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Generating location hashes for assets" ifRequired:a5 < 8008 block:v946];
  v944[0] = MEMORY[0x1E4F143A8];
  v944[1] = 3221225472;
  v944[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_482;
  v944[3] = &unk_1E5871CA0;
  v944[4] = self;
  id v216 = v215;
  id v945 = v216;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Migrating location data for assets" ifRequired:v444 block:v944];
  v942[0] = MEMORY[0x1E4F143A8];
  v942[1] = 3221225472;
  v942[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4;
  v942[3] = &unk_1E5871CA0;
  v942[4] = self;
  id v217 = v216;
  id v943 = v217;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Setting up root folder" ifRequired:a5 < 8011 block:v942];
  v940[0] = MEMORY[0x1E4F143A8];
  v940[1] = 3221225472;
  v940[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5;
  v940[3] = &unk_1E5871CA0;
  v940[4] = self;
  id v218 = v217;
  id v941 = v218;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Forcing album metadata to disk" ifRequired:v448 block:v940];
  v937[0] = MEMORY[0x1E4F143A8];
  v937[1] = 3221225472;
  v937[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6;
  v937[3] = &unk_1E5866570;
  char v939 = v520;
  v937[4] = self;
  id v219 = v218;
  id v938 = v219;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Migrating SLM files" ifRequired:a5 < 8027 block:v937];
  v934[0] = MEMORY[0x1E4F143A8];
  v934[1] = 3221225472;
  v934[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_497;
  v934[3] = &unk_1E5866570;
  char v936 = v520;
  v934[4] = self;
  id v220 = v219;
  id v935 = v220;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Persisting place annotation data" ifRequired:a5 < 9201 block:v934];
  v931[0] = MEMORY[0x1E4F143A8];
  v931[1] = 3221225472;
  v931[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_502;
  v931[3] = &unk_1E5866570;
  char v933 = v520;
  v931[4] = self;
  id v221 = v220;
  id v932 = v221;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing up asset persistence" ifRequired:v449 block:v931];
  v928[0] = MEMORY[0x1E4F143A8];
  v928[1] = 3221225472;
  v928[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_507;
  v928[3] = &unk_1E5866570;
  char v930 = v520;
  v928[4] = self;
  id v222 = v221;
  id v929 = v222;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Generating addedDate for assets" ifRequired:a5 < 8029 block:v928];
  v926[0] = MEMORY[0x1E4F143A8];
  v926[1] = 3221225472;
  v926[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_512;
  v926[3] = &unk_1E5871CA0;
  v926[4] = self;
  id v223 = v222;
  id v927 = v223;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populating adjustmentsState" ifRequired:a5 < 8030 block:v926];
  v923[0] = MEMORY[0x1E4F143A8];
  v923[1] = 3221225472;
  v923[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_516;
  v923[3] = &unk_1E5866570;
  char v925 = v520;
  v923[4] = self;
  id v224 = v223;
  id v924 = v224;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing video dimensions" ifRequired:a5 < 8033 block:v923];
  v920[0] = MEMORY[0x1E4F143A8];
  v920[1] = 3221225472;
  v920[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_521;
  v920[3] = &unk_1E5866570;
  char v922 = v520;
  v920[4] = self;
  id v225 = v224;
  id v921 = v225;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing orientations previously corrupted by adjustment migration" ifRequired:(a5 - 8047) < 4 block:v920];
  v918[0] = MEMORY[0x1E4F143A8];
  v918[1] = 3221225472;
  v918[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_526;
  v918[3] = &unk_1E5871CA0;
  v918[4] = self;
  id v226 = v225;
  id v919 = v226;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing album order in Albums list." ifRequired:a5 < 8052 block:v918];
  v916[0] = MEMORY[0x1E4F143A8];
  v916[1] = 3221225472;
  v916[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_530;
  v916[3] = &unk_1E5871CA0;
  v916[4] = self;
  id v227 = v226;
  id v917 = v227;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing orientation of images in Shared Photo Streams" ifRequired:a5 < 8058 block:v916];
  v914[0] = MEMORY[0x1E4F143A8];
  v914[1] = 3221225472;
  v914[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_534;
  v914[3] = &unk_1E5871CA0;
  v914[4] = self;
  id v228 = v227;
  id v915 = v228;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing broken burst picks" ifRequired:a5 < 8045 block:v914];
  v912[0] = MEMORY[0x1E4F143A8];
  v912[1] = 3221225472;
  v912[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_538;
  v912[3] = &unk_1E5871CA0;
  v912[4] = self;
  id v229 = v228;
  id v913 = v229;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing cloud resources." ifRequired:v450 block:v912];
  v909[0] = MEMORY[0x1E4F143A8];
  v909[1] = 3221225472;
  v909[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_542;
  v909[3] = &unk_1E5866570;
  v909[4] = self;
  id v230 = v229;
  id v910 = v230;
  char v911 = v522;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing incorrect thumbnail tables" ifRequired:v458 == 10124 block:v909];
  v906[0] = MEMORY[0x1E4F143A8];
  v906[1] = 3221225472;
  v906[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_546;
  v906[3] = &unk_1E5866570;
  char v908 = v520;
  v906[4] = self;
  id v231 = v230;
  id v907 = v231;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing HEIF assets with incorrect metadata" ifRequired:a5 < 11068 block:v906];
  v902[0] = MEMORY[0x1E4F143A8];
  v902[1] = 3221225472;
  v902[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_551;
  v902[3] = &unk_1E5866598;
  v902[4] = self;
  id v232 = v231;
  id v903 = v232;
  int64_t v904 = v442;
  char v905 = v522;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting all thumbs and thumb index data, and request a thumbnail rebuild" ifRequired:v172 < 2 block:v902];
  v900[0] = MEMORY[0x1E4F143A8];
  v900[1] = 3221225472;
  v900[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_555;
  v900[3] = &unk_1E5871CA0;
  v900[4] = self;
  id v233 = v232;
  id v901 = v233;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Verifying cloud assets local availability" ifRequired:a5 < 8061 block:v900];
  v899[0] = MEMORY[0x1E4F143A8];
  v899[1] = 3221225472;
  v899[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_559;
  v899[3] = &unk_1E58708B0;
  v899[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Disabling iCloudPhoto, writing a disable file marker" ifRequired:v453 block:v899];
  v897[0] = MEMORY[0x1E4F143A8];
  v897[1] = 3221225472;
  v897[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_563;
  v897[3] = &unk_1E5871CA0;
  v897[4] = self;
  id v234 = v233;
  id v898 = v234;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing events from database" ifRequired:a5 < 8046 block:v897];
  v895[0] = MEMORY[0x1E4F143A8];
  v895[1] = 3221225472;
  v895[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_567;
  v895[3] = &unk_1E5871CA0;
  v895[4] = self;
  id v235 = v234;
  id v896 = v235;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Migrating slo-mo adjustments files that used NSKeyedArchiver to use NSPropertyListSerialization format" ifRequired:(a5 < 8027) ^ (a5 < 8049) block:v895];
  v893[0] = MEMORY[0x1E4F143A8];
  v893[1] = 3221225472;
  v893[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_571;
  v893[3] = &unk_1E5871CA0;
  v893[4] = self;
  id v236 = v235;
  id v894 = v236;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixinf multiple master relationships" ifRequired:a5 < 8064 block:v893];
  v891[0] = MEMORY[0x1E4F143A8];
  v891[1] = 3221225472;
  v891[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_579;
  v891[3] = &unk_1E5871CA0;
  v891[4] = self;
  id v237 = v236;
  id v892 = v237;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repersist duplicated originals" ifRequired:a5 < 8065 block:v891];
  v888[0] = MEMORY[0x1E4F143A8];
  v888[1] = 3221225472;
  v888[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_583;
  v888[3] = &unk_1E5866570;
  char v890 = v520;
  v888[4] = self;
  id v238 = v237;
  id v889 = v238;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populate face regions" ifRequired:v452 block:v888];
  v887[0] = MEMORY[0x1E4F143A8];
  v887[1] = 3221225472;
  v887[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_588;
  v887[3] = &unk_1E58708B0;
  v887[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Force a reset sync after lightweight migration post processing completes" ifRequired:v454 block:v887];
  v885[0] = MEMORY[0x1E4F143A8];
  v885[1] = 3221225472;
  v885[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_592;
  v885[3] = &unk_1E5871CA0;
  v885[4] = self;
  id v239 = v238;
  id v886 = v239;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting orderKey for albums" ifRequired:a5 < 8304 block:v885];
  v883[0] = MEMORY[0x1E4F143A8];
  v883[1] = 3221225472;
  v883[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_596;
  v883[3] = &unk_1E5871CA0;
  v883[4] = self;
  id v240 = v239;
  id v884 = v240;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing duplicate assets" ifRequired:a5 < 8312 block:v883];
  v881[0] = MEMORY[0x1E4F143A8];
  v881[1] = 3221225472;
  v881[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_600;
  v881[3] = &unk_1E5871CA0;
  v881[4] = self;
  id v241 = v240;
  id v882 = v241;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing visible single burst assets" ifRequired:a5 < 9001 block:v881];
  v879[0] = MEMORY[0x1E4F143A8];
  v879[1] = 3221225472;
  v879[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_604;
  v879[3] = &unk_1E5871CA0;
  v879[4] = self;
  id v242 = v241;
  id v880 = v242;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing video JPG Path" ifRequired:v455 block:v879];
  v877[0] = MEMORY[0x1E4F143A8];
  v877[1] = 3221225472;
  v877[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_608;
  v877[3] = &unk_1E5871CA0;
  v877[4] = self;
  id v243 = v242;
  id v878 = v243;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing sort ascending for album and folder" ifRequired:a5 < 9004 block:v877];
  v873[0] = MEMORY[0x1E4F143A8];
  v873[1] = 3221225472;
  v873[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7;
  v873[3] = &unk_1E58665C0;
  BOOL v875 = v457;
  v873[4] = self;
  BOOL v876 = v456;
  id v244 = v243;
  id v874 = v244;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Caching date created and itemIdentifier on resources" ifRequired:v457 block:v873];
  v871[0] = MEMORY[0x1E4F143A8];
  v871[1] = 3221225472;
  v871[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_617;
  v871[3] = &unk_1E5871CA0;
  v871[4] = self;
  id v245 = v244;
  id v872 = v245;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Recovering single burst photos." ifRequired:a5 < 9010 block:v871];
  v869[0] = MEMORY[0x1E4F143A8];
  v869[1] = 3221225472;
  v869[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_621;
  v869[3] = &unk_1E5871CA0;
  v869[4] = self;
  id v246 = v245;
  id v870 = v246;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populating adjustmentTimestamp on assets." ifRequired:a5 < 9011 block:v869];
  v866[0] = MEMORY[0x1E4F143A8];
  v866[1] = 3221225472;
  v866[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_625;
  v866[3] = &unk_1E5866570;
  char v868 = v520;
  v866[4] = self;
  id v247 = v246;
  id v867 = v247;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing incorrect added date." ifRequired:(a5 < 8029) ^ (a5 < 9038) block:v866];
  v864[0] = MEMORY[0x1E4F143A8];
  v864[1] = 3221225472;
  v864[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_630;
  v864[3] = &unk_1E5871CA0;
  v864[4] = self;
  id v248 = v247;
  id v865 = v248;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Adding Camera capture device." ifRequired:a5 < 9037 block:v864];
  v862[0] = MEMORY[0x1E4F143A8];
  v862[1] = 3221225472;
  v862[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_634;
  v862[3] = &unk_1E5871CA0;
  v862[4] = self;
  id v249 = v248;
  id v863 = v249;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Tagging screenshots." ifRequired:a5 < 9023 block:v862];
  v860[0] = MEMORY[0x1E4F143A8];
  v860[1] = 3221225472;
  v860[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_638;
  v860[3] = &unk_1E5871CA0;
  v860[4] = self;
  id v250 = v249;
  id v861 = v250;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix up shared videos without thumbnails." ifRequired:a5 < 9031 block:v860];
  v858[0] = MEMORY[0x1E4F143A8];
  v858[1] = 3221225472;
  v858[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_642;
  v858[3] = &unk_1E5871CA0;
  v858[4] = self;
  id v251 = v250;
  id v859 = v251;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Mark previously edited Irises as evaluated." ifRequired:v509 < 0x22 block:v858];
  v856[0] = MEMORY[0x1E4F143A8];
  v856[1] = 3221225472;
  v856[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_646;
  v856[3] = &unk_1E5871CA0;
  v856[4] = self;
  id v252 = v251;
  id v857 = v252;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixup video orphans." ifRequired:v509 < 0x28 block:v856];
  v854[0] = MEMORY[0x1E4F143A8];
  v854[1] = 3221225472;
  v854[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_650;
  v854[3] = &unk_1E5871CA0;
  v854[4] = self;
  id v253 = v252;
  id v855 = v253;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Adding cloud kindSubtype and Burst flags." ifRequired:a5 < 9041 block:v854];
  v852[0] = MEMORY[0x1E4F143A8];
  v852[1] = 3221225472;
  v852[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_654;
  v852[3] = &unk_1E5871CA0;
  v852[4] = self;
  id v254 = v253;
  id v853 = v254;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixup itemIdentifier on videocmpl resources" ifRequired:a5 < 9042 block:v852];
  v850[0] = MEMORY[0x1E4F143A8];
  v850[1] = 3221225472;
  v850[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8;
  v850[3] = &unk_1E5871CA0;
  v850[4] = self;
  id v255 = v254;
  id v851 = v255;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixup local path for videocmpl derivatives" ifRequired:v459 block:v850];
  v848[0] = MEMORY[0x1E4F143A8];
  v848[1] = 3221225472;
  v848[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9;
  v848[3] = &unk_1E5871CA0;
  v848[4] = self;
  id v256 = v255;
  id v849 = v256;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixup empty local path for video resources" ifRequired:a5 < 9048 block:v848];
  v846[0] = MEMORY[0x1E4F143A8];
  v846[1] = 3221225472;
  v846[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10;
  v846[3] = &unk_1E5871CA0;
  v846[4] = self;
  id v257 = v256;
  id v847 = v257;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Persist videoCompl properties" ifRequired:a5 < 9046 block:v846];
  v845[0] = MEMORY[0x1E4F143A8];
  v845[1] = 3221225472;
  v845[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11;
  v845[3] = &unk_1E58708B0;
  v845[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Clean out invalid asset <--> album mapping records." ifRequired:a5 < 9047 block:v845];
  v844[0] = MEMORY[0x1E4F143A8];
  v844[1] = 3221225472;
  v844[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12;
  v844[3] = &unk_1E58708B0;
  v844[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Applying data protection to DCIM (B->C)" ifRequired:a5 < 9204 block:v844];
  v842[0] = MEMORY[0x1E4F143A8];
  v842[1] = 3221225472;
  v842[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13;
  v842[3] = &unk_1E5871CA0;
  v842[4] = self;
  id v258 = v257;
  id v843 = v258;
  BOOL v259 = a5 < 9205;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting failed assets" ifRequired:v259 block:v842];
  v840[0] = MEMORY[0x1E4F143A8];
  v840[1] = 3221225472;
  v840[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14;
  v840[3] = &unk_1E5871CA0;
  v840[4] = self;
  id v260 = v258;
  id v841 = v260;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting failed cloud masters" ifRequired:v259 block:v840];
  v838[0] = MEMORY[0x1E4F143A8];
  v838[1] = 3221225472;
  v838[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15;
  v838[3] = &unk_1E5871CA0;
  v838[4] = self;
  id v261 = v260;
  id v839 = v261;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting upload attempts" ifRequired:v259 block:v838];
  v836[0] = MEMORY[0x1E4F143A8];
  v836[1] = 3221225472;
  v836[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_16;
  v836[3] = &unk_1E5871CA0;
  v836[4] = self;
  id v262 = v261;
  id v837 = v262;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix cloudMaster cloudLocalState" ifRequired:a5 < 9302 block:v836];
  v834[0] = MEMORY[0x1E4F143A8];
  v834[1] = 3221225472;
  v834[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_17;
  v834[3] = &unk_1E5871CA0;
  v834[4] = self;
  id v263 = v262;
  id v835 = v263;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populating representative assets" ifRequired:a5 < 10027 block:v834];
  v832[0] = MEMORY[0x1E4F143A8];
  v832[1] = 3221225472;
  v832[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_18;
  v832[3] = &unk_1E5871CA0;
  v832[4] = self;
  id v264 = v263;
  id v833 = v264;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Clearing all analysis states" ifRequired:v447 < 0x25 block:v832];
  v830[0] = MEMORY[0x1E4F143A8];
  v830[1] = 3221225472;
  v830[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_19;
  v830[3] = &unk_1E5871CA0;
  v830[4] = self;
  id v265 = v264;
  id v831 = v265;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing up unknown analysis states" ifRequired:a5 < 10070 block:v830];
  v828[0] = MEMORY[0x1E4F143A8];
  v828[1] = 3221225472;
  v828[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_20;
  v828[3] = &unk_1E5871CA0;
  v828[4] = self;
  id v266 = v265;
  id v829 = v266;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing up mismatched analysis state uuids" ifRequired:(a5 & 0xFFFFFFFC) == 10068 block:v828];
  v826[0] = MEMORY[0x1E4F143A8];
  v826[1] = 3221225472;
  v826[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_21;
  v826[3] = &unk_1E5871CA0;
  v826[4] = self;
  id v267 = v266;
  id v827 = v267;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Touching analysis state sort tokens" ifRequired:a5 < 10079 block:v826];
  v824[0] = MEMORY[0x1E4F143A8];
  v824[1] = 3221225472;
  v824[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_22;
  v824[3] = &unk_1E5871CA0;
  v824[4] = self;
  id v268 = v267;
  id v825 = v268;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populating latitude and longitude in assets" ifRequired:a5 < 10036 block:v824];
  v822[0] = MEMORY[0x1E4F143A8];
  v822[1] = 3221225472;
  v822[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_23;
  v822[3] = &unk_1E5871CA0;
  v822[4] = self;
  id v269 = v268;
  id v823 = v269;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Forcing file system persistence for memories" ifRequired:a5 < 10041 block:v822];
  v820[0] = MEMORY[0x1E4F143A8];
  v820[1] = 3221225472;
  v820[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_24;
  v820[3] = &unk_1E5871CA0;
  v820[4] = self;
  id v270 = v269;
  id v821 = v270;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Forcing file system persistence for persons" ifRequired:v510 block:v820];
  v818[0] = MEMORY[0x1E4F143A8];
  v818[1] = 3221225472;
  v818[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_25;
  v818[3] = &unk_1E5871CA0;
  v818[4] = self;
  id v271 = v270;
  id v819 = v271;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing old file system persistence for persons" ifRequired:a5 < 10203 block:v818];
  v816[0] = MEMORY[0x1E4F143A8];
  v816[1] = 3221225472;
  v816[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_26;
  v816[3] = &unk_1E5871CA0;
  v816[4] = self;
  id v272 = v271;
  id v817 = v272;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populating asset's filename with nil originalFilename" ifRequired:a5 < 11052 block:v816];
  v814[0] = MEMORY[0x1E4F143A8];
  v814[1] = 3221225472;
  v814[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_717;
  v814[3] = &unk_1E5871CA0;
  v814[4] = self;
  id v273 = v272;
  id v815 = v273;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Flattening unknown custom rendered values (0 or 1) to 0" ifRequired:a5 < 10065 block:v814];
  v812[0] = MEMORY[0x1E4F143A8];
  v812[1] = 3221225472;
  v812[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_721;
  v812[3] = &unk_1E5871CA0;
  v812[4] = self;
  id v274 = v273;
  id v813 = v274;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing custom rendered values" ifRequired:v460 block:v812];
  v810[0] = MEMORY[0x1E4F143A8];
  v810[1] = 3221225472;
  v810[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_725;
  v810[3] = &unk_1E5871CA0;
  v810[4] = self;
  id v275 = v274;
  id v811 = v275;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting all memories" ifRequired:a5 < 10088 block:v810];
  v809[0] = MEMORY[0x1E4F143A8];
  v809[1] = 3221225472;
  v809[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_729;
  v809[3] = &unk_1E58708B0;
  v809[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Applying data protection to DCIM (D->C)" ifRequired:v447 < 0x67 block:v809];
  v807[0] = MEMORY[0x1E4F143A8];
  v807[1] = 3221225472;
  v807[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_733;
  v807[3] = &unk_1E5871CA0;
  v807[4] = self;
  id v276 = v275;
  id v808 = v276;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing faceAlgorithmVersion" ifRequired:a5 < 10106 block:v807];
  v805[0] = MEMORY[0x1E4F143A8];
  v805[1] = 3221225472;
  v805[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_737;
  v805[3] = &unk_1E5871CA0;
  v805[4] = self;
  id v277 = v276;
  id v806 = v277;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing zero duration photo iris" ifRequired:v447 < 0x75 block:v805];
  v803[0] = MEMORY[0x1E4F143A8];
  v803[1] = 3221225472;
  v803[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_741;
  v803[3] = &unk_1E5871CA0;
  v803[4] = self;
  id v278 = v277;
  id v804 = v278;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing CameraRoll" ifRequired:a5 < 10112 block:v803];
  v801[0] = MEMORY[0x1E4F143A8];
  v801[1] = 3221225472;
  v801[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_745;
  v801[3] = &unk_1E5871CA0;
  v801[4] = self;
  id v279 = v278;
  id v802 = v279;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing lastPrefetchDate" ifRequired:v461 block:v801];
  v799[0] = MEMORY[0x1E4F143A8];
  v799[1] = 3221225472;
  v799[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_749;
  v799[3] = &unk_1E5871CA0;
  v799[4] = self;
  id v280 = v279;
  id v800 = v280;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing locallyAvailableFlag for thumbnails" ifRequired:v461 block:v799];
  v797[0] = MEMORY[0x1E4F143A8];
  v797[1] = 3221225472;
  v797[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_753;
  v797[3] = &unk_1E5871CA0;
  v797[4] = self;
  id v281 = v280;
  id v798 = v281;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Updating key asset in memory" ifRequired:a5 < 11000 block:v797];
  v795[0] = MEMORY[0x1E4F143A8];
  v795[1] = 3221225472;
  v795[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_757;
  v795[3] = &unk_1E5871CA0;
  v795[4] = self;
  id v282 = v281;
  id v796 = v282;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Delete orphaned unverified people" ifRequired:a5 < 10123 block:v795];
  v793[0] = MEMORY[0x1E4F143A8];
  v793[1] = 3221225472;
  v793[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_761;
  v793[3] = &unk_1E5871CA0;
  v793[4] = self;
  id v283 = v282;
  id v794 = v283;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing memories with duplicate assetLists" ifRequired:a5 < 10150 block:v793];
  v791[0] = MEMORY[0x1E4F143A8];
  v791[1] = 3221225472;
  v791[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_765;
  v791[3] = &unk_1E5871CA0;
  v791[4] = self;
  id v284 = v283;
  id v792 = v284;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing untracked cloud resource image derivatives" ifRequired:v511 block:v791];
  v789[0] = MEMORY[0x1E4F143A8];
  v789[1] = 3221225472;
  v789[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14_769;
  v789[3] = &unk_1E5871CA0;
  v789[4] = self;
  id v285 = v284;
  id v790 = v285;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Rebuilding thumbnails for wide gamut captures" ifRequired:a5 < 10206 block:v789];
  v786[0] = MEMORY[0x1E4F143A8];
  v786[1] = 3221225472;
  v786[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15_773;
  v786[3] = &unk_1E5866570;
  char v788 = v520;
  v786[4] = self;
  id v286 = v285;
  id v787 = v286;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Persist iris visibility state to disk." ifRequired:v513 block:v786];
  v784[0] = MEMORY[0x1E4F143A8];
  v784[1] = 3221225472;
  v784[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_778;
  v784[3] = &unk_1E5871CA0;
  v784[4] = self;
  id v287 = v286;
  id v785 = v287;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Remove invalid albums and folders." ifRequired:v512 block:v784];
  v781[0] = MEMORY[0x1E4F143A8];
  v781[1] = 3221225472;
  v781[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_782;
  v781[3] = &unk_1E5866570;
  char v783 = v520;
  v781[4] = self;
  id v288 = v287;
  id v782 = v288;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Set playback style for all animated GIFs." ifRequired:a5 < 11061 block:v781];
  v779[0] = MEMORY[0x1E4F143A8];
  v779[1] = 3221225472;
  v779[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_787;
  v779[3] = &unk_1E5871CA0;
  v779[4] = self;
  id v289 = v288;
  id v780 = v289;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing movie asset attributes" ifRequired:v462 block:v779];
  v778[0] = MEMORY[0x1E4F143A8];
  v778[1] = 3221225472;
  v778[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_791;
  v778[3] = &unk_1E58708B0;
  v778[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Dropping search index after lightweight migration" ifRequired:v439 block:v778];
  v776[0] = MEMORY[0x1E4F143A8];
  v776[1] = 3221225472;
  v776[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_795;
  v776[3] = &unk_1E5871CA0;
  v776[4] = self;
  id v290 = v289;
  id v777 = v290;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Reset scene analysis for algorithm bump" ifRequired:v463 block:v776];
  v774[0] = MEMORY[0x1E4F143A8];
  v774[1] = 3221225472;
  v774[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_799;
  v774[3] = &unk_1E5871CA0;
  v774[4] = self;
  id v291 = v290;
  id v775 = v291;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix name source const" ifRequired:a5 < 10102 block:v774];
  v772[0] = MEMORY[0x1E4F143A8];
  v772[1] = 3221225472;
  v772[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_803;
  v772[3] = &unk_1E5871CA0;
  v772[4] = self;
  id v292 = v291;
  id v773 = v292;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Refresh trigger values" ifRequired:a5 < 10109 block:v772];
  v771[0] = MEMORY[0x1E4F143A8];
  v771[1] = 3221225472;
  v771[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_807;
  v771[3] = &unk_1E58708B0;
  v771[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Clear vision worker" ifRequired:a5 < 10204 block:v771];
  v769[0] = MEMORY[0x1E4F143A8];
  v769[1] = 3221225472;
  v769[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_811;
  v769[3] = &unk_1E5871CA0;
  v769[4] = self;
  id v293 = v292;
  id v770 = v293;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix rejected key face" ifRequired:a5 < 10207 block:v769];
  v767[0] = MEMORY[0x1E4F143A8];
  v767[1] = 3221225472;
  v767[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_815;
  v767[3] = &unk_1E5871CA0;
  v767[4] = self;
  id v294 = v293;
  id v768 = v294;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix merged people that should be verified" ifRequired:v514 block:v767];
  v765[0] = MEMORY[0x1E4F143A8];
  v765[1] = 3221225472;
  v765[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_819;
  v765[3] = &unk_1E5871CA0;
  v765[4] = self;
  id v295 = v294;
  id v766 = v295;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Prompt unknown assets" ifRequired:a5 < 13027 block:v765];
  v763[0] = MEMORY[0x1E4F143A8];
  v763[1] = 3221225472;
  v763[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_823;
  v763[3] = &unk_1E5871CA0;
  v763[4] = self;
  id v296 = v295;
  id v764 = v296;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix zero trash date" ifRequired:a5 < 11001 block:v763];
  v761[0] = MEMORY[0x1E4F143A8];
  v761[1] = 3221225472;
  v761[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_827;
  v761[3] = &unk_1E5871CA0;
  v761[4] = self;
  id v297 = v296;
  id v762 = v297;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix master cloudLocalState enum" ifRequired:v515 block:v761];
  v759[0] = MEMORY[0x1E4F143A8];
  v759[1] = 3221225472;
  v759[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_831;
  v759[3] = &unk_1E5871CA0;
  v759[4] = self;
  id v298 = v297;
  id v760 = v298;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populate cloud resource local state" ifRequired:v516 block:v759];
  v757[0] = MEMORY[0x1E4F143A8];
  v757[1] = 3221225472;
  v757[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_835;
  v757[3] = &unk_1E5871CA0;
  v757[4] = self;
  id v299 = v298;
  id v758 = v299;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix cropped unadjusted assets issue" ifRequired:v517 block:v757];
  v755[0] = MEMORY[0x1E4F143A8];
  v755[1] = 3221225472;
  v755[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14_839;
  v755[3] = &unk_1E5871CA0;
  v755[4] = self;
  id v300 = v299;
  id v756 = v300;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populating user keyFacePickSource on Person" ifRequired:a5 < 11022 block:v755];
  v753[0] = MEMORY[0x1E4F143A8];
  v753[1] = 3221225472;
  v753[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15_843;
  v753[3] = &unk_1E5871CA0;
  v753[4] = self;
  id v301 = v300;
  id v754 = v301;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Converting nameSource from BOOL to int on DeferredRebuildFace" ifRequired:a5 < 11024 block:v753];
  v751[0] = MEMORY[0x1E4F143A8];
  v751[1] = 3221225472;
  v751[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_16_847;
  v751[3] = &unk_1E5871CA0;
  v751[4] = self;
  id v302 = v301;
  id v752 = v302;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing duplicated cloud asset guid from the database" ifRequired:a5 < 11025 block:v751];
  v749[0] = MEMORY[0x1E4F143A8];
  v749[1] = 3221225472;
  v749[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_17_848;
  v749[3] = &unk_1E5871CA0;
  v749[4] = self;
  id v303 = v302;
  id v750 = v303;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing duplicated cloud asset guid from the database" ifRequired:(a5 - 11022) < 4 block:v749];
  v747[0] = MEMORY[0x1E4F143A8];
  v747[1] = 3221225472;
  v747[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_18_852;
  v747[3] = &unk_1E5871CA0;
  v747[4] = self;
  id v304 = v303;
  id v748 = v304;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing whitelist owner for pending invitations" ifRequired:(a5 - 10425) < 0x25B block:v747];
  v745[0] = MEMORY[0x1E4F143A8];
  v745[1] = 3221225472;
  v745[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_19_856;
  v745[3] = &unk_1E5871CA0;
  v745[4] = self;
  id v305 = v304;
  id v746 = v305;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repush memories with new features" ifRequired:v518 block:v745];
  v743[0] = MEMORY[0x1E4F143A8];
  v743[1] = 3221225472;
  v743[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_20_860;
  v743[3] = &unk_1E5871CA0;
  v743[4] = self;
  id v306 = v305;
  id v744 = v306;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Retry quarantined assets and fix resource relation" ifRequired:v519 block:v743];
  v739[0] = MEMORY[0x1E4F143A8];
  v739[1] = 3221225472;
  v739[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_21_864;
  v739[3] = &unk_1E58665E8;
  int v741 = a5;
  v739[4] = self;
  id v307 = v306;
  id v740 = v307;
  char v742 = v465;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Preparing library for faces sync" ifRequired:a5 < 11043 block:v739];
  v737[0] = MEMORY[0x1E4F143A8];
  v737[1] = 3221225472;
  v737[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_874;
  v737[3] = &unk_1E5871CA0;
  v737[4] = self;
  id v308 = v307;
  id v738 = v308;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populate faces with cloudNameSource" ifRequired:a5 < 11047 block:v737];
  v735[0] = MEMORY[0x1E4F143A8];
  v735[1] = 3221225472;
  v735[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_878;
  v735[3] = &unk_1E5871CA0;
  v735[4] = self;
  id v309 = v308;
  id v736 = v309;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Update playback styles and variations" ifRequired:a5 < 11048 block:v735];
  v732[0] = MEMORY[0x1E4F143A8];
  v732[1] = 3221225472;
  v732[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_882;
  v732[3] = &unk_1E5866570;
  char v734 = v520;
  v732[4] = self;
  id v310 = v309;
  id v733 = v310;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Identifying variations and new depth adjustments" ifRequired:a5 < 11070 block:v732];
  v730[0] = MEMORY[0x1E4F143A8];
  v730[1] = 3221225472;
  v730[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_887;
  v730[3] = &unk_1E5871CA0;
  v730[4] = self;
  id v311 = v310;
  id v731 = v311;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Populate persons with cloudVerifiedType" ifRequired:a5 < 11049 block:v730];
  v728[0] = MEMORY[0x1E4F143A8];
  v728[1] = 3221225472;
  v728[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_891;
  v728[3] = &unk_1E5871CA0;
  v728[4] = self;
  id v312 = v311;
  id v729 = v312;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting face quality" ifRequired:v464 block:v728];
  v726[0] = MEMORY[0x1E4F143A8];
  v726[1] = 3221225472;
  v726[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_895;
  v726[3] = &unk_1E5871CA0;
  v726[4] = self;
  id v313 = v312;
  id v727 = v313;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing untracked person metadata" ifRequired:a5 < 11060 block:v726];
  v724[0] = MEMORY[0x1E4F143A8];
  v724[1] = 3221225472;
  v724[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_899;
  v724[3] = &unk_1E5871CA0;
  v724[4] = self;
  id v314 = v313;
  id v725 = v314;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting manual order on non-favorite persons" ifRequired:a5 < 11063 block:v724];
  v723[0] = MEMORY[0x1E4F143A8];
  v723[1] = 3221225472;
  v723[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_903;
  v723[3] = &unk_1E58708B0;
  v723[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing 'AutoloopCache' folder if it still exists" ifRequired:v508 < 0x40 block:v723];
  v721[0] = MEMORY[0x1E4F143A8];
  v721[1] = 3221225472;
  v721[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_907;
  v721[3] = &unk_1E5871CA0;
  v721[4] = self;
  id v315 = v314;
  id v722 = v315;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing asset master relationship" ifRequired:a5 < 11069 block:v721];
  v720[0] = MEMORY[0x1E4F143A8];
  v720[1] = 3221225472;
  v720[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_911;
  v720[3] = &unk_1E58708B0;
  v720[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Going to send optimize setting feedback" ifRequired:v466 block:v720];
  v718[0] = MEMORY[0x1E4F143A8];
  v718[1] = 3221225472;
  v718[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_916;
  v718[3] = &unk_1E5871CA0;
  v718[4] = self;
  id v316 = v315;
  id v719 = v316;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing nil cloudMasterGUID" ifRequired:v467 block:v718];
  v716[0] = MEMORY[0x1E4F143A8];
  v716[1] = 3221225472;
  v716[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_920;
  v716[3] = &unk_1E5871CA0;
  v716[4] = self;
  id v317 = v316;
  id v717 = v317;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repush persons with merge target" ifRequired:v468 block:v716];
  v714[0] = MEMORY[0x1E4F143A8];
  v714[1] = 3221225472;
  v714[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_924;
  v714[3] = &unk_1E5871CA0;
  v714[4] = self;
  id v318 = v317;
  id v715 = v318;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Persist storeUUID to mobileCPL.plist" ifRequired:v469 block:v714];
  v712[0] = MEMORY[0x1E4F143A8];
  v712[1] = 3221225472;
  v712[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_928;
  v712[3] = &unk_1E5871CA0;
  v712[4] = self;
  id v319 = v318;
  id v713 = v319;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Puring cloud shared resources" ifRequired:a5 < 11079 block:v712];
  v710[0] = MEMORY[0x1E4F143A8];
  v710[1] = 3221225472;
  v710[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_936;
  v710[3] = &unk_1E5871CA0;
  v710[4] = self;
  id v320 = v319;
  id v711 = v320;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting persons without UUID" ifRequired:a5 < 11080 block:v710];
  v708[0] = MEMORY[0x1E4F143A8];
  v708[1] = 3221225472;
  v708[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_940;
  v708[3] = &unk_1E5871CA0;
  v708[4] = self;
  id v321 = v320;
  id v709 = v321;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Unquarantined quarantined items" ifRequired:v470 block:v708];
  v706[0] = MEMORY[0x1E4F143A8];
  v706[1] = 3221225472;
  v706[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_944;
  v706[3] = &unk_1E5871CA0;
  v706[4] = self;
  id v322 = v321;
  id v707 = v322;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix UTI for slow-mo videos" ifRequired:(a5 - 10075) < 0x3F1 block:v706];
  v705[0] = MEMORY[0x1E4F143A8];
  v705[1] = 3221225472;
  v705[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_948;
  v705[3] = &unk_1E58708B0;
  v705[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix initialsync_marker" ifRequired:v471 block:v705];
  v703[0] = MEMORY[0x1E4F143A8];
  v703[1] = 3221225472;
  v703[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_952;
  v703[3] = &unk_1E5871CA0;
  v703[4] = self;
  id v323 = v322;
  id v704 = v323;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Moving cloud shared derivatives" ifRequired:(a5 - 11079) < 0xC block:v703];
  v701[0] = MEMORY[0x1E4F143A8];
  v701[1] = 3221225472;
  v701[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_956;
  v701[3] = &unk_1E5871CA0;
  v701[4] = self;
  id v324 = v323;
  id v702 = v324;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing duplicated root folder/orphaned albums" ifRequired:a5 < 11203 block:v701];
  v698[0] = MEMORY[0x1E4F143A8];
  v698[1] = 3221225472;
  v698[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_960;
  v698[3] = &unk_1E5871CA0;
  id v325 = v324;
  id v699 = v325;
  v700 = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Reconsidering saved asset type" ifRequired:a5 < 12035 block:v698];
  uint64_t v326 = *MEMORY[0x1E4F8BD30];
  uint64_t v327 = *MEMORY[0x1E4F8BD58];
  v696[0] = MEMORY[0x1E4F143A8];
  v696[1] = 3221225472;
  v696[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_964;
  v696[3] = &unk_1E5871CA0;
  v696[4] = self;
  id v328 = v325;
  id v697 = v328;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting and populating internal resources" ifRequired:a5 < 13106 recordTimedCoreAnalyticsEvent:v326 coreAnalyticsEventKey:v327 block:v696];
  v693[0] = MEMORY[0x1E4F143A8];
  v693[1] = 3221225472;
  v693[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_970;
  v693[3] = &unk_1E5871CA0;
  id v329 = v328;
  id v694 = v329;
  v695 = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting legacy cloud resources" ifRequired:a5 < 13119 block:v693];
  v691[0] = MEMORY[0x1E4F143A8];
  v691[1] = 3221225472;
  v691[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_974;
  v691[3] = &unk_1E5871CA0;
  v691[4] = self;
  id v330 = v329;
  id v692 = v330;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting dummy worker analysis states" ifRequired:a5 < 11200 block:v691];
  v689[0] = MEMORY[0x1E4F143A8];
  v689[1] = 3221225472;
  v689[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_978;
  v689[3] = &unk_1E5871CA0;
  v689[4] = self;
  id v331 = v330;
  id v690 = v331;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Cleaning up wallpaper remnants" ifRequired:a5 < 12000 block:v689];
  v687[0] = MEMORY[0x1E4F143A8];
  v687[1] = 3221225472;
  v687[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_982;
  v687[3] = &unk_1E5871CA0;
  v687[4] = self;
  id v332 = v331;
  id v688 = v332;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting persistent history" ifRequired:v472 block:v687];
  v685[0] = MEMORY[0x1E4F143A8];
  v685[1] = 3221225472;
  v685[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_986;
  v685[3] = &unk_1E5871CA0;
  v685[4] = self;
  id v333 = v332;
  id v686 = v333;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Remove invalidAdjustmentResourceData" ifRequired:v474 block:v685];
  v683[0] = MEMORY[0x1E4F143A8];
  v683[1] = 3221225472;
  v683[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_990;
  v683[3] = &unk_1E5871CA0;
  v683[4] = self;
  id v334 = v333;
  id v684 = v334;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Creating importSession albums" ifRequired:v473 block:v683];
  v681[0] = MEMORY[0x1E4F143A8];
  v681[1] = 3221225472;
  v681[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_995;
  v681[3] = &unk_1E5871CA0;
  v681[4] = self;
  id v335 = v334;
  id v682 = v335;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Remove invalid importSession albums" ifRequired:a5 < 13036 block:v681];
  v679[0] = MEMORY[0x1E4F143A8];
  v679[1] = 3221225472;
  v679[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_999;
  v679[3] = &unk_1E5871CA0;
  v679[4] = self;
  id v336 = v335;
  id v680 = v336;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix zero dimensions for local raw images" ifRequired:a5 < 13050 block:v679];
  v677[0] = MEMORY[0x1E4F143A8];
  v677[1] = 3221225472;
  v677[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_1003;
  v677[3] = &unk_1E5871CA0;
  v677[4] = self;
  id v337 = v336;
  id v678 = v337;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Remove scenes that are below the previous threshold" ifRequired:a5 < 12036 block:v677];
  v675[0] = MEMORY[0x1E4F143A8];
  v675[1] = 3221225472;
  v675[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_1007;
  v675[3] = &unk_1E5871CA0;
  v675[4] = self;
  id v338 = v337;
  id v676 = v338;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Revalidating import session dates" ifRequired:v477 block:v675];
  v673[0] = MEMORY[0x1E4F143A8];
  v673[1] = 3221225472;
  v673[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_1011;
  v673[3] = &unk_1E5871CA0;
  v673[4] = self;
  id v339 = v338;
  id v674 = v339;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Set importedBy in PLCloudMaster" ifRequired:v476 block:v673];
  v670[0] = MEMORY[0x1E4F143A8];
  v670[1] = 3221225472;
  v670[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_1015;
  v670[3] = &unk_1E5866570;
  char v672 = v520;
  v670[4] = self;
  id v340 = v339;
  id v671 = v340;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Delete video thumbs with preferred keyframe" ifRequired:v475 block:v670];
  v668[0] = MEMORY[0x1E4F143A8];
  v668[1] = 3221225472;
  v668[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_1020;
  v668[3] = &unk_1E5871CA0;
  v668[4] = self;
  id v341 = v340;
  id v669 = v341;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Reset Analysis state for videos" ifRequired:v478 block:v668];
  v666[0] = MEMORY[0x1E4F143A8];
  v666[1] = 3221225472;
  v666[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_1024;
  v666[3] = &unk_1E5871CA0;
  v666[4] = self;
  id v342 = v341;
  id v667 = v342;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix CMM assets in DCIM folder with wrong saved asset type" ifRequired:a5 < 13089 block:v666];
  v664[0] = MEMORY[0x1E4F143A8];
  v664[1] = 3221225472;
  v664[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_1028;
  v664[3] = &unk_1E5871CA0;
  v664[4] = self;
  id v343 = v342;
  id v665 = v343;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Add UUIDs to existing keywords" ifRequired:a5 < 13099 block:v664];
  v662[0] = MEMORY[0x1E4F143A8];
  v662[1] = 3221225472;
  v662[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_1032;
  v662[3] = &unk_1E5871CA0;
  v662[4] = self;
  id v344 = v343;
  id v663 = v344;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Update start and end dates for suggestions missing them" ifRequired:a5 < 13103 block:v662];
  v660[0] = MEMORY[0x1E4F143A8];
  v660[1] = 3221225472;
  v660[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_1036;
  v660[3] = &unk_1E5871CA0;
  v660[4] = self;
  id v345 = v344;
  id v661 = v345;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting all orphaned ExtendedAttributes" ifRequired:a5 < 13117 block:v660];
  v658[0] = MEMORY[0x1E4F143A8];
  v658[1] = 3221225472;
  v658[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_1040;
  v658[3] = &unk_1E5871CA0;
  v658[4] = self;
  id v346 = v345;
  id v659 = v346;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Deleting extraneous adjusted full size resource rows" ifRequired:a5 < 13137 block:v658];
  v656[0] = MEMORY[0x1E4F143A8];
  v656[1] = 3221225472;
  v656[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_1044;
  v656[3] = &unk_1E5871CA0;
  v656[4] = self;
  id v347 = v346;
  id v657 = v347;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Updating missing FileSystemVolume.uuid values" ifRequired:a5 < 13152 block:v656];
  v655[0] = MEMORY[0x1E4F143A8];
  v655[1] = 3221225472;
  v655[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_1048;
  v655[3] = &unk_1E58708B0;
  v655[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Updating CPL marker files" ifRequired:v480 block:v655];
  v653[0] = MEMORY[0x1E4F143A8];
  v653[1] = 3221225472;
  v653[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_1052;
  v653[3] = &unk_1E5871CA0;
  v653[4] = self;
  id v348 = v347;
  id v654 = v348;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Updating album start/end dates" ifRequired:a5 < 13187 block:v653];
  v652[0] = MEMORY[0x1E4F143A8];
  v652[1] = 3221225472;
  v652[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_1056;
  v652[3] = &unk_1E58708B0;
  v652[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Going to repush videos" ifRequired:v481 block:v652];
  v650[0] = MEMORY[0x1E4F143A8];
  v650[1] = 3221225472;
  v650[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_1060;
  v650[3] = &unk_1E5871CA0;
  v650[4] = self;
  id v349 = v348;
  id v651 = v349;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing kindSubtype for live photos with LoopingVideo playbackStyle" ifRequired:a5 < 13191 block:v650];
  v648[0] = MEMORY[0x1E4F143A8];
  v648[1] = 3221225472;
  v648[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_1064;
  v648[3] = &unk_1E5871CA0;
  v648[4] = self;
  id v350 = v349;
  id v649 = v350;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing white balance values" ifRequired:a5 < 13193 block:v648];
  v646[0] = MEMORY[0x1E4F143A8];
  v646[1] = 3221225472;
  v646[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_1068;
  v646[3] = &unk_1E5871CA0;
  v646[4] = self;
  id v351 = v350;
  id v647 = v351;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing unneeded analysis state table entries" ifRequired:a5 < 13195 block:v646];
  v644[0] = MEMORY[0x1E4F143A8];
  v644[1] = 3221225472;
  v644[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14_1072;
  v644[3] = &unk_1E5871CA0;
  v644[4] = self;
  id v352 = v351;
  id v645 = v352;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing UTI for RD Migration" ifRequired:a5 < 13196 block:v644];
  v641[0] = MEMORY[0x1E4F143A8];
  v641[1] = 3221225472;
  v641[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15_1076;
  v641[3] = &unk_1E5866570;
  v641[4] = self;
  id v353 = v352;
  id v642 = v353;
  char v643 = v522;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Regenerating all Shared Streams resources data store key data" ifRequired:v112 < 0xE3 block:v641];
  v639[0] = MEMORY[0x1E4F143A8];
  v639[1] = 3221225472;
  v639[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_16_1080;
  v639[3] = &unk_1E5871CA0;
  v639[4] = self;
  id v354 = v353;
  id v640 = v354;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing location values" ifRequired:a5 < 13200 block:v639];
  v637[0] = MEMORY[0x1E4F143A8];
  v637[1] = 3221225472;
  v637[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_17_1084;
  v637[3] = &unk_1E5871CA0;
  v637[4] = self;
  id v355 = v354;
  id v638 = v355;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Invalidating reverse geocoding data" ifRequired:a5 < 13307 block:v637];
  v635[0] = MEMORY[0x1E4F143A8];
  v635[1] = 3221225472;
  v635[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_18_1088;
  v635[3] = &unk_1E5871CA0;
  v635[4] = self;
  id v356 = v355;
  id v636 = v356;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing has location query on Smart Album" ifRequired:a5 < 13222 block:v635];
  v633[0] = MEMORY[0x1E4F143A8];
  v633[1] = 3221225472;
  v633[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_19_1092;
  v633[3] = &unk_1E5871CA0;
  v633[4] = self;
  id v357 = v356;
  id v634 = v357;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing XMP resource UTIs" ifRequired:0 block:v633];
  v632[0] = MEMORY[0x1E4F143A8];
  v632[1] = 3221225472;
  v632[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_20_1096;
  v632[3] = &unk_1E58708B0;
  v632[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Migrate purgeable resources" ifRequired:a5 < 13260 block:v632];
  v630[0] = MEMORY[0x1E4F143A8];
  v630[1] = 3221225472;
  v630[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_21_1100;
  v630[3] = &unk_1E5871CA0;
  v630[4] = self;
  id v358 = v357;
  id v631 = v358;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Renumbering localAvailability/localAvailabilityTargets" ifRequired:a5 < 13242 block:v630];
  v627[0] = MEMORY[0x1E4F143A8];
  v627[1] = 3221225472;
  v627[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_22_1104;
  v627[3] = &unk_1E5866570;
  v627[4] = self;
  id v359 = v358;
  id v628 = v359;
  char v629 = v522;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Migrating existing 1k resources from version specific to current" ifRequired:0 block:v627];
  v625[0] = MEMORY[0x1E4F143A8];
  v625[1] = 3221225472;
  v625[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_23_1108;
  v625[3] = &unk_1E5871CA0;
  v625[4] = self;
  id v360 = v359;
  id v626 = v360;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Requesting availability of 1k for relevant assets" ifRequired:0 block:v625];
  v623[0] = MEMORY[0x1E4F143A8];
  v623[1] = 3221225472;
  v623[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_24_1112;
  v623[3] = &unk_1E5871CA0;
  v623[4] = self;
  id v361 = v360;
  id v624 = v361;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Reconstructing PLExtendedAttributes for images" ifRequired:v482 block:v623];
  v621[0] = MEMORY[0x1E4F143A8];
  v621[1] = 3221225472;
  v621[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_25_1116;
  v621[3] = &unk_1E5871CA0;
  v621[4] = self;
  id v362 = v361;
  id v622 = v362;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Moving 1k resources out of masters dir" ifRequired:a5 < 13301 block:v621];
  v619[0] = MEMORY[0x1E4F143A8];
  v619[1] = 3221225472;
  v619[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_26_1120;
  v619[3] = &unk_1E5871CA0;
  v619[4] = self;
  id v363 = v362;
  id v620 = v363;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Remap PLResourceTypeUnknown..." ifRequired:v479 block:v619];
  v617[0] = MEMORY[0x1E4F143A8];
  v617[1] = 3221225472;
  v617[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_27;
  v617[3] = &unk_1E5871CA0;
  v617[4] = self;
  id v364 = v363;
  id v618 = v364;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Rebuild ReferenceKeys..." ifRequired:v479 block:v617];
  v616[0] = MEMORY[0x1E4F143A8];
  v616[1] = 3221225472;
  v616[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_28;
  v616[3] = &unk_1E58708B0;
  v616[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Relocate CPL marker files" ifRequired:a5 < 13304 block:v616];
  v615[0] = MEMORY[0x1E4F143A8];
  v615[1] = 3221225472;
  v615[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_29;
  v615[3] = &unk_1E58708B0;
  v615[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Cleanup legacy files" ifRequired:a5 < 13309 block:v615];
  v613[0] = MEMORY[0x1E4F143A8];
  v613[1] = 3221225472;
  v613[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_30;
  v613[3] = &unk_1E5871CA0;
  v613[4] = self;
  id v365 = v364;
  id v614 = v365;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Relocate original UBF files" ifRequired:a5 < 13323 block:v613];
  v611[0] = MEMORY[0x1E4F143A8];
  v611[1] = 3221225472;
  v611[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_31;
  v611[3] = &unk_1E5871CA0;
  v611[4] = self;
  id v366 = v365;
  id v612 = v366;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"verifying and fixing local availability for resources with broken fileIDs..." ifRequired:a5 < 13351 block:v611];
  v609[0] = MEMORY[0x1E4F143A8];
  v609[1] = 3221225472;
  v609[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_32;
  v609[3] = &unk_1E5871CA0;
  v609[4] = self;
  id v367 = v366;
  id v610 = v367;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Recalculating shared stream paths..." ifRequired:0 block:v609];
  v607[0] = MEMORY[0x1E4F143A8];
  v607[1] = 3221225472;
  v607[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_33;
  v607[3] = &unk_1E5871CA0;
  v607[4] = self;
  id v368 = v367;
  id v608 = v368;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing shared stream video resources..." ifRequired:v112 < 0x1F8 block:v607];
  v605[0] = MEMORY[0x1E4F143A8];
  v605[1] = 3221225472;
  v605[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_34;
  v605[3] = &unk_1E5871CA0;
  v605[4] = self;
  id v369 = v368;
  id v606 = v369;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing CPL resources that are uploaded not remotely available..." ifRequired:v112 < 0x213 block:v605];
  v603[0] = MEMORY[0x1E4F143A8];
  v603[1] = 3221225472;
  v603[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_35;
  v603[3] = &unk_1E5871CA0;
  v603[4] = self;
  id v370 = v369;
  id v604 = v370;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing CPL resources that are uploaded not remotely available..." ifRequired:v112 < 0x1FB block:v603];
  v601[0] = MEMORY[0x1E4F143A8];
  v601[1] = 3221225472;
  v601[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_36;
  v601[3] = &unk_1E5871CA0;
  v601[4] = self;
  id v371 = v370;
  id v602 = v371;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing adjustedFingerPrint values..." ifRequired:0 block:v601];
  v600[0] = MEMORY[0x1E4F143A8];
  v600[1] = 3221225472;
  v600[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_37;
  v600[3] = &unk_1E58708B0;
  v600[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Going to repush master with missing media metadata" ifRequired:v484 block:v600];
  v598[0] = MEMORY[0x1E4F143A8];
  v598[1] = 3221225472;
  v598[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_38;
  v598[3] = &unk_1E5871CA0;
  v598[4] = self;
  id v372 = v371;
  id v599 = v372;
  BOOL v373 = a5 < 13533;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Scavenging for snowplowGroupUUIDs..." ifRequired:v373 block:v598];
  v596[0] = MEMORY[0x1E4F143A8];
  v596[1] = 3221225472;
  v596[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_39;
  v596[3] = &unk_1E5871CA0;
  v596[4] = self;
  id v374 = v372;
  id v597 = v374;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix invalid post migration filesystem imported assets" ifRequired:(a5 - 13513) < 3 block:v596];
  v594[0] = MEMORY[0x1E4F143A8];
  v594[1] = 3221225472;
  v594[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_40;
  v594[3] = &unk_1E5871CA0;
  v594[4] = self;
  id v375 = v374;
  id v595 = v375;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Running CTM pairing..." ifRequired:v373 block:v594];
  v592[0] = MEMORY[0x1E4F143A8];
  v592[1] = 3221225472;
  v592[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_41;
  v592[3] = &unk_1E5871CA0;
  v592[4] = self;
  id v376 = v375;
  id v593 = v376;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repairing orphaned project extensions..." ifRequired:0 block:v592];
  v591[0] = MEMORY[0x1E4F143A8];
  v591[1] = 3221225472;
  v591[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_42;
  v591[3] = &unk_1E58708B0;
  v591[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repairing table thumb fragmentation..." ifRequired:0 block:v591];
  v589[0] = MEMORY[0x1E4F143A8];
  v589[1] = 3221225472;
  v589[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_43;
  v589[3] = &unk_1E5871CA0;
  v589[4] = self;
  id v377 = v376;
  id v590 = v377;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Marking all user smart albums not pushed..." ifRequired:0 block:v589];
  v587[0] = MEMORY[0x1E4F143A8];
  v587[1] = 3221225472;
  v587[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_44;
  v587[3] = &unk_1E5871CA0;
  v587[4] = self;
  id v378 = v377;
  id v588 = v378;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repairing Legacy Migration with Duplicate Versions and missing Cloud Resources..." ifRequired:0 block:v587];
  v585[0] = MEMORY[0x1E4F143A8];
  v585[1] = 3221225472;
  v585[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_45;
  v585[3] = &unk_1E5871CA0;
  v585[4] = self;
  id v379 = v378;
  id v586 = v379;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Migrating candidate bits to deferred processing candidate bits..." ifRequired:a5 < 14005 block:v585];
  v583[0] = MEMORY[0x1E4F143A8];
  v583[1] = 3221225472;
  v583[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_46;
  v583[3] = &unk_1E5871CA0;
  v583[4] = self;
  id v380 = v379;
  id v584 = v380;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Moving GPS horizontal accuracy to new attribute..." ifRequired:a5 < 14009 block:v583];
  v581[0] = MEMORY[0x1E4F143A8];
  v581[1] = 3221225472;
  v581[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_47;
  v581[3] = &unk_1E5871CA0;
  v581[4] = self;
  id v381 = v380;
  id v582 = v381;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Reconsidering allowed for analysis on assets marked as not allowed..." ifRequired:a5 < 18083 block:v581];
  v579[0] = MEMORY[0x1E4F143A8];
  v579[1] = 3221225472;
  v579[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_48;
  v579[3] = &unk_1E5871CA0;
  v579[4] = self;
  id v382 = v381;
  id v580 = v382;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Migrating metadata and migration history..." ifRequired:a5 < 14016 block:v579];
  v577[0] = MEMORY[0x1E4F143A8];
  v577[1] = 3221225472;
  v577[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_49;
  v577[3] = &unk_1E5871CA0;
  v577[4] = self;
  id v383 = v382;
  id v578 = v383;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repairing reframe videos without SOC available bit..." ifRequired:a5 < 14021 block:v577];
  v575[0] = MEMORY[0x1E4F143A8];
  v575[1] = 3221225472;
  v575[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_50;
  v575[3] = &unk_1E5871CA0;
  v575[4] = self;
  id v384 = v383;
  id v576 = v384;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fixing avalancheUUID for cloud shared assets..." ifRequired:a5 < 14025 block:v575];
  v573[0] = MEMORY[0x1E4F143A8];
  v573[1] = 3221225472;
  v573[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_51;
  v573[3] = &unk_1E5871CA0;
  v573[4] = self;
  id v385 = v384;
  id v574 = v385;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Regenerating month highlight titles..." ifRequired:a5 < 14027 block:v573];
  v571[0] = MEMORY[0x1E4F143A8];
  v571[1] = 3221225472;
  v571[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_52;
  v571[3] = &unk_1E5871CA0;
  v571[4] = self;
  id v386 = v385;
  id v572 = v386;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Copying asset description to accessibility description..." ifRequired:a5 < 14032 block:v571];
  v569[0] = MEMORY[0x1E4F143A8];
  v569[1] = 3221225472;
  v569[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_53;
  v569[3] = &unk_1E5871CA0;
  v569[4] = self;
  id v387 = v386;
  id v570 = v387;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing all local video key frame resources to revert 14037..." ifRequired:a5 == 14037 block:v569];
  v567[0] = MEMORY[0x1E4F143A8];
  v567[1] = 3221225472;
  v567[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_54;
  v567[3] = &unk_1E5871CA0;
  v567[4] = self;
  id v388 = v387;
  id v568 = v388;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing resource model manual constraint..." ifRequired:a5 < 14039 block:v567];
  v565[0] = MEMORY[0x1E4F143A8];
  v565[1] = 3221225472;
  v565[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_55;
  v565[3] = &unk_1E5871CA0;
  v565[4] = self;
  id v389 = v388;
  id v566 = v389;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repairing CTM original videos with SOC available bit set..." ifRequired:v485 block:v565];
  v563[0] = MEMORY[0x1E4F143A8];
  v563[1] = 3221225472;
  v563[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_56;
  v563[3] = &unk_1E5871CA0;
  v563[4] = self;
  id v390 = v389;
  id v564 = v390;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Persisting resource type on alternate image resources..." ifRequired:v486 block:v563];
  v561[0] = MEMORY[0x1E4F143A8];
  v561[1] = 3221225472;
  v561[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_57;
  v561[3] = &unk_1E5871CA0;
  v561[4] = self;
  id v391 = v390;
  id v562 = v391;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Adding RAW packed badge attributes..." ifRequired:v488 block:v561];
  v558[0] = MEMORY[0x1E4F143A8];
  v558[1] = 3221225472;
  v558[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_58;
  v558[3] = &unk_1E5866570;
  v558[4] = self;
  id v392 = v391;
  id v559 = v392;
  char v560 = v522;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Adding local video key frame resource..." ifRequired:v490 block:v558];
  v556[0] = MEMORY[0x1E4F143A8];
  v556[1] = 3221225472;
  v556[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_59;
  v556[3] = &unk_1E5871CA0;
  v556[4] = self;
  id v393 = v392;
  id v557 = v393;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repairing CTM original videos without adjustments..." ifRequired:v492 block:v556];
  v554[0] = MEMORY[0x1E4F143A8];
  v554[1] = 3221225472;
  v554[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_60;
  v554[3] = &unk_1E5871CA0;
  v554[4] = self;
  id v394 = v393;
  id v555 = v394;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Refactoring video large recipes..." ifRequired:v495 block:v554];
  v552[0] = MEMORY[0x1E4F143A8];
  v552[1] = 3221225472;
  v552[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_61;
  v552[3] = &unk_1E5871CA0;
  v552[4] = self;
  id v395 = v394;
  id v553 = v395;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Removing duplicated cloud shared comments" ifRequired:v497 block:v552];
  v550[0] = MEMORY[0x1E4F143A8];
  v550[1] = 3221225472;
  v550[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_62;
  v550[3] = &unk_1E5871CA0;
  v550[4] = self;
  id v396 = v395;
  id v551 = v396;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Fix wallpaper albums" ifRequired:v440 block:v550];
  v548[0] = MEMORY[0x1E4F143A8];
  v548[1] = 3221225472;
  v548[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_1234;
  v548[3] = &unk_1E5871CA0;
  v548[4] = self;
  id v397 = v396;
  id v549 = v397;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Invalidating assets with hdrGain==0" ifRequired:v487 block:v548];
  v546[0] = MEMORY[0x1E4F143A8];
  v546[1] = 3221225472;
  v546[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_1238;
  v546[3] = &unk_1E5871CA0;
  v546[4] = self;
  id v398 = v397;
  id v547 = v398;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting RepairAdjustmentFailure to Adjustment and clearing cloudRecoveryState" ifRequired:v489 block:v546];
  v544[0] = MEMORY[0x1E4F143A8];
  v544[1] = 3221225472;
  v544[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_1242;
  v544[3] = &unk_1E5871CA0;
  v544[4] = self;
  id v399 = v398;
  id v545 = v399;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting asset location shifting and rev geo" ifRequired:v491 block:v544];
  v542[0] = MEMORY[0x1E4F143A8];
  v542[1] = 3221225472;
  v542[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_1246;
  v542[3] = &unk_1E5871CA0;
  v542[4] = self;
  id v400 = v399;
  id v543 = v400;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Updating mogul subytpe on original slomos" ifRequired:v493 block:v542];
  v540[0] = MEMORY[0x1E4F143A8];
  v540[1] = 3221225472;
  v540[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_1250;
  v540[3] = &unk_1E5871CA0;
  v540[4] = self;
  id v401 = v400;
  id v541 = v401;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Converting asset depth states to depth type" ifRequired:v496 block:v540];
  v539[0] = MEMORY[0x1E4F143A8];
  v539[1] = 3221225472;
  v539[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_1254;
  v539[3] = &unk_1E58708B0;
  v539[4] = self;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Converting implicit keepOriginalsEnabled setting to explicit" ifRequired:v498 block:v539];
  v537[0] = MEMORY[0x1E4F143A8];
  v537[1] = 3221225472;
  v537[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_1258;
  v537[3] = &unk_1E5871CA0;
  v537[4] = self;
  id v402 = v401;
  id v538 = v402;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Un-quarantining previously quarantined assets" ifRequired:v499 block:v537];
  v535[0] = MEMORY[0x1E4F143A8];
  v535[1] = 3221225472;
  v535[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_1262;
  v535[3] = &unk_1E5871CA0;
  v535[4] = self;
  id v403 = v402;
  id v536 = v403;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting limited-library filter data" ifRequired:v500 block:v535];
  v533[0] = MEMORY[0x1E4F143A8];
  v533[1] = 3221225472;
  v533[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_1266;
  v533[3] = &unk_1E5871CA0;
  v533[4] = self;
  id v404 = v403;
  id v534 = v404;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Delete empty folder with the project root cloudGUID that has the wrong folder kind" ifRequired:v501 block:v533];
  v530[0] = MEMORY[0x1E4F143A8];
  v530[1] = 3221225472;
  v530[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_1270;
  v530[3] = &unk_1E5866570;
  v530[4] = self;
  id v405 = v404;
  id v531 = v405;
  char v532 = v522;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Delete key frame video resources for non-video assets" ifRequired:v503 block:v530];
  v528[0] = MEMORY[0x1E4F143A8];
  v528[1] = 3221225472;
  v528[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_1274;
  v528[3] = &unk_1E5871CA0;
  v528[4] = self;
  id v406 = v405;
  id v529 = v406;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Discard unused custom rendered values" ifRequired:a5 < 15059 block:v528];
  v526[0] = MEMORY[0x1E4F143A8];
  v526[1] = 3221225472;
  v526[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_1278;
  v526[3] = &unk_1E5871CA0;
  v526[4] = self;
  id v407 = v406;
  id v527 = v407;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Resetting image request hints" ifRequired:v522 block:v526];
  v524[0] = MEMORY[0x1E4F143A8];
  v524[1] = 3221225472;
  v524[2] = __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_1282;
  v524[3] = &unk_1E5871CA0;
  v524[4] = self;
  id v408 = v407;
  id v525 = v408;
  [(PLModelMigrationActionProcessor *)v205 performActionWithName:@"Repairing duplicate singleton fetching albums" ifRequired:1 block:v524];
  v409 = [MEMORY[0x1E4F28CB8] defaultManager];
  v410 = [(PLModelMigrator *)self pathManager];
  v411 = [v410 privateCacheDirectoryWithSubType:10];
  [v409 removeItemAtPath:v411 error:0];

  [(PLModelMigrator *)self applyDataProtectionToAllPhotosFilesOnce];
  [v505 stopRecordingTimedEventWithToken:*MEMORY[0x1E4F8BD50] forKey:v326 onEventWithName:v209];
  v412 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[PLModelMigrator _assetCountForStore:](self, "_assetCountForStore:", v408));
  v413 = [v412 stringValue];
  [v505 setPayloadValue:v413 forKey:*MEMORY[0x1E4F8BD80] onEventWithName:v326];

  if ([(PLModelMigrationActionProcessor *)v205 isSuccess])
  {
    v414 = PLMigrationGetLog();
    BOOL v415 = os_log_type_enabled(v414, OS_LOG_TYPE_DEFAULT);

    if (!v415) {
      goto LABEL_668;
    }
    v416 = [(PLModelMigrator *)self migrationLogger];

    if (v416)
    {
      long long v994 = 0u;
      long long v995 = 0u;
      long long v992 = 0u;
      long long v993 = 0u;
      long long v990 = 0u;
      long long v991 = 0u;
      long long v988 = 0u;
      long long v989 = 0u;
      long long v986 = 0u;
      long long v987 = 0u;
      long long v984 = 0u;
      long long v985 = 0u;
      long long v982 = 0u;
      long long v983 = 0u;
      long long v980 = 0u;
      long long v981 = 0u;
      long long v978 = 0u;
      long long v979 = 0u;
      long long v976 = 0u;
      long long v977 = 0u;
      long long v974 = 0u;
      long long v975 = 0u;
      long long v972 = 0u;
      long long v973 = 0u;
      long long v970 = 0u;
      long long v971 = 0u;
      long long v968 = 0u;
      long long v969 = 0u;
      long long v966 = 0u;
      long long v967 = 0u;
      memset(v965, 0, sizeof(v965));
      v417 = PLMigrationGetLog();
      os_log_type_enabled(v417, OS_LOG_TYPE_DEFAULT);
      int v961 = 67109376;
      int v962 = a5;
      __int16 v963 = 1024;
      int v964 = HIDWORD(v438);
      LODWORD(v438) = 14;
      v418 = (_DWORD *)_os_log_send_and_compose_impl();

      v419 = [(PLModelMigrator *)self migrationLogger];
      v420 = v419;
      v421 = v418;
      uint64_t v422 = 4750;
      uint64_t v423 = 0;
      goto LABEL_660;
    }
    v428 = PLMigrationGetLog();
    if (os_log_type_enabled(v428, OS_LOG_TYPE_DEFAULT))
    {
      v965[0] = 67109376;
      v965[1] = a5;
      LOWORD(v965[2]) = 1024;
      *(_DWORD *)((char *)&v965[2] + 2) = HIDWORD(v438);
      v429 = "Successfully finished post-processing lightweight migration of photo database from version %d to %d.";
      v430 = v428;
      os_log_type_t v431 = OS_LOG_TYPE_DEFAULT;
LABEL_666:
      _os_log_impl(&dword_19B3C7000, v430, v431, v429, (uint8_t *)v965, 0xEu);
      goto LABEL_667;
    }
    goto LABEL_667;
  }
  [(PLModelMigrationActionProcessor *)v205 setSuccess:0];
  v424 = PLMigrationGetLog();
  BOOL v425 = os_log_type_enabled(v424, OS_LOG_TYPE_ERROR);

  if (!v425) {
    goto LABEL_668;
  }
  v426 = [(PLModelMigrator *)self migrationLogger];

  if (!v426)
  {
    v428 = PLMigrationGetLog();
    if (os_log_type_enabled(v428, OS_LOG_TYPE_ERROR))
    {
      v965[0] = 67109376;
      v965[1] = a5;
      LOWORD(v965[2]) = 1024;
      *(_DWORD *)((char *)&v965[2] + 2) = HIDWORD(v438);
      v429 = "Failed to post-process lightweight migration of photo database from version %d to %d.  Requires full database rebuild.";
      v430 = v428;
      os_log_type_t v431 = OS_LOG_TYPE_ERROR;
      goto LABEL_666;
    }
LABEL_667:

    goto LABEL_668;
  }
  long long v994 = 0u;
  long long v995 = 0u;
  long long v992 = 0u;
  long long v993 = 0u;
  long long v990 = 0u;
  long long v991 = 0u;
  long long v988 = 0u;
  long long v989 = 0u;
  long long v986 = 0u;
  long long v987 = 0u;
  long long v984 = 0u;
  long long v985 = 0u;
  long long v982 = 0u;
  long long v983 = 0u;
  long long v980 = 0u;
  long long v981 = 0u;
  long long v978 = 0u;
  long long v979 = 0u;
  long long v976 = 0u;
  long long v977 = 0u;
  long long v974 = 0u;
  long long v975 = 0u;
  long long v972 = 0u;
  long long v973 = 0u;
  long long v970 = 0u;
  long long v971 = 0u;
  long long v968 = 0u;
  long long v969 = 0u;
  long long v966 = 0u;
  long long v967 = 0u;
  memset(v965, 0, sizeof(v965));
  v427 = PLMigrationGetLog();
  os_log_type_enabled(v427, OS_LOG_TYPE_ERROR);
  int v961 = 67109376;
  int v962 = a5;
  __int16 v963 = 1024;
  int v964 = HIDWORD(v438);
  LODWORD(v438) = 14;
  v418 = (_DWORD *)_os_log_send_and_compose_impl();

  v419 = [(PLModelMigrator *)self migrationLogger];
  v420 = v419;
  v421 = v418;
  uint64_t v422 = 4753;
  uint64_t v423 = 16;
LABEL_660:
  objc_msgSend(v419, "logWithMessage:fromCodeLocation:type:", v421, "PLModelMigrator.m", v422, v423);

  if (v418 != v965) {
    free(v418);
  }
LABEL_668:

  --postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount__postProcessMigratedStoreGuard;
  [(PLModelMigrator *)self _setIsPostProcessingLightWeightMigration:0];
  BOOL v432 = [(PLModelMigrationActionProcessor *)v205 isSuccess];

  return v432;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) deviceRestoreMigrationSupport];
  if (![v2 isRestoreFromBackup]) {
    goto LABEL_3;
  }
  id v3 = [*(id *)(a1 + 32) postProcessingToken];
  char v4 = [v3 isModelMigrationRestorePostProcessingComplete];

  if (v4) {
    goto LABEL_3;
  }
  int v7 = [v2 isRestoreFromBackupSourceDeviceToDevice];
  uint64_t v8 = v7 ^ 1u;
  id v9 = PLMigrationGetLog();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);

  if (v10)
  {
    uint64_t v11 = [*(id *)(a1 + 32) migrationLogger];

    if (v11)
    {
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v29 = 0u;
      int v12 = PLMigrationGetLog();
      os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      int v13 = @"cloud shared and iTunes synced";
      if (v7) {
        int v13 = @"cloud shared";
      }
      int v26 = 138543362;
      int v27 = v13;
      LODWORD(v25) = 12;
      long long v14 = (uint8_t *)_os_log_send_and_compose_impl();

      int v15 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", &v26, v25);
      objc_msgSend(v15, "logWithMessage:fromCodeLocation:type:", v14, "PLModelMigrator.m", 3612, 1);

      if (v14 != buf) {
        free(v14);
      }
    }
    else
    {
      BOOL v16 = PLMigrationGetLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = @"cloud shared and iTunes synced";
        if (v7) {
          uint64_t v17 = @"cloud shared";
        }
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_INFO, "Removing orphaned %{public}@ asset references", buf, 0xCu);
      }
    }
  }
  if (![*(id *)(a1 + 32) _deleteCloudSharedAndSynced:v8 assetReferencesInStore:*(void *)(a1 + 40)])
  {
    uint64_t v5 = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    BOOL v18 = PLMigrationGetLog();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);

    if (v19)
    {
      BOOL v20 = [*(id *)(a1 + 32) migrationLogger];

      if (v20)
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v29 = 0u;
        id v21 = PLMigrationGetLog();
        os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
        LOWORD(v26) = 0;
        LODWORD(v25) = 2;
        BOOL v22 = (uint8_t *)_os_log_send_and_compose_impl();

        id v23 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", &v26, v25);
        objc_msgSend(v23, "logWithMessage:fromCodeLocation:type:", v22, "PLModelMigrator.m", 3615, 1);

        if (v22 != buf) {
          free(v22);
        }
      }
      else
      {
        id v24 = PLMigrationGetLog();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_INFO, "Removing orphaned my photo stream references", buf, 2u);
        }
      }
    }
    uint64_t v5 = [*(id *)(a1 + 32) _deletePhotoStreamAssetReferencesInStore:*(void *)(a1 + 40)];
  }
  else
  {
LABEL_3:
    uint64_t v5 = 1;
  }
LABEL_4:

  return v5;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_459(uint64_t a1)
{
  return [*(id *)(a1 + 32) _postProcessFromVersion6006Store:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateKindSubtypeForPanoramaPhotosNeedsReset:0 inStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) managedObjectContextForMigrationInStore:*(void *)(a1 + 40) name:"-[PLModelMigrator postProcessMigratedStore:migrationUUID:fromVersion:progress:progressUnitCount:]_block_invoke_3" concurrencyType:*MEMORY[0x1E4F1C1C0]];
  id v3 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"TRUEPREDICATE"];
  char v4 = +[PLShare sharesWithPredicate:v3 fetchLimit:1 inManagedObjectContext:v2];
  uint64_t v5 = [v4 count];

  if (!*(unsigned char *)(a1 + 48) || v5)
  {
    uint64_t v12 = [*(id *)(a1 + 32) rebuildAllMomentsInStore:*(void *)(a1 + 40) deleteExistingMoments:1];
  }
  else
  {
    BOOL v6 = PLMigrationGetLog();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      uint64_t v8 = [*(id *)(a1 + 32) migrationLogger];

      if (v8)
      {
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v18 = 0u;
        id v9 = PLMigrationGetLog();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        v16[0] = 0;
        LODWORD(v15) = 2;
        BOOL v10 = (uint8_t *)_os_log_send_and_compose_impl();

        uint64_t v11 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v16, v15);
        objc_msgSend(v11, "logWithMessage:fromCodeLocation:type:", v10, "PLModelMigrator.m", 3641, 0);

        if (v10 != buf) {
          free(v10);
        }
      }
      else
      {
        int v13 = PLMigrationGetLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Skipping moment rebuild because it's only needed if shared content exists and none was found.", buf, 2u);
        }
      }
    }
    uint64_t v12 = 1;
  }

  return v12;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_474(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addUUIDsToCollectionLists:*(void *)(a1 + 40) skipMomentLists:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_478(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addLocationHashesToAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_482(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateAssetLocationData:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupRootFolderInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5(uint64_t a1)
{
  return [*(id *)(a1 + 32) _forceAlbumMetadataToDiskInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 48);
  id v3 = PLMigrationGetLog();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = [*(id *)(a1 + 32) migrationLogger];

      if (v5)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v19 = 0u;
        BOOL v6 = PLMigrationGetLog();
        os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        v17[0] = 0;
        LODWORD(v16) = 2;
        BOOL v7 = (uint8_t *)_os_log_send_and_compose_impl();

        uint64_t v8 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v17, v16);
        objc_msgSend(v8, "logWithMessage:fromCodeLocation:type:", v7, "PLModelMigrator.m", 3673, 0);

        if (v7 != buf) {
          free(v7);
        }
      }
      else
      {
        int v13 = PLMigrationGetLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_DEFAULT, "Migrating SLM files will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    if (v4)
    {
      id v9 = [*(id *)(a1 + 32) migrationLogger];

      if (v9)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v19 = 0u;
        BOOL v10 = PLMigrationGetLog();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        v17[0] = 0;
        LODWORD(v16) = 2;
        uint64_t v11 = (uint8_t *)_os_log_send_and_compose_impl();

        uint64_t v12 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v17, v16);
        objc_msgSend(v12, "logWithMessage:fromCodeLocation:type:", v11, "PLModelMigrator.m", 3675, 0);

        if (v11 != buf) {
          free(v11);
        }
      }
      else
      {
        uint64_t v15 = PLMigrationGetLog();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Migrating SLM files to new adjustments format", buf, 2u);
        }
      }
    }
    return [*(id *)(a1 + 32) _migrateLegacySlomoAdjustmentsInStore:*(void *)(a1 + 40) fromLegacySLMFormat:1];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_497(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3684, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Fixing asset persisence will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _persistPlaceAnnotationData:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_502(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3694, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Fixing asset persisence will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _fixupAssetPersistence:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_507(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3704, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Generating addedDate will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _generateAddedDateForAssetsInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_512(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateAdjustmentsStateForAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_516(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3718, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Fixing video dimensions will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _fixVideoDimensionsInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_521(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3728, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Fixing orientations will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _fixCorruptedOrientationsInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_526(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixupAlbumOrderInAlbumListInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_530(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixupSharedStreamOrientationsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_534(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixupBrokenBurstPicksInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_538(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixupCloudResourcesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_542(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixIncorrectThumbnailTablesInStore:*(void *)(a1 + 40) deferHintChanges:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_546(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3761, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Fixing HEIF assets with incorrect metadata will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _fixIncorrectHeifMetadataInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_551(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) managedObjectContextForMigrationInStore:*(void *)(a1 + 40) name:"-[PLModelMigrator postProcessMigratedStore:migrationUUID:fromVersion:progress:progressUnitCount:]_block_invoke" concurrencyType:*MEMORY[0x1E4F1C1C0]];
  BOOL v3 = [*(id *)(a1 + 32) _migrationThumbnailManagerWithStore:*(void *)(a1 + 40)];
  uint64_t v4 = [v3 resetThumbnailsWithResetType:*(void *)(a1 + 48) deferHintChanges:*(unsigned __int8 *)(a1 + 56) inContext:v2];

  return v4;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_555(uint64_t a1)
{
  return [*(id *)(a1 + 32) _verifyCloudAssetsLocalAvailability:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_559(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disableICloudPhoto];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_563(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeEvents:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_567(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateLegacySlomoAdjustmentsInStore:*(void *)(a1 + 40) fromLegacySLMFormat:0];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_571(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v2 = PLMigrationGetLog();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

    if (v4)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v35 = 0u;
      uint64_t v5 = PLMigrationGetLog();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      v33[0] = 0;
      LODWORD(v32) = 2;
      BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

      BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v33, v32);
      objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3791, 0);

      if (v6 != buf) {
        free(v6);
      }
    }
    else
    {
      uint64_t v8 = PLMigrationGetLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Moving adjusted resources for adjusted assets", buf, 2u);
      }
    }
  }
  uint64_t result = [*(id *)(a1 + 32) _fixAdjustedAssets:*(void *)(a1 + 40)];
  if (result)
  {
    BOOL v10 = PLMigrationGetLog();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      uint64_t v12 = [*(id *)(a1 + 32) migrationLogger];

      if (v12)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v35 = 0u;
        int v13 = PLMigrationGetLog();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        v33[0] = 0;
        LODWORD(v32) = 2;
        long long v14 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v15 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v33, v32);
        objc_msgSend(v15, "logWithMessage:fromCodeLocation:type:", v14, "PLModelMigrator.m", 3794, 0);

        if (v14 != buf) {
          free(v14);
        }
      }
      else
      {
        long long v16 = PLMigrationGetLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Duplicating original files for duplicated assets", buf, 2u);
        }
      }
    }
    uint64_t result = [*(id *)(a1 + 32) _fixDuplicatedAssets:*(void *)(a1 + 40)];
    if (result)
    {
      long long v17 = PLMigrationGetLog();
      BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

      if (v18)
      {
        long long v19 = [*(id *)(a1 + 32) migrationLogger];

        if (v19)
        {
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          *(_OWORD *)long long buf = 0u;
          long long v35 = 0u;
          long long v20 = PLMigrationGetLog();
          os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          v33[0] = 0;
          LODWORD(v32) = 2;
          long long v21 = (uint8_t *)_os_log_send_and_compose_impl();

          long long v22 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v33, v32);
          objc_msgSend(v22, "logWithMessage:fromCodeLocation:type:", v21, "PLModelMigrator.m", 3798, 0);

          if (v21 != buf) {
            free(v21);
          }
        }
        else
        {
          long long v23 = PLMigrationGetLog();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_DEFAULT, "Assign assetUuid for non adjusted assets", buf, 2u);
          }
        }
      }
      int v24 = [*(id *)(a1 + 32) _fixNonDuplicatedAssets:*(void *)(a1 + 40) adjusted:0];
      uint64_t result = 0;
      if (v24)
      {
        long long v25 = PLMigrationGetLog();
        BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

        if (v26)
        {
          long long v27 = [*(id *)(a1 + 32) migrationLogger];

          if (v27)
          {
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            *(_OWORD *)long long buf = 0u;
            long long v35 = 0u;
            long long v28 = PLMigrationGetLog();
            os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
            v33[0] = 0;
            LODWORD(v32) = 2;
            long long v29 = (uint8_t *)_os_log_send_and_compose_impl();

            long long v30 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v33, v32);
            objc_msgSend(v30, "logWithMessage:fromCodeLocation:type:", v29, "PLModelMigrator.m", 3802, 0);

            if (v29 != buf) {
              free(v29);
            }
          }
          else
          {
            long long v31 = PLMigrationGetLog();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_19B3C7000, v31, OS_LOG_TYPE_DEFAULT, "Assign assetUuid for non-duplicated adjusted assets", buf, 2u);
            }
          }
        }
        return [*(id *)(a1 + 32) _fixNonDuplicatedAssets:*(void *)(a1 + 40) adjusted:1];
      }
    }
  }
  return result;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_579(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repersistDuplicatedAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_583(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3815, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        BOOL v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Populate face regions will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _populateFaceRegionsInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_588(uint64_t a1)
{
  return [*(id *)(a1 + 32) _forceSoftResetSync];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_592(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetAlbumToFolderOrderKeyForAlbums:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_596(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixDuplicatedAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_600(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixVisibleBurstAsset:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_604(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixVideoJPGPath:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_608(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixAlbumAndFolderSortAscending:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v20 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v18[0] = 0;
        LODWORD(v17) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v18, v17);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3852, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v8 = PLMigrationGetLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Caching date created on resources.", buf, 2u);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 49))
  {
    uint64_t v9 = PLMigrationGetLog();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

    if (v10)
    {
      BOOL v11 = [*(id *)(a1 + 32) migrationLogger];

      if (v11)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v20 = 0u;
        uint64_t v12 = PLMigrationGetLog();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        v18[0] = 0;
        LODWORD(v17) = 2;
        int v13 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v14 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v18, v17);
        objc_msgSend(v14, "logWithMessage:fromCodeLocation:type:", v13, "PLModelMigrator.m", 3855, 0);

        if (v13 != buf) {
          free(v13);
        }
      }
      else
      {
        long long v15 = PLMigrationGetLog();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Caching itemIdentifier on resources.", buf, 2u);
        }
      }
    }
  }
  return [*(id *)(a1 + 32) _performMigrationCacheDateCreatedOnResources:*(unsigned __int8 *)(a1 + 48) cacheItemIdentifierOnResources:*(unsigned __int8 *)(a1 + 49) store:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_617(uint64_t a1)
{
  return [*(id *)(a1 + 32) _recoverSingleBurstPhotos:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_621(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateAdjustmentTimestampsOnAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_625(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3871, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        BOOL v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Fixing incorrectly addedDate will be handled during background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _fixIncorrectAddedDateForAssetsInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_630(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addCameraCaptureDeviceForAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_634(uint64_t a1)
{
  return [*(id *)(a1 + 32) _tagScreenshotsForAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_638(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixupSharedVideosWithoutThumbnailsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_642(uint64_t a1)
{
  return [*(id *)(a1 + 32) _markOldPhotoIrisEditsEvaluatedInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_646(uint64_t a1)
{
  return [*(id *)(a1 + 32) _markPhotoIrisVideoOrphansInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_650(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addCloudKindSubtypeAndBurstFlagsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_654(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixItemIdentifierForVideoCmplInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixLocalPathForVideoCmplDerivativesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixEmptyVideoResourcePathsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10(uint64_t a1)
{
  return [*(id *)(a1 + 32) _persistVideoComplPropertiesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11(uint64_t a1)
{
  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) pathManager];
  BOOL v3 = [v2 photoDirectoryWithType:4];

  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = v3;
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  [v4 applyDataProtectionToPhotosPaths:v5 fromKeyClass:2 toKeyClass:3];

  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetFailedAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetFailedCloudMasters:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetUploadAttempts:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_16(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixCloudMasterCloudLocalState:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_17(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateRepresentativeAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_18(uint64_t a1)
{
  return [*(id *)(a1 + 32) deleteAllAssetAnalysisStatesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_19(uint64_t a1)
{
  return [*(id *)(a1 + 32) fixupUnknownAnalysisStatesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_20(uint64_t a1)
{
  return [*(id *)(a1 + 32) fixupStatesWithUnreachableAssetUUIDsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_21(uint64_t a1)
{
  return [*(id *)(a1 + 32) touchAnalysisStateSortTokensInStoreInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_22(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateLatLongInAsset:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_23(uint64_t a1)
{
  return [*(id *)(a1 + 32) _persistMemoriesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_24(uint64_t a1)
{
  return [*(id *)(a1 + 32) _persistPersonsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_25(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeOldPersonMetadataInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_26(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v2 = PLMigrationGetLog();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

    if (v4)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v20 = 0u;
      uint64_t v5 = PLMigrationGetLog();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      v18[0] = 0;
      LODWORD(v17) = 2;
      BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

      BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v18, v17);
      objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 3990, 0);

      if (v6 != buf) {
        free(v6);
      }
    }
    else
    {
      uint64_t v8 = PLMigrationGetLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Populating asset's filename with nil originalFilename", buf, 2u);
      }
    }
  }
  uint64_t result = [*(id *)(a1 + 32) _populateNilOriginalFilename:*(void *)(a1 + 40)];
  if (result)
  {
    BOOL v10 = PLMigrationGetLog();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      uint64_t v12 = [*(id *)(a1 + 32) migrationLogger];

      if (v12)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v20 = 0u;
        int v13 = PLMigrationGetLog();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        v18[0] = 0;
        LODWORD(v17) = 2;
        long long v14 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v15 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v18, v17);
        objc_msgSend(v15, "logWithMessage:fromCodeLocation:type:", v14, "PLModelMigrator.m", 3993, 0);

        if (v14 != buf) {
          free(v14);
        }
      }
      else
      {
        long long v16 = PLMigrationGetLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Populating master's original filename with nil originalFilename", buf, 2u);
        }
      }
    }
    return [*(id *)(a1 + 32) _populateNilOriginalFilenameOnMaster:*(void *)(a1 + 40)];
  }
  return result;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_717(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flattenUnknownCustomRenderedValues:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_721(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixCustomRenderedValues:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_725(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deleteAllMemoriesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_729(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) pathManager];
  BOOL v3 = [v2 photoDirectoryWithType:4];

  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = v3;
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  [v4 applyDataProtectionToPhotosPaths:v5 fromKeyClass:4 toKeyClass:3];

  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_733(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixFaceAlgorithmVersion:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_737(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixZeroDurationPhotoIrisWithLocalResourcesInStore:*(void *)(a1 + 40) assumeAdjustedIrisIsVisible:1];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_741(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeCameraRollInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_745(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixLastPrefetchDateInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_749(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixLocallyAvailableFlagForThumbnailsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_753(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateKeyAssetInMemory:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_757(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deleteOrphanedUnverifiedPeople:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_761(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixMemoriesWithAssetLists:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_765(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeUntrackedCloudResourceImageDerivativesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14_769(uint64_t a1)
{
  return [*(id *)(a1 + 32) _rebuildWideCaptureThumbsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15_773(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 4068, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        BOOL v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Persist iris visibility will be handled in background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _persistPhotoIrisVisibilityStateToDiskInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_778(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanupInvalidAlbumsAndFoldersInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_782(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        uint64_t v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 4082, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        BOOL v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Setting correct playback style will be handled in background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _setPlaybackStyleForAnimatedGIFsInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_787(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixMovieAttributesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_791(uint64_t a1)
{
  v1 = [*(id *)(a1 + 32) pathManager];
  int v2 = [v1 libraryURL];
  BOOL v3 = +[PLLibraryServicesManager libraryServicesManagerForLibraryURL:v2];

  if (_os_feature_enabled_impl())
  {
    uint64_t v4 = [v3 searchIndexingEngine];
    [v4 dropSearchIndexWithSourceName:@"Dropping search index after lightweight migration" completion:0];
  }
  else
  {
    uint64_t v4 = [v3 searchIndexManager];
    [v4 resetSearchIndexWithReason:6 dropCompletion:0];
  }

  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_795(uint64_t a1)
{
  return [*(id *)(a1 + 32) markAllSceneAnalysisStatesDirtyAndClearDistanceIdentitiesInStoreAndClearSceneprints:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_799(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setUserTypeOnKeyFace:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_803(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshTriggerValues:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_807(uint64_t a1)
{
  return [*(id *)(a1 + 32) clearVisionWorkerCache];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_811(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixRejectedKeyFace:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_815(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixMergedPeopleThatShouldBeVerified:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_819(uint64_t a1)
{
  return [*(id *)(a1 + 32) _tryToPromoteUnknownAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_823(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixTrashedDate:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_827(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixMasterCloudLocalStateEnum:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_831(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateCloudResourceLocalStateInStor:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_835(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixupCroppedUnadjustedAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14_839(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateUserKeyFacePickSourceForPersonInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15_843(uint64_t a1)
{
  return [*(id *)(a1 + 32) _convertNameSourceFromBoolToIntForDeferredRebuildFaceInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_16_847(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removingDuplicatedCloudAssetGuid:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_17_848(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAutoloopWorkerStatesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_18_852(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixWhitelistOwnerForPendingInvitationsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_19_856(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repushMemoriesWithNewFeaturesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_20_860(uint64_t a1)
{
  return [*(id *)(a1 + 32) _retryQuarantinedAssetsAndFixResourceRelation:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_21_864(uint64_t a1)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t result = 1;
  unsigned __int8 v51 = 1;
  if (*(int *)(a1 + 48) < 11000)
  {
    char v3 = 0;
  }
  else
  {
    char v3 = [*(id *)(a1 + 32) _storeContainsFaceCrops:*(void *)(a1 + 40) success:&v51];
    uint64_t result = v51;
    if (!v51) {
      goto LABEL_14;
    }
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = PLMigrationGetLog();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      BOOL v6 = [*(id *)(a1 + 32) migrationLogger];

      if (v6)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v53 = 0u;
        BOOL v7 = PLMigrationGetLog();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        v50[0] = 0;
        LODWORD(v49) = 2;
        uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();

        uint64_t v9 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v50, v49);
        objc_msgSend(v9, "logWithMessage:fromCodeLocation:type:", v8, "PLModelMigrator.m", 4191, 0);

        if (v8 != buf) {
          free(v8);
        }
      }
      else
      {
        BOOL v10 = PLMigrationGetLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Ensuring every user-verified person with faces has a user-confirmed face", buf, 2u);
        }
      }
    }
    uint64_t result = [*(id *)(a1 + 32) _ensureAllUserVerifiedPersonsHaveFaceCropsInStore:*(void *)(a1 + 40)];
    unsigned __int8 v51 = result;
  }
LABEL_14:
  if (result) {
    char v11 = v3;
  }
  else {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = PLMigrationGetLog();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

    if (v13)
    {
      long long v14 = [*(id *)(a1 + 32) migrationLogger];

      if (v14)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v53 = 0u;
        long long v15 = PLMigrationGetLog();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        v50[0] = 0;
        LODWORD(v49) = 2;
        long long v16 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v17 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v50, v49);
        objc_msgSend(v17, "logWithMessage:fromCodeLocation:type:", v16, "PLModelMigrator.m", 4195, 0);

        if (v16 != buf) {
          free(v16);
        }
      }
      else
      {
        long long v18 = PLMigrationGetLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Resetting rejected faces on all persons", buf, 2u);
        }
      }
    }
    uint64_t result = [*(id *)(a1 + 32) resetRejectedFacesOnAllPersonsInStore:*(void *)(a1 + 40)];
    unsigned __int8 v51 = result;
  }
  if (result) {
    char v19 = v3;
  }
  else {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    long long v20 = PLMigrationGetLog();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);

    if (v21)
    {
      long long v22 = [*(id *)(a1 + 32) migrationLogger];

      if (v22)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v53 = 0u;
        long long v23 = PLMigrationGetLog();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        v50[0] = 0;
        LODWORD(v49) = 2;
        long long v24 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v25 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v50, v49);
        objc_msgSend(v25, "logWithMessage:fromCodeLocation:type:", v24, "PLModelMigrator.m", 4199, 0);

        if (v24 != buf) {
          free(v24);
        }
      }
      else
      {
        long long v26 = PLMigrationGetLog();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_DEFAULT, "Resetting face analysis state worker flags", buf, 2u);
        }
      }
    }
    uint64_t result = [*(id *)(a1 + 32) markAllDirtyFaceAnalysisStatesWithFaceDetectionWorkerFlagsInStore:*(void *)(a1 + 40)];
    unsigned __int8 v51 = result;
  }
  if (result) {
    char v27 = v3;
  }
  else {
    char v27 = 1;
  }
  if ((v27 & 1) == 0)
  {
    long long v28 = PLMigrationGetLog();
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);

    if (v29)
    {
      long long v30 = [*(id *)(a1 + 32) migrationLogger];

      if (v30)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v53 = 0u;
        long long v31 = PLMigrationGetLog();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        v50[0] = 0;
        LODWORD(v49) = 2;
        long long v32 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v33 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v50, v49);
        objc_msgSend(v33, "logWithMessage:fromCodeLocation:type:", v32, "PLModelMigrator.m", 4203, 0);

        if (v32 != buf) {
          free(v32);
        }
      }
      else
      {
        long long v34 = PLMigrationGetLog();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v34, OS_LOG_TYPE_DEFAULT, "Marking face analysis state dirty for user confirmed faces", buf, 2u);
        }
      }
    }
    uint64_t result = [*(id *)(a1 + 32) markUserConfirmedFacesAndCorrespondingFaceAnalysisStatesDirtyInStore:*(void *)(a1 + 40)];
    unsigned __int8 v51 = result;
  }
  if (result)
  {
    if (!*(unsigned char *)(a1 + 52)) {
      return 1;
    }
    long long v35 = PLMigrationGetLog();
    BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);

    if (v36)
    {
      long long v37 = [*(id *)(a1 + 32) migrationLogger];

      if (v37)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v53 = 0u;
        long long v38 = PLMigrationGetLog();
        os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
        v50[0] = 0;
        LODWORD(v49) = 2;
        long long v39 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v40 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v50, v49);
        objc_msgSend(v40, "logWithMessage:fromCodeLocation:type:", v39, "PLModelMigrator.m", 4209, 0);

        if (v39 != buf) {
          free(v39);
        }
      }
      else
      {
        long long v41 = PLMigrationGetLog();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v41, OS_LOG_TYPE_DEFAULT, "Repush assets with user modified faces", buf, 2u);
        }
      }
    }
    uint64_t result = [*(id *)(a1 + 32) _repushAssetsWithAnyUserConfirmedFaceInStore:*(void *)(a1 + 40)];
    unsigned __int8 v51 = result;
    if (result)
    {
      if (*(unsigned char *)(a1 + 52))
      {
        long long v42 = PLMigrationGetLog();
        BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);

        if (v43)
        {
          long long v44 = [*(id *)(a1 + 32) migrationLogger];

          if (v44)
          {
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            *(_OWORD *)long long buf = 0u;
            long long v53 = 0u;
            long long v45 = PLMigrationGetLog();
            os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
            v50[0] = 0;
            LODWORD(v49) = 2;
            uint64_t v46 = (uint8_t *)_os_log_send_and_compose_impl();

            long long v47 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v50, v49);
            objc_msgSend(v47, "logWithMessage:fromCodeLocation:type:", v46, "PLModelMigrator.m", 4213, 0);

            if (v46 != buf) {
              free(v46);
            }
          }
          else
          {
            long long v48 = PLMigrationGetLog();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_19B3C7000, v48, OS_LOG_TYPE_DEFAULT, "Flagging persons that may have synced ", buf, 2u);
            }
          }
        }
        return [*(id *)(a1 + 32) _markMigrationVerifiedTypePersonsInStore:*(void *)(a1 + 40)];
      }
      return 1;
    }
  }
  return result;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_874(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateCloudNameSourceOnFacesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_878(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updatePlaybackStylesAndVariationsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_882(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v16 = 0u;
        BOOL v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v14[0] = 0;
        LODWORD(v13) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v14, v13);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 4231, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        uint64_t v12 = PLMigrationGetLog();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v12, OS_LOG_TYPE_DEFAULT, "identifyVariationsAndDepthAdjustments will be handled in background OTA restore phase", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 32) isCloudPhotoLibraryEnabled];
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    return [v9 _identifyVariationsAndDepthAdjustmentsIncludingBakedInLongExposure:v8 inStore:v10];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_887(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateCloudVerifiedTypeOnPersonsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_891(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetFaceQualityInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_895(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeUntrackedPersonMetadataInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_899(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetManualOrderForNonFavoritePeopleInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_903(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAutoloopCacheIfExists];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_907(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixAssetMasterResources:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_911(uint64_t a1)
{
  v1 = [*(id *)(a1 + 32) pathManager];
  int v2 = +[PLCPLSettings settingsWithPathManager:v1];

  [v2 setRunOnceFlag:2 error:0];
  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_916(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixNilCloudMasterGUID:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_920(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repushPersonsWithMergeTargetInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_924(uint64_t a1)
{
  return [*(id *)(a1 + 32) _persistStoreUUIDToMobileCPLPlist:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_928(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v2 = PLMigrationGetLog();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

    if (v4)
    {
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v34 = 0u;
      BOOL v5 = PLMigrationGetLog();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      v32[0] = 0;
      LODWORD(v31) = 2;
      BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

      BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v32, v31);
      objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 4282, 0);

      if (v6 != buf) {
        free(v6);
      }
    }
    else
    {
      uint64_t v8 = PLMigrationGetLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Puring cloud shared resources", buf, 2u);
      }
    }
  }
  uint64_t result = [*(id *)(a1 + 32) _purgeCloudSharedResourcesInStore:*(void *)(a1 + 40)];
  if (result)
  {
    uint64_t v10 = PLMigrationGetLog();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      uint64_t v12 = [*(id *)(a1 + 32) migrationLogger];

      if (v12)
      {
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v34 = 0u;
        uint64_t v13 = PLMigrationGetLog();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        v32[0] = 0;
        LODWORD(v31) = 2;
        long long v14 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v15 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v32, v31);
        objc_msgSend(v15, "logWithMessage:fromCodeLocation:type:", v14, "PLModelMigrator.m", 4285, 0);

        if (v14 != buf) {
          free(v14);
        }
      }
      else
      {
        long long v16 = PLMigrationGetLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Fixing UTI and directory for cloud shared videos", buf, 2u);
        }
      }
    }
    uint64_t result = [*(id *)(a1 + 32) _fixCloudSharedVideosInStore:*(void *)(a1 + 40)];
    if (result)
    {
      long long v17 = PLMigrationGetLog();
      BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

      if (v18)
      {
        long long v19 = [*(id *)(a1 + 32) migrationLogger];

        if (v19)
        {
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)long long buf = 0u;
          long long v34 = 0u;
          long long v20 = PLMigrationGetLog();
          os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          v32[0] = 0;
          LODWORD(v31) = 2;
          long long v21 = (uint8_t *)_os_log_send_and_compose_impl();

          long long v22 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v32, v31);
          objc_msgSend(v22, "logWithMessage:fromCodeLocation:type:", v21, "PLModelMigrator.m", 4289, 0);

          if (v21 != buf) {
            free(v21);
          }
        }
        else
        {
          long long v23 = PLMigrationGetLog();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_DEFAULT, "Fixing filename for cloud shared GIFs", buf, 2u);
          }
        }
      }
      uint64_t result = [*(id *)(a1 + 32) _fixCloudSharedGIFsInStore:*(void *)(a1 + 40)];
      if (result)
      {
        long long v24 = PLMigrationGetLog();
        BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);

        if (v25)
        {
          long long v26 = [*(id *)(a1 + 32) migrationLogger];

          if (v26)
          {
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            *(_OWORD *)long long buf = 0u;
            long long v34 = 0u;
            long long v27 = PLMigrationGetLog();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            v32[0] = 0;
            LODWORD(v31) = 2;
            long long v28 = (uint8_t *)_os_log_send_and_compose_impl();

            long long v29 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v32, v31);
            objc_msgSend(v29, "logWithMessage:fromCodeLocation:type:", v28, "PLModelMigrator.m", 4293, 0);

            if (v28 != buf) {
              free(v28);
            }
          }
          else
          {
            long long v30 = PLMigrationGetLog();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_19B3C7000, v30, OS_LOG_TYPE_DEFAULT, "Fixing originalWidth/height/filename for cloud shared assets", buf, 2u);
            }
          }
        }
        return [*(id *)(a1 + 32) _fixOriginalPropertiesForCloudSharedAssetsInStore:*(void *)(a1 + 40)];
      }
    }
  }
  return result;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_936(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deletePersonsMissingUUIDInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_940(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unquarantinedQuarantinedItems:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_944(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixUTIforSlowMoInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_948(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixInitialSyncMarker];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_952(uint64_t a1)
{
  return [*(id *)(a1 + 32) _moveCloudSharedDerivativesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_956(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixDuplicatedRootFolderAndOrphanedAlbumsInStore:*(void *)(a1 + 40)];
}

BOOL __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_960(uint64_t a1)
{
  return +[PLResourceInstaller reconsiderSavedAssetTypeInStore:*(void *)(a1 + 32) migrator:*(void *)(a1 + 40)];
}

BOOL __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_964(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v2 = PLMigrationGetLog();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) migrationLogger];

    if (v4)
    {
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v21 = 0u;
      BOOL v5 = PLMigrationGetLog();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      v19[0] = 0;
      LODWORD(v18) = 2;
      BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

      BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v19, v18);
      objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 4329, 0);

      if (v6 != buf) {
        free(v6);
      }
    }
    else
    {
      uint64_t v8 = PLMigrationGetLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Resetting internal resources", buf, 2u);
      }
    }
  }
  BOOL v9 = +[PLResourceInstaller resetInternalResourcesInStore:*(void *)(a1 + 40) resetUTIs:1 resetCodecs:1 resetMasters:0 migrator:*(void *)(a1 + 32)];
  BOOL result = 0;
  if (v9)
  {
    BOOL v11 = PLMigrationGetLog();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

    if (v12)
    {
      uint64_t v13 = [*(id *)(a1 + 32) migrationLogger];

      if (v13)
      {
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v21 = 0u;
        long long v14 = PLMigrationGetLog();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        v19[0] = 0;
        LODWORD(v18) = 2;
        long long v15 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v16 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v19, v18);
        objc_msgSend(v16, "logWithMessage:fromCodeLocation:type:", v15, "PLModelMigrator.m", 4332, 0);

        if (v15 != buf) {
          free(v15);
        }
      }
      else
      {
        long long v17 = PLMigrationGetLog();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "Populating internal resources", buf, 2u);
        }
      }
    }
    return +[PLResourceInstaller createInternalResourcesForExistingAssetsWithNoExistingResourcesInStore:*(void *)(a1 + 40) migrator:*(void *)(a1 + 32)];
  }
  return result;
}

BOOL __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_970(uint64_t a1)
{
  return +[PLResourceInstaller removeLegacyCloudResourcesInStore:*(void *)(a1 + 32) migrator:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_974(uint64_t a1)
{
  return [*(id *)(a1 + 32) deleteAnalysisStatesInStore:*(void *)(a1 + 40) forWorkerType:4294966296];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_978(uint64_t a1)
{
  return [*(id *)(a1 + 32) _nukeWallpaperRemnantsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_982(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deletePersistentHistoryInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_986(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeInvalidAdjustmentResourceDataInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_990(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t result = [*(id *)(a1 + 32) _createImportSessionAlbums:*(void *)(a1 + 40)];
  if (result)
  {
    BOOL v3 = PLMigrationGetLog();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      BOOL v5 = [*(id *)(a1 + 32) migrationLogger];

      if (v5)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v13 = 0u;
        BOOL v6 = PLMigrationGetLog();
        os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        v11[0] = 0;
        LODWORD(v10) = 2;
        BOOL v7 = (uint8_t *)_os_log_send_and_compose_impl();

        uint64_t v8 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v11, v10);
        objc_msgSend(v8, "logWithMessage:fromCodeLocation:type:", v7, "PLModelMigrator.m", 4362, 0);

        if (v7 != buf) {
          free(v7);
        }
      }
      else
      {
        BOOL v9 = PLMigrationGetLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Persisting import session albums", buf, 2u);
        }
      }
    }
    return [*(id *)(a1 + 32) _persistImportSessionAlbumType:*(void *)(a1 + 40)];
  }
  return result;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_995(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeInvalidImportSessionAlbums:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_999(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixRawWithZeroDimensions:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_1003(uint64_t a1)
{
  return [*(id *)(a1 + 32) _filterSceneClassificationsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_1007(uint64_t a1)
{
  return [*(id *)(a1 + 32) _revalidateImportSessionDates:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_1011(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setImportedByInPLCloudMaster:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_1015(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = PLMigrationGetLog();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) migrationLogger];

      if (v4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v15 = 0u;
        BOOL v5 = PLMigrationGetLog();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        v13[0] = 0;
        LODWORD(v12) = 2;
        BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();

        BOOL v7 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v13, v12);
        objc_msgSend(v7, "logWithMessage:fromCodeLocation:type:", v6, "PLModelMigrator.m", 4391, 0);

        if (v6 != buf) {
          free(v6);
        }
      }
      else
      {
        BOOL v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Local thumbs will be recreated during OTA Migration", buf, 2u);
        }
      }
    }
    return 1;
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    return [v8 _deleteVideoThumbsMadeFromPreferredFrameInStore:v9];
  }
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_1020(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetAnalysisStateForVideosInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_1024(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixImportedAssetsFromCMMSavedInDCIMWithWrongSavedAssetType:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_1028(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addUUIDsToExistingKeywordsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_1032(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSuggestionStartAndEndDatesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_1036(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deleteOrphanedExtendedAttributes:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_1040(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deleteExtraneousAdjustedFullSizeResourcesForSloMoAssetsWithStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_1044(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateMissingFileSystemVolumeUuidInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_1048(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCPLMarkerFiles];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_1052(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAlbumDatesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_1056(uint64_t a1)
{
  v1 = [*(id *)(a1 + 32) pathManager];
  int v2 = +[PLCPLSettings settingsWithPathManager:v1];

  [v2 setRunOnceFlag:16 error:0];
  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_1060(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixKindSubtypeForLoopingVideoLivePhotosInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_1064(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixWhiteBalanceValuesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_1068(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeUnneededAnalysisStateTableEntries:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_14_1072(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixUTIForRDMigrationInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_15_1076(uint64_t a1)
{
  return [*(id *)(a1 + 32) _regenerateSharedStreamsDataStoreKeysDataInStore:*(void *)(a1 + 40) deferHintChanges:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_16_1080(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixLocationValuesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_17_1084(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateReverseGeocodingDataInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_18_1088(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixHasLocationSmartAlbum:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_19_1092(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixSidecarUTIsAndDataStoreSubtype:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_20_1096(uint64_t a1)
{
  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_21_1100(uint64_t a1)
{
  return [*(id *)(a1 + 32) _renumberLocalAvailabilityAndLocalAvailabilityTargetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_22_1104(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateVersionSpecific1kResourcesInStore:*(void *)(a1 + 40) deferHintChanges:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_23_1108(uint64_t a1)
{
  return [*(id *)(a1 + 32) _requestAvailabilityChangeForAssetsMissing1kResourcesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_24_1112(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reconstructImageExtendedAttributes:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_25_1116(uint64_t a1)
{
  return [*(id *)(a1 + 32) _move1kResourcesOutOfMastersDir:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_26_1120(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixupResourceTypeUnknownInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_27(uint64_t a1)
{
  return [*(id *)(a1 + 32) _regenerateReferenceKeyDataInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_28(uint64_t a1)
{
  return [*(id *)(a1 + 32) _relocateCPLMarkerFiles];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_29(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanupLegacyFiles];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_30(uint64_t a1)
{
  return [*(id *)(a1 + 32) relocateOriginalUBFPaths:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_31(uint64_t a1)
{
  return [*(id *)(a1 + 32) _verifyAndFixBrokenLocalAvailabilityForResourceWithFileIDsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_32(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAllSharedAssetDCIMFilesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_33(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixSharedStreamVideoResourcesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixUploadedButNotRemotelyAvailalbeCPLResourcesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_35(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixUnpushedVideoComplementResourcesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_36(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixAdjustedStableHashesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_37(uint64_t a1)
{
  v1 = [*(id *)(a1 + 32) pathManager];
  int v2 = +[PLCPLSettings settingsWithPathManager:v1];

  [v2 setRunOnceFlag:32 error:0];
  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scavengeCameraProcessingAdjustmentMetadataForAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_39(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fixInvalidPostMigrationFileSystemImportedAssets:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_40(uint64_t a1)
{
  return [*(id *)(a1 + 32) _runPairingForAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_41(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repairOrphanedProjectAlbumsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_42(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repairTableThumbFragmentation];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_43(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repushAllUserSmartAlbum:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_44(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repairLegacyMigrationDuplicateVersionCloudResources:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_45(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateCandidateBitsToDeferredProcessingCandidateOptions:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_46(uint64_t a1)
{
  return [*(id *)(a1 + 32) _moveGpsHorizontalAccuracyToNewAttribute:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_47(uint64_t a1)
{
  return [*(id *)(a1 + 32) reconsiderAllowedForAnalysisOnAssetsMarkedNotAllowedInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_48(uint64_t a1)
{
  return [*(id *)(a1 + 32) _migrateMetadataAndMigrationHistoryWithStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_49(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repairReframedAssetsWithoutSOCAvailableBitWithStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clearAvalancheUUIDOnCloudSharedAssetsWithStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_51(uint64_t a1)
{
  return [*(id *)(a1 + 32) _regenerateMonthHighlightTitlesWithStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_52(uint64_t a1)
{
  return [*(id *)(a1 + 32) _copyAssetDescriptionToAccessibilityDescription:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_53(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAllLocalVideoKeyFrameResourcesRevert14037InStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_54(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeResourceModelManualIdentityConstraintInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_55(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repairCTMOriginalVideosWithSOCAvailableBitInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_56(uint64_t a1)
{
  return [*(id *)(a1 + 32) _persistResourceTypeAttributeOnAlternateImageResourcesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_57(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addRAWPackedBadgeAttributeForAllRAWAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_58(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addLocalVideoKeyFrameResourceInStore:*(void *)(a1 + 40) deferHintChanges:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_59(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repairCTMOriginalVideosWithoutAdjustmentsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refactorLargeVideoRecipeResourcesInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_61(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeDuplicatedCloudSharedComments:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_62(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) options];
  BOOL v3 = [v2 objectForKeyedSubscript:@"DefaultAlbumUUID"];

  BOOL v4 = [*(id *)(a1 + 32) options];
  BOOL v5 = [v4 objectForKeyedSubscript:@"DefaultAlbumTitle"];

  if (!v3)
  {
LABEL_18:
    uint64_t v19 = 1;
    goto LABEL_19;
  }
  BOOL v6 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v7 = [v6 BOOLForKey:@"com.apple.Photos.FixWallpaper"];

  uint64_t v8 = PLMigrationGetLog();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

  if (!v7)
  {
    if (v9)
    {
      long long v14 = [*(id *)(a1 + 32) migrationLogger];

      if (v14)
      {
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v25 = 0u;
        long long v15 = PLMigrationGetLog();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        v23[0] = 0;
        LODWORD(v22) = 2;
        long long v16 = (uint8_t *)_os_log_send_and_compose_impl();

        long long v17 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v23, v22);
        objc_msgSend(v17, "logWithMessage:fromCodeLocation:type:", v16, "PLModelMigrator.m", 4661, 0);

        if (v16 != buf) {
          free(v16);
        }
      }
      else
      {
        long long v20 = PLMigrationGetLog();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "skip fix wallpaper albums", buf, 2u);
        }
      }
    }
    goto LABEL_18;
  }
  if (v9)
  {
    uint64_t v10 = [*(id *)(a1 + 32) migrationLogger];

    if (v10)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v25 = 0u;
      BOOL v11 = PLMigrationGetLog();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      v23[0] = 0;
      LODWORD(v22) = 2;
      uint64_t v12 = (uint8_t *)_os_log_send_and_compose_impl();

      long long v13 = objc_msgSend(*(id *)(a1 + 32), "migrationLogger", v23, v22);
      objc_msgSend(v13, "logWithMessage:fromCodeLocation:type:", v12, "PLModelMigrator.m", 4658, 0);

      if (v12 != buf) {
        free(v12);
      }
    }
    else
    {
      long long v18 = PLMigrationGetLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "fix wallpaper albums", buf, 2u);
      }
    }
  }
  uint64_t v19 = [*(id *)(a1 + 32) _repairWallpaperAlbumsInStore:*(void *)(a1 + 40) containerUUID:v3 title:v5];
LABEL_19:

  return v19;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_1234(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateZeroHDRGainInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_2_1238(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetDeferredRepairAdjustmentFailureAndCloudRecoveryStateInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_3_1242(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetAssetLocationShiftingAndRevGeoInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_4_1246(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateMogulSubtypeAndSetHighFrameRateStateOnAssetsInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_5_1250(uint64_t a1)
{
  return [*(id *)(a1 + 32) _convertAssetDepthStatesToDepthTypeInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_6_1254(uint64_t a1)
{
  return 1;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_7_1258(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unQuarantineAssetsIfPossibleInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_8_1262(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetLimitedLibraryFilterDataInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_9_1266(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deleteEmptyFolderWithProjectRootCloudGUIDOfWrongKindInStore:*(void *)(a1 + 40)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_10_1270(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deleteLocalVideoKeyFrameResourcesForNonVideosInStore:*(void *)(a1 + 40) deferHintChanges:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_11_1274(uint64_t a1)
{
  return [*(id *)(a1 + 32) _discardUnusedCustomRenderedValuesInStore:*(void *)(a1 + 40)];
}

BOOL __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_12_1278(uint64_t a1)
{
  v1 = [*(id *)(a1 + 32) managedObjectContextForMigrationInStore:*(void *)(a1 + 40) name:"-[PLModelMigrator postProcessMigratedStore:migrationUUID:fromVersion:progress:progressUnitCount:]_block_invoke_12" concurrencyType:*MEMORY[0x1E4F1C1C0]];
  BOOL v2 = +[PLResourceInstaller resetImageRequestHintsInContext:v1];

  return v2;
}

uint64_t __97__PLModelMigrator_postProcessMigratedStore_migrationUUID_fromVersion_progress_progressUnitCount___block_invoke_13_1282(uint64_t a1)
{
  return [*(id *)(a1 + 32) _repairDuplicateSingletonFetchingAlbumsInStore:*(void *)(a1 + 40)];
}

- (BOOL)validateModelEntityNames:(id *)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  BOOL v4 = +[PLManagedObjectContext managedObjectModel];
  BOOL v5 = [v4 entitiesByName];
  BOOL v6 = [v5 allKeys];

  int v7 = PLXPCStoreAllowedEntityNames();
  uint64_t v8 = PLXPCStoreDeniedEntityNames();
  BOOL v9 = [MEMORY[0x1E4F1CA80] set];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v10 = v6;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        if ((objc_msgSend(v7, "containsObject:", v15, (void)v19) & 1) == 0
          && ([v8 containsObject:v15] & 1) == 0)
        {
          [v9 addObject:v15];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }

  uint64_t v16 = [v9 count];
  uint64_t v17 = v16;
  if (a3 && v16) {
    *a3 = v9;
  }

  return v17 == 0;
}

- (void)_setIsPostProcessingLightWeightMigration:(BOOL)a3
{
  self->_isPostProcessingLightWeightMigration = a3;
}

- (int64_t)attemptLightweightMigrationFromVersion:(id)a3 onStore:(id)a4 withMetadata:(id)a5 orStoreURL:(id)a6 options:(id)a7 coordinator:(id)a8 migrationPolicy:(unsigned int)a9 error:(id *)a10
{
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v32 = a6;
  id v33 = a7;
  id v20 = a8;
  if (v17)
  {
    if (v19) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v29 = [MEMORY[0x1E4F28B00] currentHandler];
    [v29 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 3188, @"Invalid parameter not satisfying: %@", @"previousStoreVersion", v32, v33 object file lineNumber description];

    if (v19) {
      goto LABEL_3;
    }
  }
  long long v30 = [MEMORY[0x1E4F28B00] currentHandler];
  [v30 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 3189, @"Invalid parameter not satisfying: %@", @"storeMetadata" object file lineNumber description];

LABEL_3:
  if (!v20)
  {
    long long v31 = [MEMORY[0x1E4F28B00] currentHandler];
    [v31 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 3190, @"Invalid parameter not satisfying: %@", @"coordinator" object file lineNumber description];
  }
  uint64_t v36 = 0;
  long long v37 = &v36;
  uint64_t v38 = 0x2020000000;
  char v39 = 0;
  v34[0] = 0;
  v34[1] = v34;
  void v34[2] = 0x3032000000;
  v34[3] = __Block_byref_object_copy__21966;
  void v34[4] = __Block_byref_object_dispose__21967;
  id v21 = v18;
  id v35 = v21;
  id v22 = v20;
  id v23 = v32;
  id v24 = v17;
  id v25 = v33;
  id v26 = v19;
  PLRunWithUnfairLock();
  if (*((unsigned char *)v37 + 24)) {
    int64_t v27 = 2;
  }
  else {
    int64_t v27 = 4;
  }

  _Block_object_dispose(v34, 8);
  _Block_object_dispose(&v36, 8);

  return v27;
}

void __132__PLModelMigrator_attemptLightweightMigrationFromVersion_onStore_withMetadata_orStoreURL_options_coordinator_migrationPolicy_error___block_invoke(uint64_t a1)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v3 = v2;
  long long v83 = [PLMigrationContext alloc];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 32);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = [*(id *)(a1 + 56) unsignedShortValue];
  uint64_t v9 = *(void *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 104);
  uint64_t v11 = [*(id *)(a1 + 32) analyticsEventManager];
  uint64_t v12 = [*(id *)(a1 + 32) graphCache];
  LODWORD(v81) = v10;
  uint64_t v13 = v9;
  uint64_t v14 = a1;
  uint64_t v15 = [(PLMigrationContext *)v83 initWithPathManager:v5 coordinator:v4 onStore:v6 orStoreURL:v7 version:v8 options:v13 migrationPolicy:v81 analyticsEventManager:v11 graphCache:v12];

  uint64_t v16 = [PLModelMigration alloc];
  id v17 = [*(id *)(v14 + 32) migrationLogger];
  id v18 = [(PLModelMigration *)v16 initWithMigrationContext:v15 logger:v17];

  id v19 = [*(id *)(v14 + 32) progress];
  id v20 = [(PLModelMigration *)v18 progress];
  [v19 addChild:v20 withPendingUnitCount:1];

  [(PLModelMigration *)v18 setLegacyMigrationDelegate:*(void *)(v14 + 32)];
  id v85 = 0;
  uint64_t v21 = [(PLModelMigration *)v18 migrateWithError:&v85];
  id v22 = v85;
  if (v21 == 1)
  {
    uint64_t v23 = *(void *)(*(void *)(*(void *)(v14 + 80) + 8) + 40);
    if (!v23)
    {
      uint64_t v24 = [(PLMigrationContext *)v15 store];
      uint64_t v25 = *(void *)(*(void *)(v14 + 80) + 8);
      id v26 = *(void **)(v25 + 40);
      *(void *)(v25 + 40) = v24;

      uint64_t v23 = *(void *)(*(void *)(*(void *)(v14 + 80) + 8) + 40);
    }
    if ([*(id *)(v14 + 32) _recordCurrentVersionMetadataInPersistentStore:v23 migrationType:2 forceRebuildReason:0 sourceModelVersion:*(void *)(v14 + 56) updateLegacyMigrationState:0 journalRebuildRequred:0])
    {
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      double v28 = v27;
      long long v29 = PLMigrationGetLog();
      BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);

      if (v30)
      {
        double v31 = v28 - v3;
        id v32 = [*(id *)(v14 + 32) migrationLogger];

        if (v32)
        {
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v92 = 0u;
          long long v91 = 0u;
          memset(buf, 0, sizeof(buf));
          id v33 = PLMigrationGetLog();
          os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
          int v34 = +[PLModelMigrator currentModelVersion];
          int v88 = 67109376;
          LODWORD(v89[0]) = v34;
          WORD2(v89[0]) = 2048;
          *(double *)((char *)v89 + 6) = v31;
          LODWORD(v82) = 18;
          id v35 = (uint8_t *)_os_log_send_and_compose_impl();

          uint64_t v36 = objc_msgSend(*(id *)(v14 + 32), "migrationLogger", &v88, v82);
          objc_msgSend(v36, "logWithMessage:fromCodeLocation:type:", v35, "PLModelMigrator.m", 3223, 0);

          if (v35 != buf) {
            free(v35);
          }
        }
        else
        {
          long long v62 = PLMigrationGetLog();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            int v63 = +[PLModelMigrator currentModelVersion];
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v63;
            *(_WORD *)&uint8_t buf[8] = 2048;
            *(double *)&buf[10] = v31;
            _os_log_impl(&dword_19B3C7000, v62, OS_LOG_TYPE_DEFAULT, "Successfully migrated store to version %d in %1.1fs", buf, 0x12u);
          }
        }
      }
      if ([(PLModelMigration *)v18 allowRebuild]
        || [(PLModelMigration *)v18 didCreateSqliteErrorIndicator])
      {
        long long v64 = PLMigrationGetLog();
        BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);

        if (v65)
        {
          long long v66 = [*(id *)(v14 + 32) migrationLogger];

          if (v66)
          {
            long long v119 = 0u;
            long long v120 = 0u;
            long long v117 = 0u;
            long long v118 = 0u;
            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v107 = 0u;
            long long v108 = 0u;
            long long v105 = 0u;
            long long v106 = 0u;
            long long v103 = 0u;
            long long v104 = 0u;
            long long v101 = 0u;
            long long v102 = 0u;
            long long v99 = 0u;
            long long v100 = 0u;
            long long v97 = 0u;
            long long v98 = 0u;
            long long v95 = 0u;
            long long v96 = 0u;
            long long v93 = 0u;
            long long v94 = 0u;
            long long v92 = 0u;
            long long v91 = 0u;
            memset(buf, 0, sizeof(buf));
            long long v67 = PLMigrationGetLog();
            os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
            LOWORD(v88) = 0;
            LODWORD(v82) = 2;
            long long v68 = (uint8_t *)_os_log_send_and_compose_impl();

            long long v69 = objc_msgSend(*(id *)(v14 + 32), "migrationLogger", &v88, v82);
            objc_msgSend(v69, "logWithMessage:fromCodeLocation:type:", v68, "PLModelMigrator.m", 3228, 0);

            if (v68 != buf) {
              free(v68);
            }
          }
          else
          {
            long long v70 = PLMigrationGetLog();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_19B3C7000, v70, OS_LOG_TYPE_DEFAULT, "Removing migration indicator file", buf, 2u);
            }
          }
        }
        long long v71 = [*(id *)(v14 + 32) pathManager];
        [v71 removeSqliteErrorIndicatorFile];
      }
      char v54 = 1;
      goto LABEL_47;
    }
    long long v43 = PLMigrationGetLog();
    BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);

    if (!v44) {
      goto LABEL_41;
    }
    long long v45 = [*(id *)(v14 + 32) migrationLogger];

    if (v45)
    {
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      memset(buf, 0, sizeof(buf));
      long long v46 = PLMigrationGetLog();
      os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
      LOWORD(v88) = 0;
      LODWORD(v82) = 2;
      long long v47 = (uint8_t *)_os_log_send_and_compose_impl();

      long long v48 = objc_msgSend(*(id *)(v14 + 32), "migrationLogger", &v88, v82);
      objc_msgSend(v48, "logWithMessage:fromCodeLocation:type:", v47, "PLModelMigrator.m", 3232, 16);

      if (v47 != buf)
      {
        long long v49 = v47;
LABEL_26:
        free(v49);
        goto LABEL_41;
      }
      goto LABEL_41;
    }
    long long v60 = PLMigrationGetLog();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19B3C7000, v60, OS_LOG_TYPE_ERROR, "Failed to save current metadata, requires rebuild", buf, 2u);
    }
    goto LABEL_40;
  }
  long long v37 = PLMigrationGetLog();
  BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);

  if (v38)
  {
    char v39 = [*(id *)(v14 + 32) migrationLogger];

    if (v39)
    {
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      memset(buf, 0, sizeof(buf));
      long long v40 = PLMigrationGetLog();
      os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
      int v88 = 138412290;
      v89[0] = v22;
      LODWORD(v82) = 12;
      long long v41 = (uint8_t *)_os_log_send_and_compose_impl();

      long long v42 = objc_msgSend(*(id *)(v14 + 32), "migrationLogger", &v88, v82);
      objc_msgSend(v42, "logWithMessage:fromCodeLocation:type:", v41, "PLModelMigrator.m", 3208, 16);

      if (v41 != buf) {
        free(v41);
      }
    }
    else
    {
      long long v50 = PLMigrationGetLog();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_impl(&dword_19B3C7000, v50, OS_LOG_TYPE_ERROR, "Failed migration with error: %@", buf, 0xCu);
      }
    }
  }
  long long v51 = *(void **)(v14 + 96);
  if (v51) {
    *long long v51 = v22;
  }
  long long v52 = PLMigrationGetLog();
  BOOL v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);

  char v54 = 0;
  if (v53)
  {
    long long v55 = [*(id *)(v14 + 32) migrationLogger];

    if (v55)
    {
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v56 = PLMigrationGetLog();
      os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
      long long v57 = PLFilteredStoreMetadataWithPolicy(*(void **)(v14 + 72), 1);
      int v88 = 138543362;
      v89[0] = v57;
      LODWORD(v82) = 12;
      long long v58 = (uint8_t *)_os_log_send_and_compose_impl();

      long long v59 = objc_msgSend(*(id *)(v14 + 32), "migrationLogger", &v88, v82);
      objc_msgSend(v59, "logWithMessage:fromCodeLocation:type:", v58, "PLModelMigrator.m", 3215, 0);

      if (v58 != buf)
      {
        long long v49 = v58;
        goto LABEL_26;
      }
LABEL_41:
      char v54 = 0;
      goto LABEL_47;
    }
    long long v60 = PLMigrationGetLog();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      long long v61 = PLFilteredStoreMetadataWithPolicy(*(void **)(v14 + 72), 1);
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v61;
      _os_log_impl(&dword_19B3C7000, v60, OS_LOG_TYPE_DEFAULT, "Requires rebuild, migration post processing failed with metadata %{public}@", buf, 0xCu);
    }
LABEL_40:

    goto LABEL_41;
  }
LABEL_47:
  *(unsigned char *)(*(void *)(*(void *)(v14 + 88) + 8) + 24) = v54;
  if (!*(unsigned char *)(*(void *)(*(void *)(v14 + 88) + 8) + 24))
  {
    long long v72 = *(void **)(v14 + 96);
    if (v72)
    {
      if (!*v72)
      {
        uint64_t v84 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v73 = v14;
        uint64_t v74 = *MEMORY[0x1E4F8C500];
        v86[0] = *MEMORY[0x1E4F28328];
        long long v75 = [*(id *)(v73 + 48) path];
        v87[0] = v75;
        v86[1] = *MEMORY[0x1E4F289D0];
        long long v76 = [*(id *)(v73 + 48) URLByDeletingLastPathComponent];
        long long v77 = [v76 URLByDeletingLastPathComponent];
        v87[1] = v77;
        v86[2] = *MEMORY[0x1E4F28568];
        long long v78 = objc_msgSend(NSString, "stringWithFormat:", @"Lightweight migration failed from model version %d to version %d.", objc_msgSend(*(id *)(v73 + 56), "intValue"), +[PLModelMigrator currentModelVersion](PLModelMigrator, "currentModelVersion"));
        v87[2] = v78;
        long long v79 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v87 forKeys:v86 count:3];
        uint64_t v80 = v74;
        uint64_t v14 = v73;
        **(void **)(v73 + 96) = [v84 errorWithDomain:v80 code:46008 userInfo:v79];
      }
    }
  }
  [*(id *)(v14 + 32) migrationLoggerClose];
}

- (void)_updateImportedSavedAssetTypeForFileSystemImportedAsset:(id)a3 type:(unsigned __int8)a4 importAssetKind:(int)a5 isCPLAssetsDirectory:(BOOL)a6 destinationAlbum:(id)a7
{
  BOOL v8 = a6;
  int v10 = a4;
  id v18 = a3;
  id v11 = a7;
  if (v11)
  {
    [MEMORY[0x1E4F8BA10] maskForPhotoStreamAsset];
    [v18 savedAssetType];
    if (PLValidatedSavedAssetTypeApplies()) {
      goto LABEL_21;
    }
  }
  [MEMORY[0x1E4F8BA10] maskForAssetsEligibleForFileSystemImportSavedAssetTypeUpdate];
  [v18 savedAssetType];
  if (!PLValidatedSavedAssetTypeApplies()) {
    goto LABEL_21;
  }
  if (v10 == 1) {
    int v12 = [v18 isInTrash] ^ 1;
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = 0;
  if (a5 > 7) {
    goto LABEL_19;
  }
  if (((1 << a5) & 0x8D) != 0)
  {
    uint64_t v14 = (void *)MEMORY[0x1E4F8BA10];
    if (!v12)
    {
      if (v8) {
        uint64_t v15 = objc_msgSend(MEMORY[0x1E4F8BA10], "savedAssetTypeForAssetsInCPLAssetsDirectory", 0);
      }
      else {
        uint64_t v15 = objc_msgSend(MEMORY[0x1E4F8BA10], "defaultSavedAssetTypeForUnknownFilesystemImportAssets", 0);
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = v18;
    if (a5 != 1)
    {
      if (a5 == 4)
      {
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F8BA10], "savedAssetTypeForFinderSyncedAsset", 0);
        uint64_t v16 = v18;
        uint64_t v13 = v17;
      }
      goto LABEL_20;
    }
    uint64_t v14 = (void *)MEMORY[0x1E4F8BA10];
    if (!v12)
    {
      uint64_t v15 = objc_msgSend(MEMORY[0x1E4F8BA10], "savedAssetTypeForImportedByCameraConnectionKit", 0);
      goto LABEL_18;
    }
  }
  uint64_t v15 = objc_msgSend(v14, "savedAssetTypeForRecoveredAsset", 0);
LABEL_18:
  uint64_t v13 = v15;
LABEL_19:
  uint64_t v16 = v18;
LABEL_20:
  [v16 setSavedAssetType:v13];
LABEL_21:
}

- (id)_importFileSystemImportAssets:(id)a3 intoLibrary:(id)a4 type:(unsigned __int8)a5 progress:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  uint64_t v13 = [v11 libraryServicesManager];
  uint64_t v14 = [v13 wellKnownPhotoLibraryIdentifier];

  if (v14 == 3)
  {
    uint64_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_importFileSystemImportAssets is unsupported for the syndication photo library", buf, 2u);
    }

    objc_msgSend(v12, "setCompletedUnitCount:", objc_msgSend(v12, "totalUnitCount"));
    id v16 = (id)MEMORY[0x1E4F1CBF0];
  }
  else
  {
    uint64_t v17 = [MEMORY[0x1E4F1CA48] array];
    id v18 = (void *)MEMORY[0x19F38D3B0]();
    id v19 = [v11 libraryServicesManager];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = __75__PLModelMigrator__importFileSystemImportAssets_intoLibrary_type_progress___block_invoke;
    void v21[3] = &unk_1E5866520;
    id v22 = v11;
    uint64_t v23 = self;
    id v24 = v10;
    id v25 = v12;
    unsigned __int8 v27 = a5;
    id v16 = v17;
    id v26 = v16;
    [v19 performFileSystemAssetImporterWorkWithLibrary:v22 block:v21];
  }

  return v16;
}

void __75__PLModelMigrator__importFileSystemImportAssets_intoLibrary_type_progress___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  id v102 = a2;
  uint64_t v109 = a1;
  double v3 = [*(id *)(a1 + 32) managedObjectContext];
  [*(id *)(v109 + 40) _prepareForImportDeleteCorruptAssetsWithImporter:v102 context:v3];
  uint64_t v136 = 0;
  __int16 v137 = &v136;
  uint64_t v138 = 0x2020000000;
  uint64_t v139 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = &v132;
  uint64_t v134 = 0x2020000000;
  uint64_t v135 = 0;
  uint64_t v135 = arc4random_uniform(0xAu) + 20;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v127[0] = MEMORY[0x1E4F143A8];
  v127[1] = 3221225472;
  v127[2] = __75__PLModelMigrator__importFileSystemImportAssets_intoLibrary_type_progress___block_invoke_2;
  v127[3] = &unk_1E5874900;
  CFMutableDictionaryRef theDict = Mutable;
  CFMutableDictionaryRef v128 = theDict;
  id v91 = v3;
  id v129 = v91;
  BOOL v130 = &v136;
  uint64_t v131 = &v132;
  long long v97 = (void (**)(void))MEMORY[0x19F38D650](v127);
  long long v101 = [*(id *)(v109 + 32) filesystemImportProgressAlbum];
  long long v104 = objc_msgSend(MEMORY[0x1E4F28F90], "progressWithTotalUnitCount:parent:pendingUnitCount:", objc_msgSend(*(id *)(v109 + 48), "count"), *(void *)(v109 + 56), objc_msgSend(*(id *)(v109 + 56), "totalUnitCount"));
  long long v98 = [MEMORY[0x1E4F1CA80] set];
  uint64_t v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = [*(id *)(v109 + 48) count];
    LODWORD(buf.origin.x) = 134217984;
    *(void *)((char *)&buf.origin.x + 4) = v6;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_DEFAULT, "Starting file system import of %ld assets", (uint8_t *)&buf, 0xCu);
  }

  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  obuint64_t j = *(id *)(v109 + 48);
  uint64_t v7 = [obj countByEnumeratingWithState:&v123 objects:v144 count:16];
  if (v7)
  {
    uint64_t v99 = v7;
    long long v96 = 0;
    uint64_t v100 = *(void *)v124;
    uint64_t v92 = *MEMORY[0x1E4F1C540];
    while (2)
    {
      uint64_t v107 = 0;
      do
      {
        if (*(void *)v124 != v100) {
          objc_enumerationMutation(obj);
        }
        BOOL v8 = *(void **)(*((void *)&v123 + 1) + 8 * v107);
        if ([*(id *)(v109 + 56) isCancelled])
        {
          uint64_t v80 = PLBackendGetLog();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.origin.x) = 0;
            _os_log_impl(&dword_19B3C7000, v80, OS_LOG_TYPE_ERROR, "Will abort looping over file system import assets due to progress cancel", (uint8_t *)&buf, 2u);
          }

          goto LABEL_87;
        }
        context = (void *)MEMORY[0x19F38D3B0]();
        uint64_t v9 = [v8 lockedResourceTransferRecovery];

        if (v9)
        {
          id v10 = [v8 lockedResourceTransferRecovery];
          id v11 = [*(id *)(v109 + 40) pathManager];
          char v12 = [v10 recoverFromInProgressLockedTransferForImportAsset:v8 pathManager:v11];

          if ((v12 & 1) == 0)
          {
            uint64_t v13 = PLMigrationGetLog();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf.origin.x) = 0;
              _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "[lockedResourceTransfer] Failed locked resource transfer recovery", (uint8_t *)&buf, 2u);
            }
          }
        }
        long long v108 = [v8 urls];
        uint64_t v14 = [v8 destinationAlbum];
        if (v14) {
          [v98 addObject:v14];
        }
        long long v110 = (void *)v14;
        int v15 = *(unsigned __int8 *)(v109 + 72);
        id v16 = [v8 assetPayload];
        long long v111 = [v102 addAssetWithURLs:v108 assetPayload:v16 forceInsert:0 forceUpdate:v15 == 2 fixAddedDate:0];

        if (v111)
        {
          objc_msgSend(*(id *)(v109 + 64), "addObject:");
          if (+[PLAvalanche shouldOnlyShowAvalanchePicks])
          {
            uint64_t v17 = [v111 avalancheUUID];
            if (v17) {
              char v18 = [v111 avalanchePickTypeIsVisible] ^ 1;
            }
            else {
              char v18 = 0;
            }
          }
          else
          {
            char v18 = 0;
          }
          id v19 = v110;
          if (archivedAssetUUIDForPathDictionary_block_invoke_s_onceToken != -1) {
            dispatch_once(&archivedAssetUUIDForPathDictionary_block_invoke_s_onceToken, &__block_literal_global_402);
          }
          long long v105 = [v111 pathManager];
          if ([v105 isDCIM])
          {
            id v20 = [v111 directory];
            uint64_t v21 = [v20 hasPrefix:archivedAssetUUIDForPathDictionary_block_invoke_s_cplAssetDirectoryPrefix];

            id v19 = v110;
          }
          else
          {
            uint64_t v21 = 0;
          }
          objc_msgSend(*(id *)(v109 + 40), "_updateImportedSavedAssetTypeForFileSystemImportedAsset:type:importAssetKind:isCPLAssetsDirectory:destinationAlbum:", v111, *(unsigned __int8 *)(v109 + 72), objc_msgSend(v8, "assetKind"), v21, v19);
          if (v21)
          {
            id v22 = [v111 cloudAssetGUID];
            BOOL v23 = v22 == 0;

            if (v23)
            {
              id v24 = objc_alloc(MEMORY[0x1E4F29128]);
              id v25 = [v111 filename];
              id v26 = [v25 stringByDeletingPathExtension];
              unsigned __int8 v27 = (void *)[v24 initWithUUIDString:v26];

              if (v27)
              {
                double v28 = [v27 UUIDString];
                [v111 setCloudAssetGUID:v28];
              }
            }
          }
          long long v103 = [v108 anyObject];
          long long v29 = v110;
          if ([v111 isPhotoStreamPhoto])
          {
            id v122 = 0;
            int v30 = [v103 getResourceValue:&v122 forKey:v92 error:0];
            id v31 = v122;
            id v32 = v31;
            if (v30)
            {
              if (v31) {
                [v111 setDateCreated:v31];
              }
              id v33 = [v111 dateCreated];
              [v33 timeIntervalSinceReferenceDate];
              objc_msgSend(v111, "setSortToken:");
            }
            [v111 setVisibilityState:1];

            long long v29 = v110;
          }
          if ([v8 isCameraKit])
          {
            if (!v96)
            {
              long long v96 = [*(id *)(v109 + 32) allImportedPhotosAlbum];
            }
            if ((v18 & 1) == 0)
            {
              int v34 = [v96 mutableAssets];
              [v34 addObject:v111];

              long long v29 = v110;
            }
            if (v29)
            {
              if ([v29 kindValue] == 12)
              {
                id v35 = [v29 mutableAssets];
                BOOL v36 = [v35 count] == 0;

                if (v36)
                {
                  id v37 = objc_alloc(MEMORY[0x1E4F8CC48]);
                  BOOL v38 = [*(id *)(v109 + 32) libraryBundle];
                  char v39 = [v38 timeZoneLookup];
                  long long v40 = (void *)[v37 initWithMediaURL:v103 timeZoneLookup:v39];

                  long long v41 = *(void **)(v109 + 40);
                  long long v42 = [v40 creationDate];
                  long long v43 = [v41 _eventNameFromDate:v42];
                  [v110 setTitle:v43];
                }
              }
            }
          }
          if ([v105 isDCIM] && objc_msgSend(v111, "isFinderSyncedAsset"))
          {
            BOOL v44 = [v111 photoLibrary];
            long long v45 = [v44 pathManager];
            long long v46 = [v45 iTunesSyncedFaceDataDirectory];
            long long v47 = [v111 uuid];
            long long v48 = [v46 stringByAppendingPathComponent:v47];
            long long v93 = [v48 stringByAppendingPathExtension:@"plist"];

            long long v49 = [MEMORY[0x1E4F1C978] arrayWithContentsOfFile:v93];
            long long v121 = 0u;
            long long v119 = 0u;
            long long v120 = 0u;
            long long v118 = 0u;
            id v50 = v49;
            uint64_t v51 = [v50 countByEnumeratingWithState:&v118 objects:v143 count:16];
            if (v51)
            {
              uint64_t v52 = *(void *)v119;
              do
              {
                for (uint64_t i = 0; i != v51; ++i)
                {
                  if (*(void *)v119 != v52) {
                    objc_enumerationMutation(v50);
                  }
                  char v54 = *(void **)(*((void *)&v118 + 1) + 8 * i);
                  long long v55 = [v54 objectForKey:@"faceAlbumUUID"];
                  uint64_t v56 = [v54 objectForKey:@"faceIndex"];
                  CFDictionaryRef v57 = [v54 objectForKey:@"faceRectangle"];
                  CFDictionaryRef v58 = v57;
                  if (v56) {
                    BOOL v59 = v57 == 0;
                  }
                  else {
                    BOOL v59 = 1;
                  }
                  if (!v59)
                  {
                    memset(&buf, 0, sizeof(buf));
                    if (CGRectMakeWithDictionaryRepresentation(v57, &buf))
                    {
                      __int16 v60 = [v56 intValue];
                      id v61 = (id)objc_msgSend(v111, "addLegacyFaceWithRelativeRect:identifier:albumUUID:", v60, v55, buf.origin.x, buf.origin.y, buf.size.width, buf.size.height);
                    }
                  }
                }
                uint64_t v51 = [v50 countByEnumeratingWithState:&v118 objects:v143 count:16];
              }
              while (v51);
            }

            long long v62 = *(void **)(v109 + 40);
            int v63 = [v111 uuid];
            long long v64 = [v62 _syncedPropertiesForAssetUUID:v63];

            [*(id *)(v109 + 40) _applySyncedProperties:v64 toAsset:v111];
          }
          id v117 = 0;
          BOOL v65 = +[PLResourceInstaller installInternalResourcesForExistingAsset:v111 assumeNoExistingResources:0 referencedResourceURLs:0 error:&v117];
          id v66 = v117;
          if (!v65)
          {
            long long v67 = PLMigrationGetLog();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              long long v68 = [v111 uuid];
              LODWORD(buf.origin.x) = 138412546;
              *(void *)((char *)&buf.origin.x + 4) = v68;
              WORD2(buf.origin.y) = 2112;
              *(void *)((char *)&buf.origin.y + 6) = v66;
              _os_log_impl(&dword_19B3C7000, v67, OS_LOG_TYPE_ERROR, "Failed to build modern resources for asset uuid: %@, reason: %@", (uint8_t *)&buf, 0x16u);
            }
          }
          objc_msgSend(v111, "setDeferredProcessingNeeded:", objc_msgSend(v111, "expectedDeferredProcessingNeededOnAssetCreation"));
          if ([v111 deferredProcessingNeeded])
          {
            long long v69 = [v111 photoLibrary];
            long long v70 = [v69 libraryServicesManager];
            long long v71 = [v70 backgroundJobService];
            long long v72 = [v111 photoLibrary];
            [v71 signalBackgroundProcessingNeededOnLibrary:v72];
          }
          uint64_t v141 = v111;
          uint64_t v73 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v141 count:1];
          +[PLManagedAsset deDupCMMAssets:v73];

          uint64_t v74 = PLMigrationGetLog();
          BOOL v75 = os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG);
          long long v76 = v110;
          if (v75)
          {
            long long v77 = [v111 uuid];
            LODWORD(buf.origin.x) = 138412546;
            *(void *)((char *)&buf.origin.x + 4) = v108;
            WORD2(buf.origin.y) = 2112;
            *(void *)((char *)&buf.origin.y + 6) = v77;
            _os_log_impl(&dword_19B3C7000, v74, OS_LOG_TYPE_DEBUG, "Added '%@'\nto the database. UUID = %@", (uint8_t *)&buf, 0x16u);

            long long v76 = v110;
          }
          BOOL v78 = v76 == 0;

          if (!v78)
          {
            long long v79 = [(__CFDictionary *)theDict objectForKey:v110];
            if (!v79)
            {
              long long v79 = [MEMORY[0x1E4F1CA48] array];
              CFDictionarySetValue(theDict, v110, v79);
            }
            [v79 addObject:v111];
          }
          ++v137[3];
        }
        else
        {
          [v110 reducePendingItemsCountBy:1];
          [v101 reducePendingItemsCountBy:1];
          objc_msgSend(v104, "setCompletedUnitCount:", objc_msgSend(v104, "completedUnitCount") + 1);
        }
        if (v133[3] <= (unint64_t)v137[3])
        {
          objc_msgSend(v101, "reducePendingItemsCountBy:");
          objc_msgSend(v104, "setCompletedUnitCount:", v137[3] + objc_msgSend(v104, "completedUnitCount"));
          v97[2]();
        }

        ++v107;
      }
      while (v107 != v99);
      uint64_t v99 = [obj countByEnumeratingWithState:&v123 objects:v144 count:16];
      if (v99) {
        continue;
      }
      break;
    }
  }
  else
  {
    long long v96 = 0;
  }
LABEL_87:

  v97[2]();
  int v81 = [v101 pendingItemsCount];
  if (v81) {
    [v101 reducePendingItemsCountBy:v81];
  }
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  id v82 = v98;
  uint64_t v83 = [v82 countByEnumeratingWithState:&v113 objects:v140 count:16];
  if (v83)
  {
    uint64_t v84 = *(void *)v114;
    do
    {
      for (uint64_t j = 0; j != v83; ++j)
      {
        if (*(void *)v114 != v84) {
          objc_enumerationMutation(v82);
        }
        long long v86 = *(void **)(*((void *)&v113 + 1) + 8 * j);
        int v87 = [v86 pendingItemsCount];
        if (v87) {
          [v86 reducePendingItemsCountBy:v87];
        }
      }
      uint64_t v83 = [v82 countByEnumeratingWithState:&v113 objects:v140 count:16];
    }
    while (v83);
  }

  if ([v91 hasChanges])
  {
    id v112 = 0;
    char v88 = [v91 save:&v112];
    id v89 = v112;
    if ((v88 & 1) == 0)
    {
      BOOL v90 = PLMigrationGetLog();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.origin.x) = 138412290;
        *(void *)((char *)&buf.origin.x + 4) = v89;
        _os_log_impl(&dword_19B3C7000, v90, OS_LOG_TYPE_ERROR, "Unable to save moc during migration. Data loss may occur. (%@)", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  else
  {
    id v89 = 0;
  }

  _Block_object_dispose(&v132, 8);
  _Block_object_dispose(&v136, 8);
}

void __75__PLModelMigrator__importFileSystemImportAssets_intoLibrary_type_progress___block_invoke_2(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) enumerateKeysAndObjectsUsingBlock:&__block_literal_global_398];
  [*(id *)(a1 + 32) removeAllObjects];
  if ([*(id *)(a1 + 40) hasChanges])
  {
    double v2 = *(void **)(a1 + 40);
    id v6 = 0;
    char v3 = [v2 save:&v6];
    id v4 = v6;
    if ((v3 & 1) == 0)
    {
      uint64_t v5 = PLMigrationGetLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        id v8 = v4;
        _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_ERROR, "Unable to save moc during migration. Data loss may occur. (%@)", buf, 0xCu);
      }
    }
  }
  else
  {
    id v4 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = arc4random_uniform(0xAu) + 20;
}

void __75__PLModelMigrator__importFileSystemImportAssets_intoLibrary_type_progress___block_invoke_400()
{
  uint64_t v0 = [NSString stringWithFormat:@"%@/%@", @"PhotoData", @"CPLAssets"];
  v1 = (void *)archivedAssetUUIDForPathDictionary_block_invoke_s_cplAssetDirectoryPrefix;
  archivedAssetUUIDForPathDictionary_block_invoke_s_cplAssetDirectoryPrefix = v0;
}

void __75__PLModelMigrator__importFileSystemImportAssets_intoLibrary_type_progress___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v7 = a2;
  uint64_t v5 = [v7 mutableAssets];
  [v5 addObjectsFromArray:v4];

  uint64_t v6 = [v4 count];
  [v7 reducePendingItemsCountBy:v6];
}

- (void)_prepareForImportDeleteCorruptAssetsWithImporter:(id)a3 context:(id)a4
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  id v7 = [v6 photoLibrary];
  id v8 = [v7 libraryServicesManager];
  uint64_t v9 = [v8 wellKnownPhotoLibraryIdentifier];

  int v81 = v6;
  if (v9 == 3)
  {
    id v10 = PLMigrationGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "_prepareForImportDeleteCorruptAssetsWithImporter is unsupported for the syndication photo library", buf, 2u);
    }

    id v11 = v6;
    goto LABEL_73;
  }
  char v12 = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v13 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v14 = +[PLManagedAsset entityName];
  int v15 = [v13 fetchRequestWithEntityName:v14];

  [v15 setResultType:2];
  id v16 = objc_alloc_init(MEMORY[0x1E4F1C0B8]);
  [v16 setName:@"objectID"];
  uint64_t v17 = [MEMORY[0x1E4F28C68] expressionForEvaluatedObject];
  [v16 setExpression:v17];

  [v16 setExpressionResultType:2000];
  uint64_t v73 = v16;
  char v18 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v16, @"uuid", @"directory", @"filename", @"savedAssetType", 0);
  [v15 setPropertiesToFetch:v18];

  id v98 = 0;
  uint64_t v74 = v15;
  id v19 = [v6 executeFetchRequest:v15 error:&v98];
  id v20 = v98;
  id v21 = v20;
  if (!v19)
  {
    id v11 = v6;
    long long v48 = PLMigrationGetLog();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412290;
      *(void *)long long v101 = v21;
      _os_log_impl(&dword_19B3C7000, v48, OS_LOG_TYPE_ERROR, "Unable to fetch asset UUIDs and paths during migration. (%@)", buf, 0xCu);
    }
    long long v49 = v48;
    goto LABEL_72;
  }
  long long v79 = v20;
  long long v71 = v12;
  id v72 = v5;
  long long v77 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v19, "count"));
  BOOL v78 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v19, "count"));
  long long v76 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v19, "count"));
  id v22 = [MEMORY[0x1E4F1CA80] set];
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v70 = v19;
  obuint64_t j = v19;
  uint64_t v23 = [obj countByEnumeratingWithState:&v94 objects:v102 count:16];
  id v82 = v22;
  if (!v23) {
    goto LABEL_40;
  }
  uint64_t v24 = 1;
  uint64_t v83 = *(void *)v95;
  while (2)
  {
    uint64_t v84 = v23;
    uint64_t v85 = v24;
    uint64_t v25 = 0;
    uint64_t v75 = v24 + v23;
    uint64_t v26 = -v24;
    do
    {
      if (*(void *)v95 != v83) {
        objc_enumerationMutation(obj);
      }
      unsigned __int8 v27 = *(void **)(*((void *)&v94 + 1) + 8 * v25);
      double v28 = (void *)MEMORY[0x19F38D3B0]();
      unint64_t v29 = (v24 + v25) / 0x64uLL;
      if (v26 == -100 * v29 && [v81 hasChanges])
      {
        id v93 = v79;
        char v30 = [v81 save:&v93];
        id v31 = v93;

        if ((v30 & 1) == 0)
        {
          id v50 = PLMigrationGetLog();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CGRect buf = 67109378;
            *(_DWORD *)long long v101 = v29;
            *(_WORD *)&v101[4] = 2112;
            *(void *)&v101[6] = v31;
            _os_log_impl(&dword_19B3C7000, v50, OS_LOG_TYPE_ERROR, "Unable to save moc while cleaning database [batch %d]. (%@)", buf, 0x12u);
          }

          long long v79 = v31;
          goto LABEL_40;
        }
        long long v79 = v31;
      }
      id v32 = [v27 objectForKey:@"objectID"];
      id v33 = [v27 objectForKey:@"uuid"];
      int v34 = [v27 objectForKey:@"directory"];
      id v35 = [v27 objectForKey:@"filename"];
      BOOL v36 = [v34 stringByAppendingPathComponent:v35];
      id v37 = [v36 uppercaseString];

      if (![v37 length])
      {
        [MEMORY[0x1E4F8BA10] maskForCanDeleteEmptyPathForCorruptAssetsDuringFilesystemImport];
        long long v42 = [v27 objectForKey:@"savedAssetType"];
        [v42 intValue];
        int v43 = PLValidatedSavedAssetTypeApplies();

        id v22 = v82;
        uint64_t v38 = v84;
        if (!v43) {
          goto LABEL_31;
        }
LABEL_23:
        [v22 addObject:v32];
        goto LABEL_31;
      }
      id v22 = v82;
      uint64_t v38 = v84;
      if (!v33)
      {
        BOOL v44 = [v81 existingObjectWithID:v32 error:0];
        long long v45 = v44;
        if (v44 && ([v44 isDeleted] & 1) == 0)
        {
          long long v46 = [MEMORY[0x1E4F8BA08] UUIDString];
          [v45 setUuid:v46];

          [v45 persistMetadataToFilesystem];
        }

        goto LABEL_28;
      }
      char v39 = [v78 objectForKey:v37];

      if (v39) {
        goto LABEL_23;
      }
      if (![v77 containsObject:v33]) {
        goto LABEL_30;
      }
      long long v40 = [v81 existingObjectWithID:v32 error:0];
      long long v41 = v40;
      if (!v40 || [v40 isDeleted])
      {

LABEL_28:
        id v33 = 0;
        goto LABEL_31;
      }
      uint64_t v47 = [MEMORY[0x1E4F8BA08] UUIDString];

      [v41 setUuid:v47];
      [v41 persistMetadataToFilesystem];

      id v33 = (void *)v47;
      if (v47)
      {
LABEL_30:
        [v78 setObject:v33 forKey:v37];
        [v77 addObject:v33];
        [v76 setObject:v32 forKey:v33];
      }
LABEL_31:

      ++v25;
      --v26;
      uint64_t v24 = v85;
    }
    while (v38 != v25);
    uint64_t v23 = [obj countByEnumeratingWithState:&v94 objects:v102 count:16];
    uint64_t v24 = v75;
    if (v23) {
      continue;
    }
    break;
  }
LABEL_40:

  id v11 = v81;
  if ([v81 hasChanges])
  {
    id v92 = v79;
    char v51 = [v81 save:&v92];
    id v52 = v92;

    char v12 = v71;
    id v5 = v72;
    if ((v51 & 1) == 0)
    {
      BOOL v53 = PLMigrationGetLog();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        *(void *)long long v101 = v52;
        _os_log_impl(&dword_19B3C7000, v53, OS_LOG_TYPE_ERROR, "Unable to save moc while cleaning database [pre-delete]. (%@)", buf, 0xCu);
      }
    }
  }
  else
  {
    id v52 = v79;
    char v12 = v71;
    id v5 = v72;
  }
  long long v49 = v77;
  [v5 setExistingUUIDs:v77];
  [v5 setExistingUUIDsByUppercasePath:v78];
  [v5 setExistingOIDsByUUID:v76];
  if ([v22 count])
  {
    char v54 = (void *)MEMORY[0x19F38D3B0]();
    long long v55 = (void *)MEMORY[0x1E4F1C0D0];
    uint64_t v56 = +[PLManagedAsset entityName];
    CFDictionaryRef v57 = [v55 fetchRequestWithEntityName:v56];

    CFDictionaryRef v58 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"self IN %@", v22];
    [v57 setPredicate:v58];

    id v91 = v52;
    BOOL v59 = [v81 executeFetchRequest:v57 error:&v91];
    id v60 = v91;

    if (v59)
    {
      if ([v59 count])
      {
        id v61 = PLMigrationGetLog();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          uint64_t v62 = [v59 count];
          *(_DWORD *)CGRect buf = 134217984;
          *(void *)long long v101 = v62;
          _os_log_impl(&dword_19B3C7000, v61, OS_LOG_TYPE_ERROR, "Removing %lu corrupt assets from the database", buf, 0xCu);
        }

        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        int v63 = v59;
        uint64_t v64 = [v63 countByEnumeratingWithState:&v87 objects:v99 count:16];
        if (v64)
        {
          uint64_t v65 = v64;
          uint64_t v66 = *(void *)v88;
          do
          {
            for (uint64_t i = 0; i != v65; ++i)
            {
              if (*(void *)v88 != v66) {
                objc_enumerationMutation(v63);
              }
              [*(id *)(*((void *)&v87 + 1) + 8 * i) deleteFromDatabaseOnly];
            }
            uint64_t v65 = [v63 countByEnumeratingWithState:&v87 objects:v99 count:16];
          }
          while (v65);
          id v22 = v82;
        }
        goto LABEL_62;
      }
    }
    else
    {
      int v63 = PLMigrationGetLog();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        *(void *)long long v101 = v60;
        _os_log_impl(&dword_19B3C7000, v63, OS_LOG_TYPE_ERROR, "Unable to fetch assets to delete. (%@)", buf, 0xCu);
      }
LABEL_62:
    }
    id v11 = v81;
    long long v49 = v77;
  }
  else
  {
    id v60 = v52;
  }
  if ([v11 hasChanges])
  {
    id v86 = v60;
    char v68 = [v11 save:&v86];
    id v21 = v86;

    if ((v68 & 1) == 0)
    {
      long long v69 = PLMigrationGetLog();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        *(void *)long long v101 = v21;
        _os_log_impl(&dword_19B3C7000, v69, OS_LOG_TYPE_ERROR, "Unable to save moc while cleaning database [delete]. (%@)", buf, 0xCu);
      }
    }
    long long v49 = v77;
  }
  else
  {
    id v21 = v60;
  }

  id v19 = v70;
LABEL_72:

LABEL_73:
}

- (id)_syncedPropertiesForAssetUUID:(id)a3
{
  id v4 = a3;
  syncedPropertiesByUUID = self->_syncedPropertiesByUUID;
  if (!syncedPropertiesByUUID)
  {
    id v6 = [(PLModelMigrator *)self _newSyncedPropertiesByAssetUUIDs:0];
    id v7 = self->_syncedPropertiesByUUID;
    self->_syncedPropertiesByUUID = v6;

    syncedPropertiesByUUID = self->_syncedPropertiesByUUID;
  }
  id v8 = [(NSDictionary *)syncedPropertiesByUUID objectForKey:v4];

  return v8;
}

- (void)_applySyncedProperties:(id)a3 toAsset:(id)a4
{
  id v23 = a3;
  id v6 = a4;
  if ([v23 count])
  {
    id v7 = [v23 objectForKey:@"exposureDate"];
    if (v7
      || ([v23 objectForKey:@"modificationDate"],
          (id v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      [v7 doubleValue];
      id v8 = -[PLModelMigrator _dateWithiTunesTimeInterval:](self, "_dateWithiTunesTimeInterval:");
      [v6 setDateCreated:v8];
      uint64_t v9 = [v6 dateCreated];
      [v9 timeIntervalSinceReferenceDate];
      objc_msgSend(v6, "setSortToken:");
    }
    id v10 = [v23 objectForKey:@"modificationDate"];
    id v11 = v10;
    if (v10)
    {
      [v10 doubleValue];
      char v12 = -[PLModelMigrator _dateWithiTunesTimeInterval:](self, "_dateWithiTunesTimeInterval:");
      [v6 setModificationDate:v12];
    }
    uint64_t v13 = [v23 objectForKey:@"originalFileName"];
    if (v13) {
      [v6 setOriginalFilename:v13];
    }
    double latitude = *MEMORY[0x1E4F1E750];
    double longitude = *(double *)(MEMORY[0x1E4F1E750] + 8);
    id v16 = [v23 objectForKey:@"latitude"];
    uint64_t v17 = [v23 objectForKey:@"longitude"];
    if (v17 && v16)
    {
      [v16 doubleValue];
      CLLocationDegrees v19 = v18;
      [v17 doubleValue];
      CLLocationCoordinate2D v21 = CLLocationCoordinate2DMake(v19, v20);
      double latitude = v21.latitude;
      double longitude = v21.longitude;
    }
    if (+[PLLocationUtils canUseCoordinate:](PLLocationUtils, "canUseCoordinate:", latitude, longitude))
    {
      id v22 = (void *)[objc_alloc(MEMORY[0x1E4F1E5F0]) initWithLatitude:latitude longitude:longitude];
      [v6 setLocation:v22];
    }
    else
    {
      [v6 setLocation:0];
    }
  }
}

- (id)_newSyncedPropertiesByAssetUUIDs:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x19F38D3B0](self, a2);
  id v6 = [(PLModelMigrator *)self _iTunesPhotosLastSyncMetadata];
  id v7 = [v6 objectForKey:@"updates"];
  unint64_t v29 = v7;
  if (![v7 count]) {
    goto LABEL_14;
  }
  BOOL v26 = v3;
  unsigned __int8 v27 = v6;
  double v28 = v5;
  char v30 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v7, "count"));
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v33 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        uint64_t v14 = [v13 objectForKey:@"itemType"];
        if ([v14 isEqual:@"Asset"])
        {
          int v15 = [v13 objectForKey:@"uuid"];
          if (v15) {
            [v30 setObject:v13 forKey:v15];
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v32 objects:v36 count:16];
    }
    while (v10);
  }

  id v16 = v30;
  uint64_t v17 = v16;
  id v6 = v27;
  id v5 = v28;
  id v7 = v29;
  BOOL v3 = v26;
  if (!v16)
  {
LABEL_14:
    uint64_t v17 = objc_opt_new();
    id v16 = 0;
  }
  if (v6 && [v6 count] && v3)
  {
    double v18 = [(PLModelMigrator *)self pathManager];
    CLLocationDegrees v19 = [v18 syncInfoPath];

    CLLocationDegrees v20 = [MEMORY[0x1E4F28CB8] defaultManager];
    if ([v20 fileExistsAtPath:v19])
    {
      id v31 = 0;
      [v20 removeItemAtPath:v19 error:&v31];
    }
    CLLocationCoordinate2D v21 = [MEMORY[0x1E4F1CA60] dictionary];
    id v22 = [v6 objectForKey:@"iTunesUserAgent"];
    if (v22) {
      [v21 setObject:v22 forKey:@"userAgent"];
    }
    id v23 = [v6 objectForKey:@"libraryKind"];
    if (v23) {
      [v21 setObject:v23 forKey:@"libraryKind"];
    }
    uint64_t v24 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v21 format:100 options:0 error:0];
    [v24 writeToFile:v19 options:1073741825 error:0];

    id v7 = v29;
  }

  return v17;
}

- (id)_dateWithiTunesTimeInterval:(double)a3
{
  return (id)[MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a3 - *MEMORY[0x1E4F1CF68]];
}

- (void)_importAfterCrash:(id)a3 dictionariesByPhotoStreamID:(id)a4 completionBlock:(id)a5
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a5;
  uint64_t v9 = [MEMORY[0x1E4F8BA48] transaction:"-[PLModelMigrator _importAfterCrash:dictionariesByPhotoStreamID:completionBlock:]"];
  id v10 = -[PLModelMigrator newShortLivedLibraryWithName:](self, "newShortLivedLibraryWithName:", "-[PLModelMigrator _importAfterCrash:dictionariesByPhotoStreamID:completionBlock:]");
  uint64_t v11 = [MEMORY[0x1E4F1CA48] array];
  char v12 = PLMigrationGetLog();
  os_signpost_id_t v13 = os_signpost_id_generate(v12);
  uint64_t v14 = v12;
  int v15 = v14;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    *(_DWORD *)CGRect buf = 134217984;
    uint64_t v34 = [v7 count];
    _os_signpost_emit_with_name_impl(&dword_19B3C7000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "ImportAfterCrash", "fileURLs count: %lu", buf, 0xCu);
  }

  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  void v28[2] = __81__PLModelMigrator__importAfterCrash_dictionariesByPhotoStreamID_completionBlock___block_invoke;
  void v28[3] = &unk_1E5875BF8;
  id v29 = v7;
  char v30 = self;
  id v31 = v10;
  id v32 = v11;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __81__PLModelMigrator__importAfterCrash_dictionariesByPhotoStreamID_completionBlock___block_invoke_3;
  void v22[3] = &unk_1E5873600;
  id v23 = v32;
  id v24 = v9;
  uint64_t v25 = v15;
  id v26 = v8;
  os_signpost_id_t v27 = v13;
  id v16 = v15;
  id v17 = v9;
  id v18 = v32;
  id v19 = v8;
  id v20 = v10;
  id v21 = v7;
  [v20 performTransaction:v28 completionHandler:v22];
}

void __81__PLModelMigrator__importAfterCrash_dictionariesByPhotoStreamID_completionBlock___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v3 = *(void *)(a1 + 32);
    double v2 = *(double **)(a1 + 40);
    double v4 = v2[1];
    id v5 = [v2 pathManager];
    +[PLRebuildableDirectory collectFileURLs:v3 urlsToSkip:0 forAddingToAlbum:0 intoAssetsArray:v7 assetsKind:0 testCreationDates:0 startTime:v4 pathManager:v5];

    [v7 sortUsingComparator:&__block_literal_global_381];
    id v6 = [*(id *)(a1 + 40) _importFileSystemImportAssets:v7 intoLibrary:*(void *)(a1 + 48) type:2 progress:0];
    [*(id *)(a1 + 56) addObjectsFromArray:v6];
  }
}

void __81__PLModelMigrator__importAfterCrash_dictionariesByPhotoStreamID_completionBlock___block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(a1 + 32));
  }
  [*(id *)(a1 + 40) stillAlive];
  uint64_t v3 = *(id *)(a1 + 48);
  double v4 = v3;
  os_signpost_id_t v5 = *(void *)(a1 + 64);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)id v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_19B3C7000, v4, OS_SIGNPOST_INTERVAL_END, v5, "ImportAfterCrash", "", v6, 2u);
  }
}

uint64_t __81__PLModelMigrator__importAfterCrash_dictionariesByPhotoStreamID_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

- (void)_importAllDCIMAssetsInLibrary:(id)a3 progress:(id)a4 progressFraction:(id)a5 rebuildComplete:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  os_signpost_id_t v13 = [v10 libraryServicesManager];
  uint64_t v14 = [v13 wellKnownPhotoLibraryIdentifier];

  if (v14 == 3)
  {
    int v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "_importAllDCIMAssetsInLibrary is unsupported for the syndication photo library", buf, 2u);
    }

    [v12 progressFractionForType:2];
    objc_msgSend(v11, "setCompletedUnitCount:", (uint64_t)(float)(v16 * (float)objc_msgSend(v11, "totalUnitCount")));
  }
  else
  {
    context = (void *)MEMORY[0x19F38D3B0]();
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    double v18 = v17;
    id v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      double v20 = [MEMORY[0x1E4F29060] callStackSymbols];
      *(_DWORD *)CGRect buf = 138412290;
      double v52 = v20;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_DEFAULT, "Beginning file system import %@", buf, 0xCu);
    }
    id v21 = [(PLModelMigrator *)self pathManager];
    if ([v21 isUBF]) {
      [(PLModelMigrator *)self _orderedAssetsToImportInLibrary:v10];
    }
    else {
    long long v48 = [(PLModelMigrator *)self _orderedAssetsToImportInLibrary:v10 cameraRollOnly:0];
    }

    sched_param v50 = 0;
    int v49 = 0;
    id v22 = pthread_self();
    pthread_getschedparam(v22, &v49, &v50);
    HIDWORD(v44) = v50.sched_priority;
    v50.sched_priority /= 2;
    id v23 = pthread_self();
    pthread_setschedparam(v23, v49, &v50);
    pid_t v24 = getpid();
    [v48 count];
    proc_set_cpumon_params();
    LODWORD(v44) = v24;
    objc_msgSend(v12, "progressFractionForType:", 2, v44);
    float v26 = v25;
    os_signpost_id_t v27 = objc_msgSend(MEMORY[0x1E4F28F90], "progressWithTotalUnitCount:parent:pendingUnitCount:", 100, v11, (uint64_t)(float)(v25 * (float)objc_msgSend(v11, "totalUnitCount")));
    if (v26 == 1.0) {
      float v28 = 0.75;
    }
    else {
      float v28 = 0.05;
    }
    uint64_t v47 = objc_msgSend(MEMORY[0x1E4F28F90], "progressWithTotalUnitCount:parent:pendingUnitCount:", 100, v27, llroundf(v28 * (float)objc_msgSend(v11, "totalUnitCount")));
    if (v6)
    {
      id v29 = [v10 globalValues];
      BOOL v30 = [v29 importFilesystemAssetsState] == -1;
    }
    else
    {
      BOOL v30 = 0;
    }
    id v31 = [(PLModelMigrator *)self _importFileSystemImportAssets:v48 intoLibrary:v10 type:v30 progress:v47];
    id v32 = [(PLModelMigrator *)self analyticsEventManager];
    long long v33 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v31, "count"));
    [v32 setPayloadValue:v33 forKey:*MEMORY[0x1E4F8BDA0] onEventWithName:*MEMORY[0x1E4F8BD88]];

    if ([v12 isLegacyRecoveryEnabled]) {
      [(PLModelMigrator *)self filesystemImportResultsUpdateKeywordWithImportedAssets:v31];
    }
    if (!v6)
    {
      uint64_t v34 = objc_msgSend(MEMORY[0x1E4F28F90], "progressWithTotalUnitCount:parent:pendingUnitCount:", 100, v27, llround((1.0 - v28) * (double)objc_msgSend(v11, "totalUnitCount")));
      uint64_t v35 = [(PLModelMigrator *)self pathManager];
      BOOL v36 = +[PLRebuildJournalManager isEnabledWithPathManager:v35 error:0];

      if (v36)
      {
        uint64_t v37 = [v10 libraryServicesManager];
        uint64_t v38 = [v37 rebuildJournalManager];
        char v39 = [v10 managedObjectContext];
        [v38 recreateNonAssetsInManagedObjectContext:v39 progress:v34];
      }
      else
      {
        [v10 recreateAlbumsAndPersonsFromMetadata];
        objc_msgSend(v34, "setCompletedUnitCount:", objc_msgSend(v34, "totalUnitCount"));
      }
    }
    long long v40 = PLMigrationGetLog();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      *(_DWORD *)CGRect buf = 134217984;
      double v52 = v41 - v18;
      _os_log_impl(&dword_19B3C7000, v40, OS_LOG_TYPE_DEFAULT, "Migration took %1.1fs", buf, 0xCu);
    }

    [v10 cleanupAfterImportAllDCIMAssets];
    long long v42 = PLMigrationGetLog();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v42, OS_LOG_TYPE_DEFAULT, "Finished file system import", buf, 2u);
    }

    proc_set_cpumon_defaults();
    v50.sched_priority = v45;
    int v43 = pthread_self();
    pthread_setschedparam(v43, v49, &v50);
  }
}

- (void)_rebuildAssetsFromJournal:(id)a3 inLibrary:(id)a4 progress:(id)a5 progressFraction:(id)a6
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v14 = v13;
  int v15 = PLMigrationGetLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    double v16 = [MEMORY[0x1E4F29060] callStackSymbols];
    *(_DWORD *)CGRect buf = 138412290;
    double v32 = v16;
    _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_DEFAULT, "Asset journal rebuild started: %@", buf, 0xCu);
  }
  sched_param v30 = 0;
  int v29 = 0;
  double v17 = pthread_self();
  pthread_getschedparam(v17, &v29, &v30);
  int sched_priority = v30.sched_priority;
  if (v30.sched_priority >= 0) {
    int v19 = v30.sched_priority;
  }
  else {
    int v19 = v30.sched_priority + 1;
  }
  v30.int sched_priority = v19 >> 1;
  double v20 = pthread_self();
  pthread_setschedparam(v20, v29, &v30);
  id v21 = (void *)MEMORY[0x1E4F28F90];
  uint64_t v22 = [v11 totalUnitCount];
  [v12 progressFractionForType:0];
  pid_t v24 = [v21 progressWithTotalUnitCount:100 parent:v11 pendingUnitCount:llroundf(v23 * (float)v22)];
  float v25 = [v10 managedObjectContext];
  [v9 recreateAssetsInManagedObjectContext:v25 options:0 progress:v24];

  float v26 = PLMigrationGetLog();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    *(_DWORD *)CGRect buf = 134217984;
    double v32 = v27 - v14;
    _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_DEFAULT, "Asset journal rebuild finished, duration: %1.1fs", buf, 0xCu);
  }

  v30.int sched_priority = sched_priority;
  float v28 = pthread_self();
  pthread_setschedparam(v28, v29, &v30);
}

- (id)_orderedAssetsToImportInLibrary:(id)a3 cameraRollOnly:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (([(PLPhotoLibraryPathManager *)self->_pathManager isDCIM] & 1) == 0)
  {
    long long v42 = [MEMORY[0x1E4F28B00] currentHandler];
    [v42 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:2445 description:@"Expected DCIM library"];
  }
  id v8 = [MEMORY[0x1E4F1CA48] array];
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  uint64_t v63 = [v8 count];
  id v10 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
  [(PLModelMigrator *)self setFileManager:v10];
  id v11 = (void *)MEMORY[0x1E4F1CB10];
  id v12 = [(PLPhotoLibraryPathManager *)self->_pathManager photoDirectoryWithType:1];
  double v13 = [v11 fileURLWithPath:v12 isDirectory:1];

  double v14 = [v13 URLByAppendingPathComponent:@"PhotoData"];
  char v51 = [v14 URLByAppendingPathComponent:@"CPLAssets"];
  sched_param v50 = [v13 URLByAppendingPathComponent:*MEMORY[0x1E4F8C4F8]];
  double v52 = v14;
  uint64_t v53 = [v14 URLByAppendingPathComponent:@"Locked"];
  id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  int v49 = v13;
  double v16 = [v13 URLByAppendingPathComponent:*MEMORY[0x1E4F8C2F0]];
  uint64_t v17 = +[PLRebuildableDirectory rebuildableDirectoryWithURL:v16 isCPLAssets:0 isPhotoStream:0 photoLibrary:v7 startTime:self->_startTime];
  if (v17) {
    [v15 addObject:v17];
  }
  long long v48 = (void *)v17;
  char v54 = v7;
  double v18 = self;
  if (!v4)
  {
    int v45 = [v52 URLByAppendingPathComponent:@"Sync"];
    uint64_t v19 = +[PLRebuildableDirectory rebuildableDirectoryWithURL:isCPLAssets:isPhotoStream:photoLibrary:startTime:](PLRebuildableDirectory, "rebuildableDirectoryWithURL:isCPLAssets:isPhotoStream:photoLibrary:startTime:", self->_startTime);
    if (v19) {
      [v15 addObject:v19];
    }
    uint64_t v44 = (void *)v19;
    long long v46 = v16;
    uint64_t v20 = +[PLRebuildableDirectory rebuildableDirectoryWithURL:v51 isCPLAssets:1 isPhotoStream:0 photoLibrary:v7 startTime:self->_startTime];
    if (v20) {
      [v15 addObject:v20];
    }
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v47 = v10;
    id v21 = objc_msgSend(v10, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v50, 0, 0, &__block_literal_global_372, v20);
    uint64_t v22 = [v21 countByEnumeratingWithState:&v59 objects:v65 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v60;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v60 != v24) {
            objc_enumerationMutation(v21);
          }
          float v26 = +[PLRebuildableDirectory rebuildableDirectoryWithURL:*(void *)(*((void *)&v59 + 1) + 8 * i) isCPLAssets:0 isPhotoStream:1 photoLibrary:v54 startTime:v18->_startTime];
          if (v26) {
            [v15 addObject:v26];
          }
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v59 objects:v65 count:16];
      }
      while (v23);
    }

    double v27 = [v53 URLByAppendingPathComponent:@"CPLAssets"];
    float v28 = +[PLRebuildableDirectory rebuildableDirectoryWithURL:v27 isCPLAssets:1 isPhotoStream:0 photoLibrary:v54 startTime:v18->_startTime];
    if (v28) {
      [v15 addObject:v28];
    }
    int v29 = [v53 URLByAppendingPathComponent:@"DCIM"];
    sched_param v30 = +[PLRebuildableDirectory rebuildableDirectoryWithURL:v29 isCPLAssets:0 isPhotoStream:0 photoLibrary:v54 startTime:v18->_startTime];
    if (v30) {
      [v15 addObject:v30];
    }

    double v16 = v46;
    id v10 = v47;
  }
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v31 = v15;
  uint64_t v32 = [v31 countByEnumeratingWithState:&v55 objects:v64 count:16];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = *(void *)v56;
    do
    {
      for (uint64_t j = 0; j != v33; ++j)
      {
        if (*(void *)v56 != v34) {
          objc_enumerationMutation(v31);
        }
        [*(id *)(*((void *)&v55 + 1) + 8 * j) gatherAssetsToImport:v8 pendingAssetsCount:&v63 onDiskURLsToSkip:v9 cameraRollOnly:v4];
      }
      uint64_t v33 = [v31 countByEnumeratingWithState:&v55 objects:v64 count:16];
    }
    while (v33);
  }

  BOOL v36 = v18;
  [(PLModelMigrator *)v18 _addUBFBundleScopedOrderedAssetsToImport:v8 onDiskURLsToSkip:v9];
  if (!v4)
  {
    uint64_t v37 = [v54 filesystemImportProgressAlbum];
    uint64_t v38 = [v54 globalValues];
    int v39 = [v38 isRebuildComplete];

    if (v39) {
      uint64_t v40 = 8;
    }
    else {
      uint64_t v40 = 24;
    }
    [v37 setPendingItemsType:v40];
    [v37 setPendingItemsCount:v63];
  }
  [(PLModelMigrator *)v36 _repairInProgressDCIMLockedAssetTransfersInOrderedAssetsToImport:v8 baseDirectory:v49 photoDataLockedAssetsURL:v53 photoDataCPLAssetsURL:v51 photoStreamsBaseURL:v50];
  [v8 sortUsingComparator:&__block_literal_global_378];

  return v8;
}

uint64_t __66__PLModelMigrator__orderedAssetsToImportInLibrary_cameraRollOnly___block_invoke_376(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

uint64_t __66__PLModelMigrator__orderedAssetsToImportInLibrary_cameraRollOnly___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  BOOL v6 = PLMigrationGetLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = [v4 path];
    int v9 = 138412546;
    id v10 = v7;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_ERROR, "Unable to enumerate '%@': %@", (uint8_t *)&v9, 0x16u);
  }
  return 1;
}

- (id)_orderedAssetsToImportInLibrary:(id)a3
{
  id v4 = (void *)MEMORY[0x1E4F1CA48];
  id v5 = a3;
  BOOL v6 = [v4 array];
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  id v8 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
  [(PLModelMigrator *)self setFileManager:v8];
  [(PLModelMigrator *)self _addUBFBundleScopedOrderedAssetsToImport:v6 onDiskURLsToSkip:v7];
  int v9 = [v5 filesystemImportProgressAlbum];
  id v10 = [v5 globalValues];

  LODWORD(v5) = [v10 isRebuildComplete];
  if (v5) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = 24;
  }
  [v9 setPendingItemsType:v11];
  objc_msgSend(v9, "setPendingItemsCount:", objc_msgSend(v6, "count"));
  [(PLModelMigrator *)self _repairInProgressLockedAssetTransfersInOrderedAssetsToImport:v6];
  [v6 sortUsingComparator:&__block_literal_global_355];

  return v6;
}

uint64_t __51__PLModelMigrator__orderedAssetsToImportInLibrary___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

- (void)_repairInProgressLockedAssetTransfersInOrderedAssetsToImport:(id)a3
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v47 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  obuint64_t j = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v70 objects:v80 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v71;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v71 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v70 + 1) + 8 * i);
        if ([v8 isInterruptedLockedResourceTransfer]) {
          [v47 addObject:v8];
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v70 objects:v80 count:16];
    }
    while (v5);
  }

  uint64_t v64 = 0;
  uint64_t v65 = &v64;
  uint64_t v66 = 0x3032000000;
  long long v67 = __Block_byref_object_copy__21966;
  char v68 = __Block_byref_object_dispose__21967;
  id v69 = 0;
  int v9 = [(PLModelMigrator *)self pathManager];
  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 3221225472;
  void v63[2] = __80__PLModelMigrator__repairInProgressLockedAssetTransfersInOrderedAssetsToImport___block_invoke;
  v63[3] = &unk_1E5867EB0;
  void v63[4] = &v64;
  [v9 enumerateBundleScopesWithBlock:v63];

  if (v65[5])
  {
    id v10 = [(PLModelMigrator *)self pathManager];
    uint64_t v44 = [v10 photoDirectoryWithType:4];

    id v50 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v45 = v47;
    uint64_t v49 = [v45 countByEnumeratingWithState:&v59 objects:v79 count:16];
    if (v49)
    {
      uint64_t v48 = *(void *)v60;
      *(void *)&long long v11 = 138412546;
      long long v43 = v11;
      do
      {
        for (uint64_t j = 0; j != v49; ++j)
        {
          if (*(void *)v60 != v48) {
            objc_enumerationMutation(v45);
          }
          id v12 = *(void **)(*((void *)&v59 + 1) + 8 * j);
          if ((objc_msgSend(v50, "containsObject:", v12, v43) & 1) == 0)
          {
            long long v46 = v12;
            uint64_t v13 = [v12 lockedResourceTransferMarkerFileURL];
            uint64_t v53 = [v13 URLByDeletingLastPathComponent];

            if (v53)
            {
              double v52 = [v53 lastPathComponent];
              double v14 = PLMigrationGetLog();
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                id v15 = [v53 path];
                *(_DWORD *)CGRect buf = 138412290;
                uint64_t v75 = v15;
                _os_log_impl(&dword_19B3C7000, v14, OS_LOG_TYPE_DEFAULT, "[lockedResourceTransfer] found in progress locked asset transfer files in directory: '%@'", buf, 0xCu);
              }
              double v16 = (void *)MEMORY[0x1E4F8B908];
              uint64_t v17 = [v53 path];
              LOBYTE(v16) = [v16 filePath:v17 hasPrefix:v65[5]];

              double v18 = (void *)v44;
              if ((v16 & 1) == 0) {
                double v18 = (void *)v65[5];
              }
              uint64_t v19 = [v18 stringByAppendingPathComponent:v52];
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              id v20 = obj;
              uint64_t v21 = [v20 countByEnumeratingWithState:&v55 objects:v78 count:16];
              if (v21)
              {
                uint64_t v22 = *(void *)v56;
LABEL_24:
                uint64_t v23 = 0;
                while (1)
                {
                  if (*(void *)v56 != v22) {
                    objc_enumerationMutation(v20);
                  }
                  uint64_t v24 = *(void **)(*((void *)&v55 + 1) + 8 * v23);
                  float v25 = (void *)MEMORY[0x1E4F8B908];
                  float v26 = [v24 urls];
                  double v27 = [v26 anyObject];
                  float v28 = [v27 path];
                  LOBYTE(v25) = [v25 filePath:v28 hasPrefix:v19];

                  if (v25) {
                    break;
                  }
                  if (v21 == ++v23)
                  {
                    uint64_t v21 = [v20 countByEnumeratingWithState:&v55 objects:v78 count:16];
                    if (v21) {
                      goto LABEL_24;
                    }
                    goto LABEL_30;
                  }
                }
                int v29 = v24;

                if (v29) {
                  goto LABEL_35;
                }
              }
              else
              {
LABEL_30:
              }
              int v29 = [[PLFileSystemImportAsset alloc] initWithDestinationAlbum:0 assetKind:0];
              [v20 addObject:v29];
              sched_param v30 = PLMigrationGetLog();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                id v31 = [v53 path];
                *(_DWORD *)CGRect buf = v43;
                uint64_t v75 = v19;
                __int16 v76 = 2112;
                long long v77 = v31;
                _os_log_impl(&dword_19B3C7000, v30, OS_LOG_TYPE_DEFAULT, "[lockedResourceTransfer] did not find existing destination import asset containing files located in '%@' for transfer asset located in '%@', creating new destination asset", buf, 0x16u);
              }
LABEL_35:
              if ([(PLFileSystemImportAsset *)v29 isInterruptedLockedResourceTransfer])
              {
                uint64_t v32 = PLMigrationGetLog();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v33 = [(PLFileSystemImportAsset *)v29 lockedResourceTransferMarkerFileURL];
                  uint64_t v34 = [v33 path];
                  *(_DWORD *)CGRect buf = 138412290;
                  uint64_t v75 = v34;
                  _os_log_impl(&dword_19B3C7000, v32, OS_LOG_TYPE_DEFAULT, "[lockedResourceTransfer] destination import asset also has marker file: '%@'", buf, 0xCu);
                }
                [v50 addObject:v29];
              }
              uint64_t v35 = [PLLockedResourceTransferRecovery alloc];
              BOOL v36 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v19 isDirectory:1];
              uint64_t v37 = [(PLLockedResourceTransferRecovery *)v35 initWithTransferImportAsset:v46 destinationDirectoryURL:v36];
              [(PLFileSystemImportAsset *)v29 setLockedResourceTransferRecovery:v37];
            }
            else
            {
              uint64_t v38 = PLMigrationGetLog();
              double v52 = v38;
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)CGRect buf = 0;
                _os_log_impl(&dword_19B3C7000, v38, OS_LOG_TYPE_ERROR, "[lockedResourceTransfer] locked resource transfer asset is missing marker file URL", buf, 2u);
              }
            }
          }
        }
        uint64_t v49 = [v45 countByEnumeratingWithState:&v59 objects:v79 count:16];
      }
      while (v49);
    }

    [v45 removeObjectsInArray:v50];
    [obj removeObjectsInArray:v45];

    int v39 = v44;
  }
  else
  {
    int v39 = PLMigrationGetLog();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = [(PLModelMigrator *)self pathManager];
      double v41 = [v40 libraryURL];
      long long v42 = [v41 path];
      *(_DWORD *)CGRect buf = 138412290;
      uint64_t v75 = v42;
      _os_log_impl(&dword_19B3C7000, v39, OS_LOG_TYPE_ERROR, "[lockedResourceTransfer] unable to access locked bundle scope for library at path: '%@'", buf, 0xCu);
    }
  }

  _Block_object_dispose(&v64, 8);
}

void __80__PLModelMigrator__repairInProgressLockedAssetTransfersInOrderedAssetsToImport___block_invoke(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 == 4)
  {
    uint64_t v6 = [a4 photoDirectoryWithType:4];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

- (void)_repairInProgressDCIMLockedAssetTransfersInOrderedAssetsToImport:(id)a3 baseDirectory:(id)a4 photoDataLockedAssetsURL:(id)a5 photoDataCPLAssetsURL:(id)a6 photoStreamsBaseURL:(id)a7
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v68 = a4;
  id v12 = a5;
  id v69 = a6;
  id v67 = a7;
  id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  id v14 = v11;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v90 objects:v100 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v91;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v91 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*((void *)&v90 + 1) + 8 * i);
        if ([v19 isInterruptedLockedResourceTransfer]) {
          [v13 addObject:v19];
        }
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v90 objects:v100 count:16];
    }
    while (v16);
  }

  id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  obuint64_t j = v13;
  uint64_t v21 = [obj countByEnumeratingWithState:&v86 objects:v99 count:16];
  if (v21)
  {
    uint64_t v23 = v21;
    uint64_t v24 = *(void *)v87;
    *(void *)&long long v22 = 138412546;
    long long v66 = v22;
    id v72 = v14;
    id v73 = v12;
    uint64_t v70 = *(void *)v87;
    id v71 = v20;
    do
    {
      uint64_t v25 = 0;
      uint64_t v75 = v23;
      do
      {
        if (*(void *)v87 != v24) {
          objc_enumerationMutation(obj);
        }
        float v26 = *(void **)(*((void *)&v86 + 1) + 8 * v25);
        if ((objc_msgSend(v20, "containsObject:", v26, v66) & 1) == 0)
        {
          long long v79 = v26;
          double v27 = [v26 lockedResourceTransferMarkerFileURL];
          float v28 = [v27 URLByDeletingLastPathComponent];

          int v29 = PLMigrationGetLog();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            sched_param v30 = [v28 path];
            *(_DWORD *)CGRect buf = 138412290;
            long long v95 = v30;
            _os_log_impl(&dword_19B3C7000, v29, OS_LOG_TYPE_DEFAULT, "[lockedResourceTransfer] found in progress locked asset transfer files in directory: '%@'", buf, 0xCu);
          }
          if (v28)
          {
            unint64_t v31 = 0x1E4F8B000uLL;
            uint64_t v32 = (void *)MEMORY[0x1E4F8B908];
            uint64_t v33 = [v28 path];
            uint64_t v34 = [v12 path];
            LODWORD(v32) = [v32 filePath:v33 hasPrefix:v34];

            uint64_t v35 = [(PLModelMigrator *)self pathManager];
            BOOL v36 = [v28 path];
            uint64_t v77 = v25;
            BOOL v78 = v28;
            if (v32)
            {
              uint64_t v37 = [v35 assetAbbreviatedMetadataDirectoryForDirectory:v36 type:27 bundleScope:0];

              uint64_t v38 = [v68 URLByAppendingPathComponent:v37];
              int v39 = v38;
            }
            else
            {
              uint64_t v37 = [v35 assetAbbreviatedMetadataDirectoryForDirectory:v36 type:31 bundleScope:0];

              int v39 = [v12 URLByAppendingPathComponent:v37];
              uint64_t v38 = v28;
            }
            uint64_t v80 = v38;

            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            id v81 = v14;
            uint64_t v41 = [v81 countByEnumeratingWithState:&v82 objects:v98 count:16];
            if (v41)
            {
              uint64_t v42 = v41;
              uint64_t v43 = *(void *)v83;
LABEL_26:
              uint64_t v44 = 0;
              while (1)
              {
                if (*(void *)v83 != v43) {
                  objc_enumerationMutation(v81);
                }
                id v45 = *(void **)(*((void *)&v82 + 1) + 8 * v44);
                long long v46 = *(void **)(v31 + 2312);
                id v47 = [v45 urls];
                uint64_t v48 = [v47 anyObject];
                uint64_t v49 = [v48 path];
                id v50 = [v39 path];
                LOBYTE(v46) = [v46 filePath:v49 hasPrefix:v50];

                if (v46) {
                  break;
                }
                ++v44;
                unint64_t v31 = 0x1E4F8B000;
                if (v42 == v44)
                {
                  uint64_t v42 = [v81 countByEnumeratingWithState:&v82 objects:v98 count:16];
                  if (v42) {
                    goto LABEL_26;
                  }
                  goto LABEL_32;
                }
              }
              char v51 = v45;

              uint64_t v24 = v70;
              id v20 = v71;
              unint64_t v31 = 0x1E4F8B000uLL;
              uint64_t v40 = v39;
              if (v51) {
                goto LABEL_42;
              }
            }
            else
            {
LABEL_32:

              uint64_t v24 = v70;
              id v20 = v71;
              uint64_t v40 = v39;
            }
            double v52 = *(void **)(v31 + 2312);
            uint64_t v53 = [v80 path];
            char v54 = [v69 path];
            LOBYTE(v52) = [v52 filePath:v53 hasPrefix:v54];

            if (v52)
            {
              uint64_t v55 = 0;
            }
            else
            {
              long long v56 = *(void **)(v31 + 2312);
              long long v57 = [v80 path];
              long long v58 = [v67 path];
              LODWORD(v56) = [v56 filePath:v57 hasPrefix:v58];

              if (v56) {
                uint64_t v55 = 2;
              }
              else {
                uint64_t v55 = 7;
              }
            }
            char v51 = [[PLFileSystemImportAsset alloc] initWithDestinationAlbum:0 assetKind:v55];
            [v81 addObject:v51];
            long long v59 = PLMigrationGetLog();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              long long v60 = [v40 path];
              long long v61 = [v78 path];
              *(_DWORD *)CGRect buf = v66;
              long long v95 = v60;
              __int16 v96 = 2112;
              long long v97 = v61;
              _os_log_impl(&dword_19B3C7000, v59, OS_LOG_TYPE_DEFAULT, "[lockedResourceTransfer] did not find existing destination import asset containing files located in '%@' for transfer asset located in '%@', creating new destination asset", buf, 0x16u);
            }
LABEL_42:
            uint64_t v23 = v75;
            uint64_t v25 = v77;
            if ([(PLFileSystemImportAsset *)v51 isInterruptedLockedResourceTransfer])
            {
              long long v62 = PLMigrationGetLog();
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v63 = [(PLFileSystemImportAsset *)v51 lockedResourceTransferMarkerFileURL];
                uint64_t v64 = [v63 path];
                *(_DWORD *)CGRect buf = 138412290;
                long long v95 = v64;
                _os_log_impl(&dword_19B3C7000, v62, OS_LOG_TYPE_DEFAULT, "[lockedResourceTransfer] destination import asset also has marker file: '%@'", buf, 0xCu);
              }
              [v20 addObject:v51];
            }
            uint64_t v65 = [[PLLockedResourceTransferRecovery alloc] initWithTransferImportAsset:v79 destinationDirectoryURL:v40];
            [(PLFileSystemImportAsset *)v51 setLockedResourceTransferRecovery:v65];

            id v14 = v72;
            id v12 = v73;
            float v28 = v78;
          }
          else
          {
            uint64_t v40 = PLMigrationGetLog();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)CGRect buf = 0;
              _os_log_impl(&dword_19B3C7000, v40, OS_LOG_TYPE_ERROR, "[lockedResourceTransfer] locked resource transfer asset is missing marker file URL", buf, 2u);
            }
          }
        }
        ++v25;
      }
      while (v25 != v23);
      uint64_t v23 = [obj countByEnumeratingWithState:&v86 objects:v99 count:16];
    }
    while (v23);
  }

  [obj removeObjectsInArray:v20];
  [v14 removeObjectsInArray:obj];
}

- (void)_addUBFBundleScopedOrderedAssetsToImport:(id)a3 onDiskURLsToSkip:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  pathManager = self->_pathManager;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __77__PLModelMigrator__addUBFBundleScopedOrderedAssetsToImport_onDiskURLsToSkip___block_invoke;
  v11[3] = &unk_1E58664D8;
  void v11[4] = self;
  id v12 = v7;
  id v13 = v6;
  id v9 = v6;
  id v10 = v7;
  [(PLPhotoLibraryPathManager *)pathManager enumerateBundleScopesWithBlock:v11];
}

void __77__PLModelMigrator__addUBFBundleScopedOrderedAssetsToImport_onDiskURLsToSkip___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  if ([MEMORY[0x1E4F8B980] bundleScopeShouldBePersistedForRebuild:a2])
  {
    id v7 = (void *)MEMORY[0x1E4F1CB10];
    id v8 = [v6 photoDirectoryWithType:4];
    id v9 = [v7 fileURLWithPath:v8 isDirectory:1];

    id v10 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", *MEMORY[0x1E4F1C6E8], *MEMORY[0x1E4F1C540], *MEMORY[0x1E4F1C628], 0);
    id v11 = [*(id *)(a1 + 32) fileManager];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __77__PLModelMigrator__addUBFBundleScopedOrderedAssetsToImport_onDiskURLsToSkip___block_invoke_2;
    v13[3] = &__block_descriptor_34_e27_B24__0__NSURL_8__NSError_16l;
    __int16 v14 = a2;
    id v12 = [v11 enumeratorAtURL:v9 includingPropertiesForKeys:v10 options:0 errorHandler:v13];

    +[PLRebuildableDirectory collectFileURLs:v12 urlsToSkip:*(void *)(a1 + 40) forAddingToAlbum:0 intoAssetsArray:*(void *)(a1 + 48) assetsKind:0 testCreationDates:1 startTime:*(double *)(*(void *)(a1 + 32) + 8) pathManager:v6];
  }
}

uint64_t __77__PLModelMigrator__addUBFBundleScopedOrderedAssetsToImport_onDiskURLsToSkip___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (!PLIsErrorFileNotFound() || *(_WORD *)(a1 + 32) != 4)
  {
    id v7 = PLMigrationGetLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = [v5 path];
      int v10 = 138412546;
      id v11 = v8;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl(&dword_19B3C7000, v7, OS_LOG_TYPE_ERROR, "Unable to enumerate asset dir '%@': %@", (uint8_t *)&v10, 0x16u);
    }
  }

  return 1;
}

- (void)dontImportFileSystemDataIntoDatabaseWithPhotoLibrary:(id)a3
{
  id v4 = a3;
  id v8 = v4;
  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = -[PLModelMigrator newShortLivedLibraryWithName:](self, "newShortLivedLibraryWithName:", "-[PLModelMigrator dontImportFileSystemDataIntoDatabaseWithPhotoLibrary:]");
  }
  id v6 = v5;
  id v7 = [v5 globalValues];
  [v7 dontImportFileSystemDataIntoDatabase];
}

- (void)_repairPotentialModelCorruptionInLibrary:(id)a3
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __60__PLModelMigrator__repairPotentialModelCorruptionInLibrary___block_invoke;
    v7[3] = &unk_1E5875E18;
    id v8 = v4;
    id v9 = self;
    [v8 performTransactionAndWait:v7];
    id v6 = v8;
  }
  else
  {
    id v6 = PLMigrationGetLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 136446210;
      id v11 = "-[PLModelMigrator _repairPotentialModelCorruptionInLibrary:]";
      _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_ERROR, "%{public}s can't access photoLibrary: <rdar://problem/39763084>", buf, 0xCu);
    }
  }
}

void __60__PLModelMigrator__repairPotentialModelCorruptionInLibrary___block_invoke(uint64_t a1)
{
  v101[5] = *MEMORY[0x1E4F143B8];
  id v52 = objc_alloc_init(MEMORY[0x1E4F1C0B8]);
  [v52 setName:@"objectID"];
  v1 = [MEMORY[0x1E4F28C68] expressionForEvaluatedObject];
  [v52 setExpression:v1];

  [v52 setExpressionResultType:2000];
  long long v56 = [*(id *)(a1 + 32) managedObjectContext];
  uint64_t v2 = (void *)MEMORY[0x1E4F1C0D0];
  uint64_t v3 = +[PLManagedAsset entityName];
  uint64_t v53 = [v2 fetchRequestWithEntityName:v3];

  v101[0] = @"directory";
  v101[1] = @"filename";
  v101[2] = @"uuid";
  v101[3] = @"savedAssetType";
  v101[4] = v52;
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v101 count:5];
  [v53 setPropertiesToFetch:v4];

  [v53 setResultType:2];
  id v5 = [MEMORY[0x1E4F1CA80] set];
  id v6 = [MEMORY[0x1E4F1CA80] set];
  id v7 = [MEMORY[0x1E4F1CA80] set];
  id v8 = [MEMORY[0x1E4F1CA80] set];
  uint64_t v90 = 0;
  long long v91 = &v90;
  uint64_t v92 = 0x2020000000;
  char v93 = 0;
  uint64_t v86 = 0;
  long long v87 = &v86;
  uint64_t v88 = 0x2020000000;
  char v89 = 0;
  uint64_t v82 = 0;
  long long v83 = &v82;
  uint64_t v84 = 0x2020000000;
  __int16 v85 = 0;
  v73[0] = MEMORY[0x1E4F143A8];
  v73[1] = 3221225472;
  v73[2] = __60__PLModelMigrator__repairPotentialModelCorruptionInLibrary___block_invoke_2;
  v73[3] = &unk_1E5866490;
  uint64_t v74 = @"objectID";
  id v48 = v5;
  id v75 = v48;
  long long v79 = &v82;
  uint64_t v80 = &v86;
  id v49 = v6;
  id v76 = v49;
  id v9 = v7;
  id v77 = v9;
  id v81 = &v90;
  id v50 = v8;
  id v78 = v50;
  id v10 = (id)[v56 enumerateObjectsFromFetchRequest:v53 count:0 usingDefaultBatchSizeWithBlock:v73];
  if ([v9 count])
  {
    [*(id *)(a1 + 40) removeUnpairedTimelapsePreviewsInContext:v56 fromDuplicatedUUIDs:v9];
    if (![v9 count])
    {
      id v11 = PLMigrationGetLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CGRect buf = 136446210;
        long long v97 = "-[PLModelMigrator _repairPotentialModelCorruptionInLibrary:]_block_invoke";
        _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s deleted all unpaired timelapse video previews, resolved UUID corruption", buf, 0xCu);
      }

      *((unsigned char *)v91 + 24) = 0;
    }
  }
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  obuint64_t j = v9;
  uint64_t v12 = [obj countByEnumeratingWithState:&v69 objects:v100 count:16];
  if (v12)
  {
    uint64_t v55 = *(void *)v70;
    do
    {
      uint64_t v57 = v12;
      for (uint64_t i = 0; i != v57; ++i)
      {
        if (*(void *)v70 != v55) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(const char **)(*((void *)&v69 + 1) + 8 * i);
        uint64_t v15 = (void *)MEMORY[0x1E4F1C0D0];
        uint64_t v16 = +[PLManagedAsset entityName];
        uint64_t v17 = [v15 fetchRequestWithEntityName:v16];

        double v18 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K == %@", @"uuid", v14];
        [v17 setPredicate:v18];

        [v17 setFetchBatchSize:100];
        id v68 = 0;
        uint64_t v19 = [v56 executeFetchRequest:v17 error:&v68];
        id v58 = v68;
        if ((unint64_t)[v19 count] > 1)
        {
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          id v20 = v19;
          uint64_t v21 = [v20 countByEnumeratingWithState:&v64 objects:v95 count:16];
          if (v21)
          {
            uint64_t v22 = *(void *)v65;
            do
            {
              for (uint64_t j = 0; j != v21; ++j)
              {
                if (*(void *)v65 != v22) {
                  objc_enumerationMutation(v20);
                }
                uint64_t v24 = *(void **)(*((void *)&v64 + 1) + 8 * j);
                uint64_t v25 = [MEMORY[0x1E4F8BA08] UUIDString];
                [v24 setUuid:v25];
                [v24 setCloudAssetGUID:0];
                [v24 persistMetadataToFilesystem];
              }
              uint64_t v21 = [v20 countByEnumeratingWithState:&v64 objects:v95 count:16];
            }
            while (v21);
          }
        }
        else
        {
          id v20 = PLMigrationGetLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CGRect buf = 138543618;
            long long v97 = v14;
            __int16 v98 = 2112;
            id v99 = v58;
            _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "Didn't find multiple assets for duplicated UUID during data migration: %{public}@ error: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v12 = [obj countByEnumeratingWithState:&v69 objects:v100 count:16];
    }
    while (v12);
  }

  if ([v50 count])
  {
    float v26 = (void *)MEMORY[0x1E4F1C0D0];
    double v27 = +[PLManagedAsset entityName];
    float v28 = [v26 fetchRequestWithEntityName:v27];

    int v29 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SELF in %@", v50];
    [v28 setPredicate:v29];

    id v63 = 0;
    sched_param v30 = [v56 executeFetchRequest:v28 error:&v63];
    unint64_t v31 = (char *)v63;
    if (v30)
    {
      uint64_t v32 = [v30 count];
      if (v32 == [v50 count])
      {
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        uint64_t v33 = v30;
        uint64_t v34 = [v33 countByEnumeratingWithState:&v59 objects:v94 count:16];
        if (v34)
        {
          uint64_t v35 = *(void *)v60;
          do
          {
            for (uint64_t k = 0; k != v34; ++k)
            {
              if (*(void *)v60 != v35) {
                objc_enumerationMutation(v33);
              }
              uint64_t v37 = *(void **)(*((void *)&v59 + 1) + 8 * k);
              uint64_t v38 = [MEMORY[0x1E4F8BA08] UUIDString];
              [v37 setUuid:v38];
              [v37 setCloudAssetGUID:0];
              [v37 persistMetadataToFilesystem];
            }
            uint64_t v34 = [v33 countByEnumeratingWithState:&v59 objects:v94 count:16];
          }
          while (v34);
        }
      }
      else
      {
        uint64_t v33 = PLMigrationGetLog();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v30, "count"));
          int v39 = (char *)objc_claimAutoreleasedReturnValue();
          uint64_t v40 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v50, "count"));
          *(_DWORD *)CGRect buf = 138412546;
          long long v97 = v39;
          __int16 v98 = 2112;
          id v99 = v40;
          _os_log_impl(&dword_19B3C7000, v33, OS_LOG_TYPE_ERROR, "Fetched assets count: %@ objects with missing uuids count: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      uint64_t v33 = PLMigrationGetLog();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        long long v97 = v31;
        _os_log_impl(&dword_19B3C7000, v33, OS_LOG_TYPE_ERROR, "Error occured during data migration: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    float v28 = v53;
  }
  if (*((unsigned char *)v91 + 24))
  {
    uint64_t v41 = PLMigrationGetLog();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v41, OS_LOG_TYPE_ERROR, "Found duplicate UUIDs in the database during data migration; triggering rebuild!",
        buf,
        2u);
    }

    uint64_t v42 = objc_msgSend(MEMORY[0x1E4F8BA10], "mapSavedAssetType:unknown:photoBooth:photoStream:camera:cloudShared:cameraConnectionKit:cloudPhotoLibrary:wallpaper_UNUSED:momentShared:placeholder:referenced:alternate:guest:companionSynced:recovered:legacyImport:unrecognized:", *((__int16 *)v83 + 12), 6, 6, 14, 6, 15, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6,
            6,
            v48,
            v49);
    uint64_t v43 = [*(id *)(a1 + 40) pathManager];
    [v43 setSqliteErrorForRebuildReason:v42 allowsExit:1];

    uint64_t v44 = [*(id *)(a1 + 32) libraryServicesManager];
    [v44 shutdownLibraryWithDescription:@"duplicate UUIDs found during data migration"];
  }
  else
  {
    if (!*((unsigned char *)v87 + 24)) {
      goto LABEL_45;
    }
    id v45 = PLMigrationGetLog();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
    {
      int v46 = *((__int16 *)v83 + 12);
      *(_DWORD *)CGRect buf = 67109120;
      LODWORD(v97) = v46;
      _os_log_impl(&dword_19B3C7000, v45, OS_LOG_TYPE_FAULT, "Found duplicate paths for savedAssetType %hd in the database during data migration", buf, 8u);
    }

    [MEMORY[0x1E4F8BA10] maskForTriggerRebuildForPathCorruptionExclusions];
    if (PLValidatedSavedAssetTypeApplies())
    {
      uint64_t v44 = PLMigrationGetLog();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CGRect buf = 0;
        _os_log_impl(&dword_19B3C7000, v44, OS_LOG_TYPE_ERROR, "Do not trigger rebuild for duplicated paths", buf, 2u);
      }
    }
    else
    {
      id v47 = [*(id *)(a1 + 40) pathManager];
      [v47 setSqliteErrorForRebuildReason:7 allowsExit:1];

      uint64_t v44 = [*(id *)(a1 + 32) libraryServicesManager];
      [v44 shutdownLibraryWithDescription:@"duplicate paths found during data migration"];
    }
  }

LABEL_45:
  _Block_object_dispose(&v82, 8);
  _Block_object_dispose(&v86, 8);
  _Block_object_dispose(&v90, 8);
}

void __60__PLModelMigrator__repairPotentialModelCorruptionInLibrary___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 objectForKey:@"directory"];
  id v5 = [v3 objectForKey:@"filename"];
  id v6 = [v3 objectForKey:*(void *)(a1 + 32)];
  id v7 = [v3 objectForKey:@"uuid"];
  if ([v4 length] && objc_msgSend(v5, "length"))
  {
    id v8 = [v4 stringByAppendingPathComponent:v5];
    if ([*(id *)(a1 + 40) containsObject:v8])
    {
      id v9 = [v3 objectForKey:@"savedAssetType"];
      *(_WORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v9 integerValue];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
      id v10 = PLMigrationGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = [MEMORY[0x1E4F8B908] redactedDescriptionForPath:v8];
        int v12 = *(__int16 *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
        int v20 = 138413314;
        uint64_t v21 = v8;
        __int16 v22 = 2114;
        uint64_t v23 = v11;
        __int16 v24 = 2114;
        uint64_t v25 = v7;
        __int16 v26 = 2114;
        double v27 = v6;
        __int16 v28 = 1024;
        int v29 = v12;
        _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "Found duplicate during data migration for path %@ (%{public}@), uuid %{public}@, objectID %{public}@, savedAssetType %hd", (uint8_t *)&v20, 0x30u);
      }
    }
    else
    {
      [*(id *)(a1 + 40) addObject:v8];
    }
  }
  if ([*(id *)(a1 + 48) containsObject:v7])
  {
    id v13 = [v3 objectForKey:@"savedAssetType"];
    *(_WORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v13 integerValue];

    [*(id *)(a1 + 56) addObject:v7];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
    uint64_t v14 = [v4 stringByAppendingPathComponent:v5];
    uint64_t v15 = PLMigrationGetLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = [MEMORY[0x1E4F8B8F0] descriptionWithPath:v14];
      int v17 = *(__int16 *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      int v20 = 138544130;
      uint64_t v21 = v7;
      __int16 v22 = 2112;
      uint64_t v23 = v16;
      __int16 v24 = 2114;
      uint64_t v25 = v6;
      __int16 v26 = 1024;
      LODWORD(v27) = v17;
      _os_log_impl(&dword_19B3C7000, v15, OS_LOG_TYPE_ERROR, "Found duplicate asset UUID during data migration for uuid: %{public}@, path %@, objectID %{public}@, savedAssetType %hd", (uint8_t *)&v20, 0x26u);
    }
  }
  else
  {
    if (v7)
    {
      double v18 = *(void **)(a1 + 48);
      uint64_t v19 = v7;
    }
    else
    {
      double v18 = *(void **)(a1 + 64);
      uint64_t v19 = v6;
    }
    [v18 addObject:v19];
  }
}

- (void)removeUnpairedTimelapsePreviewsInContext:(id)a3 fromDuplicatedUUIDs:(id)a4
{
  void v66[2] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  id v7 = (void *)MEMORY[0x1E4F1C0D0];
  id v8 = +[PLManagedAsset entityName];
  id v9 = [v7 fetchRequestWithEntityName:v8];

  id v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K in %@", @"uuid", v6];
  id v11 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d AND %K = %d", @"kind", 1, @"kindSubtype", 102);
  int v12 = (void *)MEMORY[0x1E4F28BA0];
  v66[0] = v10;
  v66[1] = v11;
  id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v66 count:2];
  uint64_t v14 = [v12 andPredicateWithSubpredicates:v13];
  [v9 setPredicate:v14];

  uint64_t v15 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"uuid" ascending:1];
  v65[0] = v15;
  uint64_t v16 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"duration" ascending:1];
  v65[1] = v16;
  int v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v65 count:2];
  [v9 setSortDescriptors:v17];

  id v57 = 0;
  double v18 = [v5 executeFetchRequest:v9 error:&v57];
  id v19 = v57;
  int v20 = v19;
  if (v18)
  {
    id v42 = v19;
    uint64_t v44 = v11;
    id v45 = v10;
    int v46 = v9;
    id v47 = v6;
    id v48 = v5;
    uint64_t v21 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v49 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v43 = v18;
    id v22 = v18;
    uint64_t v23 = [v22 countByEnumeratingWithState:&v53 objects:v64 count:16];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)v54;
      do
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          if (*(void *)v54 != v25) {
            objc_enumerationMutation(v22);
          }
          double v27 = *(void **)(*((void *)&v53 + 1) + 8 * i);
          [v27 duration];
          double v29 = v28;
          uint64_t v30 = PLMigrationGetLog();
          BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          if (v29 == 0.0)
          {
            if (v31)
            {
              uint64_t v32 = [v27 uuid];
              uint64_t v33 = [v27 mainFileURL];
              uint64_t v34 = [v33 path];
              *(_DWORD *)CGRect buf = 136446722;
              long long v59 = "-[PLModelMigrator removeUnpairedTimelapsePreviewsInContext:fromDuplicatedUUIDs:]";
              __int16 v60 = 2114;
              long long v61 = v32;
              __int16 v62 = 2112;
              id v63 = v34;
              _os_log_impl(&dword_19B3C7000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s found zero-duration, unpaired, timelapse preview %{public}@ missing video path %@", buf, 0x20u);
            }
            uint64_t v35 = [v27 uuid];
            BOOL v36 = v21;
          }
          else
          {
            if (v31)
            {
              uint64_t v37 = [v27 uuid];
              uint64_t v38 = [v27 mainFileURL];
              int v39 = [v38 path];
              *(_DWORD *)CGRect buf = 136446722;
              long long v59 = "-[PLModelMigrator removeUnpairedTimelapsePreviewsInContext:fromDuplicatedUUIDs:]";
              __int16 v60 = 2114;
              long long v61 = v37;
              __int16 v62 = 2112;
              id v63 = v39;
              _os_log_impl(&dword_19B3C7000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s found unpaired timelapse video %{public}@ with valid path %@", buf, 0x20u);
            }
            uint64_t v35 = [v27 uuid];
            BOOL v36 = v49;
          }
          [v36 setObject:v27 forKeyedSubscript:v35];
        }
        uint64_t v24 = [v22 countByEnumeratingWithState:&v53 objects:v64 count:16];
      }
      while (v24);
    }

    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = __80__PLModelMigrator_removeUnpairedTimelapsePreviewsInContext_fromDuplicatedUUIDs___block_invoke;
    v50[3] = &unk_1E5866468;
    char v51 = v21;
    id v6 = v47;
    id v52 = v47;
    uint64_t v40 = v21;
    uint64_t v41 = v49;
    [v49 enumerateKeysAndObjectsUsingBlock:v50];

    id v5 = v48;
    id v10 = v45;
    id v9 = v46;
    double v18 = v43;
    id v11 = v44;
    int v20 = v42;
  }
  else
  {
    uint64_t v41 = PLMigrationGetLog();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 136446466;
      long long v59 = "-[PLModelMigrator removeUnpairedTimelapsePreviewsInContext:fromDuplicatedUUIDs:]";
      __int16 v60 = 2112;
      long long v61 = v20;
      _os_log_impl(&dword_19B3C7000, v41, OS_LOG_TYPE_ERROR, "%{public}s failed to fetch unpaired timelapse %@", buf, 0x16u);
    }
  }
}

void __80__PLModelMigrator_removeUnpairedTimelapsePreviewsInContext_fromDuplicatedUUIDs___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  if (v7)
  {
    id v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [v6 objectID];
      id v10 = [v6 mainFileURL];
      id v11 = [v10 path];
      int v12 = 136446978;
      id v13 = "-[PLModelMigrator removeUnpairedTimelapsePreviewsInContext:fromDuplicatedUUIDs:]_block_invoke";
      __int16 v14 = 2114;
      id v15 = v5;
      __int16 v16 = 2114;
      int v17 = v9;
      __int16 v18 = 2112;
      id v19 = v11;
      _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s deleting unpaired, timelapse preview %{public}@ -> final video %{public}@ with path %@", (uint8_t *)&v12, 0x2Au);
    }
    [v7 deleteFromDatabaseOnly];
    [*(id *)(a1 + 40) removeObject:v5];
  }
}

- (void)cleanupModelForDataMigrationForRestoreType:(int64_t)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = PLMigrationGetLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if ((unint64_t)(a3 - 1) > 2) {
      id v6 = @"none";
    }
    else {
      id v6 = off_1E5871370[a3 - 1];
    }
    id v7 = v6;
    qos_class_self();
    PLStringFromQoSClass();
    id v8 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)CGRect buf = 138543618;
    __int16 v26 = (const char *)v7;
    __int16 v27 = 2114;
    double v28 = v8;
    _os_log_impl(&dword_19B3C7000, v5, OS_LOG_TYPE_DEFAULT, "Clean up model after data migration for restore type %{public}@ at QoS: %{public}@", buf, 0x16u);
  }
  id v9 = PLMigrationGetLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CGRect buf = 0;
    _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Data migrator plugin is requesting library migration, updating in-flight device restore migration state", buf, 2u);
  }

  id v10 = [(PLModelMigrator *)self deviceRestoreMigrationSupport];
  [v10 setDataMigratorPluginHasRequestedLibraryMigration:1];

  id v11 = -[PLModelMigrator newShortLivedLibraryWithName:](self, "newShortLivedLibraryWithName:", "-[PLModelMigrator cleanupModelForDataMigrationForRestoreType:]");
  int v12 = v11;
  if (v11)
  {
    id v13 = [v11 managedObjectContext];
    __int16 v14 = [v13 persistentStoreCoordinator];
    id v15 = [v14 persistentStores];
    __int16 v16 = [v15 firstObject];

    int v17 = PLMigrationGetLog();
    __int16 v18 = v17;
    if (v16)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CGRect buf = 0;
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Photo library loaded successfully", buf, 2u);
      }

      [(PLModelMigrator *)self _recordCurrentVersionMetadataIfNeededForDataMigrationInPersistentStore:v16];
    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412546;
        __int16 v26 = v12;
        __int16 v27 = 2082;
        double v28 = "-[PLModelMigrator cleanupModelForDataMigrationForRestoreType:]";
        _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "Failed to access persistent store on photo library %@ for %{public}s", buf, 0x16u);
      }
    }
  }
  else
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 136446210;
      __int16 v26 = "-[PLModelMigrator cleanupModelForDataMigrationForRestoreType:]";
      _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_ERROR, "Failed to load photo library for %{public}s", buf, 0xCu);
    }
  }

  id v19 = objc_alloc_init(PLGreenController);
  if (a3)
  {
    uint64_t v20 = PLMigrationGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CGRect buf = 134217984;
      __int16 v26 = (const char *)a3;
      _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "Resetting fileID with restore %ld", buf, 0xCu);
    }

    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = __62__PLModelMigrator_cleanupModelForDataMigrationForRestoreType___block_invoke;
    void v23[3] = &unk_1E5875CE0;
    uint64_t v24 = v12;
    [v24 performTransactionAndWait:v23];
    [(PLModelMigrator *)self handleGreenChanges:v19];
  }
  if ([(PLGreenController *)v19 isGreenStateValid])
  {
    uint64_t v21 = [(PLGreenController *)v19 currentGreenValues];
    id v22 = [v12 globalValues];
    [v22 setGreenValues:v21];
  }
  [v12 dataMigratorSupportCleanupModelForDataMigrationPurgeMissingSynced];
  [(PLModelMigrator *)self _repairPotentialModelCorruptionInLibrary:v12];
}

void __62__PLModelMigrator_cleanupModelForDataMigrationForRestoreType___block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v1 = [*(id *)(a1 + 32) managedObjectContext];
  id v5 = 0;
  BOOL v2 = +[PLInternalResource batchResetFileIDInManagedObjectContext:v1 error:&v5];
  id v3 = v5;

  if (!v2)
  {
    id v4 = PLMigrationGetLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 136446466;
      id v7 = "-[PLModelMigrator cleanupModelForDataMigrationForRestoreType:]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_ERROR, "%{public}ss Failed to reset internal resource fileID: %@", buf, 0x16u);
    }
  }
}

- (void)handleGreenChanges:(id)a3
{
  id v4 = a3;
  id v5 = -[PLModelMigrator newShortLivedLibraryWithName:](self, "newShortLivedLibraryWithName:", "-[PLModelMigrator handleGreenChanges:]");
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __38__PLModelMigrator_handleGreenChanges___block_invoke;
  v8[3] = &unk_1E5875E18;
  id v9 = v5;
  id v10 = v4;
  id v6 = v4;
  id v7 = v5;
  [v7 performTransactionAndWait:v8];
}

void __38__PLModelMigrator_handleGreenChanges___block_invoke(uint64_t a1)
{
  void v28[2] = *MEMORY[0x1E4F143B8];
  BOOL v2 = [*(id *)(a1 + 32) globalValues];
  id v3 = [v2 greenValues];

  if (([*(id *)(a1 + 40) greenValuesSimilarToGreenValues:v3] & 1) == 0)
  {
    id v4 = PLMigrationGetLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_DEFAULT, "Green values are different from the backup one, invalidating the reverse geocoding data", buf, 2u);
    }

    id v5 = [*(id *)(a1 + 32) managedObjectContext];
    id v6 = [MEMORY[0x1E4F28C68] expressionForConstantValue:0];
    id v7 = (void *)MEMORY[0x1E4F1C038];
    __int16 v8 = +[PLAdditionalAssetAttributes entityName];
    id v9 = [v7 batchUpdateRequestWithEntityName:v8];

    v27[0] = @"reverseLocationDataIsValid";
    v27[1] = @"reverseLocationData";
    v28[0] = MEMORY[0x1E4F1CC28];
    v28[1] = v6;
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:2];
    [v9 setPropertiesToUpdate:v10];

    [v9 setResultType:2];
    id v20 = 0;
    id v11 = [v5 executeRequest:v9 error:&v20];
    id v12 = v20;
    id v13 = PLMigrationGetLog();
    __int16 v14 = v13;
    if (v11)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [v11 result];
        *(_DWORD *)CGRect buf = 138412290;
        id v22 = v15;
        __int16 v16 = "Invalidated reverse geocoding data due to green changes for %@ assets";
        int v17 = v14;
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
        uint32_t v19 = 12;
LABEL_9:
        _os_log_impl(&dword_19B3C7000, v17, v18, v16, buf, v19);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v15 = [v12 userInfo];
      *(_DWORD *)CGRect buf = 136315650;
      id v22 = "-[PLModelMigrator handleGreenChanges:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v12;
      __int16 v25 = 2112;
      __int16 v26 = v15;
      __int16 v16 = "%s: failed to update: %@ %@";
      int v17 = v14;
      os_log_type_t v18 = OS_LOG_TYPE_ERROR;
      uint32_t v19 = 32;
      goto LABEL_9;
    }
  }
}

- (void)_migratePersonContactInfo
{
  id v2 = -[PLModelMigrator newShortLivedLibraryWithName:](self, "newShortLivedLibraryWithName:", "-[PLModelMigrator _migratePersonContactInfo]");
  +[PLPersonContactInfoMigrator migratePersonContactInfoInPhotoLibrary:v2];
}

- (void)_loadFacesFileSystemDataIntoDatabase
{
  id v3 = [MEMORY[0x1E4F8BA48] transaction:"-[PLModelMigrator _loadFacesFileSystemDataIntoDatabase]"];
  id v4 = -[PLModelMigrator newShortLivedLibraryWithName:](self, "newShortLivedLibraryWithName:", "-[PLModelMigrator _loadFacesFileSystemDataIntoDatabase]");
  [(PLModelMigrator *)self setLoadingFacesFromFileSystem:1];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _DWORD v9[2] = __55__PLModelMigrator__loadFacesFileSystemDataIntoDatabase__block_invoke;
  v9[3] = &unk_1E5875CE0;
  id v10 = v4;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __55__PLModelMigrator__loadFacesFileSystemDataIntoDatabase__block_invoke_278;
  v7[3] = &unk_1E5875E18;
  void v7[4] = self;
  id v8 = v3;
  id v5 = v3;
  id v6 = v4;
  [v6 performTransaction:v9 completionHandler:v7];
}

uint64_t __55__PLModelMigrator__loadFacesFileSystemDataIntoDatabase__block_invoke(uint64_t a1)
{
  id v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_DEFAULT, "Starting import of file system faces", v4, 2u);
  }

  return [*(id *)(a1 + 32) recreatePersonsFromMetadata];
}

uint64_t __55__PLModelMigrator__loadFacesFileSystemDataIntoDatabase__block_invoke_278(uint64_t a1)
{
  id v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_DEFAULT, "Finished import of file system faces", v4, 2u);
  }

  [*(id *)(a1 + 32) setLoadingFacesFromFileSystem:0];
  return [*(id *)(a1 + 40) stillAlive];
}

- (void)setLoadingFacesFromFileSystem:(BOOL)a3
{
  pthread_mutex_lock(&sLoadingFacesFromFileSystemLock);
  sLoadingFacesFromFileSysteuint64_t m = a3;
  pthread_mutex_unlock(&sLoadingFacesFromFileSystemLock);
}

- (BOOL)isLoadingFacesFromFileSystem
{
  pthread_mutex_lock(&sLoadingFacesFromFileSystemLock);
  char v2 = sLoadingFacesFromFileSystem;
  pthread_mutex_unlock(&sLoadingFacesFromFileSystemLock);
  return v2;
}

- (void)_loadFileSystemDataIntoDatabaseIfNeededWithReason:(id)a3 progress:(id)a4 requestBackgroundMigrationRegistration:(BOOL *)a5
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v8 = (__CFString *)a3;
  id v9 = a4;
  id v10 = -[PLModelMigrator newShortLivedLibraryForRebuildWithName:](self, "newShortLivedLibraryForRebuildWithName:", "-[PLModelMigrator _loadFileSystemDataIntoDatabaseIfNeededWithReason:progress:requestBackgroundMigrationRegistration:]");
  id v11 = [v10 globalValues];
  id v12 = [(PLModelMigrator *)self pathManager];
  if (![v12 isDeviceRestoreSupported]) {
    goto LABEL_7;
  }
  id v13 = [(PLModelMigrator *)self deviceRestoreMigrationSupport];
  if (([v13 isRestoreFromBackupSourceCloud] & 1) == 0)
  {

LABEL_7:
    goto LABEL_8;
  }
  __int16 v14 = [(PLModelMigrator *)self postProcessingToken];
  if (([v14 isModelMigrationRestorePostProcessingComplete] & 1) == 0)
  {

LABEL_21:
    uint64_t v30 = PLMigrationGetLog();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v31 = [(PLModelMigrator *)self postProcessingToken];
      int v32 = [v31 needsToPrepareForBackgroundRestore];
      uint64_t v33 = @"NO";
      if (v32) {
        uint64_t v33 = @"YES";
      }
      *(_DWORD *)CGRect buf = 138543618;
      uint64_t v43 = v8;
      __int16 v44 = 2114;
      id v45 = v33;
      _os_log_impl(&dword_19B3C7000, v30, OS_LOG_TYPE_DEFAULT, "Ignoring request to load file system data during OTA restore [%{public}@] needs to prepare for background restore is %{public}@", buf, 0x16u);
    }
    objc_msgSend(v9, "setCompletedUnitCount:", objc_msgSend(v9, "totalUnitCount"));
    goto LABEL_26;
  }
  [(PLModelMigrator *)self deviceRestoreMigrationSupport];
  id v15 = a5;
  id v16 = v9;
  os_log_type_t v18 = v17 = v8;
  int v34 = [v18 isOTARestoreInProgress];

  id v8 = v17;
  id v9 = v16;
  a5 = v15;

  if (v34) {
    goto LABEL_21;
  }
LABEL_8:
  uint32_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.mobileslideshow"];
  int v20 = [v19 BOOLForKey:@"com.apple.Photos.SuppressFileSystemImport"];

  if (v20)
  {
    uint64_t v21 = PLMigrationGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CGRect buf = 138412290;
      uint64_t v43 = @"com.apple.Photos.SuppressFileSystemImport";
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_DEFAULT, "Ignoring request to load file system data - %@ user default is enabled", buf, 0xCu);
    }

    if (([v11 didImportFileSystemAssets] & 1) == 0) {
      [v11 setImportFilesystemAssetsState:1];
    }
    id v22 = [(PLModelMigrator *)self pathManager];
    BOOL v23 = +[PLRebuildJournalManager isEnabledWithPathManager:v22 error:0];

    if (v23)
    {
      id v24 = PLMigrationGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        uint64_t v43 = @"com.apple.Photos.SuppressFileSystemImport";
        _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_ERROR, "Unsupported configuration! Journals and %@ user default are both enabled", buf, 0xCu);
      }
    }
  }
  else
  {
    __int16 v25 = [(PLModelMigrator *)self pathManager];
    __int16 v26 = 0;
    if (+[PLRebuildJournalManager isEnabledWithPathManager:v25 error:0])
    {
      __int16 v27 = [v10 libraryServicesManager];
      __int16 v26 = [v27 rebuildJournalManager];
    }
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __117__PLModelMigrator__loadFileSystemDataIntoDatabaseIfNeededWithReason_progress_requestBackgroundMigrationRegistration___block_invoke;
    v35[3] = &unk_1E5866440;
    v35[4] = self;
    id v36 = v10;
    id v37 = v11;
    uint64_t v38 = v8;
    id v39 = v26;
    id v28 = v9;
    id v40 = v28;
    uint64_t v41 = a5;
    id v29 = v26;
    [v36 performTransactionAndWait:v35];
    objc_msgSend(v28, "setCompletedUnitCount:", objc_msgSend(v28, "totalUnitCount"));
  }
LABEL_26:
}

void __117__PLModelMigrator__loadFileSystemDataIntoDatabaseIfNeededWithReason_progress_requestBackgroundMigrationRegistration___block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 32) _isFileSystemImportRequiredForLibrary:*(void *)(a1 + 40)])
  {
    uint64_t v2 = [*(id *)(a1 + 48) isRebuildComplete];
    id v3 = PLMigrationGetLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 56);
      int v28 = 138412546;
      uint64_t v29 = v4;
      __int16 v30 = 1024;
      int v31 = v2;
      _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_DEFAULT, "Starting import of file system assets [%@], rebuild complete: %d", (uint8_t *)&v28, 0x12u);
    }

    if ((v2 & 1) == 0) {
      [*(id *)(a1 + 64) notifyWillRebuild];
    }
    id v5 = [*(id *)(a1 + 32) pathManager];
    +[PLModelMigrationAction_CreateManualIndexes createManualIndexesDropBeforeCreate:1 pathManager:v5];

    id v6 = [*(id *)(a1 + 40) libraryServicesManager];
    id v7 = [v6 readyForAnalysis];
    [v7 resetReadyForAnalysisState];

    id v8 = objc_msgSend(MEMORY[0x1E4F28F90], "progressWithTotalUnitCount:parent:pendingUnitCount:", 100, *(void *)(a1 + 72), objc_msgSend(*(id *)(a1 + 72), "totalUnitCount") - 1);
    id v9 = [[PLModelMigratorRebuildProgressFraction alloc] initWithLegacyRecoveryEnabled:0];
    id v10 = [*(id *)(a1 + 32) analyticsEventManager];
    id v11 = [*(id *)(a1 + 32) pathManager];
    if (+[PLRebuildJournalManager isEnabledWithPathManager:error:](PLRebuildJournalManager, "isEnabledWithPathManager:error:", v11, 0)&& [*(id *)(a1 + 48) isJournalRebuildRequired])
    {
      char v12 = [*(id *)(a1 + 72) isCancelled];

      if ((v12 & 1) == 0)
      {
        [(PLModelMigratorRebuildProgressFraction *)v9 setRebuildEnabled:1];
        [v10 startRecordingTimedEventToken];
        double v14 = v13;
        [*(id *)(a1 + 32) _rebuildAssetsFromJournal:*(void *)(a1 + 64) inLibrary:*(void *)(a1 + 40) progress:v8 progressFraction:v9];
        [v10 stopRecordingTimedEventWithToken:*MEMORY[0x1E4F8BDA8] forKey:*MEMORY[0x1E4F8BD88] onEventWithName:v14];
        if (([*(id *)(a1 + 72) isCancelled] & 1) == 0) {
          [*(id *)(a1 + 48) setJournalRebuildRequired:0];
        }
        BOOL v15 = +[PLBackgroundModelMigration isBackgroundMigrationRegistrationAfterRebuildRequiredWithLibrary:*(void *)(a1 + 40)];
        id v16 = *(BOOL **)(a1 + 80);
        if (v16) {
          BOOL *v16 = v15;
        }
      }
    }
    else
    {
    }
    if ([*(id *)(a1 + 72) isCancelled])
    {
      uint64_t v18 = *MEMORY[0x1E4F8BD88];
    }
    else
    {
      [v10 startRecordingTimedEventToken];
      double v20 = v19;
      [*(id *)(a1 + 32) _importAllDCIMAssetsInLibrary:*(void *)(a1 + 40) progress:v8 progressFraction:v9 rebuildComplete:v2];
      uint64_t v18 = *MEMORY[0x1E4F8BD88];
      [v10 stopRecordingTimedEventWithToken:*MEMORY[0x1E4F8BD90] forKey:*MEMORY[0x1E4F8BD88] onEventWithName:v20];
      if (([*(id *)(a1 + 72) isCancelled] & 1) == 0)
      {
        if ((v2 & 1) == 0)
        {
          [*(id *)(a1 + 48) setRebuildComplete];
          [*(id *)(a1 + 64) notifyRebuildComplete];
        }
        [*(id *)(a1 + 48) setImportFilesystemAssetsState:1];
      }
    }
    uint64_t v21 = *MEMORY[0x1E4F8BDC0];
    id v22 = [v10 valueForKey:*MEMORY[0x1E4F8BDC0] onEventWithName:v18];

    if (!v22) {
      [v10 setPayloadValue:*(void *)(a1 + 56) forKey:v21 onEventWithName:v18];
    }
    BOOL v23 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "_assetCountForLibrary:", *(void *)(a1 + 40)));
    [v10 setPayloadValue:v23 forKey:*MEMORY[0x1E4F8BDC8] onEventWithName:v18];

    id v24 = [v10 valueForKey:*MEMORY[0x1E4F8BD98] onEventWithName:v18];
    char v25 = [v24 BOOLValue];

    __int16 v26 = [v10 valueForKey:*MEMORY[0x1E4F8BDA0] onEventWithName:v18];
    uint64_t v27 = [v26 unsignedIntegerValue];

    if (![(PLModelMigratorRebuildProgressFraction *)v9 isRebuildEnabled] && (v25 & 1) == 0 && !v27) {
      [v10 removeEventWithName:v18];
    }
  }
  else
  {
    id v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 56);
      int v28 = 138412290;
      uint64_t v29 = v17;
      _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "File system import already done, ignoring request [%@]", (uint8_t *)&v28, 0xCu);
    }
  }
}

- (BOOL)_isFileSystemImportRequiredForLibrary:(id)a3
{
  uint64_t v4 = [a3 globalValues];
  uint64_t v5 = [v4 importFilesystemAssetsState];
  BOOL v6 = v5 != 1;
  if (v5 == -1
    && [v4 isRebuildComplete]
    && [(PLModelMigrator *)self _isFilesystemImportConfigurationDisabled])
  {
    [v4 setImportFilesystemAssetsState:1];
    BOOL v6 = 0;
  }

  return v6;
}

- (BOOL)_isFilesystemImportConfigurationDisabled
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = objc_alloc(MEMORY[0x1E4F1CB10]);
  uint64_t v4 = [(PLModelMigrator *)self pathManager];
  uint64_t v5 = [v4 cplDataDirectoryCreateIfNeeded:0];
  BOOL v6 = (void *)[v3 initFileURLWithPath:v5 isDirectory:1];

  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F59850]) initWithClientLibraryBaseURL:v6];
  id v8 = [v7 valueForKey:@"feature.version.filesystemimport"];
  id v9 = v8;
  if (v8)
  {
    uint64_t v10 = [v8 integerValue];
    id v11 = PLMigrationGetLog();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    BOOL v13 = v10 <= 0;
    BOOL v14 = v10 > 0;
    if (v13)
    {
      if (v12)
      {
        int v17 = 138543618;
        uint64_t v18 = v9;
        __int16 v19 = 2048;
        uint64_t v20 = 0;
        BOOL v15 = "ModelMigrator: Asset recovery filesystem import allowed via configuration version: %{public}@, build version: %ld";
        goto LABEL_8;
      }
    }
    else if (v12)
    {
      int v17 = 138543618;
      uint64_t v18 = v9;
      __int16 v19 = 2048;
      uint64_t v20 = 0;
      BOOL v15 = "ModelMigrator: Asset recovery filesystem import prevented via configuration version: %{public}@, build version: %ld";
LABEL_8:
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v17, 0x16u);
    }

    goto LABEL_10;
  }
  BOOL v14 = 0;
LABEL_10:

  return v14;
}

- (id)_eventNameFromDate:(id)a3
{
  id v3 = (objc_class *)MEMORY[0x1E4F28C10];
  id v4 = a3;
  id v5 = objc_alloc_init(v3);
  [v5 setDateStyle:2];
  BOOL v6 = [v5 stringFromDate:v4];

  return v6;
}

- (void)_generateAlbumMetadataFromLastiTunesSyncedPlist
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  id v3 = [(PLModelMigrator *)self pathManager];
  if ([v3 isDCIM])
  {
    id v4 = (void *)MEMORY[0x19F38D3B0]();
    id v52 = self;
    id v5 = [(PLModelMigrator *)self _iTunesPhotosLastSyncMetadata];
    BOOL v6 = [v5 objectForKey:@"updates"];
    unsigned __int8 v67 = 0;
    id v7 = [v3 iTunesSyncedAssetsDirectory];
    if ([v6 count])
    {
      id v8 = [MEMORY[0x1E4F28CB8] defaultManager];
      if (![v8 fileExistsAtPath:v7 isDirectory:&v67]) {
        goto LABEL_43;
      }
      int v9 = v67;

      if (v9)
      {
        id v47 = v7;
        id v49 = v5;
        id v50 = v4;
        id v8 = [v3 iTunesSyncedFaceDataDirectory];
        uint64_t v10 = (void *)MEMORY[0x1E4F1CB10];
        char v51 = v3;
        id v11 = [v3 persistedAlbumDataDirectoryCreateIfNeeded:1 error:0];
        id v58 = [v10 fileURLWithPath:v11 isDirectory:1];

        BOOL v12 = [MEMORY[0x1E4F28CB8] defaultManager];
        char v59 = [v12 fileExistsAtPath:v8];

        long long v53 = [MEMORY[0x1E4F1CA48] array];
        uint64_t v13 = [MEMORY[0x1E4F1CA48] array];
        long long v54 = [MEMORY[0x1E4F1CA48] array];
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        id v48 = v6;
        id v14 = v6;
        BOOL v15 = (void *)v13;
        obuint64_t j = v14;
        uint64_t v16 = [v14 countByEnumeratingWithState:&v63 objects:v72 count:16];
        id v57 = (void *)v13;
        if (!v16) {
          goto LABEL_36;
        }
        uint64_t v17 = v16;
        char v55 = 0;
        uint64_t v61 = *(void *)v64;
        long long v56 = v8;
        while (1)
        {
          uint64_t v18 = 0;
          do
          {
            if (*(void *)v64 != v61) {
              objc_enumerationMutation(obj);
            }
            __int16 v19 = *(void **)(*((void *)&v63 + 1) + 8 * v18);
            uint64_t v20 = [v19 objectForKey:@"itemType"];
            if ([v20 isEqual:@"Asset"])
            {
              uint64_t v21 = [v19 objectForKey:@"faces"];
              id v22 = v21;
              if ((v59 & 1) == 0 && [v21 count])
              {
                if ((v55 & 1) == 0)
                {
                  id v62 = 0;
                  char v23 = [MEMORY[0x1E4F8B908] createDirectoryAtPath:v8 error:&v62];
                  id v24 = v62;
                  if ((v23 & 1) == 0)
                  {
                    char v25 = PLMigrationGetLog();
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)CGRect buf = 138412546;
                      long long v69 = v8;
                      __int16 v70 = 2112;
                      id v71 = v24;
                      _os_log_impl(&dword_19B3C7000, v25, OS_LOG_TYPE_ERROR, "Unable to create directory: %@, reason: %@", buf, 0x16u);
                    }
                  }
                }
                __int16 v26 = [v19 objectForKey:@"uuid"];
                uint64_t v27 = [v8 stringByAppendingPathComponent:v26];
                int v28 = [v27 stringByAppendingPathExtension:@"plist"];

                uint64_t v29 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v22 format:100 options:0 error:0];
                [v29 writeToFile:v28 options:1073741825 error:0];

                char v55 = 1;
              }
              goto LABEL_29;
            }
            if (([v20 isEqual:@"Album"] & 1) == 0
              && ![v20 isEqual:@"Event"])
            {
              id v22 = PLMigrationGetLog();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CGRect buf = 138412290;
                long long v69 = v19;
                _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "*** Found unknown element: %@", buf, 0xCu);
              }
              goto LABEL_29;
            }
            if ([v20 isEqual:@"Album"])
            {
              __int16 v30 = [v19 objectForKey:@"subclass"];
              int v31 = [v30 unsignedIntValue];

              if (v31 == 3)
              {
                uint64_t v32 = [v19 objectForKey:@"uuid"];
                [v54 addObject:v32];
                uint64_t v33 = 15;
                goto LABEL_28;
              }
              if (v31 != 4)
              {
                if (v31 == 5) {
                  goto LABEL_30;
                }
                uint64_t v32 = [v19 objectForKey:@"uuid"];
                [v53 addObject:v32];
                uint64_t v33 = 1550;
                goto LABEL_28;
              }
            }
            uint64_t v32 = [v19 objectForKey:@"uuid"];
            [v15 addObject:v32];
            uint64_t v33 = 1551;
LABEL_28:

            int v34 = [PLPersistedAlbumMetadata alloc];
            uint64_t v35 = [v19 objectForKey:@"albumName"];
            id v36 = [v19 objectForKey:@"uuid"];
            id v37 = [v19 objectForKey:@"cloudGUID"];
            uint64_t v38 = [NSNumber numberWithInt:v33];
            id v39 = [v19 objectForKey:@"assetUUIDs"];
            id v22 = [(PLPersistedAlbumMetadata *)v34 initWithTitle:v35 uuid:v36 cloudGUID:v37 kind:v38 assetUUIDs:v39 persistedAlbumDataDirectory:v58];

            [v22 setAllowsOverwrite:0];
            [v22 persistAlbumData];
            id v8 = v56;
            BOOL v15 = v57;
LABEL_29:

LABEL_30:
            ++v18;
          }
          while (v17 != v18);
          uint64_t v40 = [obj countByEnumeratingWithState:&v63 objects:v72 count:16];
          uint64_t v17 = v40;
          if (!v40)
          {
LABEL_36:

            if ([v53 count])
            {
              uint64_t v41 = [(PLModelMigrator *)v52 pathManager];
              +[PLManagedAlbumList persistAlbumListUUIDs:v53 type:0 pathManager:v41 allowsOverwrite:0];
            }
            uint64_t v42 = [v15 count];
            id v5 = v49;
            id v4 = v50;
            uint64_t v43 = v15;
            id v7 = v47;
            BOOL v6 = v48;
            if (v42)
            {
              __int16 v44 = [(PLModelMigrator *)v52 pathManager];
              +[PLManagedAlbumList persistAlbumListUUIDs:v43 type:1 pathManager:v44 allowsOverwrite:0];
            }
            id v45 = v54;
            if ([v54 count])
            {
              uint64_t v46 = [(PLModelMigrator *)v52 pathManager];
              +[PLManagedAlbumList persistAlbumListUUIDs:v54 type:2 pathManager:v46 allowsOverwrite:0];

              id v45 = v54;
            }

            id v3 = v51;
LABEL_43:

            break;
          }
        }
      }
    }
  }
}

- (id)_iTunesPhotosLastSyncMetadata
{
  id v3 = [(PLModelMigrator *)self pathManager];
  int v4 = [v3 isDCIM];

  if (v4)
  {
    id v5 = (void *)MEMORY[0x1E4F1C9E8];
    BOOL v6 = [(PLModelMigrator *)self pathManager];
    id v7 = [v6 iTunesPhotosLastSyncMetadataFilePath];
    id v8 = [v5 dictionaryWithContentsOfFile:v7];

    if (![v8 count])
    {
      int v9 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v10 = [(PLModelMigrator *)self pathManager];
      id v11 = [v10 iTunesPhotosSyncMetadataFilePath];
      uint64_t v12 = [v9 dictionaryWithContentsOfFile:v11];

      id v8 = (void *)v12;
    }
  }
  else
  {
    id v8 = 0;
  }
  return v8;
}

- (id)generatePathToAssetUUIDRecoveryMapping
{
  if ((PLIsAssetsd() & 1) == 0)
  {
    int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = NSStringFromSelector(a2);
    [v9 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 1571, @"%@ only valid in assetsd!", v10 object file lineNumber description];
  }
  int v4 = PLMigrationGetLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CGRect buf = 0;
    _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_DEBUG, "Creating path to uuid mappings for UUID recovery", buf, 2u);
  }

  id v5 = [(PLModelMigrator *)self pathManager];
  BOOL v6 = [v5 photosDatabasePath];

  id v7 = [(id)objc_opt_class() extractPathToAssetUUIDRecoveryMappingFromDatabasePath:v6];

  return v7;
}

- (void)archiveAssetUUIDForPathPlist:(id)a3
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  BOOL v6 = PLMigrationGetLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CGRect buf = 0;
    _os_log_impl(&dword_19B3C7000, v6, OS_LOG_TYPE_DEFAULT, "Archiving asset path to uuid mappings", buf, 2u);
  }

  id v7 = self;
  objc_sync_enter(v7);
  id v8 = (void *)archivedAssetUUIDForPathDictionary;
  archivedAssetUUIDForPathDictionary = 0;

  int v9 = [(PLModelMigrator *)v7 pathManager];
  id v31 = 0;
  id v32 = 0;
  uint64_t v10 = [v9 photosDatabasePath];
  +[PLManagedObjectContext getPersistentStoreURL:&v32 options:&v31 forDatabasePath:v10];
  uint64_t v27 = v9;
  id v28 = v32;
  id v11 = v31;

  uint64_t v12 = *MEMORY[0x1E4F1BF70];
  id v30 = 0;
  uint64_t v13 = [MEMORY[0x1E4F1C188] metadataForPersistentStoreOfType:v12 URL:v28 options:v11 error:&v30];
  id v14 = v30;
  BOOL v15 = v14;
  uint64_t v16 = 0;
  if (v13 && !v14)
  {
    uint64_t v16 = [v13 valueForKey:*MEMORY[0x1E4F1BF90]];
  }
  uint64_t v17 = [v5 count];
  if (v16) {
    [v5 setObject:v16 forKey:@"storeUUID"];
  }
  if (v5)
  {
    uint64_t v25 = v17;
    uint64_t v18 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v5 format:100 options:0 error:0];
    __int16 v19 = [(PLModelMigrator *)v7 pathManager];
    __int16 v26 = [v19 assetUUIDRecoveryMappingPath];

    if (v18)
    {
      id v29 = 0;
      int v20 = [v18 writeToFile:v26 options:1073741825 error:&v29];
      id v21 = v29;
      if (v20)
      {
        id v22 = PLMigrationGetLog();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          char v23 = NSStringFromSelector(a2);
          *(_DWORD *)CGRect buf = 138543874;
          int v34 = v23;
          __int16 v35 = 2048;
          uint64_t v36 = v25;
          __int16 v37 = 2114;
          uint64_t v38 = v16;
          _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@ -- saved %ld asset mappings for store %{public}@", buf, 0x20u);
        }
LABEL_16:

        goto LABEL_17;
      }
    }
    else
    {
      id v21 = 0;
    }
    id v22 = PLMigrationGetLog();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v24 = NSStringFromSelector(a2);
      *(_DWORD *)CGRect buf = 138544130;
      int v34 = v24;
      __int16 v35 = 2048;
      uint64_t v36 = v25;
      __int16 v37 = 2114;
      uint64_t v38 = v16;
      __int16 v39 = 2114;
      id v40 = v21;
      _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "%{public}@ -- failed to save %ld asset mappings for store %{public}@: %{public}@", buf, 0x2Au);
    }
    goto LABEL_16;
  }
LABEL_17:

  objc_sync_exit(v7);
}

- (id)archivedAssetUUIDForURL:(id)a3
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 path];
  BOOL v6 = [(PLModelMigrator *)self pathManager];
  id v7 = [v6 photoDirectoryWithType:1];
  if ([v5 hasPrefix:@"/private"])
  {
    uint64_t v8 = [v5 substringFromIndex:objc_msgSend(@"/private", "length")];

    id v5 = (void *)v8;
  }
  if ([v5 hasPrefix:v7])
  {
    uint64_t v9 = objc_msgSend(v5, "substringFromIndex:", objc_msgSend(v7, "length") + (objc_msgSend(v7, "hasSuffix:", @"/") ^ 1));

    id v5 = (void *)v9;
  }
  uint64_t v10 = self;
  objc_sync_enter(v10);
  id v11 = (void *)archivedAssetUUIDForPathDictionary;
  if (!archivedAssetUUIDForPathDictionary)
  {
    int v34 = [v6 assetUUIDRecoveryMappingPath];
    uint64_t v12 = [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithContentsOfFile:v34];
    uint64_t v13 = (void *)archivedAssetUUIDForPathDictionary;
    archivedAssetUUIDForPathDictionary = v12;

    id v37 = 0;
    id v38 = 0;
    id v14 = [v6 photosDatabasePath];
    +[PLManagedObjectContext getPersistentStoreURL:&v38 options:&v37 forDatabasePath:v14];
    id v32 = v38;
    id v33 = v37;

    uint64_t v15 = *MEMORY[0x1E4F1BF70];
    id v36 = 0;
    uint64_t v16 = [MEMORY[0x1E4F1C188] metadataForPersistentStoreOfType:v15 URL:v32 options:v33 error:&v36];
    id v17 = v36;
    uint64_t v18 = 0;
    id v31 = v17;
    if (v16 && !v17)
    {
      uint64_t v18 = objc_msgSend(v16, "valueForKey:", *MEMORY[0x1E4F1BF90], 0);
    }
    __int16 v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromSelector(a2);
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      id v21 = [(id)archivedAssetUUIDForPathDictionary objectForKey:@"storeUUID"];
      *(_DWORD *)CGRect buf = 138412802;
      id v40 = v20;
      __int16 v41 = 2112;
      uint64_t v42 = v18;
      __int16 v43 = 2112;
      __int16 v44 = v21;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_DEFAULT, "%@ -- store %@ vs. plist %@", buf, 0x20u);
    }
    id v22 = [(id)archivedAssetUUIDForPathDictionary objectForKey:@"storeUUID"];
    char v23 = [v18 isEqualToString:v22];

    if ((v23 & 1) == 0)
    {
      uint64_t v24 = objc_opt_new();
      uint64_t v25 = (void *)archivedAssetUUIDForPathDictionary;
      archivedAssetUUIDForPathDictionary = v24;
    }
    id v11 = (void *)archivedAssetUUIDForPathDictionary;
  }
  __int16 v26 = objc_msgSend(v11, "objectForKey:", v5, v31);
  objc_sync_exit(v10);

  uint64_t v27 = PLMigrationGetLog();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    id v28 = NSStringFromSelector(a2);
    id v29 = [v4 path];
    *(_DWORD *)CGRect buf = 138413058;
    id v40 = v28;
    __int16 v41 = 2112;
    uint64_t v42 = v29;
    __int16 v43 = 2112;
    __int16 v44 = v5;
    __int16 v45 = 2112;
    uint64_t v46 = v26;
    _os_log_impl(&dword_19B3C7000, v27, OS_LOG_TYPE_DEBUG, "%@ %@[%@] -> %@", buf, 0x2Au);
  }
  return v26;
}

- (BOOL)isPhotoLibraryDatabaseReadyForOpen:(id *)a3
{
  if ((PLIsAssetsd() & 1) == 0)
  {
    uint64_t v16 = [MEMORY[0x1E4F28B00] currentHandler];
    [v16 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:1466 description:@"Only Assetsd should be checking if isPhotoLibraryDatabaseReadyForOpen!"];
  }
  BOOL v6 = [MEMORY[0x1E4F8B908] fileManager];
  id v7 = [(PLModelMigrator *)self pathManager];
  uint64_t v8 = [v7 photosDatabasePath];
  int v9 = [v6 fileExistsAtPath:v8];

  if (!v9) {
    return 0;
  }
  os_unfair_lock_lock(&self->_storeMetadataLock);
  uint64_t v10 = objc_opt_class();
  id v11 = [(PLModelMigrator *)self pathManager];
  uint64_t v12 = [v10 _readNumberWithKey:@"PLModelVersion" fromMetadataWithMOC:0 pathManager:v11 error:0];

  os_unfair_lock_unlock(&self->_storeMetadataLock);
  if (![(PLModelMigrator *)self checkForceRebuildIndicatorFile])
  {
    uint64_t v15 = [v12 integerValue];
    BOOL v13 = v15 == (int)[(id)objc_opt_class() currentModelVersion];
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v13 = 0;
  if (a3) {
LABEL_6:
  }
    *a3 = v12;
LABEL_7:

  return v13;
}

- (BOOL)updateCompletedMigrationStateWithError:(id *)a3
{
  p_storeMetadataLocuint64_t k = &self->_storeMetadataLock;
  os_unfair_lock_lock(&self->_storeMetadataLock);
  BOOL v6 = objc_opt_class();
  uint64_t v7 = *MEMORY[0x1E4F8C4C8];
  uint64_t v8 = [(PLModelMigrator *)self pathManager];
  LOBYTE(a3) = [v6 _writeNumber:&unk_1EEBEDE78 forKey:v7 pathManager:v8 error:a3];

  os_unfair_lock_unlock(p_storeMetadataLock);
  return (char)a3;
}

- (int64_t)legacyMigrationState
{
  p_storeMetadataLocuint64_t k = &self->_storeMetadataLock;
  os_unfair_lock_lock(&self->_storeMetadataLock);
  id v4 = objc_opt_class();
  uint64_t v5 = *MEMORY[0x1E4F8C4C8];
  BOOL v6 = [(PLModelMigrator *)self pathManager];
  id v20 = 0;
  uint64_t v7 = [v4 _readNumberWithKey:v5 fromMetadataWithMOC:0 pathManager:v6 error:&v20];
  id v8 = v20;
  int64_t v9 = [v7 integerValue];

  os_unfair_lock_unlock(p_storeMetadataLock);
  if (v9)
  {
    if (!v8) {
      goto LABEL_12;
    }
  }
  else
  {
    os_unfair_lock_lock(p_storeMetadataLock);
    uint64_t v10 = objc_opt_class();
    id v11 = [(PLModelMigrator *)self pathManager];
    id v19 = v8;
    uint64_t v12 = [v10 _readNumberWithKey:@"PLModelVersion" fromMetadataWithMOC:0 pathManager:v11 error:&v19];
    id v13 = v19;

    os_unfair_lock_unlock(p_storeMetadataLock);
    int64_t v9 = 4 * (v12 == 0);

    id v8 = v13;
    if (!v13) {
      goto LABEL_12;
    }
  }
  id v14 = [v8 userInfo];
  uint64_t v15 = [v14 objectForKeyedSubscript:*MEMORY[0x1E4F1BF50]];

  if (v15)
  {
    int v16 = [v15 intValue];
    if (v16 == 26 || v16 == 11) {
      int64_t v9 = 3;
    }
  }

LABEL_12:
  return v9;
}

- (void)importAfterCrash:(id)a3 dictionariesByPhotoStreamID:(id)a4 completionBlock:(id)a5
{
  id v11 = a3;
  id v8 = a4;
  id v9 = a5;
  uint64_t v10 = (void *)MEMORY[0x19F38D3B0]();
  [(PLModelMigrator *)self _importAfterCrash:v11 dictionariesByPhotoStreamID:v8 completionBlock:v9];
}

- (void)migratePersonContactInfo
{
  id v3 = (void *)MEMORY[0x19F38D3B0](self, a2);
  [(PLModelMigrator *)self _migratePersonContactInfo];
}

- (void)loadFacesFileSystemDataIntoDatabase
{
  id v3 = (void *)MEMORY[0x19F38D3B0](self, a2);
  [(PLModelMigrator *)self _loadFacesFileSystemDataIntoDatabase];
}

- (void)loadFileSystemDataIntoDatabaseIfNeededWithReason:(id)a3 completionHandler:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  if (!v7)
  {
    int v16 = [MEMORY[0x1E4F28B00] currentHandler];
    [v16 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 1325, @"Invalid parameter not satisfying: %@", @"reason != nil" object file lineNumber description];
  }
  id v9 = [MEMORY[0x1E4F28F90] progressWithTotalUnitCount:100];
  uint64_t v10 = [MEMORY[0x1E4F8BA48] transaction:"-[PLModelMigrator loadFileSystemDataIntoDatabaseIfNeededWithReason:completionHandler:]"];
  fileSystemLoadQueue = self->_fileSystemLoadQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __86__PLModelMigrator_loadFileSystemDataIntoDatabaseIfNeededWithReason_completionHandler___block_invoke;
  block[3] = &unk_1E5874818;
  id v18 = v7;
  id v19 = self;
  id v21 = v10;
  id v22 = v8;
  id v20 = v9;
  id v12 = v10;
  id v13 = v8;
  id v14 = v9;
  id v15 = v7;
  dispatch_async(fileSystemLoadQueue, block);
}

void __86__PLModelMigrator_loadFileSystemDataIntoDatabaseIfNeededWithReason_completionHandler___block_invoke(uint64_t a1)
{
  BOOL v2 = +[PLModelMigrator waitForDataMigratorToExit];
  id v3 = *(id *)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [*(id *)(a1 + 32) stringByAppendingString:@"(after waiting for data migrator to exit)"];

    id v3 = (id)v4;
  }
  unsigned __int8 v6 = 0;
  [*(id *)(a1 + 40) _loadFileSystemDataIntoDatabaseIfNeededWithReason:v3 progress:*(void *)(a1 + 48) requestBackgroundMigrationRegistration:&v6];
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, v6);
  }
  [*(id *)(a1 + 56) stillAlive];
}

- (void)loadFileSystemAssetsNotifyCompleted:(id)a3
{
  id v4 = a3;
  p_fileSystemLoadQueue = &self->_fileSystemLoadQueue;
  fileSystemLoadQueue = self->_fileSystemLoadQueue;
  unsigned __int8 v6 = p_fileSystemLoadQueue[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __55__PLModelMigrator_loadFileSystemAssetsNotifyCompleted___block_invoke;
  block[3] = &unk_1E5875198;
  id v10 = v4;
  id v8 = v4;
  dispatch_group_notify(v6, fileSystemLoadQueue, block);
}

uint64_t __55__PLModelMigrator_loadFileSystemAssetsNotifyCompleted___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)loadFileSystemAssetsNotifyLeave
{
}

- (void)loadFileSystemAssetsNotifyEnter
{
}

- (BOOL)_recordCurrentVersionMetadataInPersistentStore:(id)a3 migrationType:(int64_t)a4 forceRebuildReason:(id)a5 sourceModelVersion:(id)a6 updateLegacyMigrationState:(BOOL)a7 journalRebuildRequred:(BOOL)a8
{
  BOOL v48 = a7;
  v54[1] = *MEMORY[0x1E4F143B8];
  p_recordMigrationMetadataLocuint64_t k = &self->_recordMigrationMetadataLock;
  id v44 = a6;
  id v43 = a5;
  id v12 = a3;
  locuint64_t k = p_recordMigrationMetadataLock;
  os_unfair_lock_lock(p_recordMigrationMetadataLock);
  signed __int16 v13 = [(PLModelMigrator *)self _migrationHistoryOriginFromLatestDataMigration];
  uint64_t v47 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v12, "-[PLModelMigrator _recordCurrentVersionMetadataInPersistentStore:migrationType:forceRebuildReason:sourceModelVersion:updateLegacyMigrationState:journalRebuildRequred:]", 1);

  id v14 = [(PLModelMigrator *)self options];
  id v15 = [v14 objectForKeyedSubscript:@"PLPhotoLibraryCreateOptions"];

  uint64_t v42 = v15;
  if (v15)
  {
    int v16 = (void *)MEMORY[0x1E4F8B858];
    id v17 = [(PLModelMigrator *)self pathManager];
    id v18 = [v17 libraryURL];
    id v19 = [v16 appPrivateDataForLibraryURL:v18];

    long long v53 = @"PLPhotoLibraryCreateOptions";
    v54[0] = v15;
    id v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v54 forKeys:&v53 count:1];
    id v50 = 0;
    LODWORD(v18) = [v19 setValue:v20 forKey:@"PLModelMigrator.CreateOptions" error:&v50];
    id v21 = v50;

    id v22 = PLMigrationGetLog();
    char v23 = v22;
    if (v18)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)CGRect buf = 0;
        uint64_t v24 = "persisted library create options to appPrivateData";
        uint64_t v25 = v23;
        os_log_type_t v26 = OS_LOG_TYPE_INFO;
        uint32_t v27 = 2;
LABEL_8:
        _os_log_impl(&dword_19B3C7000, v25, v26, v24, buf, v27);
      }
    }
    else if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412290;
      id v52 = v21;
      uint64_t v24 = "failed to persist library create options to appPrivateData. Error: %@";
      uint64_t v25 = v23;
      os_log_type_t v26 = OS_LOG_TYPE_ERROR;
      uint32_t v27 = 12;
      goto LABEL_8;
    }

    uint64_t v28 = [v15 unsignedIntegerValue];
    goto LABEL_10;
  }
  uint64_t v28 = 0;
LABEL_10:
  id v29 = (void *)MGCopyAnswer();
  id v30 = (void *)MGCopyAnswer();
  id v31 = [(PLModelMigrator *)self pathManager];
  id v32 = CPLStatusFromPathManager(v31);

  id v33 = [(PLModelMigrator *)self pathManager];
  int v34 = [v33 libraryURL];
  char v35 = PLIsCloudPhotoLibraryEnabledForPhotoLibraryURL(v34);

  id v36 = [(PLModelMigrator *)self pathManager];
  id v37 = [v32 initialSyncDate];
  LOBYTE(v41) = v35;
  WORD1(v40) = v13;
  LOBYTE(v40) = a8;
  BOOL v38 = +[PLMigrationHistory recordCurrentMigrationStateInManagedObjectContext:withPathManager:migrationType:forceRebuildReason:sourceModelVersion:updateLegacyMigrationState:journalRebuildRequred:origin:libraryCreateOptions:hardwareModel:deviceUniqueID:cplEnabled:initialSyncDate:](PLMigrationHistory, "recordCurrentMigrationStateInManagedObjectContext:withPathManager:migrationType:forceRebuildReason:sourceModelVersion:updateLegacyMigrationState:journalRebuildRequred:origin:libraryCreateOptions:hardwareModel:deviceUniqueID:cplEnabled:initialSyncDate:", v47, v36, a4, v43, v44, v48, v40, v28, v29, v30, v41, v37);

  [(PLModelMigrator *)self setDidRecordCurrentMigrationMetadata:v38];
  os_unfair_lock_unlock(lock);

  return v38;
}

- (void)_recordCurrentVersionMetadataIfNeededForDataMigrationInPersistentStore:(id)a3
{
  id v5 = a3;
  os_unfair_lock_lock(&self->_recordMigrationMetadataLock);
  BOOL v4 = [(PLModelMigrator *)self didRecordCurrentMigrationMetadata];
  os_unfair_lock_unlock(&self->_recordMigrationMetadataLock);
  if (!v4) {
    [(PLModelMigrator *)self _recordCurrentVersionMetadataInPersistentStore:v5 migrationType:0 forceRebuildReason:0 sourceModelVersion:0 updateLegacyMigrationState:0 journalRebuildRequred:0];
  }
}

- (signed)_migrationHistoryOriginFromLatestDataMigration
{
  id v3 = [(PLModelMigrator *)self deviceRestoreMigrationSupport];
  BOOL v4 = [(PLModelMigrator *)self pathManager];
  if (![v4 isDeviceRestoreSupported])
  {

LABEL_14:
    if ([v3 isEraseWithoutRestore]) {
      signed __int16 v6 = 9;
    }
    else {
      signed __int16 v6 = 8;
    }
    goto LABEL_17;
  }
  int v5 = [v3 isRestoreFromBackup];

  if (!v5) {
    goto LABEL_14;
  }
  if ([v3 isRestoreFromBackupSourceCloud]) {
    signed __int16 v6 = 2;
  }
  else {
    signed __int16 v6 = 0;
  }
  if ([v3 isRestoreFromBackupSourceMegaBackup]) {
    signed __int16 v6 = 7;
  }
  if ([v3 isRestoreFromBackupSourceiTunes]) {
    signed __int16 v6 = 1;
  }
  if ([v3 isRestoreFromBackupSourceDeviceToDevice]) {
    signed __int16 v6 = 3;
  }
LABEL_17:

  return v6;
}

- (int64_t)createNewDatabaseWithMigrationType:(int64_t)a3 forceRebuildReason:(id)a4 coordinator:(id)a5 error:(id *)a6
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  id v11 = a4;
  id v12 = a5;
  if ((PLIsAssetsd() & 1) == 0)
  {
    long long v121 = [MEMORY[0x1E4F28B00] currentHandler];
    id v122 = NSStringFromSelector(a2);
    [v121 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 967, @"%@ can only be called from assetsd", v122 object file lineNumber description];
  }
  if ((a3 | 2) != 3)
  {
    signed __int16 v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 968, @"Invalid parameter not satisfying: %@", @"requestedType == PLMigrationTypeCreated || requestedType == PLMigrationTypeRebuild" object file lineNumber description];
  }
  id v14 = [(PLModelMigrator *)self pathManager];
  int v15 = [v14 isSystemPhotoLibraryPathManager];
  if (a3 == 4)
  {
    int v16 = 0;
    goto LABEL_20;
  }
  SEL v128 = a2;
  int v131 = v15;
  BOOL v130 = a6;
  int v16 = 0;
  if (+[PLRebuildJournalManager isEnabledWithPathManager:v14 error:0])
  {
    id v151 = 0;
    BOOL v17 = +[PLRebuildJournalManager existingJournalsCompatibleForRebuild:v14 error:&v151];
    int v16 = v151;
    if (!v17)
    {
      uint64_t v25 = PLMigrationGetLog();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        uint64_t v153 = v16;
        _os_log_impl(&dword_19B3C7000, v25, OS_LOG_TYPE_ERROR, "Existing journals are incompatible for rebuild \"%@\"", buf, 0xCu);
      }

      int v15 = v131;
LABEL_20:
      char v150 = 0;
      int64_t v24 = 4;
      os_log_type_t v26 = v16;
      if (v16) {
        goto LABEL_21;
      }
LABEL_137:
      if (a3 == 3 && v24 == 3) {
        int v114 = v15;
      }
      else {
        int v114 = 0;
      }
      if (v114 == 1)
      {
        id v115 = v12;
        long long v116 = (void *)MEMORY[0x1E4F8B980];
        id v117 = [v14 libraryURL];
        id v132 = 0;
        LOBYTE(v116) = [v116 setSystemLibraryURL:v117 options:0 error:&v132];
        long long v118 = v132;

        if ((v116 & 1) == 0)
        {
          long long v119 = PLMigrationGetLog();
          if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CGRect buf = 138412290;
            uint64_t v153 = v118;
            _os_log_impl(&dword_19B3C7000, v119, OS_LOG_TYPE_ERROR, "Error setting SPL URL after creation: %@", buf, 0xCu);
          }
        }
        int v16 = 0;
        int64_t v24 = 3;
        id v12 = v115;
      }
      else
      {
        int v16 = 0;
      }
      goto LABEL_150;
    }
  }
  id v129 = v12;
  char v150 = 0;
  id v18 = PLMigrationGetLog();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    PLStringFromMigrationType(a3, 1);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    id v20 = [v14 libraryURL];
    *(_DWORD *)CGRect buf = 138543618;
    uint64_t v153 = v19;
    __int16 v154 = 2112;
    uint64_t v155 = v20;
    _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEFAULT, "Started %{public}@ of %@", buf, 0x16u);
  }
  id v149 = 0;
  BOOL v21 = [(PLModelMigrator *)self _createPhotoDataDirectoryIfNecessary:&v150 error:&v149];
  id v22 = v149;
  char v23 = v22;
  if (v21)
  {

    context = (void *)MEMORY[0x19F38D3B0]();
    id v126 = v11;
    if (v150)
    {
      __int16 v127 = [MEMORY[0x1E4F1CA60] dictionary];
      int64_t v24 = a3;
    }
    else
    {
      uint32_t v27 = [v14 photosDatabasePath];
      uint64_t v28 = [MEMORY[0x1E4F28CB8] defaultManager];
      char v29 = [v28 fileExistsAtPath:v27];

      if (v29)
      {
        id v30 = [v14 libraryURL];
        if (v30)
        {
          id v31 = [v14 capabilities];
          int v32 = [v31 isCentralizedCacheDeleteCapable];

          if (v32)
          {
            id v33 = PLMigrationGetLog();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CGRect buf = 138412290;
              uint64_t v153 = v30;
              _os_log_impl(&dword_19B3C7000, v33, OS_LOG_TYPE_DEFAULT, "Clearing purgeable flags before rebuild for photo library at %@", buf, 0xCu);
            }

            if (!+[PLCacheDeleteSupport clearPurgeableFlagsForAllResourcesInPhotoLibraryURL:v30])
            {
              int v34 = PLMigrationGetLog();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CGRect buf = 138412290;
                uint64_t v153 = v30;
                _os_log_impl(&dword_19B3C7000, v34, OS_LOG_TYPE_ERROR, "Failed to clear purgeable flags for photo library %@", buf, 0xCu);
              }
            }
          }
        }
        char v35 = PLMigrationGetLog();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CGRect buf = 0;
          _os_log_impl(&dword_19B3C7000, v35, OS_LOG_TYPE_DEFAULT, "Trying to persist path->uuid mapping", buf, 2u);
        }

        __int16 v127 = [(PLModelMigrator *)self generatePathToAssetUUIDRecoveryMapping];
        +[PLManagedObjectContext removePhotosDatabaseWithPathManager:v14];
        int64_t v24 = 1;
      }
      else
      {
        id v30 = PLMigrationGetLog();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412290;
          uint64_t v153 = v27;
          _os_log_impl(&dword_19B3C7000, v30, OS_LOG_TYPE_ERROR, "No store file to move aside at \"%@\"", buf, 0xCu);
        }
        __int16 v127 = 0;
        int64_t v24 = a3;
      }
    }
    id v36 = PLMigrationGetLog();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v36, OS_LOG_TYPE_DEFAULT, "Removing derivatives", buf, 2u);
    }

    if (+[PLRebuildJournalManager isEnabledWithPathManager:v14 error:0])
    {
      id v37 = [(PLModelMigrator *)self pathManager];
      BOOL v38 = +[PLRebuildJournalManager assetJournalExists:v37 error:0];

      if (v38)
      {
        [v14 photoDirectoryCreationMaskResetWithType:11];
        id v148 = 0;
        __int16 v39 = [v14 photoDirectoryWithType:11 createIfNeeded:1 error:&v148];
        uint64_t v40 = v148;

        id v11 = v126;
        if (!v39)
        {
          uint64_t v41 = PLMigrationGetLog();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CGRect buf = 138412290;
            uint64_t v153 = v40;
            _os_log_impl(&dword_19B3C7000, v41, OS_LOG_TYPE_ERROR, "Error obtaining path for thumbs directory: %@", buf, 0xCu);
          }
        }
        long long v124 = v40;
        uint64_t v42 = [(PLModelMigrator *)self pathManager];
        +[PLThumbnailManagerCore removeThumbnailTablesUnsupportedOnly:0 withPathManager:v42];

        id v43 = [(PLModelMigrator *)self pathManager];
        uint64_t v44 = +[PLThumbnailManagerCore thumbnailConfigurationDictWithPathManager:v43];

        __int16 v45 = (void *)v44;
        uint64_t v46 = [(PLModelMigrator *)self pathManager];
        uint64_t v47 = 1;
        +[PLThumbnailManagerCore stampThumbnailConfiguration:v45 toFile:1 withPathManager:v46];
        goto LABEL_88;
      }
    }
    BOOL v48 = [(PLModelMigrator *)self pathManager];
    +[PLThumbnailManagerCore removeThumbnailTablesUnsupportedOnly:0 withPathManager:v48];

    id v147 = 0;
    uint64_t v49 = [v14 photoDirectoryWithType:12 createIfNeeded:0 error:&v147];
    id v50 = v147;
    if (v49)
    {
      char v51 = [MEMORY[0x1E4F8B908] fileManager];
      BOOL v146 = v50;
      char v52 = [v51 removeItemAtPath:v49 error:&v146];
      long long v53 = v146;

      if ((v52 & 1) == 0)
      {
        char v54 = PLIsErrorFileNotFound();

        if (v54) {
          goto LABEL_58;
        }
        char v51 = PLMigrationGetLog();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412290;
          uint64_t v153 = v53;
          _os_log_impl(&dword_19B3C7000, v51, OS_LOG_TYPE_ERROR, "Error removing master thumbs directory: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      char v51 = PLMigrationGetLog();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        uint64_t v153 = v50;
        _os_log_impl(&dword_19B3C7000, v51, OS_LOG_TYPE_ERROR, "Error obtaining path for master thumbs directory: %@", buf, 0xCu);
      }
      long long v53 = v50;
    }

LABEL_58:
    long long v123 = (void *)v49;
    if (![v14 isDCIM])
    {
LABEL_71:
      id v62 = [MEMORY[0x1E4F28CB8] defaultManager];
      long long v63 = [v14 photoDirectoryWithType:10];
      BOOL v143 = v53;
      char v64 = [v62 removeItemAtPath:v63 error:&v143];
      long long v65 = v143;

      if ((v64 & 1) == 0)
      {
        long long v66 = PLMigrationGetLog();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412290;
          uint64_t v153 = v65;
          _os_log_impl(&dword_19B3C7000, v66, OS_LOG_TYPE_ERROR, "Error removing derivatives directory: %@", buf, 0xCu);
        }
      }
      [v14 photoDirectoryCreationMaskResetWithType:10];
      [v14 photoDirectoryCreationMaskResetWithType:11];
      [v14 photoDirectoryCreationMaskResetWithType:12];
      __int16 v142 = v65;
      unsigned __int8 v67 = [v14 photoDirectoryWithType:10 createIfNeeded:1 error:&v142];
      id v68 = v142;

      id v11 = v126;
      if (!v67)
      {
        long long v69 = PLMigrationGetLog();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412290;
          uint64_t v153 = v68;
          _os_log_impl(&dword_19B3C7000, v69, OS_LOG_TYPE_ERROR, "Error obtaining path for derivatives directory: %@", buf, 0xCu);
        }
      }
      uint64_t v141 = v68;
      __int16 v70 = [v14 photoDirectoryWithType:11 createIfNeeded:1 error:&v141];
      id v71 = v141;

      if (!v70)
      {
        long long v72 = PLMigrationGetLog();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412290;
          uint64_t v153 = v71;
          _os_log_impl(&dword_19B3C7000, v72, OS_LOG_TYPE_ERROR, "Error obtaining path for thumbs directory: %@", buf, 0xCu);
        }
      }
      __int16 v140 = v71;
      uint64_t v73 = [v14 photoDirectoryWithType:12 createIfNeeded:1 error:&v140];
      uint64_t v74 = v140;

      if (!v73)
      {
        id v75 = PLMigrationGetLog();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412290;
          uint64_t v153 = v74;
          _os_log_impl(&dword_19B3C7000, v75, OS_LOG_TYPE_ERROR, "Error obtaining path for master thumbs directory: %@", buf, 0xCu);
        }
      }
      long long v124 = v74;
      id v76 = [(PLModelMigrator *)self pathManager];
      uint64_t v46 = +[PLThumbnailManagerCore thumbnailConfigurationDictWithPathManager:v76];

      id v77 = [(PLModelMigrator *)self pathManager];
      +[PLThumbnailManagerCore stampThumbnailConfiguration:v46 toFile:1 withPathManager:v77];

      uint64_t v47 = 0;
      __int16 v45 = v123;
LABEL_88:

      [v14 removePartialVideoDirectory];
      [v14 removeComputeDirectory];
      id v78 = PLMigrationGetLog();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CGRect buf = 0;
        _os_log_impl(&dword_19B3C7000, v78, OS_LOG_TYPE_DEFAULT, "Creating database", buf, 2u);
      }

      [(PLModelMigrator *)self _repairMetadataAndSingletonsForMigrationType:a3 forceRebuildReason:v11 journalRebuildRequired:v47];
      [(PLModelMigrator *)self archiveAssetUUIDForPathPlist:v127];
      if (v131)
      {
        long long v79 = PLMigrationGetLog();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CGRect buf = 0;
          _os_log_impl(&dword_19B3C7000, v79, OS_LOG_TYPE_DEFAULT, "Telling mstreamd to forget everything", buf, 2u);
        }

        +[PLPhotoSharingHelper forgetSharingPersonID:0];
        uint64_t v80 = +[PLNotificationManager sharedManager];
        [v80 discardAllNotifications];

        if (([v14 isUBF] & 1) == 0)
        {
          id v81 = PLMigrationGetLog();
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)CGRect buf = 0;
            _os_log_impl(&dword_19B3C7000, v81, OS_LOG_TYPE_DEFAULT, "Removing photo cloud sharing data directory", buf, 2u);
          }

          id v135 = 0;
          BOOL v82 = +[PLPhotoSharingHelper removeCloudSharingDirectories:&v135];
          long long v83 = v135;
          if (!v82)
          {
            uint64_t v84 = PLMigrationGetLog();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CGRect buf = 138412290;
              uint64_t v153 = v83;
              _os_log_impl(&dword_19B3C7000, v84, OS_LOG_TYPE_DEFAULT, "Failed to remove photo cloud sharing data directory: %@", buf, 0xCu);
            }
          }
          goto LABEL_103;
        }
      }
      else if (![v14 isUBF])
      {
LABEL_103:
        uint64_t v86 = PLMigrationGetLog();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CGRect buf = 0;
          _os_log_impl(&dword_19B3C7000, v86, OS_LOG_TYPE_DEFAULT, "Removing syndication data directory", buf, 2u);
        }

        id v134 = 0;
        char v87 = PLRemoveSyndicationDirectories(v14, &v134);
        __int16 v85 = v134;
        if ((v87 & 1) == 0)
        {
          uint64_t v88 = PLMigrationGetLog();
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CGRect buf = 138412290;
            uint64_t v153 = v85;
            _os_log_impl(&dword_19B3C7000, v88, OS_LOG_TYPE_DEFAULT, "Failed to remove syndication data directory: %@", buf, 0xCu);
          }
        }
LABEL_109:

        if (PLPlatformSearchSupported())
        {
          char v89 = PLMigrationGetLog();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)CGRect buf = 0;
            _os_log_impl(&dword_19B3C7000, v89, OS_LOG_TYPE_INFO, "Dropping any prior search index", buf, 2u);
          }

          uint64_t v90 = [(PLModelMigrator *)self pathManager];
          long long v91 = [v90 libraryURL];
          uint64_t v92 = +[PLLibraryServicesManager libraryServicesManagerForLibraryURL:v91];

          if (_os_feature_enabled_impl())
          {
            char v93 = [v92 searchIndexingEngine];
            long long v94 = [NSString stringWithFormat:@"new database (force rebuild reason: %@)", v11];
            [v93 dropSearchIndexWithSourceName:v94 completion:0];
          }
          else
          {
            char v93 = [v92 searchIndexManager];
            [v93 resetSearchIndexWithReason:6 dropCompletion:0];
          }
        }
        [(PLModelMigrator *)self applyDataProtectionToAllPhotosFilesOnce];
        if (([v14 isDCIM] & v131) == 1
          && [(PLModelMigrator *)self isCloudPhotoLibraryEnabled])
        {
          long long v95 = [(PLModelMigrator *)self deviceRestoreMigrationSupport];
          if ([v95 isRestoreFromBackup])
          {
            __int16 v96 = [(PLModelMigrator *)self postProcessingToken];
            int v97 = [v96 isModelMigrationRestorePostProcessingComplete];

            if (!v97) {
              goto LABEL_125;
            }
          }
          else
          {
          }
          __int16 v98 = PLMigrationGetLog();
          if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)CGRect buf = 0;
            _os_log_impl(&dword_19B3C7000, v98, OS_LOG_TYPE_DEFAULT, "Generating album metadata from iTunes lastsynced plist", buf, 2u);
          }

          [(PLModelMigrator *)self _generateAlbumMetadataFromLastiTunesSyncedPlist];
        }
LABEL_125:
        uint64_t v99 = [v11 integerValue];
        if (v99 >= 1)
        {
          uint64_t v100 = v99;
          uint64_t v101 = [(PLModelMigrator *)self analyticsEventManager];
          id v102 = [NSNumber numberWithInteger:v100];
          uint64_t v103 = [v102 stringValue];
          uint64_t v104 = *MEMORY[0x1E4F8BD88];
          [v101 setPayloadValue:v103 forKey:*MEMORY[0x1E4F8BDB8] onEventWithName:*MEMORY[0x1E4F8BD88]];

          long long v105 = [(PLModelMigrator *)self analyticsEventManager];
          long long v106 = PLRebuildReasonToShortString(v100);
          uint64_t v107 = v104;
          id v11 = v126;
          [v105 setPayloadValue:v106 forKey:*MEMORY[0x1E4F8BDB0] onEventWithName:v107];
        }
        long long v108 = [(PLModelMigrator *)self pathManager];
        +[PLModelMigrationAction_CPLPrompting shouldRepromptUserIfNeededWithPathManager:v108];

        if (v24 == 1)
        {
          if ([v14 isDCIM])
          {
            uint64_t v109 = (void *)MEMORY[0x1E4F1CB10];
            long long v110 = [v14 photoDirectoryWithType:2];
            int64_t v24 = 1;
            long long v111 = [v109 fileURLWithPath:v110 isDirectory:1];

            uint64_t v133 = v16;
            LOBYTE(v109) = [MEMORY[0x1E4F8B988] setTimeMachineExclusionAttribute:0 url:v111 error:&v133];
            os_log_type_t v26 = v133;

            if ((v109 & 1) == 0)
            {
              id v112 = PLMigrationGetLog();
              if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CGRect buf = 138412290;
                uint64_t v153 = v26;
                _os_log_impl(&dword_19B3C7000, v112, OS_LOG_TYPE_ERROR, "Failed to remove the exclusion attribute on PhotoData dir during rebuild: %@", buf, 0xCu);
              }

              int64_t v24 = 4;
            }
            a6 = v130;

            id v12 = v129;
LABEL_136:
            int v15 = v131;
            if (v26)
            {
LABEL_21:
              if (a6)
              {
                int v16 = v26;
                *a6 = v16;
              }
              else
              {
                int v16 = v26;
              }
              goto LABEL_150;
            }
            goto LABEL_137;
          }
          int64_t v24 = 1;
        }
        os_log_type_t v26 = v16;
        id v12 = v129;
        a6 = v130;
        goto LABEL_136;
      }
      v136[0] = MEMORY[0x1E4F143A8];
      v136[1] = 3221225472;
      v136[2] = __91__PLModelMigrator_createNewDatabaseWithMigrationType_forceRebuildReason_coordinator_error___block_invoke;
      v136[3] = &unk_1E5866410;
      uint64_t v138 = self;
      SEL v139 = v128;
      __int16 v137 = v14;
      [v137 enumerateBundleScopesWithBlock:v136];
      __int16 v85 = v137;
      goto LABEL_109;
    }
    uint64_t v145 = v53;
    char v55 = [v14 photoDirectoryWithType:30 createIfNeeded:0 error:&v145];
    long long v56 = v145;

    if (!v55)
    {
      char v59 = PLMigrationGetLog();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGRect buf = 138412290;
        uint64_t v153 = v56;
        _os_log_impl(&dword_19B3C7000, v59, OS_LOG_TYPE_ERROR, "Error obtaining path for local video key frames directory: %@", buf, 0xCu);
      }

      long long v53 = v56;
      goto LABEL_70;
    }
    id v57 = [MEMORY[0x1E4F8B908] fileManager];
    __int16 v144 = v56;
    char v58 = [v57 removeItemAtPath:v55 error:&v144];
    long long v53 = v144;

    if (v58)
    {
    }
    else
    {
      char v60 = PLIsErrorFileNotFound();

      if ((v60 & 1) == 0)
      {
        uint64_t v61 = PLMigrationGetLog();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412290;
          uint64_t v153 = v53;
          _os_log_impl(&dword_19B3C7000, v61, OS_LOG_TYPE_ERROR, "Error removing local video key frames directory: %@", buf, 0xCu);
        }

        goto LABEL_70;
      }
    }
    [v14 photoDirectoryCreationMaskResetWithType:30];
LABEL_70:

    goto LABEL_71;
  }
  if (a6) {
    *a6 = v22;
  }

  int64_t v24 = 4;
  id v12 = v129;
LABEL_150:

  return v24;
}

void __91__PLModelMigrator_createNewDatabaseWithMigrationType_forceRebuildReason_coordinator_error___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (([MEMORY[0x1E4F8B980] bundleScopeShouldBePersistedForRebuild:a2] & 1) == 0)
  {
    signed __int16 v6 = [*(id *)(a1 + 32) photoDirectoryWithType:a3];
    if (a2 && a3 != 1)
    {
      id v7 = [*(id *)(a1 + 32) baseDirectory];
      if ([v6 isEqualToString:v7])
      {
      }
      else
      {
        id v8 = [*(id *)(a1 + 32) baseDirectory];
        char v9 = [v6 hasPrefix:v8];

        if (v9) {
          goto LABEL_7;
        }
      }
    }
    id v10 = [MEMORY[0x1E4F28B00] currentHandler];
    [v10 handleFailureInMethod:*(void *)(a1 + 48), *(void *)(a1 + 40), @"PLModelMigrator.m", 1126, @"Attempted to remove main bundle directory, bundleScope: %d, pathType, %d, path: %@", a2, a3, v6 object file lineNumber description];

LABEL_7:
    id v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CGRect buf = 67109378;
      int v19 = a2;
      __int16 v20 = 2112;
      BOOL v21 = v6;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Removing resources for bundle scope %d at path %@", buf, 0x12u);
    }

    id v12 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v17 = 0;
    char v13 = [v12 removeItemAtPath:v6 error:&v17];
    id v14 = v17;
    if (v13)
    {
    }
    else
    {
      char v15 = PLIsErrorFileNotFound();

      if ((v15 & 1) == 0)
      {
        int v16 = PLMigrationGetLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 67109634;
          int v19 = a2;
          __int16 v20 = 2112;
          BOOL v21 = v6;
          __int16 v22 = 2112;
          id v23 = v14;
          _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_ERROR, "Couldn't remove bundle scope %d on library creation at path %@: %@", buf, 0x1Cu);
        }

        goto LABEL_16;
      }
    }
    [*(id *)(a1 + 32) photoDirectoryCreationMaskResetWithType:a3];
LABEL_16:
  }
}

- (int64_t)promptUserIfNeededForRebuildReason:(id)a3 migrationError:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = (__CFString *)a4;
  if ([(id)objc_opt_class() shouldPromptUserForLibrarySchemaMismatch]
    && [(id)objc_opt_class() shouldPromptUserForRebuildWithLibraryPathManager:self->_pathManager])
  {
    if (v6)
    {
      id v8 = PLMigrationGetLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [v6 integerValue];
        if ((unint64_t)(v9 - 1) > 0x14) {
          id v10 = @"PLRebuildReasonUnknown";
        }
        else {
          id v10 = off_1E5870B50[v9 - 1];
        }
        int v16 = v10;
        *(_DWORD *)CGRect buf = 138543362;
        uint32_t v27 = v16;
        _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Skipping rebuild prompt due to force rebuild: %{public}@", buf, 0xCu);
      }
LABEL_14:
      int64_t v11 = 0;
LABEL_36:

      goto LABEL_37;
    }
    if ((PLIsErrorEqualToCode() & 1) == 0 && (PLIsErrorEqualToCode() & 1) == 0)
    {
      id v8 = PLMigrationGetLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CGRect buf = 138412290;
        uint32_t v27 = v7;
        _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_DEFAULT, "Skipping rebuild prompt due to non-prompting migration error: %@", buf, 0xCu);
      }
      goto LABEL_14;
    }
    id v12 = NSString;
    char v13 = [(__CFString *)v7 userInfo];
    uint64_t v14 = [v13 objectForKeyedSubscript:*MEMORY[0x1E4F28228]];
    char v15 = (void *)v14;
    if (v14)
    {
      id v8 = [v12 stringWithFormat:@"Photos cannot proceed with the library in its current state.\n\n%@\n\nSelect \"Rebuild\" to allow rebuild of the photo library database (possible data loss) or \"Not now\" to stop now and leave it as-is", v14];
    }
    else
    {
      id v17 = [(__CFString *)v7 debugDescription];
      id v8 = [v12 stringWithFormat:@"Photos cannot proceed with the library in its current state.\n\n%@\n\nSelect \"Rebuild\" to allow rebuild of the photo library database (possible data loss) or \"Not now\" to stop now and leave it as-is", v17];
    }
    id v18 = [[PLRebuildUserNotification alloc] initWithMessage:v8];
    uint64_t v19 = [(PLRebuildUserNotification *)v18 showAlertAndWaitForResponse];
    if (v19 != 2)
    {
      int64_t v11 = v19;
      if (v19 == 1)
      {
        uint64_t v24 = PLMigrationGetLog();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CGRect buf = 0;
          _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_DEFAULT, "prompted user for rebuild: user responded with Rebuild, allowing rebuild", buf, 2u);
        }

        __int16 v22 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.mobileslideshow"];
        [v22 setBool:0 forKey:@"com.apple.Photos.PreventRebuild"];
        id v23 = PLMigrationGetLog();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CGRect buf = 0;
          _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_DEFAULT, "user prompt updated prevent rebuild: NO", buf, 2u);
        }
        int64_t v11 = 1;
        goto LABEL_34;
      }
      if (v19)
      {
LABEL_35:

        goto LABEL_36;
      }
      __int16 v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CGRect buf = 0;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "User prompt timed out. Assuming user does not want rebuild, changing response to Not Now.", buf, 2u);
      }
    }
    BOOL v21 = PLMigrationGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v21, OS_LOG_TYPE_DEFAULT, "prompted user for rebuild: user responded with Not Now, preventing rebuild", buf, 2u);
    }

    __int16 v22 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.mobileslideshow"];
    [v22 setBool:1 forKey:@"com.apple.Photos.PreventRebuild"];
    id v23 = PLMigrationGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      int64_t v11 = 2;
      _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_DEFAULT, "user prompt: updated prevent rebuild: YES", buf, 2u);
    }
    else
    {
      int64_t v11 = 2;
    }
LABEL_34:

    goto LABEL_35;
  }
  int64_t v11 = 0;
LABEL_37:

  return v11;
}

- (BOOL)_createPhotoDataDirectoryIfNecessary:(BOOL *)a3 error:(id *)a4
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v7 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
  id v8 = [(PLModelMigrator *)self pathManager];
  uint64_t v9 = [v8 photosDatabasePath];

  id v10 = [v9 stringByDeletingLastPathComponent];
  char v11 = [v7 fileExistsAtPath:v10 isDirectory:0];
  if ((v11 & 1) == 0)
  {
    id v23 = PLMigrationGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_DEFAULT, "Creating missing directory for database", buf, 2u);
    }

    id v37 = 0;
    char v24 = [v7 createDirectoryAtPath:v10 withIntermediateDirectories:1 attributes:0 error:&v37];
    id v13 = v37;
    if (v24) {
      goto LABEL_8;
    }
    uint32_t v27 = PLMigrationGetLog();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412546;
      id v39 = v10;
      __int16 v40 = 2112;
      id v41 = v13;
      _os_log_impl(&dword_19B3C7000, v27, OS_LOG_TYPE_ERROR, "Unable to create database directory at %@: %@", buf, 0x16u);
    }

    if (a4) {
      *a4 = v13;
    }
LABEL_20:

    BOOL v25 = 0;
    goto LABEL_26;
  }
  uint64_t v12 = [(PLModelMigrator *)self pathManager];
  id v13 = [(id)v12 photoDirectoryWithType:6];

  id v36 = 0;
  LOBYTE(v12) = [v7 createDirectoryAtPath:v13 withIntermediateDirectories:1 attributes:0 error:&v36];
  id v14 = v36;
  if ((v12 & 1) == 0)
  {
    os_log_type_t v26 = PLMigrationGetLog();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412546;
      id v39 = v13;
      __int16 v40 = 2112;
      id v41 = v14;
      _os_log_impl(&dword_19B3C7000, v26, OS_LOG_TYPE_ERROR, "Unable to create private cache subdirectory at %@: %@", buf, 0x16u);
    }

    if (a4) {
      *a4 = v14;
    }

    goto LABEL_20;
  }
  id v32 = v7;
  id v33 = v10;
  int v34 = v9;
  id v30 = a3;
  id v31 = a4;
  id v15 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v15 setDateFormat:@"yyyyMMdd-HHmmssZZZZZ"];
  int v16 = [MEMORY[0x1E4F1C9C8] date];
  id v17 = [v15 stringFromDate:v16];

  id v18 = [@"CreateDatabase_" stringByAppendingString:v17];
  uint64_t v19 = [v13 stringByAppendingPathComponent:v18];
  __int16 v20 = [MEMORY[0x1E4F1C9B8] data];
  id v35 = v14;
  char v21 = [v20 writeToFile:v19 options:0 error:&v35];
  id v22 = v35;

  if (v21)
  {

    a3 = v30;
    id v10 = v33;
    uint64_t v9 = v34;
    id v7 = v32;
LABEL_8:

    if (a3) {
      *a3 = v11 ^ 1;
    }
    BOOL v25 = 1;
    goto LABEL_26;
  }
  uint64_t v28 = PLMigrationGetLog();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)CGRect buf = 138543618;
    id v39 = v18;
    __int16 v40 = 2112;
    id v41 = v13;
    _os_log_impl(&dword_19B3C7000, v28, OS_LOG_TYPE_ERROR, "Unable to write file %{public}@ to cacheDir %@", buf, 0x16u);
  }

  if (v31) {
    id *v31 = v22;
  }

  BOOL v25 = 0;
  id v10 = v33;
  uint64_t v9 = v34;
  id v7 = v32;
LABEL_26:

  return v25;
}

- (BOOL)shouldCreateDatabase
{
  if ((PLIsAssetsd() & 1) == 0)
  {
    id v17 = [MEMORY[0x1E4F28B00] currentHandler];
    [v17 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:816 description:@"Only Assetsd should be checking if _shouldCreateDatabase!"];
  }
  BOOL v4 = [MEMORY[0x1E4F8B908] fileManager];
  int v5 = [(PLModelMigrator *)self pathManager];
  id v6 = [v5 photosDatabasePath];
  int v7 = [v4 fileExistsAtPath:v6];

  if (!v7)
  {
    id v13 = PLMigrationGetLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __int16 v18 = 0;
      id v14 = "Should create database: database is missing";
      id v15 = (uint8_t *)&v18;
      goto LABEL_11;
    }
LABEL_12:

    return 1;
  }
  id v8 = [(PLModelMigrator *)self pathManager];
  int v9 = [v8 isDeviceRestoreSupported];

  if (v9)
  {
    id v10 = [(PLModelMigrator *)self postProcessingToken];
    if ([v10 needsToPrepareForBackgroundRestore])
    {
      char v11 = [(PLModelMigrator *)self postProcessingToken];
      char v12 = [v11 isBackgroundRestorePostProcessingInProgressTokenValid];

      if ((v12 & 1) == 0)
      {
        id v13 = PLMigrationGetLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          __int16 v19 = 0;
          id v14 = "Should create database: post processing token is invalid (too many failed attempts to restore with the e"
                "xisting database)";
          id v15 = (uint8_t *)&v19;
LABEL_11:
          _os_log_impl(&dword_19B3C7000, v13, OS_LOG_TYPE_INFO, v14, v15, 2u);
          goto LABEL_12;
        }
        goto LABEL_12;
      }
    }
    else
    {
    }
  }
  return 0;
}

- (int64_t)migrateOrCreateDatabaseIfNecessaryWithPersistentContainer:(id)a3 migrationPolicy:(unsigned int)a4 error:(id *)a5
{
  id v6 = *(void **)&a4;
  v49[1] = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  int v9 = (void *)MEMORY[0x19F38D3B0]();
  BOOL v10 = [(PLModelMigrator *)self shouldCreateDatabase];
  char v11 = PLMigrationGetLog();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    __int16 v40 = a5;
    id v13 = v8;
    int v14 = (int)v6;
    id v6 = v9;
    if (v12)
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Attempting create new database", buf, 2u);
    }

    id v43 = 0;
    uint64_t v15 = [(PLModelMigrator *)self createNewDatabaseWithMigrationType:3 forceRebuildReason:0 coordinator:0 error:&v43];
    id v16 = v43;
    id v17 = [(PLModelMigrator *)self analyticsEventManager];
    __int16 v18 = [NSNumber numberWithInt:v15 != 4];
    uint64_t v19 = *MEMORY[0x1E4F8BD08];
    [v17 setPayloadValue:v18 forKey:*MEMORY[0x1E4F8BD20] onEventWithName:*MEMORY[0x1E4F8BD08]];

    __int16 v20 = objc_msgSend(NSNumber, "numberWithInt:", +[PLModelMigrator currentModelVersion](PLModelMigrator, "currentModelVersion"));
    char v21 = [v20 stringValue];
    [v17 setPayloadValue:v21 forKey:*MEMORY[0x1E4F8BD18] onEventWithName:v19];

    [v17 setPayloadValue:v16 forKey:*MEMORY[0x1E4F8BD10] onEventWithName:v19];
    id v22 = v16;
    int v9 = v6;
    LODWORD(v6) = v14;
    id v8 = v13;
    a5 = v40;
LABEL_5:

    goto LABEL_11;
  }
  if (v12)
  {
    *(_WORD *)CGRect buf = 0;
    _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Attempting open existing database", buf, 2u);
  }

  id v42 = 0;
  uint64_t v15 = [v8 configureSharedPersistentStoreCoordinatorAndMigrateOrRebuildIfNecessaryWithModelMigrator:self migrationPolicy:v6 error:&v42];
  id v17 = v42;
  if (v15 != 4)
  {
    id v23 = [(PLModelMigrator *)self options];

    if (!v23)
    {
      uint64_t v28 = [v8 sharedPersistentStoreCoordinator];
      id v16 = [(PLModelMigrator *)self managedObjectContextForMigrationWithName:"migrateOrCreateDatabaseIfNecessaryWithPersistentContainer" persistentStoreCoordinator:v28 concurrencyType:1];

      char v29 = [[PLGlobalValues alloc] initWithManagedObjectContext:v16];
      uint64_t v30 = [(PLGlobalValues *)v29 libraryCreateOptions];
      if (v30)
      {
        uint64_t v31 = v30;
        id v39 = v29;
        id v41 = a5;
        id v32 = v8;
        int v33 = (int)v6;
        id v6 = v9;
        int v34 = [(PLModelMigrator *)self options];

        if (v34)
        {
          id v35 = [(PLModelMigrator *)self options];
          id v36 = (void *)[v35 mutableCopy];

          id v37 = [NSNumber numberWithUnsignedInteger:v31];
          [v36 setObject:v37 forKeyedSubscript:@"PLPhotoLibraryCreateOptions"];

          [(PLModelMigrator *)self setOptions:v36];
        }
        else
        {
          BOOL v48 = @"PLPhotoLibraryCreateOptions";
          id v36 = [NSNumber numberWithUnsignedInteger:v31];
          v49[0] = v36;
          BOOL v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v49 forKeys:&v48 count:1];
          [(PLModelMigrator *)self setOptions:v38];
        }
        int v9 = v6;
        LODWORD(v6) = v33;
        id v8 = v32;
        char v29 = v39;
        a5 = v41;
      }

      id v22 = v17;
      goto LABEL_5;
    }
  }
  id v22 = v17;
LABEL_11:

  [(NSProgress *)self->_progress setCompletedUnitCount:[(NSProgress *)self->_progress totalUnitCount]];
  char v24 = PLMigrationGetLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v25 = PLStringFromMigrationPolicyOptions((int)v6);
    os_log_type_t v26 = PLStringFromMigrationType(v15, 0);
    *(_DWORD *)CGRect buf = 138543618;
    __int16 v45 = v25;
    __int16 v46 = 2114;
    uint64_t v47 = v26;
    _os_log_impl(&dword_19B3C7000, v24, OS_LOG_TYPE_DEFAULT, "migrateOrCreateDatabaseIfNecessary policy:%{public}@ result: %{public}@", buf, 0x16u);
  }
  if (a5) {
    *a5 = v22;
  }

  return v15;
}

- (int64_t)checkForceRebuildIndicatorFile
{
  id v3 = [(PLModelMigrator *)self pathManager];
  int v4 = [v3 sqliteErrorIndicatorFileExists];

  return v4 && !self->_didCreateSqliteErrorFileForLightweightMigration;
}

- (BOOL)debug_resetThumbnailsAndInitiateRebuildRequestInStore:(id)a3
{
  uint64_t v4 = *MEMORY[0x1E4F1C1C0];
  id v5 = a3;
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator debug_resetThumbnailsAndInitiateRebuildRequestInStore:]", v4);
  int v7 = [(PLModelMigrator *)self _migrationThumbnailManagerWithStore:v5];

  LOBYTE(v5) = [v7 resetThumbnailsForced:1 isMissingTables:0 inContext:v6];
  return (char)v5;
}

- (BOOL)_removeEvents:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    char v24 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v25 = NSStringFromSelector(a2);
    [v24 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 694, @"%@ can be called only from assetsd.", v25 object file lineNumber description];
  }
  aSelector = a2;
  id v6 = (void *)MEMORY[0x19F38D3B0]();
  int v7 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _removeEvents:]", *MEMORY[0x1E4F1C1C0]);
  id v8 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"GenericAlbum"];
  int v9 = (void *)MEMORY[0x1E4F28F60];
  BOOL v10 = [NSNumber numberWithInt:12];
  char v11 = [v9 predicateWithFormat:@"kind == %@", v10];

  [v8 setPredicate:v11];
  id v33 = 0;
  BOOL v12 = [v7 executeFetchRequest:v8 error:&v33];
  id v13 = v33;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v14 = v12;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v29 objects:v38 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v30 != v17) {
          objc_enumerationMutation(v14);
        }
        [*(id *)(*((void *)&v29 + 1) + 8 * i) delete];
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v29 objects:v38 count:16];
    }
    while (v16);
  }

  if ([v7 hasChanges])
  {
    uint64_t v19 = v6;
    id v28 = 0;
    char v20 = [v7 save:&v28];
    id v21 = v28;
    if ((v20 & 1) == 0)
    {
      id v22 = PLMigrationGetLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector(aSelector);
        aSelectora = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)CGRect buf = 138412546;
        id v35 = aSelectora;
        __int16 v36 = 2112;
        id v37 = v21;
        _os_log_impl(&dword_19B3C7000, v22, OS_LOG_TYPE_ERROR, "%@ failed: %@", buf, 0x16u);
      }
    }

    id v6 = v19;
  }
  else
  {
    char v20 = 1;
  }
  [v7 reset];

  return v20;
}

- (BOOL)_forceSoftResetSync
{
  if ((PLIsAssetsd() & 1) == 0)
  {
    BOOL v10 = [MEMORY[0x1E4F28B00] currentHandler];
    char v11 = NSStringFromSelector(a2);
    [v10 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 682, @"%@ can be called only from assetsd.", v11 object file lineNumber description];
  }
  uint64_t v4 = +[PLPhotoLibraryBundleController sharedBundleController];
  id v5 = [(PLModelMigrator *)self pathManager];
  id v6 = [v5 libraryURL];
  int v7 = [v4 openBundleAtLibraryURL:v6];

  id v8 = [v7 indicatorFileCoordinator];
  [v8 forceSoftResetSync];

  return 1;
}

- (BOOL)_disableICloudPhoto
{
  if ((PLIsAssetsd() & 1) == 0)
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    int v9 = NSStringFromSelector(a2);
    [v8 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 671, @"%@ can be called only from assetsd.", v9 object file lineNumber description];
  }
  uint64_t v4 = [(PLModelMigrator *)self pathManager];
  id v5 = [v4 libraryURL];
  id v6 = +[PLLibraryServicesManager libraryServicesManagerForLibraryURL:v5];

  [v6 setICloudPhotosEnabledInternal:0];
  return 1;
}

- (BOOL)_verifyCloudAssetsLocalAvailability:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((PLIsAssetsd() & 1) == 0)
  {
    id v23 = [MEMORY[0x1E4F28B00] currentHandler];
    char v24 = NSStringFromSelector(a2);
    [v23 handleFailureInMethod:a2, self, @"PLModelMigrator.m", 634, @"%@ can be called only from assetsd.", v24 object file lineNumber description];
  }
  aSelector = a2;
  context = (void *)MEMORY[0x19F38D3B0]();
  id v28 = v5;
  id v6 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v5, "-[PLModelMigrator _verifyCloudAssetsLocalAvailability:]", *MEMORY[0x1E4F1C1C0]);
  int v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  os_log_type_t v26 = [MEMORY[0x1E4F1C0D0] fetchRequestWithEntityName:@"CloudResource"];
  id v8 = objc_msgSend(v6, "executeFetchRequest:error:");
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    char v11 = 0;
    BOOL v12 = 0;
    uint64_t v13 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v31 != v13) {
          objc_enumerationMutation(v8);
        }
        uint64_t v15 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        uint64_t v16 = [v15 filePath];
        objc_msgSend(v15, "setIsLocallyAvailable:", objc_msgSend(v7, "fileExistsAtPath:isDirectory:", v16, 0));

        v11 += [v15 isLocallyAvailable];
      }
      v12 += v10;
      uint64_t v10 = [v8 countByEnumeratingWithState:&v30 objects:v38 count:16];
    }
    while (v10);
  }
  else
  {
    char v11 = 0;
    BOOL v12 = 0;
  }
  uint64_t v17 = PLMigrationGetLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CGRect buf = 134218240;
    id v35 = v11;
    __int16 v36 = 2048;
    id v37 = v12;
    _os_log_impl(&dword_19B3C7000, v17, OS_LOG_TYPE_DEFAULT, "%llu out of %llu resources are available locally", buf, 0x16u);
  }

  if ([v6 hasChanges])
  {
    id v29 = 0;
    char v18 = [v6 save:&v29];
    id v19 = v29;
    if ((v18 & 1) == 0)
    {
      char v20 = PLMigrationGetLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v21 = NSStringFromSelector(aSelector);
        *(_DWORD *)CGRect buf = 138412546;
        id v35 = v21;
        __int16 v36 = 2112;
        id v37 = v19;
        _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "%@ failed: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    char v18 = 1;
  }
  [v6 reset];

  return v18;
}

- (id)managedObjectContextForMigrationInStore:(id)a3 name:(const char *)a4 concurrencyType:(unint64_t)a5
{
  id v8 = [a3 persistentStoreCoordinator];
  uint64_t v9 = [(PLModelMigrator *)self managedObjectContextForMigrationWithName:a4 persistentStoreCoordinator:v8 concurrencyType:a5];

  return v9;
}

- (id)managedObjectContextForMigrationWithName:(const char *)a3 persistentStoreCoordinator:(id)a4 concurrencyType:(unint64_t)a5
{
  id v9 = a4;
  uint64_t v10 = *MEMORY[0x1E4F1C1C0];
  if (a5 != 1 && v10 != a5)
  {
    uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
    [v17 handleFailureInMethod:a2 object:self file:@"PLModelMigrator.m" lineNumber:605 description:@"unexpected concurrency type for migration context"];
  }
  pl_dispatch_once();
  id v11 = (id)managedObjectContextForMigrationWithName_persistentStoreCoordinator_concurrencyType__pl_once_object_20;
  BOOL v12 = (void *)[objc_alloc(MEMORY[0x1E4F1C110]) initWithConcurrencyType:a5];
  uint64_t v13 = [NSString stringWithUTF8String:a3];
  [v12 setName:v13];

  [v12 setPersistentStoreCoordinator:v9];
  [v12 setMergePolicy:v11];
  if (v10 == a5)
  {
    id v14 = [(PLModelMigrator *)self pathManager];
    uint64_t v15 = [v12 userInfo];
    [v15 setObject:v14 forKeyedSubscript:@"com.apple.photos.PLModelMigratorPathManagerKey"];
  }
  else
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __103__PLModelMigrator_managedObjectContextForMigrationWithName_persistentStoreCoordinator_concurrencyType___block_invoke_2;
    v18[3] = &unk_1E5875E18;
    id v19 = v12;
    char v20 = self;
    [v19 performBlockAndWait:v18];
  }
  return v12;
}

void __103__PLModelMigrator_managedObjectContextForMigrationWithName_persistentStoreCoordinator_concurrencyType___block_invoke_2(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 40) pathManager];
  BOOL v2 = [*(id *)(a1 + 32) userInfo];
  [v2 setObject:v3 forKeyedSubscript:@"com.apple.photos.PLModelMigratorPathManagerKey"];
}

void __103__PLModelMigrator_managedObjectContextForMigrationWithName_persistentStoreCoordinator_concurrencyType___block_invoke()
{
  uint64_t v0 = [(NSMergePolicy *)[PLMergePolicy alloc] initWithMergeType:2];
  v1 = (void *)managedObjectContextForMigrationWithName_persistentStoreCoordinator_concurrencyType__pl_once_object_20;
  managedObjectContextForMigrationWithName_persistentStoreCoordinator_concurrencyType__pl_once_object_20 = (uint64_t)v0;
}

- (BOOL)_fixIncorrectThumbnailTablesInStore:(id)a3 deferHintChanges:(BOOL)a4
{
  uint64_t v4 = a4;
  id v6 = a3;
  int v7 = [(PLModelMigrator *)self pathManager];
  +[PLThumbnailManagerCore removeThumbnailTablesUnsupportedOnly:1 withPathManager:v7];

  id v8 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v6, "-[PLModelMigrator _fixIncorrectThumbnailTablesInStore:deferHintChanges:]", *MEMORY[0x1E4F1C1C0]);
  id v9 = objc_opt_class();
  uint64_t v10 = [(PLModelMigrator *)self _migrationThumbnailManagerWithStore:v6];

  LOBYTE(v4) = [v9 resetThumbnailIndexesAndInitiateThumbnailRebuildRequestIfSuccessfulForForThumbnailManager:v10 deferHintChanges:v4 inContext:v8];
  return v4;
}

- (BOOL)postProcessThumbnailsOnlyIfVersionMismatchOrMissing:(BOOL *)a3 coordinator:(id)a4
{
  id v6 = a4;
  int v7 = [(PLModelMigrator *)self pathManager];
  BOOL v8 = +[PLThumbnailManagerCore hasThumbnailConfigMismatchWithPathManager:v7 comparedToConfigPhase:1];

  id v9 = [(PLModelMigrator *)self pathManager];
  BOOL v10 = +[PLThumbnailManagerCore isMissingThumbnailTablesWithPathManager:v9];

  if (PLIsAssetsdProxyService() || !v8 && !v10)
  {
    if (a3) {
      *a3 = 0;
    }
    char v15 = 1;
  }
  else
  {
    if (a3) {
      *a3 = 1;
    }
    id v11 = [v6 persistentStores];
    BOOL v12 = [v11 firstObject];

    uint64_t v13 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", v12, "-[PLModelMigrator postProcessThumbnailsOnlyIfVersionMismatchOrMissing:coordinator:]", *MEMORY[0x1E4F1C1C0]);
    id v14 = [(PLModelMigrator *)self _migrationThumbnailManagerWithStore:v12];
    char v15 = [v14 resetThumbnailsForced:0 isMissingTables:v10 inContext:v13];
  }
  return v15;
}

- (unint64_t)_assetCountForContext:(id)a3
{
  id v3 = a3;
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __41__PLModelMigrator__assetCountForContext___block_invoke;
  v7[3] = &unk_1E5875E68;
  id v9 = &v10;
  id v4 = v3;
  id v8 = v4;
  [v4 performBlockAndWait:v7];
  unint64_t v5 = v11[3];

  _Block_object_dispose(&v10, 8);
  return v5;
}

void __41__PLModelMigrator__assetCountForContext___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1C0D0]);
  id v3 = +[PLManagedAsset entityName];
  id v4 = (void *)[v2 initWithEntityName:v3];

  unint64_t v5 = *(void **)(a1 + 32);
  id v10 = 0;
  uint64_t v6 = [v5 countForFetchRequest:v4 error:&v10];
  id v7 = v10;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(void *)(v8 + 24) == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)(v8 + 24) = 0;
    id v9 = PLMigrationGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138543362;
      id v12 = v7;
      _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_ERROR, "Failed to count the number of assets. Error: %{public}@", buf, 0xCu);
    }
  }
}

- (unint64_t)_assetCountForLibrary:(id)a3
{
  id v4 = [a3 managedObjectContext];
  unint64_t v5 = [(PLModelMigrator *)self _assetCountForContext:v4];

  return v5;
}

- (unint64_t)_assetCountForStore:(id)a3
{
  id v4 = -[PLModelMigrator managedObjectContextForMigrationInStore:name:concurrencyType:](self, "managedObjectContextForMigrationInStore:name:concurrencyType:", a3, "-[PLModelMigrator _assetCountForStore:]", 1);
  unint64_t v5 = [(PLModelMigrator *)self _assetCountForContext:v4];

  return v5;
}

- (void)validateCurrentModelVersion
{
}

- (void)_validateCurrentModelVersionAttempt:(int64_t)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((PLIsAssetsd() & 1) == 0)
  {
    unint64_t v5 = [MEMORY[0x1E4F8B980] systemLibraryURL];
    uint64_t v6 = +[PLPhotoLibraryBundleController sharedAssetsdClientForPhotoLibraryURL:v5];
    id v7 = [v6 libraryClient];
    uint64_t v8 = [v7 getCurrentModelVersion];

    if (a3 <= 9 && v8 == -1)
    {
      id v9 = PLMigrationGetLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10[0] = 67109376;
        v10[1] = a3 + 1;
        __int16 v11 = 1024;
        int v12 = 10;
        _os_log_impl(&dword_19B3C7000, v9, OS_LOG_TYPE_DEFAULT, "Error getting current model version. Will retry (%d/%d).", (uint8_t *)v10, 0xEu);
      }

      sleep(1u);
      [(PLModelMigrator *)self _validateCurrentModelVersionAttempt:a3 + 1];
    }
    else if (v8 == -1)
    {
      [(PLModelMigrator *)self _validateCurrentModelVersionFailedWithNoVersionFromServer];
    }
    else if (v8 != +[PLModelMigrator currentModelVersion])
    {
      [(PLModelMigrator *)self _validateCurrentModelVersionFailedWithMismatchedVersion:v8];
    }
  }
}

- (void)_validateCurrentModelVersionFailedWithMismatchedVersion:(int64_t)a3
{
  objc_opt_class();
  id v4 = PLMigrationGetLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109634;
    v5[1] = [(id)objc_opt_class() currentModelVersion];
    __int16 v6 = 2048;
    int64_t v7 = a3;
    __int16 v8 = 2112;
    id v9 = @"Your Photos installation appears to be broken, reinstall root and reboot";
    _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_ERROR, "Cannot open or create database with model version %d, assetsd is using model version %lld. %@", (uint8_t *)v5, 0x1Cu);
  }

  __break(1u);
}

- (void)_validateCurrentModelVersionFailedWithNoVersionFromServer
{
  objc_opt_class();
  id v2 = PLMigrationGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v6[0] = 67109378;
    v6[1] = [(id)objc_opt_class() currentModelVersion];
    __int16 v7 = 2112;
    __int16 v8 = @"Your Photos installation appears to be broken, reinstall root and reboot";
    _os_log_impl(&dword_19B3C7000, v2, OS_LOG_TYPE_ERROR, "Cannot open or create database with model version %d, assetsd failed to validate current model version. This is most likely because assetsd is misconfigured, missing or cannot run.  %@", (uint8_t *)v6, 0x12u);
  }

  id v3 = PLMigrationGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl(&dword_19B3C7000, v3, OS_LOG_TYPE_ERROR, "Triggering stackshot report to diagnose assetsd state", (uint8_t *)v6, 2u);
  }

  id v4 = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 1);
  unint64_t v5 = (void (*)(__CFString *, uint64_t))dlsym(v4, "WriteStackshotReport");
  if (v5) {
    v5(@"_validateCurrentModelVersionFailedWithNoVersionFromServer", 3131746989);
  }
  __break(1u);
}

- (BOOL)isCloudPhotoLibraryEnabled
{
  id v2 = [(PLModelMigrator *)self pathManager];
  id v3 = [v2 libraryURL];
  char v4 = PLIsCloudPhotoLibraryEnabledForPhotoLibraryURL(v3);

  return v4;
}

- (id)newShortLivedLibraryForRebuildWithName:(const char *)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = objc_alloc_init(PLPhotoLibraryOptions);
  [(PLPhotoLibraryOptions *)v5 setRequiredState:6];
  [(PLPhotoLibraryOptions *)v5 setRefreshesAfterSave:0];
  [(PLPhotoLibraryOptions *)v5 setAutomaticallyPinToFirstFetch:0];
  __int16 v6 = [(PLModelMigrator *)self pathManager];
  __int16 v7 = [v6 libraryURL];

  id v12 = 0;
  id v8 = +[PLPhotoLibrary newPhotoLibraryWithName:a3 loadedFromURL:v7 options:v5 error:&v12];
  id v9 = v12;
  if (!v8)
  {
    id v10 = PLMigrationGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412546;
      id v14 = v7;
      __int16 v15 = 2112;
      id v16 = v9;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "failed to load photo library with url %@, error: %@", buf, 0x16u);
    }
  }
  return v8;
}

- (id)newShortLivedLibraryWithName:(const char *)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = objc_alloc_init(PLPhotoLibraryOptions);
  [(PLPhotoLibraryOptions *)v5 setRequiredState:6];
  [(PLPhotoLibraryOptions *)v5 setRefreshesAfterSave:0];
  __int16 v6 = [(PLModelMigrator *)self pathManager];
  __int16 v7 = [v6 libraryURL];

  id v12 = 0;
  id v8 = +[PLPhotoLibrary newPhotoLibraryWithName:a3 loadedFromURL:v7 options:v5 error:&v12];
  id v9 = v12;
  if (!v8)
  {
    id v10 = PLMigrationGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412546;
      id v14 = v7;
      __int16 v15 = 2112;
      id v16 = v9;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "failed to load photo library with url %@, error: %@", buf, 0x16u);
    }
  }
  return v8;
}

- (PLGraphCache)graphCache
{
  return (PLGraphCache *)[(PLLazyObject *)self->_lazyGraphCache objectValue];
}

- (void)migrationLoggerClose
{
}

uint64_t __39__PLModelMigrator_migrationLoggerClose__block_invoke(uint64_t a1, void *a2)
{
  return [a2 close];
}

- (id)migrationLogger
{
  return (id)[(PLLazyObject *)self->_lazyMigrationLogger objectValue];
}

- (PLDeviceRestoreMigrationPostProcessingSupport)postProcessingToken
{
  return (PLDeviceRestoreMigrationPostProcessingSupport *)[(PLLazyObject *)self->_lazyDeviceRestoreMigrationPostProcessingSupport objectValue];
}

- (id)newDeviceRestoreMigrationSupport
{
  id v3 = [(PLModelMigrator *)self pathManager];
  int v4 = [v3 isDeviceRestoreSupported];

  if (!v4) {
    return 0;
  }
  unint64_t v5 = [(PLModelMigrator *)self pathManager];
  __int16 v6 = [v5 libraryURL];
  __int16 v7 = +[PLLibraryServicesManager libraryServicesManagerForLibraryURL:v6];

  id v8 = [[PLDeviceRestoreMigrationSupport alloc] initWithLibraryServicesManager:v7];
  return v8;
}

- (PLDeviceRestoreMigrationSupport)deviceRestoreMigrationSupport
{
  return (PLDeviceRestoreMigrationSupport *)[(PLLazyObject *)self->_lazyDeviceRestoreMigrationSupport objectValue];
}

- (id)_migrationThumbnailManagerWithStore:(id)a3
{
  id v4 = a3;
  unint64_t v5 = self;
  objc_sync_enter(v5);
  thumbnailManager = v5->_thumbnailManager;
  if (!thumbnailManager)
  {
    __int16 v7 = [[PLThumbnailManager alloc] initWithPhotoLibraryPathManager:v5->_pathManager storeFromMigration:v4];
    id v8 = v5->_thumbnailManager;
    v5->_thumbnailManager = v7;

    thumbnailManager = v5->_thumbnailManager;
  }
  id v9 = thumbnailManager;
  objc_sync_exit(v5);

  return v9;
}

- (PLCoreAnalyticsEventManager)analyticsEventManager
{
  return (PLCoreAnalyticsEventManager *)[(PLLazyObject *)self->_lazyCoreAnalysticsEventManager objectValue];
}

- (PLModelMigrator)initWithPathManager:(id)a3
{
  id v5 = a3;
  v47.receiver = self;
  v47.super_class = (Class)PLModelMigrator;
  __int16 v6 = [(PLModelMigrator *)&v47 init];
  if (v6)
  {
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    v6->_startTime = v7;
    objc_storeStrong((id *)&v6->_pathManager, a3);
    v6->_recordMigrationMetadataLock._os_unfair_lock_opaque = 0;
    *(void *)&v6->_storeMetadataLock._os_unfair_lock_opaque = 0;
    id v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    uint64_t v9 = pl_dispatch_queue_create_with_fallback_qos();
    fileSystemLoadQueue = v6->_fileSystemLoadQueue;
    v6->_fileSystemLoadQueue = (OS_dispatch_queue *)v9;

    dispatch_group_t v11 = dispatch_group_create();
    fileSystemLoadGroup = v6->_fileSystemLoadGroup;
    v6->_fileSystemLoadGroup = (OS_dispatch_group *)v11;

    id v13 = objc_initWeak(&location, v6);
    id v14 = objc_alloc(MEMORY[0x1E4F8B948]);
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3221225472;
    v44[2] = __39__PLModelMigrator_initWithPathManager___block_invoke;
    v44[3] = &unk_1E5874070;
    objc_copyWeak(&v45, &location);
    uint64_t v15 = [v14 initWithBlock:v44];
    objc_destroyWeak(&v45);
    objc_destroyWeak(&location);
    lazyCoreAnalysticsEventManager = v6->_lazyCoreAnalysticsEventManager;
    v6->_lazyCoreAnalysticsEventManager = (PLLazyObject *)v15;

    id v17 = objc_initWeak(&location, v6);
    id v18 = objc_alloc(MEMORY[0x1E4F8B948]);
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    void v42[2] = __39__PLModelMigrator_initWithPathManager___block_invoke_2;
    v42[3] = &unk_1E5874070;
    objc_copyWeak(&v43, &location);
    uint64_t v19 = [v18 initWithBlock:v42];
    objc_destroyWeak(&v43);
    objc_destroyWeak(&location);
    lazyDeviceRestoreMigrationSupport = v6->_lazyDeviceRestoreMigrationSupport;
    v6->_lazyDeviceRestoreMigrationSupport = (PLLazyObject *)v19;

    id v21 = objc_initWeak(&location, v6);
    id v22 = objc_alloc(MEMORY[0x1E4F8B948]);
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = __39__PLModelMigrator_initWithPathManager___block_invoke_3;
    v40[3] = &unk_1E5874070;
    objc_copyWeak(&v41, &location);
    uint64_t v23 = [v22 initWithBlock:v40];
    objc_destroyWeak(&v41);
    objc_destroyWeak(&location);
    lazyDeviceRestoreMigrationPostProcessingSupport = v6->_lazyDeviceRestoreMigrationPostProcessingSupport;
    v6->_lazyDeviceRestoreMigrationPostProcessingSupport = (PLLazyObject *)v23;

    id v25 = objc_initWeak(&location, v6);
    id v26 = objc_alloc(MEMORY[0x1E4F8B948]);
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __39__PLModelMigrator_initWithPathManager___block_invoke_4;
    v38[3] = &unk_1E5874070;
    objc_copyWeak(&v39, &location);
    uint64_t v27 = [v26 initWithRetriableBlock:v38];
    objc_destroyWeak(&v39);
    objc_destroyWeak(&location);
    lazyMigrationLogger = v6->_lazyMigrationLogger;
    v6->_lazyMigrationLogger = (PLLazyObject *)v27;

    uint64_t v29 = [MEMORY[0x1E4F28F90] discreteProgressWithTotalUnitCount:1];
    progress = v6->_progress;
    v6->_progress = (NSProgress *)v29;

    id v31 = objc_initWeak(&location, v6);
    id v32 = objc_alloc(MEMORY[0x1E4F8B948]);
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    void v36[2] = __39__PLModelMigrator_initWithPathManager___block_invoke_5;
    void v36[3] = &unk_1E5874070;
    objc_copyWeak(&v37, &location);
    uint64_t v33 = [v32 initWithBlock:v36];
    objc_destroyWeak(&v37);
    objc_destroyWeak(&location);
    lazyGraphCache = v6->_lazyGraphCache;
    v6->_lazyGraphCache = (PLLazyObject *)v33;
  }
  return v6;
}

id __39__PLModelMigrator_initWithPathManager___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    id v2 = objc_alloc_init(MEMORY[0x1E4F8B8C0]);
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id __39__PLModelMigrator_initWithPathManager___block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained) {
    id v3 = (void *)[WeakRetained newDeviceRestoreMigrationSupport];
  }
  else {
    id v3 = 0;
  }

  return v3;
}

PLDeviceRestoreMigrationPostProcessingSupport *__39__PLModelMigrator_initWithPathManager___block_invoke_3(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    id v2 = [[PLDeviceRestoreMigrationPostProcessingSupport alloc] initWithModelMigrator:WeakRetained];
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id __39__PLModelMigrator_initWithPathManager___block_invoke_4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = [MEMORY[0x1E4F8B8E0] setupWithLibraryIdentifier:0 type:1];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

PLGraphCache *__39__PLModelMigrator_initWithPathManager___block_invoke_5(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    id v2 = objc_alloc_init(PLGraphCache);
  }
  else {
    id v2 = 0;
  }

  return v2;
}

+ (BOOL)rebuildMomentsInContext:(id)a3 pathManager:(id)a4 deleteExistingMoments:(BOOL)a5 targetedAssetOIDs:(id)a6
{
  BOOL v7 = a5;
  id v9 = a3;
  id v10 = a4;
  id v11 = a6;
  if (PLPlatformMomentsSupported())
  {
    id v12 = [[PLMomentGenerationDataManager alloc] initWithManagedObjectContext:v9 pathManagerForLightweightMigration:v10];
    pl_dispatch_once();
    +[PLMomentGenerationDataManager setManagerMomentarilyBlessed:v12];
    id v13 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v14 = v13;
    if (v7) {
      [v13 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:PLMomentGenerationShouldDeleteAllMomentsKey];
    }
    if ([v11 count]) {
      [v14 setObject:v11 forKeyedSubscript:PLMomentGenerationTargetedAssetOIDsKey];
    }
    uint64_t v15 = [(PLMomentGenerationDataManager *)v12 generator];
    [v15 rebuildAllMomentsWithOptions:v14 completionHandler:0];

    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __95__PLModelMigrator_rebuildMomentsInContext_pathManager_deleteExistingMoments_targetedAssetOIDs___block_invoke;
    v18[3] = &unk_1E5875CE0;
    uint64_t v19 = v12;
    id v16 = v12;
    [(PLMomentGenerationDataManager *)v16 performBlock:v18 synchronously:1 completionHandler:0];
  }
  return 1;
}

void __95__PLModelMigrator_rebuildMomentsInContext_pathManager_deleteExistingMoments_targetedAssetOIDs___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v1 = *(void **)(a1 + 32);
  id v6 = 0;
  id v2 = [v1 orphanedAssetIDsWithError:&v6];
  id v3 = v6;
  if ([v2 count])
  {
    id v4 = PLMigrationGetLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = [v2 count];
      *(_DWORD *)CGRect buf = 67109378;
      int v8 = v5;
      __int16 v9 = 2112;
      id v10 = v2;
      _os_log_impl(&dword_19B3C7000, v4, OS_LOG_TYPE_ERROR, "Orphaned asset IDs (%d) detected after rebuilding moments: %@", buf, 0x12u);
    }
  }
}

+ (id)schemaIncompatibilityDetailsForStoreMetadata:(id)a3 model:(id)a4
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a4;
  id v6 = [a3 objectForKey:@"NSStoreModelVersionHashes"];
  char v24 = v5;
  BOOL v7 = [v5 entityVersionHashesByName];
  int v8 = (void *)MEMORY[0x1E4F1CA80];
  __int16 v9 = [v6 allKeys];
  id v10 = [v8 setWithArray:v9];

  uint64_t v11 = (void *)MEMORY[0x1E4F1CAD0];
  id v12 = [v7 allKeys];
  id v13 = [v11 setWithArray:v12];
  [v10 unionSet:v13];

  id v25 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v14 = v10;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v27 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        char v20 = [v6 objectForKeyedSubscript:v19];
        id v21 = [v7 objectForKeyedSubscript:v19];
        if ((PLObjectIsEqual() & 1) == 0)
        {
          id v22 = [NSString stringWithFormat:@"model(%@) vs. store(%@)", v21, v20];
          [v25 setObject:v22 forKeyedSubscript:v19];
        }
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v16);
  }

  return v25;
}

+ (BOOL)shouldImportAssetsFromDCIMSubDirectoryAtURL:(id)a3 assetsKind:(int *)a4
{
  id v5 = a3;
  id v6 = (void *)MEMORY[0x19F38D3B0]();
  id v22 = 0;
  int v7 = [v5 getResourceValue:&v22 forKey:*MEMORY[0x1E4F1C6E8] error:0];
  id v8 = v22;
  if (v7)
  {
    __int16 v9 = [MEMORY[0x1E4F28FE8] scannerWithString:v8];
    [v9 setCharactersToBeSkipped:0];
    int v21 = 0;
    char v10 = 0;
    id v11 = 0;
    if ([v9 scanInt:&v21] && v21 >= 100 && v21 <= 99999)
    {
      id v12 = [MEMORY[0x1E4F28B88] alphanumericCharacterSet];
      id v20 = 0;
      char v13 = [v9 scanCharactersFromSet:v12 intoString:&v20];
      id v11 = v20;
      if (v13)
      {
        int v14 = [v9 isAtEnd];

        if (v14)
        {
          int v15 = [v11 isEqualToString:@"APPLE"];
          int v16 = [v11 isEqualToString:@"IMPRT"];
          int v17 = [v11 isEqualToString:@"SYNCD"];
          char v10 = v17 | v16 | v15;
          if (a4)
          {
            if (v15) {
              int v18 = 0;
            }
            else {
              int v18 = 7;
            }
            if (v16) {
              int v18 = 1;
            }
            if (v17) {
              int v18 = 4;
            }
            *a4 = v18;
          }
          goto LABEL_19;
        }
      }
      else
      {
      }
      char v10 = 0;
    }
LABEL_19:

    goto LABEL_20;
  }
  char v10 = 0;
LABEL_20:

  return v10;
}

+ (id)extractPathToAssetUUIDRecoveryMappingFromDatabasePath:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [MEMORY[0x1E4F1CA60] dictionary];
  id v5 = (void *)MEMORY[0x19F38D3B0]();
  id v6 = v3;
  int v7 = PLOpenSQLTransactionWithDBPath((const char *)[v6 UTF8String]);
  id v8 = v7;
  if (v7)
  {
    ppStmt = 0;
    int v9 = sqlite3_prepare_v2(v7, "SELECT zdirectory, zfilename, zuuid FROM zasset;", -1, &ppStmt, 0);
    if (v9) {
      goto LABEL_22;
    }
    while (sqlite3_step(ppStmt) == 100)
    {
      char v10 = (void *)MEMORY[0x19F38D3B0]();
      id v11 = sqlite3_column_text(ppStmt, 0);
      if (v11)
      {
        id v12 = [NSString stringWithUTF8String:v11];
      }
      else
      {
        id v12 = 0;
      }
      char v13 = sqlite3_column_text(ppStmt, 1);
      if (v13)
      {
        int v14 = [NSString stringWithUTF8String:v13];
      }
      else
      {
        int v14 = 0;
      }
      int v15 = [v12 stringByAppendingPathComponent:v14];
      if ([v15 length])
      {
        int v16 = sqlite3_column_text(ppStmt, 2);
        if (v16)
        {
          int v17 = [NSString stringWithUTF8String:v16];
        }
        else
        {
          int v17 = 0;
        }
        if ([v17 length]) {
          [v4 setObject:v17 forKey:v15];
        }
      }
    }
    int v9 = sqlite3_finalize(ppStmt);
    if (v9)
    {
LABEL_22:
      uint64_t v19 = PLMigrationGetLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = sqlite3_errmsg(v8);
        *(_DWORD *)CGRect buf = 67109378;
        int v24 = v9;
        __int16 v25 = 2080;
        long long v26 = v20;
        _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "Failed to fetch path to uuid mappings %d %s", buf, 0x12u);
      }

      PLRollbackSQLTransactionAndCloseDB(v8);
    }
    else
    {
      PLCommitSQLTransactionAndCloseDB(v8);
    }
  }
  else
  {
    int v18 = PLMigrationGetLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "Failed to open database for extracting path to uuid mappings", buf, 2u);
    }
  }

  return v4;
}

+ (BOOL)_writeNumber:(id)a3 forKey:(id)a4 pathManager:(id)a5 error:(id *)a6
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  context = (void *)MEMORY[0x19F38D3B0]();
  uint64_t v27 = v10;
  id v31 = 0;
  id v32 = 0;
  id v11 = [v10 photosDatabasePath];
  +[PLManagedObjectContext getPersistentStoreURL:&v32 options:&v31 forDatabasePath:v11];
  id v12 = v32;
  id v13 = v31;

  uint64_t v14 = *MEMORY[0x1E4F1BF70];
  id v30 = 0;
  int v15 = [MEMORY[0x1E4F1C188] metadataForPersistentStoreOfType:v14 URL:v12 options:v13 error:&v30];
  id v16 = v30;
  if (v15) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (!v17)
  {
    id v18 = v16;
    uint64_t v19 = PLMigrationGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412546;
      id v34 = v9;
      __int16 v35 = 2112;
      id v36 = v18;
      _os_log_impl(&dword_19B3C7000, v19, OS_LOG_TYPE_ERROR, "Failed to get metadata while setting %@ %@", buf, 0x16u);
    }
    goto LABEL_9;
  }
  uint64_t v19 = [v15 valueForKey:v9];
  if ([v19 isEqual:v8])
  {
    id v18 = 0;
LABEL_9:
    char v20 = 1;
    int v21 = a6;
    goto LABEL_15;
  }
  id v22 = (void *)[v15 mutableCopy];
  id v25 = v8;
  [v22 setObject:v8 forKey:v9];
  id v29 = 0;
  char v20 = [MEMORY[0x1E4F1C188] setMetadata:v22 forPersistentStoreOfType:v14 URL:v12 options:v13 error:&v29];
  id v18 = v29;
  int v21 = a6;
  if ((v20 & 1) == 0)
  {
    uint64_t v23 = PLMigrationGetLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412546;
      id v34 = v9;
      __int16 v35 = 2112;
      id v36 = v18;
      _os_log_impl(&dword_19B3C7000, v23, OS_LOG_TYPE_ERROR, "Failed to set %@ %@", buf, 0x16u);
    }
  }
  id v8 = v25;
LABEL_15:

  if (v21 && v18) {
    id *v21 = v18;
  }

  return v20;
}

+ (BOOL)_readBooleanFlagWithKey:(id)a3 fromMetadataWithMOC:(id)a4 pathManager:(id)a5
{
  id v5 = [a1 _readNumberWithKey:a3 fromMetadataWithMOC:a4 pathManager:a5 error:0];
  char v6 = [v5 BOOLValue];

  return v6;
}

+ (id)_readNumberWithKey:(id)a3 fromMetadataWithMOC:(id)a4 pathManager:(id)a5 error:(id *)a6
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = (void *)MEMORY[0x19F38D3B0]();
  if (v10)
  {
    id v13 = [v10 persistentStoreCoordinator];
    uint64_t v14 = [v13 persistentStores];
    if ([v14 count])
    {
      int v15 = [v14 firstObject];
      id v16 = [v13 metadataForPersistentStore:v15];

      if (v16)
      {
        id v17 = 0;
        goto LABEL_7;
      }
    }
    else
    {
    }
  }
  id v26 = 0;
  id v27 = 0;
  id v18 = [v11 photosDatabasePath];
  +[PLManagedObjectContext getPersistentStoreURL:&v27 options:&v26 forDatabasePath:v18];
  id v19 = v27;
  id v20 = v26;

  uint64_t v21 = *MEMORY[0x1E4F1BF70];
  id v25 = 0;
  id v16 = [MEMORY[0x1E4F1C188] metadataForPersistentStoreOfType:v21 URL:v19 options:v20 error:&v25];
  id v17 = v25;

LABEL_7:
  if (v16) {
    BOOL v22 = v17 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22)
  {
    uint64_t v23 = [v16 valueForKey:v9];
  }
  else
  {

    uint64_t v23 = 0;
    if (a6 && v17)
    {
      uint64_t v23 = 0;
      *a6 = v17;
    }
  }

  return v23;
}

+ (BOOL)waitForDataMigratorToExit
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  if (PLPlatformWaitsForDataMigrator()) {
    pl_dispatch_once();
  }
  char v2 = *((unsigned char *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v2;
}

void __44__PLModelMigrator_waitForDataMigratorToExit__block_invoke(uint64_t a1)
{
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v2 = (unsigned int (*)(void))getDMIsMigrationNeededSymbolLoc_ptr;
  int v15 = getDMIsMigrationNeededSymbolLoc_ptr;
  if (!getDMIsMigrationNeededSymbolLoc_ptr)
  {
    uint64_t v8 = MEMORY[0x1E4F143A8];
    uint64_t v9 = 3221225472;
    id v10 = __getDMIsMigrationNeededSymbolLoc_block_invoke;
    id v11 = &unk_1E5875840;
    id v3 = DataMigrationLibrary();
    v13[3] = (uint64_t)dlsym(v3, "DMIsMigrationNeeded");
    getDMIsMigrationNeededSymbolLoc_ptr = (_UNKNOWN *)v13[3];
    char v2 = (unsigned int (*)(void))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v2)
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    char v7 = [NSString stringWithUTF8String:"BOOL PLDMIsMigrationNeeded(void)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"PLModelMigrator.m", 210, @"%s", dlerror(), v8, v9, v10, v11);
LABEL_12:

    __break(1u);
    return;
  }
  if (!v2()) {
    return;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v4 = (void (*)(void))getDMPerformMigrationIfNeededSymbolLoc_ptr;
  int v15 = getDMPerformMigrationIfNeededSymbolLoc_ptr;
  if (!getDMPerformMigrationIfNeededSymbolLoc_ptr)
  {
    uint64_t v8 = MEMORY[0x1E4F143A8];
    uint64_t v9 = 3221225472;
    id v10 = __getDMPerformMigrationIfNeededSymbolLoc_block_invoke;
    id v11 = &unk_1E5875840;
    id v5 = DataMigrationLibrary();
    v13[3] = (uint64_t)dlsym(v5, "DMPerformMigrationIfNeeded");
    getDMPerformMigrationIfNeededSymbolLoc_ptr = (_UNKNOWN *)v13[3];
    uint64_t v4 = (void (*)(void))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v4)
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    char v7 = [NSString stringWithUTF8String:"void PLDMPerformMigrationIfNeeded(void)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"PLModelMigrator.m", 211, @"%s", dlerror(), v8, v9, v10, v11);
    goto LABEL_12;
  }
  v4();
}

+ (BOOL)shouldPromptUserForRebuildWithLibraryPathManager:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([v3 isSystemPhotoLibraryPathManager])
  {
    char v4 = 1;
  }
  else
  {
    id v5 = (void *)MEMORY[0x1E4F8B980];
    uint64_t v6 = [v3 libraryURL];
    unint64_t v7 = [v5 wellKnownPhotoLibraryIdentifierForURL:v6];

    if (v7 > 1)
    {
      char v4 = 0;
    }
    else
    {
      uint64_t v8 = [v3 libraryURL];
      id v14 = 0;
      uint64_t v9 = +[PLPhotoLibraryIdentifier photoLibraryIdentifierWithPhotoLibraryURL:v8 createIfMissing:1 error:&v14];
      id v10 = v14;

      if (!v9)
      {
        id v11 = PLMigrationGetLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGRect buf = 138412546;
          id v16 = v3;
          __int16 v17 = 2112;
          id v18 = v10;
          _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "Failed to create identifier for library with path manager %@ %@.", buf, 0x16u);
        }
      }
      uint64_t v12 = [v9 containerIdentifier];
      char v4 = [v12 containsString:@"com.apple."];
    }
  }

  return v4;
}

+ (BOOL)markAssetsWithThumbsForTableRebuildInContext:(id)a3
{
  id v3 = a3;
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __64__PLModelMigrator_markAssetsWithThumbsForTableRebuildInContext___block_invoke;
  v7[3] = &unk_1E5875E68;
  id v4 = v3;
  id v8 = v4;
  uint64_t v9 = &v10;
  objc_msgSend(v4, "pl_performBlockAndWait:", v7);
  char v5 = *((unsigned char *)v11 + 24);

  _Block_object_dispose(&v10, 8);
  return v5;
}

void __64__PLModelMigrator_markAssetsWithThumbsForTableRebuildInContext___block_invoke(uint64_t a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  char v2 = (void *)MEMORY[0x1E4F1C0D0];
  id v3 = +[PLManagedAsset entityName];
  id v4 = [v2 fetchRequestWithEntityName:v3];

  v16[0] = @"thumbnailIndex";
  char v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:1];
  [v4 setPropertiesToFetch:v5];

  [v4 setFetchBatchSize:100];
  uint64_t v6 = objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K >= %d", @"thumbnailIndex", 0);
  [v4 setPredicate:v6];

  unint64_t v7 = [*(id *)(a1 + 32) executeFetchRequest:v4 error:0];
  id v8 = [*(id *)(a1 + 32) enumerateWithIncrementalSaveUsingObjects:v7 withBlock:&__block_literal_global_95];
  uint64_t v9 = PLMigrationGetLog();
  uint64_t v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 136315394;
      char v13 = "+[PLModelMigrator markAssetsWithThumbsForTableRebuildInContext:]_block_invoke";
      __int16 v14 = 2112;
      int v15 = v8;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_ERROR, "%s: failed to mark assets for table thumb rebuild: %@", buf, 0x16u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v10, OS_LOG_TYPE_DEFAULT, "Marked assets for table thumb rebuild.", buf, 2u);
    }

    id v11 = PLMigrationGetLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGRect buf = 0;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Rebuilding image request hints...", buf, 2u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = +[PLResourceInstaller resetImageRequestHintsInContext:*(void *)(a1 + 32)];
  }
}

uint64_t __64__PLModelMigrator_markAssetsWithThumbsForTableRebuildInContext___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 setThumbnailIndex:4294967294];
}

+ (BOOL)resetThumbnailIndexesAndInitiateThumbnailRebuildRequestIfSuccessfulForForThumbnailManager:(id)a3 deferHintChanges:(BOOL)a4 inContext:(id)a5
{
  id v7 = a3;
  id v8 = a5;
  uint64_t v16 = 0;
  __int16 v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 1;
  [v7 addRebuildThumbnailsRequest];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __136__PLModelMigrator_resetThumbnailIndexesAndInitiateThumbnailRebuildRequestIfSuccessfulForForThumbnailManager_deferHintChanges_inContext___block_invoke;
  v12[3] = &unk_1E58711C8;
  id v9 = v8;
  BOOL v15 = a4;
  id v13 = v9;
  __int16 v14 = &v16;
  objc_msgSend(v9, "pl_performBlockAndWait:", v12);
  if (*((unsigned char *)v17 + 24))
  {
    BOOL v10 = 1;
  }
  else
  {
    [v7 removeRebuildThumbnailsRequest:"+[PLModelMigrator resetThumbnailIndexesAndInitiateThumbnailRebuildRequestIfSuccessfulForForThumbnailManager:deferHintChanges:inContext:]"];
    BOOL v10 = *((unsigned char *)v17 + 24) != 0;
  }

  _Block_object_dispose(&v16, 8);
  return v10;
}

void __136__PLModelMigrator_resetThumbnailIndexesAndInitiateThumbnailRebuildRequestIfSuccessfulForForThumbnailManager_deferHintChanges_inContext___block_invoke(uint64_t a1)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  char v2 = (void *)MEMORY[0x1E4F1C038];
  id v3 = +[PLManagedAsset entityName];
  id v4 = [v2 batchUpdateRequestWithEntityName:v3];

  [v4 setResultType:2];
  id v26 = @"thumbnailIndex";
  char v5 = [NSNumber numberWithInt:0xFFFFFFFFLL];
  v27[0] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  [v4 setPropertiesToUpdate:v6];

  id v7 = *(void **)(a1 + 32);
  id v19 = 0;
  id v8 = [v7 executeRequest:v4 error:&v19];
  id v9 = v19;
  BOOL v10 = PLMigrationGetLog();
  id v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = [v8 result];
      *(_DWORD *)CGRect buf = 138412290;
      uint64_t v21 = v12;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_DEFAULT, "Reset thumbnailIndex on %@ assets", buf, 0xCu);
    }
    id v13 = [v8 result];
    uint64_t v14 = [v13 integerValue];

    if (v14 >= 1)
    {
      int v15 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v16 = PLMigrationGetLog();
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        if (v17)
        {
          *(_WORD *)CGRect buf = 0;
          _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Deferring image request hints rebuild", buf, 2u);
        }
      }
      else
      {
        if (v17)
        {
          *(_WORD *)CGRect buf = 0;
          _os_log_impl(&dword_19B3C7000, v16, OS_LOG_TYPE_DEFAULT, "Rebuilding image request hints...", buf, 2u);
        }

        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = +[PLResourceInstaller resetImageRequestHintsInContext:*(void *)(a1 + 32)];
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [v9 userInfo];
      *(_DWORD *)CGRect buf = 136315650;
      uint64_t v21 = "+[PLModelMigrator resetThumbnailIndexesAndInitiateThumbnailRebuildRequestIfSuccessfulForForThumbnailManager:"
            "deferHintChanges:inContext:]_block_invoke";
      __int16 v22 = 2112;
      id v23 = v9;
      __int16 v24 = 2112;
      id v25 = v18;
      _os_log_impl(&dword_19B3C7000, v11, OS_LOG_TYPE_ERROR, "%s: failed to update: %@ %@", buf, 0x20u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

- (void)filesystemImportResultsUpdateKeywordWithImportedAssets:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    char v5 = [v4 firstObject];
    uint64_t v6 = [v5 photoLibrary];

    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __84__PLModelMigrator_Recovery__filesystemImportResultsUpdateKeywordWithImportedAssets___block_invoke;
    v8[3] = &unk_1E5873A50;
    id v9 = v6;
    id v10 = v4;
    id v11 = self;
    id v7 = v6;
    [v7 performTransaction:v8];
  }
}

void __84__PLModelMigrator_Recovery__filesystemImportResultsUpdateKeywordWithImportedAssets___block_invoke(id *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  char v2 = (void *)MEMORY[0x1E4F1C0D0];
  id v3 = +[PLManagedAsset entityName];
  id v4 = [v2 fetchRequestWithEntityName:v3];

  [v4 setFetchBatchSize:100];
  char v5 = [a1[4] managedObjectContext];
  id v18 = 0;
  unint64_t v6 = [v5 countForFetchRequest:v4 error:&v18];
  id v7 = v18;

  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v8 = PLMigrationGetLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412290;
      id v20 = v7;
      _os_log_impl(&dword_19B3C7000, v8, OS_LOG_TYPE_ERROR, "Post filesystem import, failed to obtain asset count. Error: %@", buf, 0xCu);
    }
    goto LABEL_6;
  }
  if (v6 > [a1[5] count])
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    [v8 setDateStyle:2];
    [v8 setTimeStyle:2];
    id v9 = PLServicesLocalizedFrameworkStringForAssetsd();
    id v10 = [MEMORY[0x1E4F1C9C8] now];
    BOOL v17 = [v8 stringFromDate:v10];
    id v11 = PFStringWithValidatedFormat();

    uint64_t v12 = [PLKeywordManager alloc];
    id v13 = objc_msgSend(a1[6], "pathManager", v17);
    uint64_t v14 = [(PLKeywordManager *)v12 initWithPathManager:v13];

    int v15 = [MEMORY[0x1E4F1CAD0] setWithArray:a1[5]];
    uint64_t v16 = [a1[4] managedObjectContext];
    [(PLKeywordManager *)v14 setKeyword:v11 forAssets:v15 managedObjectContext:v16];

LABEL_6:
  }
}

+ (BOOL)enumerateObjectsWithIncrementalSaveDefaultBatchSizeFetchRequest:(id)a3 managedObjectContext:(id)a4 count:(unint64_t *)a5 error:(id *)a6 block:(id)a7
{
  id v11 = a4;
  id v12 = a7;
  id v13 = a3;
  [v13 setFetchBatchSize:100];
  id v19 = 0;
  uint64_t v14 = [v11 executeFetchRequest:v13 error:&v19];

  id v15 = v19;
  if (v14)
  {
    uint64_t v16 = [v11 enumerateWithIncrementalSaveUsingObjects:v14 withBlock:v12];

    id v15 = (id)v16;
    if (!v16)
    {
      BOOL v17 = 1;
      if (!a5) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  if (a6) {
    *a6 = v15;
  }

  BOOL v17 = 0;
  if (a5) {
LABEL_6:
  }
    *a5 = [v14 count];
LABEL_7:

  return v17;
}

+ (BOOL)executeBatchUpdateWithEntityName:(id)a3 predicate:(id)a4 propertiesToUpdate:(id)a5 managedObjectContext:(id)a6 error:(id *)a7
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  uint64_t v14 = (void *)MEMORY[0x1E4F1C038];
  id v15 = a6;
  uint64_t v16 = [v14 batchUpdateRequestWithEntityName:v11];
  [v16 setPredicate:v12];
  [v16 setPropertiesToUpdate:v13];
  [v16 setResultType:2];
  id v23 = 0;
  BOOL v17 = [v15 executeRequest:v16 error:&v23];

  id v18 = v23;
  id v19 = PLMigrationGetLog();
  id v20 = v19;
  if (v17)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = [v17 result];
      *(_DWORD *)CGRect buf = 138413058;
      id v25 = v21;
      __int16 v26 = 2112;
      id v27 = v11;
      __int16 v28 = 2112;
      id v29 = v12;
      __int16 v30 = 2112;
      id v31 = v13;
      _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_DEFAULT, "Batch updated %@ %@ objects with predicate %@, updated properties %@", buf, 0x2Au);
    }
  }
  else
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138413058;
      id v25 = v11;
      __int16 v26 = 2112;
      id v27 = v12;
      __int16 v28 = 2112;
      id v29 = v13;
      __int16 v30 = 2112;
      id v31 = v18;
      _os_log_impl(&dword_19B3C7000, v20, OS_LOG_TYPE_ERROR, "Batch update request failed, for entity %@, predicate %@, properties to update %@, error: %@", buf, 0x2Au);
    }

    if (a7) {
      *a7 = v18;
    }
  }

  return v17 != 0;
}

+ (BOOL)executeBatchDeleteWithEntityName:(id)a3 predicate:(id)a4 managedObjectContext:(id)a5 error:(id *)a6
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = (void *)MEMORY[0x1E4F1C0D0];
  id v11 = a5;
  id v12 = a4;
  id v13 = [v10 fetchRequestWithEntityName:v9];
  [v13 setPredicate:v12];

  uint64_t v14 = (void *)[objc_alloc(MEMORY[0x1E4F1C018]) initWithFetchRequest:v13];
  [v14 setResultType:2];
  id v21 = 0;
  id v15 = [v11 executeRequest:v14 error:&v21];

  id v16 = v21;
  BOOL v17 = PLMigrationGetLog();
  id v18 = v17;
  if (v16)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGRect buf = 138412546;
      id v23 = v9;
      __int16 v24 = 2112;
      id v25 = v16;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_ERROR, "Batch delete of %@ returned error: %@", buf, 0x16u);
    }

    if (a6) {
      *a6 = v16;
    }
  }
  else
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      id v19 = [v15 result];
      *(_DWORD *)CGRect buf = 138412546;
      id v23 = v9;
      __int16 v24 = 2112;
      id v25 = v19;
      _os_log_impl(&dword_19B3C7000, v18, OS_LOG_TYPE_DEBUG, "Batch delete of %@ with result: %@", buf, 0x16u);
    }
  }

  return v16 == 0;
}

@end