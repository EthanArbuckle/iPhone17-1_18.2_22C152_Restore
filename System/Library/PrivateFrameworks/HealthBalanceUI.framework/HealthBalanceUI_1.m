uint64_t sub_250FCB008()
{
  sub_251039850();
  sub_250FCAF1C();
  return sub_251039890();
}

uint64_t sub_250FCB04C()
{
  return sub_251039890();
}

BOOL sub_250FCB088(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_250FCE614((uint64_t)v7, (uint64_t)v9);
}

unint64_t sub_250FCB0F8()
{
  unint64_t result = qword_269B142E8;
  if (!qword_269B142E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B142E8);
  }
  return result;
}

uint64_t sub_250FCB14C(long long *a1)
{
  long long v2 = v1;
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = *v2;
  swift_bridgeObjectRetain();
  sub_250FAA980(a1, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  sub_250F3A92C((uint64_t)v2 + *(int *)(v12 + 20), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_251039870();
  }
  else
  {
    sub_250FCECBC((uint64_t)v10, (uint64_t)v7);
    sub_251039870();
    OvernightMetricsChartPoint.hash(into:)(a1);
    sub_250FCEC5C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
  }
  sub_250FAAC78();
  v13 = (char *)v2 + *(int *)(v12 + 28);
  long long v14 = *((_OWORD *)v13 + 3);
  v17[2] = *((_OWORD *)v13 + 2);
  v17[3] = v14;
  v17[4] = *((_OWORD *)v13 + 4);
  uint64_t v18 = *((void *)v13 + 10);
  long long v15 = *((_OWORD *)v13 + 1);
  v17[0] = *(_OWORD *)v13;
  v17[1] = v15;
  sub_250FCAF1C();
  sub_251039880();
  return sub_251039880();
}

uint64_t sub_250FCB3A4()
{
  sub_251039850();
  sub_250FCB14C(v1);
  return sub_251039890();
}

uint64_t sub_250FCB3E8()
{
  sub_251039850();
  sub_250FCB14C(v1);
  return sub_251039890();
}

uint64_t sub_250FCB424()
{
  return sub_250FCB46C(&qword_269B142F0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartLayout.Configuration);
}

uint64_t sub_250FCB46C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_250FCB4B4(uint64_t a1, long long *a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 112);
  long long v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  long long v8 = a2[4];
  long long v9 = a2[5];
  long long v10 = a2[6];
  uint64_t v15 = *((void *)a2 + 14);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return sub_250FCEB28((uint64_t)v12, (uint64_t)v14);
}

uint64_t sub_250FCB538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_250FCB39C())
  {
    uint64_t v6 = *(int *)(a3 + 20);
    long long v7 = *(_OWORD *)(a1 + v6 + 80);
    v17[4] = *(_OWORD *)(a1 + v6 + 64);
    _OWORD v17[5] = v7;
    v17[6] = *(_OWORD *)(a1 + v6 + 96);
    uint64_t v18 = *(void *)(a1 + v6 + 112);
    long long v8 = *(_OWORD *)(a1 + v6 + 16);
    v17[0] = *(_OWORD *)(a1 + v6);
    v17[1] = v8;
    long long v9 = *(_OWORD *)(a1 + v6 + 48);
    v17[2] = *(_OWORD *)(a1 + v6 + 32);
    v17[3] = v9;
    uint64_t v10 = a2 + v6;
    long long v11 = *(_OWORD *)(v10 + 48);
    v19[2] = *(_OWORD *)(v10 + 32);
    v19[3] = v11;
    long long v12 = *(_OWORD *)(v10 + 16);
    v19[0] = *(_OWORD *)v10;
    v19[1] = v12;
    uint64_t v20 = *(void *)(v10 + 112);
    long long v13 = *(_OWORD *)(v10 + 96);
    long long v14 = *(_OWORD *)(v10 + 64);
    v19[5] = *(_OWORD *)(v10 + 80);
    v19[6] = v13;
    v19[4] = v14;
    char v15 = sub_250FCB3A0(v17, v19);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_250FCB5EC(uint64_t result, double a2, double a3, double a4)
{
  double v4 = (a3 - a2) * a4;
  double v5 = a2 - v4;
  double v6 = v4 + a3;
  if (a2 - v4 > v4 + a3)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v7 = result;
  sub_250FCFB20(0, &qword_269B13EB8, (uint64_t (*)(uint64_t))sub_250F2F370, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25103AD40;
  *(double *)(inited + 32) = v5;
  *(double *)(inited + 40) = v6;
  long long v9 = sub_250FCAA30(v7);
  sub_250FF6090((uint64_t)v9);
  sub_250FCA284(inited);
  char v11 = v10;
  uint64_t result = swift_bridgeObjectRelease();
  if (v11) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t sub_250FCB6DC(uint64_t a1)
{
  sub_251037740();
  long long v2 = (void (*)(uint64_t))MEMORY[0x263F42CD0];
  sub_250FCB46C(&qword_26B210A88, MEMORY[0x263F42CD0]);
  uint64_t v3 = sub_251039070();
  return sub_250FCBA98(a1, v3, MEMORY[0x263F42CD0], &qword_26B210A90, v2, MEMORY[0x263F42CE8]);
}

unint64_t sub_250FCB7B0(double a1)
{
  uint64_t v2 = sub_251039840();
  return sub_250FCBA00(v2, a1);
}

unint64_t sub_250FCB7F8(uint64_t a1)
{
  sub_2510378C0();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F42E30];
  sub_250FCB46C(&qword_26B210AC0, MEMORY[0x263F42E30]);
  uint64_t v3 = sub_251039070();
  return sub_250FCBA98(a1, v3, MEMORY[0x263F42E30], &qword_26B210AC8, v2, MEMORY[0x263F42E48]);
}

unint64_t sub_250FCB8CC(uint64_t a1)
{
  sub_2510391C0();
  sub_251039850();
  sub_251039200();
  uint64_t v2 = sub_251039890();
  swift_bridgeObjectRelease();
  return sub_250FCBC38(a1, v2);
}

unint64_t sub_250FCB960(uint64_t a1)
{
  uint64_t v2 = sub_251039470();
  return sub_250FCBDB0(a1, v2, (unint64_t *)&qword_269B14308);
}

unint64_t sub_250FCB9B0(uint64_t a1)
{
  uint64_t v2 = sub_251039470();
  return sub_250FCBDB0(a1, v2, &qword_26B2108C0);
}

unint64_t sub_250FCBA00(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_250FCBA98(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  v24 = a5;
  uint64_t v25 = a6;
  v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    char v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_250FCB46C(v23, v24);
      char v19 = sub_2510390F0();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_250FCBC38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_2510391C0();
    uint64_t v8 = v7;
    if (v6 == sub_2510391C0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_2510397F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_2510391C0();
          uint64_t v15 = v14;
          if (v13 == sub_2510391C0() && v15 == v16) {
            break;
          }
          char v18 = sub_2510397F0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_250FCBDB0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_250F408B4(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = sub_251039480();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = sub_251039480();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_250FCBEC4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_251037740();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_250FCF678(0, (unint64_t *)&qword_26B210BF0);
  int v46 = a2;
  uint64_t v10 = sub_251039670();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_250FCB46C(&qword_26B210A88, MEMORY[0x263F42CD0]);
    uint64_t result = sub_251039070();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_250FCC2F4(uint64_t a1, int a2)
{
  return sub_250FCCAB8(a1, a2, MEMORY[0x263F42BC0], (unint64_t *)&qword_26B2102F8, MEMORY[0x263F42BC0]);
}

uint64_t sub_250FCC328(uint64_t a1, int a2)
{
  return sub_250FCC648(a1, a2, (unint64_t *)&qword_269B12E60, (unint64_t *)&qword_269B12E58, (uint64_t (*)(uint64_t))sub_250F2F370);
}

uint64_t sub_250FCC350(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_250FCF714();
  uint64_t v6 = sub_251039670();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  BOOL v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    unint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = sub_251039470();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_250FCC620(uint64_t a1, int a2)
{
  return sub_250FCC648(a1, a2, &qword_26B210C00, &qword_26B210BD8, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_250FCC648(uint64_t a1, int a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v9 = v5;
  uint64_t v11 = sub_2510378C0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v5;
  sub_250FCF5A8(0, a3, a4, a5);
  int v52 = a2;
  uint64_t v16 = sub_251039670();
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_41;
  }
  uint64_t v19 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v20 = *(void *)(v15 + 64);
  v48 = (void *)(v15 + 64);
  if (v19 < 64) {
    uint64_t v21 = ~(-1 << v19);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v20;
  int v46 = v9;
  int64_t v47 = (unint64_t)(v19 + 63) >> 6;
  v49 = (void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  uint64_t v51 = v12;
  unint64_t v23 = (void (**)(char *, unint64_t, uint64_t))(v12 + 32);
  uint64_t v24 = v16 + 64;
  uint64_t result = swift_retain();
  int64_t v26 = 0;
  for (uint64_t i = v17; ; v17 = i)
  {
    if (v22)
    {
      unint64_t v28 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v29 = v28 | (v26 << 6);
      goto LABEL_22;
    }
    int64_t v30 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v30 >= v47) {
      break;
    }
    uint64_t v31 = v48;
    unint64_t v32 = v48[v30];
    ++v26;
    if (!v32)
    {
      int64_t v26 = v30 + 1;
      if (v30 + 1 >= v47) {
        goto LABEL_34;
      }
      unint64_t v32 = v48[v26];
      if (!v32)
      {
        int64_t v33 = v30 + 2;
        if (v33 >= v47)
        {
LABEL_34:
          swift_release();
          uint64_t v9 = v46;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v32 = v48[v33];
        if (!v32)
        {
          while (1)
          {
            int64_t v26 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_43;
            }
            if (v26 >= v47) {
              goto LABEL_34;
            }
            unint64_t v32 = v48[v26];
            ++v33;
            if (v32) {
              goto LABEL_21;
            }
          }
        }
        int64_t v26 = v33;
      }
    }
LABEL_21:
    unint64_t v22 = (v32 - 1) & v32;
    unint64_t v29 = __clz(__rbit64(v32)) + (v26 << 6);
LABEL_22:
    uint64_t v34 = *(void *)(v51 + 72);
    unint64_t v35 = *(void *)(v17 + 48) + v34 * v29;
    if (v52)
    {
      (*v23)(v14, v35, v11);
      uint64_t v36 = *(void *)(*(void *)(v17 + 56) + 8 * v29);
    }
    else
    {
      (*v49)(v14, v35, v11);
      uint64_t v36 = *(void *)(*(void *)(v17 + 56) + 8 * v29);
      swift_bridgeObjectRetain();
    }
    sub_250FCB46C(&qword_26B210AC0, MEMORY[0x263F42E30]);
    uint64_t result = sub_251039070();
    uint64_t v37 = -1 << *(unsigned char *)(v18 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v24 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v38) & ~*(void *)(v24 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v24 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v27 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v24 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v23)(*(void *)(v18 + 48) + v34 * v27, v14, v11);
    *(void *)(*(void *)(v18 + 56) + 8 * v27) = v36;
    ++*(void *)(v18 + 16);
  }
  swift_release();
  uint64_t v9 = v46;
  uint64_t v31 = v48;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v17 + 32);
  if (v44 >= 64) {
    bzero(v31, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v31 = -1 << v44;
  }
  *(void *)(v17 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v9 = v18;
  return result;
}

uint64_t sub_250FCCA84(uint64_t a1, int a2)
{
  return sub_250FCCAB8(a1, a2, MEMORY[0x263F07490], &qword_26B210BF8, MEMORY[0x263F07490]);
}

uint64_t sub_250FCCAB8(uint64_t a1, int a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  uint64_t v8 = v5;
  uint64_t v58 = a3(0);
  uint64_t v10 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  v57 = (char *)&v47 - v11;
  uint64_t v12 = sub_251037740();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v5;
  sub_250FCF4FC(0, a4, a5);
  int v55 = a2;
  uint64_t v17 = sub_251039670();
  uint64_t v18 = v17;
  if (!*(void *)(v16 + 16)) {
    goto LABEL_41;
  }
  uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v20 = *(void *)(v16 + 64);
  v49 = (void *)(v16 + 64);
  if (v19 < 64) {
    uint64_t v21 = ~(-1 << v19);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v20;
  int64_t v47 = v5;
  int64_t v48 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v50 = v10 + 16;
  uint64_t v51 = (void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  uint64_t v53 = v10;
  uint64_t v54 = v13;
  unint64_t v23 = (void (**)(char *, unint64_t, uint64_t))(v13 + 32);
  v56 = (uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32);
  uint64_t v24 = v17 + 64;
  uint64_t result = swift_retain();
  int64_t v26 = 0;
  for (i = v16; ; uint64_t v16 = i)
  {
    if (v22)
    {
      unint64_t v28 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v29 = v28 | (v26 << 6);
      goto LABEL_22;
    }
    int64_t v30 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v30 >= v48) {
      break;
    }
    uint64_t v31 = v49;
    unint64_t v32 = v49[v30];
    ++v26;
    if (!v32)
    {
      int64_t v26 = v30 + 1;
      if (v30 + 1 >= v48) {
        goto LABEL_34;
      }
      unint64_t v32 = v49[v26];
      if (!v32)
      {
        int64_t v33 = v30 + 2;
        if (v33 >= v48)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v47;
          if ((v55 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v32 = v49[v33];
        if (!v32)
        {
          while (1)
          {
            int64_t v26 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_43;
            }
            if (v26 >= v48) {
              goto LABEL_34;
            }
            unint64_t v32 = v49[v26];
            ++v33;
            if (v32) {
              goto LABEL_21;
            }
          }
        }
        int64_t v26 = v33;
      }
    }
LABEL_21:
    unint64_t v22 = (v32 - 1) & v32;
    unint64_t v29 = __clz(__rbit64(v32)) + (v26 << 6);
LABEL_22:
    uint64_t v34 = *(void *)(v54 + 72);
    unint64_t v35 = *(void *)(v16 + 48) + v34 * v29;
    if (v55)
    {
      (*v23)(v15, v35, v12);
      uint64_t v36 = *(void *)(v16 + 56);
      uint64_t v37 = *(void *)(v53 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 32))(v57, v36 + v37 * v29, v58);
    }
    else
    {
      (*v51)(v15, v35, v12);
      uint64_t v38 = *(void *)(v16 + 56);
      uint64_t v37 = *(void *)(v53 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v57, v38 + v37 * v29, v58);
    }
    sub_250FCB46C(&qword_26B210A88, MEMORY[0x263F42CD0]);
    uint64_t result = sub_251039070();
    uint64_t v39 = -1 << *(unsigned char *)(v18 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v24 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v40) & ~*(void *)(v24 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v24 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v27 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v24 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    (*v23)((char *)(*(void *)(v18 + 48) + v34 * v27), (unint64_t)v15, v12);
    uint64_t result = (*v56)(*(void *)(v18 + 56) + v37 * v27, v57, v58);
    ++*(void *)(v18 + 16);
  }
  swift_release();
  uint64_t v8 = v47;
  uint64_t v31 = v49;
  if ((v55 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v46 = 1 << *(unsigned char *)(v16 + 32);
  if (v46 >= 64) {
    bzero(v31, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v31 = -1 << v46;
  }
  *(void *)(v16 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v18;
  return result;
}

uint64_t sub_250FCCFC0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_251037740();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_250FCF678(0, (unint64_t *)&qword_26B210BE8);
  int v45 = a2;
  uint64_t v10 = sub_251039670();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v39 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    unint64_t v41 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v40 = (unint64_t)(v12 + 63) >> 6;
    char v42 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    int64_t v47 = v8;
    uint64_t v48 = v5;
    uint64_t v43 = v9;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v40) {
          goto LABEL_34;
        }
        unint64_t v24 = v41[v23];
        ++v18;
        if (!v24)
        {
          int64_t v18 = v23 + 1;
          if (v23 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v24 = v41[v18];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v40)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v39;
              if (v45)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v9 + 32);
                if (v38 >= 64) {
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v41 = -1 << v38;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v41[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v24 = v41[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v9 + 48) + v26 * v22;
      if (v45) {
        (*v46)(v47, v27, v48);
      }
      else {
        (*v42)(v47, v27, v48);
      }
      uint64_t v28 = *(void *)(v9 + 56) + 16 * v22;
      char v29 = *(unsigned char *)(v28 + 8);
      uint64_t v30 = *(void *)v28;
      sub_250FCB46C(&qword_26B210A88, MEMORY[0x263F42CD0]);
      uint64_t result = sub_251039070();
      uint64_t v31 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v16 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v11 + 48) + v26 * v19, v47, v48);
      uint64_t v20 = *(void *)(v11 + 56) + 16 * v19;
      *(void *)uint64_t v20 = v30;
      *(unsigned char *)(v20 + 8) = v29;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v43;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_250FCD3E8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_250F33758();
  uint64_t result = sub_251039670();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    char v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = sub_251039840();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

void *sub_250FCD694()
{
  uint64_t v1 = sub_251037740();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FCF678(0, (unint64_t *)&qword_26B210BF0);
  uint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_251039660();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v24 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v25 = v5 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  uint64_t v28 = v2 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_250FCD934()
{
  return sub_250FCDDF8(MEMORY[0x263F42BC0], (unint64_t *)&qword_26B2102F8, MEMORY[0x263F42BC0]);
}

void *sub_250FCD968()
{
  uint64_t v1 = sub_2510378C0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FCF5A8(0, (unint64_t *)&qword_269B12E60, (unint64_t *)&qword_269B12E58, (uint64_t (*)(uint64_t))sub_250F2F370);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_251039660();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_250FCDC20()
{
  uint64_t v1 = v0;
  sub_250FCF714();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_251039660();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_250FCDDC4()
{
  return sub_250FCDDF8(MEMORY[0x263F07490], &qword_26B210BF8, MEMORY[0x263F07490]);
}

void *sub_250FCDDF8(uint64_t (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v47 = a1(0);
  uint64_t v50 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v46 = (char *)&v37 - v6;
  uint64_t v45 = sub_251037740();
  uint64_t v49 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  BOOL v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FCF4FC(0, a2, a3);
  uint64_t v37 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = sub_251039660();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v51 = v9;
  if (!v10)
  {
    id result = (void *)swift_release();
    uint64_t v36 = v51;
    char v35 = v37;
LABEL_25:
    *char v35 = v36;
    return result;
  }
  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v51;
  }
  int64_t v14 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  uint64_t v48 = v8;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v38 = v8 + 64;
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = v50;
  uint64_t v19 = v49;
  uint64_t v42 = v50 + 16;
  uint64_t v43 = v49 + 16;
  uint64_t v40 = v50 + 32;
  uint64_t v41 = v49 + 32;
  int64_t v20 = v44;
  uint64_t v21 = v45;
  uint64_t v22 = v47;
  uint64_t v23 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v52 = v14;
      unint64_t v25 = v24 | (v14 << 6);
      uint64_t v26 = v48;
      goto LABEL_9;
    }
    int64_t v31 = v14 + 1;
    uint64_t v26 = v48;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v31);
    int64_t v33 = v14 + 1;
    if (!v32)
    {
      int64_t v33 = v31 + 1;
      if (v31 + 1 >= v39) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v38 + 8 * v33);
      if (!v32) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v32 - 1) & v32;
    int64_t v52 = v33;
    unint64_t v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_9:
    unint64_t v27 = *(void *)(v19 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v20, *(void *)(v26 + 48) + v27, v21);
    unint64_t v28 = *(void *)(v18 + 72) * v25;
    unint64_t v29 = *(void *)(v26 + 56) + v28;
    BOOL v30 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v46, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v23 + 48) + v27, v20, v21);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(void *)(v23 + 56) + v28, v30, v22);
    int64_t v14 = v52;
  }
  int64_t v34 = v31 + 2;
  if (v34 >= v39)
  {
LABEL_23:
    id result = (void *)swift_release();
    char v35 = v37;
    uint64_t v36 = v51;
    goto LABEL_25;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_250FCE1B0()
{
  uint64_t v37 = sub_251037740();
  uint64_t v1 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v36 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FCF678(0, (unint64_t *)&qword_26B210BE8);
  int64_t v31 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = sub_251039660();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
    id result = (void *)swift_release();
    unint64_t v29 = v31;
LABEL_28:
    *unint64_t v29 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v7);
  }
  uint64_t v32 = v3 + 64;
  int64_t v9 = 0;
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v38 = v5;
  uint64_t v39 = v3;
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v35 = v1 + 16;
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v34 = v1 + 32;
  int64_t v14 = v36;
  uint64_t v15 = v37;
  uint64_t v16 = v38;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v9 << 6);
      uint64_t v19 = v39;
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    uint64_t v19 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v32 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v32 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v27 - 1) & v27;
    unint64_t v18 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v19 + 48) + v20, v15);
    uint64_t v21 = 16 * v18;
    uint64_t v22 = *(void *)(v19 + 56) + v21;
    uint64_t v23 = *(void *)v22;
    char v24 = *(unsigned char *)(v22 + 8);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v14, v15);
    uint64_t v25 = *(void *)(v16 + 56) + v21;
    *(void *)uint64_t v25 = v23;
    *(unsigned char *)(v25 + 8) = v24;
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    id result = (void *)swift_release();
    unint64_t v29 = v31;
    uint64_t v5 = v38;
    goto LABEL_28;
  }
  unint64_t v27 = *(void *)(v32 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v33) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v32 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_250FCE488()
{
  uint64_t v1 = v0;
  sub_250F33758();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_251039660();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL sub_250FCE614(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48)
    && *(double *)(a1 + 56) == *(double *)(a2 + 56)
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(double *)(a1 + 72) == *(double *)(a2 + 72))
  {
    return *(double *)(a1 + 80) == *(double *)(a2 + 80);
  }
  return 0;
}

BOOL sub_250FCE6D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6C370();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v41 - v16;
  MEMORY[0x270FA5388](v18);
  int64_t v20 = (char *)&v41 - v19;
  if ((sub_250F83D84(*a1, *a2) & 1) == 0) {
    return 0;
  }
  uint64_t v21 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v22 = a1;
  uint64_t v23 = (int *)v21;
  uint64_t v24 = *(int *)(v21 + 20);
  uint64_t v42 = v22;
  sub_250F3A92C((uint64_t)v22 + v24, (uint64_t)v20);
  uint64_t v25 = v23[5];
  uint64_t v41 = a2;
  sub_250F3A92C((uint64_t)a2 + v25, (uint64_t)v17);
  uint64_t v26 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_250F3A92C((uint64_t)v20, (uint64_t)v11);
  sub_250F3A92C((uint64_t)v17, v26);
  unint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v27((uint64_t)v11, 1, v4) != 1)
  {
    sub_250F3A92C((uint64_t)v11, (uint64_t)v14);
    if (v27(v26, 1, v4) != 1)
    {
      sub_250FCECBC(v26, (uint64_t)v7);
      char v28 = static OvernightMetricsChartPoint.== infix(_:_:)((uint64_t)v14, (uint64_t)v7);
      sub_250FCEC5C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      sub_250F6C3F0((uint64_t)v17);
      sub_250F6C3F0((uint64_t)v20);
      sub_250FCEC5C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      sub_250F6C3F0((uint64_t)v11);
      if (v28) {
        goto LABEL_9;
      }
      return 0;
    }
    sub_250F6C3F0((uint64_t)v17);
    sub_250F6C3F0((uint64_t)v20);
    sub_250FCEC5C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_7:
    sub_250FCEC5C((uint64_t)v11, (uint64_t (*)(void))sub_250F6C370);
    return 0;
  }
  sub_250F6C3F0((uint64_t)v17);
  sub_250F6C3F0((uint64_t)v20);
  if (v27(v26, 1, v4) != 1) {
    goto LABEL_7;
  }
  sub_250F6C3F0((uint64_t)v11);
LABEL_9:
  BOOL result = 0;
  uint64_t v30 = v23[6];
  int64_t v31 = (double *)((char *)v42 + v30);
  uint64_t v32 = v41;
  int64_t v33 = (double *)((char *)v41 + v30);
  if (*v31 == *v33 && v31[1] == v33[1])
  {
    uint64_t v34 = v42;
    uint64_t v35 = (long long *)((char *)v42 + v23[7]);
    long long v36 = v35[3];
    v43[2] = v35[2];
    v43[3] = v36;
    v43[4] = v35[4];
    uint64_t v44 = *((void *)v35 + 10);
    long long v37 = *v35;
    v43[1] = v35[1];
    v43[0] = v37;
    uint64_t v38 = (char *)v41 + v23[7];
    long long v39 = *((_OWORD *)v38 + 3);
    v45[2] = *((_OWORD *)v38 + 2);
    v45[3] = v39;
    v45[4] = *((_OWORD *)v38 + 4);
    uint64_t v46 = *((void *)v38 + 10);
    long long v40 = *((_OWORD *)v38 + 1);
    v45[0] = *(_OWORD *)v38;
    v45[1] = v40;
    if (sub_250FCE614((uint64_t)v43, (uint64_t)v45)
      && *(double *)((char *)v34 + v23[8]) == *(double *)((char *)v32 + v23[8]))
    {
      return *(double *)((char *)v34 + v23[9]) == *(double *)((char *)v32 + v23[9]);
    }
    return 0;
  }
  return result;
}

BOOL sub_250FCEB28(uint64_t a1, uint64_t a2)
{
  if ((sub_250FBF374(*(void *)a1, *(void *)a2) & 1) != 0
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && (uint64_t v4 = *(void *)(a1 + 24),
        uint64_t v5 = *(void *)(a1 + 32),
        uint64_t v6 = *(void *)(a2 + 24),
        uint64_t v7 = *(void *)(a2 + 32),
        sub_250FBF4E4(*(void *)(a1 + 16), *(void *)(a2 + 16)),
        (v8 & 1) != 0)
    && (sub_250FBF4E4(v4, v6), (v9 & 1) != 0)
    && (sub_250FFD548(v5, v7) & 1) != 0
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48)
    && *(double *)(a1 + 56) == *(double *)(a2 + 56)
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(double *)(a1 + 72) == *(double *)(a2 + 72)
    && *(double *)(a1 + 80) == *(double *)(a2 + 80)
    && *(double *)(a1 + 88) == *(double *)(a2 + 88)
    && *(double *)(a1 + 96) == *(double *)(a2 + 96)
    && *(double *)(a1 + 104) == *(double *)(a2 + 104))
  {
    return *(double *)(a1 + 112) == *(double *)(a2 + 112);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_250FCEC5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FCECBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_250FCED20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_250FCB46C((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *sub_250FCEDBC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  unint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)MEMORY[0x263F8EE78];
  int64_t v31 = (void *)MEMORY[0x263F8EE78];
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_250FCF498(v16, (uint64_t)v13);
      uint64_t v18 = &v13[*(int *)(v10 + 20)];
      uint64_t v19 = *(void *)&v18[*(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 24)];
      swift_bridgeObjectRetain();
      sub_250FCEC5C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      sub_250FF5AF8(v19);
      v16 += v17;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    unint64_t v14 = v31;
  }
  int64_t v20 = v14[2];
  int64_t v21 = v20 + 4;
  if (__OFADD__(v20, 4))
  {
    __break(1u);
LABEL_21:
    unint64_t v14 = sub_250FA0F70((void *)(v11 > 1), v20, 1, v14);
    unint64_t v11 = v14[3];
    unint64_t v23 = v11 >> 1;
    goto LABEL_13;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (unint64_t v11 = v14[3], v23 = v11 >> 1, (uint64_t)(v11 >> 1) < v21))
  {
    if (v20 <= v21) {
      int64_t v24 = v20 + 4;
    }
    else {
      int64_t v24 = v20;
    }
    unint64_t v14 = sub_250FA0F70(isUniquelyReferenced_nonNull_native, v24, 1, v14);
    unint64_t v11 = v14[3];
    unint64_t v23 = v11 >> 1;
  }
  unint64_t v10 = v14[2];
  int64_t v20 = v10 + 1;
  if (v23 <= v10) {
    goto LABEL_21;
  }
LABEL_13:
  v14[2] = v20;
  *(double *)&v14[v10 + 4] = a3;
  unint64_t v25 = v10 + 2;
  if ((uint64_t)v23 < (uint64_t)(v10 + 2)) {
    unint64_t v14 = sub_250FA0F70((void *)(v11 > 1), v10 + 2, 1, v14);
  }
  v14[2] = v25;
  *(double *)&v14[v20 + 4] = a2;
  unint64_t v26 = v14[3];
  unint64_t v27 = v10 + 3;
  if ((uint64_t)(v10 + 3) > (uint64_t)(v26 >> 1)) {
    unint64_t v14 = sub_250FA0F70((void *)(v26 > 1), v10 + 3, 1, v14);
  }
  v14[2] = v27;
  *(double *)&v14[v25 + 4] = a4;
  unint64_t v28 = v14[3];
  if ((uint64_t)(v10 + 4) > (uint64_t)(v28 >> 1)) {
    unint64_t v14 = sub_250FA0F70((void *)(v28 > 1), v10 + 4, 1, v14);
  }
  v14[2] = v10 + 4;
  *(double *)&v14[v27 + 4] = a5;
  return v14;
}

uint64_t sub_250FCF074@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v56 - v7;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  unint64_t v10 = v9;
  unint64_t v11 = (double *)((char *)a1 + v9[7]);
  double v12 = *(double *)((char *)a1 + v9[8]) / (double)a2;
  if ((_BYTE)v11[2]) {
    double v13 = v12 * *v11;
  }
  else {
    double v13 = v11[1];
  }
  if (*(double *)((char *)a1 + v9[9]) > v12) {
    double v14 = *(double *)((char *)a1 + v9[9]);
  }
  else {
    double v14 = *(double *)((char *)a1 + v9[8]) / (double)a2;
  }
  if (v14 >= 0.0)
  {
    double v16 = v11[3];
    double v15 = v11[4];
    double v60 = v11[5];
    double v17 = v11[7];
    uint64_t v18 = *a1;
    uint64_t v19 = (double *)((char *)a1 + v9[6]);
    double v20 = *v19;
    double v21 = v19[1];
    sub_250FCB5EC(*a1, *v19, v21, v17);
    double v23 = v22;
    double v25 = v24;
    unint64_t v26 = sub_250FCEDBC(v18, v20, v21, v22, v24);
    unint64_t v27 = (void *)sub_250F33684(MEMORY[0x263F8EE78]);
    uint64_t v28 = v26[2];
    if (!v28)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      sub_250F3A92C((uint64_t)a1 + v10[5], (uint64_t)v8);
      uint64_t v45 = type metadata accessor for OvernightMetricsChartPoint();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v8, 1, v45) == 1)
      {
        sub_250F6C3F0((uint64_t)v8);
        unint64_t v46 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v47 = &v8[*(int *)(v45 + 20)];
        unint64_t v46 = *(void *)&v47[*(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 24)];
        swift_bridgeObjectRetain();
        sub_250FCEC5C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      }
      double v48 = v15 * v13;
      double v49 = v60 * (v15 * v13);
      swift_bridgeObjectRetain();
      uint64_t v50 = sub_250F5E424(v46, (uint64_t)v27, v16 * v13, v13);
      uint64_t v52 = v51;
      uint64_t v54 = v53;
      uint64_t result = sub_250FCEC5C((uint64_t)a1, type metadata accessor for OvernightMetricsChartLayout.Configuration);
      *(void *)a3 = v27;
      *(double *)(a3 + 8) = v13;
      *(void *)(a3 + 16) = v50;
      *(void *)(a3 + 24) = v52;
      *(void *)(a3 + 32) = v54;
      *(double *)(a3 + 40) = v23;
      *(double *)(a3 + 48) = v25;
      *(void *)(a3 + 56) = 0;
      *(double *)(a3 + 64) = v14;
      *(double *)(a3 + 72) = v13;
      *(double *)(a3 + 80) = v13;
      *(double *)(a3 + 88) = v16 * v13;
      *(double *)(a3 + 96) = v16 * v13;
      *(double *)(a3 + 104) = v49;
      *(double *)(a3 + 112) = v48;
      return result;
    }
    double v56 = v15;
    double v57 = v16;
    uint64_t v58 = v8;
    v59 = a1;
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    while (1)
    {
      double v30 = *(double *)&v26[v29 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v61 = v27;
      unint64_t v33 = sub_250FCB7B0(v30);
      uint64_t v34 = v27[2];
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        break;
      }
      char v37 = v32;
      if (v27[3] >= v36)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_250FCE488();
        }
      }
      else
      {
        sub_250FCD3E8(v36, isUniquelyReferenced_nonNull_native);
        unint64_t v38 = sub_250FCB7B0(v30);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_29;
        }
        unint64_t v33 = v38;
      }
      double v40 = v13 * 0.25 + (v14 + v13 * -0.5) * ((v30 - v23) / (v25 - v23));
      unint64_t v27 = v61;
      if (v37)
      {
        *(double *)(v61[7] + 8 * v33) = v40;
      }
      else
      {
        v61[(v33 >> 6) + 8] |= 1 << v33;
        uint64_t v41 = 8 * v33;
        *(double *)(v27[6] + v41) = v30;
        *(double *)(v27[7] + v41) = v40;
        uint64_t v42 = v27[2];
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_27;
        }
        v27[2] = v44;
      }
      ++v29;
      swift_bridgeObjectRelease();
      if (v28 == v29)
      {
        swift_bridgeObjectRelease();
        unint64_t v8 = v58;
        a1 = v59;
        double v15 = v56;
        double v16 = v57;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
LABEL_29:
  uint64_t result = sub_251039810();
  __break(1u);
  return result;
}

uint64_t sub_250FCF498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_250FCF4FC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_251037740();
    a3(255);
    sub_250FCB46C(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v5 = sub_251039690();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_250FCF5A8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_2510378C0();
    sub_250FCFB20(255, a3, a4, MEMORY[0x263F8D488]);
    sub_250FCB46C(&qword_26B210AC0, MEMORY[0x263F42E30]);
    unint64_t v7 = sub_251039690();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_250FCF678(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_251037740();
    sub_250FCB46C(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v3 = sub_251039690();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_250FCF714()
{
  if (!qword_269B14300)
  {
    sub_250F408B4(255, (unint64_t *)&qword_269B14308);
    sub_250FCF78C();
    unint64_t v0 = sub_251039690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14300);
    }
  }
}

unint64_t sub_250FCF78C()
{
  unint64_t result = qword_269B14310;
  if (!qword_269B14310)
  {
    sub_250F408B4(255, (unint64_t *)&qword_269B14308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14310);
  }
  return result;
}

uint64_t destroy for OvernightMetricsChartLayout.Derivations()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChartLayout.Derivations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OvernightMetricsChartLayout.Derivations(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartLayout.Derivations(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartLayout.Derivations(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartLayout.Derivations(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartLayout.Derivations()
{
  return &type metadata for OvernightMetricsChartLayout.Derivations;
}

void sub_250FCFB20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *sub_250FCFB84(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    double v14 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v5 = a3;
    long long v6 = a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    unint64_t v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
    uint64_t v11 = *((void *)v10 - 1);
    double v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
    swift_bridgeObjectRetain();
    uint64_t v111 = v5;
    v112 = v6;
    if (v12(v9, 1, v10))
    {
      sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_251037740();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
      uint64_t v16 = v10[5];
      double v17 = &v8[v16];
      uint64_t v18 = &v9[v16];
      uint64_t v19 = sub_251037400();
      double v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v20(v17, v18, v19);
      uint64_t v21 = v10[6];
      double v22 = &v8[v21];
      double v23 = &v9[v21];
      v20(&v8[v21], &v9[v21], v19);
      sub_250F26E08();
      uint64_t v25 = v24;
      v20(&v22[*(int *)(v24 + 36)], &v23[*(int *)(v24 + 36)], v19);
      uint64_t v26 = v10[7];
      unint64_t v27 = &v8[v26];
      uint64_t v28 = &v9[v26];
      v20(&v8[v26], &v9[v26], v19);
      uint64_t v29 = v19;
      uint64_t v5 = v111;
      v20(&v27[*(int *)(v25 + 36)], &v28[*(int *)(v25 + 36)], v29);
      uint64_t v30 = v10[8];
      int64_t v31 = &v8[v30];
      char v32 = &v9[v30];
      *(void *)int64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v10[9];
      uint64_t v34 = &v8[v33];
      BOOL v35 = &v9[v33];
      uint64_t v36 = sub_2510378C0();
      char v37 = v35;
      long long v6 = v112;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v37, v36);
      uint64_t v38 = v10[10];
      char v39 = &v8[v38];
      double v40 = &v9[v38];
      uint64_t v41 = *((void *)v40 + 1);
      *(void *)char v39 = *(void *)v40;
      *((void *)v39 + 1) = v41;
      uint64_t v42 = v10[11];
      BOOL v43 = &v8[v42];
      uint64_t v44 = &v9[v42];
      uint64_t v45 = *((void *)v44 + 1);
      *(void *)BOOL v43 = *(void *)v44;
      *((void *)v43 + 1) = v45;
      uint64_t v46 = v10[12];
      uint64_t v47 = &v8[v46];
      double v48 = &v9[v46];
      uint64_t v49 = *((void *)v48 + 1);
      *(void *)uint64_t v47 = *(void *)v48;
      *((void *)v47 + 1) = v49;
      uint64_t v50 = *(void (**)(char *, void, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v8, 0, 1, v10);
    }
    uint64_t v51 = *(int *)(v5 + 28);
    uint64_t v52 = a1;
    *(void *)((char *)a1 + *(int *)(v5 + 24)) = *(void *)((char *)v6 + *(int *)(v5 + 24));
    uint64_t v53 = (char *)a1 + v51;
    uint64_t v54 = (char *)v6 + v51;
    *(void *)((char *)a1 + v51) = *(void *)((char *)v6 + v51);
    int v55 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v56 = v55[5];
    double v57 = &v53[v56];
    uint64_t v58 = &v54[v56];
    v59 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v109 = *((void *)v59 - 1);
    double v60 = *(unsigned int (**)(char *, uint64_t, int *))(v109 + 48);
    swift_bridgeObjectRetain();
    if (v60(v58, 1, v59))
    {
      sub_250FD474C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      uint64_t v62 = sub_251037400();
      v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
      v63(v57, v58, v62);
      uint64_t v64 = v59[5];
      v65 = &v57[v64];
      v66 = &v58[v64];
      v63(&v57[v64], &v58[v64], v62);
      sub_250F26E08();
      v63(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v62);
      v68 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v65[v68[5]] = *(void *)&v66[v68[5]];
      *(void *)&v65[v68[6]] = *(void *)&v66[v68[6]];
      *(void *)&v65[v68[7]] = *(void *)&v66[v68[7]];
      uint64_t v69 = v59[6];
      v70 = &v57[v69];
      v71 = &v58[v69];
      *(_OWORD *)v70 = *(_OWORD *)v71;
      v70[16] = v71[16];
      v57[v59[7]] = v58[v59[7]];
      v57[v59[8]] = v58[v59[8]];
      v57[v59[9]] = v58[v59[9]];
      uint64_t v72 = v59[10];
      v73 = &v57[v72];
      v74 = &v58[v72];
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)v73 = *(void *)v74;
      *((void *)v73 + 1) = v75;
      uint64_t v76 = v59[11];
      v77 = &v57[v76];
      v78 = &v58[v76];
      uint64_t v79 = *((void *)v78 + 1);
      *(void *)v77 = *(void *)v78;
      *((void *)v77 + 1) = v79;
      v110 = *(void (**)(char *, void, uint64_t, int *))(v109 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v110(v57, 0, 1, v59);
      uint64_t v52 = a1;
    }
    *(_OWORD *)&v53[v55[6]] = *(_OWORD *)&v54[v55[6]];
    uint64_t v80 = v55[7];
    v81 = &v53[v80];
    v82 = &v54[v80];
    long long v83 = *((_OWORD *)v82 + 1);
    *(_OWORD *)v81 = *(_OWORD *)v82;
    *((_OWORD *)v81 + 1) = v83;
    *((void *)v81 + 10) = *((void *)v82 + 10);
    long long v84 = *((_OWORD *)v82 + 4);
    long long v85 = *((_OWORD *)v82 + 2);
    *((_OWORD *)v81 + 3) = *((_OWORD *)v82 + 3);
    *((_OWORD *)v81 + 4) = v84;
    *((_OWORD *)v81 + 2) = v85;
    *(void *)&v53[v55[8]] = *(void *)&v54[v55[8]];
    *(void *)&v53[v55[9]] = *(void *)&v54[v55[9]];
    uint64_t v86 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v87 = &v53[v86];
    v88 = &v54[v86];
    uint64_t v89 = *((void *)v88 + 1);
    *(void *)v87 = *(void *)v88;
    *((void *)v87 + 1) = v89;
    uint64_t v90 = *((void *)v88 + 3);
    *((void *)v87 + 2) = *((void *)v88 + 2);
    *((void *)v87 + 3) = v90;
    *((void *)v87 + 4) = *((void *)v88 + 4);
    *(_OWORD *)(v87 + 40) = *(_OWORD *)(v88 + 40);
    *(_OWORD *)(v87 + 56) = *(_OWORD *)(v88 + 56);
    *(_OWORD *)(v87 + 72) = *(_OWORD *)(v88 + 72);
    *(_OWORD *)(v87 + 88) = *(_OWORD *)(v88 + 88);
    *(_OWORD *)(v87 + 104) = *(_OWORD *)(v88 + 104);
    uint64_t v91 = *(int *)(v111 + 32);
    v92 = (char *)v52 + v91;
    uint64_t v93 = (uint64_t)v112 + v91;
    uint64_t v94 = *(void *)((char *)v112 + v91);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v94)
    {
      uint64_t v95 = *(void *)(v93 + 8);
      uint64_t v96 = *(void *)(v93 + 16);
      *(void *)v92 = v94;
      *((void *)v92 + 1) = v95;
      *((void *)v92 + 2) = v96;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((void *)v92 + 2) = *(void *)(v93 + 16);
    }
    v92[24] = *(unsigned char *)(v93 + 24);
    v92[32] = *(unsigned char *)(v93 + 32);
    uint64_t v97 = *(void *)(v93 + 48);
    *((void *)v92 + 5) = *(void *)(v93 + 40);
    *((void *)v92 + 6) = v97;
    v92[56] = *(unsigned char *)(v93 + 56);
    uint64_t v98 = *(void *)(v93 + 72);
    *((void *)v92 + 8) = *(void *)(v93 + 64);
    *((void *)v92 + 9) = v98;
    *((void *)v92 + 10) = *(void *)(v93 + 80);
    long long v99 = *(_OWORD *)(v93 + 88);
    *(_OWORD *)(v92 + 104) = *(_OWORD *)(v93 + 104);
    *(_OWORD *)(v92 + 88) = v99;
    long long v100 = *(_OWORD *)(v93 + 120);
    long long v101 = *(_OWORD *)(v93 + 136);
    *(_OWORD *)(v92 + 152) = *(_OWORD *)(v93 + 152);
    *(_OWORD *)(v92 + 136) = v101;
    *(_OWORD *)(v92 + 120) = v100;
    uint64_t v102 = *(void *)(v93 + 176);
    *((void *)v92 + 21) = *(void *)(v93 + 168);
    *((void *)v92 + 22) = v102;
    uint64_t v104 = *(void *)(v93 + 184);
    uint64_t v103 = *(void *)(v93 + 192);
    v92[200] = *(unsigned char *)(v93 + 200);
    *((void *)v92 + 23) = v104;
    *((void *)v92 + 24) = v103;
    v92[201] = *(unsigned char *)(v93 + 201);
    uint64_t v105 = *(void *)(v93 + 216);
    *((void *)v92 + 26) = *(void *)(v93 + 208);
    *((void *)v92 + 27) = v105;
    uint64_t v106 = *(void *)(v93 + 232);
    *((void *)v92 + 28) = *(void *)(v93 + 224);
    *((void *)v92 + 29) = v106;
    *((void *)v92 + 30) = *(void *)(v93 + 240);
    v92[248] = *(unsigned char *)(v93 + 248);
    uint64_t v107 = *(void *)(v93 + 264);
    *((void *)v92 + 32) = *(void *)(v93 + 256);
    *((void *)v92 + 33) = v107;
    *((void *)v92 + 34) = *(void *)(v93 + 272);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    double v14 = a1;
  }
  swift_retain();
  return v14;
}

uint64_t sub_250FD038C(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v5 - 1) + 48))(v4, 1, v5))
  {
    uint64_t v6 = sub_251037740();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    uint64_t v7 = v4 + v5[5];
    uint64_t v8 = sub_251037400();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    uint64_t v10 = v4 + v5[6];
    v9(v10, v8);
    sub_250F26E08();
    uint64_t v12 = v11;
    v9(v10 + *(int *)(v11 + 36), v8);
    uint64_t v13 = v4 + v5[7];
    v9(v13, v8);
    v9(v13 + *(int *)(v12 + 36), v8);
    uint64_t v14 = v4 + v5[9];
    uint64_t v15 = sub_2510378C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = a1 + a2[7];
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v18 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    uint64_t v19 = sub_251037400();
    double v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
    v20(v17, v19);
    uint64_t v21 = v17 + *(int *)(v18 + 20);
    v20(v21, v19);
    sub_250F26E08();
    v20(v21 + *(int *)(v22 + 36), v19);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_250FD0770(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, int *))(v8 + 48);
  swift_bridgeObjectRetain();
  uint64_t v106 = v3;
  if (v9(v6, 1, v7))
  {
    sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_251037740();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v5, v6, v11);
    uint64_t v12 = v7[5];
    uint64_t v13 = &v5[v12];
    uint64_t v14 = &v6[v12];
    uint64_t v15 = sub_251037400();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    uint64_t v17 = v7[6];
    uint64_t v18 = &v5[v17];
    uint64_t v19 = &v6[v17];
    v16(&v5[v17], &v6[v17], v15);
    sub_250F26E08();
    uint64_t v21 = v20;
    v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v15);
    uint64_t v22 = v7[7];
    double v23 = &v5[v22];
    uint64_t v24 = &v6[v22];
    v16(&v5[v22], &v6[v22], v15);
    v16(&v23[*(int *)(v21 + 36)], &v24[*(int *)(v21 + 36)], v15);
    uint64_t v25 = v7[8];
    uint64_t v26 = &v5[v25];
    unint64_t v27 = &v6[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = v7[9];
    uint64_t v29 = &v5[v28];
    uint64_t v30 = &v6[v28];
    uint64_t v31 = sub_2510378C0();
    char v32 = v30;
    uint64_t v3 = v106;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v32, v31);
    uint64_t v33 = v7[10];
    uint64_t v34 = &v5[v33];
    BOOL v35 = &v6[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = v7[11];
    uint64_t v38 = &v5[v37];
    char v39 = &v6[v37];
    uint64_t v40 = *((void *)v39 + 1);
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = v40;
    uint64_t v41 = v7[12];
    uint64_t v42 = &v5[v41];
    BOOL v43 = &v6[v41];
    uint64_t v44 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = *(void *)v43;
    *((void *)v42 + 1) = v44;
    uint64_t v45 = *(void (**)(char *, void, uint64_t, int *))(v8 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v5, 0, 1, v7);
  }
  uint64_t v46 = *(int *)(v3 + 28);
  uint64_t v47 = a2;
  *(void *)((char *)a1 + *(int *)(v3 + 24)) = *(void *)((char *)a2 + *(int *)(v3 + 24));
  double v48 = (char *)a1 + v46;
  uint64_t v49 = (char *)a2 + v46;
  *(void *)((char *)a1 + v46) = *(void *)((char *)a2 + v46);
  uint64_t v50 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v51 = v50[5];
  uint64_t v52 = &v48[v51];
  uint64_t v53 = &v49[v51];
  uint64_t v54 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v104 = *((void *)v54 - 1);
  int v55 = *(unsigned int (**)(char *, uint64_t, int *))(v104 + 48);
  swift_bridgeObjectRetain();
  if (v55(v53, 1, v54))
  {
    sub_250FD474C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    uint64_t v57 = sub_251037400();
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
    v58(v52, v53, v57);
    uint64_t v59 = v54[5];
    double v60 = &v52[v59];
    uint64_t v61 = &v53[v59];
    v58(&v52[v59], &v53[v59], v57);
    sub_250F26E08();
    v58(&v60[*(int *)(v62 + 36)], &v61[*(int *)(v62 + 36)], v57);
    v63 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v60[v63[5]] = *(void *)&v61[v63[5]];
    *(void *)&v60[v63[6]] = *(void *)&v61[v63[6]];
    *(void *)&v60[v63[7]] = *(void *)&v61[v63[7]];
    uint64_t v64 = v54[6];
    v65 = &v52[v64];
    v66 = &v53[v64];
    *(_OWORD *)v65 = *(_OWORD *)v66;
    v65[16] = v66[16];
    v52[v54[7]] = v53[v54[7]];
    v52[v54[8]] = v53[v54[8]];
    v52[v54[9]] = v53[v54[9]];
    uint64_t v67 = v54[10];
    v68 = &v52[v67];
    uint64_t v69 = &v53[v67];
    uint64_t v70 = *((void *)v69 + 1);
    *(void *)v68 = *(void *)v69;
    *((void *)v68 + 1) = v70;
    uint64_t v71 = v54[11];
    uint64_t v72 = &v52[v71];
    v73 = &v53[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v105 = *(void (**)(char *, void, uint64_t, int *))(v104 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v105(v52, 0, 1, v54);
    uint64_t v47 = a2;
  }
  *(_OWORD *)&v48[v50[6]] = *(_OWORD *)&v49[v50[6]];
  uint64_t v75 = v50[7];
  uint64_t v76 = &v48[v75];
  v77 = &v49[v75];
  long long v78 = *((_OWORD *)v77 + 1);
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
  *((_OWORD *)v76 + 1) = v78;
  *((void *)v76 + 10) = *((void *)v77 + 10);
  long long v79 = *((_OWORD *)v77 + 4);
  long long v80 = *((_OWORD *)v77 + 2);
  *((_OWORD *)v76 + 3) = *((_OWORD *)v77 + 3);
  *((_OWORD *)v76 + 4) = v79;
  *((_OWORD *)v76 + 2) = v80;
  *(void *)&v48[v50[8]] = *(void *)&v49[v50[8]];
  *(void *)&v48[v50[9]] = *(void *)&v49[v50[9]];
  uint64_t v81 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v82 = &v48[v81];
  long long v83 = &v49[v81];
  uint64_t v84 = *((void *)v83 + 1);
  *(void *)v82 = *(void *)v83;
  *((void *)v82 + 1) = v84;
  uint64_t v85 = *((void *)v83 + 3);
  *((void *)v82 + 2) = *((void *)v83 + 2);
  *((void *)v82 + 3) = v85;
  *((void *)v82 + 4) = *((void *)v83 + 4);
  *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
  *(_OWORD *)(v82 + 56) = *(_OWORD *)(v83 + 56);
  *(_OWORD *)(v82 + 72) = *(_OWORD *)(v83 + 72);
  *(_OWORD *)(v82 + 88) = *(_OWORD *)(v83 + 88);
  *(_OWORD *)(v82 + 104) = *(_OWORD *)(v83 + 104);
  uint64_t v86 = *(int *)(v106 + 32);
  v87 = (char *)a1 + v86;
  v88 = (char *)v47 + v86;
  uint64_t v89 = *(void *)((char *)v47 + v86);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v89)
  {
    uint64_t v90 = *((void *)v88 + 1);
    uint64_t v91 = *((void *)v88 + 2);
    *(void *)v87 = v89;
    *((void *)v87 + 1) = v90;
    *((void *)v87 + 2) = v91;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v87 = *(_OWORD *)v88;
    *((void *)v87 + 2) = *((void *)v88 + 2);
  }
  v87[24] = v88[24];
  v87[32] = v88[32];
  uint64_t v92 = *((void *)v88 + 6);
  *((void *)v87 + 5) = *((void *)v88 + 5);
  *((void *)v87 + 6) = v92;
  v87[56] = v88[56];
  uint64_t v93 = *((void *)v88 + 9);
  *((void *)v87 + 8) = *((void *)v88 + 8);
  *((void *)v87 + 9) = v93;
  *((void *)v87 + 10) = *((void *)v88 + 10);
  long long v94 = *(_OWORD *)(v88 + 88);
  *(_OWORD *)(v87 + 104) = *(_OWORD *)(v88 + 104);
  *(_OWORD *)(v87 + 88) = v94;
  long long v95 = *(_OWORD *)(v88 + 120);
  long long v96 = *(_OWORD *)(v88 + 136);
  *(_OWORD *)(v87 + 152) = *(_OWORD *)(v88 + 152);
  *(_OWORD *)(v87 + 136) = v96;
  *(_OWORD *)(v87 + 120) = v95;
  uint64_t v97 = *((void *)v88 + 22);
  *((void *)v87 + 21) = *((void *)v88 + 21);
  *((void *)v87 + 22) = v97;
  uint64_t v99 = *((void *)v88 + 23);
  uint64_t v98 = *((void *)v88 + 24);
  v87[200] = v88[200];
  *((void *)v87 + 23) = v99;
  *((void *)v87 + 24) = v98;
  v87[201] = v88[201];
  uint64_t v100 = *((void *)v88 + 27);
  *((void *)v87 + 26) = *((void *)v88 + 26);
  *((void *)v87 + 27) = v100;
  uint64_t v101 = *((void *)v88 + 29);
  *((void *)v87 + 28) = *((void *)v88 + 28);
  *((void *)v87 + 29) = v101;
  *((void *)v87 + 30) = *((void *)v88 + 30);
  v87[248] = v88[248];
  uint64_t v102 = *((void *)v88 + 33);
  *((void *)v87 + 32) = *((void *)v88 + 32);
  *((void *)v87 + 33) = v102;
  *((void *)v87 + 34) = *((void *)v88 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_250FD0F18(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  v161 = a3;
  v162 = v4;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037740();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      uint64_t v15 = v9[5];
      uint64_t v16 = &v7[v15];
      uint64_t v17 = &v8[v15];
      uint64_t v18 = sub_251037400();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      uint64_t v20 = v9[6];
      uint64_t v21 = &v7[v20];
      uint64_t v22 = &v8[v20];
      v19(&v7[v20], &v8[v20], v18);
      sub_250F26E08();
      v157 = v5;
      uint64_t v24 = v23;
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
      uint64_t v25 = v9[7];
      uint64_t v26 = &v7[v25];
      unint64_t v27 = &v8[v25];
      v19(&v7[v25], &v8[v25], v18);
      uint64_t v28 = *(int *)(v24 + 36);
      uint64_t v5 = v157;
      uint64_t v29 = v18;
      a3 = v161;
      v19(&v26[v28], &v27[v28], v29);
      uint64_t v30 = v9[8];
      uint64_t v31 = &v7[v30];
      char v32 = &v8[v30];
      char v33 = v32[8];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v33;
      uint64_t v34 = v9[9];
      BOOL v35 = &v7[v34];
      uint64_t v36 = &v8[v34];
      uint64_t v37 = sub_2510378C0();
      uint64_t v38 = v36;
      uint64_t v4 = v162;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v38, v37);
      uint64_t v39 = v9[10];
      uint64_t v40 = &v7[v39];
      uint64_t v41 = &v8[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = *((void *)v41 + 1);
      uint64_t v42 = v9[11];
      BOOL v43 = &v7[v42];
      uint64_t v44 = &v8[v42];
      *(void *)BOOL v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      uint64_t v45 = v9[12];
      uint64_t v46 = &v7[v45];
      uint64_t v47 = &v8[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = *((void *)v47 + 1);
      double v48 = *(void (**)(char *, void, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_250FD1CFC((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
LABEL_6:
    sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v94 = sub_251037740();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 24))(v7, v8, v94);
  uint64_t v95 = v9[5];
  long long v96 = &v7[v95];
  uint64_t v97 = &v8[v95];
  uint64_t v98 = sub_251037400();
  uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 24);
  v99(v96, v97, v98);
  uint64_t v100 = v9[6];
  uint64_t v101 = &v7[v100];
  uint64_t v102 = &v8[v100];
  v99(&v7[v100], &v8[v100], v98);
  sub_250F26E08();
  uint64_t v103 = v5;
  uint64_t v105 = v104;
  v99(&v101[*(int *)(v104 + 36)], &v102[*(int *)(v104 + 36)], v98);
  uint64_t v106 = v9[7];
  uint64_t v107 = &v7[v106];
  v108 = &v8[v106];
  v99(&v7[v106], &v8[v106], v98);
  uint64_t v109 = *(int *)(v105 + 36);
  uint64_t v5 = v103;
  uint64_t v110 = v98;
  a3 = v161;
  v99(&v107[v109], &v108[v109], v110);
  uint64_t v111 = v9[8];
  v112 = &v7[v111];
  v113 = &v8[v111];
  char v114 = v113[8];
  *(void *)v112 = *(void *)v113;
  v112[8] = v114;
  uint64_t v115 = v9[9];
  v116 = &v7[v115];
  v117 = &v8[v115];
  uint64_t v118 = sub_2510378C0();
  v119 = v117;
  uint64_t v4 = v162;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 24))(v116, v119, v118);
  uint64_t v120 = v9[10];
  v121 = &v7[v120];
  v122 = &v8[v120];
  *(void *)v121 = *(void *)v122;
  *((void *)v121 + 1) = *((void *)v122 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v123 = v9[11];
  v124 = &v7[v123];
  v125 = &v8[v123];
  *(void *)v124 = *(void *)v125;
  *((void *)v124 + 1) = *((void *)v125 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v126 = v9[12];
  v127 = &v7[v126];
  v128 = &v8[v126];
  *(void *)v127 = *(void *)v128;
  *((void *)v127 + 1) = *((void *)v128 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  *(void *)((char *)v5 + a3[6]) = *(void *)((char *)v4 + a3[6]);
  uint64_t v50 = a3[7];
  uint64_t v51 = (char *)v5 + v50;
  uint64_t v52 = (char *)v4 + v50;
  *(void *)((char *)v5 + v50) = *(void *)((char *)v4 + v50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v54 = v53[5];
  int v55 = &v51[v54];
  uint64_t v56 = &v52[v54];
  uint64_t v57 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v159 = *((void *)v57 - 1);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, int *))(v159 + 48);
  int v59 = v58(v55, 1, v57);
  int v60 = v58(v56, 1, v57);
  if (v59)
  {
    if (!v60)
    {
      uint64_t v61 = sub_251037400();
      v155 = v53;
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
      v62(v55, v56, v61);
      uint64_t v63 = v57[5];
      uint64_t v64 = &v55[v63];
      v65 = &v56[v63];
      v62(&v55[v63], &v56[v63], v61);
      sub_250F26E08();
      v62(&v64[*(int *)(v66 + 36)], &v65[*(int *)(v66 + 36)], v61);
      uint64_t v67 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v64[v67[5]] = *(void *)&v65[v67[5]];
      *(void *)&v64[v67[6]] = *(void *)&v65[v67[6]];
      *(void *)&v64[v67[7]] = *(void *)&v65[v67[7]];
      uint64_t v68 = v57[6];
      uint64_t v69 = &v55[v68];
      uint64_t v70 = &v56[v68];
      char v71 = v70[16];
      *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
      v69[16] = v71;
      v55[v57[7]] = v56[v57[7]];
      v55[v57[8]] = v56[v57[8]];
      v55[v57[9]] = v56[v57[9]];
      uint64_t v72 = v57[10];
      v73 = &v55[v72];
      uint64_t v74 = &v56[v72];
      *(void *)v73 = *(void *)v74;
      *((void *)v73 + 1) = *((void *)v74 + 1);
      uint64_t v75 = v57[11];
      uint64_t v76 = &v55[v75];
      v77 = &v56[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      *((void *)v76 + 1) = *((void *)v77 + 1);
      v160 = *(void (**)(char *, void, uint64_t, int *))(v159 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v160(v55, 0, 1, v57);
      uint64_t v53 = v155;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v60)
  {
    sub_250FD1CFC((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_250FD474C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v129 = sub_251037400();
  v130 = *(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 24);
  v130(v55, v56, v129);
  v131 = v130;
  uint64_t v132 = v57[5];
  v133 = &v55[v132];
  v156 = v53;
  v158 = v5;
  v134 = &v56[v132];
  v135 = v131;
  v131(&v55[v132], &v56[v132], v129);
  sub_250F26E08();
  v135(&v133[*(int *)(v136 + 36)], &v134[*(int *)(v136 + 36)], v129);
  v137 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v133[v137[5]] = *(void *)&v134[v137[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v133[v137[6]] = *(void *)&v134[v137[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v138 = v137[7];
  uint64_t v139 = *(void *)&v134[v138];
  uint64_t v53 = v156;
  uint64_t v5 = v158;
  *(void *)&v133[v138] = v139;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v140 = v57[6];
  v141 = &v55[v140];
  v142 = &v56[v140];
  long long v143 = *(_OWORD *)v142;
  v141[16] = v142[16];
  *(_OWORD *)v141 = v143;
  v55[v57[7]] = v56[v57[7]];
  v55[v57[8]] = v56[v57[8]];
  v55[v57[9]] = v56[v57[9]];
  uint64_t v144 = v57[10];
  v145 = &v55[v144];
  v146 = &v56[v144];
  *(void *)v145 = *(void *)v146;
  *((void *)v145 + 1) = *((void *)v146 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v147 = v57[11];
  v148 = &v55[v147];
  v149 = &v56[v147];
  *(void *)v148 = *(void *)v149;
  *((void *)v148 + 1) = *((void *)v149 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v79 = v53[6];
  long long v80 = &v51[v79];
  uint64_t v81 = &v52[v79];
  *(void *)long long v80 = *(void *)v81;
  *((void *)v80 + 1) = *((void *)v81 + 1);
  uint64_t v82 = v53[7];
  long long v83 = &v51[v82];
  uint64_t v84 = &v52[v82];
  *(void *)long long v83 = *(void *)v84;
  uint64_t v85 = *((void *)v84 + 1);
  v83[16] = v84[16];
  *((void *)v83 + 1) = v85;
  *((void *)v83 + 3) = *((void *)v84 + 3);
  *((void *)v83 + 4) = *((void *)v84 + 4);
  *((void *)v83 + 5) = *((void *)v84 + 5);
  *((void *)v83 + 6) = *((void *)v84 + 6);
  *((void *)v83 + 7) = *((void *)v84 + 7);
  *((void *)v83 + 8) = *((void *)v84 + 8);
  *((void *)v83 + 9) = *((void *)v84 + 9);
  *((void *)v83 + 10) = *((void *)v84 + 10);
  *(void *)&v51[v53[8]] = *(void *)&v52[v53[8]];
  *(void *)&v51[v53[9]] = *(void *)&v52[v53[9]];
  uint64_t v86 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v87 = &v51[v86];
  v88 = &v52[v86];
  *(void *)v87 = *(void *)v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 1) = *((void *)v88 + 1);
  *((void *)v87 + 2) = *((void *)v88 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 3) = *((void *)v88 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 4) = *((void *)v88 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 5) = *((void *)v88 + 5);
  *((void *)v87 + 6) = *((void *)v88 + 6);
  *((void *)v87 + 7) = *((void *)v88 + 7);
  *((void *)v87 + 8) = *((void *)v88 + 8);
  *((void *)v87 + 9) = *((void *)v88 + 9);
  *((void *)v87 + 10) = *((void *)v88 + 10);
  *((void *)v87 + 11) = *((void *)v88 + 11);
  *((void *)v87 + 12) = *((void *)v88 + 12);
  *((void *)v87 + 13) = *((void *)v88 + 13);
  *((void *)v87 + 14) = *((void *)v88 + 14);
  uint64_t v89 = v161[8];
  uint64_t v90 = (char *)v5 + v89;
  uint64_t v91 = (long long *)((char *)v162 + v89);
  uint64_t v92 = *(void *)((char *)v162 + v89);
  if (*(void *)((char *)v5 + v89))
  {
    if (v92)
    {
      *(void *)uint64_t v90 = v92;
      swift_retain();
      swift_release();
      *((void *)v90 + 1) = *((void *)v91 + 1);
      swift_retain();
      swift_release();
      *((void *)v90 + 2) = *((void *)v91 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80((uint64_t)v5 + v89);
      uint64_t v93 = *((void *)v91 + 2);
      *(_OWORD *)uint64_t v90 = *v91;
      *((void *)v90 + 2) = v93;
    }
  }
  else if (v92)
  {
    *(void *)uint64_t v90 = v92;
    *((void *)v90 + 1) = *((void *)v91 + 1);
    *((void *)v90 + 2) = *((void *)v91 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v150 = *v91;
    *((void *)v90 + 2) = *((void *)v91 + 2);
    *(_OWORD *)uint64_t v90 = v150;
  }
  v90[24] = *((unsigned char *)v91 + 24);
  v90[32] = *((unsigned char *)v91 + 32);
  *((void *)v90 + 5) = *((void *)v91 + 5);
  swift_retain();
  swift_release();
  uint64_t v151 = *((void *)v91 + 6);
  v90[56] = *((unsigned char *)v91 + 56);
  *((void *)v90 + 6) = v151;
  *((void *)v90 + 8) = *((void *)v91 + 8);
  *((void *)v90 + 9) = *((void *)v91 + 9);
  swift_retain();
  swift_release();
  *((void *)v90 + 10) = *((void *)v91 + 10);
  swift_retain();
  swift_release();
  *((void *)v90 + 11) = *((void *)v91 + 11);
  uint64_t v152 = *((void *)v91 + 12);
  v90[104] = *((unsigned char *)v91 + 104);
  *((void *)v90 + 12) = v152;
  *((void *)v90 + 14) = *((void *)v91 + 14);
  *((void *)v90 + 15) = *((void *)v91 + 15);
  *((void *)v90 + 16) = *((void *)v91 + 16);
  *((void *)v90 + 17) = *((void *)v91 + 17);
  *((void *)v90 + 18) = *((void *)v91 + 18);
  *((void *)v90 + 19) = *((void *)v91 + 19);
  *((void *)v90 + 20) = *((void *)v91 + 20);
  *((void *)v90 + 21) = *((void *)v91 + 21);
  *((void *)v90 + 22) = *((void *)v91 + 22);
  swift_retain();
  swift_release();
  *((void *)v90 + 23) = *((void *)v91 + 23);
  swift_retain();
  swift_release();
  uint64_t v153 = *((void *)v91 + 24);
  v90[200] = *((unsigned char *)v91 + 200);
  *((void *)v90 + 24) = v153;
  v90[201] = *((unsigned char *)v91 + 201);
  *((void *)v90 + 26) = *((void *)v91 + 26);
  swift_retain();
  swift_release();
  *((void *)v90 + 27) = *((void *)v91 + 27);
  swift_retain();
  swift_release();
  *((void *)v90 + 28) = *((void *)v91 + 28);
  swift_retain();
  swift_release();
  *((void *)v90 + 29) = *((void *)v91 + 29);
  swift_retain();
  swift_release();
  *((void *)v90 + 30) = *((void *)v91 + 30);
  swift_retain();
  swift_release();
  v90[248] = *((unsigned char *)v91 + 248);
  *((void *)v90 + 32) = *((void *)v91 + 32);
  swift_retain();
  swift_release();
  *((void *)v90 + 33) = *((void *)v91 + 33);
  swift_retain();
  swift_release();
  *((void *)v90 + 34) = *((void *)v91 + 34);
  return v5;
}

uint64_t sub_250FD1CFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_250FD1D5C(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v9 = *((void *)v8 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_251037740();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v6, v7, v11);
    uint64_t v12 = v8[5];
    int v13 = &v6[v12];
    uint64_t v69 = v3;
    uint64_t v14 = &v7[v12];
    uint64_t v15 = sub_251037400();
    char v71 = v4;
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
    v16(v13, v14, v15);
    uint64_t v17 = v8[6];
    uint64_t v18 = &v6[v17];
    uint64_t v19 = &v7[v17];
    v16(&v6[v17], &v7[v17], v15);
    sub_250F26E08();
    uint64_t v21 = v20;
    v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v15);
    uint64_t v22 = v8[7];
    uint64_t v23 = &v6[v22];
    uint64_t v24 = &v7[v22];
    v16(&v6[v22], &v7[v22], v15);
    v16(&v23[*(int *)(v21 + 36)], &v24[*(int *)(v21 + 36)], v15);
    uint64_t v4 = v71;
    uint64_t v25 = v8[8];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = &v7[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = v8[9];
    uint64_t v29 = &v6[v28];
    uint64_t v30 = &v7[v28];
    uint64_t v31 = sub_2510378C0();
    char v32 = v30;
    uint64_t v3 = v69;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v32, v31);
    *(_OWORD *)&v6[v8[10]] = *(_OWORD *)&v7[v8[10]];
    *(_OWORD *)&v6[v8[11]] = *(_OWORD *)&v7[v8[11]];
    *(_OWORD *)&v6[v8[12]] = *(_OWORD *)&v7[v8[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v33 = a3[7];
  *(void *)((char *)v4 + a3[6]) = *(void *)((char *)v3 + a3[6]);
  uint64_t v34 = (char *)v4 + v33;
  BOOL v35 = (char *)v3 + v33;
  *(void *)((char *)v4 + v33) = *(void *)((char *)v3 + v33);
  uint64_t v36 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v37 = v36[5];
  uint64_t v38 = &v34[v37];
  uint64_t v39 = &v35[v37];
  uint64_t v40 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    sub_250FD474C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v70 = v3;
    uint64_t v43 = sub_251037400();
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
    uint64_t v72 = v4;
    v44(v38, v39, v43);
    uint64_t v68 = v41;
    uint64_t v45 = v44;
    uint64_t v46 = v40[5];
    uint64_t v47 = &v38[v46];
    double v48 = &v39[v46];
    v45(&v38[v46], &v39[v46], v43);
    sub_250F26E08();
    uint64_t v50 = v43;
    uint64_t v3 = v70;
    v45(&v47[*(int *)(v49 + 36)], &v48[*(int *)(v49 + 36)], v50);
    uint64_t v4 = v72;
    uint64_t v51 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v47[v51[5]] = *(void *)&v48[v51[5]];
    *(void *)&v47[v51[6]] = *(void *)&v48[v51[6]];
    *(void *)&v47[v51[7]] = *(void *)&v48[v51[7]];
    uint64_t v52 = v40[6];
    uint64_t v53 = &v38[v52];
    uint64_t v54 = &v39[v52];
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    v53[16] = v54[16];
    v38[v40[7]] = v39[v40[7]];
    v38[v40[8]] = v39[v40[8]];
    v38[v40[9]] = v39[v40[9]];
    *(_OWORD *)&v38[v40[10]] = *(_OWORD *)&v39[v40[10]];
    *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v68 + 56))(v38, 0, 1, v40);
  }
  *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
  uint64_t v55 = v36[7];
  uint64_t v56 = &v34[v55];
  uint64_t v57 = &v35[v55];
  long long v58 = *((_OWORD *)v57 + 1);
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *((_OWORD *)v56 + 1) = v58;
  *((void *)v56 + 10) = *((void *)v57 + 10);
  long long v59 = *((_OWORD *)v57 + 4);
  long long v60 = *((_OWORD *)v57 + 2);
  *((_OWORD *)v56 + 3) = *((_OWORD *)v57 + 3);
  *((_OWORD *)v56 + 4) = v59;
  *((_OWORD *)v56 + 2) = v60;
  *(void *)&v34[v36[8]] = *(void *)&v35[v36[8]];
  *(void *)&v34[v36[9]] = *(void *)&v35[v36[9]];
  uint64_t v61 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v62 = &v34[v61];
  uint64_t v63 = &v35[v61];
  long long v64 = *((_OWORD *)v63 + 5);
  *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
  *((_OWORD *)v62 + 5) = v64;
  *((_OWORD *)v62 + 6) = *((_OWORD *)v63 + 6);
  *((void *)v62 + 14) = *((void *)v63 + 14);
  long long v65 = *((_OWORD *)v63 + 1);
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
  *((_OWORD *)v62 + 1) = v65;
  long long v66 = *((_OWORD *)v63 + 3);
  *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
  *((_OWORD *)v62 + 3) = v66;
  memcpy((char *)v4 + a3[8], (char *)v3 + a3[8], 0x118uLL);
  return v4;
}

void *sub_250FD232C(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  v137 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  v135 = a3;
  uint64_t v136 = v4;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037740();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v7, v8, v14);
      uint64_t v15 = v9[5];
      uint64_t v16 = &v7[v15];
      uint64_t v17 = &v8[v15];
      uint64_t v18 = sub_251037400();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
      v19(v16, v17, v18);
      uint64_t v20 = v9[6];
      uint64_t v21 = &v7[v20];
      uint64_t v22 = &v8[v20];
      v19(&v7[v20], &v8[v20], v18);
      sub_250F26E08();
      uint64_t v24 = v23;
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
      uint64_t v25 = v9[7];
      uint64_t v26 = &v7[v25];
      unint64_t v27 = &v8[v25];
      v19(&v7[v25], &v8[v25], v18);
      uint64_t v28 = v18;
      a3 = v135;
      v19(&v26[*(int *)(v24 + 36)], &v27[*(int *)(v24 + 36)], v28);
      uint64_t v29 = v9[8];
      uint64_t v30 = &v7[v29];
      uint64_t v31 = &v8[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      uint64_t v32 = v9[9];
      uint64_t v33 = &v7[v32];
      uint64_t v34 = &v8[v32];
      uint64_t v35 = sub_2510378C0();
      uint64_t v36 = v34;
      uint64_t v4 = v136;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v36, v35);
      *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
      *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
      *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
      (*(void (**)(char *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_250FD1CFC((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
LABEL_6:
    sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v74 = sub_251037740();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 40))(v7, v8, v74);
  uint64_t v75 = v9[5];
  uint64_t v76 = &v7[v75];
  v77 = &v8[v75];
  uint64_t v78 = a3;
  uint64_t v79 = sub_251037400();
  long long v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 40);
  v80(v76, v77, v79);
  uint64_t v81 = v9[6];
  uint64_t v82 = &v7[v81];
  long long v83 = &v8[v81];
  v80(&v7[v81], &v8[v81], v79);
  sub_250F26E08();
  uint64_t v85 = v84;
  v80(&v82[*(int *)(v84 + 36)], &v83[*(int *)(v84 + 36)], v79);
  uint64_t v86 = v9[7];
  v87 = &v7[v86];
  v88 = &v8[v86];
  v80(&v7[v86], &v8[v86], v79);
  uint64_t v89 = v79;
  a3 = v78;
  v80(&v87[*(int *)(v85 + 36)], &v88[*(int *)(v85 + 36)], v89);
  uint64_t v90 = v9[8];
  uint64_t v91 = &v7[v90];
  uint64_t v92 = &v8[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  v91[8] = v92[8];
  uint64_t v93 = v9[9];
  uint64_t v94 = &v7[v93];
  uint64_t v95 = &v8[v93];
  uint64_t v96 = sub_2510378C0();
  uint64_t v97 = v95;
  uint64_t v4 = v136;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 40))(v94, v97, v96);
  uint64_t v98 = v9[10];
  uint64_t v99 = &v7[v98];
  uint64_t v100 = &v8[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease();
  uint64_t v103 = v9[11];
  uint64_t v104 = &v7[v103];
  uint64_t v105 = &v8[v103];
  uint64_t v107 = *(void *)v105;
  uint64_t v106 = *((void *)v105 + 1);
  *(void *)uint64_t v104 = v107;
  *((void *)v104 + 1) = v106;
  swift_bridgeObjectRelease();
  uint64_t v108 = v9[12];
  uint64_t v109 = &v7[v108];
  uint64_t v110 = &v8[v108];
  uint64_t v112 = *(void *)v110;
  uint64_t v111 = *((void *)v110 + 1);
  *(void *)uint64_t v109 = v112;
  *((void *)v109 + 1) = v111;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v38 = a3[7];
  uint64_t v39 = v137;
  *(void *)((char *)v137 + a3[6]) = *(void *)((char *)v4 + a3[6]);
  uint64_t v40 = (char *)v137 + v38;
  uint64_t v41 = (char *)v4 + v38;
  *(void *)((char *)v137 + v38) = *(void *)((char *)v4 + v38);
  swift_bridgeObjectRelease();
  v134 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v42 = v134[5];
  uint64_t v43 = &v40[v42];
  uint64_t v44 = &v41[v42];
  uint64_t v45 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v46 = *((void *)v45 - 1);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      uint64_t v50 = sub_251037400();
      uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32);
      v51(v43, v44, v50);
      uint64_t v52 = v51;
      uint64_t v53 = v45[5];
      uint64_t v54 = &v43[v53];
      uint64_t v55 = &v44[v53];
      v52(&v43[v53], &v44[v53], v50);
      sub_250F26E08();
      v52(&v54[*(int *)(v56 + 36)], &v55[*(int *)(v56 + 36)], v50);
      uint64_t v39 = v137;
      uint64_t v57 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v54[v57[5]] = *(void *)&v55[v57[5]];
      *(void *)&v54[v57[6]] = *(void *)&v55[v57[6]];
      *(void *)&v54[v57[7]] = *(void *)&v55[v57[7]];
      uint64_t v58 = v45[6];
      long long v59 = &v43[v58];
      long long v60 = &v44[v58];
      *(_OWORD *)long long v59 = *(_OWORD *)v60;
      v59[16] = v60[16];
      v43[v45[7]] = v44[v45[7]];
      v43[v45[8]] = v44[v45[8]];
      v43[v45[9]] = v44[v45[9]];
      *(_OWORD *)&v43[v45[10]] = *(_OWORD *)&v44[v45[10]];
      *(_OWORD *)&v43[v45[11]] = *(_OWORD *)&v44[v45[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v49)
  {
    sub_250FD1CFC((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_250FD474C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v113 = sub_251037400();
  char v114 = *(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 40);
  v114(v43, v44, v113);
  uint64_t v115 = v114;
  uint64_t v116 = v45[5];
  v117 = &v43[v116];
  uint64_t v118 = &v44[v116];
  v115(&v43[v116], &v44[v116], v113);
  sub_250F26E08();
  v115(&v117[*(int *)(v119 + 36)], &v118[*(int *)(v119 + 36)], v113);
  uint64_t v39 = v137;
  uint64_t v120 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v117[v120[5]] = *(void *)&v118[v120[5]];
  swift_bridgeObjectRelease();
  *(void *)&v117[v120[6]] = *(void *)&v118[v120[6]];
  swift_bridgeObjectRelease();
  *(void *)&v117[v120[7]] = *(void *)&v118[v120[7]];
  swift_bridgeObjectRelease();
  uint64_t v121 = v45[6];
  v122 = &v43[v121];
  uint64_t v123 = &v44[v121];
  *(_OWORD *)v122 = *(_OWORD *)v123;
  v122[16] = v123[16];
  v43[v45[7]] = v44[v45[7]];
  v43[v45[8]] = v44[v45[8]];
  v43[v45[9]] = v44[v45[9]];
  uint64_t v124 = v45[10];
  v125 = &v43[v124];
  uint64_t v126 = (uint64_t *)&v44[v124];
  uint64_t v128 = *v126;
  uint64_t v127 = v126[1];
  *(void *)v125 = v128;
  *((void *)v125 + 1) = v127;
  swift_bridgeObjectRelease();
  uint64_t v129 = v45[11];
  v130 = &v43[v129];
  v131 = (uint64_t *)&v44[v129];
  uint64_t v133 = *v131;
  uint64_t v132 = v131[1];
  *(void *)v130 = v133;
  *((void *)v130 + 1) = v132;
  swift_bridgeObjectRelease();
LABEL_13:
  *(_OWORD *)&v40[v134[6]] = *(_OWORD *)&v41[v134[6]];
  uint64_t v62 = v134[7];
  uint64_t v63 = &v40[v62];
  long long v64 = &v41[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  v63[16] = v64[16];
  *(_OWORD *)(v63 + 24) = *(_OWORD *)(v64 + 24);
  *(_OWORD *)(v63 + 40) = *(_OWORD *)(v64 + 40);
  *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
  *(_OWORD *)(v63 + 72) = *(_OWORD *)(v64 + 72);
  *(void *)&v40[v134[8]] = *(void *)&v41[v134[8]];
  *(void *)&v40[v134[9]] = *(void *)&v41[v134[9]];
  uint64_t v65 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  long long v66 = &v40[v65];
  uint64_t v67 = &v41[v65];
  *(void *)&v40[v65] = *(void *)v67;
  swift_bridgeObjectRelease();
  *((void *)v66 + 1) = *((void *)v67 + 1);
  *((void *)v66 + 2) = *((void *)v67 + 2);
  swift_bridgeObjectRelease();
  *((void *)v66 + 3) = *((void *)v67 + 3);
  swift_bridgeObjectRelease();
  *((void *)v66 + 4) = *((void *)v67 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
  *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
  *(_OWORD *)(v66 + 72) = *(_OWORD *)(v67 + 72);
  *(_OWORD *)(v66 + 88) = *(_OWORD *)(v67 + 88);
  *(_OWORD *)(v66 + 104) = *(_OWORD *)(v67 + 104);
  uint64_t v68 = v135[8];
  uint64_t v69 = (uint64_t)v39 + v68;
  uint64_t v70 = (uint64_t)v136 + v68;
  if (!*(void *)((char *)v39 + v68))
  {
LABEL_17:
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
    *(void *)(v69 + 16) = *(void *)(v70 + 16);
    goto LABEL_18;
  }
  if (!*(void *)v70)
  {
    sub_250F27E80(v69);
    goto LABEL_17;
  }
  *(void *)uint64_t v69 = *(void *)v70;
  swift_release();
  *(void *)(v69 + 8) = *(void *)(v70 + 8);
  swift_release();
  *(void *)(v69 + 16) = *(void *)(v70 + 16);
  swift_release();
LABEL_18:
  *(unsigned char *)(v69 + 24) = *(unsigned char *)(v70 + 24);
  *(unsigned char *)(v69 + 32) = *(unsigned char *)(v70 + 32);
  *(void *)(v69 + 40) = *(void *)(v70 + 40);
  swift_release();
  *(void *)(v69 + 48) = *(void *)(v70 + 48);
  *(unsigned char *)(v69 + 56) = *(unsigned char *)(v70 + 56);
  *(void *)(v69 + 64) = *(void *)(v70 + 64);
  *(void *)(v69 + 72) = *(void *)(v70 + 72);
  swift_release();
  *(void *)(v69 + 80) = *(void *)(v70 + 80);
  swift_release();
  *(void *)(v69 + 88) = *(void *)(v70 + 88);
  *(void *)(v69 + 96) = *(void *)(v70 + 96);
  *(unsigned char *)(v69 + 104) = *(unsigned char *)(v70 + 104);
  long long v71 = *(_OWORD *)(v70 + 128);
  *(_OWORD *)(v69 + 112) = *(_OWORD *)(v70 + 112);
  *(_OWORD *)(v69 + 128) = v71;
  long long v72 = *(_OWORD *)(v70 + 160);
  *(_OWORD *)(v69 + 144) = *(_OWORD *)(v70 + 144);
  *(_OWORD *)(v69 + 160) = v72;
  *(void *)(v69 + 176) = *(void *)(v70 + 176);
  swift_release();
  *(void *)(v69 + 184) = *(void *)(v70 + 184);
  swift_release();
  *(void *)(v69 + 192) = *(void *)(v70 + 192);
  *(unsigned char *)(v69 + 200) = *(unsigned char *)(v70 + 200);
  *(unsigned char *)(v69 + 201) = *(unsigned char *)(v70 + 201);
  *(void *)(v69 + 208) = *(void *)(v70 + 208);
  swift_release();
  *(void *)(v69 + 216) = *(void *)(v70 + 216);
  swift_release();
  *(void *)(v69 + 224) = *(void *)(v70 + 224);
  swift_release();
  *(void *)(v69 + 232) = *(void *)(v70 + 232);
  swift_release();
  *(void *)(v69 + 240) = *(void *)(v70 + 240);
  swift_release();
  *(unsigned char *)(v69 + 248) = *(unsigned char *)(v70 + 248);
  *(void *)(v69 + 256) = *(void *)(v70 + 256);
  swift_release();
  *(void *)(v69 + 264) = *(void *)(v70 + 264);
  swift_release();
  *(void *)(v69 + 272) = *(void *)(v70 + 272);
  return v39;
}

uint64_t sub_250FD2E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FD2EA8);
}

uint64_t sub_250FD2EA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OvernightMetricsChartLayout(0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_250FD3004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FD3018);
}

void *sub_250FD3018(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OvernightMetricsChartLayout(0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for SmoothedLineTrace()
{
  uint64_t result = qword_269B14318;
  if (!qword_269B14318) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250FD31C0()
{
  sub_250FD474C(319, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartLayout(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_250FD32DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250FD32F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v47 = (uint64_t)&v42 - v4;
  uint64_t v45 = type metadata accessor for SmoothedLineTrace();
  uint64_t v5 = *(void *)(v45 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v45);
  sub_250FD4618();
  uint64_t v44 = v7;
  uint64_t v46 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FD4904();
  uint64_t v54 = v9;
  uint64_t v52 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FD4AC8();
  uint64_t v55 = v12;
  uint64_t v53 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FD4C4C();
  uint64_t v51 = v14;
  uint64_t v49 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int v48 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *v1;
  sub_250FD5354((uint64_t)v1, (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SmoothedLineTrace);
  unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = swift_allocObject();
  sub_250FD5430((uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, (uint64_t (*)(void))type metadata accessor for SmoothedLineTrace);
  sub_250FD474C(0, &qword_26B210BD8, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D488]);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_250FD474C(0, &qword_269B14330, (uint64_t (*)(uint64_t))sub_250FD47B0, v2);
  sub_250FD4834();
  sub_250FD49F8();
  sub_250FD48BC(&qword_269B13480, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
  swift_bridgeObjectRetain();
  uint64_t v18 = v45;
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  uint64_t v21 = v11;
  uint64_t v22 = v1;
  sub_251038C60();
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_2510380A0();
  unint64_t v23 = sub_250FD4988();
  sub_251037DC0();
  sub_250F6149C((uint64_t)v65);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v20);
  uint64_t v24 = sub_250FD42F4();
  sub_251038DF0();
  sub_251038E00();
  MEMORY[0x253390A10](v24);
  sub_251038210();
  uint64_t v25 = v66[0];
  uint64_t v26 = v66[1];
  uint64_t v27 = v66[2];
  unint64_t v28 = v66[3];
  uint64_t v29 = v66[4];
  uint64_t v30 = v47;
  sub_250F4E53C((uint64_t)v22 + *(int *)(v18 + 20), v47);
  uint64_t v31 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  LODWORD(v24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31);
  sub_250FD529C(v30);
  float v32 = 0.0;
  if (v24 == 1) {
    float v32 = *(double *)((char *)v22 + *(int *)(v18 + 24)) * 0.3;
  }
  uint64_t v59 = v25;
  uint64_t v60 = v26;
  uint64_t v61 = v27;
  unint64_t v62 = v28;
  uint64_t v63 = v29;
  float v64 = v32;
  sub_250FD53E0(0, &qword_269B14360, MEMORY[0x263F18AF0], MEMORY[0x263F18AE0], MEMORY[0x263F19910]);
  uint64_t v34 = v33;
  uint64_t v57 = v20;
  unint64_t v58 = v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v36 = sub_250FD4BC8();
  uint64_t v37 = v50;
  uint64_t v38 = v54;
  sub_251037D40();
  sub_250FD5328((uint64_t)v66);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v38);
  uint64_t v59 = v38;
  uint64_t v60 = v34;
  uint64_t v61 = OpaqueTypeConformance2;
  unint64_t v62 = v36;
  swift_getOpaqueTypeConformance2();
  uint64_t v39 = v48;
  uint64_t v40 = v55;
  sub_251037D90();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v40);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v56, v39, v51);
}

uint64_t sub_250FD3ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263EFCC50];
  sub_250FD53E0(0, &qword_269B14378, MEMORY[0x263F8D6C8], MEMORY[0x263EFCE88], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v7 - 8);
  float v64 = (char *)&v52 - v8;
  sub_250FD53E0(0, (unint64_t *)&qword_269B13488, MEMORY[0x263F8D538], MEMORY[0x263EFCE78], v6);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v62 = (char *)&v52 - v10;
  sub_250F26E08();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v54 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6158C();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v57 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_251037F90();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  unint64_t v58 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FD47B0();
  uint64_t v65 = *(void *)(v16 - 8);
  uint64_t v66 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v56 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v55 = (char *)&v52 - v19;
  sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v52 - v24;
  uint64_t v26 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  float v32 = (char *)&v52 - v31;
  uint64_t v53 = type metadata accessor for SmoothedLineTrace();
  uint64_t v33 = *(int *)(v53 + 20);
  uint64_t v60 = a2;
  uint64_t v34 = a2 + v33;
  sub_250F4E53C(v34, (uint64_t)v25);
  uint64_t v63 = a1;
  sub_250FD5354(a1, (uint64_t)v29, type metadata accessor for IndividualOvernightMetricChartPoint);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v35(v25, 1, v26) == 1)
  {
    sub_250FD5430((uint64_t)v29, (uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_250FD529C((uint64_t)v25);
  }
  else
  {
    sub_250FD1CFC((uint64_t)v29, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_250FD5430((uint64_t)v25, (uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  unint64_t v36 = &v32[*(int *)(v26 + 32)];
  if (v36[8])
  {
    sub_250FD1CFC((uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t v37 = 1;
    uint64_t v39 = v65;
    uint64_t v38 = v66;
  }
  else
  {
    double v40 = *(double *)v36;
    sub_2510384C0();
    uint64_t v52 = a3;
    sub_250F4E53C(v34, (uint64_t)v22);
    unsigned int v41 = v35(v22, 1, v26);
    sub_250FD529C((uint64_t)v22);
    uint64_t v42 = 28;
    if (v41 == 1) {
      uint64_t v42 = 24;
    }
    uint64_t v43 = v54;
    sub_250FD5354((uint64_t)&v32[*(int *)(v26 + v42)], v54, (uint64_t (*)(void))sub_250F26E08);
    sub_251037400();
    sub_250FD48BC((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    sub_251037E30();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_250FD1CFC(v43, (uint64_t (*)(void))sub_250F26E08);
    sub_2510384C0();
    sub_250FCA198(v40);
    uint64_t v67 = v44;
    sub_251037E40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2510384C0();
    uint64_t v67 = sub_251037700();
    sub_251037E40();
    swift_bridgeObjectRelease();
    a3 = v52;
    swift_bridgeObjectRelease();
    uint64_t v45 = v58;
    sub_251037F80();
    uint64_t v46 = v56;
    uint64_t v47 = v61;
    sub_251037D80();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v47);
    sub_250FD1CFC((uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t v39 = v65;
    int v48 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    uint64_t v49 = v55;
    uint64_t v50 = v46;
    uint64_t v38 = v66;
    v48(v55, v50, v66);
    v48(a3, v49, v38);
    uint64_t v37 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(a3, v37, 1, v38);
}

uint64_t sub_250FD42F4()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v18 - v7;
  uint64_t v9 = *v1;
  uint64_t v10 = *(void *)(*v1 + 16);
  if (!v10) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v11 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  sub_250FD5354(v11, (uint64_t)v18 - v7, type metadata accessor for IndividualOvernightMetricChartPoint);
  sub_250FD5354(v11 + *(void *)(v3 + 72) * (v10 - 1), (uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
  sub_2510372B0();
  double v13 = v12;
  uint64_t result = sub_2510372B0();
  if (v13 <= v15)
  {
    double v16 = MEMORY[0x270FA5388](result);
    *(void *)&v18[-4] = v1;
    v18[-3] = v13;
    v18[-2] = v16;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_250FED758((void (*)(void *__return_ptr, uint64_t))sub_250FD53BC, (uint64_t)&v18[-6], v9);
    swift_bridgeObjectRelease();
    sub_250FD1CFC((uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_250FD1CFC((uint64_t)v8, type metadata accessor for IndividualOvernightMetricChartPoint);
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_250FD4504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SmoothedLineTrace();
  memcpy(__dst, (const void *)(a2 + *(int *)(v6 + 32)), sizeof(__dst));
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8))
  {
    sub_251038A90();
  }
  else
  {
    sub_250F2A3B4(__dst);
    sub_2510378A0();
    swift_retain();
    sub_250F2E048(__dst);
  }
  sub_2510372B0();
  uint64_t result = sub_251038CC0();
  *a3 = result;
  a3[1] = v8;
  return result;
}

void sub_250FD4618()
{
  if (!qword_269B14328)
  {
    sub_250FD474C(255, &qword_26B210BD8, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D488]);
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(255);
    sub_250FD474C(255, &qword_269B14330, (uint64_t (*)(uint64_t))sub_250FD47B0, MEMORY[0x263F8D8F0]);
    sub_250FD4834();
    sub_250FD48BC(&qword_269B13390, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint.ID);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14328);
    }
  }
}

void sub_250FD474C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250FD47B0()
{
  if (!qword_269B14338)
  {
    sub_251037F90();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14338);
    }
  }
}

unint64_t sub_250FD4834()
{
  unint64_t result = qword_269B13388;
  if (!qword_269B13388)
  {
    sub_250FD474C(255, &qword_26B210BD8, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13388);
  }
  return result;
}

uint64_t sub_250FD48BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FD4904()
{
  if (!qword_269B14340)
  {
    sub_250FD4618();
    sub_250FD4988();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14340);
    }
  }
}

unint64_t sub_250FD4988()
{
  unint64_t result = qword_269B14348;
  if (!qword_269B14348)
  {
    sub_250FD4618();
    sub_250FD49F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14348);
  }
  return result;
}

unint64_t sub_250FD49F8()
{
  unint64_t result = qword_269B14350;
  if (!qword_269B14350)
  {
    sub_250FD474C(255, &qword_269B14330, (uint64_t (*)(uint64_t))sub_250FD47B0, MEMORY[0x263F8D8F0]);
    sub_251037F90();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14350);
  }
  return result;
}

void sub_250FD4AC8()
{
  if (!qword_269B14358)
  {
    sub_250FD4904();
    sub_250FD53E0(255, &qword_269B14360, MEMORY[0x263F18AF0], MEMORY[0x263F18AE0], MEMORY[0x263F19910]);
    sub_250FD4618();
    sub_250FD4988();
    swift_getOpaqueTypeConformance2();
    sub_250FD4BC8();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14358);
    }
  }
}

unint64_t sub_250FD4BC8()
{
  unint64_t result = qword_269B14368;
  if (!qword_269B14368)
  {
    sub_250FD53E0(255, &qword_269B14360, MEMORY[0x263F18AF0], MEMORY[0x263F18AE0], MEMORY[0x263F19910]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14368);
  }
  return result;
}

void sub_250FD4C4C()
{
  if (!qword_269B14370)
  {
    sub_250FD4AC8();
    sub_250FD4904();
    sub_250FD53E0(255, &qword_269B14360, MEMORY[0x263F18AF0], MEMORY[0x263F18AE0], MEMORY[0x263F19910]);
    sub_250FD4618();
    sub_250FD4988();
    swift_getOpaqueTypeConformance2();
    sub_250FD4BC8();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14370);
    }
  }
}

uint64_t sub_250FD4D84()
{
  uint64_t v1 = (int *)type metadata accessor for SmoothedLineTrace();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v5 - 1) + 48))(v4, 1, v5))
  {
    uint64_t v6 = sub_251037740();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    uint64_t v7 = v4 + v5[5];
    uint64_t v8 = sub_251037400();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    uint64_t v10 = v4 + v5[6];
    v9(v10, v8);
    sub_250F26E08();
    uint64_t v12 = v11;
    v9(v10 + *(int *)(v11 + 36), v8);
    uint64_t v13 = v4 + v5[7];
    v9(v13, v8);
    v9(v13 + *(int *)(v12 + 36), v8);
    uint64_t v14 = v4 + v5[9];
    uint64_t v15 = sub_2510378C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v3 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v18 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    uint64_t v19 = sub_251037400();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
    v20(v17, v19);
    uint64_t v21 = v17 + *(int *)(v18 + 20);
    v20(v21, v19);
    sub_250F26E08();
    v20(v21 + *(int *)(v22 + 36), v19);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + v1[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250FD521C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SmoothedLineTrace() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_250FD3ABC(a1, v6, a2);
}

uint64_t sub_250FD529C(uint64_t a1)
{
  sub_250FD474C(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250FD5328(uint64_t a1)
{
  return a1;
}

uint64_t sub_250FD5354(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250FD53BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_250FD4504(a1, *(void *)(v2 + 16), a2);
}

void sub_250FD53E0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_250FD5430(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250FD5498()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_250FD559C(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    uint64_t v26 = (void *)(v25 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
    uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = &v7[v10];
    uint64_t v12 = &v8[v10];
    v137 = a3;
    uint64_t v13 = sub_2510374F0();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    uint64_t v15 = v137;
    v14(v11, v12, v13);
    uint64_t v16 = *(int *)(v9 + 24);
    uint64_t v17 = *(void *)&v8[v16];
    uint64_t v18 = a2;
    *(void *)&v7[v16] = v17;
    uint64_t v19 = v137[6];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v131 = *((void *)v22 - 1);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, int *))(v131 + 48);
    swift_bridgeObjectRetain();
    uint64_t v133 = v23;
    if (v23(v21, 1, v22))
    {
      sub_250F6CD98();
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v27 = sub_251037400();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      v28(v20, v21, v27);
      uint64_t v29 = v22[5];
      uint64_t v30 = &v20[v29];
      uint64_t v31 = &v21[v29];
      v28(&v20[v29], &v21[v29], v27);
      sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v28(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v27);
      uint64_t v33 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v30[v33[5]] = *(void *)&v31[v33[5]];
      *(void *)&v30[v33[6]] = *(void *)&v31[v33[6]];
      *(void *)&v30[v33[7]] = *(void *)&v31[v33[7]];
      uint64_t v34 = v22[6];
      uint64_t v35 = &v20[v34];
      unint64_t v36 = &v21[v34];
      *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
      v35[16] = v36[16];
      v20[v22[7]] = v21[v22[7]];
      v20[v22[8]] = v21[v22[8]];
      v20[v22[9]] = v21[v22[9]];
      uint64_t v37 = v22[10];
      uint64_t v38 = &v20[v37];
      uint64_t v39 = &v21[v37];
      uint64_t v40 = *((void *)v39 + 1);
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = v40;
      uint64_t v41 = v22[11];
      uint64_t v42 = &v20[v41];
      uint64_t v43 = &v21[v41];
      uint64_t v44 = *((void *)v43 + 1);
      *(void *)uint64_t v42 = *(void *)v43;
      *((void *)v42 + 1) = v44;
      uint64_t v45 = *(void (**)(char *, void, uint64_t, int *))(v131 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = v137;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v20, 0, 1, v22);
      uint64_t v18 = a2;
    }
    uint64_t v46 = v15[7];
    uint64_t v47 = (char *)a1 + v46;
    int v48 = (char *)v18 + v46;
    v135 = v22;
    if (*(void *)v48)
    {
      uint64_t v49 = *((void *)v48 + 1);
      *(void *)uint64_t v47 = *(void *)v48;
      *((void *)v47 + 1) = v49;
      long long v50 = *((_OWORD *)v48 + 2);
      *((_OWORD *)v47 + 1) = *((_OWORD *)v48 + 1);
      *((_OWORD *)v47 + 2) = v50;
      *((_OWORD *)v47 + 3) = *((_OWORD *)v48 + 3);
      *((void *)v47 + 8) = *((void *)v48 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v51 = *((_OWORD *)v48 + 3);
      *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
      *((_OWORD *)v47 + 3) = v51;
      *((void *)v47 + 8) = *((void *)v48 + 8);
      long long v52 = *((_OWORD *)v48 + 1);
      *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v52;
    }
    uint64_t v53 = v15[9];
    *((unsigned char *)a1 + v15[8]) = *((unsigned char *)v18 + v15[8]);
    uint64_t v54 = v15;
    *(void *)((char *)a1 + v53) = *(void *)((char *)v18 + v53);
    uint64_t v55 = v15[11];
    *(void *)((char *)a1 + v15[10]) = *(void *)((char *)v18 + v15[10]);
    uint64_t v56 = (char *)a1 + v55;
    uint64_t v57 = (char *)v18 + v55;
    uint64_t v58 = *((void *)v57 + 1);
    *(void *)uint64_t v56 = *(void *)v57;
    *((void *)v56 + 1) = v58;
    *((_OWORD *)v56 + 1) = *((_OWORD *)v57 + 1);
    uint64_t v59 = v54[13];
    *(void *)((char *)a1 + v54[12]) = *(void *)((char *)v18 + v54[12]);
    uint64_t v136 = a1;
    __dst = (_OWORD *)((char *)a1 + v59);
    uint64_t v60 = (_OWORD *)((char *)v18 + v59);
    uint64_t v61 = type metadata accessor for BaselineSeparators.Configuration(0);
    uint64_t v62 = *(void *)(v61 - 8);
    uint64_t v63 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v62 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v63(v60, 1, v61))
    {
      sub_250FD6020(0);
      memcpy(__dst, v60, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      _OWORD *__dst = *v60;
      uint64_t v65 = *(int *)(v61 + 20);
      uint64_t v66 = (char *)__dst + v65;
      uint64_t v67 = (char *)v60 + v65;
      uint64_t v68 = sub_251037400();
      uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16);
      v69(v66, v67, v68);
      sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
      v69(&v66[*(int *)(v70 + 36)], &v67[*(int *)(v70 + 36)], v68);
      *(void *)((char *)__dst + *(int *)(v61 + 24)) = *(void *)((char *)v60 + *(int *)(v61 + 24));
      long long v71 = *(void (**)(_OWORD *, void, uint64_t, uint64_t))(v62 + 56);
      swift_retain();
      v71(__dst, 0, 1, v61);
    }
    long long v72 = v137;
    uint64_t v73 = v137[14];
    uint64_t v74 = (char *)v136 + v73;
    uint64_t v75 = a2;
    uint64_t v76 = (char *)a2 + v73;
    *(void *)((char *)v136 + v73) = *(void *)((char *)a2 + v73);
    v77 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v78 = v77[5];
    uint64_t v79 = &v74[v78];
    long long v80 = &v76[v78];
    swift_bridgeObjectRetain();
    if (v133(v80, 1, v135))
    {
      sub_250F6CD98();
      memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
      uint64_t v82 = v136;
    }
    else
    {
      uint64_t v83 = sub_251037400();
      uint64_t v84 = *(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16);
      v84(v79, v80, v83);
      uint64_t v85 = v84;
      uint64_t v86 = v135[5];
      v87 = &v79[v86];
      v88 = &v80[v86];
      v85(&v79[v86], &v80[v86], v83);
      sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v85(&v87[*(int *)(v89 + 36)], &v88[*(int *)(v89 + 36)], v83);
      uint64_t v90 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v87[v90[5]] = *(void *)&v88[v90[5]];
      *(void *)&v87[v90[6]] = *(void *)&v88[v90[6]];
      *(void *)&v87[v90[7]] = *(void *)&v88[v90[7]];
      uint64_t v91 = v135[6];
      uint64_t v92 = &v79[v91];
      uint64_t v93 = &v80[v91];
      *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
      v92[16] = v93[16];
      v79[v135[7]] = v80[v135[7]];
      v79[v135[8]] = v80[v135[8]];
      v79[v135[9]] = v80[v135[9]];
      uint64_t v94 = v135[10];
      uint64_t v95 = &v79[v94];
      uint64_t v96 = &v80[v94];
      uint64_t v97 = *((void *)v96 + 1);
      *(void *)uint64_t v95 = *(void *)v96;
      *((void *)v95 + 1) = v97;
      uint64_t v98 = v135[11];
      uint64_t v99 = &v79[v98];
      uint64_t v100 = &v80[v98];
      uint64_t v101 = *((void *)v100 + 1);
      *(void *)uint64_t v99 = *(void *)v100;
      *((void *)v99 + 1) = v101;
      v134 = *(void (**)(char *, void, uint64_t, int *))(v131 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v72 = v137;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v82 = v136;
      v134(v79, 0, 1, v135);
      uint64_t v75 = a2;
    }
    *(_OWORD *)&v74[v77[6]] = *(_OWORD *)&v76[v77[6]];
    uint64_t v102 = v77[7];
    uint64_t v103 = &v74[v102];
    uint64_t v104 = &v76[v102];
    long long v105 = *((_OWORD *)v104 + 1);
    *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
    *((_OWORD *)v103 + 1) = v105;
    *((void *)v103 + 10) = *((void *)v104 + 10);
    long long v106 = *((_OWORD *)v104 + 4);
    long long v107 = *((_OWORD *)v104 + 2);
    *((_OWORD *)v103 + 3) = *((_OWORD *)v104 + 3);
    *((_OWORD *)v103 + 4) = v106;
    *((_OWORD *)v103 + 2) = v107;
    *(void *)&v74[v77[8]] = *(void *)&v76[v77[8]];
    *(void *)&v74[v77[9]] = *(void *)&v76[v77[9]];
    uint64_t v108 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v109 = &v74[v108];
    uint64_t v110 = &v76[v108];
    uint64_t v111 = *((void *)v110 + 1);
    *(void *)uint64_t v109 = *(void *)v110;
    *((void *)v109 + 1) = v111;
    uint64_t v112 = *((void *)v110 + 3);
    *((void *)v109 + 2) = *((void *)v110 + 2);
    *((void *)v109 + 3) = v112;
    *((void *)v109 + 4) = *((void *)v110 + 4);
    *(_OWORD *)(v109 + 40) = *(_OWORD *)(v110 + 40);
    *(_OWORD *)(v109 + 56) = *(_OWORD *)(v110 + 56);
    *(_OWORD *)(v109 + 72) = *(_OWORD *)(v110 + 72);
    *(_OWORD *)(v109 + 88) = *(_OWORD *)(v110 + 88);
    *(_OWORD *)(v109 + 104) = *(_OWORD *)(v110 + 104);
    uint64_t v113 = v72[15];
    uint64_t v114 = (uint64_t)v82 + v113;
    uint64_t v115 = (char *)v75 + v113;
    uint64_t v116 = *(void *)((char *)v75 + v113);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v116)
    {
      uint64_t v117 = *((void *)v115 + 1);
      uint64_t v118 = *((void *)v115 + 2);
      *(void *)uint64_t v114 = v116;
      *(void *)(v114 + 8) = v117;
      *(void *)(v114 + 16) = v118;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
      *(void *)(v114 + 16) = *((void *)v115 + 2);
    }
    *(unsigned char *)(v114 + 24) = v115[24];
    *(unsigned char *)(v114 + 32) = v115[32];
    uint64_t v119 = *((void *)v115 + 6);
    *(void *)(v114 + 40) = *((void *)v115 + 5);
    *(void *)(v114 + 48) = v119;
    *(unsigned char *)(v114 + 56) = v115[56];
    uint64_t v120 = *((void *)v115 + 9);
    *(void *)(v114 + 64) = *((void *)v115 + 8);
    *(void *)(v114 + 72) = v120;
    *(void *)(v114 + 80) = *((void *)v115 + 10);
    long long v121 = *(_OWORD *)(v115 + 88);
    *(_OWORD *)(v114 + 104) = *(_OWORD *)(v115 + 104);
    *(_OWORD *)(v114 + 88) = v121;
    long long v122 = *(_OWORD *)(v115 + 120);
    long long v123 = *(_OWORD *)(v115 + 136);
    *(_OWORD *)(v114 + 152) = *(_OWORD *)(v115 + 152);
    *(_OWORD *)(v114 + 136) = v123;
    *(_OWORD *)(v114 + 120) = v122;
    uint64_t v124 = *((void *)v115 + 22);
    *(void *)(v114 + 168) = *((void *)v115 + 21);
    *(void *)(v114 + 176) = v124;
    uint64_t v126 = *((void *)v115 + 23);
    uint64_t v125 = *((void *)v115 + 24);
    *(unsigned char *)(v114 + 200) = v115[200];
    *(void *)(v114 + 184) = v126;
    *(void *)(v114 + 192) = v125;
    *(unsigned char *)(v114 + 201) = v115[201];
    uint64_t v127 = *((void *)v115 + 27);
    *(void *)(v114 + 208) = *((void *)v115 + 26);
    *(void *)(v114 + 216) = v127;
    uint64_t v128 = *((void *)v115 + 29);
    *(void *)(v114 + 224) = *((void *)v115 + 28);
    *(void *)(v114 + 232) = v128;
    *(void *)(v114 + 240) = *((void *)v115 + 30);
    *(unsigned char *)(v114 + 248) = v115[248];
    uint64_t v129 = *((void *)v115 + 33);
    *(void *)(v114 + 256) = *((void *)v115 + 32);
    *(void *)(v114 + 264) = v129;
    *(void *)(v114 + 272) = *((void *)v115 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v26 = v136;
  }
  swift_retain();
  return v26;
}

void sub_250FD5F84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_250FDB5DC((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250FD6020(uint64_t a1)
{
}

uint64_t sub_250FD6054(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v6 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
  if (!v9(v7, 1, v8))
  {
    uint64_t v10 = sub_251037400();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    v11(v7, v10);
    uint64_t v12 = v7 + *(int *)(v8 + 20);
    v11(v12, v10);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v11(v12 + *(int *)(v13 + 36), v10);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + a2[13];
  uint64_t v15 = type metadata accessor for BaselineSeparators.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    uint64_t v17 = sub_251037400();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
    v18(v16, v17);
    sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    v18(v16 + *(int *)(v19 + 36), v17);
    swift_release();
  }
  uint64_t v20 = a1 + a2[14];
  swift_bridgeObjectRelease();
  uint64_t v21 = v20 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v9(v21, 1, v8))
  {
    uint64_t v22 = sub_251037400();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
    v23(v21, v22);
    uint64_t v24 = v21 + *(int *)(v8 + 20);
    v23(v24, v22);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v23(v24 + *(int *)(v25 + 36), v22);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

unsigned char *sub_250FD6558(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v129 = &v8[v10];
  uint64_t v131 = &v7[v10];
  uint64_t v11 = sub_2510374F0();
  uint64_t v12 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v131, v129, v11);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  v130 = a3;
  uint64_t v132 = a2;
  uint64_t v13 = a3[6];
  uint64_t v14 = a1;
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, int *))(v18 + 48);
  swift_bridgeObjectRetain();
  uint64_t v124 = v19;
  if (v19(v16, 1, v17))
  {
    sub_250F6CD98();
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = sub_251037400();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    v22(v15, v16, v21);
    uint64_t v23 = v17[5];
    uint64_t v24 = &v15[v23];
    uint64_t v25 = &v16[v23];
    v22(&v15[v23], &v16[v23], v21);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
    uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v24[v27[5]] = *(void *)&v25[v27[5]];
    *(void *)&v24[v27[6]] = *(void *)&v25[v27[6]];
    *(void *)&v24[v27[7]] = *(void *)&v25[v27[7]];
    uint64_t v28 = v17[6];
    uint64_t v29 = &v15[v28];
    uint64_t v30 = &v16[v28];
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    uint64_t v31 = v17[10];
    uint64_t v32 = &v15[v31];
    uint64_t v33 = &v16[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = v17[11];
    unint64_t v36 = &v15[v35];
    uint64_t v37 = &v16[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)unint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    uint64_t v39 = *(void (**)(char *, void, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39(v15, 0, 1, v17);
  }
  uint64_t v40 = v130[7];
  uint64_t v41 = &v14[v40];
  uint64_t v42 = &v132[v40];
  uint64_t v127 = v17;
  uint64_t v122 = v18;
  if (*(void *)v42)
  {
    uint64_t v43 = *((void *)v42 + 1);
    *(void *)uint64_t v41 = *(void *)v42;
    *((void *)v41 + 1) = v43;
    long long v44 = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 1) = *((_OWORD *)v42 + 1);
    *((_OWORD *)v41 + 2) = v44;
    *((_OWORD *)v41 + 3) = *((_OWORD *)v42 + 3);
    *((void *)v41 + 8) = *((void *)v42 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v45 = *((_OWORD *)v42 + 3);
    *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 3) = v45;
    *((void *)v41 + 8) = *((void *)v42 + 8);
    long long v46 = *((_OWORD *)v42 + 1);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v46;
  }
  uint64_t v47 = v130[9];
  v14[v130[8]] = v132[v130[8]];
  *(void *)&v14[v47] = *(void *)&v132[v47];
  uint64_t v48 = v130[11];
  *(void *)&v14[v130[10]] = *(void *)&v132[v130[10]];
  uint64_t v49 = &v14[v48];
  long long v50 = &v132[v48];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  *((_OWORD *)v49 + 1) = *((_OWORD *)v50 + 1);
  uint64_t v52 = v130[13];
  *(void *)&v14[v130[12]] = *(void *)&v132[v130[12]];
  uint64_t v128 = v14;
  __dst = &v14[v52];
  uint64_t v53 = &v132[v52];
  uint64_t v54 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v55 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v56(v53, 1, v54))
  {
    sub_250FD6020(0);
    memcpy(__dst, v53, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    _OWORD *__dst = *v53;
    uint64_t v58 = *(int *)(v54 + 20);
    uint64_t v59 = (char *)__dst + v58;
    uint64_t v60 = (char *)v53 + v58;
    uint64_t v61 = sub_251037400();
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    v62(v59, v60, v61);
    sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    v62(&v59[*(int *)(v63 + 36)], &v60[*(int *)(v63 + 36)], v61);
    *(void *)((char *)__dst + *(int *)(v54 + 24)) = *(void *)((char *)v53 + *(int *)(v54 + 24));
    uint64_t v64 = *(void (**)(_OWORD *, void, uint64_t, uint64_t))(v55 + 56);
    swift_retain();
    v64(__dst, 0, 1, v54);
  }
  uint64_t v65 = v14;
  uint64_t v66 = v130[14];
  uint64_t v67 = &v14[v66];
  uint64_t v68 = &v132[v66];
  *(void *)&v128[v66] = *(void *)&v132[v66];
  uint64_t v69 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v70 = v69[5];
  long long v71 = &v67[v70];
  long long v72 = &v68[v70];
  swift_bridgeObjectRetain();
  if (v124(v72, 1, v127))
  {
    sub_250F6CD98();
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    uint64_t v74 = sub_251037400();
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16);
    v75(v71, v72, v74);
    uint64_t v125 = v69;
    uint64_t v76 = v75;
    uint64_t v77 = v127[5];
    uint64_t v78 = &v71[v77];
    uint64_t v79 = &v72[v77];
    v76(&v71[v77], &v72[v77], v74);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v76(&v78[*(int *)(v80 + 36)], &v79[*(int *)(v80 + 36)], v74);
    uint64_t v81 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v78[v81[5]] = *(void *)&v79[v81[5]];
    *(void *)&v78[v81[6]] = *(void *)&v79[v81[6]];
    *(void *)&v78[v81[7]] = *(void *)&v79[v81[7]];
    uint64_t v82 = v127[6];
    uint64_t v83 = &v71[v82];
    uint64_t v84 = &v72[v82];
    *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
    v83[16] = v84[16];
    v71[v127[7]] = v72[v127[7]];
    v71[v127[8]] = v72[v127[8]];
    v71[v127[9]] = v72[v127[9]];
    uint64_t v85 = v127[10];
    uint64_t v86 = &v71[v85];
    v87 = &v72[v85];
    uint64_t v88 = *((void *)v87 + 1);
    *(void *)uint64_t v86 = *(void *)v87;
    *((void *)v86 + 1) = v88;
    uint64_t v89 = v127[11];
    uint64_t v90 = &v71[v89];
    uint64_t v91 = &v72[v89];
    uint64_t v92 = *((void *)v91 + 1);
    *(void *)uint64_t v90 = *(void *)v91;
    *((void *)v90 + 1) = v92;
    uint64_t v126 = *(void (**)(char *, void, uint64_t, int *))(v122 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v126(v71, 0, 1, v127);
    uint64_t v69 = v125;
    uint64_t v65 = v128;
  }
  *(_OWORD *)&v67[v69[6]] = *(_OWORD *)&v68[v69[6]];
  uint64_t v93 = v69[7];
  uint64_t v94 = &v67[v93];
  uint64_t v95 = &v68[v93];
  long long v96 = *((_OWORD *)v95 + 1);
  *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
  *((_OWORD *)v94 + 1) = v96;
  *((void *)v94 + 10) = *((void *)v95 + 10);
  long long v97 = *((_OWORD *)v95 + 4);
  long long v98 = *((_OWORD *)v95 + 2);
  *((_OWORD *)v94 + 3) = *((_OWORD *)v95 + 3);
  *((_OWORD *)v94 + 4) = v97;
  *((_OWORD *)v94 + 2) = v98;
  *(void *)&v67[v69[8]] = *(void *)&v68[v69[8]];
  *(void *)&v67[v69[9]] = *(void *)&v68[v69[9]];
  uint64_t v99 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v100 = &v67[v99];
  uint64_t v101 = &v68[v99];
  uint64_t v102 = *((void *)v101 + 1);
  *(void *)uint64_t v100 = *(void *)v101;
  *((void *)v100 + 1) = v102;
  uint64_t v103 = *((void *)v101 + 3);
  *((void *)v100 + 2) = *((void *)v101 + 2);
  *((void *)v100 + 3) = v103;
  *((void *)v100 + 4) = *((void *)v101 + 4);
  *(_OWORD *)(v100 + 40) = *(_OWORD *)(v101 + 40);
  *(_OWORD *)(v100 + 56) = *(_OWORD *)(v101 + 56);
  *(_OWORD *)(v100 + 72) = *(_OWORD *)(v101 + 72);
  *(_OWORD *)(v100 + 88) = *(_OWORD *)(v101 + 88);
  *(_OWORD *)(v100 + 104) = *(_OWORD *)(v101 + 104);
  uint64_t v104 = v130[15];
  long long v105 = &v65[v104];
  long long v106 = &v132[v104];
  uint64_t v107 = *(void *)&v132[v104];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v107)
  {
    uint64_t v108 = *((void *)v106 + 1);
    uint64_t v109 = *((void *)v106 + 2);
    *(void *)long long v105 = v107;
    *((void *)v105 + 1) = v108;
    *((void *)v105 + 2) = v109;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)long long v105 = *(_OWORD *)v106;
    *((void *)v105 + 2) = *((void *)v106 + 2);
  }
  v105[24] = v106[24];
  v105[32] = v106[32];
  uint64_t v110 = *((void *)v106 + 6);
  *((void *)v105 + 5) = *((void *)v106 + 5);
  *((void *)v105 + 6) = v110;
  v105[56] = v106[56];
  uint64_t v111 = *((void *)v106 + 9);
  *((void *)v105 + 8) = *((void *)v106 + 8);
  *((void *)v105 + 9) = v111;
  *((void *)v105 + 10) = *((void *)v106 + 10);
  long long v112 = *(_OWORD *)(v106 + 88);
  *(_OWORD *)(v105 + 104) = *(_OWORD *)(v106 + 104);
  *(_OWORD *)(v105 + 88) = v112;
  long long v113 = *(_OWORD *)(v106 + 120);
  long long v114 = *(_OWORD *)(v106 + 136);
  *(_OWORD *)(v105 + 152) = *(_OWORD *)(v106 + 152);
  *(_OWORD *)(v105 + 136) = v114;
  *(_OWORD *)(v105 + 120) = v113;
  uint64_t v115 = *((void *)v106 + 22);
  *((void *)v105 + 21) = *((void *)v106 + 21);
  *((void *)v105 + 22) = v115;
  uint64_t v117 = *((void *)v106 + 23);
  uint64_t v116 = *((void *)v106 + 24);
  v105[200] = v106[200];
  *((void *)v105 + 23) = v117;
  *((void *)v105 + 24) = v116;
  v105[201] = v106[201];
  uint64_t v118 = *((void *)v106 + 27);
  *((void *)v105 + 26) = *((void *)v106 + 26);
  *((void *)v105 + 27) = v118;
  uint64_t v119 = *((void *)v106 + 29);
  *((void *)v105 + 28) = *((void *)v106 + 28);
  *((void *)v105 + 29) = v119;
  *((void *)v105 + 30) = *((void *)v106 + 30);
  v105[248] = v106[248];
  uint64_t v120 = *((void *)v106 + 33);
  *((void *)v105 + 32) = *((void *)v106 + 32);
  *((void *)v105 + 33) = v120;
  *((void *)v105 + 34) = *((void *)v106 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v128;
}

unsigned char *sub_250FD6EE0(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v3[6];
  v175 = a1;
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &v4[v14];
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v166 = *((void *)v17 - 1);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, int *))(v166 + 48);
  int v19 = v18(v15, 1, v17);
  v171 = v18;
  int v20 = v18(v16, 1, v17);
  v174 = v3;
  if (v19)
  {
    if (!v20)
    {
      uint64_t v21 = sub_251037400();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v15, v16, v21);
      uint64_t v23 = v17[5];
      uint64_t v24 = &v15[v23];
      uint64_t v25 = &v16[v23];
      v22(&v15[v23], &v16[v23], v21);
      sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
      uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v24[v27[5]] = *(void *)&v25[v27[5]];
      *(void *)&v24[v27[6]] = *(void *)&v25[v27[6]];
      *(void *)&v24[v27[7]] = *(void *)&v25[v27[7]];
      uint64_t v28 = v17[6];
      uint64_t v29 = &v15[v28];
      uint64_t v30 = &v16[v28];
      char v31 = v30[16];
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      v29[16] = v31;
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      uint64_t v32 = v17[10];
      uint64_t v33 = &v15[v32];
      uint64_t v34 = &v16[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      uint64_t v35 = v17[11];
      unint64_t v36 = &v15[v35];
      uint64_t v37 = &v16[v35];
      *(void *)unint64_t v36 = *(void *)v37;
      *((void *)v36 + 1) = *((void *)v37 + 1);
      uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v166 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v3 = v174;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_250FD805C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F6CD98();
    memcpy(v15, v16, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v47 = sub_251037400();
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 24);
  v48(v15, v16, v47);
  uint64_t v49 = v17[5];
  long long v50 = &v15[v49];
  v167 = v17;
  uint64_t v51 = v3;
  uint64_t v52 = &v16[v49];
  v48(&v15[v49], &v16[v49], v47);
  sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v48(&v50[*(int *)(v53 + 36)], &v52[*(int *)(v53 + 36)], v47);
  uint64_t v54 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v50[v54[5]] = *(void *)&v52[v54[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v50[v54[6]] = *(void *)&v52[v54[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = v54[7];
  uint64_t v56 = *(void *)&v52[v55];
  uint64_t v3 = v51;
  uint64_t v17 = v167;
  *(void *)&v50[v55] = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v167[6];
  uint64_t v58 = &v15[v57];
  uint64_t v59 = &v16[v57];
  long long v60 = *(_OWORD *)v59;
  v58[16] = v59[16];
  *(_OWORD *)uint64_t v58 = v60;
  v15[v167[7]] = v16[v167[7]];
  v15[v167[8]] = v16[v167[8]];
  v15[v167[9]] = v16[v167[9]];
  uint64_t v61 = v167[10];
  uint64_t v62 = &v15[v61];
  uint64_t v63 = &v16[v61];
  *(void *)uint64_t v62 = *(void *)v63;
  *((void *)v62 + 1) = *((void *)v63 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v64 = v167[11];
  uint64_t v65 = &v15[v64];
  uint64_t v66 = &v16[v64];
  *(void *)uint64_t v65 = *(void *)v66;
  *((void *)v65 + 1) = *((void *)v66 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v40 = v3[7];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &v4[v40];
  uint64_t v43 = *(void *)&v4[v40];
  if (*(void *)&a1[v40])
  {
    if (v43)
    {
      *uint64_t v41 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v41[1] = *((void *)v42 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v41[2] = *((void *)v42 + 2);
      v41[3] = *((void *)v42 + 3);
      v41[4] = *((void *)v42 + 4);
      v41[5] = *((void *)v42 + 5);
      v41[6] = *((void *)v42 + 6);
      v41[7] = *((void *)v42 + 7);
      v41[8] = *((void *)v42 + 8);
    }
    else
    {
      sub_250F21DD0((uint64_t)&a1[v40]);
      *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
      long long v45 = *((_OWORD *)v42 + 2);
      long long v44 = *((_OWORD *)v42 + 3);
      long long v46 = *((_OWORD *)v42 + 1);
      v41[8] = *((void *)v42 + 8);
      *((_OWORD *)v41 + 2) = v45;
      *((_OWORD *)v41 + 3) = v44;
      *((_OWORD *)v41 + 1) = v46;
    }
  }
  else if (v43)
  {
    *uint64_t v41 = v43;
    v41[1] = *((void *)v42 + 1);
    v41[2] = *((void *)v42 + 2);
    v41[3] = *((void *)v42 + 3);
    v41[4] = *((void *)v42 + 4);
    v41[5] = *((void *)v42 + 5);
    v41[6] = *((void *)v42 + 6);
    v41[7] = *((void *)v42 + 7);
    v41[8] = *((void *)v42 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    long long v67 = *((_OWORD *)v42 + 1);
    long long v68 = *((_OWORD *)v42 + 2);
    long long v69 = *((_OWORD *)v42 + 3);
    v41[8] = *((void *)v42 + 8);
    *((_OWORD *)v41 + 2) = v68;
    *((_OWORD *)v41 + 3) = v69;
    *((_OWORD *)v41 + 1) = v67;
  }
  a1[v3[8]] = v4[v3[8]];
  *(void *)&a1[v3[9]] = *(void *)&v4[v3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v3[10]] = *(void *)&v4[v3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v70 = v3[11];
  long long v71 = &a1[v70];
  long long v72 = &v4[v70];
  *(void *)&a1[v70] = *(void *)&v4[v70];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71[1] = v72[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71[2] = v72[2];
  v71[3] = v72[3];
  *(void *)&a1[v3[12]] = *(void *)&v4[v3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v73 = v3[13];
  uint64_t v74 = &a1[v73];
  uint64_t v75 = &v4[v73];
  uint64_t v76 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v77 + 48);
  int v79 = v78(v74, 1, v76);
  int v80 = v78(v75, 1, v76);
  if (v79)
  {
    if (!v80)
    {
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      uint64_t v81 = *(int *)(v76 + 20);
      uint64_t v82 = (char *)v74 + v81;
      uint64_t v83 = (char *)v75 + v81;
      v168 = v17;
      uint64_t v84 = v4;
      uint64_t v85 = sub_251037400();
      uint64_t v86 = *(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16);
      v86(v82, v83, v85);
      sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
      uint64_t v88 = v85;
      uint64_t v4 = v84;
      uint64_t v17 = v168;
      v86(&v82[*(int *)(v87 + 36)], &v83[*(int *)(v87 + 36)], v88);
      *(void *)((char *)v74 + *(int *)(v76 + 24)) = *(void *)((char *)v75 + *(int *)(v76 + 24));
      uint64_t v89 = *(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56);
      swift_retain();
      v89(v74, 0, 1, v76);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v80)
  {
    sub_250FD805C((uint64_t)v74, type metadata accessor for BaselineSeparators.Configuration);
LABEL_20:
    sub_250FD6020(0);
    memcpy(v74, v75, *(void *)(*(void *)(v90 - 8) + 64));
    goto LABEL_21;
  }
  void *v74 = *v75;
  v74[1] = v75[1];
  uint64_t v134 = *(int *)(v76 + 20);
  v135 = (char *)v74 + v134;
  uint64_t v136 = (char *)v75 + v134;
  v170 = v17;
  v137 = v4;
  uint64_t v138 = sub_251037400();
  uint64_t v139 = *(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 24);
  v139(v135, v136, v138);
  sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v141 = v138;
  uint64_t v4 = v137;
  uint64_t v17 = v170;
  v139(&v135[*(int *)(v140 + 36)], &v136[*(int *)(v140 + 36)], v141);
  *(void *)((char *)v74 + *(int *)(v76 + 24)) = *(void *)((char *)v75 + *(int *)(v76 + 24));
  swift_retain();
  swift_release();
LABEL_21:
  uint64_t v91 = v174[14];
  uint64_t v92 = &a1[v91];
  uint64_t v93 = &v4[v91];
  *(void *)&a1[v91] = *(void *)&v4[v91];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v169 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v94 = v169[5];
  uint64_t v95 = &v92[v94];
  long long v96 = &v93[v94];
  int v97 = v171(&v92[v94], 1, v17);
  int v98 = v171(v96, 1, v17);
  if (v97)
  {
    if (!v98)
    {
      uint64_t v99 = sub_251037400();
      uint64_t v100 = *(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 16);
      v100(v95, v96, v99);
      uint64_t v101 = v17[5];
      uint64_t v102 = &v95[v101];
      v172 = v4;
      uint64_t v103 = &v96[v101];
      v100(&v95[v101], &v96[v101], v99);
      sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v100(&v102[*(int *)(v104 + 36)], &v103[*(int *)(v104 + 36)], v99);
      long long v105 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v102[v105[5]] = *(void *)&v103[v105[5]];
      *(void *)&v102[v105[6]] = *(void *)&v103[v105[6]];
      *(void *)&v102[v105[7]] = *(void *)&v103[v105[7]];
      uint64_t v106 = v17[6];
      uint64_t v107 = &v95[v106];
      uint64_t v108 = &v96[v106];
      char v109 = v108[16];
      *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
      v107[16] = v109;
      v95[v17[7]] = v96[v17[7]];
      v95[v17[8]] = v96[v17[8]];
      v95[v17[9]] = v96[v17[9]];
      uint64_t v110 = v17[10];
      uint64_t v111 = &v95[v110];
      long long v112 = &v96[v110];
      *(void *)uint64_t v111 = *(void *)v112;
      *((void *)v111 + 1) = *((void *)v112 + 1);
      uint64_t v113 = v17[11];
      long long v114 = &v95[v113];
      uint64_t v115 = &v96[v113];
      *(void *)long long v114 = *(void *)v115;
      *((void *)v114 + 1) = *((void *)v115 + 1);
      uint64_t v116 = *(void (**)(char *, void, uint64_t, int *))(v166 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v4 = v172;
      swift_bridgeObjectRetain();
      uint64_t v117 = v174;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v116(v95, 0, 1, v17);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v98)
  {
    sub_250FD805C((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_26:
    sub_250F6CD98();
    memcpy(v95, v96, *(void *)(*(void *)(v118 - 8) + 64));
    uint64_t v117 = v174;
    goto LABEL_27;
  }
  uint64_t v142 = sub_251037400();
  long long v143 = *(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 24);
  v143(v95, v96, v142);
  uint64_t v144 = v17[5];
  v145 = &v95[v144];
  v173 = v4;
  v146 = &v96[v144];
  v143(&v95[v144], &v96[v144], v142);
  sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v143(&v145[*(int *)(v147 + 36)], &v146[*(int *)(v147 + 36)], v142);
  v148 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v145[v148[5]] = *(void *)&v146[v148[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v145[v148[6]] = *(void *)&v146[v148[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v149 = v148[7];
  uint64_t v150 = *(void *)&v146[v149];
  uint64_t v4 = v173;
  *(void *)&v145[v149] = v150;
  swift_bridgeObjectRetain();
  uint64_t v117 = v174;
  swift_bridgeObjectRelease();
  uint64_t v151 = v17[6];
  uint64_t v152 = &v95[v151];
  uint64_t v153 = &v96[v151];
  long long v154 = *(_OWORD *)v153;
  v152[16] = v153[16];
  *(_OWORD *)uint64_t v152 = v154;
  v95[v17[7]] = v96[v17[7]];
  v95[v17[8]] = v96[v17[8]];
  v95[v17[9]] = v96[v17[9]];
  uint64_t v155 = v17[10];
  v156 = &v95[v155];
  v157 = &v96[v155];
  *(void *)v156 = *(void *)v157;
  *((void *)v156 + 1) = *((void *)v157 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v158 = v17[11];
  uint64_t v159 = &v95[v158];
  v160 = &v96[v158];
  *(void *)uint64_t v159 = *(void *)v160;
  *((void *)v159 + 1) = *((void *)v160 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v119 = v169[6];
  uint64_t v120 = &v92[v119];
  long long v121 = &v93[v119];
  *uint64_t v120 = *v121;
  v120[1] = v121[1];
  uint64_t v122 = v169[7];
  long long v123 = &v92[v122];
  uint64_t v124 = &v93[v122];
  *(void *)long long v123 = *(void *)v124;
  uint64_t v125 = *((void *)v124 + 1);
  v123[16] = v124[16];
  *((void *)v123 + 1) = v125;
  *((void *)v123 + 3) = *((void *)v124 + 3);
  *((void *)v123 + 4) = *((void *)v124 + 4);
  *((void *)v123 + 5) = *((void *)v124 + 5);
  *((void *)v123 + 6) = *((void *)v124 + 6);
  *((void *)v123 + 7) = *((void *)v124 + 7);
  *((void *)v123 + 8) = *((void *)v124 + 8);
  *((void *)v123 + 9) = *((void *)v124 + 9);
  *((void *)v123 + 10) = *((void *)v124 + 10);
  *(void *)&v92[v169[8]] = *(void *)&v93[v169[8]];
  *(void *)&v92[v169[9]] = *(void *)&v93[v169[9]];
  uint64_t v126 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v127 = &v92[v126];
  uint64_t v128 = &v93[v126];
  void *v127 = *v128;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[1] = v128[1];
  v127[2] = v128[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[3] = v128[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[4] = v128[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[5] = v128[5];
  v127[6] = v128[6];
  v127[7] = v128[7];
  v127[8] = v128[8];
  v127[9] = v128[9];
  v127[10] = v128[10];
  v127[11] = v128[11];
  v127[12] = v128[12];
  v127[13] = v128[13];
  v127[14] = v128[14];
  uint64_t v129 = v117[15];
  v130 = &v175[v129];
  uint64_t v131 = &v4[v129];
  uint64_t v132 = *(void *)&v4[v129];
  if (*(void *)&v175[v129])
  {
    if (v132)
    {
      *(void *)v130 = v132;
      swift_retain();
      swift_release();
      *((void *)v130 + 1) = *((void *)v131 + 1);
      swift_retain();
      swift_release();
      *((void *)v130 + 2) = *((void *)v131 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80((uint64_t)&v175[v129]);
      uint64_t v133 = *((void *)v131 + 2);
      *(_OWORD *)v130 = *(_OWORD *)v131;
      *((void *)v130 + 2) = v133;
    }
  }
  else if (v132)
  {
    *(void *)v130 = v132;
    *((void *)v130 + 1) = *((void *)v131 + 1);
    *((void *)v130 + 2) = *((void *)v131 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v161 = *(_OWORD *)v131;
    *((void *)v130 + 2) = *((void *)v131 + 2);
    *(_OWORD *)v130 = v161;
  }
  v130[24] = v131[24];
  v130[32] = v131[32];
  *((void *)v130 + 5) = *((void *)v131 + 5);
  swift_retain();
  swift_release();
  uint64_t v162 = *((void *)v131 + 6);
  v130[56] = v131[56];
  *((void *)v130 + 6) = v162;
  *((void *)v130 + 8) = *((void *)v131 + 8);
  *((void *)v130 + 9) = *((void *)v131 + 9);
  swift_retain();
  swift_release();
  *((void *)v130 + 10) = *((void *)v131 + 10);
  swift_retain();
  swift_release();
  *((void *)v130 + 11) = *((void *)v131 + 11);
  uint64_t v163 = *((void *)v131 + 12);
  v130[104] = v131[104];
  *((void *)v130 + 12) = v163;
  *((void *)v130 + 14) = *((void *)v131 + 14);
  *((void *)v130 + 15) = *((void *)v131 + 15);
  *((void *)v130 + 16) = *((void *)v131 + 16);
  *((void *)v130 + 17) = *((void *)v131 + 17);
  *((void *)v130 + 18) = *((void *)v131 + 18);
  *((void *)v130 + 19) = *((void *)v131 + 19);
  *((void *)v130 + 20) = *((void *)v131 + 20);
  *((void *)v130 + 21) = *((void *)v131 + 21);
  *((void *)v130 + 22) = *((void *)v131 + 22);
  swift_retain();
  swift_release();
  *((void *)v130 + 23) = *((void *)v131 + 23);
  swift_retain();
  swift_release();
  uint64_t v164 = *((void *)v131 + 24);
  v130[200] = v131[200];
  *((void *)v130 + 24) = v164;
  v130[201] = v131[201];
  *((void *)v130 + 26) = *((void *)v131 + 26);
  swift_retain();
  swift_release();
  *((void *)v130 + 27) = *((void *)v131 + 27);
  swift_retain();
  swift_release();
  *((void *)v130 + 28) = *((void *)v131 + 28);
  swift_retain();
  swift_release();
  *((void *)v130 + 29) = *((void *)v131 + 29);
  swift_retain();
  swift_release();
  *((void *)v130 + 30) = *((void *)v131 + 30);
  swift_retain();
  swift_release();
  v130[248] = v131[248];
  *((void *)v130 + 32) = *((void *)v131 + 32);
  swift_retain();
  swift_release();
  *((void *)v130 + 33) = *((void *)v131 + 33);
  swift_retain();
  swift_release();
  *((void *)v130 + 34) = *((void *)v131 + 34);
  return v175;
}

uint64_t sub_250FD805C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *sub_250FD80BC(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  int v98 = a3;
  uint64_t v99 = a2;
  uint64_t v14 = a3[6];
  uint64_t v15 = &v5[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = (unsigned int (**)(const void *, uint64_t, int *))(*((void *)v17 - 1) + 48);
  uint64_t v95 = *v18;
  int v97 = v5;
  uint64_t v94 = *((void *)v17 - 1);
  if ((*v18)(v16, 1, v17))
  {
    sub_250F6CD98();
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
    v21(v15, v16, v20);
    uint64_t v22 = v17[5];
    uint64_t v23 = &v15[v22];
    uint64_t v24 = v17;
    uint64_t v25 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v21(&v23[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v20);
    uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v27[5]] = *(void *)&v25[v27[5]];
    *(void *)&v23[v27[6]] = *(void *)&v25[v27[6]];
    uint64_t v28 = v27[7];
    uint64_t v29 = *(void *)&v25[v28];
    uint64_t v17 = v24;
    uint64_t v5 = v97;
    *(void *)&v23[v28] = v29;
    uint64_t v30 = v17[6];
    char v31 = &v15[v30];
    uint64_t v32 = &v16[v30];
    *(_OWORD *)char v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v94 + 56))(v15, 0, 1, v17);
  }
  uint64_t v33 = v98[7];
  uint64_t v34 = v98[8];
  uint64_t v35 = &v5[v33];
  unint64_t v36 = &a2[v33];
  *((void *)v35 + 8) = *((void *)v36 + 8);
  long long v37 = *((_OWORD *)v36 + 3);
  *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
  *((_OWORD *)v35 + 3) = v37;
  long long v38 = *((_OWORD *)v36 + 1);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v38;
  v5[v34] = a2[v34];
  uint64_t v39 = v98[10];
  *(void *)&v5[v98[9]] = *(void *)&a2[v98[9]];
  *(void *)&v5[v39] = *(void *)&a2[v39];
  uint64_t v40 = v98[11];
  uint64_t v41 = v98[12];
  uint64_t v42 = &v5[v40];
  uint64_t v43 = (long long *)&a2[v40];
  long long v44 = *v43;
  long long v45 = v43[1];
  uint64_t v46 = *(void *)&a2[v41];
  _OWORD *v42 = v44;
  v42[1] = v45;
  *(void *)&v5[v41] = v46;
  uint64_t v47 = v98[13];
  uint64_t v48 = &v5[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v50 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    sub_250FD6020(0);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    _OWORD *v48 = *v49;
    uint64_t v53 = *(int *)(v50 + 20);
    uint64_t v54 = (char *)v48 + v53;
    uint64_t v55 = v17;
    uint64_t v56 = (char *)v49 + v53;
    uint64_t v57 = sub_251037400();
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
    v58(v54, v56, v57);
    sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v60 = *(int *)(v59 + 36);
    uint64_t v61 = &v56[v60];
    uint64_t v17 = v55;
    uint64_t v5 = v97;
    v58(&v54[v60], v61, v57);
    *(void *)((char *)v48 + *(int *)(v50 + 24)) = *(void *)((char *)v49 + *(int *)(v50 + 24));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  uint64_t v62 = v98[14];
  uint64_t v63 = &v5[v62];
  uint64_t v64 = &v99[v62];
  *(void *)&v5[v62] = *(void *)&v99[v62];
  uint64_t v65 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v66 = v65[5];
  long long v67 = &v63[v66];
  long long v68 = &v64[v66];
  if (v95(&v64[v66], 1, v17))
  {
    sub_250F6CD98();
    memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
  }
  else
  {
    uint64_t v96 = sub_251037400();
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 32);
    v70(v67, v68, v96);
    uint64_t v71 = v17[5];
    long long v72 = v17;
    uint64_t v73 = &v67[v71];
    uint64_t v74 = &v68[v71];
    v70(&v67[v71], &v68[v71], v96);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v70(&v73[*(int *)(v75 + 36)], &v74[*(int *)(v75 + 36)], v96);
    uint64_t v76 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v73[v76[5]] = *(void *)&v74[v76[5]];
    *(void *)&v73[v76[6]] = *(void *)&v74[v76[6]];
    *(void *)&v73[v76[7]] = *(void *)&v74[v76[7]];
    uint64_t v77 = v72[6];
    uint64_t v78 = &v67[v77];
    int v79 = &v68[v77];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
    v78[16] = v79[16];
    v67[v72[7]] = v68[v72[7]];
    v67[v72[8]] = v68[v72[8]];
    v67[v72[9]] = v68[v72[9]];
    *(_OWORD *)&v67[v72[10]] = *(_OWORD *)&v68[v72[10]];
    *(_OWORD *)&v67[v72[11]] = *(_OWORD *)&v68[v72[11]];
    int v80 = v72;
    uint64_t v5 = v97;
    (*(void (**)(char *, void, uint64_t, int *))(v94 + 56))(v67, 0, 1, v80);
  }
  *(_OWORD *)&v63[v65[6]] = *(_OWORD *)&v64[v65[6]];
  uint64_t v81 = v65[7];
  uint64_t v82 = &v63[v81];
  uint64_t v83 = &v64[v81];
  long long v84 = *((_OWORD *)v83 + 1);
  *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
  *((_OWORD *)v82 + 1) = v84;
  *((void *)v82 + 10) = *((void *)v83 + 10);
  long long v85 = *((_OWORD *)v83 + 4);
  long long v86 = *((_OWORD *)v83 + 2);
  *((_OWORD *)v82 + 3) = *((_OWORD *)v83 + 3);
  *((_OWORD *)v82 + 4) = v85;
  *((_OWORD *)v82 + 2) = v86;
  *(void *)&v63[v65[8]] = *(void *)&v64[v65[8]];
  *(void *)&v63[v65[9]] = *(void *)&v64[v65[9]];
  uint64_t v87 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v88 = &v63[v87];
  uint64_t v89 = &v64[v87];
  long long v90 = *((_OWORD *)v89 + 5);
  *((_OWORD *)v88 + 4) = *((_OWORD *)v89 + 4);
  *((_OWORD *)v88 + 5) = v90;
  *((_OWORD *)v88 + 6) = *((_OWORD *)v89 + 6);
  *((void *)v88 + 14) = *((void *)v89 + 14);
  long long v91 = *((_OWORD *)v89 + 1);
  *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
  *((_OWORD *)v88 + 1) = v91;
  long long v92 = *((_OWORD *)v89 + 3);
  *((_OWORD *)v88 + 2) = *((_OWORD *)v89 + 2);
  *((_OWORD *)v88 + 3) = v92;
  memcpy(&v5[v98[15]], &v99[v98[15]], 0x118uLL);
  return v5;
}

unsigned char *sub_250FD87CC(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v14 = v3[6];
  v160 = a1;
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &v4[v14];
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v150 = *((void *)v17 - 1);
  uint64_t v18 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v150 + 48);
  int v19 = v18(v15, 1, v17);
  uint64_t v155 = v18;
  int v20 = v18(v16, 1, v17);
  if (v19)
  {
    if (!v20)
    {
      uint64_t v21 = sub_251037400();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
      v22(v15, v16, v21);
      uint64_t v23 = v17[5];
      uint64_t v24 = &v15[v23];
      uint64_t v151 = v17;
      uint64_t v25 = v3;
      uint64_t v26 = &v16[v23];
      v22(&v15[v23], &v16[v23], v21);
      sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v22(&v24[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
      uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v24[v28[5]] = *(void *)&v26[v28[5]];
      *(void *)&v24[v28[6]] = *(void *)&v26[v28[6]];
      uint64_t v29 = v28[7];
      uint64_t v30 = *(void *)&v26[v29];
      uint64_t v3 = v25;
      uint64_t v17 = v151;
      *(void *)&v24[v29] = v30;
      uint64_t v31 = v151[6];
      uint64_t v32 = &v15[v31];
      uint64_t v33 = &v16[v31];
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v15[v151[7]] = v16[v151[7]];
      v15[v151[8]] = v16[v151[8]];
      v15[v151[9]] = v16[v151[9]];
      *(_OWORD *)&v15[v151[10]] = *(_OWORD *)&v16[v151[10]];
      *(_OWORD *)&v15[v151[11]] = *(_OWORD *)&v16[v151[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v150 + 56))(v15, 0, 1, v151);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_250FD805C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F6CD98();
    memcpy(v15, v16, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v98 = sub_251037400();
  uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 40);
  v99(v15, v16, v98);
  uint64_t v100 = v17[5];
  uint64_t v101 = &v15[v100];
  uint64_t v153 = v17;
  uint64_t v102 = v3;
  uint64_t v103 = &v16[v100];
  v99(&v15[v100], &v16[v100], v98);
  sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v99(&v101[*(int *)(v104 + 36)], &v103[*(int *)(v104 + 36)], v98);
  long long v105 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v101[v105[5]] = *(void *)&v103[v105[5]];
  swift_bridgeObjectRelease();
  *(void *)&v101[v105[6]] = *(void *)&v103[v105[6]];
  swift_bridgeObjectRelease();
  uint64_t v106 = v105[7];
  uint64_t v107 = *(void *)&v103[v106];
  uint64_t v3 = v102;
  uint64_t v17 = v153;
  *(void *)&v101[v106] = v107;
  swift_bridgeObjectRelease();
  uint64_t v108 = v153[6];
  char v109 = &v15[v108];
  uint64_t v110 = &v16[v108];
  *(_OWORD *)char v109 = *(_OWORD *)v110;
  v109[16] = v110[16];
  v15[v153[7]] = v16[v153[7]];
  v15[v153[8]] = v16[v153[8]];
  v15[v153[9]] = v16[v153[9]];
  uint64_t v111 = v153[10];
  long long v112 = &v15[v111];
  uint64_t v113 = (uint64_t *)&v16[v111];
  uint64_t v115 = *v113;
  uint64_t v114 = v113[1];
  *(void *)long long v112 = v115;
  *((void *)v112 + 1) = v114;
  swift_bridgeObjectRelease();
  uint64_t v116 = v153[11];
  uint64_t v117 = &v15[v116];
  uint64_t v118 = (uint64_t *)&v16[v116];
  uint64_t v120 = *v118;
  uint64_t v119 = v118[1];
  *(void *)uint64_t v117 = v120;
  *((void *)v117 + 1) = v119;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v35 = v3[7];
  uint64_t v36 = (uint64_t)&v160[v35];
  long long v37 = &v4[v35];
  if (*(void *)&v160[v35])
  {
    if (*(void *)v37)
    {
      *(void *)uint64_t v36 = *(void *)v37;
      swift_bridgeObjectRelease();
      *(void *)(v36 + 8) = *((void *)v37 + 1);
      swift_bridgeObjectRelease();
      long long v38 = *((_OWORD *)v37 + 2);
      *(_OWORD *)(v36 + 16) = *((_OWORD *)v37 + 1);
      *(_OWORD *)(v36 + 32) = v38;
      *(_OWORD *)(v36 + 48) = *((_OWORD *)v37 + 3);
      *(void *)(v36 + 64) = *((void *)v37 + 8);
      goto LABEL_12;
    }
    sub_250F21DD0(v36);
  }
  long long v39 = *((_OWORD *)v37 + 3);
  *(_OWORD *)(v36 + 32) = *((_OWORD *)v37 + 2);
  *(_OWORD *)(v36 + 48) = v39;
  *(void *)(v36 + 64) = *((void *)v37 + 8);
  long long v40 = *((_OWORD *)v37 + 1);
  *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v40;
LABEL_12:
  uint64_t v41 = v3[9];
  v160[v3[8]] = v4[v3[8]];
  *(void *)&v160[v41] = *(void *)&v4[v41];
  swift_bridgeObjectRelease();
  *(void *)&v160[v3[10]] = *(void *)&v4[v3[10]];
  swift_bridgeObjectRelease();
  uint64_t v42 = v3[11];
  uint64_t v43 = &v160[v42];
  long long v44 = &v4[v42];
  *(void *)&v160[v42] = *(void *)&v4[v42];
  swift_bridgeObjectRelease();
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRelease();
  *((_OWORD *)v43 + 1) = *((_OWORD *)v44 + 1);
  *(void *)&v160[v3[12]] = *(void *)&v4[v3[12]];
  swift_bridgeObjectRelease();
  uint64_t v159 = v3;
  uint64_t v45 = v3[13];
  uint64_t v46 = &v160[v45];
  uint64_t v47 = &v4[v45];
  uint64_t v48 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      *uint64_t v46 = *v47;
      uint64_t v53 = *(int *)(v48 + 20);
      uint64_t v54 = (char *)v46 + v53;
      uint64_t v55 = (char *)v47 + v53;
      uint64_t v152 = v17;
      uint64_t v56 = v4;
      uint64_t v57 = sub_251037400();
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
      v58(v54, v55, v57);
      sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
      uint64_t v60 = v57;
      uint64_t v4 = v56;
      uint64_t v17 = v152;
      v58(&v54[*(int *)(v59 + 36)], &v55[*(int *)(v59 + 36)], v60);
      *(void *)((char *)v46 + *(int *)(v48 + 24)) = *(void *)((char *)v47 + *(int *)(v48 + 24));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v52)
  {
    sub_250FD805C((uint64_t)v46, type metadata accessor for BaselineSeparators.Configuration);
LABEL_17:
    sub_250FD6020(0);
    memcpy(v46, v47, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_18;
  }
  *uint64_t v46 = *v47;
  uint64_t v121 = *(int *)(v48 + 20);
  uint64_t v122 = (char *)v46 + v121;
  long long v123 = (char *)v47 + v121;
  long long v154 = v17;
  uint64_t v124 = v4;
  uint64_t v125 = sub_251037400();
  uint64_t v126 = *(void (**)(char *, char *, uint64_t))(*(void *)(v125 - 8) + 40);
  v126(v122, v123, v125);
  sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v128 = v125;
  uint64_t v4 = v124;
  uint64_t v17 = v154;
  v126(&v122[*(int *)(v127 + 36)], &v123[*(int *)(v127 + 36)], v128);
  *(void *)((char *)v46 + *(int *)(v48 + 24)) = *(void *)((char *)v47 + *(int *)(v48 + 24));
  swift_release();
LABEL_18:
  uint64_t v62 = v159[14];
  uint64_t v63 = &v160[v62];
  uint64_t v64 = &v4[v62];
  *(void *)&v160[v62] = *(void *)&v4[v62];
  swift_bridgeObjectRelease();
  uint64_t v65 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v66 = v65[5];
  long long v67 = &v63[v66];
  long long v68 = &v64[v66];
  int v69 = v155(&v63[v66], 1, v17);
  int v70 = v155(v68, 1, v17);
  if (v69)
  {
    if (!v70)
    {
      uint64_t v71 = sub_251037400();
      long long v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 32);
      v72(v67, v68, v71);
      v157 = v4;
      uint64_t v73 = v72;
      uint64_t v74 = v17[5];
      uint64_t v75 = &v67[v74];
      uint64_t v76 = &v68[v74];
      v73(&v67[v74], &v68[v74], v71);
      sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v73(&v75[*(int *)(v77 + 36)], &v76[*(int *)(v77 + 36)], v71);
      uint64_t v78 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v75[v78[5]] = *(void *)&v76[v78[5]];
      *(void *)&v75[v78[6]] = *(void *)&v76[v78[6]];
      uint64_t v79 = v78[7];
      uint64_t v80 = *(void *)&v76[v79];
      uint64_t v4 = v157;
      uint64_t v81 = v159;
      *(void *)&v75[v79] = v80;
      uint64_t v82 = v17[6];
      uint64_t v83 = &v67[v82];
      long long v84 = &v68[v82];
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
      v83[16] = v84[16];
      v67[v17[7]] = v68[v17[7]];
      v67[v17[8]] = v68[v17[8]];
      v67[v17[9]] = v68[v17[9]];
      *(_OWORD *)&v67[v17[10]] = *(_OWORD *)&v68[v17[10]];
      *(_OWORD *)&v67[v17[11]] = *(_OWORD *)&v68[v17[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v150 + 56))(v67, 0, 1, v17);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v70)
  {
    sub_250FD805C((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_23:
    sub_250F6CD98();
    memcpy(v67, v68, *(void *)(*(void *)(v85 - 8) + 64));
    uint64_t v81 = v159;
    goto LABEL_24;
  }
  uint64_t v156 = sub_251037400();
  uint64_t v129 = *(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 40);
  v129(v67, v68, v156);
  uint64_t v130 = v17[5];
  uint64_t v131 = &v67[v130];
  uint64_t v158 = v4;
  uint64_t v132 = &v68[v130];
  v129(&v67[v130], &v68[v130], v156);
  sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v129(&v131[*(int *)(v133 + 36)], &v132[*(int *)(v133 + 36)], v156);
  uint64_t v134 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v131[v134[5]] = *(void *)&v132[v134[5]];
  swift_bridgeObjectRelease();
  *(void *)&v131[v134[6]] = *(void *)&v132[v134[6]];
  swift_bridgeObjectRelease();
  uint64_t v135 = v134[7];
  uint64_t v136 = *(void *)&v132[v135];
  uint64_t v4 = v158;
  uint64_t v81 = v159;
  *(void *)&v131[v135] = v136;
  swift_bridgeObjectRelease();
  uint64_t v137 = v17[6];
  uint64_t v138 = &v67[v137];
  uint64_t v139 = &v68[v137];
  *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
  v138[16] = v139[16];
  v67[v17[7]] = v68[v17[7]];
  v67[v17[8]] = v68[v17[8]];
  v67[v17[9]] = v68[v17[9]];
  uint64_t v140 = v17[10];
  uint64_t v141 = &v67[v140];
  uint64_t v142 = (uint64_t *)&v68[v140];
  uint64_t v144 = *v142;
  uint64_t v143 = v142[1];
  char *v141 = v144;
  v141[1] = v143;
  swift_bridgeObjectRelease();
  uint64_t v145 = v17[11];
  v146 = &v67[v145];
  uint64_t v147 = (uint64_t *)&v68[v145];
  uint64_t v149 = *v147;
  uint64_t v148 = v147[1];
  char *v146 = v149;
  v146[1] = v148;
  swift_bridgeObjectRelease();
LABEL_24:
  *(_OWORD *)&v63[v65[6]] = *(_OWORD *)&v64[v65[6]];
  uint64_t v86 = v65[7];
  uint64_t v87 = &v63[v86];
  uint64_t v88 = &v64[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  *((void *)v87 + 1) = *((void *)v88 + 1);
  v87[16] = v88[16];
  *(_OWORD *)(v87 + 24) = *(_OWORD *)(v88 + 24);
  *(_OWORD *)(v87 + 40) = *(_OWORD *)(v88 + 40);
  *(_OWORD *)(v87 + 56) = *(_OWORD *)(v88 + 56);
  *(_OWORD *)(v87 + 72) = *(_OWORD *)(v88 + 72);
  *(void *)&v63[v65[8]] = *(void *)&v64[v65[8]];
  *(void *)&v63[v65[9]] = *(void *)&v64[v65[9]];
  uint64_t v89 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  long long v90 = &v63[v89];
  long long v91 = &v64[v89];
  *(void *)&v63[v89] = *(void *)v91;
  swift_bridgeObjectRelease();
  *((void *)v90 + 1) = *((void *)v91 + 1);
  *((void *)v90 + 2) = *((void *)v91 + 2);
  swift_bridgeObjectRelease();
  *((void *)v90 + 3) = *((void *)v91 + 3);
  swift_bridgeObjectRelease();
  *((void *)v90 + 4) = *((void *)v91 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v90 + 40) = *(_OWORD *)(v91 + 40);
  *(_OWORD *)(v90 + 56) = *(_OWORD *)(v91 + 56);
  *(_OWORD *)(v90 + 72) = *(_OWORD *)(v91 + 72);
  *(_OWORD *)(v90 + 88) = *(_OWORD *)(v91 + 88);
  *(_OWORD *)(v90 + 104) = *(_OWORD *)(v91 + 104);
  uint64_t v92 = v81[15];
  uint64_t v93 = (uint64_t)&v160[v92];
  uint64_t v94 = &v4[v92];
  if (!*(void *)&v160[v92])
  {
LABEL_28:
    *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
    *(void *)(v93 + 16) = *((void *)v94 + 2);
    goto LABEL_29;
  }
  if (!*(void *)v94)
  {
    sub_250F27E80(v93);
    goto LABEL_28;
  }
  *(void *)uint64_t v93 = *(void *)v94;
  swift_release();
  *(void *)(v93 + 8) = *((void *)v94 + 1);
  swift_release();
  *(void *)(v93 + 16) = *((void *)v94 + 2);
  swift_release();
LABEL_29:
  *(unsigned char *)(v93 + 24) = v94[24];
  *(unsigned char *)(v93 + 32) = v94[32];
  *(void *)(v93 + 40) = *((void *)v94 + 5);
  swift_release();
  *(void *)(v93 + 48) = *((void *)v94 + 6);
  *(unsigned char *)(v93 + 56) = v94[56];
  *(void *)(v93 + 64) = *((void *)v94 + 8);
  *(void *)(v93 + 72) = *((void *)v94 + 9);
  swift_release();
  *(void *)(v93 + 80) = *((void *)v94 + 10);
  swift_release();
  *(void *)(v93 + 88) = *((void *)v94 + 11);
  *(void *)(v93 + 96) = *((void *)v94 + 12);
  *(unsigned char *)(v93 + 104) = v94[104];
  long long v95 = *((_OWORD *)v94 + 8);
  *(_OWORD *)(v93 + 112) = *((_OWORD *)v94 + 7);
  *(_OWORD *)(v93 + 128) = v95;
  long long v96 = *((_OWORD *)v94 + 10);
  *(_OWORD *)(v93 + 144) = *((_OWORD *)v94 + 9);
  *(_OWORD *)(v93 + 160) = v96;
  *(void *)(v93 + 176) = *((void *)v94 + 22);
  swift_release();
  *(void *)(v93 + 184) = *((void *)v94 + 23);
  swift_release();
  *(void *)(v93 + 192) = *((void *)v94 + 24);
  *(unsigned char *)(v93 + 200) = v94[200];
  *(unsigned char *)(v93 + 201) = v94[201];
  *(void *)(v93 + 208) = *((void *)v94 + 26);
  swift_release();
  *(void *)(v93 + 216) = *((void *)v94 + 27);
  swift_release();
  *(void *)(v93 + 224) = *((void *)v94 + 28);
  swift_release();
  *(void *)(v93 + 232) = *((void *)v94 + 29);
  swift_release();
  *(void *)(v93 + 240) = *((void *)v94 + 30);
  swift_release();
  *(unsigned char *)(v93 + 248) = v94[248];
  *(void *)(v93 + 256) = *((void *)v94 + 32);
  swift_release();
  *(void *)(v93 + 264) = *((void *)v94 + 33);
  swift_release();
  *(void *)(v93 + 272) = *((void *)v94 + 34);
  return v160;
}

uint64_t sub_250FD95E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FD95F8);
}

uint64_t sub_250FD95F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v14(a1 + v9, a2, v7);
  }
  sub_250F6CD98();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_11;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[9]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    sub_250FD6020(0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
    {
      uint64_t v7 = v13;
      uint64_t v8 = *(void *)(v13 - 8);
      uint64_t v9 = a3[13];
      goto LABEL_11;
    }
    uint64_t v15 = type metadata accessor for OvernightMetricsChartLayout(0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[14];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_250FD97C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FD97D4);
}

void sub_250FD97D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v14(a1 + v11, a2, a2, v9);
    return;
  }
  sub_250F6CD98();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_9;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[9]) = (a2 - 1);
    return;
  }
  sub_250FD6020(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[13];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[14];
  v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for OvernightMetricsChartContent()
{
  uint64_t result = qword_269B14388;
  if (!qword_269B14388) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250FD99E8()
{
  type metadata accessor for OvernightMetricsChartPointCollection();
  if (v0 <= 0x3F)
  {
    sub_250F6CD98();
    if (v1 <= 0x3F)
    {
      sub_250FD6020(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChartLayout(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_250FD9B64()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250FD9B80(uint64_t a1)
{
  return sub_250FD9BD8(a1, sub_250F580A8, (void (*)(void))sub_250F58140);
}

uint64_t sub_250FD9BAC(uint64_t a1)
{
  return sub_250FD9BD8(a1, sub_250FDC03C, (void (*)(void))sub_250FDC070);
}

uint64_t sub_250FD9BD8(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  return sub_251038920();
}

uint64_t sub_250FD9C34(uint64_t a1)
{
  return sub_250FD9BD8(a1, sub_250FDC26C, (void (*)(void))sub_250FDC3EC);
}

__n128 sub_250FD9C60@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_250FDC6C8();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F56610(0);
  sub_250FDC194(&qword_269B13528, sub_250F56610, (void (*)(void))sub_250F58BA8);
  sub_250FDBD44(*a1, (uint64_t)v7, (uint64_t (*)(void))sub_250F56610);
  sub_250F56518();
  uint64_t v9 = v8;
  sub_250FDC740((unint64_t *)&qword_269B13538, (void (*)(uint64_t))sub_250F56518);
  uint64_t v10 = &v7[*(int *)(v5 + 56)];
  uint64_t v11 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, a1[1], v9);
  uint64_t v12 = (uint64_t)&v7[*(int *)(v5 + 72)];
  sub_250F5731C(a1[2], v12);
  sub_250FDBE04((uint64_t)v7, a2, (uint64_t (*)(void))sub_250F56610);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2 + *(int *)(v5 + 56), v10, v9);
  uint64_t v13 = a2 + *(int *)(v5 + 72);
  __n128 result = *(__n128 *)v12;
  long long v15 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v12 + 32);
  return result;
}

uint64_t sub_250FD9E60@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_250FDC0A4();
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDB658(0);
  uint64_t v9 = v8;
  sub_250FDC194(&qword_269B14410, sub_250FDB658, (void (*)(void))sub_250FDBD10);
  uint64_t v10 = *a1;
  uint64_t v11 = v9;
  uint64_t v23 = v9;
  uint64_t v12 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, v10, v11);
  sub_250FDB624(0);
  sub_250FDC194(&qword_269B14418, sub_250FDB624, (void (*)(void))sub_250FDC204);
  uint64_t v22 = &v7[v5[14]];
  sub_250FDBD44(a1[1], (uint64_t)v22, (uint64_t (*)(void))sub_250FDB624);
  type metadata accessor for SevenDaySingleMetricChartContent();
  sub_250FDB5A8();
  uint64_t v21 = &v7[v5[18]];
  sub_250FDBD44(a1[2], (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_250FDBFB0(0, &qword_269B143A0, (void (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, (void (*)(void))sub_250FDB5A8);
  uint64_t v14 = v13;
  long long v15 = &v7[v5[22]];
  uint64_t v16 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, a1[3], v13);
  sub_250FDBDAC();
  sub_250FDC740(&qword_269B14428, (void (*)(uint64_t))sub_250FDBDAC);
  uint64_t v17 = (uint64_t)&v7[v5[26]];
  sub_250FDBD44(a1[4], v17, (uint64_t (*)(void))sub_250FDBDAC);
  sub_250FDB574(0);
  sub_250FDC194(&qword_269B14430, sub_250FDB574, (void (*)(void))sub_250FDC238);
  uint64_t v18 = (uint64_t)&v7[v5[30]];
  sub_250FDBD44(a1[5], v18, (uint64_t (*)(void))sub_250FDB574);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v7, v23);
  sub_250FDBE04((uint64_t)v22, a2 + v5[14], (uint64_t (*)(void))sub_250FDB624);
  sub_250FDBE04((uint64_t)v21, a2 + v5[18], (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2 + v5[22], v15, v14);
  sub_250FDBE04(v17, a2 + v5[26], (uint64_t (*)(void))sub_250FDBDAC);
  return sub_250FDBE04(v18, a2 + v5[30], (uint64_t (*)(void))sub_250FDB574);
}

uint64_t sub_250FDA27C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v156 = a1;
  uint64_t v2 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v153 = *(void *)(v2 - 8);
  long long v154 = (int *)v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v144 = (char *)&v137 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v143 = (uint64_t)&v137 - v5;
  uint64_t v6 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v152 = (uint64_t)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v142 = (uint64_t)&v137 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v141 = (uint64_t)&v137 - v11;
  sub_250FDB574(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v155 = (uint64_t)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v157 = (uint64_t)&v137 - v15;
  sub_250F6CD98();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v151 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v138 = (uint64_t)&v137 - v19;
  uint64_t v139 = type metadata accessor for GradientOverlaidPills();
  MEMORY[0x270FA5388](v139);
  uint64_t v145 = (char *)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDBFB0(0, &qword_269B143A0, (void (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, (void (*)(void))sub_250FDB5A8);
  uint64_t v169 = v21;
  uint64_t v166 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  v168 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v165 = (char *)&v137 - v24;
  uint64_t v148 = type metadata accessor for SevenDaySingleMetricChartContent();
  MEMORY[0x270FA5388](v148);
  uint64_t v167 = (uint64_t)&v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v164 = (uint64_t)&v137 - v27;
  sub_250FD6020(0);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v147 = (char *)&v137 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v149 = *(unsigned int (***)(void, void, void))(v30 - 8);
  uint64_t v150 = (char *)v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v137 = (uint64_t)&v137 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDB624(0);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v163 = (uint64_t)&v137 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v161 = (uint64_t)&v137 - v35;
  uint64_t v36 = type metadata accessor for OvernightMetricsChartContent();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(void *)(v37 + 64);
  MEMORY[0x270FA5388](v36);
  uint64_t v140 = (uint64_t)&v137 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = (char *)&v137 - v40;
  sub_250FDB658(0);
  uint64_t v162 = v42;
  uint64_t v160 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v159 = (char *)&v137 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v44);
  uint64_t v46 = (char *)&v137 - v45;
  uint64_t v47 = *(int *)(v36 + 48);
  v170 = v1;
  v178[0] = *(void *)((char *)v1 + v47);
  uint64_t KeyPath = swift_getKeyPath();
  sub_250FDBD44((uint64_t)v1, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartContent);
  unint64_t v48 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v49 = swift_allocObject();
  sub_250FDBE04((uint64_t)v41, v49 + v48, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartContent);
  sub_250FDB6A0(0);
  type metadata accessor for BaselineBand(0);
  sub_250FDB6D4();
  sub_250FDC740((unint64_t *)&qword_269B133C8, (void (*)(uint64_t))sub_250F2F370);
  sub_250FDBD10();
  swift_bridgeObjectRetain();
  uint64_t v50 = (int *)v36;
  uint64_t v158 = v46;
  int v51 = v170;
  uint64_t v52 = (uint64_t)v147;
  sub_251038C70();
  sub_250FDBD44((uint64_t)v51 + v50[13], v52, (uint64_t (*)(void))sub_250FD6020);
  if (((unsigned int (**)(uint64_t, uint64_t, char *))v149)[6](v52, 1, v150) == 1)
  {
    sub_250FD805C(v52, (uint64_t (*)(void))sub_250FD6020);
    uint64_t v53 = type metadata accessor for BaselineSeparators(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v161, 1, 1, v53);
  }
  else
  {
    uint64_t v54 = v52;
    uint64_t v55 = v137;
    sub_250FDBE04(v54, v137, type metadata accessor for BaselineSeparators.Configuration);
    uint64_t v56 = v55;
    uint64_t v57 = v161;
    sub_250FDBE04(v56, v161, type metadata accessor for BaselineSeparators.Configuration);
    uint64_t v58 = type metadata accessor for BaselineSeparators(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
  }
  char v59 = *(unsigned char *)v170;
  uint64_t v60 = *(void *)((char *)v170 + v50[9]);
  uint64_t v61 = (void *)((char *)v170 + v50[11]);
  uint64_t v62 = v61[3];
  uint64_t v63 = (char *)v170 + v50[14];
  uint64_t v64 = v50;
  uint64_t v65 = v148;
  uint64_t v66 = v164;
  sub_250FDBD44((uint64_t)v63, v164 + *(int *)(v148 + 28), type metadata accessor for OvernightMetricsChartLayout);
  long long v67 = (char *)v170 + v64[15];
  memcpy(v178, v67, 0x118uLL);
  *(unsigned char *)uint64_t v66 = v59;
  *(void *)(v66 + 8) = v60;
  *(void *)(v66 + 16) = v62;
  long long v68 = (void *)(v66 + *(int *)(v65 + 32));
  uint64_t v149 = (unsigned int (**)(void, void, void))v67;
  memcpy(v68, v67, 0x118uLL);
  uint64_t v69 = *(void *)((char *)v170 + v64[10]);
  uint64_t v70 = v61[2];
  uint64_t v71 = v167;
  uint64_t v72 = v167 + *(int *)(v65 + 28);
  uint64_t v150 = v63;
  sub_250FDBD44((uint64_t)v63, v72, type metadata accessor for OvernightMetricsChartLayout);
  *(unsigned char *)uint64_t v71 = v59;
  uint64_t v73 = v170;
  *(void *)(v71 + 8) = v69;
  *(void *)(v71 + 16) = v70;
  memcpy((void *)(v71 + *(int *)(v65 + 32)), v178, 0x118uLL);
  sub_250F2A3B4(v178);
  sub_250F2A3B4(v178);
  sub_250FDB5A8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v74 = v168;
  sub_251037D80();
  sub_250FD805C(v71, (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v165, v74, v169);
  if (*(unsigned char *)v73 == 1)
  {
    uint64_t v75 = *(void *)((char *)v73 + v64[5]);
    uint64_t v76 = v138;
    sub_250FDBD44((uint64_t)v73 + v64[6], v138, (uint64_t (*)(void))sub_250F6CD98);
    uint64_t v77 = 0;
    uint64_t v78 = v64;
    if (*(void *)(v61[1] + 16) >= 2uLL) {
      uint64_t v77 = v61[3];
    }
    uint64_t v79 = (int *)v139;
    uint64_t v80 = v145;
    sub_250FDBD44((uint64_t)v150, (uint64_t)&v145[*(int *)(v139 + 28)], type metadata accessor for OvernightMetricsChartLayout);
    memcpy(v171, v149, sizeof(v171));
    *uint64_t v80 = v75;
    sub_250FDBE04(v76, (uint64_t)v80 + v79[5], (uint64_t (*)(void))sub_250F6CD98);
    *(void *)((char *)v80 + v79[6]) = v77;
    memcpy((char *)v80 + v79[8], v171, 0x118uLL);
    if (BYTE1(v171[25]) == 1)
    {
      sub_250FDBE6C();
      *((void *)&v173 + 1) = v81;
      sub_250FDBFB0(255, &qword_269B143F0, sub_250FDC03C, (void (*)(void))sub_250FDC070);
      uint64_t v83 = v82;
      uint64_t v84 = sub_250FDB5DC(&qword_269B143E0, (void (*)(uint64_t))type metadata accessor for GradientOverlaidPills);
      sub_250FDC03C(255);
      uint64_t v86 = v85;
      uint64_t v87 = sub_250FDC070();
      *(void *)&long long v175 = v86;
      *((void *)&v175 + 1) = v87;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      *(void *)&long long v175 = v79;
      *((void *)&v175 + 1) = v83;
      *(void *)&long long v176 = v84;
      *((void *)&v176 + 1) = OpaqueTypeConformance2;
      uint64_t v174 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v172);
      sub_250F2A3B4(v171);
      sub_250F2A3B4(v171);
      swift_bridgeObjectRetain();
      swift_checkMetadataState();
      uint64_t v80 = v145;
      uint64_t v73 = v170;
      sub_251037D50();
      sub_250F2E048(v171);
    }
    else
    {
      *((void *)&v173 + 1) = v79;
      uint64_t v174 = sub_250FDB5DC(&qword_269B143E0, (void (*)(uint64_t))type metadata accessor for GradientOverlaidPills);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v172);
      sub_250FDBD44((uint64_t)v80, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
      sub_250F2A3B4(v171);
      swift_bridgeObjectRetain();
    }
    uint64_t v89 = v157;
    uint64_t v90 = (uint64_t)v151;
    sub_250FD805C((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
    long long v175 = v172;
    long long v176 = v173;
    uint64_t v177 = v174;
  }
  else
  {
    uint64_t v177 = 0;
    long long v175 = 0u;
    long long v176 = 0u;
    uint64_t v89 = v157;
    uint64_t v90 = (uint64_t)v151;
    uint64_t v78 = v64;
  }
  sub_250FDBD44((uint64_t)v73 + v78[6], v90, (uint64_t (*)(void))sub_250F6CD98);
  uint64_t v92 = type metadata accessor for OvernightMetricsChartPoint();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48))(v90, 1, v92) == 1)
  {
    sub_250FD805C(v90, (uint64_t (*)(void))sub_250F6CD98);
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v153 + 56))(v89, 1, 1, v154);
  }
  else
  {
    uint64_t v93 = v142;
    sub_250FDBD44(v90 + *(int *)(v92 + 20), v142, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    sub_250FD805C(v90, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    uint64_t v94 = v93;
    uint64_t v95 = v141;
    sub_250FDBE04(v94, v141, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    sub_250FDBE04(v95, v152, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    long long v96 = (uint64_t *)((char *)v73 + v78[7]);
    uint64_t v97 = *v96;
    uint64_t v98 = v96[1];
    uint64_t v99 = v73;
    uint64_t v101 = v96[2];
    uint64_t v100 = v96[3];
    uint64_t v103 = v96[4];
    uint64_t v102 = (char *)v96[5];
    uint64_t v151 = (char *)v96[6];
    uint64_t v104 = v96[7];
    long long v105 = (char *)v96[8];
    uint64_t v147 = v102;
    uint64_t v148 = v104;
    uint64_t v106 = v78;
    int v107 = *(unsigned __int8 *)v99;
    uint64_t v108 = v140;
    sub_250FDBD44((uint64_t)v99, v140, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartContent);
    if (v107 == 1) {
      LODWORD(KeyPath) = *(unsigned __int8 *)(v108 + v106[8]);
    }
    else {
      LODWORD(KeyPath) = 0;
    }
    uint64_t v145 = v105;
    uint64_t v109 = v97;
    uint64_t v110 = v97;
    uint64_t v111 = v98;
    uint64_t v112 = v100;
    uint64_t v113 = v103;
    uint64_t v114 = v147;
    sub_250F22234(v110);
    sub_250FD805C(v108, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartContent);
    char v115 = *(unsigned char *)v170;
    uint64_t v116 = v154;
    uint64_t v117 = (uint64_t)v144;
    sub_250FDBD44((uint64_t)v150, (uint64_t)&v144[v154[9]], type metadata accessor for OvernightMetricsChartLayout);
    memcpy(v171, v149, sizeof(v171));
    sub_250FDBE04(v152, v117, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    uint64_t v118 = (uint64_t *)(v117 + v116[5]);
    *uint64_t v118 = v109;
    v118[1] = v111;
    v118[2] = v101;
    v118[3] = v112;
    v118[4] = v113;
    v118[5] = (uint64_t)v114;
    uint64_t v119 = v148;
    v118[6] = (uint64_t)v151;
    v118[7] = v119;
    v118[8] = (uint64_t)v145;
    *(unsigned char *)(v117 + v116[6]) = KeyPath;
    *(unsigned char *)(v117 + v116[7]) = v115;
    *(unsigned char *)(v117 + v116[8]) = v115;
    memcpy((void *)(v117 + v116[10]), v171, 0x118uLL);
    uint64_t v120 = v117;
    uint64_t v121 = v143;
    sub_250FDBE04(v120, v143, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    uint64_t v122 = v121;
    uint64_t v89 = v157;
    sub_250FDBE04(v122, v157, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v153 + 56))(v89, 0, 1, v116);
    sub_250F2A3B4(v171);
  }
  uint64_t v123 = v161;
  uint64_t v124 = (uint64_t)v159;
  (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v159, v158, v162);
  v171[0] = v124;
  uint64_t v125 = v163;
  sub_250FDBD44(v123, v163, (uint64_t (*)(void))sub_250FDB624);
  v171[1] = v125;
  uint64_t v126 = v164;
  uint64_t v127 = v167;
  sub_250FDBD44(v164, v167, (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  v171[2] = v127;
  uint64_t v128 = v165;
  uint64_t v129 = v166;
  uint64_t v130 = (uint64_t)v168;
  uint64_t v131 = v169;
  (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v168, v165, v169);
  v171[3] = v130;
  sub_250FDBD44((uint64_t)&v175, (uint64_t)&v172, (uint64_t (*)(void))sub_250FDBDAC);
  v171[4] = (uint64_t)&v172;
  uint64_t v132 = v155;
  sub_250FDBD44(v89, v155, (uint64_t (*)(void))sub_250FDB574);
  v171[5] = v132;
  sub_250FD9E60(v171, v156);
  v170 = sub_250FDB574;
  sub_250FD805C(v89, (uint64_t (*)(void))sub_250FDB574);
  sub_250FD805C((uint64_t)&v175, (uint64_t (*)(void))sub_250FDBDAC);
  uint64_t v133 = *(void (**)(char *, uint64_t))(v129 + 8);
  v133(v128, v131);
  sub_250FD805C(v126, (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_250FD805C(v123, (uint64_t (*)(void))sub_250FDB624);
  uint64_t v134 = *(void (**)(char *, uint64_t))(v160 + 8);
  uint64_t v135 = v162;
  v134(v158, v162);
  sub_250FD805C(v132, (uint64_t (*)(void))v170);
  sub_250FD805C((uint64_t)&v172, (uint64_t (*)(void))sub_250FDBDAC);
  v133(v168, v169);
  sub_250FD805C(v167, (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_250FD805C(v163, (uint64_t (*)(void))sub_250FDB624);
  return ((uint64_t (*)(char *, uint64_t))v134)(v159, v135);
}

uint64_t *sub_250FDB4DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250FDBD44(a1, a3, type metadata accessor for BaselineBand.Configuration);
  uint64_t v5 = (const void *)(a2 + *(int *)(type metadata accessor for OvernightMetricsChartContent() + 60));
  memcpy(__dst, v5, sizeof(__dst));
  uint64_t v6 = type metadata accessor for BaselineBand(0);
  memcpy((void *)(a3 + *(int *)(v6 + 20)), v5, 0x118uLL);
  return sub_250F2A3B4(__dst);
}

void sub_250FDB574(uint64_t a1)
{
}

uint64_t sub_250FDB5A8()
{
  return sub_250FDB5DC(&qword_269B143A8, (void (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent);
}

uint64_t sub_250FDB5DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FDB624(uint64_t a1)
{
}

void sub_250FDB658(uint64_t a1)
{
}

void sub_250FDB6A0(uint64_t a1)
{
}

uint64_t sub_250FDB6D4()
{
  return sub_250FDB5DC(&qword_269B143C8, sub_250FDB6A0);
}

uint64_t sub_250FDB708()
{
  unint64_t v1 = (int *)type metadata accessor for OvernightMetricsChartContent();
  uint64_t v26 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = v0 + ((v26 + 16) & ~v26);
  uint64_t v3 = v2 + v1[5];
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v5 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v2 + v1[6];
  uint64_t v7 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    uint64_t v9 = sub_251037400();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    v10(v6, v9);
    uint64_t v11 = v6 + *(int *)(v7 + 20);
    v10(v11, v9);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v10(v11 + *(int *)(v12 + 36), v9);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v2 + v1[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v2 + v1[13];
  uint64_t v14 = type metadata accessor for BaselineSeparators.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = v13 + *(int *)(v14 + 20);
    uint64_t v16 = sub_251037400();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
    v17(v15, v16);
    sub_250FD5F84(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    v17(v15 + *(int *)(v18 + 36), v16);
    swift_release();
  }
  uint64_t v19 = v2 + v1[14];
  swift_bridgeObjectRelease();
  uint64_t v20 = v19 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v8(v20, 1, v7))
  {
    uint64_t v21 = sub_251037400();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
    v22(v20, v21);
    uint64_t v23 = v20 + *(int *)(v7 + 20);
    v22(v23, v21);
    sub_250FD5F84(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v22(v23 + *(int *)(v24 + 36), v21);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + v1[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t *sub_250FDBC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for OvernightMetricsChartContent() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_250FDB4DC(a1, v6, a2);
}

uint64_t sub_250FDBD10()
{
  return sub_250FDB5DC(&qword_269B143D0, (void (*)(uint64_t))type metadata accessor for BaselineBand);
}

uint64_t sub_250FDBD44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_250FDBDAC()
{
  if (!qword_269B143D8)
  {
    unint64_t v0 = sub_251039490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B143D8);
    }
  }
}

uint64_t sub_250FDBE04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_250FDBE6C()
{
  if (!qword_269B143E8)
  {
    type metadata accessor for GradientOverlaidPills();
    sub_250FDBFB0(255, &qword_269B143F0, sub_250FDC03C, (void (*)(void))sub_250FDC070);
    sub_250FDB5DC(&qword_269B143E0, (void (*)(uint64_t))type metadata accessor for GradientOverlaidPills);
    sub_250FDC03C(255);
    sub_250FDC070();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B143E8);
    }
  }
}

void sub_250FDBFB0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v7) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_250FDC03C(uint64_t a1)
{
}

uint64_t sub_250FDC070()
{
  return sub_250FDB5DC(&qword_269B14400, sub_250FDC03C);
}

void sub_250FDC0A4()
{
  if (!qword_269B14408)
  {
    sub_250FDB658(255);
    sub_250FDB624(255);
    type metadata accessor for SevenDaySingleMetricChartContent();
    sub_250FDBFB0(255, &qword_269B143A0, (void (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, (void (*)(void))sub_250FDB5A8);
    sub_250FDBDAC();
    sub_250FDB574(255);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_269B14408);
    }
  }
}

uint64_t sub_250FDC194(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FDC204()
{
  return sub_250FDB5DC(&qword_269B14420, (void (*)(uint64_t))type metadata accessor for BaselineSeparators);
}

uint64_t sub_250FDC238()
{
  return sub_250FDB5DC(&qword_269B14438, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricsChartPoints);
}

void sub_250FDC26C(uint64_t a1)
{
}

void sub_250FDC2A0()
{
  if (!qword_269B14448)
  {
    sub_250FDC368();
    sub_251037DE0();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14448);
    }
  }
}

void sub_250FDC368()
{
  if (!qword_269B14450)
  {
    sub_251037DE0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14450);
    }
  }
}

uint64_t sub_250FDC3EC()
{
  return sub_250FDB5DC(&qword_269B14458, sub_250FDC26C);
}

unint64_t sub_250FDC424()
{
  unint64_t result = qword_269B14460;
  if (!qword_269B14460)
  {
    sub_250FDC5E0();
    sub_250FDC194(&qword_269B14410, sub_250FDB658, (void (*)(void))sub_250FDBD10);
    sub_250FDC194(&qword_269B14418, sub_250FDB624, (void (*)(void))sub_250FDC204);
    sub_250FDB5A8();
    type metadata accessor for SevenDaySingleMetricChartContent();
    swift_getOpaqueTypeConformance2();
    sub_250FDC740(&qword_269B14428, (void (*)(uint64_t))sub_250FDBDAC);
    sub_250FDC194(&qword_269B14430, sub_250FDB574, (void (*)(void))sub_250FDC238);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14460);
  }
  return result;
}

void sub_250FDC5E0()
{
  if (!qword_269B14468)
  {
    sub_250FDB658(255);
    sub_250FDB624(255);
    type metadata accessor for SevenDaySingleMetricChartContent();
    sub_250FDBFB0(255, &qword_269B143A0, (void (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, (void (*)(void))sub_250FDB5A8);
    sub_250FDBDAC();
    sub_250FDB574(255);
    unint64_t v0 = sub_251037CE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14468);
    }
  }
}

void sub_250FDC6C8()
{
  if (!qword_269B14470)
  {
    sub_250F56610(255);
    sub_250F56518();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269B14470);
    }
  }
}

uint64_t sub_250FDC740(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FDC7A4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    a3(255);
    sub_250F2F370();
    a4(255);
    a5();
    sub_250FDC740((unint64_t *)&qword_269B133C8, (void (*)(uint64_t))sub_250F2F370);
    unint64_t v8 = sub_251038C90();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250FDC88C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t OvernightMetricsChart.init(timeScope:model:alignWarmupProgressCounterToChartPlotArea:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  sub_250FDCBE8(0, &qword_269B12F88, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v25[-v9];
  sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v25[-v12];
  sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = &v25[-v15];
  uint64_t v17 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = &v25[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v26 = *a1;
  uint64_t v20 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  sub_250FE27F8(a2 + v20[8], (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_250FE72B8(a2 + v20[7], (uint64_t)v16, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  uint64_t v21 = *(void **)(a2 + v20[14]);
  uint64_t v22 = *(void *)(a2 + v20[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OvernightMetricsViewModel.warmupProgress.getter((uint64_t)v13);
  uint64_t v23 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 1, 1, v23);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v26, (uint64_t)v19, (uint64_t)v16, 0, 1, 1, v21, v22, a4, (uint64_t)v13, a3, (uint64_t)v10);
  return sub_250FE3000(a2, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t type metadata accessor for OvernightMetricsChart.Derivations(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B14500);
}

void sub_250FDCBE8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t OvernightMetricsChart.Derivations.init(lastKeyDateRange:keyDatesRange:iconPositions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = MEMORY[0x263F8D1A0];
  sub_250FE71D8(a1, a4, (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  uint64_t v8 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t result = sub_250FE71D8(a2, a4 + *(int *)(v8 + 20), (uint64_t)&qword_26B210F90, v7, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  *(void *)(a4 + *(int *)(v8 + 24)) = a3;
  return result;
}

uint64_t OvernightMetricsChart.Derivations.init(keyDates:calendar:iconCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v73 = a4;
  sub_250F805C8();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  char v59 = (char *)&v57 - v11;
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v58 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (void (*)(char *, uint64_t))((char *)&v57 - v15);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v57 - v18;
  sub_250FDCBE8(0, &qword_26B210A78, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v69 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (uint64_t (*)(char *, uint64_t))((char *)&v57 - v23);
  uint64_t v25 = sub_251037400();
  char v26 = *(void (***)(uint64_t (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v71 = (uint64_t (*)(char *, uint64_t))((char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29.n128_f64[0] = MEMORY[0x270FA5388](v28);
  uint64_t v74 = (char *)&v57 - v30;
  uint64_t v31 = a1;
  unint64_t v32 = *(void *)(a1 + 16);
  if (!v32)
  {
LABEL_9:
    v26[7](v24, 1, 1, v25, v29);
    goto LABEL_11;
  }
  uint64_t v61 = v7;
  uint64_t v62 = v16;
  uint64_t v63 = v19;
  uint64_t v64 = v9;
  unint64_t v33 = (*((unsigned __int8 *)v26 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v26 + 80);
  uint64_t v34 = v26[2];
  uint64_t v65 = a3;
  uint64_t v66 = v31 + v33;
  ((void (*)(uint64_t (*)(char *, uint64_t), double))v34)(v24, v29.n128_f64[0]);
  long long v68 = v26[7];
  ((void (*)(uint64_t (*)(char *, uint64_t), void, uint64_t, uint64_t))v68)(v24, 0, 1, v25);
  long long v67 = v26[6];
  if (((unsigned int (*)(uint64_t (*)(char *, uint64_t), uint64_t, uint64_t))v67)(v24, 1, v25) != 1)
  {
    uint64_t v70 = (void (**)(uint64_t (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t, __n128))v26[4];
    ((void (*)(char *, uint64_t (*)(char *, uint64_t), uint64_t))v70)(v74, v24, v25);
    if (v32 > *(void *)(v31 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v57 = v26;
      uint64_t v35 = v66 + (void)v26[9] * (v32 - 1);
      uint64_t v36 = (uint64_t (*)(char *, uint64_t))v69;
      ((void (*)(char *, uint64_t, uint64_t))v34)(v69, v35, v25);
      ((void (*)(uint64_t (*)(char *, uint64_t), void, uint64_t, uint64_t))v68)(v36, 0, 1, v25);
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(uint64_t (*)(char *, uint64_t), uint64_t, uint64_t))v67)(v36, 1, v25) == 1)
      {
        ((void (*)(char *, uint64_t))v57[1])(v74, v25);
        uint64_t v24 = v36;
        goto LABEL_11;
      }
      char v26 = v70;
      uint64_t v24 = v71;
      ((void (*)(uint64_t (*)(char *, uint64_t), uint64_t (*)(char *, uint64_t), uint64_t))v70)(v71, v36, v25);
      sub_250FB624C(v24, v73);
      sub_250FE7328((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
      uint64_t v37 = v74;
      if (sub_2510390C0())
      {
        uint64_t v38 = v61;
        uint64_t v39 = v59;
        uint64_t v40 = &v59[*(int *)(v61 + 48)];
        ((void (*)(char *, char *, uint64_t))v34)(v59, v37, v25);
        uint64_t v69 = v40;
        ((void (*)(char *, uint64_t (*)(char *, uint64_t), uint64_t))v34)(v40, v24, v25);
        uint64_t v41 = v64;
        uint64_t v42 = &v64[*(int *)(v38 + 48)];
        ((void (*)(char *, char *, uint64_t))v34)(v64, v39, v25);
        ((void (*)(char *, char *, uint64_t))v34)(v42, v40, v25);
        uint64_t v43 = (uint64_t)v60;
        ((void (*)(char *, char *, uint64_t))v26)(v60, v41, v25);
        uint64_t v44 = v57[1];
        ((void (*)(char *, uint64_t))v44)(v42, v25);
        uint64_t v45 = &v41[*(int *)(v38 + 48)];
        ((void (*)(char *, char *, uint64_t))v26)(v41, v39, v25);
        ((void (*)(char *, char *, uint64_t))v26)(v45, v69, v25);
        ((void (*)(uint64_t, char *, uint64_t))v26)(v43 + *(int *)(v58 + 36), v45, v25);
        ((void (*)(char *, uint64_t))v44)(v41, v25);
        uint64_t v46 = v44;
        uint64_t v47 = MEMORY[0x263F8D1A0];
        unint64_t v48 = v62;
        sub_250FE71D8(v43, (uint64_t)v62, (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
        uint64_t v49 = (uint64_t)v63;
        uint64_t v50 = v72;
        sub_250FB69C0(v48, (uint64_t)v63);
        sub_250FE7110((uint64_t)v48, (uint64_t)&qword_26B210F90, v47, (uint64_t (*)(void))sub_250FE2864);
        uint64_t v51 = type metadata accessor for OvernightMetricsChart.Derivations(0);
        uint64_t v52 = v73;
        sub_250FE71D8(v49, v73 + *(int *)(v51 + 20), (uint64_t)&qword_26B210F90, v47, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
        uint64_t v53 = v71;
        uint64_t v54 = sub_250FB706C(v65);
        uint64_t v55 = sub_2510374F0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v50, v55);
        ((void (*)(uint64_t (*)(char *, uint64_t), uint64_t))v46)(v53, v25);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v46)(v74, v25);
        *(void *)(v52 + *(int *)(v51 + 24)) = v54;
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  sub_250FE7110((uint64_t)v24, (uint64_t)&qword_26B210A78, MEMORY[0x263F07490], (uint64_t (*)(void))sub_250FDCBE8);
  uint64_t result = sub_251039640();
  __break(1u);
  return result;
}

uint64_t OvernightMetricsChart.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsChart(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = sub_251038CF0();
  uint64_t v9 = v8;
  sub_250FE27F8(v1, (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OvernightMetricsChart);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  sub_250FE2F24((uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for OvernightMetricsChart);
  *a1 = v7;
  a1[1] = v9;
  sub_250FE2904();
  uint64_t v13 = v12;
  uint64_t result = sub_250FE72B8(v1 + *(int *)(v4 + 60), (uint64_t)a1 + *(int *)(v12 + 52), (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  uint64_t v15 = (uint64_t *)((char *)a1 + *(int *)(v13 + 56));
  *uint64_t v15 = sub_250FE2900;
  v15[1] = v11;
  return result;
}

uint64_t sub_250FDD614@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v153 = a2;
  uint64_t v7 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v129 = (uint64_t)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v133 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v132 = (uint64_t)&v120 - v12;
  uint64_t v13 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v131 = (uint64_t)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for AnimatableOvernightMetricsChart();
  MEMORY[0x270FA5388](v134);
  uint64_t v135 = (uint64_t)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FE2BD0(0);
  uint64_t v151 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v137 = (uint64_t)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FE2B30();
  uint64_t v152 = v18;
  uint64_t v130 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v136 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v138 = (char *)&v120 - v21;
  sub_250FE2A4C(0, &qword_269B14518, (uint64_t (*)(uint64_t))sub_250FE2A04, (uint64_t (*)(uint64_t))sub_250FE2B30, MEMORY[0x263F19B20]);
  uint64_t v148 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v150 = (uint64_t)&v120 - v23;
  uint64_t v141 = type metadata accessor for OvernightMetricsChartWarmupProgressCounter();
  MEMORY[0x270FA5388](v141);
  uint64_t v143 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FE2A04(0);
  uint64_t v149 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v142 = (uint64_t)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v144 = (uint64_t)&v120 - v28;
  uint64_t v29 = type metadata accessor for OvernightMetricsChartLayout(0);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v128 = (uint64_t)&v120 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v146 = (uint64_t)&v120 - v32;
  sub_250FDCBE8(0, &qword_269B14520, MEMORY[0x263F42BC0]);
  MEMORY[0x270FA5388](v33 - 8);
  long long v154 = (char *)&v120 - v34;
  uint64_t v35 = sub_251037640();
  uint64_t v155 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v147 = (char *)&v120 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x270FA5388](v37 - 8);
  uint64_t v39 = (char *)&v120 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v120 - v41;
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v120 - v44;
  int v46 = *a1;
  uint64_t v47 = type metadata accessor for OvernightMetricsChart(0);
  unint64_t v127 = *(int *)(v47 + 36);
  uint64_t v48 = *(void *)&a1[v127];
  uint64_t v145 = (int *)v47;
  uint64_t v49 = &a1[*(int *)(v47 + 28)];
  if (v49[8]) {
    double v50 = 0.0;
  }
  else {
    double v50 = *(double *)v49;
  }
  LODWORD(v140) = v46;
  LOBYTE(v160[0]) = v46;
  v160[1] = v48;
  sub_250FF9DB8((uint64_t)v42, (uint64_t)v39, v50);
  double v51 = fmod(v50, 1.0);
  swift_bridgeObjectRetain();
  if (v51 >= 0.5) {
    uint64_t v52 = (uint64_t)v42;
  }
  else {
    uint64_t v52 = (uint64_t)v39;
  }
  if (v51 >= 0.5) {
    uint64_t v53 = (uint64_t)v39;
  }
  else {
    uint64_t v53 = (uint64_t)v42;
  }
  uint64_t v54 = a1;
  uint64_t v55 = v154;
  uint64_t v56 = (uint64_t)v45;
  uint64_t v57 = v35;
  sub_250FE3000(v52, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_250FE2F24(v53, v56, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_250FDE738(v56, v55);
  uint64_t v58 = v155;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v55, 1, v35) == 1)
  {
    uint64_t v126 = v56;
    sub_250FE7110((uint64_t)v55, (uint64_t)&qword_269B14520, MEMORY[0x263F42BC0], (uint64_t (*)(void))sub_250FDCBE8);
    uint64_t v59 = v146;
    sub_250FDEEC4(v146, a3, a4);
    char v60 = v140;
    LOBYTE(v160[0]) = v140;
    v160[1] = v48;
    int v61 = v49[8];
    if (v49[8]) {
      double v62 = 0.0;
    }
    else {
      double v62 = *(double *)v49;
    }
    uint64_t v63 = sub_250FFA0C8(v62);
    uint64_t v123 = v64;
    uint64_t v124 = v63;
    uint64_t v66 = v65;
    long long v68 = v67;
    LOBYTE(v160[0]) = v60;
    v160[1] = v48;
    sub_250FFA398((uint64_t)v158, v62);
    long long v154 = *(char **)&v158[8];
    uint64_t v155 = *(void *)v158;
    uint64_t v147 = *(char **)&v158[16];
    uint64_t v143 = *(char **)&v158[32];
    uint64_t v144 = *(void *)&v158[24];
    uint64_t v141 = *(void *)&v158[48];
    uint64_t v142 = *(void *)&v158[40];
    uint64_t v139 = *(void *)&v158[64];
    uint64_t v140 = *(void *)&v158[56];
    swift_bridgeObjectRelease();
    int v125 = v61 ^ 1;
    uint64_t v69 = v128;
    sub_250FE27F8(v59, v128, type metadata accessor for OvernightMetricsChartLayout);
    int v122 = *v54;
    uint64_t v70 = v145;
    uint64_t v71 = v131;
    sub_250FE27F8((uint64_t)&v54[v145[5]], v131, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
    uint64_t v72 = v54;
    uint64_t v73 = v132;
    sub_250FE72B8((uint64_t)&v54[v70[6]], v132, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
    uint64_t v74 = v59;
    uint64_t v75 = (uint64_t)v133;
    unint64_t v76 = v127;
    if (v61)
    {
      sub_250FE7170((uint64_t)v158);
      uint64_t v78 = v154;
      uint64_t v77 = v155;
      uint64_t v79 = v147;
      uint64_t v81 = v143;
      uint64_t v80 = v144;
      uint64_t v83 = v141;
      uint64_t v82 = v142;
      uint64_t v85 = v139;
      uint64_t v84 = v140;
    }
    else
    {
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
    }
    long long v154 = v78;
    uint64_t v155 = v77;
    uint64_t v147 = v79;
    uint64_t v143 = v81;
    uint64_t v144 = v80;
    uint64_t v141 = v83;
    uint64_t v142 = v82;
    uint64_t v139 = v85;
    uint64_t v140 = v84;
    int v121 = v72[v70[8]];
    uint64_t v97 = *(void *)&v72[v76];
    swift_bridgeObjectRetain();
    unint64_t v127 = sub_250FDF304(v74);
    sub_250FDF588(v75);
    uint64_t v98 = v129;
    sub_250FE27F8((uint64_t)&v72[v70[13]], v129, type metadata accessor for OvernightMetricsChart.Derivations);
    memcpy(v160, &v72[v70[14]], 0x119uLL);
    sub_250F76798((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
    sub_250F75B5C(v159);
    sub_250F76798((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v100 = v135;
    sub_250FE2F24(v69, v135, type metadata accessor for OvernightMetricsChartLayout);
    uint64_t v101 = (int *)v134;
    *(unsigned char *)(v100 + *(int *)(v134 + 20)) = v122;
    sub_250FE2F24(v71, v100 + v101[6], (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_250FE71D8(v73, v100 + v101[7], (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
    uint64_t v102 = (void *)(v100 + v101[8]);
    uint64_t v103 = v154;
    *uint64_t v102 = v155;
    v102[1] = v103;
    uint64_t v104 = v144;
    v102[2] = v147;
    v102[3] = v104;
    uint64_t v105 = v142;
    v102[4] = v143;
    v102[5] = v105;
    uint64_t v106 = v140;
    v102[6] = v141;
    v102[7] = v106;
    v102[8] = v139;
    *(unsigned char *)(v100 + v101[9]) = v121;
    int v107 = (ValueMetadata **)(v100 + v101[10]);
    uint64_t v108 = v123;
    *int v107 = v124;
    v107[1] = v108;
    v107[2] = v66;
    v107[3] = v68;
    *(void *)(v100 + v101[11]) = v97;
    *(void *)(v100 + v101[12]) = v127;
    sub_250FE2F24(v75, v100 + v101[13], type metadata accessor for OvernightMetricsAxisConfiguration);
    sub_250FE2F24(v98, v100 + v101[14], type metadata accessor for OvernightMetricsChart.Derivations);
    memcpy((void *)(v100 + v101[15]), v159, 0x118uLL);
    uint64_t v109 = v100 + v101[16];
    *(void *)uint64_t v109 = KeyPath;
    *(unsigned char *)(v109 + 8) = 0;
    sub_251038180();
    sub_251038D50();
    sub_251038D30();
    swift_release();
    sub_251038190();
    swift_release();
    swift_release();
    sub_251038180();
    sub_251038D50();
    sub_251038D40();
    swift_release();
    sub_251038190();
    swift_release();
    swift_release();
    uint64_t v110 = sub_251038170();
    swift_release();
    swift_release();
    uint64_t v111 = v137;
    sub_250FE27F8(v100, v137, (uint64_t (*)(void))type metadata accessor for AnimatableOvernightMetricsChart);
    uint64_t v112 = v151;
    *(void *)(v111 + *(int *)(v151 + 36)) = v110;
    sub_250FE3000(v100, (uint64_t (*)(void))type metadata accessor for AnimatableOvernightMetricsChart);
    v157[2] = *(_OWORD *)&v158[32];
    v157[3] = *(_OWORD *)&v158[48];
    *(void *)&v157[4] = *(void *)&v158[64];
    v157[0] = *(_OWORD *)v158;
    v157[1] = *(_OWORD *)&v158[16];
    *(unsigned char *)(swift_allocObject() + 16) = v125;
    unint64_t v113 = sub_250FE2C18();
    unint64_t v114 = sub_250FE2CF0();
    char v115 = v136;
    sub_251038A30();
    swift_release();
    sub_250FE3000(v111, (uint64_t (*)(void))sub_250FE2BD0);
    sub_250FE7260((uint64_t)v158);
    uint64_t v116 = v130;
    uint64_t v117 = v138;
    uint64_t v118 = v152;
    (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v138, v115, v152);
    (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v150, v117, v118);
    swift_storeEnumTagMultiPayload();
    sub_250FE2E4C();
    *(void *)&v157[0] = v112;
    *((void *)&v157[0] + 1) = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    *(void *)&v157[1] = v113;
    *((void *)&v157[1] + 1) = v114;
    swift_getOpaqueTypeConformance2();
    sub_251038580();
    (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
    sub_250FE3000(v146, type metadata accessor for OvernightMetricsChartLayout);
    uint64_t v96 = v126;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v86 = v147;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v147, v55, v35);
    unsigned __int8 v87 = v54[v145[12]];
    memcpy(v160, &v54[v145[14]], 0x119uLL);
    sub_250F76798((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
    sub_250F75B5C(v157);
    sub_250F76798((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
    memcpy(v158, v157, sizeof(v158));
    sub_250F2E048((uint64_t *)v158);
    uint64_t v88 = *(void *)&v158[160];
    sub_250F76798((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
    sub_250F75B5C(v156);
    sub_250F76798((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
    memcpy(v159, v156, sizeof(v159));
    sub_250F2E048(v159);
    uint64_t v89 = v159[21];
    uint64_t v90 = (uint64_t)v143;
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(&v143[*(int *)(v141 + 32)], v86, v57);
    *(double *)uint64_t v90 = a3;
    *(double *)(v90 + 8) = a4;
    *(unsigned char *)(v90 + 16) = v87;
    *(void *)(v90 + 24) = v88;
    *(void *)(v90 + 32) = v89;
    sub_251038180();
    sub_251038D50();
    sub_251038D30();
    swift_release();
    sub_251038190();
    swift_release();
    swift_release();
    sub_251038180();
    sub_251038D50();
    sub_251038D40();
    swift_release();
    sub_251038190();
    swift_release();
    swift_release();
    uint64_t v91 = sub_251038170();
    swift_release();
    swift_release();
    uint64_t v92 = v142;
    sub_250FE27F8(v90, v142, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartWarmupProgressCounter);
    *(void *)(v92 + *(int *)(v149 + 36)) = v91;
    sub_250FE3000(v90, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartWarmupProgressCounter);
    uint64_t v93 = v144;
    sub_250FE2F24(v92, v144, (uint64_t (*)(void))sub_250FE2A04);
    sub_250FE27F8(v93, v150, (uint64_t (*)(void))sub_250FE2A04);
    swift_storeEnumTagMultiPayload();
    sub_250FE2E4C();
    unint64_t v94 = sub_250FE2C18();
    unint64_t v95 = sub_250FE2CF0();
    *(void *)&v157[0] = v151;
    *((void *)&v157[0] + 1) = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    *(void *)&v157[1] = v94;
    *((void *)&v157[1] + 1) = v95;
    swift_getOpaqueTypeConformance2();
    sub_251038580();
    sub_250FE3000(v93, (uint64_t (*)(void))sub_250FE2A04);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v147, v57);
    uint64_t v96 = v56;
  }
  return sub_250FE3000(v96, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
}

uint64_t sub_250FDE738@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v52 = a1;
  sub_250FDCBE8(0, &qword_269B14520, MEMORY[0x263F42BC0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v54 = (uint64_t)&v46 - v5;
  uint64_t v6 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v55 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_251037740();
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v51 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = sub_251037640();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v47 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v46 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = v2;
  uint64_t v25 = (uint64_t)&v2[*(int *)(type metadata accessor for OvernightMetricsChart(0) + 44)];
  sub_250FE72B8(v25, (uint64_t)v14, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  uint64_t v26 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v48 = v27 + 48;
  unsigned int v29 = v28(v14, 1, v26);
  uint64_t v49 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v28;
  uint64_t v50 = v25;
  if (v29 == 1)
  {
    sub_250FE7110((uint64_t)v14, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(void))sub_250FDCBE8);
    uint64_t v30 = a2;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v20, v14, v15);
    sub_250FE3000((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v31(v23, v20, v15);
    if ((sub_2510375F0() & 1) == 0)
    {
      v31(a2, v23, v15);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    uint64_t v30 = a2;
  }
  uint64_t v32 = v56;
  uint64_t v33 = v57;
  uint64_t v34 = v55;
  if (*v24 != 1) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v30, 1, 1, v15);
  }
  sub_250FE27F8(v52, v55, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
  {
    sub_250FE3000(v34, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v30, 1, 1, v15);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v53, v34, v33);
  uint64_t v36 = v51;
  sub_250FE72B8(v50, v51, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  if (v49(v36, 1, v26) == 1)
  {
    sub_250FE7110(v36, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(void))sub_250FDCBE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v54, 1, 1, v15);
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v53, v33);
    sub_250FE7110(v54, (uint64_t)&qword_269B14520, MEMORY[0x263F42BC0], (uint64_t (*)(void))sub_250FDCBE8);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v30, 1, 1, v15);
  }
  uint64_t v37 = *(void *)(v36 + *(int *)(v26 + 20));
  swift_bridgeObjectRetain();
  sub_250FE3000(v36, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
  if (*(void *)(v37 + 16) && (unint64_t v38 = sub_250FCB6DC(v53), (v39 & 1) != 0))
  {
    uint64_t v40 = v54;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v54, *(void *)(v37 + 56) + *(void *)(v16 + 72) * v38, v15);
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v41(v40, 0, 1, v15);
  }
  else
  {
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v41(v54, 1, 1, v15);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v54, 1, v15) == 1) {
    goto LABEL_16;
  }
  uint64_t v42 = v32;
  uint64_t v43 = *(void (**)(void))(v16 + 32);
  uint64_t v44 = v47;
  v43();
  char v45 = sub_2510375F0();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v53, v33);
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v44, v15);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v30, 1, 1, v15);
  }
  ((void (*)(char *, char *, uint64_t))v43)(v30, v44, v15);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v41)(v30, 0, 1, v15);
}

uint64_t sub_250FDEEC4@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v44 = a1;
  uint64_t v43 = type metadata accessor for OvernightMetricsChartLayout(0) - 8;
  MEMORY[0x270FA5388](v43);
  uint64_t v42 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (void *)((char *)&v39 - v15);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = (int *)type metadata accessor for OvernightMetricsChart(0);
  uint64_t v21 = *(void *)(v3 + v20[5]);
  sub_250FE72B8(v3 + v20[6], (uint64_t)v9, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  swift_bridgeObjectRetain();
  _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  memcpy(v46, (const void *)(v3 + v20[14]), 0x119uLL);
  sub_250F76798((uint64_t)v46, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  sub_250F75B5C(v45);
  sub_250F76798((uint64_t)v46, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
  memcpy(v47, v45, 0x118uLL);
  sub_250F2E048((uint64_t *)v47);
  uint64_t v26 = *((void *)&v47[5] + 1);
  uint64_t v27 = *(void *)&v47[6];
  LOBYTE(v20) = BYTE8(v47[6]);
  long long v40 = v47[8];
  long long v41 = v47[7];
  long long v39 = v47[9];
  long long v28 = v47[10];
  uint64_t v29 = (uint64_t)v16 + v11[7];
  uint64_t v30 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  *uint64_t v16 = v21;
  sub_250F8F3EC((uint64_t)v9, v29);
  uint64_t v31 = (void *)((char *)v16 + v11[8]);
  *uint64_t v31 = v23;
  v31[1] = v25;
  *(double *)((char *)v16 + v11[10]) = a2;
  *(double *)((char *)v16 + v11[11]) = a3;
  uint64_t v32 = (char *)v16 + v11[9];
  *(void *)uint64_t v32 = v26;
  *((void *)v32 + 1) = v27;
  v32[16] = (char)v20;
  *(_OWORD *)(v32 + 24) = v41;
  *(_OWORD *)(v32 + 40) = v40;
  *(_OWORD *)(v32 + 56) = v39;
  *(_OWORD *)(v32 + 72) = v28;
  sub_250FE2F24((uint64_t)v16, (uint64_t)v19, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  sub_250FE27F8((uint64_t)v19, (uint64_t)v16, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  uint64_t v33 = v42;
  sub_250FE27F8((uint64_t)v16, v42, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  sub_250FE27F8((uint64_t)v16, (uint64_t)v13, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  sub_250FCF074(v13, 7, (uint64_t)v45);
  sub_250FE3000((uint64_t)v16, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  uint64_t v34 = v33 + *(int *)(v43 + 28);
  long long v35 = *(_OWORD *)&v45[80];
  *(_OWORD *)(v34 + 64) = *(_OWORD *)&v45[64];
  *(_OWORD *)(v34 + 80) = v35;
  *(_OWORD *)(v34 + 96) = *(_OWORD *)&v45[96];
  *(void *)(v34 + 112) = *(void *)&v45[112];
  long long v36 = *(_OWORD *)&v45[16];
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v45;
  *(_OWORD *)(v34 + 16) = v36;
  long long v37 = *(_OWORD *)&v45[48];
  *(_OWORD *)(v34 + 32) = *(_OWORD *)&v45[32];
  *(_OWORD *)(v34 + 48) = v37;
  sub_250FE2F24(v33, v44, type metadata accessor for OvernightMetricsChartLayout);
  return sub_250FE3000((uint64_t)v19, type metadata accessor for OvernightMetricsChartLayout.Configuration);
}

unint64_t sub_250FDF304(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsChart(0);
  memcpy(v19, &v1[v7[14]], 0x119uLL);
  sub_250F76798((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  sub_250F75B5C(v18);
  sub_250F76798((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
  memcpy(v20, v18, 0x118uLL);
  uint64_t v8 = v20[0];
  uint64_t v9 = v20[1];
  uint64_t v10 = v20[2];
  sub_250F2A494(v20[0]);
  sub_250F2E048(v20);
  if (!v8) {
    return MEMORY[0x263F8EE78];
  }
  HIDWORD(v17) = *v2;
  uint64_t v11 = *(void *)&v2[v7[9]];
  sub_250FE72B8((uint64_t)&v2[v7[6]], (uint64_t)&v6[v4[6]], (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  sub_250FE27F8((uint64_t)&v2[v7[5]], (uint64_t)&v6[v4[7]], (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_250FE27F8((uint64_t)&v2[v7[13]], (uint64_t)&v6[v4[9]], type metadata accessor for OvernightMetricsChart.Derivations);
  sub_250FE27F8(a1, (uint64_t)&v6[v4[10]], type metadata accessor for OvernightMetricsChartLayout);
  *uint64_t v6 = BYTE4(v17);
  *((void *)v6 + 1) = v11;
  uint64_t v12 = (uint64_t *)&v6[v4[8]];
  *uint64_t v12 = v8;
  v12[1] = v9;
  v12[2] = v10;
  uint64_t v13 = &v2[v7[7]];
  if (v13[8]) {
    double v14 = 0.0;
  }
  else {
    double v14 = *(double *)v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_250FB76B0(v14);
  sub_250FE3000((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartBaselineBandColorValues);
  return v15;
}

uint64_t sub_250FDF588@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v26 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x270FA5388](v26);
  uint64_t v25 = (uint64_t)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for OvernightMetricsChartPoint;
  sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v24 - v4;
  uint64_t v6 = MEMORY[0x263F8D1A0];
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v24 - v11;
  char v32 = *v1;
  uint64_t v13 = (int *)type metadata accessor for OvernightMetricsChart(0);
  uint64_t v14 = (uint64_t)&v1[v13[13]];
  long long v28 = v12;
  sub_250FE72B8(v14, (uint64_t)v12, (uint64_t)&qword_26B210F90, v6, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  uint64_t v15 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v16 = v14 + *(int *)(v15 + 20);
  uint64_t v29 = v9;
  sub_250FE72B8(v16, (uint64_t)v9, (uint64_t)&qword_26B210F90, v6, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  uint64_t v17 = *(void *)&v1[v13[10]];
  uint64_t v18 = *(void *)(v14 + *(int *)(v15 + 24));
  uint64_t v19 = *(void *)&v1[v13[9]];
  sub_250FE72B8((uint64_t)&v1[v13[6]], (uint64_t)v5, (uint64_t)&qword_26B210E00, (uint64_t)v27, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  uint64_t v20 = type metadata accessor for OvernightMetricsChartPoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v5, 1, v20) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_250FE7110((uint64_t)v5, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void))sub_250FDCBE8);
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v22 = v25;
    sub_250FE27F8((uint64_t)&v5[*(int *)(v20 + 20)], v25, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_250FE3000((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    uint64_t v21 = *(void *)(v22 + *(int *)(v26 + 20));
    swift_bridgeObjectRetain();
    sub_250FE3000(v22, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  }
  memcpy(v33, &v1[v13[14]], 0x119uLL);
  sub_250F76798((uint64_t)v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  sub_250F75B5C(v31);
  sub_250F76798((uint64_t)v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
  return sub_250F4C11C(v31, &v32, (uint64_t)v28, (uint64_t)v29, v17, v18, v19, v21, v30);
}

void sub_250FDF974(uint64_t a1, uint64_t a2, char a3)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  uint64_t v7 = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  if (a3)
  {
    if (qword_269B12BB8 != -1) {
      swift_once();
    }
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    sub_250FE7170((uint64_t)v6);
    sub_250FE7328((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
    sub_251037520();
    sub_250FE7260((uint64_t)v6);
    swift_release();
  }
}

uint64_t sub_250FDFAD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1 - 8;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = sub_251038CF0();
  uint64_t v9 = v8;
  sub_250FE27F8(v2, (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OvernightMetricsChart);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  sub_250FE2F24((uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for OvernightMetricsChart);
  *a2 = v7;
  a2[1] = v9;
  sub_250FE2904();
  uint64_t v13 = v12;
  uint64_t result = sub_250FE72B8(v2 + *(int *)(v4 + 60), (uint64_t)a2 + *(int *)(v12 + 52), (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  uint64_t v15 = (uint64_t *)((char *)a2 + *(int *)(v13 + 56));
  *uint64_t v15 = sub_250FE2900;
  v15[1] = v11;
  return result;
}

uint64_t OvernightMetricsChart.init(timeScope:chartPoints:emphasizedChartPoint:emphasizedDataType:medialRange:visibleDataTypes:keyDates:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  uint64_t v52 = a4;
  uint64_t v53 = a3;
  uint64_t v49 = a7;
  sub_250FDCBE8(0, &qword_269B12F88, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v48 = (char *)&v44 - v10;
  sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v47 = (char *)&v44 - v12;
  sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v46 = (uint64_t)&v44 - v14;
  uint64_t v15 = sub_251037470();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_2510374F0();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x270FA5388](v26);
  uint64_t v45 = (uint64_t)&v44 - v28;
  char v56 = *a1;
  (*(void (**)(char *, void, uint64_t, double))(v16 + 104))(v18, *MEMORY[0x263F07740], v15, v27);
  sub_251037480();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(void *)uint64_t v25 = a2;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(&v25[*(int *)(v23 + 20)], v22, v19);
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_2510376F0();
  uint64_t v54 = a2;
  uint64_t v30 = swift_bridgeObjectRetain();
  uint64_t v31 = sub_250F8CBDC(v30, (void (*)(uint64_t *__return_ptr, uint64_t))sub_250F8A360);
  swift_bridgeObjectRelease();
  if (*(void *)(v31 + 16) >= *(void *)(v29 + 16)) {
    uint64_t v32 = *(void *)(v29 + 16);
  }
  else {
    uint64_t v32 = *(void *)(v31 + 16);
  }
  if (v32)
  {
    sub_250F8CD24();
    uint64_t v33 = sub_251039680();
  }
  else
  {
    uint64_t v33 = MEMORY[0x263F8EE80];
  }
  uint64_t v55 = v33;
  uint64_t v34 = swift_bridgeObjectRetain();
  sub_250F8DFDC(v34, v31, 1, &v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v55;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  swift_bridgeObjectRelease();
  *(void *)&v25[*(int *)(v23 + 24)] = v35;
  uint64_t v36 = v45;
  sub_250FE2F24((uint64_t)v25, v45, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  uint64_t v37 = v53;
  uint64_t v38 = v46;
  sub_250FE72B8(v53, v46, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  uint64_t v39 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v40 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v47, 1, 1, v39);
  uint64_t v41 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v42 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v48, 1, 1, v41);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v56, v36, v38, 0, 1, 1, v50, v51, v49, v40, 0, v42);
  sub_250FE7110(v52, (uint64_t)&unk_269B144E8, MEMORY[0x263F42CD0], (uint64_t (*)(void))sub_250FDCBE8);
  return sub_250FE7110(v37, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void))sub_250FDCBE8);
}

uint64_t OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, void *a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v51 = a8;
  uint64_t v52 = a3;
  uint64_t v44 = a7;
  uint64_t v45 = a4;
  int v46 = a5;
  int v47 = a6;
  uint64_t v43 = sub_2510374F0();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v42 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v40);
  uint64_t v50 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDCBE8(0, &qword_269B12F88, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v53 = (uint64_t)&v39 - v18;
  uint64_t v48 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v19 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v49 = (uint64_t)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v21 = *a1;
  uint64_t v22 = (int *)type metadata accessor for OvernightMetricsChart(0);
  uint64_t v23 = (uint64_t)&a9[v22[6]];
  uint64_t v24 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = &a9[v22[7]];
  *(void *)uint64_t v25 = 0;
  v25[8] = 1;
  uint64_t v26 = (uint64_t)&a9[v22[11]];
  uint64_t v27 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  uint64_t v28 = &a9[v22[14]];
  v56[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v56);
  sub_250FE2F24((uint64_t)v56, (uint64_t)v57, (uint64_t (*)(void))sub_250F9A4E8);
  memcpy(v28, v57, 0x119uLL);
  *a9 = v21;
  uint64_t v29 = (uint64_t)&a9[v22[5]];
  uint64_t v54 = a2;
  uint64_t v30 = a2;
  uint64_t v31 = v44;
  sub_250FE27F8(v30, v29, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_250FE2F94(v52, v23, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  *(void *)uint64_t v25 = v45;
  char v32 = v47;
  v25[8] = v46 & 1;
  a9[v22[8]] = v32;
  uint64_t v55 = v31;
  swift_bridgeObjectRetain();
  sub_250FE0AB0(&v55);
  *(void *)&a9[v22[9]] = v55;
  *(void *)&a9[v22[10]] = v51;
  swift_bridgeObjectRetain();
  sub_250FE2F94(a10, v26, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  a9[v22[12]] = a11 & 1;
  uint64_t v33 = v53;
  sub_250FE72B8(a12, v53, (uint64_t)&qword_269B12F88, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FDCBE8);
  uint64_t v34 = v50;
  sub_250FE27F8(v54, v50, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v33, 1, v48) == 1)
  {
    uint64_t v35 = (uint64_t)v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v34 + *(int *)(v40 + 20), v43);
    uint64_t v36 = v31[2];
    swift_bridgeObjectRelease();
    uint64_t v37 = v49;
    OvernightMetricsChart.Derivations.init(keyDates:calendar:iconCount:)(v51, v35, v36, v49);
    sub_250FE7110(a12, (uint64_t)&qword_269B12F88, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(void))sub_250FDCBE8);
    sub_250FE7110(a10, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(void))sub_250FDCBE8);
    sub_250FE7110(v52, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void))sub_250FDCBE8);
    sub_250FE3000(v54, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_250FE3000(v34, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_250FE7110(v53, (uint64_t)&qword_269B12F88, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(void))sub_250FDCBE8);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_250FE7110(a12, (uint64_t)&qword_269B12F88, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(void))sub_250FDCBE8);
    sub_250FE7110(a10, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(void))sub_250FDCBE8);
    sub_250FE7110(v52, (uint64_t)&qword_26B210E00, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void))sub_250FDCBE8);
    sub_250FE3000(v54, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_250FE3000(v34, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
    uint64_t v37 = v49;
    sub_250FE2F24(v53, v49, type metadata accessor for OvernightMetricsChart.Derivations);
  }
  return sub_250FE2F24(v37, (uint64_t)&a9[v22[13]], type metadata accessor for OvernightMetricsChart.Derivations);
}

uint64_t sub_250FE08F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_250FE7328((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
  sub_251037530();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 80);
  *(void *)a2 = *(void *)(v3 + 16);
  *(void *)(a2 + 8) = v4;
  long long v6 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(v3 + 64);
  *(void *)(a2 + 64) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_250FE09BC(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v1;
  uint64_t v5 = *(void *)(a1 + 64);
  long long v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  swift_getKeyPath();
  sub_250FE7170((uint64_t)v4);
  sub_250FE7328((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
  sub_251037520();
  sub_250FE7260((uint64_t)v4);
  return swift_release();
}

void sub_250FE0AB0(void **a1)
{
  uint64_t v2 = *(void *)(sub_251037740() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_25100EE90(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_250FE0B58(v5);
  *a1 = v3;
}

void sub_250FE0B58(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v170 = sub_251037720();
  uint64_t v4 = *(void *)(v170 - 8);
  MEMORY[0x270FA5388](v170);
  uint64_t v169 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v168 = (char *)&v149 - v7;
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v155 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v174 = (char *)&v149 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v167 = (char *)&v149 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v166 = (char *)&v149 - v16;
  uint64_t v17 = a1[1];
  uint64_t v18 = sub_2510397B0();
  if (v18 >= v17)
  {
    if (v17 < 0) {
      goto LABEL_137;
    }
    if (v17) {
      sub_250FE18C0(0, v17, 1, a1);
    }
    return;
  }
  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_145;
  }
  uint64_t v20 = v18;
  long long v172 = a1;
  uint64_t v158 = (void *)v9;
  if (v17 < 2)
  {
    uint64_t v25 = v4;
    uint64_t v26 = (char *)MEMORY[0x263F8EE78];
    unint64_t v157 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v149 = MEMORY[0x263F8EE78];
    if (v17 != 1)
    {
      unint64_t v29 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_103:
      if (v29 >= 2)
      {
        uint64_t v142 = *a1;
        do
        {
          unint64_t v143 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_132;
          }
          if (!v142) {
            goto LABEL_144;
          }
          uint64_t v144 = v26;
          uint64_t v145 = *(void *)&v26[16 * v143 + 32];
          uint64_t v146 = *(void *)&v26[16 * v29 + 24];
          sub_250FE1C9C(v142 + v158[9] * v145, v142 + v158[9] * *(void *)&v26[16 * v29 + 16], v142 + v158[9] * v146, v157);
          if (v2) {
            break;
          }
          if (v146 < v145) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v144 = sub_25100EE7C((uint64_t)v26);
          }
          if (v143 >= *((void *)v144 + 2)) {
            goto LABEL_134;
          }
          uint64_t v147 = &v144[16 * v143 + 32];
          *(void *)uint64_t v147 = v145;
          *((void *)v147 + 1) = v146;
          unint64_t v148 = *((void *)v144 + 2);
          if (v29 > v148) {
            goto LABEL_135;
          }
          memmove(&v144[16 * v29 + 16], &v144[16 * v29 + 32], 16 * (v148 - v29));
          *((void *)v144 + 2) = v148 - 1;
          unint64_t v29 = v148 - 1;
          uint64_t v26 = v144;
        }
        while (v148 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v149 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v21 = 1;
    uint64_t v4 = v25;
  }
  else
  {
    uint64_t v21 = v17;
    uint64_t v22 = v19 >> 1;
    uint64_t v23 = sub_251039260();
    *(void *)(v23 + 16) = v22;
    unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v149 = v23;
    unint64_t v157 = v23 + v24;
  }
  uint64_t v27 = 0;
  uint64_t v164 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v165 = v9 + 16;
  uint64_t v163 = (void (**)(char *, uint64_t))(v9 + 8);
  v178 = (uint64_t *)(v9 + 32);
  uint64_t v26 = (char *)MEMORY[0x263F8EE78];
  uint64_t v173 = v8;
  uint64_t v151 = v20;
  uint64_t v28 = v21;
  while (1)
  {
    uint64_t v30 = v27 + 1;
    uint64_t v156 = v27;
    if (v27 + 1 >= v28)
    {
      a1 = v172;
    }
    else
    {
      uint64_t v150 = v26;
      uint64_t v31 = *v172;
      uint64_t v152 = v31;
      uint64_t v32 = v158[9];
      uint64_t v176 = v32;
      uint64_t v177 = v27 + 1;
      uint64_t v33 = v31 + v32 * v30;
      uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v158[2];
      uint64_t v35 = v166;
      long long v175 = (char *)v28;
      v34(v166, v33, v8);
      uint64_t v36 = v31 + v32 * v27;
      uint64_t v37 = v167;
      uint64_t v162 = v34;
      v34(v167, v36, v8);
      uint64_t v38 = v168;
      sub_251037730();
      uint64_t v39 = v169;
      sub_251037730();
      LODWORD(v171) = sub_251037710();
      uint64_t v40 = (char *)*v164;
      uint64_t v41 = v170;
      (*v164)(v39, v170);
      uint64_t v161 = v40;
      ((void (*)(char *, uint64_t))v40)(v38, v41);
      uint64_t v42 = (void (*)(char *, uint64_t))v158[1];
      uint64_t v43 = v37;
      uint64_t v27 = v156;
      v42(v43, v8);
      uint64_t v160 = (char *)v42;
      v42(v35, v8);
      uint64_t v28 = (uint64_t)v175;
      uint64_t v30 = v27 + 2;
      if (v27 + 2 < (uint64_t)v175)
      {
        uint64_t v154 = v2;
        uint64_t v159 = v176 * v177;
        uint64_t v44 = v152;
        uint64_t v153 = v176 * v30;
        while (1)
        {
          uint64_t v45 = v30;
          int v46 = v166;
          uint64_t v47 = v173;
          uint64_t v48 = v162;
          v162(v166, v44 + v153, v173);
          uint64_t v49 = v167;
          v48(v167, v44 + v159, v47);
          uint64_t v50 = v168;
          sub_251037730();
          uint64_t v51 = v169;
          sub_251037730();
          LODWORD(v177) = sub_251037710();
          uint64_t v52 = v51;
          uint64_t v53 = v170;
          uint64_t v54 = (void (*)(char *, uint64_t))v161;
          ((void (*)(char *, uint64_t))v161)(v52, v170);
          v54(v50, v53);
          uint64_t v55 = (void (*)(char *, uint64_t))v160;
          ((void (*)(char *, uint64_t))v160)(v49, v47);
          v55(v46, v47);
          if ((v171 ^ v177)) {
            break;
          }
          uint64_t v30 = v45 + 1;
          uint64_t v28 = (uint64_t)v175;
          v44 += v176;
          if (v175 == (char *)(v45 + 1))
          {
            uint64_t v30 = (uint64_t)v175;
            uint64_t v8 = v173;
            uint64_t v2 = v154;
            uint64_t v27 = v156;
            goto LABEL_24;
          }
        }
        uint64_t v8 = v173;
        uint64_t v2 = v154;
        uint64_t v30 = v45;
        uint64_t v27 = v156;
        uint64_t v28 = (uint64_t)v175;
      }
LABEL_24:
      a1 = v172;
      uint64_t v26 = v150;
      uint64_t v20 = v151;
      if (v171)
      {
        if (v30 < v27) {
          goto LABEL_138;
        }
        if (v27 < v30)
        {
          uint64_t v56 = 0;
          uint64_t v57 = v176;
          uint64_t v58 = v176 * (v30 - 1);
          uint64_t v59 = v30 * v176;
          uint64_t v60 = v27 * v176;
          do
          {
            if (v27 != v30 + v56 - 1)
            {
              if (!v152) {
                goto LABEL_143;
              }
              uint64_t v154 = v2;
              unint64_t v62 = v152 + v60;
              uint64_t v63 = v152 + v58;
              uint64_t v64 = v152;
              uint64_t v177 = *v178;
              ((void (*)(char *, uint64_t, uint64_t))v177)(v155, v152 + v60, v173);
              if (v60 < v58 || v62 >= v64 + v59)
              {
                uint64_t v61 = v173;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v61 = v173;
                if (v60 != v58) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              ((void (*)(uint64_t, char *, uint64_t))v177)(v63, v155, v61);
              a1 = v172;
              uint64_t v2 = v154;
              uint64_t v57 = v176;
            }
            ++v27;
            --v56;
            v58 -= v57;
            v59 -= v57;
            v60 += v57;
          }
          while (v27 < v30 + v56);
          uint64_t v26 = v150;
          uint64_t v8 = v173;
          uint64_t v20 = v151;
          uint64_t v27 = v156;
          uint64_t v28 = (uint64_t)v175;
        }
      }
    }
    if (v30 < v28)
    {
      if (__OFSUB__(v30, v27)) {
        goto LABEL_136;
      }
      if (v30 - v27 < v20) {
        break;
      }
    }
LABEL_55:
    if (v30 < v27) {
      goto LABEL_131;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v171 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v26 = sub_25100EA68(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v90 = *((void *)v26 + 2);
    unint64_t v89 = *((void *)v26 + 3);
    unint64_t v29 = v90 + 1;
    if (v90 >= v89 >> 1) {
      uint64_t v26 = sub_25100EA68((char *)(v89 > 1), v90 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v29;
    uint64_t v91 = v26 + 32;
    uint64_t v92 = &v26[16 * v90 + 32];
    uint64_t v93 = v171;
    *(void *)uint64_t v92 = v156;
    *((void *)v92 + 1) = v93;
    if (v90)
    {
      while (1)
      {
        unint64_t v94 = v29 - 1;
        if (v29 >= 4)
        {
          uint64_t v99 = &v91[16 * v29];
          uint64_t v100 = *((void *)v99 - 8);
          uint64_t v101 = *((void *)v99 - 7);
          BOOL v105 = __OFSUB__(v101, v100);
          uint64_t v102 = v101 - v100;
          if (v105) {
            goto LABEL_120;
          }
          uint64_t v104 = *((void *)v99 - 6);
          uint64_t v103 = *((void *)v99 - 5);
          BOOL v105 = __OFSUB__(v103, v104);
          uint64_t v97 = v103 - v104;
          char v98 = v105;
          if (v105) {
            goto LABEL_121;
          }
          unint64_t v106 = v29 - 2;
          int v107 = &v91[16 * v29 - 32];
          uint64_t v109 = *(void *)v107;
          uint64_t v108 = *((void *)v107 + 1);
          BOOL v105 = __OFSUB__(v108, v109);
          uint64_t v110 = v108 - v109;
          if (v105) {
            goto LABEL_123;
          }
          BOOL v105 = __OFADD__(v97, v110);
          uint64_t v111 = v97 + v110;
          if (v105) {
            goto LABEL_126;
          }
          if (v111 >= v102)
          {
            uint64_t v129 = &v91[16 * v94];
            uint64_t v131 = *(void *)v129;
            uint64_t v130 = *((void *)v129 + 1);
            BOOL v105 = __OFSUB__(v130, v131);
            uint64_t v132 = v130 - v131;
            if (v105) {
              goto LABEL_130;
            }
            BOOL v122 = v97 < v132;
            goto LABEL_92;
          }
        }
        else
        {
          if (v29 != 3)
          {
            uint64_t v123 = *((void *)v26 + 4);
            uint64_t v124 = *((void *)v26 + 5);
            BOOL v105 = __OFSUB__(v124, v123);
            uint64_t v116 = v124 - v123;
            char v117 = v105;
            goto LABEL_86;
          }
          uint64_t v96 = *((void *)v26 + 4);
          uint64_t v95 = *((void *)v26 + 5);
          BOOL v105 = __OFSUB__(v95, v96);
          uint64_t v97 = v95 - v96;
          char v98 = v105;
        }
        if (v98) {
          goto LABEL_122;
        }
        unint64_t v106 = v29 - 2;
        uint64_t v112 = &v91[16 * v29 - 32];
        uint64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        BOOL v115 = __OFSUB__(v113, v114);
        uint64_t v116 = v113 - v114;
        char v117 = v115;
        if (v115) {
          goto LABEL_125;
        }
        uint64_t v118 = &v91[16 * v94];
        uint64_t v120 = *(void *)v118;
        uint64_t v119 = *((void *)v118 + 1);
        BOOL v105 = __OFSUB__(v119, v120);
        uint64_t v121 = v119 - v120;
        if (v105) {
          goto LABEL_128;
        }
        if (__OFADD__(v116, v121)) {
          goto LABEL_129;
        }
        if (v116 + v121 >= v97)
        {
          BOOL v122 = v97 < v121;
LABEL_92:
          if (v122) {
            unint64_t v94 = v106;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v117) {
          goto LABEL_124;
        }
        int v125 = &v91[16 * v94];
        uint64_t v127 = *(void *)v125;
        uint64_t v126 = *((void *)v125 + 1);
        BOOL v105 = __OFSUB__(v126, v127);
        uint64_t v128 = v126 - v127;
        if (v105) {
          goto LABEL_127;
        }
        if (v128 < v116) {
          goto LABEL_15;
        }
LABEL_94:
        unint64_t v133 = v94 - 1;
        if (v94 - 1 >= v29)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        uint64_t v134 = *a1;
        if (!*a1) {
          goto LABEL_142;
        }
        uint64_t v135 = v26;
        uint64_t v136 = &v91[16 * v133];
        uint64_t v137 = *(void *)v136;
        uint64_t v138 = v91;
        uint64_t v139 = &v91[16 * v94];
        uint64_t v140 = *((void *)v139 + 1);
        sub_250FE1C9C(v134 + v158[9] * *(void *)v136, v134 + v158[9] * *(void *)v139, v134 + v158[9] * v140, v157);
        if (v2) {
          goto LABEL_114;
        }
        if (v140 < v137) {
          goto LABEL_117;
        }
        if (v94 > *((void *)v135 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v136 = v137;
        *(void *)&v138[16 * v133 + 8] = v140;
        unint64_t v141 = *((void *)v135 + 2);
        if (v94 >= v141) {
          goto LABEL_119;
        }
        uint64_t v26 = v135;
        unint64_t v29 = v141 - 1;
        memmove(v139, v139 + 16, 16 * (v141 - 1 - v94));
        uint64_t v91 = v138;
        *((void *)v135 + 2) = v141 - 1;
        a1 = v172;
        uint64_t v8 = v173;
        if (v141 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v29 = 1;
LABEL_15:
    uint64_t v28 = a1[1];
    uint64_t v27 = v171;
    uint64_t v20 = v151;
    if (v171 >= v28) {
      goto LABEL_103;
    }
  }
  if (__OFADD__(v27, v20)) {
    goto LABEL_139;
  }
  if (v27 + v20 < v28) {
    uint64_t v28 = v27 + v20;
  }
  if (v28 >= v27)
  {
    if (v30 != v28)
    {
      uint64_t v150 = v26;
      uint64_t v154 = v2;
      uint64_t v65 = (char *)v158[9];
      uint64_t v159 = v158[2];
      uint64_t v160 = v65;
      uint64_t v66 = (void)v65 * (v30 - 1);
      long long v67 = (char *)(v30 * (void)v65);
      uint64_t v153 = v28;
      do
      {
        uint64_t v69 = 0;
        uint64_t v70 = v156;
        uint64_t v171 = v30;
        uint64_t v161 = v67;
        uint64_t v162 = (void (*)(char *, uint64_t, uint64_t))v66;
        while (1)
        {
          uint64_t v176 = v70;
          uint64_t v71 = *a1;
          long long v175 = &v67[v69];
          uint64_t v72 = &v67[v69 + v71];
          uint64_t v73 = v166;
          uint64_t v74 = (void (*)(char *, uint64_t, uint64_t))v159;
          ((void (*)(char *, char *, uint64_t))v159)(v166, v72, v8);
          uint64_t v75 = v66 + v69 + v71;
          unint64_t v76 = v167;
          v74(v167, v75, v8);
          uint64_t v77 = v168;
          sub_251037730();
          uint64_t v78 = a1;
          uint64_t v79 = v169;
          sub_251037730();
          LODWORD(v177) = sub_251037710();
          uint64_t v80 = *v164;
          uint64_t v81 = v79;
          uint64_t v82 = v170;
          (*v164)(v81, v170);
          uint64_t v83 = v77;
          uint64_t v8 = v173;
          v80(v83, v82);
          uint64_t v84 = *v163;
          (*v163)(v76, v8);
          v84(v73, v8);
          if ((v177 & 1) == 0) {
            break;
          }
          uint64_t v85 = *v78;
          if (!*v78) {
            goto LABEL_141;
          }
          long long v67 = v161;
          uint64_t v66 = (uint64_t)v162;
          uint64_t v86 = (char *)v162 + v85 + v69;
          unsigned __int8 v87 = (void (*)(char *, char *, uint64_t))*v178;
          ((void (*)(char *, char *, uint64_t))*v178)(v174, &v161[v85 + v69], v8);
          swift_arrayInitWithTakeFrontToBack();
          v87(v86, v174, v8);
          v69 -= (uint64_t)v160;
          uint64_t v70 = v176 + 1;
          uint64_t v68 = v171;
          a1 = v172;
          if (v171 == v176 + 1) {
            goto LABEL_48;
          }
        }
        uint64_t v68 = v171;
        a1 = v78;
        long long v67 = v161;
        uint64_t v66 = (uint64_t)v162;
LABEL_48:
        uint64_t v30 = v68 + 1;
        v66 += (uint64_t)v160;
        long long v67 = &v160[(void)v67];
      }
      while (v30 != v153);
      uint64_t v30 = v153;
      uint64_t v2 = v154;
      uint64_t v26 = v150;
      uint64_t v27 = v156;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  sub_251039630();
  __break(1u);
}

void sub_250FE18C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v46 = a1;
  uint64_t v56 = sub_251037720();
  uint64_t v7 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v54 = (char *)&v44 - v10;
  uint64_t v11 = sub_251037740();
  MEMORY[0x270FA5388](v11);
  unint64_t v62 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v53 = (char *)&v44 - v14;
  v17.n128_f64[0] = MEMORY[0x270FA5388](v15);
  uint64_t v52 = (char *)&v44 - v18;
  uint64_t v60 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    uint64_t v20 = *(void (**)(void, void, void, __n128))(v16 + 16);
    uint64_t v19 = v16 + 16;
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v48 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v49 = (void (*)(char *, uint64_t, uint64_t))v20;
    uint64_t v47 = (void (**)(char *, uint64_t))(v19 - 8);
    uint64_t v50 = v11;
    uint64_t v51 = v19;
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v22 = v21 * (v60 - 1);
    uint64_t v57 = v21;
    uint64_t v23 = v21 * v60;
LABEL_5:
    uint64_t v24 = 0;
    uint64_t v64 = v46;
    uint64_t v58 = v23;
    uint64_t v59 = v22;
    while (1)
    {
      uint64_t v25 = *a4;
      uint64_t v63 = v23 + v24;
      uint64_t v26 = v23 + v24 + v25;
      uint64_t v27 = v52;
      uint64_t v28 = v49;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v49)(v52, v26, v11, v17);
      uint64_t v29 = v22 + v24 + v25;
      uint64_t v30 = v53;
      v28(v53, v29, v11);
      uint64_t v31 = v54;
      sub_251037730();
      uint64_t v32 = a4;
      uint64_t v33 = v55;
      sub_251037730();
      int v65 = sub_251037710();
      uint64_t v34 = *v48;
      uint64_t v35 = v33;
      uint64_t v36 = v56;
      (*v48)(v35, v56);
      uint64_t v37 = v36;
      a4 = v32;
      uint64_t v11 = v50;
      v34(v31, v37);
      uint64_t v38 = *v47;
      uint64_t v39 = v30;
      uint64_t v22 = v59;
      (*v47)(v39, v11);
      uint64_t v40 = v27;
      uint64_t v23 = v58;
      v38(v40, v11);
      if ((v65 & 1) == 0)
      {
LABEL_4:
        v22 += v57;
        v23 += v57;
        if (++v60 == v45) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v41 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v42 = (char *)(v41 + v22 + v24);
      uint64_t v43 = *v61;
      (*v61)(v62, v41 + v23 + v24, v11);
      swift_arrayInitWithTakeFrontToBack();
      v43(v42, (uint64_t)v62, v11);
      v24 -= v57;
      if (v60 == ++v64) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_250FE1C9C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v75 = sub_251037720();
  uint64_t v8 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v73 = (char *)&v61 - v11;
  uint64_t v77 = sub_251037740();
  uint64_t v12 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v72 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v71 = (char *)&v61 - v15;
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_61;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_62;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v17;
  unint64_t v80 = a1;
  unint64_t v79 = a4;
  uint64_t v20 = v18 / v17;
  if (v19 >= v18 / v17)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v17;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v41 = a4 + v22;
      unint64_t v78 = a4 + v22;
      unint64_t v80 = a2;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v43 = -v17;
        uint64_t v44 = *(void (**)(void))(v12 + 16);
        uint64_t v63 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v64 = (void (*)(char *))v44;
        uint64_t v70 = v12 + 16;
        unint64_t v62 = (void (**)(char *, uint64_t))(v12 + 8);
        int v65 = (void (**)(char *, uint64_t))a1;
        unint64_t v66 = a4;
        uint64_t v45 = v71;
        do
        {
          unint64_t v76 = (void (**)(char *, uint64_t))a3;
          uint64_t v68 = (void (**)(char *, uint64_t))a2;
          unint64_t v69 = a3 + v43;
          uint64_t v46 = v77;
          uint64_t v47 = v64;
          ((void (*)(char *, unint64_t, uint64_t))v64)(v45, v41 + v43, v77);
          uint64_t v48 = v72;
          long long v67 = (void (**)(char *, uint64_t))(a2 + v43);
          v47(v72);
          uint64_t v49 = v73;
          sub_251037730();
          uint64_t v50 = v74;
          sub_251037730();
          LOBYTE(v47) = sub_251037710();
          uint64_t v51 = v43;
          uint64_t v52 = *v63;
          uint64_t v53 = v50;
          uint64_t v54 = v75;
          (*v63)(v53, v75);
          v52(v49, v54);
          uint64_t v55 = *v62;
          (*v62)(v48, v46);
          v55(v45, v46);
          if (v47)
          {
            a3 = v69;
            if (v76 < v68 || v69 >= (unint64_t)v68)
            {
              uint64_t v58 = v67;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              uint64_t v43 = v51;
            }
            else
            {
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              uint64_t v43 = v51;
              uint64_t v58 = v67;
              if (v76 != v68) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v80 += v43;
          }
          else
          {
            uint64_t v58 = v68;
            a3 = v69;
            unint64_t v59 = v78;
            v78 += v51;
            uint64_t v43 = v51;
            if ((unint64_t)v76 < v59 || v69 >= v59)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v57 = v65;
              unint64_t v56 = v66;
            }
            else
            {
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              if (v76 != (void (**)(char *, uint64_t))v59) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
          }
          unint64_t v41 = v78;
          if (v78 <= v56) {
            break;
          }
          a2 = (unint64_t)v58;
        }
        while (v58 > v57);
      }
      goto LABEL_59;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v17;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v69 = a4 + v21;
    unint64_t v78 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      uint64_t v24 = *(void (***)(char *, uint64_t))(v12 + 16);
      long long v67 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v68 = v24;
      uint64_t v70 = v12 + 16;
      uint64_t v64 = (void (*)(char *))v17;
      int v65 = (void (**)(char *, uint64_t))(v12 + 8);
      unint64_t v76 = (void (**)(char *, uint64_t))a3;
      uint64_t v26 = v71;
      uint64_t v25 = v72;
      do
      {
        unint64_t v27 = a4;
        uint64_t v28 = v77;
        uint64_t v29 = v68;
        ((void (*)(char *, unint64_t, uint64_t))v68)(v26, a2, v77);
        ((void (*)(char *, unint64_t, uint64_t))v29)(v25, v27, v28);
        uint64_t v30 = v73;
        sub_251037730();
        uint64_t v31 = v74;
        sub_251037730();
        LOBYTE(v27) = sub_251037710();
        uint64_t v32 = *v67;
        uint64_t v33 = v31;
        uint64_t v34 = v75;
        (*v67)(v33, v75);
        v32(v30, v34);
        uint64_t v35 = *v65;
        (*v65)(v25, v28);
        v35(v26, v28);
        unint64_t v36 = v80;
        if (v27)
        {
          uint64_t v37 = (void (*)(void))v64;
          unint64_t v38 = (unint64_t)v64 + a2;
          if (v80 < a2 || v80 >= v38)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v39 = (unint64_t)v76;
          }
          else
          {
            unint64_t v39 = (unint64_t)v76;
            if (v80 == a2) {
              unint64_t v36 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v37 = (void (*)(void))v64;
          unint64_t v40 = (unint64_t)v64 + v79;
          if (v80 < v79 || v80 >= v40)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v39 = (unint64_t)v76;
          }
          else
          {
            unint64_t v39 = (unint64_t)v76;
            if (v80 != v79) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v79 = v40;
          unint64_t v38 = a2;
        }
        unint64_t v80 = (unint64_t)v37 + v36;
        a4 = v79;
        if (v79 >= v69) {
          break;
        }
        a2 = v38;
      }
      while (v38 < v39);
    }
LABEL_59:
    sub_25100EB90(&v80, &v79, (uint64_t *)&v78);
    return 1;
  }
LABEL_63:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t _s15HealthBalanceUI21OvernightMetricsChartV11DerivationsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x263F8D1A0];
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v41 = v5;
  MEMORY[0x270FA5388](v5);
  unint64_t v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v37 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v37 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v37 - v14;
  sub_251037400();
  uint64_t v42 = sub_250FE7328(&qword_269B13308, MEMORY[0x263F07490]);
  char v16 = sub_2510390F0();
  sub_250FE72B8(a1, (uint64_t)v15, (uint64_t)&qword_26B210F90, v4, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  sub_250FE72B8(a2, (uint64_t)v12, (uint64_t)&qword_26B210F90, v4, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  if ((v16 & 1) == 0)
  {
    uint64_t v34 = MEMORY[0x263F8D1A0];
    sub_250FE7110((uint64_t)v12, (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void))sub_250FE2864);
    uint64_t v35 = (uint64_t)v15;
LABEL_7:
    sub_250FE7110(v35, (uint64_t)&qword_26B210F90, v34, (uint64_t (*)(void))sub_250FE2864);
    goto LABEL_8;
  }
  uint64_t v17 = (uint64_t)v40;
  uint64_t v38 = a2;
  uint64_t v39 = a1;
  uint64_t v18 = (uint64_t)v9;
  char v19 = sub_2510390F0();
  uint64_t v20 = MEMORY[0x263F8D1A0];
  sub_250FE7110((uint64_t)v12, (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void))sub_250FE2864);
  sub_250FE7110((uint64_t)v15, (uint64_t)&qword_26B210F90, v20, (uint64_t (*)(void))sub_250FE2864);
  if ((v19 & 1) == 0)
  {
LABEL_8:
    char v33 = 0;
    return v33 & 1;
  }
  uint64_t v21 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v22 = *(int *)(v21 + 20);
  uint64_t v23 = v39 + v22;
  uint64_t v24 = v38 + v22;
  char v25 = sub_2510390F0();
  uint64_t v26 = MEMORY[0x263F8D1A0];
  uint64_t v27 = v23;
  uint64_t v28 = v18;
  sub_250FE72B8(v27, v18, (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  sub_250FE72B8(v24, v17, (uint64_t)&qword_26B210F90, v26, (uint64_t (*)(void, uint64_t, uint64_t))sub_250FE2864);
  if ((v25 & 1) == 0)
  {
    uint64_t v34 = MEMORY[0x263F8D1A0];
    sub_250FE7110(v17, (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void))sub_250FE2864);
    uint64_t v35 = v18;
    goto LABEL_7;
  }
  uint64_t v29 = v21;
  char v30 = sub_2510390F0();
  uint64_t v31 = v28;
  uint64_t v32 = MEMORY[0x263F8D1A0];
  sub_250FE7110(v17, (uint64_t)&qword_26B210F90, MEMORY[0x263F8D1A0], (uint64_t (*)(void))sub_250FE2864);
  sub_250FE7110(v31, (uint64_t)&qword_26B210F90, v32, (uint64_t (*)(void))sub_250FE2864);
  if ((v30 & 1) == 0) {
    goto LABEL_8;
  }
  char v33 = sub_250F84C40(*(void *)(v39 + *(int *)(v29 + 24)), *(void *)(v38 + *(int *)(v29 + 24)));
  return v33 & 1;
}

uint64_t type metadata accessor for OvernightMetricsChart(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B144F0);
}

uint64_t sub_250FE27F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_250FE2864(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_250FE7328((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250FE2904()
{
  if (!qword_269B14478)
  {
    type metadata accessor for OvernightMetricsChartSizingPlaceholder();
    sub_250FE2A4C(255, &qword_269B14480, (uint64_t (*)(uint64_t))sub_250FE2A04, (uint64_t (*)(uint64_t))sub_250FE2B30, MEMORY[0x263F19B28]);
    sub_250FE7328(&qword_269B144C8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartSizingPlaceholder);
    sub_250FE2D44();
    unint64_t v0 = type metadata accessor for ChartPlotSizeReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14478);
    }
  }
}

void sub_250FE2A04(uint64_t a1)
{
}

void sub_250FE2A4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_250FE2AD0()
{
  if (!qword_269B14490)
  {
    sub_2510384F0();
    unint64_t v0 = sub_2510385B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14490);
    }
  }
}

void sub_250FE2B30()
{
  if (!qword_269B14498)
  {
    sub_250FE2BD0(255);
    sub_250FE2C18();
    sub_250FE2CF0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14498);
    }
  }
}

void sub_250FE2BD0(uint64_t a1)
{
}

unint64_t sub_250FE2C18()
{
  unint64_t result = qword_269B144A8;
  if (!qword_269B144A8)
  {
    sub_250FE2BD0(255);
    sub_250FE7328(&qword_269B144B0, (void (*)(uint64_t))type metadata accessor for AnimatableOvernightMetricsChart);
    sub_250FE7328(&qword_269B144B8, (void (*)(uint64_t))sub_250FE2AD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B144A8);
  }
  return result;
}

unint64_t sub_250FE2CF0()
{
  unint64_t result = qword_269B144C0;
  if (!qword_269B144C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B144C0);
  }
  return result;
}

unint64_t sub_250FE2D44()
{
  unint64_t result = qword_269B144D0;
  if (!qword_269B144D0)
  {
    sub_250FE2A4C(255, &qword_269B14480, (uint64_t (*)(uint64_t))sub_250FE2A04, (uint64_t (*)(uint64_t))sub_250FE2B30, MEMORY[0x263F19B28]);
    sub_250FE2E4C();
    sub_250FE2BD0(255);
    sub_250FE2C18();
    sub_250FE2CF0();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B144D0);
  }
  return result;
}

unint64_t sub_250FE2E4C()
{
  unint64_t result = qword_269B144D8;
  if (!qword_269B144D8)
  {
    sub_250FE2A04(255);
    sub_250FE7328(&qword_269B144E0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartWarmupProgressCounter);
    sub_250FE7328(&qword_269B144B8, (void (*)(uint64_t))sub_250FE2AD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B144D8);
  }
  return result;
}

uint64_t sub_250FE2F24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250FE2F94(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_250FDCBE8(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a2, a1, v6);
  return a2;
}

uint64_t sub_250FE3000(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FE3060()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for OvernightMetricsChart(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v22 = v21 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = a3[5];
    uint64_t v6 = (char *)a1 + v5;
    unint64_t v8 = (char *)a2 + v5;
    *(void *)((char *)a1 + v5) = *(void *)((char *)a2 + v5);
    uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v108 = &v6[v10];
    unint64_t v11 = &v8[v10];
    uint64_t v12 = sub_2510374F0();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v108, v11, v12);
    *(void *)&v6[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
    unint64_t v106 = a3;
    uint64_t v109 = a1;
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    char v16 = (char *)a2 + v14;
    uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v18 = *((void *)v17 - 1);
    char v19 = *(unsigned int (**)(char *, uint64_t, int *))(v18 + 48);
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v23 = sub_251037400();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      v24(v15, v16, v23);
      uint64_t v25 = v17[5];
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      v24(&v15[v25], &v16[v25], v23);
      sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v23);
      uint64_t v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v26[v29[5]] = *(void *)&v27[v29[5]];
      *(void *)&v26[v29[6]] = *(void *)&v27[v29[6]];
      *(void *)&v26[v29[7]] = *(void *)&v27[v29[7]];
      uint64_t v30 = v17[6];
      uint64_t v31 = &v15[v30];
      uint64_t v32 = &v16[v30];
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      uint64_t v33 = v17[10];
      uint64_t v34 = &v15[v33];
      uint64_t v35 = &v16[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      uint64_t v37 = v17[11];
      uint64_t v38 = &v15[v37];
      uint64_t v39 = &v16[v37];
      uint64_t v40 = *((void *)v39 + 1);
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = v40;
      uint64_t v41 = *(void (**)(char *, void, uint64_t, int *))(v18 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41(v15, 0, 1, v17);
    }
    uint64_t v42 = v106[7];
    uint64_t v43 = v106[8];
    uint64_t v44 = (char *)a1 + v42;
    uint64_t v45 = (char *)a2 + v42;
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    *((unsigned char *)a1 + v43) = *((unsigned char *)a2 + v43);
    uint64_t v46 = v106[10];
    *(void *)((char *)a1 + v106[9]) = *(void *)((char *)a2 + v106[9]);
    *(void *)((char *)a1 + v46) = *(void *)((char *)a2 + v46);
    uint64_t v47 = v106[11];
    uint64_t v48 = (char *)a1 + v47;
    uint64_t v49 = (char *)a2 + v47;
    uint64_t v50 = type metadata accessor for OvernightMetricsWarmupProgress();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v52(v49, 1, v50))
    {
      sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      uint64_t v54 = sub_251037640();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v48, v49, v54);
      *(void *)&v48[*(int *)(v50 + 20)] = *(void *)&v49[*(int *)(v50 + 20)];
      uint64_t v55 = *(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56);
      swift_bridgeObjectRetain();
      v55(v48, 0, 1, v50);
    }
    uint64_t v56 = v106[13];
    *((unsigned char *)a1 + v106[12]) = *((unsigned char *)a2 + v106[12]);
    uint64_t v57 = (char *)a1 + v56;
    uint64_t v58 = (char *)a2 + v56;
    uint64_t v59 = sub_251037400();
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
    v60(v57, v58, v59);
    sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v62 = v61;
    v60(&v57[*(int *)(v61 + 36)], &v58[*(int *)(v61 + 36)], v59);
    uint64_t v63 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    uint64_t v64 = *(int *)(v63 + 20);
    int v65 = &v57[v64];
    unint64_t v66 = &v58[v64];
    v60(&v57[v64], &v58[v64], v59);
    v60(&v65[*(int *)(v62 + 36)], &v66[*(int *)(v62 + 36)], v59);
    *(void *)&v57[*(int *)(v63 + 24)] = *(void *)&v58[*(int *)(v63 + 24)];
    uint64_t v67 = v106[14];
    uint64_t v68 = (char *)a1 + v67;
    unint64_t v69 = (char *)a2 + v67;
    uint64_t v86 = *((void *)v69 + 1);
    uint64_t v87 = *(void *)v69;
    uint64_t v84 = *((void *)v69 + 3);
    uint64_t v85 = *((void *)v69 + 2);
    uint64_t v82 = *((void *)v69 + 5);
    uint64_t v83 = *((void *)v69 + 4);
    uint64_t v80 = *((void *)v69 + 7);
    uint64_t v81 = *((void *)v69 + 6);
    uint64_t v79 = *((void *)v69 + 8);
    uint64_t v105 = *((void *)v69 + 10);
    uint64_t v107 = *((void *)v69 + 9);
    uint64_t v102 = *((void *)v69 + 12);
    uint64_t v103 = *((void *)v69 + 11);
    uint64_t v100 = *((void *)v69 + 14);
    uint64_t v101 = *((void *)v69 + 13);
    uint64_t v98 = *((void *)v69 + 16);
    uint64_t v99 = *((void *)v69 + 15);
    uint64_t v96 = *((void *)v69 + 18);
    uint64_t v97 = *((void *)v69 + 17);
    uint64_t v94 = *((void *)v69 + 20);
    uint64_t v95 = *((void *)v69 + 19);
    uint64_t v92 = *((void *)v69 + 22);
    uint64_t v93 = *((void *)v69 + 21);
    uint64_t v90 = *((void *)v69 + 24);
    uint64_t v91 = *((void *)v69 + 23);
    uint64_t v70 = *((void *)v69 + 27);
    uint64_t v88 = *((void *)v69 + 26);
    uint64_t v89 = *((void *)v69 + 25);
    uint64_t v71 = *((void *)v69 + 28);
    uint64_t v72 = *((void *)v69 + 29);
    uint64_t v73 = *((void *)v69 + 30);
    uint64_t v74 = *((void *)v69 + 31);
    uint64_t v75 = *((void *)v69 + 32);
    uint64_t v76 = *((void *)v69 + 33);
    uint64_t v77 = *((void *)v69 + 34);
    LOBYTE(v63) = v69[280];
    swift_bridgeObjectRetain();
    sub_250F40BE0(v87, v86, v85, v84, v83, v82, v81, v80, v79, v107, v105, v103, v102, v101, v100, v99, v98, v97, v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v88,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v63);
    *(void *)uint64_t v68 = v87;
    *((void *)v68 + 1) = v86;
    *((void *)v68 + 2) = v85;
    *((void *)v68 + 3) = v84;
    *((void *)v68 + 4) = v83;
    *((void *)v68 + 5) = v82;
    *((void *)v68 + 6) = v81;
    *((void *)v68 + 7) = v80;
    *((void *)v68 + 8) = v79;
    *((void *)v68 + 9) = v107;
    *((void *)v68 + 10) = v105;
    *((void *)v68 + 11) = v103;
    *((void *)v68 + 12) = v102;
    *((void *)v68 + 13) = v101;
    *((void *)v68 + 14) = v100;
    *((void *)v68 + 15) = v99;
    *((void *)v68 + 16) = v98;
    *((void *)v68 + 17) = v97;
    *((void *)v68 + 18) = v96;
    *((void *)v68 + 19) = v95;
    *((void *)v68 + 20) = v94;
    *((void *)v68 + 21) = v93;
    *((void *)v68 + 22) = v92;
    *((void *)v68 + 23) = v91;
    *((void *)v68 + 24) = v90;
    *((void *)v68 + 25) = v89;
    *((void *)v68 + 26) = v88;
    *((void *)v68 + 27) = v70;
    *((void *)v68 + 28) = v71;
    *((void *)v68 + 29) = v72;
    *((void *)v68 + 30) = v73;
    *((void *)v68 + 31) = v74;
    *((void *)v68 + 32) = v75;
    *((void *)v68 + 33) = v76;
    *((void *)v68 + 34) = v77;
    v68[280] = v63;
    return v109;
  }
  return (void *)v22;
}

uint64_t destroy for OvernightMetricsChart(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v6 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = sub_251037400();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    v10(v7, v9);
    uint64_t v11 = v7 + *(int *)(v8 + 20);
    v10(v11, v9);
    sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v10(v11 + *(int *)(v12 + 36), v9);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = a1 + a2[11];
  uint64_t v14 = type metadata accessor for OvernightMetricsWarmupProgress();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = sub_251037640();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = a1 + a2[13];
  uint64_t v17 = sub_251037400();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v20 = v19;
  v18(v16 + *(int *)(v19 + 36), v17);
  uint64_t v21 = v16 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v18(v21, v17);
  v18(v21 + *(int *)(v20 + 36), v17);
  swift_bridgeObjectRelease();
  uint64_t v22 = a1 + a2[14];
  long long v25 = *(_OWORD *)(v22 + 240);
  long long v26 = *(_OWORD *)(v22 + 256);
  long long v24 = *(_OWORD *)(v22 + 208);
  return sub_250F40D40(*(void *)v22, *(void *)(v22 + 8), *(void *)(v22 + 16), *(void *)(v22 + 24), *(void *)(v22 + 32), *(void *)(v22 + 40), *(void *)(v22 + 48), *(void *)(v22 + 56), *(void *)(v22 + 64), *(void *)(v22 + 72), *(void *)(v22 + 80), *(void *)(v22 + 88), *(void *)(v22 + 96), *(void *)(v22 + 104), *(void *)(v22 + 112), *(void *)(v22 + 120), *(void *)(v22 + 128), *(void *)(v22 + 136), *(void *)(v22 + 144),
           *(void *)(v22 + 152),
           *(void *)(v22 + 160),
           *(void *)(v22 + 168),
           *(void *)(v22 + 176),
           *(void *)(v22 + 184),
           *(void *)(v22 + 192),
           *(void *)(v22 + 200),
           v24,
           *((uint64_t *)&v24 + 1),
           *(void *)(v22 + 224),
           *(void *)(v22 + 232),
           v25,
           *((uint64_t *)&v25 + 1),
           v26,
           *((uint64_t *)&v26 + 1),
           *(void *)(v22 + 272),
           *(unsigned char *)(v22 + 280));
}

unsigned char *initializeWithCopy for OvernightMetricsChart(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v100 = &v8[v10];
  uint64_t v102 = &v7[v10];
  uint64_t v11 = sub_2510374F0();
  uint64_t v12 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v102, v100, v11);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  uint64_t v105 = a3;
  uint64_t v107 = a1;
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v103 = a2;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
  swift_bridgeObjectRetain();
  if (v18(v15, 1, v16))
  {
    sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v14, v15, v20);
    uint64_t v22 = v16[5];
    uint64_t v23 = &v14[v22];
    long long v24 = &v15[v22];
    v21(&v14[v22], &v15[v22], v20);
    sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    long long v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
    *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
    *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
    uint64_t v27 = v16[6];
    uint64_t v28 = &v14[v27];
    uint64_t v29 = &v15[v27];
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v14[v16[7]] = v15[v16[7]];
    v14[v16[8]] = v15[v16[8]];
    v14[v16[9]] = v15[v16[9]];
    uint64_t v30 = v16[10];
    uint64_t v31 = &v14[v30];
    uint64_t v32 = &v15[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = v16[11];
    uint64_t v35 = &v14[v34];
    uint64_t v36 = &v15[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v37;
    uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v17 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v14, 0, 1, v16);
  }
  uint64_t v39 = v105[7];
  uint64_t v40 = v105[8];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &v103[v39];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v42[8];
  a1[v40] = v103[v40];
  uint64_t v43 = v105[10];
  *(void *)&a1[v105[9]] = *(void *)&v103[v105[9]];
  *(void *)&a1[v43] = *(void *)&v103[v43];
  uint64_t v44 = v105[11];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &v103[v44];
  uint64_t v47 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v49(v46, 1, v47))
  {
    sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    uint64_t v51 = sub_251037640();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v45, v46, v51);
    *(void *)&v45[*(int *)(v47 + 20)] = *(void *)&v46[*(int *)(v47 + 20)];
    uint64_t v52 = *(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56);
    swift_bridgeObjectRetain();
    v52(v45, 0, 1, v47);
  }
  uint64_t v53 = v105[13];
  a1[v105[12]] = v103[v105[12]];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &v103[v53];
  uint64_t v56 = sub_251037400();
  uint64_t v57 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v56 - 8) + 16);
  v57(v54, v55, v56);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v59 = v58;
  v57(&v54[*(int *)(v58 + 36)], &v55[*(int *)(v58 + 36)], v56);
  uint64_t v60 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v61 = *(int *)(v60 + 20);
  uint64_t v62 = &v54[v61];
  uint64_t v63 = &v55[v61];
  v57(&v54[v61], &v55[v61], v56);
  v57(&v62[*(int *)(v59 + 36)], &v63[*(int *)(v59 + 36)], v56);
  *(void *)&v54[*(int *)(v60 + 24)] = *(void *)&v55[*(int *)(v60 + 24)];
  uint64_t v64 = v105[14];
  int v65 = &a1[v64];
  unint64_t v66 = &v103[v64];
  uint64_t v83 = *((void *)v66 + 1);
  uint64_t v84 = *(void *)v66;
  uint64_t v81 = *((void *)v66 + 3);
  uint64_t v82 = *((void *)v66 + 2);
  uint64_t v79 = *((void *)v66 + 5);
  uint64_t v80 = *((void *)v66 + 4);
  uint64_t v77 = *((void *)v66 + 7);
  uint64_t v78 = *((void *)v66 + 6);
  uint64_t v76 = *((void *)v66 + 8);
  uint64_t v104 = *((void *)v66 + 10);
  uint64_t v106 = *((void *)v66 + 9);
  uint64_t v99 = *((void *)v66 + 12);
  uint64_t v101 = *((void *)v66 + 11);
  uint64_t v97 = *((void *)v66 + 14);
  uint64_t v98 = *((void *)v66 + 13);
  uint64_t v95 = *((void *)v66 + 16);
  uint64_t v96 = *((void *)v66 + 15);
  uint64_t v93 = *((void *)v66 + 18);
  uint64_t v94 = *((void *)v66 + 17);
  uint64_t v91 = *((void *)v66 + 20);
  uint64_t v92 = *((void *)v66 + 19);
  uint64_t v89 = *((void *)v66 + 22);
  uint64_t v90 = *((void *)v66 + 21);
  uint64_t v87 = *((void *)v66 + 24);
  uint64_t v88 = *((void *)v66 + 23);
  uint64_t v67 = *((void *)v66 + 27);
  uint64_t v85 = *((void *)v66 + 26);
  uint64_t v86 = *((void *)v66 + 25);
  uint64_t v68 = *((void *)v66 + 28);
  uint64_t v69 = *((void *)v66 + 29);
  uint64_t v70 = *((void *)v66 + 30);
  uint64_t v71 = *((void *)v66 + 31);
  uint64_t v72 = *((void *)v66 + 32);
  uint64_t v73 = *((void *)v66 + 33);
  uint64_t v74 = *((void *)v66 + 34);
  LOBYTE(v60) = v66[280];
  swift_bridgeObjectRetain();
  sub_250F40BE0(v84, v83, v82, v81, v80, v79, v78, v77, v76, v106, v104, v101, v99, v98, v97, v96, v95, v94, v93,
    v92,
    v91,
    v90,
    v89,
    v88,
    v87,
    v86,
    v85,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v60);
  *(void *)int v65 = v84;
  *((void *)v65 + 1) = v83;
  *((void *)v65 + 2) = v82;
  *((void *)v65 + 3) = v81;
  *((void *)v65 + 4) = v80;
  *((void *)v65 + 5) = v79;
  *((void *)v65 + 6) = v78;
  *((void *)v65 + 7) = v77;
  *((void *)v65 + 8) = v76;
  *((void *)v65 + 9) = v106;
  *((void *)v65 + 10) = v104;
  *((void *)v65 + 11) = v101;
  *((void *)v65 + 12) = v99;
  *((void *)v65 + 13) = v98;
  *((void *)v65 + 14) = v97;
  *((void *)v65 + 15) = v96;
  *((void *)v65 + 16) = v95;
  *((void *)v65 + 17) = v94;
  *((void *)v65 + 18) = v93;
  *((void *)v65 + 19) = v92;
  *((void *)v65 + 20) = v91;
  *((void *)v65 + 21) = v90;
  *((void *)v65 + 22) = v89;
  *((void *)v65 + 23) = v88;
  *((void *)v65 + 24) = v87;
  *((void *)v65 + 25) = v86;
  *((void *)v65 + 26) = v85;
  *((void *)v65 + 27) = v67;
  *((void *)v65 + 28) = v68;
  *((void *)v65 + 29) = v69;
  *((void *)v65 + 30) = v70;
  *((void *)v65 + 31) = v71;
  *((void *)v65 + 32) = v72;
  *((void *)v65 + 33) = v73;
  *((void *)v65 + 34) = v74;
  v65[280] = v60;
  return v107;
}

unsigned char *assignWithCopy for OvernightMetricsChart(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v152 = a3;
  uint64_t v14 = a3[6];
  uint64_t v15 = &v5[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  LODWORD(v8) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  unint64_t v143 = v5;
  if (v8)
  {
    if (!v20)
    {
      uint64_t v21 = sub_251037400();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v15, v16, v21);
      uint64_t v23 = v17[5];
      long long v24 = &v15[v23];
      uint64_t v25 = &v16[v23];
      v22(&v15[v23], &v16[v23], v21);
      sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
      uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v24[v27[5]] = *(void *)&v25[v27[5]];
      *(void *)&v24[v27[6]] = *(void *)&v25[v27[6]];
      *(void *)&v24[v27[7]] = *(void *)&v25[v27[7]];
      uint64_t v28 = v17[6];
      uint64_t v29 = &v15[v28];
      uint64_t v30 = &v16[v28];
      char v31 = v30[16];
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      v29[16] = v31;
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      uint64_t v32 = v17[10];
      uint64_t v33 = &v15[v32];
      uint64_t v34 = &v16[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      uint64_t v35 = v17[11];
      uint64_t v36 = &v15[v35];
      uint64_t v37 = &v16[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      *((void *)v36 + 1) = *((void *)v37 + 1);
      uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v18 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v5 = v143;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_250FE3000((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v103 = sub_251037400();
  uint64_t v104 = *(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 24);
  v104(v15, v16, v103);
  uint64_t v105 = v17[5];
  uint64_t v106 = &v15[v105];
  uint64_t v107 = v5;
  uint64_t v108 = &v16[v105];
  v104(&v15[v105], &v16[v105], v103);
  sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v104(&v106[*(int *)(v109 + 36)], &v108[*(int *)(v109 + 36)], v103);
  uint64_t v110 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v106[v110[5]] = *(void *)&v108[v110[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v106[v110[6]] = *(void *)&v108[v110[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v111 = v110[7];
  uint64_t v112 = *(void *)&v108[v111];
  uint64_t v5 = v107;
  *(void *)&v106[v111] = v112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v113 = v17[6];
  uint64_t v114 = &v15[v113];
  BOOL v115 = &v16[v113];
  long long v116 = *(_OWORD *)v115;
  v114[16] = v115[16];
  *(_OWORD *)uint64_t v114 = v116;
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  uint64_t v117 = v17[10];
  uint64_t v118 = &v15[v117];
  uint64_t v119 = &v16[v117];
  *(void *)uint64_t v118 = *(void *)v119;
  *((void *)v118 + 1) = *((void *)v119 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v120 = v17[11];
  uint64_t v121 = &v15[v120];
  BOOL v122 = &v16[v120];
  *(void *)uint64_t v121 = *(void *)v122;
  *((void *)v121 + 1) = *((void *)v122 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v40 = v152[7];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v43 = *(void *)v42;
  v41[8] = v42[8];
  *(void *)uint64_t v41 = v43;
  v5[v152[8]] = a2[v152[8]];
  *(void *)&v5[v152[9]] = *(void *)&a2[v152[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v5[v152[10]] = *(void *)&a2[v152[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v152[11];
  uint64_t v45 = &v5[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v47 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      uint64_t v123 = sub_251037640();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 24))(v45, v46, v123);
      *(void *)&v45[*(int *)(v47 + 20)] = *(void *)&v46[*(int *)(v47 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_250FE3000((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_12;
  }
  if (v51)
  {
LABEL_12:
    sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    memcpy(v45, v46, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v52 = sub_251037640();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v45, v46, v52);
  *(void *)&v45[*(int *)(v47 + 20)] = *(void *)&v46[*(int *)(v47 + 20)];
  uint64_t v53 = *(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56);
  swift_bridgeObjectRetain();
  v53(v45, 0, 1, v47);
LABEL_13:
  uint64_t v150 = a2;
  v5[v152[12]] = a2[v152[12]];
  uint64_t v55 = v152[13];
  uint64_t v56 = &v5[v55];
  uint64_t v57 = &a2[v55];
  uint64_t v58 = sub_251037400();
  uint64_t v59 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v58 - 8) + 24);
  v59(v56, v57, v58);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v61 = v60;
  v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
  uint64_t v62 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v63 = *(int *)(v62 + 20);
  uint64_t v64 = v5;
  int v65 = &v56[v63];
  unint64_t v66 = &v57[v63];
  v59(&v56[v63], &v57[v63], v58);
  v59(&v65[*(int *)(v61 + 36)], &v66[*(int *)(v61 + 36)], v58);
  *(void *)&v56[*(int *)(v62 + 24)] = *(void *)&v57[*(int *)(v62 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v67 = v152[14];
  uint64_t v68 = &v64[v67];
  uint64_t v69 = &v150[v67];
  uint64_t v151 = *((void *)v69 + 1);
  uint64_t v153 = *(void *)v69;
  uint64_t v148 = *((void *)v69 + 3);
  uint64_t v149 = *((void *)v69 + 2);
  uint64_t v146 = *((void *)v69 + 5);
  uint64_t v147 = *((void *)v69 + 4);
  uint64_t v144 = *((void *)v69 + 7);
  uint64_t v145 = *((void *)v69 + 6);
  uint64_t v124 = *((void *)v69 + 9);
  uint64_t v125 = *((void *)v69 + 10);
  uint64_t v126 = *((void *)v69 + 11);
  uint64_t v127 = *((void *)v69 + 12);
  uint64_t v128 = *((void *)v69 + 13);
  uint64_t v129 = *((void *)v69 + 14);
  uint64_t v130 = *((void *)v69 + 15);
  uint64_t v70 = *((void *)v69 + 17);
  uint64_t v131 = *((void *)v69 + 16);
  uint64_t v132 = *((void *)v69 + 18);
  uint64_t v71 = *((void *)v69 + 19);
  uint64_t v72 = *((void *)v69 + 20);
  uint64_t v73 = *((void *)v69 + 21);
  uint64_t v74 = *((void *)v69 + 22);
  uint64_t v75 = *((void *)v69 + 23);
  uint64_t v76 = *((void *)v69 + 24);
  uint64_t v77 = *((void *)v69 + 25);
  uint64_t v133 = *((void *)v69 + 26);
  uint64_t v134 = *((void *)v69 + 27);
  uint64_t v135 = *((void *)v69 + 28);
  uint64_t v136 = *((void *)v69 + 29);
  uint64_t v137 = *((void *)v69 + 30);
  uint64_t v138 = *((void *)v69 + 31);
  uint64_t v139 = *((void *)v69 + 32);
  uint64_t v140 = *((void *)v69 + 33);
  uint64_t v141 = *((void *)v69 + 34);
  char v142 = v69[280];
  uint64_t v78 = *((void *)v69 + 8);
  sub_250F40BE0(*(void *)v69, v151, v149, v148, v147, v146, v145, v144, v78, v124, v125, v126, v127, v128, v129, v130, v131, v70, v132,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v77,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142);
  uint64_t v79 = *(void *)v68;
  uint64_t v80 = *((void *)v68 + 1);
  *(void *)uint64_t v68 = v153;
  *((void *)v68 + 1) = v151;
  uint64_t v81 = *((void *)v68 + 2);
  uint64_t v82 = *((void *)v68 + 3);
  *((void *)v68 + 2) = v149;
  *((void *)v68 + 3) = v148;
  uint64_t v83 = *((void *)v68 + 4);
  uint64_t v84 = *((void *)v68 + 5);
  *((void *)v68 + 4) = v147;
  *((void *)v68 + 5) = v146;
  uint64_t v85 = *((void *)v68 + 6);
  uint64_t v86 = *((void *)v68 + 7);
  *((void *)v68 + 6) = v145;
  long long v87 = *((_OWORD *)v68 + 4);
  long long v88 = *((_OWORD *)v68 + 5);
  *((void *)v68 + 7) = v144;
  *((void *)v68 + 8) = v78;
  *((void *)v68 + 9) = v124;
  *((void *)v68 + 10) = v125;
  *((void *)v68 + 11) = v126;
  long long v89 = *((_OWORD *)v68 + 6);
  long long v90 = *((_OWORD *)v68 + 7);
  *((void *)v68 + 12) = v127;
  *((void *)v68 + 13) = v128;
  *((void *)v68 + 14) = v129;
  *((void *)v68 + 15) = v130;
  long long v91 = *((_OWORD *)v68 + 8);
  long long v92 = *((_OWORD *)v68 + 9);
  *((void *)v68 + 16) = v131;
  *((void *)v68 + 17) = v70;
  *((void *)v68 + 18) = v132;
  *((void *)v68 + 19) = v71;
  long long v93 = *((_OWORD *)v68 + 10);
  long long v94 = *((_OWORD *)v68 + 11);
  *((void *)v68 + 20) = v72;
  *((void *)v68 + 21) = v73;
  *((void *)v68 + 22) = v74;
  *((void *)v68 + 23) = v75;
  long long v95 = *((_OWORD *)v68 + 12);
  long long v96 = *((_OWORD *)v68 + 13);
  *((void *)v68 + 24) = v76;
  *((void *)v68 + 25) = v77;
  *((void *)v68 + 26) = v133;
  *((void *)v68 + 27) = v134;
  long long v97 = *((_OWORD *)v68 + 14);
  long long v98 = *((_OWORD *)v68 + 15);
  *((void *)v68 + 28) = v135;
  *((void *)v68 + 29) = v136;
  *((void *)v68 + 30) = v137;
  *((void *)v68 + 31) = v138;
  long long v99 = *((_OWORD *)v68 + 16);
  *((void *)v68 + 32) = v139;
  *((void *)v68 + 33) = v140;
  uint64_t v100 = *((void *)v68 + 34);
  *((void *)v68 + 34) = v141;
  char v101 = v68[280];
  v68[280] = v142;
  sub_250F40D40(v79, v80, v81, v82, v83, v84, v85, v86, v87, *((uint64_t *)&v87 + 1), v88, *((uint64_t *)&v88 + 1), v89, *((uint64_t *)&v89 + 1), v90, *((uint64_t *)&v90 + 1), v91, *((uint64_t *)&v91 + 1), v92,
    *((uint64_t *)&v92 + 1),
    v93,
    *((uint64_t *)&v93 + 1),
    v94,
    *((uint64_t *)&v94 + 1),
    v95,
    *((uint64_t *)&v95 + 1),
    v96,
    *((uint64_t *)&v96 + 1),
    v97,
    *((uint64_t *)&v97 + 1),
    v98,
    *((uint64_t *)&v98 + 1),
    v99,
    *((uint64_t *)&v99 + 1),
    v100,
    v101);
  return v143;
}

unsigned char *initializeWithTake for OvernightMetricsChart(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  uint64_t v14 = a3[6];
  uint64_t v15 = &v5[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
    uint64_t v57 = v5;
    v21(v15, v16, v20);
    uint64_t v22 = v17[5];
    uint64_t v23 = &v15[v22];
    long long v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
    *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
    uint64_t v27 = v26[7];
    uint64_t v28 = *(void *)&v24[v27];
    uint64_t v5 = v57;
    *(void *)&v23[v27] = v28;
    uint64_t v29 = v17[6];
    uint64_t v30 = &v15[v29];
    char v31 = &v16[v29];
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    v30[16] = v31[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v32 = a3[7];
  uint64_t v33 = a3[8];
  uint64_t v34 = &v5[v32];
  uint64_t v35 = &a2[v32];
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  v5[v33] = a2[v33];
  uint64_t v36 = a3[10];
  *(void *)&v5[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&v5[v36] = *(void *)&a2[v36];
  uint64_t v37 = a3[11];
  uint64_t v38 = &v5[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v43 = sub_251037640();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v38, v39, v43);
    *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  uint64_t v44 = a3[13];
  v5[a3[12]] = a2[a3[12]];
  uint64_t v45 = &v5[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v47 = sub_251037400();
  uint64_t v58 = a3;
  uint64_t v48 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v47 - 8) + 32);
  v48(v45, v46, v47);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v50 = v49;
  v48(&v45[*(int *)(v49 + 36)], &v46[*(int *)(v49 + 36)], v47);
  uint64_t v51 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v52 = *(int *)(v51 + 20);
  uint64_t v53 = v5;
  uint64_t v54 = &v45[v52];
  uint64_t v55 = &v46[v52];
  v48(&v45[v52], &v46[v52], v47);
  v48(&v54[*(int *)(v50 + 36)], &v55[*(int *)(v50 + 36)], v47);
  *(void *)&v45[*(int *)(v51 + 24)] = *(void *)&v46[*(int *)(v51 + 24)];
  memcpy(&v53[v58[14]], &a2[v58[14]], 0x119uLL);
  return v53;
}

unsigned char *assignWithTake for OvernightMetricsChart(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)&a1[v6] = *(void *)&a2[v6];
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  *(void *)&v7[*(int *)(v9 + 24)] = *(void *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v117 = a3;
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  LODWORD(v7) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (v7)
  {
    if (!v20)
    {
      uint64_t v21 = sub_251037400();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
      v22(v15, v16, v21);
      uint64_t v116 = v18;
      uint64_t v23 = v22;
      uint64_t v24 = v17[5];
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      v23(&v15[v24], &v16[v24], v21);
      sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
      uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
      *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
      *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
      uint64_t v29 = v17[6];
      uint64_t v30 = &v15[v29];
      char v31 = &v16[v29];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
      *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v116 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_250FE3000((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v95 = sub_251037400();
  long long v96 = *(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 40);
  v96(v15, v16, v95);
  uint64_t v97 = v17[5];
  long long v98 = &v15[v97];
  long long v99 = &v16[v97];
  v96(&v15[v97], &v16[v97], v95);
  sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v96(&v98[*(int *)(v100 + 36)], &v99[*(int *)(v100 + 36)], v95);
  char v101 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v98[v101[5]] = *(void *)&v99[v101[5]];
  swift_bridgeObjectRelease();
  *(void *)&v98[v101[6]] = *(void *)&v99[v101[6]];
  swift_bridgeObjectRelease();
  *(void *)&v98[v101[7]] = *(void *)&v99[v101[7]];
  swift_bridgeObjectRelease();
  uint64_t v102 = v17[6];
  uint64_t v103 = &v15[v102];
  uint64_t v104 = &v16[v102];
  *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
  v103[16] = v104[16];
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  uint64_t v105 = v17[10];
  uint64_t v106 = &v15[v105];
  uint64_t v107 = (uint64_t *)&v16[v105];
  uint64_t v109 = *v107;
  uint64_t v108 = v107[1];
  *(void *)uint64_t v106 = v109;
  *((void *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
  uint64_t v110 = v17[11];
  uint64_t v111 = &v15[v110];
  uint64_t v112 = (uint64_t *)&v16[v110];
  uint64_t v114 = *v112;
  uint64_t v113 = v112[1];
  *(void *)uint64_t v111 = v114;
  *((void *)v111 + 1) = v113;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v33 = v117[7];
  uint64_t v34 = v117[8];
  uint64_t v35 = &a1[v33];
  uint64_t v36 = &a2[v33];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  a1[v34] = a2[v34];
  *(void *)&a1[v117[9]] = *(void *)&a2[v117[9]];
  swift_bridgeObjectRelease();
  *(void *)&a1[v117[10]] = *(void *)&a2[v117[10]];
  swift_bridgeObjectRelease();
  uint64_t v37 = v117[11];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      uint64_t v115 = sub_251037640();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 40))(v38, v39, v115);
      *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_250FE3000((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_12;
  }
  if (v44)
  {
LABEL_12:
    sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    memcpy(v38, v39, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v45 = sub_251037640();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v38, v39, v45);
  *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_13:
  uint64_t v47 = v117[13];
  a1[v117[12]] = a2[v117[12]];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v50 = sub_251037400();
  uint64_t v51 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v50 - 8) + 40);
  v51(v48, v49, v50);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v53 = v52;
  v51(&v48[*(int *)(v52 + 36)], &v49[*(int *)(v52 + 36)], v50);
  uint64_t v54 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v55 = *(int *)(v54 + 20);
  uint64_t v56 = &v48[v55];
  uint64_t v57 = &v49[v55];
  v51(&v48[v55], &v49[v55], v50);
  v51(&v56[*(int *)(v53 + 36)], &v57[*(int *)(v53 + 36)], v50);
  *(void *)&v48[*(int *)(v54 + 24)] = *(void *)&v49[*(int *)(v54 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v58 = v117[14];
  uint64_t v59 = &a1[v58];
  uint64_t v60 = &a2[v58];
  uint64_t v61 = *(void *)&a2[v58 + 272];
  char v62 = v60[280];
  uint64_t v63 = *(void *)v59;
  uint64_t v64 = *((void *)v59 + 1);
  uint64_t v65 = *((void *)v59 + 2);
  uint64_t v66 = *((void *)v59 + 3);
  uint64_t v67 = *((void *)v59 + 4);
  uint64_t v68 = *((void *)v59 + 5);
  uint64_t v69 = *((void *)v59 + 6);
  uint64_t v70 = *((void *)v59 + 7);
  long long v71 = *((_OWORD *)v59 + 4);
  long long v72 = *((_OWORD *)v59 + 5);
  long long v73 = *((_OWORD *)v59 + 6);
  long long v74 = *((_OWORD *)v59 + 7);
  long long v75 = *((_OWORD *)v59 + 8);
  long long v76 = *((_OWORD *)v59 + 9);
  long long v77 = *((_OWORD *)v59 + 10);
  long long v78 = *((_OWORD *)v59 + 11);
  long long v79 = *((_OWORD *)v59 + 12);
  long long v80 = *((_OWORD *)v59 + 13);
  long long v81 = *((_OWORD *)v59 + 14);
  long long v82 = *((_OWORD *)v59 + 15);
  long long v83 = *((_OWORD *)v59 + 16);
  uint64_t v84 = *((void *)v59 + 34);
  char v85 = v59[280];
  long long v86 = *((_OWORD *)v60 + 1);
  *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  *((_OWORD *)v59 + 1) = v86;
  long long v87 = *((_OWORD *)v60 + 3);
  *((_OWORD *)v59 + 2) = *((_OWORD *)v60 + 2);
  *((_OWORD *)v59 + 3) = v87;
  long long v88 = *((_OWORD *)v60 + 5);
  *((_OWORD *)v59 + 4) = *((_OWORD *)v60 + 4);
  *((_OWORD *)v59 + 5) = v88;
  long long v89 = *((_OWORD *)v60 + 7);
  *((_OWORD *)v59 + 6) = *((_OWORD *)v60 + 6);
  *((_OWORD *)v59 + 7) = v89;
  long long v90 = *((_OWORD *)v60 + 9);
  *((_OWORD *)v59 + 8) = *((_OWORD *)v60 + 8);
  *((_OWORD *)v59 + 9) = v90;
  long long v91 = *((_OWORD *)v60 + 11);
  *((_OWORD *)v59 + 10) = *((_OWORD *)v60 + 10);
  *((_OWORD *)v59 + 11) = v91;
  long long v92 = *((_OWORD *)v60 + 13);
  *((_OWORD *)v59 + 12) = *((_OWORD *)v60 + 12);
  *((_OWORD *)v59 + 13) = v92;
  long long v93 = *((_OWORD *)v60 + 15);
  *((_OWORD *)v59 + 14) = *((_OWORD *)v60 + 14);
  *((_OWORD *)v59 + 15) = v93;
  *((_OWORD *)v59 + 16) = *((_OWORD *)v60 + 16);
  *((void *)v59 + 34) = v61;
  v59[280] = v62;
  sub_250F40D40(v63, v64, v65, v66, v67, v68, v69, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76,
    *((uint64_t *)&v76 + 1),
    v77,
    *((uint64_t *)&v77 + 1),
    v78,
    *((uint64_t *)&v78 + 1),
    v79,
    *((uint64_t *)&v79 + 1),
    v80,
    *((uint64_t *)&v80 + 1),
    v81,
    *((uint64_t *)&v81 + 1),
    v82,
    *((uint64_t *)&v82 + 1),
    v83,
    *((uint64_t *)&v83 + 1),
    v84,
    v85);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FE5CA4);
}

uint64_t sub_250FE5CA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v14(a1 + v9, a2, v7);
  }
  sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_11;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[9]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
    {
      uint64_t v7 = v13;
      uint64_t v8 = *(void *)(v13 - 8);
      uint64_t v9 = a3[11];
      goto LABEL_11;
    }
    uint64_t v15 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[13];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FE5EB8);
}

void sub_250FE5EB8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v14(a1 + v11, a2, a2, v9);
    return;
  }
  sub_250FDCBE8(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_9;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[9]) = (a2 - 1);
    return;
  }
  sub_250FDCBE8(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[13];
  v16(v18, a2, a2, v17);
}

void sub_250FE60B8()
{
  type metadata accessor for OvernightMetricsChartPointCollection();
  if (v0 <= 0x3F)
  {
    sub_250FDCBE8(319, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    if (v1 <= 0x3F)
    {
      sub_250FDCBE8(319, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChart.Derivations(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

char *initializeBufferWithCopyOfBuffer for OvernightMetricsChart.Derivations(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v10 = v9;
    v8(&a1[*(int *)(v9 + 36)], (char *)a2 + *(int *)(v9 + 36), v7);
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = &a1[v11];
    uint64_t v13 = (char *)a2 + v11;
    v8(&a1[v11], (char *)a2 + v11, v7);
    v8(&v12[*(int *)(v10 + 36)], &v13[*(int *)(v10 + 36)], v7);
    *(void *)&a1[*(int *)(a3 + 24)] = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037400();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v7 = v6;
  v5(a1 + *(int *)(v6 + 36), v4);
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  v5(v8, v4);
  v5(v8 + *(int *)(v7 + 36), v4);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FE6974);
}

uint64_t sub_250FE6974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FE6A64);
}

void sub_250FE6A64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
}

void sub_250FE6B3C()
{
  sub_250FE2864(319, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_250FE6BF4()
{
  return sub_250FE7328(&qword_269B14510, (void (*)(uint64_t))sub_250FE2904);
}

uint64_t objectdestroyTm_1()
{
  unint64_t v1 = (int *)type metadata accessor for OvernightMetricsChart(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  uint64_t v4 = v3 + v1[5];
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v6 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v3 + v1[6];
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = sub_251037400();
    unint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    v10(v7, v9);
    uint64_t v11 = v7 + *(int *)(v8 + 20);
    v10(v11, v9);
    sub_250FE2864(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v10(v11 + *(int *)(v12 + 36), v9);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v3 + v1[11];
  uint64_t v14 = type metadata accessor for OvernightMetricsWarmupProgress();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = sub_251037640();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v3 + v1[13];
  uint64_t v17 = sub_251037400();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  sub_250FE2864(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v20 = v19;
  v18(v16 + *(int *)(v19 + 36), v17);
  uint64_t v21 = v16 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v18(v21, v17);
  v18(v21 + *(int *)(v20 + 36), v17);
  swift_bridgeObjectRelease();
  uint64_t v22 = v3 + v1[14];
  long long v25 = *(_OWORD *)(v22 + 240);
  long long v26 = *(_OWORD *)(v22 + 256);
  long long v24 = *(_OWORD *)(v22 + 208);
  sub_250F40D40(*(void *)v22, *(void *)(v22 + 8), *(void *)(v22 + 16), *(void *)(v22 + 24), *(void *)(v22 + 32), *(void *)(v22 + 40), *(void *)(v22 + 48), *(void *)(v22 + 56), *(void *)(v22 + 64), *(void *)(v22 + 72), *(void *)(v22 + 80), *(void *)(v22 + 88), *(void *)(v22 + 96), *(void *)(v22 + 104), *(void *)(v22 + 112), *(void *)(v22 + 120), *(void *)(v22 + 128), *(void *)(v22 + 136), *(void *)(v22 + 144),
    *(void *)(v22 + 152),
    *(void *)(v22 + 160),
    *(void *)(v22 + 168),
    *(void *)(v22 + 176),
    *(void *)(v22 + 184),
    *(void *)(v22 + 192),
    *(void *)(v22 + 200),
    v24,
    *((uint64_t *)&v24 + 1),
    *(void *)(v22 + 224),
    *(void *)(v22 + 232),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    *(void *)(v22 + 272),
    *(unsigned char *)(v22 + 280));
  return swift_deallocObject();
}

uint64_t sub_250FE7088@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v7 = *(void *)(type metadata accessor for OvernightMetricsChart(0) - 8);
  uint64_t v8 = (unsigned __int8 *)(v3
                         + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
  return sub_250FDD614(v8, a1, a2, a3);
}

uint64_t sub_250FE7110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_250FE7170(uint64_t a1)
{
  return a1;
}

uint64_t sub_250FE71A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_251038390();
  *a1 = result & 1;
  return result;
}

uint64_t sub_250FE71D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_250FE7248()
{
  return swift_deallocObject();
}

void sub_250FE7258(uint64_t a1, uint64_t a2)
{
  sub_250FDF974(a1, a2, *(unsigned char *)(v2 + 16));
}

uint64_t sub_250FE7260(uint64_t a1)
{
  return a1;
}

uint64_t sub_250FE729C()
{
  return sub_250FF5898(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_250FE72B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_250FE7328(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FE7370()
{
  return sub_250FE729C();
}

void *sub_250FE7388(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_251038D70();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    v11(v8, v9, v10);
    uint64_t v12 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *((unsigned char *)v4 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[9];
    uint64_t v14 = a3[10];
    uint64_t v15 = (char *)v4 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v4 + v14;
    uint64_t v18 = (char *)a2 + v14;
    uint64_t v19 = sub_251037420();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t sub_250FE74FC(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_251038D70();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = sub_251037420();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

uint64_t sub_250FE75BC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_251038D70();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[9];
  uint64_t v13 = a3[10];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  uint64_t v18 = sub_251037420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

void *sub_250FE76E0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251038D70();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v10 = a3[9];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_251037420();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_250FE7808(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_251038D70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[9];
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a1 + v12;
  uint64_t v16 = a2 + v12;
  uint64_t v17 = sub_251037420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t sub_250FE7910(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_251038D70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[9];
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a1 + v12;
  uint64_t v16 = a2 + v12;
  uint64_t v17 = sub_251037420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_250FE7A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FE7A34);
}

uint64_t sub_250FE7A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_251038D70();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_251037420();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_250FE7B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FE7B74);
}

uint64_t sub_250FE7B74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_251038D70();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_251037420();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for MultilayerCircularGaugeLayer()
{
  uint64_t result = qword_269B14528;
  if (!qword_269B14528) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250FE7CEC()
{
  uint64_t result = sub_251038D70();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_251037420();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_250FE7DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t sub_250FE7DF4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_250FE7EE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  unint64_t v12 = ((v8 + v10 + ((v7 + 24) & ~v7)) & ~v10) + *(void *)(v9 + 64);
  int v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if ((v10 | v7) > 7 || v13 != 0 || v12 > 0x18)
  {
    a1 = (uint64_t *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v10;
    uint64_t v18 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    uint64_t v20 = ((unint64_t)v18 + v7 + 16) & ~v7;
    uint64_t v21 = ((unint64_t)v19 + v7 + 16) & ~v7;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v22(v20, v21, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))((v20 + v11) & v17, (v21 + v11) & v17, v5);
  }
  return a1;
}

uint64_t sub_250FE809C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t))(v7 + 8);
  unint64_t v9 = (v6 + *(void *)(v5 + 56) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return v8(v9);
}

void *sub_250FE8160(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  uint64_t v7 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(a3 + 16);
  unint64_t v9 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v10 = *(void *)(v8 - 8) + 16;
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 16) & ~v11;
  unint64_t v13 = (v11 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v11;
  swift_bridgeObjectRetain();
  v9(v12, v13, v8);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))((*(void *)(v10 + 48) + *(unsigned __int8 *)(v14 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(void *)(v10 + 48) + *(unsigned __int8 *)(v14 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

void *sub_250FE8258(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v6[1] = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = (v10 + 16 + v7) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))((*(void *)(v9 + 40) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v9 + 40) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

void *sub_250FE835C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(void *)(v8 + 32) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

void *sub_250FE8444(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 15;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFF8;
  void *v7 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v7[1] = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v12 = (v11 + 16 + (v6 & 0xFFFFFFFFFFFFFFF8)) & ~v11;
  uint64_t v13 = (v11 + 16 + v8) & ~v11;
  (*(void (**)(unint64_t, uint64_t))(v9 + 40))(v12, v13);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 40))((*(void *)(v10 + 24) + *(unsigned __int8 *)(v14 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(void *)(v10 + 24) + *(unsigned __int8 *)(v14 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t sub_250FE8540(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  int v14 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v10 + v11 + ((v9 + 24) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if ((v12 & 0x80000000) != 0)
      {
        unint64_t v24 = ((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
        if (v5 == v13) {
          return (*(uint64_t (**)(unint64_t))(v4 + 48))(v24);
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v24 + v10 + v11) & ~v11, v8, v6);
        }
      }
      else
      {
        uint64_t v23 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v23) = -1;
        }
        return (v23 + 1);
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void sub_250FE8788(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v11 + v12 + ((v10 + 24) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v16 = a3 >= v14;
  unsigned int v17 = a3 - v14;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v15] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v20;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)&a1[v15] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x250FE8AA4);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v13 & 0x80000000) != 0)
        {
          unint64_t v24 = (((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v10 + 16) & ~v10;
          if (v7 == v14)
          {
            long long v25 = *(void (**)(unint64_t))(v6 + 56);
            v25(v24);
          }
          else
          {
            unint64_t v26 = (v24 + v11 + v12) & ~v12;
            uint64_t v27 = *(void (**)(unint64_t))(v9 + 56);
            v27(v26);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v23 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v23 = a2 - 1;
          }
          *(void *)a1 = v23;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for MultilayerCircularGauge()
{
  return swift_getGenericMetadata();
}

uint64_t sub_250FE8AE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250FE8B28(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  unsigned int v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        BOOL v16 = &v8[8 * v9];
        unsigned int v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)BOOL v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  MEMORY[0x270FA5388](TupleTypeMetadata);
  int v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    unsigned int v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return sub_251038D90();
}

uint64_t sub_250FE8CEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = *(a1 - 1);
  uint64_t v4 = *(void *)(v3 + 64);
  double v5 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (char *)swift_allocObject();
  uint64_t v9 = a1[2];
  uint64_t v37 = a1[3];
  uint64_t v8 = v37;
  *((void *)v7 + 2) = v9;
  *((void *)v7 + 3) = v8;
  uint64_t v11 = a1[4];
  uint64_t v36 = a1[5];
  uint64_t v10 = v36;
  *((void *)v7 + 4) = v11;
  *((void *)v7 + 5) = v10;
  (*(void (**)(char *, char *, void *))(v3 + 32))(&v7[v6], (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_250F3E298();
  uint64_t v35 = v12;
  uint64_t v13 = sub_251038270();
  uint64_t v14 = sub_2510384B0();
  uint64_t v34 = sub_250FEBDC0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
  uint64_t v56 = v11;
  uint64_t v57 = v34;
  v33[1] = MEMORY[0x263F18E48];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = sub_250FEBDC0(&qword_269B145B8, MEMORY[0x263F197E0]);
  uint64_t v64 = v13;
  uint64_t v65 = v14;
  uint64_t v66 = WitnessTable;
  uint64_t v67 = v16;
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  uint64_t v17 = MEMORY[0x263F8D4F8];
  uint64_t v38 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F1A418];
  sub_250FEC338(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
  v33[2] = v18;
  uint64_t v19 = sub_251038270();
  uint64_t v64 = v13;
  uint64_t v65 = v14;
  uint64_t v66 = WitnessTable;
  uint64_t v67 = v16;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v55 = MEMORY[0x263F19100];
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = sub_250FEBE08((unint64_t *)&qword_269B13080, &qword_269B13048, v17);
  uint64_t v52 = v20;
  uint64_t v53 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v64 = v19;
  uint64_t v65 = v22;
  swift_getOpaqueTypeMetadata2();
  sub_251038BF0();
  uint64_t v23 = sub_251038270();
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = v34;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v64 = v23;
  uint64_t v65 = v14;
  uint64_t v66 = v24;
  uint64_t v67 = v16;
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  sub_251038270();
  swift_getTupleTypeMetadata2();
  sub_251038D80();
  swift_getWitnessTable();
  sub_251038C10();
  sub_250FEBE6C();
  swift_getTupleTypeMetadata3();
  sub_251038D80();
  swift_getWitnessTable();
  sub_251038C30();
  swift_getWitnessTable();
  uint64_t v58 = sub_2510381F0();
  uint64_t v59 = v25;
  sub_251038200();
  uint64_t v26 = swift_getWitnessTable();
  sub_251038970();
  swift_release();
  uint64_t v42 = v64;
  uint64_t v43 = v65;
  uint64_t v44 = v66;
  __int16 v45 = v67;
  sub_251038270();
  uint64_t v48 = v26;
  uint64_t v49 = MEMORY[0x263F198F8];
  uint64_t v27 = swift_getWitnessTable();
  sub_2510389C0();
  swift_release();
  uint64_t v42 = v58;
  uint64_t v43 = v59;
  uint64_t v44 = v60;
  __int16 v45 = v61;
  uint64_t v46 = v62;
  uint64_t v47 = v63;
  uint64_t v28 = MEMORY[0x263F8EF38];
  sub_250FEC338(255, &qword_269B13A48, MEMORY[0x263F8EF38], v38);
  uint64_t v29 = sub_251038270();
  uint64_t v30 = sub_250FEBE08((unint64_t *)&qword_269B13A80, &qword_269B13A48, v28);
  uint64_t v40 = v27;
  uint64_t v41 = v30;
  uint64_t v31 = swift_getWitnessTable();
  sub_250F62918(&v42, v29, v31);
  swift_release();
  swift_release();
  uint64_t v58 = v64;
  uint64_t v59 = v65;
  uint64_t v60 = v66;
  __int16 v61 = v67;
  uint64_t v62 = v68;
  uint64_t v63 = v69;
  sub_250F62918(&v58, v29, v31);
  swift_release();
  return swift_release();
}

uint64_t sub_250FE9418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v30 = a6;
  uint64_t v31 = a5;
  uint64_t v29 = a4;
  uint64_t v32 = a3;
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  uint64_t v35 = a7;
  sub_250F3E298();
  uint64_t v28 = v8;
  sub_251038270();
  uint64_t v9 = sub_2510384B0();
  uint64_t v27 = sub_250FEBDC0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
  uint64_t v52 = a5;
  uint64_t v53 = v27;
  swift_getWitnessTable();
  uint64_t v10 = sub_250FEBDC0(&qword_269B145B8, MEMORY[0x263F197E0]);
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  uint64_t v11 = MEMORY[0x263F8D4F8];
  sub_250FEC338(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
  uint64_t v26 = v12;
  sub_251038270();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = MEMORY[0x263F19100];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = sub_250FEBE08((unint64_t *)&qword_269B13080, &qword_269B13048, v11);
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  uint64_t v13 = v29;
  uint64_t v14 = v30;
  sub_251038BF0();
  uint64_t v15 = sub_251038270();
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v43 = v27;
  uint64_t v48 = v15;
  uint64_t v49 = v9;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = v10;
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  sub_251038270();
  swift_getTupleTypeMetadata2();
  sub_251038D80();
  swift_getWitnessTable();
  sub_251038C10();
  sub_250FEBE6C();
  swift_getTupleTypeMetadata3();
  sub_251038D80();
  swift_getWitnessTable();
  uint64_t v16 = sub_251038C30();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v26 - v21;
  uint64_t v36 = v32;
  uint64_t v37 = v13;
  uint64_t v38 = v31;
  uint64_t v39 = v14;
  uint64_t v40 = v33;
  uint64_t v41 = v34;
  sub_251038D00();
  sub_251038C20();
  uint64_t v23 = swift_getWitnessTable();
  sub_250F62918(v19, v16, v23);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v17 + 8);
  v24(v19, v16);
  sub_250F62918(v22, v16, v23);
  return ((uint64_t (*)(char *, uint64_t))v24)(v22, v16);
}

uint64_t sub_250FE995C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void, void)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v69 = a6;
  long long v83 = a5;
  uint64_t v68 = a4;
  uint64_t v82 = a3;
  uint64_t v70 = a2;
  uint64_t v71 = a1;
  uint64_t v78 = a7;
  sub_250FEBF20();
  uint64_t v77 = v7;
  MEMORY[0x270FA5388](v7);
  long long v72 = (uint64_t *)((char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_250FEBE6C();
  uint64_t v76 = v9;
  uint64_t v75 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v73 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v74 = (char *)&v61 - v12;
  sub_251038BF0();
  sub_250F3E298();
  uint64_t v13 = sub_251038270();
  uint64_t v14 = sub_2510384B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = sub_250FEBDC0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
  uint64_t v105 = WitnessTable;
  uint64_t v106 = v16;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = sub_250FEBDC0(&qword_269B145B8, MEMORY[0x263F197E0]);
  uint64_t v101 = v13;
  uint64_t v102 = v14;
  uint64_t v103 = v17;
  uint64_t v104 = v18;
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  sub_250FEC338(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
  sub_251038270();
  swift_getTupleTypeMetadata2();
  uint64_t v67 = sub_251038D80();
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v86 = sub_251038C10();
  uint64_t v87 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  long long v88 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  char v85 = (char *)&v61 - v21;
  uint64_t v22 = sub_251038270();
  uint64_t v23 = v83;
  v100[7] = v83;
  v100[8] = v16;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v101 = v22;
  uint64_t v102 = v14;
  uint64_t v103 = v24;
  uint64_t v104 = v18;
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  uint64_t v25 = sub_251038270();
  uint64_t v65 = *(void (***)(char *, uint64_t))(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v61 - v26;
  uint64_t v101 = v22;
  uint64_t v102 = v14;
  uint64_t v103 = v24;
  uint64_t v104 = v18;
  v100[5] = swift_getOpaqueTypeConformance2();
  v100[6] = MEMORY[0x263F19100];
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = sub_250FEBE08((unint64_t *)&qword_269B13080, &qword_269B13048, MEMORY[0x263F8D4F8]);
  v100[3] = v28;
  v100[4] = v29;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v101 = v25;
  uint64_t v102 = v30;
  uint64_t v84 = MEMORY[0x263F1FBF0];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v80 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v32 = (char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  long long v81 = (char *)&v61 - v34;
  uint64_t v35 = v68;
  uint64_t v101 = v82;
  uint64_t v102 = v68;
  uint64_t v36 = v69;
  uint64_t v103 = (uint64_t)v23;
  uint64_t v104 = v69;
  uint64_t v62 = (uint64_t *)type metadata accessor for MultilayerCircularGauge();
  uint64_t v37 = v70;
  uint64_t v38 = v71;
  sub_250FEA418(v70, (uint64_t)v62, (uint64_t)v27);
  sub_251038920();
  v65[1](v27, v25);
  uint64_t v101 = v25;
  uint64_t v102 = v30;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v39 = v32;
  uint64_t v40 = OpaqueTypeMetadata2;
  sub_250F62918(v32, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  uint64_t v41 = *(void (***)(char *, uint64_t))(v80 + 8);
  uint64_t v64 = v80 + 8;
  uint64_t v65 = v41;
  ((void (*)(char *, uint64_t))v41)(v32, v40);
  uint64_t v89 = v82;
  uint64_t v90 = v35;
  long long v91 = v83;
  uint64_t v92 = v36;
  uint64_t v93 = v38;
  uint64_t v94 = v37;
  sub_251038520();
  uint64_t v42 = v88;
  sub_251038C00();
  uint64_t v43 = v86;
  uint64_t v82 = swift_getWitnessTable();
  uint64_t v44 = v85;
  sub_250F62918(v42, v43, v82);
  long long v83 = *(void (**)(void, void))(v87 + 8);
  v83(v42, v43);
  uint64_t v45 = v72;
  sub_250FEB638(v62, v72);
  uint64_t v71 = sub_250FEBDC0(&qword_269B14618, (void (*)(uint64_t))sub_250FEBF20);
  uint64_t v46 = v73;
  uint64_t v47 = v77;
  sub_251038920();
  sub_250FEC694((uint64_t)v45, (uint64_t (*)(void))sub_250FEBF20);
  uint64_t v48 = v75;
  uint64_t v49 = v74;
  uint64_t v50 = v76;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v46, v76);
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
  __int16 v61 = v39;
  uint64_t v52 = OpaqueTypeMetadata2;
  v51(v39, v81, OpaqueTypeMetadata2);
  uint64_t v101 = (uint64_t)v39;
  uint64_t v53 = v88;
  uint64_t v54 = v86;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v88, v44, v86);
  uint64_t v102 = (uint64_t)v53;
  uint64_t v55 = v48;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v46, v49, v50);
  uint64_t v103 = (uint64_t)v46;
  v100[0] = v52;
  v100[1] = v54;
  uint64_t v56 = v54;
  v100[2] = v50;
  uint64_t v97 = OpaqueTypeConformance2;
  uint64_t v98 = v82;
  uint64_t v95 = v47;
  uint64_t v96 = v71;
  uint64_t v99 = swift_getOpaqueTypeConformance2();
  sub_250FE8B28((uint64_t)&v101, 3uLL, (uint64_t)v100);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v55 + 8);
  v57(v49, v50);
  uint64_t v58 = (void (*)(char *, uint64_t))v83;
  v83(v85, v54);
  uint64_t v59 = v65;
  ((void (*)(char *, uint64_t))v65)(v81, v52);
  v57(v46, v50);
  v58(v88, v56);
  return ((uint64_t (*)(char *, uint64_t))v59)(v61, v52);
}

uint64_t sub_250FEA418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v48 = a3;
  uint64_t v4 = sub_2510384B0();
  uint64_t v45 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = *(void *)(a2 + 16);
  sub_250F3E298();
  uint64_t v7 = sub_251038270();
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = sub_250FEBDC0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
  uint64_t v57 = v10;
  uint64_t v58 = v11;
  uint64_t v46 = MEMORY[0x263F18E48];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = WitnessTable;
  uint64_t v34 = sub_250FEBDC0(&qword_269B145B8, MEMORY[0x263F197E0]);
  uint64_t v53 = v7;
  uint64_t v54 = v4;
  uint64_t v55 = WitnessTable;
  uint64_t v56 = v34;
  uint64_t v39 = MEMORY[0x263F1A8C0];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v42 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v33 = (char *)&v33 - v13;
  uint64_t v14 = sub_251038270();
  uint64_t v43 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v36 = (char *)&v33 - v15;
  sub_250FEC338(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
  uint64_t v16 = sub_251038270();
  uint64_t v41 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v38 = (char *)&v33 - v20;
  sub_251038A40();
  sub_2510384A0();
  uint64_t v21 = v35;
  uint64_t v22 = v34;
  sub_251038960();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v7);
  sub_2510381A0();
  sub_251038D00();
  uint64_t v53 = v7;
  uint64_t v54 = v4;
  uint64_t v55 = v21;
  uint64_t v56 = v22;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v23 = OpaqueTypeMetadata2;
  uint64_t v24 = v36;
  uint64_t v25 = v33;
  sub_251038A00();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v23);
  uint64_t v51 = OpaqueTypeConformance2;
  uint64_t v52 = MEMORY[0x263F19100];
  uint64_t v26 = swift_getWitnessTable();
  sub_2510389A0();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v14);
  uint64_t v27 = sub_250FEBE08((unint64_t *)&qword_269B13080, &qword_269B13048, MEMORY[0x263F8D4F8]);
  uint64_t v49 = v26;
  uint64_t v50 = v27;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = v38;
  sub_250F62918(v18, v16, v28);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v41 + 8);
  v30(v18, v16);
  sub_250F62918(v29, v16, v28);
  return ((uint64_t (*)(char *, uint64_t))v30)(v29, v16);
}

uint64_t sub_250FEAA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a5;
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  uint64_t v32 = a7;
  sub_251038BF0();
  sub_250F3E298();
  uint64_t v8 = sub_251038270();
  uint64_t v25 = sub_2510384B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = sub_250FEBDC0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
  uint64_t v26 = MEMORY[0x263F18E48];
  uint64_t v9 = swift_getWitnessTable();
  uint64_t v10 = sub_250FEBDC0(&qword_269B145B8, MEMORY[0x263F197E0]);
  uint64_t v42 = (uint64_t *)v8;
  uint64_t v43 = (char *)v25;
  uint64_t v44 = v9;
  uint64_t v45 = v10;
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  sub_250FEC338(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
  uint64_t v11 = sub_251038270();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v42 = v28;
  uint64_t v43 = a4;
  uint64_t v44 = v29;
  uint64_t v45 = v27;
  uint64_t v18 = type metadata accessor for MultilayerCircularGauge();
  sub_250FEAE40(v30, v18, (uint64_t)v14);
  uint64_t v42 = (uint64_t *)v8;
  uint64_t v43 = (char *)v25;
  uint64_t v44 = v9;
  uint64_t v45 = v10;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v41 = MEMORY[0x263F19100];
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = sub_250FEBE08((unint64_t *)&qword_269B13080, &qword_269B13048, MEMORY[0x263F8D4F8]);
  uint64_t v38 = v19;
  uint64_t v39 = v20;
  uint64_t v21 = swift_getWitnessTable();
  sub_250F62918(v14, v11, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v14, v11);
  uint64_t v36 = 0;
  char v37 = 1;
  uint64_t v42 = &v36;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
  uint64_t v43 = v14;
  v35[0] = MEMORY[0x263F1B6B0];
  v35[1] = v11;
  uint64_t v33 = MEMORY[0x263F1B698];
  uint64_t v34 = v21;
  sub_250FE8B28((uint64_t)&v42, 2uLL, (uint64_t)v35);
  v22(v17, v11);
  return ((uint64_t (*)(char *, uint64_t))v22)(v14, v11);
}

uint64_t sub_250FEAE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v61 = a3;
  uint64_t v4 = sub_2510384B0();
  uint64_t v42 = v4;
  uint64_t v59 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v57 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = a2;
  uint64_t v8 = sub_251038BF0();
  uint64_t v55 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v40 - v9;
  sub_250F3E298();
  uint64_t v11 = sub_251038270();
  uint64_t v54 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v47 = (char *)&v40 - v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v43 = WitnessTable;
  uint64_t v14 = sub_250FEBDC0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
  uint64_t v75 = WitnessTable;
  uint64_t v76 = v14;
  uint64_t v58 = MEMORY[0x263F18E48];
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v41 = sub_250FEBDC0(&qword_269B145B8, MEMORY[0x263F197E0]);
  uint64_t v71 = v11;
  uint64_t v72 = v4;
  uint64_t v73 = v15;
  uint64_t v74 = v41;
  uint64_t v49 = MEMORY[0x263F1A8C0];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v52 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v40 = (char *)&v40 - v16;
  uint64_t v17 = sub_251038270();
  uint64_t v53 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v45 = (char *)&v40 - v18;
  sub_250FEC338(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
  uint64_t v19 = sub_251038270();
  uint64_t v51 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v44 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v62 = *(void *)(v7 + 16);
  uint64_t v63 = v50;
  uint64_t v64 = *(void *)(v7 + 32);
  uint64_t v65 = v6;
  uint64_t v66 = v56;
  sub_251038490();
  uint64_t v23 = v10;
  sub_251038BE0();
  uint64_t v24 = v47;
  sub_251038A40();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v23, v8);
  uint64_t v25 = v57;
  sub_2510384A0();
  uint64_t v26 = v42;
  uint64_t v27 = v15;
  uint64_t v28 = v41;
  sub_251038960();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v11);
  sub_2510381A0();
  sub_2510381A0();
  sub_251038D00();
  uint64_t v71 = v11;
  uint64_t v72 = v26;
  uint64_t v73 = v27;
  uint64_t v74 = v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = OpaqueTypeMetadata2;
  uint64_t v30 = v45;
  uint64_t v31 = v40;
  sub_251038A00();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v29);
  uint64_t v69 = OpaqueTypeConformance2;
  uint64_t v70 = MEMORY[0x263F19100];
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v44;
  sub_2510389A0();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v17);
  uint64_t v34 = sub_250FEBE08((unint64_t *)&qword_269B13080, &qword_269B13048, MEMORY[0x263F8D4F8]);
  uint64_t v67 = v32;
  uint64_t v68 = v34;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = v48;
  sub_250F62918(v33, v19, v35);
  char v37 = *(void (**)(char *, uint64_t))(v51 + 8);
  v37(v33, v19);
  sub_250F62918(v36, v19, v35);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v19);
}

uint64_t sub_250FEB638@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  sub_2510381A0();
  if (v6 < v5) {
    double v5 = v6;
  }
  double v7 = v5 / 5.0;
  sub_2510381A0();
  if (v9 < v8) {
    double v8 = v9;
  }
  double v10 = (v8 - v8 / 5.0) * 0.5;
  *a2 = sub_251038D00();
  a2[1] = v11;
  sub_250FEC3CC();
  return sub_250FEB7DC(v2, a1[2], a1[3], a1[4], a1[5], (uint64_t)a2 + *(int *)(v12 + 44), v7, v10);
}

uint64_t sub_250FEB6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  double v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = v11;
  v17[1] = v12;
  v17[2] = v13;
  v17[3] = v14;
  uint64_t v15 = type metadata accessor for MultilayerCircularGauge();
  sub_250F62918(a1 + *(int *)(v15 + 60), a3, a5);
  sub_250F62918(v10, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
}

uint64_t sub_250FEB7DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v25 = a6;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v15 = type metadata accessor for MultilayerCircularGauge();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v22 - v17;
  uint64_t v23 = *a1;
  uint64_t v26 = v23;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t *, uint64_t))(v16 + 16))(v18, a1, v15);
  unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  *(void *)(v20 + 32) = a4;
  *(void *)(v20 + 40) = a5;
  *(double *)(v20 + 48) = a7;
  *(double *)(v20 + 56) = a8;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v20 + v19, v18, v15);
  sub_250FEC088();
  sub_250FEC0E0();
  sub_250FEBDC0(&qword_269B145F0, (void (*)(uint64_t))sub_250FEC088);
  sub_250FEBDC0(&qword_269B145F8, MEMORY[0x263F07508]);
  sub_250FEC218();
  swift_bridgeObjectRetain();
  return sub_251038C80();
}

uint64_t sub_250FEBA28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10 = sub_2510382F0();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for MultilayerCircularGaugeLayer();
  double v14 = *(double *)(a1 + v13[7]) * a4;
  double v15 = *(double *)(a2 + 8);
  double v16 = *(double *)(a2 + 16) - v15;
  double v17 = (*(double *)a1 - v15) / v16 * 4.71238898 + 2.35619449;
  uint64_t v18 = v13[9];
  char v19 = *(unsigned char *)(a1 + v13[8]);
  double v20 = (*(double *)(a1 + 8) - v15) / v16 * 4.71238898 + 2.35619449;
  uint64_t v21 = *(void *)(a1 + v18);
  char v22 = *(unsigned char *)(a1 + v18 + 8);
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = a1 + v13[6];
  uint64_t v25 = sub_251038D70();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v12, v24, v25);
  sub_250FEC0E0();
  sub_250FEC630((uint64_t)v12, a3 + *(int *)(v26 + 36));
  *(double *)a3 = v14;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = v17;
  *(double *)(a3 + 24) = v20;
  *(unsigned char *)(a3 + 32) = v19;
  *(void *)(a3 + 40) = v21;
  *(unsigned char *)(a3 + 48) = v22;
  *(void *)(a3 + 56) = v23;
  swift_retain();
  return sub_250FEC694((uint64_t)v12, MEMORY[0x263F190D8]);
}

uint64_t sub_250FEBBC8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 24);
  unint64_t v2 = (int *)(type metadata accessor for MultilayerCircularGauge() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[16], v1);
  (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v3 + v2[17]);
  return swift_deallocObject();
}

uint64_t sub_250FEBD04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for MultilayerCircularGauge() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return sub_250FE9418(a1, v10, v5, v6, v7, v8, a2);
}

uint64_t sub_250FEBDC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FEBE08(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250FEC338(255, a2, a3, MEMORY[0x263F1A418]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FEBE6C()
{
  if (!qword_269B145C0)
  {
    sub_250FEBF20();
    sub_250FEBDC0(&qword_269B14618, (void (*)(uint64_t))sub_250FEBF20);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B145C0);
    }
  }
}

void sub_250FEBF20()
{
  if (!qword_269B145C8)
  {
    sub_250FEBF84();
    sub_250FEC1A8();
    unint64_t v0 = sub_251038C30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B145C8);
    }
  }
}

void sub_250FEBF84()
{
  if (!qword_269B145D0)
  {
    sub_250FEC088();
    sub_251037420();
    sub_250FEC0E0();
    sub_250FEBDC0(&qword_269B145F0, (void (*)(uint64_t))sub_250FEC088);
    sub_250FEBDC0(&qword_269B145F8, MEMORY[0x263F07508]);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B145D0);
    }
  }
}

void sub_250FEC088()
{
  if (!qword_269B145D8)
  {
    type metadata accessor for MultilayerCircularGaugeLayer();
    unint64_t v0 = sub_251039270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B145D8);
    }
  }
}

void sub_250FEC0E0()
{
  if (!qword_269B145E0)
  {
    sub_250FEC148();
    sub_2510382F0();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B145E0);
    }
  }
}

void sub_250FEC148()
{
  if (!qword_269B145E8)
  {
    sub_250F9DC64();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B145E8);
    }
  }
}

unint64_t sub_250FEC1A8()
{
  unint64_t result = qword_269B14600;
  if (!qword_269B14600)
  {
    sub_250FEBF84();
    sub_250FEC218();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14600);
  }
  return result;
}

unint64_t sub_250FEC218()
{
  unint64_t result = qword_269B14608;
  if (!qword_269B14608)
  {
    sub_250FEC0E0();
    sub_250FEC290();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14608);
  }
  return result;
}

unint64_t sub_250FEC290()
{
  unint64_t result = qword_269B14610;
  if (!qword_269B14610)
  {
    sub_250FEC148();
    sub_250FB0E84();
    sub_250FEBDC0(&qword_269B13E50, (void (*)(uint64_t))sub_250F9DC64);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14610);
  }
  return result;
}

void sub_250FEC338(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_250FEC384()
{
  return sub_250FEC3B4((uint64_t (*)(void, void, void, void, void, void))sub_250FE995C);
}

uint64_t sub_250FEC39C()
{
  return sub_250FEC3B4((uint64_t (*)(void, void, void, void, void, void))sub_250FEAA64);
}

uint64_t sub_250FEC3B4(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

void sub_250FEC3CC()
{
  if (!qword_269B14620)
  {
    sub_250FEBF84();
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14620);
    }
  }
}

uint64_t sub_250FEC434()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 24);
  unint64_t v2 = (int *)(type metadata accessor for MultilayerCircularGauge() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[16], v1);
  (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v3 + v2[17]);
  return swift_deallocObject();
}

uint64_t sub_250FEC570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for MultilayerCircularGauge() - 8);
  double v6 = *(double *)(v2 + 48);
  double v7 = *(double *)(v2 + 56);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_250FEBA28(a1, v8, a2, v6, v7);
}

uint64_t sub_250FEC630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510382F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250FEC694(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FEC6F4()
{
  return sub_250FEB6D4(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

ValueMetadata *type metadata accessor for MultilayerCircularGaugeMetrics()
{
  return &type metadata for MultilayerCircularGaugeMetrics;
}

uint64_t sub_250FEC714()
{
  sub_250F3E298();
  sub_251038270();
  sub_2510384B0();
  sub_250FEBDC0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
  swift_getWitnessTable();
  sub_250FEBDC0(&qword_269B145B8, MEMORY[0x263F197E0]);
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  uint64_t v0 = MEMORY[0x263F8D4F8];
  uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F1A418];
  sub_250FEC338(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
  sub_251038270();
  swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  sub_250FEBE08((unint64_t *)&qword_269B13080, &qword_269B13048, v0);
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  sub_251038BF0();
  sub_251038270();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  sub_251038270();
  swift_getTupleTypeMetadata2();
  sub_251038D80();
  swift_getWitnessTable();
  sub_251038C10();
  sub_250FEBE6C();
  swift_getTupleTypeMetadata3();
  sub_251038D80();
  swift_getWitnessTable();
  sub_251038C30();
  swift_getWitnessTable();
  sub_251038200();
  sub_251038270();
  uint64_t v1 = MEMORY[0x263F8EF38];
  sub_250FEC338(255, &qword_269B13A48, MEMORY[0x263F8EF38], v3);
  sub_251038270();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_250FEBE08((unint64_t *)&qword_269B13A80, &qword_269B13A48, v1);
  return swift_getWitnessTable();
}

uint64_t sub_250FECB88(void (*a1)(char *), uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v6 = sub_251038ED0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v52 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v59 = (char *)v50 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v55 = (char *)v50 - v12;
  uint64_t v54 = sub_251037400();
  uint64_t v60 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v67 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF48E8();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v53 = (uint64_t)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v51 = (char *)v50 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v58 = (char *)v50 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v68 = (uint64_t)v50 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v50 - v23;
  double v26 = MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)v50 - v27;
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v66((char *)v50 - v27, v2, v6, v26);
  uint64_t v65 = (void (**)(char *, uint64_t))v7;
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v29 = v7 + 56;
  v30((uint64_t)v28, 0, 1, v6);
  uint64_t v61 = v30;
  v30((uint64_t)v24, 1, 1, v6);
  uint64_t v31 = sub_250FF2CF4((uint64_t)v28, (uint64_t)v24);
  sub_250FF4C44((uint64_t)v24, (uint64_t (*)(void))sub_250FF48E8);
  sub_250FF4C44((uint64_t)v28, (uint64_t (*)(void))sub_250FF48E8);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v31)
  {
    uint64_t v70 = MEMORY[0x263F8EE78];
    sub_250FF1D34(0, v31 & ~(v31 >> 63), 0);
    uint64_t v33 = v68;
    ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v68, v5, v6);
    uint64_t result = v61(v33, 0, 1, v6);
    if ((v31 & 0x8000000000000000) == 0)
    {
      uint64_t v34 = v65;
      uint64_t v64 = (void (**)(char *, uint64_t, uint64_t))(v65 + 4);
      ++v65;
      uint64_t v66 = (void (*)(char *, uint64_t, uint64_t, double))(v34 + 6);
      uint64_t v35 = v59;
      v50[2] = v29;
      v50[3] = v60 + 32;
      uint64_t v36 = (uint64_t)v58;
      v50[1] = v5;
      while (v31)
      {
        uint64_t v39 = v31;
        sub_250FF4A90(v33, v36, (uint64_t (*)(void))sub_250FF48E8);
        uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v66;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v66)(v36, 1, v6);
        if (result == 1) {
          goto LABEL_21;
        }
        uint64_t v41 = *v64;
        uint64_t v42 = v55;
        (*v64)(v55, v36, v6);
        v41(v35, (uint64_t)v42, v6);
        v56(v35);
        if (v4)
        {
          (*v65)(v35, v6);
          sub_250FF4C44(v68, (uint64_t (*)(void))sub_250FF48E8);
          return swift_release();
        }
        uint64_t v62 = *v65;
        v62(v35, v6);
        uint64_t v43 = v70;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v63 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_250FF1D34(0, *(void *)(v43 + 16) + 1, 1);
          uint64_t v43 = v70;
        }
        unint64_t v46 = *(void *)(v43 + 16);
        unint64_t v45 = *(void *)(v43 + 24);
        if (v46 >= v45 >> 1)
        {
          sub_250FF1D34(v45 > 1, v46 + 1, 1);
          uint64_t v43 = v70;
        }
        *(void *)(v43 + 16) = v46 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v43+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v46, v67, v54);
        uint64_t v70 = v43;
        uint64_t v47 = v53;
        sub_250FF4A90(v68, v53, (uint64_t (*)(void))sub_250FF48E8);
        uint64_t result = v40(v47, 1, v6);
        if (result == 1) {
          goto LABEL_22;
        }
        uint64_t v48 = v52;
        v41(v52, v47, v6);
        sub_250F326B0();
        sub_250FF4B2C(&qword_26B210BA8, MEMORY[0x263F090E8]);
        char v49 = sub_2510390F0();
        uint64_t v4 = v63;
        if (v49)
        {
          v62(v48, v6);
          uint64_t v38 = 1;
          uint64_t v33 = v68;
          uint64_t v37 = (uint64_t)v51;
        }
        else
        {
          uint64_t v69 = 1;
          sub_250FF4B2C(&qword_26B210BB0, MEMORY[0x263F090E8]);
          uint64_t v37 = (uint64_t)v51;
          sub_2510394C0();
          v62(v48, v6);
          uint64_t v38 = 0;
          uint64_t v33 = v68;
        }
        v61(v37, v38, 1, v6);
        sub_250FF4C44(v33, (uint64_t (*)(void))sub_250FF48E8);
        uint64_t result = sub_250FF4990(v37, v33, (uint64_t (*)(void))sub_250FF48E8);
        --v31;
        uint64_t v36 = (uint64_t)v58;
        uint64_t v35 = v59;
        if (v39 == 1)
        {
          sub_250FF4C44(v33, (uint64_t (*)(void))sub_250FF48E8);
          return v70;
        }
      }
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  return result;
}

uint64_t sub_250FED32C(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v21 = sub_251037400();
  uint64_t v8 = *(void *)(v21 - 8);
  uint64_t result = MEMORY[0x270FA5388](v21);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a3;
  uint64_t v12 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (!v12) {
    return v13;
  }
  uint64_t v26 = MEMORY[0x263F8EE78];
  uint64_t result = sub_250FF1D34(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = v26;
    uint64_t v14 = v24;
    if (a4 <= v24) {
      uint64_t v15 = v24;
    }
    else {
      uint64_t v15 = a4;
    }
    uint64_t v19 = v15;
    uint64_t v20 = v8 + 32;
    while (a4 != v14)
    {
      uint64_t v25 = v14;
      v22(&v25);
      if (v5)
      {
        swift_release();
        return v13;
      }
      uint64_t v5 = 0;
      uint64_t v26 = v13;
      unint64_t v17 = *(void *)(v13 + 16);
      unint64_t v16 = *(void *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_250FF1D34(v16 > 1, v17 + 1, 1);
        uint64_t v13 = v26;
      }
      *(void *)(v13 + 16) = v17 + 1;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v17, v11, v21);
      if (a4 < v24) {
        goto LABEL_19;
      }
      if (v19 == v14) {
        goto LABEL_20;
      }
      if (a4 == ++v14) {
        return v13;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_250FED528(void (*a1)(long long *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    sub_250FF1DC4(0, v5, 0);
    uint64_t v6 = v17;
    for (uint64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v15 = *i;
      a1(&v16, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v10 = v16;
      uint64_t v17 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        long long v14 = v16;
        sub_250FF1DC4(v11 > 1, v12 + 1, 1);
        long long v10 = v14;
        uint64_t v6 = v17;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(_OWORD *)(v6 + 16 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_250FED644(void (*a1)(uint64_t *__return_ptr, long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_250FF1DE4(0, v5, 0);
    uint64_t v6 = v16;
    for (uint64_t i = (long long *)(a3 + 32); ; ++i)
    {
      long long v14 = *i;
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v15;
      uint64_t v16 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_250FF1DE4(v11 > 1, v12 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(void *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_250FED758(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    sub_250FF1EF4(0, v5, 0);
    uint64_t v6 = v19;
    uint64_t v8 = *(void *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    while (1)
    {
      a1(v18, v9);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v11 = v18[0];
      uint64_t v12 = v18[1];
      uint64_t v19 = v6;
      unint64_t v14 = *(void *)(v6 + 16);
      unint64_t v13 = *(void *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_250FF1EF4(v13 > 1, v14 + 1, 1);
        uint64_t v6 = v19;
      }
      *(void *)(v6 + 16) = v14 + 1;
      uint64_t v15 = v6 + 16 * v14;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v12;
      v9 += v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_250FED8C4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for SleepingSampleViewModel(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    sub_250FF1F14(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = *(void *)(sub_251037740() - 8);
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v18 = *(void *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = *(void *)(v11 + 16);
      unint64_t v14 = *(void *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_250FF1F14(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      *(void *)(v11 + 16) = v15 + 1;
      sub_250FF4990((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, type metadata accessor for SleepingSampleViewModel);
      v13 += v18;
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_250FEDAC0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = sub_251037940();
  uint64_t v6 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    sub_250FF1D7C(0, v9, 0);
    uint64_t v10 = v21;
    uint64_t v11 = *(void *)(sub_2510377E0() - 8);
    uint64_t v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    v16[1] = v6 + 32;
    while (1)
    {
      v19(v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_250FF1D7C(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v21;
      }
      *(void *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v18);
      v12 += v17;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

unint64_t sub_250FEDCCC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_250FEDD24(a1, a2, a3, (uint64_t (*)(void, double))sub_250FACB74);
}

unint64_t sub_250FEDCF8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_250FEDD24(a1, a2, a3, (uint64_t (*)(void, double))type metadata accessor for OvernightMetricsChartPoint);
}

unint64_t sub_250FEDD24(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(void, double))
{
  sub_250FF4C10(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v34 = (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v32 = (uint64_t)&v28 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  if (!v18) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v19 = *(void *)(a4(0, v16) - 8);
  uint64_t v20 = a3;
  uint64_t v21 = a3 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  uint64_t v29 = v13;
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v33 = *(void *)(v19 + 72);
  uint64_t v28 = v20;
  swift_bridgeObjectRetain();
  unint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t v30 = v12;
  uint64_t v31 = a2;
  do
  {
    a1(v21);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v23;
    }
    if ((*v22)(v11, 1, v12) == 1)
    {
      sub_250FF4C44((uint64_t)v11, (uint64_t (*)(void))sub_250FF4C10);
    }
    else
    {
      uint64_t v24 = v32;
      sub_250FF4990((uint64_t)v11, v32, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_250FF4990(v24, v34, type metadata accessor for IndividualOvernightMetricChartPoint);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v23 = sub_250FA17E4(0, *(void *)(v23 + 16) + 1, 1, v23);
      }
      unint64_t v26 = *(void *)(v23 + 16);
      unint64_t v25 = *(void *)(v23 + 24);
      if (v26 >= v25 >> 1) {
        unint64_t v23 = sub_250FA17E4(v25 > 1, v26 + 1, 1, v23);
      }
      *(void *)(v23 + 16) = v26 + 1;
      sub_250FF4990(v34, v23+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v26, type metadata accessor for IndividualOvernightMetricChartPoint);
      uint64_t v12 = v30;
    }
    v21 += v33;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  return v23;
}

unint64_t sub_250FEE068(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  sub_250FF4AF8(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BaselineRelativeChartPoint();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v30 = (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v28 = (uint64_t)&v24 - v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v16 = *(void *)(sub_251037940() - 8);
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v25 = v11;
  uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v29 = *(void *)(v16 + 72);
  uint64_t v24 = a3;
  swift_bridgeObjectRetain();
  unint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v26 = v10;
  uint64_t v27 = a2;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v9, 1, v10) == 1)
    {
      sub_250FF4C44((uint64_t)v9, (uint64_t (*)(void))sub_250FF4AF8);
    }
    else
    {
      uint64_t v20 = v28;
      sub_250FF4990((uint64_t)v9, v28, (uint64_t (*)(void))type metadata accessor for BaselineRelativeChartPoint);
      sub_250FF4990(v20, v30, (uint64_t (*)(void))type metadata accessor for BaselineRelativeChartPoint);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = sub_250FA1BD8(0, *(void *)(v19 + 16) + 1, 1, v19);
      }
      unint64_t v22 = *(void *)(v19 + 16);
      unint64_t v21 = *(void *)(v19 + 24);
      if (v22 >= v21 >> 1) {
        unint64_t v19 = sub_250FA1BD8(v21 > 1, v22 + 1, 1, v19);
      }
      *(void *)(v19 + 16) = v22 + 1;
      sub_250FF4990(v30, v19+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, (uint64_t (*)(void))type metadata accessor for BaselineRelativeChartPoint);
      uint64_t v10 = v26;
    }
    v17 += v29;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t SleepingSampleViewModel.dataType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t SleepingSampleViewModel.dataType.setter(uint64_t a1)
{
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*SleepingSampleViewModel.dataType.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.dayRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250FEFEB0(type metadata accessor for SleepingSampleViewModel, MEMORY[0x263F42C20], a1);
}

uint64_t type metadata accessor for SleepingSampleViewModel(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_26B210810);
}

uint64_t SleepingSampleViewModel.dayRange.setter(uint64_t a1)
{
  return sub_250FEFF6C(a1, type metadata accessor for SleepingSampleViewModel, MEMORY[0x263F42C20]);
}

uint64_t (*SleepingSampleViewModel.dayRange.modify())(void)
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.chronologicalBaselineComparisons.getter()
{
  type metadata accessor for SleepingSampleViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t SleepingSampleViewModel.chronologicalBaselineComparisons.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepingSampleViewModel.chronologicalBaselineComparisons.modify())(void)
{
  return nullsub_1;
}

id SleepingSampleViewModel.preferredAggregateValueUnit.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28));
  return v1;
}

void SleepingSampleViewModel.preferredAggregateValueUnit.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*SleepingSampleViewModel.preferredAggregateValueUnit.modify())(void)
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.featureStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 32);
  uint64_t v4 = sub_251037A50();
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t SleepingSampleViewModel.featureStatus.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 32);
  uint64_t v4 = sub_251037A50();
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*SleepingSampleViewModel.featureStatus.modify())(void)
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.init(dataType:dayRange:chronologicalBaselineComparisons:preferredAggregateValueUnit:featureStatus:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  uint64_t v13 = (int *)type metadata accessor for SleepingSampleViewModel(0);
  uint64_t v14 = a6 + v13[5];
  uint64_t v15 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a2, v15);
  *(void *)(a6 + v13[6]) = a3;
  *(void *)(a6 + v13[7]) = a4;
  uint64_t v16 = a6 + v13[8];
  uint64_t v17 = sub_251037A50();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32);
  return v18(v16, a5, v17);
}

uint64_t SleepingSampleViewModel.filtered(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SleepingSampleViewModel(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_2510376B0();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v2 + *(int *)(v6 + 20), v9, v11);
  sub_250FF4B2C(&qword_269B13B88, MEMORY[0x263F42C20]);
  char v14 = sub_2510390F0();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
  if (v14) {
    return sub_250FF4A90(v3, a2, type metadata accessor for SleepingSampleViewModel);
  }
  uint64_t v16 = sub_250FF4A90(v3, (uint64_t)v8, type metadata accessor for SleepingSampleViewModel);
  MEMORY[0x270FA5388](v16);
  *(void *)&v19[-16] = a1;
  uint64_t v17 = &v8[*(int *)(v6 + 24)];
  uint64_t result = sub_250F8C488((uint64_t (*)(unint64_t))sub_250FEEE50, (uint64_t)&v19[-32]);
  uint64_t v18 = *(void *)(*(void *)v17 + 16);
  if (v18 < result)
  {
    __break(1u);
  }
  else
  {
    sub_250F93CC0(result, v18);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 24))(&v8[*(int *)(v6 + 20)], a1, v9);
    return sub_250FF4990((uint64_t)v8, a2, type metadata accessor for SleepingSampleViewModel);
  }
  return result;
}

uint64_t sub_250FEEBCC()
{
  uint64_t v0 = sub_251038ED0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v17 - v5;
  sub_250F326B0();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v17 - v11;
  sub_251037660();
  sub_251037880();
  sub_250FF4B2C(&qword_26B210BA0, MEMORY[0x263F090E8]);
  char v13 = sub_2510390B0();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  sub_250FF4A90((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))sub_250F326B0);
  if (v13) {
    char v14 = sub_2510390C0() ^ 1;
  }
  else {
    char v14 = 1;
  }
  sub_250FF4C44((uint64_t)v9, (uint64_t (*)(void))sub_250F326B0);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v1 + 8);
  v15(v3, v0);
  v15(v6, v0);
  sub_250FF4C44((uint64_t)v12, (uint64_t (*)(void))sub_250F326B0);
  return v14 & 1;
}

uint64_t sub_250FEEE50()
{
  return sub_250FEEBCC() & 1;
}

uint64_t SleepingSampleViewModel.baselineComparisonForToday.getter@<X0>(uint64_t a1@<X8>)
{
  sub_250F326B0();
  uint64_t v26 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251038ED0();
  uint64_t v27 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v28 = sub_251037940();
  uint64_t v12 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  char v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 24));
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v25 = a1;
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v15+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * (v16 - 1), v28);
    sub_251037880();
    sub_251037660();
    uint64_t v17 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v8, &v5[*(int *)(v26 + 36)], v6);
    sub_250FF4C44((uint64_t)v5, (uint64_t (*)(void))sub_250F326B0);
    sub_250FF4B2C(&qword_26B210BB0, MEMORY[0x263F090E8]);
    sub_2510394D0();
    uint64_t v18 = v29;
    unint64_t v19 = *(void (**)(char *, uint64_t))(v17 + 8);
    v19(v8, v6);
    v19(v11, v6);
    if (v18)
    {
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v28);
      uint64_t v21 = 1;
      a1 = v25;
    }
    else
    {
      a1 = v25;
      uint64_t v20 = v28;
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v25, v14, v28);
      uint64_t v21 = 0;
    }
    uint64_t v22 = v20;
  }
  else
  {
    uint64_t v21 = 1;
    uint64_t v22 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, v21, 1, v22);
}

uint64_t SleepingSampleViewModel.primaryTintColor.getter()
{
  sub_250FF3304(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_251037770();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_251037940();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_250FF4C44((uint64_t)v9, (uint64_t (*)(void))sub_250FF3338);
    return sub_251038A90();
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  sub_251037930();
  char v14 = (void *)sub_251037760();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  if (!v14
    || (sub_251037920(),
        uint64_t v15 = sub_2510376D0(),
        int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v2, 1, v15),
        sub_250FF4C44((uint64_t)v2, (uint64_t (*)(void))sub_250FF3304),
        v16 == 1))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return sub_251038A90();
  }
  if (sub_251037870())
  {
    if (qword_26B210180 != -1) {
      swift_once();
    }
    unint64_t v19 = &qword_26B210330;
  }
  else
  {
    if (qword_26B210178 != -1) {
      swift_once();
    }
    unint64_t v19 = &qword_26B210328;
  }
  uint64_t v17 = MEMORY[0x2533907A0]((id)*v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v17;
}

uint64_t SleepingSampleViewModel.backgroundColor.getter()
{
  uint64_t v0 = sub_251037C50();
  uint64_t v25 = *(void *)(v0 - 8);
  uint64_t v26 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF3304(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251037770();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_251037940();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_250FF4C44((uint64_t)v12, (uint64_t (*)(void))sub_250FF3338);
    return sub_251038A90();
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  sub_251037930();
  uint64_t v17 = (void *)sub_251037760();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

  if (!v17
    || (sub_251037920(),
        uint64_t v18 = sub_2510376D0(),
        int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v5, 1, v18),
        sub_250FF4C44((uint64_t)v5, (uint64_t (*)(void))sub_250FF3304),
        v19 == 1))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return sub_251038A90();
  }
  if (sub_251037870())
  {
    if (qword_269B12BC8 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_269B1AD58;
  }
  else
  {
    if (qword_269B12BC0 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_269B1AD40;
  }
  uint64_t v23 = v26;
  uint64_t v24 = __swift_project_value_buffer(v26, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v2, v24, v23);
  uint64_t v20 = sub_251038B20();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return v20;
}

uint64_t SleepingSampleViewModel.availability.getter@<X0>(uint64_t a1@<X8>)
{
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v4);
  uint64_t v5 = sub_251037940();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_250FF4C44((uint64_t)v4, (uint64_t (*)(void))sub_250FF3338);
  }
  else
  {
    char v7 = sub_251037910();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7)
    {
      uint64_t v8 = *MEMORY[0x263F42F30];
      uint64_t v9 = sub_251037A30();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(a1, v8, v9);
    }
  }
  type metadata accessor for SleepingSampleViewModel(0);
  return sub_251037A40();
}

BOOL SleepingSampleViewModel.hasConfigurationIssue.getter()
{
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_251037A30();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - v8;
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v2);
  uint64_t v10 = sub_251037940();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) == 1)
  {
    sub_250FF4C44((uint64_t)v2, (uint64_t (*)(void))sub_250FF3338);
LABEL_5:
    type metadata accessor for SleepingSampleViewModel(0);
    sub_251037A40();
    goto LABEL_6;
  }
  char v12 = sub_251037910();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  if ((v12 & 1) == 0) {
    goto LABEL_5;
  }
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F42F30], v3);
LABEL_6:
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v9, v3) == *MEMORY[0x263F42F20];
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return v13;
}

uint64_t SleepingSampleViewModel.Summary.Variant.hash(into:)()
{
  return sub_251039860();
}

BOOL static SleepingSampleViewModel.Summary.Variant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleViewModel.Summary.Variant.hashValue.getter()
{
  return sub_251039890();
}

void SleepingSampleViewModel.Summary.variant.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SleepingSampleViewModel.Summary.variant.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.variant.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250FEFEB0(type metadata accessor for SleepingSampleViewModel.Summary, MEMORY[0x263F06828], a1);
}

uint64_t sub_250FEFEB0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  return v8(a3, v6, v7);
}

uint64_t SleepingSampleViewModel.Summary.value.setter(uint64_t a1)
{
  return sub_250FEFF6C(a1, type metadata accessor for SleepingSampleViewModel.Summary, MEMORY[0x263F06828]);
}

uint64_t sub_250FEFF6C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a2(0) + 20);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40);
  return v8(v6, a1, v7);
}

uint64_t (*SleepingSampleViewModel.Summary.value.modify())(void)
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.unit.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleViewModel.Summary.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.unit.modify())(void)
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.description.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleViewModel.Summary.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.description.modify())(void)
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.shortenedDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleViewModel.Summary.shortenedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.shortenedDescription.modify())(void)
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.summary.getter@<X0>(unsigned char *a1@<X8>)
{
  sub_250FF338C(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2510371B0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v45 = (char *)&v41 - v9;
  uint64_t v10 = sub_251037210();
  MEMORY[0x270FA5388](v10 - 8);
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v11 - 8);
  BOOL v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v13);
  uint64_t v14 = sub_251037940();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_250FF4C44((uint64_t)v13, (uint64_t (*)(void))sub_250FF3338);
  }
  else
  {
    uint64_t v16 = sub_251037900();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    if (v16 > 0)
    {
      uint64_t v47 = v16;
      sub_250F8F884();
      sub_2510394F0();
      sub_251037200();
      uint64_t v17 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
      uint64_t result = sub_2510371C0();
      *a1 = 1;
      int v19 = &a1[v17[6]];
      *int v19 = 0;
      v19[1] = 0;
      uint64_t v20 = &a1[v17[7]];
      *uint64_t v20 = 0;
      v20[1] = 0;
      uint64_t v21 = v17[8];
LABEL_7:
      uint64_t v25 = &a1[v21];
      *uint64_t v25 = 0;
      v25[1] = 0;
      return result;
    }
  }
  SleepingSampleViewModel.formattedCurrentAggregateValue.getter((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_250FF4C44((uint64_t)v4, (uint64_t (*)(void))sub_250FF338C);
    uint64_t v22 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
    uint64_t result = SleepingSampleViewModel.noDataString.getter();
    *a1 = 0;
    uint64_t v23 = &a1[v22[6]];
    void *v23 = 0;
    v23[1] = 0;
    uint64_t v24 = &a1[v22[7]];
    *uint64_t v24 = 0;
    v24[1] = 0;
    uint64_t v21 = v22[8];
    goto LABEL_7;
  }
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v27 = v45;
  v26(v45, v4, v5);
  uint64_t v28 = v46;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v46, v27, v5);
  uint64_t v29 = SleepingSampleViewModel.localizedAggregateValueUnitString.getter();
  uint64_t v43 = v30;
  uint64_t v44 = v29;
  unsigned __int8 v49 = 0;
  uint64_t v42 = sub_250FF0DFC(&v49);
  uint64_t v32 = v31;
  unsigned __int8 v48 = 1;
  uint64_t v33 = sub_250FF0DFC(&v48);
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v5);
  *a1 = 2;
  uint64_t v36 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
  uint64_t result = ((uint64_t (*)(unsigned char *, char *, uint64_t))v26)(&a1[v36[5]], v28, v5);
  uint64_t v37 = (uint64_t *)&a1[v36[6]];
  uint64_t v38 = v43;
  *uint64_t v37 = v44;
  v37[1] = v38;
  uint64_t v39 = (uint64_t *)&a1[v36[7]];
  *uint64_t v39 = v42;
  v39[1] = v32;
  uint64_t v40 = (uint64_t *)&a1[v36[8]];
  uint64_t *v40 = v33;
  v40[1] = v35;
  return result;
}

uint64_t SleepingSampleViewModel.warmupDaysRemaining.getter()
{
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v2);
  uint64_t v3 = sub_251037940();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250FF4C44((uint64_t)v2, (uint64_t (*)(void))sub_250FF3338);
    return 0;
  }
  else
  {
    uint64_t v5 = sub_251037900();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5;
}

uint64_t SleepingSampleViewModel.formattedCurrentAggregateValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_250FF338C(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_251037770();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v11 - 8);
  BOOL v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v13);
  uint64_t v14 = sub_251037940();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_250FF4C44((uint64_t)v13, (uint64_t (*)(void))sub_250FF3338);
LABEL_6:
    uint64_t v19 = sub_2510371B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 1, 1, v19);
LABEL_7:
    sub_250FF4C44((uint64_t)v6, (uint64_t (*)(void))sub_250FF338C);
    sub_2510371B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a1, 1, 1, v19);
  }
  sub_251037930();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  uint64_t v16 = (void *)sub_251037760();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!v16) {
    goto LABEL_6;
  }
  uint64_t v17 = *(void **)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28));
  id v18 = v16;
  HKQuantity.formattedAttributedValue(for:unit:)(v2, v17, (uint64_t)v6);

  uint64_t v19 = sub_2510371B0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
  v21(v6, 0, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) == 1) {
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a1, v6, v19);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v21)(a1, 0, 1, v19);
}

uint64_t SleepingSampleViewModel.localizedAggregateValueUnitString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_251037770();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v8);
  uint64_t v9 = sub_251037940();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_250FF4C44((uint64_t)v8, (uint64_t (*)(void))sub_250FF3338);
  }
  else
  {
    sub_251037930();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v11 = (void *)sub_251037760();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v11)
    {

      uint64_t v12 = type metadata accessor for SleepingSampleViewModel(0);
      return SleepingSampleDataType.localizedUnitString(for:)(*(HKUnit *)(v1 + *(int *)(v12 + 28))).value._countAndFlagsBits;
    }
  }
  return 0;
}

uint64_t sub_250FF0DFC(unsigned __int8 *a1)
{
  uint64_t v3 = sub_2510378C0();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_250FF3304(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v33 = sub_251037770();
  uint64_t v9 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_251037940();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v18 = &v28[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v19 = *a1;
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v14);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_250FF4C44((uint64_t)v14, (uint64_t (*)(void))sub_250FF3338);
  }
  else
  {
    int v29 = v19;
    uint64_t v30 = v1;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v18, v14, v15);
    sub_251037930();
    uint64_t v20 = (void *)sub_251037760();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v33);
    uint64_t v21 = v16;
    if (v20)
    {
      sub_251037920();
      uint64_t v22 = sub_2510376D0();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v23 + 48))(v8, 1, v22) != 1)
      {
        uint64_t v26 = (void *)sub_2510376C0();
        (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v8, v22);
        sub_2510378D0();
        uint64_t v27 = *(void *)(v30 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28));
        unsigned __int8 v34 = v29;
        uint64_t v24 = HKQuantity.formatted(for:classification:middle:unit:variant:)(v30, (uint64_t)v5, v26, v27, &v34);

        (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v5, v32);
        (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v18, v15);
        return v24;
      }

      sub_250FF4C44((uint64_t)v8, (uint64_t (*)(void))sub_250FF3304);
    }
    (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v18, v15);
  }
  return 0;
}

uint64_t SleepingSampleViewModel.noDataString.getter()
{
  uint64_t v0 = sub_251037210();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  sub_251039100();
  type metadata accessor for HealthBalanceUI();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v4 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  sub_2510391D0();
  sub_251037200();
  return sub_2510371C0();
}

unint64_t SleepingSampleViewModel.chartPoints.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 24));
  uint64_t v5 = v0;
  swift_bridgeObjectRetain();
  unint64_t v2 = sub_250FEE068((void (*)(uint64_t))sub_250FF33C0, (uint64_t)&v4, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_250FF1460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2510374F0();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251037400();
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_251038ED0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v37 - v15;
  sub_250F326B0();
  MEMORY[0x270FA5388](v17);
  int v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = sub_251037850();
  int v41 = v24;
  uint64_t v48 = a1;
  if (v24)
  {
    if ((sub_251037860() & 1) == 0)
    {
LABEL_13:
      uint64_t v32 = type metadata accessor for BaselineRelativeChartPoint();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a2, 1, 1, v32);
    }
    uint64_t v47 = a2;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = v23;
    uint64_t v47 = a2;
  }
  type metadata accessor for SleepingSampleViewModel(0);
  sub_251037660();
  sub_251037880();
  sub_250FF4B2C(&qword_26B210BA0, MEMORY[0x263F090E8]);
  char v25 = sub_2510390B0();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v16, v8);
  sub_250FF4A90((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))sub_250F326B0);
  if (v25) {
    char v26 = sub_2510390C0();
  }
  else {
    char v26 = 0;
  }
  sub_250FF4C44((uint64_t)v19, (uint64_t (*)(void))sub_250F326B0);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v13, v8);
  v27(v16, v8);
  sub_250FF4C44((uint64_t)v22, (uint64_t (*)(void))sub_250F326B0);
  a2 = v47;
  if ((v26 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v28 = v39;
  sub_251037880();
  int v29 = v40;
  sub_251037680();
  uint64_t v30 = v44;
  sub_251038EC0();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v43);
  v27(v28, v8);
  if (sub_251037870())
  {
    if (qword_26B210180 != -1) {
      swift_once();
    }
    uint64_t v31 = &qword_26B210330;
  }
  else
  {
    if (qword_26B210178 != -1) {
      swift_once();
    }
    uint64_t v31 = &qword_26B210328;
  }
  uint64_t v34 = MEMORY[0x2533907A0]((id)*v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(a2, v30, v46);
  uint64_t v35 = type metadata accessor for BaselineRelativeChartPoint();
  uint64_t v36 = a2 + *(int *)(v35 + 20);
  *(void *)uint64_t v36 = v38;
  *(unsigned char *)(v36 + 8) = v41 & 1;
  *(void *)(a2 + *(int *)(v35 + 24)) = v34;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(a2, 0, 1, v35);
}

uint64_t SleepingSampleViewModel.emphasizedChartPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251037940();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF3338(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v14 - v10;
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)&v14 - v10);
  sub_250FF4A90((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))sub_250FF3338);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    uint64_t v12 = type metadata accessor for BaselineRelativeChartPoint();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_250FF1460((uint64_t)v5, a1);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_250FF4C44((uint64_t)v11, (uint64_t (*)(void))sub_250FF3338);
}

uint64_t SleepingSampleViewModel.keyDatesForTimeAxis.getter()
{
  sub_250F326B0();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = v0 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 20);
  sub_251037660();
  uint64_t v8 = v4;
  uint64_t v5 = sub_250FECB88((void (*)(char *))sub_250F94030, (uint64_t)v7);
  sub_250FF4C44((uint64_t)v3, (uint64_t (*)(void))sub_250F326B0);
  return v5;
}

uint64_t sub_250FF1CCC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF1F5C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250FF1CEC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2AA8(a1, a2, a3, (void *)*v3, sub_250FF4B74, MEMORY[0x263F42CD0]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1D34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2AA8(a1, a2, a3, (void *)*v3, sub_250FF49F8, MEMORY[0x263F07490]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1D7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2AA8(a1, a2, a3, (void *)*v3, sub_250FF48B4, MEMORY[0x263F42E58]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1DC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2100(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250FF1DE4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF228C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1E04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2AA8(a1, a2, a3, (void *)*v3, sub_250FF4BDC, MEMORY[0x263F42BC0]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1E4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2440(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250FF1E6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2AA8(a1, a2, a3, (void *)*v3, sub_250FF4BA8, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1EB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF25B8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1ED4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF276C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250FF1EF4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF28D8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250FF1F14(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250FF2AA8(a1, a2, a3, (void *)*v3, sub_250FF4880, type metadata accessor for SleepingSampleViewModel);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250FF1F5C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250FA2278(0, &qword_26B210C28);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF20D4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_250FF2AA8(a1, a2, a3, a4, sub_250FF4B74, MEMORY[0x263F42CD0]);
}

uint64_t sub_250FF2100(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250FF4D4C(0, &qword_269B13EB8, (uint64_t (*)(uint64_t))sub_250F2F370, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF228C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250FF4D4C(0, &qword_269B14670, (uint64_t (*)(uint64_t))sub_250FEC088, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_250FEC088();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF2440(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250FA2278(0, (unint64_t *)&qword_269B13EA8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF25B8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250FF4D4C(0, &qword_269B14660, (uint64_t (*)(uint64_t))sub_250FF4CD8, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_250FF4CD8();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF276C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250FA2278(0, qword_26B210C38);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF28D8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250FA2278(0, &qword_269B13EC8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF2A50(char a1, int64_t a2, char a3, void *a4)
{
  return sub_250FF2AA8(a1, a2, a3, a4, sub_250FF4CA4, (uint64_t (*)(void))sub_250FACB74);
}

uint64_t sub_250FF2A7C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_250FF2AA8(a1, a2, a3, a4, sub_250FF4880, type metadata accessor for SleepingSampleViewModel);
}

uint64_t sub_250FF2AA8(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  a5(0);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  int v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF2CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251038ED0();
  uint64_t v5 = *(void **)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  int64_t v10 = (char *)&v23 - v9;
  sub_250FF4A2C();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  sub_250FF4A90(a1, (uint64_t)v13, (uint64_t (*)(void))sub_250FF48E8);
  sub_250FF4A90(a2, v15, (uint64_t (*)(void))sub_250FF48E8);
  uint64_t v16 = (uint64_t (*)(char *, uint64_t, uint64_t))v5[6];
  LODWORD(a1) = v16(v13, 1, v4);
  int v17 = v16((char *)v15, 1, v4);
  int v18 = v17;
  if (a1 == 1)
  {
    if (v17 == 1) {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (uint64_t (*)(char *, uint64_t, uint64_t))v5[4];
    v16(v10, (uint64_t)v13, v4);
    if (v18 != 1)
    {
LABEL_11:
      v16(v7, v15, v4);
      sub_250FF4B2C(&qword_26B210BB0, MEMORY[0x263F090E8]);
      sub_2510394D0();
      uint64_t v22 = (void (*)(char *, uint64_t))v5[1];
      v22(v7, v4);
      v22(v10, v4);
      return v24;
    }
    sub_250F326B0();
    sub_250FF4B2C(&qword_26B210BB0, MEMORY[0x263F090E8]);
    sub_2510394D0();
    unint64_t v20 = (void (*)(char *, uint64_t))v5[1];
    ++v5;
    v20(v10, v4);
    uint64_t result = v24 + 1;
    if (!__OFADD__(v24, 1)) {
      return result;
    }
    __break(1u);
  }
  ((void (*)(char *, uint64_t, uint64_t))v5[4])(v10, v15, v4);
  sub_250F326B0();
  sub_250FF4B2C(&qword_26B210BB0, MEMORY[0x263F090E8]);
  sub_2510394D0();
  uint64_t v21 = (void (*)(char *, uint64_t))v5[1];
  ++v5;
  v21(v10, v4);
  uint64_t result = v24 - 1;
  if (__OFSUB__(v24, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t _s15HealthBalanceUI23SleepingSampleViewModelV7SummaryV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
  if ((sub_2510371A0() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[6];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = *(void *)&a1[v5 + 8];
  uint64_t v8 = &a2[v5];
  uint64_t v9 = *((void *)v8 + 1);
  if (!v7)
  {
    if (v9) {
      return 0;
    }
    goto LABEL_12;
  }
  if (!v9) {
    return 0;
  }
  BOOL v10 = *(void *)v6 == *(void *)v8 && v7 == v9;
  if (v10 || (v11 = sub_2510397F0(), uint64_t result = 0, (v11 & 1) != 0))
  {
LABEL_12:
    uint64_t v13 = v4[7];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = *(void *)&a1[v13 + 8];
    uint64_t v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    if (v15)
    {
      if (!v17) {
        return 0;
      }
      if (*(void *)v14 != *(void *)v16 || v15 != v17)
      {
        char v19 = sub_2510397F0();
        uint64_t result = 0;
        if ((v19 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    uint64_t v20 = v4[8];
    uint64_t v21 = &a1[v20];
    uint64_t v22 = *(void *)&a1[v20 + 8];
    uint64_t v23 = &a2[v20];
    uint64_t v24 = *((void *)v23 + 1);
    if (v22)
    {
      if (v24)
      {
        BOOL v25 = *(void *)v21 == *(void *)v23 && v22 == v24;
        if (v25 || (sub_2510397F0() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v24)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s15HealthBalanceUI23SleepingSampleViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_251037740();
  sub_250FF4B2C(&qword_26B210A98, MEMORY[0x263F42CD0]);
  sub_251039240();
  sub_251039240();
  if (v8 == v7
    && (uint64_t v4 = (int *)type metadata accessor for SleepingSampleViewModel(0),
        (MEMORY[0x25338F3D0](a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (sub_250F84CF4(*(void *)(a1 + v4[6]), *(void *)(a2 + v4[6])) & 1) != 0
    && (sub_250F408B4(0, &qword_26B210168), (sub_251039480() & 1) != 0))
  {
    char v5 = MEMORY[0x25338F760](a1 + v4[8], a2 + v4[8]);
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

void sub_250FF3304(uint64_t a1)
{
}

void sub_250FF3338(uint64_t a1)
{
}

uint64_t type metadata accessor for SleepingSampleViewModel.Summary(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B14648);
}

void sub_250FF338C(uint64_t a1)
{
}

uint64_t sub_250FF33C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250FF1460(a1, a2);
}

unint64_t sub_250FF33F0()
{
  unint64_t result = qword_269B14640;
  if (!qword_269B14640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14640);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037740();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    BOOL v10 = (char *)a2 + v8;
    uint64_t v11 = sub_2510376B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    uint64_t v14 = a3[8];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_251037A50();
    int v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    id v19 = v13;
    v18(v15, v16, v17);
  }
  return a1;
}

uint64_t destroy for SleepingSampleViewModel(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = sub_251037A50();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

uint64_t initializeWithCopy for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = *(void **)(a2 + v11);
  *(void *)(a1 + v11) = v12;
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_251037A50();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  id v18 = v12;
  v17(v14, v15, v16);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a2 + v11);
  uint64_t v13 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  id v14 = v12;

  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_251037A50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_251037A50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t assignWithTake for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_251037A50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FF3BA0);
}

uint64_t sub_250FF3BA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_2510376B0();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = sub_251037A50();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[8];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for SleepingSampleViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FF3D34);
}

uint64_t sub_250FF3D34(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = sub_2510376B0();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6]) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = sub_251037A50();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[8];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

uint64_t sub_250FF3EB4()
{
  uint64_t result = sub_251037740();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_2510376B0();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_251037A50();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleViewModel.Summary(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_2510371B0();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    uint64_t v12 = a3[7];
    uint64_t v13 = (uint64_t *)((char *)v4 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)v4 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[8];
    uint64_t v20 = (uint64_t *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SleepingSampleViewModel.Summary(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_2510371B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for SleepingSampleViewModel.Summary(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_2510371B0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = &a1[v11];
  uint64_t v16 = &a2[v11];
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for SleepingSampleViewModel.Summary(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_2510371B0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for SleepingSampleViewModel.Summary(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_2510371B0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

unsigned char *assignWithTake for SleepingSampleViewModel.Summary(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_2510371B0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = (uint64_t *)&a2[v10];
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = (uint64_t *)&a2[v20];
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleViewModel.Summary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FF452C);
}

uint64_t sub_250FF452C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510371B0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SleepingSampleViewModel.Summary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FF4614);
}

uint64_t sub_250FF4614(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_2510371B0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
  return result;
}

uint64_t sub_250FF46D8()
{
  uint64_t result = sub_2510371B0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleViewModel.Summary.Variant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250FF4848);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleViewModel.Summary.Variant()
{
  return &type metadata for SleepingSampleViewModel.Summary.Variant;
}

void sub_250FF4880(uint64_t a1)
{
}

void sub_250FF48B4(uint64_t a1)
{
}

void sub_250FF48E8()
{
  if (!qword_26B210BC0)
  {
    sub_251038ED0();
    sub_250FF4B2C(&qword_26B210BB0, MEMORY[0x263F090E8]);
    sub_250FAE6FC();
    unint64_t v0 = sub_2510390E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210BC0);
    }
  }
}

uint64_t sub_250FF4990(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_250FF49F8(uint64_t a1)
{
}

void sub_250FF4A2C()
{
  if (!qword_26B210BC8)
  {
    sub_250FF48E8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B210BC8);
    }
  }
}

uint64_t sub_250FF4A90(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_250FF4AF8(uint64_t a1)
{
}

uint64_t sub_250FF4B2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FF4B74(uint64_t a1)
{
}

void sub_250FF4BA8(uint64_t a1)
{
}

void sub_250FF4BDC(uint64_t a1)
{
}

void sub_250FF4C10(uint64_t a1)
{
}

uint64_t sub_250FF4C44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_250FF4CA4(uint64_t a1)
{
}

void sub_250FF4CD8()
{
  if (!qword_269B14668)
  {
    sub_250F408B4(255, (unint64_t *)&qword_269B14308);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B14668);
    }
  }
}

void sub_250FF4D4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

id sub_250FF4DB0()
{
  id result = sub_250FF4DD0();
  qword_269B14678 = (uint64_t)result;
  return result;
}

id sub_250FF4DD0()
{
  uint64_t v0 = sub_251037460();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F087A8]), sel_init);
  objc_msgSend(v4, sel_setBoundaryStyle_, 2);
  uint64_t v5 = self;
  unsigned int v6 = (void *)sub_251039190();
  sub_251037450();
  uint64_t v7 = (void *)sub_251037430();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v8 = objc_msgSend(v5, sel_dateFormatFromTemplate_options_locale_, v6, 0, v7);

  if (v8)
  {
    v12[2] = sub_2510391C0();
    v12[3] = v9;
    v12[0] = 97;
    v12[1] = 0xE100000000000000;
    sub_250F3EB74();
    char v10 = sub_2510394E0();
    swift_bridgeObjectRelease();
    if (v10)
    {

      id v8 = (id)sub_251039190();
    }
  }
  objc_msgSend(v4, sel_setDateTemplate_, v8);

  return v4;
}

id sub_250FF4FC0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return (id)v2;
  }
  uint64_t v3 = a1;
  uint64_t v28 = MEMORY[0x263F8EE78];
  sub_250FF1EB4(0, v1, 0);
  uint64_t v2 = v28;
  id result = (id)sub_250FF570C(v3);
  uint64_t v6 = (uint64_t)result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v23 = v3 + 80;
  int64_t v24 = v1;
  int v25 = v5;
  uint64_t v26 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    double v12 = *(double *)(*(void *)(v3 + 56) + 8 * v6);
    id v27 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, *(void *)(*(void *)(v3 + 48) + 8 * v6));
    id result = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v12);
    id v13 = result;
    uint64_t v14 = v3;
    unint64_t v16 = *(void *)(v28 + 16);
    unint64_t v15 = *(void *)(v28 + 24);
    if (v16 >= v15 >> 1) {
      id result = (id)sub_250FF1EB4(v15 > 1, v16 + 1, 1);
    }
    *(void *)(v28 + 16) = v16 + 1;
    uint64_t v17 = v28 + 16 * v16;
    *(void *)(v17 + 32) = v27;
    *(void *)(v17 + 40) = v13;
    int64_t v9 = 1 << *(unsigned char *)(v14 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v26;
    uint64_t v18 = *(void *)(v26 + 8 * v11);
    if ((v18 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v14;
    int v5 = v25;
    if (*(_DWORD *)(v14 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      int64_t v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v24;
    }
    else
    {
      unint64_t v20 = v11 + 1;
      unint64_t v21 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v24;
      if (v11 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            unint64_t v22 = *(void *)(v23 + 8 * v11++);
            if (v22)
            {
              unint64_t v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return (id)v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

double CLKDevice.scaledValue(_:overrides:)(uint64_t a1, double a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFD188]), sel_initWithDevice_identitySizeClass_, v2, 2);
  if (*((void *)sub_250FF4FC0(a1) + 2))
  {
    sub_250FCF714();
    uint64_t v6 = sub_251039680();
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE80];
  }
  uint64_t v12 = v6;
  uint64_t v7 = (void *)swift_bridgeObjectRetain();
  sub_250FF5390(v7, 1, &v12);
  swift_bridgeObjectRelease();
  sub_250FF5350();
  sub_250FCF78C();
  uint64_t v8 = (void *)sub_251039040();
  swift_release();
  objc_msgSend(v5, sel_scaledValue_withOverrides_, v8, a2);
  double v10 = v9;

  return v10;
}

unint64_t sub_250FF5350()
{
  unint64_t result = qword_269B14308;
  if (!qword_269B14308)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B14308);
  }
  return result;
}

void sub_250FF5390(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  uint64_t v43 = v7;
  double v9 = (void *)*a3;
  id v10 = v7;
  id v11 = v8;
  unint64_t v13 = sub_250FCB960((uint64_t)v10);
  uint64_t v14 = v9[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15)) {
    goto LABEL_23;
  }
  char v17 = v12;
  if (v9[3] >= v16)
  {
    if (a2)
    {
      if (v12) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_250FCDC20();
      if (v17) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    uint64_t v23 = 8 * v13;
    *(void *)(v22[6] + v23) = v10;
    *(void *)(v22[7] + v23) = v11;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    uint64_t v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v28 = (void **)(a1 + 7);
    while (1)
    {
      int v29 = *v28;
      uint64_t v43 = *(v28 - 1);
      uint64_t v30 = (void *)*a3;
      id v31 = v43;
      id v11 = v29;
      unint64_t v32 = sub_250FCB960((uint64_t)v31);
      uint64_t v34 = v30[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v25 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v25) {
        break;
      }
      char v37 = v33;
      if (v30[3] < v36)
      {
        sub_250FCC350(v36, 1);
        unint64_t v32 = sub_250FCB960((uint64_t)v31);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      uint64_t v40 = 8 * v32;
      *(void *)(v39[6] + v40) = v31;
      *(void *)(v39[7] + v40) = v11;
      uint64_t v41 = v39[2];
      BOOL v25 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v25) {
        goto LABEL_24;
      }
      v39[2] = v42;
      v28 += 2;
      if (!--v27) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_250FCC350(v16, a2 & 1);
  unint64_t v18 = sub_250FCB960((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v13 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    unint64_t v20 = (void *)swift_allocError();
    swift_willThrow();
    id v21 = v20;
    sub_250F32D94();
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_250FF5350();
  sub_251039810();
  __break(1u);
LABEL_26:
  sub_251039550();
  sub_251039210();
  sub_250FF5350();
  sub_251039610();
  sub_251039210();
  sub_251039640();
  __break(1u);
}

uint64_t sub_250FF570C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  double v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_250FF5794@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  uint64_t v7 = v1;
  sub_250FF5AA0();
  sub_251037530();
  swift_release();
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v7 + 80);
  *(void *)a1 = *(void *)(v7 + 16);
  *(void *)(a1 + 8) = v3;
  long long v5 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 + 64);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_250FF5830()
{
  type metadata accessor for GlobalOvernightMetricsChartAnimationState();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE88];
  *(void *)(v0 + 24) = v1;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = 0;
  uint64_t result = sub_251037560();
  qword_269B1AD38 = v0;
  return result;
}

uint64_t sub_250FF5898(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = *(void *)(a2 + 64);
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 32) = v3;
  sub_250FE7170(a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_250FF58F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI41GlobalOvernightMetricsChartAnimationState___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_250FF59A8()
{
  return type metadata accessor for GlobalOvernightMetricsChartAnimationState();
}

uint64_t type metadata accessor for GlobalOvernightMetricsChartAnimationState()
{
  uint64_t result = qword_269B14688;
  if (!qword_269B14688) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250FF59FC()
{
  uint64_t result = sub_251037570();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_250FF5AA0()
{
  unint64_t result = qword_269B12CC0;
  if (!qword_269B12CC0)
  {
    type metadata accessor for GlobalOvernightMetricsChartAnimationState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12CC0);
  }
  return result;
}

uint64_t sub_250FF5AF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  long long v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  long long v3 = sub_250FA0F70(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF5C40(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_250FA12D0(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for MultilayerCircularGaugeLayer() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF5DF0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_250FA15A0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF5F48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_250FA16BC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FF6090(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_250FA11A8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t View.balanceAXIDComponents(_:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_250FF5DF0(v0);
  sub_250FACDD0();
  sub_250FF636C((unint64_t *)&qword_269B13050, (void (*)(uint64_t))sub_250FACDD0);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_2510389F0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_250FF62D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_250FF636C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_250FF63B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251038080();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_251038260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v12;
    int64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_251038F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_250FF650C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251038080();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_251038260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = sub_251038F20();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

uint64_t sub_250FF65FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251038260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_250FF6704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251038260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_250FF680C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251038260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_250FF6914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251038260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_250FF6A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FF6A30);
}

uint64_t sub_250FF6A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038080();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_251038260();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_251038F20();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t sub_250FF6B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FF6B90);
}

uint64_t sub_250FF6B90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_251038080();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_251038260();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_251038F20();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallSpecs()
{
  uint64_t result = qword_269B14698;
  if (!qword_269B14698) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250FF6D34()
{
  uint64_t result = sub_251038080();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_251038260();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_251038F20();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_250FF6E38()
{
  sub_250FF8398(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v0 - 8);
  unint64_t v2 = (char *)&v10 - v1;
  uint64_t v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC6880((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250FF83EC((uint64_t)v2, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  else
  {
    sub_250F7145C((uint64_t)v2, (uint64_t)v6);
    uint64_t v7 = sub_251037610();
    uint64_t result = sub_251037630();
    uint64_t v9 = v7 - result;
    if (__OFSUB__(v7, result))
    {
      __break(1u);
      return result;
    }
    sub_250F714C0((uint64_t)v6);
    if (v9 >= 1) {
      return 0;
    }
  }
  type metadata accessor for BalanceWidgetSystemSmallSpecs();
  if (sub_251038250()) {
    return 0x4050E00000000000;
  }
  else {
    return 0x4052C00000000000;
  }
}

uint64_t *sub_250FF700C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v60 = a1;
  uint64_t v70 = a2;
  uint64_t v4 = sub_251038F20();
  uint64_t v68 = *(void *)(v4 - 8);
  uint64_t v69 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v66 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v67 = (char *)&v52 - v7;
  sub_250FF8398(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v65 = (char *)&v52 - v9;
  uint64_t v10 = sub_251038080();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B210178 != -1) {
    swift_once();
  }
  MEMORY[0x2533907A0]((id)qword_26B210328);
  uint64_t v14 = *MEMORY[0x263F184F8];
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v15(v13, v14, v10);
  sub_251038070();
  uint64_t v74 = v3;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v16 = v11 + 8;
  uint64_t v18 = v17;
  v17(v13, v10);
  uint64_t v64 = sub_251038AE0();
  swift_release();
  if (qword_26B210180 != -1) {
    swift_once();
  }
  MEMORY[0x2533907A0]((id)qword_26B210330);
  v15(v13, v14, v10);
  uint64_t v73 = v15;
  sub_251038070();
  v18(v13, v10);
  uint64_t v63 = sub_251038AE0();
  swift_release();
  uint64_t v19 = self;
  uint64_t v62 = MEMORY[0x2533907A0](objc_msgSend(v19, sel_systemGray5Color));
  unsigned int v71 = v14;
  v73(v13, v14, v10);
  char v20 = sub_251038070();
  uint64_t v72 = v16;
  v18(v13, v10);
  if (v20) {
    uint64_t v21 = sub_251038AB0();
  }
  else {
    uint64_t v21 = sub_251038AD0();
  }
  v76[0] = v21;
  uint64_t v61 = sub_251038160();
  int v22 = *(unsigned __int8 *)(v60 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 24));
  uint64_t v60 = MEMORY[0x2533907A0]((id)qword_26B210328);
  uint64_t v59 = MEMORY[0x2533907A0]((id)qword_26B210330);
  uint64_t v23 = 0x3FE0000000000000;
  if (v22) {
    uint64_t v23 = 0x3FC999999999999ALL;
  }
  uint64_t v57 = v23;
  if (v22) {
    double v24 = 0.45;
  }
  else {
    double v24 = 0.5;
  }
  uint64_t v25 = 0x4028000000000000;
  if (v22) {
    uint64_t v25 = 0x4026000000000000;
  }
  uint64_t v58 = v25;
  uint64_t v26 = v19;
  v76[0] = MEMORY[0x2533907A0](objc_msgSend(v19, sel_systemGray2Color));
  uint64_t v56 = sub_251038160();
  uint64_t v27 = v71;
  uint64_t v28 = v73;
  v73(v13, v71, v10);
  char v29 = sub_251038070();
  v18(v13, v10);
  uint64_t v30 = &selRef_systemGrayColor;
  if ((v29 & 1) == 0) {
    uint64_t v30 = &selRef_systemGray4Color;
  }
  id v31 = *v30;
  id v53 = v26;
  v76[0] = MEMORY[0x2533907A0]([v26 v31]);
  uint64_t v55 = sub_251038160();
  v76[0] = sub_251038AC0();
  uint64_t v54 = sub_251038160();
  v28(v13, v27, v10);
  char v32 = sub_251038070();
  v18(v13, v10);
  if (v32)
  {
    uint64_t v33 = sub_251038B10();
    id v34 = v53;
  }
  else
  {
    id v34 = v53;
    uint64_t v33 = MEMORY[0x2533907A0](objc_msgSend(v53, sel_systemGray3Color));
  }
  v76[0] = v33;
  uint64_t v35 = sub_251038160();
  v73(v13, v71, v10);
  char v36 = sub_251038070();
  v18(v13, v10);
  if (v36) {
    uint64_t v37 = sub_251038AD0();
  }
  else {
    uint64_t v37 = MEMORY[0x2533907A0](objc_msgSend(v34, sel_systemGrayColor));
  }
  char v38 = v67;
  v76[0] = v37;
  uint64_t v39 = sub_251038160();
  uint64_t v40 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  uint64_t v41 = v74;
  sub_251038250();
  uint64_t v42 = sub_251038760();
  uint64_t v43 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v65, 1, 1, v42);
  sub_251038790();
  sub_250FF83EC(v43, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
  sub_251038770();
  uint64_t v44 = sub_2510387C0();
  swift_release();
  v76[0] = v64;
  v76[1] = v63;
  v76[2] = v62;
  LOBYTE(v76[3]) = 0;
  LOBYTE(v76[4]) = 1;
  v76[5] = v61;
  v76[6] = v57;
  LOBYTE(v76[7]) = 0;
  v76[8] = 0x4024000000000000;
  v76[9] = v60;
  v76[10] = v59;
  v76[11] = 0x3FE0000000000000;
  v76[12] = v58;
  LOBYTE(v76[13]) = 0;
  *(double *)&v76[14] = v24;
  *(_OWORD *)&v76[15] = xmmword_25103DD00;
  *(_OWORD *)&v76[17] = xmmword_25103DD10;
  *(_OWORD *)&v76[19] = xmmword_25103DD20;
  v76[21] = 0x3FB5C28F5C28F5C3;
  memset(&v76[22], 0, 24);
  LOWORD(v76[25]) = 1;
  v76[26] = v56;
  v76[27] = v55;
  v76[28] = v54;
  v76[29] = v35;
  v76[30] = v39;
  LOBYTE(v76[31]) = 1;
  v76[32] = 0;
  v76[33] = v44;
  v76[34] = 0;
  uint64_t v46 = v68;
  uint64_t v45 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v38, v41 + *(int *)(v40 + 24), v69);
  uint64_t v47 = v66;
  sub_251038F10();
  sub_250F2DFF0();
  char v48 = sub_2510390F0();
  unsigned __int8 v49 = *(void (**)(char *, uint64_t))(v46 + 8);
  v49(v47, v45);
  if (v48)
  {
    v49(v38, v45);
    memcpy(v75, v76, sizeof(v75));
    static OvernightMetricsChartSpec.accented(_:)((uint64_t)v75, (uint64_t)v70);
    return sub_250F2E048(v76);
  }
  sub_251038F00();
  char v50 = sub_2510390F0();
  v49(v47, v45);
  v49(v38, v45);
  if (v50)
  {
    memcpy(v75, v76, sizeof(v75));
    static OvernightMetricsChartSpec.vibrant(_:)((uint64_t)v75, (uint64_t)v70);
    return sub_250F2E048(v76);
  }
  return (uint64_t *)memcpy(v70, v76, 0x118uLL);
}

uint64_t sub_250FF7974()
{
  sub_250FF8398(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v10 - v1;
  uint64_t v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BalanceWidgetSystemSmallSpecs();
  uint64_t result = sub_251038250();
  if ((result & 1) == 0)
  {
    sub_250FC6880((uint64_t)v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    {
      sub_250FF83EC((uint64_t)v2, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      return sub_250FC1D98();
    }
    sub_250F7145C((uint64_t)v2, (uint64_t)v6);
    uint64_t v8 = sub_251037610();
    uint64_t result = sub_251037630();
    uint64_t v9 = v8 - result;
    if (__OFSUB__(v8, result))
    {
      __break(1u);
    }
    else
    {
      uint64_t result = sub_250F714C0((uint64_t)v6);
      if (v9 < 1) {
        return sub_250FC1D98();
      }
    }
  }
  return result;
}

uint64_t sub_250FF7B4C()
{
  uint64_t v0 = sub_2510387D0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF8398(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = sub_251038820();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC1D98();
  if (v11) {
    uint64_t v12 = (unsigned int *)MEMORY[0x263F1A728];
  }
  else {
    uint64_t v12 = (unsigned int *)MEMORY[0x263F1A6F8];
  }
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *v12, v7);
  uint64_t v13 = *MEMORY[0x263F1A610];
  uint64_t v14 = sub_251038760();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v6, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v6, 0, 1, v14);
  sub_2510387B0();
  sub_250FF83EC((uint64_t)v6, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F1A680], v0);
  sub_251038800();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_251038780();
  uint64_t v16 = sub_2510387C0();
  swift_release();
  return v16;
}

uint64_t sub_250FF7E64()
{
  uint64_t v1 = sub_251038F20();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v0 + *(int *)(v8 + 24), v1);
  sub_251038F00();
  sub_250F2DFF0();
  char v9 = sub_2510390F0();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v4, v1);
  v10(v7, v1);
  if (v9) {
    return sub_251038AD0();
  }
  uint64_t v12 = sub_250FC1D98();
  if (v13) {
    return sub_251038AF0();
  }
  if (v12 == 1)
  {
    if (qword_269B12BA8 != -1) {
      swift_once();
    }
    uint64_t v14 = (void *)qword_269B14138;
  }
  else if (v12)
  {
    if (qword_26B210180 != -1) {
      swift_once();
    }
    uint64_t v14 = (void *)qword_26B210330;
  }
  else
  {
    if (qword_26B210178 != -1) {
      swift_once();
    }
    uint64_t v14 = (void *)qword_26B210328;
  }
  return MEMORY[0x2533907A0](v14);
}

uint64_t sub_250FF809C()
{
  uint64_t v19 = sub_2510387D0();
  uint64_t v0 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (void (*)(uint64_t))MEMORY[0x263F1A620];
  sub_250FF8398(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = sub_251038820();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  char v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v8 + 104))(v11, *MEMORY[0x263F1A728], v7, v9);
  uint64_t v12 = *MEMORY[0x263F1A610];
  uint64_t v13 = sub_251038760();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v6, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  sub_2510387B0();
  sub_250FF83EC((uint64_t)v6, (unint64_t *)&qword_269B12E08, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v15 = v19;
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, *MEMORY[0x263F1A680], v19);
  sub_251038800();
  swift_release();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v15);
  sub_251038780();
  uint64_t v16 = sub_2510387C0();
  swift_release();
  return v16;
}

void sub_250FF8398(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250FF83EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_250FF8398(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250FF8448()
{
  return sub_251038400();
}

uint64_t OvernightMetricsWarmupProgress.overallProgress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_251037640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t OvernightMetricsWarmupProgress.overallProgress.setter(uint64_t a1)
{
  uint64_t v3 = sub_251037640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*OvernightMetricsWarmupProgress.overallProgress.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsWarmupProgress.progressByDataType.getter()
{
  type metadata accessor for OvernightMetricsWarmupProgress();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for OvernightMetricsWarmupProgress()
{
  uint64_t result = qword_26B210240;
  if (!qword_26B210240) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t OvernightMetricsWarmupProgress.progressByDataType.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for OvernightMetricsWarmupProgress() + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*OvernightMetricsWarmupProgress.progressByDataType.modify())(void)
{
  return nullsub_1;
}

void static OvernightMetricsWarmupProgress.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (sub_251037620())
  {
    uint64_t v4 = *(int *)(type metadata accessor for OvernightMetricsWarmupProgress() + 20);
    uint64_t v5 = *(void *)(a1 + v4);
    uint64_t v6 = *(void *)(a2 + v4);
    sub_250FBECAC(v5, v6);
  }
}

uint64_t sub_250FF86F0()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x506C6C617265766FLL;
  }
}

uint64_t sub_250FF873C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250FF992C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250FF8764(uint64_t a1)
{
  unint64_t v2 = sub_250FF89C4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250FF87A0(uint64_t a1)
{
  unint64_t v2 = sub_250FF89C4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t OvernightMetricsWarmupProgress.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250FF8F14(0, &qword_269B146A8, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250FF89C4();
  sub_2510398B0();
  char v13 = 0;
  sub_251037640();
  sub_250FF9050(&qword_269B146B8, MEMORY[0x263F42BC0]);
  sub_2510397A0();
  if (!v2)
  {
    uint64_t v12 = *(void *)(v3 + *(int *)(type metadata accessor for OvernightMetricsWarmupProgress() + 20));
    v11[15] = 1;
    sub_250FF8A18();
    sub_250FF8AC4();
    sub_2510397A0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_250FF89C4()
{
  unint64_t result = qword_269B146B0;
  if (!qword_269B146B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B146B0);
  }
  return result;
}

void sub_250FF8A18()
{
  if (!qword_269B146C0)
  {
    sub_251037740();
    sub_251037640();
    sub_250FF9050(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v0 = sub_251039060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B146C0);
    }
  }
}

unint64_t sub_250FF8AC4()
{
  unint64_t result = qword_269B146C8;
  if (!qword_269B146C8)
  {
    sub_250FF8A18();
    sub_250FF9050(&qword_269B13C10, MEMORY[0x263F42CD0]);
    sub_250FF9050(&qword_269B146B8, MEMORY[0x263F42BC0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B146C8);
  }
  return result;
}

uint64_t OvernightMetricsWarmupProgress.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v26 = sub_251037640();
  uint64_t v23 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FF8F14(0, &qword_269B146D0, MEMORY[0x263F8E040]);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for OvernightMetricsWarmupProgress();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250FF89C4();
  sub_2510398A0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v21 = v10;
  char v13 = v12;
  uint64_t v14 = v23;
  char v29 = 0;
  sub_250FF9050(&qword_269B146D8, MEMORY[0x263F42BC0]);
  uint64_t v15 = v26;
  uint64_t v16 = v24;
  sub_251039730();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v20 = (uint64_t)v13;
  v17(v13, v5, v15);
  sub_250FF8A18();
  char v28 = 1;
  sub_250FF8F78();
  sub_251039730();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v16);
  uint64_t v18 = v20;
  *(void *)(v20 + *(int *)(v21 + 20)) = v27;
  sub_250FF9098(v18, v22);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_250F714C0(v18);
}

void sub_250FF8F14(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250FF89C4();
    unint64_t v7 = a3(a1, &type metadata for OvernightMetricsWarmupProgress.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_250FF8F78()
{
  unint64_t result = qword_269B146E0;
  if (!qword_269B146E0)
  {
    sub_250FF8A18();
    sub_250FF9050(&qword_269B13C70, MEMORY[0x263F42CD0]);
    sub_250FF9050(&qword_269B146D8, MEMORY[0x263F42BC0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B146E0);
  }
  return result;
}

uint64_t sub_250FF9050(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FF9098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_250FF90FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_251037620())
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = *(void *)(a1 + v6);
    uint64_t v8 = *(void *)(a2 + v6);
    sub_250FBECAC(v7, v8);
  }
}

uint64_t sub_250FF9164@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsWarmupProgress.init(from:)(a1, a2);
}

uint64_t sub_250FF917C(void *a1)
{
  return OvernightMetricsWarmupProgress.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for OvernightMetricsWarmupProgress(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037640();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OvernightMetricsWarmupProgress(uint64_t a1)
{
  uint64_t v2 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FF94F8);
}

uint64_t sub_250FF94F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FF95CC);
}

uint64_t sub_250FF95CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_251037640();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_250FF9688()
{
  uint64_t result = sub_251037640();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OvernightMetricsWarmupProgress.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250FF97ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsWarmupProgress.CodingKeys()
{
  return &type metadata for OvernightMetricsWarmupProgress.CodingKeys;
}

unint64_t sub_250FF9828()
{
  unint64_t result = qword_269B146E8;
  if (!qword_269B146E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B146E8);
  }
  return result;
}

unint64_t sub_250FF9880()
{
  unint64_t result = qword_269B146F0;
  if (!qword_269B146F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B146F0);
  }
  return result;
}

unint64_t sub_250FF98D8()
{
  unint64_t result = qword_269B146F8;
  if (!qword_269B146F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B146F8);
  }
  return result;
}

uint64_t sub_250FF992C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x506C6C617265766FLL && a2 == 0xEF73736572676F72;
  if (v2 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000251040D40)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for OvernightMetricsChartAnimationValues(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for OvernightMetricsChartAnimationValues()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for OvernightMetricsChartAnimationValues(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChartAnimationValues(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartAnimationValues(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartAnimationValues(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartAnimationValues()
{
  return &type metadata for OvernightMetricsChartAnimationValues;
}

uint64_t destroy for OvernightMetricsChartAnimationValues.IndividualMetricsState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OvernightMetricsChartAnimationValues.IndividualMetricsState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartAnimationValues.IndividualMetricsState()
{
  return &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
}

uint64_t sub_250FF9DB8(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(v3 + 8);
  if (a3 < 1.0)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    uint64_t v8 = sub_251037740();
    uint64_t v9 = *(void *)(v8 - 8);
    if (v7)
    {
      uint64_t v10 = v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      uint64_t v23 = *(void *)(v8 - 8);
      v21(v5, 1, 1, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(a2, v10, v8);
      uint64_t v11 = a2;
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v21(v5, 1, 1, v8);
      uint64_t v11 = a2;
      uint64_t v12 = 1;
    }
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v11, v12, 1, v8);
  }
  if ((~*(void *)&a3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a3 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (__OFSUB__((uint64_t)a3, 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v6 + 16);
  if ((uint64_t)(v13 - 1) >= (((uint64_t)a3 - 1) & ~(((uint64_t)a3 - 1) >> 63))) {
    unint64_t v14 = ((uint64_t)a3 - 1) & ~(((uint64_t)a3 - 1) >> 63);
  }
  else {
    unint64_t v14 = v13 - 1;
  }
  if ((uint64_t)(v14 + 1) < (uint64_t)(v13 - 1)) {
    unint64_t v15 = v14 + 1;
  }
  else {
    unint64_t v15 = v13 - 1;
  }
  if (v14 >= v13) {
    goto LABEL_27;
  }
  uint64_t v16 = sub_251037740();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v24 = v17;
  uint64_t v18 = v6 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  uint64_t v19 = *(void *)(v17 + 72);
  uint64_t v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
  v20(v5, v18 + v19 * v14, v16);
  uint64_t v22 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56);
  unint64_t result = v22(v5, 0, 1, v16);
  if (v15 >= v13)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  v20(a2, v18 + v19 * v15, v16);
  return v22(a2, 0, 1, v16);
}

ValueMetadata *sub_250FFA0C8(long double a1)
{
  sub_251001794(0, &qword_269B14760);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v9 = *(void *)(v1 + 8);
  LOBYTE(v22) = *(unsigned char *)v1;
  int v8 = v22;
  uint64_t v23 = v9;
  uint64_t v10 = sub_250FFABB0(a1);
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (v8 == 1)
  {
    uint64_t v21 = (uint64_t)&v21;
    uint64_t v27 = v11;
    uint64_t v28 = v10;
    long long v29 = xmmword_25103DF20;
    *(double *)&long long v14 = MEMORY[0x270FA5388](v10);
    *(&v21 - 6) = v13;
    *(&v21 - 5) = v12;
    *((_OWORD *)&v21 - 2) = v14;
    *(&v21 - 2) = 0x3FF0000000000000;
    sub_2510017F4();
    sub_2510018B8();
    uint64_t v16 = v15;
    uint64_t v17 = sub_251000B04(&qword_269B14788, (void (*)(uint64_t))sub_2510018B8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState;
    uint64_t v23 = v16;
    uint64_t v24 = v16;
    uint64_t v25 = v17;
    uint64_t v26 = v17;
    swift_getOpaqueTypeConformance2();
    sub_251038280();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v18 = fmod(a1, 1.0);
    sub_251038290();
    if (v18 == 0.0)
    {
      if (*(void *)(v23 + 16) >= 2uLL)
      {
        uint64_t v19 = swift_bridgeObjectRetain();
        sub_250FFB270(v19);
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_bridgeObjectRelease();
      return (ValueMetadata *)MEMORY[0x263F8EE88];
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v22;
    }
  }
  return (ValueMetadata *)v13;
}

ValueMetadata *sub_250FFA398@<X0>(uint64_t a1@<X8>, long double a2@<D0>)
{
  sub_251001794(0, &qword_269B14700);
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = *(void *)(v2 + 8);
  if (*(unsigned char *)v2)
  {
    LOBYTE(v62) = 1;
    uint64_t v63 = v10;
    unint64_t result = sub_250FFA0C8(a2);
    if (*(void *)(v12 + 16) > 1uLL) {
      double v13 = 1.0;
    }
    int64x2_t v15 = vdupq_lane_s64(*(uint64_t *)&v13, 0);
    int64x2_t v16 = vdupq_lane_s64(v14, 0);
    long long v17 = xmmword_25103DF50;
    double v18 = 0.5;
  }
  else
  {
    uint64_t v49 = v7;
    LOBYTE(v62) = 0;
    uint64_t v63 = v10;
    uint64_t v19 = sub_250FFABB0(a2);
    uint64_t v56 = &v48;
    double v21 = 0.26;
    unsigned int v22 = *(void *)(v19 + 16) > 1uLL;
    if (*(void *)(v19 + 16) > 1uLL) {
      double v21 = 0.5;
    }
    uint64_t v62 = v20;
    uint64_t v63 = v19;
    uint64_t v52 = v20;
    int32x2_t v23 = vdup_n_s32(v22);
    v24.i64[0] = v23.u32[0];
    v24.i64[1] = v23.u32[1];
    __asm { FMOV            V3.2D, #1.0 }
    int8x16_t v64 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), _Q3, (int8x16_t)xmmword_25103DF30);
    int64x2_t v65 = (int64x2_t)_Q3;
    *(double *)uint64_t v66 = v21;
    *(_OWORD *)&v66[8] = xmmword_25103DF40;
    MEMORY[0x270FA5388](v19);
    uint64_t v55 = &v48 - 4;
    *(&v48 - 2) = 0x3FF0000000000000;
    sub_251000B54();
    uint64_t v54 = v30;
    sub_251000D08();
    uint64_t v53 = v31;
    sub_2510012EC();
    uint64_t v33 = v32;
    sub_251000E94();
    uint64_t v51 = v34;
    sub_251000FF0();
    uint64_t v50 = v35;
    sub_251001124();
    uint64_t v37 = v36;
    sub_251001228();
    uint64_t v39 = v38;
    uint64_t v40 = sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v57 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    uint64_t v58 = v33;
    uint64_t v59 = v33;
    uint64_t v60 = v40;
    uint64_t v61 = v40;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v57 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    uint64_t v58 = v39;
    uint64_t v59 = v33;
    uint64_t v60 = OpaqueTypeConformance2;
    uint64_t v61 = v40;
    uint64_t v42 = swift_getOpaqueTypeConformance2();
    uint64_t v57 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    uint64_t v58 = v37;
    uint64_t v59 = v33;
    uint64_t v60 = v42;
    uint64_t v61 = v40;
    uint64_t v43 = swift_getOpaqueTypeConformance2();
    uint64_t v57 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    uint64_t v58 = v50;
    uint64_t v59 = v33;
    uint64_t v60 = v43;
    uint64_t v61 = v40;
    uint64_t v44 = swift_getOpaqueTypeConformance2();
    uint64_t v57 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    uint64_t v58 = v51;
    uint64_t v59 = v33;
    uint64_t v60 = v44;
    uint64_t v61 = v40;
    uint64_t v45 = swift_getOpaqueTypeConformance2();
    uint64_t v57 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    uint64_t v58 = v53;
    uint64_t v59 = v33;
    uint64_t v60 = v45;
    uint64_t v61 = v40;
    swift_getOpaqueTypeConformance2();
    sub_251038280();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v46 = fmod(a2, 1.0);
    sub_251038290();
    if (v46 == 0.0)
    {
      if (*(void *)(v63 + 16) >= 2uLL)
      {
        uint64_t v47 = swift_bridgeObjectRetain();
        sub_250FFB270(v47);
      }
      (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v6);
      swift_bridgeObjectRelease();
      unint64_t result = (ValueMetadata *)MEMORY[0x263F8EE88];
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v6);
      unint64_t result = v62;
    }
    uint64_t v12 = v63;
    int64x2_t v15 = (int64x2_t)v64;
    int64x2_t v16 = v65;
    long long v17 = *(_OWORD *)v66;
    double v18 = *(double *)&v66[16];
  }
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v12;
  *(int64x2_t *)(a1 + 16) = v15;
  *(int64x2_t *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v17;
  *(double *)(a1 + 64) = v18;
  return result;
}

uint64_t sub_250FFA7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]),
        uint64_t v7 = sub_251039070(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_251000B04(&qword_26B210A90, MEMORY[0x263F42CD0]);
      char v15 = sub_2510390F0();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_250FFAA00(uint64_t a1, double a2)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v4 = sub_251039840();
  uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a1 + 56;
  if (((*(void *)(a1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (*(double *)(v8 + 8 * v6) == a2) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    double v12 = *(double *)(v8 + 8 * v11);
    BOOL result = v12 == a2;
    if (v12 == a2) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_250FFAADC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_251000A48((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_250FFAB38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  double v3 = *(double *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  double v7 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  sub_250FFD120(*(void *)a1, *(void *)a2);
  if ((v8 & 1) == 0) {
    return 0;
  }
  sub_250FFD120(v2, v5);
  if (v3 == v6) {
    return v9 & (v4 == v7);
  }
  else {
    return 0;
  }
}

uint64_t sub_250FFABB0(double a1)
{
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v57 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v50 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v50 - v9;
  sub_251001484();
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v50 - v19;
  MEMORY[0x270FA5388](v21);
  int32x2_t v23 = (char *)&v50 - v22;
  uint64_t v24 = *(void *)(v1 + 8);
  LOBYTE(v60) = *(unsigned char *)v1;
  uint64_t v61 = v24;
  sub_250FF9DB8((uint64_t)&v50 - v22, (uint64_t)v20, a1);
  uint64_t v25 = (uint64_t)&v14[*(int *)(v12 + 56)];
  uint64_t v58 = v23;
  sub_251001534((uint64_t)v23, (uint64_t)v14);
  sub_251001534((uint64_t)v20, v25);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26((uint64_t)v14, 1, v3) != 1)
  {
    sub_251001534((uint64_t)v14, (uint64_t)v17);
    if (v26(v25, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v3);
      uint64_t v28 = MEMORY[0x263F8EE88];
      uint64_t v27 = (uint64_t (*)(void))sub_251001484;
      goto LABEL_6;
    }
    uint64_t v55 = v20;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v39 = v56;
    v38(v56, v17, v3);
    v38(v57, (char *)v25, v3);
    sub_251000B04(&qword_26B210A98, MEMORY[0x263F42CD0]);
    sub_251039240();
    sub_251039240();
    uint64_t v54 = v60;
    *(void *)&long long v53 = v59;
    sub_250FF4B74(0);
    uint64_t v40 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v41 = (v40 + 32) & ~v40;
    uint64_t v51 = v40 | 7;
    uint64_t v52 = v42;
    uint64_t v43 = swift_allocObject();
    long long v50 = xmmword_25103AD40;
    *(_OWORD *)(v43 + 16) = xmmword_25103AD40;
    uint64_t v44 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 16);
    v44(v43 + v41, v39, v3);
    uint64_t v29 = sub_250F9979C(v43);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v54 == (void)v53)
    {
      uint64_t v20 = v55;
      uint64_t v45 = (uint64_t)v57;
    }
    else
    {
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = v50;
      uint64_t v47 = (uint64_t)v57;
      v44(v46 + v41, v57, v3);
      sub_250F9979C(v46);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v20 = v55;
      uint64_t v45 = v47;
    }
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v48(v45, v3);
    v48((uint64_t)v56, v3);
LABEL_12:
    uint64_t v27 = (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection;
    goto LABEL_13;
  }
  if (v26(v25, 1, v3) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v10, v25, v3);
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v57 = (char *)sub_2510015F8(v30);
    swift_bridgeObjectRelease();
    sub_250FF4B74(0);
    uint64_t v56 = v31;
    uint64_t v32 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v33 = (v32 + 32) & ~v32;
    uint64_t v54 = v32 | 7;
    uint64_t v34 = swift_allocObject();
    long long v53 = xmmword_25103AD40;
    *(_OWORD *)(v34 + 16) = xmmword_25103AD40;
    uint64_t v55 = v20;
    uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 16);
    v35(v34 + v33, v10, v3);
    uint64_t v57 = (char *)sub_250FFFB54(v34, (uint64_t)v57);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = v53;
    v35(v36 + v33, v10, v3);
    uint64_t v20 = v55;
    sub_2510015F8(v36);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v37 = v10;
    uint64_t v29 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v37, v3);
    goto LABEL_12;
  }
  uint64_t v27 = (uint64_t (*)(void))sub_251001484;
  uint64_t v28 = MEMORY[0x263F8EE88];
LABEL_6:
  uint64_t v29 = v28;
LABEL_13:
  sub_251001598((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_251001598((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_251001598((uint64_t)v14, v27);
  return v29;
}

void sub_250FFB270(uint64_t a1)
{
  uint64_t v2 = sub_251037740();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v24 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v24 - v10;
  int64_t v12 = 0;
  uint64_t v27 = a1;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v14 = a1 + 56;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 24);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v24 = v14;
  int64_t v25 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v25) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v12);
      if (!v22)
      {
        int64_t v12 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v12);
        if (!v22)
        {
          int64_t v12 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_23;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v12);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v18 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(void *)(v27 + 48) + *(void *)(v3 + 72) * v20, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    sub_250FFD9EC((uint64_t)v8, v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    int64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_250FFB528@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v75 = a1;
  sub_251000B54();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  uint64_t v74 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v69 = (char *)v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251000D08();
  uint64_t v68 = v6;
  uint64_t v72 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int64x2_t v65 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251000E94();
  uint64_t v87 = v8;
  uint64_t v71 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v86 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251000FF0();
  uint64_t v85 = v10;
  uint64_t v70 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  long long v83 = (char *)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251001124();
  uint64_t v82 = v12;
  uint64_t v67 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v80 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251001228();
  uint64_t v79 = v14;
  uint64_t v66 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v78 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510012EC();
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v77 = (char *)v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  long long v88 = (char *)v64 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v89 = (char *)v64 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v90 = (char *)v64 - v25;
  MEMORY[0x270FA5388](v26);
  long long v91 = (char *)v64 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v92 = (char *)v64 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)v64 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v84 = (char *)v64 - v34;
  swift_getKeyPath();
  double v99 = a2;
  sub_251002700(0, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
  uint64_t v36 = v35;
  unint64_t v37 = sub_25100139C();
  sub_2510381C0();
  uint64_t v38 = sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
  MEMORY[0x25338FFF0](v32, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v18 + 8);
  long long v81 = v32;
  v39(v32, v17);
  uint64_t v76 = v39;
  swift_getKeyPath();
  double v98 = a2;
  uint64_t v40 = v92;
  sub_2510381C0();
  MEMORY[0x25338FFF0](v40, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  v39(v40, v17);
  swift_getKeyPath();
  double v97 = a2;
  uint64_t v41 = v91;
  sub_2510381C0();
  MEMORY[0x25338FFF0](v41, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  uint64_t v42 = v76;
  v76(v41, v17);
  swift_getKeyPath();
  double v96 = a2;
  uint64_t v43 = v90;
  v64[1] = v36;
  sub_2510381C0();
  MEMORY[0x25338FFF0](v43, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  v42(v43, v17);
  swift_getKeyPath();
  double v95 = a2;
  uint64_t v44 = v89;
  v64[2] = v37;
  sub_2510381C0();
  MEMORY[0x25338FFF0](v44, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  v42(v44, v17);
  swift_getKeyPath();
  double v94 = a2;
  uint64_t v45 = v88;
  sub_2510381C0();
  MEMORY[0x25338FFF0](v45, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  v64[3] = v18 + 8;
  v42(v45, v17);
  swift_getKeyPath();
  double v93 = a2;
  uint64_t v46 = v77;
  sub_2510381C0();
  MEMORY[0x25338FFF0](v46, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  v42(v46, v17);
  MEMORY[0x253390020](v84, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v17, v38);
  sub_2510382D0();
  uint64_t v100 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  uint64_t v101 = v17;
  uint64_t v102 = v17;
  uint64_t v103 = v38;
  uint64_t v104 = v38;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v48 = v79;
  sub_2510382D0();
  uint64_t v100 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  uint64_t v101 = v48;
  uint64_t v102 = v17;
  uint64_t v103 = OpaqueTypeConformance2;
  uint64_t v104 = v38;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v50 = v82;
  sub_2510382D0();
  uint64_t v100 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  uint64_t v101 = v50;
  uint64_t v102 = v17;
  uint64_t v103 = v49;
  uint64_t v104 = v38;
  uint64_t v51 = swift_getOpaqueTypeConformance2();
  uint64_t v52 = v85;
  sub_2510382D0();
  uint64_t v100 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  uint64_t v101 = v52;
  uint64_t v102 = v17;
  uint64_t v103 = v51;
  uint64_t v104 = v38;
  uint64_t v53 = swift_getOpaqueTypeConformance2();
  uint64_t v54 = v65;
  uint64_t v55 = v87;
  sub_2510382D0();
  uint64_t v100 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  uint64_t v101 = v55;
  uint64_t v102 = v17;
  uint64_t v103 = v53;
  uint64_t v104 = v38;
  uint64_t v56 = swift_getOpaqueTypeConformance2();
  uint64_t v57 = v69;
  uint64_t v58 = v54;
  uint64_t v59 = v68;
  sub_2510382D0();
  uint64_t v100 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  uint64_t v101 = v59;
  uint64_t v102 = v17;
  uint64_t v103 = v56;
  uint64_t v104 = v38;
  uint64_t v60 = swift_getOpaqueTypeConformance2();
  uint64_t v61 = v73;
  MEMORY[0x253390000](v57, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState, v73, v60);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v57, v61);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v86, v87);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v83, v85);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v80, v82);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v78, v79);
  uint64_t v62 = v76;
  v76(v77, v17);
  v62(v88, v17);
  v62(v89, v17);
  v62(v90, v17);
  v62(v91, v17);
  v62(v92, v17);
  v62(v81, v17);
  return ((uint64_t (*)(char *, uint64_t))v62)(v84, v17);
}

uint64_t sub_250FFC104(double a1, double a2)
{
  uint64_t v3 = sub_251038DB0();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = MEMORY[0x263F8D538];
  sub_251002700(0, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v16 - v11;
  *(double *)&v16[1] = a2;
  sub_251038DA0();
  sub_251038220();
  unint64_t v13 = sub_25100139C();
  MEMORY[0x253390370](v9, v4, v6, v13);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  MEMORY[0x253390390](v12, v4, v6, v13);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, v6);
}

uint64_t sub_250FFC2F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v41 = a2;
  uint64_t v40 = a1;
  uint64_t v45 = a3;
  sub_2510017F4();
  uint64_t v43 = v11;
  uint64_t v44 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v42 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510018B8();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v38 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v39 = (char *)v38 - v22;
  v38[2] = swift_getKeyPath();
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  double v53 = a4;
  double v54 = a5;
  double v55 = a6;
  sub_2510019E0();
  v38[1] = v23;
  sub_251001ADC();
  uint64_t v25 = v24;
  uint64_t v26 = (ValueMetadata *)MEMORY[0x263F8D538];
  sub_251002700(255, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
  uint64_t v28 = v27;
  unint64_t v29 = sub_25100139C();
  uint64_t v56 = v26;
  uint64_t v57 = v28;
  uint64_t v58 = v28;
  unint64_t v59 = v29;
  unint64_t v60 = v29;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v56 = v26;
  uint64_t v57 = v25;
  uint64_t v58 = v28;
  unint64_t v59 = OpaqueTypeConformance2;
  unint64_t v60 = v29;
  swift_getOpaqueTypeConformance2();
  sub_2510381C0();
  uint64_t v31 = sub_251000B04(&qword_269B14788, (void (*)(uint64_t))sub_2510018B8);
  uint64_t v32 = v39;
  MEMORY[0x25338FFF0](v20, &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState, v14, v31);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v15 + 8);
  v33(v20, v14);
  swift_getKeyPath();
  uint64_t v46 = v40;
  uint64_t v47 = v41;
  double v48 = a4;
  double v49 = a5;
  double v50 = a6;
  sub_2510381C0();
  MEMORY[0x25338FFF0](v17, &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState, v14, v31);
  v33(v17, v14);
  MEMORY[0x253390020](v32, &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState, v14, v31);
  uint64_t v34 = v42;
  sub_2510382D0();
  uint64_t v56 = &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState;
  uint64_t v57 = v14;
  uint64_t v58 = v14;
  unint64_t v59 = v31;
  unint64_t v60 = v31;
  uint64_t v35 = swift_getOpaqueTypeConformance2();
  uint64_t v36 = v43;
  MEMORY[0x253390000](v34, &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState, v43, v35);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v36);
  v33(v17, v14);
  v33(v20, v14);
  return ((uint64_t (*)(char *, uint64_t))v33)(v32, v14);
}

uint64_t sub_250FFC7B8@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v31 = a1;
  sub_251001ADC();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  uint64_t v30 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251038DB0();
  MEMORY[0x270FA5388](v6 - 8);
  double v7 = MEMORY[0x263F8D538];
  sub_251002700(0, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v27 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v27 = (char *)&v27 - v20;
  double v32 = a2;
  sub_251038DA0();
  sub_251038220();
  unint64_t v21 = sub_25100139C();
  MEMORY[0x253390370](v18, *(void *)&v7, v9, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v18, v9);
  double v32 = 1.0;
  sub_251038DA0();
  sub_251038220();
  MEMORY[0x253390370](v15, *(void *)&v7, v9, v21);
  v22(v15, v9);
  double v32 = 1.0;
  sub_251038DA0();
  sub_251038220();
  MEMORY[0x253390370](v12, *(void *)&v7, v9, v21);
  v22(v12, v9);
  uint64_t v23 = v27;
  MEMORY[0x253390390](v27, *(void *)&v7, v9, v21);
  uint64_t v24 = v28;
  sub_251038640();
  double v32 = v7;
  uint64_t v33 = v9;
  uint64_t v34 = v9;
  unint64_t v35 = v21;
  unint64_t v36 = v21;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v29;
  sub_251038640();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v25);
  v22(v12, v9);
  v22(v15, v9);
  v22(v18, v9);
  return ((uint64_t (*)(char *, uint64_t))v22)(v23, v9);
}

uint64_t sub_250FFCC20@<X0>(uint64_t a1@<X8>, double a2@<D1>)
{
  uint64_t v31 = a1;
  sub_251001ADC();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  uint64_t v30 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251038DB0();
  MEMORY[0x270FA5388](v6 - 8);
  double v7 = MEMORY[0x263F8D538];
  sub_251002700(0, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v27 - v17;
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)&v27 - v20;
  double v32 = a2;
  sub_251038DA0();
  sub_251038220();
  unint64_t v22 = sub_25100139C();
  MEMORY[0x253390370](v18, *(void *)&v7, v9, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v18, v9);
  double v32 = 0.0;
  sub_251038DA0();
  sub_251038220();
  MEMORY[0x253390370](v15, *(void *)&v7, v9, v22);
  v23(v15, v9);
  double v32 = 0.0;
  sub_251038DA0();
  sub_251038220();
  MEMORY[0x253390370](v12, *(void *)&v7, v9, v22);
  v23(v12, v9);
  MEMORY[0x253390390](v21, *(void *)&v7, v9, v22);
  uint64_t v24 = v28;
  sub_251038640();
  double v32 = v7;
  uint64_t v33 = v9;
  uint64_t v34 = v9;
  unint64_t v35 = v22;
  unint64_t v36 = v22;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v29;
  sub_251038640();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v25);
  v23(v12, v9);
  v23(v15, v9);
  v23(v18, v9);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, v9);
}

double sub_250FFD07C(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v6 = *(void *)(v5 + 16);
  char v7 = sub_250FFA7EC(a1, *(void *)v2);
  if (v6 < 2)
  {
    if (v7) {
      return *(double *)(v2 + 48);
    }
    if ((sub_250FFA7EC(a1, v5) & 1) == 0) {
      return 0.26;
    }
    return *(double *)(v2 + 56);
  }
  if (a2)
  {
    double result = 1.0;
    if (v7) {
      return result;
    }
    return *(double *)(v2 + 56);
  }
  uint64_t v9 = v2 + 64;
  if (v7) {
    uint64_t v9 = v2 + 48;
  }
  return *(double *)v9;
}

void sub_250FFD120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v34 - v9;
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v34 - v12;
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4, v11);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
    uint64_t v27 = sub_251039070();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v26)(v7, *(void *)(v30 + 48) + v29 * v25, v4);
      sub_251000B04(&qword_26B210A90, MEMORY[0x263F42CD0]);
      char v32 = sub_2510390F0();
      uint64_t v33 = *v19;
      (*v19)(v7, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return;
      }
    }
    v33(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    uint64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v38) {
      return;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 4;
  if (v14 + 4 >= v38) {
    return;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_250FFD548(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_34;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }
    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    double v16 = *(double *)(*(void *)(v3 + 48) + 8 * v12);
    double result = sub_251039840();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(double *)(v19 + 8 * v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(double *)(v19 + 8 * v18) == v16) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_250FFD72C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_251039850();
  swift_bridgeObjectRetain();
  sub_251039200();
  uint64_t v8 = sub_251039890();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2510397F0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2510397F0() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_250FFE6B8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_250FFD8DC(double *a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_251039840();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_250FFE854(v9, isUniquelyReferenced_nonNull_native, a2);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  double v11 = *(double *)(v10 + 8 * v9);
  if (v11 != a2)
  {
    uint64_t v13 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v13;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_8;
      }
      double v11 = *(double *)(v10 + 8 * v9);
    }
    while (v11 != a2);
  }
  uint64_t result = 0;
  a2 = v11;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t sub_250FFD9EC(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = sub_251039070();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    double v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_251000B04(&qword_26B210A90, MEMORY[0x263F42CD0]);
      char v21 = sub_2510390F0();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_250FFE988((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_250FFDD10()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_251002700(0, &qword_269B147A8, MEMORY[0x263F8D310], MEMORY[0x263F8D320], MEMORY[0x263F8DBD8]);
  uint64_t v3 = sub_251039520();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v31 = v0;
  uint64_t v32 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v16 >= v8) {
      break;
    }
    uint64_t v17 = (void *)(v2 + 56);
    unint64_t v18 = *(void *)(v32 + 8 * v16);
    ++v11;
    if (!v18)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v8) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(v32 + 8 * v11);
      if (!v18)
      {
        int64_t v19 = v16 + 2;
        if (v19 >= v8)
        {
LABEL_31:
          swift_release();
          uint64_t v1 = v31;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            int64_t v11 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              goto LABEL_39;
            }
            if (v11 >= v8) {
              goto LABEL_31;
            }
            unint64_t v18 = *(void *)(v32 + 8 * v11);
            ++v19;
            if (v18) {
              goto LABEL_21;
            }
          }
        }
        int64_t v11 = v19;
      }
    }
LABEL_21:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_22:
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    sub_251039850();
    sub_251039200();
    uint64_t result = sub_251039890();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v21;
    v13[1] = v22;
    ++*(void *)(v4 + 16);
  }
  swift_release();
  uint64_t v1 = v31;
  uint64_t v17 = (void *)(v2 + 56);
LABEL_33:
  uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
  if (v30 > 63) {
    bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v17 = -1 << v30;
  }
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_250FFE000()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_251002700(0, &qword_269B14790, MEMORY[0x263F8D538], MEMORY[0x263F8D558], MEMORY[0x263F8DBD8]);
  uint64_t result = sub_251039520();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    unint64_t v27 = v1;
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = sub_251039840();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_250FFE2C0()
{
  uint64_t v1 = v0;
  uint64_t v42 = sub_251037740();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  int64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_250F99AB0();
  uint64_t v5 = sub_251039520();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
      uint64_t result = sub_251039070();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_250FFE6B8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_250FFDD10();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_250FFEC28();
      goto LABEL_22;
    }
    sub_250FFF258();
  }
  uint64_t v11 = *v4;
  sub_251039850();
  sub_251039200();
  uint64_t result = sub_251039890();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_2510397F0(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_251039800();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_2510397F0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *int64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_250FFE854(uint64_t result, char a2, double a3)
{
  unint64_t v4 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0) {
    goto LABEL_14;
  }
  if (a2)
  {
    sub_250FFE000();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_250FFEDF0();
      goto LABEL_14;
    }
    sub_250FFF50C();
  }
  uint64_t v8 = *v3;
  uint64_t result = sub_251039840();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v4 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(double *)(v10 + 8 * v4) == a3)
    {
LABEL_13:
      uint64_t result = sub_251039800();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        unint64_t v4 = (v4 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          break;
        }
        if (*(double *)(v10 + 8 * v4) == a3) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(void *)(v12 + 48) + 8 * v4) = a3;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_250FFE988(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  unint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_250FFE2C0();
  }
  else
  {
    if (v12 > v11)
    {
      sub_250FFEFB0();
      goto LABEL_12;
    }
    sub_250FFF7A8();
  }
  uint64_t v13 = *v3;
  sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
  uint64_t v14 = sub_251039070();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    unint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_251000B04(&qword_26B210A90, MEMORY[0x263F42CD0]);
      char v22 = sub_2510390F0();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_251039800();
  __break(1u);
  return result;
}

void *sub_250FFEC28()
{
  uint64_t v1 = v0;
  sub_251002700(0, &qword_269B147A8, MEMORY[0x263F8D310], MEMORY[0x263F8D320], MEMORY[0x263F8DBD8]);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_251039510();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_250FFEDF0()
{
  uint64_t v1 = v0;
  sub_251002700(0, &qword_269B14790, MEMORY[0x263F8D538], MEMORY[0x263F8D558], MEMORY[0x263F8DBD8]);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_251039510();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_250FFEFB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_251037740();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F99AB0();
  uint64_t v6 = *v0;
  uint64_t v7 = sub_251039510();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  uint64_t v23 = v1;
  uint64_t v24 = (const void *)(v6 + 56);
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, v24, 8 * v10);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v25) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v24 + v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_28;
      }
      unint64_t v20 = *((void *)v24 + v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_28;
        }
        unint64_t v20 = *((void *)v24 + v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_12:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v18, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v18, v5, v2);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_30;
  }
  unint64_t v20 = *((void *)v24 + v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v24 + v12);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_250FFF258()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_251002700(0, &qword_269B147A8, MEMORY[0x263F8D310], MEMORY[0x263F8D320], MEMORY[0x263F8DBD8]);
  uint64_t v3 = sub_251039520();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_32:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain_n();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_21;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v29) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_30;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v18 = v16 + 2;
        if (v18 >= v29)
        {
LABEL_30:
          uint64_t result = swift_release_n();
          uint64_t v1 = v0;
          goto LABEL_32;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v18);
        int64_t v11 = v18;
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_21:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_251039850();
    swift_bridgeObjectRetain();
    sub_251039200();
    uint64_t result = sub_251039890();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_250FFF50C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_251002700(0, &qword_269B14790, MEMORY[0x263F8D538], MEMORY[0x263F8D558], MEMORY[0x263F8DBD8]);
  uint64_t result = sub_251039520();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = sub_251039840();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_250FFF7A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_251037740();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_250F99AB0();
  uint64_t v7 = sub_251039520();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
    uint64_t result = sub_251039070();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_250FFFB54(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v37 = (char *)&v32 - v9;
  if (*(void *)(a2 + 16))
  {
    uint64_t v38 = a1;
    unint64_t v10 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v10)
    {
      unint64_t v11 = 0;
      uint64_t v35 = v5 + 16;
      int64_t v36 = (char *)(a2 + 56);
      unint64_t v12 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v33 = v5;
      uint64_t v34 = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      while (1)
      {
        if (v11 >= v10) {
          __break(1u);
        }
        uint64_t v13 = *(void *)(v5 + 72);
        unint64_t v14 = a1
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + v13 * v11;
        unint64_t v39 = v11 + 1;
        int64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
        v15(v37, v14, v4);
        sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
        uint64_t v16 = sub_251039070();
        uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v18 = v16 & ~v17;
        if ((*(void *)&v36[(v18 >> 3) & 0xFFFFFFFFFFFFFF8] >> v18)) {
          break;
        }
        int64_t v22 = *v12;
LABEL_11:
        v22(v37, v4);
        a1 = v38;
        unint64_t v11 = v39;
        unint64_t v10 = *(void *)(v38 + 16);
        if (v39 == v10) {
          goto LABEL_12;
        }
      }
      uint64_t v19 = a2;
      uint64_t v20 = ~v17;
      while (1)
      {
        v15(v7, *(void *)(v19 + 48) + v18 * v13, v4);
        sub_251000B04(&qword_26B210A90, MEMORY[0x263F42CD0]);
        char v21 = sub_2510390F0();
        int64_t v22 = *v12;
        (*v12)(v7, v4);
        if (v21) {
          break;
        }
        unint64_t v18 = (v18 + 1) & v20;
        if (((*(void *)&v36[(v18 >> 3) & 0xFFFFFFFFFFFFFF8] >> v18) & 1) == 0)
        {
          a2 = v19;
          uint64_t v5 = v33;
          goto LABEL_11;
        }
      }
      uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v22)(v37, v4);
      char v24 = *(unsigned char *)(v19 + 32);
      unint64_t v25 = (unint64_t)((1 << v24) + 63) >> 6;
      size_t v26 = 8 * v25;
      if ((v24 & 0x3Fu) <= 0xD
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
      {
        MEMORY[0x270FA5388](isStackAllocationSafe);
        memcpy((char *)&v32 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), v36, v26);
        sub_250FFFFC8((unint64_t *)((char *)&v32 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0)), v25, v19, v18, &v38);
        uint64_t v28 = v27;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v29 = (void *)swift_slowAlloc();
        memcpy(v29, v36, v26);
        sub_250FFFFC8((unint64_t *)v29, v25, v19, v18, &v38);
        uint64_t v28 = v30;
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x253391D80](v29, -1, -1);
      }
      return v28;
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  return a2;
}

void sub_250FFFFC8(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v10 = sub_251037740();
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v17.n128_f64[0] = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v22 = *(unint64_t *)((char *)a1 + v21);
  uint64_t v45 = a1;
  *(unint64_t *)((char *)a1 + v21) = v22 & ((-1 << a4) - 1);
  uint64_t v23 = v20 - 1;
  uint64_t v24 = *a5;
  unint64_t v25 = a5[1];
  unint64_t v26 = *(void *)(*a5 + 16);
  uint64_t v44 = a2;
  uint64_t v46 = v23;
  if (v25 == v26)
  {
    uint64_t v27 = a3;
LABEL_3:
    swift_retain();
    sub_2510003C0(v45, v44, v46, v27);
  }
  else
  {
    double v55 = v19;
    uint64_t v54 = v15 + 16;
    uint64_t v49 = v15 + 32;
    uint64_t v50 = v16;
    uint64_t v51 = v15;
    uint64_t v52 = a3 + 56;
    uint64_t v28 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v27 = a3;
    char v29 = a5;
    uint64_t v47 = a5;
    while (v25 < v26)
    {
      uint64_t v32 = v50;
      uint64_t v31 = v51;
      uint64_t v33 = *(unsigned __int8 *)(v51 + 80);
      uint64_t v53 = *(void *)(v51 + 72);
      uint64_t v34 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v51 + 16);
      v34(v50, v24 + ((v33 + 32) & ~v33) + v53 * v25, v10, v17);
      v29[1] = v25 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v55, v32, v10);
      sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
      uint64_t v35 = sub_251039070();
      uint64_t v36 = -1 << *(unsigned char *)(v27 + 32);
      unint64_t v37 = v35 & ~v36;
      if ((*(void *)(v52 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37))
      {
        uint64_t v48 = (unint64_t)v28 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v38 = v27;
        uint64_t v39 = ~v36;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v34)(v12, *(void *)(v38 + 48) + v37 * v53, v10);
          sub_251000B04(&qword_26B210A90, MEMORY[0x263F42CD0]);
          char v40 = sub_2510390F0();
          uint64_t v30 = *v28;
          (*v28)(v12, v10);
          if (v40) {
            break;
          }
          unint64_t v37 = (v37 + 1) & v39;
          if (((*(void *)(v52 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          {
            uint64_t v27 = v38;
            char v29 = v47;
            goto LABEL_6;
          }
        }
        v30(v55, v10);
        uint64_t v41 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v42 = *(unint64_t *)((char *)v45 + v41);
        *(unint64_t *)((char *)v45 + v41) = v42 & ~(1 << v37);
        if ((v42 & (1 << v37)) != 0)
        {
          uint64_t v43 = v46 - 1;
          if (__OFSUB__(v46, 1)) {
            goto LABEL_20;
          }
          uint64_t v27 = v38;
          char v29 = v47;
          --v46;
          if (!v43) {
            return;
          }
        }
        else
        {
          uint64_t v27 = v38;
          char v29 = v47;
        }
      }
      else
      {
        uint64_t v30 = *v28;
LABEL_6:
        v30(v55, v10);
      }
      uint64_t v24 = *v29;
      unint64_t v25 = v29[1];
      unint64_t v26 = *(void *)(*v29 + 16);
      if (v25 == v26) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
}

uint64_t sub_2510003C0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = sub_251037740();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_250F99AB0();
  uint64_t result = sub_251039530();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
    uint64_t result = sub_251039070();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

BOOL sub_251000748(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251001484();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  sub_251001534(a1, (uint64_t)v13);
  sub_251001534(a2, v15);
  unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v13, 1, v4) == 1)
  {
    BOOL v17 = 1;
    int v18 = v16(v15, 1, v4);
    uint64_t v19 = (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection;
    if (v18 == 1) {
      goto LABEL_8;
    }
  }
  else
  {
    sub_251001534((uint64_t)v13, (uint64_t)v10);
    if (v16(v15, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      sub_251000B04(&qword_26B210A98, MEMORY[0x263F42CD0]);
      sub_251039240();
      sub_251039240();
      BOOL v17 = v22[1] == v22[0];
      uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
      v20(v7, v4);
      v20(v10, v4);
      uint64_t v19 = (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  BOOL v17 = 0;
  uint64_t v19 = (uint64_t (*)(void))sub_251001484;
LABEL_8:
  sub_251001598((uint64_t)v13, v19);
  return v17;
}

BOOL sub_251000A48(uint64_t a1, uint64_t a2)
{
  sub_250FFD120(*(void *)a1, *(void *)a2);
  if ((v4 & 1) != 0
    && (sub_250FFD120(*(void *)(a1 + 8), *(void *)(a2 + 8)), (v5 & 1) != 0)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48)
    && *(double *)(a1 + 56) == *(double *)(a2 + 56))
  {
    return *(double *)(a1 + 64) == *(double *)(a2 + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_251000B04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_251000B4C@<X0>(uint64_t a1@<X8>)
{
  return sub_250FFB528(a1, *(double *)(v1 + 16));
}

void sub_251000B54()
{
  if (!qword_269B14708)
  {
    sub_251000D08();
    sub_2510012EC();
    sub_251000E94();
    sub_251000FF0();
    sub_251001124();
    sub_251001228();
    sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14708);
    }
  }
}

void sub_251000D08()
{
  if (!qword_269B14710)
  {
    sub_251000E94();
    sub_2510012EC();
    sub_251000FF0();
    sub_251001124();
    sub_251001228();
    sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14710);
    }
  }
}

void sub_251000E94()
{
  if (!qword_269B14718)
  {
    sub_251000FF0();
    sub_2510012EC();
    sub_251001124();
    sub_251001228();
    sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14718);
    }
  }
}

void sub_251000FF0()
{
  if (!qword_269B14720)
  {
    sub_251001124();
    sub_2510012EC();
    sub_251001228();
    sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14720);
    }
  }
}

void sub_251001124()
{
  if (!qword_269B14728)
  {
    sub_251001228();
    sub_2510012EC();
    sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14728);
    }
  }
}

void sub_251001228()
{
  if (!qword_269B14730)
  {
    sub_2510012EC();
    sub_251000B04(&qword_269B14750, (void (*)(uint64_t))sub_2510012EC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14730);
    }
  }
}

void sub_2510012EC()
{
  if (!qword_269B14738)
  {
    sub_251002700(255, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
    sub_25100139C();
    unint64_t v0 = sub_2510381B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14738);
    }
  }
}

unint64_t sub_25100139C()
{
  unint64_t result = qword_269B14748;
  if (!qword_269B14748)
  {
    sub_251002700(255, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14748);
  }
  return result;
}

uint64_t sub_251001420()
{
  return sub_250FFC104(*(double *)(v0 + 16), 1.0);
}

uint64_t sub_251001440()
{
  return sub_250FFC104(*(double *)(v0 + 16), 0.0);
}

uint64_t sub_251001460()
{
  return sub_250FFC104(*(double *)(v0 + 16), 0.26);
}

void sub_251001484()
{
  if (!qword_269B14758)
  {
    type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B14758);
    }
  }
}

uint64_t type metadata accessor for OvernightMetricsChartAnimationValues.Selection()
{
  uint64_t result = qword_269B14798;
  if (!qword_269B14798) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_251001534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_251001598(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2510015F8(uint64_t a1)
{
  uint64_t v2 = sub_251037740();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_251000B04(&qword_26B210A88, MEMORY[0x263F42CD0]);
  uint64_t result = sub_251039370();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      sub_250FFD9EC((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

void sub_251001794(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_2510382A0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_2510017DC()
{
  return sub_251001BD0((uint64_t (*)(void, void, double, double, double))sub_250FFC2F0);
}

void sub_2510017F4()
{
  if (!qword_269B14768)
  {
    sub_2510018B8();
    sub_251000B04(&qword_269B14788, (void (*)(uint64_t))sub_2510018B8);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14768);
    }
  }
}

void sub_2510018B8()
{
  if (!qword_269B14770)
  {
    sub_2510019E0();
    sub_251001ADC();
    sub_251002700(255, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
    sub_25100139C();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_2510381B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14770);
    }
  }
}

void sub_2510019E0()
{
  if (!qword_269B14778)
  {
    sub_251001ADC();
    sub_251002700(255, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
    sub_25100139C();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14778);
    }
  }
}

void sub_251001ADC()
{
  if (!qword_269B14780)
  {
    sub_251002700(255, &qword_269B14740, MEMORY[0x263F8D538], MEMORY[0x263F1BB18], MEMORY[0x263F18AF8]);
    sub_25100139C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14780);
    }
  }
}

uint64_t sub_251001BA0()
{
  return sub_251001BD0((uint64_t (*)(void, void, double, double, double))sub_250FFC7B8);
}

uint64_t sub_251001BB8()
{
  return sub_251001BD0((uint64_t (*)(void, void, double, double, double))sub_250FFCC20);
}

uint64_t sub_251001BD0(uint64_t (*a1)(void, void, double, double, double))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48));
}

uint64_t *sub_251001BE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_251037740();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_251001D34(uint64_t a1)
{
  uint64_t v2 = sub_251037740();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_251001E04(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_251001F14(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_251002088(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_251002198(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_25100230C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251002320);
}

uint64_t sub_251002320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_25100238C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510023A0);
}

uint64_t sub_2510023A0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t sub_251002420(uint64_t a1)
{
  uint64_t v2 = sub_251037740();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 1, v2);
}

uint64_t sub_251002488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 1, v4);
}

uint64_t sub_2510024F8()
{
  uint64_t result = sub_251037740();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for OvernightMetricsChartAnimationValues.SevenDayMetricsState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OvernightMetricsChartAnimationValues.SevenDayMetricsState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for OvernightMetricsChartAnimationValues.SevenDayMetricsState(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartAnimationValues.SevenDayMetricsState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartAnimationValues.SevenDayMetricsState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartAnimationValues.SevenDayMetricsState()
{
  return &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState;
}

void sub_251002700(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_251002760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v94 = a6;
  uint64_t v95 = a4;
  uint64_t v96 = a3;
  uint64_t v78 = a1;
  uint64_t v11 = sub_251039180();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v76 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_2510378C0();
  uint64_t v97 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v75 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_251037380();
  uint64_t v86 = *(void *)(v14 - 8);
  uint64_t v87 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v85 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_251037280();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v84 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_251037510();
  MEMORY[0x270FA5388](v18 - 8);
  long long v83 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_2510374F0();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v82 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_251037460();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v92 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251004CD8(0, &qword_26B210A58, MEMORY[0x263F06FF0]);
  MEMORY[0x270FA5388](v24 - 8);
  unint64_t v26 = (char *)&v74 - v25;
  sub_251004CD8(0, &qword_26B210A60, MEMORY[0x263F07008]);
  MEMORY[0x270FA5388](v27 - 8);
  BOOL v29 = (char *)&v74 - v28;
  uint64_t v81 = sub_2510373B0();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v31 = (char *)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v74 - v33;
  double v35 = *(double *)a5;
  unsigned __int8 v36 = *(unsigned char *)(a5 + 8);
  int v79 = v36;
  uint64_t v37 = sub_251037740();
  uint64_t v90 = *(void *)(v37 - 8);
  uint64_t v91 = v37;
  (*(void (**)(uint64_t, uint64_t))(v90 + 16))(a7, a1);
  uint64_t v38 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v39 = a7 + v38[5];
  uint64_t v40 = sub_251037400();
  uint64_t v88 = *(void *)(v40 - 8);
  uint64_t v89 = v40;
  (*(void (**)(uint64_t, uint64_t))(v88 + 16))(v39, a2);
  sub_25100613C(v96, a7 + v38[6], (uint64_t (*)(void))sub_250F26E08);
  sub_25100613C(v95, a7 + v38[7], (uint64_t (*)(void))sub_250F26E08);
  uint64_t v41 = v38[8];
  uint64_t v77 = a7;
  uint64_t v42 = a7 + v41;
  double v74 = v35;
  *(double *)uint64_t v42 = v35;
  *(unsigned char *)(v42 + 8) = v36;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(a7 + v38[9], v94, v93);
  uint64_t v100 = 0;
  unint64_t v101 = 0xE000000000000000;
  uint64_t v43 = sub_2510372D0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v29, 1, 1, v43);
  uint64_t v44 = sub_2510372C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v26, 1, 1, v44);
  sub_251037440();
  sub_2510374B0();
  sub_251037500();
  sub_251037270();
  sub_2510372E0();
  uint64_t v45 = v85;
  sub_251037360();
  sub_2510373A0();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v45, v87);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v80 + 8);
  uint64_t v47 = v31;
  uint64_t v48 = v81;
  v46(v47, v81);
  sub_251004C70(&qword_26B210A68, MEMORY[0x263F07258]);
  sub_2510373F0();
  uint64_t v49 = v34;
  uint64_t v50 = v94;
  uint64_t v51 = v77;
  uint64_t v52 = v78;
  v46(v49, v48);
  uint64_t v53 = v93;
  uint64_t v54 = v98;
  unint64_t v55 = v99;
  swift_bridgeObjectRelease();
  uint64_t v100 = v54;
  unint64_t v101 = v55;
  sub_251039210();
  SleepingSampleDataType.localizedName.getter();
  sub_251039210();
  swift_bridgeObjectRelease();
  unint64_t v56 = v101;
  uint64_t v57 = (void *)(v51 + v38[10]);
  void *v57 = v100;
  v57[1] = v56;
  uint64_t v58 = SleepingSampleDataType.localizedName.getter();
  unint64_t v59 = (uint64_t *)(v51 + v38[11]);
  uint64_t *v59 = v58;
  v59[1] = v60;
  if ((v79 & 1) != 0
    || (uint64_t v61 = v97,
        uint64_t v62 = v75,
        (*(void (**)(char *, void, uint64_t))(v97 + 104))(v75, *MEMORY[0x263F42E10], v53),
        sub_251004C70(&qword_26B210AC8, MEMORY[0x263F42E30]),
        char v63 = sub_2510390F0(),
        int8x16_t v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8),
        v64((uint64_t)v62, v53),
        (v63 & 1) != 0))
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v66 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    uint64_t v67 = sub_2510391D0();
    uint64_t v69 = v68;
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v50, v53);
  }
  else
  {
    sub_25102F51C(v74);
    uint64_t v67 = v70;
    uint64_t v69 = v71;
    v64(v50, v53);
  }
  sub_2510061A4(v95, (uint64_t (*)(void))sub_250F26E08);
  sub_2510061A4(v96, (uint64_t (*)(void))sub_250F26E08);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(a2, v89);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v52, v91);
  uint64_t v73 = (uint64_t *)(v51 + v38[12]);
  uint64_t *v73 = v67;
  v73[1] = v69;
  return result;
}

uint64_t sub_2510030D4()
{
  return sub_251039890();
}

uint64_t sub_2510031C0()
{
  return sub_251039080();
}

uint64_t sub_251003294()
{
  return sub_251039890();
}

uint64_t sub_25100337C()
{
  sub_251037740();
  sub_251004C70(&qword_26B210A98, MEMORY[0x263F42CD0]);
  sub_251039240();
  sub_251039240();
  if (v3 == v2) {
    char v0 = sub_2510373D0();
  }
  else {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t sub_251003450()
{
  sub_251037740();
  sub_251004C70(&qword_26B210A88, MEMORY[0x263F42CD0]);
  sub_251039080();
  uint64_t v1 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  sub_251037400();
  sub_251004C70((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
  sub_251039080();
  sub_251039080();
  sub_250F26E08();
  sub_251039080();
  sub_251039080();
  sub_251039080();
  if (*(unsigned char *)(v0 + *(int *)(v1 + 32) + 8))
  {
    sub_251039860();
  }
  else
  {
    sub_251039860();
    sub_251039880();
  }
  sub_2510378C0();
  sub_251004C70(&qword_26B210AC0, MEMORY[0x263F42E30]);
  sub_251039080();
  swift_bridgeObjectRetain();
  sub_251039200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_251039200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_251039200();
  return swift_bridgeObjectRelease();
}

unint64_t sub_2510036D4(char a1)
{
  unint64_t result = 0x6570795461746164;
  switch(a1)
  {
    case 1:
      unint64_t result = 1702125924;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD000000000000023;
      break;
    case 4:
      unint64_t result = 0x65756C6176;
      break;
    case 5:
      unint64_t result = 0x6966697373616C63;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_251003804(void *a1)
{
  uint64_t v3 = v1;
  sub_251005FF4(0, &qword_269B147C0, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_251005F4C();
  sub_2510398B0();
  LOBYTE(v14) = 0;
  sub_251037740();
  sub_251004C70(&qword_269B13C10, MEMORY[0x263F42CD0]);
  sub_2510397A0();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    LOBYTE(v14) = 1;
    sub_251037400();
    sub_251004C70(&qword_269B13B10, MEMORY[0x263F07490]);
    sub_2510397A0();
    LOBYTE(v14) = 2;
    sub_250F26E08();
    sub_251006058(&qword_269B13B08, &qword_269B13B10);
    sub_2510397A0();
    LOBYTE(v14) = 3;
    sub_2510397A0();
    uint64_t v11 = (uint64_t *)(v3 + *(int *)(v10 + 32));
    uint64_t v12 = *v11;
    LOBYTE(v11) = *((unsigned char *)v11 + 8);
    uint64_t v14 = v12;
    char v15 = (char)v11;
    char v16 = 4;
    sub_251005FA0();
    sub_2510397A0();
    LOBYTE(v14) = 5;
    sub_2510378C0();
    sub_251004C70(&qword_269B13B38, MEMORY[0x263F42E30]);
    sub_2510397A0();
    LOBYTE(v14) = 6;
    sub_251039770();
    LOBYTE(v14) = 7;
    sub_251039770();
    LOBYTE(v14) = 8;
    sub_251039770();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_251003C34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v52 = sub_2510378C0();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v44 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F26E08();
  uint64_t v47 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v45 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v46 = (char *)&v43 - v7;
  uint64_t v8 = sub_251037400();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_251037740();
  uint64_t v55 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251005FF4(0, &qword_269B147D8, MEMORY[0x263F8E040]);
  uint64_t v48 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v58 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  MEMORY[0x270FA5388](v58);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[3];
  unint64_t v56 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_251005F4C();
  uint64_t v49 = v17;
  uint64_t v21 = v57;
  sub_2510398A0();
  uint64_t v51 = v11;
  if (v21) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
  }
  uint64_t v22 = v15;
  LOBYTE(v59) = 0;
  sub_251004C70(&qword_269B13C70, MEMORY[0x263F42CD0]);
  uint64_t v23 = v48;
  sub_251039730();
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v19, v13, v11);
  LOBYTE(v59) = 1;
  sub_251004C70(&qword_269B13B50, MEMORY[0x263F07490]);
  uint64_t v24 = v54;
  sub_251039730();
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v19[*(int *)(v58 + 20)], v10, v24);
  LOBYTE(v59) = 2;
  sub_251006058(&qword_269B13B48, &qword_269B13B50);
  uint64_t v25 = (uint64_t)v46;
  sub_251039730();
  unint64_t v26 = (int *)v58;
  sub_250F7C6CC(v25, (uint64_t)&v19[*(int *)(v58 + 24)]);
  LOBYTE(v59) = 3;
  uint64_t v27 = (uint64_t)v45;
  sub_251039730();
  sub_250F7C6CC(v27, (uint64_t)&v19[v26[7]]);
  char v61 = 4;
  sub_2510060E8();
  sub_251039730();
  uint64_t v28 = (uint64_t)v56;
  char v29 = v60;
  uint64_t v30 = &v19[v26[8]];
  *(void *)uint64_t v30 = v59;
  v30[8] = v29;
  LOBYTE(v59) = 5;
  sub_251004C70(&qword_269B13B68, MEMORY[0x263F42E30]);
  uint64_t v31 = v52;
  sub_251039730();
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v19[v26[9]], v44, v31);
  LOBYTE(v59) = 6;
  uint64_t v32 = sub_251039700();
  uint64_t v33 = (uint64_t *)&v19[v26[10]];
  *uint64_t v33 = v32;
  v33[1] = v34;
  LOBYTE(v59) = 7;
  uint64_t v35 = sub_251039700();
  unsigned __int8 v36 = (uint64_t *)&v19[v26[11]];
  *unsigned __int8 v36 = v35;
  v36[1] = v37;
  LOBYTE(v59) = 8;
  uint64_t v38 = sub_251039700();
  uint64_t v40 = v39;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v49, v23);
  uint64_t v41 = (uint64_t *)&v19[v26[12]];
  *uint64_t v41 = v38;
  v41[1] = v40;
  sub_25100613C((uint64_t)v19, v43, type metadata accessor for IndividualOvernightMetricChartPoint);
  __swift_destroy_boxed_opaque_existential_0(v28);
  return sub_2510061A4((uint64_t)v19, type metadata accessor for IndividualOvernightMetricChartPoint);
}

unint64_t sub_2510045B8()
{
  return sub_2510036D4(*v0);
}

uint64_t sub_2510045C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_251006C1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_2510045E8(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_2510045F4(uint64_t a1)
{
  unint64_t v2 = sub_251005F4C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_251004630(uint64_t a1)
{
  unint64_t v2 = sub_251005F4C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25100466C()
{
  return sub_251039890();
}

uint64_t sub_2510046B0()
{
  return sub_251039890();
}

uint64_t sub_2510046EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_251003C34(a1, a2);
}

uint64_t sub_251004704(void *a1)
{
  return sub_251003804(a1);
}

uint64_t sub_25100471C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v2, v5);
  uint64_t v6 = v2 + *(int *)(a1 + 20);
  uint64_t v7 = a2 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint.ID(0) + 20);
  uint64_t v8 = sub_251037400();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  return v9(v7, v6, v8);
}

uint64_t sub_2510047E8(uint64_t a1, uint64_t a2)
{
  sub_250F26E08();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v52 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v52 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v52 - v14;
  sub_251037740();
  sub_251004C70(&qword_26B210A98, MEMORY[0x263F42CD0]);
  sub_251039240();
  sub_251039240();
  if (v57 != v56) {
    goto LABEL_12;
  }
  uint64_t v16 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if ((sub_2510373D0() & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v52 = (int *)v16;
  uint64_t v53 = a1;
  uint64_t v17 = *(int *)(v16 + 24);
  uint64_t v18 = a1 + v17;
  uint64_t v54 = a2;
  uint64_t v19 = a2 + v17;
  sub_251037400();
  uint64_t v55 = sub_251004C70(&qword_269B13308, MEMORY[0x263F07490]);
  char v20 = sub_2510390F0();
  sub_25100613C(v18, (uint64_t)v15, (uint64_t (*)(void))sub_250F26E08);
  sub_25100613C(v19, (uint64_t)v12, (uint64_t (*)(void))sub_250F26E08);
  if ((v20 & 1) == 0)
  {
    sub_2510061A4((uint64_t)v12, (uint64_t (*)(void))sub_250F26E08);
    uint64_t v35 = (uint64_t)v15;
LABEL_11:
    sub_2510061A4(v35, (uint64_t (*)(void))sub_250F26E08);
    goto LABEL_12;
  }
  char v21 = sub_2510390F0();
  sub_2510061A4((uint64_t)v12, (uint64_t (*)(void))sub_250F26E08);
  sub_2510061A4((uint64_t)v15, (uint64_t (*)(void))sub_250F26E08);
  if ((v21 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v22 = v52;
  uint64_t v23 = v52[7];
  uint64_t v24 = v53 + v23;
  uint64_t v25 = v54 + v23;
  char v26 = sub_2510390F0();
  sub_25100613C(v24, (uint64_t)v9, (uint64_t (*)(void))sub_250F26E08);
  sub_25100613C(v25, (uint64_t)v6, (uint64_t (*)(void))sub_250F26E08);
  if ((v26 & 1) == 0)
  {
    sub_2510061A4((uint64_t)v6, (uint64_t (*)(void))sub_250F26E08);
    uint64_t v35 = (uint64_t)v9;
    goto LABEL_11;
  }
  char v27 = sub_2510390F0();
  sub_2510061A4((uint64_t)v6, (uint64_t (*)(void))sub_250F26E08);
  sub_2510061A4((uint64_t)v9, (uint64_t (*)(void))sub_250F26E08);
  if ((v27 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v28 = v22[8];
  uint64_t v30 = v53;
  uint64_t v29 = v54;
  uint64_t v31 = (double *)(v53 + v28);
  char v32 = *(unsigned char *)(v53 + v28 + 8);
  uint64_t v33 = (double *)(v54 + v28);
  int v34 = *(unsigned __int8 *)(v54 + v28 + 8);
  if (v32)
  {
    if (v34) {
      goto LABEL_18;
    }
LABEL_12:
    char v36 = 0;
    return v36 & 1;
  }
  if (*v31 != *v33) {
    LOBYTE(v34) = 1;
  }
  if (v34) {
    goto LABEL_12;
  }
LABEL_18:
  if ((sub_2510378B0() & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v38 = v22[10];
  uint64_t v39 = *(void *)(v30 + v38);
  uint64_t v40 = *(void *)(v30 + v38 + 8);
  uint64_t v41 = (void *)(v29 + v38);
  if (v39 == *v41 && v40 == v41[1] || (v42 = sub_2510397F0(), char v36 = 0, (v42 & 1) != 0))
  {
    uint64_t v43 = v22[11];
    uint64_t v44 = *(void *)(v30 + v43);
    uint64_t v45 = *(void *)(v30 + v43 + 8);
    uint64_t v46 = (void *)(v29 + v43);
    if (v44 == *v46 && v45 == v46[1] || (v47 = sub_2510397F0(), char v36 = 0, (v47 & 1) != 0))
    {
      uint64_t v48 = v22[12];
      uint64_t v49 = *(void *)(v30 + v48);
      uint64_t v50 = *(void *)(v30 + v48 + 8);
      uint64_t v51 = (void *)(v29 + v48);
      if (v49 == *v51 && v50 == v51[1]) {
        char v36 = 1;
      }
      else {
        char v36 = sub_2510397F0();
      }
    }
  }
  return v36 & 1;
}

uint64_t sub_251004C70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for IndividualOvernightMetricChartPoint(uint64_t a1)
{
  return sub_250F397EC(a1, qword_26B210AE8);
}

void sub_251004CD8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

char *sub_251004D2C(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v40 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037740();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_251037400();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = (char *)a2 + v13;
    v12(&a1[v13], (char *)a2 + v13, v11);
    sub_250F26E08();
    uint64_t v17 = v16;
    v12(&v14[*(int *)(v16 + 36)], &v15[*(int *)(v16 + 36)], v11);
    uint64_t v18 = a3[7];
    uint64_t v19 = &a1[v18];
    char v20 = (char *)a2 + v18;
    v12(&a1[v18], (char *)a2 + v18, v11);
    v12(&v19[*(int *)(v17 + 36)], &v20[*(int *)(v17 + 36)], v11);
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = &a1[v21];
    uint64_t v24 = (char *)a2 + v21;
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = &a1[v22];
    char v26 = (char *)a2 + v22;
    uint64_t v27 = sub_2510378C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    uint64_t v30 = &a1[v28];
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *(void *)uint64_t v30 = *v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = &a1[v29];
    int v34 = (uint64_t *)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    *(void *)uint64_t v33 = *v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = a3[12];
    uint64_t v37 = &a1[v36];
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = v38[1];
    *(void *)uint64_t v37 = *v38;
    *((void *)v37 + 1) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_251004F88(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = a1 + a2[6];
  v7(v8, v6);
  sub_250F26E08();
  uint64_t v10 = v9;
  v7(v8 + *(int *)(v9 + 36), v6);
  uint64_t v11 = a1 + a2[7];
  v7(v11, v6);
  v7(v11 + *(int *)(v10 + 36), v6);
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_251005130(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_250F26E08();
  uint64_t v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  uint64_t v26 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)(a1 + v27);
  uint64_t v30 = (void *)(a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = (void *)(a1 + v28);
  uint64_t v33 = (void *)(a2 + v28);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25100533C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_250F26E08();
  uint64_t v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  char v23 = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = v23;
  uint64_t v24 = a3[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  uint64_t v28 = a3[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[11];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[12];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_251005584(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_250F26E08();
  uint64_t v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  uint64_t v26 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  uint64_t v27 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_251005764(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_250F26E08();
  uint64_t v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  uint64_t v26 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[11];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[12];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_251005978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25100598C);
}

uint64_t sub_25100598C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_251037400();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  sub_250F26E08();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_9;
  }
  uint64_t v15 = sub_2510378C0();
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_9;
  }
  unint64_t v17 = *(void *)(a1 + a3[10] + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

uint64_t sub_251005B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251005B50);
}

uint64_t sub_251005B50(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_251037400();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      sub_250F26E08();
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = sub_2510378C0();
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + a4[10] + 8) = (a2 - 1);
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[9];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_251005CFC()
{
  sub_251037740();
  if (v0 <= 0x3F)
  {
    sub_251037400();
    if (v1 <= 0x3F)
    {
      sub_250F26E08();
      if (v2 <= 0x3F)
      {
        sub_2510378C0();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_251005E54()
{
  return sub_251004C70(&qword_269B13390, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint.ID);
}

uint64_t type metadata accessor for IndividualOvernightMetricChartPoint.ID(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B147E8);
}

uint64_t sub_251005EBC()
{
  return sub_251004C70(&qword_269B147B0, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint.ID);
}

uint64_t sub_251005F04()
{
  return sub_251004C70(&qword_269B147B8, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
}

unint64_t sub_251005F4C()
{
  unint64_t result = qword_269B147C8;
  if (!qword_269B147C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B147C8);
  }
  return result;
}

unint64_t sub_251005FA0()
{
  unint64_t result = qword_269B147D0;
  if (!qword_269B147D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B147D0);
  }
  return result;
}

void sub_251005FF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_251005F4C();
    unint64_t v7 = a3(a1, &type metadata for IndividualOvernightMetricChartPoint.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_251006058(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F26E08();
    sub_251004C70(a2, MEMORY[0x263F07490]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2510060E8()
{
  unint64_t result = qword_269B147E0;
  if (!qword_269B147E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B147E0);
  }
  return result;
}

uint64_t sub_25100613C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2510061A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndividualOvernightMetricChartPoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IndividualOvernightMetricChartPoint.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x251006360);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IndividualOvernightMetricChartPoint.CodingKeys()
{
  return &type metadata for IndividualOvernightMetricChartPoint.CodingKeys;
}

uint64_t *sub_251006398(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037740();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_251037400();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_2510064A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t sub_251006548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_251006600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_2510066B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_251006770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_251006828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25100683C);
}

uint64_t sub_25100683C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_251037400();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_251006934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251006948);
}

uint64_t sub_251006948(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_251037400();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_251006A4C()
{
  uint64_t result = sub_251037740();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_251037400();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_251006B18()
{
  unint64_t result = qword_269B147F8;
  if (!qword_269B147F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B147F8);
  }
  return result;
}

unint64_t sub_251006B70()
{
  unint64_t result = qword_269B14800;
  if (!qword_269B14800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14800);
  }
  return result;
}

unint64_t sub_251006BC8()
{
  unint64_t result = qword_269B14808;
  if (!qword_269B14808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_269B14808);
  }
  return result;
}

uint64_t sub_251006C1C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
  if (v2 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000025103FDD0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x8000000251040D60 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6966697373616C63 && a2 == 0xEE006E6F69746163 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000251040D90 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000251040DB0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000251040960)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_251006FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F8F520];
  sub_251010808(0, &qword_26B210BE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v17 - v8;
  sub_25100902C(a1, (uint64_t)v17 - v8, &qword_26B210BE0, v6);
  uint64_t v10 = sub_251039300();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_25100F18C((uint64_t)v9, &qword_26B210BE0, MEMORY[0x263F8F520]);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = sub_251039280();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_2510392F0();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

uint64_t SleepingSampleViewModelProvider.DataFreshness.hash(into:)()
{
  return sub_251039860();
}

BOOL static SleepingSampleViewModelProvider.DataFreshness.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleViewModelProvider.DataFreshness.hashValue.getter()
{
  return sub_251039890();
}

uint64_t sub_25100726C()
{
  uint64_t v1 = (uint64_t)v0;
  v19[2] = *v0;
  uint64_t v2 = sub_251037C90();
  uint64_t v20 = *(void *)(v2 - 8);
  uint64_t v21 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2510376B0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v25 = v0;
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v9 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_2510108CC(&qword_269B13B88, MEMORY[0x263F42C20]);
  LOBYTE(v9) = sub_2510390F0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    swift_getKeyPath();
    uint64_t v24 = v1;
    sub_251037530();
    uint64_t result = swift_release();
    if (*(void *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask))
    {
      swift_getKeyPath();
      uint64_t v24 = v1;
      sub_251037530();
      swift_release();
      uint64_t v11 = (unsigned char *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
      swift_beginAccess();
      if (*v11 == 2)
      {
        sub_251037C70();
        uint64_t v12 = sub_251037C80();
        os_log_type_t v13 = sub_2510393D0();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          uint64_t v23 = v15;
          *(_DWORD *)uint64_t v14 = 136446210;
          v19[1] = v14 + 4;
          uint64_t v16 = sub_251039940();
          uint64_t v22 = sub_250F32744(v16, v17, &v23);
          sub_2510394A0();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_250F1E000, v12, v13, "[%{public}s] Indicating current view models are now stale for updated day range", v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x253391D80](v15, -1, -1);
          MEMORY[0x253391D80](v14, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v21);
        uint64_t KeyPath = swift_getKeyPath();
        MEMORY[0x270FA5388](KeyPath);
        v19[-2] = v1;
        LOBYTE(v19[-1]) = 1;
        uint64_t v23 = v1;
        sub_251037520();
        swift_release();
      }
      return sub_25100A21C();
    }
  }
  return result;
}

void (*sub_251007738(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_2510376B0();
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[11] = v5;
  size_t v7 = *(void *)(v5 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  uint64_t v8 = malloc(v7);
  uint64_t v9 = OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  v3[14] = v8;
  v3[15] = v9;
  uint64_t v10 = v1 + v9;
  swift_beginAccess();
  uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 16);
  v3[16] = v11;
  v3[17] = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v8, v10, v4);
  return sub_251007860;
}

void sub_251007860(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void (**)(void *, void *, uint64_t))(*(void *)a1 + 128);
  uint64_t v5 = *(void **)(*(void *)a1 + 112);
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  uint64_t v6 = *(void **)(*(void *)a1 + 104);
  os_log_type_t v13 = *(void **)(*(void *)a1 + 96);
  uint64_t v7 = *(void *)(*(void *)a1 + 80);
  uint64_t v8 = *(void *)(*(void *)a1 + 88);
  uint64_t v9 = (void *)(*(void *)(*(void *)a1 + 72) + v4);
  if (a2)
  {
    v3(v6, v5, v7);
    uint64_t v10 = v13;
    v3(v13, v9, v7);
    swift_beginAccess();
    (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v9, v6, v7);
    swift_endAccess();
    sub_25100726C();
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v6, v7);
    v11(v13, v7);
    v11(v5, v7);
  }
  else
  {
    v3(v6, (void *)(v2[9] + v4), v2[10]);
    swift_beginAccess();
    (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v9, v5, v7);
    swift_endAccess();
    sub_25100726C();
    uint64_t v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v5, v7);
    v12(v6, v7);
    uint64_t v10 = v13;
  }
  free(v5);
  free(v6);
  free(v10);
  free(v2);
}

uint64_t sub_251007A34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  uint64_t v5 = sub_2510376B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_251007B30(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_2510376B0();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = *a2;
  swift_getKeyPath();
  uint64_t v12 = v9;
  os_log_type_t v13 = v8;
  uint64_t v14 = v9;
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037520();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_251007CB8@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  uint64_t v4 = sub_2510376B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SleepingSampleViewModelProvider()
{
  uint64_t result = qword_26B210578;
  if (!qword_26B210578) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_251007E08(uint64_t a1)
{
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037520();
  swift_release();
  uint64_t v2 = sub_2510376B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_251007F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v16[-v10];
  uint64_t v12 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16);
  v12(&v16[-v10], a2, v4, v9);
  uint64_t v13 = a1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  ((void (*)(unsigned char *, uint64_t, uint64_t))v12)(v7, v13, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 24))(v13, v11, v4);
  swift_endAccess();
  sub_25100726C();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v14(v11, v4);
  return ((uint64_t (*)(unsigned char *, uint64_t))v14)(v7, v4);
}

uint64_t sub_2510080C0()
{
  return sub_251007F0C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void (*sub_2510080DC(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_251037550();
  swift_release();
  v3[7] = sub_251007738(v3);
  return sub_2510081F8;
}

void sub_2510081F8(void *a1)
{
}

uint64_t (*sub_251008204())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_251008260@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v4 = (unsigned char *)(v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
  uint64_t result = swift_beginAccess();
  *a2 = *v4;
  return result;
}

uint64_t sub_251008328()
{
  return swift_release();
}

uint64_t sub_2510083F8@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_2510084C8()
{
  return swift_release();
}

uint64_t sub_251008598()
{
  return sub_251010914();
}

void (*sub_2510085B0(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_251037550();
  swift_release();
  v3[7] = sub_251008204();
  return sub_2510086CC;
}

void sub_2510086CC(void *a1)
{
}

void sub_2510086D8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  void *v1 = v1[4];
  swift_getKeyPath();
  sub_251037540();
  swift_release();
  free(v1);
}

uint64_t sub_251008764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v45 = a1;
  uint64_t v3 = sub_2510376B0();
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x270FA5388](v3);
  char v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_251010808(0, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v44 = (char *)&v36 - v7;
  uint64_t v38 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v38);
  double v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v36 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v36 - v14;
  sub_251010808(0, qword_26B210D00, MEMORY[0x263F42EF8], v5);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v39 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v21 = sub_251008FC8();
  uint64_t v23 = v22;
  uint64_t v24 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  uint64_t v43 = v25 + 48;
  unsigned int v27 = v26(v23, 1, v24);
  uint64_t v46 = v26;
  if (v27)
  {
    ((void (*)(void *, void))v21)(v48, 0);
    uint64_t v28 = (uint64_t)v44;
    uint64_t v29 = v45;
  }
  else
  {
    uint64_t v37 = v21;
    __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
    sub_251037B90();
    sub_25100902C((uint64_t)v20, (uint64_t)v15, qword_26B210D00, MEMORY[0x263F42EF8]);
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = v23 + *(int *)(v24 + 24);
    sub_2510090AC(v30, (uint64_t)v12, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    sub_250F8E420((uint64_t)v15, v30);
    sub_2510090AC(v30, (uint64_t)v9, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    LOBYTE(v30) = sub_250F8D938((uint64_t)v9, (uint64_t)v12);
    sub_25100F12C((uint64_t)v9, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if ((v30 & 1) == 0) {
      sub_250F7E2F0();
    }
    sub_25100F12C((uint64_t)v15, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    sub_25100F12C((uint64_t)v12, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    sub_25100F18C((uint64_t)v20, qword_26B210D00, MEMORY[0x263F42EF8]);
    ((void (*)(void *, void))v37)(v48, 0);
    uint64_t v28 = (uint64_t)v44;
    uint64_t v29 = v45;
  }
  swift_getKeyPath();
  v48[0] = v2;
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v31 = v2
      + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied;
  swift_beginAccess();
  sub_25100902C(v31, v28, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
  if (v46(v28, 1, v24) != 1) {
    return sub_2510107A0(v28, v29, type metadata accessor for OvernightMetricsViewModel);
  }
  sub_25100F18C(v28, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
  swift_getKeyPath();
  uint64_t v47 = v2;
  sub_251037530();
  swift_release();
  uint64_t v32 = v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  uint64_t v33 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v42, v32, v41);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
  uint64_t v34 = (uint64_t)v39;
  sub_251037B90();
  return OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)(v33, MEMORY[0x263F8EE78], v34, v29);
}

uint64_t sub_251008D6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel;
  swift_beginAccess();
  return sub_25100902C(v4, a2, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_251008E54(uint64_t a1, uint64_t *a2)
{
  sub_251010808(0, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v9[-v5];
  sub_25100902C(a1, (uint64_t)&v9[-v5], &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037520();
  swift_release();
  return sub_25100F18C((uint64_t)v6, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t (*sub_251008FC8())()
{
  return j__swift_endAccess;
}

uint64_t sub_25100902C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_251010808(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_2510090AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_251009114@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel;
  swift_beginAccess();
  return sub_25100902C(v3, a1, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_2510091FC(uint64_t a1, uint64_t a2)
{
  sub_251010808(0, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - v5;
  sub_25100902C(a2, (uint64_t)&v9 - v5, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
  uint64_t v7 = a1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel;
  swift_beginAccess();
  sub_250F65A60((uint64_t)v6, v7);
  return swift_endAccess();
}

void *sub_251009300()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2510376B0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_251010808(0, &qword_26B210800, MEMORY[0x263F42EE0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v16[-v7];
  swift_getKeyPath();
  uint64_t v17 = v0;
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  swift_retain();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = (void *)sub_25100F204(v9, (uint64_t)v0);
  swift_release();
  swift_bridgeObjectRelease();
  if (v10[2])
  {
    uint64_t v17 = v10;
    swift_bridgeObjectRetain();
    sub_25100D2BC(&v17);
    swift_bridgeObjectRelease();
    return v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_2510379A0();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
    swift_getKeyPath();
    uint64_t v17 = v0;
    sub_251037530();
    swift_release();
    uint64_t v13 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
    swift_beginAccess();
    (*(void (**)(unsigned char *, char *, uint64_t))(v3 + 16))(v5, v13, v2);
    uint64_t v14 = sub_2510376F0();
    MEMORY[0x270FA5388](v14);
    *(void *)&v16[-32] = v8;
    *(void *)&v16[-24] = v1;
    *(void *)&v16[-16] = v5;
    uint64_t v11 = sub_250FED8C4((void (*)(uint64_t))sub_25100F970, (uint64_t)&v16[-48], v14);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    sub_25100F18C((uint64_t)v8, &qword_26B210800, MEMORY[0x263F42EE0]);
  }
  return (void *)v11;
}

uint64_t sub_251009674()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_251009720@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  *a2 = *(void *)(v3
                  + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultSleepingSampleViewModels);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2510097D4()
{
  return swift_release();
}

uint64_t sub_2510098B4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1
            + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultSleepingSampleViewModels) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v3 = *(void (**)(void))(a1
                        + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  swift_retain();
  sub_251009300();
  v3();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2510099B8()
{
  return swift_retain();
}

uint64_t sub_251009A64@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask);
  return swift_retain();
}

uint64_t sub_251009B18()
{
  return swift_release();
}

uint64_t sub_251009BF8()
{
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  swift_retain();
  return v1;
}

uint64_t sub_251009CB4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  uint64_t v4 = *(void *)(v3
                 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels
                 + 8);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = sub_251010430;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_251009D98(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  swift_retain();
  sub_251037520();
  swift_release();
  return swift_release();
}

uint64_t SleepingSampleViewModelProvider.__allocating_init(healthStore:dayRange:debugIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_2510376B0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
  id v12 = a1;
  uint64_t v13 = sub_250F95604((uint64_t)v12, 0, 0);
  sub_251037B30();
  sub_25100F994();
  id v14 = v12;
  sub_251039430();
  uint64_t v15 = sub_251037B20();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v14;
  v16[3] = a3;
  v16[4] = a4;
  type metadata accessor for SleepingSampleViewModelProvider();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = sub_25100EEF4((uint64_t)v11, (uint64_t)v13, v15, (uint64_t)sub_25100FA14, (uint64_t)v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  return v18;
}

uint64_t sub_25100A07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[1] = a4;
  uint64_t v5 = sub_2510376B0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_251037AE0();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, v5, v11);
  sub_251037AD0();
  sub_251037AB0();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_25100A21C()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v51 = *v0;
  sub_251010808(0, &qword_26B210BE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v48 = (char *)&v42 - v3;
  sub_251010698(0, &qword_26B2108B8, MEMORY[0x263F8F6B8]);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = v5;
  uint64_t v47 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v57 = (char *)&v42 - v7;
  uint64_t v8 = sub_2510376B0();
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v54 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_251037C90();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  id v14 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  v59[0] = v1;
  uint64_t v15 = sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  uint64_t v52 = v14;
  uint64_t v53 = v15;
  sub_251037530();
  swift_release();
  if (*(void *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask))
  {
    swift_retain();
    sub_251039310();
    swift_release();
  }
  sub_251037C70();
  uint64_t v16 = sub_251037C80();
  os_log_type_t v17 = sub_2510393D0();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    v59[0] = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v45 = v10;
    uint64_t v20 = sub_251039940();
    uint64_t v58 = sub_250F32744(v20, v21, v59);
    sub_2510394A0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_250F1E000, v16, v17, "[%{public}s] Creating new detached query task", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v19, -1, -1);
    MEMORY[0x253391D80](v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v45);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  swift_getKeyPath();
  v59[0] = v1;
  sub_251037530();
  swift_release();
  uint64_t v22 = v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  uint64_t v23 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v22, v56);
  uint64_t v24 = v57;
  (*(void (**)(char *))(v1
                                 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_makeDaySummaryCollectionSequence))(v23);
  uint64_t v25 = (uint64_t)v48;
  sub_2510392E0();
  uint64_t v44 = sub_251039300();
  uint64_t v26 = *(void *)(v44 - 8);
  uint64_t v43 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56);
  uint64_t v45 = v26 + 56;
  v43(v25, 0, 1, v44);
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  uint64_t v29 = v49;
  uint64_t v28 = v50;
  uint64_t v30 = v47;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, v24, v50);
  unint64_t v31 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v32 = (v46 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v33 + v31, v30, v28);
  *(void *)(v33 + v32) = v27;
  *(void *)(v33 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8)) = v51;
  uint64_t v34 = sub_251006FAC(v25, (uint64_t)&unk_269B14818, v33);
  uint64_t v35 = (uint64_t (*)(uint64_t))MEMORY[0x263F8F520];
  sub_25100F18C(v25, &qword_26B210BE0, MEMORY[0x263F8F520]);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  *(&v42 - 2) = v1;
  *(&v42 - 1) = v34;
  uint64_t v58 = v1;
  sub_251037520();
  swift_release();
  swift_release();
  sub_2510392E0();
  v43(v25, 0, 1, v44);
  uint64_t v37 = (void *)swift_allocObject();
  v37[2] = 0;
  v37[3] = 0;
  v37[4] = v1;
  swift_retain();
  sub_251006FAC(v25, (uint64_t)&unk_269B14828, (uint64_t)v37);
  swift_release();
  sub_25100F18C(v25, &qword_26B210BE0, v35);
  uint64_t v38 = (void *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
  uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider + 24);
  uint64_t v40 = v38[4];
  __swift_project_boxed_opaque_existential_1(v38, v39);
  (*(void (**)(uint64_t, uint64_t))(v40 + 24))(v39, v40);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v57, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v54, v56);
}

uint64_t sub_25100A9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  uint64_t v7 = sub_2510379A0();
  v6[14] = v7;
  v6[15] = *(void *)(v7 - 8);
  v6[16] = swift_task_alloc();
  sub_251010808(0, &qword_26B210800, MEMORY[0x263F42EE0], MEMORY[0x263F8D8F0]);
  v6[17] = swift_task_alloc();
  sub_251010698(0, &qword_26B2108B0, MEMORY[0x263F8F6A8]);
  v6[18] = v8;
  v6[19] = *(void *)(v8 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v9 = sub_251037C90();
  v6[21] = v9;
  v6[22] = *(void *)(v9 - 8);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  v6[26] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25100AC08, 0, 0);
}

uint64_t sub_25100AC08()
{
  uint64_t v22 = v0;
  sub_251037C70();
  uint64_t v1 = sub_251037C80();
  os_log_type_t v2 = sub_2510393D0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = v0[26];
    uint64_t v3 = v0[21];
    uint64_t v4 = v0[22];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v21 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_251039940();
    v0[10] = sub_250F32744(v7, v8, &v21);
    sub_2510394A0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_250F1E000, v1, v2, "[%{public}s] Starting query observation loop", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v6, -1, -1);
    MEMORY[0x253391D80](v5, -1, -1);

    uint64_t v11 = *(void (**)(void, void))(v4 + 8);
    uint64_t v10 = v4 + 8;
    uint64_t v9 = v11;
    v11(v20, v3);
  }
  else
  {
    uint64_t v12 = v0[26];
    uint64_t v13 = v0[21];
    uint64_t v14 = v0[22];

    uint64_t v15 = *(void (**)(void, void))(v14 + 8);
    uint64_t v10 = v14 + 8;
    uint64_t v9 = v15;
    v15(v12, v13);
  }
  v0[27] = v10;
  v0[28] = v9;
  sub_251010698(0, &qword_26B2108B8, MEMORY[0x263F8F6B8]);
  sub_251039320();
  swift_beginAccess();
  v0[29] = v9;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[30] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_25100AE70;
  uint64_t v17 = v0[17];
  uint64_t v18 = v0[18];
  return MEMORY[0x270FA20F8](v17, 0, 0, v18, v0 + 5);
}

uint64_t sub_25100AE70()
{
  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = sub_25100B5C0;
  }
  else {
    uint64_t v1 = sub_25100AF80;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_25100AF80()
{
  uint64_t v36 = v0;
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    sub_251037C70();
    uint64_t v4 = sub_251037C80();
    os_log_type_t v5 = sub_2510393D0();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v8 = v0[24];
    uint64_t v9 = v0[21];
    if (v6)
    {
      uint64_t v33 = (void (*)(uint64_t, uint64_t))v0[28];
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v35 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v12 = sub_251039940();
      v0[6] = sub_250F32744(v12, v13, &v35);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v4, v5, "[%{public}s] Query observation loop ended", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v11, -1, -1);
      MEMORY[0x253391D80](v10, -1, -1);

      v33(v8, v9);
    }
    else
    {

      v7(v8, v9);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[16], v1, v2);
    sub_251037C70();
    uint64_t v14 = sub_251037C80();
    os_log_type_t v15 = sub_2510393D0();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = v0[25];
    uint64_t v18 = v0[21];
    if (v16)
    {
      uint64_t v19 = v0 + 28;
      uint64_t v34 = (void (*)(uint64_t, uint64_t))v0[28];
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v35 = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      uint64_t v22 = sub_251039940();
      *(void *)(v20 + 4) = sub_250F32744(v22, v23, &v35);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v14, v15, "[%{public}s] Received day summaries", (uint8_t *)v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v21, -1, -1);
      MEMORY[0x253391D80](v20, -1, -1);

      v34(v17, v18);
    }
    else
    {
      uint64_t v19 = v0 + 29;
      uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[29];

      v26(v17, v18);
    }
    v0[31] = *v19;
    uint64_t Strong = swift_weakLoadStrong();
    v0[32] = Strong;
    if (Strong)
    {
      sub_2510392D0();
      v0[33] = sub_2510392C0();
      uint64_t v29 = sub_251039280();
      return MEMORY[0x270FA2498](sub_25100B478, v29, v28);
    }
    else
    {
      (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
      v0[29] = v0[31];
      uint64_t v30 = (void *)swift_task_alloc();
      v0[30] = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_25100AE70;
      uint64_t v31 = v0[17];
      uint64_t v32 = v0[18];
      return MEMORY[0x270FA20F8](v31, 0, 0, v32, v0 + 5);
    }
  }
}

uint64_t sub_25100B478()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  sub_25100BA90(v1);
  swift_release();
  return MEMORY[0x270FA2498](sub_25100B4F4, 0, 0);
}

uint64_t sub_25100B4F4()
{
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  v0[29] = v0[31];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[30] = v1;
  void *v1 = v0;
  v1[1] = sub_25100AE70;
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  return MEMORY[0x270FA20F8](v2, 0, 0, v3, v0 + 5);
}

uint64_t sub_25100B5C0()
{
  uint64_t v33 = v0;
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  uint64_t v1 = (void *)v0[5];
  sub_251037C70();
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_251037C80();
  os_log_type_t v5 = sub_2510393B0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v31 = (void (*)(uint64_t, uint64_t))v0[29];
    uint64_t v28 = v0[21];
    uint64_t v29 = v0[23];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v32 = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    uint64_t v8 = sub_251039940();
    v0[7] = sub_250F32744(v8, v9, &v32);
    sub_2510394A0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v0[8] = v1;
    id v10 = v1;
    sub_250F32D94();
    uint64_t v11 = sub_2510391F0();
    v0[9] = sub_250F32744(v11, v12, &v32);
    sub_2510394A0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_250F1E000, v4, v5, "[%{public}s] Received error: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v7, -1, -1);
    MEMORY[0x253391D80](v6, -1, -1);

    v31(v29, v28);
  }
  else
  {
    unint64_t v13 = (void (*)(uint64_t, uint64_t))v0[29];
    uint64_t v14 = v0[23];
    uint64_t v15 = v0[21];

    v13(v14, v15);
  }
  sub_251037C70();
  BOOL v16 = sub_251037C80();
  os_log_type_t v17 = sub_2510393D0();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v20 = v0[24];
  uint64_t v21 = v0[21];
  if (v18)
  {
    uint64_t v30 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v32 = v23;
    *(_DWORD *)uint64_t v22 = 136446210;
    uint64_t v24 = sub_251039940();
    v0[6] = sub_250F32744(v24, v25, &v32);
    sub_2510394A0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_250F1E000, v16, v17, "[%{public}s] Query observation loop ended", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v23, -1, -1);
    MEMORY[0x253391D80](v22, -1, -1);

    v30(v20, v21);
  }
  else
  {

    v19(v20, v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_25100B9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](sub_25100BA04, 0, 0);
}

uint64_t sub_25100BA04()
{
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(void *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider+ 24));
  sub_251037B80();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25100BA90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_251010808(0, &qword_26B210800, MEMORY[0x263F42EE0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v51 = (char *)&v42 - v6;
  sub_251010808(0, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel, v4);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v45 = (uint64_t)&v42 - v8;
  sub_251010808(0, qword_26B210D00, MEMORY[0x263F42EF8], v4);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2510376B0();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  BOOL v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v42 - v20;
  uint64_t v53 = a1;
  sub_251037960();
  swift_getKeyPath();
  uint64_t v22 = v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  uint64_t v56 = v2;
  uint64_t v54 = sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  uint64_t v52 = v22;
  sub_251037530();
  swift_release();
  uint64_t v23 = v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v49 = v23;
  v48(v18, v23, v15);
  LOBYTE(v23) = MEMORY[0x25338F3D0](v21, v18);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  v24(v18, v15);
  uint64_t v50 = v24;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v21, v15);
  if (v23)
  {
    sub_251037960();
    uint64_t v26 = sub_251037970();
    uint64_t v43 = v15;
    __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
    sub_251037B90();
    OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)((uint64_t)v21, v26, (uint64_t)v11, (uint64_t)v14);
    uint64_t v42 = v16 + 16;
    uint64_t v27 = (uint64_t)v14;
    uint64_t v44 = v14;
    uint64_t v28 = v45;
    sub_2510090AC((uint64_t)v14, v45, type metadata accessor for OvernightMetricsViewModel);
    uint64_t v29 = v47;
    uint64_t v30 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56);
    v30(v28, 0, 1, v47);
    uint64_t v31 = v2
        + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied;
    swift_beginAccess();
    sub_250F65A60(v28, v31);
    swift_endAccess();
    sub_2510090AC(v27, v28, type metadata accessor for OvernightMetricsViewModel);
    v30(v28, 0, 1, v29);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    *(&v42 - 2) = v2;
    *(&v42 - 1) = v28;
    uint64_t v55 = v2;
    uint64_t v33 = v2;
    uint64_t v47 = MEMORY[0x263F8EE60] + 8;
    sub_251037520();
    swift_release();
    sub_25100F18C(v28, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
    uint64_t v34 = sub_2510379A0();
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v51, v53, v34);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
    swift_getKeyPath();
    uint64_t v55 = v2;
    sub_251037530();
    swift_release();
    uint64_t v37 = v43;
    v48(v21, v49, v43);
    uint64_t v38 = sub_2510376F0();
    MEMORY[0x270FA5388](v38);
    *(&v42 - 4) = v36;
    *(&v42 - 3) = v33;
    *(&v42 - 2) = (uint64_t)v21;
    uint64_t v39 = sub_250FED8C4((void (*)(uint64_t))sub_251010974, (uint64_t)(&v42 - 6), v38);
    swift_bridgeObjectRelease();
    v50(v21, v37);
    sub_25100F18C(v36, &qword_26B210800, MEMORY[0x263F42EE0]);
    uint64_t v40 = swift_getKeyPath();
    MEMORY[0x270FA5388](v40);
    *(&v42 - 2) = v33;
    *(&v42 - 1) = v39;
    uint64_t v55 = v33;
    sub_251037520();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v41 = swift_getKeyPath();
    MEMORY[0x270FA5388](v41);
    *(&v42 - 2) = v33;
    *((unsigned char *)&v42 - 8) = 2;
    uint64_t v55 = v33;
    sub_251037520();
    swift_release();
    return sub_25100F12C((uint64_t)v44, type metadata accessor for OvernightMetricsViewModel);
  }
  return result;
}

uint64_t sub_25100C278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EE0];
  sub_251010808(0, &qword_26B210800, MEMORY[0x263F42EE0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v27 - v12;
  sub_25100902C(a2, (uint64_t)&v27 - v12, &qword_26B210800, v10);
  uint64_t v14 = sub_2510379A0();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_25100F18C((uint64_t)v13, &qword_26B210800, MEMORY[0x263F42EE0]);
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v17 = sub_251037970();
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    MEMORY[0x270FA5388](v18);
    *(&v27 - 2) = a1;
    uint64_t v16 = sub_250FEDAC0((void (*)(uint64_t))sub_25101076C, (uint64_t)(&v27 - 4), v17);
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = *(void *)(a3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider + 24);
  uint64_t v20 = *(void *)(a3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider), v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
  uint64_t v22 = (int *)type metadata accessor for SleepingSampleViewModel(0);
  sub_25100C560(a1, a5 + v22[8]);
  uint64_t v23 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(a5, a1, v23);
  uint64_t v24 = a5 + v22[5];
  uint64_t v25 = sub_2510376B0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v24, a4, v25);
  *(void *)(a5 + v22[6]) = v16;
  *(void *)(a5 + v22[7]) = v21;
  return result;
}

uint64_t sub_25100C560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v3 = sub_251037A30();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_251010808(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v27 - v15;
  sub_251010808(0, &qword_26B210AD8, MEMORY[0x263F42F38], v13);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v27 - v18;
  __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(void *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
  sub_251037B90();
  uint64_t v20 = sub_2510379E0();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v20) == 1)
  {
    sub_25100F18C((uint64_t)v16, qword_26B210D00, MEMORY[0x263F42EF8]);
    uint64_t v22 = sub_251037A50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v19, 1, 1, v22);
  }
  else
  {
    sub_2510379D0();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
  }
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v23(v12, v30, v6);
  uint64_t v24 = sub_251037A50();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v19, 1, v24) == 1)
  {
    v23(v9, (uint64_t)v12, v6);
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v5, *MEMORY[0x263F42F30], v28);
    sub_251037A00();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    return sub_25100F18C((uint64_t)v19, &qword_26B210AD8, MEMORY[0x263F42F38]);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v29, v19, v24);
  }
}

uint64_t SleepingSampleViewModelProvider.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  uint64_t v2 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_0(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
  __swift_destroy_boxed_opaque_existential_0(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider);
  swift_release();
  sub_25100F18C(v0+ OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
  sub_25100F18C(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  uint64_t v4 = sub_251037570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t SleepingSampleViewModelProvider.__deallocating_deinit()
{
  SleepingSampleViewModelProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_25100CBA0(uint64_t a1)
{
  swift_getKeyPath();
  sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  sub_251037520();
  swift_release();
  uint64_t v2 = sub_2510376B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

void (*sub_25100CCA4(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_2510080DC(v2);
  return sub_250FB0DDC;
}

uint64_t static SleepingSampleViewModelProvider.fake(healthStore:dayRange:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
  id v8 = a1;
  uint64_t v9 = sub_250F95604((uint64_t)v8, 0, 0);
  sub_251037B30();
  sub_25100F994();
  id v10 = v8;
  sub_251039430();
  uint64_t v11 = sub_251037B20();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  type metadata accessor for SleepingSampleViewModelProvider();
  uint64_t v12 = swift_allocObject();
  return sub_25100EEF4((uint64_t)v7, (uint64_t)v9, v11, (uint64_t)sub_25100CE80, 0, v12);
}

uint64_t sub_25100CE80(uint64_t a1)
{
  uint64_t v2 = sub_2510376B0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  sub_25101045C();
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 20) = 0;
  *(unsigned char *)(v5 + 16) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_2510379A0();
  return sub_251039340();
}

uint64_t sub_25100CFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_25100D00C, 0, 0);
}

uint64_t sub_25100D00C()
{
  uint64_t v2 = (os_unfair_lock_s *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  *(void *)(swift_task_alloc() + 16) = v1;
  uint64_t v4 = v2 + 4;
  v2 += 5;
  os_unfair_lock_lock(v2);
  sub_25101067C(v4, v3);
  os_unfair_lock_unlock(v2);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_25100D0DC@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2510374F0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F326B0();
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    uint64_t v11 = sub_2510379A0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  else
  {
    *a1 = 1;
    sub_251037660();
    sub_251037680();
    sub_251037990();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_25100F12C((uint64_t)v10, (uint64_t (*)(void))sub_250F326B0);
    uint64_t v13 = sub_2510379A0();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 0, 1, v13);
  }
}

void sub_25100D2BC(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for SleepingSampleViewModel(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_25100EEE0(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_25100D364(v5);
  *a1 = v3;
}

void sub_25100D364(uint64_t *a1)
{
  uint64_t v153 = sub_251037720();
  uint64_t v3 = *(void *)(v153 - 8);
  MEMORY[0x270FA5388](v153);
  uint64_t v152 = (char *)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v151 = (char *)&v133 - v6;
  uint64_t v143 = type metadata accessor for SleepingSampleViewModel(0);
  uint64_t v7 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v138 = (uint64_t)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v155 = (uint64_t)&v133 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v150 = (uint64_t)&v133 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v149 = (uint64_t)&v133 - v14;
  uint64_t v15 = a1[1];
  uint64_t v16 = sub_2510397B0();
  if (v16 >= v15)
  {
    if (v15 < 0) {
      goto LABEL_138;
    }
    if (v15) {
      sub_25100DFF0(0, v15, 1, a1);
    }
    return;
  }
  if (v15 >= 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v15 + 1;
  }
  if (v15 < -1) {
    goto LABEL_146;
  }
  uint64_t v141 = v7;
  uint64_t v142 = v1;
  uint64_t v136 = v16;
  if (v15 < 2)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    unint64_t v140 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    if (v15 != 1)
    {
      unint64_t v22 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v21 = (char *)MEMORY[0x263F8EE78];
LABEL_104:
      uint64_t v125 = v21;
      if (v22 >= 2)
      {
        uint64_t v126 = *a1;
        do
        {
          unint64_t v127 = v22 - 2;
          if (v22 < 2) {
            goto LABEL_133;
          }
          if (!v126) {
            goto LABEL_145;
          }
          uint64_t v128 = *(void *)&v125[16 * v127 + 32];
          uint64_t v129 = *(void *)&v125[16 * v22 + 24];
          uint64_t v130 = v142;
          sub_25100E3B0(v126 + *(void *)(v141 + 72) * v128, v126 + *(void *)(v141 + 72) * *(void *)&v125[16 * v22 + 16], v126 + *(void *)(v141 + 72) * v129, v140);
          uint64_t v142 = v130;
          if (v130) {
            break;
          }
          if (v129 < v128) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v125 = sub_25100EE7C((uint64_t)v125);
          }
          if (v127 >= *((void *)v125 + 2)) {
            goto LABEL_135;
          }
          uint64_t v131 = &v125[16 * v127 + 32];
          *(void *)uint64_t v131 = v128;
          *((void *)v131 + 1) = v129;
          unint64_t v132 = *((void *)v125 + 2);
          if (v22 > v132) {
            goto LABEL_136;
          }
          memmove(&v125[16 * v22 + 16], &v125[16 * v22 + 32], 16 * (v132 - v22));
          *((void *)v125 + 2) = v132 - 1;
          unint64_t v22 = v132 - 1;
        }
        while (v132 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v19 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v18 = v17 >> 1;
    uint64_t v19 = sub_251039260();
    *(void *)(v19 + 16) = v18;
    unint64_t v140 = v19 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  }
  uint64_t v135 = v19;
  uint64_t v20 = 0;
  uint64_t v148 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v21 = (char *)MEMORY[0x263F8EE78];
  uint64_t v154 = a1;
  while (1)
  {
    uint64_t v23 = v20;
    uint64_t v24 = v20 + 1;
    uint64_t v139 = v20;
    if (v20 + 1 >= v15)
    {
      uint64_t v46 = v136;
    }
    else
    {
      uint64_t v25 = *a1;
      uint64_t v26 = *(void *)(v141 + 72);
      uint64_t v158 = v20 + 1;
      uint64_t v27 = v26;
      uint64_t v157 = v26;
      uint64_t v28 = v25;
      uint64_t v137 = v25;
      uint64_t v29 = v149;
      sub_2510090AC(v25 + v26 * v24, v149, type metadata accessor for SleepingSampleViewModel);
      uint64_t v156 = v15;
      uint64_t v30 = v150;
      sub_2510090AC(v28 + v27 * v23, v150, type metadata accessor for SleepingSampleViewModel);
      uint64_t v31 = v151;
      sub_251037730();
      uint64_t v32 = v152;
      sub_251037730();
      LODWORD(v147) = sub_251037710();
      uint64_t v33 = *v148;
      uint64_t v34 = v32;
      uint64_t v23 = v139;
      uint64_t v35 = v153;
      (*v148)(v34, v153);
      uint64_t v146 = v33;
      v33(v31, v35);
      uint64_t v36 = v30;
      uint64_t v15 = v156;
      sub_25100F12C(v36, type metadata accessor for SleepingSampleViewModel);
      sub_25100F12C(v29, type metadata accessor for SleepingSampleViewModel);
      uint64_t v24 = v23 + 2;
      if (v23 + 2 < v15)
      {
        uint64_t v134 = v21;
        uint64_t v37 = v137;
        uint64_t v144 = v157 * v24;
        uint64_t v145 = v157 * v158;
        while (1)
        {
          uint64_t v38 = v24;
          uint64_t v39 = v149;
          sub_2510090AC(v37 + v144, v149, type metadata accessor for SleepingSampleViewModel);
          uint64_t v40 = v150;
          sub_2510090AC(v37 + v145, v150, type metadata accessor for SleepingSampleViewModel);
          uint64_t v41 = v151;
          sub_251037730();
          uint64_t v42 = v152;
          sub_251037730();
          LODWORD(v158) = sub_251037710();
          uint64_t v43 = v42;
          uint64_t v44 = v153;
          uint64_t v45 = v146;
          v146(v43, v153);
          v45(v41, v44);
          sub_25100F12C(v40, type metadata accessor for SleepingSampleViewModel);
          sub_25100F12C(v39, type metadata accessor for SleepingSampleViewModel);
          if ((v147 ^ v158)) {
            break;
          }
          uint64_t v24 = v38 + 1;
          uint64_t v15 = v156;
          v37 += v157;
          if (v156 == v38 + 1)
          {
            uint64_t v24 = v156;
            uint64_t v21 = v134;
            uint64_t v23 = v139;
            goto LABEL_23;
          }
        }
        uint64_t v21 = v134;
        uint64_t v24 = v38;
        uint64_t v23 = v139;
        uint64_t v15 = v156;
      }
LABEL_23:
      uint64_t v46 = v136;
      if (v147)
      {
        if (v24 < v23) {
          goto LABEL_139;
        }
        if (v23 < v24)
        {
          uint64_t v134 = v21;
          uint64_t v47 = 0;
          uint64_t v48 = v157;
          uint64_t v49 = v157 * (v24 - 1);
          uint64_t v50 = v24 * v157;
          uint64_t v51 = v23;
          uint64_t v52 = v23 * v157;
          do
          {
            if (v51 != v24 + v47 - 1)
            {
              uint64_t v54 = v137;
              if (!v137) {
                goto LABEL_144;
              }
              unint64_t v55 = v137 + v52;
              uint64_t v158 = v137 + v49;
              sub_2510107A0(v137 + v52, v138, type metadata accessor for SleepingSampleViewModel);
              if (v52 < v49 || v55 >= v54 + v50)
              {
                uint64_t v53 = v158;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v53 = v158;
                if (v52 != v49) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_2510107A0(v138, v53, type metadata accessor for SleepingSampleViewModel);
              uint64_t v23 = v139;
              uint64_t v48 = v157;
            }
            ++v51;
            --v47;
            v49 -= v48;
            v50 -= v48;
            v52 += v48;
          }
          while (v51 < v24 + v47);
          uint64_t v21 = v134;
          uint64_t v46 = v136;
          uint64_t v15 = v156;
        }
      }
    }
    if (v24 < v15)
    {
      if (__OFSUB__(v24, v23)) {
        goto LABEL_137;
      }
      if (v24 - v23 < v46) {
        break;
      }
    }
LABEL_55:
    if (v24 < v23) {
      goto LABEL_132;
    }
    uint64_t v20 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = sub_25100EA68(0, *((void *)v21 + 2) + 1, 1, v21);
    }
    unint64_t v74 = *((void *)v21 + 2);
    unint64_t v73 = *((void *)v21 + 3);
    unint64_t v22 = v74 + 1;
    if (v74 >= v73 >> 1) {
      uint64_t v21 = sub_25100EA68((char *)(v73 > 1), v74 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v22;
    uint64_t v75 = v21 + 32;
    uint64_t v76 = &v21[16 * v74 + 32];
    *(void *)uint64_t v76 = v23;
    *((void *)v76 + 1) = v20;
    if (v74)
    {
      while (1)
      {
        unint64_t v77 = v22 - 1;
        if (v22 >= 4)
        {
          uint64_t v82 = &v75[16 * v22];
          uint64_t v83 = *((void *)v82 - 8);
          uint64_t v84 = *((void *)v82 - 7);
          BOOL v88 = __OFSUB__(v84, v83);
          uint64_t v85 = v84 - v83;
          if (v88) {
            goto LABEL_121;
          }
          uint64_t v87 = *((void *)v82 - 6);
          uint64_t v86 = *((void *)v82 - 5);
          BOOL v88 = __OFSUB__(v86, v87);
          uint64_t v80 = v86 - v87;
          char v81 = v88;
          if (v88) {
            goto LABEL_122;
          }
          unint64_t v89 = v22 - 2;
          uint64_t v90 = &v75[16 * v22 - 32];
          uint64_t v92 = *(void *)v90;
          uint64_t v91 = *((void *)v90 + 1);
          BOOL v88 = __OFSUB__(v91, v92);
          uint64_t v93 = v91 - v92;
          if (v88) {
            goto LABEL_124;
          }
          BOOL v88 = __OFADD__(v80, v93);
          uint64_t v94 = v80 + v93;
          if (v88) {
            goto LABEL_127;
          }
          if (v94 >= v85)
          {
            uint64_t v112 = &v75[16 * v77];
            uint64_t v114 = *(void *)v112;
            uint64_t v113 = *((void *)v112 + 1);
            BOOL v88 = __OFSUB__(v113, v114);
            uint64_t v115 = v113 - v114;
            if (v88) {
              goto LABEL_131;
            }
            BOOL v105 = v80 < v115;
            goto LABEL_92;
          }
        }
        else
        {
          if (v22 != 3)
          {
            uint64_t v106 = *((void *)v21 + 4);
            uint64_t v107 = *((void *)v21 + 5);
            BOOL v88 = __OFSUB__(v107, v106);
            uint64_t v99 = v107 - v106;
            char v100 = v88;
            goto LABEL_86;
          }
          uint64_t v79 = *((void *)v21 + 4);
          uint64_t v78 = *((void *)v21 + 5);
          BOOL v88 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          char v81 = v88;
        }
        if (v81) {
          goto LABEL_123;
        }
        unint64_t v89 = v22 - 2;
        uint64_t v95 = &v75[16 * v22 - 32];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v98 = __OFSUB__(v96, v97);
        uint64_t v99 = v96 - v97;
        char v100 = v98;
        if (v98) {
          goto LABEL_126;
        }
        unint64_t v101 = &v75[16 * v77];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v88 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v88) {
          goto LABEL_129;
        }
        if (__OFADD__(v99, v104)) {
          goto LABEL_130;
        }
        if (v99 + v104 >= v80)
        {
          BOOL v105 = v80 < v104;
LABEL_92:
          if (v105) {
            unint64_t v77 = v89;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v100) {
          goto LABEL_125;
        }
        uint64_t v108 = &v75[16 * v77];
        uint64_t v110 = *(void *)v108;
        uint64_t v109 = *((void *)v108 + 1);
        BOOL v88 = __OFSUB__(v109, v110);
        uint64_t v111 = v109 - v110;
        if (v88) {
          goto LABEL_128;
        }
        if (v111 < v99) {
          goto LABEL_14;
        }
LABEL_94:
        unint64_t v116 = v77 - 1;
        if (v77 - 1 >= v22)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        uint64_t v117 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        uint64_t v118 = v21;
        uint64_t v119 = &v75[16 * v116];
        uint64_t v120 = *(void *)v119;
        uint64_t v121 = &v75[16 * v77];
        uint64_t v122 = *((void *)v121 + 1);
        uint64_t v123 = v142;
        sub_25100E3B0(v117 + *(void *)(v141 + 72) * *(void *)v119, v117 + *(void *)(v141 + 72) * *(void *)v121, v117 + *(void *)(v141 + 72) * v122, v140);
        uint64_t v142 = v123;
        if (v123)
        {
          uint64_t v19 = v135;
          goto LABEL_115;
        }
        if (v122 < v120) {
          goto LABEL_118;
        }
        if (v77 > *((void *)v118 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v119 = v120;
        *(void *)&v75[16 * v116 + 8] = v122;
        unint64_t v124 = *((void *)v118 + 2);
        if (v77 >= v124) {
          goto LABEL_120;
        }
        uint64_t v21 = v118;
        unint64_t v22 = v124 - 1;
        memmove(&v75[16 * v77], v121 + 16, 16 * (v124 - 1 - v77));
        *((void *)v118 + 2) = v124 - 1;
        a1 = v154;
        if (v124 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v22 = 1;
LABEL_14:
    uint64_t v15 = a1[1];
    uint64_t v19 = v135;
    if (v20 >= v15) {
      goto LABEL_104;
    }
  }
  if (__OFADD__(v23, v46)) {
    goto LABEL_140;
  }
  if (v23 + v46 >= v15) {
    uint64_t v56 = v15;
  }
  else {
    uint64_t v56 = v23 + v46;
  }
  if (v56 >= v23)
  {
    if (v24 != v56)
    {
      uint64_t v134 = v21;
      uint64_t v57 = *(void *)(v141 + 72);
      uint64_t v58 = v57 * (v24 - 1);
      uint64_t v144 = v57;
      uint64_t v59 = v24 * v57;
      uint64_t v137 = v56;
      do
      {
        uint64_t v61 = 0;
        uint64_t v146 = (void (*)(char *, uint64_t))v58;
        uint64_t v147 = v24;
        uint64_t v145 = v59;
        while (1)
        {
          uint64_t v157 = v23;
          uint64_t v62 = *a1;
          uint64_t v156 = v59 + v61;
          uint64_t v63 = v59 + v61 + v62;
          uint64_t v64 = v149;
          sub_2510090AC(v63, v149, type metadata accessor for SleepingSampleViewModel);
          uint64_t v65 = v150;
          sub_2510090AC(v58 + v61 + v62, v150, type metadata accessor for SleepingSampleViewModel);
          id v66 = v151;
          sub_251037730();
          uint64_t v67 = v152;
          sub_251037730();
          LODWORD(v158) = sub_251037710();
          uint64_t v68 = *v148;
          uint64_t v69 = v67;
          uint64_t v70 = v153;
          (*v148)(v69, v153);
          v68(v66, v70);
          sub_25100F12C(v65, type metadata accessor for SleepingSampleViewModel);
          sub_25100F12C(v64, type metadata accessor for SleepingSampleViewModel);
          if ((v158 & 1) == 0) {
            break;
          }
          uint64_t v71 = *a1;
          if (!*a1) {
            goto LABEL_142;
          }
          uint64_t v59 = v145;
          uint64_t v58 = (uint64_t)v146;
          uint64_t v72 = (uint64_t)v146 + v71 + v61;
          sub_2510107A0(v71 + v145 + v61, v155, type metadata accessor for SleepingSampleViewModel);
          swift_arrayInitWithTakeFrontToBack();
          sub_2510107A0(v155, v72, type metadata accessor for SleepingSampleViewModel);
          v61 -= v144;
          uint64_t v23 = v157 + 1;
          uint64_t v60 = v147;
          a1 = v154;
          if (v147 == v157 + 1) {
            goto LABEL_48;
          }
        }
        uint64_t v58 = (uint64_t)v146;
        uint64_t v60 = v147;
        uint64_t v59 = v145;
LABEL_48:
        uint64_t v24 = v60 + 1;
        v58 += v144;
        v59 += v144;
        uint64_t v23 = v139;
      }
      while (v24 != v137);
      uint64_t v24 = v137;
      uint64_t v21 = v134;
    }
    goto LABEL_55;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  sub_251039630();
  __break(1u);
}

void sub_25100DFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v37 = a1;
  uint64_t v44 = sub_251037720();
  uint64_t v7 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v43 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v42 = (char *)&v35 - v10;
  uint64_t v38 = type metadata accessor for SleepingSampleViewModel(0);
  MEMORY[0x270FA5388](v38);
  uint64_t v49 = (uint64_t)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v41 = (uint64_t)&v35 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v40 = (char *)&v35 - v16;
  uint64_t v48 = a3;
  uint64_t v36 = a2;
  if (a3 != a2)
  {
    uint64_t v17 = *(void *)(v15 + 72);
    uint64_t v39 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v18 = v17 * (v48 - 1);
    uint64_t v45 = v17;
    uint64_t v19 = v17 * v48;
    uint64_t v52 = a4;
    uint64_t v20 = (uint64_t)v40;
LABEL_5:
    uint64_t v21 = 0;
    uint64_t v22 = v37;
    uint64_t v46 = v19;
    uint64_t v47 = v18;
    while (1)
    {
      uint64_t v23 = *v52;
      uint64_t v50 = v19 + v21;
      sub_2510090AC(v19 + v21 + v23, v20, type metadata accessor for SleepingSampleViewModel);
      uint64_t v24 = v41;
      sub_2510090AC(v18 + v21 + v23, v41, type metadata accessor for SleepingSampleViewModel);
      uint64_t v25 = v42;
      sub_251037730();
      uint64_t v26 = v43;
      sub_251037730();
      int v51 = sub_251037710();
      uint64_t v27 = *v39;
      uint64_t v28 = v26;
      uint64_t v29 = v44;
      (*v39)(v28, v44);
      uint64_t v30 = v25;
      uint64_t v18 = v47;
      v27(v30, v29);
      uint64_t v31 = v24;
      uint64_t v19 = v46;
      sub_25100F12C(v31, type metadata accessor for SleepingSampleViewModel);
      uint64_t v32 = v52;
      sub_25100F12C(v20, type metadata accessor for SleepingSampleViewModel);
      if ((v51 & 1) == 0)
      {
LABEL_4:
        v18 += v45;
        v19 += v45;
        if (++v48 == v36) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v33 = *v32;
      if (!*v32) {
        break;
      }
      uint64_t v34 = v33 + v18 + v21;
      sub_2510107A0(v33 + v19 + v21, v49, type metadata accessor for SleepingSampleViewModel);
      swift_arrayInitWithTakeFrontToBack();
      sub_2510107A0(v49, v34, type metadata accessor for SleepingSampleViewModel);
      v21 -= v45;
      if (v48 == ++v22) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_25100E3B0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v62 = sub_251037720();
  uint64_t v8 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v61 = (char *)&v50 - v12;
  uint64_t v55 = type metadata accessor for SleepingSampleViewModel(0);
  MEMORY[0x270FA5388](v55);
  uint64_t v60 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v59 = (uint64_t)&v50 - v15;
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_62;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_63;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v17;
  unint64_t v65 = a1;
  unint64_t v64 = a4;
  uint64_t v20 = v18 / v17;
  if (v19 >= v18 / v17)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v17;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v34 = a4 + v22;
      unint64_t v63 = a4 + v22;
      unint64_t v65 = a2;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v36 = -v17;
        uint64_t v53 = v36;
        uint64_t v54 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v58 = v10;
        unint64_t v51 = a1;
        unint64_t v52 = a4;
        uint64_t v37 = (void (**)(char *, uint64_t))(v8 + 8);
        do
        {
          unint64_t v57 = a3 + v36;
          uint64_t v38 = v59;
          sub_2510090AC(v34 + v36, v59, type metadata accessor for SleepingSampleViewModel);
          unint64_t v56 = a2;
          a2 += v36;
          uint64_t v39 = v60;
          sub_2510090AC(a2, v60, type metadata accessor for SleepingSampleViewModel);
          uint64_t v40 = v61;
          sub_251037730();
          sub_251037730();
          char v41 = sub_251037710();
          unint64_t v42 = a3;
          uint64_t v43 = *v37;
          uint64_t v44 = v10;
          uint64_t v45 = v62;
          (*v37)(v44, v62);
          v43(v40, v45);
          sub_25100F12C(v39, type metadata accessor for SleepingSampleViewModel);
          sub_25100F12C(v38, type metadata accessor for SleepingSampleViewModel);
          if (v41)
          {
            uint64_t v36 = v53;
            a3 = v57;
            if (v42 < v56 || v57 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v10 = v58;
              unint64_t v47 = v51;
              unint64_t v46 = v52;
            }
            else
            {
              uint64_t v10 = v58;
              unint64_t v47 = v51;
              unint64_t v46 = v52;
              if (v42 != v56) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v65 += v36;
          }
          else
          {
            a2 = v56;
            a3 = v57;
            unint64_t v48 = v63;
            v63 += v53;
            uint64_t v36 = v53;
            if (v42 < v48 || v57 >= v48)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v10 = v58;
            }
            else
            {
              uint64_t v10 = v58;
              if (v42 != v48) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            unint64_t v47 = v51;
            unint64_t v46 = v52;
          }
          unint64_t v34 = v63;
        }
        while (v63 > v46 && a2 > v47);
      }
      goto LABEL_60;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v17;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v57 = a4 + v21;
    unint64_t v63 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      uint64_t v54 = (void (**)(char *, uint64_t))(v8 + 8);
      unint64_t v56 = a3;
      uint64_t v58 = v10;
      uint64_t v25 = v60;
      uint64_t v24 = v61;
      do
      {
        uint64_t v26 = v59;
        sub_2510090AC(a2, v59, type metadata accessor for SleepingSampleViewModel);
        sub_2510090AC(a4, v25, type metadata accessor for SleepingSampleViewModel);
        sub_251037730();
        sub_251037730();
        char v27 = sub_251037710();
        uint64_t v28 = *v54;
        uint64_t v29 = v62;
        (*v54)(v10, v62);
        v28(v24, v29);
        sub_25100F12C(v25, type metadata accessor for SleepingSampleViewModel);
        sub_25100F12C(v26, type metadata accessor for SleepingSampleViewModel);
        unint64_t v30 = v65;
        if (v27)
        {
          unint64_t v31 = a2 + v17;
          if (v65 < a2 || v65 >= v31)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v32 = v56;
            uint64_t v10 = v58;
          }
          else
          {
            unint64_t v32 = v56;
            uint64_t v10 = v58;
            if (v65 == a2) {
              unint64_t v30 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v33 = v64 + v17;
          if (v65 < v64 || v65 >= v33)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v32 = v56;
            uint64_t v10 = v58;
          }
          else
          {
            unint64_t v32 = v56;
            uint64_t v10 = v58;
            if (v65 != v64) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v64 = v33;
          unint64_t v31 = a2;
        }
        unint64_t v65 = v30 + v17;
        a4 = v64;
        if (v64 >= v57) {
          break;
        }
        a2 = v31;
      }
      while (v31 < v32);
    }
LABEL_60:
    sub_25100ED38(&v65, &v64, (uint64_t *)&v63, type metadata accessor for SleepingSampleViewModel);
    return 1;
  }
LABEL_64:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

char *sub_25100EA68(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_251010808(0, &qword_269B14850, (uint64_t (*)(uint64_t))sub_25101086C, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_25100EB90(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_25100ED38(a1, a2, a3, MEMORY[0x263F42CD0]);
}

char *sub_25100EBA8(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_2510396A0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_25100EC64(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_25100ED38(a1, a2, a3, (uint64_t (*)(void))sub_250FACB74);
}

char *sub_25100EC7C(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)sub_2510396A0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

uint64_t sub_25100ED38(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = sub_2510396A0();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_25100EE7C(uint64_t a1)
{
  return sub_25100EA68(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_25100EE90(void *a1)
{
  return sub_250FF20D4(0, a1[2], 0, a1);
}

uint64_t sub_25100EEA4(uint64_t a1)
{
  return sub_250FF2100(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_25100EEB8(void *a1)
{
  return sub_250FF2A50(0, a1[2], 0, a1);
}

uint64_t sub_25100EECC(uint64_t a1)
{
  return sub_250FF276C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_25100EEE0(void *a1)
{
  return sub_250FF2A7C(0, a1[2], 0, a1);
}

uint64_t sub_25100EEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
  uint64_t v25 = sub_2510108CC(&qword_26B210898, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  *(void *)&long long v23 = a2;
  uint64_t v21 = sub_251037B30();
  uint64_t v22 = sub_2510108CC(&qword_26B210808, MEMORY[0x263F42F58]);
  *(void *)&long long v20 = a3;
  *(unsigned char *)(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness) = 0;
  uint64_t v12 = a6
      + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied;
  uint64_t v13 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  v14(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel, 1, 1, v13);
  *(void *)(a6
            + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultSleepingSampleViewModels) = MEMORY[0x263F8EE78];
  *(void *)(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask) = 0;
  uint64_t v15 = (void *)(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  *uint64_t v15 = nullsub_1;
  v15[1] = 0;
  sub_251037560();
  uint64_t v16 = a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  uint64_t v17 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a1, v17);
  sub_251010754(&v23, a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
  sub_251010754(&v20, a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider);
  int64_t v18 = (void *)(a6
                 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_makeDaySummaryCollectionSequence);
  *int64_t v18 = a4;
  v18[1] = a5;
  return a6;
}

uint64_t sub_25100F12C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25100F18C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_251010808(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_25100F204(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v52 = sub_251037A30();
  uint64_t v61 = *(char **)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  unint64_t v51 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_251037740();
  uint64_t v54 = *(void (***)(char *, uint64_t))(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v50 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v67 = (char *)&v45 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_251010808(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v45 - v11;
  sub_251010808(0, &qword_26B210AD8, MEMORY[0x263F42F38], v9);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v65 = sub_251037A50();
  uint64_t v16 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  unint64_t v64 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for SleepingSampleViewModel(0);
  MEMORY[0x270FA5388](v66);
  long long v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = MEMORY[0x263F8EE78];
  if (v21)
  {
    uint64_t v62 = v15;
    uint64_t v63 = v5;
    uint64_t v45 = v2;
    uint64_t v68 = MEMORY[0x263F8EE78];
    uint64_t v23 = v18;
    sub_250FF1F14(0, v21, 0);
    unint64_t v60 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v24 = a1 + v60;
    uint64_t v59 = (void *)(v58 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
    unint64_t v56 = (void *)(v58 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider);
    uint64_t v25 = *(void *)(v23 + 72);
    unint64_t v57 = (void (**)(char *, char *, uint64_t))(v54 + 2);
    uint64_t v58 = v25;
    ++v54;
    uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    unint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v16 + 32);
    uint64_t v49 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    unsigned int v47 = *MEMORY[0x263F42F30];
    unint64_t v46 = (void (**)(char *, void, uint64_t))(v61 + 104);
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v16 + 40);
    uint64_t v61 = v12;
    uint64_t v26 = v57;
    do
    {
      sub_2510090AC(v24, (uint64_t)v20, type metadata accessor for SleepingSampleViewModel);
      uint64_t v28 = v59[3];
      uint64_t v27 = v59[4];
      __swift_project_boxed_opaque_existential_1(v59, v28);
      uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(v20, v28, v27);
      uint64_t v30 = *(int *)(v66 + 28);

      *(void *)&v20[v30] = v29;
      __swift_project_boxed_opaque_existential_1(v56, v56[3]);
      sub_251037B90();
      uint64_t v31 = sub_2510379E0();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v12, 1, v31) == 1)
      {
        sub_25100F18C((uint64_t)v12, qword_26B210D00, MEMORY[0x263F42EF8]);
        uint64_t v33 = (uint64_t)v62;
        uint64_t v34 = v65;
        (*v49)(v62, 1, 1, v65);
      }
      else
      {
        uint64_t v35 = v12;
        uint64_t v33 = (uint64_t)v62;
        sub_2510379D0();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v31);
        uint64_t v34 = v65;
      }
      uint64_t v36 = *v26;
      uint64_t v37 = v67;
      uint64_t v38 = v63;
      (*v26)(v67, v20, v63);
      if ((*v55)(v33, 1, v34) == 1)
      {
        v36(v50, v67, v38);
        (*v46)(v51, v47, v52);
        uint64_t v39 = v64;
        sub_251037A00();
        (*v54)(v67, v38);
        sub_25100F18C(v33, &qword_26B210AD8, MEMORY[0x263F42F38]);
      }
      else
      {
        (*v54)(v37, v38);
        uint64_t v39 = v64;
        (*v48)(v64, v33, v34);
      }
      (*v53)(&v20[*(int *)(v66 + 32)], v39, v34);
      uint64_t v22 = v68;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v61;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_250FF1F14(0, *(void *)(v22 + 16) + 1, 1);
        uint64_t v22 = v68;
      }
      unint64_t v42 = *(void *)(v22 + 16);
      unint64_t v41 = *(void *)(v22 + 24);
      if (v42 >= v41 >> 1)
      {
        sub_250FF1F14(v41 > 1, v42 + 1, 1);
        uint64_t v22 = v68;
      }
      *(void *)(v22 + 16) = v42 + 1;
      uint64_t v43 = v58;
      sub_2510107A0((uint64_t)v20, v22 + v60 + v42 * v58, type metadata accessor for SleepingSampleViewModel);
      v24 += v43;
      --v21;
    }
    while (v21);
  }
  return v22;
}

uint64_t sub_25100F970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25100C278(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t sub_25100F994()
{
  unint64_t result = qword_26B2108D8;
  if (!qword_26B2108D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2108D8);
  }
  return result;
}

uint64_t sub_25100F9D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_25100FA14(uint64_t a1)
{
  return sub_25100A07C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_25100FA28()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_25100FA60()
{
  sub_251010698(0, &qword_26B2108B8, MEMORY[0x263F8F6B8]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_25100FB6C(uint64_t a1)
{
  sub_251010698(0, &qword_26B2108B8, MEMORY[0x263F8F6B8]);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v6 = (*(void *)(*(void *)(v4 - 8) + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_250F99B68;
  return sub_25100A9EC(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_25100FCBC()
{
  return sub_251010710();
}

uint64_t sub_25100FCD4()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_25100FD14()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_250F98D54;
  v3[2] = v2;
  return MEMORY[0x270FA2498](sub_25100BA04, 0, 0);
}

unint64_t sub_25100FDC0()
{
  unint64_t result = qword_269B14830;
  if (!qword_269B14830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14830);
  }
  return result;
}

uint64_t sub_25100FE14(uint64_t a1)
{
  uint64_t result = sub_2510108CC(&qword_26B210880, (void (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dayRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dayRange.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dayRange.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.overnightMetricsModel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.viewModels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dataFreshness.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.startQuery()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.status(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t sub_25100FF0C()
{
  return type metadata accessor for SleepingSampleViewModelProvider();
}

void sub_25100FF14()
{
  sub_2510376B0();
  if (v0 <= 0x3F)
  {
    sub_251010808(319, &qword_26B210820, type metadata accessor for OvernightMetricsViewModel, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_251037570();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for SleepingSampleViewModelProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SleepingSampleViewModelProvider);
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dayRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dayRange.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dayRange.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dataFreshness.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dataFreshness.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dataFreshness.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.overnightMetricsModel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.viewModels.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.startQuery()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.status(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleViewModelProvider.DataFreshness(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2510102FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleViewModelProvider.DataFreshness()
{
  return &type metadata for SleepingSampleViewModelProvider.DataFreshness;
}

uint64_t sub_251010334()
{
  return sub_2510091FC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_251010350()
{
  return sub_2510098B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_251010374()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2510103AC(uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_2510103E4()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = (void *)(v0[2] + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  *unint64_t v2 = v0[3];
  v2[1] = v1;
  swift_retain();
  return swift_release();
}

uint64_t sub_251010430(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void sub_25101045C()
{
  if (!qword_269B14838)
  {
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_2510395B0();
    if (!v1) {
      atomic_store(v0, &qword_269B14838);
    }
  }
}

uint64_t sub_2510104BC()
{
  uint64_t v1 = sub_2510376B0();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_251010588(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_2510376B0() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[3] = v5;
  _OWORD v7[4] = v6;
  v7[1] = sub_250F98D54;
  v7[2] = a1;
  return MEMORY[0x270FA2498](sub_25100D00C, 0, 0);
}

uint64_t sub_25101067C@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25100D0DC(a1, a2);
}

void sub_251010698(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = sub_2510379A0();
    unint64_t v7 = sub_250F32D94();
    unint64_t v8 = a3(a1, v6, v7, MEMORY[0x263F8E4E0]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_251010710()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_251010754(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_25101076C()
{
  return sub_2510377A0();
}

uint64_t sub_2510107A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_251010808(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_25101086C()
{
  if (!qword_269B14858)
  {
    unint64_t v0 = sub_251039380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14858);
    }
  }
}

uint64_t sub_2510108CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_251010914()
{
  char v1 = *(unsigned char *)(v0 + 24);
  long long v2 = (unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
  uint64_t result = swift_beginAccess();
  *long long v2 = v1;
  return result;
}

uint64_t sub_251010974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25100F970(a1, a2);
}

uint64_t sub_251010994()
{
  return sub_2510080C0();
}

uint64_t sub_2510109AC()
{
  return sub_251010350();
}

uint64_t sub_2510109C4()
{
  return sub_251010334();
}

void *sub_2510109E0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_251037740();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    unint64_t v8 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
    *((unsigned char *)v4 + v8[5]) = *((unsigned char *)a2 + v8[5]);
    uint64_t v9 = v8[6];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_251037400();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *(void *)((char *)v4 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    *(void *)((char *)v4 + v8[8]) = *(void *)((char *)a2 + v8[8]);
    *((unsigned char *)v4 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = *(void *)((char *)a2 + v13);
    swift_retain();
    swift_retain();
    if (v16)
    {
      uint64_t v17 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = v16;
      *((void *)v14 + 1) = v17;
      long long v18 = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
      *((_OWORD *)v14 + 2) = v18;
      *((_OWORD *)v14 + 3) = *((_OWORD *)v15 + 3);
      *((void *)v14 + 8) = *((void *)v15 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v20 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v20;
      *((void *)v14 + 8) = *((void *)v15 + 8);
      long long v21 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v21;
    }
    uint64_t v22 = *(int *)(a3 + 24);
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = *(void *)((char *)a2 + v22);
    if (v25)
    {
      uint64_t v26 = *((void *)v24 + 1);
      uint64_t v27 = *((void *)v24 + 2);
      *(void *)uint64_t v23 = v25;
      *((void *)v23 + 1) = v26;
      *((void *)v23 + 2) = v27;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      *((void *)v23 + 2) = *((void *)v24 + 2);
    }
    v23[24] = v24[24];
    v23[32] = v24[32];
    uint64_t v28 = *((void *)v24 + 6);
    *((void *)v23 + 5) = *((void *)v24 + 5);
    *((void *)v23 + 6) = v28;
    v23[56] = v24[56];
    uint64_t v29 = *((void *)v24 + 9);
    *((void *)v23 + 8) = *((void *)v24 + 8);
    *((void *)v23 + 9) = v29;
    *((void *)v23 + 10) = *((void *)v24 + 10);
    long long v30 = *(_OWORD *)(v24 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
    *(_OWORD *)(v23 + 88) = v30;
    long long v31 = *(_OWORD *)(v24 + 120);
    long long v32 = *(_OWORD *)(v24 + 136);
    *(_OWORD *)(v23 + 152) = *(_OWORD *)(v24 + 152);
    *(_OWORD *)(v23 + 136) = v32;
    *(_OWORD *)(v23 + 120) = v31;
    uint64_t v33 = *((void *)v24 + 22);
    *((void *)v23 + 21) = *((void *)v24 + 21);
    *((void *)v23 + 22) = v33;
    uint64_t v35 = *((void *)v24 + 23);
    uint64_t v34 = *((void *)v24 + 24);
    v23[200] = v24[200];
    *((void *)v23 + 23) = v35;
    *((void *)v23 + 24) = v34;
    v23[201] = v24[201];
    uint64_t v36 = *((void *)v24 + 27);
    *((void *)v23 + 26) = *((void *)v24 + 26);
    *((void *)v23 + 27) = v36;
    uint64_t v37 = *((void *)v24 + 29);
    *((void *)v23 + 28) = *((void *)v24 + 28);
    *((void *)v23 + 29) = v37;
    *((void *)v23 + 30) = *((void *)v24 + 30);
    v23[248] = v24[248];
    uint64_t v38 = *((void *)v24 + 33);
    *((void *)v23 + 32) = *((void *)v24 + 32);
    *((void *)v23 + 33) = v38;
    *((void *)v23 + 34) = *((void *)v24 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_251010D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0) + 24);
  uint64_t v6 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  swift_release();
  if (*(void *)(a1 + *(int *)(a2 + 20)))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + *(int *)(a2 + 24)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_251010E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(unsigned char *)(a1 + v7[5]) = *(unsigned char *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a2 + v12);
  swift_retain();
  swift_retain();
  if (v15)
  {
    uint64_t v16 = *(void *)(v14 + 8);
    *(void *)uint64_t v13 = v15;
    *(void *)(v13 + 8) = v16;
    long long v17 = *(_OWORD *)(v14 + 32);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
    *(_OWORD *)(v13 + 32) = v17;
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
    *(void *)(v13 + 64) = *(void *)(v14 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *(_OWORD *)(v14 + 48);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
    *(_OWORD *)(v13 + 48) = v18;
    *(void *)(v13 + 64) = *(void *)(v14 + 64);
    long long v19 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v19;
  }
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a2 + v20);
  uint64_t v38 = a1;
  if (v23)
  {
    uint64_t v24 = *(void *)(v22 + 8);
    uint64_t v25 = *(void *)(v22 + 16);
    *(void *)uint64_t v21 = v23;
    *(void *)(v21 + 8) = v24;
    *(void *)(v21 + 16) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    *(void *)(v21 + 16) = *(void *)(v22 + 16);
  }
  *(unsigned char *)(v21 + 24) = *(unsigned char *)(v22 + 24);
  *(unsigned char *)(v21 + 32) = *(unsigned char *)(v22 + 32);
  uint64_t v26 = *(void *)(v22 + 48);
  *(void *)(v21 + 40) = *(void *)(v22 + 40);
  *(void *)(v21 + 48) = v26;
  *(unsigned char *)(v21 + 56) = *(unsigned char *)(v22 + 56);
  uint64_t v27 = *(void *)(v22 + 72);
  *(void *)(v21 + 64) = *(void *)(v22 + 64);
  *(void *)(v21 + 72) = v27;
  *(void *)(v21 + 80) = *(void *)(v22 + 80);
  long long v28 = *(_OWORD *)(v22 + 88);
  *(_OWORD *)(v21 + 104) = *(_OWORD *)(v22 + 104);
  *(_OWORD *)(v21 + 88) = v28;
  long long v29 = *(_OWORD *)(v22 + 120);
  long long v30 = *(_OWORD *)(v22 + 136);
  *(_OWORD *)(v21 + 152) = *(_OWORD *)(v22 + 152);
  *(_OWORD *)(v21 + 136) = v30;
  *(_OWORD *)(v21 + 120) = v29;
  uint64_t v31 = *(void *)(v22 + 176);
  *(void *)(v21 + 168) = *(void *)(v22 + 168);
  *(void *)(v21 + 176) = v31;
  uint64_t v33 = *(void *)(v22 + 184);
  uint64_t v32 = *(void *)(v22 + 192);
  *(unsigned char *)(v21 + 200) = *(unsigned char *)(v22 + 200);
  *(void *)(v21 + 184) = v33;
  *(void *)(v21 + 192) = v32;
  *(unsigned char *)(v21 + 201) = *(unsigned char *)(v22 + 201);
  uint64_t v34 = *(void *)(v22 + 216);
  *(void *)(v21 + 208) = *(void *)(v22 + 208);
  *(void *)(v21 + 216) = v34;
  uint64_t v35 = *(void *)(v22 + 232);
  *(void *)(v21 + 224) = *(void *)(v22 + 224);
  *(void *)(v21 + 232) = v35;
  *(void *)(v21 + 240) = *(void *)(v22 + 240);
  *(unsigned char *)(v21 + 248) = *(unsigned char *)(v22 + 248);
  uint64_t v36 = *(void *)(v22 + 264);
  *(void *)(v21 + 256) = *(void *)(v22 + 256);
  *(void *)(v21 + 264) = v36;
  *(void *)(v21 + 272) = *(void *)(v22 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v38;
}

uint64_t sub_251011150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(unsigned char *)(a1 + v7[5]) = *(unsigned char *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a2 + v12);
  if (*(void *)(a1 + v12))
  {
    if (v15)
    {
      void *v13 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[1] = *(void *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[2] = *(void *)(v14 + 16);
      v13[3] = *(void *)(v14 + 24);
      v13[4] = *(void *)(v14 + 32);
      v13[5] = *(void *)(v14 + 40);
      v13[6] = *(void *)(v14 + 48);
      v13[7] = *(void *)(v14 + 56);
      v13[8] = *(void *)(v14 + 64);
    }
    else
    {
      sub_250F21DD0(a1 + v12);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      long long v17 = *(_OWORD *)(v14 + 32);
      long long v16 = *(_OWORD *)(v14 + 48);
      long long v18 = *(_OWORD *)(v14 + 16);
      v13[8] = *(void *)(v14 + 64);
      *((_OWORD *)v13 + 2) = v17;
      *((_OWORD *)v13 + 3) = v16;
      *((_OWORD *)v13 + 1) = v18;
    }
  }
  else if (v15)
  {
    void *v13 = v15;
    v13[1] = *(void *)(v14 + 8);
    v13[2] = *(void *)(v14 + 16);
    v13[3] = *(void *)(v14 + 24);
    v13[4] = *(void *)(v14 + 32);
    v13[5] = *(void *)(v14 + 40);
    v13[6] = *(void *)(v14 + 48);
    v13[7] = *(void *)(v14 + 56);
    v13[8] = *(void *)(v14 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    long long v19 = *(_OWORD *)(v14 + 16);
    long long v20 = *(_OWORD *)(v14 + 32);
    long long v21 = *(_OWORD *)(v14 + 48);
    v13[8] = *(void *)(v14 + 64);
    *((_OWORD *)v13 + 2) = v20;
    *((_OWORD *)v13 + 3) = v21;
    *((_OWORD *)v13 + 1) = v19;
  }
  uint64_t v22 = *(int *)(a3 + 24);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (long long *)(a2 + v22);
  uint64_t v25 = *(void *)(a2 + v22);
  if (*(void *)(a1 + v22))
  {
    if (v25)
    {
      *(void *)uint64_t v23 = v25;
      swift_retain();
      swift_release();
      *(void *)(v23 + 8) = *((void *)v24 + 1);
      swift_retain();
      swift_release();
      *(void *)(v23 + 16) = *((void *)v24 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80(a1 + v22);
      uint64_t v26 = *((void *)v24 + 2);
      *(_OWORD *)uint64_t v23 = *v24;
      *(void *)(v23 + 16) = v26;
    }
  }
  else if (v25)
  {
    *(void *)uint64_t v23 = v25;
    *(void *)(v23 + 8) = *((void *)v24 + 1);
    *(void *)(v23 + 16) = *((void *)v24 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v27 = *v24;
    *(void *)(v23 + 16) = *((void *)v24 + 2);
    *(_OWORD *)uint64_t v23 = v27;
  }
  *(unsigned char *)(v23 + 24) = *((unsigned char *)v24 + 24);
  *(unsigned char *)(v23 + 32) = *((unsigned char *)v24 + 32);
  *(void *)(v23 + 40) = *((void *)v24 + 5);
  swift_retain();
  swift_release();
  uint64_t v28 = *((void *)v24 + 6);
  *(unsigned char *)(v23 + 56) = *((unsigned char *)v24 + 56);
  *(void *)(v23 + 48) = v28;
  *(void *)(v23 + 64) = *((void *)v24 + 8);
  *(void *)(v23 + 72) = *((void *)v24 + 9);
  swift_retain();
  swift_release();
  *(void *)(v23 + 80) = *((void *)v24 + 10);
  swift_retain();
  swift_release();
  *(void *)(v23 + 88) = *((void *)v24 + 11);
  uint64_t v29 = *((void *)v24 + 12);
  *(unsigned char *)(v23 + 104) = *((unsigned char *)v24 + 104);
  *(void *)(v23 + 96) = v29;
  *(void *)(v23 + 112) = *((void *)v24 + 14);
  *(void *)(v23 + 120) = *((void *)v24 + 15);
  *(void *)(v23 + 128) = *((void *)v24 + 16);
  *(void *)(v23 + 136) = *((void *)v24 + 17);
  *(void *)(v23 + 144) = *((void *)v24 + 18);
  *(void *)(v23 + 152) = *((void *)v24 + 19);
  *(void *)(v23 + 160) = *((void *)v24 + 20);
  *(void *)(v23 + 168) = *((void *)v24 + 21);
  *(void *)(v23 + 176) = *((void *)v24 + 22);
  swift_retain();
  swift_release();
  *(void *)(v23 + 184) = *((void *)v24 + 23);
  swift_retain();
  swift_release();
  uint64_t v30 = *((void *)v24 + 24);
  *(unsigned char *)(v23 + 200) = *((unsigned char *)v24 + 200);
  *(void *)(v23 + 192) = v30;
  *(unsigned char *)(v23 + 201) = *((unsigned char *)v24 + 201);
  *(void *)(v23 + 208) = *((void *)v24 + 26);
  swift_retain();
  swift_release();
  *(void *)(v23 + 216) = *((void *)v24 + 27);
  swift_retain();
  swift_release();
  *(void *)(v23 + 224) = *((void *)v24 + 28);
  swift_retain();
  swift_release();
  *(void *)(v23 + 232) = *((void *)v24 + 29);
  swift_retain();
  swift_release();
  *(void *)(v23 + 240) = *((void *)v24 + 30);
  swift_retain();
  swift_release();
  *(unsigned char *)(v23 + 248) = *((unsigned char *)v24 + 248);
  *(void *)(v23 + 256) = *((void *)v24 + 32);
  swift_retain();
  swift_release();
  *(void *)(v23 + 264) = *((void *)v24 + 33);
  swift_retain();
  swift_release();
  *(void *)(v23 + 272) = *((void *)v24 + 34);
  return a1;
}

uint64_t sub_251011614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(unsigned char *)(a1 + v7[5]) = *(unsigned char *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  long long v16 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v14 + 48) = v16;
  *(void *)(v14 + 64) = *(void *)(v15 + 64);
  long long v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  memcpy((void *)(a1 + v13), (const void *)(a2 + v13), 0x118uLL);
  return a1;
}

uint64_t sub_251011744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(unsigned char *)(a1 + v7[5]) = *(unsigned char *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  swift_release();
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  swift_release();
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  if (*(void *)(a1 + v12))
  {
    if (*(void *)v14)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      swift_bridgeObjectRelease();
      long long v15 = *(_OWORD *)(v14 + 32);
      *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
      *(_OWORD *)(v13 + 32) = v15;
      *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
      *(void *)(v13 + 64) = *(void *)(v14 + 64);
      goto LABEL_6;
    }
    sub_250F21DD0(v13);
  }
  long long v16 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 48) = v16;
  *(void *)(v13 + 64) = *(void *)(v14 + 64);
  long long v17 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v17;
LABEL_6:
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  if (!*(void *)(a1 + v18))
  {
LABEL_10:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *(void *)(v19 + 16) = *(void *)(v20 + 16);
    goto LABEL_11;
  }
  if (!*(void *)v20)
  {
    sub_250F27E80(v19);
    goto LABEL_10;
  }
  *(void *)uint64_t v19 = *(void *)v20;
  swift_release();
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  swift_release();
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  swift_release();
LABEL_11:
  *(unsigned char *)(v19 + 24) = *(unsigned char *)(v20 + 24);
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
  *(void *)(v19 + 40) = *(void *)(v20 + 40);
  swift_release();
  *(void *)(v19 + 48) = *(void *)(v20 + 48);
  *(unsigned char *)(v19 + 56) = *(unsigned char *)(v20 + 56);
  *(void *)(v19 + 64) = *(void *)(v20 + 64);
  *(void *)(v19 + 72) = *(void *)(v20 + 72);
  swift_release();
  *(void *)(v19 + 80) = *(void *)(v20 + 80);
  swift_release();
  *(void *)(v19 + 88) = *(void *)(v20 + 88);
  *(void *)(v19 + 96) = *(void *)(v20 + 96);
  *(unsigned char *)(v19 + 104) = *(unsigned char *)(v20 + 104);
  long long v21 = *(_OWORD *)(v20 + 128);
  *(_OWORD *)(v19 + 112) = *(_OWORD *)(v20 + 112);
  *(_OWORD *)(v19 + 128) = v21;
  long long v22 = *(_OWORD *)(v20 + 160);
  *(_OWORD *)(v19 + 144) = *(_OWORD *)(v20 + 144);
  *(_OWORD *)(v19 + 160) = v22;
  *(void *)(v19 + 176) = *(void *)(v20 + 176);
  swift_release();
  *(void *)(v19 + 184) = *(void *)(v20 + 184);
  swift_release();
  *(void *)(v19 + 192) = *(void *)(v20 + 192);
  *(unsigned char *)(v19 + 200) = *(unsigned char *)(v20 + 200);
  *(unsigned char *)(v19 + 201) = *(unsigned char *)(v20 + 201);
  *(void *)(v19 + 208) = *(void *)(v20 + 208);
  swift_release();
  *(void *)(v19 + 216) = *(void *)(v20 + 216);
  swift_release();
  *(void *)(v19 + 224) = *(void *)(v20 + 224);
  swift_release();
  *(void *)(v19 + 232) = *(void *)(v20 + 232);
  swift_release();
  *(void *)(v19 + 240) = *(void *)(v20 + 240);
  swift_release();
  *(unsigned char *)(v19 + 248) = *(unsigned char *)(v20 + 248);
  *(void *)(v19 + 256) = *(void *)(v20 + 256);
  swift_release();
  *(void *)(v19 + 264) = *(void *)(v20 + 264);
  swift_release();
  *(void *)(v19 + 272) = *(void *)(v20 + 272);
  return a1;
}

uint64_t sub_251011A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251011A6C);
}

uint64_t sub_251011A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 40);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_251011B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251011B44);
}

uint64_t sub_251011B44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 40) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartDayAxisLabel()
{
  uint64_t result = qword_269B14860;
  if (!qword_269B14860) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_251011C50()
{
  uint64_t result = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_251011CF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_251011D0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  uint64_t v8 = *(void *)(v2 + *(int *)(v7 + 28));
  uint64_t v44 = v2 + *(int *)(v4 + 24);
  uint64_t v9 = *(void *)(v44 + 256);
  sub_251012044(v2, (uint64_t)v6);
  if (v9)
  {
    uint64_t v43 = v9;
  }
  else
  {
    uint64_t v43 = *(void *)&v6[*(int *)(v7 + 32)];
    swift_retain();
  }
  swift_retain();
  swift_retain();
  sub_2510120A8((uint64_t)v6);
  unint64_t v10 = (uint64_t *)(v2 + *(int *)(v4 + 20));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[3];
  uint64_t v15 = v10[4];
  uint64_t v16 = v10[5];
  uint64_t v17 = v10[6];
  uint64_t v18 = v10[7];
  uint64_t v19 = v10[8];
  uint64_t v45 = v8;
  uint64_t v42 = v7;
  if (v12)
  {
    uint64_t v20 = v13;
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v24 = v17;
    uint64_t v25 = v18;
    uint64_t v26 = v19;
    uint64_t v27 = v12;
    uint64_t v28 = v11;
  }
  else
  {
    v41[1] = v16;
    v41[2] = v15;
    v41[3] = v14;
    v41[4] = v13;
    v41[5] = v11;
    if (qword_269B12BB8 != -1) {
      swift_once();
    }
    uint64_t v29 = (void *)qword_269B1AD38;
    swift_getKeyPath();
    unint64_t v46 = v29;
    sub_251012548((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
    sub_251037530();
    swift_release();
    uint64_t v27 = v29[2];
    uint64_t v28 = v29[3];
    uint64_t v20 = v29[4];
    uint64_t v21 = v29[5];
    uint64_t v22 = v29[6];
    uint64_t v23 = v29[7];
    uint64_t v24 = v29[8];
    uint64_t v25 = v29[9];
    uint64_t v26 = v29[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  unint64_t v46 = (void *)v27;
  uint64_t v47 = v28;
  uint64_t v48 = v20;
  uint64_t v49 = v21;
  uint64_t v50 = v22;
  uint64_t v51 = v23;
  uint64_t v52 = v24;
  uint64_t v53 = v25;
  uint64_t v54 = v26;
  char v30 = *(unsigned char *)(v2 + *(int *)(v42 + 20));
  sub_250F22234(v12);
  double v31 = sub_250FFD07C(v2, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v44 + 264);
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  char v34 = sub_2510386F0();
  uint64_t result = sub_251038050();
  uint64_t v36 = v43;
  *(void *)a1 = v45;
  *(void *)(a1 + 8) = v36;
  *(double *)(a1 + 16) = v31;
  *(void *)(a1 + 24) = KeyPath;
  *(void *)(a1 + 32) = v32;
  *(unsigned char *)(a1 + 40) = v34;
  *(void *)(a1 + 48) = v37;
  *(void *)(a1 + 56) = v38;
  *(void *)(a1 + 64) = v39;
  *(void *)(a1 + 72) = v40;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_251012044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2510120A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_251012118()
{
  unint64_t result = qword_269B14870;
  if (!qword_269B14870)
  {
    sub_251012240(255, &qword_269B14878, (void (*)(uint64_t))sub_2510121B4);
    sub_25101235C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14870);
  }
  return result;
}

void sub_2510121B4()
{
  if (!qword_269B14880)
  {
    sub_251012240(255, &qword_269B14888, (void (*)(uint64_t))sub_2510122A4);
    sub_251012304();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14880);
    }
  }
}

void sub_251012240(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_2510122A4()
{
  if (!qword_269B14890)
  {
    sub_250FBE33C();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14890);
    }
  }
}

void sub_251012304()
{
  if (!qword_269B13258)
  {
    sub_250F49A7C();
    unint64_t v0 = sub_251038680();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13258);
    }
  }
}

unint64_t sub_25101235C()
{
  unint64_t result = qword_269B14898;
  if (!qword_269B14898)
  {
    sub_2510121B4();
    sub_251012404();
    sub_251012548((unint64_t *)&qword_269B13278, (void (*)(uint64_t))sub_251012304);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14898);
  }
  return result;
}

unint64_t sub_251012404()
{
  unint64_t result = qword_269B148A0;
  if (!qword_269B148A0)
  {
    sub_251012240(255, &qword_269B14888, (void (*)(uint64_t))sub_2510122A4);
    sub_2510124A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B148A0);
  }
  return result;
}

unint64_t sub_2510124A0()
{
  unint64_t result = qword_269B148A8;
  if (!qword_269B148A8)
  {
    sub_2510122A4();
    sub_251012548((unint64_t *)&qword_269B13900, (void (*)(uint64_t))sub_250FBE33C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B148A8);
  }
  return result;
}

uint64_t sub_251012548(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_251012594(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_251020ACC((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_25101263C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25101269C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_251012704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2);
}

uint64_t sub_25101271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2);
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B148B8);
}

uint64_t sub_251012758()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_251012774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v2 = sub_251038620();
  uint64_t v63 = *(void *)(v2 - 8);
  uint64_t v64 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v62 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_2510375A0();
  uint64_t v4 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = MEMORY[0x263F42B38];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  uint64_t v49 = MEMORY[0x263F8D8F0];
  sub_25101F514(0, &qword_269B142C0, MEMORY[0x263F42B38], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v48 - v9;
  uint64_t v55 = MEMORY[0x263F06EA8];
  sub_25101F514(0, &qword_269B12F18, MEMORY[0x263F06EA8], v7);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v48 - v12;
  sub_251013838();
  uint64_t v50 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251013914();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v56 = v17;
  uint64_t v57 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251013AF8();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v58 = v21;
  uint64_t v59 = v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v51 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251013C60();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v60 = v24;
  uint64_t v61 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v54 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v1;
  sub_251012F5C(v1, (uint64_t)v16);
  type metadata accessor for BalanceWidgetViewModel();
  uint64_t v27 = *MEMORY[0x263F42B20];
  uint64_t v28 = sub_251037590();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v10, v27, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v10, 0, 1, v28);
  uint64_t v30 = v53;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F42B50], v53);
  sub_251037580();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v30);
  uint64_t v31 = v49;
  sub_25101269C((uint64_t)v10, (uint64_t)&qword_269B142C0, v52, v49, (uint64_t (*)(void))sub_25101F514);
  uint64_t v32 = sub_251037290();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 0, 1, v32);
  uint64_t v33 = sub_251020718(&qword_269B148E0, (void (*)(uint64_t))sub_251013838, (void (*)(void))sub_2510139DC);
  uint64_t v34 = v50;
  sub_251038930();
  sub_25101269C((uint64_t)v13, (uint64_t)&qword_269B12F18, v55, v31, (uint64_t (*)(void))sub_25101F514);
  sub_25101263C((uint64_t)v16, (uint64_t (*)(void))sub_251013838);
  uint64_t v66 = v48;
  uint64_t v35 = type metadata accessor for BalanceWidgetAccessoryCircularLabelView(0);
  uint64_t v69 = v34;
  uint64_t v70 = v33;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = sub_251020ACC(&qword_269B14908, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularLabelView);
  uint64_t v38 = v51;
  uint64_t v39 = v56;
  sub_251038910();
  uint64_t v40 = v39;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v39);
  unint64_t v41 = v62;
  sub_251038610();
  uint64_t v69 = v40;
  uint64_t v70 = v35;
  uint64_t v71 = OpaqueTypeConformance2;
  uint64_t v72 = v37;
  uint64_t v42 = swift_getOpaqueTypeConformance2();
  uint64_t v43 = v54;
  uint64_t v44 = v58;
  sub_2510389E0();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v64);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v44);
  uint64_t v69 = sub_250FC3070();
  uint64_t v70 = v45;
  uint64_t v67 = v44;
  uint64_t v68 = v42;
  swift_getOpaqueTypeConformance2();
  sub_250F3EB74();
  uint64_t v46 = v60;
  sub_2510389B0();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v43, v46);
}

uint64_t sub_251012F5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v56 = type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  MEMORY[0x270FA5388](v56);
  uint64_t v50 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25101FD54(0, &qword_269B14918, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, MEMORY[0x263F19B20]);
  uint64_t v52 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v54 = (uint64_t)&v43 - v5;
  uint64_t v6 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v51 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for BalanceWidgetAccessoryCircularWarmupView(0);
  MEMORY[0x270FA5388](v53);
  uint64_t v48 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25101F514(0, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = sub_251037640();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v47 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v43 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v43 - v25;
  sub_250FC6880((uint64_t)v17);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v27(v17, 1, v9) == 1)
  {
    sub_25101269C((uint64_t)v17, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_25101F514);
    uint64_t v28 = a1;
  }
  else
  {
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    uint64_t v45 = v19 + 16;
    v44(v23, v17, v18);
    sub_25101263C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v46(v26, v23, v18);
    sub_250FC6880((uint64_t)v14);
    int v29 = v27(v14, 1, v9);
    uint64_t v28 = a1;
    if (v29 == 1)
    {
      sub_25101269C((uint64_t)v14, (uint64_t)&qword_26B210278, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_25101F514);
    }
    else
    {
      uint64_t v30 = v49;
      sub_251015DFC((uint64_t)v14, v49, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
      uint64_t v31 = sub_251037610();
      uint64_t result = sub_251037630();
      BOOL v33 = __OFSUB__(v31, result);
      uint64_t v34 = v31 - result;
      if (v33)
      {
        __break(1u);
        return result;
      }
      sub_25101263C(v30, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
      if (v34 > 0)
      {
        uint64_t v35 = v51;
        sub_251015D94(v28, v51, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
        uint64_t v36 = v47;
        v44(v47, v26, v18);
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v38 = v53;
        uint64_t v39 = (uint64_t)v48;
        *(void *)&v48[*(int *)(v53 + 24)] = KeyPath;
        sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
        swift_storeEnumTagMultiPayload();
        sub_251015DFC(v35, v39, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
        v46((char *)(v39 + *(int *)(v38 + 20)), v36, v18);
        sub_251015D94(v39, v54, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView);
        swift_storeEnumTagMultiPayload();
        sub_251020ACC(&qword_269B148F0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularWarmupView);
        sub_251020ACC(&qword_269B148F8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularGaugeView);
        sub_251038580();
        sub_25101263C(v39, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView);
        return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v26, v18);
      }
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
  }
  uint64_t v40 = v51;
  sub_251015D94(v28, v51, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = (uint64_t)v50;
  *(void *)&v50[*(int *)(v56 + 20)] = v41;
  sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_251015DFC(v40, v42, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  sub_251015D94(v42, v54, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView);
  swift_storeEnumTagMultiPayload();
  sub_251020ACC(&qword_269B148F0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularWarmupView);
  sub_251020ACC(&qword_269B148F8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularGaugeView);
  sub_251038580();
  return sub_25101263C(v42, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView);
}

void sub_251013838()
{
  if (!qword_269B148C8)
  {
    sub_25101FD54(255, &qword_269B148D0, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, MEMORY[0x263F19B28]);
    unint64_t v0 = sub_251038B30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B148C8);
    }
  }
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularWarmupView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B14940);
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B14930);
}

void sub_251013914()
{
  if (!qword_269B148D8)
  {
    sub_251013838();
    sub_251020718(&qword_269B148E0, (void (*)(uint64_t))sub_251013838, (void (*)(void))sub_2510139DC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B148D8);
    }
  }
}

unint64_t sub_2510139DC()
{
  unint64_t result = qword_269B148E8;
  if (!qword_269B148E8)
  {
    sub_25101FD54(255, &qword_269B148D0, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, MEMORY[0x263F19B28]);
    sub_251020ACC(&qword_269B148F0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularWarmupView);
    sub_251020ACC(&qword_269B148F8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularGaugeView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B148E8);
  }
  return result;
}

void sub_251013AF8()
{
  if (!qword_269B14900)
  {
    sub_251013914();
    type metadata accessor for BalanceWidgetAccessoryCircularLabelView(255);
    sub_251013838();
    sub_251020718(&qword_269B148E0, (void (*)(uint64_t))sub_251013838, (void (*)(void))sub_2510139DC);
    swift_getOpaqueTypeConformance2();
    sub_251020ACC(&qword_269B14908, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularLabelView);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14900);
    }
  }
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularLabelView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B14920);
}

void sub_251013C60()
{
  if (!qword_269B14910)
  {
    sub_251013AF8();
    sub_251013914();
    type metadata accessor for BalanceWidgetAccessoryCircularLabelView(255);
    sub_251013838();
    sub_251020718(&qword_269B148E0, (void (*)(uint64_t))sub_251013838, (void (*)(void))sub_2510139DC);
    swift_getOpaqueTypeConformance2();
    sub_251020ACC(&qword_269B14908, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularLabelView);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14910);
    }
  }
}

uint64_t sub_251013DE0@<X0>(uint64_t a1@<X8>)
{
  return sub_251015D94(*(void *)(v1 + 16), a1, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
}

uint64_t sub_251013E14()
{
  uint64_t v0 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25101FDD8();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25101FD0C(0);
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251014520((uint64_t)v5);
  type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  sub_250F76178((uint64_t)v2);
  uint64_t v10 = sub_250F2BB88();
  sub_25101263C((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  sub_251015D94((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))sub_25101FDD8);
  *(void *)&v9[*(int *)(v7 + 36)] = v10;
  sub_25101263C((uint64_t)v5, (uint64_t (*)(void))sub_25101FDD8);
  v12[1] = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F6628);
  sub_25101F5E8(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_25101F578((unint64_t *)&qword_269B13050);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_25101FFBC();
  sub_2510389F0();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return sub_25101263C((uint64_t)v9, (uint64_t (*)(void))sub_25101FD0C);
}

uint64_t sub_2510140B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  sub_25101F4E0(0);
  uint64_t v24 = v1 - 8;
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = sub_251038B70();
  uint64_t v4 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v21 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25101F3F8(0);
  uint64_t v22 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  sub_250F76178((uint64_t)v8);
  sub_25101263C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  uint64_t v20 = sub_251038B40();
  sub_250F76178((uint64_t)v8);
  uint64_t v12 = sub_250F2B9A8();
  sub_25101263C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  sub_250F76178((uint64_t)v8);
  id v13 = sub_250F2C028();
  sub_25101263C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  uint64_t KeyPath = swift_getKeyPath();
  sub_250F76178((uint64_t)v8);
  uint64_t v15 = v21;
  uint64_t v16 = v23;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v21, *MEMORY[0x263F1B530], v23);
  sub_25101263C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  uint64_t v17 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v3 + *(int *)(v24 + 36), v15, v16);
  *uint64_t v3 = v17;
  sub_251015D94((uint64_t)v3, (uint64_t)v11 + *(int *)(v22 + 36), (uint64_t (*)(void))sub_25101F4E0);
  *uint64_t v11 = v20;
  v11[1] = v12;
  v11[2] = KeyPath;
  v11[3] = (uint64_t)v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_25101263C((uint64_t)v3, (uint64_t (*)(void))sub_25101F4E0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v26 = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F6668);
  sub_25101F5E8(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_25101F578((unint64_t *)&qword_269B13050);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_25101F87C();
  sub_2510389F0();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return sub_25101263C((uint64_t)v11, (uint64_t (*)(void))sub_25101F3F8);
}

uint64_t sub_251014520@<X0>(uint64_t a1@<X8>)
{
  sub_25101F4E0(0);
  uint64_t v32 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v36 = (void *)((char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = sub_251038B70();
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  BOOL v33 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25101FE4C(0, &qword_269B14A08, (unint64_t *)&qword_269B13250, (void (*)(uint64_t))sub_251012304, sub_25101F4E0);
  uint64_t v39 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (void *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v35 = (uint64_t)v31 - v9;
  sub_25102030C(0, &qword_269B14A40, MEMORY[0x263F19B20]);
  uint64_t v38 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v31 - v11;
  uint64_t v13 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v31 - v17;
  type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  sub_250F76178((uint64_t)v18);
  sub_250F2AFA8();
  uint64_t v20 = v19;
  sub_25101263C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v20)
  {
    v31[0] = sub_251038B40();
    sub_250F76178((uint64_t)v18);
    id v21 = sub_250F2C330();
    v31[1] = a1;
    sub_25101263C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    uint64_t KeyPath = swift_getKeyPath();
    sub_250F76178((uint64_t)v15);
    uint64_t v24 = v33;
    uint64_t v23 = v34;
    if (v15[*(int *)(v13 + 20)]) {
      uint64_t v25 = (unsigned int *)MEMORY[0x263F1B540];
    }
    else {
      uint64_t v25 = (unsigned int *)MEMORY[0x263F1B530];
    }
    uint64_t v26 = v37;
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v33, *v25, v37);
    sub_25101263C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    uint64_t v27 = swift_getKeyPath();
    uint64_t v28 = v36;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v36 + *(int *)(v32 + 28), v24, v26);
    *uint64_t v28 = v27;
    sub_251015D94((uint64_t)v28, (uint64_t)v7 + *(int *)(v39 + 36), (uint64_t (*)(void))sub_25101F4E0);
    void *v7 = v31[0];
    v7[1] = KeyPath;
    v7[2] = v21;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_25101263C((uint64_t)v28, (uint64_t (*)(void))sub_25101F4E0);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v26);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v29 = v35;
    sub_2510203AC((uint64_t)v7, v35);
    sub_251020448(v29, (uint64_t)v12);
    swift_storeEnumTagMultiPayload();
    sub_25102010C();
    sub_251038580();
    return sub_2510204E4(v29);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_25102010C();
    return sub_251038580();
  }
}

uint64_t sub_251014A2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F76178((uint64_t)v5);
  unint64_t v6 = sub_250F2CD34(v1);
  sub_25101263C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  sub_250F76178((uint64_t)v5);
  sub_25101263C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  *(void *)a1 = v6;
  *(_OWORD *)(a1 + 8) = xmmword_25103A690;
  sub_25101FC10();
  uint64_t v8 = v7;
  sub_251013E14();
  return sub_2510140B4(a1 + *(int *)(v8 + 60));
}

uint64_t sub_251014B48@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v131 = a2;
  sub_25101F4E0(0);
  uint64_t v128 = v3 - 8;
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v127 = (uint64_t *)((char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v126 = sub_251038B70();
  uint64_t v124 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v123 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25101F3F8(0);
  uint64_t v137 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v125 = (uint64_t *)((char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v130 = sub_25101F3F8;
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A470];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F18E28];
  sub_25101FD54(0, &qword_269B149A0, (uint64_t (*)(uint64_t))sub_25101F3F8, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v129 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v138 = (uint64_t)&v105 - v13;
  uint64_t v14 = sub_251037640();
  uint64_t v118 = *(void *)(v14 - 8);
  uint64_t v119 = v14;
  MEMORY[0x270FA5388](v14);
  unint64_t v116 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for WarmupProgressCounter() - 8;
  MEMORY[0x270FA5388](v117);
  uint64_t v115 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v120 = (uint64_t)&v105 - v18;
  sub_25101F36C();
  uint64_t v122 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v121 = (uint64_t)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_25101F36C;
  sub_25101FD54(0, &qword_269B14990, (uint64_t (*)(uint64_t))sub_25101F36C, v8, v9);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v140 = (uint64_t)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v142 = (uint64_t)&v105 - v24;
  uint64_t v25 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = MEMORY[0x263F1A470];
  sub_25101F47C(0, &qword_269B14980, MEMORY[0x263F1A470]);
  uint64_t v113 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v112 = (char *)&v105 - v29;
  sub_25101F1F8();
  uint64_t v135 = v30;
  uint64_t v143 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v139 = (char *)&v105 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v141 = (char *)&v105 - v33;
  uint64_t v111 = a1;
  v146[0] = sub_250FC64D0();
  v146[1] = v34;
  sub_250F3EB74();
  uint64_t v35 = sub_2510388A0();
  uint64_t v37 = v36;
  char v39 = v38 & 1;
  uint64_t v40 = type metadata accessor for BalanceWidgetAccessoryCircularWarmupView(0);
  uint64_t v109 = a1 + *(int *)(v40 + 24);
  uint64_t v110 = v40;
  sub_250F76178((uint64_t)v27);
  sub_250F2C5D4();
  uint64_t v106 = v27;
  unint64_t v132 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs;
  sub_25101263C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  uint64_t v133 = sub_251038870();
  uint64_t v134 = v41;
  uint64_t v105 = v42;
  char v44 = v43 & 1;
  sub_250F3EBC8(v35, v37, v39);
  swift_release();
  swift_bridgeObjectRelease();
  sub_250F76178((uint64_t)v27);
  uint64_t v45 = sub_250F2BE20();
  sub_25101263C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v146[0] = v45;
  uint64_t v46 = v133;
  uint64_t v47 = v105;
  LOBYTE(v27) = v44;
  uint64_t v48 = sub_251038860();
  uint64_t v107 = v48;
  uint64_t v108 = v49;
  uint64_t v51 = v50;
  uint64_t v52 = v49;
  char v54 = v53 & 1;
  sub_250F3EBC8(v46, v47, (char)v27);
  swift_release();
  swift_bridgeObjectRelease();
  v146[0] = v48;
  v146[1] = v51;
  LOBYTE(v146[2]) = v54;
  v146[3] = v52;
  v145[0] = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F66A8);
  sub_25101F5E8(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  uint64_t v134 = v55;
  uint64_t v133 = sub_25101F578((unint64_t *)&qword_269B13050);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  uint64_t v56 = (uint64_t)v112;
  uint64_t v57 = MEMORY[0x263F1A830];
  sub_2510389F0();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_250F3EBC8(v107, v51, v54);
  swift_bridgeObjectRelease();
  sub_25101F2A0();
  uint64_t v58 = v139;
  sub_251038920();
  sub_25101269C(v56, (uint64_t)&qword_269B14980, v114, v57, (uint64_t (*)(void))sub_25101F47C);
  (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v141, v58, v135);
  uint64_t v60 = v118;
  uint64_t v59 = v119;
  uint64_t v61 = v116;
  (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v116, v111 + *(int *)(v110 + 20), v119);
  uint64_t v62 = (uint64_t)v106;
  sub_250F76178((uint64_t)v106);
  sub_25101263C(v62, (uint64_t (*)(void))v132);
  uint64_t v63 = v117;
  uint64_t v64 = (uint64_t)v115;
  uint64_t v65 = &v115[*(int *)(v117 + 32)];
  v145[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v145);
  sub_250F76708((uint64_t)v145, (uint64_t)v146);
  memcpy(v65, v146, 0x119uLL);
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v64, v61, v59);
  uint64_t v66 = (_OWORD *)(v64 + *(int *)(v63 + 28));
  __asm { FMOV            V0.2D, #4.0 }
  _OWORD *v66 = _Q0;
  v66[1] = xmmword_25103E7B0;
  uint64_t v72 = v120;
  sub_251015DFC(v64, v120, (uint64_t (*)(void))type metadata accessor for WarmupProgressCounter);
  uint64_t KeyPath = swift_getKeyPath();
  sub_250F76178(v62);
  sub_250F2C740(v147);
  unint64_t v74 = v132;
  sub_25101263C(v62, (uint64_t (*)(void))v132);
  uint64_t v75 = v121;
  sub_251015D94(v72, v121, (uint64_t (*)(void))type metadata accessor for WarmupProgressCounter);
  uint64_t v76 = *(int *)(v122 + 36);
  *(void *)(v75 + v76) = KeyPath;
  memcpy((void *)(v75 + v76 + 8), v147, 0x118uLL);
  sub_25101263C(v72, (uint64_t (*)(void))type metadata accessor for WarmupProgressCounter);
  uint64_t v144 = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F66E8);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_25101F634();
  uint64_t v77 = v140;
  sub_2510389F0();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_25101263C(v75, (uint64_t (*)(void))sub_25101F36C);
  sub_25101FA5C(v77, v142, &qword_269B14990, (uint64_t (*)(uint64_t))v136);
  sub_250F76178(v62);
  sub_25101263C(v62, (uint64_t (*)(void))v74);
  uint64_t v122 = sub_251038B40();
  sub_250F76178(v62);
  uint64_t v78 = sub_250F2B9A8();
  uint64_t v79 = v74;
  sub_25101263C(v62, (uint64_t (*)(void))v74);
  sub_250F76178(v62);
  id v80 = sub_250F2C028();
  sub_25101263C(v62, (uint64_t (*)(void))v74);
  uint64_t v81 = swift_getKeyPath();
  sub_250F76178(v62);
  uint64_t v83 = v123;
  uint64_t v82 = v124;
  uint64_t v84 = v126;
  (*(void (**)(char *, void, uint64_t))(v124 + 104))(v123, *MEMORY[0x263F1B530], v126);
  sub_25101263C(v62, (uint64_t (*)(void))v79);
  uint64_t v85 = swift_getKeyPath();
  uint64_t v86 = v127;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))((char *)v127 + *(int *)(v128 + 36), v83, v84);
  uint64_t v87 = (uint64_t)v86;
  *uint64_t v86 = v85;
  BOOL v88 = v125;
  uint64_t v89 = v87;
  sub_251015D94(v87, (uint64_t)v125 + *(int *)(v137 + 36), (uint64_t (*)(void))sub_25101F4E0);
  uint64_t *v88 = v122;
  v88[1] = v78;
  v88[2] = v81;
  v88[3] = (uint64_t)v80;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_25101263C(v89, (uint64_t (*)(void))sub_25101F4E0);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v144 = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F6728);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_25101F87C();
  uint64_t v90 = (uint64_t)v129;
  sub_2510389F0();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_25101263C((uint64_t)v88, (uint64_t (*)(void))sub_25101F3F8);
  uint64_t v91 = v138;
  uint64_t v92 = (uint64_t (*)(uint64_t))v130;
  sub_25101FA5C(v90, v138, &qword_269B149A0, (uint64_t (*)(uint64_t))v130);
  uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
  uint64_t v94 = v139;
  uint64_t v95 = v135;
  v93(v139, v141, v135);
  uint64_t v96 = (uint64_t (*)(uint64_t))v136;
  sub_25101FAF4(v142, v140, &qword_269B14990, (uint64_t (*)(uint64_t))v136);
  uint64_t v97 = v91;
  uint64_t v98 = v90;
  sub_25101FAF4(v97, v90, &qword_269B149A0, v92);
  uint64_t v99 = v131;
  v93(v131, v94, v95);
  sub_25101F0F8();
  uint64_t v101 = v100;
  uint64_t v102 = v140;
  sub_25101FAF4(v140, (uint64_t)&v99[*(int *)(v100 + 48)], &qword_269B14990, v96);
  sub_25101FAF4(v98, (uint64_t)&v99[*(int *)(v101 + 64)], &qword_269B149A0, v92);
  sub_25101FB8C(v138, &qword_269B149A0, v92);
  sub_25101FB8C(v142, &qword_269B14990, v96);
  uint64_t v103 = *(void (**)(char *, uint64_t))(v143 + 8);
  v103(v141, v95);
  sub_25101FB8C(v98, &qword_269B149A0, v92);
  sub_25101FB8C(v102, &qword_269B14990, v96);
  return ((uint64_t (*)(char *, uint64_t))v103)(v139, v95);
}

uint64_t sub_251015988@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_251038520();
  *(void *)(a1 + 8) = 0x4000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  sub_25101F05C();
  return sub_251014B48(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t sub_2510159D0@<X0>(uint64_t a1@<X8>)
{
  sub_251020578();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v5 = sub_2510386B0();
  unsigned __int8 v6 = sub_2510386D0();
  char v7 = sub_2510386C0();
  sub_2510386C0();
  if (sub_2510386C0() != v5) {
    char v7 = sub_2510386C0();
  }
  sub_2510386C0();
  if (sub_2510386C0() != v6) {
    char v7 = sub_2510386C0();
  }
  *uint64_t v4 = v7;
  sub_251020788();
  uint64_t v8 = sub_250FC2B70();
  uint64_t v12 = MEMORY[0x263F8EE88];
  uint64_t v9 = sub_2510207F4(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v9;
  swift_getKeyPath();
  sub_25101F5E8(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_25101F47C(0, &qword_269B14980, MEMORY[0x263F1A470]);
  sub_25101F578(&qword_269B12FE8);
  sub_25101F2A0();
  sub_251038C80();
  return sub_251015DFC((uint64_t)v4, a1, (uint64_t (*)(void))sub_251020578);
}

uint64_t sub_251015C08()
{
  sub_250F3EB74();
  swift_bridgeObjectRetain();
  uint64_t v0 = MEMORY[0x263F8D310];
  uint64_t v1 = sub_2510388A0();
  uint64_t v3 = v2;
  char v5 = v4 & 1;
  sub_250FF5DF0((uint64_t)&unk_2701F6768);
  sub_25101F5E8(0, (unint64_t *)&qword_269B12FB0, v0, MEMORY[0x263F8D488]);
  sub_25101F578((unint64_t *)&qword_269B13050);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_2510389F0();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_250F3EBC8(v1, v3, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_251015D94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_251015DFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

char *sub_251015E64(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_2510376B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)&a1[v8[5]] = *(void *)&a2[v8[5]];
    uint64_t v9 = v8[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v10 = *(void *)v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = sub_2510379E0();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v11, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = v8[7];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v20 = *((void *)v19 - 1);
    uint64_t v68 = v6;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = sub_251037400();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      v23(v17, v18, v22);
      uint64_t v24 = v19[5];
      uint64_t v65 = v8;
      uint64_t v25 = &v17[v24];
      uint64_t v26 = &v18[v24];
      v23(&v17[v24], &v18[v24], v22);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
      uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
      *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
      *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
      uint64_t v29 = v19[6];
      uint64_t v30 = &v17[v29];
      uint64_t v31 = &v18[v29];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v17[v19[7]] = v18[v19[7]];
      v17[v19[8]] = v18[v19[8]];
      v17[v19[9]] = v18[v19[9]];
      uint64_t v32 = v19[10];
      uint64_t v33 = &v17[v32];
      uint64_t v34 = &v18[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      uint64_t v36 = v19[11];
      uint64_t v37 = &v17[v36];
      char v38 = &v18[v36];
      uint64_t v39 = *((void *)v38 + 1);
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = v39;
      uint64_t v40 = *(void (**)(char *, void, uint64_t, int *))(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = v65;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v17, 0, 1, v19);
    }
    uint64_t v41 = v8[8];
    uint64_t v42 = &a1[v41];
    char v43 = &a2[v41];
    *(void *)&a1[v41] = *(void *)&a2[v41];
    uint64_t v44 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v45 = *(int *)(v44 + 20);
    uint64_t v64 = &v43[v45];
    uint64_t v66 = &v42[v45];
    uint64_t v46 = v8;
    uint64_t v47 = sub_2510374F0();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
    swift_bridgeObjectRetain();
    v48(v66, v64, v47);
    *(void *)&v42[*(int *)(v44 + 24)] = *(void *)&v43[*(int *)(v44 + 24)];
    *(void *)&a1[v46[9]] = *(void *)&a2[v46[9]];
    *(void *)&a1[v46[10]] = *(void *)&a2[v46[10]];
    uint64_t v49 = v46[11];
    uint64_t v67 = &a1[v49];
    uint64_t v50 = &a2[v49];
    uint64_t v51 = sub_251037400();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v67, v50, v51);
    sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v54 = v53;
    v52(&v67[*(int *)(v53 + 36)], &v50[*(int *)(v53 + 36)], v51);
    uint64_t v55 = v46[12];
    uint64_t v56 = &a1[v55];
    uint64_t v57 = &a2[v55];
    v52(&a1[v55], &a2[v55], v51);
    v52(&v56[*(int *)(v54 + 36)], &v57[*(int *)(v54 + 36)], v51);
    *(void *)&a1[v46[13]] = *(void *)&a2[v46[13]];
    *(void *)&a1[v46[14]] = *(void *)&a2[v46[14]];
    uint64_t v58 = *(int *)(v68 + 20);
    uint64_t v59 = &a1[v58];
    uint64_t v60 = &a2[v58];
    uint64_t v61 = sub_2510375C0();
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62(v59, v60, v61);
    a1[*(int *)(v68 + 24)] = a2[*(int *)(v68 + 24)];
  }
  return a1;
}

uint64_t sub_251016530(uint64_t a1)
{
  uint64_t v2 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + v3[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = sub_2510379E0();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
  }
  uint64_t v7 = a1 + v3[7];
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = sub_251037400();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    v10(v7, v9);
    uint64_t v11 = v7 + *(int *)(v8 + 20);
    v10(v11, v9);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v10(v11 + *(int *)(v12 + 36), v9);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = a1 + v3[8];
  swift_bridgeObjectRelease();
  uint64_t v14 = v13 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v15 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = a1 + v3[11];
  uint64_t v17 = sub_251037400();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v20 = v19;
  v18(v16 + *(int *)(v19 + 36), v17);
  uint64_t v21 = a1 + v3[12];
  v18(v21, v17);
  v18(v21 + *(int *)(v20 + 36), v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v23 = sub_2510375C0();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
  return v24(v22, v23);
}

uint64_t sub_251016944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  uint64_t v6 = v5[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    void *v7 = *v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = sub_2510379E0();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = v5[7];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = sub_251037400();
    uint64_t v61 = v16;
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
    v19(v13, v14, v18);
    uint64_t v20 = v15[5];
    uint64_t v63 = v5;
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    v19(&v13[v20], &v14[v20], v18);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
    uint64_t v24 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v21[v24[5]] = *(void *)&v22[v24[5]];
    *(void *)&v21[v24[6]] = *(void *)&v22[v24[6]];
    *(void *)&v21[v24[7]] = *(void *)&v22[v24[7]];
    uint64_t v25 = v15[6];
    uint64_t v26 = &v13[v25];
    uint64_t v27 = &v14[v25];
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v13[v15[7]] = v14[v15[7]];
    v13[v15[8]] = v14[v15[8]];
    v13[v15[9]] = v14[v15[9]];
    uint64_t v28 = v15[10];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = v15[11];
    uint64_t v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = *(void (**)(char *, void, uint64_t, int *))(v61 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = v63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v13, 0, 1, v15);
  }
  uint64_t v37 = v5[8];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(void *)(a1 + v37) = *(void *)(a2 + v37);
  uint64_t v40 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v41 = *(int *)(v40 + 20);
  uint64_t v62 = v39 + v41;
  uint64_t v64 = v38 + v41;
  uint64_t v42 = v5;
  uint64_t v43 = sub_2510374F0();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16);
  swift_bridgeObjectRetain();
  v44(v64, v62, v43);
  *(void *)(v38 + *(int *)(v40 + 24)) = *(void *)(v39 + *(int *)(v40 + 24));
  *(void *)(a1 + v42[9]) = *(void *)(a2 + v42[9]);
  *(void *)(a1 + v42[10]) = *(void *)(a2 + v42[10]);
  uint64_t v45 = v42[11];
  uint64_t v65 = a1 + v45;
  uint64_t v46 = a2 + v45;
  uint64_t v47 = sub_251037400();
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48(v65, v46, v47);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v50 = v49;
  v48(v65 + *(int *)(v49 + 36), v46 + *(int *)(v49 + 36), v47);
  uint64_t v51 = v42[12];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  v48(a1 + v51, a2 + v51, v47);
  v48(v52 + *(int *)(v50 + 36), v53 + *(int *)(v50 + 36), v47);
  *(void *)(a1 + v42[13]) = *(void *)(a2 + v42[13]);
  *(void *)(a1 + v42[14]) = *(void *)(a2 + v42[14]);
  uint64_t v54 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v55 = *(int *)(v54 + 20);
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  uint64_t v58 = sub_2510375C0();
  uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v59(v56, v57, v58);
  *(unsigned char *)(a1 + *(int *)(v54 + 24)) = *(unsigned char *)(a2 + *(int *)(v54 + 24));
  return a1;
}

uint64_t sub_251016FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = v5[6];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_25101263C(a1 + v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      void *v7 = *v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v9 = sub_2510379E0();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = v5[7];
  uint64_t v13 = (unsigned char *)(a1 + v12);
  uint64_t v14 = (unsigned char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v63 = sub_251037400();
      uint64_t v64 = *(void (**)(void))(*(void *)(v63 - 8) + 24);
      uint64_t v82 = v63;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v64)(v13, v14, v63);
      uint64_t v65 = v15[5];
      uint64_t v66 = &v13[v65];
      uint64_t v79 = &v14[v65];
      v64(&v13[v65]);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      ((void (*)(char *, char *, uint64_t))v64)(&v66[*(int *)(v67 + 36)], &v79[*(int *)(v67 + 36)], v82);
      uint64_t v68 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v66[v68[5]] = *(void *)&v79[v68[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v66[v68[6]] = *(void *)&v79[v68[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v66[v68[7]] = *(void *)&v79[v68[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v69 = v15[6];
      uint64_t v70 = &v13[v69];
      uint64_t v71 = &v14[v69];
      long long v72 = *(_OWORD *)v71;
      v70[16] = v71[16];
      *(_OWORD *)uint64_t v70 = v72;
      v13[v15[7]] = v14[v15[7]];
      v13[v15[8]] = v14[v15[8]];
      v13[v15[9]] = v14[v15[9]];
      uint64_t v73 = v15[10];
      unint64_t v74 = &v13[v73];
      uint64_t v75 = &v14[v73];
      void *v74 = *v75;
      v74[1] = v75[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v76 = v15[11];
      uint64_t v77 = &v13[v76];
      uint64_t v78 = &v14[v76];
      void *v77 = *v78;
      v77[1] = v78[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_25101263C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_13;
  }
  if (v19)
  {
LABEL_13:
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v20 = sub_251037400();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  uint64_t v80 = v16;
  v21(v13, v14, v20);
  uint64_t v22 = v21;
  uint64_t v23 = v15[5];
  uint64_t v24 = &v13[v23];
  uint64_t v25 = &v14[v23];
  v22(&v13[v23], &v14[v23], v20);
  sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v20);
  uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v24[v27[5]] = *(void *)&v25[v27[5]];
  *(void *)&v24[v27[6]] = *(void *)&v25[v27[6]];
  *(void *)&v24[v27[7]] = *(void *)&v25[v27[7]];
  uint64_t v28 = v15[6];
  uint64_t v29 = &v13[v28];
  uint64_t v30 = &v14[v28];
  char v31 = v30[16];
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  v29[16] = v31;
  v13[v15[7]] = v14[v15[7]];
  v13[v15[8]] = v14[v15[8]];
  v13[v15[9]] = v14[v15[9]];
  uint64_t v32 = v15[10];
  uint64_t v33 = &v13[v32];
  uint64_t v34 = &v14[v32];
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  uint64_t v35 = v15[11];
  uint64_t v36 = &v13[v35];
  uint64_t v37 = &v14[v35];
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  uint64_t v81 = *(void (**)(unsigned char *, void, uint64_t, int *))(v80 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81(v13, 0, 1, v15);
LABEL_14:
  uint64_t v39 = v5[8];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v44 = v40 + v43;
  uint64_t v45 = v41 + v43;
  uint64_t v46 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 24))(v44, v45, v46);
  *(void *)(v40 + *(int *)(v42 + 24)) = *(void *)(v41 + *(int *)(v42 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v5[11];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = sub_251037400();
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 24);
  v51(v48, v49, v50);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v53 = v52;
  v51(v48 + *(int *)(v52 + 36), v49 + *(int *)(v52 + 36), v50);
  uint64_t v54 = v5[12];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  v51(a1 + v54, a2 + v54, v50);
  v51(v55 + *(int *)(v53 + 36), v56 + *(int *)(v53 + 36), v50);
  *(void *)(a1 + v5[13]) = *(void *)(a2 + v5[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[14]) = *(void *)(a2 + v5[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v58 = *(int *)(v57 + 20);
  uint64_t v59 = a1 + v58;
  uint64_t v60 = a2 + v58;
  uint64_t v61 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 24))(v59, v60, v61);
  *(unsigned char *)(a1 + *(int *)(v57 + 24)) = *(unsigned char *)(a2 + *(int *)(v57 + 24));
  return a1;
}

uint64_t sub_25101788C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  uint64_t v6 = v5[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = sub_2510379E0();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = v5[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v17 = *((void *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v53 = v17;
    uint64_t v19 = sub_251037400();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
    v20(v14, v15, v19);
    uint64_t v21 = v16[5];
    uint64_t v22 = &v14[v21];
    uint64_t v23 = &v15[v21];
    v20(&v14[v21], &v15[v21], v19);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v20(&v22[*(int *)(v24 + 36)], &v23[*(int *)(v24 + 36)], v19);
    uint64_t v25 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v22[v25[5]] = *(void *)&v23[v25[5]];
    *(void *)&v22[v25[6]] = *(void *)&v23[v25[6]];
    *(void *)&v22[v25[7]] = *(void *)&v23[v25[7]];
    uint64_t v26 = v16[6];
    uint64_t v27 = &v14[v26];
    uint64_t v28 = &v15[v26];
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    v14[v16[7]] = v15[v16[7]];
    v14[v16[8]] = v15[v16[8]];
    v14[v16[9]] = v15[v16[9]];
    *(_OWORD *)&v14[v16[10]] = *(_OWORD *)&v15[v16[10]];
    *(_OWORD *)&v14[v16[11]] = *(_OWORD *)&v15[v16[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v53 + 56))(v14, 0, 1, v16);
  }
  uint64_t v29 = v5[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(void *)(a1 + v29) = *(void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v34 = v30 + v33;
  uint64_t v35 = v31 + v33;
  uint64_t v36 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
  *(void *)(v30 + *(int *)(v32 + 24)) = *(void *)(v31 + *(int *)(v32 + 24));
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
  uint64_t v37 = v5[11];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  uint64_t v40 = sub_251037400();
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32);
  v41(v38, v39, v40);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v43 = v42;
  v41(v38 + *(int *)(v42 + 36), v39 + *(int *)(v42 + 36), v40);
  uint64_t v44 = v5[12];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  v41(a1 + v44, a2 + v44, v40);
  v41(v45 + *(int *)(v43 + 36), v46 + *(int *)(v43 + 36), v40);
  *(void *)(a1 + v5[13]) = *(void *)(a2 + v5[13]);
  *(void *)(a1 + v5[14]) = *(void *)(a2 + v5[14]);
  uint64_t v47 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v48 = *(int *)(v47 + 20);
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  uint64_t v51 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
  *(unsigned char *)(a1 + *(int *)(v47 + 24)) = *(unsigned char *)(a2 + *(int *)(v47 + 24));
  return a1;
}

uint64_t sub_251017EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = v5[6];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    sub_25101263C(a1 + v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v9 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v10 = sub_2510379E0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v13 = v5[7];
  uint64_t v14 = (unsigned char *)(a1 + v13);
  uint64_t v15 = (unsigned char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      uint64_t v57 = sub_251037400();
      uint64_t v58 = *(void (**)(void))(*(void *)(v57 - 8) + 40);
      uint64_t v78 = v57;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v58)(v14, v15, v57);
      uint64_t v59 = v16[5];
      uint64_t v60 = &v14[v59];
      uint64_t v76 = &v15[v59];
      v58(&v14[v59]);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      ((void (*)(char *, char *, uint64_t))v58)(&v60[*(int *)(v61 + 36)], &v76[*(int *)(v61 + 36)], v78);
      uint64_t v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v60[v62[5]] = *(void *)&v76[v62[5]];
      swift_bridgeObjectRelease();
      *(void *)&v60[v62[6]] = *(void *)&v76[v62[6]];
      swift_bridgeObjectRelease();
      *(void *)&v60[v62[7]] = *(void *)&v76[v62[7]];
      swift_bridgeObjectRelease();
      uint64_t v63 = v16[6];
      uint64_t v64 = &v14[v63];
      uint64_t v65 = &v15[v63];
      *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
      v64[16] = v65[16];
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      uint64_t v66 = v16[10];
      uint64_t v67 = &v14[v66];
      uint64_t v68 = (uint64_t *)&v15[v66];
      uint64_t v70 = *v68;
      uint64_t v69 = v68[1];
      *uint64_t v67 = v70;
      v67[1] = v69;
      swift_bridgeObjectRelease();
      uint64_t v71 = v16[11];
      long long v72 = &v14[v71];
      uint64_t v73 = (uint64_t *)&v15[v71];
      uint64_t v75 = *v73;
      uint64_t v74 = v73[1];
      *long long v72 = v75;
      v72[1] = v74;
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_25101263C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v21 = sub_251037400();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
  uint64_t v77 = v17;
  v22(v14, v15, v21);
  uint64_t v23 = v22;
  uint64_t v24 = v16[5];
  uint64_t v25 = &v14[v24];
  uint64_t v26 = &v15[v24];
  v23(&v14[v24], &v15[v24], v21);
  sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
  uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
  *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
  *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
  uint64_t v29 = v16[6];
  uint64_t v30 = &v14[v29];
  uint64_t v31 = &v15[v29];
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  v30[16] = v31[16];
  v14[v16[7]] = v15[v16[7]];
  v14[v16[8]] = v15[v16[8]];
  v14[v16[9]] = v15[v16[9]];
  *(_OWORD *)&v14[v16[10]] = *(_OWORD *)&v15[v16[10]];
  *(_OWORD *)&v14[v16[11]] = *(_OWORD *)&v15[v16[11]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v77 + 56))(v14, 0, 1, v16);
LABEL_14:
  uint64_t v33 = v5[8];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  *(void *)(a1 + v33) = *(void *)(a2 + v33);
  swift_bridgeObjectRelease();
  uint64_t v36 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v37 = *(int *)(v36 + 20);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = v35 + v37;
  uint64_t v40 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 40))(v38, v39, v40);
  *(void *)(v34 + *(int *)(v36 + 24)) = *(void *)(v35 + *(int *)(v36 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
  swift_bridgeObjectRelease();
  uint64_t v41 = v5[11];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  uint64_t v44 = sub_251037400();
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 40);
  v45(v42, v43, v44);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v47 = v46;
  v45(v42 + *(int *)(v46 + 36), v43 + *(int *)(v46 + 36), v44);
  uint64_t v48 = v5[12];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  v45(a1 + v48, a2 + v48, v44);
  v45(v49 + *(int *)(v47 + 36), v50 + *(int *)(v47 + 36), v44);
  *(void *)(a1 + v5[13]) = *(void *)(a2 + v5[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[14]) = *(void *)(a2 + v5[14]);
  swift_bridgeObjectRelease();
  uint64_t v51 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v52 = *(int *)(v51 + 20);
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  uint64_t v55 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 40))(v53, v54, v55);
  *(unsigned char *)(a1 + *(int *)(v51 + 24)) = *(unsigned char *)(a2 + *(int *)(v51 + 24));
  return a1;
}

uint64_t sub_2510186C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510186D4);
}

uint64_t sub_2510186D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_251018740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251018754);
}

uint64_t sub_251018754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_2510187C4()
{
  uint64_t result = type metadata accessor for BalanceWidgetViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_251018850(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510376B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)&a1[v8[5]] = *(void *)&a2[v8[5]];
    uint64_t v9 = v8[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v10 = *(void *)v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = sub_2510379E0();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v11, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = v8[7];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    int v19 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v20 = *((void *)v19 - 1);
    uint64_t v74 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = sub_251037400();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      v23(v17, v18, v22);
      uint64_t v24 = v19[5];
      uint64_t v71 = v8;
      uint64_t v25 = &v17[v24];
      uint64_t v26 = &v18[v24];
      v23(&v17[v24], &v18[v24], v22);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
      uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
      *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
      *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
      uint64_t v29 = v19[6];
      uint64_t v30 = &v17[v29];
      uint64_t v31 = &v18[v29];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v17[v19[7]] = v18[v19[7]];
      v17[v19[8]] = v18[v19[8]];
      v17[v19[9]] = v18[v19[9]];
      uint64_t v32 = v19[10];
      uint64_t v33 = &v17[v32];
      uint64_t v34 = &v18[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      uint64_t v36 = v19[11];
      uint64_t v37 = &v17[v36];
      uint64_t v38 = &v18[v36];
      uint64_t v39 = *((void *)v38 + 1);
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = v39;
      uint64_t v40 = *(void (**)(char *, void, uint64_t, int *))(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = v71;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v17, 0, 1, v19);
    }
    uint64_t v41 = v8[8];
    uint64_t v42 = &a1[v41];
    uint64_t v43 = &a2[v41];
    *(void *)&a1[v41] = *(void *)&a2[v41];
    uint64_t v44 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v45 = *(int *)(v44 + 20);
    uint64_t v70 = &v43[v45];
    long long v72 = &v42[v45];
    uint64_t v46 = v8;
    uint64_t v47 = sub_2510374F0();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
    swift_bridgeObjectRetain();
    v48(v72, v70, v47);
    *(void *)&v42[*(int *)(v44 + 24)] = *(void *)&v43[*(int *)(v44 + 24)];
    *(void *)&a1[v46[9]] = *(void *)&a2[v46[9]];
    *(void *)&a1[v46[10]] = *(void *)&a2[v46[10]];
    uint64_t v49 = v46[11];
    uint64_t v73 = &a1[v49];
    uint64_t v50 = &a2[v49];
    uint64_t v51 = sub_251037400();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v73, v50, v51);
    sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v54 = v53;
    v52(&v73[*(int *)(v53 + 36)], &v50[*(int *)(v53 + 36)], v51);
    uint64_t v55 = v46[12];
    uint64_t v56 = &a1[v55];
    uint64_t v57 = &a2[v55];
    v52(&a1[v55], &a2[v55], v51);
    v52(&v56[*(int *)(v54 + 36)], &v57[*(int *)(v54 + 36)], v51);
    *(void *)&a1[v46[13]] = *(void *)&a2[v46[13]];
    *(void *)&a1[v46[14]] = *(void *)&a2[v46[14]];
    uint64_t v58 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v59 = *(int *)(v58 + 20);
    uint64_t v60 = &a1[v59];
    uint64_t v61 = &a2[v59];
    uint64_t v62 = sub_2510375C0();
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63(v60, v61, v62);
    a1[*(int *)(v58 + 24)] = a2[*(int *)(v58 + 24)];
    uint64_t v64 = *(int *)(v74 + 20);
    uint64_t v65 = &a1[v64];
    uint64_t v66 = &a2[v64];
    sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v67 = sub_251038F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
      uint64_t v68 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      v65[*(int *)(v68 + 20)] = v66[*(int *)(v68 + 20)];
    }
    else
    {
      *(void *)uint64_t v65 = *(void *)v66;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_251018FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = sub_2510379E0();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  uint64_t v9 = a1 + v5[7];
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = sub_251037400();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v9, v11);
    uint64_t v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v17 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + v5[11];
  uint64_t v19 = sub_251037400();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  uint64_t v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v25 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  uint64_t v26 = a1 + *(int *)(a2 + 20);
  sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = sub_251038F20();
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
    return v28(v26, v27);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_2510194D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = sub_2510379E0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v72 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v15, v16, v20);
    uint64_t v22 = v17[5];
    uint64_t v69 = v7;
    uint64_t v23 = &v15[v22];
    uint64_t v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
    *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
    *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
    uint64_t v27 = v17[6];
    uint64_t v28 = &v15[v27];
    uint64_t v29 = &v16[v27];
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    uint64_t v30 = v17[10];
    uint64_t v31 = &v15[v30];
    uint64_t v32 = &v16[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = v17[11];
    uint64_t v35 = &v15[v34];
    uint64_t v36 = &v16[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v37;
    uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = v69;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v15, 0, 1, v17);
  }
  uint64_t v39 = v7[8];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v68 = v41 + v43;
  uint64_t v70 = v40 + v43;
  uint64_t v44 = v7;
  uint64_t v45 = sub_2510374F0();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16);
  swift_bridgeObjectRetain();
  v46(v70, v68, v45);
  *(void *)(v40 + *(int *)(v42 + 24)) = *(void *)(v41 + *(int *)(v42 + 24));
  *(void *)(a1 + v44[9]) = *(void *)(a2 + v44[9]);
  *(void *)(a1 + v44[10]) = *(void *)(a2 + v44[10]);
  uint64_t v47 = v44[11];
  uint64_t v71 = a1 + v47;
  uint64_t v48 = a2 + v47;
  uint64_t v49 = sub_251037400();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50(v71, v48, v49);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(v71 + *(int *)(v51 + 36), v48 + *(int *)(v51 + 36), v49);
  uint64_t v53 = v44[12];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v50(a1 + v53, a2 + v53, v49);
  v50(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v49);
  *(void *)(a1 + v44[13]) = *(void *)(a2 + v44[13]);
  *(void *)(a1 + v44[14]) = *(void *)(a2 + v44[14]);
  uint64_t v56 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v57 = *(int *)(v56 + 20);
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  uint64_t v60 = sub_2510375C0();
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61(v58, v59, v60);
  *(unsigned char *)(a1 + *(int *)(v56 + 24)) = *(unsigned char *)(a2 + *(int *)(v56 + 24));
  uint64_t v62 = *(int *)(v72 + 20);
  uint64_t v63 = (void *)(a1 + v62);
  uint64_t v64 = (void *)(a2 + v62);
  sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v65 = sub_251038F20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
    uint64_t v66 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *((unsigned char *)v63 + *(int *)(v66 + 20)) = *((unsigned char *)v64 + *(int *)(v66 + 20));
  }
  else
  {
    void *v63 = *v64;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_251019C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = v6[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_25101263C(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v8 = *v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = sub_2510379E0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = v6[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v86 = *((void *)v16 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v86 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = sub_251037400();
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      v21(v14, v15, v20);
      uint64_t v22 = v16[5];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      v21(&v14[v22], &v15[v22], v20);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
      uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
      *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
      *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
      uint64_t v27 = v16[6];
      uint64_t v28 = &v14[v27];
      uint64_t v29 = &v15[v27];
      char v30 = v29[16];
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      v28[16] = v30;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      uint64_t v31 = v16[10];
      uint64_t v32 = &v14[v31];
      uint64_t v33 = &v15[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      uint64_t v34 = v16[11];
      uint64_t v35 = &v14[v34];
      uint64_t v36 = &v15[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      *((void *)v35 + 1) = *((void *)v36 + 1);
      uint64_t v87 = *(void (**)(char *, void, uint64_t, int *))(v86 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v87(v14, 0, 1, v16);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    sub_25101263C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v68 = sub_251037400();
  uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 24);
  uint64_t v88 = v68;
  v69(v14, v15, v68);
  uint64_t v70 = v69;
  uint64_t v71 = v16[5];
  uint64_t v72 = &v14[v71];
  uint64_t v85 = &v15[v71];
  ((void (*)(char *))v70)(&v14[v71]);
  sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v70(&v72[*(int *)(v73 + 36)], &v85[*(int *)(v73 + 36)], v88);
  uint64_t v74 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v72[v74[5]] = *(void *)&v85[v74[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v72[v74[6]] = *(void *)&v85[v74[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v72[v74[7]] = *(void *)&v85[v74[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = v16[6];
  uint64_t v76 = &v14[v75];
  uint64_t v77 = &v15[v75];
  long long v78 = *(_OWORD *)v77;
  v76[16] = v77[16];
  *(_OWORD *)uint64_t v76 = v78;
  v14[v16[7]] = v15[v16[7]];
  v14[v16[8]] = v15[v16[8]];
  v14[v16[9]] = v15[v16[9]];
  uint64_t v79 = v16[10];
  uint64_t v80 = &v14[v79];
  uint64_t v81 = &v15[v79];
  *(void *)uint64_t v80 = *(void *)v81;
  *((void *)v80 + 1) = *((void *)v81 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v82 = v16[11];
  uint64_t v83 = &v14[v82];
  uint64_t v84 = &v15[v82];
  *(void *)uint64_t v83 = *(void *)v84;
  *((void *)v83 + 1) = *((void *)v84 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v38 = v6[8];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(void *)(a1 + v38) = *(void *)(a2 + v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v42 = *(int *)(v41 + 20);
  uint64_t v43 = v39 + v42;
  uint64_t v44 = v40 + v42;
  uint64_t v45 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 24))(v43, v44, v45);
  *(void *)(v39 + *(int *)(v41 + 24)) = *(void *)(v40 + *(int *)(v41 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = v6[11];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  uint64_t v49 = sub_251037400();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 24);
  v50(v47, v48, v49);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(v47 + *(int *)(v51 + 36), v48 + *(int *)(v51 + 36), v49);
  uint64_t v53 = v6[12];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v50(a1 + v53, a2 + v53, v49);
  v50(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v49);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[14]) = *(void *)(a2 + v6[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v57 = *(int *)(v56 + 20);
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  uint64_t v60 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 24))(v58, v59, v60);
  *(unsigned char *)(a1 + *(int *)(v56 + 24)) = *(unsigned char *)(a2 + *(int *)(v56 + 24));
  if (a1 != a2)
  {
    uint64_t v61 = *(int *)(a3 + 20);
    uint64_t v62 = (void *)(a1 + v61);
    uint64_t v63 = (void *)(a2 + v61);
    uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_25101269C(a1 + v61, (uint64_t)&qword_269B12EE0, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8], (uint64_t (*)(void))sub_25101F514);
    sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v64);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v65 = sub_251038F20();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 16))(v62, v63, v65);
      uint64_t v66 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      *((unsigned char *)v62 + *(int *)(v66 + 20)) = *((unsigned char *)v63 + *(int *)(v66 + 20));
    }
    else
    {
      *uint64_t v62 = *v63;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25101A608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = sub_2510379E0();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = v7[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  int v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v19 = *((void *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = sub_251037400();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
    uint64_t v65 = v19;
    v22(v16, v17, v21);
    uint64_t v23 = v22;
    uint64_t v24 = v18[5];
    uint64_t v25 = &v16[v24];
    uint64_t v66 = a3;
    uint64_t v26 = &v17[v24];
    v23(&v16[v24], &v17[v24], v21);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
    uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
    *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
    uint64_t v29 = v28[7];
    uint64_t v30 = *(void *)&v26[v29];
    a3 = v66;
    *(void *)&v25[v29] = v30;
    uint64_t v31 = v18[6];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = &v17[v31];
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    v32[16] = v33[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v65 + 56))(v16, 0, 1, v18);
  }
  uint64_t v34 = v7[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  uint64_t v42 = v7[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32);
  v46(v43, v44, v45);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = v7[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  *(void *)(a1 + v7[14]) = *(void *)(a2 + v7[14]);
  uint64_t v52 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 32))(v54, v55, v56);
  *(unsigned char *)(a1 + *(int *)(v52 + 24)) = *(unsigned char *)(a2 + *(int *)(v52 + 24));
  uint64_t v57 = *(int *)(a3 + 20);
  uint64_t v58 = (unsigned char *)(a1 + v57);
  uint64_t v59 = (unsigned char *)(a2 + v57);
  sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  uint64_t v61 = v60;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v62 = sub_251038F20();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v62 - 8) + 32))(v58, v59, v62);
    uint64_t v63 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    v58[*(int *)(v63 + 20)] = v59[*(int *)(v63 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
  }
  return a1;
}

uint64_t sub_25101AD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = v6[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_25101263C(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = sub_2510379E0();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v14 = v6[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      uint64_t v22 = sub_251037400();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
      uint64_t v87 = v18;
      v23(v15, v16, v22);
      uint64_t v24 = v23;
      uint64_t v25 = v17[5];
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      v24(&v15[v25], &v16[v25], v22);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v22);
      uint64_t v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v26[v29[5]] = *(void *)&v27[v29[5]];
      *(void *)&v26[v29[6]] = *(void *)&v27[v29[6]];
      *(void *)&v26[v29[7]] = *(void *)&v27[v29[7]];
      uint64_t v30 = v17[6];
      uint64_t v31 = &v15[v30];
      uint64_t v32 = &v16[v30];
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
      *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v87 + 56))(v15, 0, 1, v17);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v21)
  {
    sub_25101263C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v66 = sub_251037400();
  uint64_t v67 = *(void (**)(void))(*(void *)(v66 - 8) + 40);
  uint64_t v88 = v66;
  ((void (*)(char *, char *, uint64_t))v67)(v15, v16, v66);
  uint64_t v68 = (void (*)(char *, char *, uint64_t))v67;
  uint64_t v69 = v17[5];
  uint64_t v70 = &v15[v69];
  uint64_t v86 = &v16[v69];
  ((void (*)(char *))v68)(&v15[v69]);
  sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v68(&v70[*(int *)(v71 + 36)], &v86[*(int *)(v71 + 36)], v88);
  uint64_t v72 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v70[v72[5]] = *(void *)&v86[v72[5]];
  swift_bridgeObjectRelease();
  *(void *)&v70[v72[6]] = *(void *)&v86[v72[6]];
  swift_bridgeObjectRelease();
  *(void *)&v70[v72[7]] = *(void *)&v86[v72[7]];
  swift_bridgeObjectRelease();
  uint64_t v73 = v17[6];
  uint64_t v74 = &v15[v73];
  uint64_t v75 = &v16[v73];
  *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
  v74[16] = v75[16];
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  uint64_t v76 = v17[10];
  uint64_t v77 = &v15[v76];
  long long v78 = (uint64_t *)&v16[v76];
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  *(void *)uint64_t v77 = v80;
  *((void *)v77 + 1) = v79;
  swift_bridgeObjectRelease();
  uint64_t v81 = v17[11];
  uint64_t v82 = &v15[v81];
  uint64_t v83 = (uint64_t *)&v16[v81];
  uint64_t v85 = *v83;
  uint64_t v84 = v83[1];
  *(void *)uint64_t v82 = v85;
  *((void *)v82 + 1) = v84;
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v34 = v6[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 40))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  swift_bridgeObjectRelease();
  uint64_t v42 = v6[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 40);
  v46(v43, v44, v45);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = v6[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[14]) = *(void *)(a2 + v6[14]);
  swift_bridgeObjectRelease();
  uint64_t v52 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 40))(v54, v55, v56);
  *(unsigned char *)(a1 + *(int *)(v52 + 24)) = *(unsigned char *)(a2 + *(int *)(v52 + 24));
  if (a1 != a2)
  {
    uint64_t v57 = *(int *)(a3 + 20);
    uint64_t v58 = (unsigned char *)(a1 + v57);
    uint64_t v59 = (unsigned char *)(a2 + v57);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_25101269C(a1 + v57, (uint64_t)&qword_269B12EE0, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8], (uint64_t (*)(void))sub_25101F514);
    sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v60);
    uint64_t v62 = v61;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v63 = sub_251038F20();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v63 - 8) + 32))(v58, v59, v63);
      uint64_t v64 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      v58[*(int *)(v64 + 20)] = v59[*(int *)(v64 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_25101B654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25101B668);
}

uint64_t __swift_get_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    sub_25101F514(0, &qword_269B148B0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185D0]);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_25101B794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25101B7A8);
}

uint64_t __swift_store_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    sub_25101F514(0, &qword_269B148B0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185D0]);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_25101B8E0()
{
  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_25101F514(319, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

char *sub_25101B9D8(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510376B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)&a1[v8[5]] = *(void *)&a2[v8[5]];
    uint64_t v9 = v8[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v10 = *(void *)v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = sub_2510379E0();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v11, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = v8[7];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v20 = *((void *)v19 - 1);
    uint64_t v78 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = sub_251037400();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      v23(v17, v18, v22);
      uint64_t v24 = v19[5];
      uint64_t v75 = v8;
      uint64_t v25 = &v17[v24];
      uint64_t v26 = &v18[v24];
      v23(&v17[v24], &v18[v24], v22);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
      uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
      *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
      *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
      uint64_t v29 = v19[6];
      uint64_t v30 = &v17[v29];
      uint64_t v31 = &v18[v29];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v17[v19[7]] = v18[v19[7]];
      v17[v19[8]] = v18[v19[8]];
      v17[v19[9]] = v18[v19[9]];
      uint64_t v32 = v19[10];
      uint64_t v33 = &v17[v32];
      uint64_t v34 = &v18[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      uint64_t v36 = v19[11];
      uint64_t v37 = &v17[v36];
      uint64_t v38 = &v18[v36];
      uint64_t v39 = *((void *)v38 + 1);
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = v39;
      uint64_t v40 = *(void (**)(char *, void, uint64_t, int *))(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = v75;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v17, 0, 1, v19);
    }
    uint64_t v41 = v8[8];
    uint64_t v42 = &a1[v41];
    uint64_t v43 = &a2[v41];
    *(void *)&a1[v41] = *(void *)&a2[v41];
    uint64_t v44 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v45 = *(int *)(v44 + 20);
    uint64_t v74 = &v43[v45];
    uint64_t v76 = &v42[v45];
    uint64_t v46 = v8;
    uint64_t v47 = sub_2510374F0();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
    swift_bridgeObjectRetain();
    v48(v76, v74, v47);
    *(void *)&v42[*(int *)(v44 + 24)] = *(void *)&v43[*(int *)(v44 + 24)];
    *(void *)&a1[v46[9]] = *(void *)&a2[v46[9]];
    *(void *)&a1[v46[10]] = *(void *)&a2[v46[10]];
    uint64_t v49 = v46[11];
    uint64_t v77 = &a1[v49];
    uint64_t v50 = &a2[v49];
    uint64_t v51 = sub_251037400();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v77, v50, v51);
    sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v54 = v53;
    v52(&v77[*(int *)(v53 + 36)], &v50[*(int *)(v53 + 36)], v51);
    uint64_t v55 = v46[12];
    uint64_t v56 = &a1[v55];
    uint64_t v57 = &a2[v55];
    v52(&a1[v55], &a2[v55], v51);
    v52(&v56[*(int *)(v54 + 36)], &v57[*(int *)(v54 + 36)], v51);
    *(void *)&a1[v46[13]] = *(void *)&a2[v46[13]];
    *(void *)&a1[v46[14]] = *(void *)&a2[v46[14]];
    uint64_t v58 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v59 = *(int *)(v58 + 20);
    uint64_t v60 = &a1[v59];
    uint64_t v61 = &a2[v59];
    uint64_t v62 = sub_2510375C0();
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63(v60, v61, v62);
    a1[*(int *)(v58 + 24)] = a2[*(int *)(v58 + 24)];
    uint64_t v64 = *(int *)(v78 + 20);
    uint64_t v65 = &a1[v64];
    uint64_t v66 = &a2[v64];
    uint64_t v67 = sub_251037640();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
    uint64_t v68 = *(int *)(v78 + 24);
    uint64_t v69 = &a1[v68];
    uint64_t v70 = &a2[v68];
    sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v71 = sub_251038F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v69, v70, v71);
      uint64_t v72 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      v69[*(int *)(v72 + 20)] = v70[*(int *)(v72 + 20)];
    }
    else
    {
      *(void *)uint64_t v69 = *(void *)v70;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25101C1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = sub_2510379E0();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  uint64_t v9 = a1 + v5[7];
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = sub_251037400();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v9, v11);
    uint64_t v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v17 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + v5[11];
  uint64_t v19 = sub_251037400();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  uint64_t v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v25 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  uint64_t v26 = a1 + *(int *)(a2 + 20);
  uint64_t v27 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
  uint64_t v28 = a1 + *(int *)(a2 + 24);
  sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = sub_251038F20();
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
    return v30(v28, v29);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_25101C6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = sub_2510379E0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v76 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v15, v16, v20);
    uint64_t v22 = v17[5];
    uint64_t v73 = v7;
    uint64_t v23 = &v15[v22];
    uint64_t v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
    *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
    *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
    uint64_t v27 = v17[6];
    uint64_t v28 = &v15[v27];
    uint64_t v29 = &v16[v27];
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    uint64_t v30 = v17[10];
    uint64_t v31 = &v15[v30];
    uint64_t v32 = &v16[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = v17[11];
    uint64_t v35 = &v15[v34];
    uint64_t v36 = &v16[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v37;
    uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v15, 0, 1, v17);
  }
  uint64_t v39 = v7[8];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v72 = v41 + v43;
  uint64_t v74 = v40 + v43;
  uint64_t v44 = v7;
  uint64_t v45 = sub_2510374F0();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16);
  swift_bridgeObjectRetain();
  v46(v74, v72, v45);
  *(void *)(v40 + *(int *)(v42 + 24)) = *(void *)(v41 + *(int *)(v42 + 24));
  *(void *)(a1 + v44[9]) = *(void *)(a2 + v44[9]);
  *(void *)(a1 + v44[10]) = *(void *)(a2 + v44[10]);
  uint64_t v47 = v44[11];
  uint64_t v75 = a1 + v47;
  uint64_t v48 = a2 + v47;
  uint64_t v49 = sub_251037400();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50(v75, v48, v49);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(v75 + *(int *)(v51 + 36), v48 + *(int *)(v51 + 36), v49);
  uint64_t v53 = v44[12];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v50(a1 + v53, a2 + v53, v49);
  v50(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v49);
  *(void *)(a1 + v44[13]) = *(void *)(a2 + v44[13]);
  *(void *)(a1 + v44[14]) = *(void *)(a2 + v44[14]);
  uint64_t v56 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v57 = *(int *)(v56 + 20);
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  uint64_t v60 = sub_2510375C0();
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61(v58, v59, v60);
  *(unsigned char *)(a1 + *(int *)(v56 + 24)) = *(unsigned char *)(a2 + *(int *)(v56 + 24));
  uint64_t v62 = *(int *)(v76 + 20);
  uint64_t v63 = a1 + v62;
  uint64_t v64 = a2 + v62;
  uint64_t v65 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
  uint64_t v66 = *(int *)(v76 + 24);
  uint64_t v67 = (void *)(a1 + v66);
  uint64_t v68 = (void *)(a2 + v66);
  sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v69 = sub_251038F20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v69 - 8) + 16))(v67, v68, v69);
    uint64_t v70 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *((unsigned char *)v67 + *(int *)(v70 + 20)) = *((unsigned char *)v68 + *(int *)(v70 + 20));
  }
  else
  {
    *uint64_t v67 = *v68;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_25101CE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = v6[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_25101263C(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v8 = *v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = sub_2510379E0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = v6[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v90 = *((void *)v16 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v90 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = sub_251037400();
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      v21(v14, v15, v20);
      uint64_t v22 = v16[5];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      v21(&v14[v22], &v15[v22], v20);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
      uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
      *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
      *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
      uint64_t v27 = v16[6];
      uint64_t v28 = &v14[v27];
      uint64_t v29 = &v15[v27];
      char v30 = v29[16];
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      v28[16] = v30;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      uint64_t v31 = v16[10];
      uint64_t v32 = &v14[v31];
      uint64_t v33 = &v15[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      uint64_t v34 = v16[11];
      uint64_t v35 = &v14[v34];
      uint64_t v36 = &v15[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      *((void *)v35 + 1) = *((void *)v36 + 1);
      uint64_t v91 = *(void (**)(char *, void, uint64_t, int *))(v90 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v91(v14, 0, 1, v16);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    sub_25101263C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v72 = sub_251037400();
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 24);
  uint64_t v92 = v72;
  v73(v14, v15, v72);
  uint64_t v74 = v73;
  uint64_t v75 = v16[5];
  uint64_t v76 = &v14[v75];
  uint64_t v89 = &v15[v75];
  ((void (*)(char *))v74)(&v14[v75]);
  sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v74(&v76[*(int *)(v77 + 36)], &v89[*(int *)(v77 + 36)], v92);
  uint64_t v78 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v76[v78[5]] = *(void *)&v89[v78[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v76[v78[6]] = *(void *)&v89[v78[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v76[v78[7]] = *(void *)&v89[v78[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v79 = v16[6];
  uint64_t v80 = &v14[v79];
  uint64_t v81 = &v15[v79];
  long long v82 = *(_OWORD *)v81;
  v80[16] = v81[16];
  *(_OWORD *)uint64_t v80 = v82;
  v14[v16[7]] = v15[v16[7]];
  v14[v16[8]] = v15[v16[8]];
  v14[v16[9]] = v15[v16[9]];
  uint64_t v83 = v16[10];
  uint64_t v84 = &v14[v83];
  uint64_t v85 = &v15[v83];
  *(void *)uint64_t v84 = *(void *)v85;
  *((void *)v84 + 1) = *((void *)v85 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = v16[11];
  uint64_t v87 = &v14[v86];
  uint64_t v88 = &v15[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  *((void *)v87 + 1) = *((void *)v88 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v38 = v6[8];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(void *)(a1 + v38) = *(void *)(a2 + v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v42 = *(int *)(v41 + 20);
  uint64_t v43 = v39 + v42;
  uint64_t v44 = v40 + v42;
  uint64_t v45 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 24))(v43, v44, v45);
  *(void *)(v39 + *(int *)(v41 + 24)) = *(void *)(v40 + *(int *)(v41 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = v6[11];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  uint64_t v49 = sub_251037400();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 24);
  v50(v47, v48, v49);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(v47 + *(int *)(v51 + 36), v48 + *(int *)(v51 + 36), v49);
  uint64_t v53 = v6[12];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v50(a1 + v53, a2 + v53, v49);
  v50(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v49);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[14]) = *(void *)(a2 + v6[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v57 = *(int *)(v56 + 20);
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  uint64_t v60 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 24))(v58, v59, v60);
  *(unsigned char *)(a1 + *(int *)(v56 + 24)) = *(unsigned char *)(a2 + *(int *)(v56 + 24));
  uint64_t v61 = *(int *)(a3 + 20);
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  uint64_t v64 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 24))(v62, v63, v64);
  if (a1 != a2)
  {
    uint64_t v65 = *(int *)(a3 + 24);
    uint64_t v66 = (void *)(a1 + v65);
    uint64_t v67 = (void *)(a2 + v65);
    uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_25101269C(a1 + v65, (uint64_t)&qword_269B12EE0, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8], (uint64_t (*)(void))sub_25101F514);
    sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v69 = sub_251038F20();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v69 - 8) + 16))(v66, v67, v69);
      uint64_t v70 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      *((unsigned char *)v66 + *(int *)(v70 + 20)) = *((unsigned char *)v67 + *(int *)(v70 + 20));
    }
    else
    {
      void *v66 = *v67;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25101D8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = sub_2510379E0();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = v7[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  int v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v19 = *((void *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = sub_251037400();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
    uint64_t v69 = v19;
    v22(v16, v17, v21);
    uint64_t v23 = v22;
    uint64_t v24 = v18[5];
    uint64_t v25 = &v16[v24];
    uint64_t v70 = a3;
    uint64_t v26 = &v17[v24];
    v23(&v16[v24], &v17[v24], v21);
    sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
    uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
    *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
    uint64_t v29 = v28[7];
    uint64_t v30 = *(void *)&v26[v29];
    a3 = v70;
    *(void *)&v25[v29] = v30;
    uint64_t v31 = v18[6];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = &v17[v31];
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    v32[16] = v33[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v69 + 56))(v16, 0, 1, v18);
  }
  uint64_t v34 = v7[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  uint64_t v42 = v7[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32);
  v46(v43, v44, v45);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = v7[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  *(void *)(a1 + v7[14]) = *(void *)(a2 + v7[14]);
  uint64_t v52 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 32))(v54, v55, v56);
  *(unsigned char *)(a1 + *(int *)(v52 + 24)) = *(unsigned char *)(a2 + *(int *)(v52 + 24));
  uint64_t v57 = *(int *)(a3 + 20);
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  uint64_t v60 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 32))(v58, v59, v60);
  uint64_t v61 = *(int *)(a3 + 24);
  uint64_t v62 = (unsigned char *)(a1 + v61);
  uint64_t v63 = (unsigned char *)(a2 + v61);
  sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  uint64_t v65 = v64;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v66 = sub_251038F20();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v66 - 8) + 32))(v62, v63, v66);
    uint64_t v67 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    v62[*(int *)(v67 + 20)] = v63[*(int *)(v67 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64));
  }
  return a1;
}

uint64_t sub_25101DFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v8 = v7[6];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_25101263C(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v12 = sub_2510379E0();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_25101F514(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v94 = a3;
  uint64_t v15 = v7[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  int v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v19 = *((void *)v18 - 1);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      uint64_t v23 = sub_251037400();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
      uint64_t v92 = v19;
      v24(v16, v17, v23);
      uint64_t v25 = v24;
      uint64_t v26 = v18[5];
      uint64_t v27 = &v16[v26];
      uint64_t v28 = &v17[v26];
      v25(&v16[v26], &v17[v26], v23);
      sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v25(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v23);
      uint64_t v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v27[v30[5]] = *(void *)&v28[v30[5]];
      *(void *)&v27[v30[6]] = *(void *)&v28[v30[6]];
      *(void *)&v27[v30[7]] = *(void *)&v28[v30[7]];
      uint64_t v31 = v18[6];
      uint64_t v32 = &v16[v31];
      uint64_t v33 = &v17[v31];
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v16[v18[7]] = v17[v18[7]];
      v16[v18[8]] = v17[v18[8]];
      v16[v18[9]] = v17[v18[9]];
      *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
      *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v92 + 56))(v16, 0, 1, v18);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v22)
  {
    sub_25101263C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_25101F514(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v71 = sub_251037400();
  uint64_t v72 = *(void (**)(void))(*(void *)(v71 - 8) + 40);
  uint64_t v93 = v71;
  ((void (*)(char *, char *, uint64_t))v72)(v16, v17, v71);
  uint64_t v73 = (void (*)(char *, char *, uint64_t))v72;
  uint64_t v74 = v18[5];
  uint64_t v75 = &v16[v74];
  uint64_t v91 = &v17[v74];
  ((void (*)(char *))v73)(&v16[v74]);
  sub_251012594(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v73(&v75[*(int *)(v76 + 36)], &v91[*(int *)(v76 + 36)], v93);
  uint64_t v77 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v75[v77[5]] = *(void *)&v91[v77[5]];
  swift_bridgeObjectRelease();
  *(void *)&v75[v77[6]] = *(void *)&v91[v77[6]];
  swift_bridgeObjectRelease();
  *(void *)&v75[v77[7]] = *(void *)&v91[v77[7]];
  swift_bridgeObjectRelease();
  uint64_t v78 = v18[6];
  uint64_t v79 = &v16[v78];
  uint64_t v80 = &v17[v78];
  *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
  v79[16] = v80[16];
  v16[v18[7]] = v17[v18[7]];
  v16[v18[8]] = v17[v18[8]];
  v16[v18[9]] = v17[v18[9]];
  uint64_t v81 = v18[10];
  long long v82 = &v16[v81];
  uint64_t v83 = (uint64_t *)&v17[v81];
  uint64_t v85 = *v83;
  uint64_t v84 = v83[1];
  *(void *)long long v82 = v85;
  *((void *)v82 + 1) = v84;
  swift_bridgeObjectRelease();
  uint64_t v86 = v18[11];
  uint64_t v87 = &v16[v86];
  uint64_t v88 = (uint64_t *)&v17[v86];
  uint64_t v90 = *v88;
  uint64_t v89 = v88[1];
  *(void *)uint64_t v87 = v90;
  *((void *)v87 + 1) = v89;
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v35 = v7[8];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  *(void *)(a1 + v35) = *(void *)(a2 + v35);
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v39 = *(int *)(v38 + 20);
  uint64_t v40 = v36 + v39;
  uint64_t v41 = v37 + v39;
  uint64_t v42 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  *(void *)(v36 + *(int *)(v38 + 24)) = *(void *)(v37 + *(int *)(v38 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  uint64_t v43 = v7[11];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = sub_251037400();
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 40);
  v47(v44, v45, v46);
  sub_251012594(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v49 = v48;
  v47(v44 + *(int *)(v48 + 36), v45 + *(int *)(v48 + 36), v46);
  uint64_t v50 = v7[12];
  uint64_t v51 = a1 + v50;
  uint64_t v52 = a2 + v50;
  v47(a1 + v50, a2 + v50, v46);
  v47(v51 + *(int *)(v49 + 36), v52 + *(int *)(v49 + 36), v46);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[14]) = *(void *)(a2 + v7[14]);
  swift_bridgeObjectRelease();
  uint64_t v53 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v54 = *(int *)(v53 + 20);
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  uint64_t v57 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 40))(v55, v56, v57);
  *(unsigned char *)(a1 + *(int *)(v53 + 24)) = *(unsigned char *)(a2 + *(int *)(v53 + 24));
  uint64_t v58 = *(int *)(v94 + 20);
  uint64_t v59 = a1 + v58;
  uint64_t v60 = a2 + v58;
  uint64_t v61 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 40))(v59, v60, v61);
  if (a1 != a2)
  {
    uint64_t v62 = *(int *)(v94 + 24);
    uint64_t v63 = (unsigned char *)(a1 + v62);
    uint64_t v64 = (unsigned char *)(a2 + v62);
    uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_25101269C(a1 + v62, (uint64_t)&qword_269B12EE0, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8], (uint64_t (*)(void))sub_25101F514);
    sub_25101F514(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v65);
    uint64_t v67 = v66;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v68 = sub_251038F20();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v68 - 8) + 32))(v63, v64, v68);
      uint64_t v69 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      v63[*(int *)(v69 + 20)] = v64[*(int *)(v69 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_25101E98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25101E9A0);
}

uint64_t sub_25101E9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_251037640();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_25101F514(0, &qword_269B148B0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185D0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t sub_25101EB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25101EB30);
}

uint64_t sub_25101EB30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_251037640();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_25101F514(0, &qword_269B148B0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185D0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void sub_25101ECB8()
{
  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_251037640();
    if (v1 <= 0x3F)
    {
      sub_25101F514(319, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unint64_t sub_25101EDF0()
{
  unint64_t result = qword_269B14950;
  if (!qword_269B14950)
  {
    sub_25101FD54(255, &qword_269B14958, (uint64_t (*)(uint64_t))sub_251013C60, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_251013AF8();
    sub_251013914();
    type metadata accessor for BalanceWidgetAccessoryCircularLabelView(255);
    sub_251013838();
    sub_251020718(&qword_269B148E0, (void (*)(uint64_t))sub_251013838, (void (*)(void))sub_2510139DC);
    swift_getOpaqueTypeConformance2();
    sub_251020ACC(&qword_269B14908, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularLabelView);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_251020ACC(&qword_269B12FE0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14950);
  }
  return result;
}

uint64_t sub_25101F008()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_25101F024()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_25101F040()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_25101F05C()
{
  if (!qword_269B14960)
  {
    sub_25101F0C4(255);
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14960);
    }
  }
}

void sub_25101F0C4(uint64_t a1)
{
}

void sub_25101F0F8()
{
  if (!qword_269B14970)
  {
    sub_25101F1F8();
    unint64_t v0 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A470];
    uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F18E28];
    sub_25101FD54(255, &qword_269B14990, (uint64_t (*)(uint64_t))sub_25101F36C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_25101FD54(255, &qword_269B149A0, (uint64_t (*)(uint64_t))sub_25101F3F8, v0, v1);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v3) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269B14970);
    }
  }
}

void sub_25101F1F8()
{
  if (!qword_269B14978)
  {
    sub_25101F47C(255, &qword_269B14980, MEMORY[0x263F1A470]);
    sub_25101F2A0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14978);
    }
  }
}

unint64_t sub_25101F2A0()
{
  unint64_t result = qword_269B14988;
  if (!qword_269B14988)
  {
    sub_25101F47C(255, &qword_269B14980, MEMORY[0x263F1A470]);
    sub_251020ACC(&qword_269B12FE0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14988);
  }
  return result;
}

void sub_25101F36C()
{
  if (!qword_269B14998)
  {
    type metadata accessor for WarmupProgressCounter();
    sub_25101F5E8(255, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec, MEMORY[0x263F1A418]);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14998);
    }
  }
}

void sub_25101F3F8(uint64_t a1)
{
}

void sub_25101F440(uint64_t a1)
{
}

void sub_25101F47C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_25101F4E0(uint64_t a1)
{
}

void sub_25101F514(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_25101F578(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25101F5E8(255, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25101F5E8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_25101F634()
{
  unint64_t result = qword_269B149C0;
  if (!qword_269B149C0)
  {
    sub_25101F36C();
    sub_251020ACC((unint64_t *)&qword_269B13E00, (void (*)(uint64_t))type metadata accessor for WarmupProgressCounter);
    sub_250F72FBC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B149C0);
  }
  return result;
}

uint64_t sub_25101F6DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2510383A0();
  *a1 = result;
  return result;
}

uint64_t sub_25101F708@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2510383A0();
  *a1 = result;
  return result;
}

uint64_t sub_25101F734()
{
  return sub_2510383B0();
}

uint64_t sub_25101F760()
{
  return sub_2510383B0();
}

uint64_t sub_25101F78C()
{
  return sub_251038310();
}

uint64_t sub_25101F7B0(uint64_t a1)
{
  uint64_t v2 = sub_251038B70();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_251038320();
}

unint64_t sub_25101F87C()
{
  unint64_t result = qword_269B149C8;
  if (!qword_269B149C8)
  {
    sub_25101F3F8(255);
    sub_25101F924();
    sub_251020ACC(&qword_269B149D8, sub_25101F4E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B149C8);
  }
  return result;
}

unint64_t sub_25101F924()
{
  unint64_t result = qword_269B149D0;
  if (!qword_269B149D0)
  {
    sub_25101F440(255);
    sub_25101F9D4((unint64_t *)&qword_269B148A8, (unint64_t *)&qword_269B14890, (void (*)(uint64_t))sub_250FBE33C, (void (*)(void))sub_250F70094);
    sub_250F49CB8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B149D0);
  }
  return result;
}

uint64_t sub_25101F9D4(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25101F47C(255, a2, a3);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25101FA5C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_25101FD54(0, a3, a4, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_25101FAF4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_25101FD54(0, a3, a4, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_25101FB8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_25101FD54(0, a2, a3, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_25101FC10()
{
  if (!qword_269B149E0)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A470];
    uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F18E28];
    sub_25101FD54(255, &qword_269B149E8, (uint64_t (*)(uint64_t))sub_25101FD0C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_25101FD54(255, &qword_269B149A0, (uint64_t (*)(uint64_t))sub_25101F3F8, v0, v1);
    sub_25101FED0();
    sub_251020220();
    unint64_t v2 = type metadata accessor for MultilayerCircularGauge();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&qword_269B149E0);
    }
  }
}

void sub_25101FD0C(uint64_t a1)
{
}

void sub_25101FD54(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_25101FDD8()
{
  if (!qword_269B149F8)
  {
    sub_25102030C(255, &qword_269B14A00, MEMORY[0x263F19B28]);
    unint64_t v0 = sub_251038B30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B149F8);
    }
  }
}

void sub_25101FE4C(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  if (!*a2)
  {
    sub_25101F47C(255, a3, a4);
    a5(255);
    unint64_t v7 = sub_251038270();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_25101FED0()
{
  unint64_t result = qword_269B14A10;
  if (!qword_269B14A10)
  {
    sub_25101FD54(255, &qword_269B149E8, (uint64_t (*)(uint64_t))sub_25101FD0C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_25101FFBC();
    sub_251020ACC(&qword_269B12FE0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14A10);
  }
  return result;
}

unint64_t sub_25101FFBC()
{
  unint64_t result = qword_269B14A18;
  if (!qword_269B14A18)
  {
    sub_25101FD0C(255);
    sub_251020718(&qword_269B14A20, (void (*)(uint64_t))sub_25101FDD8, (void (*)(void))sub_251020078);
    sub_250F70094();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14A18);
  }
  return result;
}

unint64_t sub_251020078()
{
  unint64_t result = qword_269B14A28;
  if (!qword_269B14A28)
  {
    sub_25102030C(255, &qword_269B14A00, MEMORY[0x263F19B28]);
    sub_25102010C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14A28);
  }
  return result;
}

unint64_t sub_25102010C()
{
  unint64_t result = qword_269B14A30;
  if (!qword_269B14A30)
  {
    sub_25101FE4C(255, &qword_269B14A08, (unint64_t *)&qword_269B13250, (void (*)(uint64_t))sub_251012304, sub_25101F4E0);
    sub_25101F9D4((unint64_t *)&qword_269B13270, (unint64_t *)&qword_269B13250, (void (*)(uint64_t))sub_251012304, (void (*)(void))sub_250F49CB8);
    sub_251020ACC(&qword_269B149D8, sub_25101F4E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14A30);
  }
  return result;
}

unint64_t sub_251020220()
{
  unint64_t result = qword_269B14A38;
  if (!qword_269B14A38)
  {
    sub_25101FD54(255, &qword_269B149A0, (uint64_t (*)(uint64_t))sub_25101F3F8, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_25101F87C();
    sub_251020ACC(&qword_269B12FE0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14A38);
  }
  return result;
}

void sub_25102030C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    sub_25101FE4C(255, &qword_269B14A08, (unint64_t *)&qword_269B13250, (void (*)(uint64_t))sub_251012304, sub_25101F4E0);
    unint64_t v7 = a3(a1, v6, MEMORY[0x263F1BA08]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_2510203AC(uint64_t a1, uint64_t a2)
{
  sub_25101FE4C(0, &qword_269B14A08, (unint64_t *)&qword_269B13250, (void (*)(uint64_t))sub_251012304, sub_25101F4E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_251020448(uint64_t a1, uint64_t a2)
{
  sub_25101FE4C(0, &qword_269B14A08, (unint64_t *)&qword_269B13250, (void (*)(uint64_t))sub_251012304, sub_25101F4E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2510204E4(uint64_t a1)
{
  sub_25101FE4C(0, &qword_269B14A08, (unint64_t *)&qword_269B13250, (void (*)(uint64_t))sub_251012304, sub_25101F4E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_251020578()
{
  if (!qword_269B14A48)
  {
    sub_251020620();
    sub_251020718(&qword_269B14A58, (void (*)(uint64_t))sub_251020620, (void (*)(void))sub_25101F2A0);
    unint64_t v0 = sub_251038140();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14A48);
    }
  }
}

void sub_251020620()
{
  if (!qword_269B14A50)
  {
    sub_25101F5E8(255, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    sub_25101F47C(255, &qword_269B14980, MEMORY[0x263F1A470]);
    sub_25101F578(&qword_269B12FE8);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14A50);
    }
  }
}

uint64_t sub_251020718(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_251020788()
{
  if (!qword_269B14A60)
  {
    sub_251020620();
    sub_250F3E3E8();
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14A60);
    }
  }
}

uint64_t sub_2510207F4(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v2 = 0;
  uint64_t v3 = result + 40;
  uint64_t v4 = -(uint64_t)v1;
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v15 = result + 40;
  unint64_t v16 = *(void *)(result + 16);
  do
  {
    if (v2 <= v1) {
      unint64_t v6 = v1;
    }
    else {
      unint64_t v6 = v2;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (unint64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = *(i - 1);
      uint64_t v9 = *i;
      swift_bridgeObjectRetain_n();
      char v11 = sub_250FFD72C(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if (v11) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1) {
        return v5;
      }
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = v5;
    if ((result & 1) == 0)
    {
      uint64_t result = sub_250FF1E4C(0, *(void *)(v5 + 16) + 1, 1);
      uint64_t v5 = v18;
    }
    unint64_t v13 = *(void *)(v5 + 16);
    unint64_t v12 = *(void *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      uint64_t result = sub_250FF1E4C(v12 > 1, v13 + 1, 1);
      uint64_t v5 = v18;
    }
    *(void *)(v5 + 16) = v13 + 1;
    uint64_t v14 = v5 + 16 * v13;
    *(void *)(v14 + 32) = v10;
    *(void *)(v14 + 40) = v9;
    uint64_t v3 = v15;
    unint64_t v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

uint64_t sub_251020960()
{
  return sub_251020ACC(&qword_269B14A68, (void (*)(uint64_t))sub_2510209A8);
}

void sub_2510209A8()
{
  if (!qword_269B14A70)
  {
    sub_25101F0C4(255);
    sub_251020ACC(&qword_269B14A78, sub_25101F0C4);
    unint64_t v0 = sub_251038C10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14A70);
    }
  }
}

uint64_t sub_251020A3C()
{
  return sub_251020ACC(&qword_269B14A80, (void (*)(uint64_t))sub_25101FC10);
}

uint64_t sub_251020A84()
{
  return sub_251020ACC(&qword_269B14A88, (void (*)(uint64_t))sub_251020578);
}

uint64_t sub_251020ACC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id OvernightMetricsSummaryAnnotationProvider.healthStore.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t OvernightMetricsSummaryAnnotationProvider.debugIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.pregnancyState.getter()
{
  swift_getKeyPath();
  sub_2510219D0(&qword_269B14A98, (void (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider);
  sub_251037530();
  swift_release();
  return *(void *)(v0 + 40);
}

uint64_t sub_251020BEC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_2510219D0(&qword_269B14A98, (void (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider);
  sub_251037530();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + 40);
  return result;
}

uint64_t sub_251020C98()
{
  return swift_release();
}

uint64_t type metadata accessor for OvernightMetricsSummaryAnnotationProvider()
{
  uint64_t result = qword_269B14AB8;
  if (!qword_269B14AB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.pregnancyImpactAnnotation.getter()
{
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  swift_getKeyPath();
  sub_2510219D0(&qword_269B14A98, (void (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider);
  sub_251037530();
  swift_release();
  uint64_t v3 = *(void *)(v0 + 40);
  if (v3 == 2 || (uint64_t result = 0, v3 == 1))
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v6 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  return result;
}

void *OvernightMetricsSummaryAnnotationProvider.annotations.getter()
{
  sub_250F8EDF4();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25103AD40;
  *(void *)(inited + 32) = OvernightMetricsSummaryAnnotationProvider.pregnancyImpactAnnotation.getter();
  *(void *)(inited + 40) = v1;
  uint64_t v2 = sub_250F81778(inited);
  swift_bridgeObjectRelease();
  return v2;
}

void *OvernightMetricsSummaryAnnotationProvider.__allocating_init(healthStore:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (void *)swift_allocObject();
  v6[5] = 0;
  sub_251037560();
  v6[2] = a1;
  v6[3] = a2;
  _OWORD v6[4] = a3;
  return v6;
}

void *OvernightMetricsSummaryAnnotationProvider.init(healthStore:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = 0;
  sub_251037560();
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.observePregnancyState()()
{
  v1[5] = v0;
  uint64_t v2 = sub_251038E60();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = sub_251038E50();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v4 = sub_251038E80();
  v1[12] = v4;
  v1[13] = *(void *)(v4 - 8);
  v1[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_251021274, 0, 0);
}

uint64_t sub_251021274()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_bridgeObjectRetain();
  sub_251038E30();
  sub_251038E70();
  sub_251038E40();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[15] = OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
  uint64_t v4 = sub_2510219D0(&qword_269B14AA8, MEMORY[0x263F09050]);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_2510213E0;
  uint64_t v6 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 2, v6, v4);
}

uint64_t sub_2510213E0()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_251021888;
  }
  else {
    uint64_t v2 = sub_2510214F4;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2510214F4()
{
  *(void *)(v0 + 144) = *(void *)(v0 + 16);
  return MEMORY[0x270FA2498](sub_251021518, 0, 0);
}

uint64_t sub_251021518()
{
  if (v0[18])
  {
    sub_2510392D0();
    v0[19] = sub_2510392C0();
    uint64_t v2 = sub_251039280();
    return MEMORY[0x270FA2498](sub_251021654, v2, v1);
  }
  else
  {
    uint64_t v4 = v0[13];
    uint64_t v3 = v0[14];
    uint64_t v5 = v0[12];
    (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_251021654()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = v0[5];
  swift_release();
  id v3 = objc_msgSend(v1, sel_state);
  swift_getKeyPath();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  v0[4] = v2;
  sub_2510219D0(&qword_269B14A98, (void (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider);
  sub_251037520();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_251021798, 0, 0);
}

uint64_t sub_251021798()
{
  uint64_t v1 = sub_2510219D0(&qword_269B14AA8, MEMORY[0x263F09050]);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_2510213E0;
  uint64_t v3 = *(void *)(v0 + 72);
  return MEMORY[0x270FA1E80](v0 + 16, v3, v1);
}

uint64_t sub_251021888()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 136);
  sub_250F32D94();
  swift_willThrowTypedImpl();
  return MEMORY[0x270FA2498](sub_251021910, 0, 0);
}

uint64_t sub_251021910()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_2510219D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_251021A18()
{
  *(void *)(*(void *)(v0 + 16) + 40) = *(void *)(v0 + 24);
}

uint64_t OvernightMetricsSummaryAnnotationProvider.fetchPregnancyState()()
{
  v1[5] = v0;
  uint64_t v2 = sub_251038E60();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = sub_251038E50();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v4 = sub_251038E80();
  v1[12] = v4;
  v1[13] = *(void *)(v4 - 8);
  v1[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_251021B9C, 0, 0);
}

uint64_t sub_251021B9C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_bridgeObjectRetain();
  sub_251038E30();
  sub_251038E70();
  sub_251038E40();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_2510219D0(&qword_269B14AA8, MEMORY[0x263F09050]);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_251021CFC;
  uint64_t v6 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 2, v6, v4);
}

uint64_t sub_251021CFC()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_251022184;
  }
  else {
    uint64_t v2 = sub_251021E10;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_251021E10()
{
  *(void *)(v0 + 136) = *(void *)(v0 + 16);
  return MEMORY[0x270FA2498](sub_251021E34, 0, 0);
}

uint64_t sub_251021E34()
{
  if (v0[17])
  {
    v0[18] = OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
    sub_2510392D0();
    v0[19] = sub_2510392C0();
    uint64_t v2 = sub_251039280();
    return MEMORY[0x270FA2498](sub_251021F7C, v2, v1);
  }
  else
  {
    uint64_t v4 = v0[13];
    uint64_t v3 = v0[14];
    uint64_t v5 = v0[12];
    (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_251021F7C()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = v0[5];
  swift_release();
  id v3 = objc_msgSend(v1, sel_state);
  swift_getKeyPath();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  v0[4] = v2;
  sub_2510219D0(&qword_269B14A98, (void (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider);
  sub_251037520();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_2510220BC, 0, 0);
}

uint64_t sub_2510220BC()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_251022184()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 128);
  sub_250F32D94();
  swift_willThrowTypedImpl();
  return MEMORY[0x270FA2498](sub_25102220C, 0, 0);
}

uint64_t sub_25102220C()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t OvernightMetricsSummaryAnnotationProvider.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2510223F0()
{
  return type metadata accessor for OvernightMetricsSummaryAnnotationProvider();
}

uint64_t sub_2510223F8()
{
  uint64_t result = sub_251037570();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for OvernightMetricsSummaryAnnotationProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for OvernightMetricsSummaryAnnotationProvider);
}

uint64_t dispatch thunk of OvernightMetricsSummaryAnnotationProvider.__allocating_init(healthStore:debugIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void sub_2510224DC()
{
}

void *sub_2510224F4(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v15 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a3;
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v125 = *(void *)(v12 - 8);
    unint64_t v13 = *(unsigned int (**)(char *, uint64_t, int *))(v125 + 48);
    swift_bridgeObjectRetain();
    uint64_t v130 = v13;
    unint64_t v132 = a1;
    uint64_t v133 = v5;
    uint64_t v135 = a2;
    uint64_t v131 = (int *)v12;
    if (v13(v11, 1, (int *)v12))
    {
      sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = sub_251037400();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v10, v11, v16);
      uint64_t v18 = *(int *)(v12 + 20);
      uint64_t v19 = (int *)v12;
      uint64_t v20 = &v10[v18];
      int v21 = &v11[v18];
      v17(&v10[v18], &v11[v18], v16);
      sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v17(&v20[*(int *)(v22 + 36)], &v21[*(int *)(v22 + 36)], v16);
      uint64_t v23 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v20[v23[5]] = *(void *)&v21[v23[5]];
      *(void *)&v20[v23[6]] = *(void *)&v21[v23[6]];
      *(void *)&v20[v23[7]] = *(void *)&v21[v23[7]];
      uint64_t v24 = v19[6];
      uint64_t v25 = &v10[v24];
      uint64_t v26 = &v11[v24];
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      v25[16] = v26[16];
      v10[v19[7]] = v11[v19[7]];
      v10[v19[8]] = v11[v19[8]];
      v10[v19[9]] = v11[v19[9]];
      uint64_t v27 = v19[10];
      uint64_t v28 = &v10[v27];
      uint64_t v29 = &v11[v27];
      uint64_t v30 = *((void *)v29 + 1);
      *(void *)uint64_t v28 = *(void *)v29;
      *((void *)v28 + 1) = v30;
      uint64_t v31 = v19[11];
      uint64_t v32 = &v10[v31];
      uint64_t v33 = &v11[v31];
      uint64_t v34 = *((void *)v33 + 1);
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = v34;
      uint64_t v128 = *(void (**)(char *, void, uint64_t, int *))(v125 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v5 = v133;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v128(v10, 0, 1, v19);
    }
    *(_OWORD *)((char *)a1 + v8[6]) = *(_OWORD *)((char *)a2 + v8[6]);
    uint64_t v35 = v8[7];
    uint64_t v36 = (char *)a1 + v35;
    uint64_t v37 = (char *)a2 + v35;
    long long v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    *((void *)v36 + 10) = *((void *)v37 + 10);
    long long v39 = *((_OWORD *)v37 + 4);
    long long v40 = *((_OWORD *)v37 + 2);
    *((_OWORD *)v36 + 3) = *((_OWORD *)v37 + 3);
    *((_OWORD *)v36 + 4) = v39;
    *((_OWORD *)v36 + 2) = v40;
    *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
    *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
    uint64_t v41 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v42 = (char *)a1 + v41;
    uint64_t v43 = (char *)a2 + v41;
    uint64_t v44 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = *(void *)v43;
    *((void *)v42 + 1) = v44;
    uint64_t v45 = *((void *)v43 + 3);
    *((void *)v42 + 2) = *((void *)v43 + 2);
    *((void *)v42 + 3) = v45;
    *((void *)v42 + 4) = *((void *)v43 + 4);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
    *(_OWORD *)(v42 + 56) = *(_OWORD *)(v43 + 56);
    *(_OWORD *)(v42 + 72) = *(_OWORD *)(v43 + 72);
    *(_OWORD *)(v42 + 88) = *(_OWORD *)(v43 + 88);
    *(_OWORD *)(v42 + 104) = *(_OWORD *)(v43 + 104);
    uint64_t v46 = v5[6];
    *((unsigned char *)a1 + v5[5]) = *((unsigned char *)a2 + v5[5]);
    uint64_t v47 = (void *)((char *)a1 + v46);
    uint64_t v48 = (char *)a2 + v46;
    *uint64_t v47 = *(void *)((char *)a2 + v46);
    uint64_t v49 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v50 = *(int *)(v49 + 20);
    unint64_t v127 = &v48[v50];
    uint64_t v129 = (char *)v47 + v50;
    uint64_t v51 = sub_2510374F0();
    uint64_t v126 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v126(v129, v127, v51);
    *(void *)((char *)v47 + *(int *)(v49 + 24)) = *(void *)&v48[*(int *)(v49 + 24)];
    uint64_t v52 = v133[7];
    uint64_t v53 = (char *)v132 + v52;
    uint64_t v54 = (char *)a2 + v52;
    swift_bridgeObjectRetain();
    if (v130(v54, 1, v131))
    {
      sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      uint64_t v56 = sub_251037400();
      uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
      v57(v53, v54, v56);
      uint64_t v58 = v131[5];
      uint64_t v59 = &v53[v58];
      uint64_t v60 = &v54[v58];
      v57(&v53[v58], &v54[v58], v56);
      sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v57(&v59[*(int *)(v61 + 36)], &v60[*(int *)(v61 + 36)], v56);
      uint64_t v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v59[v62[5]] = *(void *)&v60[v62[5]];
      *(void *)&v59[v62[6]] = *(void *)&v60[v62[6]];
      *(void *)&v59[v62[7]] = *(void *)&v60[v62[7]];
      uint64_t v63 = v131[6];
      uint64_t v64 = &v53[v63];
      uint64_t v65 = &v54[v63];
      *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
      v64[16] = v65[16];
      v53[v131[7]] = v54[v131[7]];
      v53[v131[8]] = v54[v131[8]];
      v53[v131[9]] = v54[v131[9]];
      uint64_t v66 = v131[10];
      uint64_t v67 = &v53[v66];
      uint64_t v68 = &v54[v66];
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)uint64_t v67 = *(void *)v68;
      *((void *)v67 + 1) = v69;
      uint64_t v70 = v131[11];
      uint64_t v71 = &v53[v70];
      uint64_t v72 = &v54[v70];
      uint64_t v73 = *((void *)v72 + 1);
      *(void *)uint64_t v71 = *(void *)v72;
      *((void *)v71 + 1) = v73;
      uint64_t v74 = *(void (**)(char *, void, uint64_t, int *))(v125 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v74(v53, 0, 1, v131);
    }
    uint64_t v75 = v133[8];
    uint64_t v76 = (char *)v132 + v75;
    uint64_t v77 = (char *)v135 + v75;
    if (*(void *)v77)
    {
      uint64_t v78 = *((void *)v77 + 1);
      *(void *)uint64_t v76 = *(void *)v77;
      *((void *)v76 + 1) = v78;
      long long v79 = *((_OWORD *)v77 + 2);
      *((_OWORD *)v76 + 1) = *((_OWORD *)v77 + 1);
      *((_OWORD *)v76 + 2) = v79;
      *((_OWORD *)v76 + 3) = *((_OWORD *)v77 + 3);
      *((void *)v76 + 8) = *((void *)v77 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v80 = *((_OWORD *)v77 + 3);
      *((_OWORD *)v76 + 2) = *((_OWORD *)v77 + 2);
      *((_OWORD *)v76 + 3) = v80;
      *((void *)v76 + 8) = *((void *)v77 + 8);
      long long v81 = *((_OWORD *)v77 + 1);
      *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
      *((_OWORD *)v76 + 1) = v81;
    }
    uint64_t v82 = v133[10];
    *((unsigned char *)v132 + v133[9]) = *((unsigned char *)v135 + v133[9]);
    uint64_t v83 = (char *)v132 + v82;
    uint64_t v84 = (char *)v135 + v82;
    uint64_t v85 = *((void *)v84 + 1);
    *(void *)uint64_t v83 = *(void *)v84;
    *((void *)v83 + 1) = v85;
    *((_OWORD *)v83 + 1) = *((_OWORD *)v84 + 1);
    uint64_t v86 = v133[12];
    *(void *)((char *)v132 + v133[11]) = *(void *)((char *)v135 + v133[11]);
    *(void *)((char *)v132 + v86) = *(void *)((char *)v135 + v86);
    uint64_t v87 = v133[13];
    uint64_t v88 = (char *)v132 + v87;
    uint64_t v89 = (char *)v135 + v87;
    type metadata accessor for OvernightMetricsAxisConfiguration(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v91 = sub_251037400();
    uint64_t v92 = *(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16);
    v92(v88, v89, v91);
    sub_250F49D48(0);
    uint64_t v94 = v93;
    v92(&v88[*(int *)(v93 + 36)], &v89[*(int *)(v93 + 36)], v91);
    if (EnumCaseMultiPayload == 1) {
      uint64_t v95 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    }
    else {
      uint64_t v95 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    }
    *(void *)&v88[*(int *)(v95 + 20)] = *(void *)&v89[*(int *)(v95 + 20)];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v96 = v133[14];
    uint64_t v97 = (char *)v132 + v96;
    uint64_t v98 = (char *)v135 + v96;
    v92((char *)v132 + v96, (char *)v135 + v96, v91);
    uint64_t v99 = v94;
    v92(&v97[*(int *)(v94 + 36)], &v98[*(int *)(v94 + 36)], v91);
    uint64_t v100 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    uint64_t v101 = *(int *)(v100 + 20);
    uint64_t v102 = &v97[v101];
    uint64_t v103 = &v98[v101];
    v92(&v97[v101], &v98[v101], v91);
    v92(&v102[*(int *)(v99 + 36)], &v103[*(int *)(v99 + 36)], v91);
    *(void *)&v97[*(int *)(v100 + 24)] = *(void *)&v98[*(int *)(v100 + 24)];
    uint64_t v104 = v133[15];
    uint64_t v105 = (char *)v132 + v104;
    uint64_t v106 = (char *)v135 + v104;
    uint64_t v107 = *(void *)((char *)v135 + v104);
    swift_bridgeObjectRetain();
    if (v107)
    {
      uint64_t v108 = *((void *)v106 + 1);
      uint64_t v109 = *((void *)v106 + 2);
      *(void *)uint64_t v105 = v107;
      *((void *)v105 + 1) = v108;
      *((void *)v105 + 2) = v109;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
      *((void *)v105 + 2) = *((void *)v106 + 2);
    }
    v105[24] = v106[24];
    v105[32] = v106[32];
    uint64_t v110 = *((void *)v106 + 6);
    *((void *)v105 + 5) = *((void *)v106 + 5);
    *((void *)v105 + 6) = v110;
    v105[56] = v106[56];
    uint64_t v111 = *((void *)v106 + 9);
    *((void *)v105 + 8) = *((void *)v106 + 8);
    *((void *)v105 + 9) = v111;
    *((void *)v105 + 10) = *((void *)v106 + 10);
    long long v112 = *(_OWORD *)(v106 + 88);
    *(_OWORD *)(v105 + 104) = *(_OWORD *)(v106 + 104);
    *(_OWORD *)(v105 + 88) = v112;
    long long v113 = *(_OWORD *)(v106 + 120);
    long long v114 = *(_OWORD *)(v106 + 136);
    *(_OWORD *)(v105 + 152) = *(_OWORD *)(v106 + 152);
    *(_OWORD *)(v105 + 136) = v114;
    *(_OWORD *)(v105 + 120) = v113;
    uint64_t v115 = *((void *)v106 + 22);
    *((void *)v105 + 21) = *((void *)v106 + 21);
    *((void *)v105 + 22) = v115;
    uint64_t v117 = *((void *)v106 + 23);
    uint64_t v116 = *((void *)v106 + 24);
    v105[200] = v106[200];
    *((void *)v105 + 23) = v117;
    *((void *)v105 + 24) = v116;
    v105[201] = v106[201];
    uint64_t v118 = *((void *)v106 + 27);
    *((void *)v105 + 26) = *((void *)v106 + 26);
    *((void *)v105 + 27) = v118;
    uint64_t v119 = *((void *)v106 + 29);
    *((void *)v105 + 28) = *((void *)v106 + 28);
    *((void *)v105 + 29) = v119;
    *((void *)v105 + 30) = *((void *)v106 + 30);
    v105[248] = v106[248];
    uint64_t v120 = *((void *)v106 + 33);
    *((void *)v105 + 32) = *((void *)v106 + 32);
    *((void *)v105 + 33) = v120;
    *((void *)v105 + 34) = *((void *)v106 + 34);
    uint64_t v15 = v132;
    uint64_t v121 = v133[16];
    uint64_t v122 = (char *)v132 + v121;
    uint64_t v123 = (char *)v135 + v121;
    uint64_t v136 = *(void *)v123;
    char v134 = v123[8];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_251023008(v136, v134);
    *(void *)uint64_t v122 = v136;
    v122[8] = v134;
  }
  return v15;
}

void sub_251022F6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_2510283D8((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_251023008(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_251023014(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v5 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    uint64_t v7 = sub_251037400();
    unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    uint64_t v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + a2[6];
  swift_bridgeObjectRelease();
  uint64_t v12 = v11 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + a2[7];
  if (!v6(v14, 1, v5))
  {
    uint64_t v15 = sub_251037400();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
    v16(v14, v15);
    uint64_t v17 = v14 + *(int *)(v5 + 20);
    v16(v17, v15);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v16(v17 + *(int *)(v18 + 36), v15);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[8]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = a1 + a2[13];
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v21 = sub_251037400();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
  v22(v19, v21);
  sub_250F49D48(0);
  uint64_t v24 = v23;
  v22(v19 + *(int *)(v23 + 36), v21);
  if (EnumCaseMultiPayload == 1) {
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = a1 + a2[14];
  v22(v25, v21);
  v22(v25 + *(int *)(v24 + 36), v21);
  uint64_t v26 = v25 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v22(v26, v21);
  v22(v26 + *(int *)(v24 + 36), v21);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v27 = a1 + a2[16];
  uint64_t v28 = *(void *)v27;
  char v29 = *(unsigned char *)(v27 + 8);
  return sub_250F766FC(v28, v29);
}

void *sub_251023550(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v6 = v5[5];
  uint64_t v128 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v131 = a2;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  unint64_t v127 = v11;
  uint64_t v122 = v10;
  uint64_t v126 = v9;
  if (v11(v8, 1, v9))
  {
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v7, v8, v13);
    uint64_t v15 = v9[5];
    uint64_t v16 = &v7[v15];
    uint64_t v17 = &v8[v15];
    v14(&v7[v15], &v8[v15], v13);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
    uint64_t v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v16[v19[5]] = *(void *)&v17[v19[5]];
    *(void *)&v16[v19[6]] = *(void *)&v17[v19[6]];
    *(void *)&v16[v19[7]] = *(void *)&v17[v19[7]];
    uint64_t v20 = v9[6];
    uint64_t v21 = &v7[v20];
    uint64_t v22 = &v8[v20];
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    uint64_t v23 = v9[10];
    uint64_t v24 = &v7[v23];
    uint64_t v25 = &v8[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    uint64_t v27 = v9[11];
    uint64_t v28 = &v7[v27];
    char v29 = &v8[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    uint64_t v31 = *(void (**)(char *, void, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)v128 + v5[6]) = *(_OWORD *)((char *)v131 + v5[6]);
  uint64_t v32 = v5[7];
  uint64_t v33 = (char *)v128 + v32;
  uint64_t v34 = (char *)v131 + v32;
  long long v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((void *)v33 + 10) = *((void *)v34 + 10);
  long long v36 = *((_OWORD *)v34 + 4);
  long long v37 = *((_OWORD *)v34 + 2);
  *((_OWORD *)v33 + 3) = *((_OWORD *)v34 + 3);
  *((_OWORD *)v33 + 4) = v36;
  *((_OWORD *)v33 + 2) = v37;
  *(void *)((char *)v128 + v5[8]) = *(void *)((char *)v131 + v5[8]);
  *(void *)((char *)v128 + v5[9]) = *(void *)((char *)v131 + v5[9]);
  uint64_t v38 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  long long v39 = (char *)v128 + v38;
  long long v40 = (char *)v131 + v38;
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)long long v39 = *(void *)v40;
  *((void *)v39 + 1) = v41;
  uint64_t v42 = *((void *)v40 + 3);
  *((void *)v39 + 2) = *((void *)v40 + 2);
  *((void *)v39 + 3) = v42;
  *((void *)v39 + 4) = *((void *)v40 + 4);
  *(_OWORD *)(v39 + 40) = *(_OWORD *)(v40 + 40);
  *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
  *(_OWORD *)(v39 + 72) = *(_OWORD *)(v40 + 72);
  *(_OWORD *)(v39 + 88) = *(_OWORD *)(v40 + 88);
  *(_OWORD *)(v39 + 104) = *(_OWORD *)(v40 + 104);
  uint64_t v43 = a3[6];
  *((unsigned char *)v128 + a3[5]) = *((unsigned char *)v131 + a3[5]);
  uint64_t v44 = (char *)v128 + v43;
  uint64_t v45 = (char *)v131 + v43;
  *(void *)((char *)v128 + v43) = *(void *)((char *)v131 + v43);
  uint64_t v46 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v47 = *(int *)(v46 + 20);
  uint64_t v124 = &v45[v47];
  uint64_t v125 = &v44[v47];
  uint64_t v48 = sub_2510374F0();
  uint64_t v123 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v123(v125, v124, v48);
  *(void *)&v44[*(int *)(v46 + 24)] = *(void *)&v45[*(int *)(v46 + 24)];
  uint64_t v49 = a3[7];
  uint64_t v50 = (char *)v128 + v49;
  uint64_t v51 = (char *)v131 + v49;
  swift_bridgeObjectRetain();
  if (v127(v51, 1, v126))
  {
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    uint64_t v53 = sub_251037400();
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
    v54(v50, v51, v53);
    uint64_t v55 = v126[5];
    uint64_t v56 = &v50[v55];
    uint64_t v57 = &v51[v55];
    v54(&v50[v55], &v51[v55], v53);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v54(&v56[*(int *)(v58 + 36)], &v57[*(int *)(v58 + 36)], v53);
    uint64_t v59 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v56[v59[5]] = *(void *)&v57[v59[5]];
    *(void *)&v56[v59[6]] = *(void *)&v57[v59[6]];
    *(void *)&v56[v59[7]] = *(void *)&v57[v59[7]];
    uint64_t v60 = v126[6];
    uint64_t v61 = &v50[v60];
    uint64_t v62 = &v51[v60];
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
    v61[16] = v62[16];
    v50[v126[7]] = v51[v126[7]];
    v50[v126[8]] = v51[v126[8]];
    v50[v126[9]] = v51[v126[9]];
    uint64_t v63 = v126[10];
    uint64_t v64 = &v50[v63];
    uint64_t v65 = &v51[v63];
    uint64_t v66 = *((void *)v65 + 1);
    *(void *)uint64_t v64 = *(void *)v65;
    *((void *)v64 + 1) = v66;
    uint64_t v67 = v126[11];
    uint64_t v68 = &v50[v67];
    uint64_t v69 = &v51[v67];
    uint64_t v70 = *((void *)v69 + 1);
    *(void *)uint64_t v68 = *(void *)v69;
    *((void *)v68 + 1) = v70;
    uint64_t v71 = *(void (**)(char *, void, uint64_t, int *))(v122 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71(v50, 0, 1, v126);
  }
  uint64_t v72 = a3[8];
  uint64_t v73 = (char *)v128 + v72;
  uint64_t v74 = (char *)v131 + v72;
  if (*(void *)v74)
  {
    uint64_t v75 = *((void *)v74 + 1);
    *(void *)uint64_t v73 = *(void *)v74;
    *((void *)v73 + 1) = v75;
    long long v76 = *((_OWORD *)v74 + 2);
    *((_OWORD *)v73 + 1) = *((_OWORD *)v74 + 1);
    *((_OWORD *)v73 + 2) = v76;
    *((_OWORD *)v73 + 3) = *((_OWORD *)v74 + 3);
    *((void *)v73 + 8) = *((void *)v74 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v77 = *((_OWORD *)v74 + 3);
    *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
    *((_OWORD *)v73 + 3) = v77;
    *((void *)v73 + 8) = *((void *)v74 + 8);
    long long v78 = *((_OWORD *)v74 + 1);
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    *((_OWORD *)v73 + 1) = v78;
  }
  uint64_t v79 = a3[10];
  *((unsigned char *)v128 + a3[9]) = *((unsigned char *)v131 + a3[9]);
  long long v80 = (char *)v128 + v79;
  long long v81 = (char *)v131 + v79;
  uint64_t v82 = *((void *)v81 + 1);
  *(void *)long long v80 = *(void *)v81;
  *((void *)v80 + 1) = v82;
  *((_OWORD *)v80 + 1) = *((_OWORD *)v81 + 1);
  uint64_t v83 = a3[12];
  *(void *)((char *)v128 + a3[11]) = *(void *)((char *)v131 + a3[11]);
  *(void *)((char *)v128 + v83) = *(void *)((char *)v131 + v83);
  uint64_t v84 = a3[13];
  uint64_t v85 = (char *)v128 + v84;
  uint64_t v86 = (char *)v131 + v84;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v88 = sub_251037400();
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16);
  v89(v85, v86, v88);
  sub_250F49D48(0);
  uint64_t v91 = v90;
  v89(&v85[*(int *)(v90 + 36)], &v86[*(int *)(v90 + 36)], v88);
  if (EnumCaseMultiPayload == 1) {
    uint64_t v92 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    uint64_t v92 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  *(void *)&v85[*(int *)(v92 + 20)] = *(void *)&v86[*(int *)(v92 + 20)];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  uint64_t v93 = a3[14];
  uint64_t v94 = (char *)v128 + v93;
  uint64_t v95 = (char *)v131 + v93;
  v89((char *)v128 + v93, (char *)v131 + v93, v88);
  uint64_t v96 = v91;
  v89(&v94[*(int *)(v91 + 36)], &v95[*(int *)(v91 + 36)], v88);
  uint64_t v97 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v98 = *(int *)(v97 + 20);
  uint64_t v99 = &v94[v98];
  uint64_t v100 = &v95[v98];
  v89(&v94[v98], &v95[v98], v88);
  v89(&v99[*(int *)(v96 + 36)], &v100[*(int *)(v96 + 36)], v88);
  *(void *)&v94[*(int *)(v97 + 24)] = *(void *)&v95[*(int *)(v97 + 24)];
  uint64_t v101 = a3[15];
  uint64_t v102 = (char *)v128 + v101;
  uint64_t v103 = (char *)v131 + v101;
  uint64_t v104 = *(void *)((char *)v131 + v101);
  swift_bridgeObjectRetain();
  if (v104)
  {
    uint64_t v105 = *((void *)v103 + 1);
    uint64_t v106 = *((void *)v103 + 2);
    *(void *)uint64_t v102 = v104;
    *((void *)v102 + 1) = v105;
    *((void *)v102 + 2) = v106;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
    *((void *)v102 + 2) = *((void *)v103 + 2);
  }
  v102[24] = v103[24];
  v102[32] = v103[32];
  uint64_t v107 = *((void *)v103 + 6);
  *((void *)v102 + 5) = *((void *)v103 + 5);
  *((void *)v102 + 6) = v107;
  v102[56] = v103[56];
  uint64_t v108 = *((void *)v103 + 9);
  *((void *)v102 + 8) = *((void *)v103 + 8);
  *((void *)v102 + 9) = v108;
  *((void *)v102 + 10) = *((void *)v103 + 10);
  long long v109 = *(_OWORD *)(v103 + 88);
  *(_OWORD *)(v102 + 104) = *(_OWORD *)(v103 + 104);
  *(_OWORD *)(v102 + 88) = v109;
  long long v110 = *(_OWORD *)(v103 + 120);
  long long v111 = *(_OWORD *)(v103 + 136);
  *(_OWORD *)(v102 + 152) = *(_OWORD *)(v103 + 152);
  *(_OWORD *)(v102 + 136) = v111;
  *(_OWORD *)(v102 + 120) = v110;
  uint64_t v112 = *((void *)v103 + 22);
  *((void *)v102 + 21) = *((void *)v103 + 21);
  *((void *)v102 + 22) = v112;
  uint64_t v114 = *((void *)v103 + 23);
  uint64_t v113 = *((void *)v103 + 24);
  v102[200] = v103[200];
  *((void *)v102 + 23) = v114;
  *((void *)v102 + 24) = v113;
  v102[201] = v103[201];
  uint64_t v115 = *((void *)v103 + 27);
  *((void *)v102 + 26) = *((void *)v103 + 26);
  *((void *)v102 + 27) = v115;
  uint64_t v116 = *((void *)v103 + 29);
  *((void *)v102 + 28) = *((void *)v103 + 28);
  *((void *)v102 + 29) = v116;
  *((void *)v102 + 30) = *((void *)v103 + 30);
  v102[248] = v103[248];
  uint64_t v117 = *((void *)v103 + 33);
  *((void *)v102 + 32) = *((void *)v103 + 32);
  *((void *)v102 + 33) = v117;
  *((void *)v102 + 34) = *((void *)v103 + 34);
  uint64_t v118 = a3[16];
  uint64_t v119 = (char *)v128 + v118;
  uint64_t v120 = (char *)v131 + v118;
  uint64_t v132 = *(void *)v120;
  char v130 = v120[8];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_251023008(v132, v130);
  *(void *)uint64_t v119 = v132;
  v119[8] = v130;
  return v128;
}

void *sub_251023F88(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v7 = v6[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v158 = *((void *)v10 - 1);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, int *))(v158 + 48);
  int v12 = v11(v8, 1, v10);
  uint64_t v160 = v11;
  int v13 = v11(v9, 1, v10);
  uint64_t v163 = v4;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037400();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      v15(v8, v9, v14);
      uint64_t v16 = v10[5];
      uint64_t v17 = &v8[v16];
      uint64_t v159 = a3;
      uint64_t v18 = &v9[v16];
      v15(&v8[v16], &v9[v16], v14);
      sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v14);
      uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v17[v20[5]] = *(void *)&v18[v20[5]];
      *(void *)&v17[v20[6]] = *(void *)&v18[v20[6]];
      *(void *)&v17[v20[7]] = *(void *)&v18[v20[7]];
      uint64_t v21 = v10[6];
      uint64_t v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      char v24 = v23[16];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      v22[16] = v24;
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      uint64_t v25 = v10[10];
      uint64_t v26 = &v8[v25];
      uint64_t v27 = &v9[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      *((void *)v26 + 1) = *((void *)v27 + 1);
      uint64_t v28 = v10[11];
      char v29 = &v8[v28];
      uint64_t v30 = &v9[v28];
      *(void *)char v29 = *(void *)v30;
      *((void *)v29 + 1) = *((void *)v30 + 1);
      uint64_t v31 = *(void (**)(char *, void, uint64_t, int *))(v158 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a3 = v159;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31(v8, 0, 1, v10);
      uint64_t v4 = v163;
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_251028EE4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v80 = sub_251037400();
  long long v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 24);
  uint64_t v157 = v80;
  v81(v8, v9, v80);
  uint64_t v82 = v10[5];
  uint64_t v83 = &v8[v82];
  uint64_t v156 = &v9[v82];
  ((void (*)(char *))v81)(&v8[v82]);
  sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v81(&v83[*(int *)(v84 + 36)], &v156[*(int *)(v84 + 36)], v157);
  uint64_t v85 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v83[v85[5]] = *(void *)&v156[v85[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v83[v85[6]] = *(void *)&v156[v85[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v83[v85[7]] = *(void *)&v156[v85[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = v10[6];
  uint64_t v87 = &v8[v86];
  uint64_t v88 = &v9[v86];
  long long v89 = *(_OWORD *)v88;
  v87[16] = v88[16];
  *(_OWORD *)uint64_t v87 = v89;
  v8[v10[7]] = v9[v10[7]];
  v8[v10[8]] = v9[v10[8]];
  v8[v10[9]] = v9[v10[9]];
  uint64_t v90 = v10[10];
  uint64_t v91 = &v8[v90];
  uint64_t v92 = &v9[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  *((void *)v91 + 1) = *((void *)v92 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v93 = v10[11];
  uint64_t v94 = &v8[v93];
  uint64_t v95 = &v9[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v33 = v6[6];
  uint64_t v34 = (void *)((char *)a1 + v33);
  long long v35 = (void *)((char *)v4 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  uint64_t v36 = v6[7];
  long long v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)v4 + v36;
  *(void *)long long v37 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  v37[16] = v38[16];
  *((void *)v37 + 1) = v39;
  *((void *)v37 + 3) = *((void *)v38 + 3);
  *((void *)v37 + 4) = *((void *)v38 + 4);
  *((void *)v37 + 5) = *((void *)v38 + 5);
  *((void *)v37 + 6) = *((void *)v38 + 6);
  *((void *)v37 + 7) = *((void *)v38 + 7);
  *((void *)v37 + 8) = *((void *)v38 + 8);
  *((void *)v37 + 9) = *((void *)v38 + 9);
  *((void *)v37 + 10) = *((void *)v38 + 10);
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)v4 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)v4 + v6[9]);
  uint64_t v40 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)v4 + v40);
  *(void *)((char *)a1 + v40) = *(void *)((char *)v4 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41[1] = v42[1];
  v41[2] = v42[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41[3] = v42[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41[4] = v42[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41[5] = v42[5];
  void v41[6] = v42[6];
  v41[7] = v42[7];
  v41[8] = v42[8];
  v41[9] = v42[9];
  v41[10] = v42[10];
  v41[11] = v42[11];
  v41[12] = v42[12];
  v41[13] = v42[13];
  v41[14] = v42[14];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)v4 + a3[5]);
  uint64_t v43 = a3[6];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)v4 + v43;
  *(void *)((char *)a1 + v43) = *(void *)((char *)v4 + v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v47 = *(int *)(v46 + 20);
  uint64_t v48 = &v44[v47];
  uint64_t v49 = &v45[v47];
  uint64_t v50 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 24))(v48, v49, v50);
  *(void *)&v44[*(int *)(v46 + 24)] = *(void *)&v45[*(int *)(v46 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[7];
  uint64_t v52 = (char *)a1 + v51;
  uint64_t v53 = (char *)v4 + v51;
  LODWORD(v46) = v160((char *)a1 + v51, 1, v10);
  int v54 = v160(v53, 1, v10);
  if (v46)
  {
    if (!v54)
    {
      uint64_t v55 = sub_251037400();
      uint64_t v56 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v55 - 8) + 16);
      v56(v52, v53, v55);
      uint64_t v57 = v10[5];
      uint64_t v58 = &v52[v57];
      uint64_t v59 = &v53[v57];
      v56(&v52[v57], &v53[v57], v55);
      sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v56(&v58[*(int *)(v60 + 36)], &v59[*(int *)(v60 + 36)], v55);
      uint64_t v61 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v58[v61[5]] = *(void *)&v59[v61[5]];
      *(void *)&v58[v61[6]] = *(void *)&v59[v61[6]];
      *(void *)&v58[v61[7]] = *(void *)&v59[v61[7]];
      uint64_t v62 = v10[6];
      uint64_t v63 = &v52[v62];
      uint64_t v64 = &v53[v62];
      char v65 = v64[16];
      *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
      v63[16] = v65;
      v52[v10[7]] = v53[v10[7]];
      v52[v10[8]] = v53[v10[8]];
      v52[v10[9]] = v53[v10[9]];
      uint64_t v66 = v10[10];
      uint64_t v67 = &v52[v66];
      uint64_t v68 = &v53[v66];
      *uint64_t v67 = *(void *)v68;
      v67[1] = *((void *)v68 + 1);
      uint64_t v69 = v10[11];
      uint64_t v70 = &v52[v69];
      uint64_t v71 = &v53[v69];
      void *v70 = *(void *)v71;
      v70[1] = *((void *)v71 + 1);
      uint64_t v161 = *(void (**)(unsigned char *, void, uint64_t, int *))(v158 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v161(v52, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v54)
  {
    sub_251028EE4((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v96 = sub_251037400();
  uint64_t v97 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v96 - 8) + 24);
  v97(v52, v53, v96);
  uint64_t v98 = v10[5];
  uint64_t v99 = &v52[v98];
  uint64_t v100 = &v53[v98];
  v97(&v52[v98], &v53[v98], v96);
  sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v97(&v99[*(int *)(v101 + 36)], &v100[*(int *)(v101 + 36)], v96);
  uint64_t v102 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v99[v102[5]] = *(void *)&v100[v102[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v99[v102[6]] = *(void *)&v100[v102[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v99[v102[7]] = *(void *)&v100[v102[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v103 = v10[6];
  uint64_t v104 = &v52[v103];
  uint64_t v105 = &v53[v103];
  long long v106 = *(_OWORD *)v105;
  v104[16] = v105[16];
  *(_OWORD *)uint64_t v104 = v106;
  v52[v10[7]] = v53[v10[7]];
  v52[v10[8]] = v53[v10[8]];
  v52[v10[9]] = v53[v10[9]];
  uint64_t v107 = v10[10];
  uint64_t v108 = &v52[v107];
  long long v109 = &v53[v107];
  void *v108 = *(void *)v109;
  v108[1] = *((void *)v109 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v110 = v10[11];
  long long v111 = &v52[v110];
  uint64_t v112 = &v53[v110];
  *long long v111 = *(void *)v112;
  v111[1] = *((void *)v112 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v73 = a3[8];
  uint64_t v74 = (void *)((char *)a1 + v73);
  uint64_t v75 = (char *)v4 + v73;
  uint64_t v76 = *(void *)((char *)v4 + v73);
  if (*(void *)((char *)a1 + v73))
  {
    if (v76)
    {
      void *v74 = v76;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v74[1] = *((void *)v75 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v74[2] = *((void *)v75 + 2);
      v74[3] = *((void *)v75 + 3);
      v74[4] = *((void *)v75 + 4);
      v74[5] = *((void *)v75 + 5);
      v74[6] = *((void *)v75 + 6);
      v74[7] = *((void *)v75 + 7);
      v74[8] = *((void *)v75 + 8);
    }
    else
    {
      sub_250F21DD0((uint64_t)a1 + v73);
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      long long v78 = *((_OWORD *)v75 + 2);
      long long v77 = *((_OWORD *)v75 + 3);
      long long v79 = *((_OWORD *)v75 + 1);
      v74[8] = *((void *)v75 + 8);
      *((_OWORD *)v74 + 2) = v78;
      *((_OWORD *)v74 + 3) = v77;
      *((_OWORD *)v74 + 1) = v79;
    }
  }
  else if (v76)
  {
    void *v74 = v76;
    v74[1] = *((void *)v75 + 1);
    v74[2] = *((void *)v75 + 2);
    v74[3] = *((void *)v75 + 3);
    v74[4] = *((void *)v75 + 4);
    v74[5] = *((void *)v75 + 5);
    v74[6] = *((void *)v75 + 6);
    v74[7] = *((void *)v75 + 7);
    v74[8] = *((void *)v75 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    long long v113 = *((_OWORD *)v75 + 1);
    long long v114 = *((_OWORD *)v75 + 2);
    long long v115 = *((_OWORD *)v75 + 3);
    v74[8] = *((void *)v75 + 8);
    *((_OWORD *)v74 + 2) = v114;
    *((_OWORD *)v74 + 3) = v115;
    *((_OWORD *)v74 + 1) = v113;
  }
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)v4 + a3[9]);
  uint64_t v116 = a3[10];
  uint64_t v117 = (void *)((char *)a1 + v116);
  uint64_t v118 = (void *)((char *)v4 + v116);
  *(void *)((char *)a1 + v116) = *(void *)((char *)v4 + v116);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v117[1] = v118[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v117[2] = v118[2];
  v117[3] = v118[3];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)v4 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)v4 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != v4)
  {
    uint64_t v119 = a3[13];
    uint64_t v120 = (char *)a1 + v119;
    uint64_t v121 = (char *)v4 + v119;
    sub_251028EE4((uint64_t)a1 + v119, type metadata accessor for OvernightMetricsAxisConfiguration);
    type metadata accessor for OvernightMetricsAxisConfiguration(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v123 = sub_251037400();
    uint64_t v124 = *(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 16);
    v124(v120, v121, v123);
    sub_250F49D48(0);
    v124(&v120[*(int *)(v125 + 36)], &v121[*(int *)(v125 + 36)], v123);
    if (EnumCaseMultiPayload == 1) {
      uint64_t v126 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    }
    else {
      uint64_t v126 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    }
    *(void *)&v120[*(int *)(v126 + 20)] = *(void *)&v121[*(int *)(v126 + 20)];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v127 = a3[14];
  uint64_t v128 = (char *)a1 + v127;
  uint64_t v129 = (char *)v4 + v127;
  uint64_t v130 = sub_251037400();
  uint64_t v131 = *(void (**)(char *, char *, uint64_t))(*(void *)(v130 - 8) + 24);
  uint64_t v162 = a1;
  v131(v128, v129, v130);
  sub_250F49D48(0);
  uint64_t v133 = v132;
  v131(&v128[*(int *)(v132 + 36)], &v129[*(int *)(v132 + 36)], v130);
  uint64_t v134 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v135 = *(int *)(v134 + 20);
  uint64_t v136 = &v128[v135];
  uint64_t v137 = a3;
  uint64_t v138 = &v129[v135];
  v131(&v128[v135], &v129[v135], v130);
  v131(&v136[*(int *)(v133 + 36)], &v138[*(int *)(v133 + 36)], v130);
  *(void *)&v128[*(int *)(v134 + 24)] = *(void *)&v129[*(int *)(v134 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v139 = v137[15];
  uint64_t v140 = (char *)v162 + v139;
  uint64_t v141 = (long long *)((char *)v163 + v139);
  uint64_t v142 = *(void *)((char *)v163 + v139);
  if (*(void *)((char *)v162 + v139))
  {
    if (v142)
    {
      *(void *)uint64_t v140 = v142;
      swift_retain();
      swift_release();
      *((void *)v140 + 1) = *((void *)v141 + 1);
      swift_retain();
      swift_release();
      *((void *)v140 + 2) = *((void *)v141 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80((uint64_t)v162 + v139);
      uint64_t v143 = *((void *)v141 + 2);
      *(_OWORD *)uint64_t v140 = *v141;
      *((void *)v140 + 2) = v143;
    }
  }
  else if (v142)
  {
    *(void *)uint64_t v140 = v142;
    *((void *)v140 + 1) = *((void *)v141 + 1);
    *((void *)v140 + 2) = *((void *)v141 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v144 = *v141;
    *((void *)v140 + 2) = *((void *)v141 + 2);
    *(_OWORD *)uint64_t v140 = v144;
  }
  v140[24] = *((unsigned char *)v141 + 24);
  v140[32] = *((unsigned char *)v141 + 32);
  *((void *)v140 + 5) = *((void *)v141 + 5);
  swift_retain();
  swift_release();
  uint64_t v145 = *((void *)v141 + 6);
  v140[56] = *((unsigned char *)v141 + 56);
  *((void *)v140 + 6) = v145;
  *((void *)v140 + 8) = *((void *)v141 + 8);
  *((void *)v140 + 9) = *((void *)v141 + 9);
  swift_retain();
  swift_release();
  *((void *)v140 + 10) = *((void *)v141 + 10);
  swift_retain();
  swift_release();
  *((void *)v140 + 11) = *((void *)v141 + 11);
  uint64_t v146 = *((void *)v141 + 12);
  v140[104] = *((unsigned char *)v141 + 104);
  *((void *)v140 + 12) = v146;
  *((void *)v140 + 14) = *((void *)v141 + 14);
  *((void *)v140 + 15) = *((void *)v141 + 15);
  *((void *)v140 + 16) = *((void *)v141 + 16);
  *((void *)v140 + 17) = *((void *)v141 + 17);
  *((void *)v140 + 18) = *((void *)v141 + 18);
  *((void *)v140 + 19) = *((void *)v141 + 19);
  *((void *)v140 + 20) = *((void *)v141 + 20);
  *((void *)v140 + 21) = *((void *)v141 + 21);
  *((void *)v140 + 22) = *((void *)v141 + 22);
  swift_retain();
  swift_release();
  *((void *)v140 + 23) = *((void *)v141 + 23);
  swift_retain();
  swift_release();
  uint64_t v147 = *((void *)v141 + 24);
  v140[200] = *((unsigned char *)v141 + 200);
  *((void *)v140 + 24) = v147;
  v140[201] = *((unsigned char *)v141 + 201);
  *((void *)v140 + 26) = *((void *)v141 + 26);
  swift_retain();
  swift_release();
  *((void *)v140 + 27) = *((void *)v141 + 27);
  swift_retain();
  swift_release();
  *((void *)v140 + 28) = *((void *)v141 + 28);
  swift_retain();
  swift_release();
  *((void *)v140 + 29) = *((void *)v141 + 29);
  swift_retain();
  swift_release();
  *((void *)v140 + 30) = *((void *)v141 + 30);
  swift_retain();
  swift_release();
  v140[248] = *((unsigned char *)v141 + 248);
  *((void *)v140 + 32) = *((void *)v141 + 32);
  swift_retain();
  swift_release();
  *((void *)v140 + 33) = *((void *)v141 + 33);
  swift_retain();
  swift_release();
  *((void *)v140 + 34) = *((void *)v141 + 34);
  uint64_t v148 = v137[16];
  uint64_t v149 = (char *)v162 + v148;
  uint64_t v150 = (uint64_t)v163 + v148;
  uint64_t v151 = *(void *)v150;
  char v152 = *(unsigned char *)(v150 + 8);
  sub_251023008(*(void *)v150, v152);
  uint64_t v153 = *(void *)v149;
  char v154 = v149[8];
  *(void *)uint64_t v149 = v151;
  v149[8] = v152;
  sub_250F766FC(v153, v154);
  return v162;
}

void *sub_2510250CC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v7 = v6[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v94 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  uint64_t v95 = v4;
  uint64_t v96 = a3;
  if (v94(v9, 1, v10))
  {
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v8, v9, v13);
    uint64_t v15 = v10[5];
    uint64_t v92 = v11;
    uint64_t v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    v14(&v8[v15], &v9[v15], v13);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    uint64_t v19 = v13;
    a3 = v96;
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v19);
    uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v16[v20[5]] = *(void *)&v17[v20[5]];
    *(void *)&v16[v20[6]] = *(void *)&v17[v20[6]];
    uint64_t v21 = v20[7];
    uint64_t v22 = *(void *)&v17[v21];
    uint64_t v4 = v95;
    *(void *)&v16[v21] = v22;
    uint64_t v11 = v92;
    uint64_t v23 = v10[6];
    char v24 = &v8[v23];
    uint64_t v25 = &v9[v23];
    *(_OWORD *)char v24 = *(_OWORD *)v25;
    v24[16] = v25[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    *(_OWORD *)&v8[v10[10]] = *(_OWORD *)&v9[v10[10]];
    *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v92 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)v4 + v6[6]);
  uint64_t v26 = v6[7];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)v4 + v26;
  long long v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  *((void *)v27 + 10) = *((void *)v28 + 10);
  long long v30 = *((_OWORD *)v28 + 4);
  long long v31 = *((_OWORD *)v28 + 2);
  *((_OWORD *)v27 + 3) = *((_OWORD *)v28 + 3);
  *((_OWORD *)v27 + 4) = v30;
  *((_OWORD *)v27 + 2) = v31;
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)v4 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)v4 + v6[9]);
  uint64_t v32 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)v4 + v32;
  long long v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  long long v36 = *((_OWORD *)v34 + 3);
  *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
  *((_OWORD *)v33 + 3) = v36;
  *((void *)v33 + 14) = *((void *)v34 + 14);
  long long v37 = *((_OWORD *)v34 + 6);
  long long v38 = *((_OWORD *)v34 + 4);
  *((_OWORD *)v33 + 5) = *((_OWORD *)v34 + 5);
  *((_OWORD *)v33 + 6) = v37;
  *((_OWORD *)v33 + 4) = v38;
  uint64_t v39 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)v4 + a3[5]);
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)v4 + v39;
  *(void *)((char *)a1 + v39) = *(void *)((char *)v4 + v39);
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v44 = &v40[v43];
  uint64_t v45 = &v41[v43];
  uint64_t v46 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
  *(void *)&v40[*(int *)(v42 + 24)] = *(void *)&v41[*(int *)(v42 + 24)];
  uint64_t v47 = a3[7];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)v4 + v47;
  if (v94((char *)v4 + v47, 1, v10))
  {
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    uint64_t v51 = sub_251037400();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32);
    v52(v48, v49, v51);
    uint64_t v53 = v10[5];
    int v54 = &v48[v53];
    uint64_t v93 = v11;
    uint64_t v55 = &v49[v53];
    v52(&v48[v53], &v49[v53], v51);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v52(&v54[*(int *)(v56 + 36)], &v55[*(int *)(v56 + 36)], v51);
    uint64_t v57 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v54[v57[5]] = *(void *)&v55[v57[5]];
    *(void *)&v54[v57[6]] = *(void *)&v55[v57[6]];
    *(void *)&v54[v57[7]] = *(void *)&v55[v57[7]];
    a3 = v96;
    uint64_t v58 = v10[6];
    uint64_t v59 = &v48[v58];
    uint64_t v60 = &v49[v58];
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
    v59[16] = v60[16];
    v48[v10[7]] = v49[v10[7]];
    v48[v10[8]] = v49[v10[8]];
    v48[v10[9]] = v49[v10[9]];
    *(_OWORD *)&v48[v10[10]] = *(_OWORD *)&v49[v10[10]];
    *(_OWORD *)&v48[v10[11]] = *(_OWORD *)&v49[v10[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v93 + 56))(v48, 0, 1, v10);
  }
  uint64_t v61 = a3[8];
  uint64_t v62 = a3[9];
  uint64_t v63 = (char *)a1 + v61;
  uint64_t v64 = (char *)v4 + v61;
  *((void *)v63 + 8) = *((void *)v64 + 8);
  long long v65 = *((_OWORD *)v64 + 3);
  *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
  *((_OWORD *)v63 + 3) = v65;
  long long v66 = *((_OWORD *)v64 + 1);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *((_OWORD *)v63 + 1) = v66;
  *((unsigned char *)a1 + v62) = *((unsigned char *)v4 + v62);
  uint64_t v67 = a3[10];
  uint64_t v68 = a3[11];
  uint64_t v69 = (_OWORD *)((char *)a1 + v67);
  uint64_t v70 = (_OWORD *)((char *)v4 + v67);
  long long v71 = v70[1];
  *uint64_t v69 = *v70;
  v69[1] = v71;
  *(void *)((char *)a1 + v68) = *(void *)((char *)v4 + v68);
  uint64_t v72 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)v4 + a3[12]);
  uint64_t v73 = (char *)a1 + v72;
  uint64_t v74 = (char *)v4 + v72;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v76 = sub_251037400();
  long long v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32);
  v77(v73, v74, v76);
  sub_250F49D48(0);
  uint64_t v79 = v78;
  v77(&v73[*(int *)(v78 + 36)], &v74[*(int *)(v78 + 36)], v76);
  if (EnumCaseMultiPayload == 1) {
    uint64_t v80 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    uint64_t v80 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  *(void *)&v73[*(int *)(v80 + 20)] = *(void *)&v74[*(int *)(v80 + 20)];
  swift_storeEnumTagMultiPayload();
  uint64_t v81 = v96[14];
  uint64_t v82 = (char *)a1 + v81;
  uint64_t v83 = (char *)v4 + v81;
  v77((char *)a1 + v81, (char *)v4 + v81, v76);
  v77(&v82[*(int *)(v79 + 36)], &v83[*(int *)(v79 + 36)], v76);
  uint64_t v84 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v85 = *(int *)(v84 + 20);
  uint64_t v86 = &v82[v85];
  uint64_t v87 = &v83[v85];
  v77(&v82[v85], &v83[v85], v76);
  v77(&v86[*(int *)(v79 + 36)], &v87[*(int *)(v79 + 36)], v76);
  *(void *)&v82[*(int *)(v84 + 24)] = *(void *)&v83[*(int *)(v84 + 24)];
  memcpy((char *)a1 + v96[15], (char *)v95 + v96[15], 0x118uLL);
  uint64_t v88 = v96[16];
  long long v89 = (char *)a1 + v88;
  uint64_t v90 = (uint64_t)v95 + v88;
  *(void *)long long v89 = *(void *)v90;
  v89[8] = *(unsigned char *)(v90 + 8);
  return a1;
}

void *sub_25102582C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v7 = v6[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v140 = *((void *)v10 - 1);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, int *))(v140 + 48);
  int v12 = v11(v8, 1, v10);
  uint64_t v143 = v11;
  int v13 = v11(v9, 1, v10);
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037400();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      v15(v8, v9, v14);
      uint64_t v16 = v15;
      uint64_t v17 = v10[5];
      uint64_t v18 = &v8[v17];
      uint64_t v141 = a3;
      uint64_t v19 = &v9[v17];
      v16(&v8[v17], &v9[v17], v14);
      sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v14);
      uint64_t v21 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v18[v21[5]] = *(void *)&v19[v21[5]];
      *(void *)&v18[v21[6]] = *(void *)&v19[v21[6]];
      uint64_t v22 = v21[7];
      uint64_t v23 = *(void *)&v19[v22];
      a3 = v141;
      *(void *)&v18[v22] = v23;
      uint64_t v24 = v10[6];
      uint64_t v25 = &v8[v24];
      uint64_t v26 = &v9[v24];
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      v25[16] = v26[16];
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      *(_OWORD *)&v8[v10[10]] = *(_OWORD *)&v9[v10[10]];
      *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v140 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_251028EE4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v98 = sub_251037400();
  uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 40);
  v99(v8, v9, v98);
  uint64_t v100 = v10[5];
  uint64_t v101 = &v8[v100];
  uint64_t v142 = a3;
  uint64_t v102 = &v9[v100];
  v99(&v8[v100], &v9[v100], v98);
  sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v99(&v101[*(int *)(v103 + 36)], &v102[*(int *)(v103 + 36)], v98);
  uint64_t v104 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v101[v104[5]] = *(void *)&v102[v104[5]];
  swift_bridgeObjectRelease();
  *(void *)&v101[v104[6]] = *(void *)&v102[v104[6]];
  swift_bridgeObjectRelease();
  uint64_t v105 = v104[7];
  uint64_t v106 = *(void *)&v102[v105];
  a3 = v142;
  *(void *)&v101[v105] = v106;
  swift_bridgeObjectRelease();
  uint64_t v107 = v10[6];
  uint64_t v108 = &v8[v107];
  long long v109 = &v9[v107];
  *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
  v108[16] = v109[16];
  v8[v10[7]] = v9[v10[7]];
  v8[v10[8]] = v9[v10[8]];
  v8[v10[9]] = v9[v10[9]];
  uint64_t v110 = v10[10];
  long long v111 = &v8[v110];
  uint64_t v112 = (uint64_t *)&v9[v110];
  uint64_t v114 = *v112;
  uint64_t v113 = v112[1];
  *(void *)long long v111 = v114;
  *((void *)v111 + 1) = v113;
  swift_bridgeObjectRelease();
  uint64_t v115 = v10[11];
  uint64_t v116 = &v8[v115];
  uint64_t v117 = (uint64_t *)&v9[v115];
  uint64_t v119 = *v117;
  uint64_t v118 = v117[1];
  *(void *)uint64_t v116 = v119;
  *((void *)v116 + 1) = v118;
  swift_bridgeObjectRelease();
LABEL_7:
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  uint64_t v28 = v6[7];
  long long v29 = (char *)a1 + v28;
  long long v30 = (char *)a2 + v28;
  *(void *)long long v29 = *(void *)v30;
  *((void *)v29 + 1) = *((void *)v30 + 1);
  v29[16] = v30[16];
  *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
  *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 56);
  *(_OWORD *)(v29 + 72) = *(_OWORD *)(v30 + 72);
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  uint64_t v31 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  *(void *)((char *)a1 + v31) = *(void *)((char *)a2 + v31);
  swift_bridgeObjectRelease();
  *((void *)v32 + 1) = *((void *)v33 + 1);
  *((void *)v32 + 2) = *((void *)v33 + 2);
  swift_bridgeObjectRelease();
  *((void *)v32 + 3) = *((void *)v33 + 3);
  swift_bridgeObjectRelease();
  *((void *)v32 + 4) = *((void *)v33 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
  *(_OWORD *)(v32 + 56) = *(_OWORD *)(v33 + 56);
  *(_OWORD *)(v32 + 72) = *(_OWORD *)(v33 + 72);
  *(_OWORD *)(v32 + 88) = *(_OWORD *)(v33 + 88);
  *(_OWORD *)(v32 + 104) = *(_OWORD *)(v33 + 104);
  uint64_t v34 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  long long v35 = (char *)a1 + v34;
  long long v36 = (char *)a2 + v34;
  *(void *)((char *)a1 + v34) = *(void *)((char *)a2 + v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = &v35[v38];
  uint64_t v40 = &v36[v38];
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 40))(v39, v40, v41);
  *(void *)&v35[*(int *)(v37 + 24)] = *(void *)&v36[*(int *)(v37 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[7];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  LODWORD(v40) = v143((char *)a1 + v42, 1, v10);
  int v45 = v143(v44, 1, v10);
  if (v40)
  {
    if (!v45)
    {
      uint64_t v46 = sub_251037400();
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32);
      v47(v43, v44, v46);
      uint64_t v48 = v10[5];
      uint64_t v49 = &v43[v48];
      uint64_t v50 = &v44[v48];
      v47(&v43[v48], &v44[v48], v46);
      sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v47(&v49[*(int *)(v51 + 36)], &v50[*(int *)(v51 + 36)], v46);
      uint64_t v52 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v49[v52[5]] = *(void *)&v50[v52[5]];
      *(void *)&v49[v52[6]] = *(void *)&v50[v52[6]];
      *(void *)&v49[v52[7]] = *(void *)&v50[v52[7]];
      uint64_t v53 = v10[6];
      int v54 = &v43[v53];
      uint64_t v55 = &v44[v53];
      *(_OWORD *)int v54 = *(_OWORD *)v55;
      v54[16] = v55[16];
      v43[v10[7]] = v44[v10[7]];
      v43[v10[8]] = v44[v10[8]];
      v43[v10[9]] = v44[v10[9]];
      *(_OWORD *)&v43[v10[10]] = *(_OWORD *)&v44[v10[10]];
      *(_OWORD *)&v43[v10[11]] = *(_OWORD *)&v44[v10[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v140 + 56))(v43, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v45)
  {
    sub_251028EE4((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v120 = sub_251037400();
  uint64_t v121 = *(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 40);
  v121(v43, v44, v120);
  uint64_t v122 = v10[5];
  uint64_t v123 = &v43[v122];
  uint64_t v124 = &v44[v122];
  v121(&v43[v122], &v44[v122], v120);
  sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v121(&v123[*(int *)(v125 + 36)], &v124[*(int *)(v125 + 36)], v120);
  uint64_t v126 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v123[v126[5]] = *(void *)&v124[v126[5]];
  swift_bridgeObjectRelease();
  *(void *)&v123[v126[6]] = *(void *)&v124[v126[6]];
  swift_bridgeObjectRelease();
  *(void *)&v123[v126[7]] = *(void *)&v124[v126[7]];
  swift_bridgeObjectRelease();
  uint64_t v127 = v10[6];
  uint64_t v128 = &v43[v127];
  uint64_t v129 = &v44[v127];
  *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
  v128[16] = v129[16];
  v43[v10[7]] = v44[v10[7]];
  v43[v10[8]] = v44[v10[8]];
  v43[v10[9]] = v44[v10[9]];
  uint64_t v130 = v10[10];
  uint64_t v131 = &v43[v130];
  uint64_t v132 = (uint64_t *)&v44[v130];
  uint64_t v134 = *v132;
  uint64_t v133 = v132[1];
  void *v131 = v134;
  v131[1] = v133;
  swift_bridgeObjectRelease();
  uint64_t v135 = v10[11];
  uint64_t v136 = &v43[v135];
  uint64_t v137 = (uint64_t *)&v44[v135];
  uint64_t v139 = *v137;
  uint64_t v138 = v137[1];
  *uint64_t v136 = v139;
  v136[1] = v138;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v57 = a3[8];
  uint64_t v58 = (uint64_t)a1 + v57;
  uint64_t v59 = (char *)a2 + v57;
  if (*(void *)((char *)a1 + v57))
  {
    if (*(void *)v59)
    {
      *(void *)uint64_t v58 = *(void *)v59;
      swift_bridgeObjectRelease();
      *(void *)(v58 + 8) = *((void *)v59 + 1);
      swift_bridgeObjectRelease();
      long long v60 = *((_OWORD *)v59 + 2);
      *(_OWORD *)(v58 + 16) = *((_OWORD *)v59 + 1);
      *(_OWORD *)(v58 + 32) = v60;
      *(_OWORD *)(v58 + 48) = *((_OWORD *)v59 + 3);
      *(void *)(v58 + 64) = *((void *)v59 + 8);
      goto LABEL_18;
    }
    sub_250F21DD0(v58);
  }
  long long v61 = *((_OWORD *)v59 + 3);
  *(_OWORD *)(v58 + 32) = *((_OWORD *)v59 + 2);
  *(_OWORD *)(v58 + 48) = v61;
  *(void *)(v58 + 64) = *((void *)v59 + 8);
  long long v62 = *((_OWORD *)v59 + 1);
  *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v62;
LABEL_18:
  uint64_t v63 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v64 = (char *)a1 + v63;
  long long v65 = (char *)a2 + v63;
  *(void *)((char *)a1 + v63) = *(void *)((char *)a2 + v63);
  swift_bridgeObjectRelease();
  *((void *)v64 + 1) = *((void *)v65 + 1);
  swift_bridgeObjectRelease();
  *((_OWORD *)v64 + 1) = *((_OWORD *)v65 + 1);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v66 = a3[13];
    uint64_t v67 = (char *)a1 + v66;
    uint64_t v68 = (char *)a2 + v66;
    sub_251028EE4((uint64_t)a1 + v66, type metadata accessor for OvernightMetricsAxisConfiguration);
    type metadata accessor for OvernightMetricsAxisConfiguration(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v70 = sub_251037400();
    long long v71 = *(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32);
    v71(v67, v68, v70);
    sub_250F49D48(0);
    v71(&v67[*(int *)(v72 + 36)], &v68[*(int *)(v72 + 36)], v70);
    if (EnumCaseMultiPayload == 1) {
      uint64_t v73 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    }
    else {
      uint64_t v73 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    }
    *(void *)&v67[*(int *)(v73 + 20)] = *(void *)&v68[*(int *)(v73 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v74 = a3[14];
  uint64_t v75 = (char *)a1 + v74;
  uint64_t v76 = (char *)a2 + v74;
  uint64_t v77 = sub_251037400();
  uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 40);
  long long v144 = a1;
  v78(v75, v76, v77);
  sub_250F49D48(0);
  uint64_t v80 = v79;
  v78(&v75[*(int *)(v79 + 36)], &v76[*(int *)(v79 + 36)], v77);
  uint64_t v81 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v82 = *(int *)(v81 + 20);
  uint64_t v83 = &v75[v82];
  uint64_t v84 = a3;
  uint64_t v85 = &v76[v82];
  v78(&v75[v82], &v76[v82], v77);
  v78(&v83[*(int *)(v80 + 36)], &v85[*(int *)(v80 + 36)], v77);
  *(void *)&v75[*(int *)(v81 + 24)] = *(void *)&v76[*(int *)(v81 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v86 = v84[15];
  uint64_t v87 = (uint64_t)v144 + v86;
  uint64_t v88 = (char *)a2 + v86;
  if (!*(void *)((char *)v144 + v86)) {
    goto LABEL_27;
  }
  if (!*(void *)v88)
  {
    sub_250F27E80(v87);
LABEL_27:
    *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
    *(void *)(v87 + 16) = *((void *)v88 + 2);
    goto LABEL_28;
  }
  *(void *)uint64_t v87 = *(void *)v88;
  swift_release();
  *(void *)(v87 + 8) = *((void *)v88 + 1);
  swift_release();
  *(void *)(v87 + 16) = *((void *)v88 + 2);
  swift_release();
LABEL_28:
  *(unsigned char *)(v87 + 24) = v88[24];
  *(unsigned char *)(v87 + 32) = v88[32];
  *(void *)(v87 + 40) = *((void *)v88 + 5);
  swift_release();
  *(void *)(v87 + 48) = *((void *)v88 + 6);
  *(unsigned char *)(v87 + 56) = v88[56];
  *(void *)(v87 + 64) = *((void *)v88 + 8);
  *(void *)(v87 + 72) = *((void *)v88 + 9);
  swift_release();
  *(void *)(v87 + 80) = *((void *)v88 + 10);
  swift_release();
  *(void *)(v87 + 88) = *((void *)v88 + 11);
  *(void *)(v87 + 96) = *((void *)v88 + 12);
  *(unsigned char *)(v87 + 104) = v88[104];
  long long v89 = *((_OWORD *)v88 + 8);
  *(_OWORD *)(v87 + 112) = *((_OWORD *)v88 + 7);
  *(_OWORD *)(v87 + 128) = v89;
  long long v90 = *((_OWORD *)v88 + 10);
  *(_OWORD *)(v87 + 144) = *((_OWORD *)v88 + 9);
  *(_OWORD *)(v87 + 160) = v90;
  *(void *)(v87 + 176) = *((void *)v88 + 22);
  swift_release();
  *(void *)(v87 + 184) = *((void *)v88 + 23);
  swift_release();
  *(void *)(v87 + 192) = *((void *)v88 + 24);
  *(unsigned char *)(v87 + 200) = v88[200];
  *(unsigned char *)(v87 + 201) = v88[201];
  *(void *)(v87 + 208) = *((void *)v88 + 26);
  swift_release();
  *(void *)(v87 + 216) = *((void *)v88 + 27);
  swift_release();
  *(void *)(v87 + 224) = *((void *)v88 + 28);
  swift_release();
  *(void *)(v87 + 232) = *((void *)v88 + 29);
  swift_release();
  *(void *)(v87 + 240) = *((void *)v88 + 30);
  swift_release();
  *(unsigned char *)(v87 + 248) = v88[248];
  *(void *)(v87 + 256) = *((void *)v88 + 32);
  swift_release();
  *(void *)(v87 + 264) = *((void *)v88 + 33);
  swift_release();
  *(void *)(v87 + 272) = *((void *)v88 + 34);
  uint64_t v91 = v84[16];
  uint64_t v92 = (char *)v144 + v91;
  uint64_t v93 = (char *)a2 + v91;
  uint64_t v94 = *(void *)v93;
  LOBYTE(v93) = v93[8];
  uint64_t v95 = *(void *)v92;
  char v96 = v92[8];
  *(void *)uint64_t v92 = v94;
  v92[8] = (char)v93;
  sub_250F766FC(v95, v96);
  return v144;
}

uint64_t sub_2510265EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251026600);
}

uint64_t sub_251026600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_13:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_14;
  }
  sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_13;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v15 = *(void *)(a1 + a3[10]);
    if (v15 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v17 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
    if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
    {
      uint64_t v8 = v17;
      uint64_t v12 = *(void *)(v17 - 8);
      uint64_t v13 = a3[13];
      goto LABEL_13;
    }
    uint64_t v18 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
    uint64_t v20 = v18;
    uint64_t v21 = a1 + a3[14];
    return v19(v21, a2, v20);
  }
}

uint64_t sub_251026848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25102685C);
}

void sub_25102685C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_12:
    v11(v12, a2, a2, v10);
    return;
  }
  uint64_t v13 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_11:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_12;
  }
  sub_251028F44(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_11;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[10]) = (a2 - 1);
    return;
  }
  uint64_t v17 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
  {
    uint64_t v10 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a4[13];
    goto LABEL_11;
  }
  uint64_t v18 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[14];
  v19(v21, a2, a2, v20);
}

uint64_t type metadata accessor for AnimatableOvernightMetricsChart()
{
  uint64_t result = qword_269B14AC8;
  if (!qword_269B14AC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_251026AF0()
{
  type metadata accessor for OvernightMetricsChartLayout(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartPointCollection();
    if (v1 <= 0x3F)
    {
      sub_251028F44(319, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsAxisConfiguration(319);
        if (v3 <= 0x3F)
        {
          type metadata accessor for OvernightMetricsChart.Derivations(319);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t sub_251026CDC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_251026CF8()
{
  return sub_2510383C0();
}

uint64_t sub_251026D1C(uint64_t a1)
{
  uint64_t v2 = sub_2510374F0();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_2510383D0();
}

uint64_t sub_251026DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_251028FA8(a1);
  if (v6) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = sub_251037740();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a2;
    uint64_t v11 = 1;
  }
  else
  {
    sub_251029048(result, v5, a1, a2);
    uint64_t v12 = sub_251037740();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v9 = v12;
    uint64_t v10 = a2;
    uint64_t v11 = 0;
  }
  return v8(v10, v11, 1, v9);
}

uint64_t sub_251026EC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v75 = a1;
  uint64_t v2 = type metadata accessor for AnimatableOvernightMetricsChart();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v79 = (int *)(v2 - 8);
  uint64_t v74 = v3;
  uint64_t v73 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v72 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v67 = (uint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251028DAC(0, (unint64_t *)&qword_269B13E68, (uint64_t (*)(void))sub_250F9E7F4, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
  long long v61 = (int *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  long long v62 = (char *)&v58 - v8;
  uint64_t v78 = (uint64_t (*)(uint64_t))MEMORY[0x263EFCD98];
  sub_251028F44(0, &qword_269B13280, MEMORY[0x263EFCD98], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v58 - v10;
  sub_251028270();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v76 = v12;
  uint64_t v77 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251028304();
  uint64_t v68 = *(void *)(v16 - 8);
  uint64_t v69 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v63 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251028488();
  uint64_t v66 = v18 - 8;
  MEMORY[0x270FA5388](v18 - 8);
  long long v65 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251028528();
  uint64_t v71 = v20 - 8;
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v70 = (uint64_t)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = v1;
  type metadata accessor for OvernightMetricsChartContent();
  sub_2510283D8(&qword_269B14AE0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartContent);
  sub_251037F40();
  v85[0] = *(_OWORD *)(v1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 56);
  uint64_t v22 = sub_251038020();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v11, 1, 1, v22);
  sub_250F2F370();
  sub_2510283D8(&qword_269B14AF0, (void (*)(uint64_t))sub_251028270);
  sub_251028420();
  uint64_t v23 = v76;
  sub_2510388E0();
  sub_251028590((uint64_t)v11, &qword_269B13280, v78);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v15, v23);
  uint64_t v24 = v79[15];
  uint64_t v64 = v1;
  uint64_t v25 = v1 + v24;
  uint64_t v26 = (uint64_t *)(v64 + v79[10]);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  uint64_t v30 = v26[2];
  uint64_t v29 = v26[3];
  uint64_t v32 = v26[4];
  uint64_t v59 = v26[5];
  uint64_t v31 = v59;
  uint64_t v60 = v27;
  uint64_t v78 = (uint64_t (*)(uint64_t))v26[6];
  uint64_t v33 = v26[7];
  uint64_t v34 = v26[8];
  uint64_t v76 = v29;
  uint64_t v77 = v33;
  v81[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v81);
  sub_251028E7C((uint64_t)v81, (uint64_t)v82, (uint64_t (*)(void))sub_250F9A4E8);
  memcpy(v83, v82, sizeof(v83));
  uint64_t v35 = v25;
  uint64_t v36 = v67;
  sub_251028E14(v35, v67, type metadata accessor for OvernightMetricsAxisConfiguration);
  v84[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v84);
  sub_251028E7C((uint64_t)v84, (uint64_t)v85, (uint64_t (*)(void))sub_250F9A4E8);
  uint64_t v37 = v61;
  uint64_t v38 = (uint64_t)v62;
  memcpy(&v62[v61[12]], v83, 0x119uLL);
  sub_251028E7C(v36, v38, type metadata accessor for OvernightMetricsAxisConfiguration);
  uint64_t v39 = (uint64_t *)(v38 + v37[11]);
  *uint64_t v39 = v28;
  v39[1] = v27;
  uint64_t v40 = v76;
  v39[2] = v30;
  v39[3] = v40;
  v39[4] = v32;
  v39[5] = v31;
  uint64_t v41 = v77;
  v39[6] = (uint64_t)v78;
  v39[7] = v41;
  v39[8] = v34;
  memcpy((void *)(v38 + v37[13]), v85, 0x119uLL);
  uint64_t v42 = (uint64_t *)(v38 + v37[14]);
  uint64_t *v42 = swift_getKeyPath();
  sub_251028F44(0, (unint64_t *)&qword_269B13230, MEMORY[0x263F07920], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = v68;
  uint64_t v43 = v69;
  uint64_t v45 = (uint64_t)v65;
  uint64_t v46 = v63;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v63, v69);
  sub_251028630(v38, v45 + *(int *)(v66 + 44));
  sub_250F22234(v28);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
  uint64_t v47 = v64;
  uint64_t v48 = v72;
  sub_251028E14(v64, v72, (uint64_t (*)(void))type metadata accessor for AnimatableOvernightMetricsChart);
  unint64_t v49 = (*(unsigned __int8 *)(v74 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  uint64_t v50 = swift_allocObject();
  sub_251028E7C(v48, v50 + v49, (uint64_t (*)(void))type metadata accessor for AnimatableOvernightMetricsChart);
  uint64_t v51 = v70;
  sub_251028E14(v45, v70, (uint64_t (*)(void))sub_251028488);
  uint64_t v52 = (uint64_t (**)(uint64_t))(v51 + *(int *)(v71 + 44));
  *uint64_t v52 = sub_251028C9C;
  v52[1] = (uint64_t (*)(uint64_t))v50;
  sub_251028EE4(v45, (uint64_t (*)(void))sub_251028488);
  uint64_t v53 = sub_251038D60();
  LOBYTE(v49) = *(unsigned char *)(v47 + v79[7]);
  uint64_t v54 = v75;
  sub_251028E14(v51, v75, (uint64_t (*)(void))sub_251028528);
  sub_251028D0C();
  uint64_t v56 = v54 + *(int *)(v55 + 36);
  *(void *)uint64_t v56 = v53;
  *(unsigned char *)(v56 + 8) = v49;
  return sub_251028EE4(v51, (uint64_t (*)(void))sub_251028528);
}

uint64_t *sub_25102771C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for AnimatableOvernightMetricsChart();
  char v31 = *(unsigned char *)(a1 + v4[5]);
  uint64_t v5 = a1 + v4[6];
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsChartContent();
  sub_251028E14(v5, (uint64_t)&a2[v6[5]], (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_250F3A92C(a1 + v4[7], (uint64_t)&a2[v6[6]]);
  uint64_t v7 = (uint64_t *)(a1 + v4[8]);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v23 = v7[2];
  uint64_t v24 = v7[3];
  uint64_t v25 = v7[4];
  uint64_t v26 = v7[5];
  uint64_t v27 = v7[6];
  uint64_t v28 = v7[7];
  uint64_t v29 = v7[8];
  char v30 = *(unsigned char *)(a1 + v4[9]);
  sub_250F22234(*v7);
  uint64_t v22 = sub_251027938();
  uint64_t v21 = sub_251027B80();
  uint64_t v10 = (uint64_t *)(a1 + v4[10]);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[3];
  uint64_t v15 = *(void *)(a1 + v4[12]);
  uint64_t v16 = (double *)&a2[v6[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_251027DC4(v16);
  sub_251028E14(a1, (uint64_t)&a2[v6[14]], type metadata accessor for OvernightMetricsChartLayout);
  uint64_t v17 = (const void *)(a1 + v4[15]);
  memcpy(__dst, v17, 0x118uLL);
  *a2 = v31;
  uint64_t v18 = (uint64_t *)&a2[v6[7]];
  *uint64_t v18 = v9;
  v18[1] = v8;
  void v18[2] = v23;
  v18[3] = v24;
  v18[4] = v25;
  v18[5] = v26;
  v18[6] = v27;
  v18[7] = v28;
  v18[8] = v29;
  a2[v6[8]] = v30;
  *(void *)&a2[v6[9]] = v22;
  *(void *)&a2[v6[10]] = v21;
  uint64_t v19 = &a2[v6[11]];
  *uint64_t v19 = v11;
  v19[1] = v12;
  v19[2] = v13;
  void v19[3] = v14;
  *(void *)&a2[v6[12]] = v15;
  memcpy(&a2[v6[15]], v17, 0x118uLL);
  return sub_250F2A3B4(__dst);
}

uint64_t sub_251027938()
{
  sub_251028F44(0, &qword_269B144E8, MEMORY[0x263F42CD0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v16 - v2;
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnimatableOvernightMetricsChart();
  uint64_t v9 = *(void *)(v0 + *(int *)(v8 + 40) + 8);
  sub_251026DE4(v9, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_251028590((uint64_t)v3, &qword_269B144E8, MEMORY[0x263F42CD0]);
    return MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (*(void *)(v9 + 16) != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v10 = v0 + *(int *)(v8 + 24);
  uint64_t v11 = *(void *)(v10 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24));
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_250FCB6DC((uint64_t)v7), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_251027B80()
{
  sub_251028F44(0, &qword_269B144E8, MEMORY[0x263F42CD0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v16 - v2;
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnimatableOvernightMetricsChart();
  uint64_t v9 = *(void *)(v0 + *(int *)(v8 + 40));
  sub_251026DE4(v9, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_251028590((uint64_t)v3, &qword_269B144E8, MEMORY[0x263F42CD0]);
    return MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (*(void *)(v9 + 16) != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v10 = v0 + *(int *)(v8 + 24);
  uint64_t v11 = *(void *)(v10 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24));
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_250FCB6DC((uint64_t)v7), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

unint64_t sub_251027DC4@<X0>(double *a1@<X8>)
{
  sub_250F49D48(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = (int *)type metadata accessor for AnimatableOvernightMetricsChart();
  uint64_t v10 = (long long *)(v1 + v9[15]);
  if (*((unsigned char *)v10 + 24) == 1)
  {
    uint64_t v11 = v1 + v9[14];
    if (*(unsigned char *)(v1 + v9[5]) == 1) {
      v11 += *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
    }
    sub_251028E14(v11, (uint64_t)v5, (uint64_t (*)(void))sub_250F49D48);
    sub_251028E7C((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(void))sub_250F49D48);
    uint64_t v12 = *((void *)v10 + 2);
    char v13 = *((unsigned char *)v10 + 32);
    uint64_t v14 = *((void *)v10 + 5);
    uint64_t v15 = *((void *)v10 + 6);
    char v16 = *((unsigned char *)v10 + 56);
    uint64_t v17 = *((void *)v10 + 8);
    uint64_t v18 = *((void *)v10 + 11);
    uint64_t v19 = *((void *)v10 + 12);
    char v20 = *((unsigned char *)v10 + 104);
    uint64_t v21 = *((void *)v10 + 24);
    char v22 = *((unsigned char *)v10 + 200);
    char v23 = *((unsigned char *)v10 + 201);
    uint64_t v24 = *((void *)v10 + 30);
    char v25 = *((unsigned char *)v10 + 248);
    uint64_t v26 = *((void *)v10 + 32);
    uint64_t v27 = *((void *)v10 + 33);
    uint64_t v28 = *((void *)v10 + 34);
    long long v44 = *v10;
    uint64_t v45 = v12;
    char v46 = 1;
    char v47 = v13;
    uint64_t v48 = v14;
    uint64_t v49 = v15;
    char v50 = v16;
    uint64_t v51 = v17;
    long long v52 = *(long long *)((char *)v10 + 72);
    uint64_t v53 = v18;
    uint64_t v54 = v19;
    char v55 = v20;
    long long v29 = v10[8];
    long long v56 = v10[7];
    long long v57 = v29;
    long long v30 = v10[10];
    long long v58 = v10[9];
    long long v59 = v30;
    long long v60 = v10[11];
    uint64_t v61 = v21;
    char v62 = v22;
    char v63 = v23;
    long long v31 = v10[14];
    long long v64 = v10[13];
    long long v65 = v31;
    uint64_t v66 = v24;
    char v67 = v25;
    uint64_t v68 = v26;
    uint64_t v69 = v27;
    uint64_t v70 = v28;
    uint64_t v32 = (double *)(v1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 24));
    double v33 = *v32;
    sub_250F2A3B4((uint64_t *)&v44);
    sub_250FCA198(v33);
    double v35 = v34;
    unint64_t result = sub_250FCA198(v32[1]);
    if (v35 > v37) {
      double v38 = v35;
    }
    else {
      double v38 = v37;
    }
    if (v35 > v38)
    {
      __break(1u);
    }
    else
    {
      uint64_t v39 = type metadata accessor for BaselineSeparators.Configuration(0);
      sub_251028E14((uint64_t)v8, (uint64_t)a1 + *(int *)(v39 + 20), (uint64_t (*)(void))sub_250F49D48);
      id v40 = objc_msgSend(self, sel_quaternaryLabelColor);
      uint64_t v41 = MEMORY[0x2533907A0](v40);
      sub_250F2E048((uint64_t *)&v44);
      *a1 = v35;
      a1[1] = v38;
      *(void *)((char *)a1 + *(int *)(v39 + 24)) = v41;
      sub_251028EE4((uint64_t)v8, (uint64_t (*)(void))sub_250F49D48);
      return (*(uint64_t (**)(double *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a1, 0, 1, v39);
    }
  }
  else
  {
    uint64_t v42 = type metadata accessor for BaselineSeparators.Configuration(0);
    uint64_t v43 = *(uint64_t (**)(double *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
    return v43(a1, 1, 1, v42);
  }
  return result;
}

uint64_t sub_251028118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AnimatableOvernightMetricsChart();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_250F5DC7C();
  sub_2510380C0();
  char v6 = v12[15];
  sub_251028E14(a2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AnimatableOvernightMetricsChart);
  if ((v6 & 1) == 0)
  {
    sub_251028EE4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AnimatableOvernightMetricsChart);
    return sub_2510380B0();
  }
  uint64_t v7 = &v5[*(int *)(v3 + 64)];
  uint64_t v8 = *(void *)v7;
  char v9 = v7[8];
  sub_251023008(*(void *)v7, v9);
  char v10 = sub_250F7644C(v8, v9);
  sub_250F766FC(v8, v9);
  uint64_t result = sub_251028EE4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AnimatableOvernightMetricsChart);
  if (v10) {
    return sub_2510380B0();
  }
  return result;
}

void sub_251028270()
{
  if (!qword_269B14AD8)
  {
    type metadata accessor for OvernightMetricsChartContent();
    sub_2510283D8(&qword_269B14AE0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartContent);
    unint64_t v0 = sub_251037F50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14AD8);
    }
  }
}

void sub_251028304()
{
  if (!qword_269B14AE8)
  {
    sub_251028270();
    sub_250F2F370();
    sub_2510283D8(&qword_269B14AF0, (void (*)(uint64_t))sub_251028270);
    sub_251028420();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14AE8);
    }
  }
}

uint64_t sub_2510283D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_251028420()
{
  unint64_t result = qword_269B14AF8;
  if (!qword_269B14AF8)
  {
    sub_250F2F370();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14AF8);
  }
  return result;
}

void sub_251028488()
{
  if (!qword_269B14B00)
  {
    sub_251028304();
    sub_251028DAC(255, (unint64_t *)&qword_269B13E68, (uint64_t (*)(void))sub_250F9E7F4, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14B00);
    }
  }
}

void sub_251028528()
{
  if (!qword_269B14B08)
  {
    sub_251028488();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14B08);
    }
  }
}

uint64_t *sub_251028588@<X0>(unsigned char *a1@<X8>)
{
  return sub_25102771C(*(void *)(v1 + 16), a1);
}

uint64_t sub_251028590(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_251028F44(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_251028608()
{
  return sub_2510383C0();
}

uint64_t sub_251028630(uint64_t a1, uint64_t a2)
{
  sub_251028DAC(0, (unint64_t *)&qword_269B13E68, (uint64_t (*)(void))sub_250F9E7F4, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2510286CC()
{
  uint64_t v1 = (int *)type metadata accessor for AnimatableOvernightMetricsChart();
  uint64_t v27 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = v0 + ((v27 + 16) & ~v27);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  if (!v5(v3, 1, v4))
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v3, v6);
    uint64_t v8 = v3 + *(int *)(v4 + 20);
    v7(v8, v6);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v7(v8 + *(int *)(v9 + 36), v6);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v2 + v1[6];
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v12 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v2 + v1[7];
  if (!v5(v13, 1, v4))
  {
    uint64_t v14 = sub_251037400();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
    v15(v13, v14);
    uint64_t v16 = v13 + *(int *)(v4 + 20);
    v15(v16, v14);
    sub_251022F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v15(v16 + *(int *)(v17 + 36), v14);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v2 + v1[8]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v2 + v1[13];
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v20 = sub_251037400();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8);
  v21(v18, v20);
  sub_250F49D48(0);
  uint64_t v23 = v22;
  v21(v18 + *(int *)(v22 + 36), v20);
  if (EnumCaseMultiPayload == 1) {
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = v2 + v1[14];
  v21(v24, v20);
  v21(v24 + *(int *)(v23 + 36), v20);
  uint64_t v25 = v24 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v21(v25, v20);
  v21(v25 + *(int *)(v23 + 36), v20);
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + v1[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_250F766FC(*(void *)(v2 + v1[16]), *(unsigned char *)(v2 + v1[16] + 8));
  return swift_deallocObject();
}

uint64_t sub_251028C9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AnimatableOvernightMetricsChart() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_251028118(a1, v4);
}

void sub_251028D0C()
{
  if (!qword_269B14B10)
  {
    sub_251028528();
    sub_251028DAC(255, (unint64_t *)&qword_269B12D88, (uint64_t (*)(void))sub_250F29CB0, (uint64_t)&type metadata for BalanceMetricsTimeScope, MEMORY[0x263F198B8]);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14B10);
    }
  }
}

void sub_251028DAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_251028E14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_251028E7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_251028EE4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_251028F44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_251028FA8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_251029048@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || (uint64_t v4 = result, 1 << *(unsigned char *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 36) != a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = sub_251037740();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v6 + *(void *)(v8 + 72) * v4;
  return v9(a4, v10, v7);
}

unint64_t sub_25102910C()
{
  unint64_t result = qword_269B14B18;
  if (!qword_269B14B18)
  {
    sub_251028D0C();
    sub_251029184();
    sub_250F29EF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14B18);
  }
  return result;
}

unint64_t sub_251029184()
{
  unint64_t result = qword_269B14B20;
  if (!qword_269B14B20)
  {
    sub_251028528();
    sub_2510291FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14B20);
  }
  return result;
}

unint64_t sub_2510291FC()
{
  unint64_t result = qword_269B14B28;
  if (!qword_269B14B28)
  {
    sub_251028488();
    sub_251028270();
    sub_250F2F370();
    sub_2510283D8(&qword_269B14AF0, (void (*)(uint64_t))sub_251028270);
    sub_251028420();
    swift_getOpaqueTypeConformance2();
    sub_2510292F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14B28);
  }
  return result;
}

unint64_t sub_2510292F4()
{
  unint64_t result = qword_269B13E98;
  if (!qword_269B13E98)
  {
    sub_251028DAC(255, (unint64_t *)&qword_269B13E68, (uint64_t (*)(void))sub_250F9E7F4, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13E98);
  }
  return result;
}

void *sub_251029384(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v14 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v5 = a3;
    uint64_t v6 = a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
    uint64_t v11 = *((void *)v10 - 1);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
    swift_bridgeObjectRetain();
    uint64_t v111 = v5;
    uint64_t v112 = v6;
    if (v12(v9, 1, v10))
    {
      sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_251037740();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
      uint64_t v16 = v10[5];
      uint64_t v17 = &v8[v16];
      uint64_t v18 = &v9[v16];
      uint64_t v19 = sub_251037400();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v20(v17, v18, v19);
      uint64_t v21 = v10[6];
      uint64_t v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      v20(&v8[v21], &v9[v21], v19);
      sub_250F26E08();
      uint64_t v25 = v24;
      v20(&v22[*(int *)(v24 + 36)], &v23[*(int *)(v24 + 36)], v19);
      uint64_t v26 = v10[7];
      uint64_t v27 = &v8[v26];
      uint64_t v28 = &v9[v26];
      v20(&v8[v26], &v9[v26], v19);
      uint64_t v29 = v19;
      uint64_t v5 = v111;
      v20(&v27[*(int *)(v25 + 36)], &v28[*(int *)(v25 + 36)], v29);
      uint64_t v30 = v10[8];
      long long v31 = &v8[v30];
      uint64_t v32 = &v9[v30];
      *(void *)long long v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v10[9];
      double v34 = &v8[v33];
      double v35 = &v9[v33];
      uint64_t v36 = sub_2510378C0();
      double v37 = v35;
      uint64_t v6 = v112;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v37, v36);
      uint64_t v38 = v10[10];
      uint64_t v39 = &v8[v38];
      id v40 = &v9[v38];
      uint64_t v41 = *((void *)v40 + 1);
      *(void *)uint64_t v39 = *(void *)v40;
      *((void *)v39 + 1) = v41;
      uint64_t v42 = v10[11];
      uint64_t v43 = &v8[v42];
      long long v44 = &v9[v42];
      uint64_t v45 = *((void *)v44 + 1);
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = v45;
      uint64_t v46 = v10[12];
      char v47 = &v8[v46];
      uint64_t v48 = &v9[v46];
      uint64_t v49 = *((void *)v48 + 1);
      *(void *)char v47 = *(void *)v48;
      *((void *)v47 + 1) = v49;
      char v50 = *(void (**)(char *, void, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v8, 0, 1, v10);
    }
    uint64_t v51 = *(int *)(v5 + 28);
    long long v52 = a1;
    *(void *)((char *)a1 + *(int *)(v5 + 24)) = *(void *)((char *)v6 + *(int *)(v5 + 24));
    uint64_t v53 = (char *)a1 + v51;
    uint64_t v54 = (char *)v6 + v51;
    *(void *)((char *)a1 + v51) = *(void *)((char *)v6 + v51);
    char v55 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v56 = v55[5];
    long long v57 = &v53[v56];
    long long v58 = &v54[v56];
    long long v59 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v109 = *((void *)v59 - 1);
    long long v60 = *(unsigned int (**)(char *, uint64_t, int *))(v109 + 48);
    swift_bridgeObjectRetain();
    if (v60(v58, 1, v59))
    {
      sub_25102E980(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      uint64_t v62 = sub_251037400();
      char v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
      v63(v57, v58, v62);
      uint64_t v64 = v59[5];
      long long v65 = &v57[v64];
      uint64_t v66 = &v58[v64];
      v63(&v57[v64], &v58[v64], v62);
      sub_250F26E08();
      v63(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v62);
      uint64_t v68 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v65[v68[5]] = *(void *)&v66[v68[5]];
      *(void *)&v65[v68[6]] = *(void *)&v66[v68[6]];
      *(void *)&v65[v68[7]] = *(void *)&v66[v68[7]];
      uint64_t v69 = v59[6];
      uint64_t v70 = &v57[v69];
      uint64_t v71 = &v58[v69];
      *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
      v70[16] = v71[16];
      v57[v59[7]] = v58[v59[7]];
      v57[v59[8]] = v58[v59[8]];
      v57[v59[9]] = v58[v59[9]];
      uint64_t v72 = v59[10];
      uint64_t v73 = &v57[v72];
      uint64_t v74 = &v58[v72];
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = v75;
      uint64_t v76 = v59[11];
      uint64_t v77 = &v57[v76];
      uint64_t v78 = &v58[v76];
      uint64_t v79 = *((void *)v78 + 1);
      *(void *)uint64_t v77 = *(void *)v78;
      *((void *)v77 + 1) = v79;
      uint64_t v110 = *(void (**)(char *, void, uint64_t, int *))(v109 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v110(v57, 0, 1, v59);
      long long v52 = a1;
    }
    *(_OWORD *)&v53[v55[6]] = *(_OWORD *)&v54[v55[6]];
    uint64_t v80 = v55[7];
    uint64_t v81 = &v53[v80];
    uint64_t v82 = &v54[v80];
    long long v83 = *((_OWORD *)v82 + 1);
    *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    *((_OWORD *)v81 + 1) = v83;
    *((void *)v81 + 10) = *((void *)v82 + 10);
    long long v84 = *((_OWORD *)v82 + 4);
    long long v85 = *((_OWORD *)v82 + 2);
    *((_OWORD *)v81 + 3) = *((_OWORD *)v82 + 3);
    *((_OWORD *)v81 + 4) = v84;
    *((_OWORD *)v81 + 2) = v85;
    *(void *)&v53[v55[8]] = *(void *)&v54[v55[8]];
    *(void *)&v53[v55[9]] = *(void *)&v54[v55[9]];
    uint64_t v86 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v87 = &v53[v86];
    uint64_t v88 = &v54[v86];
    uint64_t v89 = *((void *)v88 + 1);
    *(void *)uint64_t v87 = *(void *)v88;
    *((void *)v87 + 1) = v89;
    uint64_t v90 = *((void *)v88 + 3);
    *((void *)v87 + 2) = *((void *)v88 + 2);
    *((void *)v87 + 3) = v90;
    *((void *)v87 + 4) = *((void *)v88 + 4);
    *(_OWORD *)(v87 + 40) = *(_OWORD *)(v88 + 40);
    *(_OWORD *)(v87 + 56) = *(_OWORD *)(v88 + 56);
    *(_OWORD *)(v87 + 72) = *(_OWORD *)(v88 + 72);
    *(_OWORD *)(v87 + 88) = *(_OWORD *)(v88 + 88);
    *(_OWORD *)(v87 + 104) = *(_OWORD *)(v88 + 104);
    uint64_t v91 = *(int *)(v111 + 32);
    uint64_t v92 = (char *)v52 + v91;
    uint64_t v93 = (uint64_t)v112 + v91;
    uint64_t v94 = *(void *)((char *)v112 + v91);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v94)
    {
      uint64_t v95 = *(void *)(v93 + 8);
      uint64_t v96 = *(void *)(v93 + 16);
      *(void *)uint64_t v92 = v94;
      *((void *)v92 + 1) = v95;
      *((void *)v92 + 2) = v96;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
      *((void *)v92 + 2) = *(void *)(v93 + 16);
    }
    v92[24] = *(unsigned char *)(v93 + 24);
    v92[32] = *(unsigned char *)(v93 + 32);
    uint64_t v97 = *(void *)(v93 + 48);
    *((void *)v92 + 5) = *(void *)(v93 + 40);
    *((void *)v92 + 6) = v97;
    v92[56] = *(unsigned char *)(v93 + 56);
    uint64_t v98 = *(void *)(v93 + 72);
    *((void *)v92 + 8) = *(void *)(v93 + 64);
    *((void *)v92 + 9) = v98;
    *((void *)v92 + 10) = *(void *)(v93 + 80);
    long long v99 = *(_OWORD *)(v93 + 88);
    *(_OWORD *)(v92 + 104) = *(_OWORD *)(v93 + 104);
    *(_OWORD *)(v92 + 88) = v99;
    long long v100 = *(_OWORD *)(v93 + 120);
    long long v101 = *(_OWORD *)(v93 + 136);
    *(_OWORD *)(v92 + 152) = *(_OWORD *)(v93 + 152);
    *(_OWORD *)(v92 + 136) = v101;
    *(_OWORD *)(v92 + 120) = v100;
    uint64_t v102 = *(void *)(v93 + 176);
    *((void *)v92 + 21) = *(void *)(v93 + 168);
    *((void *)v92 + 22) = v102;
    uint64_t v104 = *(void *)(v93 + 184);
    uint64_t v103 = *(void *)(v93 + 192);
    v92[200] = *(unsigned char *)(v93 + 200);
    *((void *)v92 + 23) = v104;
    *((void *)v92 + 24) = v103;
    v92[201] = *(unsigned char *)(v93 + 201);
    uint64_t v105 = *(void *)(v93 + 216);
    *((void *)v92 + 26) = *(void *)(v93 + 208);
    *((void *)v92 + 27) = v105;
    uint64_t v106 = *(void *)(v93 + 232);
    *((void *)v92 + 28) = *(void *)(v93 + 224);
    *((void *)v92 + 29) = v106;
    *((void *)v92 + 30) = *(void *)(v93 + 240);
    v92[248] = *(unsigned char *)(v93 + 248);
    uint64_t v107 = *(void *)(v93 + 264);
    *((void *)v92 + 32) = *(void *)(v93 + 256);
    *((void *)v92 + 33) = v107;
    *((void *)v92 + 34) = *(void *)(v93 + 272);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v14 = a1;
  }
  swift_retain();
  return v14;
}

void *sub_251029B8C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, int *))(v8 + 48);
  swift_bridgeObjectRetain();
  uint64_t v106 = v3;
  if (v9(v6, 1, v7))
  {
    sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_251037740();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v5, v6, v11);
    uint64_t v12 = v7[5];
    uint64_t v13 = &v5[v12];
    uint64_t v14 = &v6[v12];
    uint64_t v15 = sub_251037400();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    uint64_t v17 = v7[6];
    uint64_t v18 = &v5[v17];
    uint64_t v19 = &v6[v17];
    v16(&v5[v17], &v6[v17], v15);
    sub_250F26E08();
    uint64_t v21 = v20;
    v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v15);
    uint64_t v22 = v7[7];
    uint64_t v23 = &v5[v22];
    uint64_t v24 = &v6[v22];
    v16(&v5[v22], &v6[v22], v15);
    v16(&v23[*(int *)(v21 + 36)], &v24[*(int *)(v21 + 36)], v15);
    uint64_t v25 = v7[8];
    uint64_t v26 = &v5[v25];
    uint64_t v27 = &v6[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = v7[9];
    uint64_t v29 = &v5[v28];
    uint64_t v30 = &v6[v28];
    uint64_t v31 = sub_2510378C0();
    uint64_t v32 = v30;
    uint64_t v3 = v106;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v32, v31);
    uint64_t v33 = v7[10];
    double v34 = &v5[v33];
    double v35 = &v6[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)double v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = v7[11];
    uint64_t v38 = &v5[v37];
    uint64_t v39 = &v6[v37];
    uint64_t v40 = *((void *)v39 + 1);
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = v40;
    uint64_t v41 = v7[12];
    uint64_t v42 = &v5[v41];
    uint64_t v43 = &v6[v41];
    uint64_t v44 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = *(void *)v43;
    *((void *)v42 + 1) = v44;
    uint64_t v45 = *(void (**)(char *, void, uint64_t, int *))(v8 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v5, 0, 1, v7);
  }
  uint64_t v46 = *(int *)(v3 + 28);
  char v47 = a2;
  *(void *)((char *)a1 + *(int *)(v3 + 24)) = *(void *)((char *)a2 + *(int *)(v3 + 24));
  uint64_t v48 = (char *)a1 + v46;
  uint64_t v49 = (char *)a2 + v46;
  *(void *)((char *)a1 + v46) = *(void *)((char *)a2 + v46);
  char v50 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v51 = v50[5];
  long long v52 = &v48[v51];
  uint64_t v53 = &v49[v51];
  uint64_t v54 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v104 = *((void *)v54 - 1);
  char v55 = *(unsigned int (**)(char *, uint64_t, int *))(v104 + 48);
  swift_bridgeObjectRetain();
  if (v55(v53, 1, v54))
  {
    sub_25102E980(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    uint64_t v57 = sub_251037400();
    long long v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
    v58(v52, v53, v57);
    uint64_t v59 = v54[5];
    long long v60 = &v52[v59];
    uint64_t v61 = &v53[v59];
    v58(&v52[v59], &v53[v59], v57);
    sub_250F26E08();
    v58(&v60[*(int *)(v62 + 36)], &v61[*(int *)(v62 + 36)], v57);
    char v63 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v60[v63[5]] = *(void *)&v61[v63[5]];
    *(void *)&v60[v63[6]] = *(void *)&v61[v63[6]];
    *(void *)&v60[v63[7]] = *(void *)&v61[v63[7]];
    uint64_t v64 = v54[6];
    long long v65 = &v52[v64];
    uint64_t v66 = &v53[v64];
    *(_OWORD *)long long v65 = *(_OWORD *)v66;
    v65[16] = v66[16];
    v52[v54[7]] = v53[v54[7]];
    v52[v54[8]] = v53[v54[8]];
    v52[v54[9]] = v53[v54[9]];
    uint64_t v67 = v54[10];
    uint64_t v68 = &v52[v67];
    uint64_t v69 = &v53[v67];
    uint64_t v70 = *((void *)v69 + 1);
    *(void *)uint64_t v68 = *(void *)v69;
    *((void *)v68 + 1) = v70;
    uint64_t v71 = v54[11];
    uint64_t v72 = &v52[v71];
    uint64_t v73 = &v53[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v105 = *(void (**)(char *, void, uint64_t, int *))(v104 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v105(v52, 0, 1, v54);
    char v47 = a2;
  }
  *(_OWORD *)&v48[v50[6]] = *(_OWORD *)&v49[v50[6]];
  uint64_t v75 = v50[7];
  uint64_t v76 = &v48[v75];
  uint64_t v77 = &v49[v75];
  long long v78 = *((_OWORD *)v77 + 1);
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
  *((_OWORD *)v76 + 1) = v78;
  *((void *)v76 + 10) = *((void *)v77 + 10);
  long long v79 = *((_OWORD *)v77 + 4);
  long long v80 = *((_OWORD *)v77 + 2);
  *((_OWORD *)v76 + 3) = *((_OWORD *)v77 + 3);
  *((_OWORD *)v76 + 4) = v79;
  *((_OWORD *)v76 + 2) = v80;
  *(void *)&v48[v50[8]] = *(void *)&v49[v50[8]];
  *(void *)&v48[v50[9]] = *(void *)&v49[v50[9]];
  uint64_t v81 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v82 = &v48[v81];
  long long v83 = &v49[v81];
  uint64_t v84 = *((void *)v83 + 1);
  *(void *)uint64_t v82 = *(void *)v83;
  *((void *)v82 + 1) = v84;
  uint64_t v85 = *((void *)v83 + 3);
  *((void *)v82 + 2) = *((void *)v83 + 2);
  *((void *)v82 + 3) = v85;
  *((void *)v82 + 4) = *((void *)v83 + 4);
  *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
  *(_OWORD *)(v82 + 56) = *(_OWORD *)(v83 + 56);
  *(_OWORD *)(v82 + 72) = *(_OWORD *)(v83 + 72);
  *(_OWORD *)(v82 + 88) = *(_OWORD *)(v83 + 88);
  *(_OWORD *)(v82 + 104) = *(_OWORD *)(v83 + 104);
  uint64_t v86 = *(int *)(v106 + 32);
  uint64_t v87 = (char *)a1 + v86;
  uint64_t v88 = (char *)v47 + v86;
  uint64_t v89 = *(void *)((char *)v47 + v86);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v89)
  {
    uint64_t v90 = *((void *)v88 + 1);
    uint64_t v91 = *((void *)v88 + 2);
    *(void *)uint64_t v87 = v89;
    *((void *)v87 + 1) = v90;
    *((void *)v87 + 2) = v91;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
    *((void *)v87 + 2) = *((void *)v88 + 2);
  }
  v87[24] = v88[24];
  v87[32] = v88[32];
  uint64_t v92 = *((void *)v88 + 6);
  *((void *)v87 + 5) = *((void *)v88 + 5);
  *((void *)v87 + 6) = v92;
  v87[56] = v88[56];
  uint64_t v93 = *((void *)v88 + 9);
  *((void *)v87 + 8) = *((void *)v88 + 8);
  *((void *)v87 + 9) = v93;
  *((void *)v87 + 10) = *((void *)v88 + 10);
  long long v94 = *(_OWORD *)(v88 + 88);
  *(_OWORD *)(v87 + 104) = *(_OWORD *)(v88 + 104);
  *(_OWORD *)(v87 + 88) = v94;
  long long v95 = *(_OWORD *)(v88 + 120);
  long long v96 = *(_OWORD *)(v88 + 136);
  *(_OWORD *)(v87 + 152) = *(_OWORD *)(v88 + 152);
  *(_OWORD *)(v87 + 136) = v96;
  *(_OWORD *)(v87 + 120) = v95;
  uint64_t v97 = *((void *)v88 + 22);
  *((void *)v87 + 21) = *((void *)v88 + 21);
  *((void *)v87 + 22) = v97;
  uint64_t v99 = *((void *)v88 + 23);
  uint64_t v98 = *((void *)v88 + 24);
  v87[200] = v88[200];
  *((void *)v87 + 23) = v99;
  *((void *)v87 + 24) = v98;
  v87[201] = v88[201];
  uint64_t v100 = *((void *)v88 + 27);
  *((void *)v87 + 26) = *((void *)v88 + 26);
  *((void *)v87 + 27) = v100;
  uint64_t v101 = *((void *)v88 + 29);
  *((void *)v87 + 28) = *((void *)v88 + 28);
  *((void *)v87 + 29) = v101;
  *((void *)v87 + 30) = *((void *)v88 + 30);
  v87[248] = v88[248];
  uint64_t v102 = *((void *)v88 + 33);
  *((void *)v87 + 32) = *((void *)v88 + 32);
  *((void *)v87 + 33) = v102;
  *((void *)v87 + 34) = *((void *)v88 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_25102A334(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v161 = a3;
  uint64_t v162 = v4;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037740();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      uint64_t v15 = v9[5];
      uint64_t v16 = &v7[v15];
      uint64_t v17 = &v8[v15];
      uint64_t v18 = sub_251037400();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      uint64_t v20 = v9[6];
      uint64_t v21 = &v7[v20];
      uint64_t v22 = &v8[v20];
      v19(&v7[v20], &v8[v20], v18);
      sub_250F26E08();
      uint64_t v157 = v5;
      uint64_t v24 = v23;
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
      uint64_t v25 = v9[7];
      uint64_t v26 = &v7[v25];
      uint64_t v27 = &v8[v25];
      v19(&v7[v25], &v8[v25], v18);
      uint64_t v28 = *(int *)(v24 + 36);
      uint64_t v5 = v157;
      uint64_t v29 = v18;
      a3 = v161;
      v19(&v26[v28], &v27[v28], v29);
      uint64_t v30 = v9[8];
      uint64_t v31 = &v7[v30];
      uint64_t v32 = &v8[v30];
      char v33 = v32[8];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v33;
      uint64_t v34 = v9[9];
      double v35 = &v7[v34];
      uint64_t v36 = &v8[v34];
      uint64_t v37 = sub_2510378C0();
      uint64_t v38 = v36;
      uint64_t v4 = v162;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v38, v37);
      uint64_t v39 = v9[10];
      uint64_t v40 = &v7[v39];
      uint64_t v41 = &v8[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = *((void *)v41 + 1);
      uint64_t v42 = v9[11];
      uint64_t v43 = &v7[v42];
      uint64_t v44 = &v8[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      uint64_t v45 = v9[12];
      uint64_t v46 = &v7[v45];
      char v47 = &v8[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = *((void *)v47 + 1);
      uint64_t v48 = *(void (**)(char *, void, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_25102F17C((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
LABEL_6:
    sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v94 = sub_251037740();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 24))(v7, v8, v94);
  uint64_t v95 = v9[5];
  long long v96 = &v7[v95];
  uint64_t v97 = &v8[v95];
  uint64_t v98 = sub_251037400();
  uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 24);
  v99(v96, v97, v98);
  uint64_t v100 = v9[6];
  uint64_t v101 = &v7[v100];
  uint64_t v102 = &v8[v100];
  v99(&v7[v100], &v8[v100], v98);
  sub_250F26E08();
  uint64_t v103 = v5;
  uint64_t v105 = v104;
  v99(&v101[*(int *)(v104 + 36)], &v102[*(int *)(v104 + 36)], v98);
  uint64_t v106 = v9[7];
  uint64_t v107 = &v7[v106];
  uint64_t v108 = &v8[v106];
  v99(&v7[v106], &v8[v106], v98);
  uint64_t v109 = *(int *)(v105 + 36);
  uint64_t v5 = v103;
  uint64_t v110 = v98;
  a3 = v161;
  v99(&v107[v109], &v108[v109], v110);
  uint64_t v111 = v9[8];
  uint64_t v112 = &v7[v111];
  uint64_t v113 = &v8[v111];
  char v114 = v113[8];
  *(void *)uint64_t v112 = *(void *)v113;
  v112[8] = v114;
  uint64_t v115 = v9[9];
  uint64_t v116 = &v7[v115];
  uint64_t v117 = &v8[v115];
  uint64_t v118 = sub_2510378C0();
  uint64_t v119 = v117;
  uint64_t v4 = v162;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 24))(v116, v119, v118);
  uint64_t v120 = v9[10];
  uint64_t v121 = &v7[v120];
  uint64_t v122 = &v8[v120];
  *(void *)uint64_t v121 = *(void *)v122;
  *((void *)v121 + 1) = *((void *)v122 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v123 = v9[11];
  uint64_t v124 = &v7[v123];
  uint64_t v125 = &v8[v123];
  *(void *)uint64_t v124 = *(void *)v125;
  *((void *)v124 + 1) = *((void *)v125 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v126 = v9[12];
  uint64_t v127 = &v7[v126];
  uint64_t v128 = &v8[v126];
  *(void *)uint64_t v127 = *(void *)v128;
  *((void *)v127 + 1) = *((void *)v128 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  *(void *)((char *)v5 + a3[6]) = *(void *)((char *)v4 + a3[6]);
  uint64_t v50 = a3[7];
  uint64_t v51 = (char *)v5 + v50;
  long long v52 = (char *)v4 + v50;
  *(void *)((char *)v5 + v50) = *(void *)((char *)v4 + v50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v54 = v53[5];
  char v55 = &v51[v54];
  uint64_t v56 = &v52[v54];
  uint64_t v57 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v159 = *((void *)v57 - 1);
  long long v58 = *(uint64_t (**)(char *, uint64_t, int *))(v159 + 48);
  int v59 = v58(v55, 1, v57);
  int v60 = v58(v56, 1, v57);
  if (v59)
  {
    if (!v60)
    {
      uint64_t v61 = sub_251037400();
      uint64_t v155 = v53;
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
      v62(v55, v56, v61);
      uint64_t v63 = v57[5];
      uint64_t v64 = &v55[v63];
      long long v65 = &v56[v63];
      v62(&v55[v63], &v56[v63], v61);
      sub_250F26E08();
      v62(&v64[*(int *)(v66 + 36)], &v65[*(int *)(v66 + 36)], v61);
      uint64_t v67 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v64[v67[5]] = *(void *)&v65[v67[5]];
      *(void *)&v64[v67[6]] = *(void *)&v65[v67[6]];
      *(void *)&v64[v67[7]] = *(void *)&v65[v67[7]];
      uint64_t v68 = v57[6];
      uint64_t v69 = &v55[v68];
      uint64_t v70 = &v56[v68];
      char v71 = v70[16];
      *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
      v69[16] = v71;
      v55[v57[7]] = v56[v57[7]];
      v55[v57[8]] = v56[v57[8]];
      v55[v57[9]] = v56[v57[9]];
      uint64_t v72 = v57[10];
      uint64_t v73 = &v55[v72];
      uint64_t v74 = &v56[v72];
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = *((void *)v74 + 1);
      uint64_t v75 = v57[11];
      uint64_t v76 = &v55[v75];
      uint64_t v77 = &v56[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      *((void *)v76 + 1) = *((void *)v77 + 1);
      uint64_t v160 = *(void (**)(char *, void, uint64_t, int *))(v159 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v160(v55, 0, 1, v57);
      uint64_t v53 = v155;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v60)
  {
    sub_25102F17C((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_25102E980(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v129 = sub_251037400();
  uint64_t v130 = *(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 24);
  v130(v55, v56, v129);
  uint64_t v131 = v130;
  uint64_t v132 = v57[5];
  uint64_t v133 = &v55[v132];
  uint64_t v156 = v53;
  uint64_t v158 = v5;
  uint64_t v134 = &v56[v132];
  uint64_t v135 = v131;
  v131(&v55[v132], &v56[v132], v129);
  sub_250F26E08();
  v135(&v133[*(int *)(v136 + 36)], &v134[*(int *)(v136 + 36)], v129);
  uint64_t v137 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v133[v137[5]] = *(void *)&v134[v137[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v133[v137[6]] = *(void *)&v134[v137[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v138 = v137[7];
  uint64_t v139 = *(void *)&v134[v138];
  uint64_t v53 = v156;
  uint64_t v5 = v158;
  *(void *)&v133[v138] = v139;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v140 = v57[6];
  uint64_t v141 = &v55[v140];
  uint64_t v142 = &v56[v140];
  long long v143 = *(_OWORD *)v142;
  v141[16] = v142[16];
  *(_OWORD *)uint64_t v141 = v143;
  v55[v57[7]] = v56[v57[7]];
  v55[v57[8]] = v56[v57[8]];
  v55[v57[9]] = v56[v57[9]];
  uint64_t v144 = v57[10];
  uint64_t v145 = &v55[v144];
  uint64_t v146 = &v56[v144];
  *(void *)uint64_t v145 = *(void *)v146;
  *((void *)v145 + 1) = *((void *)v146 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v147 = v57[11];
  uint64_t v148 = &v55[v147];
  uint64_t v149 = &v56[v147];
  *(void *)uint64_t v148 = *(void *)v149;
  *((void *)v148 + 1) = *((void *)v149 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v79 = v53[6];
  long long v80 = &v51[v79];
  uint64_t v81 = &v52[v79];
  *(void *)long long v80 = *(void *)v81;
  *((void *)v80 + 1) = *((void *)v81 + 1);
  uint64_t v82 = v53[7];
  long long v83 = &v51[v82];
  uint64_t v84 = &v52[v82];
  *(void *)long long v83 = *(void *)v84;
  uint64_t v85 = *((void *)v84 + 1);
  v83[16] = v84[16];
  *((void *)v83 + 1) = v85;
  *((void *)v83 + 3) = *((void *)v84 + 3);
  *((void *)v83 + 4) = *((void *)v84 + 4);
  *((void *)v83 + 5) = *((void *)v84 + 5);
  *((void *)v83 + 6) = *((void *)v84 + 6);
  *((void *)v83 + 7) = *((void *)v84 + 7);
  *((void *)v83 + 8) = *((void *)v84 + 8);
  *((void *)v83 + 9) = *((void *)v84 + 9);
  *((void *)v83 + 10) = *((void *)v84 + 10);
  *(void *)&v51[v53[8]] = *(void *)&v52[v53[8]];
  *(void *)&v51[v53[9]] = *(void *)&v52[v53[9]];
  uint64_t v86 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v87 = &v51[v86];
  uint64_t v88 = &v52[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 1) = *((void *)v88 + 1);
  *((void *)v87 + 2) = *((void *)v88 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 3) = *((void *)v88 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 4) = *((void *)v88 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v87 + 5) = *((void *)v88 + 5);
  *((void *)v87 + 6) = *((void *)v88 + 6);
  *((void *)v87 + 7) = *((void *)v88 + 7);
  *((void *)v87 + 8) = *((void *)v88 + 8);
  *((void *)v87 + 9) = *((void *)v88 + 9);
  *((void *)v87 + 10) = *((void *)v88 + 10);
  *((void *)v87 + 11) = *((void *)v88 + 11);
  *((void *)v87 + 12) = *((void *)v88 + 12);
  *((void *)v87 + 13) = *((void *)v88 + 13);
  *((void *)v87 + 14) = *((void *)v88 + 14);
  uint64_t v89 = v161[8];
  uint64_t v90 = (char *)v5 + v89;
  uint64_t v91 = (long long *)((char *)v162 + v89);
  uint64_t v92 = *(void *)((char *)v162 + v89);
  if (*(void *)((char *)v5 + v89))
  {
    if (v92)
    {
      *(void *)uint64_t v90 = v92;
      swift_retain();
      swift_release();
      *((void *)v90 + 1) = *((void *)v91 + 1);
      swift_retain();
      swift_release();
      *((void *)v90 + 2) = *((void *)v91 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80((uint64_t)v5 + v89);
      uint64_t v93 = *((void *)v91 + 2);
      *(_OWORD *)uint64_t v90 = *v91;
      *((void *)v90 + 2) = v93;
    }
  }
  else if (v92)
  {
    *(void *)uint64_t v90 = v92;
    *((void *)v90 + 1) = *((void *)v91 + 1);
    *((void *)v90 + 2) = *((void *)v91 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v150 = *v91;
    *((void *)v90 + 2) = *((void *)v91 + 2);
    *(_OWORD *)uint64_t v90 = v150;
  }
  v90[24] = *((unsigned char *)v91 + 24);
  v90[32] = *((unsigned char *)v91 + 32);
  *((void *)v90 + 5) = *((void *)v91 + 5);
  swift_retain();
  swift_release();
  uint64_t v151 = *((void *)v91 + 6);
  v90[56] = *((unsigned char *)v91 + 56);
  *((void *)v90 + 6) = v151;
  *((void *)v90 + 8) = *((void *)v91 + 8);
  *((void *)v90 + 9) = *((void *)v91 + 9);
  swift_retain();
  swift_release();
  *((void *)v90 + 10) = *((void *)v91 + 10);
  swift_retain();
  swift_release();
  *((void *)v90 + 11) = *((void *)v91 + 11);
  uint64_t v152 = *((void *)v91 + 12);
  v90[104] = *((unsigned char *)v91 + 104);
  *((void *)v90 + 12) = v152;
  *((void *)v90 + 14) = *((void *)v91 + 14);
  *((void *)v90 + 15) = *((void *)v91 + 15);
  *((void *)v90 + 16) = *((void *)v91 + 16);
  *((void *)v90 + 17) = *((void *)v91 + 17);
  *((void *)v90 + 18) = *((void *)v91 + 18);
  *((void *)v90 + 19) = *((void *)v91 + 19);
  *((void *)v90 + 20) = *((void *)v91 + 20);
  *((void *)v90 + 21) = *((void *)v91 + 21);
  *((void *)v90 + 22) = *((void *)v91 + 22);
  swift_retain();
  swift_release();
  *((void *)v90 + 23) = *((void *)v91 + 23);
  swift_retain();
  swift_release();
  uint64_t v153 = *((void *)v91 + 24);
  v90[200] = *((unsigned char *)v91 + 200);
  *((void *)v90 + 24) = v153;
  v90[201] = *((unsigned char *)v91 + 201);
  *((void *)v90 + 26) = *((void *)v91 + 26);
  swift_retain();
  swift_release();
  *((void *)v90 + 27) = *((void *)v91 + 27);
  swift_retain();
  swift_release();
  *((void *)v90 + 28) = *((void *)v91 + 28);
  swift_retain();
  swift_release();
  *((void *)v90 + 29) = *((void *)v91 + 29);
  swift_retain();
  swift_release();
  *((void *)v90 + 30) = *((void *)v91 + 30);
  swift_retain();
  swift_release();
  v90[248] = *((unsigned char *)v91 + 248);
  *((void *)v90 + 32) = *((void *)v91 + 32);
  swift_retain();
  swift_release();
  *((void *)v90 + 33) = *((void *)v91 + 33);
  swift_retain();
  swift_release();
  *((void *)v90 + 34) = *((void *)v91 + 34);
  return v5;
}

void *sub_25102B118(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v9 = *((void *)v8 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_251037740();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v6, v7, v11);
    uint64_t v12 = v8[5];
    int v13 = &v6[v12];
    uint64_t v69 = v3;
    uint64_t v14 = &v7[v12];
    uint64_t v15 = sub_251037400();
    char v71 = v4;
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
    v16(v13, v14, v15);
    uint64_t v17 = v8[6];
    uint64_t v18 = &v6[v17];
    uint64_t v19 = &v7[v17];
    v16(&v6[v17], &v7[v17], v15);
    sub_250F26E08();
    uint64_t v21 = v20;
    v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v15);
    uint64_t v22 = v8[7];
    uint64_t v23 = &v6[v22];
    uint64_t v24 = &v7[v22];
    v16(&v6[v22], &v7[v22], v15);
    v16(&v23[*(int *)(v21 + 36)], &v24[*(int *)(v21 + 36)], v15);
    uint64_t v4 = v71;
    uint64_t v25 = v8[8];
    uint64_t v26 = &v6[v25];
    uint64_t v27 = &v7[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = v8[9];
    uint64_t v29 = &v6[v28];
    uint64_t v30 = &v7[v28];
    uint64_t v31 = sub_2510378C0();
    uint64_t v32 = v30;
    uint64_t v3 = v69;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v32, v31);
    *(_OWORD *)&v6[v8[10]] = *(_OWORD *)&v7[v8[10]];
    *(_OWORD *)&v6[v8[11]] = *(_OWORD *)&v7[v8[11]];
    *(_OWORD *)&v6[v8[12]] = *(_OWORD *)&v7[v8[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v33 = a3[7];
  *(void *)((char *)v4 + a3[6]) = *(void *)((char *)v3 + a3[6]);
  uint64_t v34 = (char *)v4 + v33;
  double v35 = (char *)v3 + v33;
  *(void *)((char *)v4 + v33) = *(void *)((char *)v3 + v33);
  uint64_t v36 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v37 = v36[5];
  uint64_t v38 = &v34[v37];
  uint64_t v39 = &v35[v37];
  uint64_t v40 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    sub_25102E980(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v70 = v3;
    uint64_t v43 = sub_251037400();
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
    uint64_t v72 = v4;
    v44(v38, v39, v43);
    uint64_t v68 = v41;
    uint64_t v45 = v44;
    uint64_t v46 = v40[5];
    char v47 = &v38[v46];
    uint64_t v48 = &v39[v46];
    v45(&v38[v46], &v39[v46], v43);
    sub_250F26E08();
    uint64_t v50 = v43;
    uint64_t v3 = v70;
    v45(&v47[*(int *)(v49 + 36)], &v48[*(int *)(v49 + 36)], v50);
    uint64_t v4 = v72;
    uint64_t v51 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v47[v51[5]] = *(void *)&v48[v51[5]];
    *(void *)&v47[v51[6]] = *(void *)&v48[v51[6]];
    *(void *)&v47[v51[7]] = *(void *)&v48[v51[7]];
    uint64_t v52 = v40[6];
    uint64_t v53 = &v38[v52];
    uint64_t v54 = &v39[v52];
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    v53[16] = v54[16];
    v38[v40[7]] = v39[v40[7]];
    v38[v40[8]] = v39[v40[8]];
    v38[v40[9]] = v39[v40[9]];
    *(_OWORD *)&v38[v40[10]] = *(_OWORD *)&v39[v40[10]];
    *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v68 + 56))(v38, 0, 1, v40);
  }
  *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
  uint64_t v55 = v36[7];
  uint64_t v56 = &v34[v55];
  uint64_t v57 = &v35[v55];
  long long v58 = *((_OWORD *)v57 + 1);
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *((_OWORD *)v56 + 1) = v58;
  *((void *)v56 + 10) = *((void *)v57 + 10);
  long long v59 = *((_OWORD *)v57 + 4);
  long long v60 = *((_OWORD *)v57 + 2);
  *((_OWORD *)v56 + 3) = *((_OWORD *)v57 + 3);
  *((_OWORD *)v56 + 4) = v59;
  *((_OWORD *)v56 + 2) = v60;
  *(void *)&v34[v36[8]] = *(void *)&v35[v36[8]];
  *(void *)&v34[v36[9]] = *(void *)&v35[v36[9]];
  uint64_t v61 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v62 = &v34[v61];
  uint64_t v63 = &v35[v61];
  long long v64 = *((_OWORD *)v63 + 5);
  *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
  *((_OWORD *)v62 + 5) = v64;
  *((_OWORD *)v62 + 6) = *((_OWORD *)v63 + 6);
  *((void *)v62 + 14) = *((void *)v63 + 14);
  long long v65 = *((_OWORD *)v63 + 1);
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
  *((_OWORD *)v62 + 1) = v65;
  long long v66 = *((_OWORD *)v63 + 3);
  *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
  *((_OWORD *)v62 + 3) = v66;
  memcpy((char *)v4 + a3[8], (char *)v3 + a3[8], 0x118uLL);
  return v4;
}

void *sub_25102B6E8(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v137 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v135 = a3;
  uint64_t v136 = v4;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037740();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v7, v8, v14);
      uint64_t v15 = v9[5];
      uint64_t v16 = &v7[v15];
      uint64_t v17 = &v8[v15];
      uint64_t v18 = sub_251037400();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
      v19(v16, v17, v18);
      uint64_t v20 = v9[6];
      uint64_t v21 = &v7[v20];
      uint64_t v22 = &v8[v20];
      v19(&v7[v20], &v8[v20], v18);
      sub_250F26E08();
      uint64_t v24 = v23;
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
      uint64_t v25 = v9[7];
      uint64_t v26 = &v7[v25];
      uint64_t v27 = &v8[v25];
      v19(&v7[v25], &v8[v25], v18);
      uint64_t v28 = v18;
      a3 = v135;
      v19(&v26[*(int *)(v24 + 36)], &v27[*(int *)(v24 + 36)], v28);
      uint64_t v29 = v9[8];
      uint64_t v30 = &v7[v29];
      uint64_t v31 = &v8[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      uint64_t v32 = v9[9];
      uint64_t v33 = &v7[v32];
      uint64_t v34 = &v8[v32];
      uint64_t v35 = sub_2510378C0();
      uint64_t v36 = v34;
      uint64_t v4 = v136;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v36, v35);
      *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
      *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
      *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
      (*(void (**)(char *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_25102F17C((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
LABEL_6:
    sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v74 = sub_251037740();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 40))(v7, v8, v74);
  uint64_t v75 = v9[5];
  uint64_t v76 = &v7[v75];
  uint64_t v77 = &v8[v75];
  uint64_t v78 = a3;
  uint64_t v79 = sub_251037400();
  long long v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 40);
  v80(v76, v77, v79);
  uint64_t v81 = v9[6];
  uint64_t v82 = &v7[v81];
  long long v83 = &v8[v81];
  v80(&v7[v81], &v8[v81], v79);
  sub_250F26E08();
  uint64_t v85 = v84;
  v80(&v82[*(int *)(v84 + 36)], &v83[*(int *)(v84 + 36)], v79);
  uint64_t v86 = v9[7];
  uint64_t v87 = &v7[v86];
  uint64_t v88 = &v8[v86];
  v80(&v7[v86], &v8[v86], v79);
  uint64_t v89 = v79;
  a3 = v78;
  v80(&v87[*(int *)(v85 + 36)], &v88[*(int *)(v85 + 36)], v89);
  uint64_t v90 = v9[8];
  uint64_t v91 = &v7[v90];
  uint64_t v92 = &v8[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  v91[8] = v92[8];
  uint64_t v93 = v9[9];
  uint64_t v94 = &v7[v93];
  uint64_t v95 = &v8[v93];
  uint64_t v96 = sub_2510378C0();
  uint64_t v97 = v95;
  uint64_t v4 = v136;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 40))(v94, v97, v96);
  uint64_t v98 = v9[10];
  uint64_t v99 = &v7[v98];
  uint64_t v100 = &v8[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease();
  uint64_t v103 = v9[11];
  uint64_t v104 = &v7[v103];
  uint64_t v105 = &v8[v103];
  uint64_t v107 = *(void *)v105;
  uint64_t v106 = *((void *)v105 + 1);
  *(void *)uint64_t v104 = v107;
  *((void *)v104 + 1) = v106;
  swift_bridgeObjectRelease();
  uint64_t v108 = v9[12];
  uint64_t v109 = &v7[v108];
  uint64_t v110 = &v8[v108];
  uint64_t v112 = *(void *)v110;
  uint64_t v111 = *((void *)v110 + 1);
  *(void *)uint64_t v109 = v112;
  *((void *)v109 + 1) = v111;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v38 = a3[7];
  uint64_t v39 = v137;
  *(void *)((char *)v137 + a3[6]) = *(void *)((char *)v4 + a3[6]);
  uint64_t v40 = (char *)v137 + v38;
  uint64_t v41 = (char *)v4 + v38;
  *(void *)((char *)v137 + v38) = *(void *)((char *)v4 + v38);
  swift_bridgeObjectRelease();
  uint64_t v134 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v42 = v134[5];
  uint64_t v43 = &v40[v42];
  uint64_t v44 = &v41[v42];
  uint64_t v45 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v46 = *((void *)v45 - 1);
  char v47 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      uint64_t v50 = sub_251037400();
      uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32);
      v51(v43, v44, v50);
      uint64_t v52 = v51;
      uint64_t v53 = v45[5];
      uint64_t v54 = &v43[v53];
      uint64_t v55 = &v44[v53];
      v52(&v43[v53], &v44[v53], v50);
      sub_250F26E08();
      v52(&v54[*(int *)(v56 + 36)], &v55[*(int *)(v56 + 36)], v50);
      uint64_t v39 = v137;
      uint64_t v57 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v54[v57[5]] = *(void *)&v55[v57[5]];
      *(void *)&v54[v57[6]] = *(void *)&v55[v57[6]];
      *(void *)&v54[v57[7]] = *(void *)&v55[v57[7]];
      uint64_t v58 = v45[6];
      long long v59 = &v43[v58];
      long long v60 = &v44[v58];
      *(_OWORD *)long long v59 = *(_OWORD *)v60;
      v59[16] = v60[16];
      v43[v45[7]] = v44[v45[7]];
      v43[v45[8]] = v44[v45[8]];
      v43[v45[9]] = v44[v45[9]];
      *(_OWORD *)&v43[v45[10]] = *(_OWORD *)&v44[v45[10]];
      *(_OWORD *)&v43[v45[11]] = *(_OWORD *)&v44[v45[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v49)
  {
    sub_25102F17C((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_25102E980(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v113 = sub_251037400();
  char v114 = *(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 40);
  v114(v43, v44, v113);
  uint64_t v115 = v114;
  uint64_t v116 = v45[5];
  uint64_t v117 = &v43[v116];
  uint64_t v118 = &v44[v116];
  v115(&v43[v116], &v44[v116], v113);
  sub_250F26E08();
  v115(&v117[*(int *)(v119 + 36)], &v118[*(int *)(v119 + 36)], v113);
  uint64_t v39 = v137;
  uint64_t v120 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v117[v120[5]] = *(void *)&v118[v120[5]];
  swift_bridgeObjectRelease();
  *(void *)&v117[v120[6]] = *(void *)&v118[v120[6]];
  swift_bridgeObjectRelease();
  *(void *)&v117[v120[7]] = *(void *)&v118[v120[7]];
  swift_bridgeObjectRelease();
  uint64_t v121 = v45[6];
  uint64_t v122 = &v43[v121];
  uint64_t v123 = &v44[v121];
  *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
  v122[16] = v123[16];
  v43[v45[7]] = v44[v45[7]];
  v43[v45[8]] = v44[v45[8]];
  v43[v45[9]] = v44[v45[9]];
  uint64_t v124 = v45[10];
  uint64_t v125 = &v43[v124];
  uint64_t v126 = (uint64_t *)&v44[v124];
  uint64_t v128 = *v126;
  uint64_t v127 = v126[1];
  *(void *)uint64_t v125 = v128;
  *((void *)v125 + 1) = v127;
  swift_bridgeObjectRelease();
  uint64_t v129 = v45[11];
  uint64_t v130 = &v43[v129];
  uint64_t v131 = (uint64_t *)&v44[v129];
  uint64_t v133 = *v131;
  uint64_t v132 = v131[1];
  *(void *)uint64_t v130 = v133;
  *((void *)v130 + 1) = v132;
  swift_bridgeObjectRelease();
LABEL_13:
  *(_OWORD *)&v40[v134[6]] = *(_OWORD *)&v41[v134[6]];
  uint64_t v62 = v134[7];
  uint64_t v63 = &v40[v62];
  long long v64 = &v41[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  v63[16] = v64[16];
  *(_OWORD *)(v63 + 24) = *(_OWORD *)(v64 + 24);
  *(_OWORD *)(v63 + 40) = *(_OWORD *)(v64 + 40);
  *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
  *(_OWORD *)(v63 + 72) = *(_OWORD *)(v64 + 72);
  *(void *)&v40[v134[8]] = *(void *)&v41[v134[8]];
  *(void *)&v40[v134[9]] = *(void *)&v41[v134[9]];
  uint64_t v65 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  long long v66 = &v40[v65];
  uint64_t v67 = &v41[v65];
  *(void *)&v40[v65] = *(void *)v67;
  swift_bridgeObjectRelease();
  *((void *)v66 + 1) = *((void *)v67 + 1);
  *((void *)v66 + 2) = *((void *)v67 + 2);
  swift_bridgeObjectRelease();
  *((void *)v66 + 3) = *((void *)v67 + 3);
  swift_bridgeObjectRelease();
  *((void *)v66 + 4) = *((void *)v67 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
  *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
  *(_OWORD *)(v66 + 72) = *(_OWORD *)(v67 + 72);
  *(_OWORD *)(v66 + 88) = *(_OWORD *)(v67 + 88);
  *(_OWORD *)(v66 + 104) = *(_OWORD *)(v67 + 104);
  uint64_t v68 = v135[8];
  uint64_t v69 = (uint64_t)v39 + v68;
  uint64_t v70 = (uint64_t)v136 + v68;
  if (!*(void *)((char *)v39 + v68))
  {
LABEL_17:
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
    *(void *)(v69 + 16) = *(void *)(v70 + 16);
    goto LABEL_18;
  }
  if (!*(void *)v70)
  {
    sub_250F27E80(v69);
    goto LABEL_17;
  }
  *(void *)uint64_t v69 = *(void *)v70;
  swift_release();
  *(void *)(v69 + 8) = *(void *)(v70 + 8);
  swift_release();
  *(void *)(v69 + 16) = *(void *)(v70 + 16);
  swift_release();
LABEL_18:
  *(unsigned char *)(v69 + 24) = *(unsigned char *)(v70 + 24);
  *(unsigned char *)(v69 + 32) = *(unsigned char *)(v70 + 32);
  *(void *)(v69 + 40) = *(void *)(v70 + 40);
  swift_release();
  *(void *)(v69 + 48) = *(void *)(v70 + 48);
  *(unsigned char *)(v69 + 56) = *(unsigned char *)(v70 + 56);
  *(void *)(v69 + 64) = *(void *)(v70 + 64);
  *(void *)(v69 + 72) = *(void *)(v70 + 72);
  swift_release();
  *(void *)(v69 + 80) = *(void *)(v70 + 80);
  swift_release();
  *(void *)(v69 + 88) = *(void *)(v70 + 88);
  *(void *)(v69 + 96) = *(void *)(v70 + 96);
  *(unsigned char *)(v69 + 104) = *(unsigned char *)(v70 + 104);
  long long v71 = *(_OWORD *)(v70 + 128);
  *(_OWORD *)(v69 + 112) = *(_OWORD *)(v70 + 112);
  *(_OWORD *)(v69 + 128) = v71;
  long long v72 = *(_OWORD *)(v70 + 160);
  *(_OWORD *)(v69 + 144) = *(_OWORD *)(v70 + 144);
  *(_OWORD *)(v69 + 160) = v72;
  *(void *)(v69 + 176) = *(void *)(v70 + 176);
  swift_release();
  *(void *)(v69 + 184) = *(void *)(v70 + 184);
  swift_release();
  *(void *)(v69 + 192) = *(void *)(v70 + 192);
  *(unsigned char *)(v69 + 200) = *(unsigned char *)(v70 + 200);
  *(unsigned char *)(v69 + 201) = *(unsigned char *)(v70 + 201);
  *(void *)(v69 + 208) = *(void *)(v70 + 208);
  swift_release();
  *(void *)(v69 + 216) = *(void *)(v70 + 216);
  swift_release();
  *(void *)(v69 + 224) = *(void *)(v70 + 224);
  swift_release();
  *(void *)(v69 + 232) = *(void *)(v70 + 232);
  swift_release();
  *(void *)(v69 + 240) = *(void *)(v70 + 240);
  swift_release();
  *(unsigned char *)(v69 + 248) = *(unsigned char *)(v70 + 248);
  *(void *)(v69 + 256) = *(void *)(v70 + 256);
  swift_release();
  *(void *)(v69 + 264) = *(void *)(v70 + 264);
  swift_release();
  *(void *)(v69 + 272) = *(void *)(v70 + 272);
  return v39;
}

uint64_t sub_25102C250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25102C264);
}

uint64_t sub_25102C264(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OvernightMetricsChartLayout(0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_25102C3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25102C3D4);
}

void *sub_25102C3D4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OvernightMetricsChartLayout(0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for SingleMetricMinorPointMarks()
{
  uint64_t result = qword_269B14B30;
  if (!qword_269B14B30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_25102C57C()
{
  sub_25102E980(319, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartLayout(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_25102C698()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_25102C6B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a3;
  sub_25102E3F4();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = type metadata accessor for SingleMetricMinorPointMarks();
  sub_250F4E53C(a2 + *(int *)(v18 + 20), (uint64_t)v10);
  sub_25102F114(a1, (uint64_t)v14, type metadata accessor for IndividualOvernightMetricChartPoint);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_25102F0AC((uint64_t)v14, (uint64_t)v17, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_250FD529C((uint64_t)v10);
  }
  else
  {
    sub_25102F17C((uint64_t)v14, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_25102F0AC((uint64_t)v10, (uint64_t)v17, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  uint64_t v19 = &v17[*(int *)(v11 + 32)];
  if (v19[8])
  {
    sub_25102E880(0, &qword_269B14BD8, (uint64_t (*)(uint64_t))sub_25102E3F4, MEMORY[0x263EFCB18], MEMORY[0x263EFCC88]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    double v20 = *(double *)v19;
    memcpy(v28, (const void *)(a2 + *(int *)(v18 + 32)), 0x118uLL);
    sub_25102CA90((uint64_t)v17, v28, (uint64_t)v7, v20);
    uint64_t v22 = v25;
    uint64_t v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v27, v7, v26);
    sub_25102E880(0, &qword_269B14BD8, (uint64_t (*)(uint64_t))sub_25102E3F4, MEMORY[0x263EFCB18], MEMORY[0x263EFCC88]);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  }
  return sub_25102F17C((uint64_t)v17, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_25102CA90@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v96 = a1;
  uint64_t v93 = a3;
  sub_25102EFB8(0, (unint64_t *)&qword_269B13488, MEMORY[0x263F8D538], MEMORY[0x263EFCE78], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v84 = (char *)&v71 - v8;
  sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v87 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v71 - v12;
  sub_250F26E08();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v75 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102E880(0, (unint64_t *)&qword_269B13490, MEMORY[0x263F07490], MEMORY[0x263EFCAD0], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v77 = (char *)&v71 - v17;
  uint64_t v18 = sub_251038010();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v80 = v18;
  uint64_t v81 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v78 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102E710();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v82 = v21;
  uint64_t v83 = v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v79 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102E63C();
  uint64_t v85 = v24;
  uint64_t v88 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v94 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102E530();
  uint64_t v90 = v26;
  uint64_t v92 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v95 = (char *)&v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102E3F4();
  uint64_t v91 = v28;
  uint64_t v89 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v86 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v104, a2, 0x118uLL);
  uint64_t v71 = sub_2510384C0();
  uint64_t v76 = v4 + *(int *)(type metadata accessor for SingleMetricMinorPointMarks() + 20);
  sub_250F4E53C(v76, (uint64_t)v13);
  uint64_t v30 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v73 = *(uint64_t (**)(char *, uint64_t))(v31 + 48);
  uint64_t v74 = v31 + 48;
  uint64_t v32 = v30;
  uint64_t v72 = v30;
  int v33 = v73(v13, 1);
  sub_250FD529C((uint64_t)v13);
  uint64_t v34 = 28;
  if (v33 == 1) {
    uint64_t v34 = 24;
  }
  uint64_t v35 = v75;
  sub_25102F114(v96 + *(int *)(v32 + v34), v75, (uint64_t (*)(void))sub_250F26E08);
  sub_251037400();
  sub_25102EDD8((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
  sub_251037E30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25102F17C(v35, (uint64_t (*)(void))sub_250F26E08);
  sub_2510384C0();
  uint64_t v36 = v4;
  sub_250FCA198(a4);
  uint64_t v100 = v37;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = v78;
  sub_251038000();
  uint64_t v39 = v96;
  uint64_t v97 = v36;
  uint64_t v98 = v96;
  uint64_t v99 = v104;
  sub_25102E7B4();
  uint64_t v41 = v40;
  unint64_t v42 = sub_25102EC80();
  uint64_t v43 = MEMORY[0x263EFCD88];
  uint64_t v44 = v79;
  uint64_t v45 = v80;
  sub_251037DA0();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v38, v45);
  uint64_t v46 = v87;
  sub_250F4E53C(v76, v87);
  uint64_t v47 = v72;
  ((void (*)(uint64_t, uint64_t, uint64_t))v73)(v46, 1, v72);
  sub_250FD529C(v46);
  uint64_t v100 = v45;
  uint64_t v101 = v41;
  uint64_t v102 = v43;
  unint64_t v103 = v42;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v49 = v82;
  sub_251037D80();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v44, v49);
  uint64_t v50 = (uint64_t *)(v39 + *(int *)(v47 + 40));
  uint64_t v51 = v50[1];
  uint64_t v100 = *v50;
  uint64_t v101 = v51;
  sub_250F3EB74();
  swift_bridgeObjectRetain();
  uint64_t v52 = sub_2510388A0();
  uint64_t v54 = v53;
  LOBYTE(v45) = v55 & 1;
  uint64_t v100 = v49;
  uint64_t v101 = OpaqueTypeConformance2;
  uint64_t v56 = swift_getOpaqueTypeConformance2();
  uint64_t v57 = v94;
  uint64_t v58 = v85;
  sub_251037D60();
  sub_250F3EBC8(v52, v54, v45);
  swift_bridgeObjectRelease();
  long long v59 = v57;
  uint64_t v60 = v58;
  (*(void (**)(char *, uint64_t))(v88 + 8))(v59, v58);
  uint64_t v61 = (uint64_t *)(v96 + *(int *)(v47 + 48));
  uint64_t v62 = v61[1];
  uint64_t v100 = *v61;
  uint64_t v101 = v62;
  swift_bridgeObjectRetain();
  uint64_t v63 = sub_2510388A0();
  uint64_t v65 = v64;
  LOBYTE(v47) = v66 & 1;
  uint64_t v100 = v60;
  uint64_t v101 = v56;
  swift_getOpaqueTypeConformance2();
  uint64_t v67 = v86;
  uint64_t v68 = v90;
  uint64_t v69 = v95;
  sub_251037D70();
  sub_250F3EBC8(v63, v65, v47);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v69, v68);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v89 + 32))(v93, v67, v91);
}

uint64_t sub_25102D41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  sub_25102E980(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v36 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v34 - v10;
  sub_25102E8EC();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25102E880(0, &qword_269B14B70, (uint64_t (*)(uint64_t))sub_25102E8EC, MEMORY[0x263F18C00], MEMORY[0x263F18E28]);
  uint64_t v34 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v34 - v16;
  sub_25102E7B4();
  uint64_t v35 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v14 = sub_251038D00();
  v14[1] = v21;
  sub_25102F014();
  sub_25102D7D4(a1, a2, a3, (uint64_t)v14 + *(int *)(v22 + 44));
  uint64_t v23 = type metadata accessor for SingleMetricMinorPointMarks();
  uint64_t v24 = a1 + *(int *)(v23 + 20);
  sub_250F4E53C(v24, (uint64_t)v11);
  uint64_t v25 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48);
  uint64_t v27 = 0;
  if (v26(v11, 1, v25) == 1) {
    uint64_t v27 = *(void *)(a1 + *(int *)(v23 + 24));
  }
  sub_250FD529C((uint64_t)v11);
  sub_25102F114((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(void))sub_25102E8EC);
  *(void *)&v17[*(int *)(v34 + 36)] = v27;
  sub_25102F17C((uint64_t)v14, (uint64_t (*)(void))sub_25102E8EC);
  uint64_t v28 = sub_251038D50();
  uint64_t v29 = v36;
  sub_250F4E53C(v24, v36);
  BOOL v30 = v26((char *)v29, 1, v25) != 1;
  sub_250FD529C(v29);
  uint64_t v31 = MEMORY[0x263F18C00];
  sub_25102F278((uint64_t)v17, (uint64_t)v20, &qword_269B14B70, (uint64_t (*)(uint64_t))sub_25102E8EC, MEMORY[0x263F18C00]);
  uint64_t v32 = &v20[*(int *)(v35 + 36)];
  *(void *)uint64_t v32 = v28;
  v32[8] = v30;
  sub_25102F2FC((uint64_t)v17, &qword_269B14B70, (uint64_t (*)(uint64_t))sub_25102E8EC, v31);
  return sub_25102F0AC((uint64_t)v20, v37, (uint64_t (*)(void))sub_25102E7B4);
}

uint64_t sub_25102D7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  unint64_t v42 = (char *)a1;
  uint64_t v43 = a4;
  uint64_t v4 = sub_2510382F0();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_251038D70();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102EAC0();
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25102E880(0, &qword_269B14B90, (uint64_t (*)(uint64_t))sub_25102EAC0, MEMORY[0x263F18868], MEMORY[0x263F18E28]);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v38 - v20;
  uint64_t v22 = sub_251038AB0();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F1B970], v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  sub_25102F114((uint64_t)v6, (uint64_t)&v14[*(int *)(v12 + 44)], MEMORY[0x263F190D8]);
  *(void *)uint64_t v14 = v22;
  *((_WORD *)v14 + 4) = 256;
  swift_retain();
  sub_25102F17C((uint64_t)v6, MEMORY[0x263F190D8]);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  type metadata accessor for SingleMetricMinorPointMarks();
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_251038D00();
  sub_251038150();
  sub_25102F114((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))sub_25102EAC0);
  uint64_t v23 = &v18[*(int *)(v16 + 44)];
  long long v24 = v45;
  *(_OWORD *)uint64_t v23 = v44;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v46;
  sub_25102F17C((uint64_t)v14, (uint64_t (*)(void))sub_25102EAC0);
  unint64_t v42 = v18;
  sub_25102F1DC((uint64_t)v18, (uint64_t)v21);
  if (*(unsigned char *)(v41 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8))
  {
    uint64_t v25 = sub_251038A90();
  }
  else
  {
    uint64_t v26 = *(void *)(v40 + 72);
    uint64_t v25 = *(void *)(v40 + 80);
    if (sub_2510378A0())
    {
      swift_retain();
    }
    else
    {
      swift_retain();
      uint64_t v25 = v26;
    }
  }
  sub_251038D00();
  sub_251038150();
  char v27 = v48;
  uint64_t v28 = v49;
  char v29 = v50;
  uint64_t v41 = v51;
  uint64_t v39 = v47;
  uint64_t v40 = v52;
  uint64_t v30 = MEMORY[0x263F18868];
  uint64_t v31 = (uint64_t)v42;
  sub_25102F278((uint64_t)v21, (uint64_t)v42, &qword_269B14B90, (uint64_t (*)(uint64_t))sub_25102EAC0, MEMORY[0x263F18868]);
  uint64_t v32 = v43;
  sub_25102F278(v31, v43, &qword_269B14B90, (uint64_t (*)(uint64_t))sub_25102EAC0, v30);
  sub_25102E9E4();
  uint64_t v34 = v32 + *(int *)(v33 + 48);
  uint64_t v35 = v39;
  *(void *)uint64_t v34 = v25;
  *(void *)(v34 + 8) = v35;
  *(unsigned char *)(v34 + 16) = v27;
  *(void *)(v34 + 24) = v28;
  *(unsigned char *)(v34 + 32) = v29;
  uint64_t v36 = v40;
  *(void *)(v34 + 40) = v41;
  *(void *)(v34 + 48) = v36;
  swift_retain();
  sub_25102F2FC((uint64_t)v21, &qword_269B14B90, (uint64_t (*)(uint64_t))sub_25102EAC0, v30);
  swift_release();
  return sub_25102F2FC(v31, &qword_269B14B90, (uint64_t (*)(uint64_t))sub_25102EAC0, v30);
}

uint64_t sub_25102DCA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x270FA5388](a1 - 8);
  v8[1] = *v1;
  sub_25102F114(v4, (uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SingleMetricMinorPointMarks);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = swift_allocObject();
  sub_25102F0AC((uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))type metadata accessor for SingleMetricMinorPointMarks);
  sub_25102E980(0, &qword_26B210BD8, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D488]);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_25102E880(0, &qword_269B14B40, (uint64_t (*)(uint64_t))sub_25102E3F4, MEMORY[0x263EFCB18], MEMORY[0x263EFCC90]);
  sub_250FD4834();
  sub_25102EE20();
  sub_25102EDD8(&qword_269B13480, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
  swift_bridgeObjectRetain();
  return sub_251038C60();
}

uint64_t sub_25102DEDC()
{
  unint64_t v1 = (int *)type metadata accessor for SingleMetricMinorPointMarks();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v1[5];
  unint64_t v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v5 - 1) + 48))(v4, 1, v5))
  {
    uint64_t v6 = sub_251037740();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    uint64_t v7 = v4 + v5[5];
    uint64_t v8 = sub_251037400();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    uint64_t v10 = v4 + v5[6];
    v9(v10, v8);
    sub_250F26E08();
    uint64_t v12 = v11;
    v9(v10 + *(int *)(v11 + 36), v8);
    uint64_t v13 = v4 + v5[7];
    v9(v13, v8);
    v9(v13 + *(int *)(v12 + 36), v8);
    uint64_t v14 = v4 + v5[9];
    uint64_t v15 = sub_2510378C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v3 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v18 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    uint64_t v19 = sub_251037400();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
    v20(v17, v19);
    uint64_t v21 = v17 + *(int *)(v18 + 20);
    v20(v21, v19);
    sub_250F26E08();
    v20(v21 + *(int *)(v22 + 36), v19);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + v1[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_25102E374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SingleMetricMinorPointMarks() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_25102C6B4(a1, v6, a2);
}

void sub_25102E3F4()
{
  if (!qword_269B14B48)
  {
    sub_25102E530();
    sub_25102E63C();
    sub_25102E710();
    sub_251038010();
    sub_25102E7B4();
    sub_25102EC80();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14B48);
    }
  }
}

void sub_25102E530()
{
  if (!qword_269B14B50)
  {
    sub_25102E63C();
    sub_25102E710();
    sub_251038010();
    sub_25102E7B4();
    sub_25102EC80();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14B50);
    }
  }
}

void sub_25102E63C()
{
  if (!qword_269B14B58)
  {
    sub_25102E710();
    sub_251038010();
    sub_25102E7B4();
    sub_25102EC80();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14B58);
    }
  }
}

void sub_25102E710()
{
  if (!qword_269B14B60)
  {
    sub_251038010();
    sub_25102E7B4();
    sub_25102EC80();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14B60);
    }
  }
}

void sub_25102E7B4()
{
  if (!qword_269B14B68)
  {
    sub_25102E880(255, &qword_269B14B70, (uint64_t (*)(uint64_t))sub_25102E8EC, MEMORY[0x263F18C00], MEMORY[0x263F18E28]);
    sub_25102EFB8(255, &qword_269B138D8, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], MEMORY[0x263F198B8]);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14B68);
    }
  }
}

void sub_25102E880(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_25102E8EC()
{
  if (!qword_269B14B78)
  {
    sub_25102E980(255, &qword_269B14B80, (uint64_t (*)(uint64_t))sub_25102E9E4, MEMORY[0x263F1BAC8]);
    sub_25102EBF8();
    unint64_t v0 = sub_251038C30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14B78);
    }
  }
}

void sub_25102E980(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_25102E9E4()
{
  if (!qword_269B14B88)
  {
    uint64_t v0 = MEMORY[0x263F18868];
    uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F18E28];
    sub_25102E880(255, &qword_269B14B90, (uint64_t (*)(uint64_t))sub_25102EAC0, MEMORY[0x263F18868], MEMORY[0x263F18E28]);
    sub_25102E880(255, &qword_269B138C0, (uint64_t (*)(uint64_t))sub_250F6FD80, v0, v1);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v3) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B14B88);
    }
  }
}

void sub_25102EAC0()
{
  if (!qword_269B14B98)
  {
    sub_25102EB28();
    sub_2510382F0();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14B98);
    }
  }
}

void sub_25102EB28()
{
  if (!qword_269B14BA0)
  {
    sub_25102EBA4();
    unint64_t v0 = sub_251038060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14BA0);
    }
  }
}

unint64_t sub_25102EBA4()
{
  unint64_t result = qword_269B14BA8;
  if (!qword_269B14BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14BA8);
  }
  return result;
}

unint64_t sub_25102EBF8()
{
  unint64_t result = qword_269B14BB0;
  if (!qword_269B14BB0)
  {
    sub_25102E980(255, &qword_269B14B80, (uint64_t (*)(uint64_t))sub_25102E9E4, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14BB0);
  }
  return result;
}

unint64_t sub_25102EC80()
{
  unint64_t result = qword_269B14BB8;
  if (!qword_269B14BB8)
  {
    sub_25102E7B4();
    sub_25102ECF8();
    sub_250F70118();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14BB8);
  }
  return result;
}

unint64_t sub_25102ECF8()
{
  unint64_t result = qword_269B14BC0;
  if (!qword_269B14BC0)
  {
    sub_25102E880(255, &qword_269B14B70, (uint64_t (*)(uint64_t))sub_25102E8EC, MEMORY[0x263F18C00], MEMORY[0x263F18E28]);
    sub_25102EDD8(&qword_269B14BC8, (void (*)(uint64_t))sub_25102E8EC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14BC0);
  }
  return result;
}

uint64_t sub_25102EDD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25102EE20()
{
  unint64_t result = qword_269B14BD0;
  if (!qword_269B14BD0)
  {
    sub_25102E880(255, &qword_269B14B40, (uint64_t (*)(uint64_t))sub_25102E3F4, MEMORY[0x263EFCB18], MEMORY[0x263EFCC90]);
    sub_25102E530();
    sub_25102E63C();
    sub_25102E710();
    sub_251038010();
    sub_25102E7B4();
    sub_25102EC80();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14BD0);
  }
  return result;
}

void sub_25102EFB8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_25102F008@<X0>(uint64_t a1@<X8>)
{
  return sub_25102D41C(v1[2], v1[3], v1[4], a1);
}

void sub_25102F014()
{
  if (!qword_269B14BE0)
  {
    sub_25102E980(255, &qword_269B14B80, (uint64_t (*)(uint64_t))sub_25102E9E4, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14BE0);
    }
  }
}

uint64_t sub_25102F0AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25102F114(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25102F17C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25102F1DC(uint64_t a1, uint64_t a2)
{
  sub_25102E880(0, &qword_269B14B90, (uint64_t (*)(uint64_t))sub_25102EAC0, MEMORY[0x263F18868], MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25102F278(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  sub_25102E880(0, a3, a4, a5, MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_25102F2FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  sub_25102E880(0, a2, a3, a4, MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t sub_25102F370()
{
  unint64_t result = qword_269B14BE8;
  if (!qword_269B14BE8)
  {
    sub_25102F3E0();
    sub_25102EE20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14BE8);
  }
  return result;
}

void sub_25102F3E0()
{
  if (!qword_269B14BF0)
  {
    sub_25102E980(255, &qword_26B210BD8, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D488]);
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(255);
    sub_25102E880(255, &qword_269B14B40, (uint64_t (*)(uint64_t))sub_25102E3F4, MEMORY[0x263EFCB18], MEMORY[0x263EFCC90]);
    sub_250FD4834();
    sub_25102EDD8(&qword_269B13390, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint.ID);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14BF0);
    }
  }
}

void sub_25102F51C(double a1)
{
  uint64_t v2 = sub_251037460();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251039180();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = sub_251039160();
  MEMORY[0x270FA5388](v4 - 8);
  if (a1 < -1.0)
  {
    double v5 = (fabs(a1) + -1.0) * 0.5 * 100.0;
    if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a1 < 0.0)
  {
    double v6 = (1.0 - fabs(a1)) * 0.5 * 100.0;
    if ((~*(void *)&v6 & 0x7FF0000000000000) != 0)
    {
      if (v6 > -9.22337204e18)
      {
        if (v6 < 9.22337204e18) {
          goto LABEL_19;
        }
        goto LABEL_25;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a1 <= 1.0)
  {
    double v7 = (1.0 - a1) * 0.5 * 100.0;
    if ((~*(void *)&v7 & 0x7FF0000000000000) != 0)
    {
      if (v7 > -9.22337204e18)
      {
        if (v7 < 9.22337204e18) {
          goto LABEL_19;
        }
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  double v8 = (a1 + -1.0) * 0.5 * 100.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v8 < 9.22337204e18)
  {
LABEL_19:
    sub_251039150();
    sub_251039140();
    sub_251039120();
    sub_251039140();
    sub_251039170();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    sub_2510391D0();
    return;
  }
LABEL_31:
  __break(1u);
}

void *sub_25102FA84(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    double v7 = (int *)type metadata accessor for BaselineBand.Configuration(0);
    uint64_t v8 = v7[5];
    uint64_t v9 = (char *)v4 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = sub_251037400();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    sub_250F49D48(0);
    v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
    *(void *)((char *)v4 + v7[6]) = *(void *)((char *)a2 + v7[6]);
    *(void *)((char *)v4 + v7[7]) = *(void *)((char *)a2 + v7[7]);
    *((unsigned char *)v4 + v7[8]) = *((unsigned char *)a2 + v7[8]);
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14);
    swift_retain();
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 1);
      uint64_t v19 = *((void *)v16 + 2);
      *(void *)uint64_t v15 = v17;
      *((void *)v15 + 1) = v18;
      *((void *)v15 + 2) = v19;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((void *)v15 + 2) = *((void *)v16 + 2);
    }
    v15[24] = v16[24];
    v15[32] = v16[32];
    uint64_t v21 = *((void *)v16 + 6);
    *((void *)v15 + 5) = *((void *)v16 + 5);
    *((void *)v15 + 6) = v21;
    v15[56] = v16[56];
    uint64_t v22 = *((void *)v16 + 9);
    *((void *)v15 + 8) = *((void *)v16 + 8);
    *((void *)v15 + 9) = v22;
    *((void *)v15 + 10) = *((void *)v16 + 10);
    long long v23 = *(_OWORD *)(v16 + 88);
    *(_OWORD *)(v15 + 104) = *(_OWORD *)(v16 + 104);
    *(_OWORD *)(v15 + 88) = v23;
    long long v24 = *(_OWORD *)(v16 + 120);
    long long v25 = *(_OWORD *)(v16 + 136);
    *(_OWORD *)(v15 + 152) = *(_OWORD *)(v16 + 152);
    *(_OWORD *)(v15 + 136) = v25;
    *(_OWORD *)(v15 + 120) = v24;
    uint64_t v26 = *((void *)v16 + 22);
    *((void *)v15 + 21) = *((void *)v16 + 21);
    *((void *)v15 + 22) = v26;
    uint64_t v28 = *((void *)v16 + 23);
    uint64_t v27 = *((void *)v16 + 24);
    v15[200] = v16[200];
    *((void *)v15 + 23) = v28;
    *((void *)v15 + 24) = v27;
    v15[201] = v16[201];
    uint64_t v29 = *((void *)v16 + 27);
    *((void *)v15 + 26) = *((void *)v16 + 26);
    *((void *)v15 + 27) = v29;
    uint64_t v30 = *((void *)v16 + 29);
    *((void *)v15 + 28) = *((void *)v16 + 28);
    *((void *)v15 + 29) = v30;
    *((void *)v15 + 30) = *((void *)v16 + 30);
    v15[248] = v16[248];
    uint64_t v31 = *((void *)v16 + 33);
    *((void *)v15 + 32) = *((void *)v16 + 32);
    *((void *)v15 + 33) = v31;
    *((void *)v15 + 34) = *((void *)v16 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t type metadata accessor for BaselineBand.Configuration(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B14C08);
}

uint64_t sub_25102FD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for BaselineBand.Configuration(0) + 20);
  uint64_t v5 = sub_251037400();
  double v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  sub_250F49D48(0);
  v6(v4 + *(int *)(v7 + 36), v5);
  swift_release();
  if (*(void *)(a1 + *(int *)(a2 + 20)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_OWORD *sub_25102FE94(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  double v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  sub_250F49D48(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v31 = a1;
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)((char *)a2 + v13);
  swift_retain();
  if (v16)
  {
    uint64_t v17 = *((void *)v15 + 1);
    uint64_t v18 = *((void *)v15 + 2);
    *(void *)uint64_t v14 = v16;
    *((void *)v14 + 1) = v17;
    *((void *)v14 + 2) = v18;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((void *)v14 + 2) = *((void *)v15 + 2);
  }
  v14[24] = v15[24];
  v14[32] = v15[32];
  uint64_t v19 = *((void *)v15 + 6);
  *((void *)v14 + 5) = *((void *)v15 + 5);
  *((void *)v14 + 6) = v19;
  v14[56] = v15[56];
  uint64_t v20 = *((void *)v15 + 9);
  *((void *)v14 + 8) = *((void *)v15 + 8);
  *((void *)v14 + 9) = v20;
  *((void *)v14 + 10) = *((void *)v15 + 10);
  long long v21 = *(_OWORD *)(v15 + 88);
  *(_OWORD *)(v14 + 104) = *(_OWORD *)(v15 + 104);
  *(_OWORD *)(v14 + 88) = v21;
  long long v22 = *(_OWORD *)(v15 + 120);
  long long v23 = *(_OWORD *)(v15 + 136);
  *(_OWORD *)(v14 + 152) = *(_OWORD *)(v15 + 152);
  *(_OWORD *)(v14 + 136) = v23;
  *(_OWORD *)(v14 + 120) = v22;
  uint64_t v24 = *((void *)v15 + 22);
  *((void *)v14 + 21) = *((void *)v15 + 21);
  *((void *)v14 + 22) = v24;
  uint64_t v26 = *((void *)v15 + 23);
  uint64_t v25 = *((void *)v15 + 24);
  v14[200] = v15[200];
  *((void *)v14 + 23) = v26;
  *((void *)v14 + 24) = v25;
  v14[201] = v15[201];
  uint64_t v27 = *((void *)v15 + 27);
  *((void *)v14 + 26) = *((void *)v15 + 26);
  *((void *)v14 + 27) = v27;
  uint64_t v28 = *((void *)v15 + 29);
  *((void *)v14 + 28) = *((void *)v15 + 28);
  *((void *)v14 + 29) = v28;
  *((void *)v14 + 30) = *((void *)v15 + 30);
  v14[248] = v15[248];
  uint64_t v29 = *((void *)v15 + 33);
  *((void *)v14 + 32) = *((void *)v15 + 32);
  *((void *)v14 + 33) = v29;
  *((void *)v14 + 34) = *((void *)v15 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v31;
}

void *sub_2510300F0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  double v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  sub_250F49D48(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)((char *)a2 + v13);
  if (*(void *)((char *)a1 + v13))
  {
    if (v16)
    {
      *(void *)uint64_t v14 = v16;
      swift_retain();
      swift_release();
      *((void *)v14 + 1) = *((void *)v15 + 1);
      swift_retain();
      swift_release();
      *((void *)v14 + 2) = *((void *)v15 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80((uint64_t)a1 + v13);
      uint64_t v17 = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((void *)v14 + 2) = v17;
    }
  }
  else if (v16)
  {
    *(void *)uint64_t v14 = v16;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((void *)v14 + 2) = *((void *)v15 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v18 = *(_OWORD *)v15;
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *(_OWORD *)uint64_t v14 = v18;
  }
  v14[24] = v15[24];
  v14[32] = v15[32];
  *((void *)v14 + 5) = *((void *)v15 + 5);
  swift_retain();
  swift_release();
  uint64_t v19 = *((void *)v15 + 6);
  v14[56] = v15[56];
  *((void *)v14 + 6) = v19;
  *((void *)v14 + 8) = *((void *)v15 + 8);
  *((void *)v14 + 9) = *((void *)v15 + 9);
  swift_retain();
  swift_release();
  *((void *)v14 + 10) = *((void *)v15 + 10);
  swift_retain();
  swift_release();
  *((void *)v14 + 11) = *((void *)v15 + 11);
  uint64_t v20 = *((void *)v15 + 12);
  v14[104] = v15[104];
  *((void *)v14 + 12) = v20;
  *((void *)v14 + 14) = *((void *)v15 + 14);
  *((void *)v14 + 15) = *((void *)v15 + 15);
  *((void *)v14 + 16) = *((void *)v15 + 16);
  *((void *)v14 + 17) = *((void *)v15 + 17);
  *((void *)v14 + 18) = *((void *)v15 + 18);
  *((void *)v14 + 19) = *((void *)v15 + 19);
  *((void *)v14 + 20) = *((void *)v15 + 20);
  *((void *)v14 + 21) = *((void *)v15 + 21);
  *((void *)v14 + 22) = *((void *)v15 + 22);
  swift_retain();
  swift_release();
  *((void *)v14 + 23) = *((void *)v15 + 23);
  swift_retain();
  swift_release();
  uint64_t v21 = *((void *)v15 + 24);
  v14[200] = v15[200];
  *((void *)v14 + 24) = v21;
  v14[201] = v15[201];
  *((void *)v14 + 26) = *((void *)v15 + 26);
  swift_retain();
  swift_release();
  *((void *)v14 + 27) = *((void *)v15 + 27);
  swift_retain();
  swift_release();
  *((void *)v14 + 28) = *((void *)v15 + 28);
  swift_retain();
  swift_release();
  *((void *)v14 + 29) = *((void *)v15 + 29);
  swift_retain();
  swift_release();
  *((void *)v14 + 30) = *((void *)v15 + 30);
  swift_retain();
  swift_release();
  v14[248] = v15[248];
  *((void *)v14 + 32) = *((void *)v15 + 32);
  swift_retain();
  swift_release();
  *((void *)v14 + 33) = *((void *)v15 + 33);
  swift_retain();
  swift_release();
  *((void *)v14 + 34) = *((void *)v15 + 34);
  return a1;
}

_OWORD *sub_251030480(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  double v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  sub_250F49D48(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  memcpy((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), 0x118uLL);
  return a1;
}

_OWORD *sub_251030588(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  double v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_251037400();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  sub_250F49D48(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  swift_release();
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  if (!*(void *)((char *)a1 + v13)) {
    goto LABEL_5;
  }
  if (!*(void *)v15)
  {
    sub_250F27E80(v14);
LABEL_5:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *(void *)(v14 + 16) = *((void *)v15 + 2);
    goto LABEL_6;
  }
  *(void *)uint64_t v14 = *(void *)v15;
  swift_release();
  *(void *)(v14 + 8) = *((void *)v15 + 1);
  swift_release();
  *(void *)(v14 + 16) = *((void *)v15 + 2);
  swift_release();
LABEL_6:
  *(unsigned char *)(v14 + 24) = v15[24];
  *(unsigned char *)(v14 + 32) = v15[32];
  *(void *)(v14 + 40) = *((void *)v15 + 5);
  swift_release();
  *(void *)(v14 + 48) = *((void *)v15 + 6);
  *(unsigned char *)(v14 + 56) = v15[56];
  *(void *)(v14 + 64) = *((void *)v15 + 8);
  *(void *)(v14 + 72) = *((void *)v15 + 9);
  swift_release();
  *(void *)(v14 + 80) = *((void *)v15 + 10);
  swift_release();
  *(void *)(v14 + 88) = *((void *)v15 + 11);
  *(void *)(v14 + 96) = *((void *)v15 + 12);
  *(unsigned char *)(v14 + 104) = v15[104];
  long long v16 = *((_OWORD *)v15 + 8);
  *(_OWORD *)(v14 + 112) = *((_OWORD *)v15 + 7);
  *(_OWORD *)(v14 + 128) = v16;
  long long v17 = *((_OWORD *)v15 + 10);
  *(_OWORD *)(v14 + 144) = *((_OWORD *)v15 + 9);
  *(_OWORD *)(v14 + 160) = v17;
  *(void *)(v14 + 176) = *((void *)v15 + 22);
  swift_release();
  *(void *)(v14 + 184) = *((void *)v15 + 23);
  swift_release();
  *(void *)(v14 + 192) = *((void *)v15 + 24);
  *(unsigned char *)(v14 + 200) = v15[200];
  *(unsigned char *)(v14 + 201) = v15[201];
  *(void *)(v14 + 208) = *((void *)v15 + 26);
  swift_release();
  *(void *)(v14 + 216) = *((void *)v15 + 27);
  swift_release();
  *(void *)(v14 + 224) = *((void *)v15 + 28);
  swift_release();
  *(void *)(v14 + 232) = *((void *)v15 + 29);
  swift_release();
  *(void *)(v14 + 240) = *((void *)v15 + 30);
  swift_release();
  *(unsigned char *)(v14 + 248) = v15[248];
  *(void *)(v14 + 256) = *((void *)v15 + 32);
  swift_release();
  *(void *)(v14 + 264) = *((void *)v15 + 33);
  swift_release();
  *(void *)(v14 + 272) = *((void *)v15 + 34);
  return a1;
}

uint64_t sub_25103081C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251030830);
}

uint64_t sub_251030830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 40);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_2510308F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251030908);
}

uint64_t sub_251030908(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 40) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for BaselineBand(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B14BF8);
}

uint64_t sub_2510309E8()
{
  uint64_t result = type metadata accessor for BaselineBand.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_251030A7C(_OWORD *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_251037400();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    sub_250F49D48(0);
    v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
    uint64_t v13 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v13) = *(void *)((char *)a2 + v13);
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  swift_retain();
  return v4;
}

uint64_t sub_251030BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_251037400();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_250F49D48(0);
  v4(v2 + *(int *)(v5 + 36), v3);
  return swift_release();
}

_OWORD *sub_251030C58(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  swift_retain();
  return a1;
}

void *sub_251030D38(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_251030E30(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_251030F0C(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_release();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_251030FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251031004);
}

uint64_t sub_251031004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F49D48(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_2510310C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510310DC);
}

void sub_2510310DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250F49D48(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
}

void sub_25103119C()
{
  sub_250F49D48(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_251031258()
{
  return sub_251039870();
}

uint64_t sub_251031368()
{
  return sub_251039890();
}

uint64_t sub_2510313AC()
{
  return sub_251039890();
}

uint64_t sub_2510313EC()
{
  return sub_251031434(&qword_269B14C18, (void (*)(uint64_t))type metadata accessor for BaselineBand.Configuration);
}

uint64_t sub_251031434(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25103147C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_251031498@<X0>(uint64_t a1@<X8>)
{
  uint64_t v71 = a1;
  uint64_t v2 = sub_2510384E0();
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v63 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6152C();
  MEMORY[0x270FA5388](v4 - 8);
  long long v59 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v52 - v7;
  sub_250F6158C();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v72 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v52 - v11;
  uint64_t v12 = sub_251037DE0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  uint64_t v61 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v57 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDC368();
  uint64_t v54 = v15;
  uint64_t v62 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v58 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FDC2A0();
  uint64_t v67 = v17;
  uint64_t v69 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  char v55 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251031D94();
  uint64_t v70 = v19;
  uint64_t v68 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  char v66 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510384C0();
  uint64_t v53 = type metadata accessor for BaselineBand.Configuration(0);
  sub_251037400();
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  sub_250F49D48(0);
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  uint64_t v21 = v1;
  v80[0] = *v1;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  v80[0] = v1[1];
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v22 = v57;
  sub_251037DD0();
  uint64_t v23 = v53;
  uint64_t v25 = v63;
  uint64_t v24 = v64;
  uint64_t v26 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, *MEMORY[0x263F19860], v65);
  uint64_t v27 = v58;
  uint64_t v28 = v60;
  sub_251037D30();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v28);
  uint64_t v29 = v23;
  v77[0] = *(uint64_t *)((char *)v1 + *(int *)(v23 + 28));
  v80[0] = v28;
  v80[1] = MEMORY[0x263EFCC18];
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v31 = MEMORY[0x263F1B440];
  uint64_t v32 = MEMORY[0x263F1B420];
  uint64_t v33 = v54;
  uint64_t v34 = v55;
  sub_251037D40();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v27, v33);
  int v35 = *((unsigned __int8 *)v1 + *(int *)(v29 + 32));
  uint64_t v36 = type metadata accessor for BaselineBand(0);
  memcpy(v80, (char *)v21 + *(int *)(v36 + 20), 0x118uLL);
  if (v35 == 1 && BYTE1(v80[25]) == 1)
  {
    sub_251031E10();
    uint64_t v78 = v37;
    sub_251031F90();
    uint64_t v39 = v38;
    uint64_t v73 = v33;
    uint64_t v74 = v31;
    uint64_t v75 = OpaqueTypeConformance2;
    uint64_t v76 = v32;
    uint64_t v40 = swift_getOpaqueTypeConformance2();
    sub_250FDC26C(255);
    uint64_t v42 = v41;
    uint64_t v43 = sub_251031434(&qword_269B14458, sub_250FDC26C);
    uint64_t v73 = v42;
    uint64_t v74 = v43;
    uint64_t v44 = swift_getOpaqueTypeConformance2();
    uint64_t v45 = v67;
    uint64_t v73 = v67;
    uint64_t v74 = v39;
    uint64_t v75 = v40;
    uint64_t v76 = v44;
    uint64_t v79 = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1(v77);
    sub_250F2A3B4(v80);
    swift_checkMetadataState();
    sub_251037D50();
    sub_250F2E048(v80);
    uint64_t v46 = v45;
    uint64_t v47 = v69;
  }
  else
  {
    uint64_t v48 = v67;
    uint64_t v78 = v67;
    uint64_t v73 = v33;
    uint64_t v74 = v31;
    uint64_t v75 = OpaqueTypeConformance2;
    uint64_t v76 = v32;
    uint64_t v79 = swift_getOpaqueTypeConformance2();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v77);
    uint64_t v47 = v69;
    (*(void (**)(uint64_t *, char *, uint64_t))(v69 + 16))(boxed_opaque_existential_1, v34, v48);
    uint64_t v46 = v48;
  }
  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v46);
  char v50 = v66;
  sub_251037D80();
  sub_250F57378((uint64_t)v77);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v68 + 32))(v71, v50, v70);
}

void sub_251031D94()
{
  if (!qword_269B14C20)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14C20);
    }
  }
}

void sub_251031E10()
{
  if (!qword_269B14C28)
  {
    sub_250FDC2A0();
    sub_251031F90();
    sub_250FDC368();
    sub_251037DE0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_250FDC26C(255);
    sub_251031434(&qword_269B14458, sub_250FDC26C);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14C28);
    }
  }
}

void sub_251031F90()
{
  if (!qword_269B14C30)
  {
    sub_250FDC26C(255);
    sub_251031434(&qword_269B14458, sub_250FDC26C);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B14C30);
    }
  }
}

uint64_t sub_251032044(double *a1, double *a2)
{
  sub_250F49D48(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v19 - v8;
  if (*a1 != *a2 || a1[1] != a2[1]) {
    goto LABEL_12;
  }
  uint64_t v20 = type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v11 = *(int *)(v20 + 20);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  sub_251037400();
  sub_251031434(&qword_269B13308, MEMORY[0x263F07490]);
  char v14 = sub_2510390F0();
  sub_250F609C8(v12, (uint64_t)v9);
  sub_250F609C8(v13, (uint64_t)v6);
  if ((v14 & 1) == 0)
  {
    sub_250F60A2C((uint64_t)v6);
    sub_250F60A2C((uint64_t)v9);
LABEL_12:
    char v17 = 0;
    return v17 & 1;
  }
  char v15 = sub_2510390F0();
  sub_250F60A2C((uint64_t)v6);
  sub_250F60A2C((uint64_t)v9);
  if ((v15 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v16 = v20;
  if (*(double *)((char *)a1 + *(int *)(v20 + 24)) != *(double *)((char *)a2 + *(int *)(v20 + 24))
    || (sub_251038A70() & 1) == 0)
  {
    goto LABEL_12;
  }
  char v17 = *((unsigned char *)a1 + *(int *)(v16 + 32)) ^ *((unsigned char *)a2 + *(int *)(v16 + 32)) ^ 1;
  return v17 & 1;
}

uint64_t sub_251032234()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static BaselineRelativeValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

uint64_t BaselineRelativeValue.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8)) {
    return sub_251039860();
  }
  sub_251039860();
  return sub_251039880();
}

uint64_t sub_251032304()
{
  if (*v0) {
    return 0x6D72657465646E69;
  }
  else {
    return 0x6E696D7265746564;
  }
}

uint64_t sub_251032354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2510336BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25103237C(uint64_t a1)
{
  unint64_t v2 = sub_251032938();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2510323B8(uint64_t a1)
{
  unint64_t v2 = sub_251032938();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2510323F4(uint64_t a1)
{
  unint64_t v2 = sub_2510328E4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_251032430(uint64_t a1)
{
  unint64_t v2 = sub_2510328E4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25103246C()
{
  return 0;
}

uint64_t sub_251032478@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_2510324A8(uint64_t a1)
{
  unint64_t v2 = sub_251032890();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2510324E4(uint64_t a1)
{
  unint64_t v2 = sub_251032890();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t BaselineRelativeValue.encode(to:)(void *a1)
{
  int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_251032FD4(0, &qword_269B14C38, (uint64_t (*)(void))sub_251032890, (uint64_t)&type metadata for BaselineRelativeValue.IndeterminateCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v18 = (char *)&v18 - v5;
  sub_251032FD4(0, &qword_269B14C48, (uint64_t (*)(void))sub_2510328E4, (uint64_t)&type metadata for BaselineRelativeValue.DeterminateCodingKeys, v3);
  uint64_t v19 = *(void *)(v6 - 8);
  uint64_t v20 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v18 - v7;
  sub_251032FD4(0, &qword_269B14C58, (uint64_t (*)(void))sub_251032938, (uint64_t)&type metadata for BaselineRelativeValue.CodingKeys, v3);
  uint64_t v23 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - v11;
  LOBYTE(v3) = *(unsigned char *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_251032938();
  sub_2510398B0();
  if (v3)
  {
    char v25 = 1;
    sub_251032890();
    uint64_t v13 = v18;
    uint64_t v14 = v23;
    sub_251039750();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v14);
  }
  else
  {
    char v24 = 0;
    sub_2510328E4();
    uint64_t v16 = v23;
    sub_251039750();
    uint64_t v17 = v20;
    sub_251039790();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v16);
  }
}

unint64_t sub_251032890()
{
  unint64_t result = qword_269B14C40;
  if (!qword_269B14C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14C40);
  }
  return result;
}

unint64_t sub_2510328E4()
{
  unint64_t result = qword_269B14C50;
  if (!qword_269B14C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14C50);
  }
  return result;
}

unint64_t sub_251032938()
{
  unint64_t result = qword_269B14C60;
  if (!qword_269B14C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14C60);
  }
  return result;
}

uint64_t BaselineRelativeValue.hashValue.getter()
{
  char v1 = *(unsigned char *)(v0 + 8);
  sub_251039850();
  sub_251039860();
  if ((v1 & 1) == 0) {
    sub_251039880();
  }
  return sub_251039890();
}

uint64_t BaselineRelativeValue.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v33 = a2;
  int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_251032FD4(0, &qword_269B14C68, (uint64_t (*)(void))sub_251032890, (uint64_t)&type metadata for BaselineRelativeValue.IndeterminateCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v31 = v4;
  uint64_t v36 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v35 = (char *)&v29 - v5;
  sub_251032FD4(0, &qword_269B14C70, (uint64_t (*)(void))sub_2510328E4, (uint64_t)&type metadata for BaselineRelativeValue.DeterminateCodingKeys, v3);
  uint64_t v7 = v6;
  uint64_t v32 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - v8;
  sub_251032FD4(0, &qword_269B14C78, (uint64_t (*)(void))sub_251032938, (uint64_t)&type metadata for BaselineRelativeValue.CodingKeys, v3);
  uint64_t v11 = v10;
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v29 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_251032938();
  uint64_t v14 = v37;
  sub_2510398A0();
  if (v14) {
    goto LABEL_7;
  }
  uint64_t v30 = v7;
  char v15 = v35;
  uint64_t v16 = v36;
  uint64_t v37 = a1;
  uint64_t v17 = sub_251039740();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v20 = sub_2510395A0();
    swift_allocError();
    uint64_t v22 = v21;
    sub_25103303C();
    *uint64_t v22 = &type metadata for BaselineRelativeValue;
    sub_2510396E0();
    sub_251039580();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x263F8DCB0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v11);
    a1 = v37;
LABEL_7:
    uint64_t v23 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v23);
  }
  char v18 = *(unsigned char *)(v17 + 32);
  if (v18)
  {
    char v39 = 1;
    sub_251032890();
    sub_2510396D0();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v11);
    uint64_t v19 = 0;
  }
  else
  {
    char v38 = 0;
    sub_2510328E4();
    sub_2510396D0();
    uint64_t v25 = v30;
    sub_251039720();
    uint64_t v26 = v34;
    uint64_t v19 = v27;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v11);
  }
  uint64_t v28 = v33;
  *uint64_t v33 = v19;
  *((unsigned char *)v28 + 8) = v18;
  uint64_t v23 = (uint64_t)v37;
  return __swift_destroy_boxed_opaque_existential_0(v23);
}

uint64_t sub_251032F18()
{
  if (*(unsigned char *)(v0 + 8)) {
    return sub_251039860();
  }
  sub_251039860();
  return sub_251039880();
}

uint64_t sub_251032F68()
{
  char v1 = *(unsigned char *)(v0 + 8);
  sub_251039850();
  sub_251039860();
  if ((v1 & 1) == 0) {
    sub_251039880();
  }
  return sub_251039890();
}

void sub_251032FD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_25103303C()
{
  if (!qword_269B13CF8)
  {
    sub_250F93C80();
    sub_251039590();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B13CF8);
    }
  }
}

unint64_t sub_2510330B0()
{
  unint64_t result = qword_269B14C80;
  if (!qword_269B14C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14C80);
  }
  return result;
}

uint64_t sub_251033104@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return BaselineRelativeValue.init(from:)(a1, a2);
}

uint64_t sub_25103311C(void *a1)
{
  return BaselineRelativeValue.encode(to:)(a1);
}

uint64_t sub_251033134(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for BaselineRelativeValue(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BaselineRelativeValue(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_2510331C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2510331E4(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue()
{
  return &type metadata for BaselineRelativeValue;
}

unsigned char *storeEnumTagSinglePayload for BaselineRelativeValue.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2510332E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue.CodingKeys()
{
  return &type metadata for BaselineRelativeValue.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BaselineRelativeValue.DeterminateCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2510333B4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue.DeterminateCodingKeys()
{
  return &type metadata for BaselineRelativeValue.DeterminateCodingKeys;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue.IndeterminateCodingKeys()
{
  return &type metadata for BaselineRelativeValue.IndeterminateCodingKeys;
}

unint64_t sub_251033400()
{
  unint64_t result = qword_269B14C88;
  if (!qword_269B14C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14C88);
  }
  return result;
}

unint64_t sub_251033458()
{
  unint64_t result = qword_269B14C90;
  if (!qword_269B14C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14C90);
  }
  return result;
}

unint64_t sub_2510334B0()
{
  unint64_t result = qword_269B14C98;
  if (!qword_269B14C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14C98);
  }
  return result;
}

unint64_t sub_251033508()
{
  unint64_t result = qword_269B14CA0;
  if (!qword_269B14CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14CA0);
  }
  return result;
}

unint64_t sub_251033560()
{
  unint64_t result = qword_269B14CA8;
  if (!qword_269B14CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14CA8);
  }
  return result;
}

unint64_t sub_2510335B8()
{
  unint64_t result = qword_269B14CB0;
  if (!qword_269B14CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14CB0);
  }
  return result;
}

unint64_t sub_251033610()
{
  unint64_t result = qword_269B14CB8;
  if (!qword_269B14CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14CB8);
  }
  return result;
}

unint64_t sub_251033668()
{
  unint64_t result = qword_269B14CC0;
  if (!qword_269B14CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14CC0);
  }
  return result;
}

uint64_t sub_2510336BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E696D7265746564 && a2 == 0xEB00000000657461;
  if (v2 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D72657465646E69 && a2 == 0xED00006574616E69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2510337EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2510374F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251037680();
  sub_250F2A694(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t BalanceOneDayWidget.init()@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_251037470();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2510374F0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F07740], v2);
  sub_251037480();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)a1 = v10;
  sub_251037B30();
  id v11 = v10;
  *((void *)a1 + 1) = sub_251037B20();
  uint64_t v12 = type metadata accessor for BalanceWidgetDataProvider();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[*(int *)(v12 + 24)], v9, v6);
  uint64_t result = type metadata accessor for BalanceOneDayWidget();
  *(void *)&a1[*(int *)(result + 20)] = 0x40B0E00000000000;
  return result;
}

uint64_t type metadata accessor for BalanceOneDayWidget()
{
  uint64_t result = qword_26B20FDC8;
  if (!qword_26B20FDC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BalanceOneDayWidget.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v59 = a1;
  uint64_t v3 = sub_251037460();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = sub_251039180();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for BalanceWidgetTimelineProvider();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510343D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v50 = v9;
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251034464();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  uint64_t v54 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251034534();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v55 = v15;
  *(void *)&long long v56 = v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v51 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251034644();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v57 = v18;
  uint64_t v58 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v52 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510375D0();
  uint64_t v64 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t v65 = &off_2701F69D8;
  uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(&v61);
  sub_2510357A4(v2, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BalanceWidgetDataProvider);
  double v22 = *(double *)(v2 + *(int *)(type metadata accessor for BalanceOneDayWidget() + 20));
  LOBYTE(v60[0]) = 0;
  sub_250FB1E64(&v61, (unsigned __int8 *)v60, (uint64_t)v7, v22);
  type metadata accessor for BalanceWidgetEntryView();
  sub_251034890(&qword_26B2100E0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetEntryView);
  sub_251034890(&qword_26B210118, (void (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineProvider);
  sub_251038FA0();
  sub_251039100();
  type metadata accessor for HealthBalanceUI();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  char v24 = self;
  id v25 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  uint64_t v61 = sub_2510391D0();
  uint64_t v62 = v26;
  uint64_t v27 = sub_251034890(&qword_26B210148, (void (*)(uint64_t))sub_2510343D0);
  unint64_t v28 = sub_250F3EB74();
  uint64_t v29 = MEMORY[0x263F8D310];
  uint64_t v30 = v49;
  sub_251038570();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v30);
  sub_251039100();
  id v31 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  v60[0] = sub_2510391D0();
  v60[1] = v32;
  uint64_t v61 = v30;
  uint64_t v62 = v29;
  uint64_t v63 = v27;
  uint64_t v64 = v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v34 = v51;
  uint64_t v35 = v53;
  uint64_t v36 = v48;
  sub_251038540();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v35);
  _s15HealthBalanceUI0B12OneDayWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0();
  uint64_t v61 = v35;
  uint64_t v62 = v29;
  uint64_t v63 = OpaqueTypeConformance2;
  uint64_t v64 = v28;
  uint64_t v37 = swift_getOpaqueTypeConformance2();
  char v38 = v52;
  uint64_t v39 = v55;
  sub_251038550();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v34, v39);
  uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  sub_251035810(0, &qword_26B210318, MEMORY[0x263F1FD48], MEMORY[0x263F8E0F8]);
  sub_251038F70();
  uint64_t v41 = swift_allocObject();
  long long v56 = xmmword_25103AD40;
  *(_OWORD *)(v41 + 16) = xmmword_25103AD40;
  sub_251038F60();
  sub_251035810(0, &qword_26B210310, MEMORY[0x263F1FD10], v40);
  uint64_t v42 = sub_251038F50();
  uint64_t v43 = *(void *)(v42 - 8);
  unint64_t v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v56;
  (*(void (**)(unint64_t, void, uint64_t))(v43 + 104))(v45 + v44, *MEMORY[0x263F1FCD8], v42);
  uint64_t v61 = v39;
  uint64_t v62 = v37;
  swift_getOpaqueTypeConformance2();
  uint64_t v46 = v57;
  sub_251038560();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v38, v46);
}

void sub_2510343D0()
{
  if (!qword_26B210150)
  {
    type metadata accessor for BalanceWidgetEntryView();
    sub_251034890(&qword_26B2100E0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetEntryView);
    unint64_t v0 = sub_251038FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210150);
    }
  }
}

void sub_251034464()
{
  if (!qword_26B210140)
  {
    sub_2510343D0();
    sub_251034890(&qword_26B210148, (void (*)(uint64_t))sub_2510343D0);
    sub_250F3EB74();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26B210140);
    }
  }
}

void sub_251034534()
{
  if (!qword_26B210138)
  {
    sub_251034464();
    sub_2510343D0();
    sub_251034890(&qword_26B210148, (void (*)(uint64_t))sub_2510343D0);
    sub_250F3EB74();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26B210138);
    }
  }
}

void sub_251034644()
{
  if (!qword_26B2102D8)
  {
    sub_251034534();
    sub_251034464();
    sub_2510343D0();
    sub_251034890(&qword_26B210148, (void (*)(uint64_t))sub_2510343D0);
    sub_250F3EB74();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26B2102D8);
    }
  }
}

uint64_t sub_25103478C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetTimelineEntry();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510357A4(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
  *a2 = swift_getKeyPath();
  sub_251035810(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = type metadata accessor for BalanceWidgetEntryView();
  return sub_251035874((uint64_t)v6, (uint64_t)a2 + *(int *)(v7 + 20));
}

uint64_t sub_251034890(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2510348DC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_251037470();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2510374F0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F07740], v4);
  sub_251037480();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)a2 = v12;
  sub_251037B30();
  id v13 = v12;
  *((void *)a2 + 1) = sub_251037B20();
  uint64_t v14 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&a2[*(int *)(v14 + 24)], v11, v8);
  *(void *)&a2[*(int *)(a1 + 20)] = 0x40B0E00000000000;
  return result;
}

uint64_t _s15HealthBalanceUI0B12OneDayWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0()
{
  v35[1] = *MEMORY[0x263EF8340];
  uint64_t v0 = sub_251038F50();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251037C90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - v9;
  id v11 = objc_msgSend(self, sel_sharedBehavior);
  if (!v11)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  id v12 = v11;
  id v13 = objc_msgSend(v11, sel_features);

  if (!v13) {
    goto LABEL_13;
  }
  unsigned int v14 = objc_msgSend(v13, sel_harmonia);

  if (v14)
  {
    sub_251037C70();
    uint64_t v15 = sub_251037C80();
    os_log_type_t v16 = sub_2510393D0();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v33 = v3;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v35[0] = v18;
      uint64_t v32 = v4;
      *(_DWORD *)uint64_t v17 = 136446210;
      uint64_t v34 = sub_250F32744(0xD000000000000013, 0x800000025103F270, v35);
      uint64_t v3 = v33;
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v15, v16, "[%{public}s] Returning supported families", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v18, -1, -1);
      MEMORY[0x253391D80](v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v32);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    sub_251035810(0, &qword_26B210310, MEMORY[0x263F1FD10], MEMORY[0x263F8E0F8]);
    uint64_t v24 = *(void *)(v1 + 72);
    unint64_t v25 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    unint64_t v26 = v25 + 2 * v24;
    unint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_25103A670;
    unint64_t v28 = v27 + v25;
    uint64_t v29 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
    v29(v28, *MEMORY[0x263F1FD00], v0);
    v29(v28 + v24, *MEMORY[0x263F1FD08], v0);
    v29((unint64_t)v3, *MEMORY[0x263F1FCD8], v0);
    uint64_t v23 = sub_250FA1C20(1, 3, 1, v27);
    *(void *)(v23 + 16) = 3;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v26 + v23, v3, v0);
  }
  else
  {
    sub_251037C70();
    uint64_t v19 = sub_251037C80();
    os_log_type_t v20 = sub_2510393D0();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v35[0] = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v34 = sub_250F32744(0xD000000000000013, 0x800000025103F270, v35);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v19, v20, "[%{public}s] Feature flag off, returning empty families", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v22, -1, -1);
      MEMORY[0x253391D80](v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x263F8EE78];
  }
  return v23;
}

uint64_t sub_251035038()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for BalanceOneDayWidget(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    *((void *)a1 + 1) = v8;
    uint64_t v9 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
    uint64_t v10 = &v7[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_2510374F0();
    id v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    unsigned int v14 = v4;
    uint64_t v15 = v8;
    v13(v10, v11, v12);
    *(void *)&v7[*(int *)(a3 + 20)] = *(char **)((char *)a2 + *(int *)(a3 + 20));
  }
  return v7;
}

uint64_t destroy for BalanceOneDayWidget(id *a1)
{
  uint64_t v2 = (char *)a1 + *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  uint64_t v3 = sub_2510374F0();
  uint64_t v4 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

void *initializeWithCopy for BalanceOneDayWidget(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2510374F0();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v6;
  id v14 = v7;
  v12(v9, v10, v11);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for BalanceOneDayWidget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v12 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *initializeWithTake for BalanceOneDayWidget(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for BalanceOneDayWidget(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  uint64_t v8 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2510374F0();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceOneDayWidget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510354D0);
}

uint64_t sub_2510354D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for BalanceOneDayWidget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251035550);
}

uint64_t sub_251035550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_2510355C0()
{
  uint64_t result = type metadata accessor for BalanceWidgetDataProvider();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_251035658()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2510357A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_251035810(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_251035874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetTimelineEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t BalanceSevenDaysWidget.init()@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_251037470();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2510374F0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F07740], v2);
  sub_251037480();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)a1 = v10;
  sub_251037B30();
  id v11 = v10;
  *((void *)a1 + 1) = sub_251037B20();
  uint64_t v12 = type metadata accessor for BalanceWidgetDataProvider();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[*(int *)(v12 + 24)], v9, v6);
  uint64_t result = type metadata accessor for BalanceSevenDaysWidget();
  *(void *)&a1[*(int *)(result + 20)] = 0x40B0E00000000000;
  return result;
}

uint64_t type metadata accessor for BalanceSevenDaysWidget()
{
  uint64_t result = qword_26B2100D0;
  if (!qword_26B2100D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BalanceSevenDaysWidget.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v59 = a1;
  uint64_t v3 = sub_251037460();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = sub_251039180();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for BalanceWidgetTimelineProvider();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510343D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v50 = v9;
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251034464();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  uint64_t v54 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251034534();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v55 = v15;
  *(void *)&long long v56 = v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v51 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251034644();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v57 = v18;
  uint64_t v58 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v52 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510375E0();
  uint64_t v64 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t v65 = &off_2701F69D8;
  uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(&v61);
  sub_2510357A4(v2, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BalanceWidgetDataProvider);
  double v22 = *(double *)(v2 + *(int *)(type metadata accessor for BalanceSevenDaysWidget() + 20));
  LOBYTE(v60[0]) = 1;
  sub_250FB1E64(&v61, (unsigned __int8 *)v60, (uint64_t)v7, v22);
  type metadata accessor for BalanceWidgetEntryView();
  sub_251034890(&qword_26B2100E0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetEntryView);
  sub_251034890(&qword_26B210118, (void (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineProvider);
  sub_251038FA0();
  sub_251039100();
  type metadata accessor for HealthBalanceUI();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v24 = self;
  id v25 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  uint64_t v61 = sub_2510391D0();
  uint64_t v62 = v26;
  uint64_t v27 = sub_251034890(&qword_26B210148, (void (*)(uint64_t))sub_2510343D0);
  unint64_t v28 = sub_250F3EB74();
  uint64_t v29 = MEMORY[0x263F8D310];
  uint64_t v30 = v49;
  sub_251038570();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v30);
  sub_251039100();
  id v31 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  v60[0] = sub_2510391D0();
  v60[1] = v32;
  uint64_t v61 = v30;
  uint64_t v62 = v29;
  uint64_t v63 = v27;
  uint64_t v64 = v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v34 = v51;
  uint64_t v35 = v53;
  uint64_t v36 = v48;
  sub_251038540();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v35);
  _s15HealthBalanceUI0B15SevenDaysWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0();
  uint64_t v61 = v35;
  uint64_t v62 = v29;
  uint64_t v63 = OpaqueTypeConformance2;
  uint64_t v64 = v28;
  uint64_t v37 = swift_getOpaqueTypeConformance2();
  char v38 = v52;
  uint64_t v39 = v55;
  sub_251038550();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v34, v39);
  uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  sub_251035810(0, &qword_26B210318, MEMORY[0x263F1FD48], MEMORY[0x263F8E0F8]);
  sub_251038F70();
  uint64_t v41 = swift_allocObject();
  long long v56 = xmmword_25103AD40;
  *(_OWORD *)(v41 + 16) = xmmword_25103AD40;
  sub_251038F60();
  sub_251035810(0, &qword_26B210310, MEMORY[0x263F1FD10], v40);
  uint64_t v42 = sub_251038F50();
  uint64_t v43 = *(void *)(v42 - 8);
  unint64_t v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v56;
  (*(void (**)(unint64_t, void, uint64_t))(v43 + 104))(v45 + v44, *MEMORY[0x263F1FCD8], v42);
  uint64_t v61 = v39;
  uint64_t v62 = v37;
  swift_getOpaqueTypeConformance2();
  uint64_t v46 = v57;
  sub_251038560();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v38, v46);
}

uint64_t sub_2510363CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetTimelineEntry();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510357A4(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
  *a2 = swift_getKeyPath();
  sub_251035810(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = type metadata accessor for BalanceWidgetEntryView();
  return sub_251035874((uint64_t)v6, (uint64_t)a2 + *(int *)(v7 + 20));
}

uint64_t sub_2510364D4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_251037470();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2510374F0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F07740], v4);
  sub_251037480();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)a2 = v12;
  sub_251037B30();
  id v13 = v12;
  *((void *)a2 + 1) = sub_251037B20();
  uint64_t v14 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&a2[*(int *)(v14 + 24)], v11, v8);
  *(void *)&a2[*(int *)(a1 + 20)] = 0x40B0E00000000000;
  return result;
}

uint64_t sub_2510366D0()
{
  return sub_2510383F0();
}

uint64_t _s15HealthBalanceUI0B15SevenDaysWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0()
{
  v35[1] = *MEMORY[0x263EF8340];
  uint64_t v0 = sub_251038F50();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251037C90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - v9;
  id v11 = objc_msgSend(self, sel_sharedBehavior);
  if (!v11)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  id v12 = v11;
  id v13 = objc_msgSend(v11, sel_features);

  if (!v13) {
    goto LABEL_13;
  }
  unsigned int v14 = objc_msgSend(v13, sel_harmonia);

  if (v14)
  {
    sub_251037C70();
    uint64_t v15 = sub_251037C80();
    os_log_type_t v16 = sub_2510393D0();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v33 = v3;
      uint64_t v19 = v18;
      v35[0] = v18;
      uint64_t v32 = v4;
      *(_DWORD *)uint64_t v17 = 136446210;
      uint64_t v34 = sub_250F32744(0xD000000000000016, 0x800000025103F310, v35);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v15, v16, "[%{public}s] Returning supported families", v17, 0xCu);
      swift_arrayDestroy();
      uint64_t v20 = v19;
      uint64_t v3 = v33;
      MEMORY[0x253391D80](v20, -1, -1);
      MEMORY[0x253391D80](v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v32);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    sub_251035810(0, &qword_26B210310, MEMORY[0x263F1FD10], MEMORY[0x263F8E0F8]);
    unint64_t v26 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    unint64_t v27 = v26 + *(void *)(v1 + 72);
    unint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_25103AD40;
    uint64_t v29 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
    v29(v28 + v26, *MEMORY[0x263F1FD08], v0);
    v29((unint64_t)v3, *MEMORY[0x263F1FCD8], v0);
    uint64_t v25 = sub_250FA1C20(1, 2, 1, v28);
    *(void *)(v25 + 16) = 2;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v27 + v25, v3, v0);
  }
  else
  {
    sub_251037C70();
    uint64_t v21 = sub_251037C80();
    os_log_type_t v22 = sub_2510393D0();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v35[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      uint64_t v34 = sub_250F32744(0xD000000000000016, 0x800000025103F310, v35);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v21, v22, "[%{public}s] Feature flag off, returning empty families", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v24, -1, -1);
      MEMORY[0x253391D80](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x263F8EE78];
  }
  return v25;
}

uint64_t sub_251036C30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for BalanceSevenDaysWidget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251036C60);
}

uint64_t sub_251036C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for BalanceSevenDaysWidget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251036CE0);
}

uint64_t sub_251036CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetDataProvider();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_251036D50()
{
  return sub_2510383F0();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

id sub_251036D98()
{
  type metadata accessor for ResourceBundleClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_26B210938 = (uint64_t)result;
  return result;
}

uint64_t sub_251036DF0(uint64_t a1)
{
  return sub_251036F3C(a1, qword_269B1AD40);
}

uint64_t sub_251036E1C(uint64_t a1)
{
  return sub_251036F3C(a1, qword_269B1AD58);
}

uint64_t sub_251036E48(uint64_t a1)
{
  return sub_251036F3C(a1, qword_269B1AD70);
}

uint64_t sub_251036E6C(uint64_t a1)
{
  return sub_251036F3C(a1, qword_269B1AD88);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_251036EF4(uint64_t a1)
{
  return sub_251036F3C(a1, qword_269B1ADA0);
}

uint64_t sub_251036F18(uint64_t a1)
{
  return sub_251036F3C(a1, qword_269B1ADB8);
}

uint64_t sub_251036F3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_251037C50();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  if (qword_26B2109B0 != -1) {
    swift_once();
  }
  id v4 = (id)qword_26B210938;
  return sub_251037C40();
}

uint64_t sub_251036FE0()
{
  return MEMORY[0x270EE1368]();
}

uint64_t sub_251036FF0()
{
  return MEMORY[0x270EE1390]();
}

uint64_t sub_251037000()
{
  return MEMORY[0x270F30FD8]();
}

uint64_t sub_251037010()
{
  return MEMORY[0x270F30FE0]();
}

uint64_t sub_251037020()
{
  return MEMORY[0x270F30FE8]();
}

uint64_t sub_251037030()
{
  return MEMORY[0x270F30FF0]();
}

uint64_t sub_251037040()
{
  return MEMORY[0x270F30FF8]();
}

uint64_t sub_251037050()
{
  return MEMORY[0x270F31000]();
}

uint64_t sub_251037060()
{
  return MEMORY[0x270EEDD10]();
}

uint64_t sub_251037070()
{
  return MEMORY[0x270F31008]();
}

uint64_t sub_251037080()
{
  return MEMORY[0x270EEDFD0]();
}

uint64_t sub_251037090()
{
  return MEMORY[0x270EEE058]();
}

uint64_t sub_2510370A0()
{
  return MEMORY[0x270EEE2C8]();
}

uint64_t sub_2510370B0()
{
  return MEMORY[0x270EEE2F0]();
}

uint64_t sub_2510370C0()
{
  return MEMORY[0x270EEE2F8]();
}

uint64_t sub_2510370D0()
{
  return MEMORY[0x270EEE308]();
}

uint64_t sub_2510370E0()
{
  return MEMORY[0x270EEE328]();
}

uint64_t sub_2510370F0()
{
  return MEMORY[0x270EEE338]();
}

uint64_t sub_251037100()
{
  return MEMORY[0x270EEE3D0]();
}

uint64_t sub_251037110()
{
  return MEMORY[0x270EEE9D0]();
}

uint64_t sub_251037120()
{
  return MEMORY[0x270EEE9D8]();
}

uint64_t sub_251037130()
{
  return MEMORY[0x270EEE9E0]();
}

uint64_t sub_251037140()
{
  return MEMORY[0x270EEE9E8]();
}

uint64_t sub_251037150()
{
  return MEMORY[0x270EEEA10]();
}

uint64_t sub_251037160()
{
  return MEMORY[0x270EEEA48]();
}

uint64_t sub_251037170()
{
  return MEMORY[0x270EFEB18]();
}

uint64_t sub_251037180()
{
  return MEMORY[0x270EEEB40]();
}

uint64_t sub_251037190()
{
  return MEMORY[0x270EEEBC0]();
}

uint64_t sub_2510371A0()
{
  return MEMORY[0x270EEEC38]();
}

uint64_t sub_2510371B0()
{
  return MEMORY[0x270EEEDD8]();
}

uint64_t sub_2510371C0()
{
  return MEMORY[0x270EEEDF0]();
}

uint64_t sub_2510371D0()
{
  return MEMORY[0x270EEF040]();
}

uint64_t sub_2510371E0()
{
  return MEMORY[0x270EEF050]();
}

uint64_t sub_2510371F0()
{
  return MEMORY[0x270EEF058]();
}

uint64_t sub_251037200()
{
  return MEMORY[0x270EEF060]();
}

uint64_t sub_251037210()
{
  return MEMORY[0x270EEF070]();
}

uint64_t sub_251037220()
{
  return MEMORY[0x270EEF808]();
}

uint64_t sub_251037240()
{
  return MEMORY[0x270EFEB28]();
}

uint64_t sub_251037250()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_251037260()
{
  return MEMORY[0x270EEF968]();
}

uint64_t sub_251037270()
{
  return MEMORY[0x270EEFB78]();
}

uint64_t sub_251037280()
{
  return MEMORY[0x270EEFB88]();
}

uint64_t sub_251037290()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t sub_2510372A0()
{
  return MEMORY[0x270EF02B0]();
}

uint64_t sub_2510372B0()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t sub_2510372C0()
{
  return MEMORY[0x270EF0320]();
}

uint64_t sub_2510372D0()
{
  return MEMORY[0x270EF0360]();
}

uint64_t sub_2510372E0()
{
  return MEMORY[0x270EF0428]();
}

uint64_t sub_2510372F0()
{
  return MEMORY[0x270EF0430]();
}

uint64_t sub_251037300()
{
  return MEMORY[0x270EF04D0]();
}

uint64_t sub_251037310()
{
  return MEMORY[0x270EF04E8]();
}

uint64_t sub_251037320()
{
  return MEMORY[0x270EF0508]();
}

uint64_t sub_251037330()
{
  return MEMORY[0x270EF0518]();
}

uint64_t sub_251037340()
{
  return MEMORY[0x270EF05A0]();
}

uint64_t sub_251037350()
{
  return MEMORY[0x270EF05B8]();
}

uint64_t sub_251037360()
{
  return MEMORY[0x270EF0600]();
}

uint64_t sub_251037370()
{
  return MEMORY[0x270EF0610]();
}

uint64_t sub_251037380()
{
  return MEMORY[0x270EF0628]();
}

uint64_t sub_251037390()
{
  return MEMORY[0x270EF0690]();
}

uint64_t sub_2510373A0()
{
  return MEMORY[0x270EF06A8]();
}

uint64_t sub_2510373B0()
{
  return MEMORY[0x270EF06E0]();
}

uint64_t sub_2510373C0()
{
  return MEMORY[0x270EF0898]();
}

uint64_t sub_2510373D0()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t sub_2510373E0()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t sub_2510373F0()
{
  return MEMORY[0x270EF0C20]();
}

uint64_t sub_251037400()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_251037410()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t sub_251037420()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t sub_251037430()
{
  return MEMORY[0x270EF0EE0]();
}

uint64_t sub_251037440()
{
  return MEMORY[0x270EF0EF8]();
}

uint64_t sub_251037450()
{
  return MEMORY[0x270EF0FA0]();
}

uint64_t sub_251037460()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_251037470()
{
  return MEMORY[0x270EF10C8]();
}

uint64_t sub_251037480()
{
  return MEMORY[0x270EF10D8]();
}

uint64_t sub_251037490()
{
  return MEMORY[0x270EF1100]();
}

uint64_t sub_2510374A0()
{
  return MEMORY[0x270EF1110]();
}

uint64_t sub_2510374B0()
{
  return MEMORY[0x270EF12E0]();
}

uint64_t sub_2510374C0()
{
  return MEMORY[0x270EF1330]();
}

uint64_t sub_2510374D0()
{
  return MEMORY[0x270EF1388]();
}

uint64_t sub_2510374E0()
{
  return MEMORY[0x270EF1428]();
}

uint64_t sub_2510374F0()
{
  return MEMORY[0x270EF1440]();
}

uint64_t sub_251037500()
{
  return MEMORY[0x270EF15D0]();
}

uint64_t sub_251037510()
{
  return MEMORY[0x270EF1608]();
}

uint64_t sub_251037520()
{
  return MEMORY[0x270FA11F8]();
}

uint64_t sub_251037530()
{
  return MEMORY[0x270FA1208]();
}

uint64_t sub_251037540()
{
  return MEMORY[0x270FA1220]();
}

uint64_t sub_251037550()
{
  return MEMORY[0x270FA1228]();
}

uint64_t sub_251037560()
{
  return MEMORY[0x270FA1238]();
}

uint64_t sub_251037570()
{
  return MEMORY[0x270FA1250]();
}

uint64_t sub_251037580()
{
  return MEMORY[0x270F31048]();
}

uint64_t sub_251037590()
{
  return MEMORY[0x270F31050]();
}

uint64_t sub_2510375A0()
{
  return MEMORY[0x270F31068]();
}

uint64_t sub_2510375B0()
{
  return MEMORY[0x270F31078]();
}

uint64_t sub_2510375C0()
{
  return MEMORY[0x270F31080]();
}

uint64_t sub_2510375D0()
{
  return MEMORY[0x270F310F0]();
}

uint64_t sub_2510375E0()
{
  return MEMORY[0x270F31108]();
}

uint64_t sub_2510375F0()
{
  return MEMORY[0x270F31118]();
}

uint64_t sub_251037600()
{
  return MEMORY[0x270F31120]();
}

uint64_t sub_251037610()
{
  return MEMORY[0x270F31128]();
}

uint64_t sub_251037620()
{
  return MEMORY[0x270F31130]();
}

uint64_t sub_251037630()
{
  return MEMORY[0x270F31138]();
}

uint64_t sub_251037640()
{
  return MEMORY[0x270F31140]();
}

uint64_t sub_251037650()
{
  return MEMORY[0x270F31188]();
}

uint64_t sub_251037660()
{
  return MEMORY[0x270F31190]();
}

uint64_t sub_251037670()
{
  return MEMORY[0x270F311A0]();
}

uint64_t sub_251037680()
{
  return MEMORY[0x270F311A8]();
}

uint64_t sub_251037690()
{
  return MEMORY[0x270F311B0]();
}

uint64_t sub_2510376A0()
{
  return MEMORY[0x270F311B8]();
}

uint64_t sub_2510376B0()
{
  return MEMORY[0x270F311C0]();
}

uint64_t sub_2510376C0()
{
  return MEMORY[0x270F31200]();
}

uint64_t sub_2510376D0()
{
  return MEMORY[0x270F31208]();
}

uint64_t sub_2510376E0()
{
  return MEMORY[0x270F31210]();
}

uint64_t sub_2510376F0()
{
  return MEMORY[0x270F31220]();
}

uint64_t sub_251037700()
{
  return MEMORY[0x270F31230]();
}

uint64_t sub_251037710()
{
  return MEMORY[0x270F31238]();
}

uint64_t sub_251037720()
{
  return MEMORY[0x270F31240]();
}

uint64_t sub_251037730()
{
  return MEMORY[0x270F31248]();
}

uint64_t sub_251037740()
{
  return MEMORY[0x270F31250]();
}

uint64_t sub_251037750()
{
  return MEMORY[0x270F31290]();
}

uint64_t sub_251037760()
{
  return MEMORY[0x270F31298]();
}

uint64_t sub_251037770()
{
  return MEMORY[0x270F312A0]();
}

uint64_t sub_251037780()
{
  return MEMORY[0x270F312B0]();
}

uint64_t sub_251037790()
{
  return MEMORY[0x270F312C0]();
}

uint64_t sub_2510377A0()
{
  return MEMORY[0x270F31318]();
}

uint64_t sub_2510377B0()
{
  return MEMORY[0x270F31320]();
}

uint64_t sub_2510377C0()
{
  return MEMORY[0x270F31328]();
}

uint64_t sub_2510377D0()
{
  return MEMORY[0x270F31330]();
}

uint64_t sub_2510377E0()
{
  return MEMORY[0x270F31350]();
}

uint64_t sub_2510377F0()
{
  return MEMORY[0x270F31360]();
}

uint64_t sub_251037800()
{
  return MEMORY[0x270F31380]();
}

uint64_t sub_251037810()
{
  return MEMORY[0x270F313A0]();
}

uint64_t sub_251037820()
{
  return MEMORY[0x270F313B0]();
}

uint64_t sub_251037830()
{
  return MEMORY[0x270F313C8]();
}

uint64_t sub_251037840()
{
  return MEMORY[0x270F31460]();
}

uint64_t sub_251037850()
{
  return MEMORY[0x270F31468]();
}

uint64_t sub_251037860()
{
  return MEMORY[0x270F31470]();
}

uint64_t sub_251037870()
{
  return MEMORY[0x270F31488]();
}

uint64_t sub_251037880()
{
  return MEMORY[0x270F31490]();
}

uint64_t sub_251037890()
{
  return MEMORY[0x270F31498]();
}

uint64_t sub_2510378A0()
{
  return MEMORY[0x270F314A0]();
}

uint64_t sub_2510378B0()
{
  return MEMORY[0x270F314A8]();
}

uint64_t sub_2510378C0()
{
  return MEMORY[0x270F314B0]();
}

uint64_t sub_2510378D0()
{
  return MEMORY[0x270F314B8]();
}

uint64_t sub_2510378E0()
{
  return MEMORY[0x270F314C0]();
}

uint64_t _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0()
{
  return MEMORY[0x270F314C8]();
}

uint64_t sub_251037900()
{
  return MEMORY[0x270F314D0]();
}

uint64_t sub_251037910()
{
  return MEMORY[0x270F314D8]();
}

uint64_t sub_251037920()
{
  return MEMORY[0x270F314E0]();
}

uint64_t sub_251037930()
{
  return MEMORY[0x270F314F8]();
}

uint64_t sub_251037940()
{
  return MEMORY[0x270F31500]();
}

uint64_t sub_251037950()
{
  return MEMORY[0x270F31610]();
}

uint64_t sub_251037960()
{
  return MEMORY[0x270F31618]();
}

uint64_t sub_251037970()
{
  return MEMORY[0x270F31620]();
}

uint64_t sub_251037980()
{
  return MEMORY[0x270F31628]();
}

uint64_t sub_251037990()
{
  return MEMORY[0x270F31630]();
}

uint64_t sub_2510379A0()
{
  return MEMORY[0x270F31638]();
}

uint64_t sub_2510379B0()
{
  return MEMORY[0x270F31660]();
}

uint64_t sub_2510379C0()
{
  return MEMORY[0x270F31668]();
}

uint64_t sub_2510379D0()
{
  return MEMORY[0x270F31670]();
}

uint64_t sub_2510379E0()
{
  return MEMORY[0x270F31680]();
}

uint64_t sub_2510379F0()
{
  return MEMORY[0x270F31688]();
}

uint64_t sub_251037A00()
{
  return MEMORY[0x270F31690]();
}

uint64_t sub_251037A10()
{
  return MEMORY[0x270F31698]();
}

uint64_t sub_251037A20()
{
  return MEMORY[0x270F316A0]();
}

uint64_t sub_251037A30()
{
  return MEMORY[0x270F316A8]();
}

uint64_t sub_251037A40()
{
  return MEMORY[0x270F316B0]();
}

uint64_t sub_251037A50()
{
  return MEMORY[0x270F316B8]();
}

uint64_t sub_251037A60()
{
  return MEMORY[0x270F316C0]();
}

uint64_t sub_251037A70()
{
  return MEMORY[0x270F316C8]();
}

uint64_t sub_251037A80()
{
  return MEMORY[0x270F316D0]();
}

uint64_t sub_251037A90()
{
  return MEMORY[0x270F316D8]();
}

uint64_t sub_251037AA0()
{
  return MEMORY[0x270F316E0]();
}

uint64_t sub_251037AB0()
{
  return MEMORY[0x270F31708]();
}

uint64_t sub_251037AD0()
{
  return MEMORY[0x270F31718]();
}

uint64_t sub_251037AE0()
{
  return MEMORY[0x270F31720]();
}

uint64_t sub_251037AF0()
{
  return MEMORY[0x270F31730]();
}

uint64_t sub_251037B00()
{
  return MEMORY[0x270F31740]();
}

uint64_t sub_251037B10()
{
  return MEMORY[0x270F31768]();
}

uint64_t sub_251037B20()
{
  return MEMORY[0x270F31770]();
}

uint64_t sub_251037B30()
{
  return MEMORY[0x270F31778]();
}

uint64_t sub_251037B40()
{
  return MEMORY[0x270F31788]();
}

uint64_t sub_251037B50()
{
  return MEMORY[0x270F31790]();
}

uint64_t sub_251037B60()
{
  return MEMORY[0x270F317A8]();
}

uint64_t sub_251037B70()
{
  return MEMORY[0x270F317B0]();
}

uint64_t sub_251037B80()
{
  return MEMORY[0x270F317D8]();
}

uint64_t sub_251037B90()
{
  return MEMORY[0x270F317E0]();
}

uint64_t sub_251037BA0()
{
  return MEMORY[0x270F317E8]();
}

uint64_t sub_251037BB0()
{
  return MEMORY[0x270F317F0]();
}

uint64_t sub_251037BC0()
{
  return MEMORY[0x270F31820]();
}

uint64_t sub_251037BD0()
{
  return MEMORY[0x270F31828]();
}

uint64_t sub_251037BE0()
{
  return MEMORY[0x270F31830]();
}

uint64_t sub_251037BF0()
{
  return MEMORY[0x270F31838]();
}

uint64_t sub_251037C00()
{
  return MEMORY[0x270F31840]();
}

uint64_t sub_251037C10()
{
  return MEMORY[0x270F34FA0]();
}

uint64_t sub_251037C20()
{
  return MEMORY[0x270F34FA8]();
}

uint64_t sub_251037C30()
{
  return MEMORY[0x270F34FB0]();
}

uint64_t sub_251037C40()
{
  return MEMORY[0x270EEB1B0]();
}

uint64_t sub_251037C50()
{
  return MEMORY[0x270EEB1C0]();
}

uint64_t sub_251037C60()
{
  return MEMORY[0x270FA2C78]();
}

uint64_t sub_251037C70()
{
  return MEMORY[0x270F31848]();
}

uint64_t sub_251037C80()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_251037C90()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_251037CA0()
{
  return MEMORY[0x270EE2AF8]();
}

uint64_t sub_251037CB0()
{
  return MEMORY[0x270EE2B30]();
}

uint64_t sub_251037CC0()
{
  return MEMORY[0x270EE2B38]();
}

uint64_t sub_251037CD0()
{
  return MEMORY[0x270EE2B50]();
}

uint64_t sub_251037CE0()
{
  return MEMORY[0x270EE2B58]();
}

uint64_t sub_251037CF0()
{
  return MEMORY[0x270EE2B60]();
}

uint64_t sub_251037D00()
{
  return MEMORY[0x270EE2B68]();
}

uint64_t sub_251037D10()
{
  return MEMORY[0x270EE2B70]();
}

uint64_t sub_251037D20()
{
  return MEMORY[0x270EE2B78]();
}

uint64_t sub_251037D30()
{
  return MEMORY[0x270EE2BA8]();
}

uint64_t sub_251037D40()
{
  return MEMORY[0x270EE2BB8]();
}

uint64_t sub_251037D50()
{
  return MEMORY[0x270EE2BC0]();
}

uint64_t sub_251037D60()
{
  return MEMORY[0x270EE2BC8]();
}

uint64_t sub_251037D70()
{
  return MEMORY[0x270EE2BD8]();
}

uint64_t sub_251037D80()
{
  return MEMORY[0x270EE2BE8]();
}

uint64_t sub_251037D90()
{
  return MEMORY[0x270EE2BF0]();
}

uint64_t sub_251037DA0()
{
  return MEMORY[0x270EE2C38]();
}

uint64_t sub_251037DB0()
{
  return MEMORY[0x270EE2C50]();
}

uint64_t sub_251037DC0()
{
  return MEMORY[0x270EE2C58]();
}

uint64_t sub_251037DD0()
{
  return MEMORY[0x270EE2C70]();
}

uint64_t sub_251037DE0()
{
  return MEMORY[0x270EE2C78]();
}

uint64_t sub_251037DF0()
{
  return MEMORY[0x270EE2C90]();
}

uint64_t sub_251037E00()
{
  return MEMORY[0x270EE2CA0]();
}

uint64_t sub_251037E10()
{
  return MEMORY[0x270EE2CD8]();
}

uint64_t sub_251037E20()
{
  return MEMORY[0x270EE2CE8]();
}

uint64_t sub_251037E30()
{
  return MEMORY[0x270EE2D18]();
}

uint64_t sub_251037E40()
{
  return MEMORY[0x270EE2D20]();
}

uint64_t sub_251037E50()
{
  return MEMORY[0x270EE2D30]();
}

uint64_t sub_251037E60()
{
  return MEMORY[0x270EE2D88]();
}

uint64_t sub_251037E70()
{
  return MEMORY[0x270EE2D90]();
}

uint64_t sub_251037E80()
{
  return MEMORY[0x270EE2DE8]();
}

uint64_t sub_251037E90()
{
  return MEMORY[0x270EE2DF0]();
}

uint64_t sub_251037EA0()
{
  return MEMORY[0x270EE2DF8]();
}

uint64_t sub_251037EB0()
{
  return MEMORY[0x270EE2E00]();
}

uint64_t sub_251037EC0()
{
  return MEMORY[0x270EE2E30]();
}

uint64_t sub_251037ED0()
{
  return MEMORY[0x270EE2E48]();
}

uint64_t sub_251037EE0()
{
  return MEMORY[0x270EE2E50]();
}

uint64_t sub_251037EF0()
{
  return MEMORY[0x270EE2E58]();
}

uint64_t sub_251037F00()
{
  return MEMORY[0x270EE2EC8]();
}

uint64_t sub_251037F10()
{
  return MEMORY[0x270EE2ED0]();
}

uint64_t sub_251037F20()
{
  return MEMORY[0x270EE2ED8]();
}

uint64_t sub_251037F30()
{
  return MEMORY[0x270EE2EE0]();
}

uint64_t sub_251037F40()
{
  return MEMORY[0x270EE2EE8]();
}

uint64_t sub_251037F50()
{
  return MEMORY[0x270EE2EF0]();
}

uint64_t sub_251037F60()
{
  return MEMORY[0x270EE2F10]();
}

uint64_t sub_251037F70()
{
  return MEMORY[0x270EE2F20]();
}

uint64_t sub_251037F80()
{
  return MEMORY[0x270EE2F98]();
}

uint64_t sub_251037F90()
{
  return MEMORY[0x270EE2FA8]();
}

uint64_t sub_251037FA0()
{
  return MEMORY[0x270EE2FD0]();
}

uint64_t sub_251037FB0()
{
  return MEMORY[0x270EE2FD8]();
}

uint64_t sub_251037FC0()
{
  return MEMORY[0x270EE3008]();
}

uint64_t sub_251037FD0()
{
  return MEMORY[0x270EE3018]();
}

uint64_t sub_251037FE0()
{
  return MEMORY[0x270EE3028]();
}

uint64_t sub_251037FF0()
{
  return MEMORY[0x270EE3030]();
}

uint64_t sub_251038000()
{
  return MEMORY[0x270EE3040]();
}

uint64_t sub_251038010()
{
  return MEMORY[0x270EE3048]();
}

uint64_t sub_251038020()
{
  return MEMORY[0x270EE3058]();
}

uint64_t sub_251038030()
{
  return MEMORY[0x270EFEBA0]();
}

uint64_t sub_251038040()
{
  return MEMORY[0x270EFEBB8]();
}

uint64_t sub_251038050()
{
  return MEMORY[0x270EFECF8]();
}

uint64_t sub_251038060()
{
  return MEMORY[0x270EFEEC0]();
}

uint64_t sub_251038070()
{
  return MEMORY[0x270EFEF10]();
}

uint64_t sub_251038080()
{
  return MEMORY[0x270EFEF30]();
}

uint64_t sub_251038090()
{
  return MEMORY[0x270EFEFD0]();
}

uint64_t sub_2510380A0()
{
  return MEMORY[0x270EFF128]();
}

uint64_t sub_2510380B0()
{
  return MEMORY[0x270EFF1D8]();
}

uint64_t sub_2510380C0()
{
  return MEMORY[0x270EFF1E8]();
}

uint64_t sub_2510380D0()
{
  return MEMORY[0x270EFF1F0]();
}

uint64_t sub_2510380E0()
{
  return MEMORY[0x270EFF3F8]();
}

uint64_t sub_2510380F0()
{
  return MEMORY[0x270EFF408]();
}

uint64_t sub_251038100()
{
  return MEMORY[0x270EFF418]();
}

uint64_t sub_251038110()
{
  return MEMORY[0x270EFF510]();
}

uint64_t sub_251038120()
{
  return MEMORY[0x270EFF520]();
}

uint64_t sub_251038130()
{
  return MEMORY[0x270EFF538]();
}

uint64_t sub_251038140()
{
  return MEMORY[0x270EFF558]();
}

uint64_t sub_251038150()
{
  return MEMORY[0x270EFF598]();
}

uint64_t sub_251038160()
{
  return MEMORY[0x270EFF5E0]();
}

uint64_t sub_251038170()
{
  return MEMORY[0x270EFF5E8]();
}

uint64_t sub_251038180()
{
  return MEMORY[0x270EFF620]();
}

uint64_t sub_251038190()
{
  return MEMORY[0x270EFF640]();
}

uint64_t sub_2510381A0()
{
  return MEMORY[0x270EFF6D0]();
}

uint64_t sub_2510381B0()
{
  return MEMORY[0x270EFF7B8]();
}

uint64_t sub_2510381C0()
{
  return MEMORY[0x270EFF7C0]();
}

uint64_t sub_2510381D0()
{
  return MEMORY[0x270EFF918]();
}

uint64_t sub_2510381E0()
{
  return MEMORY[0x270EFF9A0]();
}

uint64_t sub_2510381F0()
{
  return MEMORY[0x270EFFA08]();
}

uint64_t sub_251038200()
{
  return MEMORY[0x270EFFA10]();
}

uint64_t sub_251038210()
{
  return MEMORY[0x270EFFA68]();
}

uint64_t sub_251038220()
{
  return MEMORY[0x270EFFA78]();
}

uint64_t sub_251038240()
{
  return MEMORY[0x270EFFDB8]();
}

uint64_t sub_251038250()
{
  return MEMORY[0x270EFFEB0]();
}

uint64_t sub_251038260()
{
  return MEMORY[0x270EFFEE0]();
}

uint64_t sub_251038270()
{
  return MEMORY[0x270F001A8]();
}

uint64_t sub_251038280()
{
  return MEMORY[0x270F003E0]();
}

uint64_t sub_251038290()
{
  return MEMORY[0x270F003F0]();
}

uint64_t sub_2510382A0()
{
  return MEMORY[0x270F00400]();
}

uint64_t sub_2510382B0()
{
  return MEMORY[0x270F00418]();
}

uint64_t sub_2510382C0()
{
  return MEMORY[0x270F00430]();
}

uint64_t sub_2510382D0()
{
  return MEMORY[0x270F00438]();
}

uint64_t sub_2510382E0()
{
  return MEMORY[0x270F00448]();
}

uint64_t sub_2510382F0()
{
  return MEMORY[0x270F00670]();
}

uint64_t sub_251038300()
{
  return MEMORY[0x270F00688]();
}

uint64_t sub_251038310()
{
  return MEMORY[0x270F00860]();
}

uint64_t sub_251038320()
{
  return MEMORY[0x270F00868]();
}

uint64_t sub_251038330()
{
  return MEMORY[0x270F008D0]();
}

uint64_t sub_251038340()
{
  return MEMORY[0x270F00A00]();
}

uint64_t sub_251038350()
{
  return MEMORY[0x270F00A78]();
}

uint64_t sub_251038360()
{
  return MEMORY[0x270F00A88]();
}

uint64_t sub_251038370()
{
  return MEMORY[0x270F00B78]();
}

uint64_t sub_251038380()
{
  return MEMORY[0x270F00B80]();
}

uint64_t sub_251038390()
{
  return MEMORY[0x270F00CD8]();
}

uint64_t sub_2510383A0()
{
  return MEMORY[0x270F00D80]();
}

uint64_t sub_2510383B0()
{
  return MEMORY[0x270F00D90]();
}

uint64_t sub_2510383C0()
{
  return MEMORY[0x270F00E18]();
}

uint64_t sub_2510383D0()
{
  return MEMORY[0x270F00E20]();
}

uint64_t sub_2510383E0()
{
  return MEMORY[0x270F07348]();
}

uint64_t sub_2510383F0()
{
  return MEMORY[0x270F07370]();
}

uint64_t sub_251038400()
{
  return MEMORY[0x270F073D8]();
}

uint64_t sub_251038410()
{
  return MEMORY[0x270F073F0]();
}

uint64_t sub_251038420()
{
  return MEMORY[0x270F00E88]();
}

uint64_t sub_251038430()
{
  return MEMORY[0x270F00E98]();
}

uint64_t sub_251038440()
{
  return MEMORY[0x270F00ED8]();
}

uint64_t sub_251038450()
{
  return MEMORY[0x270F00EE0]();
}

uint64_t sub_251038460()
{
  return MEMORY[0x270F00F10]();
}

uint64_t sub_251038470()
{
  return MEMORY[0x270F00F20]();
}

uint64_t sub_251038480()
{
  return MEMORY[0x270F01038]();
}

uint64_t sub_251038490()
{
  return MEMORY[0x270F01070]();
}

uint64_t sub_2510384A0()
{
  return MEMORY[0x270F01198]();
}

uint64_t sub_2510384B0()
{
  return MEMORY[0x270F011A0]();
}

uint64_t sub_2510384C0()
{
  return MEMORY[0x270F01270]();
}

uint64_t sub_2510384D0()
{
  return MEMORY[0x270F01348]();
}

uint64_t sub_2510384E0()
{
  return MEMORY[0x270F01358]();
}

uint64_t sub_2510384F0()
{
  return MEMORY[0x270F01370]();
}

uint64_t sub_251038500()
{
  return MEMORY[0x270F01378]();
}

uint64_t sub_251038510()
{
  return MEMORY[0x270F01388]();
}

uint64_t sub_251038520()
{
  return MEMORY[0x270F01510]();
}

uint64_t sub_251038530()
{
  return MEMORY[0x270F01520]();
}

uint64_t sub_251038540()
{
  return MEMORY[0x270F073F8]();
}

uint64_t sub_251038550()
{
  return MEMORY[0x270F07400]();
}

uint64_t sub_251038560()
{
  return MEMORY[0x270F07408]();
}

uint64_t sub_251038570()
{
  return MEMORY[0x270F07410]();
}

uint64_t sub_251038580()
{
  return MEMORY[0x270F01800]();
}

uint64_t sub_251038590()
{
  return MEMORY[0x270F01AE0]();
}

uint64_t sub_2510385A0()
{
  return MEMORY[0x270F01BF8]();
}

uint64_t sub_2510385B0()
{
  return MEMORY[0x270F01C58]();
}

uint64_t sub_2510385C0()
{
  return MEMORY[0x270F01C68]();
}

uint64_t sub_2510385D0()
{
  return MEMORY[0x270F01D30]();
}

uint64_t sub_2510385E0()
{
  return MEMORY[0x270F01D38]();
}

uint64_t sub_2510385F0()
{
  return MEMORY[0x270F01DA0]();
}

uint64_t sub_251038600()
{
  return MEMORY[0x270F02240]();
}

uint64_t sub_251038610()
{
  return MEMORY[0x270F02370]();
}

uint64_t sub_251038620()
{
  return MEMORY[0x270F023A0]();
}

uint64_t sub_251038630()
{
  return MEMORY[0x270F024D8]();
}

uint64_t sub_251038640()
{
  return MEMORY[0x270F024E0]();
}

uint64_t sub_251038650()
{
  return MEMORY[0x270F024E8]();
}

uint64_t sub_251038660()
{
  return MEMORY[0x270F07428]();
}

uint64_t sub_251038670()
{
  return MEMORY[0x270F025F0]();
}

uint64_t sub_251038680()
{
  return MEMORY[0x270F02798]();
}

uint64_t sub_251038690()
{
  return MEMORY[0x270F027A8]();
}

uint64_t sub_2510386A0()
{
  return MEMORY[0x270F029E0]();
}

uint64_t sub_2510386B0()
{
  return MEMORY[0x270F029F0]();
}

uint64_t sub_2510386C0()
{
  return MEMORY[0x270F029F8]();
}

uint64_t sub_2510386D0()
{
  return MEMORY[0x270F02A00]();
}

uint64_t sub_2510386E0()
{
  return MEMORY[0x270F02A20]();
}

uint64_t sub_2510386F0()
{
  return MEMORY[0x270F02A38]();
}

uint64_t sub_251038700()
{
  return MEMORY[0x270F02A48]();
}

uint64_t sub_251038710()
{
  return MEMORY[0x270F02A60]();
}

uint64_t sub_251038720()
{
  return MEMORY[0x270F02A68]();
}

uint64_t sub_251038730()
{
  return MEMORY[0x270F02A78]();
}

uint64_t sub_251038740()
{
  return MEMORY[0x270F02B10]();
}

uint64_t sub_251038750()
{
  return MEMORY[0x270F02B18]();
}

uint64_t sub_251038760()
{
  return MEMORY[0x270F02BA8]();
}

uint64_t sub_251038770()
{
  return MEMORY[0x270F02BF8]();
}

uint64_t sub_251038780()
{
  return MEMORY[0x270F02C10]();
}

uint64_t sub_251038790()
{
  return MEMORY[0x270F02C40]();
}

uint64_t sub_2510387A0()
{
  return MEMORY[0x270F02C50]();
}

uint64_t sub_2510387B0()
{
  return MEMORY[0x270F02C68]();
}

uint64_t sub_2510387C0()
{
  return MEMORY[0x270F02C98]();
}

uint64_t sub_2510387D0()
{
  return MEMORY[0x270F02CB0]();
}

uint64_t sub_2510387E0()
{
  return MEMORY[0x270F02CC0]();
}

uint64_t sub_2510387F0()
{
  return MEMORY[0x270F02CD0]();
}

uint64_t sub_251038800()
{
  return MEMORY[0x270F02CE8]();
}

uint64_t sub_251038810()
{
  return MEMORY[0x270F02D08]();
}

uint64_t sub_251038820()
{
  return MEMORY[0x270F02D30]();
}

uint64_t sub_251038830()
{
  return MEMORY[0x270F02EA0]();
}

uint64_t sub_251038840()
{
  return MEMORY[0x270F02EE8]();
}

uint64_t sub_251038850()
{
  return MEMORY[0x270F02EF0]();
}

uint64_t sub_251038860()
{
  return MEMORY[0x270F03010]();
}

uint64_t sub_251038870()
{
  return MEMORY[0x270F030A8]();
}

uint64_t sub_251038880()
{
  return MEMORY[0x270F030C0]();
}

uint64_t sub_251038890()
{
  return MEMORY[0x270F030C8]();
}

uint64_t sub_2510388A0()
{
  return MEMORY[0x270F03250]();
}

uint64_t sub_2510388B0()
{
  return MEMORY[0x270EE3070]();
}

uint64_t sub_2510388C0()
{
  return MEMORY[0x270EE3088]();
}

uint64_t sub_2510388D0()
{
  return MEMORY[0x270EE3098]();
}

uint64_t sub_2510388E0()
{
  return MEMORY[0x270EE30B0]();
}

uint64_t sub_2510388F0()
{
  return MEMORY[0x270EE30B8]();
}

uint64_t sub_251038900()
{
  return MEMORY[0x270EE30C8]();
}

uint64_t sub_251038910()
{
  return MEMORY[0x270F07430]();
}

uint64_t sub_251038920()
{
  return MEMORY[0x270F07438]();
}

uint64_t sub_251038930()
{
  return MEMORY[0x270F07458]();
}

uint64_t sub_251038940()
{
  return MEMORY[0x270F032C0]();
}

uint64_t sub_251038950()
{
  return MEMORY[0x270F032D0]();
}

uint64_t sub_251038960()
{
  return MEMORY[0x270F03388]();
}

uint64_t sub_251038970()
{
  return MEMORY[0x270F03428]();
}

uint64_t sub_251038980()
{
  return MEMORY[0x270F036C0]();
}

uint64_t sub_251038990()
{
  return MEMORY[0x270F03790]();
}

uint64_t sub_2510389A0()
{
  return MEMORY[0x270F03858]();
}

uint64_t sub_2510389B0()
{
  return MEMORY[0x270F039B0]();
}

uint64_t sub_2510389C0()
{
  return MEMORY[0x270F03A40]();
}

uint64_t sub_2510389D0()
{
  return MEMORY[0x270F03B20]();
}

uint64_t sub_2510389E0()
{
  return MEMORY[0x270F03BC0]();
}

uint64_t sub_2510389F0()
{
  return MEMORY[0x270F03D30]();
}

uint64_t sub_251038A00()
{
  return MEMORY[0x270F03FF8]();
}

uint64_t sub_251038A10()
{
  return MEMORY[0x270F040D8]();
}

uint64_t sub_251038A20()
{
  return MEMORY[0x270F04110]();
}

uint64_t sub_251038A30()
{
  return MEMORY[0x270F04188]();
}

uint64_t sub_251038A40()
{
  return MEMORY[0x270F04260]();
}

uint64_t sub_251038A50()
{
  return MEMORY[0x270F04350]();
}

uint64_t sub_251038A60()
{
  return MEMORY[0x270F04378]();
}

uint64_t sub_251038A70()
{
  return MEMORY[0x270F043C0]();
}

uint64_t sub_251038A80()
{
  return MEMORY[0x270F043D8]();
}

uint64_t sub_251038A90()
{
  return MEMORY[0x270F04410]();
}

uint64_t sub_251038AA0()
{
  return MEMORY[0x270F04428]();
}

uint64_t sub_251038AB0()
{
  return MEMORY[0x270F04460]();
}

uint64_t sub_251038AC0()
{
  return MEMORY[0x270F04478]();
}

uint64_t sub_251038AD0()
{
  return MEMORY[0x270F04498]();
}

uint64_t sub_251038AE0()
{
  return MEMORY[0x270F044E8]();
}

uint64_t sub_251038AF0()
{
  return MEMORY[0x270F044F0]();
}

uint64_t sub_251038B00()
{
  return MEMORY[0x270F04550]();
}

uint64_t sub_251038B10()
{
  return MEMORY[0x270F04558]();
}

uint64_t sub_251038B20()
{
  return MEMORY[0x270F04598]();
}

uint64_t sub_251038B30()
{
  return MEMORY[0x270F04620]();
}

uint64_t sub_251038B40()
{
  return MEMORY[0x270F04650]();
}

uint64_t sub_251038B50()
{
  return MEMORY[0x270F046C8]();
}

uint64_t sub_251038B60()
{
  return MEMORY[0x270F046F0]();
}

uint64_t sub_251038B70()
{
  return MEMORY[0x270F04708]();
}

uint64_t sub_251038BA0()
{
  return MEMORY[0x270F047D8]();
}

uint64_t sub_251038BC0()
{
  return MEMORY[0x270F047E8]();
}

uint64_t sub_251038BE0()
{
  return MEMORY[0x270F04950]();
}

uint64_t sub_251038BF0()
{
  return MEMORY[0x270F04960]();
}

uint64_t sub_251038C00()
{
  return MEMORY[0x270F04AF0]();
}

uint64_t sub_251038C10()
{
  return MEMORY[0x270F04AF8]();
}

uint64_t sub_251038C20()
{
  return MEMORY[0x270F04B08]();
}

uint64_t sub_251038C30()
{
  return MEMORY[0x270F04B10]();
}

uint64_t sub_251038C40()
{
  return MEMORY[0x270F04B80]();
}

uint64_t sub_251038C50()
{
  return MEMORY[0x270F04C18]();
}

uint64_t sub_251038C60()
{
  return MEMORY[0x270EE3100]();
}

uint64_t sub_251038C70()
{
  return MEMORY[0x270EE3108]();
}

uint64_t sub_251038C80()
{
  return MEMORY[0x270F04C90]();
}

uint64_t sub_251038C90()
{
  return MEMORY[0x270F04CC0]();
}

uint64_t sub_251038CA0()
{
  return MEMORY[0x270F04EA0]();
}

uint64_t sub_251038CB0()
{
  return MEMORY[0x270F04EB0]();
}

uint64_t sub_251038CC0()
{
  return MEMORY[0x270F04EC8]();
}

uint64_t sub_251038CD0()
{
  return MEMORY[0x270F04ED8]();
}

uint64_t sub_251038CE0()
{
  return MEMORY[0x270F05010]();
}

uint64_t sub_251038CF0()
{
  return MEMORY[0x270F05058]();
}

uint64_t sub_251038D00()
{
  return MEMORY[0x270F05078]();
}

uint64_t sub_251038D10()
{
  return MEMORY[0x270F05088]();
}

uint64_t sub_251038D20()
{
  return MEMORY[0x270F05098]();
}

uint64_t sub_251038D30()
{
  return MEMORY[0x270F050E8]();
}

uint64_t sub_251038D40()
{
  return MEMORY[0x270F050F0]();
}

uint64_t sub_251038D50()
{
  return MEMORY[0x270F05140]();
}

uint64_t sub_251038D60()
{
  return MEMORY[0x270F05170]();
}

uint64_t sub_251038D70()
{
  return MEMORY[0x270F05198]();
}

uint64_t sub_251038D80()
{
  return MEMORY[0x270F05320]();
}

uint64_t sub_251038D90()
{
  return MEMORY[0x270F05330]();
}

uint64_t sub_251038DA0()
{
  return MEMORY[0x270F05340]();
}

uint64_t sub_251038DB0()
{
  return MEMORY[0x270F05358]();
}

uint64_t sub_251038DC0()
{
  return MEMORY[0x270F05398]();
}

uint64_t sub_251038DD0()
{
  return MEMORY[0x270F053B8]();
}

uint64_t sub_251038DE0()
{
  return MEMORY[0x270F053C8]();
}

uint64_t sub_251038DF0()
{
  return MEMORY[0x270F053D0]();
}

uint64_t sub_251038E00()
{
  return MEMORY[0x270F053D8]();
}

uint64_t sub_251038E10()
{
  return MEMORY[0x270FA0BA8]();
}

uint64_t sub_251038E20()
{
  return MEMORY[0x270FA0BF0]();
}

uint64_t sub_251038E30()
{
  return MEMORY[0x270EF3280]();
}

uint64_t sub_251038E40()
{
  return MEMORY[0x270EF3288]();
}

uint64_t sub_251038E50()
{
  return MEMORY[0x270EF3290]();
}

uint64_t sub_251038E60()
{
  return MEMORY[0x270EF3298]();
}

uint64_t sub_251038E70()
{
  return MEMORY[0x270EF32A0]();
}

uint64_t sub_251038E80()
{
  return MEMORY[0x270EF32A8]();
}

uint64_t sub_251038E90()
{
  return MEMORY[0x270EF3328]();
}

uint64_t sub_251038EA0()
{
  return MEMORY[0x270EF3338]();
}

uint64_t sub_251038EB0()
{
  return MEMORY[0x270EF3350]();
}

uint64_t sub_251038EC0()
{
  return MEMORY[0x270EF3388]();
}

uint64_t sub_251038ED0()
{
  return MEMORY[0x270EF3390]();
}

uint64_t sub_251038EE0()
{
  return MEMORY[0x270F074A8]();
}

uint64_t sub_251038EF0()
{
  return MEMORY[0x270F07550]();
}

uint64_t sub_251038F00()
{
  return MEMORY[0x270F07558]();
}

uint64_t sub_251038F10()
{
  return MEMORY[0x270F07560]();
}

uint64_t sub_251038F20()
{
  return MEMORY[0x270F07570]();
}

uint64_t sub_251038F30()
{
  return MEMORY[0x270F07578]();
}

uint64_t sub_251038F40()
{
  return MEMORY[0x270F07580]();
}

uint64_t sub_251038F50()
{
  return MEMORY[0x270F07608]();
}

uint64_t sub_251038F60()
{
  return MEMORY[0x270F07698]();
}

uint64_t sub_251038F70()
{
  return MEMORY[0x270F076A0]();
}

uint64_t sub_251038F80()
{
  return MEMORY[0x270F076E8]();
}

uint64_t sub_251038FA0()
{
  return MEMORY[0x270F07788]();
}

uint64_t sub_251038FB0()
{
  return MEMORY[0x270F07790]();
}

uint64_t sub_251038FC0()
{
  return MEMORY[0x270F077A0]();
}

uint64_t sub_251038FD0()
{
  return MEMORY[0x270F077B8]();
}

uint64_t sub_251038FE0()
{
  return MEMORY[0x270F07848]();
}

uint64_t sub_251038FF0()
{
  return MEMORY[0x270F07850]();
}

uint64_t sub_251039000()
{
  return MEMORY[0x270F078B8]();
}

uint64_t sub_251039010()
{
  return MEMORY[0x270F079F0]();
}

uint64_t sub_251039020()
{
  return MEMORY[0x270F079F8]();
}

uint64_t sub_251039030()
{
  return MEMORY[0x270EF1808]();
}

uint64_t sub_251039040()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_251039050()
{
  return MEMORY[0x270EF1840]();
}

uint64_t sub_251039060()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_251039070()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_251039080()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_251039090()
{
  return MEMORY[0x270F9D328]();
}

uint64_t sub_2510390A0()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_2510390B0()
{
  return MEMORY[0x270F9D490]();
}

uint64_t sub_2510390C0()
{
  return MEMORY[0x270F9D498]();
}

uint64_t sub_2510390D0()
{
  return MEMORY[0x270F9D550]();
}

uint64_t sub_2510390E0()
{
  return MEMORY[0x270F9D560]();
}

uint64_t sub_2510390F0()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_251039100()
{
  return MEMORY[0x270EF18D0]();
}

uint64_t sub_251039110()
{
  return MEMORY[0x270EF18E0]();
}

uint64_t sub_251039120()
{
  return MEMORY[0x270EF18F0]();
}

uint64_t sub_251039130()
{
  return MEMORY[0x270EF1908]();
}

uint64_t sub_251039140()
{
  return MEMORY[0x270EF1918]();
}

uint64_t sub_251039150()
{
  return MEMORY[0x270EF1928]();
}

uint64_t sub_251039160()
{
  return MEMORY[0x270EF1938]();
}

uint64_t sub_251039170()
{
  return MEMORY[0x270EF1950]();
}

uint64_t sub_251039180()
{
  return MEMORY[0x270EF1958]();
}

uint64_t sub_251039190()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_2510391A0()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_2510391B0()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_2510391C0()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_2510391D0()
{
  return MEMORY[0x270EF1AF8]();
}

uint64_t sub_2510391E0()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_2510391F0()
{
  return MEMORY[0x270F9D600]();
}

uint64_t sub_251039200()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_251039210()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_251039220()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_251039230()
{
  return MEMORY[0x270F9D910]();
}

uint64_t sub_251039240()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t sub_251039250()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_251039260()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_251039270()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_251039280()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t sub_251039290()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_2510392A0()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t sub_2510392C0()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t sub_2510392D0()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t sub_2510392E0()
{
  return MEMORY[0x270FA1EC0]();
}

uint64_t sub_2510392F0()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t sub_251039300()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t sub_251039310()
{
  return MEMORY[0x270FA1FB0]();
}

uint64_t sub_251039320()
{
  return MEMORY[0x270FA20F0]();
}

uint64_t sub_251039340()
{
  return MEMORY[0x270FA2110]();
}

uint64_t sub_251039350()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t sub_251039360()
{
  return MEMORY[0x270EF1C98]();
}

uint64_t sub_251039370()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_251039380()
{
  return MEMORY[0x270F9E330]();
}

uint64_t sub_251039390()
{
  return MEMORY[0x270F31850]();
}

uint64_t sub_2510393A0()
{
  return MEMORY[0x270F31858]();
}

uint64_t sub_2510393B0()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_2510393C0()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t sub_2510393D0()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_2510393E0()
{
  return MEMORY[0x270EF33F8]();
}

uint64_t sub_2510393F0()
{
  return MEMORY[0x270EE58C8]();
}

uint64_t sub_251039400()
{
  return MEMORY[0x270F31860]();
}

uint64_t sub_251039410()
{
  return MEMORY[0x270F31870]();
}

uint64_t sub_251039430()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t sub_251039440()
{
  return MEMORY[0x270EF1FD8]();
}

uint64_t sub_251039450()
{
  return MEMORY[0x270EF1FE8]();
}

uint64_t sub_251039460()
{
  return MEMORY[0x270EF1FF8]();
}

uint64_t sub_251039470()
{
  return MEMORY[0x270FA1170]();
}

uint64_t sub_251039480()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_251039490()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_2510394A0()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_2510394B0()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_2510394C0()
{
  return MEMORY[0x270F9E570]();
}

uint64_t sub_2510394D0()
{
  return MEMORY[0x270F9E578]();
}

uint64_t sub_2510394E0()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t sub_2510394F0()
{
  return MEMORY[0x270EF25E0]();
}

uint64_t sub_251039500()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_251039510()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_251039520()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_251039530()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_251039540()
{
  return MEMORY[0x270F9E978]();
}

uint64_t sub_251039550()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_251039560()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_251039570()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_251039580()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t sub_251039590()
{
  return MEMORY[0x270F9EA90]();
}

uint64_t sub_2510395A0()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t sub_2510395B0()
{
  return MEMORY[0x270F9EAE0]();
}

uint64_t sub_2510395C0()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_2510395D0()
{
  return MEMORY[0x270FA21A0]();
}

uint64_t sub_2510395E0()
{
  return MEMORY[0x270FA21A8]();
}

uint64_t sub_2510395F0()
{
  return MEMORY[0x270FA21B0]();
}

uint64_t sub_251039600()
{
  return MEMORY[0x270F9ECD8]();
}

uint64_t sub_251039610()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_251039620()
{
  return MEMORY[0x270F9EFB0]();
}

uint64_t sub_251039630()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_251039640()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_251039650()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_251039660()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_251039670()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_251039680()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_251039690()
{
  return MEMORY[0x270F9F0B8]();
}

uint64_t sub_2510396A0()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_2510396B0()
{
  return MEMORY[0x270F9F0C8]();
}

uint64_t sub_2510396D0()
{
  return MEMORY[0x270F9F250]();
}

uint64_t sub_2510396E0()
{
  return MEMORY[0x270F9F258]();
}

uint64_t sub_2510396F0()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t sub_251039700()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t sub_251039710()
{
  return MEMORY[0x270F9F2F0]();
}

uint64_t sub_251039720()
{
  return MEMORY[0x270F9F2F8]();
}

uint64_t sub_251039730()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_251039740()
{
  return MEMORY[0x270F9F360]();
}

uint64_t sub_251039750()
{
  return MEMORY[0x270F9F390]();
}

uint64_t sub_251039760()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t sub_251039770()
{
  return MEMORY[0x270F9F428]();
}

uint64_t sub_251039780()
{
  return MEMORY[0x270F9F430]();
}

uint64_t sub_251039790()
{
  return MEMORY[0x270F9F438]();
}

uint64_t sub_2510397A0()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_2510397B0()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_2510397C0()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_2510397D0()
{
  return MEMORY[0x270F9F4F8]();
}

uint64_t sub_2510397F0()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_251039800()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_251039810()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_251039820()
{
  return MEMORY[0x270FA2378]();
}

uint64_t sub_251039840()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t sub_251039850()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_251039860()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_251039870()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_251039880()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_251039890()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_2510398A0()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_2510398B0()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_2510398C0()
{
  return MEMORY[0x270F9FDD0]();
}

uint64_t sub_2510398D0()
{
  return MEMORY[0x270EF28B0]();
}

uint64_t sub_2510398E0()
{
  return MEMORY[0x270EF28B8]();
}

uint64_t sub_2510398F0()
{
  return MEMORY[0x270EF29F0]();
}

uint64_t sub_251039900()
{
  return MEMORY[0x270EF2A10]();
}

uint64_t sub_251039910()
{
  return MEMORY[0x270F318A8]();
}

uint64_t sub_251039940()
{
  return MEMORY[0x270FA0128]();
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _HKGenerateDefaultUnitForQuantityType()
{
  return MEMORY[0x270EF3960]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x270FA0238]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x270FA0350]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x270FA0358]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x270FA03F8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x270FA0420]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}