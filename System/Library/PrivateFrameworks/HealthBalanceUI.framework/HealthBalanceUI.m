void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void type metadata accessor for HKMCPregnancyState(uint64_t a1)
{
}

uint64_t sub_250F20EEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  sub_251038C50();
  MEMORY[0x270FA5388]();
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F21FD8();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388]();
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F22088(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388]();
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F220B0(0);
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388]();
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *MEMORY[0x263F19860];
  uint64_t v17 = sub_2510384E0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v3, v16, v17);
  uint64_t v18 = *(void *)(v1 + 96);
  v19 = (uint64_t (*)(void))MEMORY[0x263F1B7A0];
  sub_250F220D8((uint64_t)v3, (uint64_t)v7, MEMORY[0x263F1B7A0]);
  *(void *)&v7[*(int *)(v5 + 60)] = v18;
  *(_WORD *)&v7[*(int *)(v5 + 64)] = 256;
  swift_retain();
  sub_250F221CC((uint64_t)v3, v19);
  double v20 = *(double *)(v1 + 8) - *(double *)v1;
  sub_251038D00();
  sub_251038150();
  sub_250F220D8((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))sub_250F21FD8);
  v21 = &v11[*(int *)(v9 + 44)];
  long long v22 = v31;
  *(_OWORD *)v21 = v30;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v32;
  sub_250F221CC((uint64_t)v7, (uint64_t (*)(void))sub_250F21FD8);
  sub_250F220D8((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))sub_250F22088);
  v23 = &v15[*(int *)(v13 + 44)];
  *(void *)v23 = 0;
  *((double *)v23 + 1) = v20 * 0.5;
  sub_250F221CC((uint64_t)v11, (uint64_t (*)(void))sub_250F22088);
  double v24 = sub_250F21200();
  uint64_t v25 = v29;
  sub_250F220D8((uint64_t)v15, v29, (uint64_t (*)(void))sub_250F220B0);
  sub_250F22140(0);
  *(double *)(v25 + *(int *)(v26 + 36)) = v24;
  return sub_250F221CC((uint64_t)v15, (uint64_t (*)(void))sub_250F220B0);
}

double sub_250F21200()
{
  uint64_t v1 = *((void *)v0 + 2);
  double v2 = v0[6];
  if (v1)
  {
    uint64_t v3 = *((void *)v0 + 3);
  }
  else
  {
    if (qword_269B12BB8 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_269B1AD38;
    swift_getKeyPath();
    sub_250F21AA0((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
    sub_251037530();
    swift_release();
    uint64_t v3 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  unint64_t v5 = *(void *)(v3 + 16);
  sub_250F22234(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double v6 = 0.0;
  if (v5 >= 2)
  {
    if (v1)
    {
      double v6 = v2;
    }
    else
    {
      if (qword_269B12BB8 != -1) {
        swift_once();
      }
      uint64_t v7 = qword_269B1AD38;
      swift_getKeyPath();
      sub_250F21AA0((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
      sub_251037530();
      swift_release();
      double v6 = *(double *)(v7 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_250F22234(v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_250F21498()
{
  return sub_251038980();
}

uint64_t sub_250F214B4@<X0>(uint64_t a1@<X8>)
{
  return sub_250F20EEC(a1);
}

uint64_t sub_250F21500(uint64_t a1, uint64_t a2)
{
  return sub_250F2166C(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_250F21518(uint64_t a1, id *a2)
{
  uint64_t result = sub_2510391A0();
  *a2 = 0;
  return result;
}

uint64_t sub_250F21590(uint64_t a1, id *a2)
{
  char v3 = sub_2510391B0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_250F21610@<X0>(uint64_t *a1@<X8>)
{
  sub_2510391C0();
  uint64_t v2 = sub_251039190();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_250F21654(uint64_t a1, uint64_t a2)
{
  return sub_250F2166C(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_250F2166C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_2510391C0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_250F216B0()
{
  sub_2510391C0();
  sub_251039200();
  return swift_bridgeObjectRelease();
}

uint64_t sub_250F21704()
{
  sub_2510391C0();
  sub_251039850();
  sub_251039200();
  uint64_t v0 = sub_251039890();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_250F21778()
{
  uint64_t v0 = sub_2510391C0();
  uint64_t v2 = v1;
  if (v0 == sub_2510391C0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_2510397F0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_250F2183C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_250F2185C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void sub_250F21898(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_250F218E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_251039190();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_250F21928@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2510391C0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_250F21954(uint64_t a1)
{
  uint64_t v2 = sub_250F21AA0(&qword_269B12C88, type metadata accessor for HKFeatureIdentifier);
  uint64_t v3 = sub_250F21AA0(&qword_269B12C90, type metadata accessor for HKFeatureIdentifier);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_250F21A10()
{
  return sub_250F21AA0(&qword_269B12C70, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_250F21A58()
{
  return sub_250F21AA0(&qword_269B12C78, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_250F21AA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F21AE8()
{
  return sub_250F21AA0(&qword_269B12C80, type metadata accessor for HKFeatureIdentifier);
}

uint64_t initializeBufferWithCopyOfBuffer for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for OvernightMetricsChartLozenge(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartLozenge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    long long v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_retain();
  return a1;
}

void *assignWithCopy for OvernightMetricsChartLozenge(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  long long v7 = a2 + 2;
  uint64_t v6 = a2[2];
  if (v5)
  {
    if (v6)
    {
      a1[2] = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
    }
    else
    {
      sub_250F21DD0(v4);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
      long long v9 = *((_OWORD *)v7 + 2);
      long long v8 = *((_OWORD *)v7 + 3);
      long long v10 = *((_OWORD *)v7 + 1);
      *(void *)(v4 + 64) = v7[8];
      *(_OWORD *)(v4 + 32) = v9;
      *(_OWORD *)(v4 + 48) = v8;
      *(_OWORD *)(v4 + 16) = v10;
    }
  }
  else if (v6)
  {
    a1[2] = v6;
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
    long long v11 = *((_OWORD *)a2 + 2);
    long long v12 = *((_OWORD *)a2 + 3);
    long long v13 = *((_OWORD *)a2 + 4);
    *(void *)(v4 + 64) = a2[10];
    *(_OWORD *)(v4 + 32) = v12;
    *(_OWORD *)(v4 + 48) = v13;
    *(_OWORD *)(v4 + 16) = v11;
  }
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_250F21DD0(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartLozenge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  uint64_t v6 = a2 + 16;
  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  if (!v5)
  {
    sub_250F21DD0(v4);
LABEL_5:
    long long v8 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v4 + 48) = v8;
    *(void *)(v4 + 64) = *(void *)(v6 + 64);
    long long v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
    *(_OWORD *)(v4 + 16) = v9;
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
LABEL_6:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartLozenge(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartLozenge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 96) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartLozenge()
{
  return &type metadata for OvernightMetricsChartLozenge;
}

uint64_t sub_250F21FBC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_250F21FD8()
{
  if (!qword_269B12C98)
  {
    sub_251038C50();
    sub_250F21AA0(&qword_269B12CA0, MEMORY[0x263F1B7A0]);
    unint64_t v0 = sub_251038060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12C98);
    }
  }
}

void sub_250F22088(uint64_t a1)
{
}

void sub_250F220B0(uint64_t a1)
{
}

uint64_t sub_250F220D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_250F22140(uint64_t a1)
{
}

void sub_250F22168(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250F221CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F22234(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_250F22274()
{
  return sub_250F22300(&qword_269B12CC8, sub_250F22140, (void (*)(void))sub_250F222C4);
}

uint64_t sub_250F222C4()
{
  return sub_250F22300(&qword_269B12CD0, sub_250F220B0, (void (*)(void))sub_250F22380);
}

uint64_t sub_250F22300(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250F22380()
{
  unint64_t result = qword_269B12CD8;
  if (!qword_269B12CD8)
  {
    sub_250F22088(255);
    sub_250F21AA0(&qword_269B12CE0, (void (*)(uint64_t))sub_250F21FD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12CD8);
  }
  return result;
}

uint64_t BaselineRelativeChartPoint.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_251037400();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t BaselineRelativeChartPoint.init(date:value:color:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  char v8 = *((unsigned char *)a2 + 8);
  uint64_t v9 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a4, a1, v9);
  uint64_t result = type metadata accessor for BaselineRelativeChartPoint();
  uint64_t v11 = a4 + *(int *)(result + 20);
  *(void *)uint64_t v11 = v7;
  *(unsigned char *)(v11 + 8) = v8;
  *(void *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for BaselineRelativeChartPoint()
{
  uint64_t result = qword_269B12CF0;
  if (!qword_269B12CF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static BaselineRelativeChartPoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((sub_2510373D0() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for BaselineRelativeChartPoint() + 20);
  uint64_t v5 = (double *)(a1 + v4);
  char v6 = *(unsigned char *)(a1 + v4 + 8);
  uint64_t v7 = (double *)(a2 + v4);
  int v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if (v6)
  {
    if (!v8) {
      return 0;
    }
  }
  else
  {
    if (*v5 != *v7) {
      LOBYTE(v8) = 1;
    }
    if (v8) {
      return 0;
    }
  }
  return sub_251038A70();
}

uint64_t sub_250F22608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_2510373D0() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (double *)(a1 + v6);
  char v8 = *(unsigned char *)(a1 + v6 + 8);
  uint64_t v9 = (double *)(a2 + v6);
  int v10 = *(unsigned __int8 *)(a2 + v6 + 8);
  if (v8)
  {
    if (!v10) {
      return 0;
    }
  }
  else
  {
    if (*v7 != *v9) {
      LOBYTE(v10) = 1;
    }
    if (v10) {
      return 0;
    }
  }
  return sub_251038A70();
}

unint64_t sub_250F226A4()
{
  unint64_t result = qword_269B12CE8;
  if (!qword_269B12CE8)
  {
    sub_251037400();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12CE8);
  }
  return result;
}

uint64_t sub_250F226FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_251037400();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for BaselineRelativeChartPoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_251037400();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for BaselineRelativeChartPoint(uint64_t a1)
{
  uint64_t v2 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F22B40);
}

uint64_t sub_250F22B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F22C14);
}

uint64_t sub_250F22C14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_251037400();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_250F22CD0()
{
  uint64_t result = sub_251037400();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_250F22D74(void *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *a1 = *(void *)a2;
    long long v13 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510376B0();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)((char *)a1 + v8[5]) = *(void *)&a2[v8[5]];
    uint64_t v9 = v8[6];
    unint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = &a2[v9];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *unint64_t v10 = *(void *)v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v14 = sub_2510379E0();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_250F23648(0, qword_26B210D00, MEMORY[0x263F42EF8]);
        memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = v8[7];
    uint64_t v18 = (char *)a1 + v17;
    v19 = &a2[v17];
    double v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v21 = *((void *)v20 - 1);
    v78 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_250F23648(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v23 = sub_251037400();
      double v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      v24(v18, v19, v23);
      uint64_t v25 = v20[5];
      v76 = a1;
      uint64_t v26 = v8;
      v27 = &v18[v25];
      uint64_t v28 = &v19[v25];
      v24(&v18[v25], &v19[v25], v23);
      sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v24(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v23);
      long long v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v27[v30[5]] = *(void *)&v28[v30[5]];
      *(void *)&v27[v30[6]] = *(void *)&v28[v30[6]];
      *(void *)&v27[v30[7]] = *(void *)&v28[v30[7]];
      uint64_t v31 = v20[6];
      long long v32 = &v18[v31];
      v33 = &v19[v31];
      *(_OWORD *)long long v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      uint64_t v34 = v20[10];
      v35 = &v18[v34];
      v36 = &v19[v34];
      uint64_t v37 = *((void *)v36 + 1);
      *(void *)v35 = *(void *)v36;
      *((void *)v35 + 1) = v37;
      uint64_t v38 = v20[11];
      v39 = &v18[v38];
      v40 = &v19[v38];
      uint64_t v41 = *((void *)v40 + 1);
      *(void *)v39 = *(void *)v40;
      *((void *)v39 + 1) = v41;
      v42 = *(void (**)(char *, void, uint64_t, int *))(v21 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = v26;
      a1 = v76;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(v18, 0, 1, v20);
    }
    v74 = v8;
    uint64_t v43 = v8[8];
    v44 = (char *)a1 + v43;
    v45 = &a2[v43];
    *(void *)((char *)a1 + v43) = *(void *)&a2[v43];
    uint64_t v46 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v47 = *(int *)(v46 + 20);
    v48 = &v44[v47];
    v49 = &v45[v47];
    uint64_t v50 = sub_2510374F0();
    v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16);
    swift_bridgeObjectRetain();
    v51(v48, v49, v50);
    *(void *)&v44[*(int *)(v46 + 24)] = *(void *)&v45[*(int *)(v46 + 24)];
    *(void *)((char *)a1 + v74[9]) = *(void *)&a2[v74[9]];
    *(void *)((char *)a1 + v74[10]) = *(void *)&a2[v74[10]];
    uint64_t v52 = v74[11];
    v53 = (char *)a1 + v52;
    v54 = &a2[v52];
    uint64_t v55 = sub_251037400();
    v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v77(v53, v54, v55);
    sub_250F235DC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v57 = v56;
    v77(&v53[*(int *)(v56 + 36)], &v54[*(int *)(v56 + 36)], v55);
    uint64_t v58 = v74[12];
    v59 = (char *)a1 + v58;
    v60 = &a2[v58];
    v77((char *)a1 + v58, &a2[v58], v55);
    v77(&v59[*(int *)(v57 + 36)], &v60[*(int *)(v57 + 36)], v55);
    *(void *)((char *)a1 + v74[13]) = *(void *)&a2[v74[13]];
    *(void *)((char *)a1 + v74[14]) = *(void *)&a2[v74[14]];
    uint64_t v61 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v62 = *(int *)(v61 + 20);
    v75 = (char *)a1 + v62;
    v63 = &a2[v62];
    uint64_t v64 = sub_2510375C0();
    v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66 = v63;
    long long v13 = (char *)a1;
    v65(v75, v66, v64);
    *((unsigned char *)a1 + *(int *)(v61 + 24)) = a2[*(int *)(v61 + 24)];
    v77((char *)a1 + v78[5], &a2[v78[5]], v55);
    uint64_t v67 = v78[6];
    v68 = (char *)a1 + v67;
    v69 = &a2[v67];
    uint64_t v70 = sub_251038FF0();
    uint64_t v71 = *(void *)(v70 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
    {
      sub_250F23648(0, &qword_26B210158, MEMORY[0x263F1FDF0]);
      memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v70);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
    }
    v77(&v13[v78[7]], &a2[v78[7]], v55);
  }
  return v13;
}

unint64_t sub_250F23584()
{
  unint64_t result = qword_26B210CF8;
  if (!qword_26B210CF8)
  {
    sub_251037400();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B210CF8);
  }
  return result;
}

void sub_250F235DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    unint64_t v7 = sub_250F23584();
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250F23648(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250F2369C(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = sub_2510379E0();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  uint64_t v9 = a1 + v5[7];
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = sub_251037400();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v9, v11);
    uint64_t v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v17 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + v5[11];
  uint64_t v19 = sub_251037400();
  long long v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v30)((void *)(v19 - 8), v18, v19);
  sub_250F235DC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v21 = v20;
  v30(v18 + *(int *)(v20 + 36), v19);
  uint64_t v22 = a1 + v5[12];
  v30(v22, v19);
  v30(v22 + *(int *)(v21 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v24 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  v30(a1 + a2[5], v19);
  uint64_t v25 = a1 + a2[6];
  uint64_t v26 = sub_251038FF0();
  uint64_t v27 = *(void *)(v26 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26)) {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  }
  uint64_t v28 = a1 + a2[7];
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v28, v19);
}

uint64_t sub_250F23B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = sub_2510379E0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_250F23648(0, qword_26B210D00, MEMORY[0x263F42EF8]);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  v74 = a3;
  v75 = v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_250F23648(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = a2;
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v22(v15, v16, v20);
    uint64_t v23 = v17[5];
    uint64_t v24 = &v15[v23];
    uint64_t v25 = &v16[v23];
    v22(&v15[v23], &v16[v23], v20);
    sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v20);
    a2 = v21;
    uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v24[v27[5]] = *(void *)&v25[v27[5]];
    *(void *)&v24[v27[6]] = *(void *)&v25[v27[6]];
    *(void *)&v24[v27[7]] = *(void *)&v25[v27[7]];
    uint64_t v28 = v17[6];
    uint64_t v29 = &v15[v28];
    long long v30 = &v16[v28];
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    uint64_t v31 = v17[10];
    long long v32 = &v15[v31];
    v33 = &v16[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)long long v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = v17[11];
    v36 = &v15[v35];
    uint64_t v37 = &v16[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    v39 = *(void (**)(char *, void, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = v75;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39(v15, 0, 1, v17);
  }
  uint64_t v40 = v7[8];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2;
  uint64_t v43 = (void *)(a2 + v40);
  *(void *)(a1 + v40) = *v43;
  uint64_t v44 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v45 = *(int *)(v44 + 20);
  uint64_t v72 = v41 + v45;
  uint64_t v46 = (char *)v43 + v45;
  uint64_t v47 = sub_2510374F0();
  v48 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v47 - 8) + 16);
  swift_bridgeObjectRetain();
  v48(v72, v46, v47);
  *(void *)(v41 + *(int *)(v44 + 24)) = *(void *)((char *)v43 + *(int *)(v44 + 24));
  *(void *)(a1 + v75[9]) = *(void *)(v42 + v75[9]);
  *(void *)(a1 + v75[10]) = *(void *)(v42 + v75[10]);
  uint64_t v49 = v75[11];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = v42 + v49;
  uint64_t v52 = sub_251037400();
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73(v50, v51, v52);
  sub_250F235DC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v54 = v53;
  v73(v50 + *(int *)(v53 + 36), v51 + *(int *)(v53 + 36), v52);
  uint64_t v55 = v75[12];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = v42 + v55;
  v73(a1 + v55, v42 + v55, v52);
  v73(v56 + *(int *)(v54 + 36), v57 + *(int *)(v54 + 36), v52);
  *(void *)(a1 + v75[13]) = *(void *)(v42 + v75[13]);
  *(void *)(a1 + v75[14]) = *(void *)(v42 + v75[14]);
  uint64_t v58 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v59 = *(int *)(v58 + 20);
  uint64_t v76 = a1 + v59;
  uint64_t v71 = v42 + v59;
  uint64_t v60 = sub_2510375C0();
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61(v76, v71, v60);
  uint64_t v62 = v42;
  uint64_t v63 = a1;
  *(unsigned char *)(a1 + *(int *)(v58 + 24)) = *(unsigned char *)(v62 + *(int *)(v58 + 24));
  v73(a1 + v74[5], v62 + v74[5], v52);
  uint64_t v64 = v74[6];
  v65 = (void *)(a1 + v64);
  v66 = (const void *)(v62 + v64);
  uint64_t v67 = sub_251038FF0();
  uint64_t v68 = *(void *)(v67 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    sub_250F23648(0, &qword_26B210158, MEMORY[0x263F1FDF0]);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v68 + 16))(v65, v66, v67);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v73(v63 + v74[7], v62 + v74[7], v52);
  return v63;
}

uint64_t sub_250F2432C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v8 = v7[6];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (void *)(a2 + v8);
    sub_250F24D84(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = sub_2510379E0();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        sub_250F23648(0, qword_26B210D00, MEMORY[0x263F42EF8]);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v92 = *((void *)v17 - 1);
  uint64_t v18 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v92 + 48);
  int v19 = v18(v15, 1, v17);
  int v20 = v18(v16, 1, v17);
  uint64_t v96 = a3;
  if (v19)
  {
    if (!v20)
    {
      uint64_t v21 = sub_251037400();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v15, v16, v21);
      uint64_t v23 = v22;
      uint64_t v24 = v17[5];
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      v23(&v15[v24], &v16[v24], v21);
      sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
      uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
      *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
      *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
      uint64_t v29 = v17[6];
      long long v30 = &v15[v29];
      uint64_t v31 = &v16[v29];
      char v32 = v31[16];
      *(_OWORD *)long long v30 = *(_OWORD *)v31;
      v30[16] = v32;
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      uint64_t v33 = v17[10];
      uint64_t v34 = &v15[v33];
      uint64_t v35 = &v16[v33];
      *uint64_t v34 = *v35;
      v34[1] = v35[1];
      uint64_t v36 = v17[11];
      uint64_t v37 = &v15[v36];
      uint64_t v38 = &v16[v36];
      *uint64_t v37 = *v38;
      v37[1] = v38[1];
      v93 = *(void (**)(unsigned char *, void, uint64_t, int *))(v92 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v93(v15, 0, 1, v17);
      a3 = v96;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v20)
  {
    sub_250F24D84((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F23648(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v72 = sub_251037400();
  v73 = *(void (**)(void))(*(void *)(v72 - 8) + 24);
  uint64_t v95 = v72;
  ((void (*)(char *, char *, uint64_t))v73)(v15, v16, v72);
  v74 = (void (*)(char *, char *, uint64_t))v73;
  uint64_t v75 = v17[5];
  uint64_t v76 = &v15[v75];
  __src = &v16[v75];
  ((void (*)(char *))v74)(&v15[v75]);
  sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v74(&v76[*(int *)(v77 + 36)], &__src[*(int *)(v77 + 36)], v95);
  v78 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v76[v78[5]] = *(void *)&__src[v78[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v76[v78[6]] = *(void *)&__src[v78[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v79 = v78[7];
  a3 = v96;
  *(void *)&v76[v79] = *(void *)&__src[v79];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v80 = v17[6];
  v81 = &v15[v80];
  v82 = &v16[v80];
  long long v83 = *(_OWORD *)v82;
  v81[16] = v82[16];
  *(_OWORD *)v81 = v83;
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  uint64_t v84 = v17[10];
  v85 = &v15[v84];
  v86 = &v16[v84];
  char *v85 = *v86;
  v85[1] = v86[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = v17[11];
  v88 = &v15[v87];
  v89 = &v16[v87];
  char *v88 = *v89;
  v88[1] = v89[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v40 = v7[8];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  *(void *)(a1 + v40) = *(void *)(a2 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = v41 + v44;
  uint64_t v46 = v42 + v44;
  uint64_t v47 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  *(void *)(v41 + *(int *)(v43 + 24)) = *(void *)(v42 + *(int *)(v43 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v7[11];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  uint64_t v51 = sub_251037400();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24);
  v52(v49, v50, v51);
  sub_250F235DC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v54 = v53;
  v52(v49 + *(int *)(v53 + 36), v50 + *(int *)(v53 + 36), v51);
  uint64_t v55 = v7[12];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  v52(a1 + v55, a2 + v55, v51);
  v52(v56 + *(int *)(v54 + 36), v57 + *(int *)(v54 + 36), v51);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[14]) = *(void *)(a2 + v7[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v59 = *(int *)(v58 + 20);
  uint64_t v60 = a1 + v59;
  uint64_t v61 = a2 + v59;
  uint64_t v62 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 24))(v60, v61, v62);
  *(unsigned char *)(a1 + *(int *)(v58 + 24)) = *(unsigned char *)(a2 + *(int *)(v58 + 24));
  v90 = v52;
  v52(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v51);
  uint64_t v63 = *(int *)(a3 + 24);
  uint64_t v64 = (void *)(a1 + v63);
  uint64_t v94 = a2;
  v65 = (void *)(a2 + v63);
  uint64_t v66 = sub_251038FF0();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v67 + 48);
  LODWORD(v58) = v68(v64, 1, v66);
  int v69 = v68(v65, 1, v66);
  if (!v58)
  {
    if (!v69)
    {
      (*(void (**)(void *, void *, uint64_t))(v67 + 24))(v64, v65, v66);
      goto LABEL_20;
    }
    (*(void (**)(void *, uint64_t))(v67 + 8))(v64, v66);
    goto LABEL_19;
  }
  if (v69)
  {
LABEL_19:
    sub_250F23648(0, &qword_26B210158, MEMORY[0x263F1FDF0]);
    memcpy(v64, v65, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v67 + 16))(v64, v65, v66);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
LABEL_20:
  v90(a1 + *(int *)(v96 + 28), v94 + *(int *)(v96 + 28), v51);
  return a1;
}

uint64_t sub_250F24D84(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F24DE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  uint64_t v7 = v6[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_2510379E0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      sub_250F23648(0, qword_26B210D00, MEMORY[0x263F42EF8]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = v6[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_250F23648(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
    uint64_t v61 = v18;
    v21(v15, v16, v20);
    uint64_t v22 = v21;
    uint64_t v23 = v17[5];
    uint64_t v24 = &v15[v23];
    uint64_t v25 = &v16[v23];
    v22(&v15[v23], &v16[v23], v20);
    sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v20);
    uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v24[v27[5]] = *(void *)&v25[v27[5]];
    *(void *)&v24[v27[6]] = *(void *)&v25[v27[6]];
    *(void *)&v24[v27[7]] = *(void *)&v25[v27[7]];
    uint64_t v28 = v17[6];
    uint64_t v29 = &v15[v28];
    long long v30 = &v16[v28];
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v61 + 56))(v15, 0, 1, v17);
  }
  uint64_t v31 = v6[8];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(void *)(a1 + v31) = *(void *)(a2 + v31);
  uint64_t v34 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v35 = *(int *)(v34 + 20);
  uint64_t v36 = v32 + v35;
  uint64_t v37 = v33 + v35;
  uint64_t v38 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
  *(void *)(v32 + *(int *)(v34 + 24)) = *(void *)(v33 + *(int *)(v34 + 24));
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  uint64_t v39 = v6[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = sub_251037400();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  sub_250F235DC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v45 = v44;
  v43(v40 + *(int *)(v44 + 36), v41 + *(int *)(v44 + 36), v42);
  uint64_t v46 = v6[12];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  v43(a1 + v46, a2 + v46, v42);
  v43(v47 + *(int *)(v45 + 36), v48 + *(int *)(v45 + 36), v42);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  *(void *)(a1 + v6[14]) = *(void *)(a2 + v6[14]);
  uint64_t v49 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v50 = *(int *)(v49 + 20);
  uint64_t v51 = a1 + v50;
  uint64_t v52 = a2 + v50;
  uint64_t v53 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 32))(v51, v52, v53);
  *(unsigned char *)(a1 + *(int *)(v49 + 24)) = *(unsigned char *)(a2 + *(int *)(v49 + 24));
  v43(a1 + a3[5], a2 + a3[5], v42);
  uint64_t v54 = a3[6];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (const void *)(a2 + v54);
  uint64_t v57 = sub_251038FF0();
  uint64_t v58 = *(void *)(v57 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
  {
    sub_250F23648(0, &qword_26B210158, MEMORY[0x263F1FDF0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v58 + 32))(v55, v56, v57);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  }
  v43(a1 + a3[7], a2 + a3[7], v42);
  return a1;
}

uint64_t sub_250F25504(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = v6[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_250F24D84(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = sub_2510379E0();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        sub_250F23648(0, qword_26B210D00, MEMORY[0x263F42EF8]);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v14 = v6[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      uint64_t v22 = sub_251037400();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
      uint64_t v88 = v18;
      v23(v15, v16, v22);
      uint64_t v24 = v23;
      uint64_t v25 = v17[5];
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      v24(&v15[v25], &v16[v25], v22);
      sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v22);
      uint64_t v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v26[v29[5]] = *(void *)&v27[v29[5]];
      *(void *)&v26[v29[6]] = *(void *)&v27[v29[6]];
      *(void *)&v26[v29[7]] = *(void *)&v27[v29[7]];
      uint64_t v30 = v17[6];
      uint64_t v31 = &v15[v30];
      uint64_t v32 = &v16[v30];
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
      *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v88 + 56))(v15, 0, 1, v17);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v21)
  {
    sub_250F24D84((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F23648(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v66 = sub_251037400();
  uint64_t v67 = *(void (**)(void))(*(void *)(v66 - 8) + 40);
  uint64_t v90 = v66;
  ((void (*)(char *, char *, uint64_t))v67)(v15, v16, v66);
  uint64_t v68 = (void (*)(char *, char *, uint64_t))v67;
  uint64_t v69 = v17[5];
  uint64_t v70 = &v15[v69];
  __src = &v16[v69];
  ((void (*)(char *))v68)(&v15[v69]);
  sub_250F235DC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v68(&v70[*(int *)(v71 + 36)], &__src[*(int *)(v71 + 36)], v90);
  uint64_t v72 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v70[v72[5]] = *(void *)&__src[v72[5]];
  swift_bridgeObjectRelease();
  *(void *)&v70[v72[6]] = *(void *)&__src[v72[6]];
  swift_bridgeObjectRelease();
  *(void *)&v70[v72[7]] = *(void *)&__src[v72[7]];
  swift_bridgeObjectRelease();
  uint64_t v73 = v17[6];
  v74 = &v15[v73];
  uint64_t v75 = &v16[v73];
  *(_OWORD *)v74 = *(_OWORD *)v75;
  v74[16] = v75[16];
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  uint64_t v76 = v17[10];
  uint64_t v77 = &v15[v76];
  v78 = (uint64_t *)&v16[v76];
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  *(void *)uint64_t v77 = v80;
  *((void *)v77 + 1) = v79;
  swift_bridgeObjectRelease();
  uint64_t v81 = v17[11];
  v82 = &v15[v81];
  long long v83 = (uint64_t *)&v16[v81];
  uint64_t v85 = *v83;
  uint64_t v84 = v83[1];
  *(void *)v82 = v85;
  *((void *)v82 + 1) = v84;
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v34 = v6[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 40))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  swift_bridgeObjectRelease();
  uint64_t v42 = v6[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 40);
  v46(v43, v44, v45);
  sub_250F235DC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = v6[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[14]) = *(void *)(a2 + v6[14]);
  swift_bridgeObjectRelease();
  uint64_t v52 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 40))(v54, v55, v56);
  *(unsigned char *)(a1 + *(int *)(v52 + 24)) = *(unsigned char *)(a2 + *(int *)(v52 + 24));
  v86 = v46;
  v46(a1 + a3[5], a2 + a3[5], v45);
  uint64_t v57 = a3[6];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v89 = a2;
  uint64_t v59 = (void *)(a2 + v57);
  uint64_t v60 = sub_251038FF0();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v61 + 48);
  LODWORD(v48) = v62(v58, 1, v60);
  int v63 = v62(v59, 1, v60);
  if (!v48)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v61 + 40))(v58, v59, v60);
      goto LABEL_20;
    }
    (*(void (**)(void *, uint64_t))(v61 + 8))(v58, v60);
    goto LABEL_19;
  }
  if (v63)
  {
LABEL_19:
    sub_250F23648(0, &qword_26B210158, MEMORY[0x263F1FDF0]);
    memcpy(v58, v59, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v61 + 32))(v58, v59, v60);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
LABEL_20:
  v86(a1 + a3[7], v89 + a3[7], v45);
  return a1;
}

uint64_t sub_250F25EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F25EB4);
}

uint64_t sub_250F25EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_251037400();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_250F23648(0, &qword_26B210158, MEMORY[0x263F1FDF0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t sub_250F2601C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F26030);
}

uint64_t sub_250F26030(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_251037400();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_250F23648(0, &qword_26B210158, MEMORY[0x263F1FDF0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for BalanceWidgetTimelineEntry()
{
  uint64_t result = qword_26B210108;
  if (!qword_26B210108) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250F261F0()
{
  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_251037400();
    if (v1 <= 0x3F)
    {
      sub_250F23648(319, &qword_26B210158, MEMORY[0x263F1FDF0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_250F26310@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v43 = a2;
  uint64_t v44 = a1;
  uint64_t v49 = a5;
  uint64_t v5 = sub_2510375C0();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F23648(0, qword_26B210D00, MEMORY[0x263F42EF8]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v42 = (char *)&v38 - v8;
  uint64_t v45 = type metadata accessor for BalanceWidgetViewModel() - 8;
  MEMORY[0x270FA5388](v45);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_2510379E0();
  uint64_t v11 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_251037400();
  uint64_t v39 = *(void *)(v14 - 8);
  uint64_t v15 = v39;
  uint64_t v40 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_2510376B0();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  int v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v38 - v23;
  LODWORD(v43) = *v43;
  sub_2510373E0();
  sub_251037670();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v25 = MEMORY[0x263F8EE78];
  sub_250F2F74C(MEMORY[0x263F8EE78]);
  sub_2510379B0();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v24, v18);
  uint64_t v26 = v41;
  uint64_t v27 = (uint64_t)v42;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v13, v41);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v26);
  OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)((uint64_t)v21, v25, v27, (uint64_t)v10);
  uint64_t v28 = v46;
  sub_2510375B0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v26);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v18);
  uint64_t v29 = v45;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v10[*(int *)(v45 + 28)], v28, v48);
  v10[*(int *)(v29 + 32)] = (char)v43;
  uint64_t v30 = v49;
  sub_250F26868((uint64_t)v10, v49);
  uint64_t v31 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  uint64_t v32 = v30;
  uint64_t v33 = v40;
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  v34(v30 + v31[5], v50, v40);
  uint64_t v35 = v30 + v31[6];
  uint64_t v36 = sub_251038FF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v34)(v32 + v31[7], v51, v33);
}

uint64_t sub_250F267F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_251037400();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_250F26868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceWidgetViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_250F268CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v16 = (uint64_t *)(v15 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v4 = a2[2];
    a1[1] = a2[1];
    a1[2] = v4;
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    *(uint64_t *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = &v6[v9];
    uint64_t v11 = &v7[v9];
    uint64_t v12 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v64 = *((void *)v12 - 1);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, int *))(v64 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v11, 1, v12))
    {
      sub_250F29854(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v17 = sub_251037400();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      v18(v10, v11, v17);
      uint64_t v19 = v12[5];
      uint64_t v20 = &v10[v19];
      int v21 = &v11[v19];
      v18(&v10[v19], &v11[v19], v17);
      sub_250F26E08();
      v18(&v20[*(int *)(v22 + 36)], &v21[*(int *)(v22 + 36)], v17);
      uint64_t v23 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v20[v23[5]] = *(void *)&v21[v23[5]];
      *(void *)&v20[v23[6]] = *(void *)&v21[v23[6]];
      *(void *)&v20[v23[7]] = *(void *)&v21[v23[7]];
      uint64_t v24 = v12[6];
      uint64_t v25 = &v10[v24];
      uint64_t v26 = &v11[v24];
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      v25[16] = v26[16];
      v10[v12[7]] = v11[v12[7]];
      v10[v12[8]] = v11[v12[8]];
      v10[v12[9]] = v11[v12[9]];
      uint64_t v27 = v12[10];
      uint64_t v28 = &v10[v27];
      uint64_t v29 = &v11[v27];
      uint64_t v30 = *((void *)v29 + 1);
      *(void *)uint64_t v28 = *(void *)v29;
      *((void *)v28 + 1) = v30;
      uint64_t v31 = v12[11];
      uint64_t v32 = &v10[v31];
      uint64_t v33 = &v11[v31];
      uint64_t v34 = *((void *)v33 + 1);
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = v34;
      v65 = *(void (**)(char *, void, uint64_t, int *))(v64 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65(v10, 0, 1, v12);
    }
    *(_OWORD *)&v6[v8[6]] = *(_OWORD *)&v7[v8[6]];
    uint64_t v35 = v8[7];
    uint64_t v36 = &v6[v35];
    uint64_t v37 = &v7[v35];
    long long v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    *((void *)v36 + 10) = *((void *)v37 + 10);
    long long v39 = *((_OWORD *)v37 + 4);
    long long v40 = *((_OWORD *)v37 + 2);
    *((_OWORD *)v36 + 3) = *((_OWORD *)v37 + 3);
    *((_OWORD *)v36 + 4) = v39;
    *((_OWORD *)v36 + 2) = v40;
    *(void *)&v6[v8[8]] = *(void *)&v7[v8[8]];
    *(void *)&v6[v8[9]] = *(void *)&v7[v8[9]];
    uint64_t v41 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v42 = &v6[v41];
    uint64_t v43 = &v7[v41];
    uint64_t v44 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = *(void *)v43;
    *((void *)v42 + 1) = v44;
    uint64_t v45 = *((void *)v43 + 3);
    *((void *)v42 + 2) = *((void *)v43 + 2);
    *((void *)v42 + 3) = v45;
    *((void *)v42 + 4) = *((void *)v43 + 4);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
    *(_OWORD *)(v42 + 56) = *(_OWORD *)(v43 + 56);
    *(_OWORD *)(v42 + 72) = *(_OWORD *)(v43 + 72);
    *(_OWORD *)(v42 + 88) = *(_OWORD *)(v43 + 88);
    *(_OWORD *)(v42 + 104) = *(_OWORD *)(v43 + 104);
    uint64_t v46 = *(int *)(a3 + 32);
    uint64_t v47 = (char *)a1 + v46;
    uint64_t v48 = (char *)a2 + v46;
    uint64_t v49 = *(uint64_t *)((char *)a2 + v46);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v49)
    {
      uint64_t v50 = *((void *)v48 + 1);
      uint64_t v51 = *((void *)v48 + 2);
      *(void *)uint64_t v47 = v49;
      *((void *)v47 + 1) = v50;
      *((void *)v47 + 2) = v51;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
      *((void *)v47 + 2) = *((void *)v48 + 2);
    }
    v47[24] = v48[24];
    v47[32] = v48[32];
    uint64_t v52 = *((void *)v48 + 6);
    *((void *)v47 + 5) = *((void *)v48 + 5);
    *((void *)v47 + 6) = v52;
    v47[56] = v48[56];
    uint64_t v53 = *((void *)v48 + 9);
    *((void *)v47 + 8) = *((void *)v48 + 8);
    *((void *)v47 + 9) = v53;
    *((void *)v47 + 10) = *((void *)v48 + 10);
    long long v54 = *(_OWORD *)(v48 + 88);
    *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
    *(_OWORD *)(v47 + 88) = v54;
    long long v55 = *(_OWORD *)(v48 + 120);
    long long v56 = *(_OWORD *)(v48 + 136);
    *(_OWORD *)(v47 + 152) = *(_OWORD *)(v48 + 152);
    *(_OWORD *)(v47 + 136) = v56;
    *(_OWORD *)(v47 + 120) = v55;
    uint64_t v57 = *((void *)v48 + 22);
    *((void *)v47 + 21) = *((void *)v48 + 21);
    *((void *)v47 + 22) = v57;
    uint64_t v59 = *((void *)v48 + 23);
    uint64_t v58 = *((void *)v48 + 24);
    v47[200] = v48[200];
    *((void *)v47 + 23) = v59;
    *((void *)v47 + 24) = v58;
    v47[201] = v48[201];
    uint64_t v60 = *((void *)v48 + 27);
    *((void *)v47 + 26) = *((void *)v48 + 26);
    *((void *)v47 + 27) = v60;
    uint64_t v61 = *((void *)v48 + 29);
    *((void *)v47 + 28) = *((void *)v48 + 28);
    *((void *)v47 + 29) = v61;
    *((void *)v47 + 30) = *((void *)v48 + 30);
    v47[248] = v48[248];
    uint64_t v62 = *((void *)v48 + 33);
    *((void *)v47 + 32) = *((void *)v48 + 32);
    *((void *)v47 + 33) = v62;
    *((void *)v47 + 34) = *((void *)v48 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v16 = a1;
  }
  swift_retain();
  return v16;
}

void sub_250F26E08()
{
  if (!qword_26B210F98)
  {
    sub_251037400();
    sub_250F29794((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v0 = sub_251039380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210F98);
    }
  }
}

uint64_t sub_250F26E9C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v6 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v5, v7);
    uint64_t v9 = v5 + *(int *)(v6 + 20);
    v8(v9, v7);
    sub_250F26E08();
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + *(int *)(a2 + 32)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_250F270D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(void *)(a1 + v4) = *(void *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (char *)(v5 + v8);
  uint64_t v10 = (char *)(v6 + v8);
  uint64_t v11 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v61 = *((void *)v11 - 1);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v61 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v10, 1, v11))
  {
    sub_250F29854(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = sub_251037400();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v9, v10, v14);
    uint64_t v16 = v11[5];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    v15(&v9[v16], &v10[v16], v14);
    sub_250F26E08();
    v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v14);
    uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v17[v20[5]] = *(void *)&v18[v20[5]];
    *(void *)&v17[v20[6]] = *(void *)&v18[v20[6]];
    *(void *)&v17[v20[7]] = *(void *)&v18[v20[7]];
    uint64_t v21 = v11[6];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v9[v11[7]] = v10[v11[7]];
    v9[v11[8]] = v10[v11[8]];
    v9[v11[9]] = v10[v11[9]];
    uint64_t v24 = v11[10];
    uint64_t v25 = &v9[v24];
    uint64_t v26 = &v10[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = *(void *)v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = v11[11];
    uint64_t v29 = &v9[v28];
    uint64_t v30 = &v10[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v62 = *(void (**)(char *, void, uint64_t, int *))(v61 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62(v9, 0, 1, v11);
  }
  *(_OWORD *)(v5 + v7[6]) = *(_OWORD *)(v6 + v7[6]);
  uint64_t v32 = v7[7];
  uint64_t v33 = v5 + v32;
  uint64_t v34 = v6 + v32;
  long long v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(void *)(v33 + 80) = *(void *)(v34 + 80);
  long long v36 = *(_OWORD *)(v34 + 64);
  long long v37 = *(_OWORD *)(v34 + 32);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(v34 + 48);
  *(_OWORD *)(v33 + 64) = v36;
  *(_OWORD *)(v33 + 32) = v37;
  *(void *)(v5 + v7[8]) = *(void *)(v6 + v7[8]);
  *(void *)(v5 + v7[9]) = *(void *)(v6 + v7[9]);
  uint64_t v38 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v39 = v5 + v38;
  uint64_t v40 = v6 + v38;
  uint64_t v41 = *(void *)(v40 + 8);
  *(void *)uint64_t v39 = *(void *)v40;
  *(void *)(v39 + 8) = v41;
  uint64_t v42 = *(void *)(v40 + 24);
  *(void *)(v39 + 16) = *(void *)(v40 + 16);
  *(void *)(v39 + 24) = v42;
  *(void *)(v39 + 32) = *(void *)(v40 + 32);
  *(_OWORD *)(v39 + 40) = *(_OWORD *)(v40 + 40);
  *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
  *(_OWORD *)(v39 + 72) = *(_OWORD *)(v40 + 72);
  *(_OWORD *)(v39 + 88) = *(_OWORD *)(v40 + 88);
  *(_OWORD *)(v39 + 104) = *(_OWORD *)(v40 + 104);
  uint64_t v43 = *(int *)(a3 + 32);
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = *(void *)(a2 + v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v46)
  {
    uint64_t v47 = *(void *)(v45 + 8);
    uint64_t v48 = *(void *)(v45 + 16);
    *(void *)uint64_t v44 = v46;
    *(void *)(v44 + 8) = v47;
    *(void *)(v44 + 16) = v48;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    *(void *)(v44 + 16) = *(void *)(v45 + 16);
  }
  *(unsigned char *)(v44 + 24) = *(unsigned char *)(v45 + 24);
  *(unsigned char *)(v44 + 32) = *(unsigned char *)(v45 + 32);
  uint64_t v49 = *(void *)(v45 + 48);
  *(void *)(v44 + 40) = *(void *)(v45 + 40);
  *(void *)(v44 + 48) = v49;
  *(unsigned char *)(v44 + 56) = *(unsigned char *)(v45 + 56);
  uint64_t v50 = *(void *)(v45 + 72);
  *(void *)(v44 + 64) = *(void *)(v45 + 64);
  *(void *)(v44 + 72) = v50;
  *(void *)(v44 + 80) = *(void *)(v45 + 80);
  long long v51 = *(_OWORD *)(v45 + 88);
  *(_OWORD *)(v44 + 104) = *(_OWORD *)(v45 + 104);
  *(_OWORD *)(v44 + 88) = v51;
  long long v52 = *(_OWORD *)(v45 + 120);
  long long v53 = *(_OWORD *)(v45 + 136);
  *(_OWORD *)(v44 + 152) = *(_OWORD *)(v45 + 152);
  *(_OWORD *)(v44 + 136) = v53;
  *(_OWORD *)(v44 + 120) = v52;
  uint64_t v54 = *(void *)(v45 + 176);
  *(void *)(v44 + 168) = *(void *)(v45 + 168);
  *(void *)(v44 + 176) = v54;
  uint64_t v56 = *(void *)(v45 + 184);
  uint64_t v55 = *(void *)(v45 + 192);
  *(unsigned char *)(v44 + 200) = *(unsigned char *)(v45 + 200);
  *(void *)(v44 + 184) = v56;
  *(void *)(v44 + 192) = v55;
  *(unsigned char *)(v44 + 201) = *(unsigned char *)(v45 + 201);
  uint64_t v57 = *(void *)(v45 + 216);
  *(void *)(v44 + 208) = *(void *)(v45 + 208);
  *(void *)(v44 + 216) = v57;
  uint64_t v58 = *(void *)(v45 + 232);
  *(void *)(v44 + 224) = *(void *)(v45 + 224);
  *(void *)(v44 + 232) = v58;
  *(void *)(v44 + 240) = *(void *)(v45 + 240);
  *(unsigned char *)(v44 + 248) = *(unsigned char *)(v45 + 248);
  uint64_t v59 = *(void *)(v45 + 264);
  *(void *)(v44 + 256) = *(void *)(v45 + 256);
  *(void *)(v44 + 264) = v59;
  *(void *)(v44 + 272) = *(void *)(v45 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_250F275C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v76 = a3;
  uint64_t v77 = a2;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v78 = a1;
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = a2 + v6;
  void *v7 = *(void *)(a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = (char *)v7 + v10;
  uint64_t v12 = (char *)(v8 + v10);
  uint64_t v13 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = sub_251037400();
      v74 = v9;
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(v11, v12, v18);
      uint64_t v20 = v13[5];
      uint64_t v21 = &v11[v20];
      uint64_t v22 = &v12[v20];
      v19(&v11[v20], &v12[v20], v18);
      sub_250F26E08();
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
      uint64_t v9 = v74;
      uint64_t v24 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v21[v24[5]] = *(void *)&v22[v24[5]];
      *(void *)&v21[v24[6]] = *(void *)&v22[v24[6]];
      *(void *)&v21[v24[7]] = *(void *)&v22[v24[7]];
      uint64_t v25 = v13[6];
      uint64_t v26 = &v11[v25];
      uint64_t v27 = &v12[v25];
      char v28 = v27[16];
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
      v26[16] = v28;
      v11[v13[7]] = v12[v13[7]];
      v11[v13[8]] = v12[v13[8]];
      v11[v13[9]] = v12[v13[9]];
      uint64_t v29 = v13[10];
      uint64_t v30 = &v11[v29];
      uint64_t v31 = &v12[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      uint64_t v32 = v13[11];
      uint64_t v33 = &v11[v32];
      uint64_t v34 = &v12[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      uint64_t v72 = *(void (**)(char *, void, uint64_t, int *))(v14 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v72(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_250F2A4E0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F29854(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v11, v12, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v51 = sub_251037400();
  long long v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 24);
  uint64_t v75 = v51;
  v52(v11, v12, v51);
  uint64_t v53 = v13[5];
  uint64_t v54 = &v11[v53];
  uint64_t v73 = &v12[v53];
  ((void (*)(char *))v52)(&v11[v53]);
  sub_250F26E08();
  v52(&v54[*(int *)(v55 + 36)], &v73[*(int *)(v55 + 36)], v75);
  uint64_t v56 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v54[v56[5]] = *(void *)&v73[v56[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v54[v56[6]] = *(void *)&v73[v56[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v54[v56[7]] = *(void *)&v73[v56[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v13[6];
  uint64_t v58 = &v11[v57];
  uint64_t v59 = &v12[v57];
  long long v60 = *(_OWORD *)v59;
  v58[16] = v59[16];
  *(_OWORD *)uint64_t v58 = v60;
  v11[v13[7]] = v12[v13[7]];
  v11[v13[8]] = v12[v13[8]];
  v11[v13[9]] = v12[v13[9]];
  uint64_t v61 = v13[10];
  uint64_t v62 = &v11[v61];
  int v63 = &v12[v61];
  *(void *)uint64_t v62 = *(void *)v63;
  *((void *)v62 + 1) = *((void *)v63 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v64 = v13[11];
  v65 = &v11[v64];
  uint64_t v66 = &v12[v64];
  *(void *)v65 = *(void *)v66;
  *((void *)v65 + 1) = *((void *)v66 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v36 = v9[6];
  long long v37 = (void *)((char *)v7 + v36);
  uint64_t v38 = (void *)(v8 + v36);
  *long long v37 = *v38;
  v37[1] = v38[1];
  uint64_t v39 = v9[7];
  uint64_t v40 = (char *)v7 + v39;
  uint64_t v41 = v8 + v39;
  *(void *)uint64_t v40 = *(void *)v41;
  uint64_t v42 = *(void *)(v41 + 8);
  v40[16] = *(unsigned char *)(v41 + 16);
  *((void *)v40 + 1) = v42;
  *((void *)v40 + 3) = *(void *)(v41 + 24);
  *((void *)v40 + 4) = *(void *)(v41 + 32);
  *((void *)v40 + 5) = *(void *)(v41 + 40);
  *((void *)v40 + 6) = *(void *)(v41 + 48);
  *((void *)v40 + 7) = *(void *)(v41 + 56);
  *((void *)v40 + 8) = *(void *)(v41 + 64);
  *((void *)v40 + 9) = *(void *)(v41 + 72);
  *((void *)v40 + 10) = *(void *)(v41 + 80);
  *(void *)((char *)v7 + v9[8]) = *(void *)(v8 + v9[8]);
  *(void *)((char *)v7 + v9[9]) = *(void *)(v8 + v9[9]);
  uint64_t v43 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v44 = (void *)((char *)v7 + v43);
  uint64_t v45 = (void *)(v8 + v43);
  void *v44 = *(void *)(v8 + v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[1] = v45[1];
  v44[2] = v45[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[3] = v45[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[4] = v45[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[5] = v45[5];
  v44[6] = v45[6];
  v44[7] = v45[7];
  v44[8] = v45[8];
  v44[9] = v45[9];
  v44[10] = v45[10];
  v44[11] = v45[11];
  v44[12] = v45[12];
  v44[13] = v45[13];
  v44[14] = v45[14];
  uint64_t v46 = *(int *)(v76 + 32);
  uint64_t v47 = v78 + v46;
  uint64_t v48 = (long long *)(v77 + v46);
  uint64_t v49 = *(void *)(v77 + v46);
  if (*(void *)(v78 + v46))
  {
    if (v49)
    {
      *(void *)uint64_t v47 = v49;
      swift_retain();
      swift_release();
      *(void *)(v47 + 8) = *((void *)v48 + 1);
      swift_retain();
      swift_release();
      *(void *)(v47 + 16) = *((void *)v48 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80(v78 + v46);
      uint64_t v50 = *((void *)v48 + 2);
      *(_OWORD *)uint64_t v47 = *v48;
      *(void *)(v47 + 16) = v50;
    }
  }
  else if (v49)
  {
    *(void *)uint64_t v47 = v49;
    *(void *)(v47 + 8) = *((void *)v48 + 1);
    *(void *)(v47 + 16) = *((void *)v48 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v67 = *v48;
    *(void *)(v47 + 16) = *((void *)v48 + 2);
    *(_OWORD *)uint64_t v47 = v67;
  }
  *(unsigned char *)(v47 + 24) = *((unsigned char *)v48 + 24);
  *(unsigned char *)(v47 + 32) = *((unsigned char *)v48 + 32);
  *(void *)(v47 + 40) = *((void *)v48 + 5);
  swift_retain();
  swift_release();
  uint64_t v68 = *((void *)v48 + 6);
  *(unsigned char *)(v47 + 56) = *((unsigned char *)v48 + 56);
  *(void *)(v47 + 48) = v68;
  *(void *)(v47 + 64) = *((void *)v48 + 8);
  *(void *)(v47 + 72) = *((void *)v48 + 9);
  swift_retain();
  swift_release();
  *(void *)(v47 + 80) = *((void *)v48 + 10);
  swift_retain();
  swift_release();
  *(void *)(v47 + 88) = *((void *)v48 + 11);
  uint64_t v69 = *((void *)v48 + 12);
  *(unsigned char *)(v47 + 104) = *((unsigned char *)v48 + 104);
  *(void *)(v47 + 96) = v69;
  *(void *)(v47 + 112) = *((void *)v48 + 14);
  *(void *)(v47 + 120) = *((void *)v48 + 15);
  *(void *)(v47 + 128) = *((void *)v48 + 16);
  *(void *)(v47 + 136) = *((void *)v48 + 17);
  *(void *)(v47 + 144) = *((void *)v48 + 18);
  *(void *)(v47 + 152) = *((void *)v48 + 19);
  *(void *)(v47 + 160) = *((void *)v48 + 20);
  *(void *)(v47 + 168) = *((void *)v48 + 21);
  *(void *)(v47 + 176) = *((void *)v48 + 22);
  swift_retain();
  swift_release();
  *(void *)(v47 + 184) = *((void *)v48 + 23);
  swift_retain();
  swift_release();
  uint64_t v70 = *((void *)v48 + 24);
  *(unsigned char *)(v47 + 200) = *((unsigned char *)v48 + 200);
  *(void *)(v47 + 192) = v70;
  *(unsigned char *)(v47 + 201) = *((unsigned char *)v48 + 201);
  *(void *)(v47 + 208) = *((void *)v48 + 26);
  swift_retain();
  swift_release();
  *(void *)(v47 + 216) = *((void *)v48 + 27);
  swift_retain();
  swift_release();
  *(void *)(v47 + 224) = *((void *)v48 + 28);
  swift_retain();
  swift_release();
  *(void *)(v47 + 232) = *((void *)v48 + 29);
  swift_retain();
  swift_release();
  *(void *)(v47 + 240) = *((void *)v48 + 30);
  swift_retain();
  swift_release();
  *(unsigned char *)(v47 + 248) = *((unsigned char *)v48 + 248);
  *(void *)(v47 + 256) = *((void *)v48 + 32);
  swift_retain();
  swift_release();
  *(void *)(v47 + 264) = *((void *)v48 + 33);
  swift_retain();
  swift_release();
  *(void *)(v47 + 272) = *((void *)v48 + 34);
  return v78;
}

uint64_t sub_250F27E80(uint64_t a1)
{
  return a1;
}

uint64_t sub_250F27ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v9 = v8[5];
  uint64_t v10 = (char *)(v6 + v9);
  uint64_t v11 = (char *)(v7 + v9);
  uint64_t v12 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    sub_250F29854(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v41 = v3;
    uint64_t v15 = sub_251037400();
    int v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
    uint64_t v42 = v4;
    v16(v10, v11, v15);
    uint64_t v40 = v13;
    int v17 = v16;
    uint64_t v18 = v12[5];
    uint64_t v19 = &v10[v18];
    uint64_t v20 = &v11[v18];
    v17(&v10[v18], &v11[v18], v15);
    sub_250F26E08();
    uint64_t v22 = v15;
    uint64_t v3 = v41;
    v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v22);
    uint64_t v4 = v42;
    uint64_t v23 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v19[v23[5]] = *(void *)&v20[v23[5]];
    *(void *)&v19[v23[6]] = *(void *)&v20[v23[6]];
    *(void *)&v19[v23[7]] = *(void *)&v20[v23[7]];
    uint64_t v24 = v12[6];
    uint64_t v25 = &v10[v24];
    uint64_t v26 = &v11[v24];
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    v25[16] = v26[16];
    v10[v12[7]] = v11[v12[7]];
    v10[v12[8]] = v11[v12[8]];
    v10[v12[9]] = v11[v12[9]];
    *(_OWORD *)&v10[v12[10]] = *(_OWORD *)&v11[v12[10]];
    *(_OWORD *)&v10[v12[11]] = *(_OWORD *)&v11[v12[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v40 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)(v6 + v8[6]) = *(_OWORD *)(v7 + v8[6]);
  uint64_t v27 = v8[7];
  uint64_t v28 = v6 + v27;
  uint64_t v29 = v7 + v27;
  long long v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  *(void *)(v28 + 80) = *(void *)(v29 + 80);
  long long v31 = *(_OWORD *)(v29 + 64);
  long long v32 = *(_OWORD *)(v29 + 32);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
  *(_OWORD *)(v28 + 64) = v31;
  *(_OWORD *)(v28 + 32) = v32;
  *(void *)(v6 + v8[8]) = *(void *)(v7 + v8[8]);
  *(void *)(v6 + v8[9]) = *(void *)(v7 + v8[9]);
  uint64_t v33 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v34 = v6 + v33;
  uint64_t v35 = v7 + v33;
  long long v36 = *(_OWORD *)(v35 + 80);
  *(_OWORD *)(v34 + 64) = *(_OWORD *)(v35 + 64);
  *(_OWORD *)(v34 + 80) = v36;
  *(_OWORD *)(v34 + 96) = *(_OWORD *)(v35 + 96);
  *(void *)(v34 + 112) = *(void *)(v35 + 112);
  long long v37 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v37;
  long long v38 = *(_OWORD *)(v35 + 48);
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(_OWORD *)(v34 + 48) = v38;
  memcpy((void *)(v4 + *(int *)(a3 + 32)), (const void *)(v3 + *(int *)(a3 + 32)), 0x118uLL);
  return v4;
}

uint64_t sub_250F28210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(v5 + 16) = *(void *)(a2 + 16);
  uint64_t v63 = a3;
  uint64_t v64 = a2;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = (void *)(a2 + v6);
  *(void *)(v5 + v6) = *v8;
  swift_bridgeObjectRelease();
  uint64_t v62 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v9 = v62[5];
  uint64_t v10 = (char *)(v7 + v9);
  uint64_t v11 = (char *)v8 + v9;
  uint64_t v12 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      uint64_t v17 = sub_251037400();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
      uint64_t v61 = v5;
      v18(v10, v11, v17);
      uint64_t v19 = v18;
      uint64_t v20 = v12[5];
      uint64_t v21 = &v10[v20];
      uint64_t v22 = &v11[v20];
      v19(&v10[v20], &v11[v20], v17);
      sub_250F26E08();
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v17);
      uint64_t v5 = v61;
      uint64_t v24 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v21[v24[5]] = *(void *)&v22[v24[5]];
      *(void *)&v21[v24[6]] = *(void *)&v22[v24[6]];
      *(void *)&v21[v24[7]] = *(void *)&v22[v24[7]];
      uint64_t v25 = v12[6];
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
      v26[16] = v27[16];
      v10[v12[7]] = v11[v12[7]];
      v10[v12[8]] = v11[v12[8]];
      v10[v12[9]] = v11[v12[9]];
      *(_OWORD *)&v10[v12[10]] = *(_OWORD *)&v11[v12[10]];
      *(_OWORD *)&v10[v12[11]] = *(_OWORD *)&v11[v12[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_250F2A4E0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F29854(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v41 = sub_251037400();
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 40);
  v42(v10, v11, v41);
  uint64_t v43 = v12[5];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  v42(&v10[v43], &v11[v43], v41);
  sub_250F26E08();
  v42(&v44[*(int *)(v46 + 36)], &v45[*(int *)(v46 + 36)], v41);
  uint64_t v47 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v44[v47[5]] = *(void *)&v45[v47[5]];
  swift_bridgeObjectRelease();
  *(void *)&v44[v47[6]] = *(void *)&v45[v47[6]];
  swift_bridgeObjectRelease();
  *(void *)&v44[v47[7]] = *(void *)&v45[v47[7]];
  swift_bridgeObjectRelease();
  uint64_t v48 = v12[6];
  uint64_t v49 = &v10[v48];
  uint64_t v50 = &v11[v48];
  *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
  v49[16] = v50[16];
  v10[v12[7]] = v11[v12[7]];
  v10[v12[8]] = v11[v12[8]];
  v10[v12[9]] = v11[v12[9]];
  uint64_t v51 = v12[10];
  long long v52 = &v10[v51];
  uint64_t v53 = (uint64_t *)&v11[v51];
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *(void *)long long v52 = v55;
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = v12[11];
  uint64_t v57 = &v10[v56];
  uint64_t v58 = (uint64_t *)&v11[v56];
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  *(void *)uint64_t v57 = v60;
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
LABEL_7:
  *(_OWORD *)(v7 + v62[6]) = *(_OWORD *)((char *)v8 + v62[6]);
  uint64_t v29 = v62[7];
  uint64_t v30 = v7 + v29;
  long long v31 = (char *)v8 + v29;
  *(void *)uint64_t v30 = *(void *)v31;
  *(void *)(v30 + 8) = *((void *)v31 + 1);
  *(unsigned char *)(v30 + 16) = v31[16];
  *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
  *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v31 + 56);
  *(_OWORD *)(v30 + 72) = *(_OWORD *)(v31 + 72);
  *(void *)(v7 + v62[8]) = *(void *)((char *)v8 + v62[8]);
  *(void *)(v7 + v62[9]) = *(void *)((char *)v8 + v62[9]);
  uint64_t v32 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v33 = v7 + v32;
  uint64_t v34 = (char *)v8 + v32;
  *(void *)(v7 + v32) = *(void *)v34;
  swift_bridgeObjectRelease();
  *(void *)(v33 + 8) = *((void *)v34 + 1);
  *(void *)(v33 + 16) = *((void *)v34 + 2);
  swift_bridgeObjectRelease();
  *(void *)(v33 + 24) = *((void *)v34 + 3);
  swift_bridgeObjectRelease();
  *(void *)(v33 + 32) = *((void *)v34 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
  *(_OWORD *)(v33 + 56) = *(_OWORD *)(v34 + 56);
  *(_OWORD *)(v33 + 72) = *(_OWORD *)(v34 + 72);
  *(_OWORD *)(v33 + 88) = *(_OWORD *)(v34 + 88);
  *(_OWORD *)(v33 + 104) = *(_OWORD *)(v34 + 104);
  uint64_t v35 = *(int *)(v63 + 32);
  uint64_t v36 = v5 + v35;
  uint64_t v37 = v64 + v35;
  if (!*(void *)(v5 + v35))
  {
LABEL_11:
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    *(void *)(v36 + 16) = *(void *)(v37 + 16);
    goto LABEL_12;
  }
  if (!*(void *)v37)
  {
    sub_250F27E80(v36);
    goto LABEL_11;
  }
  *(void *)uint64_t v36 = *(void *)v37;
  swift_release();
  *(void *)(v36 + 8) = *(void *)(v37 + 8);
  swift_release();
  *(void *)(v36 + 16) = *(void *)(v37 + 16);
  swift_release();
LABEL_12:
  *(unsigned char *)(v36 + 24) = *(unsigned char *)(v37 + 24);
  *(unsigned char *)(v36 + 32) = *(unsigned char *)(v37 + 32);
  *(void *)(v36 + 40) = *(void *)(v37 + 40);
  swift_release();
  *(void *)(v36 + 48) = *(void *)(v37 + 48);
  *(unsigned char *)(v36 + 56) = *(unsigned char *)(v37 + 56);
  *(void *)(v36 + 64) = *(void *)(v37 + 64);
  *(void *)(v36 + 72) = *(void *)(v37 + 72);
  swift_release();
  *(void *)(v36 + 80) = *(void *)(v37 + 80);
  swift_release();
  *(void *)(v36 + 88) = *(void *)(v37 + 88);
  *(void *)(v36 + 96) = *(void *)(v37 + 96);
  *(unsigned char *)(v36 + 104) = *(unsigned char *)(v37 + 104);
  long long v38 = *(_OWORD *)(v37 + 128);
  *(_OWORD *)(v36 + 112) = *(_OWORD *)(v37 + 112);
  *(_OWORD *)(v36 + 128) = v38;
  long long v39 = *(_OWORD *)(v37 + 160);
  *(_OWORD *)(v36 + 144) = *(_OWORD *)(v37 + 144);
  *(_OWORD *)(v36 + 160) = v39;
  *(void *)(v36 + 176) = *(void *)(v37 + 176);
  swift_release();
  *(void *)(v36 + 184) = *(void *)(v37 + 184);
  swift_release();
  *(void *)(v36 + 192) = *(void *)(v37 + 192);
  *(unsigned char *)(v36 + 200) = *(unsigned char *)(v37 + 200);
  *(unsigned char *)(v36 + 201) = *(unsigned char *)(v37 + 201);
  *(void *)(v36 + 208) = *(void *)(v37 + 208);
  swift_release();
  *(void *)(v36 + 216) = *(void *)(v37 + 216);
  swift_release();
  *(void *)(v36 + 224) = *(void *)(v37 + 224);
  swift_release();
  *(void *)(v36 + 232) = *(void *)(v37 + 232);
  swift_release();
  *(void *)(v36 + 240) = *(void *)(v37 + 240);
  swift_release();
  *(unsigned char *)(v36 + 248) = *(unsigned char *)(v37 + 248);
  *(void *)(v36 + 256) = *(void *)(v37 + 256);
  swift_release();
  *(void *)(v36 + 264) = *(void *)(v37 + 264);
  swift_release();
  *(void *)(v36 + 272) = *(void *)(v37 + 272);
  return v5;
}

uint64_t sub_250F288DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F288F0);
}

uint64_t sub_250F288F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for OvernightMetricsChartLayout(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250F289A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F289B4);
}

uint64_t sub_250F289B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for OvernightMetricsChartLayout(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SevenDaySingleMetricChartContent()
{
  uint64_t result = qword_269B12D00;
  if (!qword_269B12D00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F28AA8()
{
  uint64_t result = type metadata accessor for OvernightMetricsChartLayout(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_250F28B64()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F28B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  sub_250F2A2DC();
  uint64_t v32 = v3 - 8;
  ((void (*)(void))MEMORY[0x270FA5388])();
  uint64_t v31 = (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (int *)(type metadata accessor for SingleMetricMinorPointMarks() - 8);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v30 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v28 - v8);
  uint64_t v10 = type metadata accessor for SmoothedLineTrace();
  uint64_t v11 = (int *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v29 = (uint64_t)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v15 = (uint64_t *)((char *)&v28 - v14);
  uint64_t v16 = *(void *)(a1 + 8);
  sub_250F28F6C((uint64_t)&v28 + v11[7] - v14);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = type metadata accessor for SevenDaySingleMetricChartContent();
  uint64_t v19 = a1 + *(int *)(v18 + 28);
  sub_250F2A540(v19, (uint64_t)v15 + v11[9], type metadata accessor for OvernightMetricsChartLayout);
  uint64_t v20 = (const void *)(a1 + *(int *)(v18 + 32));
  memcpy(v34, v20, 0x118uLL);
  void *v15 = v16;
  *(void *)((char *)v15 + v11[8]) = v17;
  memcpy((char *)v15 + v11[10], v20, 0x118uLL);
  sub_250F28F6C((uint64_t)v9 + v5[7]);
  sub_250F2A540(v19, (uint64_t)v9 + v5[9], type metadata accessor for OvernightMetricsChartLayout);
  *uint64_t v9 = v16;
  *(void *)((char *)v9 + v5[8]) = v17;
  memcpy((char *)v9 + v5[10], v34, 0x118uLL);
  uint64_t v21 = v29;
  sub_250F2A540((uint64_t)v15, v29, (uint64_t (*)(void))type metadata accessor for SmoothedLineTrace);
  uint64_t v22 = v30;
  sub_250F2A540((uint64_t)v9, v30, (uint64_t (*)(void))type metadata accessor for SingleMetricMinorPointMarks);
  sub_250F29794(&qword_269B12D28, (void (*)(uint64_t))type metadata accessor for SmoothedLineTrace);
  uint64_t v23 = v31;
  sub_250F2A540(v21, v31, (uint64_t (*)(void))type metadata accessor for SmoothedLineTrace);
  sub_250F29794(&qword_269B12D30, (void (*)(uint64_t))type metadata accessor for SingleMetricMinorPointMarks);
  uint64_t v24 = v32;
  uint64_t v25 = v23 + *(int *)(v32 + 56);
  sub_250F2A540(v22, v25, (uint64_t (*)(void))type metadata accessor for SingleMetricMinorPointMarks);
  uint64_t v26 = v33;
  sub_250F2A34C(v23, v33, (uint64_t (*)(void))type metadata accessor for SmoothedLineTrace);
  sub_250F2A34C(v25, v26 + *(int *)(v24 + 56), (uint64_t (*)(void))type metadata accessor for SingleMetricMinorPointMarks);
  swift_bridgeObjectRetain();
  sub_250F2A3B4(v34);
  swift_bridgeObjectRetain();
  sub_250F2A3B4(v34);
  sub_250F2A4E0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SingleMetricMinorPointMarks);
  sub_250F2A4E0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SmoothedLineTrace);
  sub_250F2A4E0(v22, (uint64_t (*)(void))type metadata accessor for SingleMetricMinorPointMarks);
  return sub_250F2A4E0(v21, (uint64_t (*)(void))type metadata accessor for SmoothedLineTrace);
}

uint64_t sub_250F28F6C@<X0>(uint64_t a1@<X8>)
{
  if ((*(unsigned char *)v1 & 1) != 0 || (v3 = *(void *)(v1 + 8), (uint64_t v4 = *(void *)(v3 + 16)) == 0))
  {
    uint64_t v11 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v10 = v11;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    uint64_t v13 = *(void *)(v6 - 8);
    sub_250F2A540(v3+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v5, a1, type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t v8 = a1;
    uint64_t v9 = 0;
    uint64_t v10 = v6;
  }
  return v7(v8, v9, 1, v10);
}

void sub_250F290A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SevenDaySingleMetricChartContent();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = sub_251038D00();
  uint64_t v11 = v10;
  sub_250F2A540(a2, (uint64_t)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = swift_allocObject();
  sub_250F2A34C((uint64_t)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(void))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_250F29820(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a3, a1, v14);
  sub_250F297EC(0);
  uint64_t v16 = (uint64_t *)(a3 + *(int *)(v15 + 36));
  *uint64_t v16 = v9;
  v16[1] = v11;
  v16[2] = (uint64_t)sub_250F2A25C;
  v16[3] = v13;
}

double sub_250F29228@<D0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  sub_251038AB0();
  char v4 = *a1;
  uint64_t v5 = sub_251038AE0();
  swift_release();
  sub_251038D50();
  uint64_t v6 = sub_251038D40();
  swift_release();
  sub_2510381A0();
  sub_251038D00();
  sub_251038150();
  uint64_t v31 = v5;
  __int16 v32 = 256;
  uint64_t v33 = v6;
  char v34 = v4;
  uint64_t v35 = v26;
  char v36 = v27;
  uint64_t v37 = v28;
  char v38 = v29;
  long long v39 = v30;
  sub_251038D20();
  sub_250F71600(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v15, 0.0, 1, 0.0, 1);
  swift_release();
  swift_release();
  sub_251038D50();
  uint64_t v7 = sub_251038D40();
  swift_release();
  long long v8 = v23;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v8;
  long long v9 = v25;
  *(_OWORD *)(a2 + 160) = v24;
  *(_OWORD *)(a2 + 176) = v9;
  long long v10 = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = v10;
  long long v11 = v21;
  *(_OWORD *)(a2 + 96) = v20;
  *(_OWORD *)(a2 + 112) = v11;
  long long v12 = v15[1];
  *(_OWORD *)a2 = v15[0];
  *(_OWORD *)(a2 + 16) = v12;
  double result = *(double *)&v16;
  long long v14 = v17;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v14;
  *(void *)(a2 + 192) = v7;
  *(unsigned char *)(a2 + 200) = v4;
  return result;
}

uint64_t sub_250F293EC()
{
  sub_250F295DC();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v0;
  sub_250F29640();
  sub_250F296B4();
  sub_251037F20();
  uint64_t v8 = v0;
  sub_250F297EC(0);
  sub_250F29794(&qword_269B12DD0, (void (*)(uint64_t))sub_250F295DC);
  sub_250F29E38(&qword_269B12DD8, sub_250F297EC, (void (*)(void))sub_250F29F2C, (void (*)(void))sub_250F29F60);
  sub_251037D50();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_250F295C0()
{
  return sub_251037D00();
}

void sub_250F295DC()
{
  if (!qword_269B12D10)
  {
    sub_250F29640();
    sub_250F296B4();
    unint64_t v0 = sub_251037F30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12D10);
    }
  }
}

void sub_250F29640()
{
  if (!qword_269B12D18)
  {
    type metadata accessor for SmoothedLineTrace();
    type metadata accessor for SingleMetricMinorPointMarks();
    unint64_t v0 = sub_251037CE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12D18);
    }
  }
}

unint64_t sub_250F296B4()
{
  unint64_t result = qword_269B12D20;
  if (!qword_269B12D20)
  {
    sub_250F29640();
    sub_250F29794(&qword_269B12D28, (void (*)(uint64_t))type metadata accessor for SmoothedLineTrace);
    sub_250F29794(&qword_269B12D30, (void (*)(uint64_t))type metadata accessor for SingleMetricMinorPointMarks);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12D20);
  }
  return result;
}

uint64_t sub_250F29794(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F297DC@<X0>(uint64_t a1@<X8>)
{
  return sub_250F28B80(*(void *)(v1 + 16), a1);
}

void sub_250F297E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_250F290A0(a1, *(void *)(v2 + 16), a2);
}

void sub_250F297EC(uint64_t a1)
{
}

void sub_250F29820(uint64_t a1)
{
}

void sub_250F29854(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250F298B8()
{
  if (!qword_269B12D48)
  {
    sub_250F2994C();
    sub_250F29794(&qword_269B12DC8, (void (*)(uint64_t))sub_250F2994C);
    unint64_t v0 = sub_251038590();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12D48);
    }
  }
}

void sub_250F2994C()
{
  if (!qword_269B12D50)
  {
    sub_250F299F4(255);
    sub_250F29E38(&qword_269B12D98, sub_250F299F4, (void (*)(void))sub_250F29D04, (void (*)(void))sub_250F29EF8);
    unint64_t v0 = sub_251038200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12D50);
    }
  }
}

void sub_250F299F4(uint64_t a1)
{
}

void sub_250F29A28(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_251038270();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_250F29A9C(uint64_t a1)
{
}

void sub_250F29AC4(uint64_t a1)
{
}

void sub_250F29AEC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250F29B50(uint64_t a1)
{
}

void sub_250F29B84()
{
  if (!qword_269B12D78)
  {
    sub_250F29C00();
    unint64_t v0 = sub_251038060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12D78);
    }
  }
}

unint64_t sub_250F29C00()
{
  unint64_t result = qword_269B12D80;
  if (!qword_269B12D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12D80);
  }
  return result;
}

void sub_250F29C54()
{
  if (!qword_269B12D88)
  {
    sub_250F29CB0();
    unint64_t v0 = sub_251038500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12D88);
    }
  }
}

unint64_t sub_250F29CB0()
{
  unint64_t result = qword_269B12D90;
  if (!qword_269B12D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12D90);
  }
  return result;
}

unint64_t sub_250F29D04()
{
  unint64_t result = qword_269B12DA0;
  if (!qword_269B12DA0)
  {
    sub_250F29A9C(255);
    sub_250F29D7C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12DA0);
  }
  return result;
}

unint64_t sub_250F29D7C()
{
  unint64_t result = qword_269B12DA8;
  if (!qword_269B12DA8)
  {
    sub_250F29AC4(255);
    sub_250F29E38(&qword_269B12DB0, sub_250F29B50, (void (*)(void))sub_250F29EC4, (void (*)(void))sub_250F29EF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12DA8);
  }
  return result;
}

uint64_t sub_250F29E38(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F29EC4()
{
  return sub_250F29794(&qword_269B12DB8, (void (*)(uint64_t))sub_250F29B84);
}

uint64_t sub_250F29EF8()
{
  return sub_250F29794(&qword_269B12DC0, (void (*)(uint64_t))sub_250F29C54);
}

uint64_t sub_250F29F2C()
{
  return sub_250F29794(&qword_269B12DE0, sub_250F29820);
}

uint64_t sub_250F29F60()
{
  return sub_250F29794(&qword_269B12DE8, (void (*)(uint64_t))sub_250F298B8);
}

uint64_t sub_250F29F94()
{
  uint64_t v1 = type metadata accessor for SevenDaySingleMetricChartContent();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + *(int *)(v1 + 28);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v6 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = sub_251037400();
    unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v5, v7);
    uint64_t v9 = v5 + *(int *)(v6 + 20);
    v8(v9, v7);
    sub_250F26E08();
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + *(int *)(v1 + 32)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

double sub_250F2A25C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SevenDaySingleMetricChartContent() - 8);
  uint64_t v4 = (char *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  return sub_250F29228(v4, a1);
}

void sub_250F2A2DC()
{
  if (!qword_269B12DF0)
  {
    type metadata accessor for SmoothedLineTrace();
    type metadata accessor for SingleMetricMinorPointMarks();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B12DF0);
    }
  }
}

uint64_t sub_250F2A34C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_250F2A3B4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_250F2A494(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_250F2A4E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F2A540(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F2A5A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F2A694@<X0>(uint64_t a1@<X8>)
{
  v18[1] = a1;
  uint64_t v1 = sub_251038ED0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v18 - v6;
  v18[0] = sub_251037400();
  uint64_t v8 = *(void *)(v18[0] - 8);
  MEMORY[0x270FA5388](v18[0]);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v18 - v12;
  sub_251038EC0();
  sub_251038E90();
  sub_251038EA0();
  long long v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v4, v1);
  sub_251038EC0();
  v14(v7, v1);
  sub_2510372B0();
  sub_2510372B0();
  sub_2510372A0();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v16 = v18[0];
  v15(v10, v18[0]);
  return v15(v13, v16);
}

void *sub_250F2A8D4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251038F20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_250F2A9A0(uint64_t a1)
{
  uint64_t v2 = sub_251038F20();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_250F2AA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_250F2AA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_250F2AAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_250F2AB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_250F2ABF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F2AC08);
}

uint64_t sub_250F2AC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251038F20();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_250F2ACD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F2ACEC);
}

uint64_t sub_250F2ACEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_251038F20();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularSpecs()
{
  uint64_t result = qword_269B12DF8;
  if (!qword_269B12DF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F2ADF4()
{
  uint64_t result = sub_251038F20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

int *sub_250F2AE88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251038F20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038400();
  uint64_t result = (int *)objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v7 = result;
    unsigned __int8 v8 = objc_msgSend(result, sel_isAppleWatch);

    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    uint64_t result = (int *)type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *(unsigned char *)(a1 + result[5]) = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_250F2AFA8()
{
  uint64_t v0 = sub_250FC1D98();
  uint64_t v2 = 0x656C637269632E35;
  if (v0 != 5) {
    uint64_t v2 = 0;
  }
  if ((unint64_t)(v0 - 1) < 4) {
    uint64_t v2 = v0 + 0x656C637269632E30;
  }
  if (v1) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_250F2B01C(void *a1, id *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v6 - 8);
  unsigned __int8 v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_251038F20();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038F10();
  char v13 = sub_251038EF0();
  long long v14 = *(void (**)(char *, uint64_t))(v10 + 8);
  v14(v12, v9);
  sub_250F2E248(v5, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v13)
  {
    sub_250F2C2D0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
LABEL_4:
    sub_251038AD0();
    goto LABEL_8;
  }
  sub_251038F00();
  char v15 = sub_251038EF0();
  v14(v12, v9);
  sub_250F2C2D0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v15) {
    goto LABEL_4;
  }
  if (*a1 != -1) {
    swift_once();
  }
  MEMORY[0x2533907A0](*a2);
LABEL_8:
  uint64_t v16 = sub_251038AE0();
  swift_release();
  return v16;
}

uint64_t sub_250F2B248()
{
  uint64_t v1 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251038F20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038F10();
  char v8 = sub_251038EF0();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  sub_250F2E248(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v8)
  {
    sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  }
  else
  {
    sub_251038F00();
    char v10 = sub_251038EF0();
    v9(v7, v4);
    sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if ((v10 & 1) == 0)
    {
      id v11 = objc_msgSend(self, sel_systemGrayColor);
      MEMORY[0x2533907A0](v11);
      goto LABEL_6;
    }
  }
  sub_251038AD0();
LABEL_6:
  uint64_t v12 = sub_251038AE0();
  swift_release();
  return v12;
}

uint64_t sub_250F2B458(uint64_t a1, unsigned int *a2, void *a3, id *a4, uint64_t a5)
{
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  long long v30 = a3;
  sub_250F2F3D0(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v29 - v8;
  uint64_t v10 = sub_2510378C0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  long long v17 = (char *)v29 - v16;
  (*(void (**)(char *, void, uint64_t, double))(v11 + 104))((char *)v29 - v16, *a2, v10, v15);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v9);
  uint64_t v18 = sub_2510377E0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, v18) == 1)
  {
    sub_250F2E174((uint64_t)v9, &qword_26B210AB8, MEMORY[0x263F42D70]);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    return sub_250F2B248();
  }
  uint64_t v20 = sub_2510377B0();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v29[2] = v5;
  uint64_t v22 = *(void *)(sub_251037940() - 8);
  unint64_t v23 = v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  long long v24 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v25 = *(void *)(v22 + 72);
  v29[1] = v20;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_2510378D0();
    char v26 = sub_2510378B0();
    char v27 = *v24;
    (*v24)(v13, v10);
    if (v26) {
      break;
    }
    v23 += v25;
    if (!--v21)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease_n();
  v27(v17, v10);
  return sub_250F2B01C(v30, v31);
}

uint64_t sub_250F2B7A8(void *a1, id *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_251038F20();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038F10();
  char v13 = sub_251038EF0();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v10 + 8);
  v14(v12, v9);
  sub_250F2E248(v5, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v13)
  {
    sub_250F2C2D0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    return sub_251038AD0();
  }
  else
  {
    sub_251038F00();
    char v16 = sub_251038EF0();
    v14(v12, v9);
    sub_250F2C2D0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if (v16)
    {
      return sub_251038AD0();
    }
    else
    {
      if (*a1 != -1) {
        swift_once();
      }
      return MEMORY[0x2533907A0](*a2);
    }
  }
}

uint64_t sub_250F2B9A8()
{
  uint64_t v1 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251038F20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038F10();
  char v8 = sub_251038EF0();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  sub_250F2E248(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v8)
  {
    sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  }
  else
  {
    sub_251038F00();
    char v10 = sub_251038EF0();
    v9(v7, v4);
    sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if ((v10 & 1) == 0)
    {
      sub_251038AD0();
      uint64_t v11 = sub_251038AE0();
      swift_release();
      return v11;
    }
  }
  return sub_251038AD0();
}

uint64_t sub_250F2BB88()
{
  uint64_t v1 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251038F20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038F10();
  char v8 = sub_251038EF0();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  sub_250F2E248(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v8)
  {
    sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    return sub_251038AD0();
  }
  sub_251038F00();
  char v10 = sub_251038EF0();
  v9(v7, v4);
  sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v10) {
    return sub_251038AD0();
  }
  uint64_t v12 = sub_250FC1D98();
  if (v13) {
    return sub_251038AC0();
  }
  if (v12 == 1)
  {
    if (qword_269B12BA8 != -1) {
      swift_once();
    }
    uint64_t v14 = (void *)qword_269B14138;
  }
  else if (v12)
  {
    if (qword_26B210180 != -1) {
      swift_once();
    }
    uint64_t v14 = (void *)qword_26B210330;
  }
  else
  {
    if (qword_26B210178 != -1) {
      swift_once();
    }
    uint64_t v14 = (void *)qword_26B210328;
  }
  return MEMORY[0x2533907A0](v14);
}

uint64_t sub_250F2BE20()
{
  uint64_t v1 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251038F20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038F10();
  char v8 = sub_251038EF0();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  sub_250F2E248(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v8)
  {
    sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  }
  else
  {
    sub_251038F00();
    char v10 = sub_251038EF0();
    v9(v7, v4);
    sub_250F2C2D0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if ((v10 & 1) == 0)
    {
      id v12 = objc_msgSend(self, sel_systemGrayColor);
      MEMORY[0x2533907A0](v12);
      uint64_t v11 = sub_251038AE0();
      swift_release();
      return v11;
    }
  }
  return sub_251038AD0();
}

id sub_250F2C028()
{
  uint64_t v0 = sub_251038820();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F2F3D0(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - v5;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    char v8 = result;
    unsigned int v9 = objc_msgSend(result, sel_isAppleWatch);

    if (v9)
    {
      sub_251038770();
      uint64_t v10 = sub_251038760();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
      uint64_t v11 = sub_251038790();
      sub_250F2E174((uint64_t)v6, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F1A710], v0);
      uint64_t v12 = sub_251038760();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
      sub_251038770();
      uint64_t v11 = sub_2510387B0();
      sub_250F2E174((uint64_t)v6, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
    return (id)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_250F2C2D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_250F2C330()
{
  uint64_t v0 = sub_251038820();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F2F3D0(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - v5;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    char v8 = result;
    unsigned int v9 = objc_msgSend(result, sel_isAppleWatch);

    if (v9)
    {
      sub_251038770();
      uint64_t v10 = sub_251038760();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
      uint64_t v11 = sub_251038790();
      sub_250F2E174((uint64_t)v6, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F1A730], v0);
      uint64_t v12 = sub_251038760();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
      uint64_t v11 = sub_2510387B0();
      sub_250F2E174((uint64_t)v6, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
    return (id)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_250F2C5D4()
{
  sub_250F2F3D0(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v7 - v1;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v4 = result;
    objc_msgSend(result, sel_isAppleWatch);

    sub_251038780();
    uint64_t v5 = sub_251038760();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
    uint64_t v6 = sub_251038790();
    sub_250F2E174((uint64_t)v2, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
    return (id)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_250F2C740@<X0>(void *a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v1 = sub_251038F20();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v33 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  char v34 = (char *)&v29 - v4;
  uint64_t v5 = sub_251037C50();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v9 = self;
  *(void *)&v43[0] = MEMORY[0x2533907A0](objc_msgSend(v9, sel_systemGrayColor));
  uint64_t v31 = sub_251038160();
  MEMORY[0x2533907A0](objc_msgSend(v9, sel_systemGrayColor));
  uint64_t v10 = sub_251038AE0();
  swift_release();
  *(void *)&v43[0] = v10;
  uint64_t v30 = sub_251038160();
  MEMORY[0x2533907A0](objc_msgSend(v9, sel_systemGrayColor));
  uint64_t v11 = sub_251038AE0();
  swift_release();
  *(void *)&v43[0] = v11;
  uint64_t v12 = sub_251038160();
  if (qword_269B12BC0 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v5, (uint64_t)qword_269B1AD40);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v8, v13, v5);
  sub_251038B20();
  uint64_t v15 = sub_251038AE0();
  swift_release();
  if (qword_269B12BC8 != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v5, (uint64_t)qword_269B1AD58);
  v14(v8, v16, v5);
  sub_251038B20();
  uint64_t v17 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v18 = sub_251038AE0();
  swift_release();
  *(void *)&v43[0] = sub_251038AB0();
  uint64_t v19 = sub_251038160();
  if (qword_26B210178 != -1) {
    swift_once();
  }
  uint64_t v20 = MEMORY[0x2533907A0]((id)qword_26B210328);
  if (qword_26B210180 != -1) {
    swift_once();
  }
  uint64_t v21 = MEMORY[0x2533907A0]((id)qword_26B210330);
  sub_250FA2394((uint64_t)&v39);
  *(void *)&v43[0] = v15;
  *((void *)&v43[0] + 1) = v17;
  *(void *)&v43[1] = v18;
  BYTE8(v43[1]) = 0;
  LOBYTE(v43[2]) = 1;
  *((void *)&v43[2] + 1) = v19;
  *(void *)&v43[3] = 0;
  BYTE8(v43[3]) = 1;
  *(void *)&v43[4] = 0x4014000000000000;
  *((void *)&v43[4] + 1) = v20;
  *(void *)&v43[5] = v21;
  *((void *)&v43[5] + 1) = 0x3FE0000000000000;
  *(void *)&v43[6] = 0;
  BYTE8(v43[6]) = 1;
  v43[7] = xmmword_25103A620;
  v43[8] = xmmword_25103A630;
  v43[9] = xmmword_25103A640;
  v43[10] = xmmword_25103A650;
  memset(&v43[11], 0, 24);
  WORD4(v43[12]) = 1;
  *(void *)&v43[13] = v31;
  *((void *)&v43[13] + 1) = v30;
  *(void *)&v43[14] = v12;
  *(_OWORD *)((char *)&v43[14] + 8) = v39;
  BYTE8(v43[15]) = v40;
  v43[16] = v41;
  *(void *)&v43[17] = v42;
  unint64_t v23 = v34;
  uint64_t v22 = v35;
  uint64_t v24 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v32, v36);
  uint64_t v25 = v33;
  sub_251038F10();
  sub_250F2DFF0();
  LOBYTE(v21) = sub_2510390F0();
  char v26 = *(void (**)(char *, uint64_t))(v22 + 8);
  v26(v25, v24);
  if (v21)
  {
    v26(v23, v24);
    memcpy(v38, v43, sizeof(v38));
    static OvernightMetricsChartSpec.accented(_:)((uint64_t)v38, (uint64_t)v37);
    return sub_250F2E048((uint64_t *)v43);
  }
  sub_251038F00();
  char v27 = sub_2510390F0();
  v26(v25, v24);
  v26(v23, v24);
  if (v27)
  {
    memcpy(v38, v43, sizeof(v38));
    static OvernightMetricsChartSpec.vibrant(_:)((uint64_t)v38, (uint64_t)v37);
    return sub_250F2E048((uint64_t *)v43);
  }
  return (uint64_t *)memcpy(v37, v43, 0x118uLL);
}

unint64_t sub_250F2CD34(uint64_t a1)
{
  sub_250F2F3D0(0, &qword_269B12E18, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v17 - v3;
  uint64_t v5 = type metadata accessor for MultilayerCircularGaugeLayer();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - v10;
  unint64_t v12 = sub_250F2CFC8(a1);
  unint64_t v18 = v12;
  sub_250F2D464((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_250F2E174((uint64_t)v4, &qword_269B12E18, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
  }
  else
  {
    sub_250F2E1E4((uint64_t)v4, (uint64_t)v11);
    sub_250F2E248((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MultilayerCircularGaugeLayer);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_250FA12D0(0, *(void *)(v12 + 16) + 1, 1, v12);
    }
    unint64_t v14 = *(void *)(v12 + 16);
    unint64_t v13 = *(void *)(v12 + 24);
    if (v14 >= v13 >> 1) {
      unint64_t v12 = sub_250FA12D0(v13 > 1, v14 + 1, 1, v12);
    }
    *(void *)(v12 + 16) = v14 + 1;
    sub_250F2E1E4((uint64_t)v8, v12+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14);
    unint64_t v18 = v12;
    sub_250F2C2D0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MultilayerCircularGaugeLayer);
  }
  size_t v15 = sub_250F2D72C();
  sub_250FF5C40(v15);
  return v18;
}

uint64_t sub_250F2CFC8(uint64_t a1)
{
  uint64_t v3 = sub_251038D70();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryCircularSpecs() + 20))) {
    double v7 = 0.075;
  }
  else {
    double v7 = 0.05;
  }
  sub_250F2F3D0(0, &qword_269B12E20, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, MEMORY[0x263F8E0F8]);
  char v8 = (int *)type metadata accessor for MultilayerCircularGaugeLayer();
  uint64_t v9 = *(void *)(*((void *)v8 - 1) + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*((void *)v8 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v8 - 1) + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_25103A660;
  uint64_t result = _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  double v14 = v13 - v7;
  if (v13 - v7 < -1.5)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v36 = v9;
  uint64_t v33 = v11;
  unint64_t v15 = v11 + v10;
  uint64_t v37 = a1;
  uint64_t v38 = sub_250F2B458(a1, MEMORY[0x263F42E18], &qword_26B210180, (id *)&qword_26B210330, (uint64_t)sub_250FB0044);
  uint64_t v16 = sub_251038160();
  uint64_t v17 = *(void (**)(void))(v4 + 104);
  unsigned int v35 = *MEMORY[0x263F1B998];
  char v34 = (void (*)(char *, void, uint64_t))v17;
  v17(v6);
  sub_251037410();
  *(void *)unint64_t v15 = 0xBFF8000000000000;
  *(double *)(v15 + 8) = v14;
  *(void *)(v15 + 16) = v16;
  unint64_t v18 = *(void (**)(unint64_t, char *, uint64_t))(v4 + 32);
  v18(v15 + v8[6], v6, v3);
  *(void *)(v15 + v8[7]) = 0x3FF0000000000000;
  *(unsigned char *)(v15 + v8[8]) = 2;
  unint64_t v19 = v15 + v8[9];
  *(void *)unint64_t v19 = 0x4000000000000000;
  *(unsigned char *)(v19 + 8) = 0;
  uint64_t result = _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  double v21 = v7 + v20;
  if (v7 + v20 > 1.5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v22 = v15 + v36;
  uint64_t v38 = sub_250F2B458(v37, MEMORY[0x263F42E20], &qword_26B210180, (id *)&qword_26B210330, (uint64_t)sub_250FB0044);
  unint64_t v23 = (void (*)(uint64_t, char *, uint64_t))v18;
  uint64_t v24 = sub_251038160();
  v34(v6, v35, v3);
  sub_251037410();
  *(double *)uint64_t v22 = v21;
  *(void *)(v22 + 8) = 0x3FF8000000000000;
  *(void *)(v22 + 16) = v24;
  v23(v22 + v8[6], v6, v3);
  *(void *)(v22 + v8[7]) = 0x3FF0000000000000;
  *(unsigned char *)(v22 + v8[8]) = 3;
  uint64_t v25 = v22 + v8[9];
  *(void *)uint64_t v25 = 0x4000000000000000;
  *(unsigned char *)(v25 + 8) = 0;
  _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  double v27 = v7 + v26;
  uint64_t result = _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  double v29 = v28 - v7;
  if (v27 <= v29)
  {
    unint64_t v30 = v15 + 2 * v36;
    uint64_t v38 = sub_250F2B458(v37, MEMORY[0x263F42E28], &qword_26B210178, (id *)&qword_26B210328, (uint64_t)sub_250FAFE48);
    uint64_t v31 = sub_251038160();
    v34(v6, v35, v3);
    sub_251037410();
    *(double *)unint64_t v30 = v27;
    *(double *)(v30 + 8) = v29;
    *(void *)(v30 + 16) = v31;
    v23(v30 + v8[6], v6, v3);
    *(void *)(v30 + v8[7]) = 0x3FF0000000000000;
    *(unsigned char *)(v30 + v8[8]) = 1;
    unint64_t v32 = v30 + v8[9];
    *(void *)unint64_t v32 = 0x4000000000000000;
    *(unsigned char *)(v32 + 8) = 0;
    return v33;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_250F2D464@<X0>(uint64_t a1@<X8>)
{
  double v2 = COERCE_DOUBLE(sub_250FC1F70());
  if (v4)
  {
    uint64_t v22 = type metadata accessor for MultilayerCircularGaugeLayer();
    unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    return v23(a1, 1, 1, v22);
  }
  else
  {
    if (v2 <= 1.5) {
      double v5 = v2;
    }
    else {
      double v5 = 1.5;
    }
    if (v2 >= -1.5) {
      double v6 = v5;
    }
    else {
      double v6 = -1.5;
    }
    if (v3 >= -1.5) {
      double v7 = v3;
    }
    else {
      double v7 = -1.5;
    }
    if (v3 <= 1.5) {
      double v8 = v7;
    }
    else {
      double v8 = 1.5;
    }
    _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
    double v10 = v9;
    double v12 = v11;
    sub_250F2B7A8(&qword_26B210178, (id *)&qword_26B210328);
    sub_250F2B7A8(&qword_26B210180, (id *)&qword_26B210330);
    sub_250F40950(v6, v8, v10, v12);
    uint64_t v14 = v13;
    swift_release();
    swift_release();
    sub_251038DE0();
    MEMORY[0x25338FF80](v24, v14);
    uint64_t v15 = sub_251038160();
    uint64_t v16 = (int *)type metadata accessor for MultilayerCircularGaugeLayer();
    uint64_t v17 = a1 + v16[6];
    uint64_t v18 = *MEMORY[0x263F1B998];
    uint64_t v19 = sub_251038D70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v17, v18, v19);
    sub_251037410();
    *(double *)a1 = v6;
    *(double *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + v16[7]) = 0x3FF0000000000000;
    *(unsigned char *)(a1 + v16[8]) = 0;
    uint64_t v20 = a1 + v16[9];
    *(void *)uint64_t v20 = 0;
    *(unsigned char *)(v20 + 8) = 1;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v16 - 1) + 56))(a1, 0, 1, v16);
  }
}

size_t sub_250F2D72C()
{
  uint64_t v1 = sub_2510378C0();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  double v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, void, uint64_t, double))(v2 + 104))(v5, *MEMORY[0x263F42E28], v1, v3);
  double v6 = sub_250FC2370((uint64_t)v5);
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v20 = v0;
  uint64_t v7 = sub_250FED528((void (*)(long long *__return_ptr, uint64_t *))sub_250F2E2B0, (uint64_t)v19, (uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_250F2DDE8(v7, 0.25);
  swift_bridgeObjectRelease();
  uint64_t v18 = v0;
  uint64_t v9 = sub_250FED644((void (*)(uint64_t *__return_ptr, long long *))sub_250F2E2C8, (uint64_t)v17, v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_250F2D930();
  uint64_t v16 = v0;
  uint64_t v11 = sub_250FED644((void (*)(uint64_t *__return_ptr, long long *))sub_250F2E308, (uint64_t)v15, v10);
  swift_bridgeObjectRelease();
  size_t v12 = sub_250F2ED00(v9);
  swift_bridgeObjectRelease();
  size_t v13 = sub_250F2ED00(v11);
  swift_bridgeObjectRelease();
  size_t v21 = v12;
  sub_250FF5C40(v13);
  return v21;
}

uint64_t sub_250F2D930()
{
  uint64_t v1 = sub_2510378C0();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  double v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v6 = *(void (**)(unsigned char *, void, uint64_t, double))(v2 + 104);
  v6(v5, *MEMORY[0x263F42E18], v1, v3);
  uint64_t v7 = sub_250FC2370((uint64_t)v5);
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
  v8(v5, v1);
  ((void (*)(unsigned char *, void, uint64_t))v6)(v5, *MEMORY[0x263F42E20], v1);
  uint64_t v9 = sub_250FC2370((uint64_t)v5);
  v8(v5, v1);
  uint64_t v15 = v7;
  sub_250FF5AF8((uint64_t)v9);
  uint64_t v14 = v0;
  uint64_t v10 = sub_250FED528((void (*)(long long *__return_ptr, uint64_t *))sub_250F2E2B0, (uint64_t)v13, (uint64_t)v15);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_250F2DDE8(v10, 0.25);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_250F2DAE8@<X0>(uint64_t *a1@<X0>, void *a2@<X3>, id *a3@<X4>, uint64_t *a4@<X8>)
{
  double v27 = a3;
  double v29 = a4;
  uint64_t v6 = sub_251038D70();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  sub_250F2F3D0(0, &qword_269B12E20, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, MEMORY[0x263F8E0F8]);
  size_t v12 = (int *)(type metadata accessor for MultilayerCircularGaugeLayer() - 8);
  uint64_t v13 = *(void *)v12;
  uint64_t v26 = *(void *)(*(void *)v12 + 72);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v28 = v15;
  *(_OWORD *)(v15 + 16) = xmmword_25103A670;
  uint64_t v16 = (char *)(v15 + v14);
  uint64_t v30 = sub_250F2B7A8(a2, v27);
  uint64_t v17 = sub_251038160();
  uint64_t v18 = *(void (**)(char *, void, uint64_t))(v7 + 104);
  v18(v9, *MEMORY[0x263F1B998], v6);
  sub_251037410();
  *(void *)uint64_t v16 = v10;
  *((void *)v16 + 1) = v11;
  *((void *)v16 + 2) = v17;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v19(&v16[v12[8]], v9, v6);
  *(void *)&v16[v12[9]] = 0x3FF0000000000000;
  v16[v12[10]] = 0;
  uint64_t v20 = &v16[v12[11]];
  *(void *)uint64_t v20 = 0;
  v20[8] = 1;
  size_t v21 = &v16[v26];
  uint64_t v30 = sub_251038AB0();
  uint64_t v22 = sub_251038160();
  v18(v9, *MEMORY[0x263F1B970], v6);
  sub_251037410();
  *(void *)size_t v21 = v10;
  *((void *)v21 + 1) = v11;
  *((void *)v21 + 2) = v22;
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v19)(&v21[v12[8]], v9, v6);
  *(void *)&v21[v12[9]] = 0x3FE0000000000000;
  v21[v12[10]] = 0;
  uint64_t v24 = &v21[v12[11]];
  *(void *)uint64_t v24 = 0;
  v24[8] = 1;
  *double v29 = v28;
  return result;
}

uint64_t sub_250F2DDE8(uint64_t a1, double a2)
{
  uint64_t v20 = (void *)a1;
  swift_bridgeObjectRetain();
  sub_250F2E348((uint64_t *)&v20);
  double v3 = v20;
  unint64_t v4 = v20[2];
  if (v4 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 1;
  while (v5 < v4)
  {
    if (v6 >= v4) {
      goto LABEL_24;
    }
    int8x16_t v7 = *(int8x16_t *)&v3[2 * v5 + 4];
    double v8 = *(double *)&v3[2 * v5 + 5];
    double v9 = v8 + a2;
    if (*(double *)v7.i64 - a2 > v8 + a2) {
      goto LABEL_25;
    }
    int8x16_t v10 = *(int8x16_t *)&v3[2 * v6 + 4];
    if (*(double *)v7.i64 - a2 > *(double *)v10.i64 || *(double *)v10.i64 > v9)
    {
      if (__OFADD__(v6++, 1)) {
        goto LABEL_26;
      }
      ++v5;
      if (v6 >= (uint64_t)v4) {
        return (uint64_t)v3;
      }
    }
    else
    {
      *(void *)&v13.f64[0] = v3[2 * v5 + 4];
      *(void *)&v13.f64[1] = v3[2 * v6 + 5];
      *(void *)&v14.f64[0] = v3[2 * v6 + 4];
      *(void *)&v14.f64[1] = v3[2 * v5 + 5];
      float64x2_t v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v14, v13), v7, v10);
      if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1), v15))).u8[0]) {
        goto LABEL_27;
      }
      float64x2_t v19 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v3 = sub_250F8A410(v3);
      }
      uint64_t v16 = v3[2];
      if (v5 >= v16) {
        goto LABEL_28;
      }
      *(float64x2_t *)&v3[2 * v5 + 4] = v19;
      if (v6 >= v16) {
        goto LABEL_29;
      }
      unint64_t v4 = v16 - 1;
      uint64_t v17 = v16 - 1 - v6;
      if (v17 < 0) {
        goto LABEL_30;
      }
      memmove(&v3[2 * v6 + 4], &v3[2 * v6 + 6], 16 * v17);
      v3[2] = v4;
      if (v6 >= (uint64_t)v4) {
        return (uint64_t)v3;
      }
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  sub_2510396A0();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_250F2DFF0()
{
  unint64_t result = qword_269B12E10;
  if (!qword_269B12E10)
  {
    sub_251038F20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12E10);
  }
  return result;
}

uint64_t *sub_250F2E048(uint64_t *a1)
{
  return a1;
}

uint64_t sub_250F2E128(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_250F2E174(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250F2F3D0(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250F2E1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultilayerCircularGaugeLayer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F2E248(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

double sub_250F2E2B0@<D0>(uint64_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  *(void *)&double result = sub_250F2F31C(a1, a2).u64[0];
  return result;
}

uint64_t sub_250F2E2C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_250F2DAE8(a1, &qword_26B210178, (id *)&qword_26B210328, a2);
}

uint64_t sub_250F2E308@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_250F2DAE8(a1, &qword_26B210180, (id *)&qword_26B210330, a2);
}

uint64_t sub_250F2E348(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25100EEA4(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_250F2E3B4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_250F2E3B4(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_2510397B0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v82 = *a1;
      uint64_t v83 = -1;
      uint64_t v84 = 1;
      uint64_t v85 = *a1;
      do
      {
        double v86 = *(double *)(v82 + 16 * v84);
        uint64_t v87 = v83;
        uint64_t v88 = v85;
        do
        {
          if (v86 >= *(double *)v88) {
            break;
          }
          if (!v82) {
            goto LABEL_141;
          }
          uint64_t v89 = *(void *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)uint64_t v88 = v86;
          *(void *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v6 = result;
  v99 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      size_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      v91 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v92 = *v99;
        do
        {
          unint64_t v93 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v92) {
            goto LABEL_145;
          }
          uint64_t v94 = v91;
          uint64_t v95 = *(void *)&v91[16 * v93 + 32];
          uint64_t v96 = *(void *)&v91[16 * v13 + 24];
          sub_250F2EA84((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(void *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v94 = sub_25100EE7C((uint64_t)v94);
          }
          if (v93 >= *((void *)v94 + 2)) {
            goto LABEL_134;
          }
          v97 = &v94[16 * v93 + 32];
          *(void *)v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v94 + 2);
          if (v13 > v98) {
            goto LABEL_135;
          }
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          v91 = v94;
          *((void *)v94 + 2) = v98 - 1;
          unint64_t v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_250F2F370();
    uint64_t v8 = sub_251039260();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v100 = *a1 - 16;
  uint64_t v101 = *a1 + 32;
  size_t v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v103 = v6;
  uint64_t v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10);
      double v16 = *(double *)(v11 + 16 * v14);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (double *)(v101 + 16 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = (long long *)(v100 + 16 * v10);
          uint64_t v21 = v10;
          uint64_t v22 = v14;
          unint64_t v23 = (long long *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_144;
              }
              long long v24 = *v23;
              long long *v23 = *v20;
              *uint64_t v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v25 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v25 >= v3) {
      uint64_t v25 = v3;
    }
    if (v25 < v14) {
      break;
    }
    if (v10 != v25)
    {
      uint64_t v26 = v100 + 16 * v10;
      do
      {
        double v27 = *(double *)(v11 + 16 * v10);
        uint64_t v28 = v14;
        uint64_t v29 = v26;
        do
        {
          if (v27 >= *(double *)v29) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v30 = *(void *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)uint64_t v29 = v27;
          *(void *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      uint64_t v10 = v25;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v12 = sub_25100EA68(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v32 = *((void *)v12 + 2);
    unint64_t v31 = *((void *)v12 + 3);
    unint64_t v13 = v32 + 1;
    uint64_t v11 = v105;
    if (v32 >= v31 >> 1)
    {
      uint64_t v81 = sub_25100EA68((char *)(v31 > 1), v32 + 1, 1, v12);
      uint64_t v11 = v105;
      size_t v12 = v81;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v33 = v12 + 32;
    char v34 = &v12[16 * v32 + 32];
    *(void *)char v34 = v14;
    *((void *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        unint64_t v35 = v13 - 1;
        if (v13 >= 4)
        {
          char v40 = &v33[16 * v13];
          uint64_t v41 = *((void *)v40 - 8);
          uint64_t v42 = *((void *)v40 - 7);
          BOOL v46 = __OFSUB__(v42, v41);
          uint64_t v43 = v42 - v41;
          if (v46) {
            goto LABEL_120;
          }
          uint64_t v45 = *((void *)v40 - 6);
          uint64_t v44 = *((void *)v40 - 5);
          BOOL v46 = __OFSUB__(v44, v45);
          uint64_t v38 = v44 - v45;
          char v39 = v46;
          if (v46) {
            goto LABEL_121;
          }
          unint64_t v47 = v13 - 2;
          uint64_t v48 = &v33[16 * v13 - 32];
          uint64_t v50 = *(void *)v48;
          uint64_t v49 = *((void *)v48 + 1);
          BOOL v46 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          if (v46) {
            goto LABEL_123;
          }
          BOOL v46 = __OFADD__(v38, v51);
          uint64_t v52 = v38 + v51;
          if (v46) {
            goto LABEL_126;
          }
          if (v52 >= v43)
          {
            uint64_t v70 = &v33[16 * v35];
            uint64_t v72 = *(void *)v70;
            uint64_t v71 = *((void *)v70 + 1);
            BOOL v46 = __OFSUB__(v71, v72);
            uint64_t v73 = v71 - v72;
            if (v46) {
              goto LABEL_130;
            }
            BOOL v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v64 = *((void *)v12 + 4);
            uint64_t v65 = *((void *)v12 + 5);
            BOOL v46 = __OFSUB__(v65, v64);
            uint64_t v57 = v65 - v64;
            char v58 = v46;
            goto LABEL_77;
          }
          uint64_t v37 = *((void *)v12 + 4);
          uint64_t v36 = *((void *)v12 + 5);
          BOOL v46 = __OFSUB__(v36, v37);
          uint64_t v38 = v36 - v37;
          char v39 = v46;
        }
        if (v39) {
          goto LABEL_122;
        }
        unint64_t v47 = v13 - 2;
        uint64_t v53 = &v33[16 * v13 - 32];
        uint64_t v55 = *(void *)v53;
        uint64_t v54 = *((void *)v53 + 1);
        BOOL v56 = __OFSUB__(v54, v55);
        uint64_t v57 = v54 - v55;
        char v58 = v56;
        if (v56) {
          goto LABEL_125;
        }
        uint64_t v59 = &v33[16 * v35];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v46 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v46) {
          goto LABEL_128;
        }
        if (__OFADD__(v57, v62)) {
          goto LABEL_129;
        }
        if (v57 + v62 >= v38)
        {
          BOOL v63 = v38 < v62;
LABEL_83:
          if (v63) {
            unint64_t v35 = v47;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v58) {
          goto LABEL_124;
        }
        uint64_t v66 = &v33[16 * v35];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v46 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v46) {
          goto LABEL_127;
        }
        if (v69 < v57) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v75 = v12;
        uint64_t v76 = &v33[16 * v74];
        uint64_t v77 = *(void *)v76;
        uint64_t v78 = &v33[16 * v35];
        uint64_t v79 = *((void *)v78 + 1);
        sub_250F2EA84((double *)(v11 + 16 * *(void *)v76), (double *)(v11 + 16 * *(void *)v78), v11 + 16 * v79, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v79 < v77) {
          goto LABEL_117;
        }
        if (v35 > *((void *)v75 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v76 = v77;
        *(void *)&v33[16 * v74 + 8] = v79;
        unint64_t v80 = *((void *)v75 + 2);
        if (v35 >= v80) {
          goto LABEL_119;
        }
        size_t v12 = v75;
        unint64_t v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((void *)v75 + 2) = v80 - 1;
        uint64_t v11 = v105;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v103;
    uint64_t v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  uint64_t result = sub_251039630();
  __break(1u);
  return result;
}

uint64_t sub_250F2EA84(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  long long v24 = __src;
  unint64_t v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      double v16 = &v4[2 * v13];
      uint64_t v22 = v16;
      long long v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v17 = (double *)(a3 - 16);
        double v18 = v6;
        while (1)
        {
          double v19 = v17 + 2;
          double v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) >= v20)
          {
            uint64_t v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)uint64_t v17 = *((_OWORD *)v16 - 1);
            }
            double v18 = v6;
            v16 -= 2;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            }
            long long v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 2;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[2 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 2;
          unint64_t v23 = v4;
          double v15 = v6;
        }
        else
        {
          double v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 2;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v24 = v7;
    }
LABEL_42:
    sub_25100EBA8((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

size_t sub_250F2ED00(uint64_t a1)
{
  sub_250F2F3D0(0, &qword_269B12E18, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v50 = (char *)v44 - v6;
  uint64_t v7 = type metadata accessor for MultilayerCircularGaugeLayer();
  MEMORY[0x270FA5388](v7);
  uint64_t v52 = (uint64_t)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v53 = MEMORY[0x263F8EE78] + v11;
  uint64_t v54 = (void *)MEMORY[0x263F8EE78];
  uint64_t v12 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v44[1] = v9 + 48;
  uint64_t v45 = v9;
  v44[0] = v10 | 7;
  size_t result = swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v49 = v11;
LABEL_4:
  unint64_t v17 = *(void *)(a1 + 16);
  if (v15 != v17)
  {
    if (v15 < v17)
    {
      while (1)
      {
        uint64_t v18 = *(void *)(a1 + 32 + 8 * v15);
        swift_bridgeObjectRetain();
        size_t result = swift_bridgeObjectRelease();
        if (v18) {
          break;
        }
LABEL_9:
        ++v15;
        unint64_t v19 = *(void *)(a1 + 16);
        if (v15 == v19) {
          goto LABEL_37;
        }
        if (v15 >= v19) {
          goto LABEL_43;
        }
      }
      unint64_t v16 = *(void *)(v18 + 16);
      if (!v16)
      {
        (*v12)(v4, 1, 1, v7);
        size_t result = sub_250F2E174((uint64_t)v4, &qword_269B12E18, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
        goto LABEL_9;
      }
      unint64_t v20 = 0;
      ++v15;
      while (1)
      {
        if (v20 >= v16) {
          goto LABEL_44;
        }
        unint64_t v46 = v20;
        uint64_t v47 = v14;
        uint64_t v21 = v45;
        uint64_t v48 = *(void *)(v45 + 72);
        sub_250F2E248(v18 + v11 + v48 * v20, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MultilayerCircularGaugeLayer);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v4, 0, 1, v7);
        uint64_t v22 = (uint64_t)v50;
        sub_250F2F288((uint64_t)v4, (uint64_t)v50);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v7) == 1)
        {
          swift_bridgeObjectRelease();
          char v40 = v54;
          uint64_t v14 = v47;
          goto LABEL_38;
        }
        size_t result = sub_250F2E1E4(v22, v52);
        if (!v47) {
          break;
        }
        uint64_t v51 = v54;
        unint64_t v23 = v46;
        uint64_t v14 = v47 - 1;
        if (__OFSUB__(v47, 1)) {
          goto LABEL_45;
        }
LABEL_36:
        unint64_t v20 = v23 + 1;
        uint64_t v39 = v53;
        size_t result = sub_250F2E1E4(v52, v53);
        uint64_t v53 = v39 + v48;
        uint64_t v54 = v51;
        uint64_t v11 = v49;
        unint64_t v16 = *(void *)(v18 + 16);
        if (v20 == v16)
        {
          (*v12)(v4, 1, 1, v7);
          size_t result = sub_250F2E174((uint64_t)v4, &qword_269B12E18, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
          goto LABEL_4;
        }
      }
      unint64_t v24 = v54[3];
      unint64_t v23 = v46;
      if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_47;
      }
      int64_t v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      if (v25 <= 1) {
        int64_t v25 = 1;
      }
      uint64_t v53 = v25;
      sub_250F2F3D0(0, &qword_269B12E20, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, MEMORY[0x263F8E0F8]);
      uint64_t v27 = v48;
      uint64_t v26 = v49;
      uint64_t v51 = (void *)swift_allocObject();
      size_t result = _swift_stdlib_malloc_size(v51);
      if (!v27) {
        goto LABEL_48;
      }
      uint64_t v28 = v27;
      int64_t v29 = result - v26;
      if (result - v26 == 0x8000000000000000 && v27 == -1) {
        goto LABEL_49;
      }
      uint64_t v31 = v29 / v27;
      unint64_t v32 = v51;
      unint64_t v33 = (unint64_t)v54;
      v51[2] = v53;
      v32[3] = 2 * (v29 / v28);
      unint64_t v34 = (unint64_t)v32 + v26;
      uint64_t v35 = *(void *)(v33 + 24) >> 1;
      uint64_t v36 = v35 * v28;
      if (!*(void *)(v33 + 16))
      {
LABEL_35:
        uint64_t v53 = v34 + v36;
        uint64_t v37 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v35;
        size_t result = swift_release();
        BOOL v38 = __OFSUB__(v37, 1);
        uint64_t v14 = v37 - 1;
        if (v38) {
          goto LABEL_45;
        }
        goto LABEL_36;
      }
      if ((unint64_t)v51 < v33 || v34 >= v33 + v49 + v36)
      {
        uint64_t v53 = v34;
        uint64_t v47 = v36;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v51 == v54)
        {
LABEL_34:
          v54[2] = 0;
          goto LABEL_35;
        }
        uint64_t v53 = v34;
        uint64_t v47 = v36;
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v36 = v47;
      unint64_t v34 = v53;
      goto LABEL_34;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_37:
  uint64_t v22 = (uint64_t)v50;
  (*v12)(v50, 1, 1, v7);
  swift_bridgeObjectRelease();
  char v40 = v54;
LABEL_38:
  swift_bridgeObjectRelease();
  size_t result = sub_250F2E174(v22, &qword_269B12E18, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
  unint64_t v41 = v40[3];
  if (v41 < 2) {
    return (size_t)v40;
  }
  unint64_t v42 = v41 >> 1;
  BOOL v38 = __OFSUB__(v42, v14);
  unint64_t v43 = v42 - v14;
  if (!v38)
  {
    v40[2] = v43;
    return (size_t)v40;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_250F2F288(uint64_t a1, uint64_t a2)
{
  sub_250F2F3D0(0, &qword_269B12E18, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

int8x16_t sub_250F2F31C@<Q0>(uint64_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  __asm { FMOV            V1.2D, #1.5 }
  *(void *)&_Q1.f64[0] = *a1;
  __asm { FMOV            V2.2D, #-1.5 }
  *(void *)&_Q2.f64[1] = *a1;
  int64x2_t v8 = vcgtq_f64(_Q2, _Q1);
  *(int32x2_t *)&_Q2.f64[0] = vrev64_s32(vmovn_s64(v8));
  v9.i64[0] = SLODWORD(_Q2.f64[0]);
  v9.i64[1] = SHIDWORD(_Q2.f64[0]);
  int8x16_t result = vbslq_s8((int8x16_t)v8, (int8x16_t)xmmword_25103A690, vbslq_s8(v9, (int8x16_t)xmmword_25103A680, (int8x16_t)vdupq_lane_s64(*a1, 0)));
  *a2 = result;
  return result;
}

void sub_250F2F370()
{
  if (!qword_269B12E28)
  {
    unint64_t v0 = sub_2510390D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12E28);
    }
  }
}

void sub_250F2F3D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

BOOL static BalanceMetricsTimeScope.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t BalanceMetricsTimeScope.hash(into:)()
{
  return sub_251039860();
}

uint64_t BalanceMetricsTimeScope.hashValue.getter()
{
  return sub_251039890();
}

BOOL sub_250F2F4C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_250F2F4D8()
{
  return sub_251039890();
}

uint64_t sub_250F2F520()
{
  return sub_251039860();
}

uint64_t sub_250F2F54C()
{
  return sub_251039890();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *int8x16_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BalanceMetricsTimeScope(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BalanceMetricsTimeScope(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *int8x16_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250F2F6FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *int8x16_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_250F2F724(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_250F2F730(unsigned char *result, char a2)
{
  *int8x16_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BalanceMetricsTimeScope()
{
  return &type metadata for BalanceMetricsTimeScope;
}

unint64_t sub_250F2F74C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_250F33424();
  int v2 = (void *)sub_251039680();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned int v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_250FCB8CC((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_250F2F854(uint64_t a1)
{
  sub_250F33510();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    int v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_250F335D8();
  uint64_t v7 = sub_251039680();
  int v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_250F338C0(v13, (uint64_t)v6, (uint64_t (*)(void))sub_250F33510);
    unint64_t result = sub_250FCB7F8((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = sub_2510378C0();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v6[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_250F2FA4C(uint64_t a1)
{
  sub_250F337BC();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    int v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_250F33824();
  uint64_t v7 = sub_251039680();
  int v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = &v6[*(int *)(v3 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v25[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_250F338C0(v13, (uint64_t)v6, (uint64_t (*)(void))sub_250F337BC);
    unint64_t result = sub_250FCB6DC((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = sub_251037740();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    uint64_t v20 = v8[7] + 16 * v17;
    char v21 = v10[8];
    *(void *)uint64_t v20 = *(void *)v10;
    *(unsigned char *)(v20 + 8) = v21;
    uint64_t v22 = v8[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t BalanceWidgetDataProvider.init(healthStore:gregorianCalendar:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  sub_251037B30();
  id v6 = a1;
  a3[1] = sub_251037B20();
  uint64_t v7 = (char *)a3 + *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  uint64_t v8 = sub_2510374F0();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
  return v9(v7, a2, v8);
}

uint64_t type metadata accessor for BalanceWidgetDataProvider()
{
  uint64_t result = qword_26B2101A8;
  if (!qword_26B2101A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BalanceWidgetDataProvider.loadSummaries(for:isLiveContent:isRetrying:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 128) = a2;
  *(void *)(v5 + 136) = v4;
  *(unsigned char *)(v5 + 505) = a4;
  *(unsigned char *)(v5 + 504) = a3;
  *(void *)(v5 + 120) = a1;
  uint64_t v6 = sub_2510395F0();
  *(void *)(v5 + 144) = v6;
  *(void *)(v5 + 152) = *(void *)(v6 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  uint64_t v7 = sub_251037830();
  *(void *)(v5 + 168) = v7;
  *(void *)(v5 + 176) = *(void *)(v7 - 8);
  *(void *)(v5 + 184) = swift_task_alloc();
  uint64_t v8 = sub_251037400();
  *(void *)(v5 + 192) = v8;
  *(void *)(v5 + 200) = *(void *)(v8 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  uint64_t v9 = sub_251037810();
  *(void *)(v5 + 216) = v9;
  *(void *)(v5 + 224) = *(void *)(v9 - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  sub_250F31DA8();
  *(void *)(v5 + 240) = v10;
  *(void *)(v5 + 248) = *(void *)(v10 - 8);
  *(void *)(v5 + 256) = swift_task_alloc();
  *(void *)(v5 + 264) = swift_task_alloc();
  sub_250F326B0();
  *(void *)(v5 + 272) = v11;
  *(void *)(v5 + 280) = swift_task_alloc();
  uint64_t v12 = sub_2510379A0();
  *(void *)(v5 + 288) = v12;
  *(void *)(v5 + 296) = *(void *)(v12 - 8);
  *(void *)(v5 + 304) = swift_task_alloc();
  *(void *)(v5 + 312) = swift_task_alloc();
  uint64_t v13 = sub_251037AE0();
  *(void *)(v5 + 320) = v13;
  *(void *)(v5 + 328) = *(void *)(v13 - 8);
  *(void *)(v5 + 336) = swift_task_alloc();
  uint64_t v14 = sub_2510376B0();
  *(void *)(v5 + 344) = v14;
  *(void *)(v5 + 352) = *(void *)(v14 - 8);
  *(void *)(v5 + 360) = swift_task_alloc();
  *(void *)(v5 + 368) = swift_task_alloc();
  *(void *)(v5 + 376) = swift_task_alloc();
  uint64_t v15 = sub_251037C90();
  *(void *)(v5 + 384) = v15;
  *(void *)(v5 + 392) = *(void *)(v15 - 8);
  *(void *)(v5 + 400) = swift_task_alloc();
  *(void *)(v5 + 408) = swift_task_alloc();
  *(void *)(v5 + 416) = swift_task_alloc();
  *(void *)(v5 + 424) = swift_task_alloc();
  *(void *)(v5 + 432) = swift_task_alloc();
  *(void *)(v5 + 440) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_250F301A4, 0, 0);
}

uint64_t sub_250F301A4()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 352) + 16);
  uint64_t v3 = *(void *)(v0 + 128);
  if (*(unsigned char *)(v0 + 504) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 376);
    sub_251037C70();
    uint64_t v57 = *v2;
    (*v2)(v4, v3, v1);
    uint64_t v5 = sub_251037C80();
    os_log_type_t v6 = sub_2510393D0();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 440);
    uint64_t v9 = *(void *)(v0 + 384);
    uint64_t v10 = *(void *)(v0 + 392);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 352);
    if (v7)
    {
      uint64_t v55 = *(void *)(v0 + 440);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v59 = v51;
      *(_DWORD *)uint64_t v14 = 136446466;
      *(void *)(v0 + 104) = sub_250F32744(0xD000000000000019, 0x800000025103A760, &v59);
      sub_2510394A0();
      *(_WORD *)(v14 + 12) = 2082;
      sub_250F33928(&qword_26B210198, MEMORY[0x263F42C20]);
      uint64_t v15 = sub_2510397C0();
      *(void *)(v0 + 112) = sub_250F32744(v15, v16, &v59);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      _os_log_impl(&dword_250F1E000, v5, v6, "[%{public}s] beginning query for days: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v51, -1, -1);
      MEMORY[0x253391D80](v14, -1, -1);

      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v17(v55, v9);
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 376), *(void *)(v0 + 344));

      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v17(v8, v9);
    }
    *(void *)(v0 + 448) = v17;
    uint64_t v31 = *(uint64_t **)(v0 + 136);
    v57(*(void *)(v0 + 368), *(void *)(v0 + 128), *(void *)(v0 + 344));
    sub_251037AD0();
    uint64_t v32 = *v31;
    unint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v33;
    void *v33 = v0;
    v33[1] = sub_250F309C4;
    uint64_t v34 = *(void *)(v0 + 312);
    return MEMORY[0x270F31710](v34, v32, 0xD000000000000019, 0x800000025103A760);
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 360);
    sub_251037C70();
    char v58 = *v2;
    (*v2)(v18, v3, v1);
    uint64_t v19 = sub_251037C80();
    os_log_type_t v20 = sub_2510393D0();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 424);
    uint64_t v24 = *(void *)(v0 + 384);
    uint64_t v23 = *(void *)(v0 + 392);
    uint64_t v26 = *(void *)(v0 + 352);
    uint64_t v25 = *(void *)(v0 + 360);
    uint64_t v27 = *(void *)(v0 + 344);
    if (v21)
    {
      uint64_t v56 = *(void *)(v0 + 384);
      uint64_t v28 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v59 = v52;
      *(_DWORD *)uint64_t v28 = 136446466;
      *(void *)(v0 + 88) = sub_250F32744(0xD000000000000019, 0x800000025103A760, &v59);
      sub_2510394A0();
      *(_WORD *)(v28 + 12) = 2082;
      sub_250F33928(&qword_26B210198, MEMORY[0x263F42C20]);
      uint64_t v29 = sub_2510397C0();
      *(void *)(v0 + 32) = sub_250F32744(v29, v30, &v59);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      _os_log_impl(&dword_250F1E000, v19, v20, "[%{public}s] returning fake data for days: %{public}s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v52, -1, -1);
      MEMORY[0x253391D80](v28, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v56);
    }
    else
    {
      (*(void (**)(void, void))(v26 + 8))(*(void *)(v0 + 360), *(void *)(v0 + 344));

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }
    uint64_t v35 = *(void *)(v0 + 368);
    uint64_t v36 = *(void *)(v0 + 344);
    uint64_t v50 = *(void *)(v0 + 248);
    uint64_t v53 = *(void *)(v0 + 256);
    uint64_t v37 = *(void *)(v0 + 232);
    uint64_t v38 = *(void *)(v0 + 224);
    uint64_t v49 = *(void *)(v0 + 216);
    uint64_t v39 = *(void *)(v0 + 200);
    uint64_t v40 = *(void *)(v0 + 208);
    uint64_t v41 = *(void *)(v0 + 184);
    uint64_t v48 = *(void *)(v0 + 192);
    uint64_t v42 = *(void *)(v0 + 176);
    uint64_t v46 = *(void *)(v0 + 168);
    uint64_t v47 = *(void *)(v0 + 264);
    uint64_t v43 = *(void *)(v0 + 128);
    uint64_t v54 = *(void *)(v0 + 240);
    sub_251037B00();
    v58(v35, v43, v36);
    sub_251037800();
    sub_2510377F0();
    sub_2510373E0();
    sub_251037820();
    sub_251037AF0();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v46);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v48);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v49);
    v58(v35, v43, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v53, v47, v54);
    swift_getOpaqueTypeConformance2();
    sub_251039230();
    sub_251037950();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v47, v54);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
}

uint64_t sub_250F309C4()
{
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_250F30F44;
  }
  else {
    uint64_t v2 = sub_250F30AD8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_250F30AD8()
{
  uint64_t v34 = v0;
  uint64_t v2 = v0[38];
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[37];
  sub_251037C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v5 = sub_251037C80();
  os_log_type_t v6 = sub_2510393D0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v26 = v0[48];
    uint64_t v27 = v0[54];
    unint64_t v30 = (void (*)(uint64_t, uint64_t))v0[56];
    uint64_t v31 = v0[42];
    uint64_t v28 = v0[41];
    uint64_t v29 = v0[40];
    uint64_t v7 = v0[37];
    uint64_t v8 = v0[35];
    uint64_t v25 = v0[36];
    uint64_t v23 = v0[38];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v33 = v24;
    *(_DWORD *)uint64_t v9 = 136446466;
    v0[10] = sub_250F32744(0xD000000000000019, 0x800000025103A760, &v33);
    sub_2510394A0();
    *(_WORD *)(v9 + 12) = 2082;
    sub_251037980();
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    sub_251038ED0();
    sub_251039610();
    sub_251039210();
    sub_251039610();
    uint64_t v10 = v0[2];
    unint64_t v11 = v0[3];
    sub_250F32DEC(v8);
    v0[12] = sub_250F32744(v10, v11, &v33);
    sub_2510394A0();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v23, v25);
    _os_log_impl(&dword_250F1E000, v5, v6, "[%{public}s] received day summary collection for morning index range: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v24, -1, -1);
    MEMORY[0x253391D80](v9, -1, -1);

    v30(v27, v26);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v29);
  }
  else
  {
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[56];
    uint64_t v13 = v0[54];
    uint64_t v14 = v0[48];
    uint64_t v32 = v0[42];
    uint64_t v15 = v5;
    uint64_t v17 = v0[40];
    uint64_t v16 = v0[41];
    uint64_t v18 = v0[37];
    uint64_t v19 = v0[38];
    uint64_t v20 = v0[36];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    v12(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v32, v17);
  }
  (*(void (**)(void, void, void))(v0[37] + 32))(v0[15], v0[39], v0[36]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_250F30F44()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void **)(v0 + 464);
  sub_251037C70();
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_251037C80();
  os_log_type_t v5 = sub_2510393B0();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = *(void **)(v0 + 464);
    uint64_t v36 = *(void *)(v0 + 416);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    uint64_t v7 = *(void *)(v0 + 384);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v42[0] = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + 56) = sub_250F32744(0xD000000000000019, 0x800000025103A760, v42);
    sub_2510394A0();
    *(_WORD *)(v8 + 12) = 2082;
    *(void *)(v0 + 64) = v6;
    id v10 = v6;
    sub_250F32D94();
    uint64_t v11 = sub_2510391E0();
    *(void *)(v0 + 72) = sub_250F32744(v11, v12, v42);
    sub_2510394A0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_250F1E000, v4, v5, "[%{public}s] error while fetching day summaries: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v9, -1, -1);
    MEMORY[0x253391D80](v8, -1, -1);

    v38(v36, v7);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 464);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    uint64_t v15 = *(void *)(v0 + 416);
    uint64_t v16 = *(void *)(v0 + 384);

    v14(v15, v16);
  }
  if (*(unsigned char *)(v0 + 505) == 1)
  {
    sub_251037C70();
    uint64_t v17 = sub_251037C80();
    os_log_type_t v18 = sub_2510393B0();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    uint64_t v21 = *(void *)(v0 + 408);
    uint64_t v22 = *(void *)(v0 + 384);
    if (v19)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = v20;
      uint64_t v24 = swift_slowAlloc();
      v42[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      *(void *)(v0 + 48) = sub_250F32744(0xD000000000000019, 0x800000025103A760, v42);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v17, v18, "[%{public}s] already retried once, throwing error", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v24, -1, -1);
      MEMORY[0x253391D80](v23, -1, -1);

      v39(v21, v22);
    }
    else
    {

      v20(v21, v22);
    }
    swift_willThrow();
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  else
  {
    sub_251037C70();
    uint64_t v25 = sub_251037C80();
    os_log_type_t v26 = sub_2510393D0();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    uint64_t v29 = *(void *)(v0 + 400);
    uint64_t v30 = *(void *)(v0 + 384);
    if (v27)
    {
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
      uint64_t v37 = *(void *)(v0 + 400);
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v42[0] = v32;
      *(_DWORD *)uint64_t v31 = 136446210;
      *(void *)(v0 + 40) = sub_250F32744(0xD000000000000019, 0x800000025103A760, v42);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v25, v26, "[%{public}s] retrying data fetch in 1 sec", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v32, -1, -1);
      MEMORY[0x253391D80](v31, -1, -1);

      v40(v37, v30);
    }
    else
    {

      v28(v29, v30);
    }
    sub_2510395E0();
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_269B12E38 + dword_269B12E38);
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v35;
    void *v35 = v0;
    v35[1] = sub_250F3161C;
    return v41(1000000000000000000, 0, 0, 0, 1);
  }
}

uint64_t sub_250F3161C()
{
  id v2 = (void *)*v1;
  id v3 = (void *)*v1;
  v2[60] = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[20];
  uint64_t v5 = v2[19];
  uint64_t v6 = v2[18];
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    return MEMORY[0x270FA2498](sub_250F31910, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = (void *)swift_task_alloc();
    v2[61] = v7;
    void *v7 = v3;
    v7[1] = sub_250F317FC;
    uint64_t v8 = v2[16];
    uint64_t v9 = v2[15];
    return BalanceWidgetDataProvider.loadSummaries(for:isLiveContent:isRetrying:)(v9, v8, 1, 1);
  }
}

uint64_t sub_250F317FC()
{
  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_250F31C20;
  }
  else {
    id v2 = sub_250F31A98;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_250F31910()
{
  (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_250F31A98()
{
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 320);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_250F31C20()
{
  (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_250F31DA8()
{
  if (!qword_26B210188)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26B210188);
    }
  }
}

id sub_250F31E10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_251037C90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v26 - v9;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    unint64_t v12 = result;
    char v13 = sub_2510393A0();

    if (v13)
    {
      sub_251037C70();
      uint64_t v14 = sub_251037C80();
      os_log_type_t v15 = sub_2510393D0();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v27 = v4;
        uint64_t v16 = swift_slowAlloc();
        uint64_t v28 = a1;
        uint64_t v17 = (uint8_t *)v16;
        uint64_t v18 = swift_slowAlloc();
        uint64_t v26 = v2;
        uint64_t v19 = v18;
        uint64_t v30 = v18;
        *(_DWORD *)uint64_t v17 = 136446210;
        uint64_t v29 = sub_250F32744(0xD000000000000019, 0x800000025103A760, &v30);
        sub_2510394A0();
        _os_log_impl(&dword_250F1E000, v14, v15, "[%{public}s] checking feature status", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x253391D80](v19, -1, -1);
        MEMORY[0x253391D80](v17, -1, -1);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v27);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
      return (id)sub_251037B10();
    }
    else
    {
      sub_251037C70();
      uint64_t v20 = sub_251037C80();
      os_log_type_t v21 = sub_2510393D0();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v27 = v4;
        uint64_t v23 = (uint8_t *)v22;
        uint64_t v24 = swift_slowAlloc();
        uint64_t v28 = a1;
        uint64_t v25 = v24;
        uint64_t v30 = v24;
        *(_DWORD *)uint64_t v23 = 136446210;
        uint64_t v29 = sub_250F32744(0xD000000000000019, 0x800000025103A760, &v30);
        sub_2510394A0();
        _os_log_impl(&dword_250F1E000, v20, v21, "[%{public}s] returning empty feature status", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x253391D80](v25, -1, -1);
        MEMORY[0x253391D80](v23, -1, -1);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
      sub_250F2F74C(MEMORY[0x263F8EE78]);
      return (id)sub_2510379B0();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_250F321E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = sub_2510395D0();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x270FA2498](sub_250F322E8, 0, 0);
}

uint64_t sub_250F322E8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = sub_2510395F0();
  uint64_t v5 = sub_250F33928(&qword_269B12E70, MEMORY[0x263F8F710]);
  sub_251039820();
  sub_250F33928(&qword_269B12E78, MEMORY[0x263F8F6D8]);
  sub_251039600();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_250F32488;
  uint64_t v8 = v0[11];
  return MEMORY[0x270FA2380](v8, v0 + 2, v4, v5);
}

uint64_t sub_250F32488()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_250F32644, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_250F32644()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_250F326B0()
{
  if (!qword_26B210BD0)
  {
    sub_251038ED0();
    sub_250F33928(&qword_26B210BA0, MEMORY[0x263F090E8]);
    unint64_t v0 = sub_2510390D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210BD0);
    }
  }
}

uint64_t sub_250F32744(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_250F32818(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_250F33970((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_250F33970((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_250F32818(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2510394B0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_250F329D4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_2510395C0();
  if (!v8)
  {
    sub_251039630();
    __break(1u);
LABEL_17:
    uint64_t result = sub_2510396A0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_250F329D4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_250F32A6C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_250F32C48(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_250F32C48(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_250F32A6C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_250F32BE4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_251039560();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_251039630();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_251039220();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_2510396A0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_251039630();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_250F32BE4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_250F339CC();
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_250F32C48(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_250F339CC();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

unint64_t sub_250F32D94()
{
  unint64_t result = qword_26B210588[0];
  if (!qword_26B210588[0])
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, qword_26B210588);
  }
  return result;
}

uint64_t sub_250F32DEC(uint64_t a1)
{
  sub_250F326B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for BalanceWidgetDataProvider(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    size_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    size_t v5 = a1;
    unint64_t v6 = a2[1];
    *((void *)a1 + 1) = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    int64_t v8 = &a1[v7];
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = sub_2510374F0();
    size_t v11 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    uint64_t v12 = v4;
    char v13 = v6;
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for BalanceWidgetDataProvider(id *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2510374F0();
  unint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for BalanceWidgetDataProvider(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_2510374F0();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  id v11 = v4;
  id v12 = v5;
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for BalanceWidgetDataProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for BalanceWidgetDataProvider(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for BalanceWidgetDataProvider(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2510374F0();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceWidgetDataProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F3321C);
}

uint64_t sub_250F3321C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2510374F0();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BalanceWidgetDataProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F332E0);
}

void *sub_250F332E0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2510374F0();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_250F33388()
{
  uint64_t result = sub_2510374F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_250F33424()
{
  if (!qword_269B12E40)
  {
    type metadata accessor for HKFeatureIdentifier(255);
    sub_250F334D0();
    sub_250F33928(&qword_269B12C88, type metadata accessor for HKFeatureIdentifier);
    unint64_t v0 = sub_251039690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12E40);
    }
  }
}

unint64_t sub_250F334D0()
{
  unint64_t result = qword_269B12E48;
  if (!qword_269B12E48)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B12E48);
  }
  return result;
}

void sub_250F33510()
{
  if (!qword_269B12E50)
  {
    sub_2510378C0();
    sub_250F33580();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B12E50);
    }
  }
}

void sub_250F33580()
{
  if (!qword_269B12E58)
  {
    sub_250F2F370();
    unint64_t v0 = sub_251039270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12E58);
    }
  }
}

void sub_250F335D8()
{
  if (!qword_269B12E60)
  {
    sub_2510378C0();
    sub_250F33580();
    sub_250F33928(&qword_26B210AC0, MEMORY[0x263F42E30]);
    unint64_t v0 = sub_251039690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12E60);
    }
  }
}

unint64_t sub_250F33684(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_250F33758();
    int v3 = (void *)sub_251039680();
    for (i = (double *)(a1 + 40); ; i += 2)
    {
      double v5 = *(i - 1);
      double v6 = *i;
      unint64_t result = sub_250FCB7B0(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(double *)(v3[6] + v9) = v5;
      *(double *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

void sub_250F33758()
{
  if (!qword_269B12E68)
  {
    unint64_t v0 = sub_251039690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12E68);
    }
  }
}

void sub_250F337BC()
{
  if (!qword_26B210AA0)
  {
    sub_251037740();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B210AA0);
    }
  }
}

void sub_250F33824()
{
  if (!qword_26B210BE8)
  {
    sub_251037740();
    sub_250F33928(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v0 = sub_251039690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210BE8);
    }
  }
}

uint64_t sub_250F338C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F33928(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F33970(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_250F339CC()
{
  if (!qword_26B210320)
  {
    unint64_t v0 = sub_2510397D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210320);
    }
  }
}

uint64_t WidgetFamily.balanceWidget(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v49 = a2;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_250F344DC(0, &qword_269B12E80, MEMORY[0x263F19B20]);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v38 - v4;
  double v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B28];
  sub_250F344DC(0, &qword_269B12E88, MEMORY[0x263F19B28]);
  uint64_t v51 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v48 = (char *)&v38 - v8;
  uint64_t v9 = type metadata accessor for BalanceWidgetSystemSmallView(0);
  MEMORY[0x270FA5388](v9);
  BOOL v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for BalanceWidgetAccessoryRectangularView(0);
  MEMORY[0x270FA5388](v43);
  uint64_t v39 = (uint64_t *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_250F34C10(0, &qword_269B12E90, v2);
  uint64_t v50 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v38 - v14;
  sub_250F34544(0, &qword_269B12EA0, v2);
  uint64_t v40 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v42 = (uint64_t)&v38 - v17;
  sub_250F34544(0, &qword_269B12E98, v6);
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v44 = (char *)&v38 - v20;
  uint64_t v21 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for BalanceWidgetAccessoryCircularView(0);
  MEMORY[0x270FA5388](v41);
  uint64_t v25 = (uint64_t *)((char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = sub_251038F50();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v38 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v45, v26);
  int v30 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == *MEMORY[0x263F1FCD8])
  {
    sub_250F348F0(v46, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    *(void *)&v11[*(int *)(v9 + 20)] = swift_getKeyPath();
    sub_250F38588(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
    swift_storeEnumTagMultiPayload();
    sub_250F26868((uint64_t)v23, (uint64_t)v11);
    sub_250F348F0((uint64_t)v11, (uint64_t)v5, type metadata accessor for BalanceWidgetSystemSmallView);
    swift_storeEnumTagMultiPayload();
    sub_250F355D4(&qword_269B12EA8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallView);
    uint64_t v31 = (uint64_t)v48;
    sub_251038580();
    sub_250F34958(v31, (uint64_t)v15, (uint64_t)&qword_269B12E88, (uint64_t (*)(void, uint64_t, void))sub_250F344DC);
    swift_storeEnumTagMultiPayload();
    sub_250F345B4();
    sub_250F346A8();
    sub_251038580();
    sub_250F349D8(v31, (uint64_t)&qword_269B12E88, (uint64_t (*)(void, uint64_t, void))sub_250F344DC);
    return sub_250F37100((uint64_t)v11, type metadata accessor for BalanceWidgetSystemSmallView);
  }
  uint64_t v33 = (uint64_t)v48;
  uint64_t v45 = v19;
  if (v30 == *MEMORY[0x263F1FD00])
  {
    sub_250F348F0(v46, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    *(uint64_t *)((char *)v25 + *(int *)(v41 + 20)) = swift_getKeyPath();
    sub_250F38588(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
    swift_storeEnumTagMultiPayload();
    sub_250F26868((uint64_t)v23, (uint64_t)v25);
    sub_250F348F0((uint64_t)v25, v42, type metadata accessor for BalanceWidgetAccessoryCircularView);
    swift_storeEnumTagMultiPayload();
    sub_250F355D4(&qword_269B12EB8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularView);
    sub_250F355D4(&qword_269B12EC0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularView);
    uint64_t v34 = (uint64_t)v44;
    sub_251038580();
    sub_250F34958(v34, (uint64_t)v15, (uint64_t)&qword_269B12E98, (uint64_t (*)(void, uint64_t, void))sub_250F34544);
    swift_storeEnumTagMultiPayload();
    sub_250F345B4();
    sub_250F346A8();
    sub_251038580();
    sub_250F349D8(v34, (uint64_t)&qword_269B12E98, (uint64_t (*)(void, uint64_t, void))sub_250F34544);
    uint64_t v35 = type metadata accessor for BalanceWidgetAccessoryCircularView;
    return sub_250F37100((uint64_t)v25, v35);
  }
  if (v30 == *MEMORY[0x263F1FD08])
  {
    sub_250F348F0(v46, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v25 = v39;
    uint64_t *v39 = KeyPath;
    sub_250F38588(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
    swift_storeEnumTagMultiPayload();
    sub_250F26868((uint64_t)v23, (uint64_t)v25 + *(int *)(v43 + 20));
    sub_250F348F0((uint64_t)v25, v42, type metadata accessor for BalanceWidgetAccessoryRectangularView);
    swift_storeEnumTagMultiPayload();
    sub_250F355D4(&qword_269B12EB8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularView);
    sub_250F355D4(&qword_269B12EC0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularView);
    uint64_t v37 = (uint64_t)v44;
    sub_251038580();
    sub_250F34958(v37, (uint64_t)v15, (uint64_t)&qword_269B12E98, (uint64_t (*)(void, uint64_t, void))sub_250F34544);
    swift_storeEnumTagMultiPayload();
    sub_250F345B4();
    sub_250F346A8();
    sub_251038580();
    sub_250F349D8(v37, (uint64_t)&qword_269B12E98, (uint64_t (*)(void, uint64_t, void))sub_250F34544);
    uint64_t v35 = type metadata accessor for BalanceWidgetAccessoryRectangularView;
    return sub_250F37100((uint64_t)v25, v35);
  }
  swift_storeEnumTagMultiPayload();
  sub_250F355D4(&qword_269B12EA8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallView);
  sub_251038580();
  sub_250F34958(v33, (uint64_t)v15, (uint64_t)&qword_269B12E88, (uint64_t (*)(void, uint64_t, void))sub_250F344DC);
  swift_storeEnumTagMultiPayload();
  sub_250F345B4();
  sub_250F346A8();
  sub_251038580();
  sub_250F349D8(v33, (uint64_t)&qword_269B12E88, (uint64_t (*)(void, uint64_t, void))sub_250F344DC);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
}

void sub_250F344DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for BalanceWidgetSystemSmallView(255);
    unint64_t v7 = a3(a1, v6, MEMORY[0x263F1BA08]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_250F34544(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for BalanceWidgetAccessoryCircularView(255);
    uint64_t v7 = type metadata accessor for BalanceWidgetAccessoryRectangularView(255);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_250F345B4()
{
  unint64_t result = qword_269B12EB0;
  if (!qword_269B12EB0)
  {
    sub_250F34544(255, &qword_269B12E98, MEMORY[0x263F19B28]);
    sub_250F355D4(&qword_269B12EB8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularView);
    sub_250F355D4(&qword_269B12EC0, (void (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12EB0);
  }
  return result;
}

unint64_t sub_250F346A8()
{
  unint64_t result = qword_269B12EC8;
  if (!qword_269B12EC8)
  {
    sub_250F344DC(255, &qword_269B12E88, MEMORY[0x263F19B28]);
    sub_250F355D4(&qword_269B12EA8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12EC8);
  }
  return result;
}

uint64_t sub_250F3476C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_251038F50();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F75594((uint64_t)v8);
  WidgetFamily.balanceWidget(for:)(v2 + *(int *)(a1 + 20), a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_250F34850@<X0>(uint64_t a1@<X8>)
{
  return sub_250F66654(a1);
}

uint64_t sub_250F34874()
{
  return sub_251038400();
}

id sub_250F348CC@<X0>(uint64_t a1@<X8>)
{
  return sub_250F66654(a1);
}

uint64_t sub_250F348F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F34958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, void))
{
  uint64_t v6 = a4(0, a3, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_250F349D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, void))
{
  uint64_t v4 = a3(0, a2, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

int *sub_250F34A50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251038F20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251038400();
  unint64_t result = (int *)objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v7 = result;
    unsigned __int8 v8 = objc_msgSend(result, sel_isAppleWatch);

    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    unint64_t result = (int *)type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *(unsigned char *)(a1 + result[5]) = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_250F34B7C()
{
  unint64_t result = qword_269B12EE8;
  if (!qword_269B12EE8)
  {
    sub_250F34C10(255, &qword_269B12EF0, MEMORY[0x263F19B28]);
    sub_250F345B4();
    sub_250F346A8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12EE8);
  }
  return result;
}

void sub_250F34C10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, void))MEMORY[0x263F19B28];
    sub_250F34544(255, &qword_269B12E98, MEMORY[0x263F19B28]);
    uint64_t v8 = v7;
    sub_250F344DC(255, &qword_269B12E88, v6);
    unint64_t v10 = a3(a1, v8, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t *sub_250F34CB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v9 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_250F38588(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_251038F50();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_2510376B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)&v11[v14[5]] = *(void *)&v12[v14[5]];
    uint64_t v15 = v14[6];
    uint64_t v16 = &v11[v15];
    uint64_t v17 = &v12[v15];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v18 = sub_2510379E0();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        sub_250F38588(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = v14[7];
    uint64_t v22 = &v11[v21];
    uint64_t v23 = &v12[v21];
    uint64_t v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v25 = *((void *)v24 - 1);
    uint64_t v78 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
    {
      sub_250F38588(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = sub_251037400();
      uint64_t v81 = v14;
      uint64_t v28 = v12;
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      v29(v22, v23, v27);
      uint64_t v30 = v24[5];
      uint64_t v31 = &v22[v30];
      uint64_t v32 = &v23[v30];
      v29(&v22[v30], &v23[v30], v27);
      sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v29(&v31[*(int *)(v33 + 36)], &v32[*(int *)(v33 + 36)], v27);
      uint64_t v12 = v28;
      uint64_t v14 = v81;
      uint64_t v34 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v31[v34[5]] = *(void *)&v32[v34[5]];
      *(void *)&v31[v34[6]] = *(void *)&v32[v34[6]];
      *(void *)&v31[v34[7]] = *(void *)&v32[v34[7]];
      uint64_t v35 = v24[6];
      uint64_t v36 = &v22[v35];
      uint64_t v37 = &v23[v35];
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      v36[16] = v37[16];
      v22[v24[7]] = v23[v24[7]];
      v22[v24[8]] = v23[v24[8]];
      v22[v24[9]] = v23[v24[9]];
      uint64_t v38 = v24[10];
      uint64_t v39 = &v22[v38];
      uint64_t v40 = &v23[v38];
      uint64_t v41 = *((void *)v40 + 1);
      *(void *)uint64_t v39 = *(void *)v40;
      *((void *)v39 + 1) = v41;
      uint64_t v42 = v24[11];
      uint64_t v43 = &v22[v42];
      uint64_t v44 = &v23[v42];
      uint64_t v45 = *((void *)v44 + 1);
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = v45;
      uint64_t v79 = *(void (**)(char *, void, uint64_t, int *))(v25 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v79(v22, 0, 1, v24);
    }
    uint64_t v84 = v12;
    uint64_t v46 = v14[8];
    uint64_t v47 = &v11[v46];
    uint64_t v48 = &v12[v46];
    *(void *)&v11[v46] = *(void *)v48;
    uint64_t v49 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v50 = *(int *)(v49 + 20);
    uint64_t v82 = &v47[v50];
    uint64_t v51 = &v48[v50];
    uint64_t v52 = sub_2510374F0();
    uint64_t v53 = v14;
    uint64_t v54 = v11;
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16);
    swift_bridgeObjectRetain();
    v55(v82, v51, v52);
    *(void *)&v47[*(int *)(v49 + 24)] = *(void *)&v48[*(int *)(v49 + 24)];
    *(void *)&v11[v53[9]] = *(void *)&v84[v53[9]];
    *(void *)&v11[v53[10]] = *(void *)&v84[v53[10]];
    uint64_t v56 = v53[11];
    uint64_t v57 = &v11[v56];
    char v58 = &v84[v56];
    uint64_t v59 = sub_251037400();
    uint64_t v83 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v83(v57, v58, v59);
    sub_250F3561C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v61 = v60;
    v83(&v57[*(int *)(v60 + 36)], &v58[*(int *)(v60 + 36)], v59);
    uint64_t v62 = v53[12];
    BOOL v63 = &v11[v62];
    uint64_t v64 = &v84[v62];
    v83(&v11[v62], &v84[v62], v59);
    v83(&v63[*(int *)(v61 + 36)], &v64[*(int *)(v61 + 36)], v59);
    *(void *)&v11[v53[13]] = *(void *)&v84[v53[13]];
    *(void *)&v11[v53[14]] = *(void *)&v84[v53[14]];
    uint64_t v65 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v66 = *(int *)(v65 + 20);
    uint64_t v67 = &v11[v66];
    unint64_t v80 = &v84[v66];
    uint64_t v68 = sub_2510375C0();
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v69(v67, v80, v68);
    v11[*(int *)(v65 + 24)] = v84[*(int *)(v65 + 24)];
    uint64_t v70 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
    v83(&v54[v70[5]], &v84[v70[5]], v59);
    uint64_t v71 = v70[6];
    uint64_t v72 = &v54[v71];
    uint64_t v73 = &v84[v71];
    uint64_t v74 = sub_251038FF0();
    uint64_t v75 = *(void *)(v74 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
    {
      sub_250F38588(0, &qword_26B210158, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
      memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v72, v73, v74);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
    }
    uint64_t v9 = v78;
    v83(&v54[v70[7]], &v84[v70[7]], v59);
  }
  return v9;
}

uint64_t sub_250F355D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250F3561C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_250F355D4((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250F356B8(uint64_t a1, uint64_t a2)
{
  sub_250F38588(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_251038F50();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v8 = v5 + v7[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = sub_2510379E0();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  uint64_t v11 = v5 + v7[7];
  uint64_t v12 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
    v14(v11, v13);
    uint64_t v15 = v11 + *(int *)(v12 + 20);
    v14(v15, v13);
    sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v14(v15 + *(int *)(v16 + 36), v13);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = v5 + v7[8];
  swift_bridgeObjectRelease();
  uint64_t v18 = v17 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v19 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v5 + v7[11];
  uint64_t v21 = sub_251037400();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v33)((void *)(v21 - 8), v20, v21);
  sub_250F3561C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v23 = v22;
  v33(v20 + *(int *)(v22 + 36), v21);
  uint64_t v24 = v5 + v7[12];
  v33(v24, v21);
  v33(v24 + *(int *)(v23 + 36), v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v5 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v26 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  uint64_t v27 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v33(v5 + v27[5], v21);
  uint64_t v28 = v5 + v27[6];
  uint64_t v29 = sub_251038FF0();
  uint64_t v30 = *(void *)(v29 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29)) {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  }
  uint64_t v31 = v5 + v27[7];
  return ((uint64_t (*)(uint64_t, uint64_t))v33)(v31, v21);
}

void *sub_250F35C44(void *a1, void *a2, uint64_t a3)
{
  sub_250F38588(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_251038F50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_2510376B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)&v8[v11[5]] = *(void *)&v9[v11[5]];
  uint64_t v12 = v11[6];
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)uint64_t v13 = *(void *)v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v15 = sub_2510379E0();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_250F38588(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = v11[7];
  uint64_t v19 = &v8[v18];
  uint64_t v20 = &v9[v18];
  uint64_t v21 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v75 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    sub_250F38588(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v24 = sub_251037400();
    uint64_t v78 = v11;
    uint64_t v25 = v9;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    v26(v19, v20, v24);
    uint64_t v27 = v21[5];
    uint64_t v28 = &v19[v27];
    uint64_t v29 = &v20[v27];
    v26(&v19[v27], &v20[v27], v24);
    sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v26(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v24);
    uint64_t v9 = v25;
    uint64_t v11 = v78;
    uint64_t v31 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v28[v31[5]] = *(void *)&v29[v31[5]];
    *(void *)&v28[v31[6]] = *(void *)&v29[v31[6]];
    *(void *)&v28[v31[7]] = *(void *)&v29[v31[7]];
    uint64_t v32 = v21[6];
    uint64_t v33 = &v19[v32];
    uint64_t v34 = &v20[v32];
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    v33[16] = v34[16];
    v19[v21[7]] = v20[v21[7]];
    v19[v21[8]] = v20[v21[8]];
    v19[v21[9]] = v20[v21[9]];
    uint64_t v35 = v21[10];
    uint64_t v36 = &v19[v35];
    uint64_t v37 = &v20[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    uint64_t v39 = v21[11];
    uint64_t v40 = &v19[v39];
    uint64_t v41 = &v20[v39];
    uint64_t v42 = *((void *)v41 + 1);
    *(void *)uint64_t v40 = *(void *)v41;
    *((void *)v40 + 1) = v42;
    uint64_t v76 = *(void (**)(char *, void, uint64_t, int *))(v22 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v76(v19, 0, 1, v21);
  }
  uint64_t v81 = v9;
  uint64_t v43 = v11[8];
  uint64_t v44 = &v8[v43];
  uint64_t v45 = &v9[v43];
  *(void *)&v8[v43] = *(void *)v45;
  uint64_t v46 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v47 = *(int *)(v46 + 20);
  uint64_t v79 = &v44[v47];
  uint64_t v48 = &v45[v47];
  uint64_t v49 = sub_2510374F0();
  uint64_t v50 = v11;
  uint64_t v51 = v8;
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  v52(v79, v48, v49);
  *(void *)&v44[*(int *)(v46 + 24)] = *(void *)&v45[*(int *)(v46 + 24)];
  *(void *)&v8[v50[9]] = *(void *)&v81[v50[9]];
  *(void *)&v8[v50[10]] = *(void *)&v81[v50[10]];
  uint64_t v53 = v50[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v81[v53];
  uint64_t v56 = sub_251037400();
  unint64_t v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80(v54, v55, v56);
  sub_250F3561C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v58 = v57;
  v80(&v54[*(int *)(v57 + 36)], &v55[*(int *)(v57 + 36)], v56);
  uint64_t v59 = v50[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v81[v59];
  v80(&v8[v59], &v81[v59], v56);
  v80(&v60[*(int *)(v58 + 36)], &v61[*(int *)(v58 + 36)], v56);
  *(void *)&v8[v50[13]] = *(void *)&v81[v50[13]];
  *(void *)&v8[v50[14]] = *(void *)&v81[v50[14]];
  uint64_t v62 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v63 = *(int *)(v62 + 20);
  uint64_t v64 = &v8[v63];
  uint64_t v77 = &v81[v63];
  uint64_t v65 = sub_2510375C0();
  uint64_t v66 = *(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66(v64, v77, v65);
  v8[*(int *)(v62 + 24)] = v81[*(int *)(v62 + 24)];
  uint64_t v67 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v80(&v51[v67[5]], &v81[v67[5]], v56);
  uint64_t v68 = v67[6];
  uint64_t v69 = &v51[v68];
  uint64_t v70 = &v81[v68];
  uint64_t v71 = sub_251038FF0();
  uint64_t v72 = *(void *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    sub_250F38588(0, &qword_26B210158, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v69, v70, v71);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  v80(&v51[v67[7]], &v81[v67[7]], v56);
  return v75;
}

void *sub_250F36514(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250F37074((uint64_t)a1);
    sub_250F38588(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_251038F50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_2510376B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)&v8[v11[5]] = *(void *)&v9[v11[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v99 = a1;
  if (a1 != a2)
  {
    uint64_t v12 = v11[6];
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    sub_250F37100((uint64_t)&v8[v12], type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v15 = sub_2510379E0();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        sub_250F38588(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = v11[7];
  uint64_t v19 = &v8[v18];
  uint64_t v20 = &v9[v18];
  uint64_t v21 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, int *))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  uint64_t v100 = v9;
  if (v24)
  {
    if (!v25)
    {
      uint64_t v26 = sub_251037400();
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
      v27(v19, v20, v26);
      uint64_t v28 = v21[5];
      uint64_t v29 = &v19[v28];
      uint64_t v30 = &v20[v28];
      v27(&v19[v28], &v20[v28], v26);
      sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v27(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v26);
      uint64_t v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v29[v32[5]] = *(void *)&v30[v32[5]];
      *(void *)&v29[v32[6]] = *(void *)&v30[v32[6]];
      *(void *)&v29[v32[7]] = *(void *)&v30[v32[7]];
      uint64_t v33 = v21[6];
      uint64_t v34 = &v19[v33];
      uint64_t v35 = &v20[v33];
      char v36 = v35[16];
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      v34[16] = v36;
      v19[v21[7]] = v20[v21[7]];
      v19[v21[8]] = v20[v21[8]];
      v19[v21[9]] = v20[v21[9]];
      uint64_t v37 = v21[10];
      uint64_t v38 = &v19[v37];
      uint64_t v39 = &v20[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = *((void *)v39 + 1);
      uint64_t v40 = v21[11];
      uint64_t v41 = &v19[v40];
      uint64_t v42 = &v20[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      uint64_t v43 = *(void (**)(char *, void, uint64_t, int *))(v22 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = v100;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43(v19, 0, 1, v21);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v25)
  {
    sub_250F37100((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_18:
    sub_250F38588(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v79 = sub_251037400();
  unint64_t v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 24);
  v80(v19, v20, v79);
  uint64_t v81 = v21[5];
  uint64_t v82 = &v19[v81];
  uint64_t v83 = &v20[v81];
  v80(&v19[v81], &v20[v81], v79);
  sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v80(&v82[*(int *)(v84 + 36)], &v83[*(int *)(v84 + 36)], v79);
  uint64_t v85 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v82[v85[5]] = *(void *)&v83[v85[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v82[v85[6]] = *(void *)&v83[v85[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = v85[7];
  uint64_t v9 = v100;
  *(void *)&v82[v86] = *(void *)&v83[v86];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = v21[6];
  uint64_t v88 = &v19[v87];
  uint64_t v89 = &v20[v87];
  long long v90 = *(_OWORD *)v89;
  v88[16] = v89[16];
  *(_OWORD *)uint64_t v88 = v90;
  v19[v21[7]] = v20[v21[7]];
  v19[v21[8]] = v20[v21[8]];
  v19[v21[9]] = v20[v21[9]];
  uint64_t v91 = v21[10];
  uint64_t v92 = &v19[v91];
  unint64_t v93 = &v20[v91];
  *(void *)uint64_t v92 = *(void *)v93;
  *((void *)v92 + 1) = *((void *)v93 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = v21[11];
  uint64_t v95 = &v19[v94];
  uint64_t v96 = &v20[v94];
  *(void *)uint64_t v95 = *(void *)v96;
  *((void *)v95 + 1) = *((void *)v96 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v45 = v11[8];
  uint64_t v46 = &v8[v45];
  uint64_t v47 = &v9[v45];
  *(void *)&v8[v45] = *(void *)&v9[v45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v49 = *(int *)(v48 + 20);
  uint64_t v50 = &v46[v49];
  uint64_t v51 = &v47[v49];
  uint64_t v52 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 24))(v50, v51, v52);
  *(void *)&v46[*(int *)(v48 + 24)] = *(void *)&v47[*(int *)(v48 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v8[v11[9]] = *(void *)&v9[v11[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v8[v11[10]] = *(void *)&v9[v11[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v11[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  uint64_t v56 = sub_251037400();
  uint64_t v57 = v9;
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 24);
  v58(v54, v55, v56);
  sub_250F3561C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v60 = v59;
  v58(&v54[*(int *)(v59 + 36)], &v55[*(int *)(v59 + 36)], v56);
  uint64_t v61 = v11[12];
  uint64_t v62 = &v8[v61];
  uint64_t v63 = &v57[v61];
  v58(&v8[v61], &v57[v61], v56);
  v58(&v62[*(int *)(v60 + 36)], &v63[*(int *)(v60 + 36)], v56);
  *(void *)&v8[v11[13]] = *(void *)&v57[v11[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v8[v11[14]] = *(void *)&v57[v11[14]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v64 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v65 = *(int *)(v64 + 20);
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v57[v65];
  uint64_t v68 = sub_2510375C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 24))(v66, v67, v68);
  v8[*(int *)(v64 + 24)] = v57[*(int *)(v64 + 24)];
  uint64_t v69 = type metadata accessor for BalanceWidgetTimelineEntry();
  v58(&v8[*(int *)(v69 + 20)], &v57[*(int *)(v69 + 20)], v56);
  uint64_t v98 = v69;
  uint64_t v70 = *(int *)(v69 + 24);
  v97 = v8;
  uint64_t v71 = &v8[v70];
  uint64_t v72 = &v57[v70];
  uint64_t v73 = sub_251038FF0();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  LODWORD(v69) = v75(v71, 1, v73);
  int v76 = v75(v72, 1, v73);
  if (!v69)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 24))(v71, v72, v73);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v74 + 8))(v71, v73);
    goto LABEL_24;
  }
  if (v76)
  {
LABEL_24:
    sub_250F38588(0, &qword_26B210158, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v71, v72, *(void *)(*(void *)(v77 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
LABEL_25:
  v58(&v97[*(int *)(v98 + 28)], &v100[*(int *)(v98 + 28)], v56);
  return v99;
}

uint64_t sub_250F37074(uint64_t a1)
{
  sub_250F38588(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F37100(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_250F37160(char *a1, char *a2, uint64_t a3)
{
  sub_250F38588(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_251038F50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v70 = a1;
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_2510376B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)&v10[v13[5]] = *(void *)&v11[v13[5]];
  uint64_t v14 = v13[6];
  uint64_t v15 = &v10[v14];
  uint64_t v16 = &v11[v14];
  uint64_t v17 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = sub_2510379E0();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
    {
      sub_250F38588(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v16, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v21 = v13[7];
  uint64_t v22 = &v10[v21];
  uint64_t v23 = &v11[v21];
  int v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v25 = *((void *)v24 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    sub_250F38588(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = sub_251037400();
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32);
    uint64_t v69 = v25;
    v28(v22, v23, v27);
    uint64_t v29 = v28;
    uint64_t v30 = v24[5];
    uint64_t v31 = &v22[v30];
    uint64_t v32 = &v23[v30];
    v29(&v22[v30], &v23[v30], v27);
    sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v29(&v31[*(int *)(v33 + 36)], &v32[*(int *)(v33 + 36)], v27);
    uint64_t v34 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v31[v34[5]] = *(void *)&v32[v34[5]];
    *(void *)&v31[v34[6]] = *(void *)&v32[v34[6]];
    *(void *)&v31[v34[7]] = *(void *)&v32[v34[7]];
    uint64_t v35 = v24[6];
    char v36 = &v22[v35];
    uint64_t v37 = &v23[v35];
    *(_OWORD *)char v36 = *(_OWORD *)v37;
    v36[16] = v37[16];
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    *(_OWORD *)&v22[v24[10]] = *(_OWORD *)&v23[v24[10]];
    *(_OWORD *)&v22[v24[11]] = *(_OWORD *)&v23[v24[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v69 + 56))(v22, 0, 1, v24);
  }
  uint64_t v38 = v13[8];
  uint64_t v39 = &v10[v38];
  uint64_t v40 = &v11[v38];
  *(void *)&v10[v38] = *(void *)&v11[v38];
  uint64_t v41 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v42 = *(int *)(v41 + 20);
  uint64_t v43 = &v39[v42];
  uint64_t v44 = &v40[v42];
  uint64_t v45 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v43, v44, v45);
  *(void *)&v39[*(int *)(v41 + 24)] = *(void *)&v40[*(int *)(v41 + 24)];
  *(void *)&v10[v13[9]] = *(void *)&v11[v13[9]];
  *(void *)&v10[v13[10]] = *(void *)&v11[v13[10]];
  uint64_t v46 = v13[11];
  uint64_t v47 = &v10[v46];
  uint64_t v48 = &v11[v46];
  uint64_t v49 = sub_251037400();
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32);
  v50(v47, v48, v49);
  sub_250F3561C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(&v47[*(int *)(v51 + 36)], &v48[*(int *)(v51 + 36)], v49);
  uint64_t v53 = v13[12];
  uint64_t v54 = &v10[v53];
  uint64_t v55 = &v11[v53];
  v50(&v10[v53], &v11[v53], v49);
  v50(&v54[*(int *)(v52 + 36)], &v55[*(int *)(v52 + 36)], v49);
  *(void *)&v10[v13[13]] = *(void *)&v11[v13[13]];
  *(void *)&v10[v13[14]] = *(void *)&v11[v13[14]];
  uint64_t v56 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v57 = *(int *)(v56 + 20);
  uint64_t v58 = &v10[v57];
  uint64_t v59 = &v11[v57];
  uint64_t v60 = sub_2510375C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v58, v59, v60);
  v10[*(int *)(v56 + 24)] = v11[*(int *)(v56 + 24)];
  uint64_t v61 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v50(&v10[v61[5]], &v11[v61[5]], v49);
  uint64_t v62 = v61[6];
  uint64_t v63 = &v10[v62];
  uint64_t v64 = &v11[v62];
  uint64_t v65 = sub_251038FF0();
  uint64_t v66 = *(void *)(v65 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
  {
    sub_250F38588(0, &qword_26B210158, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  }
  v50(&v10[v61[7]], &v11[v61[7]], v49);
  return v70;
}

char *sub_250F37994(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250F37074((uint64_t)a1);
    sub_250F38588(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_251038F50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_2510376B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)&v10[v13[5]] = *(void *)&v11[v13[5]];
  swift_bridgeObjectRelease();
  v99 = a1;
  if (a1 != a2)
  {
    uint64_t v14 = v13[6];
    uint64_t v15 = &v10[v14];
    uint64_t v16 = &v11[v14];
    sub_250F37100((uint64_t)&v10[v14], type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v17 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v18 = sub_2510379E0();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        sub_250F38588(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v16, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v21 = v13[7];
  uint64_t v22 = &v10[v21];
  uint64_t v23 = &v11[v21];
  int v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v25 = *((void *)v24 - 1);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, int *))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  uint64_t v100 = v11;
  if (v27)
  {
    if (!v28)
    {
      uint64_t v29 = sub_251037400();
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
      v30(v22, v23, v29);
      uint64_t v31 = v24[5];
      uint64_t v32 = &v22[v31];
      uint64_t v33 = &v23[v31];
      v30(&v22[v31], &v23[v31], v29);
      sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v30(&v32[*(int *)(v34 + 36)], &v33[*(int *)(v34 + 36)], v29);
      uint64_t v35 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v32[v35[5]] = *(void *)&v33[v35[5]];
      *(void *)&v32[v35[6]] = *(void *)&v33[v35[6]];
      uint64_t v36 = v35[7];
      uint64_t v37 = *(void *)&v33[v36];
      uint64_t v11 = v100;
      *(void *)&v32[v36] = v37;
      uint64_t v38 = v24[6];
      uint64_t v39 = &v22[v38];
      uint64_t v40 = &v23[v38];
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      v39[16] = v40[16];
      v22[v24[7]] = v23[v24[7]];
      v22[v24[8]] = v23[v24[8]];
      v22[v24[9]] = v23[v24[9]];
      *(_OWORD *)&v22[v24[10]] = *(_OWORD *)&v23[v24[10]];
      *(_OWORD *)&v22[v24[11]] = *(_OWORD *)&v23[v24[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v28)
  {
    sub_250F37100((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_17:
    sub_250F38588(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_18;
  }
  uint64_t v75 = sub_251037400();
  int v76 = *(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 40);
  v76(v22, v23, v75);
  uint64_t v77 = v24[5];
  uint64_t v78 = &v22[v77];
  uint64_t v79 = &v23[v77];
  v76(&v22[v77], &v23[v77], v75);
  sub_250F3561C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v76(&v78[*(int *)(v80 + 36)], &v79[*(int *)(v80 + 36)], v75);
  uint64_t v81 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v78[v81[5]] = *(void *)&v79[v81[5]];
  swift_bridgeObjectRelease();
  *(void *)&v78[v81[6]] = *(void *)&v79[v81[6]];
  swift_bridgeObjectRelease();
  uint64_t v82 = v81[7];
  uint64_t v83 = *(void *)&v79[v82];
  uint64_t v11 = v100;
  *(void *)&v78[v82] = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = v24[6];
  uint64_t v85 = &v22[v84];
  uint64_t v86 = &v23[v84];
  *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
  v85[16] = v86[16];
  v22[v24[7]] = v23[v24[7]];
  v22[v24[8]] = v23[v24[8]];
  v22[v24[9]] = v23[v24[9]];
  uint64_t v87 = v24[10];
  uint64_t v88 = &v22[v87];
  uint64_t v89 = &v23[v87];
  uint64_t v91 = *(void *)v89;
  uint64_t v90 = *((void *)v89 + 1);
  *(void *)uint64_t v88 = v91;
  *((void *)v88 + 1) = v90;
  swift_bridgeObjectRelease();
  uint64_t v92 = v24[11];
  unint64_t v93 = &v22[v92];
  uint64_t v94 = &v23[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  *(void *)unint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
LABEL_18:
  uint64_t v42 = v13[8];
  uint64_t v43 = &v10[v42];
  uint64_t v44 = &v11[v42];
  *(void *)&v10[v42] = *(void *)&v11[v42];
  swift_bridgeObjectRelease();
  uint64_t v45 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v46 = *(int *)(v45 + 20);
  uint64_t v47 = &v43[v46];
  uint64_t v48 = &v44[v46];
  uint64_t v49 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 40))(v47, v48, v49);
  *(void *)&v43[*(int *)(v45 + 24)] = *(void *)&v44[*(int *)(v45 + 24)];
  swift_bridgeObjectRelease();
  *(void *)&v10[v13[9]] = *(void *)&v11[v13[9]];
  swift_bridgeObjectRelease();
  *(void *)&v10[v13[10]] = *(void *)&v11[v13[10]];
  swift_bridgeObjectRelease();
  uint64_t v50 = v13[11];
  uint64_t v51 = &v10[v50];
  uint64_t v52 = &v11[v50];
  uint64_t v53 = sub_251037400();
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 40);
  v54(v51, v52, v53);
  sub_250F3561C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v56 = v55;
  v54(&v51[*(int *)(v55 + 36)], &v52[*(int *)(v55 + 36)], v53);
  uint64_t v57 = v13[12];
  uint64_t v58 = &v10[v57];
  uint64_t v59 = &v11[v57];
  v54(&v10[v57], &v11[v57], v53);
  v54(&v58[*(int *)(v56 + 36)], &v59[*(int *)(v56 + 36)], v53);
  *(void *)&v10[v13[13]] = *(void *)&v11[v13[13]];
  swift_bridgeObjectRelease();
  *(void *)&v10[v13[14]] = *(void *)&v11[v13[14]];
  swift_bridgeObjectRelease();
  uint64_t v60 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v61 = *(int *)(v60 + 20);
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  uint64_t v64 = sub_2510375C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 40))(v62, v63, v64);
  v10[*(int *)(v60 + 24)] = v11[*(int *)(v60 + 24)];
  uint64_t v65 = type metadata accessor for BalanceWidgetTimelineEntry();
  v97 = v54;
  v54(&v10[*(int *)(v65 + 20)], &v11[*(int *)(v65 + 20)], v53);
  uint64_t v98 = v65;
  uint64_t v66 = *(int *)(v65 + 24);
  uint64_t v67 = &v10[v66];
  uint64_t v68 = &v11[v66];
  uint64_t v69 = sub_251038FF0();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
  LODWORD(v54) = v71(v67, 1, v69);
  int v72 = v71(v68, 1, v69);
  if (!v54)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 40))(v67, v68, v69);
      goto LABEL_24;
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v69);
    goto LABEL_23;
  }
  if (v72)
  {
LABEL_23:
    sub_250F38588(0, &qword_26B210158, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v67, v68, *(void *)(*(void *)(v73 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
LABEL_24:
  v97(&v10[*(int *)(v98 + 28)], &v100[*(int *)(v98 + 28)], v53);
  return v99;
}

uint64_t sub_250F3844C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F38460);
}

uint64_t sub_250F38460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F38588(0, &qword_269B12EF8, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for BalanceWidgetTimelineEntry();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

void sub_250F38588(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250F385EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F38600);
}

uint64_t sub_250F38600(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250F38588(0, &qword_269B12EF8, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for BalanceWidgetTimelineEntry();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for BalanceWidgetEntryView()
{
  uint64_t result = qword_26B2100E8;
  if (!qword_26B2100E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250F38780()
{
  sub_250F38588(319, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for BalanceWidgetTimelineEntry();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_250F38878()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_250F38898(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250F388FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_250F39AE0((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250F389AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t sub_250F389C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t type metadata accessor for BalanceWidgetAccessoryRectangularView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B12F08);
}

uint64_t sub_250F38A00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F38A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v52 = sub_251038670();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v49 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v44 = (uint64_t)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F38898(0, &qword_269B12F18, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v43 = (uint64_t)v40 - v6;
  uint64_t v7 = type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (unsigned __int8 *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F396C8();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F3EA90(0, &qword_269B12F40, (void (*)(uint64_t))sub_250F396C8, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec);
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v40 - v15;
  sub_250F398AC();
  uint64_t v42 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v53 = (uint64_t)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F39938();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v45 = v19;
  uint64_t v46 = v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v41 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = sub_251038530();
  *((void *)v12 + 1) = 0x400C000000000000;
  v12[16] = 0;
  sub_250F39B8C();
  sub_250F390C0(v1, (uint64_t)&v12[*(int *)(v22 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  sub_250F75888((uint64_t)v9);
  uint64_t v24 = v1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularView(0) + 20);
  v40[1] = v24;
  sub_250F660DC(v57);
  sub_250F3EC40((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  sub_250F3EA28((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(void))sub_250F396C8);
  uint64_t v25 = *(int *)(v14 + 44);
  *(void *)&v16[v25] = KeyPath;
  memcpy(&v16[v25 + 8], v57, 0x118uLL);
  sub_250F3EC40((uint64_t)v12, (uint64_t (*)(void))sub_250F396C8);
  uint64_t v26 = sub_251038CE0();
  sub_250F717BC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v53, 0.0, 1, INFINITY, 0, v26, v27);
  sub_250F3A8A0((uint64_t)v16);
  uint64_t v28 = v44;
  sub_250F3EA28(v24, v44, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  sub_250F75888((uint64_t)v9);
  BOOL v29 = *v9 == 2;
  sub_250F3EC40((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  uint64_t v30 = v43;
  sub_250FC2718(v29, v43);
  sub_250F3EC40(v28, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  uint64_t v31 = sub_251037290();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 0, 1, v31);
  uint64_t v32 = sub_250F3EEC8(&qword_269B12F60, (void (*)(uint64_t))sub_250F398AC, (void (*)(void))sub_250F399EC);
  uint64_t v34 = v41;
  uint64_t v33 = v42;
  uint64_t v35 = v53;
  sub_251038930();
  sub_250F3ECA0(v30, &qword_269B12F18, v48, v47);
  sub_250F3EC40(v35, (uint64_t (*)(void))sub_250F398AC);
  sub_250F75888((uint64_t)v9);
  sub_250F66788();
  uint64_t v36 = sub_251038B00();
  swift_release();
  sub_250F3EC40((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  uint64_t v56 = v36;
  uint64_t v37 = v49;
  sub_251038660();
  uint64_t v54 = v33;
  uint64_t v55 = v32;
  swift_getOpaqueTypeConformance2();
  uint64_t v38 = v45;
  sub_2510389D0();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v52);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v34, v38);
}

uint64_t sub_250F390C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F38898(0, &qword_269B12F88, type metadata accessor for OvernightMetricsChart.Derivations, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v49 = (char *)&v44 - v5;
  sub_250F38898(0, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v3);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v48 = (uint64_t)&v44 - v7;
  sub_250F38898(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v3);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v46 = (uint64_t)&v44 - v9;
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v45 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v13 = (int *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OvernightMetricsChart(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v47 = (uint64_t)&v44 - v20;
  uint64_t v21 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v22 = v21 - 8;
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  uint64_t v26 = v25 - 8;
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (uint64_t *)((char *)&v44 - v30);
  uint64_t v32 = a1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularView(0) + 20);
  sub_250F3EA28(v32, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  *uint64_t v31 = swift_getKeyPath();
  sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_250F3A9C0((uint64_t)v24, (uint64_t)v31 + *(int *)(v26 + 28), (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  LOBYTE(v22) = *(unsigned char *)(v32 + *(int *)(v22 + 32));
  sub_250F3EA28(v32, (uint64_t)v15, type metadata accessor for OvernightMetricsViewModel);
  char v51 = v22;
  uint64_t v33 = v45;
  sub_250F3EA28((uint64_t)&v15[v13[10]], v45, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  uint64_t v34 = v46;
  sub_250F3A92C((uint64_t)&v15[v13[9]], v46);
  uint64_t v35 = *(void **)&v15[v13[16]];
  uint64_t v36 = *(void *)&v15[v13[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v48;
  OvernightMetricsViewModel.warmupProgress.getter(v48);
  uint64_t v38 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v39 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v49, 1, 1, v38);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v51, v33, v34, 0, 1, 1, v35, v36, v18, v37, 0, v39);
  sub_250F3EC40((uint64_t)v15, type metadata accessor for OvernightMetricsViewModel);
  uint64_t v40 = v47;
  sub_250F3A9C0((uint64_t)v18, v47, type metadata accessor for OvernightMetricsChart);
  sub_250F3EA28((uint64_t)v31, (uint64_t)v28, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_250F3EA28(v40, (uint64_t)v18, type metadata accessor for OvernightMetricsChart);
  uint64_t v41 = v50;
  sub_250F3EA28((uint64_t)v28, v50, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_250F3975C();
  sub_250F3EA28((uint64_t)v18, v41 + *(int *)(v42 + 48), type metadata accessor for OvernightMetricsChart);
  sub_250F3EC40(v40, type metadata accessor for OvernightMetricsChart);
  sub_250F3EC40((uint64_t)v31, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_250F3EC40((uint64_t)v18, type metadata accessor for OvernightMetricsChart);
  return sub_250F3EC40((uint64_t)v28, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
}

void sub_250F396C8()
{
  if (!qword_269B12F20)
  {
    sub_250F38898(255, &qword_269B12F28, (uint64_t (*)(uint64_t))sub_250F3975C, MEMORY[0x263F1BAC8]);
    sub_250F39824();
    unint64_t v0 = sub_251038C10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12F20);
    }
  }
}

void sub_250F3975C()
{
  if (!qword_269B12F30)
  {
    type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(255);
    type metadata accessor for OvernightMetricsChart(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B12F30);
    }
  }
}

uint64_t type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B12F90);
}

uint64_t sub_250F397EC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_250F39824()
{
  unint64_t result = qword_269B12F38;
  if (!qword_269B12F38)
  {
    sub_250F38898(255, &qword_269B12F28, (uint64_t (*)(uint64_t))sub_250F3975C, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12F38);
  }
  return result;
}

void sub_250F398AC()
{
  if (!qword_269B12F50)
  {
    sub_250F3EA90(255, &qword_269B12F40, (void (*)(uint64_t))sub_250F396C8, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12F50);
    }
  }
}

void sub_250F39938()
{
  if (!qword_269B12F58)
  {
    sub_250F398AC();
    sub_250F3EEC8(&qword_269B12F60, (void (*)(uint64_t))sub_250F398AC, (void (*)(void))sub_250F399EC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B12F58);
    }
  }
}

unint64_t sub_250F399EC()
{
  unint64_t result = qword_269B12F68;
  if (!qword_269B12F68)
  {
    sub_250F3EA90(255, &qword_269B12F40, (void (*)(uint64_t))sub_250F396C8, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec);
    sub_250F39AE0(&qword_269B12F70, (void (*)(uint64_t))sub_250F396C8);
    sub_250F39B28((unint64_t *)&qword_269B12F78, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12F68);
  }
  return result;
}

uint64_t sub_250F39AE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F39B28(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F3EB28(255, a2, a3, MEMORY[0x263F1A418]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250F39B8C()
{
  if (!qword_269B12F80)
  {
    sub_250F38898(255, &qword_269B12F28, (uint64_t (*)(uint64_t))sub_250F3975C, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12F80);
    }
  }
}

uint64_t sub_250F39C2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v47 = a1;
  uint64_t v3 = type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v43 + 64);
  MEMORY[0x270FA5388](v3);
  sub_250F3DCE0();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v44 = (uint64_t)v41 - v9;
  sub_250F3E170();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F3E204();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v46 = (uint64_t)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F3E264(0);
  uint64_t v45 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = sub_251038490();
  *((void *)v12 + 1) = 0;
  v12[16] = 0;
  unsigned __int8 v18 = sub_2510386B0();
  unsigned __int8 v19 = sub_2510386D0();
  char v20 = sub_2510386C0();
  sub_2510386C0();
  if (sub_2510386C0() != v18) {
    char v20 = sub_2510386C0();
  }
  sub_2510386C0();
  if (sub_2510386C0() != v19) {
    char v20 = sub_2510386C0();
  }
  sub_250F3E314();
  uint64_t v42 = &v12[*(int *)(v21 + 44)];
  unsigned char *v7 = v20;
  sub_250F3E37C();
  v41[1] = &v7[*(int *)(v22 + 44)];
  uint64_t v23 = sub_250FC2B70();
  uint64_t v48 = MEMORY[0x263F8EE88];
  uint64_t v24 = sub_2510207F4(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24;
  swift_getKeyPath();
  sub_250F3EA28(v2, (uint64_t)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  unint64_t v25 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v26 = swift_allocObject();
  sub_250F3A9C0((uint64_t)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_250F3EB28(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_250F3DE18();
  sub_250F3EBD8(&qword_269B12FE8);
  sub_250F3DEE0(255);
  uint64_t v28 = v27;
  uint64_t v29 = sub_250F3EE08(&qword_269B12FD0, sub_250F3DEE0, (void (*)(void))sub_250F3DFE8, (void (*)(void))sub_250F3E058);
  uint64_t v48 = v28;
  uint64_t v49 = v29;
  swift_getOpaqueTypeConformance2();
  sub_251038C80();
  uint64_t v30 = v44;
  sub_250F3A9C0((uint64_t)v7, v44, (uint64_t (*)(void))sub_250F3DCE0);
  sub_250F3A9C0(v30, (uint64_t)v42, (uint64_t (*)(void))sub_250F3DCE0);
  uint64_t v31 = sub_251038D10();
  uint64_t v32 = v46;
  sub_250F7182C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v46, 0.0, 1, 0.0, 1, v31, v33);
  sub_250F3EC40((uint64_t)v12, (uint64_t (*)(void))sub_250F3E170);
  uint64_t KeyPath = swift_getKeyPath();
  sub_250F3EA28(v32, (uint64_t)v17, (uint64_t (*)(void))sub_250F3E204);
  uint64_t v35 = &v17[*(int *)(v45 + 36)];
  *(void *)uint64_t v35 = KeyPath;
  *((void *)v35 + 1) = 1;
  v35[16] = 0;
  sub_250F3EC40(v32, (uint64_t (*)(void))sub_250F3E204);
  uint64_t v36 = swift_getKeyPath();
  uint64_t v37 = v47;
  sub_250F3EA28((uint64_t)v17, v47, (uint64_t (*)(void))sub_250F3E264);
  sub_250F3EA90(0, &qword_269B13040, sub_250F3E264, &qword_269B13048, MEMORY[0x263F8D4F8]);
  uint64_t v39 = v37 + *(int *)(v38 + 36);
  *(void *)uint64_t v39 = v36;
  *(unsigned char *)(v39 + 8) = 1;
  return sub_250F3EC40((uint64_t)v17, (uint64_t (*)(void))sub_250F3E264);
}

uint64_t sub_250F3A244@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v58 = a3;
  sub_250F38898(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v48 - v6;
  uint64_t v8 = sub_251038750();
  uint64_t v50 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v53 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v48 - v14;
  sub_250F3DEE0(0);
  uint64_t v56 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v54 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F3DE18();
  uint64_t v55 = v18;
  uint64_t v52 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  char v51 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  uint64_t v60 = v20;
  uint64_t v61 = v21;
  sub_250F3EB74();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_2510388A0();
  uint64_t v24 = v23;
  char v26 = v25;
  uint64_t v57 = a2;
  sub_250F75888((uint64_t)v15);
  if (*v15)
  {
    sub_2510387E0();
  }
  else
  {
    sub_251038740();
    uint64_t v27 = *MEMORY[0x263F1A610];
    uint64_t v28 = sub_251038760();
    uint64_t v49 = v8;
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)(v28 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v7, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v7, 0, 1, v29);
    sub_2510387A0();
    sub_250F3ECA0((uint64_t)v7, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v49);
    sub_251038780();
    sub_2510387C0();
    swift_release();
  }
  char v31 = v26 & 1;
  sub_250F3EC40((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  uint64_t v32 = sub_251038870();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  char v38 = v37 & 1;
  sub_250F3EBC8(v22, v24, v31);
  swift_release();
  swift_bridgeObjectRelease();
  char v39 = sub_251038710();
  sub_251038050();
  uint64_t v60 = v32;
  uint64_t v61 = v34;
  char v62 = v38;
  uint64_t v63 = v36;
  char v64 = v39;
  uint64_t v65 = v40;
  uint64_t v66 = v41;
  uint64_t v67 = v42;
  uint64_t v68 = v43;
  char v69 = 0;
  uint64_t v59 = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F64E8);
  sub_250F3EB28(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_250F3EBD8((unint64_t *)&qword_269B13050);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_250F3DF88();
  sub_250F3DFE8();
  uint64_t v44 = (uint64_t)v54;
  sub_2510389F0();
  swift_bridgeObjectRelease();
  sub_250F3EBC8(v32, v34, v38);
  swift_bridgeObjectRelease();
  uint64_t v45 = v53;
  sub_250F75888(v53);
  type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  sub_250FC1D98();
  sub_250F3EC40(v45, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  sub_250F3EE08(&qword_269B12FD0, sub_250F3DEE0, (void (*)(void))sub_250F3DFE8, (void (*)(void))sub_250F3E058);
  uint64_t v46 = v51;
  sub_251038920();
  sub_250F3EC40(v44, (uint64_t (*)(void))sub_250F3DEE0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v58, v46, v55);
}

uint64_t sub_250F3A8A0(uint64_t a1)
{
  sub_250F3EA90(0, &qword_269B12F40, (void (*)(uint64_t))sub_250F396C8, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F3A92C(uint64_t a1, uint64_t a2)
{
  sub_250F38898(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F3A9C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F3AA28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    uint64_t v12 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      uint64_t v7 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = (uint64_t)a2 + v7;
      uint64_t v10 = sub_251038F20();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *(void *)a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = sub_2510376B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)(v14 + v17[5]) = *(void *)(v15 + v17[5]);
    uint64_t v18 = v17[6];
    uint64_t v19 = (void *)(v14 + v18);
    uint64_t v20 = (void *)(v15 + v18);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      void *v19 = *v20;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v21 = sub_2510379E0();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        sub_250F38898(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = v17[7];
    char v25 = (char *)(v14 + v24);
    char v26 = (char *)(v15 + v24);
    uint64_t v27 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v28 = *((void *)v27 - 1);
    uint64_t v77 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
    {
      sub_250F38898(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v30 = sub_251037400();
      uint64_t v74 = v17;
      char v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
      v31(v25, v26, v30);
      uint64_t v32 = v27[5];
      uint64_t v33 = &v25[v32];
      uint64_t v34 = &v26[v32];
      v31(&v25[v32], &v26[v32], v30);
      sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v31(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v30);
      uint64_t v17 = v74;
      uint64_t v36 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v33[v36[5]] = *(void *)&v34[v36[5]];
      *(void *)&v33[v36[6]] = *(void *)&v34[v36[6]];
      *(void *)&v33[v36[7]] = *(void *)&v34[v36[7]];
      uint64_t v37 = v27[6];
      char v38 = &v25[v37];
      char v39 = &v26[v37];
      *(_OWORD *)char v38 = *(_OWORD *)v39;
      v38[16] = v39[16];
      v25[v27[7]] = v26[v27[7]];
      v25[v27[8]] = v26[v27[8]];
      v25[v27[9]] = v26[v27[9]];
      uint64_t v40 = v27[10];
      uint64_t v41 = &v25[v40];
      uint64_t v42 = &v26[v40];
      uint64_t v43 = *((void *)v42 + 1);
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = v43;
      uint64_t v44 = v27[11];
      uint64_t v45 = &v25[v44];
      uint64_t v46 = &v26[v44];
      uint64_t v47 = *((void *)v46 + 1);
      *(void *)uint64_t v45 = *(void *)v46;
      *((void *)v45 + 1) = v47;
      int v72 = *(void (**)(char *, void, uint64_t, int *))(v28 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v72(v25, 0, 1, v27);
    }
    uint64_t v48 = v17[8];
    uint64_t v49 = v14 + v48;
    uint64_t v50 = v17;
    uint64_t v51 = v15 + v48;
    *(void *)(v14 + v48) = *(void *)(v15 + v48);
    uint64_t v52 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v53 = *(int *)(v52 + 20);
    uint64_t v73 = v51 + v53;
    uint64_t v75 = v49 + v53;
    uint64_t v54 = sub_2510374F0();
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16);
    swift_bridgeObjectRetain();
    v55(v75, v73, v54);
    *(void *)(v49 + *(int *)(v52 + 24)) = *(void *)(v51 + *(int *)(v52 + 24));
    *(void *)(v14 + v50[9]) = *(void *)(v15 + v50[9]);
    *(void *)(v14 + v50[10]) = *(void *)(v15 + v50[10]);
    uint64_t v56 = v50[11];
    uint64_t v76 = v14 + v56;
    uint64_t v57 = v15 + v56;
    uint64_t v58 = sub_251037400();
    uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v76, v57, v58);
    sub_250F388FC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v61 = v60;
    v59(v76 + *(int *)(v60 + 36), v57 + *(int *)(v60 + 36), v58);
    uint64_t v62 = v50[12];
    uint64_t v63 = v14 + v62;
    uint64_t v64 = v15 + v62;
    v59(v14 + v62, v15 + v62, v58);
    v59(v63 + *(int *)(v61 + 36), v64 + *(int *)(v61 + 36), v58);
    *(void *)(v14 + v50[13]) = *(void *)(v15 + v50[13]);
    *(void *)(v14 + v50[14]) = *(void *)(v15 + v50[14]);
    uint64_t v65 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v66 = *(int *)(v65 + 20);
    uint64_t v67 = v14 + v66;
    uint64_t v68 = v15 + v66;
    uint64_t v69 = sub_2510375C0();
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70(v67, v68, v69);
    *(unsigned char *)(v14 + *(int *)(v65 + 24)) = *(unsigned char *)(v15 + *(int *)(v65 + 24));
    return v77;
  }
  return v12;
}

uint64_t sub_250F3B1E8(uint64_t a1, uint64_t a2)
{
  sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    uint64_t v5 = sub_251038F20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v9 = v6 + v8[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = sub_2510379E0();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  uint64_t v12 = v6 + v8[7];
  uint64_t v13 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = sub_251037400();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
    v15(v12, v14);
    uint64_t v16 = v12 + *(int *)(v13 + 20);
    v15(v16, v14);
    sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v15(v16 + *(int *)(v17 + 36), v14);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v6 + v8[8];
  swift_bridgeObjectRelease();
  uint64_t v19 = v18 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v20 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = v6 + v8[11];
  uint64_t v22 = sub_251037400();
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
  v23(v21, v22);
  sub_250F388FC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v25 = v24;
  v23(v21 + *(int *)(v24 + 36), v22);
  uint64_t v26 = v6 + v8[12];
  v23(v26, v22);
  v23(v26 + *(int *)(v25 + 36), v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v6 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v28 = sub_2510375C0();
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
  return v29(v27, v28);
}

uint64_t sub_250F3B6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v6 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = sub_251038F20();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(v11 + v14[5]) = *(void *)(v12 + v14[5]);
  uint64_t v15 = v14[6];
  uint64_t v16 = (void *)(v11 + v15);
  uint64_t v17 = (void *)(v12 + v15);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v16 = *v17;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v18 = sub_2510379E0();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_250F38898(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v14[7];
  uint64_t v22 = (char *)(v11 + v21);
  uint64_t v23 = (char *)(v12 + v21);
  uint64_t v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v25 = *((void *)v24 - 1);
  uint64_t v74 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    sub_250F38898(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = sub_251037400();
    uint64_t v71 = v14;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
    v28(v22, v23, v27);
    uint64_t v29 = v24[5];
    uint64_t v30 = &v22[v29];
    char v31 = &v23[v29];
    v28(&v22[v29], &v23[v29], v27);
    sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v28(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v27);
    uint64_t v14 = v71;
    uint64_t v33 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v30[v33[5]] = *(void *)&v31[v33[5]];
    *(void *)&v30[v33[6]] = *(void *)&v31[v33[6]];
    *(void *)&v30[v33[7]] = *(void *)&v31[v33[7]];
    uint64_t v34 = v24[6];
    uint64_t v35 = &v22[v34];
    uint64_t v36 = &v23[v34];
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    uint64_t v37 = v24[10];
    char v38 = &v22[v37];
    char v39 = &v23[v37];
    uint64_t v40 = *((void *)v39 + 1);
    *(void *)char v38 = *(void *)v39;
    *((void *)v38 + 1) = v40;
    uint64_t v41 = v24[11];
    uint64_t v42 = &v22[v41];
    uint64_t v43 = &v23[v41];
    uint64_t v44 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = *(void *)v43;
    *((void *)v42 + 1) = v44;
    uint64_t v69 = *(void (**)(char *, void, uint64_t, int *))(v25 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v69(v22, 0, 1, v24);
  }
  uint64_t v45 = v14[8];
  uint64_t v46 = v11 + v45;
  uint64_t v47 = v14;
  uint64_t v48 = v12 + v45;
  *(void *)(v11 + v45) = *(void *)(v12 + v45);
  uint64_t v49 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v50 = *(int *)(v49 + 20);
  uint64_t v70 = v48 + v50;
  uint64_t v72 = v46 + v50;
  uint64_t v51 = sub_2510374F0();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16);
  swift_bridgeObjectRetain();
  v52(v72, v70, v51);
  *(void *)(v46 + *(int *)(v49 + 24)) = *(void *)(v48 + *(int *)(v49 + 24));
  *(void *)(v11 + v47[9]) = *(void *)(v12 + v47[9]);
  *(void *)(v11 + v47[10]) = *(void *)(v12 + v47[10]);
  uint64_t v53 = v47[11];
  uint64_t v73 = v11 + v53;
  uint64_t v54 = v12 + v53;
  uint64_t v55 = sub_251037400();
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56(v73, v54, v55);
  sub_250F388FC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v58 = v57;
  v56(v73 + *(int *)(v57 + 36), v54 + *(int *)(v57 + 36), v55);
  uint64_t v59 = v47[12];
  uint64_t v60 = v11 + v59;
  uint64_t v61 = v12 + v59;
  v56(v11 + v59, v12 + v59, v55);
  v56(v60 + *(int *)(v58 + 36), v61 + *(int *)(v58 + 36), v55);
  *(void *)(v11 + v47[13]) = *(void *)(v12 + v47[13]);
  *(void *)(v11 + v47[14]) = *(void *)(v12 + v47[14]);
  uint64_t v62 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v63 = *(int *)(v62 + 20);
  uint64_t v64 = v11 + v63;
  uint64_t v65 = v12 + v63;
  uint64_t v66 = sub_2510375C0();
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v67(v64, v65, v66);
  *(unsigned char *)(v11 + *(int *)(v62 + 24)) = *(unsigned char *)(v12 + *(int *)(v62 + 24));
  return v74;
}

uint64_t sub_250F3BE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_250F3ECA0(a1, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
    sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, v6);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      long long v7 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v7;
      uint64_t v8 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = sub_251038F20();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(v13 + v16[5]) = *(void *)(v14 + v16[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v17 = v16[6];
    uint64_t v18 = (void *)(v13 + v17);
    uint64_t v19 = (void *)(v14 + v17);
    sub_250F3EC40(v13 + v17, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v18 = *v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v20 = sub_2510379E0();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        sub_250F38898(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v95 = a1;
  uint64_t v23 = v16[7];
  uint64_t v24 = (unsigned char *)(v13 + v23);
  uint64_t v25 = (unsigned char *)(v14 + v23);
  uint64_t v26 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v27 = *((void *)v26 - 1);
  uint64_t v28 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v74 = sub_251037400();
      uint64_t v75 = *(void (**)(void))(*(void *)(v74 - 8) + 24);
      uint64_t v94 = v74;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v75)(v24, v25, v74);
      uint64_t v76 = (void (*)(char *, char *, uint64_t))v75;
      uint64_t v77 = v26[5];
      uint64_t v78 = &v24[v77];
      uint64_t v91 = &v25[v77];
      ((void (*)(unsigned char *))v76)(&v24[v77]);
      sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v76(&v78[*(int *)(v79 + 36)], &v91[*(int *)(v79 + 36)], v94);
      uint64_t v80 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v78[v80[5]] = *(void *)&v91[v80[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v78[v80[6]] = *(void *)&v91[v80[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v78[v80[7]] = *(void *)&v91[v80[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v81 = v26[6];
      uint64_t v82 = &v24[v81];
      uint64_t v83 = &v25[v81];
      long long v84 = *(_OWORD *)v83;
      v82[16] = v83[16];
      *(_OWORD *)uint64_t v82 = v84;
      v24[v26[7]] = v25[v26[7]];
      v24[v26[8]] = v25[v26[8]];
      v24[v26[9]] = v25[v26[9]];
      uint64_t v85 = v26[10];
      uint64_t v86 = &v24[v85];
      uint64_t v87 = &v25[v85];
      void *v86 = *v87;
      v86[1] = v87[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v88 = v26[11];
      uint64_t v89 = &v24[v88];
      uint64_t v90 = &v25[v88];
      void *v89 = *v90;
      v89[1] = v90[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    sub_250F3EC40((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    sub_250F38898(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v31 = sub_251037400();
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
  uint64_t v92 = v27;
  v32(v24, v25, v31);
  uint64_t v33 = v32;
  uint64_t v34 = v26[5];
  uint64_t v35 = &v24[v34];
  uint64_t v36 = &v25[v34];
  v33(&v24[v34], &v25[v34], v31);
  sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v33(&v35[*(int *)(v37 + 36)], &v36[*(int *)(v37 + 36)], v31);
  char v38 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v35[v38[5]] = *(void *)&v36[v38[5]];
  *(void *)&v35[v38[6]] = *(void *)&v36[v38[6]];
  *(void *)&v35[v38[7]] = *(void *)&v36[v38[7]];
  uint64_t v39 = v26[6];
  uint64_t v40 = &v24[v39];
  uint64_t v41 = &v25[v39];
  char v42 = v41[16];
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  v40[16] = v42;
  v24[v26[7]] = v25[v26[7]];
  v24[v26[8]] = v25[v26[8]];
  v24[v26[9]] = v25[v26[9]];
  uint64_t v43 = v26[10];
  uint64_t v44 = &v24[v43];
  uint64_t v45 = &v25[v43];
  void *v44 = *v45;
  v44[1] = v45[1];
  uint64_t v46 = v26[11];
  uint64_t v47 = &v24[v46];
  uint64_t v48 = &v25[v46];
  *uint64_t v47 = *v48;
  v47[1] = v48[1];
  unint64_t v93 = *(void (**)(unsigned char *, void, uint64_t, int *))(v92 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93(v24, 0, 1, v26);
LABEL_19:
  uint64_t v50 = v16[8];
  uint64_t v51 = v13 + v50;
  uint64_t v52 = v14 + v50;
  *(void *)(v13 + v50) = *(void *)(v14 + v50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v54 = *(int *)(v53 + 20);
  uint64_t v55 = v51 + v54;
  uint64_t v56 = v52 + v54;
  uint64_t v57 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  *(void *)(v51 + *(int *)(v53 + 24)) = *(void *)(v52 + *(int *)(v53 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + v16[9]) = *(void *)(v14 + v16[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + v16[10]) = *(void *)(v14 + v16[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = v16[11];
  uint64_t v59 = v13 + v58;
  uint64_t v60 = v14 + v58;
  uint64_t v61 = sub_251037400();
  uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 24);
  v62(v59, v60, v61);
  sub_250F388FC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v64 = v63;
  v62(v59 + *(int *)(v63 + 36), v60 + *(int *)(v63 + 36), v61);
  uint64_t v65 = v16[12];
  uint64_t v66 = v13 + v65;
  uint64_t v67 = v14 + v65;
  v62(v13 + v65, v14 + v65, v61);
  v62(v66 + *(int *)(v64 + 36), v67 + *(int *)(v64 + 36), v61);
  *(void *)(v13 + v16[13]) = *(void *)(v14 + v16[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + v16[14]) = *(void *)(v14 + v16[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v68 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v69 = *(int *)(v68 + 20);
  uint64_t v70 = v13 + v69;
  uint64_t v71 = v14 + v69;
  uint64_t v72 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 24))(v70, v71, v72);
  *(unsigned char *)(v13 + *(int *)(v68 + 24)) = *(unsigned char *)(v14 + *(int *)(v68 + 24));
  return v95;
}

char *sub_250F3C808(char *a1, char *a2, uint64_t a3)
{
  sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v8 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = sub_251038F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = sub_2510376B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)&v13[v16[5]] = *(void *)&v14[v16[5]];
  uint64_t v17 = v16[6];
  uint64_t v18 = &v13[v17];
  uint64_t v19 = &v14[v17];
  uint64_t v20 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = sub_2510379E0();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
    {
      sub_250F38898(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v19, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v24 = v16[7];
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  uint64_t v27 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v28 = *((void *)v27 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
  {
    sub_250F38898(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v30 = sub_251037400();
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
    uint64_t v67 = v28;
    v31(v25, v26, v30);
    uint64_t v32 = v31;
    uint64_t v33 = v27[5];
    uint64_t v34 = &v25[v33];
    uint64_t v68 = a1;
    uint64_t v35 = &v26[v33];
    v32(&v25[v33], &v26[v33], v30);
    sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v32(&v34[*(int *)(v36 + 36)], &v35[*(int *)(v36 + 36)], v30);
    uint64_t v37 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v34[v37[5]] = *(void *)&v35[v37[5]];
    *(void *)&v34[v37[6]] = *(void *)&v35[v37[6]];
    uint64_t v38 = v37[7];
    uint64_t v39 = *(void *)&v35[v38];
    a1 = v68;
    *(void *)&v34[v38] = v39;
    uint64_t v40 = v27[6];
    uint64_t v41 = &v25[v40];
    char v42 = &v26[v40];
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    v41[16] = v42[16];
    v25[v27[7]] = v26[v27[7]];
    v25[v27[8]] = v26[v27[8]];
    v25[v27[9]] = v26[v27[9]];
    *(_OWORD *)&v25[v27[10]] = *(_OWORD *)&v26[v27[10]];
    *(_OWORD *)&v25[v27[11]] = *(_OWORD *)&v26[v27[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v67 + 56))(v25, 0, 1, v27);
  }
  uint64_t v43 = v16[8];
  uint64_t v44 = &v13[v43];
  uint64_t v45 = &v14[v43];
  *(void *)&v13[v43] = *(void *)&v14[v43];
  uint64_t v46 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v47 = *(int *)(v46 + 20);
  uint64_t v48 = &v44[v47];
  uint64_t v49 = &v45[v47];
  uint64_t v50 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
  *(void *)&v44[*(int *)(v46 + 24)] = *(void *)&v45[*(int *)(v46 + 24)];
  *(void *)&v13[v16[9]] = *(void *)&v14[v16[9]];
  *(void *)&v13[v16[10]] = *(void *)&v14[v16[10]];
  uint64_t v51 = v16[11];
  uint64_t v52 = &v13[v51];
  uint64_t v53 = &v14[v51];
  uint64_t v54 = sub_251037400();
  uint64_t v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32);
  v55(v52, v53, v54);
  sub_250F388FC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v57 = v56;
  v55(&v52[*(int *)(v56 + 36)], &v53[*(int *)(v56 + 36)], v54);
  uint64_t v58 = v16[12];
  uint64_t v59 = &v13[v58];
  uint64_t v60 = &v14[v58];
  v55(&v13[v58], &v14[v58], v54);
  v55(&v59[*(int *)(v57 + 36)], &v60[*(int *)(v57 + 36)], v54);
  *(void *)&v13[v16[13]] = *(void *)&v14[v16[13]];
  *(void *)&v13[v16[14]] = *(void *)&v14[v16[14]];
  uint64_t v61 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v62 = *(int *)(v61 + 20);
  uint64_t v63 = &v13[v62];
  uint64_t v64 = &v14[v62];
  uint64_t v65 = sub_2510375C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v63, v64, v65);
  v13[*(int *)(v61 + 24)] = v14[*(int *)(v61 + 24)];
  return a1;
}

char *sub_250F3CF24(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_250F3ECA0((uint64_t)a1, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
    sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, v6);
    uint64_t v8 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      uint64_t v9 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_251038F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = sub_2510376B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)&v14[v17[5]] = *(void *)&v15[v17[5]];
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v18 = v17[6];
    uint64_t v19 = &v14[v18];
    uint64_t v20 = &v15[v18];
    sub_250F3EC40((uint64_t)&v14[v18], type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v21 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = sub_2510379E0();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        sub_250F38898(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v92 = a1;
  uint64_t v25 = v17[7];
  uint64_t v26 = &v14[v25];
  uint64_t v27 = &v15[v25];
  uint64_t v28 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v29 = *((void *)v28 - 1);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, int *))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      uint64_t v69 = sub_251037400();
      uint64_t v70 = *(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 40);
      uint64_t v91 = v69;
      v70(v26, v27, v69);
      uint64_t v71 = (void (*)(char *))v70;
      uint64_t v72 = v28[5];
      uint64_t v73 = &v26[v72];
      uint64_t v89 = &v27[v72];
      v71(&v26[v72]);
      sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      ((void (*)(char *, char *, uint64_t))v71)(&v73[*(int *)(v74 + 36)], &v89[*(int *)(v74 + 36)], v91);
      uint64_t v75 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v73[v75[5]] = *(void *)&v89[v75[5]];
      swift_bridgeObjectRelease();
      *(void *)&v73[v75[6]] = *(void *)&v89[v75[6]];
      swift_bridgeObjectRelease();
      *(void *)&v73[v75[7]] = *(void *)&v89[v75[7]];
      swift_bridgeObjectRelease();
      uint64_t v76 = v28[6];
      uint64_t v77 = &v26[v76];
      uint64_t v78 = &v27[v76];
      *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
      v77[16] = v78[16];
      v26[v28[7]] = v27[v28[7]];
      v26[v28[8]] = v27[v28[8]];
      v26[v28[9]] = v27[v28[9]];
      uint64_t v79 = v28[10];
      uint64_t v80 = &v26[v79];
      uint64_t v81 = &v27[v79];
      uint64_t v83 = *(void *)v81;
      uint64_t v82 = *((void *)v81 + 1);
      *(void *)uint64_t v80 = v83;
      *((void *)v80 + 1) = v82;
      swift_bridgeObjectRelease();
      uint64_t v84 = v28[11];
      uint64_t v85 = &v26[v84];
      uint64_t v86 = &v27[v84];
      uint64_t v88 = *(void *)v86;
      uint64_t v87 = *((void *)v86 + 1);
      *(void *)uint64_t v85 = v88;
      *((void *)v85 + 1) = v87;
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    sub_250F3EC40((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_17;
  }
  if (v32)
  {
LABEL_17:
    sub_250F38898(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_18;
  }
  uint64_t v33 = sub_251037400();
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32);
  uint64_t v90 = v29;
  v34(v26, v27, v33);
  uint64_t v35 = v34;
  uint64_t v36 = v28[5];
  uint64_t v37 = &v26[v36];
  uint64_t v38 = &v27[v36];
  v35(&v26[v36], &v27[v36], v33);
  sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v35(&v37[*(int *)(v39 + 36)], &v38[*(int *)(v39 + 36)], v33);
  uint64_t v40 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v37[v40[5]] = *(void *)&v38[v40[5]];
  *(void *)&v37[v40[6]] = *(void *)&v38[v40[6]];
  *(void *)&v37[v40[7]] = *(void *)&v38[v40[7]];
  uint64_t v41 = v28[6];
  char v42 = &v26[v41];
  uint64_t v43 = &v27[v41];
  *(_OWORD *)char v42 = *(_OWORD *)v43;
  v42[16] = v43[16];
  v26[v28[7]] = v27[v28[7]];
  v26[v28[8]] = v27[v28[8]];
  v26[v28[9]] = v27[v28[9]];
  *(_OWORD *)&v26[v28[10]] = *(_OWORD *)&v27[v28[10]];
  *(_OWORD *)&v26[v28[11]] = *(_OWORD *)&v27[v28[11]];
  (*(void (**)(char *, void, uint64_t, int *))(v90 + 56))(v26, 0, 1, v28);
LABEL_18:
  uint64_t v45 = v17[8];
  uint64_t v46 = &v14[v45];
  uint64_t v47 = &v15[v45];
  *(void *)&v14[v45] = *(void *)&v15[v45];
  swift_bridgeObjectRelease();
  uint64_t v48 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v49 = *(int *)(v48 + 20);
  uint64_t v50 = &v46[v49];
  uint64_t v51 = &v47[v49];
  uint64_t v52 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 40))(v50, v51, v52);
  *(void *)&v46[*(int *)(v48 + 24)] = *(void *)&v47[*(int *)(v48 + 24)];
  swift_bridgeObjectRelease();
  *(void *)&v14[v17[9]] = *(void *)&v15[v17[9]];
  swift_bridgeObjectRelease();
  *(void *)&v14[v17[10]] = *(void *)&v15[v17[10]];
  swift_bridgeObjectRelease();
  uint64_t v53 = v17[11];
  uint64_t v54 = &v14[v53];
  uint64_t v55 = &v15[v53];
  uint64_t v56 = sub_251037400();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 40);
  v57(v54, v55, v56);
  sub_250F388FC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v59 = v58;
  v57(&v54[*(int *)(v58 + 36)], &v55[*(int *)(v58 + 36)], v56);
  uint64_t v60 = v17[12];
  uint64_t v61 = &v14[v60];
  uint64_t v62 = &v15[v60];
  v57(&v14[v60], &v15[v60], v56);
  v57(&v61[*(int *)(v59 + 36)], &v62[*(int *)(v59 + 36)], v56);
  *(void *)&v14[v17[13]] = *(void *)&v15[v17[13]];
  swift_bridgeObjectRelease();
  *(void *)&v14[v17[14]] = *(void *)&v15[v17[14]];
  swift_bridgeObjectRelease();
  uint64_t v63 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v64 = *(int *)(v63 + 20);
  uint64_t v65 = &v14[v64];
  uint64_t v66 = &v15[v64];
  uint64_t v67 = sub_2510375C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 40))(v65, v66, v67);
  v14[*(int *)(v63 + 24)] = v15[*(int *)(v63 + 24)];
  return v92;
}

uint64_t sub_250F3D874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F3D888);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F38898(0, &qword_269B12F00, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_250F3D9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F3D9C8);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250F38898(0, &qword_269B12F00, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_250F3DB00()
{
  sub_250F38898(319, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for BalanceWidgetViewModel();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_250F3DBF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F3DCC4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_250F3DCE0()
{
  if (!qword_269B12FA0)
  {
    sub_250F3DD44();
    sub_250F3E08C();
    unint64_t v0 = sub_251038140();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12FA0);
    }
  }
}

void sub_250F3DD44()
{
  if (!qword_269B12FA8)
  {
    sub_250F3EB28(255, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    sub_250F3DE18();
    sub_250F3EBD8(&qword_269B12FE8);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12FA8);
    }
  }
}

void sub_250F3DE18()
{
  if (!qword_269B12FB8)
  {
    sub_250F3DEE0(255);
    sub_250F3EE08(&qword_269B12FD0, sub_250F3DEE0, (void (*)(void))sub_250F3DFE8, (void (*)(void))sub_250F3E058);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B12FB8);
    }
  }
}

void sub_250F3DEE0(uint64_t a1)
{
}

void sub_250F3DF14(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_251038270();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_250F3DF88()
{
  if (!qword_269B12FC8)
  {
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12FC8);
    }
  }
}

unint64_t sub_250F3DFE8()
{
  unint64_t result = qword_269B12FD8;
  if (!qword_269B12FD8)
  {
    sub_250F3DF88();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12FD8);
  }
  return result;
}

uint64_t sub_250F3E058()
{
  return sub_250F39AE0(&qword_269B12FE0, MEMORY[0x263F1A470]);
}

unint64_t sub_250F3E08C()
{
  unint64_t result = qword_269B12FF0;
  if (!qword_269B12FF0)
  {
    sub_250F3DD44();
    sub_250F3DEE0(255);
    sub_250F3EE08(&qword_269B12FD0, sub_250F3DEE0, (void (*)(void))sub_250F3DFE8, (void (*)(void))sub_250F3E058);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12FF0);
  }
  return result;
}

void sub_250F3E170()
{
  if (!qword_269B12FF8)
  {
    sub_250F3DCE0();
    sub_250F39AE0(&qword_269B13000, (void (*)(uint64_t))sub_250F3DCE0);
    unint64_t v0 = sub_251038BF0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12FF8);
    }
  }
}

void sub_250F3E204()
{
  if (!qword_269B13008)
  {
    sub_250F3E170();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13008);
    }
  }
}

void sub_250F3E264(uint64_t a1)
{
}

void sub_250F3E298()
{
  if (!qword_269B13018)
  {
    sub_250F3EB28(255, &qword_269B13020, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_251038680();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13018);
    }
  }
}

void sub_250F3E314()
{
  if (!qword_269B13028)
  {
    sub_250F3DCE0();
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13028);
    }
  }
}

void sub_250F3E37C()
{
  if (!qword_269B13030)
  {
    sub_250F3DD44();
    sub_250F3E3E8();
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13030);
    }
  }
}

unint64_t sub_250F3E3E8()
{
  unint64_t result = qword_269B13038;
  if (!qword_269B13038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13038);
  }
  return result;
}

uint64_t sub_250F3E43C()
{
  uint64_t v1 = type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  sub_250F38898(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = v3 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    uint64_t v5 = sub_251038F20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v3 + *(int *)(v1 + 20);
  uint64_t v7 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v9 = v6 + v8[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = sub_2510379E0();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  uint64_t v12 = v6 + v8[7];
  uint64_t v13 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = sub_251037400();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
    v15(v12, v14);
    uint64_t v16 = v12 + *(int *)(v13 + 20);
    v15(v16, v14);
    sub_250F388FC(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v15(v16 + *(int *)(v17 + 36), v14);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v6 + v8[8];
  swift_bridgeObjectRelease();
  uint64_t v19 = v18 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v20 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = v6 + v8[11];
  uint64_t v22 = sub_251037400();
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
  v23(v21, v22);
  sub_250F388FC(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v25 = v24;
  v23(v21 + *(int *)(v24 + 36), v22);
  uint64_t v26 = v6 + v8[12];
  v23(v26, v22);
  v23(v26 + *(int *)(v25 + 36), v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v6 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v28 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  return swift_deallocObject();
}

uint64_t sub_250F3E998@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_250F3A244(a1, v6, a2);
}

uint64_t sub_250F3EA28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_250F3EA90(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    a3(255);
    sub_250F3EB28(255, a4, a5, MEMORY[0x263F1A418]);
    unint64_t v8 = sub_251038270();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250F3EB28(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_250F3EB74()
{
  unint64_t result = qword_26B210160;
  if (!qword_26B210160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B210160);
  }
  return result;
}

uint64_t sub_250F3EBC8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_250F3EBD8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F3EB28(255, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F3EC40(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F3ECA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_250F38898(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t sub_250F3ED00()
{
  unint64_t result = qword_269B13058;
  if (!qword_269B13058)
  {
    uint64_t v1 = MEMORY[0x263F8D4F8];
    sub_250F3EA90(255, &qword_269B13040, sub_250F3E264, &qword_269B13048, MEMORY[0x263F8D4F8]);
    sub_250F3EE08(&qword_269B13060, sub_250F3E264, (void (*)(void))sub_250F3EE94, (void (*)(void))sub_250F3EF80);
    sub_250F39B28((unint64_t *)&qword_269B13080, &qword_269B13048, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13058);
  }
  return result;
}

uint64_t sub_250F3EE08(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F3EE94()
{
  return sub_250F3EEC8(&qword_269B13068, (void (*)(uint64_t))sub_250F3E204, (void (*)(void))sub_250F3EF4C);
}

uint64_t sub_250F3EEC8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F3EF4C()
{
  return sub_250F39AE0(&qword_269B13070, (void (*)(uint64_t))sub_250F3E170);
}

uint64_t sub_250F3EF80()
{
  return sub_250F39AE0(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
}

id SettingsModelProvider.__allocating_init(healthStore:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A3D0]), sel_initWithFeatureIdentifier_healthStore_currentCountryCode_, *MEMORY[0x263F097F0], a1, 0);
  sub_251037C00();
  uint64_t v5 = sub_251037BF0();
  id v6 = sub_250F3FA14(v4, v5, objc_allocWithZone(v2));

  return v6;
}

uint64_t SettingsModelProvider.featureStatusProviding(_:didUpdate:)(uint64_t a1, void *a2)
{
  swift_getObjectType();
  return sub_250F3FE7C(a2, v2);
}

uint64_t SettingsModelProvider.onboardingEligible.getter()
{
  return sub_250F3F2FC((uint64_t)&unk_25103AAA0, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible);
}

uint64_t sub_250F3F0A4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_250F3F380(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible, a2);
}

uint64_t sub_250F3F0B8()
{
  return swift_release();
}

uint64_t SettingsModelProvider.isAgeGated.getter()
{
  return sub_250F3F2FC((uint64_t)&unk_25103AAC8, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated);
}

uint64_t sub_250F3F16C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_250F3F380(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated, a2);
}

uint64_t sub_250F3F180()
{
  return swift_release();
}

uint64_t SettingsModelProvider.settingsVisible.getter()
{
  return sub_250F3F2FC((uint64_t)&unk_25103AAF0, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible);
}

uint64_t sub_250F3F234@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_250F3F380(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible, a2);
}

uint64_t sub_250F3F248()
{
  return swift_release();
}

uint64_t SettingsModelProvider.settingsUserInteractionEnabled.getter()
{
  return sub_250F3F2FC((uint64_t)&unk_25103AB18, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
}

uint64_t sub_250F3F2FC(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_250F4056C();
  sub_251037530();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_250F3F36C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_250F3F380(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled, a2);
}

uint64_t sub_250F3F380@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_250F4056C();
  sub_251037530();
  uint64_t result = swift_release();
  *a3 = *(unsigned char *)(v5 + *a2);
  return result;
}

uint64_t sub_250F3F404()
{
  return swift_release();
}

BOOL SettingsModelProvider.settingsUserInteractionDisabled.getter()
{
  swift_getKeyPath();
  sub_250F4056C();
  sub_251037530();
  swift_release();
  return (*(unsigned char *)(v0 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled) & 1) == 0;
}

uint64_t SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.getter()
{
  if ((sub_251037BA0() & 1) == 0) {
    return 0;
  }
  swift_getKeyPath();
  sub_250F4056C();
  sub_251037530();
  swift_release();
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
}

uint64_t SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.setter()
{
  return sub_251037BB0();
}

uint64_t (*SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = *(void *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider_settings);
  if (sub_251037BA0())
  {
    swift_getKeyPath();
    *(void *)a1 = v1;
    sub_250F4056C();
    sub_251037530();
    swift_release();
    char v3 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
  }
  else
  {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 16) = v3;
  return sub_250F3F6AC;
}

uint64_t sub_250F3F6AC()
{
  return sub_251037BB0();
}

uint64_t SettingsModelProvider.notificationsEnabled.getter()
{
  uint64_t v1 = (void *)swift_allocObject();
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = v0;
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = v0;
  id v3 = v0;
  sub_251038C40();
  return v5;
}

uint64_t sub_250F3F790@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_251037BA0();
  if (result)
  {
    swift_getKeyPath();
    sub_250F4056C();
    sub_251037530();
    uint64_t result = swift_release();
    char v5 = *(unsigned char *)(a1 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
  }
  else
  {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

id SettingsModelProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SettingsModelProvider.init()()
{
}

id SettingsModelProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_250F3FA14(void *a1, uint64_t a2, unsigned char *a3)
{
  v42[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = sub_251037C90();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible] = 0;
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated] = 0;
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible] = 1;
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled] = 0;
  uint64_t v11 = a3;
  sub_251037560();
  *(void *)&v11[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider_featureStatusManager] = a1;
  *(void *)&v11[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider_settings] = a2;
  id v12 = a1;
  swift_retain();

  v41.receiver = v11;
  v41.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v41, sel_init);
  sub_250F408B4(0, (unint64_t *)&qword_26B2108D8);
  id v14 = v13;
  uint64_t v15 = (void *)sub_251039430();
  objc_msgSend(v12, sel_registerObserver_queue_, v14, v15);

  v42[0] = 0;
  id v16 = objc_msgSend(v12, sel_featureStatusWithError_, v42);
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = v42[0];
    sub_250F3FE7C(v17, (uint64_t)v14);

    swift_release();
  }
  else
  {
    uint64_t v38 = v8;
    uint64_t v39 = v7;
    id v19 = v42[0];
    uint64_t v20 = (void *)sub_251037250();

    swift_willThrow();
    sub_251037C70();
    id v21 = v20;
    id v22 = v20;
    uint64_t v23 = sub_251037C80();
    os_log_type_t v24 = sub_2510393B0();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v37 = (void *)swift_slowAlloc();
      v42[0] = v37;
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v26 = sub_251039940();
      uint64_t v40 = sub_250F32744(v26, v27, (uint64_t *)v42);
      os_log_t v35 = v23;
      sub_2510394A0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2114;
      id v28 = v20;
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v40 = v29;
      sub_2510394A0();
      uint64_t v30 = v36;
      void *v36 = v29;

      os_log_t v31 = v35;
      _os_log_impl(&dword_250F1E000, v35, v24, "[%{public}s] Failed to fetch initial status: %{public}@", (uint8_t *)v25, 0x16u);
      sub_250F4084C();
      swift_arrayDestroy();
      MEMORY[0x253391D80](v30, -1, -1);
      int v32 = v37;
      swift_arrayDestroy();
      MEMORY[0x253391D80](v32, -1, -1);
      MEMORY[0x253391D80](v25, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
  }
  return v14;
}

uint64_t sub_250F3FE7C(void *a1, uint64_t a2)
{
  v40[1] = swift_getObjectType();
  uint64_t v4 = sub_251037C90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_251037C10();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_251038E10();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v13 = (void *)((char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_250F408B4(0, (unint64_t *)&qword_26B2108D8);
  *id v13 = sub_251039430();
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x263F8F0E0], v10);
  char v14 = sub_251038E20();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    uint64_t v44 = v5;
    uint64_t v45 = v4;
    id v41 = a1;
    sub_251037C20();
    id v16 = (void *)sub_251037C30();
    unsigned __int8 v17 = objc_msgSend(v16, sel_isRequirementSatisfiedWithIdentifier_, *MEMORY[0x263F096B0]);

    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    v40[-2] = a2;
    LOBYTE(v40[-1]) = v17 ^ 1;
    void v40[2] = a2 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider___observationRegistrar;
    uint64_t v49 = a2;
    sub_250F4056C();
    uint64_t v19 = MEMORY[0x263F8EE60] + 8;
    sub_251037520();
    swift_release();
    uint64_t v20 = (void *)sub_251037C30();
    unsigned __int8 v21 = objc_msgSend(v20, sel_areAllRequirementsSatisfied);

    uint64_t v22 = swift_getKeyPath();
    MEMORY[0x270FA5388](v22);
    v40[-2] = a2;
    LOBYTE(v40[-1]) = v21;
    uint64_t v49 = a2;
    v40[3] = v19;
    sub_251037520();
    swift_release();
    uint64_t v23 = (void *)sub_251037C30();
    unsigned __int8 v24 = objc_msgSend(v23, sel_areAllRequirementsSatisfied);

    uint64_t v25 = swift_getKeyPath();
    MEMORY[0x270FA5388](v25);
    v40[-2] = a2;
    LOBYTE(v40[-1]) = v24;
    uint64_t v49 = a2;
    sub_251037520();
    swift_release();
    uint64_t v26 = (void *)sub_251037C30();
    unsigned __int8 v27 = objc_msgSend(v26, sel_areAllRequirementsSatisfied);

    uint64_t v28 = swift_getKeyPath();
    MEMORY[0x270FA5388](v28);
    v40[-2] = a2;
    LOBYTE(v40[-1]) = v27;
    uint64_t v49 = a2;
    sub_251037520();
    swift_release();
    sub_251037C70();
    id v29 = v41;
    uint64_t v30 = sub_251037C80();
    os_log_type_t v31 = sub_2510393D0();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v49 = v33;
      *(_DWORD *)uint64_t v32 = 136446466;
      uint64_t v34 = sub_251039940();
      uint64_t v48 = sub_250F32744(v34, v35, &v49);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      id v36 = objc_msgSend(v29, sel_debugDescription);
      uint64_t v37 = sub_2510391C0();
      unint64_t v39 = v38;

      uint64_t v48 = sub_250F32744(v37, v39, &v49);
      sub_2510394A0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v30, v31, "[%{public}s] Did update feature status: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v33, -1, -1);
      MEMORY[0x253391D80](v32, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v45);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v43);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_250F4056C()
{
  unint64_t result = qword_269B13098;
  if (!qword_269B13098)
  {
    type metadata accessor for SettingsModelProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13098);
  }
  return result;
}

uint64_t type metadata accessor for SettingsModelProvider()
{
  uint64_t result = qword_269B13138;
  if (!qword_269B13138) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F4062C@<X0>(unsigned char *a1@<X8>)
{
  return sub_250F3F790(*(void *)(v1 + 32), a1);
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_250F4067C()
{
  return sub_251037BB0();
}

uint64_t sub_250F406B0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_250F406E0()
{
  return sub_251037BB0();
}

uint64_t sub_250F40714()
{
  return type metadata accessor for SettingsModelProvider();
}

uint64_t sub_250F4071C()
{
  uint64_t result = sub_251037570();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SettingsModelProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SettingsModelProvider);
}

void sub_250F407EC()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled) = *(unsigned char *)(v0 + 24);
}

void sub_250F40804()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible) = *(unsigned char *)(v0 + 24);
}

void sub_250F4081C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated) = *(unsigned char *)(v0 + 24);
}

void sub_250F40834()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible) = *(unsigned char *)(v0 + 24);
}

void sub_250F4084C()
{
  if (!qword_26B210170)
  {
    sub_250F408B4(255, &qword_26B210168);
    unint64_t v0 = sub_251039490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210170);
    }
  }
}

uint64_t sub_250F408B4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_250F408F0()
{
}

void sub_250F40908()
{
}

void sub_250F40920()
{
}

void sub_250F40938()
{
}

void sub_250F40950(double a1, double a2, double a3, double a4)
{
  if (a1 >= a3)
  {
    swift_retain();
    uint64_t v13 = sub_251038CC0();
    uint64_t v15 = v18;
    uint64_t v9 = sub_250FA108C(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v17 = v9[2];
    unint64_t v16 = v9[3];
  }
  else
  {
    swift_retain();
    uint64_t v6 = sub_251038CC0();
    uint64_t v8 = v7;
    uint64_t v9 = sub_250FA108C(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v11 = v9[2];
    unint64_t v10 = v9[3];
    if (v11 >= v10 >> 1) {
      uint64_t v9 = sub_250FA108C((void *)(v10 > 1), v11 + 1, 1, v9);
    }
    v9[2] = v11 + 1;
    uint64_t v12 = &v9[2 * v11];
    v12[4] = v6;
    v12[5] = v8;
    swift_retain();
    uint64_t v13 = sub_251038CC0();
    uint64_t v15 = v14;
    unint64_t v17 = v9[2];
    unint64_t v16 = v9[3];
  }
  if (v17 >= v16 >> 1) {
    uint64_t v9 = sub_250FA108C((void *)(v16 > 1), v17 + 1, 1, v9);
  }
  v9[2] = v17 + 1;
  uint64_t v19 = &v9[2 * v17];
  v19[4] = v13;
  v19[5] = v15;
  if (a4 < a2)
  {
    swift_retain();
    uint64_t v20 = sub_251038CC0();
    uint64_t v22 = v21;
    unint64_t v24 = v9[2];
    unint64_t v23 = v9[3];
    if (v24 >= v23 >> 1) {
      uint64_t v9 = sub_250FA108C((void *)(v23 > 1), v24 + 1, 1, v9);
    }
    v9[2] = v24 + 1;
    uint64_t v25 = &v9[2 * v24];
    v25[4] = v20;
    v25[5] = v22;
    swift_retain();
    uint64_t v26 = sub_251038CC0();
    uint64_t v28 = v27;
    unint64_t v30 = v9[2];
    unint64_t v29 = v9[3];
    if (v30 >= v29 >> 1) {
      uint64_t v9 = sub_250FA108C((void *)(v29 > 1), v30 + 1, 1, v9);
    }
    v9[2] = v30 + 1;
    os_log_type_t v31 = &v9[2 * v30];
    v31[4] = v26;
    v31[5] = v28;
  }
  JUMPOUT(0x253390A10);
}

uint64_t sub_250F40BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a36)
  {
    sub_250F2A494(a1);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for OvernightMetricsXAxisSpaceReserver(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v2 = *(_OWORD *)(a1 + 208);
  return sub_250F40D40(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(void *)(a1 + 152),
           *(void *)(a1 + 160),
           *(void *)(a1 + 168),
           *(void *)(a1 + 176),
           *(void *)(a1 + 184),
           *(void *)(a1 + 192),
           *(void *)(a1 + 200),
           v2,
           *((uint64_t *)&v2 + 1),
           *(void *)(a1 + 224),
           *(void *)(a1 + 232),
           v3,
           *((uint64_t *)&v3 + 1),
           v4,
           *((uint64_t *)&v4 + 1),
           *(void *)(a1 + 272),
           *(unsigned char *)(a1 + 280));
}

uint64_t sub_250F40D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a36)
  {
    sub_250F2E128(a1);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsXAxisSpaceReserver(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  uint64_t v30 = *(void *)(a2 + 208);
  uint64_t v31 = *(void *)(a2 + 216);
  uint64_t v32 = *(void *)(a2 + 224);
  uint64_t v33 = *(void *)(a2 + 232);
  uint64_t v34 = *(void *)(a2 + 240);
  uint64_t v35 = *(void *)(a2 + 248);
  uint64_t v36 = *(void *)(a2 + 256);
  uint64_t v37 = *(void *)(a2 + 264);
  uint64_t v38 = *(void *)(a2 + 272);
  char v39 = *(unsigned char *)(a2 + 280);
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 48);
  sub_250F40BE0(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = v28;
  *(void *)(a1 + 200) = v29;
  *(void *)(a1 + 208) = v30;
  *(void *)(a1 + 216) = v31;
  *(void *)(a1 + 224) = v32;
  *(void *)(a1 + 232) = v33;
  *(void *)(a1 + 240) = v34;
  *(void *)(a1 + 248) = v35;
  *(void *)(a1 + 256) = v36;
  *(void *)(a1 + 264) = v37;
  *(void *)(a1 + 272) = v38;
  *(unsigned char *)(a1 + 280) = v39;
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsXAxisSpaceReserver(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *(void *)a2;
  uint64_t v62 = *(void *)(a2 + 8);
  uint64_t v59 = *(void *)(a2 + 24);
  uint64_t v60 = *(void *)(a2 + 16);
  uint64_t v57 = *(void *)(a2 + 40);
  uint64_t v58 = *(void *)(a2 + 32);
  uint64_t v55 = *(void *)(a2 + 56);
  uint64_t v56 = *(void *)(a2 + 48);
  uint64_t v36 = *(void *)(a2 + 72);
  uint64_t v37 = *(void *)(a2 + 80);
  uint64_t v38 = *(void *)(a2 + 88);
  uint64_t v39 = *(void *)(a2 + 96);
  uint64_t v40 = *(void *)(a2 + 104);
  uint64_t v41 = *(void *)(a2 + 112);
  uint64_t v42 = *(void *)(a2 + 120);
  uint64_t v43 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 184);
  uint64_t v9 = *(void *)(a2 + 192);
  uint64_t v10 = *(void *)(a2 + 200);
  uint64_t v44 = *(void *)(a2 + 136);
  uint64_t v45 = *(void *)(a2 + 208);
  uint64_t v46 = *(void *)(a2 + 216);
  uint64_t v47 = *(void *)(a2 + 224);
  uint64_t v48 = *(void *)(a2 + 232);
  uint64_t v49 = *(void *)(a2 + 240);
  uint64_t v50 = *(void *)(a2 + 248);
  uint64_t v51 = *(void *)(a2 + 256);
  uint64_t v52 = *(void *)(a2 + 264);
  uint64_t v53 = *(void *)(a2 + 272);
  char v54 = *(unsigned char *)(a2 + 280);
  uint64_t v11 = *(void *)(a2 + 64);
  sub_250F40BE0(*(void *)a2, v62, v60, v59, v58, v57, v56, v55, v11, v36, v37, v38, v39, v40, v41, v42, v43, v44, v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v10,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v61;
  *(void *)(a1 + 8) = v62;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v60;
  *(void *)(a1 + 24) = v59;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v58;
  *(void *)(a1 + 40) = v57;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v56;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 56) = v55;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v36;
  *(void *)(a1 + 80) = v37;
  *(void *)(a1 + 88) = v38;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v39;
  *(void *)(a1 + 104) = v40;
  *(void *)(a1 + 112) = v41;
  *(void *)(a1 + 120) = v42;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v43;
  *(void *)(a1 + 136) = v44;
  *(void *)(a1 + 144) = v3;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 152) = v4;
  *(void *)(a1 + 160) = v5;
  *(void *)(a1 + 168) = v6;
  *(void *)(a1 + 176) = v7;
  long long v28 = *(_OWORD *)(a1 + 192);
  long long v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 200) = v10;
  *(void *)(a1 + 208) = v45;
  *(void *)(a1 + 216) = v46;
  long long v30 = *(_OWORD *)(a1 + 224);
  long long v31 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 224) = v47;
  *(void *)(a1 + 232) = v48;
  *(void *)(a1 + 240) = v49;
  *(void *)(a1 + 248) = v50;
  long long v32 = *(_OWORD *)(a1 + 256);
  *(void *)(a1 + 256) = v51;
  *(void *)(a1 + 264) = v52;
  uint64_t v33 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = v53;
  char v34 = *(unsigned char *)(a1 + 280);
  *(unsigned char *)(a1 + 280) = v54;
  sub_250F40D40(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    v34);
  return a1;
}

void *__swift_memcpy281_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x119uLL);
}

uint64_t assignWithTake for OvernightMetricsXAxisSpaceReserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 272);
  char v5 = *(unsigned char *)(a2 + 280);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 96);
  long long v17 = *(_OWORD *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 128);
  long long v19 = *(_OWORD *)(a1 + 144);
  long long v20 = *(_OWORD *)(a1 + 160);
  long long v21 = *(_OWORD *)(a1 + 176);
  long long v22 = *(_OWORD *)(a1 + 192);
  long long v23 = *(_OWORD *)(a1 + 208);
  long long v24 = *(_OWORD *)(a1 + 224);
  long long v25 = *(_OWORD *)(a1 + 240);
  long long v26 = *(_OWORD *)(a1 + 256);
  uint64_t v27 = *(void *)(a1 + 272);
  char v28 = *(unsigned char *)(a1 + 280);
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v29;
  long long v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v30;
  long long v31 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v31;
  long long v32 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v32;
  long long v33 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v33;
  long long v34 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v34;
  long long v35 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v35;
  long long v36 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v36;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = v4;
  *(unsigned char *)(a1 + 280) = v5;
  sub_250F40D40(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsXAxisSpaceReserver(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 281)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 280);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsXAxisSpaceReserver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 280) = 0;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 281) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 281) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 280) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsXAxisSpaceReserver()
{
  return &type metadata for OvernightMetricsXAxisSpaceReserver;
}

uint64_t sub_250F414B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

void sub_250F414BC()
{
  type metadata accessor for OvernightMetricsAxisConfiguration(319);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      sub_250F49D90(319, (unint64_t *)&qword_269B13230, MEMORY[0x263F07920], MEMORY[0x263F185C8]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_250F41604(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = sub_251037400();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = (v9 & ~(unint64_t)v8) + v7;
  uint64_t v89 = *(void *)(a3 + 16);
  uint64_t v87 = *(void *)(v89 - 8);
  int v11 = *(_DWORD *)(v87 + 80);
  uint64_t v12 = v11;
  uint64_t v83 = v11 + 72;
  uint64_t v85 = *(void *)(v87 + 64) + 7;
  uint64_t v13 = *(void *)(sub_2510374F0() - 8);
  int v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14 & 0xF8 | 7;
  uint64_t v16 = (v14 & 0xF8) + 288;
  uint64_t v17 = 8;
  if (*(void *)(v13 + 64) > 8uLL) {
    uint64_t v17 = *(void *)(v13 + 64);
  }
  unint64_t v18 = v11 | v8 | (unint64_t)v15;
  int v19 = (v11 | v8 | v14) & 0x100000;
  if (v18 != 7
    || v19 != 0
    || v17
     + ((v16
       + ((v85
         + ((v11 + 72 + ((v10 + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v11)) & 0xFFFFFFFFFFFFFFF8)) & ~v15)
     + 1 > 0x18)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    long long v23 = (uint64_t *)(v22 + ((v18 + 16) & ~v18));
LABEL_38:
    swift_retain();
    return v23;
  }
  uint64_t v81 = v16;
  uint64_t v82 = v17;
  uint64_t v53 = v13;
  unint64_t v24 = ~(unint64_t)v8;
  unint64_t v25 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = v25 + 8;
  unint64_t v27 = v25 + 9;
  unsigned int v28 = *((unsigned __int8 *)a2 + v25 + 8);
  if (v28 >= 2 && (v26 & 0xFFFFFFF8) != 0) {
    unsigned int v28 = *(_DWORD *)a2 + 2;
  }
  uint64_t v78 = ~v12;
  uint64_t v80 = ~v15;
  BOOL v77 = v28 == 1;
  long long v30 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
  v30(a1, a2, v5);
  v30((uint64_t *)(((unint64_t)a1 + v9) & v24), (uint64_t *)(((unint64_t)a2 + v9) & v24), v5);
  *(void *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  *((unsigned char *)a1 + v26) = v77;
  unint64_t v31 = ((unint64_t)a1 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = ((unint64_t)a2 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v32 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
    long long v33 = *(_OWORD *)(v32 + 16);
    long long v34 = *(_OWORD *)(v32 + 32);
    long long v35 = *(_OWORD *)(v32 + 48);
    *(void *)(v31 + 64) = *(void *)(v32 + 64);
    *(_OWORD *)(v31 + 32) = v34;
    *(_OWORD *)(v31 + 48) = v35;
    *(_OWORD *)(v31 + 16) = v33;
  }
  else
  {
    *(void *)unint64_t v31 = *(void *)v32;
    *(void *)(v31 + 8) = *(void *)(v32 + 8);
    *(void *)(v31 + 16) = *(void *)(v32 + 16);
    *(void *)(v31 + 24) = *(void *)(v32 + 24);
    *(void *)(v31 + 32) = *(void *)(v32 + 32);
    *(void *)(v31 + 40) = *(void *)(v32 + 40);
    *(void *)(v31 + 48) = *(void *)(v32 + 48);
    *(void *)(v31 + 56) = *(void *)(v32 + 56);
    *(void *)(v31 + 64) = *(void *)(v32 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v87 + 16))((v83 + v31) & v78, (v83 + v32) & v78, v89);
  unint64_t v36 = (v85 + ((v83 + v32) & v78)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v85 + ((v83 + v31) & v78)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v90 = *(void *)(v36 + 64);
  uint64_t v54 = *(void *)(v36 + 72);
  uint64_t v55 = *(void *)(v36 + 80);
  uint64_t v56 = *(void *)(v36 + 88);
  uint64_t v57 = *(void *)(v36 + 96);
  uint64_t v58 = *(void *)(v36 + 104);
  uint64_t v59 = *(void *)(v36 + 112);
  uint64_t v60 = *(void *)(v36 + 120);
  uint64_t v61 = *(void *)(v36 + 128);
  uint64_t v62 = *(void *)(v36 + 136);
  uint64_t v63 = *(void *)(v36 + 144);
  uint64_t v64 = *(void *)(v36 + 152);
  uint64_t v65 = *(void *)(v36 + 160);
  uint64_t v66 = *(void *)(v36 + 168);
  uint64_t v67 = *(void *)(v36 + 176);
  uint64_t v68 = *(void *)(v36 + 184);
  uint64_t v69 = *(void *)(v36 + 192);
  uint64_t v70 = *(void *)(v36 + 200);
  uint64_t v71 = *(void *)(v36 + 208);
  uint64_t v72 = *(void *)(v36 + 216);
  uint64_t v73 = *(void *)(v36 + 224);
  uint64_t v74 = *(void *)(v36 + 232);
  uint64_t v75 = *(void *)(v36 + 240);
  uint64_t v76 = *(void *)(v36 + 248);
  uint64_t v79 = *(void *)(v36 + 256);
  uint64_t v84 = *(void *)(v36 + 264);
  uint64_t v86 = *(void *)(v36 + 272);
  char v88 = *(unsigned char *)(v36 + 280);
  uint64_t v39 = *(void *)(v36 + 8);
  uint64_t v38 = *(void *)v36;
  uint64_t v41 = *(void *)(v36 + 24);
  uint64_t v40 = *(void *)(v36 + 16);
  uint64_t v43 = *(void *)(v36 + 40);
  uint64_t v42 = *(void *)(v36 + 32);
  uint64_t v44 = *(void *)(v36 + 56);
  uint64_t v45 = *(void *)(v36 + 48);
  sub_250F40BE0(*(void *)v36, v39, v40, v41, v42, v43, v45, v44, v90, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,
    v64,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v79,
    v84,
    v86,
    v88);
  *(void *)unint64_t v37 = v38;
  *(void *)(v37 + 8) = v39;
  *(void *)(v37 + 16) = v40;
  *(void *)(v37 + 24) = v41;
  *(void *)(v37 + 32) = v42;
  *(void *)(v37 + 40) = v43;
  *(void *)(v37 + 48) = v45;
  *(void *)(v37 + 56) = v44;
  *(void *)(v37 + 64) = v90;
  *(void *)(v37 + 72) = v54;
  *(void *)(v37 + 80) = v55;
  *(void *)(v37 + 88) = v56;
  *(void *)(v37 + 96) = v57;
  *(void *)(v37 + 104) = v58;
  *(void *)(v37 + 112) = v59;
  *(void *)(v37 + 120) = v60;
  *(void *)(v37 + 128) = v61;
  *(void *)(v37 + 136) = v62;
  *(void *)(v37 + 144) = v63;
  *(void *)(v37 + 152) = v64;
  *(void *)(v37 + 160) = v65;
  *(void *)(v37 + 168) = v66;
  *(void *)(v37 + 176) = v67;
  *(void *)(v37 + 184) = v68;
  *(void *)(v37 + 192) = v69;
  *(void *)(v37 + 200) = v70;
  *(void *)(v37 + 208) = v71;
  *(void *)(v37 + 216) = v72;
  *(void *)(v37 + 224) = v73;
  *(void *)(v37 + 232) = v74;
  *(void *)(v37 + 240) = v75;
  *(void *)(v37 + 248) = v76;
  *(void *)(v37 + 256) = v79;
  *(void *)(v37 + 264) = v84;
  *(void *)(v37 + 272) = v86;
  uint64_t v46 = (void *)((v81 + v37) & v80);
  uint64_t v47 = (unsigned __int8 *)((v81 + v36) & v80);
  *(unsigned char *)(v37 + 280) = v88;
  unsigned int v48 = v47[v82];
  unsigned int v49 = v48 - 2;
  if (v48 >= 2)
  {
    if (v82 <= 3) {
      uint64_t v50 = v82;
    }
    else {
      uint64_t v50 = 4;
    }
    long long v23 = a1;
    switch(v50)
    {
      case 1:
        int v51 = *v47;
        if (v82 < 4) {
          goto LABEL_32;
        }
        goto LABEL_36;
      case 2:
        int v51 = *(unsigned __int16 *)v47;
        if (v82 >= 4) {
          goto LABEL_36;
        }
        goto LABEL_32;
      case 3:
        int v51 = *(unsigned __int16 *)((v81 + v36) & v80) | (*(unsigned __int8 *)(((v81 + v36) & v80) + 2) << 16);
        if (v82 < 4) {
          goto LABEL_32;
        }
        goto LABEL_36;
      case 4:
        int v51 = *(_DWORD *)v47;
        if (v82 >= 4)
        {
LABEL_36:
          if (v51 == -1) {
            goto LABEL_34;
          }
          goto LABEL_37;
        }
LABEL_32:
        unsigned int v48 = (v51 | (v49 << (8 * v82))) + 2;
LABEL_33:
        if (v48 != 1) {
          goto LABEL_37;
        }
        break;
      default:
        goto LABEL_33;
    }
    goto LABEL_34;
  }
  long long v23 = a1;
  if (v48 != 1)
  {
LABEL_37:
    *uint64_t v46 = *(void *)v47;
    *((unsigned char *)v46 + v82) = 0;
    goto LABEL_38;
  }
LABEL_34:
  (*(void (**)(void *))(v53 + 16))(v46);
  *((unsigned char *)v46 + v82) = 1;
  return v23;
}

uint64_t sub_250F41C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037400();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v7 + v8;
  unint64_t v10 = (((v7 + v8) & ~v8) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6(a1, v4);
  v6((v9 + a1) & ~v8, v4);
  swift_bridgeObjectRelease();
  int v11 = (void *)((a1 + v10 + 16) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v13 = v12 + 8;
  unint64_t v14 = ((unint64_t)v11 + *(unsigned __int8 *)(v12 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v14);
  unint64_t v15 = (*(void *)(v13 + 56) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v28 = *(_OWORD *)(v15 + 240);
  long long v29 = *(_OWORD *)(v15 + 256);
  long long v27 = *(_OWORD *)(v15 + 208);
  sub_250F40D40(*(void *)v15, *(void *)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 24), *(void *)(v15 + 32), *(void *)(v15 + 40), *(void *)(v15 + 48), *(void *)(v15 + 56), *(void *)(v15 + 64), *(void *)(v15 + 72), *(void *)(v15 + 80), *(void *)(v15 + 88), *(void *)(v15 + 96), *(void *)(v15 + 104), *(void *)(v15 + 112), *(void *)(v15 + 120), *(void *)(v15 + 128), *(void *)(v15 + 136), *(void *)(v15 + 144),
    *(void *)(v15 + 152),
    *(void *)(v15 + 160),
    *(void *)(v15 + 168),
    *(void *)(v15 + 176),
    *(void *)(v15 + 184),
    *(void *)(v15 + 192),
    *(void *)(v15 + 200),
    v27,
    *((uint64_t *)&v27 + 1),
    *(void *)(v15 + 224),
    *(void *)(v15 + 232),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    *(void *)(v15 + 272),
    *(unsigned char *)(v15 + 280));
  uint64_t v16 = *(void *)(sub_2510374F0() - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  unint64_t v18 = (unsigned __int8 *)((v15 + v17 + 281) & ~v17);
  unint64_t v19 = *(void *)(v16 + 64);
  if (v19 <= 8) {
    unint64_t v19 = 8;
  }
  unsigned int v20 = v18[v19];
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v18;
        goto LABEL_14;
      case 2:
        int v23 = *(unsigned __int16 *)v18;
        goto LABEL_14;
      case 3:
        int v23 = *(unsigned __int16 *)v18 | (v18[2] << 16);
        goto LABEL_14;
      case 4:
        int v23 = *(_DWORD *)v18;
LABEL_14:
        int v24 = (v23 | (v21 << (8 * v19))) + 2;
        unsigned int v20 = v23 + 2;
        if (v19 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 1)
  {
    unint64_t v25 = *(uint64_t (**)(void))(v16 + 8);
    return v25();
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_250F41F94(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = sub_251037400();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = v6 + v7;
  uint64_t v10 = ((v6 + v7) & ~v7) + v6;
  unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v12 = *((unsigned __int8 *)a2 + v11 + 8);
  if (v12 >= 2 && ((v11 + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v12 = *a2 + 2;
  }
  BOOL v77 = v12 == 1;
  unint64_t v14 = *(void (**)(uint64_t, _DWORD *, uint64_t))(v5 + 16);
  v14(a1, a2, v4);
  v14((v9 + a1) & v8, (_DWORD *)(((unint64_t)a2 + v9) & v8), v4);
  *(void *)((a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  *(unsigned char *)(a1 + v11 + 8) = v77;
  unint64_t v15 = v11 + 16;
  unint64_t v16 = (v11 + 16 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v20 = *(_OWORD *)(v17 + 48);
    *(void *)(v16 + 64) = *(void *)(v17 + 64);
    *(_OWORD *)(v16 + 32) = v19;
    *(_OWORD *)(v16 + 48) = v20;
    *(_OWORD *)(v16 + 16) = v18;
  }
  else
  {
    *(void *)unint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = *(void *)(v17 + 8);
    *(void *)(v16 + 16) = *(void *)(v17 + 16);
    *(void *)(v16 + 24) = *(void *)(v17 + 24);
    *(void *)(v16 + 32) = *(void *)(v17 + 32);
    *(void *)(v16 + 40) = *(void *)(v17 + 40);
    *(void *)(v16 + 48) = *(void *)(v17 + 48);
    *(void *)(v16 + 56) = *(void *)(v17 + 56);
    *(void *)(v16 + 64) = *(void *)(v17 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = (v16 + v23 + 72) & ~v23;
  uint64_t v25 = (v17 + v23 + 72) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v24, v25);
  uint64_t v26 = *(void *)(v22 + 48) + 7;
  unint64_t v27 = (v26 + v24) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v26 + v25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v80 = *(void *)(v28 + 64);
  uint64_t v51 = *(void *)(v28 + 72);
  uint64_t v52 = *(void *)(v28 + 80);
  uint64_t v53 = *(void *)(v28 + 88);
  uint64_t v54 = *(void *)(v28 + 96);
  uint64_t v55 = *(void *)(v28 + 104);
  uint64_t v56 = *(void *)(v28 + 112);
  uint64_t v57 = *(void *)(v28 + 120);
  uint64_t v58 = *(void *)(v28 + 128);
  uint64_t v59 = *(void *)(v28 + 136);
  uint64_t v60 = *(void *)(v28 + 144);
  uint64_t v61 = *(void *)(v28 + 152);
  uint64_t v62 = *(void *)(v28 + 160);
  uint64_t v63 = *(void *)(v28 + 168);
  uint64_t v64 = *(void *)(v28 + 176);
  uint64_t v65 = *(void *)(v28 + 184);
  uint64_t v66 = *(void *)(v28 + 192);
  uint64_t v67 = *(void *)(v28 + 200);
  uint64_t v68 = *(void *)(v28 + 208);
  uint64_t v69 = *(void *)(v28 + 216);
  uint64_t v70 = *(void *)(v28 + 224);
  uint64_t v71 = *(void *)(v28 + 232);
  uint64_t v72 = *(void *)(v28 + 240);
  uint64_t v73 = *(void *)(v28 + 248);
  uint64_t v74 = *(void *)(v28 + 256);
  uint64_t v75 = *(void *)(v28 + 264);
  uint64_t v76 = *(void *)(v28 + 272);
  char v78 = *(unsigned char *)(v28 + 280);
  uint64_t v30 = *(void *)(v28 + 8);
  uint64_t v29 = *(void *)v28;
  uint64_t v32 = *(void *)(v28 + 24);
  uint64_t v31 = *(void *)(v28 + 16);
  uint64_t v34 = *(void *)(v28 + 40);
  uint64_t v33 = *(void *)(v28 + 32);
  uint64_t v35 = *(void *)(v28 + 56);
  uint64_t v36 = *(void *)(v28 + 48);
  sub_250F40BE0(*(void *)v28, v30, v31, v32, v33, v34, v36, v35, v80, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60,
    v61,
    v62,
    v63,
    v64,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v78);
  *(void *)unint64_t v27 = v29;
  *(void *)(v27 + 8) = v30;
  *(void *)(v27 + 16) = v31;
  *(void *)(v27 + 24) = v32;
  *(void *)(v27 + 32) = v33;
  *(void *)(v27 + 40) = v34;
  *(void *)(v27 + 48) = v36;
  *(void *)(v27 + 56) = v35;
  *(void *)(v27 + 64) = v80;
  *(void *)(v27 + 72) = v51;
  *(void *)(v27 + 80) = v52;
  *(void *)(v27 + 88) = v53;
  *(void *)(v27 + 96) = v54;
  *(void *)(v27 + 104) = v55;
  *(void *)(v27 + 112) = v56;
  *(void *)(v27 + 120) = v57;
  *(void *)(v27 + 128) = v58;
  *(void *)(v27 + 136) = v59;
  *(void *)(v27 + 144) = v60;
  *(void *)(v27 + 152) = v61;
  *(void *)(v27 + 160) = v62;
  *(void *)(v27 + 168) = v63;
  *(void *)(v27 + 176) = v64;
  *(void *)(v27 + 184) = v65;
  *(void *)(v27 + 192) = v66;
  *(void *)(v27 + 200) = v67;
  *(void *)(v27 + 208) = v68;
  *(void *)(v27 + 216) = v69;
  *(void *)(v27 + 224) = v70;
  *(void *)(v27 + 232) = v71;
  *(void *)(v27 + 240) = v72;
  *(void *)(v27 + 248) = v73;
  *(void *)(v27 + 256) = v74;
  *(void *)(v27 + 264) = v75;
  *(void *)(v27 + 272) = v76;
  *(unsigned char *)(v27 + 280) = v78;
  uint64_t v37 = *(void *)(sub_2510374F0() - 8);
  uint64_t v38 = *(_DWORD *)(v37 + 80) & 0xF8;
  uint64_t v39 = v38 + 288;
  unint64_t v40 = v38 + 288 + v27;
  unint64_t v41 = ~v38 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = (void *)(v40 & v41);
  uint64_t v43 = (unsigned __int8 *)((v39 + v28) & v41);
  if (*(void *)(v37 + 64) <= 8uLL) {
    uint64_t v44 = 8;
  }
  else {
    uint64_t v44 = *(void *)(v37 + 64);
  }
  unsigned int v45 = v43[v44];
  unsigned int v46 = v45 - 2;
  if (v45 >= 2)
  {
    if (v44 <= 3) {
      uint64_t v47 = v44;
    }
    else {
      uint64_t v47 = 4;
    }
    switch(v47)
    {
      case 1:
        int v48 = *v43;
        if (v44 >= 4) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v48 = *(unsigned __int16 *)v43;
        if (v44 >= 4) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        int v48 = *(unsigned __int16 *)((v39 + v28) & v41) | (*(unsigned __int8 *)(((v39 + v28) & v41) + 2) << 16);
        if (v44 < 4) {
          goto LABEL_22;
        }
        goto LABEL_26;
      case 4:
        int v48 = *(_DWORD *)v43;
        if (v44 < 4)
        {
LABEL_22:
          unsigned int v45 = (v48 | (v46 << (8 * v44))) + 2;
          break;
        }
LABEL_26:
        if (v48 != -1) {
          goto LABEL_27;
        }
        goto LABEL_24;
      default:
        break;
    }
  }
  if (v45 == 1)
  {
LABEL_24:
    (*(void (**)(void *))(v37 + 16))(v42);
    char v49 = 1;
  }
  else
  {
LABEL_27:
    *uint64_t v42 = *(void *)v43;
    swift_retain();
    char v49 = 0;
  }
  *((unsigned char *)v42 + v44) = v49;
  return a1;
}

_DWORD *sub_250F4255C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 == a2)
  {
    unint64_t v14 = a1;
  }
  else
  {
    uint64_t v5 = sub_251037400();
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v111 = ~v9;
    uint64_t v10 = v8 + v9;
    uint64_t v113 = ((v8 + v9) & ~v9) + v8;
    unint64_t v11 = ((v113 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v12 = *(void (**)(_DWORD *, uint64_t))(v6 + 8);
    v12(a1, v5);
    unint64_t v13 = ((unint64_t)a1 + v10) & ~v9;
    v12((_DWORD *)v13, v5);
    unint64_t v14 = a1;
    swift_bridgeObjectRelease();
    unsigned int v15 = *((unsigned __int8 *)a2 + v11);
    if ((v11 & 0xFFFFFFF8) != 0 && v15 >= 2) {
      unsigned int v15 = *a2 + 2;
    }
    unint64_t v17 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v7 + 16);
    v17(a1, a2, v5);
    v17((_DWORD *)v13, (_DWORD *)(((unint64_t)a2 + v10) & v111), v5);
    *(void *)(((unint64_t)a1 + v113 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v113 + 7) & 0xFFFFFFFFFFFFFFF8);
    *((unsigned char *)a1 + v11) = v15 == 1;
    swift_bridgeObjectRetain();
    uint64_t v3 = a3;
  }
  uint64_t v18 = *(void *)(sub_251037400() - 8);
  unint64_t v19 = ((*(void *)(v18 + 64)
        + ((*(void *)(v18 + 64) + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  long long v20 = (void *)(((unint64_t)v14 + v19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (unint64_t *)(((unint64_t)a2 + v19) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      *long long v20 = v22;
      v20[1] = v21[1];
      v20[2] = v21[2];
      v20[3] = v21[3];
      v20[4] = v21[4];
      v20[5] = v21[5];
      v20[6] = v21[6];
      v20[7] = v21[7];
      v20[8] = v21[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_20;
    }
  }
  else
  {
    if (v22 >= 0xFFFFFFFF)
    {
      *long long v20 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[1] = v21[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[2] = v21[2];
      v20[3] = v21[3];
      v20[4] = v21[4];
      v20[5] = v21[5];
      v20[6] = v21[6];
      v20[7] = v21[7];
      v20[8] = v21[8];
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)long long v20 = *(_OWORD *)v21;
  long long v23 = *((_OWORD *)v21 + 1);
  long long v24 = *((_OWORD *)v21 + 2);
  long long v25 = *((_OWORD *)v21 + 3);
  v20[8] = v21[8];
  *((_OWORD *)v20 + 2) = v24;
  *((_OWORD *)v20 + 3) = v25;
  *((_OWORD *)v20 + 1) = v23;
LABEL_20:
  uint64_t v26 = *(void *)(*(void *)(v3 + 16) - 8);
  uint64_t v27 = v26 + 24;
  uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = ((unint64_t)v20 + v28 + 72) & ~v28;
  uint64_t v30 = ((unint64_t)v21 + v28 + 72) & ~v28;
  (*(void (**)(uint64_t, uint64_t))(v26 + 24))(v29, v30);
  uint64_t v31 = *(void *)(v27 + 40) + 7;
  unint64_t v32 = (v31 + v29) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v31 + v30) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v114 = *(void *)(v33 + 8);
  uint64_t v116 = *(void *)v33;
  uint64_t v110 = *(void *)(v33 + 24);
  uint64_t v112 = *(void *)(v33 + 16);
  uint64_t v108 = *(void *)(v33 + 40);
  uint64_t v109 = *(void *)(v33 + 32);
  uint64_t v106 = *(void *)(v33 + 56);
  uint64_t v107 = *(void *)(v33 + 48);
  uint64_t v105 = *(void *)(v33 + 64);
  uint64_t v86 = *(void *)(v33 + 72);
  uint64_t v87 = *(void *)(v33 + 80);
  uint64_t v88 = *(void *)(v33 + 88);
  uint64_t v89 = *(void *)(v33 + 96);
  uint64_t v90 = *(void *)(v33 + 104);
  uint64_t v91 = *(void *)(v33 + 112);
  uint64_t v92 = *(void *)(v33 + 120);
  uint64_t v93 = *(void *)(v33 + 128);
  uint64_t v34 = *(void *)(v33 + 144);
  uint64_t v35 = *(void *)(v33 + 152);
  uint64_t v36 = *(void *)(v33 + 160);
  uint64_t v37 = *(void *)(v33 + 168);
  uint64_t v38 = *(void *)(v33 + 176);
  uint64_t v39 = *(void *)(v33 + 184);
  uint64_t v40 = *(void *)(v33 + 192);
  uint64_t v41 = *(void *)(v33 + 200);
  uint64_t v94 = *(void *)(v33 + 136);
  uint64_t v95 = *(void *)(v33 + 208);
  uint64_t v96 = *(void *)(v33 + 216);
  uint64_t v97 = *(void *)(v33 + 224);
  uint64_t v98 = *(void *)(v33 + 232);
  uint64_t v99 = *(void *)(v33 + 240);
  uint64_t v100 = *(void *)(v33 + 248);
  uint64_t v101 = *(void *)(v33 + 256);
  uint64_t v102 = *(void *)(v33 + 264);
  uint64_t v103 = *(void *)(v33 + 272);
  char v104 = *(unsigned char *)(v33 + 280);
  sub_250F40BE0(*(void *)v33, v114, v112, v110, v109, v108, v107, v106, v105, v86, v87, v88, v89, v90, v91, v92, v93, v94, v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v95,
    v96,
    v97,
    v98,
    v99,
    v100,
    v101,
    v102,
    v103,
    v104);
  uint64_t v42 = *(void *)v32;
  uint64_t v43 = *(void *)(v32 + 8);
  *(void *)unint64_t v32 = v116;
  *(void *)(v32 + 8) = v114;
  uint64_t v44 = *(void *)(v32 + 16);
  uint64_t v45 = *(void *)(v32 + 24);
  *(void *)(v32 + 16) = v112;
  *(void *)(v32 + 24) = v110;
  uint64_t v46 = *(void *)(v32 + 32);
  uint64_t v47 = *(void *)(v32 + 40);
  *(void *)(v32 + 32) = v109;
  *(void *)(v32 + 40) = v108;
  uint64_t v48 = *(void *)(v32 + 48);
  uint64_t v49 = *(void *)(v32 + 56);
  *(void *)(v32 + 48) = v107;
  *(void *)(v32 + 56) = v106;
  long long v50 = *(_OWORD *)(v32 + 64);
  long long v51 = *(_OWORD *)(v32 + 80);
  *(void *)(v32 + 64) = v105;
  *(void *)(v32 + 72) = v86;
  *(void *)(v32 + 80) = v87;
  *(void *)(v32 + 88) = v88;
  long long v52 = *(_OWORD *)(v32 + 96);
  long long v53 = *(_OWORD *)(v32 + 112);
  *(void *)(v32 + 96) = v89;
  *(void *)(v32 + 104) = v90;
  *(void *)(v32 + 112) = v91;
  *(void *)(v32 + 120) = v92;
  long long v54 = *(_OWORD *)(v32 + 128);
  long long v55 = *(_OWORD *)(v32 + 144);
  *(void *)(v32 + 128) = v93;
  *(void *)(v32 + 136) = v94;
  *(void *)(v32 + 144) = v34;
  long long v56 = *(_OWORD *)(v32 + 160);
  long long v57 = *(_OWORD *)(v32 + 176);
  *(void *)(v32 + 152) = v35;
  *(void *)(v32 + 160) = v36;
  *(void *)(v32 + 168) = v37;
  *(void *)(v32 + 176) = v38;
  long long v58 = *(_OWORD *)(v32 + 192);
  long long v59 = *(_OWORD *)(v32 + 208);
  *(void *)(v32 + 184) = v39;
  *(void *)(v32 + 192) = v40;
  *(void *)(v32 + 200) = v41;
  *(void *)(v32 + 208) = v95;
  *(void *)(v32 + 216) = v96;
  long long v60 = *(_OWORD *)(v32 + 224);
  long long v61 = *(_OWORD *)(v32 + 240);
  *(void *)(v32 + 224) = v97;
  *(void *)(v32 + 232) = v98;
  *(void *)(v32 + 240) = v99;
  *(void *)(v32 + 248) = v100;
  long long v62 = *(_OWORD *)(v32 + 256);
  *(void *)(v32 + 256) = v101;
  *(void *)(v32 + 264) = v102;
  uint64_t v63 = *(void *)(v32 + 272);
  *(void *)(v32 + 272) = v103;
  char v64 = *(unsigned char *)(v32 + 280);
  *(unsigned char *)(v32 + 280) = v104;
  sub_250F40D40(v42, v43, v44, v45, v46, v47, v48, v49, v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v54, *((uint64_t *)&v54 + 1), v55,
    *((uint64_t *)&v55 + 1),
    v56,
    *((uint64_t *)&v56 + 1),
    v57,
    *((uint64_t *)&v57 + 1),
    v58,
    *((uint64_t *)&v58 + 1),
    v59,
    *((uint64_t *)&v59 + 1),
    v60,
    *((uint64_t *)&v60 + 1),
    v61,
    *((uint64_t *)&v61 + 1),
    v62,
    *((uint64_t *)&v62 + 1),
    v63,
    v64);
  uint64_t v65 = sub_2510374F0();
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v67 = *(_DWORD *)(v66 + 80) & 0xF8;
  uint64_t v68 = v67 + 288;
  unint64_t v69 = v67 + 288 + v32;
  unint64_t v70 = ~v67 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v71 = (unsigned __int8 *)(v69 & v70);
  uint64_t v72 = v68 + v33;
  uint64_t v73 = (unsigned __int8 *)(v72 & v70);
  if ((v69 & v70) != (v72 & v70))
  {
    uint64_t v74 = v65;
    uint64_t v75 = *(void *)(v65 - 8);
    if (*(void *)(v66 + 64) <= 8uLL) {
      uint64_t v76 = 8;
    }
    else {
      uint64_t v76 = *(void *)(v66 + 64);
    }
    unsigned int v77 = v71[v76];
    unsigned int v78 = v77 - 2;
    if (v77 >= 2)
    {
      if (v76 <= 3) {
        uint64_t v79 = v76;
      }
      else {
        uint64_t v79 = 4;
      }
      switch(v79)
      {
        case 1:
          int v80 = *v71;
          if (v76 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_34;
        case 2:
          int v80 = *(unsigned __int16 *)v71;
          if (v76 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_34;
        case 3:
          int v80 = *(unsigned __int16 *)v71 | (v71[2] << 16);
          if (v76 < 4) {
            goto LABEL_34;
          }
          goto LABEL_38;
        case 4:
          int v80 = *(_DWORD *)v71;
          if (v76 < 4)
          {
LABEL_34:
            unsigned int v77 = (v80 | (v78 << (8 * v76))) + 2;
            break;
          }
LABEL_38:
          if (v80 != -1) {
            goto LABEL_39;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v77 == 1) {
LABEL_36:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v75 + 8))(v71, v65);
    else {
LABEL_39:
    }
      swift_release();
    unsigned int v81 = v73[v76];
    unsigned int v82 = v81 - 2;
    if (v81 >= 2)
    {
      if (v76 <= 3) {
        uint64_t v83 = v76;
      }
      else {
        uint64_t v83 = 4;
      }
      switch(v83)
      {
        case 1:
          int v84 = *v73;
          if (v76 >= 4) {
            goto LABEL_54;
          }
          goto LABEL_50;
        case 2:
          int v84 = *(unsigned __int16 *)v73;
          if (v76 >= 4) {
            goto LABEL_54;
          }
          goto LABEL_50;
        case 3:
          int v84 = *(unsigned __int16 *)v73 | (v73[2] << 16);
          if (v76 < 4) {
            goto LABEL_50;
          }
          goto LABEL_54;
        case 4:
          int v84 = *(_DWORD *)v73;
          if (v76 < 4)
          {
LABEL_50:
            unsigned int v81 = (v84 | (v82 << (8 * v76))) + 2;
            break;
          }
LABEL_54:
          if (v84 != -1) {
            goto LABEL_55;
          }
          goto LABEL_52;
        default:
          break;
      }
    }
    if (v81 == 1)
    {
LABEL_52:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v75 + 16))(v71, v73, v74);
      v71[v76] = 1;
    }
    else
    {
LABEL_55:
      *(void *)uint64_t v71 = *(void *)v73;
      v71[v76] = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t sub_250F42D8C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = sub_251037400();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = v6 + v7;
  uint64_t v10 = ((v6 + v7) & ~v7) + v6;
  unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v12 = *((unsigned __int8 *)a2 + v11 + 8);
  if (v12 >= 2 && ((v11 + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v12 = *a2 + 2;
  }
  BOOL v43 = v12 == 1;
  unint64_t v14 = *(void (**)(uint64_t, _DWORD *, uint64_t))(v5 + 32);
  v14(a1, a2, v4);
  v14((v9 + a1) & v8, (_DWORD *)(((unint64_t)a2 + v9) & v8), v4);
  *(void *)((a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(a1 + v11 + 8) = v43;
  unint64_t v15 = (v11 + 16 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)a2 + v11 + 16) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)(v16 + 16);
  long long v18 = *(_OWORD *)(v16 + 32);
  long long v19 = *(_OWORD *)(v16 + 48);
  *(void *)(v15 + 64) = *(void *)(v16 + 64);
  *(_OWORD *)(v15 + 32) = v18;
  *(_OWORD *)(v15 + 48) = v19;
  *(_OWORD *)(v15 + 16) = v17;
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v21 = v20 + 32;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v15 + v22 + 72) & ~v22;
  uint64_t v24 = (v16 + v22 + 72) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v23, v24);
  uint64_t v25 = *(void *)(v21 + 32) + 7;
  uint64_t v26 = (char *)((v25 + v23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (const void *)((v25 + v24) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v26, v27, 0x119uLL);
  uint64_t v28 = *(void *)(sub_2510374F0() - 8);
  uint64_t v29 = *(_DWORD *)(v28 + 80) & 0xF8;
  uint64_t v30 = v29 + 288;
  unint64_t v31 = (unint64_t)&v26[v29 + 288];
  unint64_t v32 = ~v29 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (void *)(v31 & v32);
  uint64_t v34 = (unsigned __int8 *)(((unint64_t)v27 + v30) & v32);
  if (*(void *)(v28 + 64) <= 8uLL) {
    uint64_t v35 = 8;
  }
  else {
    uint64_t v35 = *(void *)(v28 + 64);
  }
  unsigned int v36 = v34[v35];
  unsigned int v37 = v36 - 2;
  if (v36 >= 2)
  {
    if (v35 <= 3) {
      uint64_t v38 = v35;
    }
    else {
      uint64_t v38 = 4;
    }
    switch(v38)
    {
      case 1:
        int v39 = *v34;
        goto LABEL_18;
      case 2:
        int v39 = *(unsigned __int16 *)v34;
        goto LABEL_18;
      case 3:
        int v39 = *(unsigned __int16 *)v34 | (v34[2] << 16);
        goto LABEL_18;
      case 4:
        int v39 = *(_DWORD *)v34;
LABEL_18:
        int v40 = (v39 | (v37 << (8 * v35))) + 2;
        unsigned int v36 = v39 + 2;
        if (v35 < 4) {
          unsigned int v36 = v40;
        }
        break;
      default:
        break;
    }
  }
  if (v36 == 1)
  {
    (*(void (**)(void *))(v28 + 32))(v33);
    char v41 = 1;
  }
  else
  {
    char v41 = 0;
    void *v33 = *(void *)v34;
  }
  *((unsigned char *)v33 + v35) = v41;
  return a1;
}

_DWORD *sub_250F430CC(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 + 64);
    uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v95 = ~v10;
    uint64_t v11 = v9 + v10;
    uint64_t v96 = ((v9 + v10) & ~v10) + v9;
    unint64_t v12 = ((v96 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v13 = *(void (**)(void))(v7 + 8);
    ((void (*)(_DWORD *, uint64_t))v13)(a1, v6);
    unint64_t v94 = ((unint64_t)a1 + v11) & ~v10;
    v13();
    swift_bridgeObjectRelease();
    unsigned int v14 = *((unsigned __int8 *)a2 + v12);
    if ((v12 & 0xFFFFFFF8) != 0 && v14 >= 2) {
      unsigned int v14 = *a2 + 2;
    }
    unint64_t v16 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v8 + 32);
    v16(a1, a2, v6);
    v16((_DWORD *)v94, (_DWORD *)(((unint64_t)a2 + v11) & v95), v6);
    *(void *)(((unint64_t)a1 + v96 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v96 + 7) & 0xFFFFFFFFFFFFFFF8);
    *((unsigned char *)a1 + v12) = v14 == 1;
    uint64_t v3 = a3;
  }
  uint64_t v17 = *(void *)(sub_251037400() - 8);
  unint64_t v18 = ((*(void *)(v17 + 64)
        + ((*(void *)(v17 + 64) + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  long long v19 = (void *)(((unint64_t)a1 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)a2 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (*v19 >= 0xFFFFFFFFuLL)
  {
    if (*v20 >= 0xFFFFFFFFuLL)
    {
      void *v19 = *v20;
      swift_bridgeObjectRelease();
      v19[1] = v20[1];
      swift_bridgeObjectRelease();
      v19[2] = v20[2];
      v19[3] = v20[3];
      v19[4] = v20[4];
      v19[5] = v20[5];
      v19[6] = v20[6];
      v19[7] = v20[7];
      v19[8] = v20[8];
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)long long v19 = *(_OWORD *)v20;
  long long v21 = *((_OWORD *)v20 + 1);
  long long v22 = *((_OWORD *)v20 + 2);
  long long v23 = *((_OWORD *)v20 + 3);
  v19[8] = v20[8];
  *((_OWORD *)v19 + 2) = v22;
  *((_OWORD *)v19 + 3) = v23;
  *((_OWORD *)v19 + 1) = v21;
LABEL_17:
  uint64_t v24 = *(void *)(*(void *)(v3 + 16) - 8);
  uint64_t v25 = v24 + 40;
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = ((unint64_t)v19 + v26 + 72) & ~v26;
  uint64_t v28 = ((unint64_t)v20 + v26 + 72) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v27, v28);
  uint64_t v29 = *(void *)(v25 + 24) + 7;
  unint64_t v30 = (v29 + v28) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)(v30 + 272);
  unint64_t v32 = (v29 + v27) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v29) = *(unsigned char *)(v30 + 280);
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  uint64_t v35 = *(void *)(v32 + 16);
  uint64_t v36 = *(void *)(v32 + 24);
  uint64_t v37 = *(void *)(v32 + 32);
  uint64_t v38 = *(void *)(v32 + 40);
  uint64_t v39 = *(void *)(v32 + 48);
  uint64_t v40 = *(void *)(v32 + 56);
  long long v41 = *(_OWORD *)(v32 + 64);
  long long v42 = *(_OWORD *)(v32 + 80);
  long long v43 = *(_OWORD *)(v32 + 96);
  long long v44 = *(_OWORD *)(v32 + 112);
  long long v45 = *(_OWORD *)(v32 + 128);
  long long v46 = *(_OWORD *)(v32 + 144);
  long long v47 = *(_OWORD *)(v32 + 160);
  long long v48 = *(_OWORD *)(v32 + 176);
  long long v49 = *(_OWORD *)(v32 + 192);
  long long v50 = *(_OWORD *)(v32 + 208);
  long long v51 = *(_OWORD *)(v32 + 224);
  long long v52 = *(_OWORD *)(v32 + 240);
  long long v53 = *(_OWORD *)(v32 + 256);
  uint64_t v54 = *(void *)(v32 + 272);
  char v55 = *(unsigned char *)(v32 + 280);
  long long v56 = *(_OWORD *)(v30 + 16);
  long long v57 = *(_OWORD *)(v30 + 32);
  long long v58 = *(_OWORD *)(v30 + 48);
  long long v59 = *(_OWORD *)(v30 + 64);
  long long v60 = *(_OWORD *)(v30 + 80);
  long long v61 = *(_OWORD *)(v30 + 96);
  long long v62 = *(_OWORD *)(v30 + 112);
  long long v63 = *(_OWORD *)(v30 + 128);
  long long v64 = *(_OWORD *)(v30 + 144);
  long long v66 = *(_OWORD *)(v30 + 160);
  long long v65 = *(_OWORD *)(v30 + 176);
  long long v67 = *(_OWORD *)(v30 + 192);
  long long v68 = *(_OWORD *)(v30 + 208);
  long long v69 = *(_OWORD *)(v30 + 224);
  long long v70 = *(_OWORD *)(v30 + 240);
  long long v71 = *(_OWORD *)(v30 + 256);
  *(_OWORD *)unint64_t v32 = *(_OWORD *)v30;
  *(_OWORD *)(v32 + 16) = v56;
  *(_OWORD *)(v32 + 32) = v57;
  *(_OWORD *)(v32 + 48) = v58;
  *(_OWORD *)(v32 + 64) = v59;
  *(_OWORD *)(v32 + 80) = v60;
  *(_OWORD *)(v32 + 96) = v61;
  *(_OWORD *)(v32 + 112) = v62;
  *(_OWORD *)(v32 + 128) = v63;
  *(_OWORD *)(v32 + 144) = v64;
  *(_OWORD *)(v32 + 160) = v66;
  *(_OWORD *)(v32 + 176) = v65;
  *(_OWORD *)(v32 + 192) = v67;
  *(_OWORD *)(v32 + 208) = v68;
  *(_OWORD *)(v32 + 224) = v69;
  *(_OWORD *)(v32 + 240) = v70;
  *(_OWORD *)(v32 + 256) = v71;
  *(void *)(v32 + 272) = v31;
  *(unsigned char *)(v32 + 280) = v29;
  sub_250F40D40(v33, v34, v35, v36, v37, v38, v39, v40, v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46,
    *((uint64_t *)&v46 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v49,
    *((uint64_t *)&v49 + 1),
    v50,
    *((uint64_t *)&v50 + 1),
    v51,
    *((uint64_t *)&v51 + 1),
    v52,
    *((uint64_t *)&v52 + 1),
    v53,
    *((uint64_t *)&v53 + 1),
    v54,
    v55);
  uint64_t v72 = sub_2510374F0();
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v74 = *(_DWORD *)(v73 + 80) & 0xF8;
  uint64_t v75 = v74 + 288;
  unint64_t v76 = v74 + 288 + v32;
  unint64_t v77 = ~v74 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v78 = (unsigned __int8 *)(v76 & v77);
  uint64_t v79 = v75 + v30;
  int v80 = (unsigned __int8 *)(v79 & v77);
  if ((v76 & v77) != (v79 & v77))
  {
    uint64_t v81 = v72;
    uint64_t v82 = *(void *)(v72 - 8);
    if (*(void *)(v73 + 64) <= 8uLL) {
      uint64_t v83 = 8;
    }
    else {
      uint64_t v83 = *(void *)(v73 + 64);
    }
    unsigned int v84 = v78[v83];
    unsigned int v85 = v84 - 2;
    if (v84 >= 2)
    {
      if (v83 <= 3) {
        uint64_t v86 = v83;
      }
      else {
        uint64_t v86 = 4;
      }
      switch(v86)
      {
        case 1:
          int v87 = *v78;
          if (v83 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v87 = *(unsigned __int16 *)v78;
          if (v83 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v87 = *(unsigned __int16 *)v78 | (v78[2] << 16);
          if (v83 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v87 = *(_DWORD *)v78;
          if (v83 < 4)
          {
LABEL_31:
            unsigned int v84 = (v87 | (v85 << (8 * v83))) + 2;
            break;
          }
LABEL_35:
          if (v87 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v84 == 1) {
LABEL_33:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v82 + 8))(v78, v72);
    else {
LABEL_36:
    }
      swift_release();
    unsigned int v88 = v80[v83];
    unsigned int v89 = v88 - 2;
    if (v88 >= 2)
    {
      if (v83 <= 3) {
        uint64_t v90 = v83;
      }
      else {
        uint64_t v90 = 4;
      }
      switch(v90)
      {
        case 1:
          int v91 = *v80;
          if (v83 >= 4) {
            goto LABEL_51;
          }
          goto LABEL_47;
        case 2:
          int v91 = *(unsigned __int16 *)v80;
          if (v83 >= 4) {
            goto LABEL_51;
          }
          goto LABEL_47;
        case 3:
          int v91 = *(unsigned __int16 *)v80 | (v80[2] << 16);
          if (v83 < 4) {
            goto LABEL_47;
          }
          goto LABEL_51;
        case 4:
          int v91 = *(_DWORD *)v80;
          if (v83 < 4)
          {
LABEL_47:
            unsigned int v88 = (v91 | (v89 << (8 * v83))) + 2;
            break;
          }
LABEL_51:
          if (v91 != -1) {
            goto LABEL_52;
          }
          goto LABEL_49;
        default:
          break;
      }
    }
    if (v88 == 1)
    {
LABEL_49:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v82 + 32))(v78, v80, v81);
      char v92 = 1;
    }
    else
    {
LABEL_52:
      char v92 = 0;
      *(void *)unsigned int v78 = *(void *)v80;
    }
    v78[v83] = v92;
  }
  return a1;
}

uint64_t sub_250F43704(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(sub_251037400() - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(sub_2510374F0() - 8);
  if (*(void *)(v13 + 64) <= 8uLL) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = *(void *)(v13 + 64);
  }
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v16 = ((v7 + v8) & ~v8) + v7;
  if (a2 <= v12) {
    goto LABEL_26;
  }
  uint64_t v17 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  unint64_t v18 = v14
      + ((((*(void *)(v10 + 64) + ((v15 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 72) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8)
        + v17
        + 281) & ~v17)
      + 1;
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((a2 - v12 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_26:
      uint64_t v24 = (unint64_t *)(((unint64_t)a1 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFFFFFFFFFF8);
      if (v11 > 0x7FFFFFFE)
      {
        uint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
        return v26(((unint64_t)v24 + v15 + 72) & ~v15, v11, v9);
      }
      else
      {
        unint64_t v25 = *v24;
        if (v25 >= 0xFFFFFFFF) {
          LODWORD(v25) = -1;
        }
        if ((v25 + 1) >= 2) {
          return v25;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_26;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 > 3) {
      LODWORD(v18) = 4;
    }
    switch((int)v18)
    {
      case 2:
        LODWORD(v18) = *a1;
        break;
      case 3:
        LODWORD(v18) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v18) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v18) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v12 + (v18 | v23) + 1;
}

void sub_250F43A28(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(sub_251037400() - 8);
  unint64_t v9 = ((*(void *)(v8 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(void *)(v8 + 64);
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v26 = v11;
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v14 = *(void *)(sub_2510374F0() - 8);
  uint64_t v15 = 8;
  if (*(void *)(v14 + 64) > 8uLL) {
    uint64_t v15 = *(void *)(v14 + 64);
  }
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  size_t v18 = v15
      + ((((*(void *)(v11 + 64) + ((v16 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 72) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
        + v17
        + 281) & ~v17)
      + 1;
  if (a3 <= v13)
  {
    int v19 = 0;
  }
  else if (v18 <= 3)
  {
    unsigned int v22 = ((a3 - v13 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v22))
    {
      int v19 = 4;
    }
    else if (v22 >= 0x100)
    {
      int v19 = 2;
    }
    else
    {
      int v19 = v22 > 1;
    }
  }
  else
  {
    int v19 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v20 = ~v13 + a2;
    if (v18 < 4)
    {
      int v21 = (v20 >> (8 * v18)) + 1;
      if (v18)
      {
        int v23 = v20 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        a1[v18] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v21;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v18] = v21;
        return;
      default:
        return;
    }
  }
  switch(v19)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x250F43DD8);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        unint64_t v24 = (unint64_t)&a1[((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16] & 0xFFFFFFFFFFFFFFF8;
        if (v12 > 0x7FFFFFFE)
        {
          unint64_t v25 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
          v25((v24 + v16 + 72) & ~v16, a2, v12, v10);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)(v24 + 64) = 0;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_OWORD *)(v24 + 48) = 0u;
          *(_OWORD *)unint64_t v24 = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_DWORD *)unint64_t v24 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)unint64_t v24 = a2;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for OvernightMetricsAxisStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_250F43E18()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F43E5C(uint64_t a1)
{
  uint64_t v3 = sub_251037400();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    v14[1] = v1;
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_250FF1D34(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v17 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v14[2] = v4 + 32;
    uint64_t v15 = v10;
    do
    {
      v15(v6, v9 + *(int *)(v17 + 24), v3);
      uint64_t v18 = v8;
      unint64_t v12 = *(void *)(v8 + 16);
      unint64_t v11 = *(void *)(v8 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_250FF1D34(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v18;
      }
      *(void *)(v8 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v9 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_250F44074@<X0>(const void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = SleepingSampleDataType.preferredImage.getter();
  memcpy(__dst, a1, sizeof(__dst));
  sub_250F4A89C((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  sub_250F75B5C(v8);
  sub_250F4A89C((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
  uint64_t v5 = v8[33];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_250F2E048(v8);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_getKeyPath();
  *a2 = v4;
  a2[1] = result;
  a2[2] = v5;
  return result;
}

uint64_t sub_250F4417C@<X0>(uint64_t *a1@<X8>)
{
  memcpy(__dst, v1, 0x119uLL);
  *a1 = sub_251038D00();
  a1[1] = v3;
  sub_250F49880();
  sub_2510376F0();
  swift_getKeyPath();
  uint64_t v4 = swift_allocObject();
  memcpy((void *)(v4 + 16), v1, 0x119uLL);
  sub_250F4A89C((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  sub_250F49D90(0, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
  sub_250F499EC();
  sub_250F49AD4();
  sub_250F49B5C(&qword_26B210A88, MEMORY[0x263F42CD0]);
  sub_250F49C40();
  return sub_251038C80();
}

uint64_t sub_250F4430C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memcpy(v5, (const void *)(v2 + *(int *)(a1 + 44)), 0x119uLL);
  sub_250F4A89C((uint64_t)v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  sub_250F75B5C(a2);
  return sub_250F4A89C((uint64_t)v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
}

uint64_t sub_250F44394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v101 = a3;
  uint64_t v98 = a1;
  sub_250F49D48(0);
  uint64_t v107 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v99 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F49D90(0, &qword_269B13280, MEMORY[0x263EFCD98], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v95 = (char *)&v68 - v7;
  uint64_t v8 = sub_251037ED0();
  uint64_t v97 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v94 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_251037EC0();
  uint64_t v96 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v90 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  uint64_t v12 = sub_2510385C0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v120 = v12;
  uint64_t v121 = v10;
  uint64_t v85 = v12;
  uint64_t v87 = v10;
  uint64_t v88 = v8;
  uint64_t v122 = v8;
  v123 = (char *)WitnessTable;
  uint64_t v14 = v8;
  uint64_t v15 = WitnessTable;
  uint64_t v89 = WitnessTable;
  uint64_t v16 = MEMORY[0x263EFCCD8];
  uint64_t v124 = MEMORY[0x263EFCCB0];
  uint64_t v125 = MEMORY[0x263EFCCD8];
  uint64_t v17 = MEMORY[0x263EFCCB0];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v93 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v86 = (char *)&v68 - v19;
  uint64_t v120 = v12;
  uint64_t v121 = v10;
  uint64_t v122 = v14;
  v123 = (char *)v15;
  uint64_t v124 = v17;
  uint64_t v125 = v16;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v82 = OpaqueTypeMetadata2;
  uint64_t v83 = OpaqueTypeConformance2;
  uint64_t v120 = OpaqueTypeMetadata2;
  uint64_t v121 = OpaqueTypeConformance2;
  uint64_t v21 = OpaqueTypeConformance2;
  uint64_t v22 = swift_getOpaqueTypeMetadata2();
  uint64_t v103 = v22;
  uint64_t v92 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v81 = (char *)&v68 - v23;
  uint64_t v120 = OpaqueTypeMetadata2;
  uint64_t v121 = v21;
  uint64_t v24 = swift_getOpaqueTypeConformance2();
  uint64_t v105 = v24;
  unint64_t v104 = sub_250F49DF4();
  uint64_t v120 = v22;
  uint64_t v121 = v107;
  uint64_t v122 = v24;
  v123 = (char *)v104;
  uint64_t v77 = MEMORY[0x263EFCDD0];
  uint64_t v106 = swift_getOpaqueTypeMetadata2();
  uint64_t v91 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v78 = a2;
  uint64_t v79 = (char *)&v68 - v25;
  uint64_t v84 = *(void *)(a2 + 16);
  sub_251038270();
  sub_251038270();
  uint64_t v80 = *(void *)(a2 + 24);
  v119[4] = v80;
  v119[5] = MEMORY[0x263F18BF0];
  v119[2] = swift_getWitnessTable();
  v119[3] = MEMORY[0x263F18C10];
  swift_getWitnessTable();
  sub_251037E20();
  uint64_t v26 = sub_251039490();
  v119[6] = v26;
  uint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263EFCC40];
  sub_250F4AA68(255, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C, MEMORY[0x263EFCC40]);
  v119[7] = v27;
  sub_251037CE0();
  v118[5] = swift_getWitnessTable();
  uint64_t v75 = swift_getWitnessTable();
  v119[0] = v75;
  v119[1] = sub_250F49E90(&qword_269B132A0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C);
  v118[4] = v119;
  uint64_t v74 = MEMORY[0x263EFCB30];
  swift_getWitnessTable();
  uint64_t v28 = sub_251037FD0();
  uint64_t v29 = sub_2510385F0();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v120 = v29;
  uint64_t v121 = v30;
  uint64_t v31 = swift_getOpaqueTypeMetadata2();
  uint64_t v73 = v31;
  uint64_t v76 = MEMORY[0x263EFCD80];
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v120 = v29;
  uint64_t v121 = v30;
  uint64_t v72 = (char *)swift_getOpaqueTypeConformance2();
  uint64_t v120 = v28;
  uint64_t v121 = v31;
  uint64_t v122 = v32;
  v123 = v72;
  v119[8] = swift_getOpaqueTypeMetadata2();
  v119[9] = v28;
  sub_251037CE0();
  sub_251037EA0();
  v118[2] = v26;
  sub_250F4AA68(255, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8, v102);
  v118[3] = v33;
  sub_251037CE0();
  v118[0] = v75;
  v118[1] = sub_250F49E90(&qword_269B132B0, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8);
  v117[2] = v118;
  swift_getWitnessTable();
  sub_251037FD0();
  sub_251037EA0();
  uint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_251039490();
  uint64_t v120 = v103;
  uint64_t v121 = v107;
  uint64_t v122 = v105;
  v123 = (char *)v104;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  uint64_t v74 = v34;
  uint64_t v120 = v28;
  uint64_t v121 = v73;
  uint64_t v122 = v32;
  v123 = v72;
  v117[0] = swift_getOpaqueTypeConformance2();
  v117[1] = v32;
  uint64_t v116 = v117;
  uint64_t v114 = swift_getWitnessTable();
  uint64_t v115 = v32;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v112 = v35;
  uint64_t v113 = v36;
  uint64_t v111 = swift_getWitnessTable();
  uint64_t v37 = v102;
  uint64_t v73 = swift_getWitnessTable();
  uint64_t v120 = v106;
  uint64_t v121 = (uint64_t)v37;
  uint64_t v122 = v34;
  v123 = (char *)v73;
  uint64_t v75 = MEMORY[0x263EFCDA8];
  uint64_t v38 = swift_getOpaqueTypeMetadata2();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v76 = v38;
  uint64_t v77 = v39;
  MEMORY[0x270FA5388](v38);
  long long v71 = (char *)&v68 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  uint64_t v72 = (char *)&v68 - v42;
  long long v43 = v90;
  sub_251037CC0();
  long long v44 = v94;
  sub_251037EB0();
  uint64_t v45 = sub_251038020();
  uint64_t v46 = *(void *)(v45 - 8);
  long long v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
  uint64_t v70 = v46 + 56;
  uint64_t v47 = (uint64_t)v95;
  v69(v95, 1, 1, v45);
  swift_checkMetadataState();
  long long v49 = v86;
  uint64_t v48 = v87;
  uint64_t v50 = v88;
  sub_2510388F0();
  sub_250F49EF4(v47);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v44, v50);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v43, v48);
  long long v52 = v81;
  uint64_t v51 = v82;
  sub_2510388C0();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v49, v51);
  uint64_t v53 = v99;
  uint64_t v54 = v100;
  sub_250F45084(v99);
  uint64_t v55 = v47;
  v69((char *)v47, 1, 1, v45);
  long long v56 = v79;
  uint64_t v57 = v103;
  sub_2510388D0();
  sub_250F49EF4(v55);
  sub_250F4A404(v53, (uint64_t (*)(void))sub_250F49D48);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v52, v57);
  uint64_t v108 = v84;
  uint64_t v109 = v80;
  uint64_t v110 = v54;
  uint64_t v58 = swift_checkMetadataState();
  long long v59 = v71;
  uint64_t v60 = v106;
  uint64_t v62 = v73;
  uint64_t v61 = v74;
  sub_2510388B0();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v56, v60);
  uint64_t v120 = v60;
  uint64_t v121 = v58;
  uint64_t v122 = v61;
  v123 = (char *)v62;
  uint64_t v63 = swift_getOpaqueTypeConformance2();
  long long v64 = v72;
  uint64_t v65 = v76;
  sub_250F62918(v59, v76, v63);
  long long v66 = *(void (**)(char *, uint64_t))(v77 + 8);
  v66(v59, v65);
  sub_250F62918(v64, v65, v63);
  return ((uint64_t (*)(char *, uint64_t))v66)(v64, v65);
}

uint64_t sub_250F45084@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F4A930(v2, (uint64_t)v12, type metadata accessor for OvernightMetricsAxisConfiguration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_250F4A464((uint64_t)v12, (uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    sub_250F4A930((uint64_t)v6, a1, (uint64_t (*)(void))sub_250F49D48);
    unsigned int v13 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
    uint64_t v14 = (uint64_t)v6;
  }
  else
  {
    sub_250F4A464((uint64_t)v12, (uint64_t)v9, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
    sub_250F4A930((uint64_t)v9, a1, (uint64_t (*)(void))sub_250F49D48);
    unsigned int v13 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
    uint64_t v14 = (uint64_t)v9;
  }
  return sub_250F4A404(v14, v13);
}

uint64_t sub_250F4527C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v55 = a3;
  long long v56 = a2;
  uint64_t v54 = a1;
  long long v59 = a4;
  sub_251038270();
  sub_251038270();
  v89[4] = a3;
  v89[5] = MEMORY[0x263F18BF0];
  v89[2] = swift_getWitnessTable();
  v89[3] = MEMORY[0x263F18C10];
  swift_getWitnessTable();
  sub_251037E20();
  uint64_t v5 = sub_251039490();
  v89[6] = v5;
  long long v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263EFCC40];
  sub_250F4AA68(255, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C, MEMORY[0x263EFCC40]);
  v89[7] = v6;
  sub_251037CE0();
  v88[5] = swift_getWitnessTable();
  uint64_t WitnessTable = swift_getWitnessTable();
  v89[0] = WitnessTable;
  v89[1] = sub_250F49E90(&qword_269B132A0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C);
  v88[4] = v89;
  swift_getWitnessTable();
  uint64_t v8 = sub_251037FD0();
  uint64_t v9 = sub_2510385F0();
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v90 = v9;
  uint64_t v91 = v10;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v90 = v9;
  uint64_t v91 = v10;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v90 = v8;
  uint64_t v91 = OpaqueTypeMetadata2;
  uint64_t v65 = OpaqueTypeMetadata2;
  uint64_t v66 = v12;
  uint64_t v92 = v12;
  uint64_t v93 = OpaqueTypeConformance2;
  uint64_t v63 = OpaqueTypeConformance2;
  v89[8] = swift_getOpaqueTypeMetadata2();
  v89[9] = v8;
  uint64_t v62 = sub_251037CE0();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_251037EA0();
  v88[2] = v5;
  sub_250F4AA68(255, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8, v64);
  v88[3] = v15;
  sub_251037CE0();
  v88[0] = WitnessTable;
  v88[1] = sub_250F49E90(&qword_269B132B0, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8);
  uint64_t v87 = v88;
  swift_getWitnessTable();
  uint64_t v16 = sub_251037FD0();
  long long v64 = v14;
  uint64_t v17 = sub_251037EA0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unsigned int v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  long long v52 = (char *)&v52 - v22;
  uint64_t v24 = v23;
  uint64_t v61 = sub_251039490();
  uint64_t v53 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v60 = (char *)&v52 - v28;
  uint64_t v29 = type metadata accessor for OvernightMetricsAxisStyle();
  sub_250F4430C(v29, &v90);
  sub_250F2E048(&v90);
  uint64_t v57 = v16;
  uint64_t v58 = v8;
  if (v94 == 1)
  {
    sub_250F45B80(v29, (uint64_t)v20);
    uint64_t v83 = v8;
    uint64_t v84 = v65;
    uint64_t v30 = v66;
    uint64_t v85 = v66;
    uint64_t v86 = v63;
    uint64_t v83 = swift_getOpaqueTypeConformance2();
    uint64_t v84 = v30;
    long long v71 = &v83;
    uint64_t v69 = swift_getWitnessTable();
    uint64_t v70 = v30;
    uint64_t v31 = swift_getWitnessTable();
    uint64_t v32 = swift_getWitnessTable();
    uint64_t v67 = v31;
    uint64_t v68 = v32;
    swift_getWitnessTable();
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    long long v56 = v26;
    uint64_t v35 = v52;
    uint64_t v34 = v53;
    v33(v52, v20, v24);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v18 + 8);
    v36(v20, v24);
    uint64_t v37 = v56;
    v33(v56, v35, v24);
    v36(v35, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v37, 0, 1, v24);
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    uint64_t v39 = v61;
    v38(v60, v37, v61);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
    v40(v37, v39);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v26, 1, 1, v24);
    uint64_t v41 = v66;
    uint64_t v83 = v8;
    uint64_t v84 = v65;
    uint64_t v85 = v66;
    uint64_t v86 = v63;
    uint64_t v83 = swift_getOpaqueTypeConformance2();
    uint64_t v84 = v41;
    uint64_t v82 = &v83;
    uint64_t v80 = swift_getWitnessTable();
    uint64_t v81 = v41;
    uint64_t v42 = swift_getWitnessTable();
    uint64_t v43 = swift_getWitnessTable();
    uint64_t v78 = v42;
    uint64_t v79 = v43;
    swift_getWitnessTable();
    uint64_t v44 = v53;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    uint64_t v45 = v61;
    v38(v60, v26, v61);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v44 + 8);
    v40(v26, v45);
  }
  uint64_t v46 = v66;
  uint64_t v83 = v58;
  uint64_t v84 = v65;
  uint64_t v85 = v66;
  uint64_t v86 = v63;
  uint64_t v83 = swift_getOpaqueTypeConformance2();
  uint64_t v84 = v46;
  uint64_t v77 = &v83;
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v76 = v46;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v73 = v47;
  uint64_t v74 = v48;
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v49 = v61;
  swift_getWitnessTable();
  uint64_t v50 = v60;
  v38(v59, v60, v49);
  return ((uint64_t (*)(char *, uint64_t))v40)(v50, v49);
}

uint64_t sub_250F45B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v205 = a2;
  uint64_t v4 = sub_251037E70();
  MEMORY[0x270FA5388](v4 - 8);
  v194 = (char *)v169 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = a1;
  uint64_t v6 = *(void *)(a1 - 8);
  a1 -= 8;
  uint64_t v193 = v6;
  MEMORY[0x270FA5388](v7);
  v191 = v8;
  v192 = (char *)v169 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_251037E00();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v209 = (uint64_t)v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = *(void **)(a1 + 24);
  sub_251038270();
  sub_251038270();
  v198 = *(void (**)(char *, uint64_t))(a1 + 32);
  v242[4] = v198;
  v242[5] = MEMORY[0x263F18BF0];
  v242[2] = swift_getWitnessTable();
  v242[3] = MEMORY[0x263F18C10];
  swift_getWitnessTable();
  sub_251037E20();
  uint64_t v11 = sub_251039490();
  v242[6] = v11;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263EFCC40];
  sub_250F4AA68(255, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8, MEMORY[0x263EFCC40]);
  v242[7] = v13;
  uint64_t v14 = sub_251037CE0();
  v241[3] = swift_getWitnessTable();
  uint64_t WitnessTable = swift_getWitnessTable();
  v242[0] = WitnessTable;
  v242[1] = sub_250F49E90(&qword_269B132B0, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8);
  v241[2] = v242;
  uint64_t v186 = swift_getWitnessTable();
  uint64_t v187 = v14;
  uint64_t v16 = sub_251037FD0();
  uint64_t v190 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  v189 = (char *)v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v188 = (char *)v169 - v19;
  uint64_t v20 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v183 = v20;
  uint64_t v184 = v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v182 = (uint64_t)v169 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = v22;
  MEMORY[0x270FA5388](v23);
  v208 = (char *)v169 - v24;
  v240[2] = v11;
  sub_250F4AA68(255, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C, v12);
  v240[3] = v25;
  sub_251037CE0();
  v240[0] = WitnessTable;
  v240[1] = sub_250F49E90(&qword_269B132A0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C);
  v239 = v240;
  swift_getWitnessTable();
  uint64_t v26 = sub_251037FD0();
  uint64_t v27 = sub_2510385F0();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v226 = v27;
  uint64_t v227 = v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v226 = v27;
  uint64_t v227 = v28;
  uint64_t v31 = v2;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v226 = v26;
  uint64_t v227 = OpaqueTypeMetadata2;
  uint64_t v213 = OpaqueTypeConformance2;
  uint64_t v214 = OpaqueTypeMetadata2;
  uint64_t v210 = v30;
  uint64_t v228 = v30;
  uint64_t v229 = OpaqueTypeConformance2;
  uint64_t v33 = swift_getOpaqueTypeMetadata2();
  v241[0] = v33;
  v241[1] = v26;
  uint64_t v34 = sub_251037CE0();
  uint64_t v173 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  v171 = (char *)v169 - v35;
  uint64_t v36 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  uint64_t v218 = *(void *)(v36 - 8);
  uint64_t v219 = v36;
  MEMORY[0x270FA5388](v36);
  uint64_t v216 = (uint64_t)v169 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  v215 = (char *)v169 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v217 = (uint64_t)v169 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)v169 - v43;
  uint64_t v197 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v176 = (uint64_t)v169 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  v179 = (char *)v169 - v48;
  MEMORY[0x270FA5388](v49);
  v170 = (char *)v169 - v50;
  MEMORY[0x270FA5388](v51);
  v177 = (char *)v169 - v52;
  MEMORY[0x270FA5388](v53);
  uint64_t v174 = (uint64_t)v169 - v54;
  uint64_t v178 = v33;
  uint64_t v196 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v55);
  v172 = (char *)v169 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v57);
  v175 = (char *)v169 - v58;
  MEMORY[0x270FA5388](v59);
  v195 = (char *)v169 - v60;
  uint64_t v203 = v34;
  uint64_t v61 = sub_251037EA0();
  uint64_t v181 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  v180 = (char *)v169 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  v200 = (char *)v169 - v64;
  uint64_t v65 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  MEMORY[0x270FA5388](v65);
  uint64_t v67 = (uint64_t)v169 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x270FA5388](v68);
  uint64_t v70 = (char *)v169 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = v61;
  uint64_t v204 = v16;
  uint64_t v71 = sub_251037EA0();
  uint64_t v206 = *(void *)(v71 - 8);
  uint64_t v207 = v71;
  MEMORY[0x270FA5388](v71);
  uint64_t v73 = (char *)v169 - v72;
  sub_250F4A930(v31, (uint64_t)v70, type metadata accessor for OvernightMetricsAxisConfiguration);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v212 = v26;
  v201 = v73;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v75 = (uint64_t)v70;
    uint64_t v76 = v208;
    sub_250F4A464(v75, (uint64_t)v208, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    sub_251037DF0();
    uint64_t v77 = v31;
    uint64_t v219 = *(void *)&v76[*(int *)(v183 + 20)];
    uint64_t v78 = v192;
    uint64_t v79 = v193;
    uint64_t v80 = v211;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v192, v77, v211);
    uint64_t v81 = v182;
    sub_250F4A930((uint64_t)v76, v182, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    unint64_t v82 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
    unint64_t v83 = ((unint64_t)v191 + *(unsigned __int8 *)(v184 + 80) + v82) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80);
    uint64_t v84 = swift_allocObject();
    uint64_t v85 = v198;
    *(void *)(v84 + 16) = v199;
    *(void *)(v84 + 24) = v85;
    (*(void (**)(unint64_t, char *, uint64_t))(v79 + 32))(v84 + v82, v78, v80);
    sub_250F4A464(v81, v84 + v83, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    sub_251037400();
    swift_bridgeObjectRetain();
    sub_251037E60();
    uint64_t v86 = (uint64_t)v189;
    sub_251037FC0();
    uint64_t v87 = v204;
    uint64_t v219 = swift_getWitnessTable();
    uint64_t v88 = v190;
    uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t))(v190 + 16);
    uint64_t v90 = v26;
    uint64_t v91 = v188;
    v89(v188, v86, v87);
    uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v92(v86, v87);
    v89((char *)v86, (uint64_t)v91, v87);
    uint64_t v226 = v90;
    uint64_t v227 = v214;
    uint64_t v93 = v210;
    uint64_t v228 = v210;
    uint64_t v229 = v213;
    uint64_t v226 = swift_getOpaqueTypeConformance2();
    uint64_t v227 = v93;
    v238 = &v226;
    uint64_t v236 = swift_getWitnessTable();
    uint64_t v237 = v93;
    uint64_t v94 = v202;
    swift_getWitnessTable();
    uint64_t v95 = v201;
    sub_250F47B30(v86, v94, v87);
    v92(v86, v87);
    v92((uint64_t)v91, v87);
    sub_250F4A404((uint64_t)v208, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    uint64_t v96 = v205;
    uint64_t v98 = v212;
    uint64_t v97 = v213;
    uint64_t v99 = v214;
LABEL_32:
    uint64_t v226 = v98;
    uint64_t v227 = v99;
    uint64_t v228 = v93;
    uint64_t v229 = v97;
    uint64_t v226 = swift_getOpaqueTypeConformance2();
    uint64_t v227 = v93;
    v235 = &v226;
    uint64_t v233 = swift_getWitnessTable();
    uint64_t v234 = v93;
    uint64_t v165 = swift_getWitnessTable();
    uint64_t v166 = swift_getWitnessTable();
    uint64_t v231 = v165;
    uint64_t v232 = v166;
    uint64_t v167 = v207;
    swift_getWitnessTable();
    uint64_t v168 = v206;
    (*(void (**)(uint64_t, char *, uint64_t))(v206 + 16))(v96, v95, v167);
    return (*(uint64_t (**)(char *, uint64_t))(v168 + 8))(v95, v167);
  }
  sub_250F4A464((uint64_t)v70, v67, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
  uint64_t v100 = v211;
  sub_250F4430C(v211, &v226);
  sub_250F2E048(&v226);
  uint64_t v101 = (char *)*(int *)(v65 + 20);
  uint64_t v209 = v67;
  uint64_t v102 = *(void *)&v101[v67];
  if (v230 != 1)
  {
    uint64_t v112 = v176;
    sub_250F472F8(v102, v100, v176);
    uint64_t v113 = v197;
    uint64_t v114 = *(void (**)(char *, uint64_t, uint64_t))(v197 + 16);
    uint64_t v115 = v179;
    uint64_t v116 = v212;
    v114(v179, v112, v212);
    v117 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
    v117(v112, v116);
    v114((char *)v112, (uint64_t)v115, v116);
    uint64_t v119 = v213;
    uint64_t v118 = v214;
    uint64_t v222 = v116;
    uint64_t v223 = v214;
    uint64_t v93 = v210;
    uint64_t v224 = v210;
    uint64_t v225 = v213;
    uint64_t v222 = swift_getOpaqueTypeConformance2();
    uint64_t v223 = v93;
    v221[5] = &v222;
    uint64_t v120 = v203;
    swift_getWitnessTable();
    sub_250F47B30(v112, v120, v116);
    v117(v112, v116);
    uint64_t v121 = v115;
    uint64_t v122 = v116;
    v117((uint64_t)v121, v116);
    uint64_t v123 = v119;
LABEL_31:
    uint64_t v159 = v202;
    uint64_t v222 = v122;
    uint64_t v223 = v118;
    uint64_t v224 = v93;
    uint64_t v225 = v123;
    uint64_t v222 = swift_getOpaqueTypeConformance2();
    uint64_t v223 = v93;
    v221[4] = &v222;
    v221[2] = swift_getWitnessTable();
    v221[3] = v93;
    swift_getWitnessTable();
    uint64_t v160 = v181;
    uint64_t v161 = (uint64_t)v180;
    v162 = v200;
    (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v180, v200, v159);
    swift_getWitnessTable();
    v163 = v201;
    sub_250F47A50(v161, v159);
    v164 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
    uint64_t v99 = v214;
    v164(v161, v159);
    v164((uint64_t)v162, v159);
    uint64_t v95 = v163;
    sub_250F4A404(v209, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
    uint64_t v98 = v212;
    uint64_t v97 = v213;
    uint64_t v96 = v205;
    goto LABEL_32;
  }
  uint64_t v103 = MEMORY[0x263F8EE78];
  uint64_t v222 = MEMORY[0x263F8EE78];
  uint64_t v104 = *(void *)(v102 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  v169[1] = v31;
  v194 = v101;
  if (v104)
  {
    unint64_t v106 = 0;
    uint64_t v107 = MEMORY[0x263F8EE78];
    while (v106 < *(void *)(v102 + 16))
    {
      unint64_t v108 = (*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80);
      uint64_t v109 = *(void *)(v218 + 72);
      sub_250F4A930(v102 + v108 + v109 * v106, (uint64_t)v44, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      if (v44[*(int *)(v219 + 36)] == 1)
      {
        sub_250F4A464((uint64_t)v44, v217, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_250FF1E6C(0, *(void *)(v107 + 16) + 1, 1);
        }
        uint64_t v107 = v222;
        unint64_t v111 = *(void *)(v222 + 16);
        unint64_t v110 = *(void *)(v222 + 24);
        if (v111 >= v110 >> 1)
        {
          sub_250FF1E6C(v110 > 1, v111 + 1, 1);
          uint64_t v107 = v222;
        }
        *(void *)(v107 + 16) = v111 + 1;
        uint64_t result = sub_250F4A464(v217, v107 + v108 + v111 * v109, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      }
      else
      {
        uint64_t result = sub_250F4A404((uint64_t)v44, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      }
      if (v104 == ++v106)
      {
        uint64_t v124 = v222;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v124 = v103;
LABEL_18:
  uint64_t v125 = v213;
  uint64_t v126 = v196;
  swift_bridgeObjectRelease();
  uint64_t v127 = v174;
  sub_250F472F8(v124, v211, v174);
  uint64_t v128 = swift_release();
  v199 = v169;
  MEMORY[0x270FA5388](v128);
  uint64_t v129 = swift_checkMetadataState();
  v130 = v175;
  uint64_t v131 = v212;
  uint64_t v132 = v210;
  sub_251037CB0();
  v133 = *(char **)(v197 + 8);
  uint64_t v217 = v197 + 8;
  v208 = v133;
  ((void (*)(uint64_t, uint64_t))v133)(v127, v131);
  uint64_t v222 = v131;
  uint64_t v223 = v129;
  uint64_t v224 = v132;
  uint64_t v225 = v125;
  uint64_t v134 = swift_getOpaqueTypeConformance2();
  uint64_t v135 = v178;
  v191 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
  v192 = (char *)(v126 + 16);
  v191(v195, v130, v178);
  v136 = *(void (**)(char *, uint64_t))(v126 + 8);
  v136(v130, v135);
  uint64_t v137 = *(void *)&v194[v209];
  uint64_t v138 = MEMORY[0x263F8EE78];
  uint64_t v222 = MEMORY[0x263F8EE78];
  uint64_t v139 = *(void *)(v137 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v196 = v126 + 8;
  v198 = v136;
  uint64_t v193 = v134;
  if (!v139)
  {
LABEL_30:
    uint64_t v147 = (uint64_t)v170;
    uint64_t v148 = (uint64_t)v171;
    swift_bridgeObjectRelease();
    sub_250F472F8(v138, v211, v147);
    swift_release();
    v149 = *(void (**)(char *, uint64_t, uint64_t))(v197 + 16);
    v150 = v177;
    uint64_t v151 = v212;
    v149(v177, v147, v212);
    ((void (*)(uint64_t, uint64_t))v208)(v147, v151);
    uint64_t v152 = (uint64_t)v172;
    uint64_t v153 = v178;
    v191(v172, v195, v178);
    uint64_t v222 = v152;
    v154 = v179;
    v149(v179, (uint64_t)v150, v151);
    uint64_t v223 = (uint64_t)v154;
    uint64_t v93 = v210;
    v221[0] = v193;
    v221[1] = v210;
    sub_250F48AAC(&v222, 2uLL, (uint64_t)v241, v148);
    v155 = v208;
    ((void (*)(char *, uint64_t))v208)(v154, v151);
    uint64_t v156 = v152;
    v157 = v198;
    v198((char *)v156, v153);
    v220 = v221;
    uint64_t v158 = v203;
    swift_getWitnessTable();
    sub_250F47A50(v148, v158);
    (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v148, v158);
    uint64_t v122 = v151;
    ((void (*)(char *, uint64_t))v155)(v177, v151);
    v157(v195, v153);
    uint64_t v123 = v213;
    uint64_t v118 = v214;
    goto LABEL_31;
  }
  unint64_t v140 = 0;
  uint64_t v141 = MEMORY[0x263F8EE78];
  uint64_t v142 = (uint64_t)v215;
  while (v140 < *(void *)(v137 + 16))
  {
    unint64_t v143 = (*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80);
    uint64_t v144 = *(void *)(v218 + 72);
    sub_250F4A930(v137 + v143 + v144 * v140, v142, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
    if (*(unsigned char *)(v142 + *(int *)(v219 + 36)))
    {
      uint64_t result = sub_250F4A404(v142, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
    }
    else
    {
      sub_250F4A464(v142, v216, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_250FF1E6C(0, *(void *)(v141 + 16) + 1, 1);
      }
      uint64_t v141 = v222;
      unint64_t v146 = *(void *)(v222 + 16);
      unint64_t v145 = *(void *)(v222 + 24);
      if (v146 >= v145 >> 1)
      {
        sub_250FF1E6C(v145 > 1, v146 + 1, 1);
        uint64_t v141 = v222;
      }
      *(void *)(v141 + 16) = v146 + 1;
      uint64_t result = sub_250F4A464(v216, v141 + v143 + v146 * v144, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      uint64_t v142 = (uint64_t)v215;
    }
    if (v139 == ++v140)
    {
      uint64_t v138 = v222;
      goto LABEL_30;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_250F472F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[3] = a3;
  uint64_t v6 = sub_251037E70();
  MEMORY[0x270FA5388](v6 - 8);
  v17[2] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = sub_251037E00();
  MEMORY[0x270FA5388](v11 - 8);
  sub_251037DF0();
  v17[1] = sub_250F43E5C(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = *(void *)(a2 + 24);
  *(void *)(v13 + 16) = *(void *)(a2 + 16);
  *(void *)(v13 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  *(void *)(v13 + ((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  swift_bridgeObjectRetain();
  sub_251038270();
  sub_251038270();
  v18[4] = v14;
  v18[5] = MEMORY[0x263F18BF0];
  void v18[2] = swift_getWitnessTable();
  v18[3] = MEMORY[0x263F18C10];
  swift_getWitnessTable();
  sub_251037E20();
  v18[6] = sub_251039490();
  sub_250F4AA68(255, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C, MEMORY[0x263EFCC40]);
  v18[7] = v15;
  sub_251037CE0();
  sub_251037400();
  v17[5] = swift_getWitnessTable();
  v18[0] = swift_getWitnessTable();
  v18[1] = sub_250F49E90(&qword_269B132A0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C);
  v17[4] = v18;
  swift_getWitnessTable();
  sub_251037E60();
  return sub_251037FC0();
}

uint64_t sub_250F476DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_251038270();
  sub_251038270();
  v22[4] = a3;
  v22[5] = MEMORY[0x263F18BF0];
  v22[2] = swift_getWitnessTable();
  v22[3] = MEMORY[0x263F18C10];
  swift_getWitnessTable();
  sub_251037E20();
  v22[6] = sub_251039490();
  sub_250F4AA68(255, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C, MEMORY[0x263EFCC40]);
  v22[7] = v4;
  sub_251037CE0();
  uint64_t WitnessTable = swift_getWitnessTable();
  v22[0] = swift_getWitnessTable();
  v22[1] = sub_250F49E90(&qword_269B132A0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C);
  uint64_t v20 = v22;
  swift_getWitnessTable();
  sub_251037FD0();
  uint64_t v5 = sub_2510385F0();
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v18 = v5;
  uint64_t v19 = v6;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v8 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = swift_checkMetadataState();
  sub_251038920();
  uint64_t v18 = v14;
  uint64_t v19 = v6;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_250F62918(v10, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, OpaqueTypeMetadata2);
  sub_250F62918(v13, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, OpaqueTypeMetadata2);
}

uint64_t sub_250F47A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037E80();
  double v5 = MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return sub_251037E90();
}

uint64_t sub_250F47B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_251037E80();
  double v6 = MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return sub_251037E90();
}

unint64_t sub_250F47C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v73 = a2;
  uint64_t v79 = a1;
  uint64_t v71 = a6;
  uint64_t v8 = sub_251037EF0();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v66 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_251037F10();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v65 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F4AA68(0, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8, MEMORY[0x263EFCC40]);
  uint64_t v70 = v12;
  uint64_t v69 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v68 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)v62 - v15;
  uint64_t v16 = sub_251037400();
  uint64_t v77 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = a4;
  sub_251038270();
  sub_251038270();
  uint64_t v19 = a5;
  v85[4] = a5;
  v85[5] = MEMORY[0x263F18BF0];
  v85[2] = swift_getWitnessTable();
  v85[3] = MEMORY[0x263F18C10];
  swift_getWitnessTable();
  uint64_t v20 = sub_251037E20();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v62 - v25;
  uint64_t v27 = sub_251039490();
  uint64_t v80 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v78 = (char *)v62 - v31;
  uint64_t v32 = sub_251037FF0();
  uint64_t v75 = v18;
  uint64_t v76 = v16;
  uint64_t v64 = v19;
  if (v32)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v29, 1, 1, v20);
    swift_getWitnessTable();
  }
  else
  {
    type metadata accessor for OvernightMetricsAxisStyle();
    sub_250F484A8();
    swift_getWitnessTable();
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v33(v26, v23, v20);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v21 + 8);
    v34(v23, v20);
    v33(v29, v26, v20);
    uint64_t v16 = v76;
    v34(v26, v20);
    uint64_t v18 = v75;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v29, 0, 1, v20);
  }
  uint64_t v35 = v80;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
  v36(v78, v29, v27);
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8);
  uint64_t v37 = v35 + 8;
  uint64_t v63 = v38;
  v38((uint64_t)v29, v27);
  uint64_t v39 = *(void *)((char *)v72
                  + *(int *)(type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0) + 20));
  unint64_t result = sub_251037FF0();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (result >= *(void *)(v39 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v18, v39+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * result, v16);
  sub_251037FF0();
  unint64_t result = sub_251037FE0();
  if (!__OFSUB__(result, 1))
  {
    uint64_t v80 = v37;
    v62[1] = sub_251038520();
    uint64_t v41 = sub_251038480();
    uint64_t v72 = v62;
    MEMORY[0x270FA5388](v41);
    uint64_t v42 = v77;
    uint64_t v43 = (uint64_t)v29;
    uint64_t v57 = v64;
    uint64_t v44 = (void (*)(uint64_t, char *, uint64_t))v36;
    sub_251037F00();
    uint64_t v79 = v20;
    sub_251037EE0();
    sub_250F3DF88();
    uint64_t v60 = v45;
    unint64_t v61 = sub_250F3DFE8();
    uint64_t v58 = sub_250F4A888;
    uint64_t v59 = &v54;
    LOBYTE(v57) = 1;
    uint64_t v56 = 0;
    char v55 = 1;
    uint64_t v54 = 0;
    uint64_t v46 = v67;
    sub_251037E10();
    uint64_t v47 = v78;
    v44(v43, v78, v27);
    v85[0] = v43;
    uint64_t v48 = v69;
    uint64_t v49 = (uint64_t)v68;
    uint64_t v50 = v70;
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v68, v46, v70);
    v85[1] = v49;
    v84[0] = v27;
    v84[1] = v50;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v82 = swift_getWitnessTable();
    uint64_t v83 = sub_250F49E90(&qword_269B132B0, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8);
    sub_250F48AAC(v85, 2uLL, (uint64_t)v84, v71);
    uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
    v51(v46, v50);
    uint64_t v52 = v47;
    uint64_t v53 = v63;
    v63((uint64_t)v52, v27);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v75, v76);
    v51((char *)v49, v50);
    return v53(v43, v27);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_250F484A8()
{
  uint64_t v0 = sub_251037EF0();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_251037F10();
  MEMORY[0x270FA5388](v1 - 8);
  sub_251038520();
  sub_251038480();
  sub_251038270();
  sub_251038270();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_251037F00();
  sub_251037EE0();
  return sub_251037E10();
}

uint64_t sub_250F48684@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a2;
  LODWORD(v47) = a1;
  uint64_t v6 = sub_251037380();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v41[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_2510373B0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v41[-v16];
  MEMORY[0x25338EDA0](v15);
  sub_251037370();
  sub_2510373A0();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v18(v13, v10);
  sub_250F49B5C(&qword_26B210A68, MEMORY[0x263F07258]);
  sub_2510373F0();
  v18(v17, v10);
  v51[0] = v52[0];
  v51[1] = v52[1];
  sub_250F3EB74();
  uint64_t v19 = sub_2510388A0();
  uint64_t v21 = v20;
  char v23 = v22;
  if (v47)
  {
    uint64_t v47 = type metadata accessor for OvernightMetricsAxisStyle();
    sub_250F4430C(v47, v52);
    uint64_t v24 = v52[30];
  }
  else
  {
    uint64_t v47 = type metadata accessor for OvernightMetricsAxisStyle();
    sub_250F4430C(v47, v52);
    uint64_t v24 = v52[29];
  }
  swift_retain();
  sub_250F2E048(v52);
  v52[0] = v24;
  uint64_t v48 = sub_251038860();
  uint64_t v49 = v25;
  uint64_t v46 = v26;
  int v45 = v27 & 1;
  sub_250F3EBC8(v19, v21, v23 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for OvernightMetricsAxisStyle();
  uint64_t v28 = v47;
  sub_250F4430C(v47, v51);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_250F2E048(v51);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v29 = v48;
  uint64_t v30 = v46;
  char v31 = v45;
  uint64_t v43 = sub_251038870();
  uint64_t v44 = v32;
  uint64_t v34 = v33;
  int v42 = v35;
  sub_250F3EBC8(v29, v30, v31);
  swift_release();
  swift_bridgeObjectRelease();
  LOBYTE(v29) = sub_2510386F0();
  sub_250F4430C(v28, v52);
  sub_250F2E048(v52);
  uint64_t result = sub_251038050();
  *(void *)a5 = v43;
  *(void *)(a5 + 8) = v34;
  *(unsigned char *)(a5 + 16) = v42 & 1;
  *(void *)(a5 + 24) = v44;
  *(unsigned char *)(a5 + 32) = v29;
  *(void *)(a5 + 40) = v37;
  *(void *)(a5 + 48) = v38;
  *(void *)(a5 + 56) = v39;
  *(void *)(a5 + 64) = v40;
  *(unsigned char *)(a5 + 72) = 0;
  return result;
}

uint64_t sub_250F48AAC@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a1;
  v33[0] = a4;
  v33[1] = a3;
  uint64_t v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v7 = 8 * a2;
  if (a2 == 1)
  {
    uint64_t TupleTypeMetadata = *v6;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v10 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v9 - (char *)v6) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v11 = (long long *)(v6 + 2);
      uint64_t v12 = v9 + 16;
      unint64_t v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v10 != a2)
      {
LABEL_9:
        unint64_t v15 = a2 - v10;
        uint64_t v16 = v10;
        uint64_t v17 = &v9[8 * v10];
        uint64_t v18 = &v6[v16];
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  if (a2)
  {
    uint64_t v24 = (int *)(v23 + 32);
    uint64_t v25 = (char **)((char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v26 = a2;
    do
    {
      if (a2 == 1) {
        int v27 = 0;
      }
      else {
        int v27 = *v24;
      }
      uint64_t v29 = *v6++;
      uint64_t v28 = v29;
      uint64_t v30 = &v21[v27];
      uint64_t v31 = *v5++;
      (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 16))(v30, v31);
      *v25++ = v30;
      v24 += 4;
      --v26;
    }
    while (v26);
  }
  return sub_251037CD0();
}

unint64_t sub_250F48CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v66 = a3;
  uint64_t v63 = a6;
  uint64_t v9 = sub_251037EF0();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v58 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_251037F10();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v57 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F4AA68(0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C, MEMORY[0x263EFCC40]);
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v60 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v59 = (char *)&v53 - v16;
  sub_251038270();
  sub_251038270();
  v73[4] = a5;
  v73[5] = MEMORY[0x263F18BF0];
  v73[2] = swift_getWitnessTable();
  v73[3] = MEMORY[0x263F18C10];
  swift_getWitnessTable();
  uint64_t v17 = sub_251037E20();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v53 - v22;
  uint64_t v24 = sub_251039490();
  uint64_t v68 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v26 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v67 = (char *)&v53 - v28;
  uint64_t v64 = a1;
  uint64_t v29 = sub_251037FF0();
  uint64_t v56 = a5;
  uint64_t v55 = a4;
  if (v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v26, 1, 1, v17);
    swift_getWitnessTable();
  }
  else
  {
    type metadata accessor for OvernightMetricsAxisStyle();
    sub_250F484A8();
    swift_getWitnessTable();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v30(v23, v20, v17);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v18 + 8);
    v31(v20, v17);
    v30(v26, v23, v17);
    v31(v23, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v26, 0, 1, v17);
  }
  uint64_t v32 = v68;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v33(v67, v26, v24);
  uint64_t v36 = *(void (**)(void, void))(v32 + 8);
  uint64_t v34 = v32 + 8;
  int v35 = (uint64_t (*)(char *, uint64_t))v36;
  v36(v26, v24);
  unint64_t result = sub_251037FF0();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *((void *)v66 + 2))
  {
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
    uint64_t v64 = v17;
    uint64_t v66 = v35;
    sub_251038520();
    uint64_t v38 = sub_251038480();
    uint64_t v54 = v33;
    uint64_t v68 = v34;
    MEMORY[0x270FA5388](v38);
    sub_251037F00();
    sub_251037EE0();
    uint64_t v51 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
    uint64_t v52 = sub_250F49E5C();
    uint64_t v49 = sub_250F4A870;
    uint64_t v50 = &v47;
    char v48 = 1;
    uint64_t v47 = 0;
    uint64_t v39 = v59;
    sub_251037E10();
    uint64_t v40 = v67;
    v54(v26, v67, v24);
    v73[0] = (uint64_t)v26;
    uint64_t v42 = (uint64_t)v60;
    uint64_t v41 = v61;
    uint64_t v43 = v62;
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v60, v39, v62);
    v73[1] = v42;
    v72[0] = v24;
    v72[1] = v43;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v70 = swift_getWitnessTable();
    uint64_t v71 = sub_250F49E90(&qword_269B132A0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C);
    sub_250F48AAC(v73, 2uLL, (uint64_t)v72, v63);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v41 + 8);
    v44(v39, v43);
    int v45 = v40;
    uint64_t v46 = v66;
    v66(v45, v24);
    v44((char *)v42, v43);
    return v46(v26, v24);
  }
  __break(1u);
  return result;
}

void *sub_250F4946C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250F4A930(a1, a3, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
  uint64_t v4 = type metadata accessor for OvernightMetricsAxisStyle();
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 36));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  uint64_t v9 = v5[3];
  uint64_t v10 = v5[4];
  uint64_t v11 = v5[5];
  uint64_t v13 = v5[6];
  uint64_t v12 = v5[7];
  uint64_t v14 = v5[8];
  sub_250F22234(*v5);
  sub_250F4430C(v4, __src);
  uint64_t v15 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  uint64_t v16 = (uint64_t *)(a3 + *(int *)(v15 + 20));
  *uint64_t v16 = v6;
  v16[1] = v7;
  v16[2] = v8;
  v16[3] = v9;
  v16[4] = v10;
  v16[5] = v11;
  v16[6] = v13;
  v16[7] = v12;
  v16[8] = v14;
  return memcpy((void *)(a3 + *(int *)(v15 + 24)), __src, 0x118uLL);
}

uint64_t sub_250F49580@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = sub_251038270();
  uint64_t v18 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v17 - v4;
  uint64_t v6 = sub_251038270();
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v17 = (char *)&v17 - v10;
  uint64_t v11 = type metadata accessor for OvernightMetricsAxisStyle();
  sub_251038A10();
  sub_2510386F0();
  sub_250F4430C(v11, v25);
  sub_250F2E048(v25);
  uint64_t v23 = a1;
  uint64_t v24 = MEMORY[0x263F18BF0];
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_251038A20();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v3);
  uint64_t v21 = WitnessTable;
  uint64_t v22 = MEMORY[0x263F18C10];
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v14 = v17;
  sub_250F62918(v8, v6, v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v19 + 8);
  v15(v8, v6);
  sub_250F62918(v14, v6, v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, v6);
}

uint64_t sub_250F49844()
{
  return sub_251038130();
}

uint64_t sub_250F49864()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_250F49880()
{
  if (!qword_269B13238)
  {
    sub_250F498E8();
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13238);
    }
  }
}

void sub_250F498E8()
{
  if (!qword_269B13240)
  {
    sub_250F49D90(255, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
    sub_251037740();
    sub_250F499EC();
    sub_250F49AD4();
    sub_250F49B5C(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13240);
    }
  }
}

void sub_250F499EC()
{
  if (!qword_269B13250)
  {
    sub_250F49D90(255, (unint64_t *)&qword_269B13258, (uint64_t (*)(uint64_t))sub_250F49A7C, MEMORY[0x263F1A418]);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13250);
    }
  }
}

void sub_250F49A7C()
{
  if (!qword_269B13260)
  {
    unint64_t v0 = sub_251039490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13260);
    }
  }
}

unint64_t sub_250F49AD4()
{
  unint64_t result = qword_269B13268;
  if (!qword_269B13268)
  {
    sub_250F49D90(255, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13268);
  }
  return result;
}

uint64_t sub_250F49B5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F49BA4()
{
  long long v3 = *(_OWORD *)(v0 + 256);
  long long v4 = *(_OWORD *)(v0 + 272);
  long long v2 = *(_OWORD *)(v0 + 224);
  sub_250F40D40(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 240),
    *(void *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(v0 + 288),
    *(unsigned char *)(v0 + 296));
  return swift_deallocObject();
}

uint64_t sub_250F49C38@<X0>(uint64_t *a1@<X8>)
{
  return sub_250F44074((const void *)(v1 + 16), a1);
}

unint64_t sub_250F49C40()
{
  unint64_t result = qword_269B13270;
  if (!qword_269B13270)
  {
    sub_250F499EC();
    sub_250F49CB8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13270);
  }
  return result;
}

unint64_t sub_250F49CB8()
{
  unint64_t result = qword_269B13278;
  if (!qword_269B13278)
  {
    sub_250F49D90(255, (unint64_t *)&qword_269B13258, (uint64_t (*)(uint64_t))sub_250F49A7C, MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13278);
  }
  return result;
}

void sub_250F49D48(uint64_t a1)
{
}

void sub_250F49D90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_250F49DF4()
{
  unint64_t result = qword_269B13288;
  if (!qword_269B13288)
  {
    sub_250F49D48(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13288);
  }
  return result;
}

uint64_t sub_250F49E5C()
{
  return sub_250F49B5C(&qword_269B13298, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel);
}

uint64_t sub_250F49E90(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F4AA68(255, a2, a3, a4, MEMORY[0x263EFCC40]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F49EF4(uint64_t a1)
{
  sub_250F49D90(0, &qword_269B13280, MEMORY[0x263EFCD98], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F49F80@<X0>(char *a1@<X8>)
{
  return sub_250F4527C(*(void *)(v1 + 32), *(char **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_250F49F8C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for OvernightMetricsAxisStyle();
  uint64_t v20 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v18 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0)
                                      - 8)
                          + 80);
  uint64_t v19 = (v20 + 32) & ~v20;
  uint64_t v4 = v0 + v19;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v0 + v19, v6);
  sub_250F49D48(0);
  uint64_t v17 = v8;
  v7(v0 + v19 + *(int *)(v8 + 36), v6);
  if (EnumCaseMultiPayload != 1) {
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + v2[9]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + v2[10], v1);
  uint64_t v9 = v4 + v2[11];
  long long v15 = *(_OWORD *)(v9 + 240);
  long long v16 = *(_OWORD *)(v9 + 256);
  long long v14 = *(_OWORD *)(v9 + 208);
  sub_250F40D40(*(void *)v9, *(void *)(v9 + 8), *(void *)(v9 + 16), *(void *)(v9 + 24), *(void *)(v9 + 32), *(void *)(v9 + 40), *(void *)(v9 + 48), *(void *)(v9 + 56), *(void *)(v9 + 64), *(void *)(v9 + 72), *(void *)(v9 + 80), *(void *)(v9 + 88), *(void *)(v9 + 96), *(void *)(v9 + 104), *(void *)(v9 + 112), *(void *)(v9 + 120), *(void *)(v9 + 128), *(void *)(v9 + 136), *(void *)(v9 + 144),
    *(void *)(v9 + 152),
    *(void *)(v9 + 160),
    *(void *)(v9 + 168),
    *(void *)(v9 + 176),
    *(void *)(v9 + 184),
    *(void *)(v9 + 192),
    *(void *)(v9 + 200),
    v14,
    *((uint64_t *)&v14 + 1),
    *(void *)(v9 + 224),
    *(void *)(v9 + 232),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    *(void *)(v9 + 272),
    *(unsigned char *)(v9 + 280));
  uint64_t v10 = v4 + v2[12];
  sub_250F49D90(0, (unint64_t *)&qword_269B13230, MEMORY[0x263F07920], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_2510374F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = v0 + ((v19 + v18 + v3) & ~v3);
  v7(v12, v6);
  v7(v12 + *(int *)(v17 + 36), v6);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_250F4A304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for OvernightMetricsAxisStyle() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0) - 8);
  uint64_t v11 = (void *)(v2 + ((v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)));
  return sub_250F47C10(a1, v2 + v8, v11, v5, v6, a2);
}

uint64_t sub_250F4A404(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F4A464(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F4A4CC(uint64_t a1)
{
  return sub_250F476DC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_250F4A4D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for OvernightMetricsAxisStyle();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80));
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = sub_251037400();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v3, v5);
  sub_250F49D48(0);
  v6(v3 + *(int *)(v7 + 36), v5);
  if (EnumCaseMultiPayload == 1) {
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + v2[9]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[10], v1);
  uint64_t v8 = v3 + v2[11];
  long long v13 = *(_OWORD *)(v8 + 240);
  long long v14 = *(_OWORD *)(v8 + 256);
  long long v12 = *(_OWORD *)(v8 + 208);
  sub_250F40D40(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(void *)(v8 + 24), *(void *)(v8 + 32), *(void *)(v8 + 40), *(void *)(v8 + 48), *(void *)(v8 + 56), *(void *)(v8 + 64), *(void *)(v8 + 72), *(void *)(v8 + 80), *(void *)(v8 + 88), *(void *)(v8 + 96), *(void *)(v8 + 104), *(void *)(v8 + 112), *(void *)(v8 + 120), *(void *)(v8 + 128), *(void *)(v8 + 136), *(void *)(v8 + 144),
    *(void *)(v8 + 152),
    *(void *)(v8 + 160),
    *(void *)(v8 + 168),
    *(void *)(v8 + 176),
    *(void *)(v8 + 184),
    *(void *)(v8 + 192),
    *(void *)(v8 + 200),
    v12,
    *((uint64_t *)&v12 + 1),
    *(void *)(v8 + 224),
    *(void *)(v8 + 232),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    *(void *)(v8 + 272),
    *(unsigned char *)(v8 + 280));
  uint64_t v9 = v3 + v2[12];
  sub_250F49D90(0, (unint64_t *)&qword_269B13230, MEMORY[0x263F07920], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_2510374F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_250F4A7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for OvernightMetricsAxisStyle() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v2 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_250F48CB4(a1, v2 + v8, v9, v5, v6, a2);
}

void *sub_250F4A870@<X0>(uint64_t a1@<X8>)
{
  return sub_250F4946C(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_250F4A87C@<X0>(uint64_t a1@<X8>)
{
  return sub_250F49580(*(void *)(v1 + 24), a1);
}

uint64_t sub_250F4A888@<X0>(uint64_t a1@<X8>)
{
  return sub_250F48684(*(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_250F4A89C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v6 = *(unsigned char *)(a1 + 280);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    *(void *)(a1 + 272),
    v6);
  return a1;
}

uint64_t sub_250F4A930(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

unint64_t sub_250F4A9CC()
{
  unint64_t result = qword_269B132B8;
  if (!qword_269B132B8)
  {
    sub_250F4AA68(255, &qword_269B132C0, (uint64_t (*)(uint64_t))sub_250F498E8, (uint64_t (*)(void))sub_250F4AAE8, MEMORY[0x263F1B6F8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B132B8);
  }
  return result;
}

void sub_250F4AA68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t sub_250F4AAE8()
{
  unint64_t result = qword_269B132C8;
  if (!qword_269B132C8)
  {
    sub_250F498E8();
    sub_250F49C40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B132C8);
  }
  return result;
}

uint64_t sub_250F4AB58()
{
  type metadata accessor for OvernightMetricsAxisStyle();
  swift_getWitnessTable();
  sub_2510385C0();
  sub_251037EC0();
  sub_251037ED0();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  sub_250F49D48(255);
  swift_getOpaqueTypeConformance2();
  sub_250F49DF4();
  swift_getOpaqueTypeMetadata2();
  sub_251038270();
  sub_251038270();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_251037E20();
  sub_251039490();
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263EFCC40];
  sub_250F4AA68(255, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C, MEMORY[0x263EFCC40]);
  sub_251037CE0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_250F49E90(&qword_269B132A0, &qword_269B13290, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_250F49E5C);
  swift_getWitnessTable();
  sub_251037FD0();
  sub_2510385F0();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getWitnessTable();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  sub_251037CE0();
  sub_251037EA0();
  sub_250F4AA68(255, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8, v0);
  sub_251037CE0();
  sub_250F49E90(&qword_269B132B0, &qword_269B132A8, (uint64_t (*)(uint64_t))sub_250F3DF88, (uint64_t (*)(void))sub_250F3DFE8);
  swift_getWitnessTable();
  sub_251037FD0();
  sub_251037EA0();
  sub_251039490();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F4B1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t sub_250F4B1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B132D0);
}

uint64_t *sub_250F4B224(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037400();
    unint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250F49D48(0);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_250F4B324(uint64_t a1)
{
  uint64_t v2 = sub_251037400();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_250F49D48(0);
  v3(a1 + *(int *)(v4 + 36), v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_250F4B3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250F49D48(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_250F4B47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250F49D48(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_250F4B538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250F49D48(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_250F4B5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250F49D48(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_250F4B698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F4B6AC);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F49D48(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_250F4B770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F4B784);
}

void __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250F49D48(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B132E0);
}

void sub_250F4B864()
{
  sub_250F49D48(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_250F4B8FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250F49D48(0);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    if (EnumCaseMultiPayload == 1) {
      uint64_t v10 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    }
    else {
      uint64_t v10 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    }
    *(uint64_t *)((char *)a1 + *(int *)(v10 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v10 + 20));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_250F4BA5C(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = sub_251037400();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  sub_250F49D48(0);
  v4(a1 + *(int *)(v5 + 36), v3);
  if (EnumCaseMultiPayload == 1) {
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_250F4BB24(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = sub_251037400();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  sub_250F49D48(0);
  v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
  if (EnumCaseMultiPayload == 1) {
    uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_250F4BC1C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_250F4E4DC(a1, type metadata accessor for OvernightMetricsAxisConfiguration);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = sub_251037400();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    sub_250F49D48(0);
    v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
    if (EnumCaseMultiPayload == 1) {
      uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    }
    else {
      uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    }
    *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B132F0);
}

uint64_t sub_250F4BD58(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = sub_251037400();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  sub_250F49D48(0);
  v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
  if (EnumCaseMultiPayload == 1) {
    uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else {
    uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_250F4BE4C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_250F4E4DC(a1, type metadata accessor for OvernightMetricsAxisConfiguration);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = sub_251037400();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    sub_250F49D48(0);
    v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
    if (EnumCaseMultiPayload == 1) {
      uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    }
    else {
      uint64_t v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    }
    *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_250F4BF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_250F4BF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_250F4BFB8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_250F4BFC8()
{
  uint64_t result = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_250F4C090(uint64_t a1, uint64_t a2)
{
  return sub_250F4D6F8(a1, a2, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration, sub_250F84984) & 1;
}

uint64_t sub_250F4C0D4(uint64_t a1, uint64_t a2)
{
  return sub_250F4D6F8(a1, a2, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration, sub_250F84C40) & 1;
}

uint64_t sub_250F4C11C@<X0>(void *__src@<X7>, char *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X6>, uint64_t a9@<X8>)
{
  char v16 = *a2;
  memcpy(v21, __src, 0x118uLL);
  if (v16)
  {
    sub_250F4E4DC(a3, (uint64_t (*)(void))sub_250F49D48);
    swift_bridgeObjectRelease();
    sub_250F2E048(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_250F4D9A4(a4, a9, (uint64_t (*)(void))sub_250F49D48);
    uint64_t v17 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else
  {
    uint64_t v18 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v18);
    v20[2] = a8;
    v20[3] = v21;
    a5 = sub_250F4DA14(a7, a6, (void (*)(unsigned char *, unsigned char *))sub_250F4DA0C, (uint64_t)v20);
    sub_250F4E4DC(a4, (uint64_t (*)(void))sub_250F49D48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_250F2E048(v21);
    sub_250F4D9A4(a3, a9, (uint64_t (*)(void))sub_250F49D48);
    uint64_t v17 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  *(void *)(a9 + *(int *)(v17 + 20)) = a5;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_250F4C2F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v68 = a4;
  uint64_t v82 = a2;
  uint64_t v8 = sub_251037400();
  uint64_t v79 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v78 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v76 = (char *)&v66 - v11;
  uint64_t v12 = sub_251037740();
  uint64_t v77 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v84 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v75 = (char *)&v66 - v15;
  uint64_t v16 = sub_2510378C0();
  uint64_t v71 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v70 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v18 = *(void *)(v73 - 8);
  MEMORY[0x270FA5388](v73);
  uint64_t v69 = (uint64_t)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v66 - v21;
  sub_250F4E3A0(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](a3);
  uint64_t v74 = (uint64_t)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  unint64_t v26 = (char *)&v66 - v25;
  v29.n128_f64[0] = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v66 - v30;
  uint64_t v32 = *(void *)(v28 + 16);
  uint64_t v83 = (char *)&v66 - v30;
  uint64_t v80 = v8;
  uint64_t v81 = a5;
  if (v32)
  {
    uint64_t v66 = v28;
    uint64_t v67 = v16;
    uint64_t v33 = v28 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v72 = v18;
    uint64_t v34 = *(void *)(v18 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_250F4E474(v33, (uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_250F4D8F8(&qword_26B210A98, MEMORY[0x263F42CD0]);
      sub_251039240();
      sub_251039240();
      if (v86 == v85) {
        break;
      }
      sub_250F4E4DC((uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
      v33 += v34;
      if (!--v32)
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = 1;
        uint64_t v36 = v82;
        uint64_t v31 = v83;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v31 = v83;
    sub_250F4D9A4((uint64_t)v22, (uint64_t)v83, type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t v35 = 0;
    uint64_t v36 = v82;
LABEL_8:
    uint64_t v16 = v67;
    uint64_t v38 = v72;
    uint64_t v37 = v73;
  }
  else
  {
    uint64_t v35 = 1;
    uint64_t v37 = v73;
    uint64_t v38 = v18;
    uint64_t v36 = v82;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v38 + 56))(v31, v35, 1, v37, v29);
  sub_250F4E53C((uint64_t)v31, (uint64_t)v26);
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  uint64_t v39 = v38 + 48;
  uint64_t v40 = v41;
  if (v41((uint64_t)v26, 1, v37) == 1)
  {
    sub_250F4E5D0((uint64_t)v26, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t v42 = sub_251038A90();
  }
  else
  {
    if (v26[*(int *)(v37 + 32) + 8])
    {
      uint64_t v42 = sub_251038A90();
    }
    else
    {
      uint64_t v72 = v39;
      uint64_t v43 = *(void *)(v68 + 72);
      uint64_t v42 = *(void *)(v68 + 80);
      if (sub_2510378A0())
      {
        swift_retain();
      }
      else
      {
        swift_retain();
        uint64_t v42 = v43;
      }
      uint64_t v36 = v82;
    }
    sub_250F4E4DC((uint64_t)v26, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  uint64_t v44 = (uint64_t)v31;
  uint64_t v45 = v74;
  sub_250F4E53C(v44, v74);
  int v46 = v40(v45, 1, v37);
  uint64_t v73 = v42;
  uint64_t v47 = v36;
  if (v46 == 1)
  {
    sub_250F4E5D0(v45, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint);
    LODWORD(v74) = 0;
  }
  else
  {
    uint64_t v48 = v69;
    sub_250F4D9A4(v45, v69, type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t v50 = v70;
    uint64_t v49 = v71;
    (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, *MEMORY[0x263F42E28], v16);
    int v51 = sub_2510378B0();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v16);
    sub_250F4E4DC(v48, type metadata accessor for IndividualOvernightMetricChartPoint);
    LODWORD(v74) = v51 ^ 1;
  }
  uint64_t v52 = v77;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v54 = v75;
  v53(v75, a1, v12);
  uint64_t v55 = v79;
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
  uint64_t v57 = v76;
  uint64_t v58 = v47;
  uint64_t v59 = v80;
  v56(v76, v58, v80);
  v53(v84, (uint64_t)v54, v12);
  uint64_t v60 = v78;
  v56(v78, (uint64_t)v57, v59);
  uint64_t v61 = SleepingSampleDataType.preferredImage.getter();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v59);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v12);
  uint64_t v62 = v81;
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v81, v84, v12);
  uint64_t v63 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  char v64 = v74;
  *(unsigned char *)(v62 + v63[5]) = v74 & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v62 + v63[6], v60, v59);
  *(void *)(v62 + v63[7]) = v61;
  *(void *)(v62 + v63[8]) = v73;
  *(unsigned char *)(v62 + v63[9]) = (v64 & 1) == 0;
  return sub_250F4E5D0((uint64_t)v83, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_250F4CB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v31 = a2;
  uint64_t v28 = sub_251037400();
  uint64_t v32 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v3;
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  uint64_t v12 = (int *)(v11 - 8);
  uint64_t v29 = *(void *)(v11 - 8);
  uint64_t v30 = v29;
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *MEMORY[0x263F42CC8];
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 104);
  v17(v10, v16, v4, v13);
  uint64_t v18 = v3;
  uint64_t v19 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v18, v33, v28);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v7, v16, v4);
  uint64_t v20 = SleepingSampleDataType.preferredImage.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v21 = sub_251038AB0();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v10, v4);
  v15[v12[7]] = 0;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v15[v12[8]], v27, v19);
  *(void *)&v15[v12[9]] = v20;
  *(void *)&v15[v12[10]] = v21;
  v15[v12[11]] = 0;
  sub_250F4E3A0(0, &qword_269B13300, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label, MEMORY[0x263F8E0F8]);
  unint64_t v22 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25103AD40;
  sub_250F4D9A4((uint64_t)v15, v23 + v22, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
  uint64_t v24 = v31;
  sub_250F4E474(v33, v31, (uint64_t (*)(void))sub_250F49D48);
  *(void *)(v24 + *(int *)(type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0) + 20)) = v23;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B13318);
}

uint64_t sub_250F4CED4(uint64_t a1, uint64_t a2)
{
  sub_251037740();
  sub_250F4D8F8(&qword_26B210A98, MEMORY[0x263F42CD0]);
  sub_251039240();
  sub_251039240();
  if (v9 == v8
    && (uint64_t v4 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0),
        *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20)))
    && (uint64_t v5 = v4, (sub_2510373D0() & 1) != 0)
    && (sub_251038B60() & 1) != 0
    && (sub_251038A70() & 1) != 0)
  {
    char v6 = *(unsigned char *)(a1 + *(int *)(v5 + 36)) ^ *(unsigned char *)(a2 + *(int *)(v5 + 36)) ^ 1;
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_250F4D00C(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a1;
  uint64_t v54 = (char *)a2;
  uint64_t v52 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  MEMORY[0x270FA5388](v52);
  int v51 = (char *)v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F49D48(0);
  v48[1] = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v49 = (uint64_t)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v50 = (char *)v48 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v48 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v48 - v11;
  uint64_t v13 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v48 - v20;
  sub_250F4D940();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t)&v24[*(int *)(v25 + 56)];
  sub_250F4E474(v53, (uint64_t)v24, type metadata accessor for OvernightMetricsAxisConfiguration);
  sub_250F4E474((uint64_t)v54, v26, type metadata accessor for OvernightMetricsAxisConfiguration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = (uint64_t)v50;
    uint64_t v27 = (uint64_t)v51;
    uint64_t v29 = v52;
    sub_250F4E474((uint64_t)v24, (uint64_t)v18, type metadata accessor for OvernightMetricsAxisConfiguration);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_250F4D9A4(v26, v27, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
      sub_251037400();
      sub_250F4D8F8(&qword_269B13308, MEMORY[0x263F07490]);
      char v30 = sub_2510390F0();
      uint64_t v31 = v28;
      sub_250F4E474((uint64_t)v18, v28, (uint64_t (*)(void))sub_250F49D48);
      uint64_t v32 = v49;
      sub_250F4E474(v27, v49, (uint64_t (*)(void))sub_250F49D48);
      if (v30)
      {
        char v33 = sub_2510390F0();
        sub_250F4E4DC(v32, (uint64_t (*)(void))sub_250F49D48);
        sub_250F4E4DC(v31, (uint64_t (*)(void))sub_250F49D48);
        if ((v33 & 1) != 0
          && (sub_250F84C40(*(void *)&v18[*(int *)(v29 + 20)], *(void *)(v27 + *(int *)(v29 + 20))) & 1) != 0)
        {
          uint64_t v34 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
          sub_250F4E4DC(v27, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
          uint64_t v35 = (uint64_t)v18;
LABEL_15:
          sub_250F4E4DC(v35, v34);
          uint64_t v39 = 1;
LABEL_21:
          uint64_t v40 = type metadata accessor for OvernightMetricsAxisConfiguration;
          goto LABEL_22;
        }
      }
      else
      {
        sub_250F4E4DC(v32, (uint64_t (*)(void))sub_250F49D48);
        sub_250F4E4DC(v31, (uint64_t (*)(void))sub_250F49D48);
      }
      uint64_t v45 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
      sub_250F4E4DC(v27, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
      uint64_t v46 = (uint64_t)v18;
      goto LABEL_20;
    }
    uint64_t v37 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
    uint64_t v38 = (uint64_t)v18;
  }
  else
  {
    uint64_t v53 = v13;
    uint64_t v54 = v9;
    uint64_t v36 = (uint64_t)v12;
    sub_250F4E474((uint64_t)v24, (uint64_t)v21, type metadata accessor for OvernightMetricsAxisConfiguration);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v41 = v24;
      sub_250F4D9A4(v26, (uint64_t)v15, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
      sub_251037400();
      sub_250F4D8F8(&qword_269B13308, MEMORY[0x263F07490]);
      char v42 = sub_2510390F0();
      sub_250F4E474((uint64_t)v21, v36, (uint64_t (*)(void))sub_250F49D48);
      uint64_t v43 = (uint64_t)v54;
      sub_250F4E474((uint64_t)v15, (uint64_t)v54, (uint64_t (*)(void))sub_250F49D48);
      if (v42)
      {
        char v44 = sub_2510390F0();
        sub_250F4E4DC(v43, (uint64_t (*)(void))sub_250F49D48);
        sub_250F4E4DC(v36, (uint64_t (*)(void))sub_250F49D48);
        uint64_t v24 = v41;
        if ((v44 & 1) != 0
          && (sub_250F84984(*(void *)&v21[*(int *)(v53 + 20)], *(void *)&v15[*(int *)(v53 + 20)]) & 1) != 0)
        {
          uint64_t v34 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
          sub_250F4E4DC((uint64_t)v15, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
          uint64_t v35 = (uint64_t)v21;
          goto LABEL_15;
        }
      }
      else
      {
        sub_250F4E4DC(v43, (uint64_t (*)(void))sub_250F49D48);
        sub_250F4E4DC(v36, (uint64_t (*)(void))sub_250F49D48);
        uint64_t v24 = v41;
      }
      uint64_t v45 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
      sub_250F4E4DC((uint64_t)v15, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
      uint64_t v46 = (uint64_t)v21;
LABEL_20:
      sub_250F4E4DC(v46, v45);
      uint64_t v39 = 0;
      goto LABEL_21;
    }
    uint64_t v37 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
    uint64_t v38 = (uint64_t)v21;
  }
  sub_250F4E4DC(v38, v37);
  uint64_t v39 = 0;
  uint64_t v40 = (uint64_t (*)(void))sub_250F4D940;
LABEL_22:
  sub_250F4E4DC((uint64_t)v24, v40);
  return v39;
}

uint64_t sub_250F4D6F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void, void))
{
  uint64_t v21 = a4;
  sub_250F49D48(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - v11;
  sub_251037400();
  sub_250F4D8F8(&qword_269B13308, MEMORY[0x263F07490]);
  char v13 = sub_2510390F0();
  sub_250F4E474(a1, (uint64_t)v12, (uint64_t (*)(void))sub_250F49D48);
  sub_250F4E474(a2, (uint64_t)v9, (uint64_t (*)(void))sub_250F49D48);
  if ((v13 & 1) == 0)
  {
    sub_250F4E4DC((uint64_t)v9, (uint64_t (*)(void))sub_250F49D48);
    sub_250F4E4DC((uint64_t)v12, (uint64_t (*)(void))sub_250F49D48);
    goto LABEL_5;
  }
  uint64_t v14 = a3;
  uint64_t v15 = v21;
  char v16 = sub_2510390F0();
  sub_250F4E4DC((uint64_t)v9, (uint64_t (*)(void))sub_250F49D48);
  sub_250F4E4DC((uint64_t)v12, (uint64_t (*)(void))sub_250F49D48);
  if ((v16 & 1) == 0)
  {
LABEL_5:
    char v18 = 0;
    return v18 & 1;
  }
  uint64_t v17 = v14(0);
  char v18 = v15(*(void *)(a1 + *(int *)(v17 + 20)), *(void *)(a2 + *(int *)(v17 + 20)));
  return v18 & 1;
}

uint64_t sub_250F4D8F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250F4D940()
{
  if (!qword_269B13310)
  {
    type metadata accessor for OvernightMetricsAxisConfiguration(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B13310);
    }
  }
}

uint64_t sub_250F4D9A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F4DA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_250F4C2F0(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t sub_250F4DA14(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, unsigned char *), uint64_t a4)
{
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  uint64_t v6 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  uint64_t v72 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v80 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v62 = &v57[-v9];
  sub_250F4E3A0(0, &qword_26B210A78, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v57[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  uint64_t v61 = &v57[-v14];
  uint64_t v15 = sub_251037400();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v70 = &v57[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v18);
  uint64_t v60 = &v57[-v19];
  uint64_t v82 = sub_251037740();
  uint64_t v20 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v81 = &v57[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v22);
  uint64_t v63 = &v57[-v23];
  sub_250F4E404();
  uint64_t v71 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = &v57[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v27);
  uint64_t v59 = &v57[-v28];
  MEMORY[0x270FA5388](v29);
  uint64_t v58 = &v57[-v30];
  unint64_t v31 = *(void *)(a2 + 16);
  uint64_t v77 = *(unsigned char **)(a1 + 16);
  uint64_t v78 = (unsigned char *)v31;
  if (v31 >= (unint64_t)v77) {
    int64_t v32 = (int64_t)v77;
  }
  else {
    int64_t v32 = v31;
  }
  uint64_t v83 = MEMORY[0x263F8EE78];
  sub_250FF1E6C(0, v32, 0);
  uint64_t v75 = a2;
  uint64_t v76 = v20;
  int64_t v79 = v32;
  if (v32)
  {
    uint64_t v68 = v16 + 16;
    uint64_t v69 = v20 + 16;
    uint64_t v66 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 48);
    uint64_t v67 = (void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 56);
    char v33 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32);
    char v64 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = 0;
    uint64_t v65 = a1;
    while (v77 != v34)
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v76 + 16))(v81, a1+ ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))+ *(void *)(v76 + 72) * (void)v34, v82);
      if (v78 == v34) {
        goto LABEL_34;
      }
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v16 + 16))(v12, a2+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * (void)v34, v15);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15) == 1) {
        goto LABEL_37;
      }
      uint64_t v35 = *v33;
      uint64_t v36 = v70;
      (*v33)(v70, v12, v15);
      uint64_t v37 = &v26[*(int *)(v71 + 48)];
      (*v64)(v26, v81, v82);
      v35(v37, v36, v15);
      v73(v26, v37);
      sub_250F4E4DC((uint64_t)v26, (uint64_t (*)(void))sub_250F4E404);
      uint64_t v38 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_250FF1E6C(0, *(void *)(v38 + 16) + 1, 1);
        uint64_t v38 = v83;
      }
      unint64_t v40 = *(void *)(v38 + 16);
      unint64_t v39 = *(void *)(v38 + 24);
      if (v40 >= v39 >> 1)
      {
        sub_250FF1E6C(v39 > 1, v40 + 1, 1);
        uint64_t v38 = v83;
      }
      ++v34;
      *(void *)(v38 + 16) = v40 + 1;
      sub_250F4D9A4((uint64_t)v80, v38+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v40, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      a1 = v65;
      a2 = v75;
      if ((unsigned char *)v79 == v34) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_16:
    uint64_t v12 = v77;
    uint64_t v41 = v76;
    int64_t v42 = v79;
    if (v77 <= v78)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v83;
    }
    uint64_t v80 = (unsigned char *)(v16 + 56);
    uint64_t v81 = (unsigned char *)(v76 + 16);
    uint64_t v68 = v16 + 48;
    uint64_t v69 = v16 + 16;
    uint64_t v66 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v76 + 32);
    uint64_t v67 = (void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 32);
    uint64_t v43 = v78;
    if (v79 > (uint64_t)v78) {
      uint64_t v43 = (unsigned char *)v79;
    }
    uint64_t v70 = v43;
    char v44 = v67;
    while (v12 != (unsigned char *)v42)
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v41 + 16))(v63, a1+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v42, v82);
      if (v78 == (unsigned char *)v42)
      {
        uint64_t v45 = (uint64_t)v61;
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))v80)(v61, 1, 1, v15);
LABEL_31:
        (*(void (**)(unsigned char *, uint64_t))(v41 + 8))(v63, v82);
        sub_250F4E5D0(v45, &qword_26B210A78, MEMORY[0x263F07490]);
        goto LABEL_32;
      }
      uint64_t v45 = (uint64_t)v61;
      if (v70 == (unsigned char *)v42) {
        goto LABEL_36;
      }
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v16 + 16))(v61, a2+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v42, v15);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v45, 1, v15) == 1) {
        goto LABEL_31;
      }
      int64_t v79 = v42;
      uint64_t v46 = (void (*)(unsigned char *, unsigned char *, uint64_t))*v44;
      uint64_t v47 = v60;
      (*v44)(v60, v45, v15);
      uint64_t v48 = v71;
      uint64_t v49 = (uint64_t)v59;
      uint64_t v50 = &v59[*(int *)(v71 + 48)];
      (*v66)(v59, v63, v82);
      v46(v50, v47, v15);
      int v51 = v58;
      sub_250F4D9A4(v49, (uint64_t)v58, (uint64_t (*)(void))sub_250F4E404);
      v73(v51, &v51[*(int *)(v48 + 48)]);
      sub_250F4E4DC((uint64_t)v51, (uint64_t (*)(void))sub_250F4E404);
      uint64_t v52 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_250FF1E6C(0, *(void *)(v52 + 16) + 1, 1);
        uint64_t v52 = v83;
      }
      uint64_t v12 = v77;
      unint64_t v54 = *(void *)(v52 + 16);
      unint64_t v53 = *(void *)(v52 + 24);
      int64_t v55 = v79;
      if (v54 >= v53 >> 1)
      {
        sub_250FF1E6C(v53 > 1, v54 + 1, 1);
        uint64_t v52 = v83;
      }
      int64_t v42 = v55 + 1;
      *(void *)(v52 + 16) = v54 + 1;
      sub_250F4D9A4((uint64_t)v62, v52+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v54, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      a2 = v75;
      uint64_t v41 = v76;
      if (v12 == (unsigned char *)v42) {
        goto LABEL_32;
      }
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v81, v82);
  uint64_t result = sub_250F4E5D0((uint64_t)v12, &qword_26B210A78, MEMORY[0x263F07490]);
  __break(1u);
  return result;
}

void sub_250F4E3A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250F4E404()
{
  if (!qword_26B210AB0)
  {
    sub_251037740();
    sub_251037400();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B210AB0);
    }
  }
}

uint64_t sub_250F4E474(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F4E4DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F4E53C(uint64_t a1, uint64_t a2)
{
  sub_250F4E3A0(0, qword_26B210B40, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F4E5D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250F4E3A0(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void *sub_250F4E640(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_251037740();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)v4 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_251037400();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)v4 + v12) = *(void *)((char *)a2 + v12);
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_250F4E780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_250F4E848(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_250F4E93C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_250F4EA4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_250F4EB34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_251037400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_250F4EC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F4EC44);
}

uint64_t sub_250F4EC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037740();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_251037400();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_250F4ED58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F4ED6C);
}

uint64_t sub_250F4ED6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_251037400();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_250F4EE7C()
{
  uint64_t result = sub_251037740();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_251037400();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_250F4EF5C(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v18 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250F26E08();
    uint64_t v77 = v9;
    int64_t v79 = v8;
    uint64_t v80 = v7;
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    uint64_t v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&a1[v10[5]] = *(void *)&a2[v10[5]];
    *(void *)&a1[v10[6]] = *(void *)&a2[v10[6]];
    uint64_t v78 = v10;
    *(void *)&a1[v10[7]] = *(void *)&a2[v10[7]];
    uint64_t v11 = a3[5];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = *(void *)&a2[v11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14)
    {
      uint64_t v15 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = v14;
      *((void *)v12 + 1) = v15;
      long long v16 = *((_OWORD *)v13 + 2);
      *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
      *((_OWORD *)v12 + 2) = v16;
      *((_OWORD *)v12 + 3) = *((_OWORD *)v13 + 3);
      *((void *)v12 + 8) = *((void *)v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v19 = *((_OWORD *)v13 + 3);
      *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
      *((_OWORD *)v12 + 3) = v19;
      *((void *)v12 + 8) = *((void *)v13 + 8);
      long long v20 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v20;
    }
    uint64_t v21 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v21] = a2[v21];
    uint64_t v22 = a3[9];
    uint64_t v81 = a3;
    uint64_t v82 = a1;
    a1[a3[8]] = a2[a3[8]];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    *(void *)&a1[v22] = *(void *)&a2[v22];
    uint64_t v25 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v26 = v25[5];
    uint64_t v27 = &v23[v26];
    uint64_t v28 = &v24[v26];
    uint64_t v29 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v76 = *((void *)v29 - 1);
    uint64_t v30 = *(unsigned int (**)(char *, uint64_t, int *))(v76 + 48);
    swift_bridgeObjectRetain();
    if (v30(v28, 1, v29))
    {
      sub_250F580DC(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v79(v27, v28, v80);
      uint64_t v32 = v29[5];
      char v33 = &v27[v32];
      uint64_t v34 = &v28[v32];
      v79(&v27[v32], &v28[v32], v80);
      v79(&v33[*(int *)(v77 + 36)], &v34[*(int *)(v77 + 36)], v80);
      *(void *)&v33[v78[5]] = *(void *)&v34[v78[5]];
      *(void *)&v33[v78[6]] = *(void *)&v34[v78[6]];
      *(void *)&v33[v78[7]] = *(void *)&v34[v78[7]];
      uint64_t v35 = v29[6];
      uint64_t v36 = &v27[v35];
      uint64_t v37 = &v28[v35];
      v36[16] = v37[16];
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      v27[v29[7]] = v28[v29[7]];
      v27[v29[8]] = v28[v29[8]];
      v27[v29[9]] = v28[v29[9]];
      uint64_t v38 = v29[10];
      unint64_t v39 = &v27[v38];
      unint64_t v40 = &v28[v38];
      uint64_t v41 = *((void *)v40 + 1);
      *(void *)unint64_t v39 = *(void *)v40;
      *((void *)v39 + 1) = v41;
      uint64_t v42 = v29[11];
      uint64_t v43 = &v27[v42];
      char v44 = &v28[v42];
      uint64_t v45 = *((void *)v44 + 1);
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = v45;
      uint64_t v46 = *(void (**)(char *, void, uint64_t, int *))(v76 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46(v27, 0, 1, v29);
    }
    *(_OWORD *)&v23[v25[6]] = *(_OWORD *)&v24[v25[6]];
    uint64_t v47 = v25[7];
    uint64_t v48 = &v23[v47];
    uint64_t v49 = &v24[v47];
    long long v50 = *((_OWORD *)v49 + 1);
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    *((_OWORD *)v48 + 1) = v50;
    *((void *)v48 + 10) = *((void *)v49 + 10);
    long long v51 = *((_OWORD *)v49 + 4);
    long long v52 = *((_OWORD *)v49 + 2);
    *((_OWORD *)v48 + 3) = *((_OWORD *)v49 + 3);
    *((_OWORD *)v48 + 4) = v51;
    *((_OWORD *)v48 + 2) = v52;
    *(void *)&v23[v25[8]] = *(void *)&v24[v25[8]];
    *(void *)&v23[v25[9]] = *(void *)&v24[v25[9]];
    uint64_t v53 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    unint64_t v54 = &v23[v53];
    int64_t v55 = &v24[v53];
    uint64_t v56 = *((void *)v55 + 1);
    *(void *)unint64_t v54 = *(void *)v55;
    *((void *)v54 + 1) = v56;
    uint64_t v57 = *((void *)v55 + 3);
    *((void *)v54 + 2) = *((void *)v55 + 2);
    *((void *)v54 + 3) = v57;
    *((void *)v54 + 4) = *((void *)v55 + 4);
    *(_OWORD *)(v54 + 40) = *(_OWORD *)(v55 + 40);
    *(_OWORD *)(v54 + 56) = *(_OWORD *)(v55 + 56);
    *(_OWORD *)(v54 + 72) = *(_OWORD *)(v55 + 72);
    *(_OWORD *)(v54 + 88) = *(_OWORD *)(v55 + 88);
    *(_OWORD *)(v54 + 104) = *(_OWORD *)(v55 + 104);
    uint64_t v58 = v81[10];
    uint64_t v59 = (char *)v82 + v58;
    uint64_t v60 = &a2[v58];
    uint64_t v61 = *(void *)&a2[v58];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v61)
    {
      uint64_t v62 = *((void *)v60 + 1);
      uint64_t v63 = *((void *)v60 + 2);
      *(void *)uint64_t v59 = v61;
      *((void *)v59 + 1) = v62;
      *((void *)v59 + 2) = v63;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
      *((void *)v59 + 2) = *((void *)v60 + 2);
    }
    v59[24] = v60[24];
    v59[32] = v60[32];
    uint64_t v64 = *((void *)v60 + 6);
    *((void *)v59 + 5) = *((void *)v60 + 5);
    *((void *)v59 + 6) = v64;
    v59[56] = v60[56];
    uint64_t v65 = *((void *)v60 + 9);
    *((void *)v59 + 8) = *((void *)v60 + 8);
    *((void *)v59 + 9) = v65;
    *((void *)v59 + 10) = *((void *)v60 + 10);
    long long v66 = *(_OWORD *)(v60 + 88);
    *(_OWORD *)(v59 + 104) = *(_OWORD *)(v60 + 104);
    *(_OWORD *)(v59 + 88) = v66;
    long long v67 = *(_OWORD *)(v60 + 120);
    long long v68 = *(_OWORD *)(v60 + 136);
    *(_OWORD *)(v59 + 152) = *(_OWORD *)(v60 + 152);
    *(_OWORD *)(v59 + 136) = v68;
    *(_OWORD *)(v59 + 120) = v67;
    uint64_t v69 = *((void *)v60 + 22);
    *((void *)v59 + 21) = *((void *)v60 + 21);
    *((void *)v59 + 22) = v69;
    uint64_t v71 = *((void *)v60 + 23);
    uint64_t v70 = *((void *)v60 + 24);
    v59[200] = v60[200];
    *((void *)v59 + 23) = v71;
    *((void *)v59 + 24) = v70;
    v59[201] = v60[201];
    uint64_t v72 = *((void *)v60 + 27);
    *((void *)v59 + 26) = *((void *)v60 + 26);
    *((void *)v59 + 27) = v72;
    uint64_t v73 = *((void *)v60 + 29);
    *((void *)v59 + 28) = *((void *)v60 + 28);
    *((void *)v59 + 29) = v73;
    *((void *)v59 + 30) = *((void *)v60 + 30);
    v59[248] = v60[248];
    uint64_t v74 = *((void *)v60 + 33);
    *((void *)v59 + 32) = *((void *)v60 + 32);
    *((void *)v59 + 33) = v74;
    *((void *)v59 + 34) = *((void *)v60 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v18 = v82;
  }
  swift_retain();
  return v18;
}

uint64_t sub_250F4F58C(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_251037400();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_250F26E08();
  uint64_t v7 = v6;
  v5(a1 + *(int *)(v6 + 36), v4);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + a2[9];
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v5(v9, v4);
    uint64_t v13 = a2;
    uint64_t v11 = v9 + *(int *)(v10 + 20);
    v5(v11, v4);
    v5(v11 + *(int *)(v7 + 36), v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_250F4F83C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250F26E08();
  uint64_t v74 = v8;
  uint64_t v76 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v77 = v6;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)(a1 + v9[5]) = *(void *)(a2 + v9[5]);
  *(void *)(a1 + v9[6]) = *(void *)(a2 + v9[6]);
  uint64_t v75 = v9;
  *(void *)(a1 + v9[7]) = *(void *)(a2 + v9[7]);
  uint64_t v10 = a3[5];
  uint64_t v79 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13)
  {
    uint64_t v14 = *(void *)(v12 + 8);
    *(void *)uint64_t v11 = v13;
    *(void *)(v11 + 8) = v14;
    long long v15 = *(_OWORD *)(v12 + 32);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
    *(_OWORD *)(v11 + 32) = v15;
    *(_OWORD *)(v11 + 48) = *(_OWORD *)(v12 + 48);
    *(void *)(v11 + 64) = *(void *)(v12 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
    *(_OWORD *)(v11 + 48) = v16;
    *(void *)(v11 + 64) = *(void *)(v12 + 64);
    long long v17 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v17;
  }
  uint64_t v18 = a3[7];
  *(unsigned char *)(v79 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(v79 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[9];
  uint64_t v78 = a3;
  *(unsigned char *)(v79 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v20 = v79 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(v79 + v19) = *(void *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = (char *)(v20 + v23);
  uint64_t v25 = (char *)(v21 + v23);
  uint64_t v26 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v73 = *((void *)v26 - 1);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, int *))(v73 + 48);
  swift_bridgeObjectRetain();
  if (v27(v25, 1, v26))
  {
    sub_250F580DC(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v76(v24, v25, v77);
    uint64_t v29 = v26[5];
    uint64_t v30 = &v24[v29];
    uint64_t v31 = &v25[v29];
    v76(&v24[v29], &v25[v29], v77);
    v76(&v30[*(int *)(v74 + 36)], &v31[*(int *)(v74 + 36)], v77);
    *(void *)&v30[v75[5]] = *(void *)&v31[v75[5]];
    *(void *)&v30[v75[6]] = *(void *)&v31[v75[6]];
    *(void *)&v30[v75[7]] = *(void *)&v31[v75[7]];
    uint64_t v32 = v26[6];
    char v33 = &v24[v32];
    uint64_t v34 = &v25[v32];
    v33[16] = v34[16];
    *(_OWORD *)char v33 = *(_OWORD *)v34;
    v24[v26[7]] = v25[v26[7]];
    v24[v26[8]] = v25[v26[8]];
    v24[v26[9]] = v25[v26[9]];
    uint64_t v35 = v26[10];
    uint64_t v36 = &v24[v35];
    uint64_t v37 = &v25[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    uint64_t v39 = v26[11];
    unint64_t v40 = &v24[v39];
    uint64_t v41 = &v25[v39];
    uint64_t v42 = *((void *)v41 + 1);
    *(void *)unint64_t v40 = *(void *)v41;
    *((void *)v40 + 1) = v42;
    uint64_t v43 = *(void (**)(char *, void, uint64_t, int *))(v73 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43(v24, 0, 1, v26);
  }
  *(_OWORD *)(v20 + v22[6]) = *(_OWORD *)(v21 + v22[6]);
  uint64_t v44 = v22[7];
  uint64_t v45 = v20 + v44;
  uint64_t v46 = v21 + v44;
  long long v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(void *)(v45 + 80) = *(void *)(v46 + 80);
  long long v48 = *(_OWORD *)(v46 + 64);
  long long v49 = *(_OWORD *)(v46 + 32);
  *(_OWORD *)(v45 + 48) = *(_OWORD *)(v46 + 48);
  *(_OWORD *)(v45 + 64) = v48;
  *(_OWORD *)(v45 + 32) = v49;
  *(void *)(v20 + v22[8]) = *(void *)(v21 + v22[8]);
  *(void *)(v20 + v22[9]) = *(void *)(v21 + v22[9]);
  uint64_t v50 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v51 = v20 + v50;
  uint64_t v52 = v21 + v50;
  uint64_t v53 = *(void *)(v52 + 8);
  *(void *)uint64_t v51 = *(void *)v52;
  *(void *)(v51 + 8) = v53;
  uint64_t v54 = *(void *)(v52 + 24);
  *(void *)(v51 + 16) = *(void *)(v52 + 16);
  *(void *)(v51 + 24) = v54;
  *(void *)(v51 + 32) = *(void *)(v52 + 32);
  *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
  *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
  *(_OWORD *)(v51 + 72) = *(_OWORD *)(v52 + 72);
  *(_OWORD *)(v51 + 88) = *(_OWORD *)(v52 + 88);
  *(_OWORD *)(v51 + 104) = *(_OWORD *)(v52 + 104);
  uint64_t v55 = v78[10];
  uint64_t v56 = v79 + v55;
  uint64_t v57 = a2 + v55;
  uint64_t v58 = *(void *)(a2 + v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v58)
  {
    uint64_t v59 = *(void *)(v57 + 8);
    uint64_t v60 = *(void *)(v57 + 16);
    *(void *)uint64_t v56 = v58;
    *(void *)(v56 + 8) = v59;
    *(void *)(v56 + 16) = v60;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    *(void *)(v56 + 16) = *(void *)(v57 + 16);
  }
  *(unsigned char *)(v56 + 24) = *(unsigned char *)(v57 + 24);
  *(unsigned char *)(v56 + 32) = *(unsigned char *)(v57 + 32);
  uint64_t v61 = *(void *)(v57 + 48);
  *(void *)(v56 + 40) = *(void *)(v57 + 40);
  *(void *)(v56 + 48) = v61;
  *(unsigned char *)(v56 + 56) = *(unsigned char *)(v57 + 56);
  uint64_t v62 = *(void *)(v57 + 72);
  *(void *)(v56 + 64) = *(void *)(v57 + 64);
  *(void *)(v56 + 72) = v62;
  *(void *)(v56 + 80) = *(void *)(v57 + 80);
  long long v63 = *(_OWORD *)(v57 + 88);
  *(_OWORD *)(v56 + 104) = *(_OWORD *)(v57 + 104);
  *(_OWORD *)(v56 + 88) = v63;
  long long v64 = *(_OWORD *)(v57 + 120);
  long long v65 = *(_OWORD *)(v57 + 136);
  *(_OWORD *)(v56 + 152) = *(_OWORD *)(v57 + 152);
  *(_OWORD *)(v56 + 136) = v65;
  *(_OWORD *)(v56 + 120) = v64;
  uint64_t v66 = *(void *)(v57 + 176);
  *(void *)(v56 + 168) = *(void *)(v57 + 168);
  *(void *)(v56 + 176) = v66;
  uint64_t v68 = *(void *)(v57 + 184);
  uint64_t v67 = *(void *)(v57 + 192);
  *(unsigned char *)(v56 + 200) = *(unsigned char *)(v57 + 200);
  *(void *)(v56 + 184) = v68;
  *(void *)(v56 + 192) = v67;
  *(unsigned char *)(v56 + 201) = *(unsigned char *)(v57 + 201);
  uint64_t v69 = *(void *)(v57 + 216);
  *(void *)(v56 + 208) = *(void *)(v57 + 208);
  *(void *)(v56 + 216) = v69;
  uint64_t v70 = *(void *)(v57 + 232);
  *(void *)(v56 + 224) = *(void *)(v57 + 224);
  *(void *)(v56 + 232) = v70;
  *(void *)(v56 + 240) = *(void *)(v57 + 240);
  *(unsigned char *)(v56 + 248) = *(unsigned char *)(v57 + 248);
  uint64_t v71 = *(void *)(v57 + 264);
  *(void *)(v56 + 256) = *(void *)(v57 + 256);
  *(void *)(v56 + 264) = v71;
  *(void *)(v56 + 272) = *(void *)(v57 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v79;
}

uint64_t sub_250F4FE24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v82 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 24);
  v7(a1, a2, v6);
  sub_250F26E08();
  uint64_t v83 = v8;
  uint64_t v9 = v6;
  uint64_t v81 = v7;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)(a1 + v10[5]) = *(void *)(a2 + v10[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v10[6]) = *(void *)(a2 + v10[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v84 = v10;
  *(void *)(a1 + v10[7]) = *(void *)(a2 + v10[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[5];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void *)(a2 + v11);
  if (*(void *)(a1 + v11))
  {
    if (v14)
    {
      *uint64_t v12 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12[1] = *(void *)(v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12[2] = *(void *)(v13 + 16);
      uint64_t v12[3] = *(void *)(v13 + 24);
      v12[4] = *(void *)(v13 + 32);
      v12[5] = *(void *)(v13 + 40);
      v12[6] = *(void *)(v13 + 48);
      v12[7] = *(void *)(v13 + 56);
      v12[8] = *(void *)(v13 + 64);
    }
    else
    {
      sub_250F21DD0(a1 + v11);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      long long v16 = *(_OWORD *)(v13 + 32);
      long long v15 = *(_OWORD *)(v13 + 48);
      long long v17 = *(_OWORD *)(v13 + 16);
      v12[8] = *(void *)(v13 + 64);
      *((_OWORD *)v12 + 2) = v16;
      *((_OWORD *)v12 + 3) = v15;
      *((_OWORD *)v12 + 1) = v17;
    }
  }
  else if (v14)
  {
    *uint64_t v12 = v14;
    v12[1] = *(void *)(v13 + 8);
    v12[2] = *(void *)(v13 + 16);
    uint64_t v12[3] = *(void *)(v13 + 24);
    v12[4] = *(void *)(v13 + 32);
    v12[5] = *(void *)(v13 + 40);
    v12[6] = *(void *)(v13 + 48);
    v12[7] = *(void *)(v13 + 56);
    v12[8] = *(void *)(v13 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    long long v18 = *(_OWORD *)(v13 + 16);
    long long v19 = *(_OWORD *)(v13 + 32);
    long long v20 = *(_OWORD *)(v13 + 48);
    v12[8] = *(void *)(v13 + 64);
    *((_OWORD *)v12 + 2) = v19;
    *((_OWORD *)v12 + 3) = v20;
    *((_OWORD *)v12 + 1) = v18;
  }
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v87 = a3;
  uint64_t v88 = a1;
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v21;
  uint64_t v85 = a2;
  uint64_t v23 = (void *)(a2 + v21);
  *(void *)(a1 + v21) = *v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v24 = v86[5];
  uint64_t v25 = (char *)(v22 + v24);
  uint64_t v26 = (char *)v23 + v24;
  uint64_t v27 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v28 = *((void *)v27 - 1);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      v32(v25, v26, v9);
      uint64_t v33 = v27[5];
      uint64_t v34 = &v25[v33];
      uint64_t v35 = &v26[v33];
      v32(&v25[v33], &v26[v33], v9);
      v32(&v34[*(int *)(v83 + 36)], &v35[*(int *)(v83 + 36)], v9);
      *(void *)&v34[v84[5]] = *(void *)&v35[v84[5]];
      *(void *)&v34[v84[6]] = *(void *)&v35[v84[6]];
      *(void *)&v34[v84[7]] = *(void *)&v35[v84[7]];
      uint64_t v36 = v27[6];
      uint64_t v37 = &v25[v36];
      uint64_t v38 = &v26[v36];
      char v39 = v38[16];
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
      v37[16] = v39;
      v25[v27[7]] = v26[v27[7]];
      v25[v27[8]] = v26[v27[8]];
      v25[v27[9]] = v26[v27[9]];
      uint64_t v40 = v27[10];
      uint64_t v41 = &v25[v40];
      uint64_t v42 = &v26[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      uint64_t v43 = v27[11];
      uint64_t v44 = &v25[v43];
      uint64_t v45 = &v26[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      *((void *)v44 + 1) = *((void *)v45 + 1);
      uint64_t v46 = *(void (**)(unsigned char *, void, uint64_t, int *))(v28 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46(v25, 0, 1, v27);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v31)
  {
    sub_250F573CC((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F580DC(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_14;
  }
  v81((uint64_t)v25, (uint64_t)v26, v9);
  uint64_t v63 = v27[5];
  long long v64 = &v25[v63];
  long long v65 = &v26[v63];
  v81((uint64_t)&v25[v63], (uint64_t)&v26[v63], v9);
  v81((uint64_t)&v64[*(int *)(v83 + 36)], (uint64_t)&v65[*(int *)(v83 + 36)], v9);
  *(void *)&v64[v84[5]] = *(void *)&v65[v84[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v64[v84[6]] = *(void *)&v65[v84[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v64[v84[7]] = *(void *)&v65[v84[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v27[6];
  uint64_t v67 = &v25[v66];
  uint64_t v68 = &v26[v66];
  long long v69 = *(_OWORD *)v68;
  v67[16] = v68[16];
  *(_OWORD *)uint64_t v67 = v69;
  v25[v27[7]] = v26[v27[7]];
  v25[v27[8]] = v26[v27[8]];
  v25[v27[9]] = v26[v27[9]];
  uint64_t v70 = v27[10];
  uint64_t v71 = &v25[v70];
  uint64_t v72 = &v26[v70];
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = *((void *)v72 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v73 = v27[11];
  uint64_t v74 = &v25[v73];
  uint64_t v75 = &v26[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = *((void *)v75 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v48 = v86[6];
  long long v49 = (void *)(v22 + v48);
  uint64_t v50 = (void *)((char *)v23 + v48);
  void *v49 = *v50;
  v49[1] = v50[1];
  uint64_t v51 = v86[7];
  uint64_t v52 = v22 + v51;
  uint64_t v53 = (char *)v23 + v51;
  *(void *)uint64_t v52 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *(unsigned char *)(v52 + 16) = v53[16];
  *(void *)(v52 + 8) = v54;
  *(void *)(v52 + 24) = *((void *)v53 + 3);
  *(void *)(v52 + 32) = *((void *)v53 + 4);
  *(void *)(v52 + 40) = *((void *)v53 + 5);
  *(void *)(v52 + 48) = *((void *)v53 + 6);
  *(void *)(v52 + 56) = *((void *)v53 + 7);
  *(void *)(v52 + 64) = *((void *)v53 + 8);
  *(void *)(v52 + 72) = *((void *)v53 + 9);
  *(void *)(v52 + 80) = *((void *)v53 + 10);
  *(void *)(v22 + v86[8]) = *(void *)((char *)v23 + v86[8]);
  *(void *)(v22 + v86[9]) = *(void *)((char *)v23 + v86[9]);
  uint64_t v55 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v56 = (void *)(v22 + v55);
  uint64_t v57 = (void *)((char *)v23 + v55);
  *uint64_t v56 = *(void *)((char *)v23 + v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[1] = v57[1];
  v56[2] = v57[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[3] = v57[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[4] = v57[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[5] = v57[5];
  v56[6] = v57[6];
  v56[7] = v57[7];
  v56[8] = v57[8];
  v56[9] = v57[9];
  v56[10] = v57[10];
  v56[11] = v57[11];
  v56[12] = v57[12];
  v56[13] = v57[13];
  v56[14] = v57[14];
  uint64_t v58 = v87[10];
  uint64_t v59 = v88 + v58;
  uint64_t v60 = (long long *)(v85 + v58);
  uint64_t v61 = *(void *)(v85 + v58);
  if (*(void *)(v88 + v58))
  {
    if (v61)
    {
      *(void *)uint64_t v59 = v61;
      swift_retain();
      swift_release();
      *(void *)(v59 + 8) = *((void *)v60 + 1);
      swift_retain();
      swift_release();
      *(void *)(v59 + 16) = *((void *)v60 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80(v88 + v58);
      uint64_t v62 = *((void *)v60 + 2);
      *(_OWORD *)uint64_t v59 = *v60;
      *(void *)(v59 + 16) = v62;
    }
  }
  else if (v61)
  {
    *(void *)uint64_t v59 = v61;
    *(void *)(v59 + 8) = *((void *)v60 + 1);
    *(void *)(v59 + 16) = *((void *)v60 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v76 = *v60;
    *(void *)(v59 + 16) = *((void *)v60 + 2);
    *(_OWORD *)uint64_t v59 = v76;
  }
  *(unsigned char *)(v59 + 24) = *((unsigned char *)v60 + 24);
  *(unsigned char *)(v59 + 32) = *((unsigned char *)v60 + 32);
  *(void *)(v59 + 40) = *((void *)v60 + 5);
  swift_retain();
  swift_release();
  uint64_t v77 = *((void *)v60 + 6);
  *(unsigned char *)(v59 + 56) = *((unsigned char *)v60 + 56);
  *(void *)(v59 + 48) = v77;
  *(void *)(v59 + 64) = *((void *)v60 + 8);
  *(void *)(v59 + 72) = *((void *)v60 + 9);
  swift_retain();
  swift_release();
  *(void *)(v59 + 80) = *((void *)v60 + 10);
  swift_retain();
  swift_release();
  *(void *)(v59 + 88) = *((void *)v60 + 11);
  uint64_t v78 = *((void *)v60 + 12);
  *(unsigned char *)(v59 + 104) = *((unsigned char *)v60 + 104);
  *(void *)(v59 + 96) = v78;
  *(void *)(v59 + 112) = *((void *)v60 + 14);
  *(void *)(v59 + 120) = *((void *)v60 + 15);
  *(void *)(v59 + 128) = *((void *)v60 + 16);
  *(void *)(v59 + 136) = *((void *)v60 + 17);
  *(void *)(v59 + 144) = *((void *)v60 + 18);
  *(void *)(v59 + 152) = *((void *)v60 + 19);
  *(void *)(v59 + 160) = *((void *)v60 + 20);
  *(void *)(v59 + 168) = *((void *)v60 + 21);
  *(void *)(v59 + 176) = *((void *)v60 + 22);
  swift_retain();
  swift_release();
  *(void *)(v59 + 184) = *((void *)v60 + 23);
  swift_retain();
  swift_release();
  uint64_t v79 = *((void *)v60 + 24);
  *(unsigned char *)(v59 + 200) = *((unsigned char *)v60 + 200);
  *(void *)(v59 + 192) = v79;
  *(unsigned char *)(v59 + 201) = *((unsigned char *)v60 + 201);
  *(void *)(v59 + 208) = *((void *)v60 + 26);
  swift_retain();
  swift_release();
  *(void *)(v59 + 216) = *((void *)v60 + 27);
  swift_retain();
  swift_release();
  *(void *)(v59 + 224) = *((void *)v60 + 28);
  swift_retain();
  swift_release();
  *(void *)(v59 + 232) = *((void *)v60 + 29);
  swift_retain();
  swift_release();
  *(void *)(v59 + 240) = *((void *)v60 + 30);
  swift_retain();
  swift_release();
  *(unsigned char *)(v59 + 248) = *((unsigned char *)v60 + 248);
  *(void *)(v59 + 256) = *((void *)v60 + 32);
  swift_retain();
  swift_release();
  *(void *)(v59 + 264) = *((void *)v60 + 33);
  swift_retain();
  swift_release();
  *(void *)(v59 + 272) = *((void *)v60 + 34);
  return v88;
}

uint64_t sub_250F508A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250F26E08();
  uint64_t v47 = v8;
  uint64_t v48 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v50 = v6;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)(a1 + v9[5]) = *(void *)(a2 + v9[5]);
  *(void *)(a1 + v9[6]) = *(void *)(a2 + v9[6]);
  *(void *)(a1 + v9[7]) = *(void *)(a2 + v9[7]);
  uint64_t v10 = a3[5];
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(void *)(v12 + 64) = *(void *)(v13 + 64);
  long long v14 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = v14;
  long long v15 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v15;
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v16 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  long long v49 = a3;
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  long long v20 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v21 = v20[5];
  uint64_t v22 = (char *)(v18 + v21);
  uint64_t v23 = (char *)(v19 + v21);
  uint64_t v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v46 = *((void *)v24 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v46 + 48))(v23, 1, v24))
  {
    sub_250F580DC(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v48(v22, v23, v50);
    uint64_t v26 = v24[5];
    uint64_t v45 = v20;
    uint64_t v27 = &v22[v26];
    uint64_t v28 = &v23[v26];
    v48(&v22[v26], &v23[v26], v50);
    v48(&v27[*(int *)(v47 + 36)], &v28[*(int *)(v47 + 36)], v50);
    *(void *)&v27[v9[5]] = *(void *)&v28[v9[5]];
    *(void *)&v27[v9[6]] = *(void *)&v28[v9[6]];
    *(void *)&v27[v9[7]] = *(void *)&v28[v9[7]];
    long long v20 = v45;
    uint64_t v29 = v24[6];
    int v30 = &v22[v29];
    int v31 = &v23[v29];
    v30[16] = v31[16];
    *(_OWORD *)int v30 = *(_OWORD *)v31;
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    *(_OWORD *)&v22[v24[10]] = *(_OWORD *)&v23[v24[10]];
    *(_OWORD *)&v22[v24[11]] = *(_OWORD *)&v23[v24[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v22, 0, 1, v24);
  }
  *(_OWORD *)(v18 + v20[6]) = *(_OWORD *)(v19 + v20[6]);
  uint64_t v32 = v20[7];
  uint64_t v33 = v18 + v32;
  uint64_t v34 = v19 + v32;
  long long v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(void *)(v33 + 80) = *(void *)(v34 + 80);
  long long v36 = *(_OWORD *)(v34 + 64);
  long long v37 = *(_OWORD *)(v34 + 32);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(v34 + 48);
  *(_OWORD *)(v33 + 64) = v36;
  *(_OWORD *)(v33 + 32) = v37;
  *(void *)(v18 + v20[8]) = *(void *)(v19 + v20[8]);
  *(void *)(v18 + v20[9]) = *(void *)(v19 + v20[9]);
  uint64_t v38 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v39 = v18 + v38;
  uint64_t v40 = v19 + v38;
  long long v41 = *(_OWORD *)(v40 + 80);
  *(_OWORD *)(v39 + 64) = *(_OWORD *)(v40 + 64);
  *(_OWORD *)(v39 + 80) = v41;
  *(_OWORD *)(v39 + 96) = *(_OWORD *)(v40 + 96);
  *(void *)(v39 + 112) = *(void *)(v40 + 112);
  long long v42 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v42;
  long long v43 = *(_OWORD *)(v40 + 48);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_OWORD *)(v39 + 48) = v43;
  memcpy((void *)(a1 + v49[10]), (const void *)(a2 + v49[10]), 0x118uLL);
  return a1;
}

char *sub_250F50C70(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(v64 + 40);
  v7(a1, a2, v6);
  sub_250F26E08();
  uint64_t v66 = v8;
  uint64_t v70 = v6;
  uint64_t v62 = v7;
  v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
  uint64_t v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&a1[v9[5]] = *(void *)&a2[v9[5]];
  swift_bridgeObjectRelease();
  *(void *)&a1[v9[6]] = *(void *)&a2[v9[6]];
  swift_bridgeObjectRelease();
  uint64_t v67 = v9;
  *(void *)&a1[v9[7]] = *(void *)&a2[v9[7]];
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[5];
  uint64_t v11 = (uint64_t)&a1[v10];
  uint64_t v12 = &a2[v10];
  if (*(void *)&a1[v10])
  {
    if (*(void *)v12)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      swift_bridgeObjectRelease();
      *(void *)(v11 + 8) = *((void *)v12 + 1);
      swift_bridgeObjectRelease();
      long long v13 = *((_OWORD *)v12 + 2);
      *(_OWORD *)(v11 + 16) = *((_OWORD *)v12 + 1);
      *(_OWORD *)(v11 + 32) = v13;
      *(_OWORD *)(v11 + 48) = *((_OWORD *)v12 + 3);
      *(void *)(v11 + 64) = *((void *)v12 + 8);
      goto LABEL_6;
    }
    sub_250F21DD0(v11);
  }
  long long v14 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v11 + 32) = *((_OWORD *)v12 + 2);
  *(_OWORD *)(v11 + 48) = v14;
  *(void *)(v11 + 64) = *((void *)v12 + 8);
  long long v15 = *((_OWORD *)v12 + 1);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
LABEL_6:
  uint64_t v16 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[9];
  long long v69 = a3;
  a1[a3[8]] = a2[a3[8]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  swift_bridgeObjectRelease();
  uint64_t v68 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v20 = v68[5];
  uint64_t v21 = &v18[v20];
  uint64_t v22 = &v19[v20];
  uint64_t v23 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v63 = *((void *)v23 - 1);
  uint64_t v24 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v63 + 48);
  int v25 = v24(v21, 1, v23);
  int v26 = v24(v22, 1, v23);
  if (v25)
  {
    if (!v26)
    {
      long long v65 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
      v65(v21, v22, v70);
      uint64_t v27 = v23[5];
      uint64_t v28 = &v21[v27];
      uint64_t v29 = &v22[v27];
      v65(&v21[v27], &v22[v27], v70);
      v65(&v28[*(int *)(v66 + 36)], &v29[*(int *)(v66 + 36)], v70);
      *(void *)&v28[v67[5]] = *(void *)&v29[v67[5]];
      *(void *)&v28[v67[6]] = *(void *)&v29[v67[6]];
      *(void *)&v28[v67[7]] = *(void *)&v29[v67[7]];
      uint64_t v30 = v23[6];
      int v31 = &v21[v30];
      uint64_t v32 = &v22[v30];
      v31[16] = v32[16];
      *(_OWORD *)int v31 = *(_OWORD *)v32;
      v21[v23[7]] = v22[v23[7]];
      v21[v23[8]] = v22[v23[8]];
      v21[v23[9]] = v22[v23[9]];
      *(_OWORD *)&v21[v23[10]] = *(_OWORD *)&v22[v23[10]];
      *(_OWORD *)&v21[v23[11]] = *(_OWORD *)&v22[v23[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v21, 0, 1, v23);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v26)
  {
    sub_250F573CC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_11:
    sub_250F580DC(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v21, v22, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_12;
  }
  v62(v21, v22, v70);
  uint64_t v46 = v23[5];
  uint64_t v47 = &v21[v46];
  uint64_t v48 = &v22[v46];
  v62(&v21[v46], &v22[v46], v70);
  v62(&v47[*(int *)(v66 + 36)], &v48[*(int *)(v66 + 36)], v70);
  *(void *)&v47[v67[5]] = *(void *)&v48[v67[5]];
  swift_bridgeObjectRelease();
  *(void *)&v47[v67[6]] = *(void *)&v48[v67[6]];
  swift_bridgeObjectRelease();
  *(void *)&v47[v67[7]] = *(void *)&v48[v67[7]];
  swift_bridgeObjectRelease();
  uint64_t v49 = v23[6];
  uint64_t v50 = &v21[v49];
  uint64_t v51 = &v22[v49];
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  v50[16] = v51[16];
  v21[v23[7]] = v22[v23[7]];
  v21[v23[8]] = v22[v23[8]];
  v21[v23[9]] = v22[v23[9]];
  uint64_t v52 = v23[10];
  uint64_t v53 = &v21[v52];
  uint64_t v54 = (uint64_t *)&v22[v52];
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  char *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = v23[11];
  uint64_t v58 = &v21[v57];
  uint64_t v59 = (uint64_t *)&v22[v57];
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *uint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
LABEL_12:
  *(_OWORD *)&v18[v68[6]] = *(_OWORD *)&v19[v68[6]];
  uint64_t v34 = v68[7];
  long long v35 = &v18[v34];
  long long v36 = &v19[v34];
  *(void *)long long v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  v35[16] = v36[16];
  *(_OWORD *)(v35 + 24) = *(_OWORD *)(v36 + 24);
  *(_OWORD *)(v35 + 40) = *(_OWORD *)(v36 + 40);
  *(_OWORD *)(v35 + 56) = *(_OWORD *)(v36 + 56);
  *(_OWORD *)(v35 + 72) = *(_OWORD *)(v36 + 72);
  *(void *)&v18[v68[8]] = *(void *)&v19[v68[8]];
  *(void *)&v18[v68[9]] = *(void *)&v19[v68[9]];
  uint64_t v37 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v38 = &v18[v37];
  uint64_t v39 = &v19[v37];
  *(void *)&v18[v37] = *(void *)v39;
  swift_bridgeObjectRelease();
  *((void *)v38 + 1) = *((void *)v39 + 1);
  *((void *)v38 + 2) = *((void *)v39 + 2);
  swift_bridgeObjectRelease();
  *((void *)v38 + 3) = *((void *)v39 + 3);
  swift_bridgeObjectRelease();
  *((void *)v38 + 4) = *((void *)v39 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v38 + 40) = *(_OWORD *)(v39 + 40);
  *(_OWORD *)(v38 + 56) = *(_OWORD *)(v39 + 56);
  *(_OWORD *)(v38 + 72) = *(_OWORD *)(v39 + 72);
  *(_OWORD *)(v38 + 88) = *(_OWORD *)(v39 + 88);
  *(_OWORD *)(v38 + 104) = *(_OWORD *)(v39 + 104);
  uint64_t v40 = v69[10];
  uint64_t v41 = (uint64_t)&a1[v40];
  long long v42 = &a2[v40];
  if (!*(void *)&a1[v40])
  {
LABEL_16:
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *(void *)(v41 + 16) = *((void *)v42 + 2);
    goto LABEL_17;
  }
  if (!*(void *)v42)
  {
    sub_250F27E80(v41);
    goto LABEL_16;
  }
  *(void *)uint64_t v41 = *(void *)v42;
  swift_release();
  *(void *)(v41 + 8) = *((void *)v42 + 1);
  swift_release();
  *(void *)(v41 + 16) = *((void *)v42 + 2);
  swift_release();
LABEL_17:
  *(unsigned char *)(v41 + 24) = v42[24];
  *(unsigned char *)(v41 + 32) = v42[32];
  *(void *)(v41 + 40) = *((void *)v42 + 5);
  swift_release();
  *(void *)(v41 + 48) = *((void *)v42 + 6);
  *(unsigned char *)(v41 + 56) = v42[56];
  *(void *)(v41 + 64) = *((void *)v42 + 8);
  *(void *)(v41 + 72) = *((void *)v42 + 9);
  swift_release();
  *(void *)(v41 + 80) = *((void *)v42 + 10);
  swift_release();
  *(void *)(v41 + 88) = *((void *)v42 + 11);
  *(void *)(v41 + 96) = *((void *)v42 + 12);
  *(unsigned char *)(v41 + 104) = v42[104];
  long long v43 = *((_OWORD *)v42 + 8);
  *(_OWORD *)(v41 + 112) = *((_OWORD *)v42 + 7);
  *(_OWORD *)(v41 + 128) = v43;
  long long v44 = *((_OWORD *)v42 + 10);
  *(_OWORD *)(v41 + 144) = *((_OWORD *)v42 + 9);
  *(_OWORD *)(v41 + 160) = v44;
  *(void *)(v41 + 176) = *((void *)v42 + 22);
  swift_release();
  *(void *)(v41 + 184) = *((void *)v42 + 23);
  swift_release();
  *(void *)(v41 + 192) = *((void *)v42 + 24);
  *(unsigned char *)(v41 + 200) = v42[200];
  *(unsigned char *)(v41 + 201) = v42[201];
  *(void *)(v41 + 208) = *((void *)v42 + 26);
  swift_release();
  *(void *)(v41 + 216) = *((void *)v42 + 27);
  swift_release();
  *(void *)(v41 + 224) = *((void *)v42 + 28);
  swift_release();
  *(void *)(v41 + 232) = *((void *)v42 + 29);
  swift_release();
  *(void *)(v41 + 240) = *((void *)v42 + 30);
  swift_release();
  *(unsigned char *)(v41 + 248) = v42[248];
  *(void *)(v41 + 256) = *((void *)v42 + 32);
  swift_release();
  *(void *)(v41 + 264) = *((void *)v42 + 33);
  swift_release();
  *(void *)(v41 + 272) = *((void *)v42 + 34);
  return a1;
}

uint64_t sub_250F5142C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F51440);
}

uint64_t sub_250F51440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 36);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40) + 40);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_250F51558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F5156C);
}

uint64_t sub_250F5156C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40) + 40) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 36);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for IndividualOvernightMetricsChartPoints()
{
  uint64_t result = qword_269B13328;
  if (!qword_269B13328) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F516CC()
{
  uint64_t result = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_250F517B4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F517D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251038D70();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F58018(0, &qword_269B13458, sub_250F575AC, (void (*)(void))sub_250F575E0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v13 - v9;
  sub_250F575AC(0);
  sub_250F575E0();
  sub_251038920();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F1B970], v2);
  sub_250F57514();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1 + *(int *)(v11 + 36), v5, v2);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a1, v10, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_250F519FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v74 = a1;
  sub_250F55B8C();
  uint64_t v69 = *(void *)(v2 - 8);
  uint64_t v70 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v68 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F56518();
  uint64_t v72 = *(void *)(v4 - 8);
  uint64_t v73 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v71 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v76 = (char *)&v57 - v7;
  uint64_t v8 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  sub_250F56610(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v67 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)&v57 - v14;
  uint64_t v16 = (unsigned __int8 *)(v1 + *(int *)(v8 + 40));
  uint64_t v64 = (uint64_t (*)())v8;
  long long v65 = v16;
  LODWORD(v16) = v16[32];
  uint64_t v66 = (uint64_t)&v57 - v14;
  uint64_t v75 = v1;
  uint64_t v62 = v9;
  uint64_t v63 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v16 == 1)
  {
    v85[0] = *(void *)(v1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 20));
    sub_250F572B4(v1, (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v18 = swift_allocObject();
    sub_250F57920((uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    sub_250F55D14(0);
    unint64_t v61 = v19;
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
    sub_250F56768(0);
    sub_250F5615C((unint64_t *)&qword_269B13388, sub_250F55D14);
    sub_250F576EC();
    sub_250F5615C(&qword_269B13480, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
    swift_bridgeObjectRetain();
    sub_251038C60();
    sub_250F56644(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v15, 0, 1, v20);
  }
  else
  {
    sub_250F56644(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v15, 1, 1, v21);
  }
  sub_250F580DC(0, &qword_269B13410, MEMORY[0x263F42E30], MEMORY[0x263F8E0F8]);
  uint64_t v22 = sub_2510378C0();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 72);
  unint64_t v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_25103A660;
  unint64_t v27 = v26 + v25;
  uint64_t v28 = *(void (**)(unint64_t, void, uint64_t))(v23 + 104);
  v28(v27, *MEMORY[0x263F42E28], v22);
  v28(v27 + v24, *MEMORY[0x263F42E18], v22);
  v28(v27 + 2 * v24, *MEMORY[0x263F42E20], v22);
  uint64_t v29 = v75;
  uint64_t v30 = v75 + *((int *)v64 + 9);
  uint64_t v31 = v30 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v33 = *(void *)(v31 + 16);
  uint64_t v32 = *(void *)(v31 + 24);
  v85[0] = v26;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v64 = type metadata accessor for IndividualOvernightMetricsChartPoints;
  uint64_t v34 = v63;
  sub_250F572B4(v29, v63, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
  uint64_t v35 = *(unsigned __int8 *)(v62 + 80);
  uint64_t v36 = (v35 + 16) & ~v35;
  unint64_t v37 = (v10 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = v37;
  unint64_t v61 = v37 + 8;
  uint64_t v62 = v35 | 7;
  uint64_t v38 = swift_allocObject();
  uint64_t v60 = type metadata accessor for IndividualOvernightMetricsChartPoints;
  sub_250F57920(v34, v38 + v36, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
  *(void *)(v38 + v37) = v32;
  sub_250F55CC0(0);
  uint64_t v57 = sub_250F5615C(&qword_269B133D0, sub_250F55CC0);
  sub_250F5615C(&qword_26B210AC0, MEMORY[0x263F42E30]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_251038C70();
  v78[3] = v26;
  swift_getKeyPath();
  sub_250F572B4(v75, v34, (uint64_t (*)(void))v64);
  uint64_t v39 = swift_allocObject();
  sub_250F57920(v34, v39 + v36, (uint64_t (*)(void))v60);
  *(void *)(v39 + v58) = v33;
  sub_250F57A5C(0, &qword_269B13348, sub_250F55CF4, sub_250F561A4);
  sub_250F56E34();
  uint64_t v40 = v68;
  sub_251038C70();
  memcpy(v85, v65, 0x118uLL);
  if (BYTE1(v85[25]) == 1)
  {
    sub_250F5742C();
    *((void *)&v80 + 1) = v41;
    sub_250F57514();
    uint64_t v43 = v42;
    uint64_t v44 = sub_250F570F4(&qword_269B13440, (void (*)(uint64_t))sub_250F55B8C, (void (*)(void))sub_250F56E34);
    unint64_t v45 = sub_250F57614();
    uint64_t v46 = v70;
    *(void *)&long long v82 = v70;
    *((void *)&v82 + 1) = v43;
    *(void *)&long long v83 = v44;
    *((void *)&v83 + 1) = v45;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v79);
    sub_250F2A3B4(v85);
    swift_checkMetadataState();
    sub_251037D50();
    sub_250F2E048(v85);
    uint64_t v47 = v69;
  }
  else
  {
    uint64_t v46 = v70;
    *((void *)&v80 + 1) = v70;
    uint64_t OpaqueTypeConformance2 = sub_250F570F4(&qword_269B13440, (void (*)(uint64_t))sub_250F55B8C, (void (*)(void))sub_250F56E34);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v79);
    uint64_t v47 = v69;
    (*(void (**)(uint64_t *, char *, uint64_t))(v69 + 16))(boxed_opaque_existential_1, v40, v46);
  }
  (*(void (**)(char *, uint64_t))(v47 + 8))(v40, v46);
  long long v82 = v79;
  long long v83 = v80;
  uint64_t v84 = OpaqueTypeConformance2;
  uint64_t v50 = v66;
  uint64_t v49 = v67;
  sub_250F572B4(v66, v67, (uint64_t (*)(void))sub_250F56610);
  v78[0] = v49;
  uint64_t v52 = (uint64_t)v71;
  uint64_t v51 = v72;
  uint64_t v53 = v76;
  uint64_t v54 = v73;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v76, v73);
  v78[1] = v52;
  sub_250F5731C((uint64_t)&v82, (uint64_t)v77);
  v78[2] = (uint64_t)v77;
  sub_250FD9C60(v78, v74);
  sub_250F57378((uint64_t)&v82);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v51 + 8);
  v55(v53, v54);
  sub_250F573CC(v50, (uint64_t (*)(void))sub_250F56610);
  sub_250F57378((uint64_t)v77);
  v55((char *)v52, v54);
  return sub_250F573CC(v49, (uint64_t (*)(void))sub_250F56610);
}

uint64_t sub_250F52480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v41 = a2;
  sub_250F5780C(0, (unint64_t *)&qword_269B13488, MEMORY[0x263EFCE78], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v40 = (char *)&v30 - v7;
  sub_250F26E08();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F57B38(0, (unint64_t *)&qword_269B13490, MEMORY[0x263F07490], MEMORY[0x263EFCAD0], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v35 = sub_251038010();
  uint64_t v38 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v31 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F568A0(0, &qword_269B13400, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow, (void (*)(void))sub_250F56954);
  uint64_t v37 = v13;
  uint64_t v39 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v32 = (char *)&v30 - v14;
  sub_250F5679C();
  uint64_t v36 = v15;
  uint64_t v34 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v33 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510384C0();
  int v17 = *(unsigned __int8 *)(v3 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 28));
  uint64_t v18 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v19 = 28;
  if (v17) {
    uint64_t v19 = 24;
  }
  sub_250F572B4(a1 + *(int *)(v18 + v19), (uint64_t)v10, (uint64_t (*)(void))sub_250F26E08);
  sub_251037400();
  sub_250F5615C((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
  sub_251037E30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_250F573CC((uint64_t)v10, (uint64_t (*)(void))sub_250F26E08);
  sub_2510384C0();
  sub_250FCA198(a3);
  uint64_t v44 = v20;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = v31;
  sub_251038000();
  uint64_t v42 = a1;
  uint64_t v43 = v3;
  uint64_t v22 = type metadata accessor for OvernightMetricsChartPointShadow();
  uint64_t v23 = sub_250F56954();
  uint64_t v24 = MEMORY[0x263EFCD88];
  unint64_t v25 = v32;
  uint64_t v26 = v35;
  sub_251037DA0();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v26);
  uint64_t v44 = v26;
  uint64_t v45 = v22;
  uint64_t v46 = v24;
  uint64_t v47 = v23;
  swift_getOpaqueTypeConformance2();
  unint64_t v27 = v33;
  uint64_t v28 = v37;
  sub_251037D80();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v28);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v41, v27, v36);
}

double sub_250F52A50@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = sub_2510378C0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F57A28(0);
  uint64_t v38 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a2 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 28));
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v39 = a4;
  if (v16 && (unint64_t v17 = sub_250FCB7F8(a1), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(*(void *)(v15 + 56) + 8 * v17);
    swift_bridgeObjectRetain();
    if (!*(void *)(a3 + 16)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    if (!*(void *)(a3 + 16))
    {
LABEL_8:
      uint64_t v22 = MEMORY[0x263F8EE78];
      goto LABEL_9;
    }
  }
  unint64_t v20 = sub_250FCB7F8(a1);
  if ((v21 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v22 = *(void *)(*(void *)(a3 + 56) + 8 * v20);
  swift_bridgeObjectRetain();
LABEL_9:
  sub_250F52E14(v19, v22, a1, (uint64_t)v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F42E28], v8);
  char v23 = sub_2510378B0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v24 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  memcpy(v47, (const void *)(a2 + *(int *)(v24 + 40)), 0x118uLL);
  if ((v23 & 1) != 0 && BYTE1(v47[25]) == 1)
  {
    sub_250F57F0C();
    *((void *)&v45 + 1) = v25;
    sub_250F58018(255, &qword_269B134F0, sub_250F580A8, (void (*)(void))sub_250F58140);
    uint64_t v27 = v26;
    unint64_t v28 = sub_250F57CDC();
    sub_250F580A8(255);
    uint64_t v30 = v29;
    uint64_t v31 = sub_250F58140();
    uint64_t v40 = v30;
    uint64_t v41 = v31;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v40 = v38;
    uint64_t v41 = v27;
    unint64_t v42 = v28;
    uint64_t v43 = OpaqueTypeConformance2;
    unint64_t v46 = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
    sub_250F2A3B4(v47);
    swift_checkMetadataState();
    sub_251037D50();
    sub_250F2E048(v47);
  }
  else
  {
    *((void *)&v45 + 1) = v38;
    unint64_t v46 = sub_250F57CDC();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
    sub_250F572B4((uint64_t)v14, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))sub_250F57A28);
  }
  sub_250F573CC((uint64_t)v14, (uint64_t (*)(void))sub_250F57A28);
  double result = *(double *)&v44;
  long long v35 = v45;
  uint64_t v36 = v39;
  _OWORD *v39 = v44;
  v36[1] = v35;
  *((void *)v36 + 4) = v46;
  return result;
}

uint64_t sub_250F52E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v61 = a4;
  uint64_t v62 = a1;
  sub_250F58174(0, &qword_269B13508, sub_250F561A4, sub_250F57ADC);
  uint64_t v66 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (uint64_t)v54 - v7;
  sub_250F57ADC(0);
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  MEMORY[0x270FA5388](v8);
  long long v65 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v63 = (char *)v54 - v11;
  uint64_t v12 = sub_2510378C0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v17 = v16 - 8;
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](v16);
  sub_250F561A4(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v60 = (uint64_t)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v67 = (uint64_t)v54 - v23;
  uint64_t v24 = *(int *)(v17 + 32);
  uint64_t v25 = v4;
  if (*(unsigned char *)(v4 + v24) == 1)
  {
    uint64_t v72 = a2;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v55 = v4;
    uint64_t v56 = KeyPath;
    sub_250F572B4(v4, (uint64_t)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v57, v12);
    unint64_t v27 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v28 = *(unsigned __int8 *)(v13 + 80);
    v54[2] = a2;
    unint64_t v29 = (v19 + v28 + v27) & ~v28;
    uint64_t v30 = swift_allocObject();
    sub_250F57920((uint64_t)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v27, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v30 + v29, v15, v12);
    sub_250F33580();
    sub_250F562D0();
    uint64_t v57 = v31;
    v54[1] = sub_250F5615C(&qword_269B133C0, (void (*)(uint64_t))sub_250F33580);
    sub_250F5648C();
    sub_250F563A0();
    uint64_t v33 = v32;
    uint64_t v34 = sub_251038010();
    unint64_t v35 = sub_250F56438();
    swift_bridgeObjectRetain();
    uint64_t v68 = v34;
    uint64_t v69 = &type metadata for OvernightMetricsChartLozenge;
    uint64_t v70 = MEMORY[0x263EFCD88];
    unint64_t v71 = v35;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v68 = v33;
    uint64_t v69 = (ValueMetadata *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    uint64_t v37 = v67;
    sub_251038C70();
    sub_250F561D8();
    uint64_t v25 = v55;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 0, 1, v38);
  }
  else
  {
    sub_250F561D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v67, 1, 1, v39);
  }
  uint64_t v68 = v62;
  sub_250F572B4(v25, (uint64_t)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
  unint64_t v40 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v41 = swift_allocObject();
  sub_250F57920((uint64_t)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v41 + v40, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
  sub_250F55D14(0);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_250F57AFC(0);
  sub_250F5615C((unint64_t *)&qword_269B13388, sub_250F55D14);
  sub_250F57DE4();
  sub_250F5615C(&qword_269B13480, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
  swift_bridgeObjectRetain();
  unint64_t v42 = v63;
  sub_251038C60();
  uint64_t v43 = v60;
  sub_250F572B4(v67, v60, (uint64_t (*)(void))sub_250F561A4);
  uint64_t v45 = v58;
  uint64_t v44 = v59;
  unint64_t v46 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  uint64_t v47 = v65;
  v46(v65, v42, v59);
  sub_250F570F4(&qword_269B13430, sub_250F561A4, (void (*)(void))sub_250F57164);
  uint64_t v48 = v64;
  sub_250F572B4(v43, v64, (uint64_t (*)(void))sub_250F561A4);
  sub_250F570F4(&qword_269B134D8, sub_250F57ADC, (void (*)(void))sub_250F57DE4);
  uint64_t v49 = v66;
  uint64_t v50 = v48 + *(int *)(v66 + 48);
  v46((char *)v50, v47, v44);
  uint64_t v51 = v61;
  sub_250F57920(v48, v61, (uint64_t (*)(void))sub_250F561A4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v51 + *(int *)(v49 + 48), v50, v44);
  uint64_t v52 = *(void (**)(char *, uint64_t))(v45 + 8);
  v52(v42, v44);
  sub_250F573CC(v67, (uint64_t (*)(void))sub_250F561A4);
  v52(v47, v44);
  return sub_250F573CC(v43, (uint64_t (*)(void))sub_250F561A4);
}

uint64_t sub_250F53654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 28));
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_250FCB7F8(a1), (v9 & 1) != 0))
  {
    uint64_t v10 = *(char **)(*(void *)(v7 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    if (!*(void *)(a3 + 16)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
    if (!*(void *)(a3 + 16)) {
      goto LABEL_8;
    }
  }
  unint64_t v11 = sub_250FCB7F8(a1);
  if (v12)
  {
    uint64_t v13 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_9:
  sub_250F53740(v10, v13, a4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_250F53740@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v49 = a2;
  uint64_t v51 = a1;
  uint64_t v59 = a3;
  sub_250F58174(0, &qword_269B13498, sub_250F55CF4, sub_250F561A4);
  uint64_t v58 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)v47 - v7;
  sub_250F561A4(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v57 = (uint64_t)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v55 = (char *)v47 - v11;
  uint64_t v12 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v13 = v12 - 8;
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F55CF4(0);
  uint64_t v53 = *(void *)(v17 - 8);
  uint64_t v54 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v52 = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v47 - v20;
  uint64_t v60 = (uint64_t)a1;
  sub_250F572B4(v4, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
  uint64_t v22 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v23 = (v22 + 16) & ~v22;
  v47[0] = v22 | 7;
  v47[1] = v23 + v15;
  uint64_t v24 = swift_allocObject();
  uint64_t v48 = v23;
  sub_250F57920((uint64_t)v16, v24 + v23, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
  sub_250F55D14(0);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_250F55D48(0);
  sub_250F5615C((unint64_t *)&qword_269B13388, sub_250F55D14);
  sub_250F56F6C();
  sub_250F5615C(&qword_269B13480, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
  swift_bridgeObjectRetain();
  uint64_t v25 = v50;
  uint64_t v51 = v21;
  sub_251038C60();
  if (*(unsigned char *)(v25 + *(int *)(v13 + 32)) == 1)
  {
    uint64_t v64 = v49;
    swift_getKeyPath();
    sub_250F572B4(v25, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    uint64_t v26 = swift_allocObject();
    sub_250F57920((uint64_t)v16, v26 + v48, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricsChartPoints);
    sub_250F33580();
    sub_250F562D0();
    sub_250F5615C(&qword_269B133C0, (void (*)(uint64_t))sub_250F33580);
    sub_250F5648C();
    sub_250F563A0();
    uint64_t v28 = v27;
    uint64_t v29 = sub_251038010();
    unint64_t v30 = sub_250F56438();
    swift_bridgeObjectRetain();
    uint64_t v60 = v29;
    uint64_t v61 = &type metadata for OvernightMetricsChartLozenge;
    uint64_t v62 = MEMORY[0x263EFCD88];
    unint64_t v63 = v30;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v60 = v28;
    uint64_t v61 = (ValueMetadata *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    uint64_t v32 = (uint64_t)v55;
    sub_251038C70();
    sub_250F561D8();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 0, 1, v33);
  }
  else
  {
    sub_250F561D8();
    uint64_t v32 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v55, 1, 1, v34);
  }
  uint64_t v36 = v52;
  uint64_t v35 = v53;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  uint64_t v38 = v51;
  uint64_t v39 = v54;
  v37(v52, v51, v54);
  uint64_t v40 = v57;
  sub_250F572B4(v32, v57, (uint64_t (*)(void))sub_250F561A4);
  sub_250F570F4(&qword_269B13420, sub_250F55CF4, (void (*)(void))sub_250F56F6C);
  uint64_t v41 = v56;
  v37(v56, v36, v39);
  sub_250F570F4(&qword_269B13430, sub_250F561A4, (void (*)(void))sub_250F57164);
  uint64_t v42 = v58;
  uint64_t v43 = (uint64_t)&v41[*(int *)(v58 + 48)];
  sub_250F572B4(v40, v43, (uint64_t (*)(void))sub_250F561A4);
  uint64_t v44 = v59;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v59, v41, v39);
  sub_250F57920(v43, v44 + *(int *)(v42 + 48), (uint64_t (*)(void))sub_250F561A4);
  sub_250F573CC(v32, (uint64_t (*)(void))sub_250F561A4);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v35 + 8);
  v45(v38, v39);
  sub_250F573CC(v40, (uint64_t (*)(void))sub_250F561A4);
  return ((uint64_t (*)(char *, uint64_t))v45)(v36, v39);
}

uint64_t sub_250F53EBC@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250F562D0();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = *a1;
  double v12 = a1[1];
  uint64_t v13 = a2 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 36);
  double v14 = *(double *)(v13 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 72);
  sub_2510378A0();
  v17[1] = swift_retain();
  uint64_t v15 = sub_251038160();
  sub_250F5403C(v15, (uint64_t)v10, v11, v12, v14);
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
}

uint64_t sub_250F5403C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  sub_250F5780C(0, (unint64_t *)&qword_269B13488, MEMORY[0x263EFCE78], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v9 - 8);
  v24[2] = (char *)v24 - v10;
  sub_250F57B38(0, (unint64_t *)&qword_269B13490, MEMORY[0x263F07490], MEMORY[0x263EFCAD0], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v11 - 8);
  v24[1] = (char *)v24 - v12;
  uint64_t v13 = sub_251038010();
  uint64_t v25 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F563A0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v26 = v16;
  uint64_t v27 = v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510384C0();
  sub_251037400();
  sub_250F5615C((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
  sub_251037E30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  double v35 = a4;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_251038000();
  double v30 = a3;
  double v31 = a4;
  uint64_t v32 = v5;
  double v33 = a5;
  uint64_t v34 = v28;
  unint64_t v20 = sub_250F56438();
  uint64_t v21 = MEMORY[0x263EFCD88];
  sub_251037DA0();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v13);
  double v35 = *(double *)&v13;
  uint64_t v36 = &type metadata for OvernightMetricsChartLozenge;
  uint64_t v37 = v21;
  unint64_t v38 = v20;
  swift_getOpaqueTypeConformance2();
  uint64_t v22 = v26;
  sub_251037D80();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v19, v22);
}

uint64_t sub_250F54468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_250F57BA4();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32);
  if (*(unsigned char *)(v9 + 8))
  {
    sub_250F57B38(0, &qword_269B13510, (uint64_t (*)(uint64_t))sub_250F57BA4, MEMORY[0x263EFCB18], MEMORY[0x263EFCC88]);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    sub_250F54640(a1, (uint64_t)v8, *(double *)v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, v8, v5);
    sub_250F57B38(0, &qword_269B13510, (uint64_t (*)(uint64_t))sub_250F57BA4, MEMORY[0x263EFCB18], MEMORY[0x263EFCC88]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_250F54640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v41 = a2;
  sub_250F5780C(0, (unint64_t *)&qword_269B13488, MEMORY[0x263EFCE78], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v40 = (char *)&v30 - v7;
  sub_250F26E08();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F57B38(0, (unint64_t *)&qword_269B13490, MEMORY[0x263F07490], MEMORY[0x263EFCAD0], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v35 = sub_251038010();
  uint64_t v38 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  double v31 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F568A0(0, &qword_269B134C0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground, (void (*)(void))sub_250F57CA8);
  uint64_t v37 = v13;
  uint64_t v39 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v32 = (char *)&v30 - v14;
  sub_250F57BA4();
  uint64_t v36 = v15;
  uint64_t v34 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  double v33 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510384C0();
  int v17 = *(unsigned __int8 *)(v3 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 28));
  uint64_t v18 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v19 = 28;
  if (v17) {
    uint64_t v19 = 24;
  }
  sub_250F572B4(a1 + *(int *)(v18 + v19), (uint64_t)v10, (uint64_t (*)(void))sub_250F26E08);
  sub_251037400();
  sub_250F5615C((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
  sub_251037E30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_250F573CC((uint64_t)v10, (uint64_t (*)(void))sub_250F26E08);
  sub_2510384C0();
  sub_250FCA198(a3);
  uint64_t v44 = v20;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = v31;
  sub_251038000();
  uint64_t v42 = a1;
  uint64_t v43 = v3;
  uint64_t v22 = type metadata accessor for OvernightMetricsChartPointBackground();
  uint64_t v23 = sub_250F57CA8();
  uint64_t v24 = MEMORY[0x263EFCD88];
  uint64_t v25 = v32;
  uint64_t v26 = v35;
  sub_251037DA0();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v26);
  uint64_t v44 = v26;
  uint64_t v45 = v22;
  uint64_t v46 = v24;
  uint64_t v47 = v23;
  swift_getOpaqueTypeConformance2();
  uint64_t v27 = v33;
  uint64_t v28 = v37;
  sub_251037D80();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v28);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v41, v27, v36);
}

uint64_t sub_250F54C10@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, double)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32);
  if (*(unsigned char *)(v8 + 8))
  {
    uint64_t v9 = a3(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v11 = v9;
    uint64_t v12 = a4;
    uint64_t v13 = 1;
  }
  else
  {
    a2(a1, *(double *)v8);
    uint64_t v14 = a3(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v11 = v14;
    uint64_t v12 = a4;
    uint64_t v13 = 0;
  }
  return v10(v12, v13, 1, v11);
}

uint64_t sub_250F54D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t v76 = a2;
  uint64_t v77 = a1;
  sub_250F5780C(0, (unint64_t *)&qword_269B13488, MEMORY[0x263EFCE78], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v68 = (char *)&v58 - v7;
  sub_250F26E08();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F57B38(0, (unint64_t *)&qword_269B13490, MEMORY[0x263F07490], MEMORY[0x263EFCAD0], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v63 = sub_251038010();
  uint64_t v64 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v60 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F568A0(0, &qword_269B13378, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, (void (*)(void))sub_250F56128);
  uint64_t v65 = v13;
  uint64_t v67 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v61 = (char *)&v58 - v14;
  sub_250F56024();
  uint64_t v69 = v15;
  uint64_t v71 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F55EE8();
  uint64_t v73 = v17;
  uint64_t v75 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v66 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F55D7C();
  uint64_t v74 = v19;
  uint64_t v72 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v70 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510384C0();
  uint64_t v21 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v22 = *(int *)(v21 + 28);
  uint64_t v58 = v21;
  int v23 = *(unsigned __int8 *)(v3 + v22);
  uint64_t v24 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v59 = v24;
  uint64_t v25 = 28;
  if (v23) {
    uint64_t v25 = 24;
  }
  sub_250F572B4(v77 + *(int *)(v24 + v25), (uint64_t)v10, (uint64_t (*)(void))sub_250F26E08);
  sub_251037400();
  sub_250F5615C((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
  sub_251037E30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_250F573CC((uint64_t)v10, (uint64_t (*)(void))sub_250F26E08);
  sub_2510384C0();
  sub_250FCA198(a3);
  uint64_t v80 = v26;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v60;
  sub_251038000();
  uint64_t v28 = v77;
  uint64_t v78 = v77;
  uint64_t v79 = v4;
  uint64_t v29 = type metadata accessor for OvernightMetricsChartPointForeground();
  uint64_t v30 = sub_250F56128();
  uint64_t v31 = MEMORY[0x263EFCD88];
  uint64_t v32 = v61;
  uint64_t v33 = v63;
  sub_251037DA0();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v27, v33);
  uint64_t v80 = v33;
  uint64_t v81 = v29;
  uint64_t v82 = v31;
  uint64_t v83 = v30;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v35 = v62;
  uint64_t v36 = v65;
  sub_251037D80();
  uint64_t v37 = v36;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v32, v36);
  type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v38 = v59;
  uint64_t v39 = (uint64_t *)(v28 + *(int *)(v59 + 44));
  uint64_t v40 = v39[1];
  uint64_t v80 = *v39;
  uint64_t v81 = v40;
  uint64_t v68 = (char *)sub_250F3EB74();
  swift_bridgeObjectRetain();
  uint64_t v41 = sub_2510388A0();
  uint64_t v43 = v42;
  char v45 = v44 & 1;
  uint64_t v80 = v37;
  uint64_t v81 = OpaqueTypeConformance2;
  uint64_t v46 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = v66;
  uint64_t v48 = v69;
  sub_251037D60();
  sub_250F3EBC8(v41, v43, v45);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v35, v48);
  uint64_t v49 = (uint64_t *)(v77 + *(int *)(v38 + 48));
  uint64_t v50 = v49[1];
  uint64_t v80 = *v49;
  uint64_t v81 = v50;
  swift_bridgeObjectRetain();
  uint64_t v51 = sub_2510388A0();
  uint64_t v53 = v52;
  LOBYTE(v43) = v54 & 1;
  uint64_t v80 = v48;
  uint64_t v81 = v46;
  swift_getOpaqueTypeConformance2();
  uint64_t v55 = v70;
  uint64_t v56 = v73;
  sub_251037D70();
  sub_250F3EBC8(v51, v53, v43);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v56);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v72 + 32))(v76, v55, v74);
}

uint64_t sub_250F555E4@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *a1;
  double v5 = a1[1];
  uint64_t v6 = a2 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 36);
  double v7 = *(double *)(v6 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 88);
  uint64_t v8 = swift_retain();
  sub_250F5403C(v8, a3, v4, v5, v7);
  return swift_release();
}

uint64_t *sub_250F55688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250F572B4(a1, a3, type metadata accessor for IndividualOvernightMetricChartPoint);
  double v5 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v6 = (uint64_t *)(a2 + v5[5]);
  uint64_t v7 = v6[2];
  uint64_t v20 = v6[1];
  uint64_t v21 = *v6;
  uint64_t v8 = v6[3];
  uint64_t v9 = v6[4];
  uint64_t v11 = v6[5];
  uint64_t v10 = v6[6];
  uint64_t v18 = v6[8];
  uint64_t v19 = v6[7];
  char v17 = *(unsigned char *)(a2 + v5[8]);
  uint64_t v12 = a2 + v5[9];
  uint64_t v13 = (int *)type metadata accessor for OvernightMetricsChartPointShadow();
  sub_250F572B4(v12, a3 + v13[7], type metadata accessor for OvernightMetricsChartLayout);
  __src = (void *)(a2 + v5[10]);
  memcpy(__dst, __src, 0x118uLL);
  uint64_t v14 = (uint64_t *)(a3 + v13[5]);
  *uint64_t v14 = v21;
  v14[1] = v20;
  v14[2] = v7;
  void v14[3] = v8;
  v14[4] = v9;
  v14[5] = v11;
  v14[6] = v10;
  v14[7] = v19;
  v14[8] = v18;
  *(unsigned char *)(a3 + v13[6]) = v17;
  memcpy((void *)(a3 + v13[8]), __src, 0x118uLL);
  sub_250F22234(v21);
  return sub_250F2A3B4(__dst);
}

uint64_t sub_250F557F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 20));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  uint64_t v16 = v11[4];
  uint64_t v17 = v11[5];
  uint64_t v18 = v11[6];
  uint64_t v19 = v11[7];
  uint64_t v20 = v11[8];
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(void *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v14;
  *(void *)(a3 + 40) = v15;
  *(void *)(a3 + 48) = v16;
  *(void *)(a3 + 56) = v17;
  *(void *)(a3 + 64) = v18;
  *(void *)(a3 + 72) = v19;
  *(void *)(a3 + 80) = v20;
  *(double *)(a3 + 88) = a6;
  *(void *)(a3 + 96) = a2;
  sub_250F22234(v12);
  return swift_retain();
}

uint64_t *sub_250F558A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250F572B4(a1, a3, type metadata accessor for IndividualOvernightMetricChartPoint);
  double v5 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v6 = (uint64_t *)(a2 + v5[5]);
  uint64_t v7 = v6[1];
  uint64_t v8 = v6[2];
  uint64_t v9 = v6[3];
  uint64_t v16 = *v6;
  uint64_t v10 = v6[4];
  uint64_t v22 = v6[5];
  uint64_t v17 = v6[6];
  uint64_t v18 = v6[7];
  uint64_t v19 = v6[8];
  uint64_t v11 = a2 + v5[9];
  char v20 = *(unsigned char *)(a2 + v5[8]);
  char v21 = *(unsigned char *)(a2 + v5[6]);
  uint64_t v12 = (int *)type metadata accessor for OvernightMetricsChartPointBackground();
  sub_250F572B4(v11, a3 + v12[8], type metadata accessor for OvernightMetricsChartLayout);
  uint64_t v13 = (const void *)(a2 + v5[10]);
  memcpy(__dst, v13, 0x118uLL);
  uint64_t v14 = (uint64_t *)(a3 + v12[5]);
  *uint64_t v14 = v16;
  v14[1] = v7;
  v14[2] = v8;
  void v14[3] = v9;
  v14[4] = v10;
  v14[5] = v22;
  v14[6] = v17;
  v14[7] = v18;
  v14[8] = v19;
  *(unsigned char *)(a3 + v12[6]) = v20;
  *(unsigned char *)(a3 + v12[7]) = v21;
  memcpy((void *)(a3 + v12[9]), v13, 0x118uLL);
  sub_250F22234(v16);
  return sub_250F2A3B4(__dst);
}

uint64_t *sub_250F55A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250F572B4(a1, a3, type metadata accessor for IndividualOvernightMetricChartPoint);
  double v5 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v6 = (uint64_t *)(a2 + v5[5]);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[2];
  uint64_t v9 = v6[3];
  uint64_t v10 = v6[4];
  uint64_t v11 = v6[5];
  uint64_t v17 = *v6;
  uint64_t v18 = v6[1];
  uint64_t v19 = v6[6];
  uint64_t v20 = v6[7];
  uint64_t v21 = v6[8];
  char v22 = *(unsigned char *)(a2 + v5[6]);
  uint64_t v12 = a2 + v5[9];
  uint64_t v13 = (int *)type metadata accessor for OvernightMetricsChartPointForeground();
  sub_250F572B4(v12, a3 + v13[7], type metadata accessor for OvernightMetricsChartLayout);
  uint64_t v14 = (const void *)(a2 + v5[10]);
  memcpy(__dst, v14, 0x118uLL);
  uint64_t v15 = (uint64_t *)(a3 + v13[5]);
  uint64_t *v15 = v7;
  v15[1] = v18;
  _OWORD v15[2] = v8;
  v15[3] = v9;
  v15[4] = v10;
  v15[5] = v11;
  v15[6] = v19;
  v15[7] = v20;
  v15[8] = v21;
  *(unsigned char *)(a3 + v13[6]) = v22;
  memcpy((void *)(a3 + v13[8]), v14, 0x118uLL);
  sub_250F22234(v17);
  return sub_250F2A3B4(__dst);
}

void sub_250F55B8C()
{
  if (!qword_269B13338)
  {
    sub_250F55CC0(255);
    sub_2510378C0();
    sub_250F57A5C(255, &qword_269B13348, sub_250F55CF4, sub_250F561A4);
    sub_250F5615C(&qword_269B133D0, sub_250F55CC0);
    sub_250F5615C(&qword_26B210AC0, MEMORY[0x263F42E30]);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13338);
    }
  }
}

void sub_250F55CC0(uint64_t a1)
{
}

void sub_250F55CF4(uint64_t a1)
{
}

void sub_250F55D14(uint64_t a1)
{
}

void sub_250F55D48(uint64_t a1)
{
}

void sub_250F55D7C()
{
  if (!qword_269B13360)
  {
    sub_250F55EE8();
    sub_250F56024();
    sub_250F568A0(255, &qword_269B13378, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, (void (*)(void))sub_250F56128);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointForeground();
    sub_250F56128();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13360);
    }
  }
}

void sub_250F55EE8()
{
  if (!qword_269B13368)
  {
    sub_250F56024();
    sub_250F568A0(255, &qword_269B13378, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, (void (*)(void))sub_250F56128);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointForeground();
    sub_250F56128();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13368);
    }
  }
}

void sub_250F56024()
{
  if (!qword_269B13370)
  {
    sub_250F568A0(255, &qword_269B13378, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, (void (*)(void))sub_250F56128);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointForeground();
    sub_250F56128();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13370);
    }
  }
}

uint64_t sub_250F56128()
{
  return sub_250F5615C(&qword_269B13380, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground);
}

uint64_t sub_250F5615C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250F561A4(uint64_t a1)
{
}

void sub_250F561D8()
{
  if (!qword_269B133A0)
  {
    sub_250F33580();
    sub_250F5780C(255, (unint64_t *)&qword_269B12E28, MEMORY[0x263F8D560], MEMORY[0x263F8D1A0]);
    sub_250F562D0();
    sub_250F5615C(&qword_269B133C0, (void (*)(uint64_t))sub_250F33580);
    sub_250F5648C();
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B133A0);
    }
  }
}

void sub_250F562D0()
{
  if (!qword_269B133A8)
  {
    sub_250F563A0();
    sub_251038010();
    sub_250F56438();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B133A8);
    }
  }
}

void sub_250F563A0()
{
  if (!qword_269B133B0)
  {
    sub_251038010();
    sub_250F56438();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B133B0);
    }
  }
}

unint64_t sub_250F56438()
{
  unint64_t result = qword_269B133B8;
  if (!qword_269B133B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B133B8);
  }
  return result;
}

unint64_t sub_250F5648C()
{
  unint64_t result = qword_269B133C8;
  if (!qword_269B133C8)
  {
    sub_250F5780C(255, (unint64_t *)&qword_269B12E28, MEMORY[0x263F8D560], MEMORY[0x263F8D1A0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B133C8);
  }
  return result;
}

void sub_250F56518()
{
  if (!qword_269B133D8)
  {
    sub_250F55CC0(255);
    sub_2510378C0();
    sub_250F5615C(&qword_269B133D0, sub_250F55CC0);
    sub_250F5615C(&qword_26B210AC0, MEMORY[0x263F42E30]);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B133D8);
    }
  }
}

void sub_250F56610(uint64_t a1)
{
}

void sub_250F56644(uint64_t a1)
{
}

void sub_250F56664(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_250F55D14(255);
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(255);
    a3(255);
    sub_250F5615C((unint64_t *)&qword_269B13388, sub_250F55D14);
    sub_250F5615C(&qword_269B13390, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint.ID);
    unint64_t v5 = sub_251038C90();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_250F56768(uint64_t a1)
{
}

void sub_250F5679C()
{
  if (!qword_269B133F8)
  {
    sub_250F568A0(255, &qword_269B13400, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow, (void (*)(void))sub_250F56954);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointShadow();
    sub_250F56954();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B133F8);
    }
  }
}

void sub_250F568A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    sub_251038010();
    a3(255);
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v8) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

uint64_t sub_250F56954()
{
  return sub_250F5615C(&qword_269B13408, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow);
}

double sub_250F5698C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for IndividualOvernightMetricsChartPoints() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_250F52A50(a1, v2 + v6, v7, a2);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v12 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = v0 + ((v12 + 16) & ~v12);
  uint64_t v3 = sub_251037400();
  double v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_250F26E08();
  uint64_t v11 = v5;
  v4(v2 + *(int *)(v5 + 36), v3);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + v1[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = v2 + v1[9];
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v4(v7, v3);
    uint64_t v9 = v7 + *(int *)(v8 + 20);
    v4(v9, v3);
    v4(v9 + *(int *)(v11 + 36), v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + v1[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_250F56D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for IndividualOvernightMetricsChartPoints() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_250F53654(a1, v2 + v6, v7, a2);
}

unint64_t sub_250F56E34()
{
  unint64_t result = qword_269B13418;
  if (!qword_269B13418)
  {
    sub_250F57A5C(255, &qword_269B13348, sub_250F55CF4, sub_250F561A4);
    sub_250F570F4(&qword_269B13420, sub_250F55CF4, (void (*)(void))sub_250F56F6C);
    sub_250F570F4(&qword_269B13430, sub_250F561A4, (void (*)(void))sub_250F57164);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13418);
  }
  return result;
}

unint64_t sub_250F56F6C()
{
  unint64_t result = qword_269B13428;
  if (!qword_269B13428)
  {
    sub_250F55D48(255);
    sub_250F55EE8();
    sub_250F56024();
    sub_250F568A0(255, &qword_269B13378, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, (void (*)(void))sub_250F56128);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointForeground();
    sub_250F56128();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13428);
  }
  return result;
}

uint64_t sub_250F570F4(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250F57164()
{
  unint64_t result = qword_269B13438;
  if (!qword_269B13438)
  {
    sub_250F561D8();
    sub_250F563A0();
    sub_251038010();
    sub_250F56438();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13438);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_250F572B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F5731C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_250F57378(uint64_t a1)
{
  return a1;
}

uint64_t sub_250F573CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_250F5742C()
{
  if (!qword_269B13448)
  {
    sub_250F55B8C();
    sub_250F57514();
    sub_250F570F4(&qword_269B13440, (void (*)(uint64_t))sub_250F55B8C, (void (*)(void))sub_250F56E34);
    sub_250F57614();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13448);
    }
  }
}

void sub_250F57514()
{
  if (!qword_269B13450)
  {
    sub_250F58018(255, &qword_269B13458, sub_250F575AC, (void (*)(void))sub_250F575E0);
    sub_2510382F0();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13450);
    }
  }
}

void sub_250F575AC(uint64_t a1)
{
}

uint64_t sub_250F575E0()
{
  return sub_250F5615C(&qword_269B13468, sub_250F575AC);
}

unint64_t sub_250F57614()
{
  unint64_t result = qword_269B13470;
  if (!qword_269B13470)
  {
    sub_250F57514();
    sub_250F575AC(255);
    sub_250F575E0();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13470);
  }
  return result;
}

uint64_t sub_250F576C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250F57894(a1, (void (*)(uint64_t, double))sub_250F52480, (uint64_t (*)(void))sub_250F5679C, a2);
}

unint64_t sub_250F576EC()
{
  unint64_t result = qword_269B13478;
  if (!qword_269B13478)
  {
    sub_250F56768(255);
    sub_250F568A0(255, &qword_269B13400, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow, (void (*)(void))sub_250F56954);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointShadow();
    sub_250F56954();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13478);
  }
  return result;
}

void sub_250F5780C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x263F8D538]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t *sub_250F5785C@<X0>(uint64_t a1@<X8>)
{
  return sub_250F55688(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_250F57868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250F57894(a1, (void (*)(uint64_t, double))sub_250F54D04, (uint64_t (*)(void))sub_250F55D7C, a2);
}

uint64_t sub_250F57894@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, double)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  return sub_250F54C10(a1, a2, a3, a4);
}

uint64_t sub_250F57920(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F5798C@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for IndividualOvernightMetricsChartPoints() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_250F555E4(a1, v6, a2);
}

uint64_t sub_250F57A0C@<X0>(uint64_t a1@<X8>)
{
  return sub_250F557F0(*(void *)(v1 + 32), *(void *)(v1 + 48), a1, *(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 40));
}

uint64_t *sub_250F57A20@<X0>(uint64_t a1@<X8>)
{
  return sub_250F55A24(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_250F57A28(uint64_t a1)
{
}

void sub_250F57A5C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_251037CE0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_250F57ADC(uint64_t a1)
{
}

void sub_250F57AFC(uint64_t a1)
{
}

void sub_250F57B38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_250F57BA4()
{
  if (!qword_269B134B8)
  {
    sub_250F568A0(255, &qword_269B134C0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground, (void (*)(void))sub_250F57CA8);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointBackground();
    sub_250F57CA8();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B134B8);
    }
  }
}

uint64_t sub_250F57CA8()
{
  return sub_250F5615C(&qword_269B134C8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground);
}

unint64_t sub_250F57CDC()
{
  unint64_t result = qword_269B134D0;
  if (!qword_269B134D0)
  {
    sub_250F57A28(255);
    sub_250F570F4(&qword_269B13430, sub_250F561A4, (void (*)(void))sub_250F57164);
    sub_250F570F4(&qword_269B134D8, sub_250F57ADC, (void (*)(void))sub_250F57DE4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B134D0);
  }
  return result;
}

unint64_t sub_250F57DE4()
{
  unint64_t result = qword_269B134E0;
  if (!qword_269B134E0)
  {
    sub_250F57AFC(255);
    sub_250F568A0(255, &qword_269B134C0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground, (void (*)(void))sub_250F57CA8);
    sub_251038010();
    type metadata accessor for OvernightMetricsChartPointBackground();
    sub_250F57CA8();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B134E0);
  }
  return result;
}

void sub_250F57F0C()
{
  if (!qword_269B134E8)
  {
    sub_250F57A28(255);
    sub_250F58018(255, &qword_269B134F0, sub_250F580A8, (void (*)(void))sub_250F58140);
    sub_250F57CDC();
    sub_250F580A8(255);
    sub_250F58140();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B134E8);
    }
  }
}

void sub_250F58018(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v7) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_250F580A8(uint64_t a1)
{
}

void sub_250F580DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250F58140()
{
  return sub_250F5615C(&qword_269B13500, sub_250F580A8);
}

void sub_250F58174(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v1 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v12 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = v0 + ((v12 + 16) & ~v12);
  uint64_t v3 = sub_251037400();
  double v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_250F26E08();
  uint64_t v11 = v5;
  v4(v2 + *(int *)(v5 + 36), v3);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + v1[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = v2 + v1[9];
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v8 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v4(v7, v3);
    uint64_t v9 = v7 + *(int *)(v8 + 20);
    v4(v9, v3);
    v4(v9 + *(int *)(v11 + 36), v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + v1[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250F5852C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for IndividualOvernightMetricsChartPoints();
  return sub_250F54468(a1, a2);
}

uint64_t sub_250F585AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  uint64_t v17 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v3 = sub_2510378C0();
  uint64_t v18 = *(void *)(v3 - 8);
  uint64_t v19 = v3;
  uint64_t v14 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v16 = (v17 + 16) & ~v17;
  uint64_t v4 = v0 + v16;
  uint64_t v5 = sub_251037400();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v16, v5);
  sub_250F26E08();
  uint64_t v13 = v7;
  v6(v0 + v16 + *(int *)(v7 + 36), v5);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v16 + v2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v4 + v2[9];
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v6(v9, v5);
    uint64_t v11 = v9 + *(int *)(v10 + 20);
    v6(v11, v5);
    v6(v11 + *(int *)(v13 + 36), v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = v0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + v2[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v1 + ((v16 + v15 + v14) & ~v14), v19);
  return swift_deallocObject();
}

uint64_t sub_250F58970@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for IndividualOvernightMetricsChartPoints() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_2510378C0();
  return sub_250F53EBC(a1, v2 + v6, a2);
}

uint64_t *sub_250F58A54@<X0>(uint64_t a1@<X8>)
{
  return sub_250F558A4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_250F58A60()
{
  unint64_t result = qword_269B13518;
  if (!qword_269B13518)
  {
    sub_250F58B2C();
    sub_250F570F4(&qword_269B13528, sub_250F56610, (void (*)(void))sub_250F58BA8);
    sub_250F58BF0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13518);
  }
  return result;
}

void sub_250F58B2C()
{
  if (!qword_269B13520)
  {
    sub_250F56610(255);
    sub_250F56518();
    unint64_t v0 = sub_251037CE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13520);
    }
  }
}

uint64_t sub_250F58BA8()
{
  return sub_250F570F4(&qword_269B13530, sub_250F56644, (void (*)(void))sub_250F576EC);
}

unint64_t sub_250F58BF0()
{
  unint64_t result = qword_269B13538;
  if (!qword_269B13538)
  {
    sub_250F56518();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13538);
  }
  return result;
}

uint64_t HKQuantity.formattedAttributedValue(for:unit:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v144 = a2;
  uint64_t v147 = a3;
  uint64_t v113 = sub_2510398D0();
  uint64_t v112 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  unint64_t v111 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_2510398F0();
  uint64_t v109 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  unint64_t v108 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_251037110();
  uint64_t v127 = *(void *)(v128 - 8);
  MEMORY[0x270FA5388](v128);
  uint64_t v124 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F59F50();
  uint64_t v126 = v7;
  uint64_t v125 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v123 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F5A024(0, &qword_269B13550, MEMORY[0x263F06200]);
  uint64_t v119 = v9;
  uint64_t v118 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  v117 = (char *)&v108 - v10;
  sub_250F5A024(0, &qword_269B13560, MEMORY[0x263F061F0]);
  uint64_t v116 = v11;
  uint64_t v115 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v114 = (char *)&v108 - v12;
  sub_250F5A024(0, &qword_269B13568, MEMORY[0x263F06210]);
  uint64_t v122 = v13;
  uint64_t v121 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v120 = (char *)&v108 - v14;
  uint64_t v15 = sub_251038890();
  uint64_t v142 = *(void *)(v15 - 8);
  uint64_t v143 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v139 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F068A8];
  sub_250F5C7AC(0, &qword_269B13570, (uint64_t (*)(void))sub_250F5A084, MEMORY[0x263F18288], MEMORY[0x263F068A8]);
  uint64_t v140 = *(void *)(v18 - 8);
  uint64_t v141 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v138 = (char *)&v108 - v19;
  uint64_t v20 = sub_251037130();
  uint64_t v133 = *(void *)(v20 - 8);
  uint64_t v134 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v132 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F5C7AC(0, &qword_269B13580, (uint64_t (*)(void))sub_250F5A0D8, MEMORY[0x263F064B0], v17);
  uint64_t v130 = *(void *)(v22 - 8);
  uint64_t v131 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v108 - v23;
  uint64_t v25 = MEMORY[0x263F8D538];
  sub_250F5C7AC(0, &qword_269B13590, (uint64_t (*)(void))sub_250F5A12C, MEMORY[0x263F8D538], MEMORY[0x263F06D60]);
  uint64_t v27 = v26;
  uint64_t v129 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v108 - v28;
  sub_250F5C7AC(0, &qword_269B135A0, (uint64_t (*)(void))sub_250F5A12C, v25, MEMORY[0x263F06D88]);
  uint64_t v31 = v30;
  uint64_t v32 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v108 - v33;
  uint64_t v35 = sub_251037210();
  uint64_t v136 = *(void *)(v35 - 8);
  uint64_t v137 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v135 = (char *)&v108 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  unint64_t v146 = (char *)&v108 - v38;
  uint64_t v39 = sub_251037740();
  uint64_t v40 = *(void *)(v39 - 8);
  double v41 = MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v108 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v40 + 16))(v43, a1, v39, v41);
  int v44 = (*(uint64_t (**)(char *, uint64_t))(v40 + 88))(v43, v39);
  if (v44 == *MEMORY[0x263F42CC8] || v44 == *MEMORY[0x263F42CB8])
  {
    sub_251039390();
    sub_251037200();
    return sub_2510371C0();
  }
  else if (v44 == *MEMORY[0x263F42CB0])
  {
    id v45 = objc_msgSend(self, sel_percentUnit);
    objc_msgSend(v145, sel_doubleValueForUnit_, v45);
    uint64_t v47 = v46;

    uint64_t v148 = v47;
    sub_251037000();
    sub_251037260();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    sub_250F5A12C();
    sub_250F5A558(&qword_269B135B8, &qword_269B13590, MEMORY[0x263F06D60]);
    sub_251039030();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v29, v27);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    *(&v108 - 2) = v49;
    swift_getKeyPath();
    sub_250F5A0D8();
    sub_2510371D0();
    swift_release();
    uint64_t v51 = v132;
    uint64_t v50 = v133;
    uint64_t v52 = v134;
    (*(void (**)(char *, void, uint64_t))(v133 + 104))(v132, *MEMORY[0x263F064A0], v134);
    uint64_t v53 = v146;
    uint64_t v54 = v131;
    sub_2510371E0();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v24, v54);
    uint64_t v55 = swift_getKeyPath();
    MEMORY[0x270FA5388](v55);
    *(&v108 - 2) = v56;
    swift_getKeyPath();
    sub_250F5A084();
    uint64_t v57 = v138;
    sub_2510371D0();
    swift_release();
    uint64_t v58 = v139;
    sub_251038880();
    uint64_t v59 = v135;
    uint64_t v60 = v141;
    sub_2510371E0();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v58, v143);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v57, v60);
    sub_251037190();
    uint64_t v61 = v137;
    uint64_t v62 = *(void (**)(char *, uint64_t))(v136 + 8);
    v62(v59, v137);
    return ((uint64_t (*)(char *, uint64_t))v62)(v53, v61);
  }
  else if (v44 == *MEMORY[0x263F42CC0])
  {
    id v64 = v145;
    id v65 = v144;
    uint64_t v66 = v120;
    sub_251037070();
    uint64_t v67 = v114;
    sub_251037040();
    uint64_t v68 = v117;
    uint64_t v69 = v116;
    sub_251037080();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v67, v69);
    sub_250F5A4E4();
    uint64_t v70 = v122;
    uint64_t v71 = v119;
    sub_251037090();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v68, v71);
    uint64_t v72 = swift_getKeyPath();
    MEMORY[0x270FA5388](v72);
    *(&v108 - 2) = v73;
    swift_getKeyPath();
    sub_250F5A180(&qword_269B13548, MEMORY[0x263F06498]);
    uint64_t v74 = v123;
    sub_2510371D0();
    swift_release();
    uint64_t v75 = v127;
    uint64_t v76 = v124;
    uint64_t v77 = v128;
    (*(void (**)(char *, void, uint64_t))(v127 + 104))(v124, *MEMORY[0x263F06450], v128);
    uint64_t v78 = v146;
    uint64_t v79 = v126;
    sub_2510371E0();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v74, v79);
    uint64_t v80 = swift_getKeyPath();
    MEMORY[0x270FA5388](v80);
    *(&v108 - 2) = v81;
    swift_getKeyPath();
    sub_250F5A084();
    uint64_t v82 = v138;
    sub_2510371D0();
    swift_release();
    uint64_t v83 = v139;
    sub_251038880();
    uint64_t v84 = v135;
    uint64_t v85 = v141;
    sub_2510371E0();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v83, v143);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v82, v85);
    sub_251037190();
    uint64_t v86 = v137;
    uint64_t v87 = *(void (**)(char *, uint64_t))(v136 + 8);
    v87(v84, v137);
    v87(v78, v86);
    return (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v66, v70);
  }
  else if (v44 == *MEMORY[0x263F42CA8])
  {
    id v88 = v145;
    sub_251039910();
    uint64_t v89 = v108;
    sub_251037050();
    uint64_t v90 = v111;
    sub_2510398E0();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v89, v110);
    sub_250F5A180(&qword_269B135A8, MEMORY[0x263F07EA0]);
    uint64_t v91 = v113;
    sub_251039900();
    (*(void (**)(char *, uint64_t))(v112 + 8))(v90, v91);
    uint64_t v92 = swift_getKeyPath();
    MEMORY[0x270FA5388](v92);
    *(&v108 - 2) = v93;
    swift_getKeyPath();
    sub_250F5A180(&qword_269B13548, MEMORY[0x263F06498]);
    uint64_t v94 = v123;
    sub_2510371D0();
    swift_release();
    uint64_t v95 = v127;
    uint64_t v96 = v124;
    uint64_t v97 = v128;
    (*(void (**)(char *, void, uint64_t))(v127 + 104))(v124, *MEMORY[0x263F06450], v128);
    uint64_t v98 = v146;
    uint64_t v99 = v126;
    sub_2510371E0();
    (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v94, v99);
    uint64_t v100 = swift_getKeyPath();
    MEMORY[0x270FA5388](v100);
    *(&v108 - 2) = v101;
    swift_getKeyPath();
    sub_250F5A084();
    uint64_t v102 = v138;
    sub_2510371D0();
    swift_release();
    uint64_t v103 = v139;
    sub_251038880();
    uint64_t v104 = v135;
    uint64_t v105 = v141;
    sub_2510371E0();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v103, v143);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v102, v105);
    sub_251037190();
    uint64_t v106 = v137;
    uint64_t v107 = *(void (**)(char *, uint64_t))(v136 + 8);
    v107(v104, v137);
    return ((uint64_t (*)(char *, uint64_t))v107)(v98, v106);
  }
  else
  {
    sub_251037180();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v43, v39);
  }
}

void sub_250F59F50()
{
  if (!qword_269B13540)
  {
    sub_251037120();
    sub_250F5A180(&qword_269B13548, MEMORY[0x263F06498]);
    unint64_t v0 = sub_2510371F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13540);
    }
  }
}

unint64_t sub_250F59FE4()
{
  unint64_t result = qword_269B13558;
  if (!qword_269B13558)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B13558);
  }
  return result;
}

void sub_250F5A024(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250F59FE4();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_250F5A084()
{
  unint64_t result = qword_269B13578;
  if (!qword_269B13578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13578);
  }
  return result;
}

unint64_t sub_250F5A0D8()
{
  unint64_t result = qword_269B13588;
  if (!qword_269B13588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13588);
  }
  return result;
}

unint64_t sub_250F5A12C()
{
  unint64_t result = qword_269B13598;
  if (!qword_269B13598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13598);
  }
  return result;
}

uint64_t sub_250F5A180(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F5A1C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  return sub_2510390F0() & 1;
}

uint64_t sub_250F5A22C()
{
  return sub_2510390F0() & 1;
}

uint64_t sub_250F5A284()
{
  return sub_251037150();
}

uint64_t sub_250F5A2A8()
{
  return sub_250F5A180(&qword_269B13548, MEMORY[0x263F06498]);
}

uint64_t sub_250F5A2F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = sub_250F5A180(&qword_269B13548, MEMORY[0x263F06498]);
  return MEMORY[0x270EEF810](v2, v3);
}

uint64_t sub_250F5A364()
{
  return 8;
}

uint64_t sub_250F5A370()
{
  return swift_release();
}

uint64_t sub_250F5A378(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_250F5A388()
{
  return sub_251039090();
}

void *sub_250F5A3CC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_250F5A3D8()
{
}

void sub_250F5A3F8()
{
}

uint64_t sub_250F5A420()
{
  return 8;
}

uint64_t sub_250F5A42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250F5A1C8(a1, a2, a3, &qword_269B135E0, MEMORY[0x263F182E8]) & 1;
}

uint64_t sub_250F5A46C(uint64_t a1, uint64_t a2)
{
  return keypath_hash_26Tm(a1, a2, &qword_269B135E0, MEMORY[0x263F182E8]);
}

uint64_t keypath_hash_26Tm(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return sub_251039090();
}

unint64_t sub_250F5A4E4()
{
  unint64_t result = qword_269B135B0;
  if (!qword_269B135B0)
  {
    sub_250F5A024(255, &qword_269B13550, MEMORY[0x263F06200]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B135B0);
  }
  return result;
}

uint64_t sub_250F5A558(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F5C7AC(255, a2, (uint64_t (*)(void))sub_250F5A12C, MEMORY[0x263F8D538], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250F5A5BC()
{
}

void sub_250F5A5DC()
{
}

uint64_t sub_250F5A604()
{
  return 8;
}

uint64_t sub_250F5A610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250F5A1C8(a1, a2, a3, &qword_269B135D8, MEMORY[0x263F064C0]) & 1;
}

uint64_t sub_250F5A650(uint64_t a1, uint64_t a2)
{
  return keypath_hash_26Tm(a1, a2, &qword_269B135D8, MEMORY[0x263F064C0]);
}

BOOL static HKQuantity.MedialRangeRelativeStringVariant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t HKQuantity.MedialRangeRelativeStringVariant.hash(into:)()
{
  return sub_251039860();
}

uint64_t HKQuantity.MedialRangeRelativeStringVariant.hashValue.getter()
{
  return sub_251039890();
}

uint64_t HKQuantity.formatted(for:classification:middle:unit:variant:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v6 = v5;
  id v171 = a3;
  uint64_t v173 = a1;
  uint64_t v10 = sub_251037460();
  MEMORY[0x270FA5388](v10 - 8);
  v169 = (char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_251039180();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v168 = (char *)&v156 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F5C7AC(0, &qword_269B135C0, (uint64_t (*)(void))sub_250F5A12C, MEMORY[0x263F8D538], MEMORY[0x263F06DA8]);
  uint64_t v165 = v14;
  uint64_t v174 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  v164 = (char *)&v156 - v15;
  uint64_t v16 = sub_251039160();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v166 = (char *)&v156 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_251037740();
  uint64_t v172 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v156 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_2510378C0();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v163 = (uint64_t)&v156 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v156 - v26;
  int v167 = *a5;
  objc_msgSend(v6, sel_doubleValueForUnit_, a4, v25);
  double v29 = v28;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v170 = a2;
  v30(v27, a2, v21);
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v27, v21);
  if (v31 == *MEMORY[0x263F42E20])
  {
    objc_msgSend(v171, sel_doubleValueForUnit_, a4);
  }
  else
  {
    if (v31 != *MEMORY[0x263F42E18] && v31 != *MEMORY[0x263F42E28] && v31 != *MEMORY[0x263F42E10]) {
      goto LABEL_40;
    }
    objc_msgSend(v171, sel_doubleValueForUnit_, a4);
    double v35 = v34;
    double v33 = v29;
    double v29 = v35;
  }
  double v36 = v29 - v33;
  uint64_t v37 = v172;
  (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v20, v173, v18);
  int v38 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v20, v18);
  if (v38 == *MEMORY[0x263F42CC8])
  {
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    uint64_t v39 = v164;
    sub_251037030();
    uint64_t v173 = sub_250F5A558(&qword_269B135C8, &qword_269B135C0, MEMORY[0x263F06DA8]);
    uint64_t v172 = sub_250F3EB74();
    uint64_t v40 = v165;
    sub_251039110();
    uint64_t v41 = v174 + 8;
    id v171 = *(id *)(v174 + 8);
    ((void (*)(char *, uint64_t))v171)(v39, v40);
    uint64_t v174 = v41;
    uint64_t v161 = 0xD000000000000019;
    sub_251039140();
    sub_251039170();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v157 = ObjCClassFromMetadata;
    uint64_t v43 = self;
    id v158 = v43;
    id v44 = objc_msgSend(v43, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    uint64_t v45 = sub_2510391D0();
    uint64_t v162 = v46;
    uint64_t v163 = v45;
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    sub_251037030();
    sub_251039110();
    uint64_t v47 = (void (*)(char *, uint64_t))v171;
    ((void (*)(char *, uint64_t))v171)(v39, v40);
    sub_251039140();
    sub_251039170();
    uint64_t v48 = v43;
    uint64_t v49 = v157;
    id v50 = objc_msgSend(v48, sel_bundleForClass_, v157);
    sub_251037450();
    uint64_t v161 = sub_2510391D0();
    uint64_t v160 = v51;
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    sub_251037030();
    sub_251039110();
    v47(v39, v40);
    sub_251039140();
    sub_251039170();
    id v52 = v158;
    id v53 = objc_msgSend(v158, sel_bundleForClass_, v49);
    sub_251037450();
    id v159 = (id)sub_2510391D0();
    uint64_t v55 = v54;
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    sub_251037030();
    sub_251039110();
    ((void (*)(char *, uint64_t))v171)(v39, v40);
    sub_251039140();
    sub_251039170();
    id v56 = objc_msgSend(v52, sel_bundleForClass_, v49);
    sub_251037450();
    uint64_t v57 = sub_2510391D0();
    uint64_t v59 = sub_250F5C814(v163, v162, v161, v160, (uint64_t)v159, v55, v57, v58, v170, v167);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    return v59;
  }
  if (v38 == *MEMORY[0x263F42CB8])
  {
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    uint64_t v60 = v164;
    sub_251037020();
    uint64_t v61 = (void *)sub_250F5A558(&qword_269B135C8, &qword_269B135C0, MEMORY[0x263F06DA8]);
    uint64_t v173 = sub_250F3EB74();
    uint64_t v62 = v165;
    sub_251039110();
    uint64_t v172 = *(void *)(v174 + 8);
    v174 += 8;
    ((void (*)(char *, uint64_t))v172)(v60, v62);
    sub_251039140();
    sub_251039170();
    type metadata accessor for HealthBalanceUI();
    uint64_t v63 = swift_getObjCClassFromMetadata();
    uint64_t v157 = v63;
    id v64 = self;
    id v159 = v64;
    id v65 = objc_msgSend(v64, sel_bundleForClass_, v63);
    sub_251037450();
    id v171 = (id)sub_2510391D0();
    uint64_t v163 = v66;
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    sub_251037020();
    id v158 = v61;
    sub_251039110();
    uint64_t v67 = (void (*)(char *, uint64_t))v172;
    ((void (*)(char *, uint64_t))v172)(v60, v62);
    sub_251039140();
    sub_251039170();
    uint64_t v68 = v64;
    uint64_t v69 = v157;
    id v70 = objc_msgSend(v68, sel_bundleForClass_, v157);
    sub_251037450();
    uint64_t v162 = sub_2510391D0();
    uint64_t v161 = v71;
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    sub_251037020();
    sub_251039110();
    v67(v60, v62);
    sub_251039140();
    sub_251039170();
    id v72 = v159;
    id v73 = objc_msgSend(v159, sel_bundleForClass_, v69);
    sub_251037450();
    uint64_t v160 = sub_2510391D0();
    uint64_t v75 = v74;
    sub_251039150();
    sub_251039140();
    double v175 = v36;
    sub_251037020();
    sub_251039110();
    ((void (*)(char *, uint64_t))v172)(v60, v62);
    sub_251039140();
    sub_251039170();
    id v76 = objc_msgSend(v72, sel_bundleForClass_, v69);
LABEL_13:
    id v93 = v76;
    sub_251037450();
    uint64_t v94 = sub_2510391D0();
    uint64_t v59 = sub_250F5C814((uint64_t)v171, v163, v162, v161, v160, v75, v94, v95, v170, v167);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v38 == *MEMORY[0x263F42CB0])
  {
    double v77 = v36 * 100.0;
    sub_251039150();
    sub_251039140();
    double v175 = v77;
    uint64_t v78 = v164;
    sub_251037010();
    uint64_t v79 = (void *)sub_250F5A558(&qword_269B135C8, &qword_269B135C0, MEMORY[0x263F06DA8]);
    uint64_t v173 = sub_250F3EB74();
    uint64_t v80 = v165;
    sub_251039110();
    uint64_t v172 = *(void *)(v174 + 8);
    v174 += 8;
    ((void (*)(char *, uint64_t))v172)(v78, v80);
    sub_251039140();
    sub_251039170();
    type metadata accessor for HealthBalanceUI();
    uint64_t v81 = swift_getObjCClassFromMetadata();
    uint64_t v157 = v81;
    uint64_t v82 = self;
    id v159 = v82;
    id v83 = objc_msgSend(v82, sel_bundleForClass_, v81);
    sub_251037450();
    id v171 = (id)sub_2510391D0();
    uint64_t v163 = v84;
    sub_251039150();
    sub_251039140();
    double v175 = v77;
    sub_251037010();
    id v158 = v79;
    sub_251039110();
    uint64_t v85 = (void (*)(char *, uint64_t))v172;
    ((void (*)(char *, uint64_t))v172)(v78, v80);
    sub_251039140();
    sub_251039170();
    uint64_t v86 = v82;
    uint64_t v87 = v157;
    id v88 = objc_msgSend(v86, sel_bundleForClass_, v157);
    sub_251037450();
    uint64_t v162 = sub_2510391D0();
    uint64_t v161 = v89;
    sub_251039150();
    sub_251039140();
    double v175 = v77;
    sub_251037010();
    sub_251039110();
    v85(v78, v80);
    sub_251039140();
    sub_251039170();
    id v90 = v159;
    id v91 = objc_msgSend(v159, sel_bundleForClass_, v87);
    sub_251037450();
    uint64_t v160 = sub_2510391D0();
    uint64_t v75 = v92;
    sub_251039150();
    sub_251039140();
    double v175 = v77;
    sub_251037010();
    sub_251039110();
    ((void (*)(char *, uint64_t))v172)(v78, v80);
    sub_251039140();
    sub_251039170();
    id v76 = objc_msgSend(v90, sel_bundleForClass_, v87);
    goto LABEL_13;
  }
  if (v38 == *MEMORY[0x263F42CC0])
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t v97 = swift_getObjCClassFromMetadata();
    uint64_t v98 = self;
    id v99 = objc_msgSend(v98, sel_bundleForClass_, v97);
    sub_251037450();
    uint64_t v174 = sub_2510391D0();
    uint64_t v101 = v100;
    sub_251039100();
    id v102 = objc_msgSend(v98, (SEL)0x26535EF25, v97);
    sub_251037450();
    uint64_t v103 = sub_2510391D0();
    uint64_t v105 = v104;
    sub_251039100();
    id v106 = objc_msgSend(v98, (SEL)0x26535EF25, v97);
    sub_251037450();
    uint64_t v107 = sub_2510391D0();
    uint64_t v109 = v108;
    sub_251039100();
    id v110 = objc_msgSend(v98, sel_bundleForClass_, v97);
    sub_251037450();
    uint64_t v111 = sub_2510391D0();
    uint64_t v59 = sub_250F5C814(v174, v101, v103, v105, v107, v109, v111, v112, v170, v167);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v38 != *MEMORY[0x263F42CA8])
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v18);
    return 0;
  }
  v32.n128_f64[0] = v36 / 60.0;
  if (v36 / 60.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v32.n128_f64[0] >= 9.22337204e18)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  double v113 = v36 / 3600.0;
  if ((v32.n128_u64[0] & 0x7FF0000000000000) == 0x7FF0000000000000
    || (COERCE_UNSIGNED_INT64(v36 / 3600.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_37;
  }
  if (v113 > -9.22337204e18)
  {
    if (v113 < 9.22337204e18)
    {
      uint64_t v115 = (uint64_t)v32.n128_f64[0] % 60;
      uint64_t v116 = (uint64_t)v113;
      if ((uint64_t)v113)
      {
        if (*(double *)&v115 != 0.0)
        {
          sub_251039150();
          sub_251039140();
          double v175 = *(double *)&v116;
          sub_251039120();
          sub_251039140();
          double v175 = *(double *)&v115;
          sub_251039120();
          sub_251039140();
          sub_251039170();
          type metadata accessor for HealthBalanceUI();
          uint64_t v117 = swift_getObjCClassFromMetadata();
          uint64_t v118 = self;
          id v119 = objc_msgSend(v118, sel_bundleForClass_, v117);
          sub_251037450();
          uint64_t v120 = sub_2510391D0();
          uint64_t v173 = v121;
          uint64_t v174 = v120;
          sub_251039150();
          sub_251039140();
          double v175 = *(double *)&v116;
          sub_251039120();
          sub_251039140();
          double v175 = *(double *)&v115;
          sub_251039120();
          sub_251039140();
          sub_251039170();
          id v122 = objc_msgSend(v118, sel_bundleForClass_, v117);
          sub_251037450();
          uint64_t v123 = sub_2510391D0();
          id v171 = v124;
          uint64_t v172 = v123;
          sub_251039150();
          sub_251039140();
          double v175 = *(double *)&v116;
          sub_251039120();
          sub_251039140();
          double v175 = *(double *)&v115;
          sub_251039120();
          sub_251039140();
          sub_251039170();
          id v125 = objc_msgSend(v118, sel_bundleForClass_, v117);
          sub_251037450();
          uint64_t v165 = sub_2510391D0();
          uint64_t v127 = v126;
          sub_251039150();
          sub_251039140();
          double v175 = *(double *)&v116;
          sub_251039120();
          sub_251039140();
          double v175 = *(double *)&v115;
          sub_251039120();
          sub_251039140();
          sub_251039170();
          id v128 = objc_msgSend(v118, sel_bundleForClass_, v117);
          sub_251037450();
          uint64_t v129 = sub_2510391D0();
          uint64_t v59 = sub_250F5C814(v174, v173, v172, (uint64_t)v171, v165, v127, v129, v130, v170, v167);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v116;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        type metadata accessor for HealthBalanceUI();
        uint64_t v144 = swift_getObjCClassFromMetadata();
        id v145 = self;
        id v146 = objc_msgSend(v145, sel_bundleForClass_, v144);
        sub_251037450();
        uint64_t v147 = sub_2510391D0();
        uint64_t v173 = v148;
        uint64_t v174 = v147;
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v116;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        id v149 = objc_msgSend(v145, sel_bundleForClass_, v144);
        sub_251037450();
        uint64_t v172 = sub_2510391D0();
        uint64_t v138 = v150;
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v116;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        id v151 = objc_msgSend(v145, sel_bundleForClass_, v144);
        sub_251037450();
        uint64_t v140 = sub_2510391D0();
        uint64_t v142 = v152;
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v116;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        id v153 = objc_msgSend(v145, sel_bundleForClass_, v144);
        sub_251037450();
      }
      else
      {
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v115;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        type metadata accessor for HealthBalanceUI();
        uint64_t v131 = swift_getObjCClassFromMetadata();
        uint64_t v132 = self;
        id v133 = objc_msgSend(v132, sel_bundleForClass_, v131);
        sub_251037450();
        uint64_t v134 = sub_2510391D0();
        uint64_t v173 = v135;
        uint64_t v174 = v134;
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v115;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        id v136 = objc_msgSend(v132, sel_bundleForClass_, v131);
        sub_251037450();
        uint64_t v172 = sub_2510391D0();
        uint64_t v138 = v137;
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v115;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        id v139 = objc_msgSend(v132, sel_bundleForClass_, v131);
        sub_251037450();
        uint64_t v140 = sub_2510391D0();
        uint64_t v142 = v141;
        sub_251039150();
        sub_251039140();
        double v175 = *(double *)&v115;
        sub_251039120();
        sub_251039140();
        sub_251039170();
        id v143 = objc_msgSend(v132, sel_bundleForClass_, v131);
        sub_251037450();
      }
      uint64_t v154 = sub_2510391D0();
      uint64_t v59 = sub_250F5C814(v174, v173, v172, v138, v140, v142, v154, v155, v170, v167);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v30)(v163, v170, v21, v32);
  double v175 = 0.0;
  unint64_t v176 = 0xE000000000000000;
  sub_251039550();
  sub_251039210();
  sub_251039610();
  uint64_t result = sub_251039640();
  __break(1u);
  return result;
}

void sub_250F5C7AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_250F5C814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v11 = sub_251037460();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v37 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_251039180();
  MEMORY[0x270FA5388](v13 - 8);
  double v36 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2510378C0();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v29 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
  v23((char *)&v29 - v21, a9, v15, v20);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v22, v15);
  if (v24 == *MEMORY[0x263F42E20])
  {
    swift_bridgeObjectRetain();
    if (a10) {
      return v34;
    }
  }
  else if (v24 == *MEMORY[0x263F42E18])
  {
    swift_bridgeObjectRetain();
    if (a10) {
      return v32;
    }
    else {
      return v30;
    }
  }
  else
  {
    if (v24 != *MEMORY[0x263F42E28] && v24 != *MEMORY[0x263F42E10])
    {
      ((void (*)(char *, uint64_t, uint64_t))v23)(v18, a9, v15);
      uint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      sub_251039550();
      sub_251039210();
      sub_251039610();
      uint64_t result = sub_251039640();
      __break(1u);
      return result;
    }
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v27 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  return a1;
}

unint64_t sub_250F5CC1C()
{
  unint64_t result = qword_269B135D0;
  if (!qword_269B135D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B135D0);
  }
  return result;
}

unsigned char *_s32MedialRangeRelativeStringVariantOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250F5CD3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKQuantity.MedialRangeRelativeStringVariant()
{
  return &type metadata for HKQuantity.MedialRangeRelativeStringVariant;
}

void sub_250F5CD74(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510398C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250F5CDD8()
{
  if (!qword_269B135E8)
  {
    sub_251037160();
    sub_251037120();
    unint64_t v0 = sub_2510398C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B135E8);
    }
  }
}

id InternalSettingsModelProvider.healthStore.getter()
{
  return *(id *)(v0 + 16);
}

void *InternalSettingsModelProvider.__allocating_init(healthStore:settingsProvider:)(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)swift_allocObject();
  sub_251037560();
  v4[2] = a1;
  sub_250F5CF60();
  id v5 = a1;
  v4[3] = sub_251039400();
  uint64_t v6 = sub_251039410();

  v4[4] = v6;
  v4[5] = a2;
  return v4;
}

uint64_t InternalSettingsModelProvider.init(healthStore:settingsProvider:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_251037560();
  *(void *)(v2 + 16) = a1;
  sub_250F5CF60();
  id v6 = a1;
  *(void *)(v2 + 24) = sub_251039400();
  uint64_t v7 = sub_251039410();

  *(void *)(v3 + 32) = v7;
  *(void *)(v3 + 40) = a2;
  return v3;
}

unint64_t sub_250F5CF60()
{
  unint64_t result = qword_269B135F8;
  if (!qword_269B135F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B135F8);
  }
  return result;
}

uint64_t InternalSettingsModelProvider.notificationThreshold.getter()
{
  return sub_251037BC0();
}

uint64_t sub_250F5D018@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_250F5D144();
  sub_251037530();
  swift_release();
  uint64_t result = sub_251037BC0();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_250F5D09C()
{
  return swift_release();
}

unint64_t sub_250F5D144()
{
  unint64_t result = qword_269B13600;
  if (!qword_269B13600)
  {
    type metadata accessor for InternalSettingsModelProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13600);
  }
  return result;
}

uint64_t type metadata accessor for InternalSettingsModelProvider()
{
  uint64_t result = qword_269B13610;
  if (!qword_269B13610) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t InternalSettingsModelProvider.notificationThreshold.setter()
{
  return swift_release();
}

uint64_t sub_250F5D290()
{
  return sub_250F5DBDC();
}

void (*InternalSettingsModelProvider.notificationThreshold.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_getKeyPath();
  v3[4] = OBJC_IVAR____TtC15HealthBalanceUI29InternalSettingsModelProvider___observationRegistrar;
  v3[2] = v1;
  v3[5] = sub_250F5D144();
  sub_251037530();
  swift_release();
  void *v3 = sub_251037BC0();
  *((unsigned char *)v3 + 8) = 0;
  return sub_250F5D364;
}

void sub_250F5D364(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  v1[2] = v1[3];
  sub_251037520();
  swift_release();
  free(v1);
}

uint64_t InternalSettingsModelProvider.resetAll()()
{
  v1[2] = v0;
  sub_2510392D0();
  v1[3] = sub_2510392C0();
  uint64_t v3 = sub_251039280();
  v1[4] = v3;
  v1[5] = v2;
  return MEMORY[0x270FA2498](sub_250F5D4D8, v3, v2);
}

uint64_t sub_250F5D4D8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_250F5D570;
  return MEMORY[0x270F31878]();
}

uint64_t sub_250F5D570()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v5 = sub_250F5D8EC;
  }
  else {
    uint64_t v5 = sub_250F5D6AC;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_250F5D6AC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_250F5D744;
  return MEMORY[0x270F31878]();
}

uint64_t sub_250F5D744()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v5 = sub_250F5D950;
  }
  else {
    uint64_t v5 = sub_250F5D880;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_250F5D880()
{
  swift_release();
  sub_251037BE0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_250F5D8EC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_250F5D950()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id *InternalSettingsModelProvider.deinit()
{
  swift_release();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI29InternalSettingsModelProvider___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t InternalSettingsModelProvider.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI29InternalSettingsModelProvider___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_250F5DAF8()
{
  return type metadata accessor for InternalSettingsModelProvider();
}

uint64_t sub_250F5DB00()
{
  uint64_t result = sub_251037570();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for InternalSettingsModelProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InternalSettingsModelProvider);
}

uint64_t dispatch thunk of InternalSettingsModelProvider.__allocating_init(healthStore:settingsProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_250F5DBDC()
{
  return sub_251037BD0();
}

uint64_t static ChangeCountColorThreshold.partiallyOutOfRange.getter()
{
  return 1;
}

uint64_t static ChangeCountColorThreshold.outOfRange.getter()
{
  return 2;
}

ValueMetadata *type metadata accessor for ChangeCountColorThreshold()
{
  return &type metadata for ChangeCountColorThreshold;
}

uint64_t Transaction.isTogglingOvernightMetricsChartTimeScope.getter()
{
  sub_250F5DC7C();
  sub_2510380C0();
  return v1;
}

unint64_t sub_250F5DC7C()
{
  unint64_t result = qword_269B13620;
  if (!qword_269B13620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13620);
  }
  return result;
}

uint64_t Transaction.isTogglingOvernightMetricsChartTimeScope.setter()
{
  return sub_2510380D0();
}

uint64_t (*Transaction.isTogglingOvernightMetricsChartTimeScope.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = sub_250F5DC7C();
  sub_2510380C0();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 17);
  return sub_250F5DD88;
}

uint64_t sub_250F5DD88(uint64_t a1)
{
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 16);
  return sub_2510380D0();
}

uint64_t sub_250F5DDC0@<X0>(unsigned char *a1@<X8>)
{
  sub_250F5DC7C();
  uint64_t result = sub_2510380C0();
  *a1 = v3;
  return result;
}

uint64_t sub_250F5DE14()
{
  return sub_2510380D0();
}

ValueMetadata *type metadata accessor for TimeScopeTransitionTransactionKey()
{
  return &type metadata for TimeScopeTransitionTransactionKey;
}

void sub_250F5DE70(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_250F5DE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270EFFD38](a1, a2, a3, a4, MEMORY[0x263F8D510]);
}

uint64_t sub_250F5DE84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_250FBF4E4(*a1, *a2);
  if ((v6 & 1) == 0) {
    return 0;
  }
  sub_250FBF4E4(v2, v4);
  if ((v7 & 1) == 0) {
    return 0;
  }
  return sub_250FFD548(v3, v5);
}

void sub_250F5DF04(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t sub_250F5DF14(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_2510378C0();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_250F5DFCC(uint64_t a1, uint64_t a2, double a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    return v4;
  }
  uint64_t v20 = MEMORY[0x263F8EE78];
  unint64_t result = sub_250FF1DC4(0, v3, 0);
  uint64_t v4 = v20;
  uint64_t v9 = (double *)(a1 + 40);
  while (*(void *)(a2 + 16))
  {
    double v10 = *v9;
    unint64_t result = sub_250FCB7B0(*(v9 - 1));
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v12 = *(void *)(a2 + 56);
    double v13 = *(double *)(v12 + 8 * result);
    unint64_t result = sub_250FCB7B0(v10);
    if ((v14 & 1) == 0) {
      goto LABEL_13;
    }
    double v15 = v13 - a3;
    double v16 = *(double *)(v12 + 8 * result) + a3;
    if (v15 > v16) {
      goto LABEL_14;
    }
    unint64_t v18 = *(void *)(v20 + 16);
    unint64_t v17 = *(void *)(v20 + 24);
    if (v18 >= v17 >> 1) {
      unint64_t result = sub_250FF1DC4(v17 > 1, v18 + 1, 1);
    }
    *(void *)(v20 + 16) = v18 + 1;
    uint64_t v19 = v20 + 16 * v18;
    *(double *)(v19 + 32) = v15;
    *(double *)(v19 + 40) = v16;
    v9 += 2;
    if (!--v3) {
      return v4;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_250F5E0FC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v42 = a2;
  uint64_t v40 = sub_2510378C0();
  uint64_t v5 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v37 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F335D8();
  uint64_t result = sub_251039660();
  uint64_t v8 = result;
  int64_t v9 = 0;
  uint64_t v41 = a1;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = a1 + 64;
  uint64_t v10 = v12;
  uint64_t v13 = 1 << *(unsigned char *)(v11 - 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v10;
  uint64_t v32 = v11;
  int64_t v33 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v35 = result + 64;
  uint64_t v36 = v5 + 16;
  uint64_t v38 = result;
  uint64_t v39 = v5;
  uint64_t v34 = v5 + 32;
  uint64_t v16 = v5;
  unint64_t v17 = v37;
  uint64_t v18 = v40;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v43 = (v15 - 1) & v15;
  int64_t v44 = v9;
  for (unint64_t i = __clz(__rbit64(v15)) | (v9 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v21 << 6))
  {
    uint64_t v24 = v41;
    unint64_t v25 = *(void *)(v16 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v17, *(void *)(v41 + 48) + v25, v18);
    uint64_t v26 = 8 * i;
    uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    uint64_t v28 = v42;
    swift_bridgeObjectRetain();
    unint64_t v45 = sub_250F5DFCC(v27, v28, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v8 = v38;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v38 + 48) + v25, v17, v18);
    *(void *)(*(void *)(v8 + 56) + v26) = v45;
    uint64_t v29 = *(void *)(v8 + 16);
    BOOL v20 = __OFADD__(v29, 1);
    uint64_t v30 = v29 + 1;
    if (v20)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(void *)(v8 + 16) = v30;
    unint64_t v15 = v43;
    int64_t v9 = v44;
    if (v43) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v20 = __OFADD__(v9, 1);
    int64_t v21 = v9 + 1;
    if (v20) {
      goto LABEL_25;
    }
    if (v21 >= v33) {
      return v8;
    }
    unint64_t v22 = *(void *)(v32 + 8 * v21);
    if (!v22) {
      break;
    }
LABEL_15:
    uint64_t v43 = (v22 - 1) & v22;
    int64_t v44 = v21;
  }
  int64_t v23 = v21 + 1;
  if (v21 + 1 >= v33) {
    return v8;
  }
  unint64_t v22 = *(void *)(v32 + 8 * v23);
  if (v22) {
    goto LABEL_14;
  }
  int64_t v23 = v21 + 2;
  if (v21 + 2 >= v33) {
    return v8;
  }
  unint64_t v22 = *(void *)(v32 + 8 * v23);
  if (v22) {
    goto LABEL_14;
  }
  int64_t v23 = v21 + 3;
  if (v21 + 3 >= v33) {
    return v8;
  }
  unint64_t v22 = *(void *)(v32 + 8 * v23);
  if (v22)
  {
LABEL_14:
    int64_t v21 = v23;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v33) {
      return v8;
    }
    unint64_t v22 = *(void *)(v32 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_250F5E424(unint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = sub_2510378C0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v99 - v13;
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v99 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v108 = (uint64_t)&v99 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v111 = (char *)&v99 - v21;
  MEMORY[0x270FA5388](v22);
  unint64_t v24 = (unint64_t)&v99 - v23;
  sub_250F5F090(0, &qword_269B13628, MEMORY[0x263F42E30], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v110 = (uint64_t)&v99 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v99 - v31;
  double v33 = a3 * 0.5;
  unint64_t v107 = sub_250F2F854(MEMORY[0x263F8EE78]);
  *(void *)&v117[2] = MEMORY[0x263F8EE88];
  double v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v114 = v9 + 56;
  v113(v32, 1, 1, v8);
  unint64_t v34 = a1;
  uint64_t v112 = *(void *)(a1 + 16);
  if (!v112)
  {
    swift_bridgeObjectRelease();
    double v77 = 0;
    uint64_t v78 = 0;
    goto LABEL_68;
  }
  uint64_t v101 = v27;
  id v99 = v11;
  uint64_t v100 = v17;
  id v102 = v14;
  uint64_t v105 = 0;
  uint64_t v35 = 0;
  uint64_t v109 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  id v106 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  uint64_t v116 = (uint64_t *)(v9 + 8);
  uint64_t v103 = v9;
  uint64_t v115 = (unint64_t *)(v9 + 16);
  double v36 = 0.0;
  double v37 = 0.0;
  char v38 = 1;
  double v39 = 0.0;
  uint64_t isUniquelyReferenced_nonNull_native = 1;
  uint64_t v104 = a2;
  while (1)
  {
    double v42 = v36;
    unint64_t v43 = v34;
    double v36 = *(double *)(v34 + 8 * v35 + 32);
    sub_251037890();
    if (v38) {
      goto LABEL_4;
    }
    uint64_t v41 = v110;
    sub_250F5EFFC((uint64_t)v32, v110);
    if ((*v109)(v41, 1, v8) != 1) {
      break;
    }
    sub_250F5EF60(v41);
LABEL_4:
    ++v35;
    sub_250F5EF60((uint64_t)v32);
    a1 = *v115;
    ((void (*)(char *, unint64_t, uint64_t))*v115)(v32, v24, v8);
    v113(v32, 0, 1, v8);
    uint64_t v41 = *v116;
    ((void (*)(unint64_t, uint64_t))*v116)(v24, v8);
    char v38 = 0;
    unint64_t v34 = v43;
    if (v112 == v35)
    {
      swift_bridgeObjectRelease();
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_55:
        double v77 = 0;
        uint64_t v78 = v105;
        goto LABEL_68;
      }
      uint64_t v76 = (uint64_t)v101;
      sub_250F5EFFC((uint64_t)v32, (uint64_t)v101);
      if ((*v109)(v76, 1, v8) == 1)
      {
        sub_250F5EF60(v76);
        goto LABEL_55;
      }
      uint64_t v79 = v100;
      (*v106)(v100, v76, v8);
      uint64_t v80 = (uint64_t)v102;
      ((void (*)(char *, char *, uint64_t))a1)(v102, v79, v8);
      double v81 = *(double *)&v107;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v117[0] = v81;
      unint64_t v24 = sub_250FCB7F8(v80);
      uint64_t v83 = *(void *)(*(void *)&v81 + 16);
      BOOL v84 = (v82 & 1) == 0;
      uint64_t v85 = v83 + v84;
      if (!__OFADD__(v83, v84))
      {
        LOBYTE(v35) = v82;
        if (*(void *)(*(void *)&v81 + 24) >= v85)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            goto LABEL_82;
          }
          goto LABEL_62;
        }
        sub_250FCC328(v85, isUniquelyReferenced_nonNull_native);
        unint64_t v86 = sub_250FCB7F8((uint64_t)v102);
        if ((v35 & 1) == (v87 & 1))
        {
          unint64_t v24 = v86;
          goto LABEL_62;
        }
LABEL_83:
        uint64_t result = sub_251039810();
        __break(1u);
        return result;
      }
      goto LABEL_78;
    }
  }
  (*v106)(v111, v41, v8);
  if ((sub_2510378B0() & 1) == 0) {
    goto LABEL_18;
  }
  if (!*(void *)(a2 + 16))
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_250FA11A8(0, *(void *)(isUniquelyReferenced_nonNull_native + 16) + 1, 1, (void *)isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 8 * v24) = isUniquelyReferenced_nonNull_native;
    goto LABEL_65;
  }
  unint64_t v44 = sub_250FCB7B0(v42);
  if ((v45 & 1) == 0) {
    goto LABEL_70;
  }
  uint64_t v41 = *(void *)(a2 + 56);
  double v46 = *(double *)(v41 + 8 * v44);
  double v47 = v46 - v33;
  double v48 = v33 + v46;
  if (v46 - v33 > v33 + v46) {
    goto LABEL_71;
  }
  unint64_t v49 = sub_250FCB7B0(v36);
  if ((v50 & 1) == 0) {
    goto LABEL_72;
  }
  double v51 = *(double *)(v41 + 8 * v49);
  double v52 = v51 - v33;
  double v53 = v33 + v51;
  if (v52 > v53) {
    goto LABEL_73;
  }
  if (v53 < v47 || v48 < v52)
  {
LABEL_18:
    if (isUniquelyReferenced_nonNull_native)
    {
      ((void (*)(char *, uint64_t))*v116)(v111, v8);
      uint64_t isUniquelyReferenced_nonNull_native = 1;
      goto LABEL_4;
    }
    unint64_t v55 = *v115;
    uint64_t isUniquelyReferenced_nonNull_native = v108;
    ((void (*)(uint64_t, char *, uint64_t))*v115)(v108, v111, v8);
    sub_250F5EFEC((uint64_t)v105);
    double v56 = *(double *)&v107;
    uint64_t v41 = swift_isUniquelyReferenced_nonNull_native();
    v117[0] = v56;
    a1 = sub_250FCB7F8(isUniquelyReferenced_nonNull_native);
    uint64_t v58 = *(void *)(*(void *)&v56 + 16);
    BOOL v59 = (v57 & 1) == 0;
    uint64_t v60 = v58 + v59;
    if (__OFADD__(v58, v59)) {
      goto LABEL_74;
    }
    char v61 = v57;
    if (*(void *)(*(void *)&v56 + 24) >= v60)
    {
      if ((v41 & 1) == 0)
      {
        uint64_t v41 = v55;
        sub_250FCD968();
        goto LABEL_31;
      }
    }
    else
    {
      sub_250FCC328(v60, v41);
      unint64_t v62 = sub_250FCB7F8(v108);
      if ((v61 & 1) != (v63 & 1)) {
        goto LABEL_83;
      }
      a1 = v62;
    }
    uint64_t v41 = v55;
LABEL_31:
    double v65 = v117[0];
    swift_bridgeObjectRelease();
    if (v61)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      *(void *)(*(void *)&v65 + 8 * (a1 >> 6) + 64) |= 1 << a1;
      uint64_t isUniquelyReferenced_nonNull_native = *(void *)(*(void *)&v65 + 48) + *(void *)(v103 + 72) * a1;
      swift_bridgeObjectRetain();
      ((void (*)(uint64_t, uint64_t, uint64_t))v41)(isUniquelyReferenced_nonNull_native, v108, v8);
      *(void *)(*(void *)(*(void *)&v65 + 56) + 8 * a1) = MEMORY[0x263F8EE78];
      uint64_t v66 = *(void *)(*(void *)&v65 + 16);
      BOOL v67 = __OFADD__(v66, 1);
      uint64_t v68 = v66 + 1;
      if (v67) {
        goto LABEL_75;
      }
      *(void *)(*(void *)&v65 + 16) = v68;
    }
    uint64_t v69 = *(void *)(*(void *)&v65 + 56);
    swift_bridgeObjectRelease();
    id v70 = *(void **)(v69 + 8 * a1);
    char v71 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v69 + 8 * a1) = v70;
    unint64_t v107 = *(void *)&v65;
    if ((v71 & 1) == 0)
    {
      id v70 = sub_250FA11A8(0, v70[2] + 1, 1, v70);
      *(void *)(v69 + 8 * a1) = v70;
    }
    unint64_t v73 = v70[2];
    unint64_t v72 = v70[3];
    if (v73 >= v72 >> 1)
    {
      id v70 = sub_250FA11A8((void *)(v72 > 1), v73 + 1, 1, v70);
      *(void *)(v69 + 8 * a1) = v70;
    }
    v70[2] = v73 + 1;
    uint64_t v74 = (double *)&v70[2 * v73];
    v74[4] = v37;
    v74[5] = v39;
    uint64_t v75 = (void (*)(char *, uint64_t))*v116;
    ((void (*)(uint64_t, uint64_t))*v116)(v108, v8);
    v75(v111, v8);
    uint64_t isUniquelyReferenced_nonNull_native = 1;
    double v37 = 0.0;
    uint64_t v105 = sub_250F5DF04;
    double v39 = 0.0;
    a2 = v104;
    goto LABEL_4;
  }
  sub_250FFD8DC(v117, v42);
  sub_250FFD8DC(v117, v36);
  if (isUniquelyReferenced_nonNull_native)
  {
    BOOL v64 = v36 > v42;
    if (v36 >= v42)
    {
      if (v42 >= v36)
      {
        double v39 = v42;
      }
      else
      {
        double v39 = v36;
        if (v42 > v36) {
          goto LABEL_81;
        }
      }
    }
    else
    {
      double v39 = v42;
      double v42 = v36;
      if (v64) {
        goto LABEL_77;
      }
    }
    ((void (*)(char *, uint64_t))*v116)(v111, v8);
    uint64_t isUniquelyReferenced_nonNull_native = 0;
    double v37 = v42;
    goto LABEL_4;
  }
  if (v36 < v37)
  {
    double v37 = v36;
    if (v36 > v39) {
      goto LABEL_76;
    }
    goto LABEL_45;
  }
  if (v39 >= v36 || (double v39 = v36, v37 <= v36))
  {
LABEL_45:
    ((void (*)(char *, uint64_t))*v116)(v111, v8);
    uint64_t isUniquelyReferenced_nonNull_native = 0;
    goto LABEL_4;
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  sub_250FCD968();
LABEL_62:
  double v88 = v117[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v35 & 1) == 0)
  {
    uint64_t v89 = (uint64_t)v99;
    ((void (*)(char *, char *, uint64_t))a1)(v99, v102, v8);
    sub_250F5DF14(v24, v89, MEMORY[0x263F8EE78], *(void **)&v88);
  }
  a1 = *(void *)(*(void *)&v88 + 56);
  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = *(void *)(a1 + 8 * v24);
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 8 * v24) = isUniquelyReferenced_nonNull_native;
  unint64_t v107 = *(void *)&v88;
  if ((v90 & 1) == 0) {
    goto LABEL_79;
  }
LABEL_65:
  id v91 = v100;
  unint64_t v93 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
  unint64_t v92 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
  if (v93 >= v92 >> 1)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_250FA11A8((void *)(v92 > 1), v93 + 1, 1, (void *)isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 8 * v24) = isUniquelyReferenced_nonNull_native;
  }
  uint64_t v78 = v105;
  *(void *)(isUniquelyReferenced_nonNull_native + 16) = v93 + 1;
  uint64_t v94 = isUniquelyReferenced_nonNull_native + 16 * v93;
  *(double *)(v94 + 32) = v37;
  *(double *)(v94 + 40) = v39;
  ((void (*)(char *, uint64_t))v41)(v102, v8);
  ((void (*)(char *, uint64_t))v41)(v91, v8);
  double v77 = sub_250F5DF04;
  a2 = v104;
LABEL_68:
  swift_bridgeObjectRetain();
  uint64_t v95 = swift_bridgeObjectRetain();
  uint64_t v96 = sub_250F5E0FC(v95, a2, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v97 = swift_bridgeObjectRetain();
  sub_250F5E0FC(v97, a2, a4 * 0.5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_250F5EF60((uint64_t)v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_250F5EFEC((uint64_t)v78);
  sub_250F5EFEC((uint64_t)v77);
  return v96;
}

uint64_t sub_250F5EF60(uint64_t a1)
{
  sub_250F5F090(0, &qword_269B13628, MEMORY[0x263F42E30], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F5EFEC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_250F5EFFC(uint64_t a1, uint64_t a2)
{
  sub_250F5F090(0, &qword_269B13628, MEMORY[0x263F42E30], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_250F5F090(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for MergedLozenges()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s15HealthBalanceUI14MergedLozengesVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MergedLozenges(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MergedLozenges(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MergedLozenges(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MergedLozenges(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MergedLozenges()
{
  return &type metadata for MergedLozenges;
}

uint64_t *sub_250F5F300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_251037400();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    sub_250F49D48(0);
    v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v4;
}

uint64_t sub_250F5F418(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_251037400();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_250F49D48(0);
  v4(v2 + *(int *)(v5 + 36), v3);
  return swift_release();
}

_OWORD *sub_250F5F4C8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

void *sub_250F5F594(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_250F5F674(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_250F5F73C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_251037400();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  sub_250F49D48(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_250F5F80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F5F820);
}

uint64_t sub_250F5F820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F49D48(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_250F5F8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F5F8F8);
}

void sub_250F5F8F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250F49D48(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for BaselineSeparators.Configuration(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B13630);
}

void sub_250F5F9D8()
{
  sub_250F49D48(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_250F5FA7C()
{
  return sub_251039890();
}

uint64_t sub_250F5FB78()
{
  sub_250FAAC78();
  sub_251037400();
  sub_250F5FDA8((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
  sub_251039080();
  sub_250F49D48(0);
  sub_251039080();
  swift_retain();
  sub_251038AA0();
  return swift_release();
}

uint64_t sub_250F5FC64()
{
  return sub_251039890();
}

uint64_t sub_250F5FD60()
{
  return sub_250F5FDA8(&qword_269B13640, (void (*)(uint64_t))type metadata accessor for BaselineSeparators.Configuration);
}

uint64_t sub_250F5FDA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F5FDF0()
{
  uint64_t v1 = v0;
  sub_250F61190();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_250F61388();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = v1;
  sub_250F611F4();
  sub_250F612E0();
  sub_251037F20();
  sub_250F61444();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_25103A670;
  *(_OWORD *)(v12 + 32) = xmmword_25103B2D0;
  sub_2510380A0();
  uint64_t v13 = sub_250F5FDA8(&qword_269B13680, (void (*)(uint64_t))sub_250F61190);
  sub_251037DC0();
  sub_250F6149C((uint64_t)v21);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v14 = *(void *)(v1 + *(int *)(type metadata accessor for BaselineSeparators.Configuration(0) + 24));
  uint64_t v19 = v13;
  uint64_t v20 = v14;
  uint64_t v18 = v3;
  swift_getOpaqueTypeConformance2();
  sub_251037D40();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_250F60094@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  sub_250F614C8();
  uint64_t v54 = v3 - 8;
  MEMORY[0x270FA5388](v3 - 8);
  double v53 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6152C();
  MEMORY[0x270FA5388](v5 - 8);
  char v57 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6158C();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v46 - v11;
  uint64_t v56 = sub_251037FB0();
  uint64_t v62 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6125C();
  uint64_t v51 = v15;
  uint64_t v60 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  double v52 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v58 = (char *)v46 - v18;
  MEMORY[0x270FA5388](v19);
  char v61 = (char *)v46 - v20;
  MEMORY[0x270FA5388](v21);
  BOOL v59 = (char *)v46 - v22;
  sub_2510384C0();
  uint64_t v23 = (char *)a1 + *(int *)(type metadata accessor for BaselineSeparators.Configuration(0) + 20);
  sub_251037400();
  v46[3] = v23;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  sub_250F49D48(0);
  char v50 = &v23[*(int *)(v24 + 36)];
  v46[1] = v9;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  unint64_t v49 = a1;
  uint64_t v63 = a1[1];
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46[2] = v12;
  sub_251037FA0();
  uint64_t v25 = v61;
  uint64_t v26 = v56;
  sub_251037D80();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v62 + 8);
  v62 += 8;
  double v48 = v27;
  v27(v14, v26);
  uint64_t v28 = v60 + 32;
  double v47 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  uint64_t v29 = v51;
  v47(v59, v25, v51);
  v46[0] = v28;
  sub_2510384C0();
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2510384C0();
  uint64_t v63 = *v49;
  sub_251037E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_251037FA0();
  uint64_t v30 = v58;
  uint64_t v31 = v56;
  sub_251037D80();
  v48(v14, v31);
  uint64_t v32 = v61;
  uint64_t v33 = v29;
  unint64_t v34 = (void (*)(uint64_t, char *, uint64_t))v47;
  v47(v61, v30, v29);
  uint64_t v35 = v59;
  uint64_t v36 = v60;
  double v37 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  char v38 = v30;
  v37(v30, v59, v33);
  double v39 = v52;
  v37(v52, v32, v33);
  uint64_t v40 = v53;
  v37(v53, v38, v33);
  uint64_t v41 = v54;
  double v42 = &v40[*(int *)(v54 + 56)];
  v37(v42, v39, v33);
  uint64_t v43 = v55;
  v34(v55, v40, v33);
  v34(v43 + *(int *)(v41 + 56), v42, v33);
  unint64_t v44 = *(void (**)(char *, uint64_t))(v36 + 8);
  v44(v61, v33);
  v44(v35, v33);
  v44(v39, v33);
  return ((uint64_t (*)(char *, uint64_t))v44)(v58, v33);
}

uint64_t sub_250F6080C(double *a1, double *a2)
{
  sub_250F49D48(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v18 - v8;
  if (*a1 != *a2 || a1[1] != a2[1]) {
    goto LABEL_10;
  }
  uint64_t v19 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v11 = *(int *)(v19 + 20);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  sub_251037400();
  sub_250F5FDA8(&qword_269B13308, MEMORY[0x263F07490]);
  char v14 = sub_2510390F0();
  sub_250F609C8(v12, (uint64_t)v9);
  sub_250F609C8(v13, (uint64_t)v6);
  if ((v14 & 1) == 0)
  {
    sub_250F60A2C((uint64_t)v6);
    sub_250F60A2C((uint64_t)v9);
    goto LABEL_10;
  }
  char v15 = sub_2510390F0();
  sub_250F60A2C((uint64_t)v6);
  sub_250F60A2C((uint64_t)v9);
  if ((v15 & 1) == 0)
  {
LABEL_10:
    char v16 = 0;
    return v16 & 1;
  }
  char v16 = sub_251038A70();
  return v16 & 1;
}

uint64_t sub_250F609C8(uint64_t a1, uint64_t a2)
{
  sub_250F49D48(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F60A2C(uint64_t a1)
{
  sub_250F49D48(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_250F60A88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = v4;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(v4 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_251037400();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    sub_250F49D48(0);
    v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t sub_250F60BA8(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for BaselineSeparators.Configuration(0) + 20);
  uint64_t v2 = sub_251037400();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  sub_250F49D48(0);
  v3(v1 + *(int *)(v4 + 36), v2);
  return swift_release();
}

_OWORD *sub_250F60C60(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_251037400();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  v9(v6, v7, v8);
  sub_250F49D48(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
  swift_retain();
  return a1;
}

void *sub_250F60D34(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_251037400();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24);
  v9(v6, v7, v8);
  sub_250F49D48(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_250F60E1C(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_251037400();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  sub_250F49D48(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
  return a1;
}

_OWORD *sub_250F60EEC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_251037400();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40);
  v9(v6, v7, v8);
  sub_250F49D48(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
  swift_release();
  return a1;
}

uint64_t sub_250F60FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F60FD8);
}

uint64_t sub_250F60FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_250F61044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F61058);
}

uint64_t sub_250F61058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for BaselineSeparators(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B13648);
}

uint64_t sub_250F610E8()
{
  uint64_t result = type metadata accessor for BaselineSeparators.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_250F61174()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_250F61190()
{
  if (!qword_269B13658)
  {
    sub_250F611F4();
    sub_250F612E0();
    unint64_t v0 = sub_251037F30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13658);
    }
  }
}

void sub_250F611F4()
{
  if (!qword_269B13660)
  {
    sub_250F6125C();
    unint64_t v0 = sub_251037CE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13660);
    }
  }
}

void sub_250F6125C()
{
  if (!qword_269B13668)
  {
    sub_251037FB0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13668);
    }
  }
}

unint64_t sub_250F612E0()
{
  unint64_t result = qword_269B13670;
  if (!qword_269B13670)
  {
    sub_250F611F4();
    sub_251037FB0();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13670);
  }
  return result;
}

void sub_250F61388()
{
  if (!qword_269B13678)
  {
    sub_250F61190();
    sub_250F5FDA8(&qword_269B13680, (void (*)(uint64_t))sub_250F61190);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13678);
    }
  }
}

uint64_t sub_250F6143C@<X0>(uint64_t a1@<X8>)
{
  return sub_250F60094(*(uint64_t **)(v1 + 16), a1);
}

void sub_250F61444()
{
  if (!qword_269B13688)
  {
    unint64_t v0 = sub_2510397D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13688);
    }
  }
}

uint64_t sub_250F6149C(uint64_t a1)
{
  return a1;
}

void sub_250F614C8()
{
  if (!qword_269B13690)
  {
    sub_250F6125C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B13690);
    }
  }
}

void sub_250F6152C()
{
  if (!qword_269B13488)
  {
    unint64_t v0 = sub_251037E50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13488);
    }
  }
}

void sub_250F6158C()
{
  if (!qword_269B13490)
  {
    sub_251037400();
    unint64_t v0 = sub_251037E50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13490);
    }
  }
}

uint64_t sub_250F615EC()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SingleMetricChartPointCollection()
{
  return &type metadata for SingleMetricChartPointCollection;
}

uint64_t sub_250F616C8()
{
  return 1;
}

uint64_t sub_250F616D0()
{
  return sub_251039890();
}

uint64_t sub_250F61714()
{
  return sub_251039860();
}

uint64_t sub_250F6173C()
{
  return sub_251039890();
}

uint64_t sub_250F6177C()
{
  return 0x73746E696F70;
}

uint64_t sub_250F61790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73746E696F70 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_2510397F0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_250F61820()
{
  return 0;
}

void sub_250F6182C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_250F61838(uint64_t a1)
{
  unint64_t v2 = sub_250F61A9C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250F61874(uint64_t a1)
{
  unint64_t v2 = sub_250F61A9C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250F618B0(void *a1, uint64_t a2)
{
  sub_250F61CC8(0, &qword_269B13698, MEMORY[0x263F8E0C0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250F61A9C();
  sub_2510398B0();
  v10[1] = a2;
  sub_250F55D14(0);
  sub_250F61D2C(&qword_269B136A8, &qword_269B136B0);
  sub_2510397A0();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_250F61A48(uint64_t *a1, uint64_t *a2)
{
  return sub_250F842FC(*a1, *a2);
}

void *sub_250F61A54@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_250F61AF0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_250F61A80(void *a1)
{
  return sub_250F618B0(a1, *v1);
}

unint64_t sub_250F61A9C()
{
  unint64_t result = qword_269B136A0;
  if (!qword_269B136A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B136A0);
  }
  return result;
}

void *sub_250F61AF0(void *a1)
{
  sub_250F61CC8(0, &qword_269B136B8, MEMORY[0x263F8E040]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v10 - v6;
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250F61A9C();
  sub_2510398A0();
  if (!v1)
  {
    sub_250F55D14(0);
    sub_250F61D2C(&qword_269B136C0, &qword_269B136C8);
    sub_251039730();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v8 = (void *)v10[1];
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v8;
}

void sub_250F61CC8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250F61A9C();
    unint64_t v7 = a3(a1, &type metadata for SingleMetricChartPointCollection.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250F61D2C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F55D14(255);
    sub_250F61DA8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F61DA8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndividualOvernightMetricChartPoint(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SingleMetricChartPointCollection.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SingleMetricChartPointCollection.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250F61EDCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250F61F04()
{
  return 0;
}

ValueMetadata *type metadata accessor for SingleMetricChartPointCollection.CodingKeys()
{
  return &type metadata for SingleMetricChartPointCollection.CodingKeys;
}

unint64_t sub_250F61F20()
{
  unint64_t result = qword_269B136D0;
  if (!qword_269B136D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B136D0);
  }
  return result;
}

unint64_t sub_250F61F78()
{
  unint64_t result = qword_269B136D8;
  if (!qword_269B136D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B136D8);
  }
  return result;
}

unint64_t sub_250F61FD0()
{
  unint64_t result = qword_269B136E0[0];
  if (!qword_269B136E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269B136E0);
  }
  return result;
}

uint64_t sub_250F62024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t sub_250F6202C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_250F620D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 16) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 16) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    uint64_t v12 = (void *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = v12[1];
    char v14 = (void *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    *char v14 = *v12;
    v14[1] = v13;
  }
  swift_retain();
  return v3;
}

uint64_t sub_250F621F0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  return swift_release();
}

_OWORD *sub_250F62270(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  uint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_retain();
  return a1;
}

void *sub_250F62314(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  uint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_250F623CC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *sub_250F6246C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_250F62514(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x250F6267CLL);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 16) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void sub_250F62690(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 16] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v22 = a2 ^ 0x80000000;
                v21[1] = 0;
              }
              else
              {
                uint64_t v22 = a2 - 1;
              }
              void *v21 = v22;
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x250F62894);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ChartPlotSizeReader()
{
  return swift_getGenericMetadata();
}

uint64_t sub_250F628D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F6291C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_250F62954@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  int v3 = v2;
  uint64_t v41 = a2;
  uint64_t v5 = *(a1 - 1);
  uint64_t v39 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1);
  char v38 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v7 + 16);
  uint64_t v8 = sub_251038270();
  uint64_t v36 = v8;
  uint64_t v40 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v31 = (char *)v30 - v9;
  uint64_t v11 = a1[4];
  uint64_t v33 = a1[3];
  uint64_t v10 = v33;
  uint64_t v46 = v11;
  uint64_t v47 = MEMORY[0x263F18BF0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = a1[5];
  uint64_t v42 = v8;
  uint64_t v43 = v10;
  uint64_t v44 = WitnessTable;
  uint64_t v45 = v32;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v13 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  int v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v34 = (char *)v30 - v17;
  uint64_t v18 = v35;
  sub_251038A10();
  uint64_t v19 = *v3;
  v30[0] = v3[1];
  v30[1] = v19;
  uint64_t v20 = v5;
  uint64_t v21 = v38;
  (*(void (**)(char *, uint64_t *, void *))(v5 + 16))(v38, v3, a1);
  unint64_t v22 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = v18;
  *((void *)v23 + 3) = v33;
  *((void *)v23 + 4) = v11;
  *((void *)v23 + 5) = v32;
  (*(void (**)(char *, char *, void *))(v20 + 32))(&v23[v22], v21, a1);
  uint64_t v24 = v36;
  uint64_t v25 = v31;
  sub_251038900();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v24);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v27 = v34;
  v26(v34, v15, OpaqueTypeMetadata2);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v15, OpaqueTypeMetadata2);
  v26(v41, v27, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v28)(v27, OpaqueTypeMetadata2);
}

uint64_t sub_250F62D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unsigned int v12 = (char *)v22 - v11;
  v22[0] = v13;
  v22[1] = v14;
  v22[2] = v15;
  v22[3] = v16;
  uint64_t v17 = *(void (**)(uint64_t))(a2 + *(int *)(type metadata accessor for ChartPlotSizeReader() + 56));
  uint64_t v18 = sub_251037CA0();
  v17(v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v19(v12, v9, a3);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v9, a3);
  v19(a4, v12, a3);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, a3);
}

uint64_t sub_250F62E94()
{
  long long v3 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = type metadata accessor for ChartPlotSizeReader();
  (*(void (**)(unint64_t))(*(void *)(v3 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))+ *(int *)(v1 + 52));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250F62F94@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(type metadata accessor for ChartPlotSizeReader() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return sub_250F62D14(a1, v7, v5, a2);
}

uint64_t sub_250F63050()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_250F630EC@<X0>(void *a1@<X8>)
{
  sub_250F65A0C();
  sub_251038460();
  return memcpy(a1, __src, 0x118uLL);
}

uint64_t sub_250F6314C(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v3, __src, sizeof(v3));
  sub_250F2A3B4(__dst);
  sub_250F65A0C();
  return sub_251038470();
}

uint64_t ChartViewModelProvider.__allocating_init(model:)(uint64_t a1)
{
  sub_250F658FC(0, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = &v9[-v3];
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v5 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  uint64_t v7 = type metadata accessor for OvernightMetricsViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  sub_251037560();
  sub_250F648BC(a1, (uint64_t)v4, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  swift_getKeyPath();
  uint64_t v10 = v5;
  uint64_t v11 = v4;
  uint64_t v12 = v5;
  sub_250F6480C(&qword_269B13778, (void (*)(uint64_t))type metadata accessor for ChartViewModelProvider);
  sub_251037520();
  swift_release();
  sub_250F65950((uint64_t)v4, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  sub_250F65950(a1, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  return v5;
}

uint64_t ChartViewModelProvider.init(model:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_250F658FC(0, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v10[-v5];
  uint64_t v7 = v1 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  uint64_t v8 = type metadata accessor for OvernightMetricsViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_251037560();
  sub_250F648BC(a1, (uint64_t)v6, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  swift_getKeyPath();
  uint64_t v11 = v2;
  uint64_t v12 = v6;
  uint64_t v13 = v2;
  sub_250F6480C(&qword_269B13778, (void (*)(uint64_t))type metadata accessor for ChartViewModelProvider);
  sub_251037520();
  swift_release();
  sub_250F65950((uint64_t)v6, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  sub_250F65950(a1, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  return v2;
}

uint64_t sub_250F6356C(uint64_t a1)
{
  return sub_250F65950(a1, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t (*sub_250F6365C())()
{
  return j__swift_endAccess;
}

uint64_t sub_250F636BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_250F6480C(&qword_269B13778, (void (*)(uint64_t))type metadata accessor for ChartViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  return sub_250F648BC(v4, a2, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_250F637A8(uint64_t a1, uint64_t *a2)
{
  sub_250F658FC(0, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v9[-v5];
  sub_250F648BC(a1, (uint64_t)&v9[-v5], &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_250F6480C(&qword_269B13778, (void (*)(uint64_t))type metadata accessor for ChartViewModelProvider);
  sub_251037520();
  swift_release();
  return sub_250F65950((uint64_t)v6, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_250F6390C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_250F6480C(&qword_269B13778, (void (*)(uint64_t))type metadata accessor for ChartViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  return sub_250F648BC(v3, a1, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_250F639F4(uint64_t a1, uint64_t a2)
{
  sub_250F658FC(0, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - v5;
  sub_250F648BC(a2, (uint64_t)&v9 - v5, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  uint64_t v7 = a1 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  sub_250F65A60((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t sub_250F63AE4()
{
  return sub_250F639F4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for ChartViewModelProvider(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B137A0);
}

void (*sub_250F63B20(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider___observationRegistrar;
  void *v3 = v1;
  v3[6] = sub_250F6480C(&qword_269B13778, (void (*)(uint64_t))type metadata accessor for ChartViewModelProvider);
  sub_251037530();
  swift_release();
  void *v3 = v1;
  swift_getKeyPath();
  sub_251037550();
  swift_release();
  v3[7] = sub_250F6365C();
  return sub_250F63C3C;
}

void sub_250F63C3C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  *uint64_t v1 = v1[4];
  swift_getKeyPath();
  sub_251037540();
  swift_release();
  free(v1);
}

uint64_t ChartViewModelProvider.deinit()
{
  sub_250F65950(v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ChartViewModelProvider.__deallocating_deinit()
{
  sub_250F65950(v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t AlertTileChart.init(viewModelProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_250F5A12C();
  sub_2510380E0();
  uint64_t result = type metadata accessor for AlertTileChart(0);
  *(void *)(a2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t type metadata accessor for AlertTileChart(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B137B8);
}

uint64_t AlertTileChart.viewModelProvider.getter()
{
  type metadata accessor for AlertTileChart(0);
  return swift_retain();
}

uint64_t AlertTileChart.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  sub_250F65894(0, &qword_269B13780, MEMORY[0x263F19B20]);
  uint64_t v55 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v56 = (uint64_t)&v45 - v3;
  sub_250F658FC(0, &qword_269B12F88, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x270FA5388](v4 - 8);
  double v52 = (char *)&v45 - v5;
  sub_250F658FC(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v50 = (uint64_t)&v45 - v7;
  sub_250F658FC(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v47 = (uint64_t)&v45 - v9;
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v46 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OvernightMetricsChart(0);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v49 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F64674();
  uint64_t v54 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v51 = (uint64_t)&v45 - v17;
  sub_250F658FC(0, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v21 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v22 = *((void *)v21 - 1);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v45 - v26;
  uint64_t v28 = *(int *)(type metadata accessor for AlertTileChart(0) + 20);
  uint64_t v53 = v1;
  uint64_t v29 = *(void *)(v1 + v28);
  swift_getKeyPath();
  v58[0] = v29;
  sub_250F6480C(&qword_269B13778, (void (*)(uint64_t))type metadata accessor for ChartViewModelProvider);
  sub_251037530();
  swift_release();
  uint64_t v30 = v29 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  sub_250F648BC(v30, (uint64_t)v20, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_250F65950((uint64_t)v20, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
    swift_storeEnumTagMultiPayload();
    sub_250F64734();
    return sub_251038580();
  }
  else
  {
    sub_250F6500C((uint64_t)v20, (uint64_t)v27, type metadata accessor for OvernightMetricsViewModel);
    sub_250F64854((uint64_t)v27, (uint64_t)v24, type metadata accessor for OvernightMetricsViewModel);
    LOBYTE(v58[0]) = 0;
    uint64_t v32 = v46;
    sub_250F64854((uint64_t)&v24[v21[8]], v46, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
    uint64_t v33 = v47;
    sub_250F648BC((uint64_t)&v24[v21[7]], v47, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    unint64_t v34 = *(void **)&v24[v21[14]];
    uint64_t v35 = *(void *)&v24[v21[10]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v36 = v50;
    OvernightMetricsViewModel.warmupProgress.getter(v50);
    uint64_t v37 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    uint64_t v38 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v52, 1, 1, v37);
    uint64_t v44 = v36;
    uint64_t v39 = v49;
    OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)((char *)v58, v32, v33, 0, 1, 1, v34, v35, v49, v44, 0, v38);
    sub_250F64F48((uint64_t)v24, type metadata accessor for OvernightMetricsViewModel);
    uint64_t KeyPath = swift_getKeyPath();
    sub_250F64928((uint64_t)v58);
    uint64_t v41 = v48;
    sub_250F64854((uint64_t)v39, v48, type metadata accessor for OvernightMetricsChart);
    uint64_t v42 = *(int *)(v54 + 36);
    *(void *)(v41 + v42) = KeyPath;
    memcpy((void *)(v41 + v42 + 8), v58, 0x118uLL);
    sub_250F64F48((uint64_t)v39, type metadata accessor for OvernightMetricsChart);
    uint64_t v43 = v51;
    sub_250F6500C(v41, v51, (uint64_t (*)(void))sub_250F64674);
    sub_250F64854(v43, v56, (uint64_t (*)(void))sub_250F64674);
    swift_storeEnumTagMultiPayload();
    sub_250F64734();
    sub_251038580();
    sub_250F64F48(v43, (uint64_t (*)(void))sub_250F64674);
    return sub_250F64F48((uint64_t)v27, type metadata accessor for OvernightMetricsViewModel);
  }
}

void sub_250F64674()
{
  if (!qword_269B13788)
  {
    type metadata accessor for OvernightMetricsChart(255);
    sub_250F646DC();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13788);
    }
  }
}

void sub_250F646DC()
{
  if (!qword_269B12F48)
  {
    unint64_t v0 = sub_251038680();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12F48);
    }
  }
}

unint64_t sub_250F64734()
{
  unint64_t result = qword_269B13790;
  if (!qword_269B13790)
  {
    sub_250F64674();
    sub_250F6480C(&qword_269B13798, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart);
    sub_250F6480C((unint64_t *)&qword_269B12F78, (void (*)(uint64_t))sub_250F646DC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13790);
  }
  return result;
}

uint64_t sub_250F6480C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F64854(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F648BC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_250F658FC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

double sub_250F64928@<D0>(uint64_t a1@<X8>)
{
  uint64_t v30 = sub_2510387D0();
  uint64_t v2 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F658FC(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v26 - v6;
  uint64_t v8 = sub_251038820();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = self;
  uint64_t v32 = MEMORY[0x2533907A0](objc_msgSend(v12, sel_secondarySystemGroupedBackgroundColor));
  uint64_t v31 = sub_251038160();
  if (qword_26B210178 != -1) {
    swift_once();
  }
  uint64_t v29 = MEMORY[0x2533907A0]((id)qword_26B210328);
  if (qword_26B210180 != -1) {
    swift_once();
  }
  uint64_t v27 = MEMORY[0x2533907A0]((id)qword_26B210330);
  sub_250F652E4();
  sub_2510380F0();
  uint64_t v26 = v32;
  uint64_t v28 = MEMORY[0x2533907A0](objc_msgSend(v12, sel_tertiaryLabelColor));
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F1A6C0], v8);
  uint64_t v13 = *MEMORY[0x263F1A610];
  uint64_t v14 = sub_251038760();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v7, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v14);
  sub_251038770();
  sub_2510387B0();
  sub_250F65950((uint64_t)v7, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620]);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v16 = v30;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F1A680], v30);
  uint64_t v17 = sub_251038800();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v16);
  LODWORD(v32) = sub_2510385E0();
  uint64_t v18 = sub_251038160();
  uint64_t v32 = sub_251038AD0();
  uint64_t v19 = sub_251038160();
  uint64_t v32 = sub_251038A90();
  uint64_t v20 = sub_251038160();
  sub_251038A90();
  uint64_t v21 = sub_251038AE0();
  swift_release();
  uint64_t v32 = v21;
  uint64_t v22 = sub_251038160();
  LODWORD(v32) = sub_2510385D0();
  HIDWORD(v32) = 1036831949;
  sub_250F659AC();
  sub_250F6480C((unint64_t *)&qword_269B137E0, (void (*)(uint64_t))sub_250F659AC);
  uint64_t v23 = sub_251038160();
  char v39 = 1;
  char v37 = 0;
  char v35 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 25) = v32;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v40;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v40[3];
  *(void *)(a1 + 40) = v31;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = v39;
  *(_DWORD *)(a1 + 57) = *(_DWORD *)v38;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)&v38[3];
  uint64_t v24 = v29;
  *(void *)(a1 + 64) = 0x4014000000000000;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = 0x3FE0000000000000;
  *(void *)(a1 + 96) = v26;
  *(unsigned char *)(a1 + 104) = v37;
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v36;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v36[3];
  *(_OWORD *)(a1 + 112) = xmmword_25103A620;
  *(_OWORD *)(a1 + 128) = xmmword_25103A630;
  double result = 0.09;
  *(_OWORD *)(a1 + 144) = xmmword_25103A640;
  *(_OWORD *)(a1 + 160) = xmmword_25103A650;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = v35;
  *(unsigned char *)(a1 + 201) = 0;
  *(_WORD *)(a1 + 206) = v34;
  *(_DWORD *)(a1 + 202) = *(_DWORD *)&v33[7];
  *(void *)(a1 + 208) = v20;
  *(void *)(a1 + 216) = v22;
  *(void *)(a1 + 224) = v23;
  *(void *)(a1 + 232) = v18;
  *(void *)(a1 + 240) = v19;
  *(unsigned char *)(a1 + 248) = 1;
  LODWORD(v24) = *(_DWORD *)v33;
  *(_DWORD *)(a1 + 252) = *(_DWORD *)&v33[3];
  *(_DWORD *)(a1 + 249) = v24;
  *(void *)(a1 + 256) = v28;
  *(void *)(a1 + 264) = v17;
  *(void *)(a1 + 272) = 0x4010000000000000;
  return result;
}

uint64_t sub_250F64F48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_250F64FA8@<X0>(void *a1@<X8>)
{
  sub_250F65A0C();
  sub_251038460();
  return memcpy(a1, __src, 0x118uLL);
}

uint64_t sub_250F6500C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F65074()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F65090()
{
  return type metadata accessor for ChartViewModelProvider(0);
}

void sub_250F65098()
{
  sub_250F658FC(319, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  if (v0 <= 0x3F)
  {
    sub_251037570();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ChartViewModelProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ChartViewModelProvider);
}

uint64_t dispatch thunk of ChartViewModelProvider.__allocating_init(model:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ChartViewModelProvider.model.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ChartViewModelProvider.model.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ChartViewModelProvider.model.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t *initializeBufferWithCopyOfBuffer for AlertTileChart(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_250F652E4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

void sub_250F652E4()
{
  if (!qword_269B137B0)
  {
    sub_250F5A12C();
    unint64_t v0 = sub_251038100();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B137B0);
    }
  }
}

uint64_t destroy for AlertTileChart(uint64_t a1)
{
  sub_250F652E4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F652E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F652E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F652E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F652E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F655D4);
}

uint64_t sub_250F655D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F652E4();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F656A8);
}

void sub_250F656A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250F652E4();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void sub_250F65764()
{
  sub_250F652E4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_250F65800()
{
  unint64_t result = qword_269B137C8;
  if (!qword_269B137C8)
  {
    sub_250F65894(255, &qword_269B137D0, MEMORY[0x263F19B28]);
    sub_250F64734();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B137C8);
  }
  return result;
}

void sub_250F65894(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    sub_250F64674();
    unint64_t v7 = a3(a1, v6, MEMORY[0x263F1BA08]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_250F658FC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250F65950(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_250F658FC(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_250F659AC()
{
  if (!qword_269B137D8)
  {
    unint64_t v0 = sub_251038510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B137D8);
    }
  }
}

unint64_t sub_250F65A0C()
{
  unint64_t result = qword_269B137E8;
  if (!qword_269B137E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B137E8);
  }
  return result;
}

uint64_t sub_250F65A60(uint64_t a1, uint64_t a2)
{
  sub_250F658FC(0, &qword_26B210820, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F65AE0()
{
  return sub_250F63AE4();
}

void *sub_250F65AF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_251038F20();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_250F65BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_251038F20();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t sub_250F65C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F65CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F65D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F65DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251038F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F65E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F65E90);
}

uint64_t sub_250F65E90(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *a1;
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_251038F20();
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 24)];
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250F65F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F65F4C);
}

unsigned char *sub_250F65F4C(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *unint64_t result = a2 + 2;
  }
  else
  {
    uint64_t v7 = sub_251038F20();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 24)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for BalanceWidgetAccessoryRectangularSpecs()
{
  uint64_t result = qword_269B137F0;
  if (!qword_269B137F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F6603C()
{
  uint64_t result = sub_251038F20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_250F660DC@<X0>(void *a1@<X8>)
{
  __int16 v34 = a1;
  uint64_t v1 = sub_251038F20();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unsigned int v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v24 - v6;
  if (qword_26B210178 != -1) {
    swift_once();
  }
  uint64_t v32 = v7;
  uint64_t v33 = v2;
  MEMORY[0x2533907A0]((id)qword_26B210328);
  uint64_t v30 = sub_251038AE0();
  swift_release();
  if (qword_26B210180 != -1) {
    swift_once();
  }
  MEMORY[0x2533907A0]((id)qword_26B210330);
  uint64_t v29 = sub_251038AE0();
  swift_release();
  uint64_t v8 = self;
  MEMORY[0x2533907A0](objc_msgSend(v8, sel_systemGrayColor));
  uint64_t v28 = sub_251038AE0();
  swift_release();
  uint64_t v27 = MEMORY[0x2533907A0]((id)qword_26B210328);
  uint64_t v26 = MEMORY[0x2533907A0]((id)qword_26B210330);
  *(void *)&v36[0] = sub_251038AB0();
  uint64_t v24 = sub_251038160();
  *(void *)&v36[0] = MEMORY[0x2533907A0](objc_msgSend(v8, sel_systemGrayColor));
  uint64_t v25 = sub_251038160();
  MEMORY[0x2533907A0](objc_msgSend(v8, sel_systemGrayColor));
  uint64_t v9 = sub_251038AE0();
  swift_release();
  *(void *)&v36[0] = v9;
  uint64_t v10 = sub_251038160();
  MEMORY[0x2533907A0](objc_msgSend(v8, sel_systemGrayColor));
  uint64_t v11 = sub_251038AE0();
  swift_release();
  *(void *)&v36[0] = v11;
  uint64_t v12 = sub_251038160();
  *(void *)&v36[0] = MEMORY[0x2533907A0](objc_msgSend(v8, sel_systemGrayColor));
  uint64_t v13 = sub_251038160();
  *(void *)&v36[0] = sub_251038AD0();
  uint64_t v14 = sub_251038160();
  uint64_t v15 = v31;
  BOOL v16 = *v31 != 0;
  uint64_t v17 = sub_2510387F0();
  *(void *)&v36[0] = v30;
  *((void *)&v36[0] + 1) = v29;
  *(void *)&v36[1] = v28;
  BYTE8(v36[1]) = 0;
  LOBYTE(v36[2]) = 1;
  *((void *)&v36[2] + 1) = v24;
  *(void *)&v36[3] = 0;
  BYTE8(v36[3]) = 1;
  *(void *)&v36[4] = 0x4014000000000000;
  *((void *)&v36[4] + 1) = v27;
  *(void *)&v36[5] = v26;
  *((void *)&v36[5] + 1) = 0x3FE0000000000000;
  *(void *)&v36[6] = 0;
  BYTE8(v36[6]) = 1;
  unsigned char v36[7] = xmmword_25103B740;
  v36[8] = xmmword_25103A630;
  v36[9] = xmmword_25103A640;
  v36[10] = xmmword_25103A650;
  memset(&v36[11], 0, 24);
  WORD4(v36[12]) = 1;
  *(void *)&v36[13] = v25;
  *((void *)&v36[13] + 1) = v10;
  *(void *)&v36[14] = v12;
  *((void *)&v36[14] + 1) = v13;
  *(void *)&v36[15] = v14;
  BYTE8(v36[15]) = v16;
  *(void *)&v36[16] = 0;
  *((void *)&v36[16] + 1) = v17;
  *(void *)&v36[17] = 0;
  uint64_t v18 = type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
  uint64_t v20 = v32;
  uint64_t v19 = v33;
  (*(void (**)(char *, unsigned char *, uint64_t))(v33 + 16))(v32, &v15[*(int *)(v18 + 24)], v1);
  sub_251038F10();
  sub_250F66984((unint64_t *)&qword_269B12E10, MEMORY[0x263F1FC90]);
  LOBYTE(v14) = sub_2510390F0();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v19 + 8);
  v21(v4, v1);
  if (v14)
  {
    v21(v20, v1);
    memcpy(v35, v36, sizeof(v35));
    static OvernightMetricsChartSpec.accented(_:)((uint64_t)v35, (uint64_t)v34);
    return sub_250F2E048((uint64_t *)v36);
  }
  sub_251038F00();
  char v22 = sub_2510390F0();
  v21(v4, v1);
  v21(v20, v1);
  if (v22)
  {
    memcpy(v35, v36, sizeof(v35));
    static OvernightMetricsChartSpec.vibrant(_:)((uint64_t)v35, (uint64_t)v34);
    return sub_250F2E048((uint64_t *)v36);
  }
  return (uint64_t *)memcpy(v34, v36, 0x118uLL);
}

id sub_250F66654@<X0>(uint64_t a1@<X8>)
{
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = objc_msgSend(result, sel_isAppleWatch);

    sub_2510383E0();
    sub_250F66984(&qword_269B13800, MEMORY[0x263F1FB28]);
    uint64_t v5 = sub_251038460();
    if (v15) {
      char v6 = 2;
    }
    else {
      char v6 = 1;
    }
    if (v4) {
      char v7 = v6;
    }
    else {
      char v7 = 0;
    }
    double v8 = MEMORY[0x253390150](v5);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
    id result = (id)sub_251038400();
    *(unsigned char *)a1 = v7;
    *(double *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_250F66774(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_250F66788()
{
  uint64_t v1 = sub_251037C50();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v0 == 2)
  {
    uint64_t v5 = sub_250FC1D98();
    if (v6)
    {
      return sub_251038AB0();
    }
    else
    {
      if (v5 == 1)
      {
        if (qword_269B12BE8 != -1) {
          swift_once();
        }
        char v7 = qword_269B1ADB8;
      }
      else if (v5)
      {
        if (qword_269B12BE0 != -1) {
          swift_once();
        }
        char v7 = qword_269B1ADA0;
      }
      else
      {
        if (qword_269B12BD8 != -1) {
          swift_once();
        }
        char v7 = qword_269B1AD88;
      }
      uint64_t v9 = __swift_project_value_buffer(v1, (uint64_t)v7);
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v9, v1);
      return sub_251038B20();
    }
  }
  else
  {
    return sub_251038AC0();
  }
}

uint64_t sub_250F66984(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BalanceWidgetAccessoryRectangularSpecs.PresentationContext(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BalanceWidgetAccessoryRectangularSpecs.PresentationContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250F66B28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_250F66B50(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BalanceWidgetAccessoryRectangularSpecs.PresentationContext()
{
  return &type metadata for BalanceWidgetAccessoryRectangularSpecs.PresentationContext;
}

unint64_t sub_250F66B6C()
{
  unint64_t result = qword_269B13808;
  if (!qword_269B13808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13808);
  }
  return result;
}

void *sub_250F66BC0(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v15 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v5 = a3;
    unsigned int v6 = a2;
    BOOL v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v12 = *((void *)v11 - 1);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    swift_bridgeObjectRetain();
    uint64_t v94 = v13;
    uint64_t v96 = v5;
    uint64_t v91 = v12;
    if (v13(v10, 1, v11))
    {
      sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = sub_251037400();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v9, v10, v16);
      uint64_t v18 = v11[5];
      uint64_t v19 = &v9[v18];
      unint64_t v92 = v6;
      uint64_t v20 = &v10[v18];
      v17(&v9[v18], &v10[v18], v16);
      sub_250F26E08();
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v16);
      char v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v19[v22[5]] = *(void *)&v20[v22[5]];
      *(void *)&v19[v22[6]] = *(void *)&v20[v22[6]];
      *(void *)&v19[v22[7]] = *(void *)&v20[v22[7]];
      uint64_t v23 = v11[6];
      uint64_t v24 = &v9[v23];
      uint64_t v25 = &v10[v23];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v9[v11[7]] = v10[v11[7]];
      v9[v11[8]] = v10[v11[8]];
      v9[v11[9]] = v10[v11[9]];
      uint64_t v26 = v11[10];
      uint64_t v27 = &v9[v26];
      uint64_t v28 = &v10[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      uint64_t v30 = v11[11];
      uint64_t v31 = &v9[v30];
      uint64_t v32 = &v10[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      __int16 v34 = *(void (**)(char *, void, uint64_t, int *))(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unsigned int v6 = v92;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v9, 0, 1, v11);
      uint64_t v5 = v96;
    }
    uint64_t v35 = *(int *)(v5 + 28);
    *(void *)((char *)v7 + *(int *)(v5 + 24)) = *(void *)((char *)v6 + *(int *)(v5 + 24));
    uint64_t v36 = (char *)v7 + v35;
    char v37 = (char *)v6 + v35;
    *(void *)((char *)v7 + v35) = *(void *)((char *)v6 + v35);
    uint64_t v38 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v39 = v38[5];
    uint64_t v40 = &v36[v39];
    uint64_t v41 = &v37[v39];
    swift_bridgeObjectRetain();
    uint64_t v97 = v7;
    if (v94(v41, 1, v11))
    {
      sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      uint64_t v43 = sub_251037400();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
      v44(v40, v41, v43);
      unint64_t v93 = v6;
      uint64_t v45 = v44;
      uint64_t v46 = v11[5];
      uint64_t v47 = &v40[v46];
      uint64_t v48 = &v41[v46];
      v45(&v40[v46], &v41[v46], v43);
      sub_250F26E08();
      v45(&v47[*(int *)(v49 + 36)], &v48[*(int *)(v49 + 36)], v43);
      uint64_t v50 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v47[v50[5]] = *(void *)&v48[v50[5]];
      *(void *)&v47[v50[6]] = *(void *)&v48[v50[6]];
      *(void *)&v47[v50[7]] = *(void *)&v48[v50[7]];
      uint64_t v51 = v11[6];
      double v52 = &v40[v51];
      uint64_t v53 = &v41[v51];
      *(_OWORD *)double v52 = *(_OWORD *)v53;
      v52[16] = v53[16];
      v40[v11[7]] = v41[v11[7]];
      v40[v11[8]] = v41[v11[8]];
      v40[v11[9]] = v41[v11[9]];
      uint64_t v54 = v11[10];
      uint64_t v55 = &v40[v54];
      uint64_t v56 = &v41[v54];
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = v57;
      uint64_t v58 = v11[11];
      BOOL v59 = &v40[v58];
      uint64_t v60 = &v41[v58];
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)BOOL v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      uint64_t v95 = *(void (**)(char *, void, uint64_t, int *))(v91 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unsigned int v6 = v93;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v95(v40, 0, 1, v11);
      BOOL v7 = v97;
    }
    *(_OWORD *)&v36[v38[6]] = *(_OWORD *)&v37[v38[6]];
    uint64_t v62 = v38[7];
    uint64_t v63 = &v36[v62];
    BOOL v64 = &v37[v62];
    long long v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((void *)v63 + 10) = *((void *)v64 + 10);
    long long v66 = *((_OWORD *)v64 + 4);
    long long v67 = *((_OWORD *)v64 + 2);
    *((_OWORD *)v63 + 3) = *((_OWORD *)v64 + 3);
    *((_OWORD *)v63 + 4) = v66;
    *((_OWORD *)v63 + 2) = v67;
    *(void *)&v36[v38[8]] = *(void *)&v37[v38[8]];
    *(void *)&v36[v38[9]] = *(void *)&v37[v38[9]];
    uint64_t v68 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v69 = &v36[v68];
    id v70 = &v37[v68];
    uint64_t v71 = *((void *)v70 + 1);
    *(void *)uint64_t v69 = *(void *)v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = *((void *)v70 + 3);
    *((void *)v69 + 2) = *((void *)v70 + 2);
    *((void *)v69 + 3) = v72;
    *((void *)v69 + 4) = *((void *)v70 + 4);
    *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
    *(_OWORD *)(v69 + 56) = *(_OWORD *)(v70 + 56);
    *(_OWORD *)(v69 + 72) = *(_OWORD *)(v70 + 72);
    *(_OWORD *)(v69 + 88) = *(_OWORD *)(v70 + 88);
    *(_OWORD *)(v69 + 104) = *(_OWORD *)(v70 + 104);
    uint64_t v73 = *(int *)(v96 + 32);
    uint64_t v74 = (char *)v7 + v73;
    uint64_t v75 = (char *)v6 + v73;
    uint64_t v76 = *(void *)((char *)v6 + v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v76)
    {
      uint64_t v77 = *((void *)v75 + 1);
      uint64_t v78 = *((void *)v75 + 2);
      *(void *)uint64_t v74 = v76;
      *((void *)v74 + 1) = v77;
      *((void *)v74 + 2) = v78;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      *((void *)v74 + 2) = *((void *)v75 + 2);
    }
    v74[24] = v75[24];
    v74[32] = v75[32];
    uint64_t v79 = *((void *)v75 + 6);
    *((void *)v74 + 5) = *((void *)v75 + 5);
    *((void *)v74 + 6) = v79;
    v74[56] = v75[56];
    uint64_t v80 = *((void *)v75 + 9);
    *((void *)v74 + 8) = *((void *)v75 + 8);
    *((void *)v74 + 9) = v80;
    *((void *)v74 + 10) = *((void *)v75 + 10);
    long long v81 = *(_OWORD *)(v75 + 88);
    *(_OWORD *)(v74 + 104) = *(_OWORD *)(v75 + 104);
    *(_OWORD *)(v74 + 88) = v81;
    long long v82 = *(_OWORD *)(v75 + 120);
    long long v83 = *(_OWORD *)(v75 + 136);
    *(_OWORD *)(v74 + 152) = *(_OWORD *)(v75 + 152);
    *(_OWORD *)(v74 + 136) = v83;
    *(_OWORD *)(v74 + 120) = v82;
    uint64_t v84 = *((void *)v75 + 22);
    *((void *)v74 + 21) = *((void *)v75 + 21);
    *((void *)v74 + 22) = v84;
    uint64_t v86 = *((void *)v75 + 23);
    uint64_t v85 = *((void *)v75 + 24);
    v74[200] = v75[200];
    *((void *)v74 + 23) = v86;
    *((void *)v74 + 24) = v85;
    v74[201] = v75[201];
    uint64_t v87 = *((void *)v75 + 27);
    *((void *)v74 + 26) = *((void *)v75 + 26);
    *((void *)v74 + 27) = v87;
    uint64_t v88 = *((void *)v75 + 29);
    *((void *)v74 + 28) = *((void *)v75 + 28);
    *((void *)v74 + 29) = v88;
    *((void *)v74 + 30) = *((void *)v75 + 30);
    v74[248] = v75[248];
    uint64_t v89 = *((void *)v75 + 33);
    *((void *)v74 + 32) = *((void *)v75 + 32);
    *((void *)v74 + 33) = v89;
    *((void *)v74 + 34) = *((void *)v75 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    char v15 = v97;
  }
  swift_retain();
  return v15;
}

uint64_t sub_250F672F8(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for OvernightMetricsChartPoint();
  unsigned int v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    uint64_t v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_250F26E08();
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = a1 + a2[7];
  swift_bridgeObjectRelease();
  uint64_t v12 = v11 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v6(v12, 1, v5))
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
    v14(v12, v13);
    uint64_t v15 = v12 + *(int *)(v5 + 20);
    v14(v15, v13);
    sub_250F26E08();
    v14(v15 + *(int *)(v16 + 36), v13);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_250F6761C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  uint64_t v89 = v11;
  unint64_t v92 = a2;
  unint64_t v93 = v5;
  uint64_t v91 = v3;
  uint64_t v88 = v10;
  if (v11(v8, 1, v9))
  {
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v7, v8, v13);
    uint64_t v15 = v9[5];
    uint64_t v16 = &v7[v15];
    uint64_t v17 = &v8[v15];
    v14(&v7[v15], &v8[v15], v13);
    sub_250F26E08();
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
    uint64_t v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v16[v19[5]] = *(void *)&v17[v19[5]];
    *(void *)&v16[v19[6]] = *(void *)&v17[v19[6]];
    *(void *)&v16[v19[7]] = *(void *)&v17[v19[7]];
    uint64_t v20 = v9[6];
    uint64_t v21 = &v7[v20];
    char v22 = &v8[v20];
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    uint64_t v23 = v9[10];
    uint64_t v24 = &v7[v23];
    uint64_t v25 = &v8[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    uint64_t v27 = v9[11];
    uint64_t v28 = &v7[v27];
    uint64_t v29 = &v8[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    uint64_t v31 = *(void (**)(char *, void, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = v93;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v7, 0, 1, v9);
    uint64_t v3 = v91;
  }
  uint64_t v32 = *(int *)(v3 + 28);
  *(void *)((char *)v5 + *(int *)(v3 + 24)) = *(void *)((char *)a2 + *(int *)(v3 + 24));
  uint64_t v33 = (char *)v5 + v32;
  __int16 v34 = (void *)((char *)a2 + v32);
  *(void *)((char *)v5 + v32) = *v34;
  uint64_t v35 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v36 = v35[5];
  char v37 = &v33[v36];
  uint64_t v38 = (char *)v34 + v36;
  swift_bridgeObjectRetain();
  if (v89(v38, 1, v9))
  {
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    uint64_t v40 = sub_251037400();
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
    v41(v37, v38, v40);
    uint64_t v42 = v41;
    uint64_t v43 = v9[5];
    uint64_t v44 = &v37[v43];
    uint64_t v45 = &v38[v43];
    v42(&v37[v43], &v38[v43], v40);
    sub_250F26E08();
    v42(&v44[*(int *)(v46 + 36)], &v45[*(int *)(v46 + 36)], v40);
    uint64_t v47 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v44[v47[5]] = *(void *)&v45[v47[5]];
    *(void *)&v44[v47[6]] = *(void *)&v45[v47[6]];
    *(void *)&v44[v47[7]] = *(void *)&v45[v47[7]];
    uint64_t v48 = v9[6];
    uint64_t v49 = &v37[v48];
    uint64_t v50 = &v38[v48];
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
    v49[16] = v50[16];
    v37[v9[7]] = v38[v9[7]];
    v37[v9[8]] = v38[v9[8]];
    v37[v9[9]] = v38[v9[9]];
    uint64_t v51 = v9[10];
    double v52 = &v37[v51];
    uint64_t v53 = &v38[v51];
    uint64_t v54 = *((void *)v53 + 1);
    *(void *)double v52 = *(void *)v53;
    *((void *)v52 + 1) = v54;
    uint64_t v55 = v9[11];
    uint64_t v56 = &v37[v55];
    uint64_t v57 = &v38[v55];
    uint64_t v58 = *((void *)v57 + 1);
    *(void *)uint64_t v56 = *(void *)v57;
    *((void *)v56 + 1) = v58;
    char v90 = *(void (**)(char *, void, uint64_t, int *))(v88 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = v93;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v90(v37, 0, 1, v9);
  }
  *(_OWORD *)&v33[v35[6]] = *(_OWORD *)((char *)v34 + v35[6]);
  uint64_t v59 = v35[7];
  uint64_t v60 = &v33[v59];
  uint64_t v61 = (char *)v34 + v59;
  long long v62 = *((_OWORD *)v61 + 1);
  *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
  *((_OWORD *)v60 + 1) = v62;
  *((void *)v60 + 10) = *((void *)v61 + 10);
  long long v63 = *((_OWORD *)v61 + 4);
  long long v64 = *((_OWORD *)v61 + 2);
  *((_OWORD *)v60 + 3) = *((_OWORD *)v61 + 3);
  *((_OWORD *)v60 + 4) = v63;
  *((_OWORD *)v60 + 2) = v64;
  *(void *)&v33[v35[8]] = *(void *)((char *)v34 + v35[8]);
  *(void *)&v33[v35[9]] = *(void *)((char *)v34 + v35[9]);
  uint64_t v65 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  long long v66 = &v33[v65];
  long long v67 = (char *)v34 + v65;
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)long long v66 = *(void *)v67;
  *((void *)v66 + 1) = v68;
  uint64_t v69 = *((void *)v67 + 3);
  *((void *)v66 + 2) = *((void *)v67 + 2);
  *((void *)v66 + 3) = v69;
  *((void *)v66 + 4) = *((void *)v67 + 4);
  *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
  *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
  *(_OWORD *)(v66 + 72) = *(_OWORD *)(v67 + 72);
  *(_OWORD *)(v66 + 88) = *(_OWORD *)(v67 + 88);
  *(_OWORD *)(v66 + 104) = *(_OWORD *)(v67 + 104);
  uint64_t v70 = *(int *)(v91 + 32);
  uint64_t v71 = (char *)v5 + v70;
  uint64_t v72 = (char *)v92 + v70;
  uint64_t v73 = *(void *)((char *)v92 + v70);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v73)
  {
    uint64_t v74 = *((void *)v72 + 1);
    uint64_t v75 = *((void *)v72 + 2);
    *(void *)uint64_t v71 = v73;
    *((void *)v71 + 1) = v74;
    *((void *)v71 + 2) = v75;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *((void *)v71 + 2) = *((void *)v72 + 2);
  }
  v71[24] = v72[24];
  v71[32] = v72[32];
  uint64_t v76 = *((void *)v72 + 6);
  *((void *)v71 + 5) = *((void *)v72 + 5);
  *((void *)v71 + 6) = v76;
  v71[56] = v72[56];
  uint64_t v77 = *((void *)v72 + 9);
  *((void *)v71 + 8) = *((void *)v72 + 8);
  *((void *)v71 + 9) = v77;
  *((void *)v71 + 10) = *((void *)v72 + 10);
  long long v78 = *(_OWORD *)(v72 + 88);
  *(_OWORD *)(v71 + 104) = *(_OWORD *)(v72 + 104);
  *(_OWORD *)(v71 + 88) = v78;
  long long v79 = *(_OWORD *)(v72 + 120);
  long long v80 = *(_OWORD *)(v72 + 136);
  *(_OWORD *)(v71 + 152) = *(_OWORD *)(v72 + 152);
  *(_OWORD *)(v71 + 136) = v80;
  *(_OWORD *)(v71 + 120) = v79;
  uint64_t v81 = *((void *)v72 + 22);
  *((void *)v71 + 21) = *((void *)v72 + 21);
  *((void *)v71 + 22) = v81;
  uint64_t v83 = *((void *)v72 + 23);
  uint64_t v82 = *((void *)v72 + 24);
  v71[200] = v72[200];
  *((void *)v71 + 23) = v83;
  *((void *)v71 + 24) = v82;
  v71[201] = v72[201];
  uint64_t v84 = *((void *)v72 + 27);
  *((void *)v71 + 26) = *((void *)v72 + 26);
  *((void *)v71 + 27) = v84;
  uint64_t v85 = *((void *)v72 + 29);
  *((void *)v71 + 28) = *((void *)v72 + 28);
  *((void *)v71 + 29) = v85;
  *((void *)v71 + 30) = *((void *)v72 + 30);
  v71[248] = v72[248];
  uint64_t v86 = *((void *)v72 + 33);
  *((void *)v71 + 32) = *((void *)v72 + 32);
  *((void *)v71 + 33) = v86;
  *((void *)v71 + 34) = *((void *)v72 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v93;
}

void *sub_250F67CF0(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v120 = *((void *)v9 - 1);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, int *))(v120 + 48);
  int v11 = v10(v7, 1, v9);
  int v12 = v10(v8, 1, v9);
  id v125 = a3;
  uint64_t v126 = v4;
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = sub_251037400();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      v14(v7, v8, v13);
      uint64_t v15 = v9[5];
      uint64_t v16 = &v7[v15];
      uint64_t v121 = v5;
      uint64_t v17 = &v8[v15];
      v14(&v7[v15], &v8[v15], v13);
      sub_250F26E08();
      v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
      uint64_t v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v16[v19[5]] = *(void *)&v17[v19[5]];
      *(void *)&v16[v19[6]] = *(void *)&v17[v19[6]];
      *(void *)&v16[v19[7]] = *(void *)&v17[v19[7]];
      uint64_t v20 = v9[6];
      uint64_t v21 = &v7[v20];
      char v22 = &v8[v20];
      char v23 = v22[16];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      v21[16] = v23;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      uint64_t v24 = v9[10];
      uint64_t v25 = &v7[v24];
      uint64_t v26 = &v8[v24];
      *uint64_t v25 = *v26;
      v25[1] = v26[1];
      uint64_t v27 = v9[11];
      uint64_t v28 = &v7[v27];
      uint64_t v29 = &v8[v27];
      *uint64_t v28 = *v29;
      v28[1] = v29[1];
      uint64_t v30 = *(void (**)(unsigned char *, void, uint64_t, int *))(v120 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v5 = v121;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30(v7, 0, 1, v9);
      a3 = v125;
      uint64_t v4 = v126;
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_250F6C2A4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v75 = sub_251037400();
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 24);
  v76(v7, v8, v75);
  uint64_t v77 = v9[5];
  long long v78 = &v7[v77];
  uint64_t v123 = v5;
  long long v79 = &v8[v77];
  v76(&v7[v77], &v8[v77], v75);
  sub_250F26E08();
  v76(&v78[*(int *)(v80 + 36)], &v79[*(int *)(v80 + 36)], v75);
  uint64_t v81 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v78[v81[5]] = *(void *)&v79[v81[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v78[v81[6]] = *(void *)&v79[v81[6]];
  swift_bridgeObjectRetain();
  uint64_t v4 = v126;
  swift_bridgeObjectRelease();
  uint64_t v82 = v81[7];
  uint64_t v83 = *(void *)&v79[v82];
  uint64_t v5 = v123;
  *(void *)&v78[v82] = v83;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v84 = v9[6];
  uint64_t v85 = &v7[v84];
  uint64_t v86 = &v8[v84];
  long long v87 = *(_OWORD *)v86;
  v85[16] = v86[16];
  *(_OWORD *)uint64_t v85 = v87;
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  uint64_t v88 = v9[10];
  uint64_t v89 = &v7[v88];
  char v90 = &v8[v88];
  void *v89 = *v90;
  v89[1] = v90[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v91 = v9[11];
  unint64_t v92 = &v7[v91];
  unint64_t v93 = &v8[v91];
  *unint64_t v92 = *v93;
  v92[1] = v93[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  *(void *)((char *)v5 + a3[6]) = *(void *)((char *)v4 + a3[6]);
  uint64_t v32 = a3[7];
  uint64_t v33 = (char *)v5 + v32;
  __int16 v34 = (void *)((char *)v4 + v32);
  *(void *)((char *)v5 + v32) = *v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v36 = v35[5];
  char v37 = &v33[v36];
  uint64_t v38 = (char *)v34 + v36;
  int v39 = v10(&v33[v36], 1, v9);
  int v40 = v10(v38, 1, v9);
  if (v39)
  {
    if (!v40)
    {
      uint64_t v41 = sub_251037400();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
      uint64_t v118 = v35;
      v42(v37, v38, v41);
      uint64_t v43 = v9[5];
      uint64_t v44 = &v37[v43];
      id v122 = v5;
      uint64_t v45 = &v38[v43];
      v42(&v37[v43], &v38[v43], v41);
      sub_250F26E08();
      v42(&v44[*(int *)(v46 + 36)], &v45[*(int *)(v46 + 36)], v41);
      uint64_t v47 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v44[v47[5]] = *(void *)&v45[v47[5]];
      *(void *)&v44[v47[6]] = *(void *)&v45[v47[6]];
      *(void *)&v44[v47[7]] = *(void *)&v45[v47[7]];
      uint64_t v48 = v9[6];
      uint64_t v49 = &v37[v48];
      uint64_t v50 = &v38[v48];
      char v51 = v50[16];
      *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
      v49[16] = v51;
      v37[v9[7]] = v38[v9[7]];
      v37[v9[8]] = v38[v9[8]];
      v37[v9[9]] = v38[v9[9]];
      uint64_t v52 = v9[10];
      uint64_t v53 = &v37[v52];
      uint64_t v54 = &v38[v52];
      *(void *)uint64_t v53 = *v54;
      *((void *)v53 + 1) = v54[1];
      uint64_t v55 = v9[11];
      uint64_t v56 = &v37[v55];
      uint64_t v57 = &v38[v55];
      *(void *)uint64_t v56 = *v57;
      *((void *)v56 + 1) = v57[1];
      uint64_t v58 = *(void (**)(char *, void, uint64_t, int *))(v120 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v5 = v122;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58(v37, 0, 1, v9);
      uint64_t v35 = v118;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    sub_250F6C2A4((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v94 = sub_251037400();
  uint64_t v95 = *(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 24);
  v95(v37, v38, v94);
  uint64_t v96 = v95;
  uint64_t v97 = v9[5];
  id v119 = v35;
  uint64_t v124 = v5;
  uint64_t v98 = &v37[v97];
  id v99 = &v38[v97];
  uint64_t v100 = v96;
  v96(&v37[v97], &v38[v97], v94);
  sub_250F26E08();
  v100(&v98[*(int *)(v101 + 36)], &v99[*(int *)(v101 + 36)], v94);
  id v102 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v98[v102[5]] = *(void *)&v99[v102[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v98[v102[6]] = *(void *)&v99[v102[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v98[v102[7]] = *(void *)&v99[v102[7]];
  uint64_t v5 = v124;
  uint64_t v35 = v119;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v103 = v9[6];
  uint64_t v104 = &v37[v103];
  uint64_t v105 = &v38[v103];
  long long v106 = *(_OWORD *)v105;
  v104[16] = v105[16];
  *(_OWORD *)uint64_t v104 = v106;
  v37[v9[7]] = v38[v9[7]];
  v37[v9[8]] = v38[v9[8]];
  v37[v9[9]] = v38[v9[9]];
  uint64_t v107 = v9[10];
  uint64_t v108 = &v37[v107];
  uint64_t v109 = &v38[v107];
  *(void *)uint64_t v108 = *v109;
  *((void *)v108 + 1) = v109[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v110 = v9[11];
  uint64_t v111 = &v37[v110];
  uint64_t v112 = &v38[v110];
  *(void *)uint64_t v111 = *v112;
  *((void *)v111 + 1) = v112[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v60 = v35[6];
  uint64_t v61 = &v33[v60];
  long long v62 = (void *)((char *)v34 + v60);
  *(void *)uint64_t v61 = *v62;
  *((void *)v61 + 1) = v62[1];
  uint64_t v63 = v35[7];
  long long v64 = &v33[v63];
  uint64_t v65 = (char *)v34 + v63;
  *(void *)long long v64 = *(void *)v65;
  uint64_t v66 = *((void *)v65 + 1);
  v64[16] = v65[16];
  *((void *)v64 + 1) = v66;
  *((void *)v64 + 3) = *((void *)v65 + 3);
  *((void *)v64 + 4) = *((void *)v65 + 4);
  *((void *)v64 + 5) = *((void *)v65 + 5);
  *((void *)v64 + 6) = *((void *)v65 + 6);
  *((void *)v64 + 7) = *((void *)v65 + 7);
  *((void *)v64 + 8) = *((void *)v65 + 8);
  *((void *)v64 + 9) = *((void *)v65 + 9);
  *((void *)v64 + 10) = *((void *)v65 + 10);
  *(void *)&v33[v35[8]] = *(void *)((char *)v34 + v35[8]);
  *(void *)&v33[v35[9]] = *(void *)((char *)v34 + v35[9]);
  uint64_t v67 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v68 = &v33[v67];
  uint64_t v69 = (void *)((char *)v34 + v67);
  *(void *)uint64_t v68 = *v69;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v68 + 1) = v69[1];
  *((void *)v68 + 2) = v69[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v68 + 3) = v69[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v68 + 4) = v69[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v68 + 5) = v69[5];
  *((void *)v68 + 6) = v69[6];
  *((void *)v68 + 7) = v69[7];
  *((void *)v68 + 8) = v69[8];
  *((void *)v68 + 9) = v69[9];
  *((void *)v68 + 10) = v69[10];
  *((void *)v68 + 11) = v69[11];
  *((void *)v68 + 12) = v69[12];
  *((void *)v68 + 13) = v69[13];
  *((void *)v68 + 14) = v69[14];
  uint64_t v70 = v125[8];
  uint64_t v71 = (char *)v5 + v70;
  uint64_t v72 = (long long *)((char *)v126 + v70);
  uint64_t v73 = *(void *)((char *)v126 + v70);
  if (*(void *)((char *)v5 + v70))
  {
    if (v73)
    {
      *(void *)uint64_t v71 = v73;
      swift_retain();
      swift_release();
      *((void *)v71 + 1) = *((void *)v72 + 1);
      swift_retain();
      swift_release();
      *((void *)v71 + 2) = *((void *)v72 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80((uint64_t)v5 + v70);
      uint64_t v74 = *((void *)v72 + 2);
      *(_OWORD *)uint64_t v71 = *v72;
      *((void *)v71 + 2) = v74;
    }
  }
  else if (v73)
  {
    *(void *)uint64_t v71 = v73;
    *((void *)v71 + 1) = *((void *)v72 + 1);
    *((void *)v71 + 2) = *((void *)v72 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v113 = *v72;
    *((void *)v71 + 2) = *((void *)v72 + 2);
    *(_OWORD *)uint64_t v71 = v113;
  }
  v71[24] = *((unsigned char *)v72 + 24);
  v71[32] = *((unsigned char *)v72 + 32);
  *((void *)v71 + 5) = *((void *)v72 + 5);
  swift_retain();
  swift_release();
  uint64_t v114 = *((void *)v72 + 6);
  v71[56] = *((unsigned char *)v72 + 56);
  *((void *)v71 + 6) = v114;
  *((void *)v71 + 8) = *((void *)v72 + 8);
  *((void *)v71 + 9) = *((void *)v72 + 9);
  swift_retain();
  swift_release();
  *((void *)v71 + 10) = *((void *)v72 + 10);
  swift_retain();
  swift_release();
  *((void *)v71 + 11) = *((void *)v72 + 11);
  uint64_t v115 = *((void *)v72 + 12);
  v71[104] = *((unsigned char *)v72 + 104);
  *((void *)v71 + 12) = v115;
  *((void *)v71 + 14) = *((void *)v72 + 14);
  *((void *)v71 + 15) = *((void *)v72 + 15);
  *((void *)v71 + 16) = *((void *)v72 + 16);
  *((void *)v71 + 17) = *((void *)v72 + 17);
  *((void *)v71 + 18) = *((void *)v72 + 18);
  *((void *)v71 + 19) = *((void *)v72 + 19);
  *((void *)v71 + 20) = *((void *)v72 + 20);
  *((void *)v71 + 21) = *((void *)v72 + 21);
  *((void *)v71 + 22) = *((void *)v72 + 22);
  swift_retain();
  swift_release();
  *((void *)v71 + 23) = *((void *)v72 + 23);
  swift_retain();
  swift_release();
  uint64_t v116 = *((void *)v72 + 24);
  v71[200] = *((unsigned char *)v72 + 200);
  *((void *)v71 + 24) = v116;
  v71[201] = *((unsigned char *)v72 + 201);
  *((void *)v71 + 26) = *((void *)v72 + 26);
  swift_retain();
  swift_release();
  *((void *)v71 + 27) = *((void *)v72 + 27);
  swift_retain();
  swift_release();
  *((void *)v71 + 28) = *((void *)v72 + 28);
  swift_retain();
  swift_release();
  *((void *)v71 + 29) = *((void *)v72 + 29);
  swift_retain();
  swift_release();
  *((void *)v71 + 30) = *((void *)v72 + 30);
  swift_retain();
  swift_release();
  v71[248] = *((unsigned char *)v72 + 248);
  *((void *)v71 + 32) = *((void *)v72 + 32);
  swift_retain();
  swift_release();
  *((void *)v71 + 33) = *((void *)v72 + 33);
  swift_retain();
  swift_release();
  *((void *)v71 + 34) = *((void *)v72 + 34);
  return v5;
}

void *sub_250F68964(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v60 = *(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48);
  uint64_t v59 = *((void *)v9 - 1);
  if (v60(v8, 1, v9))
  {
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_251037400();
    int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(v7, v8, v11);
    uint64_t v13 = v9[5];
    uint64_t v55 = v3;
    uint64_t v57 = v4;
    uint64_t v14 = &v7[v13];
    uint64_t v15 = &v8[v13];
    v12(&v7[v13], &v8[v13], v11);
    sub_250F26E08();
    v12(&v14[*(int *)(v16 + 36)], &v15[*(int *)(v16 + 36)], v11);
    uint64_t v17 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v14[v17[5]] = *(void *)&v15[v17[5]];
    *(void *)&v14[v17[6]] = *(void *)&v15[v17[6]];
    *(void *)&v14[v17[7]] = *(void *)&v15[v17[7]];
    uint64_t v3 = v55;
    uint64_t v4 = v57;
    uint64_t v18 = v9[6];
    uint64_t v19 = &v7[v18];
    uint64_t v20 = &v8[v18];
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    char v19[16] = v20[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
    *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v59 + 56))(v7, 0, 1, v9);
  }
  uint64_t v21 = v3[7];
  *(void *)((char *)v5 + v3[6]) = *(void *)((char *)v4 + v3[6]);
  char v22 = (char *)v5 + v21;
  char v23 = (char *)v4 + v21;
  *(void *)((char *)v5 + v21) = *(void *)((char *)v4 + v21);
  uint64_t v24 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v25 = v24[5];
  uint64_t v26 = &v22[v25];
  uint64_t v27 = &v23[v25];
  if (v60(&v23[v25], 1, v9))
  {
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v58 = v4;
    uint64_t v29 = sub_251037400();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
    uint64_t v54 = v5;
    v30(v26, v27, v29);
    uint64_t v31 = v30;
    uint64_t v32 = v9[5];
    uint64_t v56 = v3;
    uint64_t v33 = &v26[v32];
    __int16 v34 = &v27[v32];
    v31(&v26[v32], &v27[v32], v29);
    sub_250F26E08();
    uint64_t v36 = v29;
    uint64_t v4 = v58;
    v31(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v36);
    uint64_t v5 = v54;
    char v37 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v33[v37[5]] = *(void *)&v34[v37[5]];
    *(void *)&v33[v37[6]] = *(void *)&v34[v37[6]];
    *(void *)&v33[v37[7]] = *(void *)&v34[v37[7]];
    uint64_t v3 = v56;
    uint64_t v38 = v9[6];
    int v39 = &v26[v38];
    int v40 = &v27[v38];
    *(_OWORD *)int v39 = *(_OWORD *)v40;
    v39[16] = v40[16];
    v26[v9[7]] = v27[v9[7]];
    v26[v9[8]] = v27[v9[8]];
    v26[v9[9]] = v27[v9[9]];
    *(_OWORD *)&v26[v9[10]] = *(_OWORD *)&v27[v9[10]];
    *(_OWORD *)&v26[v9[11]] = *(_OWORD *)&v27[v9[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v59 + 56))(v26, 0, 1, v9);
  }
  *(_OWORD *)&v22[v24[6]] = *(_OWORD *)&v23[v24[6]];
  uint64_t v41 = v24[7];
  uint64_t v42 = &v22[v41];
  uint64_t v43 = &v23[v41];
  long long v44 = *((_OWORD *)v43 + 1);
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *((_OWORD *)v42 + 1) = v44;
  *((void *)v42 + 10) = *((void *)v43 + 10);
  long long v45 = *((_OWORD *)v43 + 4);
  long long v46 = *((_OWORD *)v43 + 2);
  *((_OWORD *)v42 + 3) = *((_OWORD *)v43 + 3);
  *((_OWORD *)v42 + 4) = v45;
  *((_OWORD *)v42 + 2) = v46;
  *(void *)&v22[v24[8]] = *(void *)&v23[v24[8]];
  *(void *)&v22[v24[9]] = *(void *)&v23[v24[9]];
  uint64_t v47 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v48 = &v22[v47];
  uint64_t v49 = &v23[v47];
  long long v50 = *((_OWORD *)v49 + 5);
  *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
  *((_OWORD *)v48 + 5) = v50;
  *((_OWORD *)v48 + 6) = *((_OWORD *)v49 + 6);
  *((void *)v48 + 14) = *((void *)v49 + 14);
  long long v51 = *((_OWORD *)v49 + 1);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *((_OWORD *)v48 + 1) = v51;
  long long v52 = *((_OWORD *)v49 + 3);
  *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
  *((_OWORD *)v48 + 3) = v52;
  memcpy((char *)v5 + v3[8], (char *)v4 + v3[8], 0x118uLL);
  return v5;
}

void *sub_250F68E44(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v101 = *((void *)v9 - 1);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, int *))(v101 + 48);
  int v11 = v10(v7, 1, v9);
  int v12 = v10(v8, 1, v9);
  long long v106 = a3;
  uint64_t v107 = v4;
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = sub_251037400();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(v7, v8, v13);
      uint64_t v15 = v9[5];
      uint64_t v16 = &v7[v15];
      id v102 = v5;
      uint64_t v17 = &v8[v15];
      v14(&v7[v15], &v8[v15], v13);
      sub_250F26E08();
      v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
      uint64_t v4 = v107;
      uint64_t v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v16[v19[5]] = *(void *)&v17[v19[5]];
      *(void *)&v16[v19[6]] = *(void *)&v17[v19[6]];
      uint64_t v20 = v19[7];
      uint64_t v21 = *(void *)&v17[v20];
      uint64_t v5 = v102;
      *(void *)&v16[v20] = v21;
      uint64_t v22 = v9[6];
      char v23 = &v7[v22];
      uint64_t v24 = &v8[v22];
      *(_OWORD *)char v23 = *(_OWORD *)v24;
      v23[16] = v24[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
      *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v101 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_250F6C2A4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v59 = sub_251037400();
  uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 40);
  v60(v7, v8, v59);
  uint64_t v61 = v9[5];
  long long v62 = &v7[v61];
  uint64_t v104 = v5;
  uint64_t v63 = &v8[v61];
  v60(&v7[v61], &v8[v61], v59);
  sub_250F26E08();
  v60(&v62[*(int *)(v64 + 36)], &v63[*(int *)(v64 + 36)], v59);
  uint64_t v4 = v107;
  uint64_t v65 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v62[v65[5]] = *(void *)&v63[v65[5]];
  swift_bridgeObjectRelease();
  *(void *)&v62[v65[6]] = *(void *)&v63[v65[6]];
  swift_bridgeObjectRelease();
  uint64_t v66 = v65[7];
  uint64_t v67 = *(void *)&v63[v66];
  uint64_t v5 = v104;
  *(void *)&v62[v66] = v67;
  swift_bridgeObjectRelease();
  uint64_t v68 = v9[6];
  uint64_t v69 = &v7[v68];
  uint64_t v70 = &v8[v68];
  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
  v69[16] = v70[16];
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  uint64_t v71 = v9[10];
  uint64_t v72 = &v7[v71];
  uint64_t v73 = (uint64_t *)&v8[v71];
  uint64_t v75 = *v73;
  uint64_t v74 = v73[1];
  *(void *)uint64_t v72 = v75;
  *((void *)v72 + 1) = v74;
  swift_bridgeObjectRelease();
  uint64_t v76 = v9[11];
  uint64_t v77 = &v7[v76];
  long long v78 = (uint64_t *)&v8[v76];
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  *(void *)uint64_t v77 = v80;
  *((void *)v77 + 1) = v79;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v26 = a3[7];
  *(void *)((char *)v5 + a3[6]) = *(void *)((char *)v4 + a3[6]);
  uint64_t v27 = (char *)v5 + v26;
  uint64_t v28 = (void *)((char *)v4 + v26);
  *(void *)((char *)v5 + v26) = *v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v30 = v29[5];
  uint64_t v31 = &v27[v30];
  uint64_t v32 = (char *)v28 + v30;
  int v33 = v10(&v27[v30], 1, v9);
  int v34 = v10(v32, 1, v9);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = sub_251037400();
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
      v36(v31, v32, v35);
      char v37 = v36;
      uint64_t v38 = v9[5];
      uint64_t v103 = v5;
      int v39 = &v31[v38];
      int v40 = &v32[v38];
      v37(&v31[v38], &v32[v38], v35);
      sub_250F26E08();
      v37(&v39[*(int *)(v41 + 36)], &v40[*(int *)(v41 + 36)], v35);
      uint64_t v42 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v39[v42[5]] = *(void *)&v40[v42[5]];
      *(void *)&v39[v42[6]] = *(void *)&v40[v42[6]];
      *(void *)&v39[v42[7]] = *(void *)&v40[v42[7]];
      uint64_t v5 = v103;
      uint64_t v43 = v9[6];
      long long v44 = &v31[v43];
      long long v45 = &v32[v43];
      *(_OWORD *)long long v44 = *(_OWORD *)v45;
      v44[16] = v45[16];
      v31[v9[7]] = v32[v9[7]];
      v31[v9[8]] = v32[v9[8]];
      v31[v9[9]] = v32[v9[9]];
      *(_OWORD *)&v31[v9[10]] = *(_OWORD *)&v32[v9[10]];
      *(_OWORD *)&v31[v9[11]] = *(_OWORD *)&v32[v9[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v101 + 56))(v31, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    sub_250F6C2A4((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v81 = sub_251037400();
  uint64_t v82 = *(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 40);
  v82(v31, v32, v81);
  uint64_t v83 = v9[5];
  uint64_t v105 = v5;
  uint64_t v84 = &v31[v83];
  uint64_t v85 = &v32[v83];
  v82(&v31[v83], &v32[v83], v81);
  sub_250F26E08();
  v82(&v84[*(int *)(v86 + 36)], &v85[*(int *)(v86 + 36)], v81);
  long long v87 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v84[v87[5]] = *(void *)&v85[v87[5]];
  swift_bridgeObjectRelease();
  *(void *)&v84[v87[6]] = *(void *)&v85[v87[6]];
  swift_bridgeObjectRelease();
  *(void *)&v84[v87[7]] = *(void *)&v85[v87[7]];
  uint64_t v5 = v105;
  swift_bridgeObjectRelease();
  uint64_t v88 = v9[6];
  uint64_t v89 = &v31[v88];
  char v90 = &v32[v88];
  *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
  v89[16] = v90[16];
  v31[v9[7]] = v32[v9[7]];
  v31[v9[8]] = v32[v9[8]];
  v31[v9[9]] = v32[v9[9]];
  uint64_t v91 = v9[10];
  unint64_t v92 = &v31[v91];
  unint64_t v93 = (uint64_t *)&v32[v91];
  uint64_t v95 = *v93;
  uint64_t v94 = v93[1];
  *(void *)unint64_t v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v9[11];
  uint64_t v97 = &v31[v96];
  uint64_t v98 = (uint64_t *)&v32[v96];
  uint64_t v100 = *v98;
  uint64_t v99 = v98[1];
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease();
LABEL_13:
  *(_OWORD *)&v27[v29[6]] = *(_OWORD *)((char *)v28 + v29[6]);
  uint64_t v47 = v29[7];
  uint64_t v48 = &v27[v47];
  uint64_t v49 = (char *)v28 + v47;
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  v48[16] = v49[16];
  *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
  *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
  *(_OWORD *)(v48 + 56) = *(_OWORD *)(v49 + 56);
  *(_OWORD *)(v48 + 72) = *(_OWORD *)(v49 + 72);
  *(void *)&v27[v29[8]] = *(void *)((char *)v28 + v29[8]);
  *(void *)&v27[v29[9]] = *(void *)((char *)v28 + v29[9]);
  uint64_t v50 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  long long v51 = &v27[v50];
  long long v52 = (char *)v28 + v50;
  *(void *)&v27[v50] = *(void *)v52;
  swift_bridgeObjectRelease();
  *((void *)v51 + 1) = *((void *)v52 + 1);
  *((void *)v51 + 2) = *((void *)v52 + 2);
  swift_bridgeObjectRelease();
  *((void *)v51 + 3) = *((void *)v52 + 3);
  swift_bridgeObjectRelease();
  *((void *)v51 + 4) = *((void *)v52 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
  *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
  *(_OWORD *)(v51 + 72) = *(_OWORD *)(v52 + 72);
  *(_OWORD *)(v51 + 88) = *(_OWORD *)(v52 + 88);
  *(_OWORD *)(v51 + 104) = *(_OWORD *)(v52 + 104);
  uint64_t v53 = v106[8];
  uint64_t v54 = (uint64_t)v5 + v53;
  uint64_t v55 = (uint64_t)v107 + v53;
  if (!*(void *)((char *)v5 + v53))
  {
LABEL_17:
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *(void *)(v54 + 16) = *(void *)(v55 + 16);
    goto LABEL_18;
  }
  if (!*(void *)v55)
  {
    sub_250F27E80(v54);
    goto LABEL_17;
  }
  *(void *)uint64_t v54 = *(void *)v55;
  swift_release();
  *(void *)(v54 + 8) = *(void *)(v55 + 8);
  swift_release();
  *(void *)(v54 + 16) = *(void *)(v55 + 16);
  swift_release();
LABEL_18:
  *(unsigned char *)(v54 + 24) = *(unsigned char *)(v55 + 24);
  *(unsigned char *)(v54 + 32) = *(unsigned char *)(v55 + 32);
  *(void *)(v54 + 40) = *(void *)(v55 + 40);
  swift_release();
  *(void *)(v54 + 48) = *(void *)(v55 + 48);
  *(unsigned char *)(v54 + 56) = *(unsigned char *)(v55 + 56);
  *(void *)(v54 + 64) = *(void *)(v55 + 64);
  *(void *)(v54 + 72) = *(void *)(v55 + 72);
  swift_release();
  *(void *)(v54 + 80) = *(void *)(v55 + 80);
  swift_release();
  *(void *)(v54 + 88) = *(void *)(v55 + 88);
  *(void *)(v54 + 96) = *(void *)(v55 + 96);
  *(unsigned char *)(v54 + 104) = *(unsigned char *)(v55 + 104);
  long long v56 = *(_OWORD *)(v55 + 128);
  *(_OWORD *)(v54 + 112) = *(_OWORD *)(v55 + 112);
  *(_OWORD *)(v54 + 128) = v56;
  long long v57 = *(_OWORD *)(v55 + 160);
  *(_OWORD *)(v54 + 144) = *(_OWORD *)(v55 + 144);
  *(_OWORD *)(v54 + 160) = v57;
  *(void *)(v54 + 176) = *(void *)(v55 + 176);
  swift_release();
  *(void *)(v54 + 184) = *(void *)(v55 + 184);
  swift_release();
  *(void *)(v54 + 192) = *(void *)(v55 + 192);
  *(unsigned char *)(v54 + 200) = *(unsigned char *)(v55 + 200);
  *(unsigned char *)(v54 + 201) = *(unsigned char *)(v55 + 201);
  *(void *)(v54 + 208) = *(void *)(v55 + 208);
  swift_release();
  *(void *)(v54 + 216) = *(void *)(v55 + 216);
  swift_release();
  *(void *)(v54 + 224) = *(void *)(v55 + 224);
  swift_release();
  *(void *)(v54 + 232) = *(void *)(v55 + 232);
  swift_release();
  *(void *)(v54 + 240) = *(void *)(v55 + 240);
  swift_release();
  *(unsigned char *)(v54 + 248) = *(unsigned char *)(v55 + 248);
  *(void *)(v54 + 256) = *(void *)(v55 + 256);
  swift_release();
  *(void *)(v54 + 264) = *(void *)(v55 + 264);
  swift_release();
  *(void *)(v54 + 272) = *(void *)(v55 + 272);
  return v5;
}

uint64_t sub_250F69840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F69854);
}

uint64_t sub_250F69854(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      int v11 = (char *)a1 + *(int *)(a3 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OvernightMetricsChartLayout(0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_250F6999C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F699B0);
}

void *sub_250F699B0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      int v11 = (char *)v5 + *(int *)(a4 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OvernightMetricsChartLayout(0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for GradientOverlaidPills()
{
  uint64_t result = qword_269B13810;
  if (!qword_269B13810) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250F69B44()
{
  sub_250F6B8B0(319, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartLayout(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_250F69C4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F69C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v64 = type metadata accessor for GradientOverlaidPills();
  MEMORY[0x270FA5388](v64);
  uint64_t v58 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v51 - v7;
  sub_250F6BC10();
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v61 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v59 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6BAA8();
  uint64_t v56 = v11;
  uint64_t v63 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v65 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6B910();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v55 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v57 = (char *)&v51 - v18;
  uint64_t v19 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1 + *(int *)(type metadata accessor for OvernightMetricsChartPoint() + 20);
  uint64_t v24 = *(void *)(v23 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 20));
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v52 = v15;
    uint64_t v53 = v14;
    uint64_t v54 = a3;
    uint64_t v26 = v24 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v27 = *(void *)(v20 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_250F6C23C(v26, (uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
      char v28 = v22[*(int *)(v19 + 32) + 8];
      sub_250F6C2A4((uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
      if ((v28 & 1) == 0) {
        break;
      }
      v26 += v27;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = v59;
    uint64_t v31 = v62;
    sub_250F6A380(a1, v59);
    sub_250F6C23C(v31, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
    sub_250F6C2A4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
    sub_250F6BD40();
    uint64_t v33 = v32;
    sub_250F6BE40();
    uint64_t v35 = v34;
    sub_250F6BF08();
    uint64_t v37 = v36;
    uint64_t v66 = sub_251037F70();
    uint64_t v67 = MEMORY[0x263EFCD08];
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v66 = v37;
    uint64_t v67 = MEMORY[0x263F188A8];
    uint64_t v68 = OpaqueTypeConformance2;
    uint64_t v69 = MEMORY[0x263F18898];
    uint64_t v39 = swift_getOpaqueTypeConformance2();
    uint64_t v66 = v35;
    uint64_t v67 = v39;
    uint64_t v40 = swift_getOpaqueTypeConformance2();
    uint64_t v66 = v33;
    uint64_t v67 = v40;
    uint64_t v41 = swift_getOpaqueTypeConformance2();
    uint64_t v42 = v61;
    sub_251037DB0();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v30, v42);
    uint64_t v44 = v53;
    uint64_t v43 = v54;
    uint64_t v45 = v52;
    uint64_t v46 = v58;
    sub_250F6C23C(v31, v58, (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
    uint64_t v47 = v57;
    uint64_t v49 = v55;
    uint64_t v48 = v56;
    sub_250F6C2A4(v46, (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
    uint64_t v66 = v42;
    uint64_t v67 = v41;
    swift_getOpaqueTypeConformance2();
    uint64_t v50 = v65;
    sub_251037D80();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v48);
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v47, v49, v44);
    (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v43, v47, v44);
    sub_250F6C304(0, &qword_269B13878, (uint64_t (*)(uint64_t))sub_250F6B910, MEMORY[0x263EFCB18], MEMORY[0x263EFCC88]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v44);
  }
  else
  {
LABEL_6:
    sub_250F6C304(0, &qword_269B13878, (uint64_t (*)(uint64_t))sub_250F6B910, MEMORY[0x263EFCB18], MEMORY[0x263EFCC88]);
    return swift_storeEnumTagMultiPayload();
  }
}

unint64_t sub_250F6A380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_2510384E0();
  uint64_t v80 = *(void *)(v5 - 8);
  uint64_t v81 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v77 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6152C();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v74 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v72 = (char *)&v65 - v10;
  sub_250F6C304(0, (unint64_t *)&qword_269B13490, MEMORY[0x263F07490], MEMORY[0x263EFCAD0], MEMORY[0x263EFCC50]);
  MEMORY[0x270FA5388](v11 - 8);
  *(double *)&uint64_t v75 = COERCE_DOUBLE(sub_251037F70());
  uint64_t v73 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6BF08();
  double v78 = v14;
  uint64_t v76 = *(void *)(*(void *)&v14 - 8);
  MEMORY[0x270FA5388](*(void *)&v14);
  uint64_t v71 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6BE40();
  double v17 = v16;
  uint64_t v82 = *(void *)(*(void *)&v16 - 8);
  MEMORY[0x270FA5388](*(void *)&v16);
  uint64_t v79 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6BD40();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(int *)(type metadata accessor for GradientOverlaidPills() + 28);
  uint64_t v83 = v2;
  uint64_t v25 = v2 + v24;
  uint64_t v26 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v27 = a1 + *(int *)(v26 + 24);
  double v28 = 0.0;
  double v29 = 0.0;
  if ((*(unsigned char *)(v27 + 16) & 1) == 0)
  {
    double v29 = *(double *)v27;
    double v28 = *(double *)(v27 + 8);
  }
  double v30 = *(double *)(v25 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 8) * 0.5;
  sub_250FCA198(v29);
  double v32 = v31 - v30;
  unint64_t result = sub_250FCA198(v28);
  double v35 = v30 + v34;
  if (v32 > v30 + v34)
  {
    __break(1u);
  }
  else
  {
    sub_2510384C0();
    uint64_t v85 = v23;
    double v67 = v17;
    uint64_t v68 = a2;
    uint64_t v69 = v20;
    uint64_t v66 = v26;
    uint64_t v70 = v21;
    sub_251037400();
    uint64_t v84 = a1;
    sub_250F6C1F4((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    sub_251037E30();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2510384C0();
    double v86 = v32;
    sub_251037E40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2510384C0();
    double v86 = v35;
    sub_251037E40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    sub_251037F60();
    uint64_t v37 = v80;
    uint64_t v36 = v81;
    uint64_t v38 = v77;
    (*(void (**)(char *, void, uint64_t))(v80 + 104))(v77, *MEMORY[0x263F19860], v81);
    uint64_t v39 = MEMORY[0x263EFCD08];
    uint64_t v40 = v71;
    uint64_t v41 = v75;
    sub_251037D30();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v41);
    uint64_t v42 = v84;
    sub_250F6AC68(v84, &v91);
    uint64_t v90 = v91;
    double v86 = *(double *)&v41;
    uint64_t v87 = v39;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v44 = MEMORY[0x263F188A8];
    double v45 = v78;
    uint64_t v46 = v79;
    sub_251037D40();
    swift_release();
    (*(void (**)(char *, double))(v76 + 8))(v40, COERCE_DOUBLE(*(void *)&v45));
    uint64_t v47 = v66;
    uint64_t v48 = (double *)(v42 + *(int *)(v66 + 40));
    uint64_t v49 = *((void *)v48 + 1);
    double v86 = *v48;
    uint64_t v87 = v49;
    sub_250F3EB74();
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_2510388A0();
    uint64_t v52 = v51;
    double v86 = v45;
    uint64_t v87 = v44;
    LOBYTE(v44) = v53 & 1;
    uint64_t v88 = OpaqueTypeConformance2;
    uint64_t v89 = MEMORY[0x263F18898];
    uint64_t v54 = swift_getOpaqueTypeConformance2();
    double v55 = v67;
    sub_251037D60();
    sub_250F3EBC8(v50, v52, v44);
    swift_bridgeObjectRelease();
    double v56 = v55;
    (*(void (**)(char *, double))(v82 + 8))(v46, COERCE_DOUBLE(*(void *)&v55));
    long long v57 = (double *)(v84 + *(int *)(v47 + 44));
    uint64_t v58 = *((void *)v57 + 1);
    double v86 = *v57;
    uint64_t v87 = v58;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_2510388A0();
    uint64_t v61 = v60;
    LOBYTE(v55) = v62 & 1;
    double v86 = v56;
    uint64_t v87 = v54;
    swift_getOpaqueTypeConformance2();
    uint64_t v63 = v69;
    uint64_t v64 = v85;
    sub_251037D70();
    sub_250F3EBC8(v59, v61, SLOBYTE(v55));
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v64, v63);
  }
  return result;
}

uint64_t sub_250F6AC68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v41 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6C370();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)&v41 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v43 = type metadata accessor for GradientOverlaidPills();
  uint64_t v20 = *(int *)(v43 + 32);
  uint64_t v45 = v2;
  uint64_t v21 = v2 + v20;
  uint64_t v22 = *(void *)(v21 + 184);
  if (v22)
  {
    uint64_t v42 = a2;
    sub_250F6C23C(v44, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    sub_250F3A92C(v45 + *(int *)(v43 + 20), (uint64_t)v16);
    uint64_t v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_250F3A92C((uint64_t)v19, (uint64_t)v10);
    sub_250F3A92C((uint64_t)v16, v23);
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v24((uint64_t)v10, 1, v4) == 1)
    {
      swift_retain();
      sub_250F6C3F0((uint64_t)v16);
      sub_250F6C3F0((uint64_t)v19);
      int v25 = v24(v23, 1, v4);
      a2 = v42;
      if (v25 == 1)
      {
        uint64_t result = sub_250F6C3F0((uint64_t)v10);
LABEL_23:
        *a2 = v22;
        return result;
      }
    }
    else
    {
      sub_250F3A92C((uint64_t)v10, (uint64_t)v13);
      if (v24(v23, 1, v4) != 1)
      {
        uint64_t v39 = v41;
        sub_250F6C468(v23, v41, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
        swift_retain();
        char v40 = _s15HealthBalanceUI26OvernightMetricsChartPointV2eeoiySbAC_ACtFZ_0((uint64_t)v13, v39);
        sub_250F6C2A4(v39, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
        sub_250F6C3F0((uint64_t)v16);
        sub_250F6C3F0((uint64_t)v19);
        sub_250F6C2A4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
        uint64_t result = sub_250F6C3F0((uint64_t)v10);
        a2 = v42;
        if (v40) {
          goto LABEL_23;
        }
        goto LABEL_8;
      }
      swift_retain();
      sub_250F6C3F0((uint64_t)v16);
      sub_250F6C3F0((uint64_t)v19);
      sub_250F6C2A4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      a2 = v42;
    }
    sub_250F6C2A4((uint64_t)v10, (uint64_t (*)(void))sub_250F6C370);
LABEL_8:
    swift_release();
  }
  uint64_t v27 = *(void *)(v21 + 176);
  if (v27)
  {
    *a2 = v27;
    return swift_retain();
  }
  else
  {
    uint64_t v28 = sub_250FCA364(v44);
    int64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      uint64_t v42 = a2;
      uint64_t v46 = MEMORY[0x263F8EE78];
      sub_250FF1EF4(0, v29, 0);
      uint64_t v45 = v28;
      double v30 = (unsigned char *)(v28 + 40);
      uint64_t v31 = v46;
      do
      {
        if (*v30 == 1)
        {
          double v32 = &qword_26B210330;
          if (qword_26B210180 != -1)
          {
            swift_once();
            double v32 = &qword_26B210330;
          }
        }
        else
        {
          double v32 = &qword_26B210328;
          if (qword_26B210178 != -1)
          {
            swift_once();
            double v32 = &qword_26B210328;
          }
        }
        MEMORY[0x2533907A0]((id)*v32);
        uint64_t v33 = sub_251038CC0();
        uint64_t v35 = v34;
        uint64_t v46 = v31;
        unint64_t v37 = *(void *)(v31 + 16);
        unint64_t v36 = *(void *)(v31 + 24);
        if (v37 >= v36 >> 1)
        {
          sub_250FF1EF4(v36 > 1, v37 + 1, 1);
          uint64_t v31 = v46;
        }
        *(void *)(v31 + 16) = v37 + 1;
        uint64_t v38 = v31 + 16 * v37;
        *(void *)(v38 + 32) = v33;
        *(void *)(v38 + 40) = v35;
        v30 += 16;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
      a2 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = MEMORY[0x263F8EE78];
    }
    sub_251038DD0();
    sub_251038DC0();
    MEMORY[0x253390A10](v31);
    sub_251038210();
    uint64_t result = sub_251038160();
    *a2 = result;
  }
  return result;
}

uint64_t sub_250F6B238(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x270FA5388](a1 - 8);
  v8[1] = *v1;
  sub_250F6C23C(v4, (uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = swift_allocObject();
  sub_250F6C468((uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))type metadata accessor for GradientOverlaidPills);
  sub_250F6B8B0(0, &qword_269B13820, MEMORY[0x263F8D488]);
  sub_251037400();
  sub_250F6C304(0, &qword_269B13828, (uint64_t (*)(uint64_t))sub_250F6B910, MEMORY[0x263EFCB18], MEMORY[0x263EFCC90]);
  sub_250F6BF8C();
  sub_250F6C000();
  sub_250F6C1F4(&qword_269B13870, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  swift_bridgeObjectRetain();
  return sub_251038C60();
}

uint64_t sub_250F6B460()
{
  unint64_t v1 = (int *)type metadata accessor for GradientOverlaidPills();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    uint64_t v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_250F26E08();
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v3 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v12 = v11 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v6(v12, 1, v5))
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
    v14(v12, v13);
    uint64_t v15 = v12 + *(int *)(v5 + 20);
    v14(v15, v13);
    sub_250F26E08();
    v14(v15 + *(int *)(v16 + 36), v13);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + v1[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250F6B830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for GradientOverlaidPills() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_250F69C68(a1, v6, a2);
}

void sub_250F6B8B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for OvernightMetricsChartPoint();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_250F6B910()
{
  if (!qword_269B13830)
  {
    sub_250F6BAA8();
    sub_250F6BC10();
    sub_250F6BD40();
    sub_250F6BE40();
    sub_250F6BF08();
    sub_251037F70();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13830);
    }
  }
}

void sub_250F6BAA8()
{
  if (!qword_269B13838)
  {
    sub_250F6BC10();
    sub_250F6BD40();
    sub_250F6BE40();
    sub_250F6BF08();
    sub_251037F70();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13838);
    }
  }
}

void sub_250F6BC10()
{
  if (!qword_269B13840)
  {
    sub_250F6BD40();
    sub_250F6BE40();
    sub_250F6BF08();
    sub_251037F70();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13840);
    }
  }
}

void sub_250F6BD40()
{
  if (!qword_269B13848)
  {
    sub_250F6BE40();
    sub_250F6BF08();
    sub_251037F70();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13848);
    }
  }
}

void sub_250F6BE40()
{
  if (!qword_269B13850)
  {
    sub_250F6BF08();
    sub_251037F70();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13850);
    }
  }
}

void sub_250F6BF08()
{
  if (!qword_269B13858)
  {
    sub_251037F70();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13858);
    }
  }
}

unint64_t sub_250F6BF8C()
{
  unint64_t result = qword_269B13860;
  if (!qword_269B13860)
  {
    sub_250F6B8B0(255, &qword_269B13820, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13860);
  }
  return result;
}

unint64_t sub_250F6C000()
{
  unint64_t result = qword_269B13868;
  if (!qword_269B13868)
  {
    sub_250F6C304(255, &qword_269B13828, (uint64_t (*)(uint64_t))sub_250F6B910, MEMORY[0x263EFCB18], MEMORY[0x263EFCC90]);
    sub_250F6BAA8();
    sub_250F6BC10();
    sub_250F6BD40();
    sub_250F6BE40();
    sub_250F6BF08();
    sub_251037F70();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13868);
  }
  return result;
}

uint64_t sub_250F6C1F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F6C23C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F6C2A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_250F6C304(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_250F6C370()
{
  if (!qword_269B13880)
  {
    sub_250F6B8B0(255, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B13880);
    }
  }
}

uint64_t sub_250F6C3F0(uint64_t a1)
{
  sub_250F6B8B0(0, (unint64_t *)&qword_26B210E00, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F6C468(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_250F6C4D4()
{
  unint64_t result = qword_269B13888;
  if (!qword_269B13888)
  {
    sub_250F6C544();
    sub_250F6C000();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13888);
  }
  return result;
}

void sub_250F6C544()
{
  if (!qword_269B13890)
  {
    sub_250F6B8B0(255, &qword_269B13820, MEMORY[0x263F8D488]);
    sub_251037400();
    sub_250F6C304(255, &qword_269B13828, (uint64_t (*)(uint64_t))sub_250F6B910, MEMORY[0x263EFCB18], MEMORY[0x263EFCC90]);
    sub_250F6BF8C();
    sub_250F6C1F4((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13890);
    }
  }
}

void *sub_250F6C66C(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v47 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v48 = (void *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_251037740();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
    uint64_t v9 = v8[5];
    unint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_251037400();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = v8[6];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    v13(&a1[v14], &a2[v14], v12);
    sub_250F26E08();
    uint64_t v18 = v17;
    v13(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
    uint64_t v19 = v8[7];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    v13(&a1[v19], &a2[v19], v12);
    uint64_t v107 = v12;
    uint64_t v108 = v18;
    uint64_t v109 = v13;
    v13(&v20[*(int *)(v18 + 36)], &v21[*(int *)(v18 + 36)], v12);
    uint64_t v22 = v8[8];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = v8[9];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = sub_2510378C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    uint64_t v29 = v8[10];
    double v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)double v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = v8[11];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = v8[12];
    uint64_t v38 = &a1[v37];
    uint64_t v39 = &a2[v37];
    uint64_t v40 = *((void *)v39 + 1);
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = v40;
    uint64_t v41 = a3[5];
    uint64_t v42 = &a1[v41];
    uint64_t v43 = &a2[v41];
    uint64_t v44 = *(void *)&a2[v41];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44)
    {
      uint64_t v45 = *((void *)v43 + 1);
      *(void *)uint64_t v42 = v44;
      *((void *)v42 + 1) = v45;
      long long v46 = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 1) = *((_OWORD *)v43 + 1);
      *((_OWORD *)v42 + 2) = v46;
      *((_OWORD *)v42 + 3) = *((_OWORD *)v43 + 3);
      *((void *)v42 + 8) = *((void *)v43 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v49 = *((_OWORD *)v43 + 3);
      *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 3) = v49;
      *((void *)v42 + 8) = *((void *)v43 + 8);
      long long v50 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v50;
    }
    uint64_t v51 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v51] = a2[v51];
    uint64_t v111 = a3;
    uint64_t v112 = a1;
    uint64_t v52 = a3[8];
    char v53 = &a1[v52];
    uint64_t v54 = &a2[v52];
    *(void *)&a1[v52] = *(void *)&a2[v52];
    double v55 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v56 = v55[5];
    long long v57 = &v53[v56];
    uint64_t v58 = &v54[v56];
    uint64_t v59 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v106 = *((void *)v59 - 1);
    uint64_t v60 = *(unsigned int (**)(char *, uint64_t, int *))(v106 + 48);
    swift_bridgeObjectRetain();
    if (v60(v58, 1, v59))
    {
      sub_250F6CD98();
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      v109(v57, v58, v107);
      uint64_t v62 = v59[5];
      uint64_t v63 = &v57[v62];
      uint64_t v64 = &v58[v62];
      v109(&v57[v62], &v58[v62], v107);
      v109(&v63[*(int *)(v108 + 36)], &v64[*(int *)(v108 + 36)], v107);
      uint64_t v65 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v63[v65[5]] = *(void *)&v64[v65[5]];
      *(void *)&v63[v65[6]] = *(void *)&v64[v65[6]];
      *(void *)&v63[v65[7]] = *(void *)&v64[v65[7]];
      uint64_t v66 = v59[6];
      double v67 = &v57[v66];
      uint64_t v68 = &v58[v66];
      *(_OWORD *)double v67 = *(_OWORD *)v68;
      v67[16] = v68[16];
      v57[v59[7]] = v58[v59[7]];
      v57[v59[8]] = v58[v59[8]];
      v57[v59[9]] = v58[v59[9]];
      uint64_t v69 = v59[10];
      uint64_t v70 = &v57[v69];
      uint64_t v71 = &v58[v69];
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = *(void *)v71;
      *((void *)v70 + 1) = v72;
      uint64_t v73 = v59[11];
      uint64_t v74 = &v57[v73];
      uint64_t v75 = &v58[v73];
      uint64_t v76 = *((void *)v75 + 1);
      *(void *)uint64_t v74 = *(void *)v75;
      *((void *)v74 + 1) = v76;
      uint64_t v110 = *(void (**)(char *, void, uint64_t, int *))(v106 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v110(v57, 0, 1, v59);
    }
    *(_OWORD *)&v53[v55[6]] = *(_OWORD *)&v54[v55[6]];
    uint64_t v77 = v55[7];
    double v78 = &v53[v77];
    uint64_t v79 = &v54[v77];
    long long v80 = *((_OWORD *)v79 + 1);
    *(_OWORD *)double v78 = *(_OWORD *)v79;
    *((_OWORD *)v78 + 1) = v80;
    *((void *)v78 + 10) = *((void *)v79 + 10);
    long long v81 = *((_OWORD *)v79 + 4);
    long long v82 = *((_OWORD *)v79 + 2);
    *((_OWORD *)v78 + 3) = *((_OWORD *)v79 + 3);
    *((_OWORD *)v78 + 4) = v81;
    *((_OWORD *)v78 + 2) = v82;
    *(void *)&v53[v55[8]] = *(void *)&v54[v55[8]];
    *(void *)&v53[v55[9]] = *(void *)&v54[v55[9]];
    uint64_t v83 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v84 = &v53[v83];
    uint64_t v85 = &v54[v83];
    uint64_t v86 = *((void *)v85 + 1);
    *(void *)uint64_t v84 = *(void *)v85;
    *((void *)v84 + 1) = v86;
    uint64_t v87 = *((void *)v85 + 3);
    *((void *)v84 + 2) = *((void *)v85 + 2);
    *((void *)v84 + 3) = v87;
    *((void *)v84 + 4) = *((void *)v85 + 4);
    *(_OWORD *)(v84 + 40) = *(_OWORD *)(v85 + 40);
    *(_OWORD *)(v84 + 56) = *(_OWORD *)(v85 + 56);
    *(_OWORD *)(v84 + 72) = *(_OWORD *)(v85 + 72);
    *(_OWORD *)(v84 + 88) = *(_OWORD *)(v85 + 88);
    *(_OWORD *)(v84 + 104) = *(_OWORD *)(v85 + 104);
    uint64_t v88 = v111[9];
    uint64_t v89 = (char *)v112 + v88;
    uint64_t v90 = &a2[v88];
    uint64_t v91 = *(void *)&a2[v88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v91)
    {
      uint64_t v92 = *((void *)v90 + 1);
      uint64_t v93 = *((void *)v90 + 2);
      *(void *)uint64_t v89 = v91;
      *((void *)v89 + 1) = v92;
      *((void *)v89 + 2) = v93;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
      *((void *)v89 + 2) = *((void *)v90 + 2);
    }
    v89[24] = v90[24];
    v89[32] = v90[32];
    uint64_t v94 = *((void *)v90 + 6);
    *((void *)v89 + 5) = *((void *)v90 + 5);
    *((void *)v89 + 6) = v94;
    v89[56] = v90[56];
    uint64_t v95 = *((void *)v90 + 9);
    *((void *)v89 + 8) = *((void *)v90 + 8);
    *((void *)v89 + 9) = v95;
    *((void *)v89 + 10) = *((void *)v90 + 10);
    long long v96 = *(_OWORD *)(v90 + 88);
    *(_OWORD *)(v89 + 104) = *(_OWORD *)(v90 + 104);
    *(_OWORD *)(v89 + 88) = v96;
    long long v97 = *(_OWORD *)(v90 + 120);
    long long v98 = *(_OWORD *)(v90 + 136);
    *(_OWORD *)(v89 + 152) = *(_OWORD *)(v90 + 152);
    *(_OWORD *)(v89 + 136) = v98;
    *(_OWORD *)(v89 + 120) = v97;
    uint64_t v99 = *((void *)v90 + 22);
    *((void *)v89 + 21) = *((void *)v90 + 21);
    *((void *)v89 + 22) = v99;
    uint64_t v101 = *((void *)v90 + 23);
    uint64_t v100 = *((void *)v90 + 24);
    v89[200] = v90[200];
    *((void *)v89 + 23) = v101;
    *((void *)v89 + 24) = v100;
    v89[201] = v90[201];
    uint64_t v102 = *((void *)v90 + 27);
    *((void *)v89 + 26) = *((void *)v90 + 26);
    *((void *)v89 + 27) = v102;
    uint64_t v103 = *((void *)v90 + 29);
    *((void *)v89 + 28) = *((void *)v90 + 28);
    *((void *)v89 + 29) = v103;
    *((void *)v89 + 30) = *((void *)v90 + 30);
    v89[248] = v90[248];
    uint64_t v104 = *((void *)v90 + 33);
    *((void *)v89 + 32) = *((void *)v90 + 32);
    *((void *)v89 + 33) = v104;
    *((void *)v89 + 34) = *((void *)v90 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v48 = v112;
  }
  swift_retain();
  return v48;
}

void sub_250F6CD98()
{
  if (!qword_26B210E00)
  {
    type metadata accessor for OvernightMetricsChartPoint();
    unint64_t v0 = sub_251039490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210E00);
    }
  }
}

uint64_t sub_250F6CDF0(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v6 = a1 + v5[5];
  uint64_t v7 = sub_251037400();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = a1 + v5[6];
  v8(v9, v7);
  sub_250F26E08();
  uint64_t v11 = v10;
  v8(v9 + *(int *)(v10 + 36), v7);
  uint64_t v12 = a1 + v5[7];
  v8(v12, v7);
  v8(v12 + *(int *)(v11 + 36), v7);
  uint64_t v13 = a1 + v5[9];
  uint64_t v14 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + a2[8];
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v17 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v8(v16, v7);
    uint64_t v18 = v16 + *(int *)(v17 + 20);
    v8(v18, v7);
    v8(v18 + *(int *)(v11 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[9]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_250F6D178(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v104 = v11;
  uint64_t v105 = v17;
  uint64_t v106 = (void (*)(char *, char *, uint64_t))v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = v7[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = v7[10];
  uint64_t v29 = (void *)(a1 + v28);
  double v30 = (void *)(a2 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = v7[11];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = v7[12];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = a3[5];
  uint64_t v109 = a1;
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = *(void *)(a2 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v43)
  {
    uint64_t v44 = *(void *)(v42 + 8);
    *(void *)uint64_t v41 = v43;
    *(void *)(v41 + 8) = v44;
    long long v45 = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 16) = *(_OWORD *)(v42 + 16);
    *(_OWORD *)(v41 + 32) = v45;
    *(_OWORD *)(v41 + 48) = *(_OWORD *)(v42 + 48);
    *(void *)(v41 + 64) = *(void *)(v42 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v46 = *(_OWORD *)(v42 + 48);
    *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 48) = v46;
    *(void *)(v41 + 64) = *(void *)(v42 + 64);
    long long v47 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v47;
  }
  uint64_t v48 = a3[7];
  *(unsigned char *)(v109 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(v109 + v48) = *(unsigned char *)(a2 + v48);
  uint64_t v108 = a3;
  uint64_t v49 = a3[8];
  uint64_t v50 = v109 + v49;
  uint64_t v51 = a2 + v49;
  *(void *)(v109 + v49) = *(void *)(a2 + v49);
  uint64_t v52 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v53 = v52[5];
  uint64_t v54 = (char *)(v50 + v53);
  double v55 = (char *)(v51 + v53);
  uint64_t v56 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v103 = *((void *)v56 - 1);
  long long v57 = *(unsigned int (**)(char *, uint64_t, int *))(v103 + 48);
  swift_bridgeObjectRetain();
  if (v57(v55, 1, v56))
  {
    sub_250F6CD98();
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    v106(v54, v55, v104);
    uint64_t v59 = v56[5];
    uint64_t v60 = &v54[v59];
    uint64_t v61 = &v55[v59];
    v106(&v54[v59], &v55[v59], v104);
    v106(&v60[*(int *)(v105 + 36)], &v61[*(int *)(v105 + 36)], v104);
    uint64_t v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v60[v62[5]] = *(void *)&v61[v62[5]];
    *(void *)&v60[v62[6]] = *(void *)&v61[v62[6]];
    *(void *)&v60[v62[7]] = *(void *)&v61[v62[7]];
    uint64_t v63 = v56[6];
    uint64_t v64 = &v54[v63];
    uint64_t v65 = &v55[v63];
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    v64[16] = v65[16];
    v54[v56[7]] = v55[v56[7]];
    v54[v56[8]] = v55[v56[8]];
    v54[v56[9]] = v55[v56[9]];
    uint64_t v66 = v56[10];
    double v67 = &v54[v66];
    uint64_t v68 = &v55[v66];
    uint64_t v69 = *((void *)v68 + 1);
    *(void *)double v67 = *(void *)v68;
    *((void *)v67 + 1) = v69;
    uint64_t v70 = v56[11];
    uint64_t v71 = &v54[v70];
    uint64_t v72 = &v55[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *(void *)uint64_t v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    uint64_t v107 = *(void (**)(char *, void, uint64_t, int *))(v103 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v107(v54, 0, 1, v56);
  }
  *(_OWORD *)(v50 + v52[6]) = *(_OWORD *)(v51 + v52[6]);
  uint64_t v74 = v52[7];
  uint64_t v75 = v50 + v74;
  uint64_t v76 = v51 + v74;
  long long v77 = *(_OWORD *)(v76 + 16);
  *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
  *(_OWORD *)(v75 + 16) = v77;
  *(void *)(v75 + 80) = *(void *)(v76 + 80);
  long long v78 = *(_OWORD *)(v76 + 64);
  long long v79 = *(_OWORD *)(v76 + 32);
  *(_OWORD *)(v75 + 48) = *(_OWORD *)(v76 + 48);
  *(_OWORD *)(v75 + 64) = v78;
  *(_OWORD *)(v75 + 32) = v79;
  *(void *)(v50 + v52[8]) = *(void *)(v51 + v52[8]);
  *(void *)(v50 + v52[9]) = *(void *)(v51 + v52[9]);
  uint64_t v80 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v81 = v50 + v80;
  uint64_t v82 = v51 + v80;
  uint64_t v83 = *(void *)(v82 + 8);
  *(void *)uint64_t v81 = *(void *)v82;
  *(void *)(v81 + 8) = v83;
  uint64_t v84 = *(void *)(v82 + 24);
  *(void *)(v81 + 16) = *(void *)(v82 + 16);
  *(void *)(v81 + 24) = v84;
  *(void *)(v81 + 32) = *(void *)(v82 + 32);
  *(_OWORD *)(v81 + 40) = *(_OWORD *)(v82 + 40);
  *(_OWORD *)(v81 + 56) = *(_OWORD *)(v82 + 56);
  *(_OWORD *)(v81 + 72) = *(_OWORD *)(v82 + 72);
  *(_OWORD *)(v81 + 88) = *(_OWORD *)(v82 + 88);
  *(_OWORD *)(v81 + 104) = *(_OWORD *)(v82 + 104);
  uint64_t v85 = v108[9];
  uint64_t v86 = v109 + v85;
  uint64_t v87 = a2 + v85;
  uint64_t v88 = *(void *)(a2 + v85);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v88)
  {
    uint64_t v89 = *(void *)(v87 + 8);
    uint64_t v90 = *(void *)(v87 + 16);
    *(void *)uint64_t v86 = v88;
    *(void *)(v86 + 8) = v89;
    *(void *)(v86 + 16) = v90;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
    *(void *)(v86 + 16) = *(void *)(v87 + 16);
  }
  *(unsigned char *)(v86 + 24) = *(unsigned char *)(v87 + 24);
  *(unsigned char *)(v86 + 32) = *(unsigned char *)(v87 + 32);
  uint64_t v91 = *(void *)(v87 + 48);
  *(void *)(v86 + 40) = *(void *)(v87 + 40);
  *(void *)(v86 + 48) = v91;
  *(unsigned char *)(v86 + 56) = *(unsigned char *)(v87 + 56);
  uint64_t v92 = *(void *)(v87 + 72);
  *(void *)(v86 + 64) = *(void *)(v87 + 64);
  *(void *)(v86 + 72) = v92;
  *(void *)(v86 + 80) = *(void *)(v87 + 80);
  long long v93 = *(_OWORD *)(v87 + 88);
  *(_OWORD *)(v86 + 104) = *(_OWORD *)(v87 + 104);
  *(_OWORD *)(v86 + 88) = v93;
  long long v94 = *(_OWORD *)(v87 + 120);
  long long v95 = *(_OWORD *)(v87 + 136);
  *(_OWORD *)(v86 + 152) = *(_OWORD *)(v87 + 152);
  *(_OWORD *)(v86 + 136) = v95;
  *(_OWORD *)(v86 + 120) = v94;
  uint64_t v96 = *(void *)(v87 + 176);
  *(void *)(v86 + 168) = *(void *)(v87 + 168);
  *(void *)(v86 + 176) = v96;
  uint64_t v98 = *(void *)(v87 + 184);
  uint64_t v97 = *(void *)(v87 + 192);
  *(unsigned char *)(v86 + 200) = *(unsigned char *)(v87 + 200);
  *(void *)(v86 + 184) = v98;
  *(void *)(v86 + 192) = v97;
  *(unsigned char *)(v86 + 201) = *(unsigned char *)(v87 + 201);
  uint64_t v99 = *(void *)(v87 + 216);
  *(void *)(v86 + 208) = *(void *)(v87 + 208);
  *(void *)(v86 + 216) = v99;
  uint64_t v100 = *(void *)(v87 + 232);
  *(void *)(v86 + 224) = *(void *)(v87 + 224);
  *(void *)(v86 + 232) = v100;
  *(void *)(v86 + 240) = *(void *)(v87 + 240);
  *(unsigned char *)(v86 + 248) = *(unsigned char *)(v87 + 248);
  uint64_t v101 = *(void *)(v87 + 264);
  *(void *)(v86 + 256) = *(void *)(v87 + 256);
  *(void *)(v86 + 264) = v101;
  *(void *)(v86 + 272) = *(void *)(v87 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v109;
}

uint64_t sub_250F6D85C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v111 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 24);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v112 = v17;
  uint64_t v109 = v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  char v24 = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = v24;
  uint64_t v25 = v7[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  uint64_t v29 = v7[10];
  double v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *double v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = v7[11];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  void *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v7[12];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[5];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = a2 + v38;
  uint64_t v41 = *(void *)(a2 + v38);
  if (*(void *)(a1 + v38))
  {
    if (v41)
    {
      void *v39 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[1] = *(void *)(v40 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[2] = *(void *)(v40 + 16);
      v39[3] = *(void *)(v40 + 24);
      v39[4] = *(void *)(v40 + 32);
      v39[5] = *(void *)(v40 + 40);
      v39[6] = *(void *)(v40 + 48);
      v39[7] = *(void *)(v40 + 56);
      v39[8] = *(void *)(v40 + 64);
    }
    else
    {
      sub_250F21DD0(a1 + v38);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      long long v43 = *(_OWORD *)(v40 + 32);
      long long v42 = *(_OWORD *)(v40 + 48);
      long long v44 = *(_OWORD *)(v40 + 16);
      v39[8] = *(void *)(v40 + 64);
      *((_OWORD *)v39 + 2) = v43;
      *((_OWORD *)v39 + 3) = v42;
      *((_OWORD *)v39 + 1) = v44;
    }
  }
  else if (v41)
  {
    void *v39 = v41;
    v39[1] = *(void *)(v40 + 8);
    v39[2] = *(void *)(v40 + 16);
    v39[3] = *(void *)(v40 + 24);
    v39[4] = *(void *)(v40 + 32);
    v39[5] = *(void *)(v40 + 40);
    v39[6] = *(void *)(v40 + 48);
    v39[7] = *(void *)(v40 + 56);
    v39[8] = *(void *)(v40 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    long long v45 = *(_OWORD *)(v40 + 16);
    long long v46 = *(_OWORD *)(v40 + 32);
    long long v47 = *(_OWORD *)(v40 + 48);
    v39[8] = *(void *)(v40 + 64);
    *((_OWORD *)v39 + 2) = v46;
    *((_OWORD *)v39 + 3) = v47;
    *((_OWORD *)v39 + 1) = v45;
  }
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v115 = a3;
  uint64_t v116 = a1;
  uint64_t v48 = a3[8];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  *(void *)(a1 + v48) = *(void *)(a2 + v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v113 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v114 = v50;
  uint64_t v51 = v113[5];
  uint64_t v52 = (char *)(v49 + v51);
  uint64_t v53 = (char *)(v50 + v51);
  uint64_t v54 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v110 = *((void *)v54 - 1);
  double v55 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v110 + 48);
  int v56 = v55(v52, 1, v54);
  int v57 = v55(v53, 1, v54);
  if (v56)
  {
    if (!v57)
    {
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
      v58(v52, v53, v11);
      uint64_t v59 = v54[5];
      uint64_t v60 = &v52[v59];
      uint64_t v61 = &v53[v59];
      v58(&v52[v59], &v53[v59], v11);
      v58(&v60[*(int *)(v112 + 36)], &v61[*(int *)(v112 + 36)], v11);
      uint64_t v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v60[v62[5]] = *(void *)&v61[v62[5]];
      *(void *)&v60[v62[6]] = *(void *)&v61[v62[6]];
      *(void *)&v60[v62[7]] = *(void *)&v61[v62[7]];
      uint64_t v63 = v54[6];
      uint64_t v64 = &v52[v63];
      uint64_t v65 = &v53[v63];
      char v66 = v65[16];
      *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
      v64[16] = v66;
      v52[v54[7]] = v53[v54[7]];
      v52[v54[8]] = v53[v54[8]];
      v52[v54[9]] = v53[v54[9]];
      uint64_t v67 = v54[10];
      uint64_t v68 = &v52[v67];
      uint64_t v69 = &v53[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      uint64_t v70 = v54[11];
      uint64_t v71 = &v52[v70];
      uint64_t v72 = &v53[v70];
      *(void *)uint64_t v71 = *(void *)v72;
      *((void *)v71 + 1) = *((void *)v72 + 1);
      uint64_t v73 = *(void (**)(unsigned char *, void, uint64_t, int *))(v110 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73(v52, 0, 1, v54);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v57)
  {
    sub_250F6FB80((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F6CD98();
    memcpy(v52, v53, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_14;
  }
  v109((uint64_t)v52, (uint64_t)v53, v11);
  uint64_t v90 = v54[5];
  uint64_t v91 = &v52[v90];
  uint64_t v92 = &v53[v90];
  v109((uint64_t)&v52[v90], (uint64_t)&v53[v90], v11);
  v109((uint64_t)&v91[*(int *)(v112 + 36)], (uint64_t)&v92[*(int *)(v112 + 36)], v11);
  long long v93 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v91[v93[5]] = *(void *)&v92[v93[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v91[v93[6]] = *(void *)&v92[v93[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v91[v93[7]] = *(void *)&v92[v93[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = v54[6];
  long long v95 = &v52[v94];
  uint64_t v96 = &v53[v94];
  long long v97 = *(_OWORD *)v96;
  v95[16] = v96[16];
  *(_OWORD *)long long v95 = v97;
  v52[v54[7]] = v53[v54[7]];
  v52[v54[8]] = v53[v54[8]];
  v52[v54[9]] = v53[v54[9]];
  uint64_t v98 = v54[10];
  uint64_t v99 = &v52[v98];
  uint64_t v100 = &v53[v98];
  *(void *)uint64_t v99 = *(void *)v100;
  *((void *)v99 + 1) = *((void *)v100 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v101 = v54[11];
  uint64_t v102 = &v52[v101];
  uint64_t v103 = &v53[v101];
  *(void *)uint64_t v102 = *(void *)v103;
  *((void *)v102 + 1) = *((void *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v75 = v113[6];
  uint64_t v76 = (void *)(v49 + v75);
  long long v77 = (void *)(v114 + v75);
  void *v76 = *v77;
  v76[1] = v77[1];
  uint64_t v78 = v113[7];
  uint64_t v79 = v49 + v78;
  uint64_t v80 = v114 + v78;
  *(void *)uint64_t v79 = *(void *)v80;
  uint64_t v81 = *(void *)(v80 + 8);
  *(unsigned char *)(v79 + 16) = *(unsigned char *)(v80 + 16);
  *(void *)(v79 + 8) = v81;
  *(void *)(v79 + 24) = *(void *)(v80 + 24);
  *(void *)(v79 + 32) = *(void *)(v80 + 32);
  *(void *)(v79 + 40) = *(void *)(v80 + 40);
  *(void *)(v79 + 48) = *(void *)(v80 + 48);
  *(void *)(v79 + 56) = *(void *)(v80 + 56);
  *(void *)(v79 + 64) = *(void *)(v80 + 64);
  *(void *)(v79 + 72) = *(void *)(v80 + 72);
  *(void *)(v79 + 80) = *(void *)(v80 + 80);
  *(void *)(v49 + v113[8]) = *(void *)(v114 + v113[8]);
  *(void *)(v49 + v113[9]) = *(void *)(v114 + v113[9]);
  uint64_t v82 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v83 = (void *)(v49 + v82);
  uint64_t v84 = (void *)(v114 + v82);
  *(void *)(v49 + v82) = *(void *)(v114 + v82);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[1] = v84[1];
  v83[2] = v84[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[3] = v84[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[4] = v84[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[5] = v84[5];
  v83[6] = v84[6];
  v83[7] = v84[7];
  v83[8] = v84[8];
  v83[9] = v84[9];
  v83[10] = v84[10];
  v83[11] = v84[11];
  v83[12] = v84[12];
  v83[13] = v84[13];
  v83[14] = v84[14];
  uint64_t v85 = v115[9];
  uint64_t v86 = v116 + v85;
  uint64_t v87 = (long long *)(a2 + v85);
  uint64_t v88 = *(void *)(a2 + v85);
  if (*(void *)(v116 + v85))
  {
    if (v88)
    {
      *(void *)uint64_t v86 = v88;
      swift_retain();
      swift_release();
      *(void *)(v86 + 8) = *((void *)v87 + 1);
      swift_retain();
      swift_release();
      *(void *)(v86 + 16) = *((void *)v87 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80(v116 + v85);
      uint64_t v89 = *((void *)v87 + 2);
      *(_OWORD *)uint64_t v86 = *v87;
      *(void *)(v86 + 16) = v89;
    }
  }
  else if (v88)
  {
    *(void *)uint64_t v86 = v88;
    *(void *)(v86 + 8) = *((void *)v87 + 1);
    *(void *)(v86 + 16) = *((void *)v87 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v104 = *v87;
    *(void *)(v86 + 16) = *((void *)v87 + 2);
    *(_OWORD *)uint64_t v86 = v104;
  }
  *(unsigned char *)(v86 + 24) = *((unsigned char *)v87 + 24);
  *(unsigned char *)(v86 + 32) = *((unsigned char *)v87 + 32);
  *(void *)(v86 + 40) = *((void *)v87 + 5);
  swift_retain();
  swift_release();
  uint64_t v105 = *((void *)v87 + 6);
  *(unsigned char *)(v86 + 56) = *((unsigned char *)v87 + 56);
  *(void *)(v86 + 48) = v105;
  *(void *)(v86 + 64) = *((void *)v87 + 8);
  *(void *)(v86 + 72) = *((void *)v87 + 9);
  swift_retain();
  swift_release();
  *(void *)(v86 + 80) = *((void *)v87 + 10);
  swift_retain();
  swift_release();
  *(void *)(v86 + 88) = *((void *)v87 + 11);
  uint64_t v106 = *((void *)v87 + 12);
  *(unsigned char *)(v86 + 104) = *((unsigned char *)v87 + 104);
  *(void *)(v86 + 96) = v106;
  *(void *)(v86 + 112) = *((void *)v87 + 14);
  *(void *)(v86 + 120) = *((void *)v87 + 15);
  *(void *)(v86 + 128) = *((void *)v87 + 16);
  *(void *)(v86 + 136) = *((void *)v87 + 17);
  *(void *)(v86 + 144) = *((void *)v87 + 18);
  *(void *)(v86 + 152) = *((void *)v87 + 19);
  *(void *)(v86 + 160) = *((void *)v87 + 20);
  *(void *)(v86 + 168) = *((void *)v87 + 21);
  *(void *)(v86 + 176) = *((void *)v87 + 22);
  swift_retain();
  swift_release();
  *(void *)(v86 + 184) = *((void *)v87 + 23);
  swift_retain();
  swift_release();
  uint64_t v107 = *((void *)v87 + 24);
  *(unsigned char *)(v86 + 200) = *((unsigned char *)v87 + 200);
  *(void *)(v86 + 192) = v107;
  *(unsigned char *)(v86 + 201) = *((unsigned char *)v87 + 201);
  *(void *)(v86 + 208) = *((void *)v87 + 26);
  swift_retain();
  swift_release();
  *(void *)(v86 + 216) = *((void *)v87 + 27);
  swift_retain();
  swift_release();
  *(void *)(v86 + 224) = *((void *)v87 + 28);
  swift_retain();
  swift_release();
  *(void *)(v86 + 232) = *((void *)v87 + 29);
  swift_retain();
  swift_release();
  *(void *)(v86 + 240) = *((void *)v87 + 30);
  swift_retain();
  swift_release();
  *(unsigned char *)(v86 + 248) = *((unsigned char *)v87 + 248);
  *(void *)(v86 + 256) = *((void *)v87 + 32);
  swift_retain();
  swift_release();
  *(void *)(v86 + 264) = *((void *)v87 + 33);
  swift_retain();
  swift_release();
  *(void *)(v86 + 272) = *((void *)v87 + 34);
  return v116;
}

uint64_t sub_250F6E3BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v64 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = v7[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  *(_OWORD *)(a1 + v7[10]) = *(_OWORD *)(a2 + v7[10]);
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
  uint64_t v28 = a3[5];
  uint64_t v29 = a3[6];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(void *)(v30 + 64) = *(void *)(v31 + 64);
  long long v32 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v32;
  long long v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v34 = a3[8];
  char v66 = a3;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  uint64_t v65 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v37 = v65[5];
  uint64_t v38 = (char *)(v35 + v37);
  uint64_t v39 = (char *)(v36 + v37);
  uint64_t v40 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v63 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v63 + 48))(v39, 1, v40))
  {
    sub_250F6CD98();
    memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v38, (uint64_t)v39, v11);
    uint64_t v42 = v40[5];
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v12;
    long long v43 = &v38[v42];
    long long v44 = &v39[v42];
    v62(&v38[v42], &v39[v42], v11);
    v62(&v43[*(int *)(v64 + 36)], &v44[*(int *)(v64 + 36)], v11);
    long long v45 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v43[v45[5]] = *(void *)&v44[v45[5]];
    *(void *)&v43[v45[6]] = *(void *)&v44[v45[6]];
    *(void *)&v43[v45[7]] = *(void *)&v44[v45[7]];
    uint64_t v46 = v40[6];
    long long v47 = &v38[v46];
    uint64_t v48 = &v39[v46];
    *(_OWORD *)long long v47 = *(_OWORD *)v48;
    v47[16] = v48[16];
    v38[v40[7]] = v39[v40[7]];
    v38[v40[8]] = v39[v40[8]];
    v38[v40[9]] = v39[v40[9]];
    *(_OWORD *)&v38[v40[10]] = *(_OWORD *)&v39[v40[10]];
    *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v38, 0, 1, v40);
  }
  *(_OWORD *)(v35 + v65[6]) = *(_OWORD *)(v36 + v65[6]);
  uint64_t v49 = v65[7];
  uint64_t v50 = v35 + v49;
  uint64_t v51 = v36 + v49;
  long long v52 = *(_OWORD *)(v51 + 16);
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  *(_OWORD *)(v50 + 16) = v52;
  *(void *)(v50 + 80) = *(void *)(v51 + 80);
  long long v53 = *(_OWORD *)(v51 + 64);
  long long v54 = *(_OWORD *)(v51 + 32);
  *(_OWORD *)(v50 + 48) = *(_OWORD *)(v51 + 48);
  *(_OWORD *)(v50 + 64) = v53;
  *(_OWORD *)(v50 + 32) = v54;
  *(void *)(v35 + v65[8]) = *(void *)(v36 + v65[8]);
  *(void *)(v35 + v65[9]) = *(void *)(v36 + v65[9]);
  uint64_t v55 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v56 = v35 + v55;
  uint64_t v57 = v36 + v55;
  long long v58 = *(_OWORD *)(v57 + 80);
  *(_OWORD *)(v56 + 64) = *(_OWORD *)(v57 + 64);
  *(_OWORD *)(v56 + 80) = v58;
  *(_OWORD *)(v56 + 96) = *(_OWORD *)(v57 + 96);
  *(void *)(v56 + 112) = *(void *)(v57 + 112);
  long long v59 = *(_OWORD *)(v57 + 16);
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *(_OWORD *)(v56 + 16) = v59;
  long long v60 = *(_OWORD *)(v57 + 48);
  *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
  *(_OWORD *)(v56 + 48) = v60;
  memcpy((void *)(a1 + v66[9]), (const void *)(a2 + v66[9]), 0x118uLL);
  return a1;
}

uint64_t sub_250F6E870(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v100 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 40);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v101 = v17;
  uint64_t v98 = v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = v7[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = v7[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v7[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v7[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  void *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[5];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  if (*(void *)(a1 + v43))
  {
    if (*(void *)v45)
    {
      *(void *)uint64_t v44 = *(void *)v45;
      swift_bridgeObjectRelease();
      *(void *)(v44 + 8) = *(void *)(v45 + 8);
      swift_bridgeObjectRelease();
      long long v46 = *(_OWORD *)(v45 + 32);
      *(_OWORD *)(v44 + 16) = *(_OWORD *)(v45 + 16);
      *(_OWORD *)(v44 + 32) = v46;
      *(_OWORD *)(v44 + 48) = *(_OWORD *)(v45 + 48);
      *(void *)(v44 + 64) = *(void *)(v45 + 64);
      goto LABEL_6;
    }
    sub_250F21DD0(v44);
  }
  long long v47 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v47;
  *(void *)(v44 + 64) = *(void *)(v45 + 64);
  long long v48 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v48;
LABEL_6:
  uint64_t v49 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v49) = *(unsigned char *)(a2 + v49);
  uint64_t v105 = a3;
  uint64_t v106 = a1;
  uint64_t v50 = a3[8];
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = a2 + v50;
  *uint64_t v51 = *(void *)(a2 + v50);
  swift_bridgeObjectRelease();
  long long v104 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v53 = v104[5];
  long long v54 = (char *)v51 + v53;
  uint64_t v102 = v52;
  uint64_t v55 = (char *)(v52 + v53);
  uint64_t v56 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v99 = *((void *)v56 - 1);
  uint64_t v57 = *(uint64_t (**)(char *, uint64_t, int *))(v99 + 48);
  int v58 = v57(v54, 1, v56);
  __src = v55;
  int v59 = v57(v55, 1, v56);
  if (v58)
  {
    if (!v59)
    {
      long long v60 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
      v60(v54, v55, v11);
      uint64_t v61 = v56[5];
      uint64_t v62 = &v54[v61];
      uint64_t v63 = &v55[v61];
      v60(&v54[v61], &v55[v61], v11);
      v60(&v62[*(int *)(v101 + 36)], &v63[*(int *)(v101 + 36)], v11);
      uint64_t v64 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v62[v64[5]] = *(void *)&v63[v64[5]];
      *(void *)&v62[v64[6]] = *(void *)&v63[v64[6]];
      *(void *)&v62[v64[7]] = *(void *)&v63[v64[7]];
      uint64_t v65 = v56[6];
      char v66 = &v54[v65];
      uint64_t v67 = &v55[v65];
      *(_OWORD *)char v66 = *(_OWORD *)v67;
      v66[16] = v67[16];
      v54[v56[7]] = v55[v56[7]];
      v54[v56[8]] = v55[v56[8]];
      v54[v56[9]] = v55[v56[9]];
      *(_OWORD *)&v54[v56[10]] = *(_OWORD *)&v55[v56[10]];
      *(_OWORD *)&v54[v56[11]] = *(_OWORD *)&v55[v56[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v99 + 56))(v54, 0, 1, v56);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v59)
  {
    sub_250F6FB80((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_11:
    sub_250F6CD98();
    memcpy(v54, v55, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_12;
  }
  v98((uint64_t)v54, (uint64_t)v55, v11);
  uint64_t v81 = v56[5];
  uint64_t v82 = &v54[v81];
  uint64_t v83 = &v55[v81];
  v98((uint64_t)&v54[v81], (uint64_t)&__src[v81], v11);
  v98((uint64_t)&v82[*(int *)(v101 + 36)], (uint64_t)&v83[*(int *)(v101 + 36)], v11);
  uint64_t v84 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v82[v84[5]] = *(void *)&v83[v84[5]];
  swift_bridgeObjectRelease();
  *(void *)&v82[v84[6]] = *(void *)&v83[v84[6]];
  swift_bridgeObjectRelease();
  *(void *)&v82[v84[7]] = *(void *)&v83[v84[7]];
  swift_bridgeObjectRelease();
  uint64_t v85 = v56[6];
  uint64_t v86 = &v54[v85];
  uint64_t v87 = &__src[v85];
  *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
  v86[16] = v87[16];
  v54[v56[7]] = __src[v56[7]];
  v54[v56[8]] = __src[v56[8]];
  v54[v56[9]] = __src[v56[9]];
  uint64_t v88 = v56[10];
  uint64_t v89 = &v54[v88];
  uint64_t v90 = (uint64_t *)&__src[v88];
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  char *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = v56[11];
  uint64_t v94 = &v54[v93];
  long long v95 = (uint64_t *)&__src[v93];
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  *uint64_t v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
LABEL_12:
  *(_OWORD *)((char *)v51 + v104[6]) = *(_OWORD *)(v102 + v104[6]);
  uint64_t v69 = v104[7];
  uint64_t v70 = (char *)v51 + v69;
  uint64_t v71 = v102 + v69;
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = *(void *)(v71 + 8);
  v70[16] = *(unsigned char *)(v71 + 16);
  *(_OWORD *)(v70 + 24) = *(_OWORD *)(v71 + 24);
  *(_OWORD *)(v70 + 40) = *(_OWORD *)(v71 + 40);
  *(_OWORD *)(v70 + 56) = *(_OWORD *)(v71 + 56);
  *(_OWORD *)(v70 + 72) = *(_OWORD *)(v71 + 72);
  *(void *)((char *)v51 + v104[8]) = *(void *)(v102 + v104[8]);
  *(void *)((char *)v51 + v104[9]) = *(void *)(v102 + v104[9]);
  uint64_t v72 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v73 = (char *)v51 + v72;
  uint64_t v74 = v102 + v72;
  *(void *)((char *)v51 + v72) = *(void *)(v102 + v72);
  swift_bridgeObjectRelease();
  *((void *)v73 + 1) = *(void *)(v74 + 8);
  *((void *)v73 + 2) = *(void *)(v74 + 16);
  swift_bridgeObjectRelease();
  *((void *)v73 + 3) = *(void *)(v74 + 24);
  swift_bridgeObjectRelease();
  *((void *)v73 + 4) = *(void *)(v74 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
  *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
  *(_OWORD *)(v73 + 72) = *(_OWORD *)(v74 + 72);
  *(_OWORD *)(v73 + 88) = *(_OWORD *)(v74 + 88);
  *(_OWORD *)(v73 + 104) = *(_OWORD *)(v74 + 104);
  uint64_t v75 = v105[9];
  uint64_t v76 = v106 + v75;
  uint64_t v77 = a2 + v75;
  if (!*(void *)(v106 + v75))
  {
LABEL_16:
    *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
    *(void *)(v76 + 16) = *(void *)(v77 + 16);
    goto LABEL_17;
  }
  if (!*(void *)v77)
  {
    sub_250F27E80(v76);
    goto LABEL_16;
  }
  *(void *)uint64_t v76 = *(void *)v77;
  swift_release();
  *(void *)(v76 + 8) = *(void *)(v77 + 8);
  swift_release();
  *(void *)(v76 + 16) = *(void *)(v77 + 16);
  swift_release();
LABEL_17:
  *(unsigned char *)(v76 + 24) = *(unsigned char *)(v77 + 24);
  *(unsigned char *)(v76 + 32) = *(unsigned char *)(v77 + 32);
  *(void *)(v76 + 40) = *(void *)(v77 + 40);
  swift_release();
  *(void *)(v76 + 48) = *(void *)(v77 + 48);
  *(unsigned char *)(v76 + 56) = *(unsigned char *)(v77 + 56);
  *(void *)(v76 + 64) = *(void *)(v77 + 64);
  *(void *)(v76 + 72) = *(void *)(v77 + 72);
  swift_release();
  *(void *)(v76 + 80) = *(void *)(v77 + 80);
  swift_release();
  *(void *)(v76 + 88) = *(void *)(v77 + 88);
  *(void *)(v76 + 96) = *(void *)(v77 + 96);
  *(unsigned char *)(v76 + 104) = *(unsigned char *)(v77 + 104);
  long long v78 = *(_OWORD *)(v77 + 128);
  *(_OWORD *)(v76 + 112) = *(_OWORD *)(v77 + 112);
  *(_OWORD *)(v76 + 128) = v78;
  long long v79 = *(_OWORD *)(v77 + 160);
  *(_OWORD *)(v76 + 144) = *(_OWORD *)(v77 + 144);
  *(_OWORD *)(v76 + 160) = v79;
  *(void *)(v76 + 176) = *(void *)(v77 + 176);
  swift_release();
  *(void *)(v76 + 184) = *(void *)(v77 + 184);
  swift_release();
  *(void *)(v76 + 192) = *(void *)(v77 + 192);
  *(unsigned char *)(v76 + 200) = *(unsigned char *)(v77 + 200);
  *(unsigned char *)(v76 + 201) = *(unsigned char *)(v77 + 201);
  *(void *)(v76 + 208) = *(void *)(v77 + 208);
  swift_release();
  *(void *)(v76 + 216) = *(void *)(v77 + 216);
  swift_release();
  *(void *)(v76 + 224) = *(void *)(v77 + 224);
  swift_release();
  *(void *)(v76 + 232) = *(void *)(v77 + 232);
  swift_release();
  *(void *)(v76 + 240) = *(void *)(v77 + 240);
  swift_release();
  *(unsigned char *)(v76 + 248) = *(unsigned char *)(v77 + 248);
  *(void *)(v76 + 256) = *(void *)(v77 + 256);
  swift_release();
  *(void *)(v76 + 264) = *(void *)(v77 + 264);
  swift_release();
  *(void *)(v76 + 272) = *(void *)(v77 + 272);
  return v106;
}

uint64_t sub_250F6F110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F6F124);
}

uint64_t sub_250F6F124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36) + 40);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_250F6F23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F6F250);
}

uint64_t sub_250F6F250(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 36) + 40) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 32);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for OvernightMetricsChartPointBackground()
{
  uint64_t result = qword_269B13898;
  if (!qword_269B13898) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F6F3B0()
{
  uint64_t result = type metadata accessor for IndividualOvernightMetricChartPoint(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_250F6F494()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F6F4B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsChartPointBackground();
  memcpy(__dst, (const void *)(v1 + *(int *)(v3 + 36)), 0x118uLL);
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8))
  {
    uint64_t v9 = sub_251038A90();
  }
  else
  {
    uint64_t v5 = __dst[9];
    uint64_t v4 = __dst[10];
    sub_250F2A3B4(__dst);
    if (sub_2510378A0())
    {
      uint64_t v9 = v4;
      swift_retain();
      sub_250F2E048(__dst);
    }
    else
    {
      swift_retain();
      sub_250F2E048(__dst);
      uint64_t v9 = v5;
    }
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_251038D00();
  sub_251038150();
  double v6 = sub_250F6F620();
  uint64_t result = sub_251038D60();
  char v8 = *(unsigned char *)(v1 + *(int *)(v3 + 24));
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  *(double *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 72) = v8;
  return result;
}

double sub_250F6F620()
{
  uint64_t v1 = v0;
  double v2 = 0.0;
  if (!sub_250F6F810())
  {
    uint64_t v3 = type metadata accessor for OvernightMetricsChartPointBackground();
    uint64_t v4 = v0 + *(int *)(v3 + 20);
    uint64_t v5 = *(void *)v4;
    if (*(void *)v4)
    {
      double v2 = *(double *)(v4 + 24);
      double v6 = *(double *)(v4 + 40);
      uint64_t v7 = *(void *)v4;
      uint64_t v8 = *(void *)(v4 + 8);
    }
    else
    {
      if (qword_269B12BB8 != -1) {
        swift_once();
      }
      uint64_t v9 = qword_269B1AD38;
      swift_getKeyPath();
      sub_250F6FAD4((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
      sub_251037530();
      swift_release();
      uint64_t v7 = *(void *)(v9 + 16);
      uint64_t v8 = *(void *)(v9 + 24);
      double v2 = *(double *)(v9 + 40);
      double v6 = *(double *)(v9 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    int v10 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 24));
    sub_250F22234(v5);
    if (sub_250FFA7EC(v1, v7))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = sub_250FFA7EC(v1, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      double v12 = 0.26;
      if (v10) {
        double v12 = 0.0;
      }
      if (v11) {
        return v6;
      }
      else {
        return v12;
      }
    }
  }
  return v2;
}

BOOL sub_250F6F810()
{
  uint64_t v1 = type metadata accessor for OvernightMetricsChartPointBackground();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *(unsigned __int8 *)(v0 + *(int *)(v4 + 28));
  sub_250F6FB1C(v0, (uint64_t)v3);
  if (v5 == 1)
  {
    double v6 = (uint64_t *)&v3[*(int *)(v1 + 20)];
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    double v10 = *((double *)v6 + 4);
    uint64_t v9 = v6[5];
    v22[2] = v6[3];
    v22[3] = v9;
    uint64_t v11 = v6[7];
    void v22[4] = v6[6];
    if (v8)
    {
      double v12 = v10;
      uint64_t v13 = v8;
      uint64_t v14 = v7;
    }
    else
    {
      v22[1] = v11;
      if (qword_269B12BB8 != -1) {
        swift_once();
      }
      uint64_t v16 = qword_269B1AD38;
      swift_getKeyPath();
      v22[5] = v16;
      sub_250F6FAD4((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
      sub_251037530();
      swift_release();
      uint64_t v13 = *(void *)(v16 + 16);
      uint64_t v14 = *(void *)(v16 + 24);
      double v12 = *(double *)(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v17 = *(int *)(v1 + 32);
    uint64_t v18 = &v3[*(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32)];
    if (v18[8])
    {
      sub_250F22234(v8);
    }
    else
    {
      double v19 = *(double *)v18;
      sub_250F22234(v8);
      if ((sub_250FFA7EC((uint64_t)v3, v13) & 1) == 0 || v12 >= 1.0)
      {
        uint64_t v20 = type metadata accessor for OvernightMetricsChartLayout(0);
        if (*(void *)(v14 + 16) >= 2uLL)
        {
          BOOL v15 = sub_250FFAA00(*(void *)&v3[v17 + 32 + *(int *)(v20 + 20)], v19);
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
    }
    swift_bridgeObjectRelease();
    BOOL v15 = 0;
    goto LABEL_15;
  }
  BOOL v15 = 0;
LABEL_16:
  sub_250F6FB80((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointBackground);
  return v15;
}

uint64_t sub_250F6FAD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F6FB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPointBackground();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F6FB80(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F6FBE0()
{
  return sub_250F6FFB4(&qword_269B138A8, (void (*)(uint64_t))sub_250F6FC3C, (void (*)(void))sub_250F6FE5C, (void (*)(void))sub_250F70118);
}

void sub_250F6FC3C()
{
  if (!qword_269B138B0)
  {
    sub_250F6FD1C(255, &qword_269B138B8, sub_250F6FCF4);
    sub_250F6FE0C(255, &qword_269B138D8, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], MEMORY[0x263F198B8]);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B138B0);
    }
  }
}

void sub_250F6FCF4(uint64_t a1)
{
}

void sub_250F6FD1C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250F6FD80()
{
  if (!qword_269B138C8)
  {
    sub_250F6FE0C(255, (unint64_t *)&qword_269B138D0, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B138C8);
    }
  }
}

void sub_250F6FE0C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_250F6FE5C()
{
  unint64_t result = qword_269B138E0;
  if (!qword_269B138E0)
  {
    sub_250F6FD1C(255, &qword_269B138B8, sub_250F6FCF4);
    sub_250F6FEF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B138E0);
  }
  return result;
}

unint64_t sub_250F6FEF8()
{
  unint64_t result = qword_269B138E8;
  if (!qword_269B138E8)
  {
    sub_250F6FCF4(255);
    sub_250F6FFB4(&qword_269B138F0, (void (*)(uint64_t))sub_250F6FD80, (void (*)(void))sub_250F70040, (void (*)(void))sub_250F70094);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B138E8);
  }
  return result;
}

uint64_t sub_250F6FFB4(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250F70040()
{
  unint64_t result = qword_269B138F8;
  if (!qword_269B138F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B138F8);
  }
  return result;
}

unint64_t sub_250F70094()
{
  unint64_t result = qword_269B13900;
  if (!qword_269B13900)
  {
    sub_250F6FE0C(255, (unint64_t *)&qword_269B138D0, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13900);
  }
  return result;
}

unint64_t sub_250F70118()
{
  unint64_t result = qword_269B13908;
  if (!qword_269B13908)
  {
    sub_250F6FE0C(255, &qword_269B138D8, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], MEMORY[0x263F198B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13908);
  }
  return result;
}

id sub_250F7019C()
{
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v1 = result;
    unsigned int v2 = objc_msgSend(result, sel_isAppleInternalInstall);

    if (v2
      && (sub_2510391C0(),
          id v3 = objc_allocWithZone(MEMORY[0x263EFFA40]),
          unint64_t v4 = (void *)sub_251039190(),
          swift_bridgeObjectRelease(),
          id v5 = objc_msgSend(v3, sel_initWithSuiteName_, v4),
          v4,
          v5))
    {
      unint64_t v6 = (void *)sub_251039190();
      unsigned int v7 = objc_msgSend(v5, sel_BOOLForKey_, v6);

      int v8 = v7 ^ 1;
    }
    else
    {
      int v8 = 1;
    }
    return (id)(v8 & ~sub_251039000());
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for BalanceWidgetRelevanceProvider()
{
  return &type metadata for BalanceWidgetRelevanceProvider;
}

uint64_t sub_250F702D0()
{
  sub_250F713F8(0, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  unsigned int v2 = (char *)&v10 - v1;
  uint64_t v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC6880((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250F71388((uint64_t)v2, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_5;
  }
  sub_250F7145C((uint64_t)v2, (uint64_t)v6);
  uint64_t v7 = sub_251037610();
  uint64_t result = sub_251037630();
  uint64_t v9 = v7 - result;
  if (!__OFSUB__(v7, result))
  {
    sub_250F714C0((uint64_t)v6);
    if (v9 >= 1) {
      return sub_251038FE0();
    }
LABEL_5:
    sub_250FC1D98();
    return sub_251038FE0();
  }
  __break(1u);
  return result;
}

uint64_t sub_250F704C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = sub_251037400();
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  int v59 = &v52[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  int v58 = &v52[-v6];
  uint64_t v7 = sub_251036FF0();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v57 = &v52[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_250F70D08();
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v61 = &v52[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_251037C90();
  uint64_t v65 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = &v52[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = &v52[-v15];
  sub_250F713F8(0, &qword_26B210A50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v17 - 8);
  double v19 = &v52[-v18];
  uint64_t v20 = sub_2510370F0();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = &v52[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = &v52[-v25];
  sub_250F70D64(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_250F71388((uint64_t)v19, &qword_26B210A50, MEMORY[0x263F062D0]);
    sub_251037C70();
    uint64_t v27 = sub_251037C80();
    os_log_type_t v28 = sub_2510393D0();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v67 = v30;
      *(_DWORD *)uint64_t v29 = 136446210;
      uint64_t v66 = sub_250F32744(0xD00000000000001ELL, 0x800000025103B990, &v67);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v27, v28, "[%{public}s] no widget relevance", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v30, -1, -1);
      MEMORY[0x253391D80](v29, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v65 + 8))(v13, v11);
    return sub_251038EE0();
  }
  else
  {
    uint64_t v56 = v11;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32))(v26, v19, v20);
    sub_251037C70();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 16))(v23, v26, v20);
    uint64_t v31 = sub_251037C80();
    os_log_type_t v32 = sub_2510393D0();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v55 = a2;
      uint64_t v35 = v34;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v67 = v54;
      *(_DWORD *)uint64_t v35 = 136446466;
      int v53 = v33;
      uint64_t v66 = sub_250F32744(0xD00000000000001ELL, 0x800000025103B990, &v67);
      sub_2510394A0();
      *(_WORD *)(v35 + 12) = 2082;
      sub_250F71330();
      uint64_t v36 = sub_2510397C0();
      uint64_t v66 = sub_250F32744(v36, v37, &v67);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v21 + 8);
      v38(v23, v20);
      _os_log_impl(&dword_250F1E000, v31, (os_log_type_t)v53, "[%{public}s] relevant for dates %{public}s", (uint8_t *)v35, 0x16u);
      uint64_t v39 = v54;
      swift_arrayDestroy();
      MEMORY[0x253391D80](v39, -1, -1);
      MEMORY[0x253391D80](v35, -1, -1);
    }
    else
    {
      uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v21 + 8);
      v38(v23, v20);
    }

    (*(void (**)(unsigned char *, uint64_t))(v65 + 8))(v16, v56);
    uint64_t v41 = v58;
    sub_2510370D0();
    uint64_t v42 = v59;
    sub_2510370B0();
    sub_251036FE0();
    uint64_t v43 = *(void (**)(unsigned char *, uint64_t))(v60 + 8);
    uint64_t v44 = v42;
    uint64_t v45 = v62;
    v43(v44, v62);
    v43(v41, v45);
    long long v46 = v61;
    sub_251038F30();
    sub_250F713F8(0, &qword_26B210308, (uint64_t (*)(uint64_t))sub_250F70D08, MEMORY[0x263F8E0F8]);
    uint64_t v47 = v63;
    unint64_t v48 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_25103AD40;
    unint64_t v50 = v49 + v48;
    uint64_t v51 = v64;
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v47 + 16))(v50, v46, v64);
    sub_251038EE0();
    (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v46, v51);
    return ((uint64_t (*)(unsigned char *, uint64_t))v38)(v26, v20);
  }
}

void sub_250F70D08()
{
  if (!qword_26B2102E8)
  {
    unint64_t v0 = sub_251038F40();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2102E8);
    }
  }
}

uint64_t sub_250F70D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_251037940();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v42 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F713F8(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v38 - v10;
  sub_250F713F8(0, &qword_26B210A78, MEMORY[0x263F07490], v5);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = sub_251037400();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v41 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v40 = (char *)&v38 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v39 = (char *)&v38 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v45 = (char *)&v38 - v23;
  uint64_t v46 = a1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v11);
  uint64_t v24 = sub_2510377E0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v11, 1, v24) == 1)
  {
    sub_250F71388((uint64_t)v11, &qword_26B210AB8, MEMORY[0x263F42D70]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_4:
    sub_250F71388((uint64_t)v14, &qword_26B210A78, MEMORY[0x263F07490]);
    goto LABEL_10;
  }
  sub_251037B40();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v25 + 8);
  v27(v11, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
    goto LABEL_4;
  }
  uint64_t v38 = v27;
  os_log_type_t v28 = v45;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v45, v14, v15);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if (v26(v8, 1, v24) == 1)
  {
    sub_250F71388((uint64_t)v8, &qword_26B210AB8, MEMORY[0x263F42D70]);
  }
  else
  {
    uint64_t v29 = v42;
    sub_251037780();
    v38(v8, v24);
    char v30 = sub_251037840();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v44);
    if (v30)
    {
      uint64_t v31 = v39;
      sub_2510373C0();
      os_log_type_t v32 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v32(v40, v28, v15);
      v32(v41, v31, v15);
      uint64_t v33 = v47;
      sub_2510370C0();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v16 + 8);
      v34(v31, v15);
      v34(v28, v15);
      uint64_t v35 = sub_2510370F0();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v33, 0, 1, v35);
    }
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v15);
LABEL_10:
  uint64_t v37 = sub_2510370F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v47, 1, 1, v37);
}

unint64_t sub_250F71330()
{
  unint64_t result = qword_26B210190;
  if (!qword_26B210190)
  {
    sub_2510370F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B210190);
  }
  return result;
}

uint64_t sub_250F71388(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250F713F8(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_250F713F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250F7145C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F714C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F7152C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_250F7AD9C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_250F71590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1);
}

uint64_t sub_250F715A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1);
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B13918);
}

uint64_t sub_250F715E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F71600@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_2510393C0();
    uint64_t v23 = (void *)sub_2510386A0();
    sub_251037C60();
  }
  sub_251038300();
  long long v24 = v13[3];
  a9[2] = v13[2];
  a9[3] = v24;
  long long v25 = v13[4];
  long long v26 = v13[1];
  *a9 = *v13;
  a9[1] = v26;
  a9[8] = v31;
  a9[9] = v32;
  a9[10] = v33;
  a9[11] = v34;
  a9[4] = v25;
  a9[5] = v28;
  a9[6] = v29;
  a9[7] = v30;
  return sub_250F7ACCC((uint64_t)v13);
}

double sub_250F717BC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_250F7189C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))sub_250F7666C, (uint64_t (*)(void))sub_250F398AC).n128_u64[0];
  return result;
}

double sub_250F7182C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_250F7189C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))sub_250F79660, (uint64_t (*)(void))sub_250F3E204).n128_u64[0];
  return result;
}

__n128 sub_250F7189C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t, uint64_t), uint64_t (*a17)(void))
{
  uint64_t v18 = v17;
  uint64_t v20 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_2510393C0();
    long long v29 = (void *)sub_2510386A0();
    sub_251037C60();

    uint64_t v20 = a17;
  }
  sub_251038300();
  a16(v18, a9);
  long long v30 = (_OWORD *)(a9 + *(int *)(v20(0) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  *long long v30 = v32;
  v30[1] = v33;
  __n128 result = v35;
  void v30[2] = v34;
  v30[3] = v35;
  return result;
}

uint64_t sub_250F71A70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v85 = a1;
  uint64_t v3 = sub_251038670();
  uint64_t v83 = *(void *)(v3 - 8);
  uint64_t v84 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v82 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7AD9C(0, &qword_269B12F18, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v81 = (uint64_t)&v68 - v6;
  uint64_t v71 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x270FA5388](v71);
  uint64_t v72 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v68 - v9;
  sub_250F72AFC();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F72C84(0);
  uint64_t v68 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F72CAC(0);
  uint64_t v69 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F72CD4(0);
  uint64_t v70 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F72D04(0);
  uint64_t v75 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v73 = (uint64_t)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F72D2C();
  uint64_t v79 = *(void *)(v25 - 8);
  uint64_t v80 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v77 = (char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F73038();
  uint64_t v78 = v27;
  uint64_t v76 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v74 = (char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = sub_251038530();
  *((void *)v13 + 1) = 0;
  unsigned char v13[16] = 0;
  sub_250F790C8(0, &qword_269B139A8, sub_250F72B90);
  uint64_t v30 = v2;
  sub_250F72354(v2, (uint64_t)&v13[*(int *)(v29 + 44)]);
  unsigned __int8 v31 = sub_251038710();
  unsigned __int8 v32 = sub_251038730();
  char v33 = sub_251038720();
  sub_251038720();
  if (sub_251038720() != v31) {
    char v33 = sub_251038720();
  }
  sub_251038720();
  if (sub_251038720() != v32) {
    char v33 = sub_251038720();
  }
  sub_251038050();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  sub_250F79678((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))sub_250F72AFC);
  uint64_t v42 = &v16[*(int *)(v68 + 36)];
  *uint64_t v42 = v33;
  *((void *)v42 + 1) = v35;
  *((void *)v42 + 2) = v37;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  v42[40] = 0;
  sub_250F79600((uint64_t)v13, (uint64_t (*)(void))sub_250F72AFC);
  char v43 = sub_251038700();
  type metadata accessor for BalanceWidgetSystemSmallView(0);
  sub_250F75E14((uint64_t)v10);
  sub_251038250();
  sub_250F79600((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  sub_251038050();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  sub_250F79678((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(void))sub_250F72C84);
  uint64_t v52 = &v19[*(int *)(v69 + 36)];
  *uint64_t v52 = v43;
  *((void *)v52 + 1) = v45;
  *((void *)v52 + 2) = v47;
  *((void *)v52 + 3) = v49;
  *((void *)v52 + 4) = v51;
  v52[40] = 0;
  sub_250F79600((uint64_t)v16, (uint64_t (*)(void))sub_250F72C84);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v54 = v72;
  sub_250F75E14(v72);
  sub_250FF700C(v30, v88);
  sub_250F79600(v54, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  sub_250F79678((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(void))sub_250F72CAC);
  uint64_t v55 = *(int *)(v70 + 36);
  *(void *)&v22[v55] = KeyPath;
  memcpy(&v22[v55 + 8], v88, 0x118uLL);
  sub_250F79600((uint64_t)v19, (uint64_t (*)(void))sub_250F72CAC);
  uint64_t v56 = sub_251038CE0();
  uint64_t v57 = v73;
  sub_250F7189C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v73, 0.0, 1, INFINITY, 0, v56, v58, (void (*)(uint64_t, uint64_t))sub_250F760F0, (uint64_t (*)(void))sub_250F72D04);
  sub_250F79600((uint64_t)v22, (uint64_t (*)(void))sub_250F72CD4);
  uint64_t v59 = v81;
  sub_250FC2718(0, v81);
  uint64_t v60 = sub_251037290();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
  unint64_t v61 = sub_250F72DB0();
  uint64_t v62 = v77;
  uint64_t v63 = v75;
  sub_251038930();
  sub_250F7152C(v59, &qword_269B12F18, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  sub_250F79600(v57, (uint64_t (*)(void))sub_250F72D04);
  uint64_t v64 = v82;
  sub_251038660();
  uint64_t v86 = v63;
  unint64_t v87 = v61;
  swift_getOpaqueTypeConformance2();
  uint64_t v65 = v74;
  uint64_t v66 = v80;
  sub_2510389D0();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v64, v84);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v62, v66);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v76 + 32))(v85, v65, v78);
}

uint64_t sub_250F72354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v4 = v3 - 8;
  MEMORY[0x270FA5388](v3);
  uint64_t v62 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for BalanceWidgetSystemSmallTitleView(0) - 8;
  MEMORY[0x270FA5388](v63);
  uint64_t v64 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v61 = (char *)&v55 - v8;
  uint64_t v9 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v60 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7AD9C(0, &qword_269B12F88, type metadata accessor for OvernightMetricsChart.Derivations, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v59 = (char *)&v55 - v13;
  sub_250F7AD9C(0, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v11);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v57 = (uint64_t)&v55 - v15;
  sub_250F7AD9C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v11);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v55 - v17;
  uint64_t v19 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v23 = (int *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for OvernightMetricsChart(0);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F72C3C(0);
  MEMORY[0x270FA5388](v29 - 8);
  unsigned __int8 v31 = (char *)&v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v58 = (uint64_t)&v55 - v33;
  uint64_t v34 = *(int *)(v4 + 32);
  uint64_t v56 = a1;
  LOBYTE(v4) = *(unsigned char *)(a1 + v34);
  sub_250F79678(a1, (uint64_t)v25, type metadata accessor for OvernightMetricsViewModel);
  char v66 = v4;
  sub_250F79678((uint64_t)&v25[v23[10]], (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_250F76108((uint64_t)&v25[v23[9]], (uint64_t)v18, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v11);
  uint64_t v35 = *(void **)&v25[v23[16]];
  uint64_t v36 = *(void *)&v25[v23[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v57;
  OvernightMetricsViewModel.warmupProgress.getter(v57);
  uint64_t v38 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v39 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v59, 1, 1, v38);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v66, (uint64_t)v21, (uint64_t)v18, 0, 1, 1, v35, v36, v28, v37, 1, v39);
  sub_250F79600((uint64_t)v25, type metadata accessor for OvernightMetricsViewModel);
  type metadata accessor for BalanceWidgetSystemSmallView(0);
  uint64_t v40 = v56;
  uint64_t v41 = v60;
  sub_250F75E14(v60);
  uint64_t v42 = sub_250FF6E38();
  LOBYTE(v25) = v43 & 1;
  sub_250F79600(v41, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  uint64_t v44 = sub_251038D00();
  sub_250F7189C(0.0, 1, 0.0, 1, 0.0, 1, *(double *)&v42, (char)v25, (uint64_t)v31, 0.0, 1, 0.0, 1, v44, v45, (void (*)(uint64_t, uint64_t))sub_250F76654, (uint64_t (*)(void))sub_250F72C3C);
  sub_250F79600((uint64_t)v28, type metadata accessor for OvernightMetricsChart);
  uint64_t v46 = v58;
  sub_250F79598((uint64_t)v31, v58, (uint64_t (*)(void))sub_250F72C3C);
  uint64_t v47 = v62;
  sub_250F79678(v40, v62, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v49 = (uint64_t)v61;
  *(void *)&v61[*(int *)(v63 + 28)] = KeyPath;
  sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_250F79598(v47, v49, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
  sub_250F79678(v46, (uint64_t)v31, (uint64_t (*)(void))sub_250F72C3C);
  uint64_t v50 = v64;
  sub_250F79678(v49, v64, type metadata accessor for BalanceWidgetSystemSmallTitleView);
  uint64_t v51 = v65;
  sub_250F79678((uint64_t)v31, v65, (uint64_t (*)(void))sub_250F72C3C);
  sub_250F72BC4();
  uint64_t v53 = v51 + *(int *)(v52 + 48);
  *(void *)uint64_t v53 = 0x4010000000000000;
  *(unsigned char *)(v53 + 8) = 0;
  sub_250F79678(v50, v51 + *(int *)(v52 + 64), type metadata accessor for BalanceWidgetSystemSmallTitleView);
  sub_250F79600(v49, type metadata accessor for BalanceWidgetSystemSmallTitleView);
  sub_250F79600(v46, (uint64_t (*)(void))sub_250F72C3C);
  sub_250F79600(v50, type metadata accessor for BalanceWidgetSystemSmallTitleView);
  return sub_250F79600((uint64_t)v31, (uint64_t (*)(void))sub_250F72C3C);
}

void sub_250F72AFC()
{
  if (!qword_269B13928)
  {
    sub_250F72B90(255);
    sub_250F7AEDC(&qword_269B13948, sub_250F72B90);
    unint64_t v0 = sub_251038C10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13928);
    }
  }
}

void sub_250F72B90(uint64_t a1)
{
}

void sub_250F72BC4()
{
  if (!qword_269B13938)
  {
    sub_250F72C3C(255);
    type metadata accessor for BalanceWidgetSystemSmallTitleView(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269B13938);
    }
  }
}

void sub_250F72C3C(uint64_t a1)
{
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallTitleView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B139B8);
}

void sub_250F72C84(uint64_t a1)
{
}

void sub_250F72CAC(uint64_t a1)
{
}

void sub_250F72CD4(uint64_t a1)
{
}

void sub_250F72D04(uint64_t a1)
{
}

void sub_250F72D2C()
{
  if (!qword_269B13970)
  {
    sub_250F72D04(255);
    sub_250F72DB0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13970);
    }
  }
}

unint64_t sub_250F72DB0()
{
  unint64_t result = qword_269B13978;
  if (!qword_269B13978)
  {
    sub_250F72D04(255);
    sub_250F796E0(&qword_269B13980, sub_250F72CD4, (void (*)(void))sub_250F72E6C, (void (*)(void))sub_250F72FBC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13978);
  }
  return result;
}

unint64_t sub_250F72E6C()
{
  unint64_t result = qword_269B13988;
  if (!qword_269B13988)
  {
    sub_250F72CAC(255);
    sub_250F72F1C(&qword_269B13990, sub_250F72C84, &qword_269B13998, (void (*)(uint64_t))sub_250F72AFC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13988);
  }
  return result;
}

uint64_t sub_250F72F1C(unint64_t *a1, void (*a2)(uint64_t), unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    sub_250F7AEDC(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250F72FBC()
{
  unint64_t result = qword_269B12F78;
  if (!qword_269B12F78)
  {
    sub_250F7939C(255, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec, MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B12F78);
  }
  return result;
}

void sub_250F73038()
{
  if (!qword_269B139A0)
  {
    sub_250F72D2C();
    sub_250F72D04(255);
    sub_250F72DB0();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B139A0);
    }
  }
}

uint64_t sub_250F73108@<X0>(uint64_t a1@<X8>)
{
  uint64_t v54 = a1;
  sub_250F78830();
  uint64_t v53 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F788C4();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F78C78(0);
  uint64_t v55 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F78CA0(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F78CC8(0);
  uint64_t v56 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F78CF8(0);
  uint64_t v57 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F78DC0();
  uint64_t v51 = *(void *)(v23 - 8);
  uint64_t v52 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v50 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_251038530();
  type metadata accessor for BalanceWidgetSystemSmallTitleView(0);
  sub_250F75E14((uint64_t)v7);
  sub_250FF7974();
  uint64_t v27 = v26;
  sub_250F79600((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  *(void *)uint64_t v10 = v25;
  *((void *)v10 + 1) = v27;
  unsigned char v10[16] = 0;
  sub_250F790C8(0, &qword_269B13A90, sub_250F78958);
  sub_250F73834(v1, (uint64_t)&v10[*(int *)(v28 + 44)]);
  LOBYTE(v7) = sub_251038710();
  unsigned __int8 v29 = sub_251038730();
  char v30 = sub_251038720();
  sub_251038720();
  if (sub_251038720() != v7) {
    char v30 = sub_251038720();
  }
  sub_251038720();
  if (sub_251038720() != v29) {
    char v30 = sub_251038720();
  }
  sub_251038050();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_250F79678((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))sub_250F788C4);
  uint64_t v39 = &v13[*(int *)(v55 + 36)];
  char *v39 = v30;
  *((void *)v39 + 1) = v32;
  *((void *)v39 + 2) = v34;
  *((void *)v39 + 3) = v36;
  *((void *)v39 + 4) = v38;
  v39[40] = 0;
  sub_250F79600((uint64_t)v10, (uint64_t (*)(void))sub_250F788C4);
  uint64_t v40 = sub_251038D10();
  sub_250F7189C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v40, v41, (void (*)(uint64_t, uint64_t))sub_250F7929C, (uint64_t (*)(void))sub_250F78CA0);
  sub_250F79600((uint64_t)v13, (uint64_t (*)(void))sub_250F78C78);
  uint64_t KeyPath = swift_getKeyPath();
  sub_250F79678((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(void))sub_250F78CA0);
  char v43 = &v19[*(int *)(v56 + 36)];
  *(void *)char v43 = KeyPath;
  v43[8] = 1;
  sub_250F79600((uint64_t)v16, (uint64_t (*)(void))sub_250F78CA0);
  uint64_t v44 = swift_getKeyPath();
  sub_250F79678((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(void))sub_250F78CC8);
  uint64_t v45 = (uint64_t *)&v22[*(int *)(v57 + 36)];
  uint64_t *v45 = v44;
  v45[1] = 0x3FE0000000000000;
  sub_250F79600((uint64_t)v19, (uint64_t (*)(void))sub_250F78CC8);
  uint64_t v46 = *MEMORY[0x263F18D70];
  uint64_t v47 = sub_251038260();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v4, v46, v47);
  sub_250F7AEDC(&qword_269B13A98, MEMORY[0x263F18D80]);
  uint64_t result = sub_2510390F0();
  if (result)
  {
    sub_250F796E0(&qword_269B13A58, sub_250F78CF8, (void (*)(void))sub_250F78ED8, (void (*)(void))sub_250F7904C);
    sub_250F7AEDC(&qword_269B13A88, (void (*)(uint64_t))sub_250F78830);
    uint64_t v49 = v50;
    sub_251038990();
    sub_250F79600((uint64_t)v4, (uint64_t (*)(void))sub_250F78830);
    sub_250F79600((uint64_t)v22, (uint64_t (*)(void))sub_250F78CF8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 32))(v54, v49, v52);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_250F73834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v153 = a1;
  uint64_t v144 = a2;
  sub_250F78B08();
  uint64_t v140 = v2;
  uint64_t v136 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v134 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v135 = (char *)&v123 - v5;
  sub_250F792B4(0, &qword_269B13AA0, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_250F78B08, MEMORY[0x263F19B20]);
  uint64_t v142 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v139 = (uint64_t)&v123 - v7;
  uint64_t v8 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v133 = (uint64_t)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v124 = (uint64_t)&v123 - v11;
  uint64_t v143 = type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView(0);
  MEMORY[0x270FA5388](v143);
  id v125 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7AD9C(0, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  id v146 = (char *)&v123 - v14;
  uint64_t v15 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v147 = *(void *)(v15 - 8);
  uint64_t v148 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v126 = (uint64_t)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F792B4(0, &qword_269B13A00, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_250F78B08, MEMORY[0x263F19B28]);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v138 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v137 = (char *)&v123 - v20;
  uint64_t v21 = sub_2510387D0();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v132 = (uint64_t)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  unsigned __int8 v29 = (char *)&v123 - v28;
  uint64_t v30 = sub_251037460();
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v31 = sub_251039180();
  MEMORY[0x270FA5388](v31 - 8);
  sub_250F78A40(0);
  uint64_t v141 = v32;
  MEMORY[0x270FA5388](v32);
  id v149 = (char *)&v123 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v151 = (uint64_t)&v123 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v150 = (uint64_t)&v123 - v37;
  sub_251039100();
  type metadata accessor for HealthBalanceUI();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v39 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  uint64_t v155 = sub_2510391D0();
  uint64_t v156 = v40;
  unint64_t v131 = sub_250F3EB74();
  uint64_t v41 = sub_2510388A0();
  uint64_t v43 = v42;
  char v45 = v44 & 1;
  uint64_t v152 = v153 + *(int *)(type metadata accessor for BalanceWidgetSystemSmallTitleView(0) + 20);
  uint64_t v46 = (uint64_t)v29;
  sub_250F75E14((uint64_t)v29);
  sub_251038810();
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x263F1A680], v21);
  sub_251038800();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  sub_251038780();
  sub_2510387C0();
  swift_release();
  sub_250F79600((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  uint64_t v47 = sub_251038870();
  uint64_t v49 = v48;
  uint64_t v145 = v50;
  LOBYTE(v22) = v51 & 1;
  sub_250F3EBC8(v41, v43, v45);
  swift_release();
  swift_bridgeObjectRelease();
  sub_250F75E14(v46);
  uint64_t v52 = sub_251038B10();
  uint64_t v128 = v46;
  sub_250F79600(v46, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  uint64_t v155 = v52;
  uint64_t v53 = sub_251038860();
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  char v59 = v58 & 1;
  sub_250F3EBC8(v47, v49, v22);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v155 = v53;
  uint64_t v156 = v55;
  char v157 = v59;
  uint64_t v158 = v57;
  uint64_t v159 = KeyPath;
  uint64_t v160 = 1;
  char v161 = 0;
  uint64_t v154 = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F6528);
  sub_250F7939C(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  uint64_t v62 = v61;
  uint64_t v63 = sub_250F793E8((unint64_t *)&qword_269B13050);
  uint64_t v145 = v62;
  uint64_t v130 = v63;
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_250F78A88();
  uint64_t v65 = v64;
  unint64_t v66 = sub_250F78BD0();
  uint64_t v67 = v151;
  uint64_t v129 = v65;
  unint64_t v127 = v66;
  sub_2510389F0();
  swift_bridgeObjectRelease();
  uint64_t v68 = v55;
  uint64_t v69 = v153;
  sub_250F3EBC8(v53, v68, v59);
  uint64_t v70 = (uint64_t)v146;
  swift_bridgeObjectRelease();
  swift_release();
  sub_250F79598(v67, v150, (uint64_t (*)(void))sub_250F78A40);
  sub_250FC6880(v70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v70, 1, v148) == 1)
  {
    sub_250F7152C(v70, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, MEMORY[0x263F8D8F0]);
    goto LABEL_6;
  }
  uint64_t v71 = v126;
  sub_250F79598(v70, v126, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
  uint64_t v72 = sub_251037610();
  uint64_t result = sub_251037630();
  BOOL v74 = __OFSUB__(v72, result);
  uint64_t v75 = v72 - result;
  if (!v74)
  {
    sub_250F79600(v71, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    if (v75 > 0)
    {
      uint64_t v76 = v124;
      sub_250F79678(v69, v124, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
      uint64_t v77 = swift_getKeyPath();
      uint64_t v78 = (uint64_t)v125;
      *(void *)&v125[*(int *)(v143 + 20)] = v77;
      sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      sub_250F79598(v76, v78, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
      sub_250F79678(v78, v139, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView);
      swift_storeEnumTagMultiPayload();
      sub_250F7AEDC(&qword_269B13AA8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView);
      uint64_t v79 = sub_250F796E0(&qword_269B13A10, sub_250F78A40, (void (*)(void))sub_250F78BD0, (void (*)(void))sub_250F3E058);
      uint64_t v155 = v141;
      uint64_t v156 = v79;
      swift_getOpaqueTypeConformance2();
      uint64_t v80 = (uint64_t)v137;
      sub_251038580();
      sub_250F79600(v78, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView);
      uint64_t v81 = v144;
      uint64_t v82 = (uint64_t)v138;
LABEL_12:
      uint64_t v121 = v150;
      uint64_t v120 = v151;
      sub_250F79678(v150, v151, (uint64_t (*)(void))sub_250F78A40);
      sub_250F79450(v80, v82);
      sub_250F79678(v120, v81, (uint64_t (*)(void))sub_250F78A40);
      sub_250F7898C();
      sub_250F79450(v82, v81 + *(int *)(v122 + 48));
      sub_250F794F8(v80);
      sub_250F79600(v121, (uint64_t (*)(void))sub_250F78A40);
      sub_250F794F8(v82);
      return sub_250F79600(v120, (uint64_t (*)(void))sub_250F78A40);
    }
LABEL_6:
    uint64_t v155 = sub_250FC3070();
    uint64_t v156 = v83;
    uint64_t v84 = sub_2510388A0();
    uint64_t v86 = v85;
    char v88 = v87 & 1;
    uint64_t v89 = v128;
    sub_250F75E14(v128);
    sub_250FF7B4C();
    sub_250F79600(v89, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
    uint64_t v147 = sub_251038870();
    uint64_t v148 = v90;
    uint64_t v92 = v91;
    char v94 = v93;
    swift_release();
    sub_250F3EBC8(v84, v86, v88);
    swift_bridgeObjectRelease();
    sub_250F75E14(v89);
    uint64_t v95 = sub_250FF7E64();
    sub_250F79600(v89, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
    uint64_t v155 = v95;
    uint64_t v96 = v147;
    uint64_t v97 = sub_251038860();
    uint64_t v99 = v98;
    uint64_t v101 = v100;
    char v103 = v102 & 1;
    sub_250F3EBC8(v96, v92, v94 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v104 = swift_getKeyPath();
    uint64_t v155 = v97;
    uint64_t v156 = v99;
    char v157 = v103;
    uint64_t v158 = v101;
    uint64_t v159 = v104;
    uint64_t v160 = 2;
    char v161 = 0;
    uint64_t v154 = &unk_2701F64A8;
    sub_250FF5DF0((uint64_t)&unk_2701F6568);
    sub_2510390A0();
    swift_bridgeObjectRelease();
    sub_2510389F0();
    swift_bridgeObjectRelease();
    uint64_t v105 = v97;
    uint64_t v106 = v153;
    sub_250F3EBC8(v105, v99, v103);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v107 = v132;
    sub_250F75E14(v132);
    uint64_t v108 = sub_250FC1D98();
    if (v109)
    {
      uint64_t v111 = v133;
      sub_250F79678(v106, v133, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    }
    else
    {
      uint64_t v110 = v108;
      uint64_t v111 = v133;
      sub_250F79678(v106, v133, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
      if (!v110) {
        goto LABEL_11;
      }
    }
    sub_250FC1D98();
LABEL_11:
    uint64_t v112 = v140;
    uint64_t v113 = v139;
    uint64_t v82 = (uint64_t)v138;
    uint64_t v80 = (uint64_t)v137;
    sub_250F79600(v111, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    sub_250F79600(v107, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
    uint64_t v114 = sub_250F796E0(&qword_269B13A10, sub_250F78A40, (void (*)(void))sub_250F78BD0, (void (*)(void))sub_250F3E058);
    uint64_t v115 = v134;
    uint64_t v116 = v141;
    uint64_t v117 = (uint64_t)v149;
    sub_251038920();
    sub_250F79600(v117, (uint64_t (*)(void))sub_250F78A40);
    uint64_t v118 = v136;
    id v119 = v135;
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v135, v115, v112);
    (*(void (**)(uint64_t, char *, uint64_t))(v118 + 16))(v113, v119, v112);
    swift_storeEnumTagMultiPayload();
    sub_250F7AEDC(&qword_269B13AA8, (void (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView);
    uint64_t v155 = v116;
    uint64_t v156 = v114;
    swift_getOpaqueTypeConformance2();
    sub_251038580();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v112);
    uint64_t v81 = v144;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_250F749AC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v103 = a2;
  uint64_t v98 = sub_2510387D0();
  uint64_t v97 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v96 = (char *)v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A620];
  char v94 = (uint64_t (*)())MEMORY[0x263F8D8F0];
  sub_250F7AD9C(0, (unint64_t *)&qword_269B12E08, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v90 - v5;
  uint64_t v7 = sub_251038820();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = v13;
  sub_250F78A40(0);
  uint64_t v111 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v105 = (char *)v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F78B08();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v109 = v16;
  uint64_t v110 = v17;
  MEMORY[0x270FA5388](v16);
  char v102 = (char *)v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v101 = (char *)v90 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v106 = (char *)v90 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v108 = (char *)v90 - v24;
  uint64_t v99 = a1;
  uint64_t v113 = sub_250FC36C0();
  uint64_t v114 = v25;
  unint64_t v100 = sub_250F3EB74();
  uint64_t v26 = sub_2510388A0();
  uint64_t v28 = v27;
  uint64_t v93 = v29;
  char v31 = v30 & 1;
  uint64_t v107 = a1 + *(int *)(type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView(0) + 20);
  sub_250F75E14((uint64_t)v13);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F1A6B8], v7);
  uint64_t v32 = *MEMORY[0x263F1A610];
  uint64_t v33 = sub_251038760();
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v6, v32, v33);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v6, 0, 1, v33);
  sub_2510387B0();
  sub_250F7152C((uint64_t)v6, (unint64_t *)&qword_269B12E08, v95, (uint64_t (*)(uint64_t, uint64_t))v94);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v35 = v97;
  uint64_t v36 = v96;
  uint64_t v37 = v98;
  (*(void (**)(char *, void, uint64_t))(v97 + 104))(v96, *MEMORY[0x263F1A680], v98);
  sub_251038800();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  uint64_t v38 = (uint64_t)v104;
  char v94 = type metadata accessor for BalanceWidgetSystemSmallSpecs;
  sub_250F79600((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  uint64_t v39 = sub_251038870();
  uint64_t v41 = v40;
  uint64_t v98 = v42;
  LOBYTE(v37) = v43 & 1;
  sub_250F3EBC8(v26, v28, v31);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v44 = v38;
  sub_250F75E14(v38);
  uint64_t v45 = sub_251038AF0();
  sub_250F79600(v44, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  uint64_t v113 = v45;
  uint64_t v46 = sub_251038860();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  LOBYTE(v26) = v51 & 1;
  sub_250F3EBC8(v39, v41, v37);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v113 = v46;
  uint64_t v114 = v48;
  char v115 = v26;
  uint64_t v116 = v50;
  uint64_t v117 = KeyPath;
  uint64_t v118 = 1;
  char v119 = 0;
  uint64_t v112 = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F65A8);
  sub_250F7939C(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  uint64_t v98 = v53;
  uint64_t v97 = sub_250F793E8((unint64_t *)&qword_269B13050);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  sub_250F78A88();
  uint64_t v96 = v54;
  uint64_t v95 = (uint64_t (*)(uint64_t))sub_250F78BD0();
  uint64_t v55 = (uint64_t)v105;
  sub_2510389F0();
  swift_bridgeObjectRelease();
  sub_250F3EBC8(v46, v48, v26);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v93 = sub_250F796E0(&qword_269B13A10, sub_250F78A40, (void (*)(void))sub_250F78BD0, (void (*)(void))sub_250F3E058);
  uint64_t v56 = v106;
  sub_251038920();
  uint64_t v92 = sub_250F78A40;
  sub_250F79600(v55, (uint64_t (*)(void))sub_250F78A40);
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
  v90[1] = v110 + 32;
  uint64_t v91 = v57;
  v57(v108, v56, v109);
  uint64_t v113 = sub_250FC3070();
  uint64_t v114 = v58;
  uint64_t v59 = sub_2510388A0();
  uint64_t v61 = v60;
  LOBYTE(v39) = v62 & 1;
  uint64_t v63 = (uint64_t)v104;
  sub_250F75E14((uint64_t)v104);
  sub_250FF809C();
  uint64_t v64 = v94;
  sub_250F79600(v63, (uint64_t (*)(void))v94);
  uint64_t v99 = sub_251038870();
  uint64_t v66 = v65;
  unint64_t v100 = v67;
  LOBYTE(v48) = v68 & 1;
  sub_250F3EBC8(v59, v61, v39);
  swift_release();
  swift_bridgeObjectRelease();
  sub_250F75E14(v63);
  uint64_t v69 = sub_251038AF0();
  sub_250F79600(v63, (uint64_t (*)(void))v64);
  uint64_t v113 = v69;
  uint64_t v70 = v99;
  uint64_t v71 = sub_251038860();
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  LOBYTE(v63) = v76 & 1;
  sub_250F3EBC8(v70, v66, v48);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v77 = swift_getKeyPath();
  uint64_t v113 = v71;
  uint64_t v114 = v73;
  char v115 = v63;
  uint64_t v116 = v75;
  uint64_t v117 = v77;
  uint64_t v118 = 2;
  char v119 = 0;
  uint64_t v112 = &unk_2701F64A8;
  sub_250FF5DF0((uint64_t)&unk_2701F65E8);
  sub_2510390A0();
  swift_bridgeObjectRelease();
  uint64_t v78 = (uint64_t)v105;
  sub_2510389F0();
  swift_bridgeObjectRelease();
  sub_250F3EBC8(v71, v73, v63);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v79 = v101;
  sub_251038920();
  sub_250F79600(v78, (uint64_t (*)(void))v92);
  uint64_t v80 = v106;
  uint64_t v81 = v109;
  v91(v106, v79, v109);
  uint64_t v82 = v110;
  uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  uint64_t v84 = v108;
  v83(v79, v108, v81);
  uint64_t v85 = v102;
  v83(v102, v80, v81);
  uint64_t v86 = v103;
  v83(v103, v79, v81);
  sub_250F7AD38();
  v83(&v86[*(int *)(v87 + 48)], v85, v81);
  char v88 = *(void (**)(char *, uint64_t))(v82 + 8);
  v88(v80, v81);
  v88(v84, v81);
  v88(v85, v81);
  return ((uint64_t (*)(char *, uint64_t))v88)(v79, v81);
}

uint64_t sub_250F75520@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_251038490();
  *(void *)(a1 + 8) = 0x4014000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  sub_250F790C8(0, &qword_269B13AC0, sub_250F7AD04);
  return sub_250F749AC(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t sub_250F75594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_251038450();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_250F7AD9C(0, &qword_26B210130, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v20 - v11;
  sub_250F76108(v2, (uint64_t)v20 - v11, &qword_26B210130, v8, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_251038F50();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, v12, v13);
  }
  else
  {
    os_log_type_t v15 = sub_2510393C0();
    uint64_t v16 = sub_2510386A0();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      v20[1] = a1;
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v21 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      v20[2] = sub_250F32744(0x6146746567646957, 0xEC000000796C696DLL, &v21);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v19, -1, -1);
      MEMORY[0x253391D80](v18, -1, -1);
    }

    sub_251038440();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_250F75888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_251038450();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_250F7AD9C(0, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v18 - v10;
  sub_250F76108(v2, (uint64_t)v18 - v10, &qword_269B12ED8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, v8);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_250F79598((uint64_t)v11, a1, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  }
  os_log_type_t v13 = sub_2510393C0();
  uint64_t v14 = sub_2510386A0();
  os_log_type_t v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v18[1] = a1;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v19 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    void v18[2] = sub_250F32744(0xD000000000000026, 0x800000025103FD30, &v19);
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v17, -1, -1);
    MEMORY[0x253391D80](v16, -1, -1);
  }

  sub_251038440();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_250F75B5C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_251038450();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F76708(v1, (uint64_t)v17);
  sub_250F76708((uint64_t)v17, (uint64_t)v18);
  if (sub_250F76790((uint64_t)v18) == 1)
  {
    sub_250F76708((uint64_t)v17, (uint64_t)v16);
    uint64_t v7 = (const void *)nullsub_1(v16);
    memcpy(a1, v7, 0x118uLL);
    return sub_250F76798(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  }
  else
  {
    sub_250F76798(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
    os_log_type_t v9 = sub_2510393C0();
    uint64_t v10 = sub_2510386A0();
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v15[1] = a1;
      uint64_t v14 = v13;
      v16[0] = v13;
      v15[0] = v3;
      *(_DWORD *)uint64_t v12 = 136315138;
      _OWORD v15[2] = sub_250F32744(0xD000000000000019, 0x800000025103FD60, v16);
      uint64_t v3 = v15[0];
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v14, -1, -1);
      MEMORY[0x253391D80](v12, -1, -1);
    }

    sub_250F76708((uint64_t)v17, (uint64_t)v16);
    nullsub_1(v16);
    sub_251038440();
    swift_getAtKeyPath();
    sub_250F76798(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_250F75E14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_251038450();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  os_log_type_t v11 = (char *)v18 - v10;
  sub_250F76108(v2, (uint64_t)v18 - v10, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, v8);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_250F79598((uint64_t)v11, a1, (uint64_t (*)(void))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  }
  os_log_type_t v13 = sub_2510393C0();
  uint64_t v14 = sub_2510386A0();
  os_log_type_t v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v18[1] = a1;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v19 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    void v18[2] = sub_250F32744(0xD00000000000001DLL, 0x800000025103FD10, &v19);
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v17, -1, -1);
    MEMORY[0x253391D80](v16, -1, -1);
  }

  sub_251038440();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_250F760F0(uint64_t a1, uint64_t a2)
{
  return sub_250F79678(a1, a2, (uint64_t (*)(void))sub_250F72CD4);
}

uint64_t sub_250F76108(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_250F7AD9C(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_250F76178@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_251038450();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_250F7AD9C(0, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  os_log_type_t v11 = (char *)v18 - v10;
  sub_250F76108(v2, (uint64_t)v18 - v10, &qword_269B12EE0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v8);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_250F79598((uint64_t)v11, a1, (uint64_t (*)(void))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  }
  os_log_type_t v13 = sub_2510393C0();
  uint64_t v14 = sub_2510386A0();
  os_log_type_t v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v18[1] = a1;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v19 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    void v18[2] = sub_250F32744(0xD000000000000023, 0x800000025103FD80, &v19);
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v17, -1, -1);
    MEMORY[0x253391D80](v16, -1, -1);
  }

  sub_251038440();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_250F7644C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_251038450();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = sub_2510393C0();
  uint64_t v9 = sub_2510386A0();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v15 = v12;
    *(_DWORD *)os_log_type_t v11 = 136315138;
    uint64_t v14 = sub_250F32744(1819242306, 0xE400000000000000, &v15);
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v12, -1, -1);
    MEMORY[0x253391D80](v11, -1, -1);
  }

  sub_251038440();
  swift_getAtKeyPath();
  sub_250F766FC(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_250F76654(uint64_t a1, uint64_t a2)
{
  return sub_250F79678(a1, a2, type metadata accessor for OvernightMetricsChart);
}

uint64_t sub_250F7666C(uint64_t a1, uint64_t a2)
{
  sub_250F78D28(0, &qword_269B12F40, (void (*)(uint64_t))sub_250F396C8, (unint64_t *)&qword_269B12F48, (uint64_t)&type metadata for OvernightMetricsChartSpec);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F766FC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_250F76708(uint64_t a1, uint64_t a2)
{
  sub_250F7939C(0, (unint64_t *)&qword_269B139B0, (uint64_t)&type metadata for OvernightMetricsChartSpec, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F76790(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 280);
}

uint64_t sub_250F76798(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v6 = *(unsigned char *)(a1 + 280);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    *(void *)(a1 + 272),
    v6);
  return a1;
}

char *sub_250F7682C(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    os_log_type_t v13 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510376B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    os_log_type_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)&a1[v8[5]] = *(void *)&a2[v8[5]];
    uint64_t v9 = v8[6];
    os_log_type_t v10 = &a1[v9];
    os_log_type_t v11 = &a2[v9];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)os_log_type_t v10 = *(void *)v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v14 = sub_2510379E0();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_250F7AD9C(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = v8[7];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v21 = *((void *)v20 - 1);
    uint64_t v82 = a3;
    uint64_t v83 = v8;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_250F7AD9C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v23 = sub_251037400();
      uint64_t v80 = v21;
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      v24(v18, v19, v23);
      uint64_t v25 = v20[5];
      uint64_t v26 = &v18[v25];
      uint64_t v27 = &v19[v25];
      v24(&v18[v25], &v19[v25], v23);
      sub_250F26E08();
      v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v23);
      uint64_t v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v26[v29[5]] = *(void *)&v27[v29[5]];
      *(void *)&v26[v29[6]] = *(void *)&v27[v29[6]];
      *(void *)&v26[v29[7]] = *(void *)&v27[v29[7]];
      uint64_t v30 = v20[6];
      char v31 = &v18[v30];
      uint64_t v32 = &v19[v30];
      *(_OWORD *)char v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      uint64_t v33 = v20[10];
      uint64_t v34 = &v18[v33];
      uint64_t v35 = &v19[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      uint64_t v37 = v20[11];
      uint64_t v38 = &v18[v37];
      uint64_t v39 = &v19[v37];
      uint64_t v40 = *((void *)v39 + 1);
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = v40;
      uint64_t v41 = *(void (**)(char *, void, uint64_t, int *))(v80 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_log_type_t v8 = v83;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41(v18, 0, 1, v20);
    }
    uint64_t v42 = v8[8];
    char v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    *(void *)&a1[v42] = *(void *)&a2[v42];
    uint64_t v45 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v46 = *(int *)(v45 + 20);
    uint64_t v47 = &v43[v46];
    uint64_t v81 = &v44[v46];
    uint64_t v48 = sub_2510374F0();
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16);
    os_log_type_t v13 = a1;
    swift_bridgeObjectRetain();
    v49(v47, v81, v48);
    *(void *)&v43[*(int *)(v45 + 24)] = *(void *)&v44[*(int *)(v45 + 24)];
    *(void *)&a1[v83[9]] = *(void *)&a2[v83[9]];
    *(void *)&a1[v83[10]] = *(void *)&a2[v83[10]];
    uint64_t v50 = v83[11];
    char v51 = &a1[v50];
    uint64_t v52 = &a2[v50];
    uint64_t v53 = sub_251037400();
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54(v51, v52, v53);
    sub_250F49D48(0);
    uint64_t v56 = v55;
    v54(&v51[*(int *)(v55 + 36)], &v52[*(int *)(v55 + 36)], v53);
    uint64_t v57 = v83[12];
    uint64_t v58 = &v13[v57];
    uint64_t v59 = &a2[v57];
    v54(&v13[v57], &a2[v57], v53);
    v54(&v58[*(int *)(v56 + 36)], &v59[*(int *)(v56 + 36)], v53);
    *(void *)&v13[v83[13]] = *(void *)&a2[v83[13]];
    *(void *)&v13[v83[14]] = *(void *)&a2[v83[14]];
    uint64_t v60 = type metadata accessor for BalanceWidgetViewModel();
    uint64_t v61 = *(int *)(v60 + 20);
    char v62 = &v13[v61];
    uint64_t v63 = &a2[v61];
    uint64_t v64 = sub_2510375C0();
    uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v65(v62, v63, v64);
    v13[*(int *)(v60 + 24)] = a2[*(int *)(v60 + 24)];
    uint64_t v66 = *(int *)(v82 + 20);
    unint64_t v67 = &v13[v66];
    char v68 = &a2[v66];
    sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v69 = sub_251038080();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16))(v67, v68, v69);
      uint64_t v70 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
      uint64_t v71 = *(int *)(v70 + 20);
      uint64_t v72 = &v67[v71];
      uint64_t v73 = &v68[v71];
      uint64_t v74 = sub_251038260();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v72, v73, v74);
      uint64_t v75 = *(int *)(v70 + 24);
      char v76 = &v67[v75];
      uint64_t v77 = &v68[v75];
      uint64_t v78 = sub_251038F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v76, v77, v78);
    }
    else
    {
      *(void *)unint64_t v67 = *(void *)v68;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v13;
}

uint64_t sub_250F77024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = sub_2510379E0();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  uint64_t v9 = a1 + v5[7];
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = sub_251037400();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v9, v11);
    uint64_t v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_250F26E08();
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v17 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + v5[11];
  uint64_t v19 = sub_251037400();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_250F49D48(0);
  uint64_t v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  uint64_t v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  uint64_t v25 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  uint64_t v26 = a1 + *(int *)(a2 + 20);
  sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = sub_251038080();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
    uint64_t v28 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
    uint64_t v29 = v26 + *(int *)(v28 + 20);
    uint64_t v30 = sub_251038260();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
    uint64_t v31 = v26 + *(int *)(v28 + 24);
    uint64_t v32 = sub_251038F20();
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8);
    return v33(v31, v32);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_250F77554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = sub_2510379E0();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_250F7AD9C(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = v7[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v19 = *((void *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_250F7AD9C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = sub_251037400();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
    uint64_t v73 = v19;
    v22(v16, v17, v21);
    uint64_t v23 = v22;
    uint64_t v24 = v18[5];
    uint64_t v25 = &v16[v24];
    uint64_t v74 = a3;
    uint64_t v26 = &v17[v24];
    v23(&v16[v24], &v17[v24], v21);
    sub_250F26E08();
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
    uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
    *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
    uint64_t v29 = v28[7];
    uint64_t v30 = *(void *)&v26[v29];
    a3 = v74;
    *(void *)&v25[v29] = v30;
    uint64_t v31 = v18[6];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = &v17[v31];
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    v32[16] = v33[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v73 + 56))(v16, 0, 1, v18);
  }
  uint64_t v34 = v7[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  uint64_t v42 = v7[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32);
  v46(v43, v44, v45);
  sub_250F49D48(0);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = v7[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  *(void *)(a1 + v7[14]) = *(void *)(a2 + v7[14]);
  uint64_t v52 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 32))(v54, v55, v56);
  *(unsigned char *)(a1 + *(int *)(v52 + 24)) = *(unsigned char *)(a2 + *(int *)(v52 + 24));
  uint64_t v57 = *(int *)(a3 + 20);
  uint64_t v58 = (char *)(a1 + v57);
  uint64_t v59 = (char *)(a2 + v57);
  sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
  uint64_t v61 = v60;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v62 = sub_251038080();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v58, v59, v62);
    uint64_t v63 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
    uint64_t v64 = *(int *)(v63 + 20);
    uint64_t v65 = &v58[v64];
    uint64_t v66 = &v59[v64];
    uint64_t v67 = sub_251038260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32))(v65, v66, v67);
    uint64_t v68 = *(int *)(v63 + 24);
    uint64_t v69 = &v58[v68];
    uint64_t v70 = &v59[v68];
    uint64_t v71 = sub_251038F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 32))(v69, v70, v71);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
  }
  return a1;
}

uint64_t sub_250F77CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = v6[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_250F79600(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = sub_2510379E0();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        sub_250F7AD9C(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v14 = v6[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      uint64_t v22 = sub_251037400();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
      uint64_t v94 = v18;
      v23(v15, v16, v22);
      uint64_t v24 = v23;
      uint64_t v25 = v17[5];
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      v24(&v15[v25], &v16[v25], v22);
      sub_250F26E08();
      v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v22);
      uint64_t v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v26[v29[5]] = *(void *)&v27[v29[5]];
      *(void *)&v26[v29[6]] = *(void *)&v27[v29[6]];
      *(void *)&v26[v29[7]] = *(void *)&v27[v29[7]];
      uint64_t v30 = v17[6];
      uint64_t v31 = &v15[v30];
      uint64_t v32 = &v16[v30];
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
      *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v94 + 56))(v15, 0, 1, v17);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v21)
  {
    sub_250F79600((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F7AD9C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v74 = sub_251037400();
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 40);
  v75(v15, v16, v74);
  uint64_t v76 = v17[5];
  uint64_t v77 = &v15[v76];
  uint64_t v78 = &v16[v76];
  v75(&v15[v76], &v16[v76], v74);
  sub_250F26E08();
  v75(&v77[*(int *)(v79 + 36)], &v78[*(int *)(v79 + 36)], v74);
  uint64_t v80 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v77[v80[5]] = *(void *)&v78[v80[5]];
  swift_bridgeObjectRelease();
  *(void *)&v77[v80[6]] = *(void *)&v78[v80[6]];
  swift_bridgeObjectRelease();
  *(void *)&v77[v80[7]] = *(void *)&v78[v80[7]];
  swift_bridgeObjectRelease();
  uint64_t v81 = v17[6];
  uint64_t v82 = &v15[v81];
  uint64_t v83 = &v16[v81];
  *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
  v82[16] = v83[16];
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  uint64_t v84 = v17[10];
  uint64_t v85 = &v15[v84];
  uint64_t v86 = (uint64_t *)&v16[v84];
  uint64_t v88 = *v86;
  uint64_t v87 = v86[1];
  char *v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = v17[11];
  uint64_t v90 = &v15[v89];
  uint64_t v91 = (uint64_t *)&v16[v89];
  uint64_t v93 = *v91;
  uint64_t v92 = v91[1];
  *uint64_t v90 = v93;
  v90[1] = v92;
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v34 = v6[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 40))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  swift_bridgeObjectRelease();
  uint64_t v42 = v6[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 40);
  v46(v43, v44, v45);
  sub_250F49D48(0);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = v6[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[14]) = *(void *)(a2 + v6[14]);
  swift_bridgeObjectRelease();
  uint64_t v52 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 40))(v54, v55, v56);
  *(unsigned char *)(a1 + *(int *)(v52 + 24)) = *(unsigned char *)(a2 + *(int *)(v52 + 24));
  if (a1 != a2)
  {
    uint64_t v57 = *(int *)(a3 + 20);
    uint64_t v58 = (char *)(a1 + v57);
    uint64_t v59 = (char *)(a2 + v57);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_250F7152C(a1 + v57, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
    sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, v60);
    uint64_t v62 = v61;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v63 = sub_251038080();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v58, v59, v63);
      uint64_t v64 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
      uint64_t v65 = *(int *)(v64 + 20);
      uint64_t v66 = &v58[v65];
      uint64_t v67 = &v59[v65];
      uint64_t v68 = sub_251038260();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
      uint64_t v69 = *(int *)(v64 + 24);
      uint64_t v70 = &v58[v69];
      uint64_t v71 = &v59[v69];
      uint64_t v72 = sub_251038F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32))(v70, v71, v72);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_250F78614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_0);
}

uint64_t sub_250F7862C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F78640);
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    sub_250F7AD9C(0, &qword_269B13910, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185D0]);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_250F78778()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F78814()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_250F78830()
{
  if (!qword_269B139C8)
  {
    sub_251038260();
    sub_250F7AEDC(&qword_269B139D0, MEMORY[0x263F18D80]);
    unint64_t v0 = sub_2510396B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B139C8);
    }
  }
}

void sub_250F788C4()
{
  if (!qword_269B139D8)
  {
    sub_250F78958(255);
    sub_250F7AEDC(&qword_269B13A20, sub_250F78958);
    unint64_t v0 = sub_251038C10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B139D8);
    }
  }
}

void sub_250F78958(uint64_t a1)
{
}

void sub_250F7898C()
{
  if (!qword_269B139E8)
  {
    sub_250F78A40(255);
    sub_250F792B4(255, &qword_269B13A00, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_250F78B08, MEMORY[0x263F19B28]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B139E8);
    }
  }
}

void sub_250F78A40(uint64_t a1)
{
}

void sub_250F78A88()
{
  if (!qword_269B139F8)
  {
    sub_250F3E298();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B139F8);
    }
  }
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B13AB0);
}

void sub_250F78B08()
{
  if (!qword_269B13A08)
  {
    sub_250F78A40(255);
    sub_250F796E0(&qword_269B13A10, sub_250F78A40, (void (*)(void))sub_250F78BD0, (void (*)(void))sub_250F3E058);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13A08);
    }
  }
}

unint64_t sub_250F78BD0()
{
  unint64_t result = qword_269B13A18;
  if (!qword_269B13A18)
  {
    sub_250F78A88();
    sub_250F7AEDC(&qword_269B13078, (void (*)(uint64_t))sub_250F3E298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13A18);
  }
  return result;
}

void sub_250F78C78(uint64_t a1)
{
}

void sub_250F78CA0(uint64_t a1)
{
}

void sub_250F78CC8(uint64_t a1)
{
}

void sub_250F78CF8(uint64_t a1)
{
}

void sub_250F78D28(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    a3(255);
    sub_250F7939C(255, a4, a5, MEMORY[0x263F1A418]);
    unint64_t v8 = sub_251038270();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250F78DC0()
{
  if (!qword_269B13A50)
  {
    sub_250F78CF8(255);
    sub_250F78830();
    sub_250F796E0(&qword_269B13A58, sub_250F78CF8, (void (*)(void))sub_250F78ED8, (void (*)(void))sub_250F7904C);
    sub_250F7AEDC(&qword_269B13A88, (void (*)(uint64_t))sub_250F78830);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269B13A50);
    }
  }
}

uint64_t sub_250F78ED8()
{
  return sub_250F796E0(&qword_269B13A60, sub_250F78CC8, (void (*)(void))sub_250F78F20, (void (*)(void))sub_250F78FD0);
}

unint64_t sub_250F78F20()
{
  unint64_t result = qword_269B13A68;
  if (!qword_269B13A68)
  {
    sub_250F78CA0(255);
    sub_250F72F1C(&qword_269B13A70, sub_250F78C78, &qword_269B13A78, (void (*)(uint64_t))sub_250F788C4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13A68);
  }
  return result;
}

unint64_t sub_250F78FD0()
{
  unint64_t result = qword_269B13080;
  if (!qword_269B13080)
  {
    sub_250F7939C(255, &qword_269B13048, MEMORY[0x263F8D4F8], MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13080);
  }
  return result;
}

unint64_t sub_250F7904C()
{
  unint64_t result = qword_269B13A80;
  if (!qword_269B13A80)
  {
    sub_250F7939C(255, &qword_269B13A48, MEMORY[0x263F8EF38], MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13A80);
  }
  return result;
}

void sub_250F790C8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510381D0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250F79134@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_251038420();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_250F79168()
{
  return sub_251038430();
}

uint64_t sub_250F79198@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_251038350();
  *a1 = result & 1;
  return result;
}

uint64_t sub_250F791C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_251038350();
  *a1 = result & 1;
  return result;
}

uint64_t sub_250F791F8()
{
  return sub_251038360();
}

uint64_t sub_250F79220()
{
  return sub_251038360();
}

uint64_t sub_250F79248@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_251038370();
  *a1 = v3;
  return result;
}

uint64_t sub_250F79274()
{
  return sub_251038380();
}

uint64_t sub_250F7929C(uint64_t a1, uint64_t a2)
{
  return sub_250F79678(a1, a2, (uint64_t (*)(void))sub_250F78C78);
}

void sub_250F792B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_250F79338@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_251038420();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_250F7936C()
{
  return sub_251038430();
}

void sub_250F7939C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_250F793E8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F7939C(255, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F79450(uint64_t a1, uint64_t a2)
{
  sub_250F792B4(0, &qword_269B13A00, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_250F78B08, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F794F8(uint64_t a1)
{
  sub_250F792B4(0, &qword_269B13A00, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_250F78B08, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F79598(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F79600(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F79660(uint64_t a1, uint64_t a2)
{
  return sub_250F79678(a1, a2, (uint64_t (*)(void))sub_250F3E170);
}

uint64_t sub_250F79678(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F796E0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250F7976C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250F797D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = sub_2510379E0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_250F7AD9C(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v80 = a3;
  uint64_t v81 = v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_250F7AD9C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v78 = v18;
    int v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v15, v16, v20);
    uint64_t v22 = v17[5];
    uint64_t v23 = &v15[v22];
    uint64_t v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_250F26E08();
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
    *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
    *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
    uint64_t v27 = v17[6];
    uint64_t v28 = &v15[v27];
    uint64_t v29 = &v16[v27];
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    uint64_t v30 = v17[10];
    uint64_t v31 = &v15[v30];
    uint64_t v32 = &v16[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = v17[11];
    uint64_t v35 = &v15[v34];
    uint64_t v36 = &v16[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v37;
    uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v78 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = v81;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v15, 0, 1, v17);
  }
  uint64_t v39 = v7[8];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v44 = v40 + v43;
  uint64_t v79 = v41 + v43;
  uint64_t v45 = sub_2510374F0();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16);
  uint64_t v47 = a1;
  swift_bridgeObjectRetain();
  v46(v44, v79, v45);
  *(void *)(v40 + *(int *)(v42 + 24)) = *(void *)(v41 + *(int *)(v42 + 24));
  *(void *)(a1 + v81[9]) = *(void *)(a2 + v81[9]);
  *(void *)(a1 + v81[10]) = *(void *)(a2 + v81[10]);
  uint64_t v48 = v81[11];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  uint64_t v51 = sub_251037400();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v52(v49, v50, v51);
  sub_250F49D48(0);
  uint64_t v54 = v53;
  v52(v49 + *(int *)(v53 + 36), v50 + *(int *)(v53 + 36), v51);
  uint64_t v55 = v81[12];
  uint64_t v56 = v47 + v55;
  uint64_t v57 = a2 + v55;
  v52(v47 + v55, a2 + v55, v51);
  v52(v56 + *(int *)(v54 + 36), v57 + *(int *)(v54 + 36), v51);
  *(void *)(v47 + v81[13]) = *(void *)(a2 + v81[13]);
  *(void *)(v47 + v81[14]) = *(void *)(a2 + v81[14]);
  uint64_t v58 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v59 = *(int *)(v58 + 20);
  uint64_t v60 = v47 + v59;
  uint64_t v61 = a2 + v59;
  uint64_t v62 = sub_2510375C0();
  uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63(v60, v61, v62);
  *(unsigned char *)(v47 + *(int *)(v58 + 24)) = *(unsigned char *)(a2 + *(int *)(v58 + 24));
  uint64_t v64 = *(int *)(v80 + 20);
  uint64_t v65 = (void *)(v47 + v64);
  uint64_t v66 = (void *)(a2 + v64);
  sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v67 = sub_251038080();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
    uint64_t v68 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
    uint64_t v69 = *(int *)(v68 + 20);
    uint64_t v70 = (char *)v65 + v69;
    uint64_t v71 = (char *)v66 + v69;
    uint64_t v72 = sub_251038260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
    uint64_t v73 = *(int *)(v68 + 24);
    uint64_t v74 = (char *)v65 + v73;
    uint64_t v75 = (char *)v66 + v73;
    uint64_t v76 = sub_251038F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16))(v74, v75, v76);
  }
  else
  {
    void *v65 = *v66;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v47;
}

uint64_t sub_250F79F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = v6[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_250F79600(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v8 = *v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = sub_2510379E0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_250F7AD9C(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = v6[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v99 = *((void *)v16 - 1);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v99 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = sub_251037400();
      int v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      uint64_t v97 = v6;
      v21(v14, v15, v20);
      uint64_t v22 = v16[5];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      v21(&v14[v22], &v15[v22], v20);
      sub_250F26E08();
      v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
      uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
      *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
      *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
      uint64_t v27 = v16[6];
      uint64_t v28 = &v14[v27];
      uint64_t v29 = &v15[v27];
      char v30 = v29[16];
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      v28[16] = v30;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      uint64_t v31 = v16[10];
      uint64_t v32 = &v14[v31];
      uint64_t v33 = &v15[v31];
      *uint64_t v32 = *v33;
      v32[1] = v33[1];
      uint64_t v34 = v16[11];
      uint64_t v35 = &v14[v34];
      uint64_t v36 = &v15[v34];
      char *v35 = *v36;
      v35[1] = v36[1];
      uint64_t v37 = *(void (**)(unsigned char *, void, uint64_t, int *))(v99 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v14, 0, 1, v16);
      uint64_t v6 = v97;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    sub_250F79600((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F7AD9C(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v78 = sub_251037400();
  uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 24);
  v79(v14, v15, v78);
  uint64_t v80 = v79;
  uint64_t v81 = v16[5];
  uint64_t v82 = &v14[v81];
  uint64_t v98 = v6;
  uint64_t v83 = &v15[v81];
  uint64_t v84 = v80;
  v80(&v14[v81], &v15[v81], v78);
  sub_250F26E08();
  v84(&v82[*(int *)(v85 + 36)], &v83[*(int *)(v85 + 36)], v78);
  uint64_t v86 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v82[v86[5]] = *(void *)&v83[v86[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v82[v86[6]] = *(void *)&v83[v86[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v98;
  *(void *)&v82[v86[7]] = *(void *)&v83[v86[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = v16[6];
  uint64_t v88 = &v14[v87];
  uint64_t v89 = &v15[v87];
  long long v90 = *(_OWORD *)v89;
  v88[16] = v89[16];
  *(_OWORD *)uint64_t v88 = v90;
  v14[v16[7]] = v15[v16[7]];
  v14[v16[8]] = v15[v16[8]];
  v14[v16[9]] = v15[v16[9]];
  uint64_t v91 = v16[10];
  uint64_t v92 = &v14[v91];
  uint64_t v93 = &v15[v91];
  *uint64_t v92 = *v93;
  v92[1] = v93[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = v16[11];
  uint64_t v95 = &v14[v94];
  uint64_t v96 = &v15[v94];
  *uint64_t v95 = *v96;
  v95[1] = v96[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v39 = v6[8];
  uint64_t v40 = v6;
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = v41 + v44;
  uint64_t v46 = v42 + v44;
  uint64_t v47 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  *(void *)(v41 + *(int *)(v43 + 24)) = *(void *)(v42 + *(int *)(v43 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v40[9]) = *(void *)(a2 + v40[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v40[10]) = *(void *)(a2 + v40[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v40[11];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  uint64_t v51 = sub_251037400();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24);
  v52(v49, v50, v51);
  sub_250F49D48(0);
  uint64_t v54 = v53;
  v52(v49 + *(int *)(v53 + 36), v50 + *(int *)(v53 + 36), v51);
  uint64_t v55 = v40[12];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  v52(a1 + v55, a2 + v55, v51);
  v52(v56 + *(int *)(v54 + 36), v57 + *(int *)(v54 + 36), v51);
  *(void *)(a1 + v40[13]) = *(void *)(a2 + v40[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v40[14]) = *(void *)(a2 + v40[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v59 = *(int *)(v58 + 20);
  uint64_t v60 = a1 + v59;
  uint64_t v61 = a2 + v59;
  uint64_t v62 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 24))(v60, v61, v62);
  *(unsigned char *)(a1 + *(int *)(v58 + 24)) = *(unsigned char *)(a2 + *(int *)(v58 + 24));
  if (a1 != a2)
  {
    uint64_t v63 = *(int *)(a3 + 20);
    uint64_t v64 = (void *)(a1 + v63);
    uint64_t v65 = (void *)(a2 + v63);
    uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_250F7152C(a1 + v63, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
    sub_250F7AD9C(0, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, v66);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v67 = sub_251038080();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16))(v64, v65, v67);
      uint64_t v68 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
      uint64_t v69 = *(int *)(v68 + 20);
      uint64_t v70 = (char *)v64 + v69;
      uint64_t v71 = (char *)v65 + v69;
      uint64_t v72 = sub_251038260();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
      uint64_t v73 = *(int *)(v68 + 24);
      uint64_t v74 = (char *)v64 + v73;
      uint64_t v75 = (char *)v65 + v73;
      uint64_t v76 = sub_251038F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16))(v74, v75, v76);
    }
    else
    {
      *uint64_t v64 = *v65;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_250F7A974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F7A988);
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    sub_250F7AD9C(0, &qword_269B13910, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185D0]);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_250F7AAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_0);
}

void sub_250F7AACC()
{
  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_250F7AD9C(319, &qword_269B12ED0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_250F7ABC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F7ACB0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F7ACCC(uint64_t a1)
{
  return a1;
}

void sub_250F7AD04(uint64_t a1)
{
}

void sub_250F7AD38()
{
  if (!qword_269B13AD0)
  {
    sub_250F78B08();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B13AD0);
    }
  }
}

void sub_250F7AD9C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250F7AE00()
{
  return sub_250F7AEDC(&qword_269B13AD8, (void (*)(uint64_t))sub_250F7AE48);
}

void sub_250F7AE48()
{
  if (!qword_269B13AE0)
  {
    sub_250F7AD04(255);
    sub_250F7AEDC(&qword_269B13AE8, sub_250F7AD04);
    unint64_t v0 = sub_251038BF0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13AE0);
    }
  }
}

uint64_t sub_250F7AEDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_250F7AF24(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037400();
    unint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250F26E08();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    uint64_t v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_250F7B048(uint64_t a1)
{
  uint64_t v2 = sub_251037400();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_250F26E08();
  v3(a1 + *(int *)(v4 + 36), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_250F7B108(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250F26E08();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_250F7B1DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250F26E08();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_250F7B2D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250F26E08();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_250F7B390(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250F26E08();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_250F7B46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F7B480);
}

uint64_t sub_250F7B480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250F26E08();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_250F7B540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F7B554);
}

void sub_250F7B554(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250F26E08();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for IndividualOvernightMetricChartPointCollection()
{
  uint64_t result = qword_26B210EF8;
  if (!qword_26B210EF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250F7B65C()
{
  sub_250F26E08();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_250F7B6FC(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73746E696F70;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250F7B798(void *a1)
{
  uint64_t v3 = v1;
  sub_250F7C5D8(0, &qword_269B13AF8, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250F7C3A0();
  sub_2510398B0();
  LOBYTE(v13) = 0;
  sub_250F26E08();
  sub_250F7C63C(&qword_269B13B08, &qword_269B13B10);
  sub_2510397A0();
  if (!v2)
  {
    unint64_t v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    uint64_t v13 = *(void *)(v3 + v10[5]);
    HIBYTE(v12) = 1;
    sub_250F55D14(0);
    sub_250F7C730(&qword_269B136A8, &qword_269B136B0);
    sub_2510397A0();
    uint64_t v13 = *(void *)(v3 + v10[6]);
    HIBYTE(v12) = 2;
    sub_250F7C3F4();
    sub_250F7C7C0(&qword_269B13B20);
    sub_2510397A0();
    uint64_t v13 = *(void *)(v3 + v10[7]);
    HIBYTE(v12) = 3;
    sub_250F7C44C();
    sub_250F7C4F8();
    sub_2510397A0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_250F7BA80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  sub_250F26E08();
  MEMORY[0x270FA5388](v3);
  uint64_t v17 = (uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7C5D8(0, &qword_269B13B40, MEMORY[0x263F8E040]);
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250F7C3A0();
  uint64_t v9 = v18;
  sub_2510398A0();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v10 = v15;
  uint64_t v11 = (uint64_t)v8;
  LOBYTE(v20) = 0;
  sub_250F7C63C(&qword_269B13B48, &qword_269B13B50);
  uint64_t v12 = v16;
  sub_251039730();
  sub_250F7C6CC(v17, v11);
  sub_250F55D14(0);
  char v19 = 1;
  sub_250F7C730(&qword_269B136C0, &qword_269B136C8);
  sub_251039730();
  *(void *)(v11 + v6[5]) = v20;
  sub_250F7C3F4();
  char v19 = 2;
  sub_250F7C7C0(&qword_269B13B58);
  sub_251039730();
  *(void *)(v11 + v6[6]) = v20;
  sub_250F7C44C();
  char v19 = 3;
  sub_250F7C820();
  sub_251039730();
  (*(void (**)(void, uint64_t))(v10 + 8))(0, v12);
  *(void *)(v11 + v6[7]) = v20;
  sub_250F7CBB8(v11, v14, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_250F7C900(v11, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
}

unint64_t sub_250F7BF2C()
{
  return sub_250F7B6FC(*v0);
}

uint64_t sub_250F7BF34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250F7CEBC(a1, a2);
  *a3 = result;
  return result;
}

void sub_250F7BF5C(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_250F7BF68(uint64_t a1)
{
  unint64_t v2 = sub_250F7C3A0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250F7BFA4(uint64_t a1)
{
  unint64_t v2 = sub_250F7C3A0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250F7BFE0(int *a1)
{
  uint64_t v3 = v1;
  sub_251039850();
  sub_251037400();
  sub_250F7CB70((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
  sub_251039080();
  sub_250F26E08();
  sub_251039080();
  uint64_t v4 = *(void *)(v1 + a1[5]);
  swift_bridgeObjectRetain();
  sub_250FAA5C0((uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  sub_250FAA928((uint64_t)v7, *(void *)(v3 + a1[6]));
  uint64_t v5 = *(void *)(v3 + a1[7]);
  swift_bridgeObjectRetain();
  sub_250FA9DC4(v7, v5);
  swift_bridgeObjectRelease();
  return sub_251039890();
}

uint64_t sub_250F7C0FC(long long *a1, int *a2)
{
  uint64_t v4 = v2;
  sub_251037400();
  sub_250F7CB70((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
  sub_251039080();
  sub_250F26E08();
  sub_251039080();
  uint64_t v6 = *(void *)(v2 + a2[5]);
  swift_bridgeObjectRetain();
  sub_250FAA5C0((uint64_t)a1, v6);
  swift_bridgeObjectRelease();
  sub_250FAA928((uint64_t)a1, *(void *)(v4 + a2[6]));
  uint64_t v7 = *(void *)(v4 + a2[7]);
  swift_bridgeObjectRetain();
  sub_250FA9DC4(a1, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_250F7C20C(uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  sub_251039850();
  sub_251037400();
  sub_250F7CB70((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
  sub_251039080();
  sub_250F26E08();
  sub_251039080();
  uint64_t v5 = *(void *)(v2 + a2[5]);
  swift_bridgeObjectRetain();
  sub_250FAA5C0((uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  sub_250FAA928((uint64_t)v8, *(void *)(v4 + a2[6]));
  uint64_t v6 = *(void *)(v4 + a2[7]);
  swift_bridgeObjectRetain();
  sub_250FA9DC4(v8, v6);
  swift_bridgeObjectRelease();
  return sub_251039890();
}

uint64_t sub_250F7C324@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250F7BA80(a1, a2);
}

uint64_t sub_250F7C33C(void *a1)
{
  return sub_250F7B798(a1);
}

uint64_t sub_250F7C358()
{
  return sub_250F7CB70(&qword_269B13AF0, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPointCollection);
}

unint64_t sub_250F7C3A0()
{
  unint64_t result = qword_269B13B00;
  if (!qword_269B13B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13B00);
  }
  return result;
}

void sub_250F7C3F4()
{
  if (!qword_269B13B18)
  {
    unint64_t v0 = sub_251039270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13B18);
    }
  }
}

void sub_250F7C44C()
{
  if (!qword_269B13B28)
  {
    sub_2510378C0();
    sub_250F55D14(255);
    sub_250F7CB70(&qword_26B210AC0, MEMORY[0x263F42E30]);
    unint64_t v0 = sub_251039060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13B28);
    }
  }
}

unint64_t sub_250F7C4F8()
{
  unint64_t result = qword_269B13B30;
  if (!qword_269B13B30)
  {
    sub_250F7C44C();
    sub_250F7CB70(&qword_269B13B38, MEMORY[0x263F42E30]);
    sub_250F7C730(&qword_269B136A8, &qword_269B136B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13B30);
  }
  return result;
}

void sub_250F7C5D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250F7C3A0();
    unint64_t v7 = a3(a1, &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250F7C63C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F26E08();
    sub_250F7CB70(a2, MEMORY[0x263F07490]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F7C6CC(uint64_t a1, uint64_t a2)
{
  sub_250F26E08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F7C730(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F55D14(255);
    sub_250F7CB70(a2, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F7C7C0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F7C3F4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250F7C820()
{
  unint64_t result = qword_269B13B60;
  if (!qword_269B13B60)
  {
    sub_250F7C44C();
    sub_250F7CB70(&qword_269B13B68, MEMORY[0x263F42E30]);
    sub_250F7C730(&qword_269B136C0, &qword_269B136C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13B60);
  }
  return result;
}

uint64_t sub_250F7C900(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F7C960(uint64_t a1, uint64_t a2)
{
  sub_250F26E08();
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - v8;
  sub_251037400();
  sub_250F7CB70(&qword_269B13308, MEMORY[0x263F07490]);
  char v10 = sub_2510390F0();
  sub_250F7CBB8(a1, (uint64_t)v9, (uint64_t (*)(void))sub_250F26E08);
  sub_250F7CBB8(a2, (uint64_t)v6, (uint64_t (*)(void))sub_250F26E08);
  if ((v10 & 1) == 0)
  {
    sub_250F7C900((uint64_t)v6, (uint64_t (*)(void))sub_250F26E08);
    sub_250F7C900((uint64_t)v9, (uint64_t (*)(void))sub_250F26E08);
LABEL_7:
    char v13 = 0;
    return v13 & 1;
  }
  char v11 = sub_2510390F0();
  sub_250F7C900((uint64_t)v6, (uint64_t (*)(void))sub_250F26E08);
  sub_250F7C900((uint64_t)v9, (uint64_t (*)(void))sub_250F26E08);
  if ((v11 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  if ((sub_250F842FC(*(void *)(a1 + v12[5]), *(void *)(a2 + v12[5])) & 1) == 0
    || !sub_250F84C88(*(void *)(a1 + v12[6]), *(void *)(a2 + v12[6])))
  {
    goto LABEL_7;
  }
  sub_250FBFA6C(*(void *)(a1 + v12[7]), *(void *)(a2 + v12[7]));
  return v13 & 1;
}

uint64_t sub_250F7CB70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F7CBB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for IndividualOvernightMetricChartPointCollection.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IndividualOvernightMetricChartPointCollection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250F7CD7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IndividualOvernightMetricChartPointCollection.CodingKeys()
{
  return &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys;
}

unint64_t sub_250F7CDB8()
{
  unint64_t result = qword_269B13B70;
  if (!qword_269B13B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13B70);
  }
  return result;
}

unint64_t sub_250F7CE10()
{
  unint64_t result = qword_269B13B78;
  if (!qword_269B13B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13B78);
  }
  return result;
}

unint64_t sub_250F7CE68()
{
  unint64_t result = qword_269B13B80;
  if (!qword_269B13B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13B80);
  }
  return result;
}

uint64_t sub_250F7CEBC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x800000025103FDD0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746E696F70 && a2 == 0xE600000000000000 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000025103FDF0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025103FE10)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void sub_250F7D05C(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
}

void sub_250F7D09C(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v23 = a5;
  uint64_t v33 = a4(0);
  uint64_t v9 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v32 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v34 = MEMORY[0x263F8EE78];
  uint64_t v31 = *(void *)(a3 + 16);
  if (v31)
  {
    unint64_t v15 = 0;
    uint64_t v26 = a3;
    uint64_t v27 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v29 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v30 = v9 + 16;
    uint64_t v24 = a1;
    uint64_t v25 = a2;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v17 = *(void *)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v14, a3 + v16 + v17 * v15, v33, v12);
      char v18 = a1(v14);
      if (v5)
      {
        (*v27)(v14, v33);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if (v18)
      {
        uint64_t v28 = *v29;
        v28(v32, v14, v33);
        uint64_t v19 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v23(0, *(void *)(v19 + 16) + 1, 1);
          uint64_t v19 = v34;
        }
        unint64_t v21 = *(void *)(v19 + 16);
        unint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          v23(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v34;
        }
        *(void *)(v19 + 16) = v21 + 1;
        v28((char *)(v19 + v16 + v21 * v17), v32, v33);
        uint64_t v34 = v19;
        a3 = v26;
        a1 = v24;
      }
      else
      {
        (*v27)(v14, v33);
      }
      if (v31 == ++v15) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_250F7D358(void *a1)
{
  int v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250F93C18(0, &qword_269B13CA8, (uint64_t (*)(void))sub_250F93B1C, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v26 = (char *)&v24 - v4;
  sub_250F93C18(0, &qword_269B13CB8, (uint64_t (*)(void))sub_250F93B70, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys, v2);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  MEMORY[0x270FA5388](v5);
  BOOL v7 = (char *)&v24 - v6;
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_250F93C18(0, &qword_269B13CC8, (uint64_t (*)(void))sub_250F93BC4, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys, v2);
  uint64_t v30 = *(void *)(v14 - 8);
  uint64_t v31 = v14;
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250F93BC4();
  sub_2510398B0();
  sub_250F7F7B4(v29, (uint64_t)v13, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *v13;
    char v34 = 1;
    sub_250F93B1C();
    char v18 = v26;
    uint64_t v19 = v31;
    sub_251039750();
    uint64_t v32 = v17;
    sub_250F7F704(0, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
    sub_250F8F1F0();
    uint64_t v20 = v28;
    sub_2510397A0();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v20);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v19);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_250F7F254((uint64_t)v13, (uint64_t)v10);
    char v33 = 0;
    sub_250F93B70();
    uint64_t v22 = v31;
    sub_251039750();
    sub_2510379E0();
    sub_250F8CDC0(&qword_269B13CD8, MEMORY[0x263F42EF8]);
    uint64_t v23 = v25;
    sub_251039760();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
    sub_250F93EE4((uint64_t)v10, qword_26B210D00, MEMORY[0x263F42EF8]);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v16, v22);
  }
}

uint64_t sub_250F7D898@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250F93C18(0, &qword_269B13CE0, (uint64_t (*)(void))sub_250F93B1C, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v44 = v4;
  uint64_t v46 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v50 = (char *)&v37 - v5;
  sub_250F93C18(0, &qword_269B13CE8, (uint64_t (*)(void))sub_250F93B70, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys, v3);
  uint64_t v43 = v6;
  uint64_t v45 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v49 = (char *)&v37 - v7;
  sub_250F93C18(0, &qword_269B13CF0, (uint64_t (*)(void))sub_250F93BC4, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys, v3);
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v37 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v37 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250F93BC4();
  uint64_t v20 = v51;
  sub_2510398A0();
  if (v20) {
    goto LABEL_7;
  }
  uint64_t v39 = v19;
  uint64_t v40 = v16;
  uint64_t v38 = v13;
  uint64_t v22 = v49;
  unint64_t v21 = v50;
  uint64_t v41 = v11;
  uint64_t v23 = v47;
  uint64_t v24 = v48;
  uint64_t v51 = a1;
  uint64_t v25 = sub_251039740();
  if (*(void *)(v25 + 16) != 1)
  {
    uint64_t v27 = sub_2510395A0();
    swift_allocError();
    uint64_t v28 = v10;
    uint64_t v30 = v29;
    sub_250F940FC(0, (unint64_t *)&qword_269B13CF8, (void (*)(uint64_t))sub_250F93C80, MEMORY[0x263F8DCC8]);
    *uint64_t v30 = v41;
    sub_2510396E0();
    sub_251039580();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v30, *MEMORY[0x263F8DCB0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v24);
    a1 = v51;
LABEL_7:
    uint64_t v32 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v32);
  }
  if (*(unsigned char *)(v25 + 32))
  {
    char v54 = 1;
    sub_250F93B1C();
    sub_2510396D0();
    sub_250F7F704(0, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
    sub_250F8F7B4();
    uint64_t v26 = v44;
    sub_251039730();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v21, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    char v34 = v38;
    *uint64_t v38 = v52;
  }
  else
  {
    char v53 = 0;
    sub_250F93B70();
    sub_2510396D0();
    sub_2510379E0();
    sub_250F8CDC0(&qword_269B13D08, MEMORY[0x263F42EF8]);
    uint64_t v31 = v43;
    sub_2510396F0();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    char v34 = v40;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = (uint64_t)v34;
  uint64_t v36 = (uint64_t)v39;
  sub_250F8ED84(v35, (uint64_t)v39, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_250F8ED84(v36, v42, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  uint64_t v32 = (uint64_t)v51;
  return __swift_destroy_boxed_opaque_existential_0(v32);
}

uint64_t sub_250F7DF88()
{
  if (*v0) {
    return 0x6465786966;
  }
  else {
    return 0x5365727574616566;
  }
}

uint64_t sub_250F7DFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250F8EC74(a1, a2);
  *a3 = result;
  return result;
}

void sub_250F7DFF4(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_250F7E000(uint64_t a1)
{
  unint64_t v2 = sub_250F93BC4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250F7E03C(uint64_t a1)
{
  unint64_t v2 = sub_250F93BC4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250F7E080()
{
  return 12383;
}

uint64_t sub_250F7E090(uint64_t a1)
{
  unint64_t v2 = sub_250F93B70();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250F7E0CC(uint64_t a1)
{
  unint64_t v2 = sub_250F93B70();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250F7E108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_2510397F0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_250F7E188(uint64_t a1)
{
  unint64_t v2 = sub_250F93B1C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250F7E1C4(uint64_t a1)
{
  unint64_t v2 = sub_250F93B1C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250F7E204@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250F7D898(a1, a2);
}

uint64_t sub_250F7E21C(void *a1)
{
  return sub_250F7D358(a1);
}

uint64_t OvernightMetricsViewModel.dayRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_2510376B0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t OvernightMetricsViewModel.chronologicalDaySummaries.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for OvernightMetricsViewModel(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_26B210CE8);
}

uint64_t sub_250F7E2F0()
{
  uint64_t v1 = v0;
  sub_250F805C8();
  uint64_t v115 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v116 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v112 = (uint64_t (*)(char *, uint64_t))((char *)&v108 - v5);
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v111 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v113 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v114 = (void (*)(char *, uint64_t))((char *)&v108 - v9);
  MEMORY[0x270FA5388](v10);
  uint64_t v123 = (uint64_t)&v108 - v11;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210A78, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v120 = (uint64_t)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  char v119 = (char *)&v108 - v16;
  uint64_t v121 = sub_251037400();
  uint64_t v124 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v122 = (uint64_t (*)(char *, uint64_t))((char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  unint64_t v131 = (char *)&v108 - v19;
  sub_250F326B0();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v118 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v127);
  uint64_t v117 = (unint64_t *)((char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = sub_2510374F0();
  uint64_t v129 = *(void *)(v23 - 8);
  uint64_t v130 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v126 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v128 = (char *)&v108 - v26;
  uint64_t v27 = sub_2510377E0();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = (uint64_t (*)(uint64_t))MEMORY[0x263F42D70];
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], v12);
  MEMORY[0x270FA5388](v32 - 8);
  char v34 = (char *)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v108 - v36;
  sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v12);
  MEMORY[0x270FA5388](v38 - 8);
  uint64_t v40 = (char *)&v108 - v39;
  uint64_t v41 = sub_250F80630();
  uint64_t v132 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v42 = v132[14];
  swift_bridgeObjectRelease();
  uint64_t v110 = v42;
  *(void *)(v1 + v42) = v41;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v37);
  sub_250F93FB0((uint64_t)v37, (uint64_t)v34, &qword_26B210AB8, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v34, 1, v27) == 1)
  {
    uint64_t v43 = type metadata accessor for OvernightMetricsChartPoint();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v40, 1, 1, v43);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v34, v27);
    sub_250F80B90((uint64_t)v30, (uint64_t)v40);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  sub_250F93EE4((uint64_t)v37, &qword_26B210AB8, MEMORY[0x263F42D70]);
  uint64_t v44 = v132;
  sub_250F8F3EC((uint64_t)v40, v1 + v132[7]);
  uint64_t v45 = swift_bridgeObjectRetain();
  unint64_t v46 = sub_250F813AC(v45, v1);
  swift_bridgeObjectRelease();
  uint64_t v47 = v44[9];
  swift_bridgeObjectRelease();
  *(void *)(v1 + v47) = v46;
  uint64_t v48 = v128;
  sub_251037680();
  uint64_t v49 = v129;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v129 + 16);
  uint64_t v51 = v126;
  uint64_t v52 = v48;
  uint64_t v53 = v130;
  v50(v126, v52, v130);
  uint64_t v54 = (uint64_t)v117;
  unint64_t *v117 = v46;
  v50((char *)(v54 + *(int *)(v127 + 20)), v51, v53);
  swift_bridgeObjectRetain_n();
  uint64_t v55 = sub_2510376F0();
  MEMORY[0x270FA5388](v55);
  uint64_t v106 = v46;
  uint64_t v56 = swift_bridgeObjectRetain();
  uint64_t v57 = sub_250F8CBDC(v56, (void (*)(uint64_t *__return_ptr, uint64_t))sub_250F947E8);
  swift_bridgeObjectRelease();
  if (*(void *)(v57 + 16) >= *(void *)(v55 + 16)) {
    uint64_t v58 = *(void *)(v55 + 16);
  }
  else {
    uint64_t v58 = *(void *)(v57 + 16);
  }
  if (v58)
  {
    sub_250F8CD24();
    uint64_t v59 = sub_251039680();
  }
  else
  {
    uint64_t v59 = MEMORY[0x263F8EE80];
  }
  uint64_t v133 = v59;
  uint64_t v60 = swift_bridgeObjectRetain();
  sub_250F8DFDC(v60, v57, 1, &v133);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = v133;
  uint64_t v62 = *(void (**)(char *, uint64_t))(v49 + 8);
  uint64_t v129 = v49 + 8;
  uint64_t v109 = v62;
  v62(v126, v130);
  swift_bridgeObjectRelease();
  *(void *)(v54 + *(int *)(v127 + 24)) = v61;
  uint64_t v63 = v132;
  uint64_t v64 = v1 + v132[8];
  sub_250F8E484(v64, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_250F8ED84(v54, v64, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  uint64_t v65 = (uint64_t)v118;
  uint64_t v66 = sub_251037660();
  MEMORY[0x270FA5388](v66);
  uint64_t v106 = v1;
  uint64_t v67 = sub_250FECB88((void (*)(char *))sub_250F94030, (uint64_t)(&v108 - 4));
  sub_250F8E484(v65, (uint64_t (*)(void))sub_250F326B0);
  uint64_t v68 = v63[10];
  swift_bridgeObjectRelease();
  uint64_t v125 = v1;
  *(void *)(v1 + v68) = v67;
  if (*(void *)(v67 + 16))
  {
    uint64_t v69 = (void *)v124;
    unint64_t v70 = v67 + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
    uint64_t v71 = (uint64_t)v119;
    uint64_t v72 = v121;
    uint64_t v127 = *(void *)(v124 + 16);
    ((void (*)(char *, unint64_t, uint64_t))v127)(v119, v70, v121);
    uint64_t v126 = (char *)v69[7];
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v126)(v71, 0, 1, v72);
    uint64_t v73 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v69[6];
    if (v73(v71, 1, v72) == 1)
    {
      uint64_t v120 = v71;
      goto LABEL_21;
    }
    uint64_t v74 = v71;
    uint64_t v75 = (void (*)(char *, uint64_t, uint64_t))v69[4];
    v75(v131, v74, v72);
    uint64_t v76 = *(void *)(v67 + 16);
    if (v76)
    {
      uint64_t v77 = v120;
      ((void (*)(uint64_t, unint64_t, uint64_t))v127)(v120, v70 + v69[9] * (v76 - 1), v72);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v126)(v77, 0, 1, v72);
      if (v73(v77, 1, v72) != 1)
      {
        uint64_t v78 = v122;
        v75((char *)v122, v77, v72);
        uint64_t v79 = v123;
        sub_250FB624C(v78, v123);
        sub_250F8F734(v79, v125 + v132[11]);
        sub_250F8CDC0((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
        uint64_t v80 = v131;
        if (sub_2510390C0())
        {
          uint64_t v81 = v115;
          uint64_t v82 = (void (*)(char *, char *, uint64_t))v75;
          uint64_t v83 = v112;
          uint64_t v84 = (char *)v112 + *(int *)(v115 + 48);
          uint64_t v85 = v80;
          uint64_t v86 = (void (*)(char *, uint64_t (*)(char *, uint64_t), uint64_t))v127;
          ((void (*)(uint64_t (*)(char *, uint64_t), char *, uint64_t))v127)(v112, v85, v72);
          uint64_t v126 = v84;
          v86(v84, v78, v72);
          uint64_t v87 = v116;
          uint64_t v88 = &v116[*(int *)(v81 + 48)];
          v86(v116, v83, v72);
          v86(v88, (uint64_t (*)(char *, uint64_t))v84, v72);
          uint64_t v89 = (uint64_t)v113;
          v82(v113, v87, v72);
          long long v90 = *(void (**)(char *, uint64_t))(v124 + 8);
          v90(v88, v72);
          uint64_t v91 = &v87[*(int *)(v81 + 48)];
          v82(v87, (char *)v83, v72);
          v82(v91, v126, v72);
          v82((char *)(v89 + *(int *)(v111 + 36)), v91, v72);
          v90(v87, v72);
          uint64_t v92 = (void (*)(uint64_t (*)(char *, uint64_t), uint64_t))v90;
          uint64_t v93 = v114;
          sub_250F8E3A0(v89, (uint64_t)v114);
          uint64_t v94 = v123;
          uint64_t v95 = v128;
          sub_250FB69C0(v93, v123);
          sub_250F8F2C0((uint64_t)v93, &qword_26B210F90, MEMORY[0x263F8D1A0]);
          uint64_t v96 = v132;
          uint64_t v97 = v125;
          sub_250F8F734(v94, v125 + v132[12]);
          uint64_t v98 = v97;
          uint64_t v99 = *(void *)(*(void *)(v97 + v110) + 16);
          unint64_t v100 = v122;
          uint64_t v101 = v95;
          uint64_t v102 = sub_250FB706C(v99);
          v92(v100, v72);
          v92((uint64_t (*)(char *, uint64_t))v131, v72);
          v109(v101, v130);
          uint64_t v103 = v96[13];
          uint64_t result = swift_bridgeObjectRelease();
          *(void *)(v98 + v103) = v102;
          return result;
        }
        __break(1u);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v126)(v120, 1, 1, v72);
    }
    (*(void (**)(char *, uint64_t))(v124 + 8))(v131, v72);
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v105 = (uint64_t)v119;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v119, 1, 1, v121);
  uint64_t v120 = v105;
LABEL_21:
  sub_250F93EE4(v120, &qword_26B210A78, MEMORY[0x263F07490]);
  int v107 = 0;
  uint64_t v106 = 87;
  uint64_t result = sub_251039640();
  __break(1u);
  return result;
}

uint64_t OvernightMetricsViewModel.featureStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_250F7F7B4(v1 + *(int *)(v6 + 24), (uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return sub_250F7F254((uint64_t)v5, a1);
  }
  sub_250F8E484((uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  uint64_t v7 = sub_2510379E0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
}

uint64_t type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(uint64_t a1)
{
  return sub_250F397EC(a1, qword_26B210D30);
}

uint64_t sub_250F7F254(uint64_t a1, uint64_t a2)
{
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F7F2E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_250F7F7B4(a1 + *(int *)(v7 + 24), (uint64_t)v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return sub_250F7F254((uint64_t)v6, a2);
  }
  sub_250F8E484((uint64_t)v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  uint64_t v8 = sub_2510379E0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 1, 1, v8);
}

uint64_t sub_250F7F410(uint64_t a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EF8];
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v7 - v4;
  sub_250F93FB0(a1, (uint64_t)&v7 - v4, qword_26B210D00, v2);
  return sub_250F7F4DC((uint64_t)v5);
}

uint64_t sub_250F7F4DC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v14 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v14 - v10;
  sub_250F93FB0(a1, (uint64_t)&v14 - v10, qword_26B210D00, MEMORY[0x263F42EF8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = v1 + *(int *)(type metadata accessor for OvernightMetricsViewModel(0) + 24);
  sub_250F7F7B4(v12, (uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_250F8E420((uint64_t)v11, v12);
  sub_250F7F7B4(v12, (uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  LOBYTE(v12) = sub_250F8D938((uint64_t)v5, (uint64_t)v8);
  sub_250F8E484((uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if ((v12 & 1) == 0) {
    sub_250F7E2F0();
  }
  sub_250F8E484((uint64_t)v11, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_250F8E484((uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  return sub_250F93EE4(a1, qword_26B210D00, MEMORY[0x263F42EF8]);
}

uint64_t OvernightMetricsViewModel.emphasizedChartPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_250F93FB0(v1 + *(int *)(v3 + 28), a1, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
}

void sub_250F7F704(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t OvernightMetricsViewModel.chartPointCollection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_250F7F7B4(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
}

uint64_t sub_250F7F7B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t OvernightMetricsViewModel.chartPoints.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.keyDatesForTimeAxis.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.lastKeyDateRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_250F7F8D8(v1 + *(int *)(v3 + 44), a1, &qword_26B210F90, MEMORY[0x263F8D1A0]);
}

uint64_t sub_250F7F8D8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_250F8FF80(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t OvernightMetricsViewModel.keyDatesRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_250F7F8D8(v1 + *(int *)(v3 + 48), a1, &qword_26B210F90, MEMORY[0x263F8D1A0]);
}

uint64_t OvernightMetricsViewModel.oneDayChartIconPositions.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.visibleDataTypes.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v103 = a3;
  uint64_t v99 = a2;
  uint64_t v104 = a1;
  uint64_t v113 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v113);
  uint64_t v102 = (uint64_t)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v101 = (uint64_t)v96 - v7;
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v100 = (uint64_t)v96 - v9;
  sub_250F805C8();
  uint64_t v117 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v105 = (char *)v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v110 = (char *)v96 - v13;
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v111 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v112 = (char *)v96 - v15;
  uint64_t v107 = sub_251037400();
  uint64_t v116 = *(void *)(v107 - 8);
  MEMORY[0x270FA5388](v107);
  uint64_t v115 = (char *)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v114 = (char *)v96 - v18;
  uint64_t v19 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_251037470();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_2510374F0();
  uint64_t v106 = *(char **)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v30 = a4 + *(int *)(v29 + 24);
  uint64_t v31 = sub_2510379E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  uint64_t v98 = v30;
  uint64_t v32 = (int *)v29;
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = *(int *)(v29 + 28);
  uint64_t v34 = a4;
  uint64_t v35 = v26;
  uint64_t v36 = v21;
  uint64_t v37 = (uint64_t)v106;
  uint64_t v118 = v34;
  uint64_t v38 = v34 + v33;
  uint64_t v39 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, *MEMORY[0x263F07740], v22);
  sub_251037480();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  uint64_t v40 = MEMORY[0x263F8EE78];
  *(void *)uint64_t v36 = MEMORY[0x263F8EE78];
  uint64_t v108 = v28;
  uint64_t v109 = (int *)v19;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(&v36[*(int *)(v19 + 20)], v28, v35);
  uint64_t v41 = sub_2510376F0();
  uint64_t v119 = v40;
  uint64_t v42 = swift_bridgeObjectRetain();
  uint64_t v43 = sub_250F8CBDC(v42, (void (*)(uint64_t *__return_ptr, uint64_t))sub_250F8A360);
  swift_bridgeObjectRelease();
  if (*(void *)(v43 + 16) >= *(void *)(v41 + 16)) {
    uint64_t v44 = *(void *)(v41 + 16);
  }
  else {
    uint64_t v44 = *(void *)(v43 + 16);
  }
  if (v44)
  {
    sub_250F8CD24();
    uint64_t v45 = sub_251039680();
  }
  else
  {
    uint64_t v45 = MEMORY[0x263F8EE80];
  }
  uint64_t v120 = v45;
  uint64_t v46 = swift_bridgeObjectRetain();
  sub_250F8DFDC(v46, v43, 1, &v120);
  swift_bridgeObjectRelease();
  uint64_t v47 = v32[8];
  swift_bridgeObjectRelease();
  uint64_t v48 = v118;
  uint64_t v49 = v120;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v108, v35);
  swift_bridgeObjectRelease();
  *(void *)&v36[v109[6]] = v49;
  sub_250F8ED84((uint64_t)v36, v48 + v47, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  uint64_t v50 = MEMORY[0x263F8EE78];
  *(void *)(v48 + v32[9]) = MEMORY[0x263F8EE78];
  *(void *)(v48 + v32[10]) = v50;
  uint64_t v51 = v32[11];
  uint64_t v52 = v114;
  sub_2510373E0();
  uint64_t v53 = v115;
  sub_2510373E0();
  uint64_t v54 = sub_250F8CDC0((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
  uint64_t v55 = v107;
  uint64_t v108 = (char *)v54;
  if ((sub_2510390C0() & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v106 = (char *)(v48 + v51);
  uint64_t v56 = v116;
  uint64_t v57 = *(int *)(v117 + 48);
  uint64_t v58 = v117;
  uint64_t v109 = v32;
  uint64_t v59 = v110;
  uint64_t v60 = &v110[v57];
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
  v61(v110, v52, v55);
  v61(v60, v53, v55);
  uint64_t v62 = v105;
  uint64_t v63 = &v105[*(int *)(v58 + 48)];
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  v64(v105, v59, v55);
  v96[1] = v56 + 16;
  v96[0] = v64;
  v64(v63, v60, v55);
  uint64_t v65 = v112;
  v61(v112, v62, v55);
  uint64_t v66 = *(void (**)(char *, uint64_t))(v56 + 8);
  v66(v63, v55);
  uint64_t v67 = &v62[*(int *)(v117 + 48)];
  uint64_t v68 = v59;
  uint64_t v69 = v61;
  v61(v62, v68, v55);
  v61(v67, v60, v55);
  v61(&v65[*(int *)(v111 + 36)], v67, v55);
  uint64_t v116 = v56 + 8;
  uint64_t v97 = v66;
  v66(v62, v55);
  uint64_t v70 = (uint64_t)v65;
  uint64_t v72 = v114;
  uint64_t v71 = v115;
  sub_250F8E3A0(v70, (uint64_t)v106);
  uint64_t v73 = v109[12];
  sub_2510373E0();
  sub_2510373E0();
  if ((sub_2510390C0() & 1) == 0)
  {
LABEL_13:
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v74 = v117;
  uint64_t v108 = (char *)(v118 + v73);
  uint64_t v75 = v110;
  uint64_t v76 = (uint64_t)&v110[*(int *)(v117 + 48)];
  v69(v110, v72, v55);
  uint64_t v106 = (char *)v76;
  v69((char *)v76, v71, v55);
  uint64_t v77 = &v62[*(int *)(v74 + 48)];
  uint64_t v78 = (void (*)(char *, uint64_t, uint64_t))v96[0];
  ((void (*)(char *, char *, uint64_t))v96[0])(v62, v75, v55);
  v78(v77, v76, v55);
  uint64_t v79 = (uint64_t)v112;
  v69(v112, v62, v55);
  uint64_t v80 = v97;
  v97(v77, v55);
  uint64_t v81 = &v62[*(int *)(v74 + 48)];
  v69(v62, v75, v55);
  v69(v81, v106, v55);
  v69((char *)(v79 + *(int *)(v111 + 36)), v81, v55);
  v80(v62, v55);
  sub_250F8E3A0(v79, (uint64_t)v108);
  uint64_t v82 = v109;
  uint64_t v83 = MEMORY[0x263F8EE78];
  uint64_t v84 = v118;
  *(void *)(v118 + v109[13]) = MEMORY[0x263F8EE78];
  *(void *)(v84 + v82[14]) = v83;
  uint64_t v85 = sub_2510376B0();
  uint64_t v86 = *(void *)(v85 - 8);
  uint64_t v87 = v104;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v84, v104, v85);
  *(void *)(v84 + v82[5]) = v99;
  uint64_t v88 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EF8];
  uint64_t v89 = v103;
  uint64_t v90 = v100;
  sub_250F93FB0(v103, v100, qword_26B210D00, MEMORY[0x263F42EF8]);
  uint64_t v91 = v101;
  sub_250F93FB0(v90, v101, qword_26B210D00, v88);
  swift_storeEnumTagMultiPayload();
  uint64_t v92 = v98;
  uint64_t v93 = v102;
  sub_250F7F7B4(v98, v102, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_250F8E420(v91, v92);
  if ((sub_250F8D938(v92, v93) & 1) == 0) {
    sub_250F7E2F0();
  }
  sub_250F8E484(v91, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_250F8E484(v93, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  uint64_t v94 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EF8];
  sub_250F93EE4(v90, qword_26B210D00, MEMORY[0x263F42EF8]);
  sub_250F7E2F0();
  sub_250F93EE4(v89, qword_26B210D00, v94);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v87, v85);
}

void sub_250F805C8()
{
  if (!qword_26B210A70)
  {
    sub_251037400();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B210A70);
    }
  }
}

void *sub_250F80630()
{
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (void **)((char *)v13 - v2);
  uint64_t v4 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_250F7F7B4((uint64_t)v0 + *(int *)(v7 + 24), (uint64_t)v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return *(void **)v6;
  }
  sub_250F7F254((uint64_t)v6, (uint64_t)v3);
  uint64_t v9 = sub_2510376F0();
  MEMORY[0x270FA5388](v9);
  v13[-2] = v3;
  v13[-1] = v0;
  sub_250F7D09C(sub_250F94178, (uint64_t)&v13[-4], v10, MEMORY[0x263F42CD0], (void (*)(BOOL, uint64_t, uint64_t))sub_250FF1CEC);
  v13[0] = v11;
  swift_bridgeObjectRetain();
  sub_250F8A368(v13);
  swift_bridgeObjectRelease();
  uint64_t v8 = v13[0];
  sub_250F93EE4((uint64_t)v3, qword_26B210D00, MEMORY[0x263F42EF8]);
  return v8;
}

uint64_t OvernightMetricsViewModel.daySummaryForToday.getter@<X0>(uint64_t a1@<X8>)
{
  sub_250F326B0();
  uint64_t v25 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251038ED0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v26 = sub_2510377E0();
  uint64_t v13 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v1 + *(int *)(type metadata accessor for OvernightMetricsViewModel(0) + 20));
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v24 = a1;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v15, v16+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * (v17 - 1), v26);
    sub_251037790();
    sub_251037660();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, &v5[*(int *)(v25 + 36)], v6);
    sub_250F8E484((uint64_t)v5, (uint64_t (*)(void))sub_250F326B0);
    sub_250F8CDC0(&qword_26B210BB0, MEMORY[0x263F090E8]);
    sub_2510394D0();
    uint64_t v18 = v27;
    uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v10, v6);
    v19(v12, v6);
    if (v18)
    {
      uint64_t v20 = v26;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
      uint64_t v21 = 1;
      a1 = v24;
    }
    else
    {
      a1 = v24;
      uint64_t v20 = v26;
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24, v15, v26);
      uint64_t v21 = 0;
    }
    uint64_t v22 = v20;
  }
  else
  {
    uint64_t v21 = 1;
    uint64_t v22 = v26;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, v21, 1, v22);
}

uint64_t sub_250F80B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v89 = a1;
  uint64_t v85 = a2;
  uint64_t v87 = sub_251037940();
  uint64_t v4 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_251037740();
  uint64_t v7 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_251038ED0();
  uint64_t v76 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v75 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_251037400();
  uint64_t v83 = *(void *)(v12 - 8);
  uint64_t v84 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v80 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v81 = (char *)&v72 - v15;
  uint64_t v82 = sub_2510374F0();
  uint64_t v79 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v77 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v78 = (char *)&v72 - v18;
  uint64_t v19 = sub_2510376F0();
  uint64_t v20 = (void *)sub_250F2FA4C(MEMORY[0x263F8EE78]);
  uint64_t v21 = *(void *)(v19 + 16);
  if (!v21)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v55 = v78;
    sub_251037680();
    uint64_t v56 = v75;
    sub_251037790();
    uint64_t v57 = v81;
    sub_251038EC0();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v10);
    uint64_t v58 = *(void *)(v3 + *(int *)(type metadata accessor for OvernightMetricsViewModel(0) + 56));
    unint64_t v59 = *(void *)(v58 + 16);
    uint64_t v60 = sub_250FB706C(v59);
    uint64_t v61 = v60;
    if (*(void *)(v60 + 16) >= v59) {
      unint64_t v62 = v59;
    }
    else {
      unint64_t v62 = *(void *)(v60 + 16);
    }
    if (v62)
    {
      sub_250F94050(0, &qword_26B210BF8, MEMORY[0x263F07490]);
      uint64_t v63 = sub_251039680();
    }
    else
    {
      uint64_t v63 = MEMORY[0x263F8EE80];
    }
    uint64_t v95 = (void *)v63;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_250F8BC98(v58, v61, 1, &v95);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v64 = (uint64_t)v95;
    uint64_t v66 = v83;
    uint64_t v65 = v84;
    uint64_t v67 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v80, v57, v84);
    uint64_t v68 = v79;
    uint64_t v69 = (uint64_t)v77;
    uint64_t v70 = v82;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v77, v55, v82);
    sub_250FA47D0(v67, (uint64_t)v20, v64, v69, v85);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v57, v65);
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v55, v70);
  }
  uint64_t v73 = v10;
  uint64_t v74 = v3;
  uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  uint64_t v22 = v7 + 16;
  unint64_t v24 = v19 + ((*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64));
  uint64_t v94 = *(void *)(v22 + 56);
  uint64_t v25 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v90 = (void (**)(unint64_t, uint64_t))(v22 - 8);
  uint64_t v91 = v23;
  uint64_t v72 = v19;
  swift_bridgeObjectRetain();
  uint64_t v26 = v88;
  uint64_t v27 = v22;
  uint64_t v28 = v25;
  uint64_t v86 = v27;
  while (1)
  {
    v91(v9, v24, v26);
    sub_2510377A0();
    uint64_t v30 = sub_251037850();
    int v32 = v31;
    if (v31)
    {
      char v33 = sub_251037860();
      uint64_t v34 = *v28;
      if ((v33 & 1) == 0)
      {
        v34(v6, v87);
        swift_bridgeObjectRetain();
        unint64_t v51 = sub_250FCB6DC((uint64_t)v9);
        char v53 = v52;
        swift_bridgeObjectRelease();
        if (v53)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v95 = v20;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_250FCE1B0();
            uint64_t v20 = v95;
          }
          uint64_t v26 = v88;
          (*v90)(v20[6] + v51 * v94, v88);
          uint64_t v20 = v95;
          sub_250F8C8DC(v51, (uint64_t)v95);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v26 = v88;
        }
        goto LABEL_5;
      }
      int v93 = v32;
      uint64_t v92 = 0;
    }
    else
    {
      uint64_t v92 = v30;
      int v93 = v31;
      uint64_t v34 = *v28;
    }
    uint64_t v35 = v6;
    uint64_t v36 = v28;
    v34(v6, v87);
    int v37 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v95 = v20;
    uint64_t v38 = (uint64_t)v9;
    unint64_t v40 = sub_250FCB6DC((uint64_t)v9);
    uint64_t v41 = v20[2];
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      break;
    }
    char v44 = v39;
    if (v20[3] >= v43)
    {
      uint64_t v26 = v88;
      if (v37) {
        goto LABEL_16;
      }
      sub_250FCE1B0();
    }
    else
    {
      sub_250FCCFC0(v43, v37);
      unint64_t v45 = sub_250FCB6DC(v38);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_35;
      }
      unint64_t v40 = v45;
    }
    uint64_t v26 = v88;
LABEL_16:
    uint64_t v20 = v95;
    if (v44)
    {
      uint64_t v29 = v95[7] + 16 * v40;
      *(void *)uint64_t v29 = v92;
      *(unsigned char *)(v29 + 8) = v93 & 1;
    }
    else
    {
      v95[(v40 >> 6) + 8] |= 1 << v40;
      v91((char *)(v20[6] + v40 * v94), v38, v26);
      uint64_t v47 = v20[7] + 16 * v40;
      *(void *)uint64_t v47 = v92;
      *(unsigned char *)(v47 + 8) = v93 & 1;
      uint64_t v48 = v20[2];
      BOOL v49 = __OFADD__(v48, 1);
      uint64_t v50 = v48 + 1;
      if (v49) {
        goto LABEL_34;
      }
      v20[2] = v50;
    }
    swift_bridgeObjectRelease();
    uint64_t v6 = v35;
    uint64_t v9 = (char *)v38;
    uint64_t v28 = v36;
LABEL_5:
    (*v90)((unint64_t)v9, v26);
    v24 += v94;
    if (!--v21)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v74;
      uint64_t v10 = v73;
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  sub_251039810();
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t sub_250F813AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v32 = (uint64_t)v27 - v16;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17) {
    return MEMORY[0x263F8EE78];
  }
  v27[2] = v2;
  uint64_t v18 = *(void *)(sub_2510377E0() - 8);
  uint64_t v19 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  uint64_t v30 = v12;
  uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v33 = *(void *)(v18 + 72);
  v27[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v21 = MEMORY[0x263F8EE78];
  uint64_t v28 = a2;
  uint64_t v29 = v14;
  uint64_t v31 = v11;
  do
  {
    sub_250F7F7B4(a2, (uint64_t)v7, type metadata accessor for OvernightMetricsViewModel);
    sub_250F80B90(v19, (uint64_t)v10);
    sub_250F8E484((uint64_t)v7, type metadata accessor for OvernightMetricsViewModel);
    if ((*v20)(v10, 1, v11) == 1)
    {
      sub_250F93EE4((uint64_t)v10, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    }
    else
    {
      uint64_t v22 = v32;
      sub_250F8ED84((uint64_t)v10, v32, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      sub_250F8ED84(v22, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v21 = sub_250FA0F28(0, *(void *)(v21 + 16) + 1, 1, v21);
      }
      unint64_t v24 = *(void *)(v21 + 16);
      unint64_t v23 = *(void *)(v21 + 24);
      if (v24 >= v23 >> 1) {
        unint64_t v21 = sub_250FA0F28(v23 > 1, v24 + 1, 1, v21);
      }
      *(void *)(v21 + 16) = v24 + 1;
      uint64_t v25 = v21
          + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
          + *(void *)(v30 + 72) * v24;
      uint64_t v14 = v29;
      sub_250F8ED84((uint64_t)v29, v25, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      a2 = v28;
      uint64_t v11 = v31;
    }
    v19 += v33;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  return v21;
}

void *sub_250F81778(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = *v2;
    if (*v2)
    {
      uint64_t v6 = *(v2 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_250FA15A0(0, v3[2] + 1, 1, v3);
      }
      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1) {
        uint64_t v3 = sub_250FA15A0((void *)(v7 > 1), v8 + 1, 1, v3);
      }
      v3[2] = v8 + 1;
      uint64_t v4 = &v3[2 * v8];
      v4[4] = v6;
      v4[5] = v5;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OvernightMetricsViewModel.filtered(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_2510376B0();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v2, v9, v11);
  sub_250F8CDC0(&qword_269B13B88, MEMORY[0x263F42C20]);
  char v14 = sub_2510390F0();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
  if (v14) {
    return sub_250F7F7B4(v3, a2, type metadata accessor for OvernightMetricsViewModel);
  }
  uint64_t v16 = sub_250F7F7B4(v3, (uint64_t)v8, type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x270FA5388](v16);
  *(void *)&v19[-16] = a1;
  uint64_t v17 = &v8[*(int *)(v6 + 20)];
  uint64_t result = sub_250F8C4C8((uint64_t (*)(unint64_t))sub_250F8E4E4, (uint64_t)&v19[-32], MEMORY[0x263F42D70], (uint64_t (*)(uint64_t))sub_250F8A424);
  uint64_t v18 = *(void *)(*(void *)v17 + 16);
  if (v18 < result)
  {
    __break(1u);
  }
  else
  {
    sub_250F93CEC(result, v18, (uint64_t (*)(void))sub_250FA182C, MEMORY[0x263F42D70]);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 24))(v8, a1, v9);
    sub_250F7E2F0();
    return sub_250F8ED84((uint64_t)v8, a2, type metadata accessor for OvernightMetricsViewModel);
  }
  return result;
}

uint64_t sub_250F81B60()
{
  uint64_t v0 = sub_251038ED0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v17 - v5;
  sub_250F326B0();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v17 - v11;
  sub_251037660();
  sub_251037790();
  sub_250F8CDC0(&qword_26B210BA0, MEMORY[0x263F090E8]);
  char v13 = sub_2510390B0();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  sub_250F7F7B4((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))sub_250F326B0);
  if (v13) {
    char v14 = sub_2510390C0() ^ 1;
  }
  else {
    char v14 = 1;
  }
  sub_250F8E484((uint64_t)v9, (uint64_t (*)(void))sub_250F326B0);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v1 + 8);
  v15(v3, v0);
  v15(v6, v0);
  sub_250F8E484((uint64_t)v12, (uint64_t (*)(void))sub_250F326B0);
  return v14 & 1;
}

uint64_t OvernightMetricsViewModel.withFallbackVisibleDataTypes(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - v10);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v21 - v13;
  uint64_t v15 = type metadata accessor for OvernightMetricsViewModel(0);
  if (sub_250F84D3C(a1, *(void *)(v3 + *(int *)(v15 + 56)), MEMORY[0x263F42CD0], &qword_26B210A90, MEMORY[0x263F42CD0], MEMORY[0x263F42CE8]))return sub_250F7F7B4(v3, a2, type metadata accessor for OvernightMetricsViewModel); {
  uint64_t v17 = v3 + *(int *)(v15 + 24);
  }
  uint64_t v18 = sub_2510379E0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 1, 1, v18);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v17) = sub_250F8D938(v17, (uint64_t)v14);
  sub_250F8E484((uint64_t)v14, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  uint64_t result = sub_250F7F7B4(v3, a2, type metadata accessor for OvernightMetricsViewModel);
  if (v17)
  {
    uint64_t *v11 = a1;
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a2 + *(int *)(v15 + 24);
    sub_250F7F7B4(v19, (uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    swift_bridgeObjectRetain();
    sub_250F8E420((uint64_t)v11, v19);
    sub_250F7F7B4(v19, (uint64_t)v14, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    char v20 = sub_250F8D938((uint64_t)v14, (uint64_t)v8);
    sub_250F8E484((uint64_t)v14, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if ((v20 & 1) == 0) {
      sub_250F7E2F0();
    }
    sub_250F8E484((uint64_t)v11, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    return sub_250F8E484((uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  }
  return result;
}

uint64_t OvernightMetricsViewModel.localizedTitle.getter()
{
  uint64_t v0 = sub_251037460();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_251039180();
  MEMORY[0x270FA5388](v1 - 8);
  sub_251039100();
  type metadata accessor for HealthBalanceUI();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  return sub_2510391D0();
}

uint64_t OvernightMetricsViewModel.primaryTintColor.getter()
{
  uint64_t v0 = OvernightMetricsViewModel.changeDetectedCountToday.getter();
  if ((v1 & 1) == 0)
  {
    if (v0 == 1)
    {
      if (qword_269B12BA8 != -1) {
        swift_once();
      }
      uint64_t v2 = (void *)qword_269B14138;
    }
    else if (v0)
    {
      if (qword_26B210180 != -1) {
        swift_once();
      }
      uint64_t v2 = (void *)qword_26B210330;
    }
    else
    {
      if (qword_26B210178 != -1) {
        swift_once();
      }
      uint64_t v2 = (void *)qword_26B210328;
    }
    id v4 = v2;
    JUMPOUT(0x2533907A0);
  }
  return sub_251038A90();
}

uint64_t OvernightMetricsViewModel.changeDetectedCountToday.getter()
{
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v9 - v1;
  uint64_t v3 = sub_2510377E0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250F93EE4((uint64_t)v2, &qword_26B210AB8, MEMORY[0x263F42D70]);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  if ((sub_2510377D0() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  uint64_t v7 = MEMORY[0x25338F500]();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t OvernightMetricsViewModel.backgroundColor.getter()
{
  uint64_t v0 = sub_251037C50();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OvernightMetricsViewModel.changeDetectedCountToday.getter();
  if (v5)
  {
    return sub_251038A90();
  }
  else
  {
    if (v4 == 1)
    {
      if (qword_269B12BD0 != -1) {
        swift_once();
      }
      uint64_t v6 = qword_269B1AD70;
    }
    else if (v4)
    {
      if (qword_269B12BC8 != -1) {
        swift_once();
      }
      uint64_t v6 = qword_269B1AD58;
    }
    else
    {
      if (qword_269B12BC0 != -1) {
        swift_once();
      }
      uint64_t v6 = qword_269B1AD40;
    }
    uint64_t v8 = __swift_project_value_buffer(v0, (uint64_t)v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v8, v0);
    return sub_251038B20();
  }
}

uint64_t OvernightMetricsViewModel.learnMoreTitle.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v32 - v2;
  uint64_t v4 = sub_2510377E0();
  uint64_t v36 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v33 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251037AA0();
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_251037460();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v38 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_251039180();
  MEMORY[0x270FA5388](v11 - 8);
  int v37 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.warmupProgress.getter((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_250F93EE4((uint64_t)v15, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  else
  {
    sub_250F8ED84((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    if ((sub_2510375F0() & 1) == 0)
    {
      sub_251039100();
      type metadata accessor for HealthBalanceUI();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v30 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_251037450();
      uint64_t v28 = sub_2510391D0();
      sub_250F8E484((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
      return v28;
    }
    sub_250F8E484((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v3);
  uint64_t v20 = v36;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v3, 1, v4) == 1)
  {
    sub_250F93EE4((uint64_t)v3, &qword_26B210AB8, MEMORY[0x263F42D70]);
LABEL_9:
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t v26 = swift_getObjCClassFromMetadata();
    id v25 = objc_msgSend(self, sel_bundleForClass_, v26);
    goto LABEL_10;
  }
  uint64_t v21 = v33;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v33, v3, v4);
  sub_251037A60();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v4);
  sub_251037A70();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
  if (!v23) {
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  sub_251039100();
  type metadata accessor for HealthBalanceUI();
  uint64_t v24 = swift_getObjCClassFromMetadata();
  id v25 = objc_msgSend(self, sel_bundleForClass_, v24);
LABEL_10:
  id v27 = v25;
  sub_251037450();
  return sub_2510391D0();
}

uint64_t OvernightMetricsViewModel.warmupProgress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251037640();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = sub_2510377E0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_250F93EE4((uint64_t)v8, &qword_26B210AB8, MEMORY[0x263F42D70]);
    uint64_t v13 = type metadata accessor for OvernightMetricsWarmupProgress();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    uint64_t v25 = a1;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    sub_251037B60();
    uint64_t v15 = sub_2510376F0();
    v24[1] = v24;
    MEMORY[0x270FA5388](v15);
    v24[-2] = v12;
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_250F8E504(v16, (void (*)(uint64_t))sub_250F8EDEC, (uint64_t)&v24[-4]);
    swift_bridgeObjectRelease();
    if (*(void *)(v17 + 16) >= *(void *)(v15 + 16)) {
      uint64_t v18 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    if (v18)
    {
      sub_250F94050(0, (unint64_t *)&qword_26B2102F8, MEMORY[0x263F42BC0]);
      uint64_t v19 = sub_251039680();
    }
    else
    {
      uint64_t v19 = MEMORY[0x263F8EE80];
    }
    uint64_t v26 = v19;
    uint64_t v20 = swift_bridgeObjectRetain();
    sub_250F8E6F8(v20, v17, 1, &v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v25;
    uint64_t v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v25, v5, v2);
    uint64_t v23 = type metadata accessor for OvernightMetricsWarmupProgress();
    *(void *)(v22 + *(int *)(v23 + 20)) = v21;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
}

id sub_250F830C4()
{
  uint64_t v1 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_250F7F7B4(v0 + *(int *)(v7 + 24), (uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_250F8E484((uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v8 = sub_2510379E0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
LABEL_4:
    sub_250F93EE4((uint64_t)v6, qword_26B210D00, MEMORY[0x263F42EF8]);
    return 0;
  }
  sub_250F7F254((uint64_t)v3, (uint64_t)v6);
  uint64_t v9 = sub_2510379E0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1) {
    goto LABEL_4;
  }
  uint64_t v13 = sub_2510379C0();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
  if (*(void *)(v13 + 16))
  {
    id v14 = (id)*MEMORY[0x263F097F0];
    unint64_t v15 = sub_250FCB8CC((uint64_t)v14);
    if (v16)
    {
      id v17 = *(id *)(*(void *)(v13 + 56) + 8 * v15);

      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v17, sel_objectForKeyedSubscript_, *MEMORY[0x263F09600]);

      id v11 = objc_msgSend(v18, sel_areAllRequirementsSatisfied);
      return v11;
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t OvernightMetricsViewModel.learnMoreDescription.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v47 - v2;
  uint64_t v4 = sub_2510377E0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_251037AA0();
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v48 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  BOOL v49 = (char *)&v47 - v10;
  uint64_t v11 = sub_251037460();
  MEMORY[0x270FA5388](v11 - 8);
  *(void *)&long long v53 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_251039180();
  MEMORY[0x270FA5388](v13 - 8);
  char v52 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v0);
  MEMORY[0x270FA5388](v15 - 8);
  id v17 = (char *)&v47 - v16;
  uint64_t v18 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.warmupProgress.getter((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_250F93EE4((uint64_t)v17, &qword_26B210278, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  else
  {
    sub_250F8ED84((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    if ((sub_2510375F0() & 1) == 0)
    {
      sub_250F830C4();
      sub_251039100();
      type metadata accessor for HealthBalanceUI();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v45 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_251037450();
      uint64_t v24 = sub_2510391D0();
      sub_250F8E484((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
      return v24;
    }
    sub_250F8E484((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_250F93EE4((uint64_t)v3, &qword_26B210AB8, MEMORY[0x263F42D70]);
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t v22 = swift_getObjCClassFromMetadata();
    id v23 = objc_msgSend(self, sel_bundleForClass_, v22);
    sub_251037450();
    return sub_2510391D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    uint64_t v25 = v48;
    sub_251037A60();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v26 = v50;
    id v27 = v49;
    uint64_t v28 = v51;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v25, v51);
    uint64_t v30 = sub_251037A70();
    if (v29)
    {
      uint64_t v31 = v29;
      sub_250F8EDF4();
      uint64_t inited = swift_initStackObject();
      long long v53 = xmmword_25103A670;
      *(_OWORD *)(inited + 16) = xmmword_25103A670;
      *(void *)(inited + 32) = v30;
      *(void *)(inited + 40) = v31;
      *(void *)(inited + 48) = sub_251037A80();
      *(void *)(inited + 56) = v33;
      uint64_t v34 = v27;
      uint64_t v35 = sub_250F81778(inited);
      swift_bridgeObjectRelease();
      uint64_t v54 = v35;
      sub_250F8EE68(0, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D488]);
      sub_250F8EEB8();
      uint64_t v36 = sub_2510390A0();
      uint64_t v38 = v37;
      swift_bridgeObjectRelease();
      uint64_t v39 = swift_initStackObject();
      *(_OWORD *)(v39 + 16) = v53;
      *(void *)(v39 + 32) = v36;
      *(void *)(v39 + 40) = v38;
      *(void *)(v39 + 48) = sub_251037A90();
      *(void *)(v39 + 56) = v40;
      uint64_t v41 = sub_250F81778(v39);
      swift_bridgeObjectRelease();
      uint64_t v54 = v41;
      uint64_t v24 = sub_2510390A0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v28);
    }
    else
    {
      sub_251039100();
      type metadata accessor for HealthBalanceUI();
      uint64_t v42 = swift_getObjCClassFromMetadata();
      id v43 = objc_msgSend(self, sel_bundleForClass_, v42);
      sub_251037450();
      uint64_t v24 = sub_2510391D0();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
    }
  }
  return v24;
}

uint64_t OvernightMetricsViewModel.isLearnMoreDescriptionEligibleForAnnotations.getter()
{
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v7 - v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v7 - v1);
  uint64_t v3 = sub_2510377E0();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250F93EE4((uint64_t)v2, &qword_26B210AB8, MEMORY[0x263F42D70]);
    char v5 = 0;
  }
  else
  {
    char v5 = sub_2510377D0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5 & 1;
}

uint64_t sub_250F83D84(uint64_t a1, uint64_t a2)
{
  sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v63 - v9;
  uint64_t v11 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v17 = (char *)&v63 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    if (!v18 || a1 == a2) {
      return 1;
    }
    uint64_t v19 = 0;
    unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v21 = a1 + v20;
    uint64_t v22 = a2 + v20;
    uint64_t v23 = *(void *)(v15 + 72);
    uint64_t v68 = v13;
    uint64_t v69 = (char *)&v63 - v16;
    uint64_t v66 = v18;
    uint64_t v67 = v11;
    uint64_t v64 = a2 + v20;
    uint64_t v65 = v21;
    uint64_t v63 = v23;
    while (1)
    {
      uint64_t v70 = v19;
      uint64_t v24 = v23 * v19;
      sub_250F7F7B4(v21 + v23 * v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      sub_250F7F7B4(v22 + v24, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      if ((sub_2510373D0() & 1) == 0) {
        break;
      }
      uint64_t v25 = v11;
      uint64_t v26 = v5;
      uint64_t v27 = v25[5];
      uint64_t v28 = (uint64_t)&v17[v27];
      uint64_t v29 = (uint64_t)&v13[v27];
      sub_251037400();
      sub_250F8CDC0(&qword_269B13308, MEMORY[0x263F07490]);
      char v30 = sub_2510390F0();
      uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      sub_250F7F8D8(v28, (uint64_t)v10, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      sub_250F7F8D8(v29, (uint64_t)v7, (unint64_t *)&qword_26B210F98, v31);
      if ((v30 & 1) == 0)
      {
        unint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
        sub_250F8F2C0((uint64_t)v7, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
        sub_250F8F2C0((uint64_t)v10, (unint64_t *)&qword_26B210F98, v62);
        uint64_t v13 = v68;
        id v17 = v69;
        break;
      }
      uint64_t v5 = v26;
      char v32 = sub_2510390F0();
      uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      sub_250F8F2C0((uint64_t)v7, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      sub_250F8F2C0((uint64_t)v10, (unint64_t *)&qword_26B210F98, v33);
      uint64_t v13 = v68;
      id v17 = v69;
      uint64_t v11 = v67;
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v34 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      if ((sub_250F842FC(*(void *)(v28 + v34[5]), *(void *)(v29 + v34[5])) & 1) == 0) {
        break;
      }
      uint64_t v35 = v34[6];
      uint64_t v36 = *(void *)(v28 + v35);
      uint64_t v37 = *(void *)(v29 + v35);
      uint64_t v38 = *(void *)(v36 + 16);
      if (v38 != *(void *)(v37 + 16)) {
        break;
      }
      if (v38) {
        BOOL v39 = v36 == v37;
      }
      else {
        BOOL v39 = 1;
      }
      if (!v39)
      {
        if (*(double *)(v36 + 32) != *(double *)(v37 + 32)) {
          break;
        }
        id v45 = (double *)(v36 + 40);
        char v46 = (double *)(v37 + 40);
        uint64_t v47 = v38 - 1;
        while (v47)
        {
          double v48 = *v45++;
          double v49 = v48;
          double v50 = *v46++;
          --v47;
          if (v49 != v50) {
            goto LABEL_44;
          }
        }
      }
      sub_250FBFA6C(*(void *)(v28 + v34[7]), *(void *)(v29 + v34[7]));
      if ((v40 & 1) == 0) {
        break;
      }
      uint64_t v41 = v11[6];
      uint64_t v42 = (double *)&v17[v41];
      char v43 = v17[v41 + 16];
      char v44 = &v13[v41];
      if (v43)
      {
        if (!v44[16]) {
          break;
        }
      }
      else
      {
        if (v44[16]) {
          break;
        }
        if (*v42 != *(double *)v44 || v42[1] != *((double *)v44 + 1)) {
          break;
        }
      }
      if (v17[v11[7]] != v13[v11[7]] || v17[v11[8]] != v13[v11[8]] || v17[v11[9]] != v13[v11[9]]) {
        break;
      }
      uint64_t v52 = v11[10];
      uint64_t v53 = *(void *)&v17[v52];
      uint64_t v54 = *(void *)&v17[v52 + 8];
      uint64_t v55 = &v13[v52];
      if ((v53 != *(void *)v55 || v54 != *((void *)v55 + 1)) && (sub_2510397F0() & 1) == 0) {
        break;
      }
      uint64_t v56 = v11[11];
      uint64_t v57 = *(void *)&v17[v56];
      uint64_t v58 = *(void *)&v17[v56 + 8];
      unint64_t v59 = &v13[v56];
      if (v57 == *(void *)v59 && v58 == *((void *)v59 + 1))
      {
        sub_250F8E484((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
        sub_250F8E484((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      }
      else
      {
        char v60 = sub_2510397F0();
        sub_250F8E484((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
        sub_250F8E484((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
        if ((v60 & 1) == 0) {
          return 0;
        }
      }
      uint64_t v19 = v70 + 1;
      uint64_t result = 1;
      uint64_t v21 = v65;
      uint64_t v23 = v63;
      uint64_t v22 = v64;
      if (v70 + 1 == v66) {
        return result;
      }
    }
LABEL_44:
    sub_250F8E484((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    sub_250F8E484((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
  }
  return 0;
}

uint64_t sub_250F842FC(uint64_t a1, uint64_t a2)
{
  sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v67 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v67 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v67 - v15;
  uint64_t v17 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  MEMORY[0x270FA5388](v17);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v67 - v20;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23 == *(void *)(a2 + 16))
  {
    uint64_t v78 = v21;
    uint64_t v72 = v10;
    uint64_t v73 = v16;
    uint64_t v74 = v13;
    if (!v23 || a1 == a2) {
      return 1;
    }
    unint64_t v24 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v68 = *(void *)(v19 + 72);
    uint64_t v69 = a1;
    uint64_t v25 = v78;
    uint64_t v70 = a2;
    uint64_t v71 = v7;
    uint64_t v77 = (char *)&v67 - v20;
    while (1)
    {
      uint64_t v75 = v23;
      sub_250F7F7B4(a1 + v24, (uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
      unint64_t v76 = v24;
      sub_250F7F7B4(a2 + v24, v25, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_251037740();
      sub_250F8CDC0(&qword_26B210A98, MEMORY[0x263F42CD0]);
      sub_251039240();
      sub_251039240();
      if (v80 != v79 || (sub_2510373D0() & 1) == 0) {
        break;
      }
      uint64_t v29 = v5;
      char v30 = (int *)v17;
      uint64_t v31 = *(int *)(v17 + 24);
      uint64_t v32 = (uint64_t)&v22[v31];
      uint64_t v33 = v25 + v31;
      sub_251037400();
      sub_250F8CDC0(&qword_269B13308, MEMORY[0x263F07490]);
      char v34 = sub_2510390F0();
      uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      uint64_t v36 = (uint64_t)v73;
      sub_250F7F8D8(v32, (uint64_t)v73, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      uint64_t v37 = (uint64_t)v74;
      sub_250F7F8D8(v33, (uint64_t)v74, (unint64_t *)&qword_26B210F98, v35);
      if ((v34 & 1) == 0) {
        goto LABEL_30;
      }
      char v38 = sub_2510390F0();
      uint64_t v39 = v37;
      char v40 = v38;
      uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      sub_250F8F2C0(v39, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      sub_250F8F2C0(v36, (unint64_t *)&qword_26B210F98, v41);
      uint64_t v36 = (uint64_t)v72;
      uint64_t v22 = v77;
      uint64_t v25 = v78;
      if ((v40 & 1) == 0) {
        break;
      }
      uint64_t v42 = v30[7];
      uint64_t v43 = (uint64_t)&v77[v42];
      uint64_t v44 = v78 + v42;
      char v45 = sub_2510390F0();
      char v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      sub_250F7F8D8(v43, v36, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      uint64_t v37 = (uint64_t)v71;
      sub_250F7F8D8(v44, (uint64_t)v71, (unint64_t *)&qword_26B210F98, v46);
      if ((v45 & 1) == 0)
      {
LABEL_30:
        uint64_t v22 = v77;
        uint64_t v25 = v78;
        uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
        sub_250F8F2C0(v37, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
        sub_250F8F2C0(v36, (unint64_t *)&qword_26B210F98, v66);
        break;
      }
      uint64_t v5 = v29;
      char v47 = sub_2510390F0();
      double v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      sub_250F8F2C0(v37, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      sub_250F8F2C0(v36, (unint64_t *)&qword_26B210F98, v48);
      uint64_t v22 = v77;
      uint64_t v25 = v78;
      if ((v47 & 1) == 0) {
        break;
      }
      uint64_t v17 = (uint64_t)v30;
      uint64_t v49 = v30[8];
      double v50 = (double *)&v77[v49];
      char v51 = v77[v49 + 8];
      uint64_t v52 = (double *)(v78 + v49);
      int v53 = *(unsigned __int8 *)(v78 + v49 + 8);
      if (v51)
      {
        if (!v53) {
          break;
        }
      }
      else
      {
        if (*v50 != *v52) {
          LOBYTE(v53) = 1;
        }
        if (v53) {
          break;
        }
      }
      if ((sub_2510378B0() & 1) == 0) {
        break;
      }
      uint64_t v54 = v30[10];
      uint64_t v55 = *(void *)&v22[v54];
      uint64_t v56 = *(void *)&v22[v54 + 8];
      uint64_t v57 = (void *)(v25 + v54);
      if ((v55 != *v57 || v56 != v57[1]) && (sub_2510397F0() & 1) == 0) {
        break;
      }
      uint64_t v58 = v30[11];
      uint64_t v59 = *(void *)&v22[v58];
      uint64_t v60 = *(void *)&v22[v58 + 8];
      uint64_t v61 = (void *)(v25 + v58);
      if ((v59 != *v61 || v60 != v61[1]) && (sub_2510397F0() & 1) == 0) {
        break;
      }
      uint64_t v62 = v30[12];
      uint64_t v63 = *(void *)&v22[v62];
      uint64_t v64 = *(void *)&v22[v62 + 8];
      uint64_t v65 = (void *)(v25 + v62);
      if (v63 == *v65 && v64 == v65[1])
      {
        sub_250F8E484(v25, type metadata accessor for IndividualOvernightMetricChartPoint);
        sub_250F8E484((uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
        unint64_t v28 = v76;
      }
      else
      {
        char v27 = sub_2510397F0();
        sub_250F8E484(v25, type metadata accessor for IndividualOvernightMetricChartPoint);
        sub_250F8E484((uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
        unint64_t v28 = v76;
        if ((v27 & 1) == 0) {
          return 0;
        }
      }
      a1 = v69;
      unint64_t v24 = v28 + v68;
      uint64_t result = 1;
      uint64_t v23 = v75 - 1;
      a2 = v70;
      if (v75 == 1) {
        return result;
      }
    }
    sub_250F8E484(v25, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_250F8E484((uint64_t)v22, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  return 0;
}

uint64_t sub_250F84984(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v16 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v19 = *(void *)(v8 + 72);
      uint64_t v13 = v11 - 1;
      while (1)
      {
        uint64_t v14 = v13;
        sub_250F7F7B4(a1 + v12, (uint64_t)v10, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        sub_250F7F7B4(a2 + v12, (uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        sub_251037740();
        sub_250F8CDC0(&qword_26B210A98, MEMORY[0x263F42CD0]);
        sub_251039240();
        sub_251039240();
        if (v21 != v20
          || v10[*(int *)(v4 + 20)] != v6[*(int *)(v4 + 20)]
          || (sub_2510373D0() & 1) == 0
          || (sub_251038B60() & 1) == 0
          || (sub_251038A70() & 1) == 0)
        {
          break;
        }
        char v15 = v10[*(int *)(v4 + 36)] ^ v6[*(int *)(v4 + 36)];
        sub_250F8E484((uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        sub_250F8E484((uint64_t)v10, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        if ((v15 & 1) == 0)
        {
          uint64_t v13 = v14 - 1;
          v12 += v19;
          if (v14) {
            continue;
          }
        }
        char v16 = v15 ^ 1;
        return v16 & 1;
      }
      sub_250F8E484((uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      sub_250F8E484((uint64_t)v10, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      char v16 = 0;
    }
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_250F84C40(uint64_t a1, uint64_t a2)
{
  return sub_250F84D3C(a1, a2, MEMORY[0x263F07490], &qword_269B13308, MEMORY[0x263F07490], MEMORY[0x263F074B0]);
}

BOOL sub_250F84C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_250F84CF4(uint64_t a1, uint64_t a2)
{
  return sub_250F84D3C(a1, a2, MEMORY[0x263F42E58], &qword_269B13D10, MEMORY[0x263F42E58], MEMORY[0x263F42E60]);
}

uint64_t sub_250F84D3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v38 = a6;
  uint64_t v10 = a3(0);
  MEMORY[0x270FA5388](v10);
  v14.n128_f64[0] = MEMORY[0x270FA5388](v11);
  char v16 = (char *)&v31 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 == *(void *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      char v25 = 1;
    }
    else
    {
      unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
      uint64_t v19 = v12 + 16;
      uint64_t v35 = v20;
      uint64_t v36 = v13;
      uint64_t v31 = *(void *)(v19 + 56);
      uint64_t v32 = a2;
      uint64_t v37 = v19;
      uint64_t v33 = a1;
      char v34 = (void (**)(char *, uint64_t))(v19 - 8);
      uint64_t v21 = v17 - 1;
      do
      {
        uint64_t v22 = v35;
        ((void (*)(char *, unint64_t, uint64_t, __n128))v35)(v16, a1 + v18, v10, v14);
        uint64_t v23 = v16;
        unint64_t v24 = v36;
        v22(v36, a2 + v18, v10);
        sub_250F8CDC0(a4, a5);
        char v25 = sub_2510390F0();
        uint64_t v26 = *v34;
        char v27 = v24;
        char v16 = v23;
        (*v34)(v27, v10);
        v26(v23, v10);
        BOOL v29 = v21-- != 0;
        if ((v25 & 1) == 0) {
          break;
        }
        v18 += v31;
        a2 = v32;
        a1 = v33;
      }
      while (v29);
    }
  }
  else
  {
    char v25 = 0;
  }
  return v25 & 1;
}

unint64_t sub_250F84F54(char a1)
{
  unint64_t result = 0x65676E6152796164;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0xD000000000000022;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0x696F507472616863;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x736574614479656BLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_250F850CC()
{
  return sub_250F84F54(*v0);
}

uint64_t sub_250F850D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250F936C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_250F850FC(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_250F85108(uint64_t a1)
{
  unint64_t v2 = sub_250F8EF2C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250F85144(uint64_t a1)
{
  unint64_t v2 = sub_250F8EF2C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t OvernightMetricsViewModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250F93C18(0, &qword_269B13BA0, (uint64_t (*)(void))sub_250F8EF2C, (uint64_t)&type metadata for OvernightMetricsViewModel.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v9 = (char *)v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250F8EF2C();
  sub_2510398B0();
  LOBYTE(v20) = 0;
  sub_2510376B0();
  sub_250F8CDC0(&qword_269B13BB0, MEMORY[0x263F42C20]);
  sub_2510397A0();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    uint64_t v20 = *(void *)(v3 + v10[5]);
    char v19 = 1;
    sub_250F7F704(0, &qword_269B13BB8, MEMORY[0x263F42D70], MEMORY[0x263F8D488]);
    sub_250F8EF80();
    sub_2510397A0();
    LOBYTE(v20) = 2;
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    sub_250F8CDC0(&qword_269B13BD0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    sub_2510397A0();
    LOBYTE(v20) = 3;
    type metadata accessor for OvernightMetricsChartPoint();
    sub_250F8CDC0(&qword_269B13BD8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    sub_251039760();
    LOBYTE(v20) = 4;
    type metadata accessor for OvernightMetricsChartPointCollection();
    sub_250F8CDC0(&qword_269B13BE0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_2510397A0();
    uint64_t v20 = *(void *)(v3 + v10[9]);
    char v19 = 5;
    sub_250F7F704(0, &qword_269B13820, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D488]);
    sub_250F8F050();
    sub_2510397A0();
    uint64_t v20 = *(void *)(v3 + v10[10]);
    char v19 = 6;
    sub_250F7F704(0, &qword_269B13BF0, MEMORY[0x263F07490], MEMORY[0x263F8D488]);
    uint64_t v12 = v11;
    sub_250F8F120();
    sub_2510397A0();
    uint64_t v13 = v3 + v10[11];
    v17[1] = v12;
    uint64_t v18 = v13;
    LOBYTE(v20) = 7;
    sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v15 = v14;
    sub_250F8F688(&qword_269B13C00, &qword_269B13B10);
    uint64_t v18 = v15;
    sub_2510397A0();
    LOBYTE(v20) = 8;
    sub_2510397A0();
    uint64_t v20 = *(void *)(v3 + v10[13]);
    char v19 = 9;
    sub_2510397A0();
    uint64_t v20 = *(void *)(v3 + v10[14]);
    char v19 = 10;
    sub_250F7F704(0, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
    sub_250F8F1F0();
    sub_2510397A0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t OvernightMetricsViewModel.init(from:)@<X0>(void (*a1)(char *, char *, char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v129 = a1;
  uint64_t v109 = a2;
  sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v114 = (char *)&v109 - v3;
  uint64_t v135 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v135);
  uint64_t v115 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_2510376B0();
  uint64_t v119 = *(void *)(v128 - 8);
  MEMORY[0x270FA5388](v128);
  uint64_t v117 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F93C18(0, &qword_269B13C18, (uint64_t (*)(void))sub_250F8EF2C, (uint64_t)&type metadata for OvernightMetricsViewModel.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v118 = v6;
  uint64_t v116 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v136 = (char *)&v109 - v7;
  sub_250F805C8();
  uint64_t v147 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v139 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v138 = (char *)&v109 - v11;
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v140 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v110 = (uint64_t)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v111 = (uint64_t)&v109 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v137 = (char *)&v109 - v17;
  uint64_t v130 = sub_251037400();
  unint64_t v146 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  uint64_t v142 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v141 = (char *)&v109 - v20;
  uint64_t v21 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v21);
  uint64_t v112 = (char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v143 = (char *)&v109 - v24;
  uint64_t v25 = sub_251037470();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  unint64_t v28 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_2510374F0();
  uint64_t v144 = *(char **)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x270FA5388](v32);
  char v34 = (char *)&v109 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = &v34[*(int *)(v35 + 24)];
  uint64_t v37 = sub_2510379E0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
  uint64_t v127 = (uint64_t)v36;
  swift_storeEnumTagMultiPayload();
  uint64_t v145 = (int *)v32;
  uint64_t v38 = *(int *)(v32 + 28);
  uint64_t v39 = v21;
  char v40 = v143;
  uint64_t v148 = (uint64_t)v34;
  uint64_t v41 = (uint64_t)&v34[v38];
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
  uint64_t v133 = v41;
  uint64_t v113 = v42;
  v43(v41, 1, 1);
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v28, *MEMORY[0x263F07740], v25);
  sub_251037480();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  uint64_t v44 = MEMORY[0x263F8EE78];
  void *v40 = MEMORY[0x263F8EE78];
  uint64_t v134 = v39;
  char v45 = (char *)v40 + *(int *)(v39 + 20);
  char v46 = (void (*)(char *, char *, uint64_t))*((void *)v144 + 2);
  unint64_t v131 = v31;
  uint64_t v47 = v29;
  v46(v45, v31, v29);
  uint64_t v48 = sub_2510376F0();
  uint64_t v149 = v44;
  uint64_t v49 = swift_bridgeObjectRetain();
  uint64_t v50 = v132;
  uint64_t v51 = sub_250F8CBDC(v49, (void (*)(uint64_t *__return_ptr, uint64_t))sub_250F947E8);
  uint64_t v52 = v50;
  swift_bridgeObjectRelease();
  if (*(void *)(v51 + 16) >= *(void *)(v48 + 16)) {
    uint64_t v53 = *(void *)(v48 + 16);
  }
  else {
    uint64_t v53 = *(void *)(v51 + 16);
  }
  if (v53)
  {
    sub_250F8CD24();
    uint64_t v54 = sub_251039680();
  }
  else
  {
    uint64_t v54 = MEMORY[0x263F8EE80];
  }
  uint64_t v151 = v54;
  uint64_t v55 = swift_bridgeObjectRetain();
  sub_250F8DFDC(v55, v51, 1, &v151);
  uint64_t v126 = v50;
  uint64_t v56 = (char *)v130;
  if (v50)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v57 = (void (*)(char *, char *, char *))v145;
  uint64_t v58 = v145[8];
  swift_bridgeObjectRelease();
  uint64_t v59 = v148;
  uint64_t v60 = v148 + v58;
  uint64_t v61 = v151;
  (*((void (**)(char *, uint64_t))v144 + 1))(v131, v47);
  swift_bridgeObjectRelease();
  uint64_t v62 = (uint64_t)v143;
  *(void *)&v143[*(int *)(v134 + 24)] = v61;
  uint64_t v132 = v60;
  sub_250F8ED84(v62, v60, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  unint64_t v131 = (char *)*((int *)v57 + 9);
  *(void *)&v131[v59] = v44;
  uint64_t v63 = *((int *)v57 + 10);
  *(void *)(v59 + v63) = v44;
  uint64_t v64 = (char *)*((int *)v57 + 11);
  uint64_t v65 = v141;
  sub_2510373E0();
  uint64_t v66 = v142;
  sub_2510373E0();
  uint64_t v67 = sub_250F8CDC0((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
  uint64_t v68 = v56;
  if (sub_2510390C0())
  {
    uint64_t v124 = v63;
    uint64_t v143 = &v64[v148];
    uint64_t v125 = v67;
    unint64_t v69 = v146;
    uint64_t v70 = v147;
    uint64_t v63 = (uint64_t)v138;
    uint64_t v144 = &v138[*(int *)(v147 + 48)];
    uint64_t v71 = (uint64_t)v144;
    uint64_t v68 = v56;
    uint64_t v56 = (char *)(v146 + 32);
    uint64_t v57 = *(void (**)(char *, char *, char *))(v146 + 32);
    v57(v138, v65, v68);
    v57((char *)v71, v66, v68);
    uint64_t v65 = v139;
    uint64_t v72 = &v139[*(int *)(v70 + 48)];
    uint64_t v73 = *(void (**)(char *, uint64_t, char *))(v69 + 16);
    v73(v139, v63, v68);
    unint64_t v122 = v69 + 16;
    uint64_t v121 = v73;
    v73(v72, (uint64_t)v144, v68);
    uint64_t v74 = v137;
    v57(v137, v65, v68);
    uint64_t v52 = *(void *)(v69 + 8);
    ((void (*)(char *, char *))v52)(v72, v68);
    uint64_t v75 = &v65[*(int *)(v147 + 48)];
    v57(v65, (char *)v63, v68);
    v57(v75, v144, v68);
    unint64_t v76 = &v74[*(int *)(v140 + 36)];
    uint64_t v120 = v57;
    v57(v76, v75, v68);
    unint64_t v146 = v69 + 8;
    uint64_t v123 = (void (*)(char *, char *))v52;
    ((void (*)(char *, char *))v52)(v65, v68);
    uint64_t v77 = (uint64_t)v74;
    uint64_t v64 = v141;
    uint64_t v78 = v142;
    sub_250F8E3A0(v77, (uint64_t)v143);
    uint64_t v67 = v145[12];
    sub_2510373E0();
    sub_2510373E0();
    if (sub_2510390C0())
    {
      uint64_t v79 = v147;
      uint64_t v144 = (char *)(v148 + v67);
      uint64_t v80 = v138;
      uint64_t v81 = &v138[*(int *)(v147 + 48)];
      uint64_t v82 = v120;
      v120(v138, v64, v68);
      v82(v81, v78, v68);
      uint64_t v83 = v139;
      uint64_t v84 = &v139[*(int *)(v79 + 48)];
      uint64_t v85 = (void (*)(char *, char *, char *))v121;
      v121(v139, (uint64_t)v80, v68);
      v85(v84, v81, v68);
      uint64_t v86 = (uint64_t)v137;
      v82(v137, v83, v68);
      uint64_t v87 = v123;
      v123(v84, v68);
      uint64_t v88 = &v83[*(int *)(v147 + 48)];
      v82(v83, v80, v68);
      v82(v88, v81, v68);
      v82((char *)(v86 + *(int *)(v140 + 36)), v88, v68);
      v87(v83, v68);
      sub_250F8E3A0(v86, (uint64_t)v144);
      uint64_t v89 = v145;
      uint64_t v52 = v145[13];
      uint64_t v90 = MEMORY[0x263F8EE78];
      uint64_t v64 = (char *)v148;
      *(void *)(v148 + v52) = MEMORY[0x263F8EE78];
      uint64_t v147 = v89[14];
      *(void *)&v64[v147] = v90;
      uint64_t v57 = v129;
      __swift_project_boxed_opaque_existential_1(v129, *((void *)v129 + 3));
      sub_250F8EF2C();
      uint64_t v91 = (char *)v126;
      sub_2510398A0();
      uint64_t v65 = v91;
      if (v91)
      {
        uint64_t v67 = v127;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
LABEL_15:
        sub_250F8E484(v67, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
        sub_250F93EE4(v133, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
        sub_250F8E484(v132, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
        sub_250F8F2C0((uint64_t)v143, &qword_26B210F90, MEMORY[0x263F8D1A0]);
        sub_250F8F2C0((uint64_t)v144, &qword_26B210F90, v93);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      LOBYTE(v151) = 0;
      sub_250F8CDC0(&qword_269B13C20, MEMORY[0x263F42C20]);
      uint64_t v92 = v117;
      uint64_t v63 = v128;
      sub_251039730();
      (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v64, v92, v63);
      sub_250F7F704(0, &qword_269B13BB8, MEMORY[0x263F42D70], MEMORY[0x263F8D488]);
      char v150 = 1;
      sub_250F8F31C();
      sub_251039730();
      uint64_t v67 = v127;
      *(void *)&v64[v145[5]] = v151;
      LOBYTE(v151) = 2;
      sub_250F8CDC0(&qword_269B13C38, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
      uint64_t v95 = (uint64_t)v115;
      sub_251039730();
      sub_250F8F480(v95, v67, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
      LOBYTE(v151) = 3;
      sub_250F8CDC0(&qword_269B13C40, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      uint64_t v96 = (uint64_t)v114;
      sub_2510396F0();
      sub_250F8F3EC(v96, v133);
      LOBYTE(v151) = 4;
      sub_250F8CDC0(&qword_269B13C48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointCollection);
      uint64_t v97 = (uint64_t)v112;
      sub_251039730();
      sub_250F8F480(v97, v132, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
      sub_250F7F704(0, &qword_269B13820, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D488]);
      char v150 = 5;
      sub_250F8F4E8();
      sub_251039730();
      uint64_t v98 = v151;
      uint64_t v99 = v131;
      swift_bridgeObjectRelease();
      *(void *)&v99[(void)v64] = v98;
      uint64_t v68 = v136;
      sub_250F7F704(0, &qword_269B13BF0, MEMORY[0x263F07490], MEMORY[0x263F8D488]);
      uint64_t v56 = v100;
      char v150 = 6;
      unint64_t v146 = sub_250F8F5B8();
      sub_251039730();
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  uint64_t v142 = v56;
  uint64_t v101 = v151;
  uint64_t v102 = v124;
  swift_bridgeObjectRelease();
  *(void *)&v64[v102] = v101;
  LOBYTE(v151) = 7;
  sub_250F8F688(&qword_269B13C60, &qword_269B13B50);
  sub_251039730();
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v68, v118);
    uint64_t v103 = v148;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v103, v63);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  sub_250F8F734(v111, (uint64_t)v143);
  LOBYTE(v151) = 8;
  sub_251039730();
  sub_250F8F734(v110, (uint64_t)v144);
  char v150 = 9;
  sub_251039730();
  uint64_t v104 = v151;
  uint64_t v105 = v148;
  swift_bridgeObjectRelease();
  *(void *)(v105 + v52) = v104;
  sub_250F7F704(0, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
  char v150 = 10;
  sub_250F8F7B4();
  sub_251039730();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v136, v118);
  uint64_t v106 = v151;
  uint64_t v108 = v147;
  uint64_t v107 = v148;
  swift_bridgeObjectRelease();
  *(void *)(v107 + v108) = v106;
  sub_250F7F7B4(v107, v109, type metadata accessor for OvernightMetricsViewModel);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v129);
  return sub_250F8E484(v107, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_250F86CE4@<X0>(void (*a1)(char *, char *, char *)@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsViewModel.init(from:)(a1, a2);
}

uint64_t sub_250F86CFC(void *a1)
{
  return OvernightMetricsViewModel.encode(to:)(a1);
}

uint64_t OvernightMetricsViewModel.Summary.Variant.hash(into:)()
{
  return sub_251039860();
}

BOOL static OvernightMetricsViewModel.Summary.Variant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t OvernightMetricsViewModel.Summary.Variant.hashValue.getter()
{
  return sub_251039890();
}

void OvernightMetricsViewModel.Summary.variant.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *OvernightMetricsViewModel.Summary.variant.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.variant.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.value.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.unit.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.unit.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.description.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.shortenedDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.shortenedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.shortenedDescription.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.summary.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251037460();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251039180();
  MEMORY[0x270FA5388](v3 - 8);
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v7 = OvernightMetricsViewModel.changeCountDescription.getter();
  if (!v8)
  {
    OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v6);
    uint64_t v19 = sub_2510377E0();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) == 1)
    {
      sub_250F93EE4((uint64_t)v6, &qword_26B210AB8, MEMORY[0x263F42D70]);
    }
    else
    {
      uint64_t v21 = sub_251037B70();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
      if (v21 > 0)
      {
        uint64_t v26 = v21;
        sub_250F8F884();
        uint64_t v9 = sub_2510394F0();
        uint64_t v10 = v22;
        uint64_t result = 0;
        uint64_t v18 = 0;
        uint64_t v14 = 0;
        uint64_t v16 = 0;
        char v13 = 1;
        goto LABEL_14;
      }
    }
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v24 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    uint64_t v9 = sub_2510391D0();
    uint64_t v10 = v25;
    uint64_t result = 0;
    uint64_t v18 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    char v13 = 0;
    goto LABEL_14;
  }
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  if (OvernightMetricsViewModel.changeDetectedCountToday.getter()) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = (v11 & 1) == 0;
  }
  if (v12) {
    char v13 = 2;
  }
  else {
    char v13 = 3;
  }
  uint64_t v14 = OvernightMetricsViewModel.formattedDateRange.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_250F87750();
LABEL_14:
  *(unsigned char *)a1 = v13;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = result;
  *(void *)(a1 + 64) = v18;
  return result;
}

uint64_t OvernightMetricsViewModel.changeCountDescription.getter()
{
  uint64_t v0 = sub_251039160();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = OvernightMetricsViewModel.changeDetectedCountToday.getter();
  uint64_t result = 0;
  if ((v5 & 1) == 0)
  {
    if (v3)
    {
      sub_251039150();
      sub_251039140();
      sub_251039120();
      sub_251039140();
      sub_251039170();
    }
    else
    {
      sub_251039100();
    }
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v7 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  return result;
}

uint64_t OvernightMetricsViewModel.formattedDateRange.getter()
{
  sub_250F7F704(0, &qword_26B210A50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v10 - v1;
  sub_250F883CC((uint64_t)&v10 - v1);
  uint64_t v3 = sub_2510370F0();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250F93EE4((uint64_t)v2, &qword_26B210A50, MEMORY[0x263F062D0]);
    return 0;
  }
  else
  {
    if (qword_269B12BB0 != -1) {
      swift_once();
    }
    uint64_t v6 = (void *)qword_269B14678;
    id v7 = (void *)sub_2510370A0();
    id v8 = objc_msgSend(v6, sel_stringFromDateInterval_, v7);

    if (v8)
    {
      uint64_t v5 = sub_2510391C0();
    }
    else
    {
      uint64_t v5 = 0;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5;
}

uint64_t sub_250F87750()
{
  uint64_t v0 = sub_251037460();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v62 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v61 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251037350();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v58 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_251037320();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_251037330();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v48 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2510373B0();
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  MEMORY[0x270FA5388](v10);
  BOOL v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v49 = (char *)&v46 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v55 = (char *)&v46 - v16;
  uint64_t v17 = sub_251039160();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210A50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v46 - v20;
  sub_250F7F704(0, &qword_26B210A78, MEMORY[0x263F07490], v18);
  MEMORY[0x270FA5388](v22 - 8);
  id v24 = (char *)&v46 - v23;
  uint64_t v25 = sub_251037400();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  unint64_t v28 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F883CC((uint64_t)v21);
  uint64_t v29 = sub_2510370F0();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v21, 1, v29) == 1)
  {
    sub_250F93EE4((uint64_t)v21, &qword_26B210A50, MEMORY[0x263F062D0]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
  }
  else
  {
    sub_2510370B0();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v24, 0, 1, v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) != 1)
    {
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      uint64_t v47 = v28;
      v32(v28, v24, v25);
      sub_251039150();
      uint64_t v33 = sub_251039140();
      MEMORY[0x25338EDA0](v33);
      char v34 = v50;
      sub_251037310();
      uint64_t v35 = v48;
      sub_251037300();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v54);
      uint64_t v36 = v49;
      sub_2510372F0();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v52);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v56 + 8);
      uint64_t v38 = v12;
      uint64_t v39 = v57;
      v37(v38, v57);
      char v40 = v58;
      sub_251037340();
      uint64_t v41 = v55;
      sub_251037390();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v60);
      v37(v36, v39);
      sub_250F8CDC0(&qword_26B210A68, MEMORY[0x263F07258]);
      sub_250F3EB74();
      uint64_t v42 = v47;
      sub_251039110();
      v37(v41, v39);
      sub_251039140();
      sub_251039170();
      type metadata accessor for HealthBalanceUI();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v44 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_251037450();
      uint64_t v31 = sub_2510391D0();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v42, v25);
      return v31;
    }
  }
  sub_250F93EE4((uint64_t)v24, &qword_26B210A78, MEMORY[0x263F07490]);
  return 0;
}

uint64_t OvernightMetricsViewModel.warmupDaysRemaining.getter()
{
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v7 - v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v7 - v1);
  uint64_t v3 = sub_2510377E0();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250F93EE4((uint64_t)v2, &qword_26B210AB8, MEMORY[0x263F42D70]);
    return 0;
  }
  else
  {
    uint64_t v5 = sub_251037B70();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5;
}

uint64_t OvernightMetricsViewModel.lastUpdatedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v19 - v4;
  sub_250F7F704(0, &qword_26B210A50, MEMORY[0x263F062D0], v2);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v19 - v7;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v5);
  uint64_t v9 = sub_2510377E0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    uint64_t v11 = &qword_26B210AB8;
    BOOL v12 = (uint64_t (*)(uint64_t))MEMORY[0x263F42D70];
    uint64_t v13 = (uint64_t)v5;
LABEL_5:
    sub_250F93EE4(v13, v11, v12);
    uint64_t v16 = sub_251037400();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
  }
  sub_251037B50();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v9);
  uint64_t v14 = sub_2510370F0();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14) == 1)
  {
    uint64_t v11 = &qword_26B210A50;
    BOOL v12 = (uint64_t (*)(uint64_t))MEMORY[0x263F062D0];
    uint64_t v13 = (uint64_t)v8;
    goto LABEL_5;
  }
  sub_2510370B0();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v14);
  uint64_t v18 = sub_251037400();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 0, 1, v18);
}

uint64_t sub_250F883CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v2 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v37 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251037770();
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_251037940();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v35 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v31 - v15;
  sub_250F7F704(0, &qword_26B210A50, MEMORY[0x263F062D0], v11);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v36 = v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v16);
  uint64_t v20 = sub_2510377E0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  unsigned int v23 = v22(v16, 1, v20);
  uint64_t v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v22;
  if (v23 == 1)
  {
    sub_250F93EE4((uint64_t)v16, &qword_26B210AB8, MEMORY[0x263F42D70]);
    uint64_t v24 = sub_2510370F0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v19, 1, 1, v24);
  }
  else
  {
    sub_251037780();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
    sub_251037930();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_251037750();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v34);
  }
  uint64_t v26 = v37;
  uint64_t v25 = v38;
  uint64_t v27 = (uint64_t)v35;
  sub_250F7F7B4(v36, v37, type metadata accessor for OvernightMetricsViewModel);
  uint64_t v28 = sub_2510370F0();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v19, 1, v28) == 1)
  {
    OvernightMetricsViewModel.daySummaryForToday.getter(v27);
    if (v32(v27, 1, v20) == 1)
    {
      sub_250F8E484(v26, type metadata accessor for OvernightMetricsViewModel);
      sub_250F93EE4(v27, &qword_26B210AB8, MEMORY[0x263F42D70]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v25, 1, 1, v28);
    }
    else
    {
      sub_251037B50();
      sub_250F8E484(v26, type metadata accessor for OvernightMetricsViewModel);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v27, v20);
    }
    return sub_250F93EE4((uint64_t)v19, &qword_26B210A50, MEMORY[0x263F062D0]);
  }
  else
  {
    sub_250F8E484(v26, type metadata accessor for OvernightMetricsViewModel);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v25, v19, v28);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
  }
}

uint64_t sub_250F88974()
{
  uint64_t v0 = sub_251037940();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510377A0();
  sub_251037900();
  sub_2510378E0();
  sub_251037600();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t OvernightMetricsViewModel.configurationIssue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v2 = sub_251037740();
  uint64_t v54 = *(void *)(v2 - 8);
  uint64_t v55 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v53 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v56);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v48 - v8;
  sub_250F7F704(0, &qword_26B210AD8, MEMORY[0x263F42F38], v6);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v52 = (char *)&v48 - v11;
  uint64_t v12 = sub_251037A30();
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v51 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_251037940();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], v6);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v48 - v19;
  uint64_t v21 = v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v48 - v19);
  uint64_t v22 = sub_2510377E0();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22) == 1)
  {
    sub_250F93EE4((uint64_t)v20, &qword_26B210AB8, MEMORY[0x263F42D70]);
  }
  else
  {
    sub_251037780();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    char v24 = sub_251037910();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if (v24)
    {
      uint64_t v25 = sub_251037A10();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v57, 1, 1, v25);
    }
  }
  uint64_t v27 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_250F7F7B4(v21 + *(int *)(v27 + 24), (uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_250F8E484((uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v28 = sub_2510379E0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v9, 1, 1, v28);
LABEL_8:
    uint64_t v31 = qword_26B210D00;
    uint64_t v32 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EF8];
    uint64_t v33 = (uint64_t)v9;
LABEL_9:
    sub_250F93EE4(v33, v31, v32);
LABEL_10:
    uint64_t v34 = v57;
    uint64_t v35 = sub_251037A10();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
  }
  sub_250F7F254((uint64_t)v5, (uint64_t)v9);
  uint64_t v29 = sub_2510379E0();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v9, 1, v29) == 1) {
    goto LABEL_8;
  }
  uint64_t v37 = v53;
  uint64_t v36 = v54;
  uint64_t v38 = v55;
  (*(void (**)(char *, void, uint64_t))(v54 + 104))(v53, *MEMORY[0x263F42CA8], v55);
  uint64_t v39 = v52;
  sub_2510379D0();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v29);
  uint64_t v40 = sub_251037A50();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) == 1)
  {
    uint64_t v31 = &qword_26B210AD8;
    uint64_t v32 = (uint64_t (*)(uint64_t))MEMORY[0x263F42F38];
    uint64_t v33 = (uint64_t)v39;
    goto LABEL_9;
  }
  uint64_t v42 = v51;
  sub_251037A40();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
  uint64_t v44 = v49;
  uint64_t v43 = v50;
  if ((*(unsigned int (**)(char *, uint64_t))(v49 + 88))(v42, v50) != *MEMORY[0x263F42F20])
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v43);
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v44 + 96))(v42, v43);
  uint64_t v45 = sub_251037A10();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v57, v42, v45);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v45);
}

BOOL OvernightMetricsViewModel.hasConfigurationIssue.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t))MEMORY[0x263F42F18];
  sub_250F7F704(0, &qword_269B13C80, MEMORY[0x263F42F18], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - v2;
  OvernightMetricsViewModel.configurationIssue.getter((uint64_t)&v7 - v2);
  uint64_t v4 = sub_251037A10();
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  sub_250F93EE4((uint64_t)v3, &qword_269B13C80, v0);
  return v5;
}

uint64_t OvernightMetricsViewModel.isWatchExperienceAvailable.getter()
{
  uint64_t v0 = sub_251037940();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v15 - v5;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v15 - v5);
  uint64_t v7 = sub_2510377E0();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_250F93EE4((uint64_t)v6, &qword_26B210AB8, MEMORY[0x263F42D70]);
  }
  else
  {
    sub_251037780();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    char v9 = sub_251037910();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v9) {
      return 1;
    }
  }
  uint64_t v11 = (void *)sub_250F89590();
  if (!v11) {
    return 2;
  }
  uint64_t v12 = v11;
  id v13 = objc_msgSend(v11, sel_objectForKeyedSubscript_, *MEMORY[0x263F09610]);

  id v10 = objc_msgSend(v13, sel_areAllRequirementsSatisfied);
  return (uint64_t)v10;
}

uint64_t sub_250F89590()
{
  uint64_t v1 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_250F7F7B4(v0 + *(int *)(v7 + 24), (uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_250F8E484((uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v8 = sub_2510379E0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  }
  else
  {
    sub_250F7F254((uint64_t)v3, (uint64_t)v6);
    uint64_t v9 = sub_2510379E0();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) != 1)
    {
      uint64_t v11 = sub_2510379F0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
      return v11;
    }
  }
  sub_250F93EE4((uint64_t)v6, qword_26B210D00, MEMORY[0x263F42EF8]);
  return 0;
}

uint64_t OvernightMetricsViewModel.watchExperienceRequiresSetup.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_251037940();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], v6);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_250F7F7B4(v1 + *(int *)(v16 + 24), (uint64_t)v12, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_250F8E484((uint64_t)v12, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v17 = sub_2510379E0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 1, 1, v17);
LABEL_4:
    sub_250F93EE4((uint64_t)v15, qword_26B210D00, MEMORY[0x263F42EF8]);
    return 2;
  }
  sub_250F7F254((uint64_t)v12, (uint64_t)v15);
  uint64_t v18 = sub_2510379E0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1) {
    goto LABEL_4;
  }
  uint64_t v22 = (void *)sub_2510379F0();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v18);
  if (v22)
  {
    id v23 = objc_msgSend(v22, sel_objectForKeyedSubscript_, *MEMORY[0x263F09610]);
    unsigned __int8 v24 = objc_msgSend(v23, sel_areAllRequirementsSatisfied);

    if (v24)
    {
      id v25 = objc_msgSend(v22, sel_objectForKeyedSubscript_, *MEMORY[0x263F095A8]);
      id v20 = objc_msgSend(v25, sel_areAllRequirementsSatisfied);

      return (uint64_t)v20;
    }
    OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v9);
    uint64_t v26 = sub_2510377E0();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v9, 1, v26) != 1)
    {
      sub_251037780();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v26);
      char v28 = sub_251037910();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

      return (v28 & 1) == 0;
    }
    sub_250F93EE4((uint64_t)v9, &qword_26B210AB8, MEMORY[0x263F42D70]);
  }
  return 2;
}

uint64_t sub_250F89C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a1;
  uint64_t v44 = a3;
  uint64_t v48 = (char *)a2;
  uint64_t v3 = sub_251037770();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v41 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250F7F704(0, &qword_26B210AB8, MEMORY[0x263F42D70], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v45 = (uint64_t)&v37 - v7;
  uint64_t v38 = sub_251037940();
  uint64_t v40 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v39 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_251037A30();
  uint64_t v46 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EF8];
  sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], v5);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v37 - v14;
  sub_250F7F704(0, &qword_26B210AD8, MEMORY[0x263F42F38], v5);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = sub_251037A50();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F93FB0((uint64_t)v48, (uint64_t)v15, qword_26B210D00, v12);
  uint64_t v23 = sub_2510379E0();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v15, 1, v23) == 1)
  {
    sub_250F93EE4((uint64_t)v15, qword_26B210D00, MEMORY[0x263F42EF8]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
LABEL_4:
    sub_250F93EE4((uint64_t)v18, &qword_26B210AD8, MEMORY[0x263F42F38]);
    return 1;
  }
  uint64_t v48 = v22;
  sub_2510379D0();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    goto LABEL_4;
  }
  uint64_t v26 = (uint64_t)v48;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v18, v19);
  uint64_t v27 = v11;
  uint64_t v28 = v20;
  sub_251037A40();
  uint64_t v29 = v46;
  if ((*(unsigned int (**)(char *, uint64_t))(v46 + 88))(v27, v9) != *MEMORY[0x263F42F28])
  {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v19);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v9);
    return 1;
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v9);
  uint64_t v30 = v45;
  OvernightMetricsViewModel.daySummaryForToday.getter(v45);
  uint64_t v31 = sub_2510377E0();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v19);
    sub_250F93EE4(v30, &qword_26B210AB8, MEMORY[0x263F42D70]);
    return 0;
  }
  else
  {
    uint64_t v33 = v26;
    uint64_t v34 = v39;
    sub_2510377A0();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    uint64_t v35 = v41;
    sub_251037930();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v38);
    uint64_t v36 = (void *)sub_251037760();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v33, v19);
    if (v36)
    {

      return 1;
    }
    return 0;
  }
}

unint64_t sub_250F8A360@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_250FBE578(a1, *(void *)(v2 + 16), a2);
}

void sub_250F8A368(void **a1)
{
  uint64_t v2 = *(void *)(sub_251037740() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_25100EE90(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_250F8A44C(v5);
  *a1 = v3;
}

void *sub_250F8A410(void *a1)
{
  return sub_250FA11A8(0, a1[2], 0, a1);
}

uint64_t sub_250F8A424(unint64_t a1)
{
  return sub_250FA182C(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_250F8A438(unint64_t a1)
{
  return sub_250FA1B90(0, *(void *)(a1 + 16), 0, a1);
}

void sub_250F8A44C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v170 = sub_251037720();
  uint64_t v4 = *(void *)(v170 - 8);
  MEMORY[0x270FA5388](v170);
  v169 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v168 = (char *)&v149 - v7;
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v155 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v174 = (char *)&v149 - v12;
  MEMORY[0x270FA5388](v13);
  int v167 = (char *)&v149 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v166 = (char *)&v149 - v16;
  uint64_t v17 = a1[1];
  uint64_t v18 = sub_2510397B0();
  if (v18 >= v17)
  {
    if (v17 < 0) {
      goto LABEL_137;
    }
    if (v17) {
      sub_250F8B1B4(0, v17, 1, a1);
    }
    return;
  }
  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_145;
  }
  uint64_t v20 = v18;
  uint64_t v172 = a1;
  uint64_t v158 = (void *)v9;
  if (v17 < 2)
  {
    uint64_t v25 = v4;
    uint64_t v26 = (char *)MEMORY[0x263F8EE78];
    unint64_t v157 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v149 = MEMORY[0x263F8EE78];
    if (v17 != 1)
    {
      unint64_t v29 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_103:
      if (v29 >= 2)
      {
        uint64_t v142 = *a1;
        do
        {
          unint64_t v143 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_132;
          }
          if (!v142) {
            goto LABEL_144;
          }
          uint64_t v144 = v26;
          uint64_t v145 = *(void *)&v26[16 * v143 + 32];
          uint64_t v146 = *(void *)&v26[16 * v29 + 24];
          sub_250F8B590(v142 + v158[9] * v145, v142 + v158[9] * *(void *)&v26[16 * v29 + 16], v142 + v158[9] * v146, v157);
          if (v2) {
            break;
          }
          if (v146 < v145) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v144 = sub_25100EE7C((uint64_t)v26);
          }
          if (v143 >= *((void *)v144 + 2)) {
            goto LABEL_134;
          }
          uint64_t v147 = &v144[16 * v143 + 32];
          *(void *)uint64_t v147 = v145;
          *((void *)v147 + 1) = v146;
          unint64_t v148 = *((void *)v144 + 2);
          if (v29 > v148) {
            goto LABEL_135;
          }
          memmove(&v144[16 * v29 + 16], &v144[16 * v29 + 32], 16 * (v148 - v29));
          *((void *)v144 + 2) = v148 - 1;
          unint64_t v29 = v148 - 1;
          uint64_t v26 = v144;
        }
        while (v148 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v149 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v21 = 1;
    uint64_t v4 = v25;
  }
  else
  {
    uint64_t v21 = v17;
    uint64_t v22 = v19 >> 1;
    uint64_t v23 = sub_251039260();
    *(void *)(v23 + 16) = v22;
    unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v149 = v23;
    unint64_t v157 = v23 + v24;
  }
  uint64_t v27 = 0;
  v164 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v165 = v9 + 16;
  uint64_t v163 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v178 = (uint64_t *)(v9 + 32);
  uint64_t v26 = (char *)MEMORY[0x263F8EE78];
  uint64_t v173 = v8;
  uint64_t v151 = v20;
  uint64_t v28 = v21;
  while (1)
  {
    uint64_t v30 = v27 + 1;
    uint64_t v156 = v27;
    if (v27 + 1 >= v28)
    {
      a1 = v172;
    }
    else
    {
      char v150 = v26;
      uint64_t v31 = *v172;
      uint64_t v152 = v31;
      uint64_t v32 = v158[9];
      uint64_t v176 = v32;
      uint64_t v177 = v27 + 1;
      uint64_t v33 = v31 + v32 * v30;
      uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v158[2];
      uint64_t v35 = v166;
      double v175 = (char *)v28;
      v34(v166, v33, v8);
      uint64_t v36 = v31 + v32 * v27;
      uint64_t v37 = v167;
      uint64_t v162 = v34;
      v34(v167, v36, v8);
      uint64_t v38 = v168;
      sub_251037730();
      uint64_t v39 = v169;
      sub_251037730();
      LODWORD(v171) = sub_251037710();
      uint64_t v40 = (char *)*v164;
      uint64_t v41 = v170;
      (*v164)(v39, v170);
      char v161 = v40;
      ((void (*)(char *, uint64_t))v40)(v38, v41);
      uint64_t v42 = (void (*)(char *, uint64_t))v158[1];
      uint64_t v43 = v37;
      uint64_t v27 = v156;
      v42(v43, v8);
      uint64_t v160 = (char *)v42;
      v42(v35, v8);
      uint64_t v28 = (uint64_t)v175;
      uint64_t v30 = v27 + 2;
      if (v27 + 2 < (uint64_t)v175)
      {
        uint64_t v154 = v2;
        uint64_t v159 = v176 * v177;
        uint64_t v44 = v152;
        uint64_t v153 = v176 * v30;
        while (1)
        {
          uint64_t v45 = v30;
          uint64_t v46 = v166;
          uint64_t v47 = v173;
          uint64_t v48 = v162;
          v162(v166, v44 + v153, v173);
          uint64_t v49 = v167;
          v48(v167, v44 + v159, v47);
          uint64_t v50 = v168;
          sub_251037730();
          uint64_t v51 = v169;
          sub_251037730();
          LODWORD(v177) = sub_251037710();
          uint64_t v52 = v51;
          uint64_t v53 = v170;
          uint64_t v54 = (void (*)(char *, uint64_t))v161;
          ((void (*)(char *, uint64_t))v161)(v52, v170);
          v54(v50, v53);
          uint64_t v55 = (void (*)(char *, uint64_t))v160;
          ((void (*)(char *, uint64_t))v160)(v49, v47);
          v55(v46, v47);
          if ((v171 ^ v177)) {
            break;
          }
          uint64_t v30 = v45 + 1;
          uint64_t v28 = (uint64_t)v175;
          v44 += v176;
          if (v175 == (char *)(v45 + 1))
          {
            uint64_t v30 = (uint64_t)v175;
            uint64_t v8 = v173;
            uint64_t v2 = v154;
            uint64_t v27 = v156;
            goto LABEL_24;
          }
        }
        uint64_t v8 = v173;
        uint64_t v2 = v154;
        uint64_t v30 = v45;
        uint64_t v27 = v156;
        uint64_t v28 = (uint64_t)v175;
      }
LABEL_24:
      a1 = v172;
      uint64_t v26 = v150;
      uint64_t v20 = v151;
      if (v171)
      {
        if (v30 < v27) {
          goto LABEL_138;
        }
        if (v27 < v30)
        {
          uint64_t v56 = 0;
          uint64_t v57 = v176;
          uint64_t v58 = v176 * (v30 - 1);
          uint64_t v59 = v30 * v176;
          uint64_t v60 = v27 * v176;
          do
          {
            if (v27 != v30 + v56 - 1)
            {
              if (!v152) {
                goto LABEL_143;
              }
              uint64_t v154 = v2;
              unint64_t v62 = v152 + v60;
              uint64_t v63 = v152 + v58;
              uint64_t v64 = v152;
              uint64_t v177 = *v178;
              ((void (*)(char *, uint64_t, uint64_t))v177)(v155, v152 + v60, v173);
              if (v60 < v58 || v62 >= v64 + v59)
              {
                uint64_t v61 = v173;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v61 = v173;
                if (v60 != v58) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              ((void (*)(uint64_t, char *, uint64_t))v177)(v63, v155, v61);
              a1 = v172;
              uint64_t v2 = v154;
              uint64_t v57 = v176;
            }
            ++v27;
            --v56;
            v58 -= v57;
            v59 -= v57;
            v60 += v57;
          }
          while (v27 < v30 + v56);
          uint64_t v26 = v150;
          uint64_t v8 = v173;
          uint64_t v20 = v151;
          uint64_t v27 = v156;
          uint64_t v28 = (uint64_t)v175;
        }
      }
    }
    if (v30 < v28)
    {
      if (__OFSUB__(v30, v27)) {
        goto LABEL_136;
      }
      if (v30 - v27 < v20) {
        break;
      }
    }
LABEL_55:
    if (v30 < v27) {
      goto LABEL_131;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v171 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v26 = sub_25100EA68(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v90 = *((void *)v26 + 2);
    unint64_t v89 = *((void *)v26 + 3);
    unint64_t v29 = v90 + 1;
    if (v90 >= v89 >> 1) {
      uint64_t v26 = sub_25100EA68((char *)(v89 > 1), v90 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v29;
    uint64_t v91 = v26 + 32;
    uint64_t v92 = &v26[16 * v90 + 32];
    uint64_t v93 = v171;
    *(void *)uint64_t v92 = v156;
    *((void *)v92 + 1) = v93;
    if (v90)
    {
      while (1)
      {
        unint64_t v94 = v29 - 1;
        if (v29 >= 4)
        {
          uint64_t v99 = &v91[16 * v29];
          uint64_t v100 = *((void *)v99 - 8);
          uint64_t v101 = *((void *)v99 - 7);
          BOOL v105 = __OFSUB__(v101, v100);
          uint64_t v102 = v101 - v100;
          if (v105) {
            goto LABEL_120;
          }
          uint64_t v104 = *((void *)v99 - 6);
          uint64_t v103 = *((void *)v99 - 5);
          BOOL v105 = __OFSUB__(v103, v104);
          uint64_t v97 = v103 - v104;
          char v98 = v105;
          if (v105) {
            goto LABEL_121;
          }
          unint64_t v106 = v29 - 2;
          uint64_t v107 = &v91[16 * v29 - 32];
          uint64_t v109 = *(void *)v107;
          uint64_t v108 = *((void *)v107 + 1);
          BOOL v105 = __OFSUB__(v108, v109);
          uint64_t v110 = v108 - v109;
          if (v105) {
            goto LABEL_123;
          }
          BOOL v105 = __OFADD__(v97, v110);
          uint64_t v111 = v97 + v110;
          if (v105) {
            goto LABEL_126;
          }
          if (v111 >= v102)
          {
            uint64_t v129 = &v91[16 * v94];
            uint64_t v131 = *(void *)v129;
            uint64_t v130 = *((void *)v129 + 1);
            BOOL v105 = __OFSUB__(v130, v131);
            uint64_t v132 = v130 - v131;
            if (v105) {
              goto LABEL_130;
            }
            BOOL v122 = v97 < v132;
            goto LABEL_92;
          }
        }
        else
        {
          if (v29 != 3)
          {
            uint64_t v123 = *((void *)v26 + 4);
            uint64_t v124 = *((void *)v26 + 5);
            BOOL v105 = __OFSUB__(v124, v123);
            uint64_t v116 = v124 - v123;
            char v117 = v105;
            goto LABEL_86;
          }
          uint64_t v96 = *((void *)v26 + 4);
          uint64_t v95 = *((void *)v26 + 5);
          BOOL v105 = __OFSUB__(v95, v96);
          uint64_t v97 = v95 - v96;
          char v98 = v105;
        }
        if (v98) {
          goto LABEL_122;
        }
        unint64_t v106 = v29 - 2;
        uint64_t v112 = &v91[16 * v29 - 32];
        uint64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        BOOL v115 = __OFSUB__(v113, v114);
        uint64_t v116 = v113 - v114;
        char v117 = v115;
        if (v115) {
          goto LABEL_125;
        }
        uint64_t v118 = &v91[16 * v94];
        uint64_t v120 = *(void *)v118;
        uint64_t v119 = *((void *)v118 + 1);
        BOOL v105 = __OFSUB__(v119, v120);
        uint64_t v121 = v119 - v120;
        if (v105) {
          goto LABEL_128;
        }
        if (__OFADD__(v116, v121)) {
          goto LABEL_129;
        }
        if (v116 + v121 >= v97)
        {
          BOOL v122 = v97 < v121;
LABEL_92:
          if (v122) {
            unint64_t v94 = v106;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v117) {
          goto LABEL_124;
        }
        uint64_t v125 = &v91[16 * v94];
        uint64_t v127 = *(void *)v125;
        uint64_t v126 = *((void *)v125 + 1);
        BOOL v105 = __OFSUB__(v126, v127);
        uint64_t v128 = v126 - v127;
        if (v105) {
          goto LABEL_127;
        }
        if (v128 < v116) {
          goto LABEL_15;
        }
LABEL_94:
        unint64_t v133 = v94 - 1;
        if (v94 - 1 >= v29)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        uint64_t v134 = *a1;
        if (!*a1) {
          goto LABEL_142;
        }
        uint64_t v135 = v26;
        uint64_t v136 = &v91[16 * v133];
        uint64_t v137 = *(void *)v136;
        uint64_t v138 = v91;
        uint64_t v139 = &v91[16 * v94];
        uint64_t v140 = *((void *)v139 + 1);
        sub_250F8B590(v134 + v158[9] * *(void *)v136, v134 + v158[9] * *(void *)v139, v134 + v158[9] * v140, v157);
        if (v2) {
          goto LABEL_114;
        }
        if (v140 < v137) {
          goto LABEL_117;
        }
        if (v94 > *((void *)v135 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v136 = v137;
        *(void *)&v138[16 * v133 + 8] = v140;
        unint64_t v141 = *((void *)v135 + 2);
        if (v94 >= v141) {
          goto LABEL_119;
        }
        uint64_t v26 = v135;
        unint64_t v29 = v141 - 1;
        memmove(v139, v139 + 16, 16 * (v141 - 1 - v94));
        uint64_t v91 = v138;
        *((void *)v135 + 2) = v141 - 1;
        a1 = v172;
        uint64_t v8 = v173;
        if (v141 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v29 = 1;
LABEL_15:
    uint64_t v28 = a1[1];
    uint64_t v27 = v171;
    uint64_t v20 = v151;
    if (v171 >= v28) {
      goto LABEL_103;
    }
  }
  if (__OFADD__(v27, v20)) {
    goto LABEL_139;
  }
  if (v27 + v20 < v28) {
    uint64_t v28 = v27 + v20;
  }
  if (v28 >= v27)
  {
    if (v30 != v28)
    {
      char v150 = v26;
      uint64_t v154 = v2;
      uint64_t v65 = (char *)v158[9];
      uint64_t v159 = v158[2];
      uint64_t v160 = v65;
      uint64_t v66 = (void)v65 * (v30 - 1);
      uint64_t v67 = (char *)(v30 * (void)v65);
      uint64_t v153 = v28;
      do
      {
        uint64_t v69 = 0;
        uint64_t v70 = v156;
        uint64_t v171 = v30;
        char v161 = v67;
        uint64_t v162 = (void (*)(char *, uint64_t, uint64_t))v66;
        while (1)
        {
          uint64_t v176 = v70;
          uint64_t v71 = *a1;
          double v175 = &v67[v69];
          uint64_t v72 = &v67[v69 + v71];
          uint64_t v73 = v166;
          uint64_t v74 = (void (*)(char *, uint64_t, uint64_t))v159;
          ((void (*)(char *, char *, uint64_t))v159)(v166, v72, v8);
          uint64_t v75 = v66 + v69 + v71;
          unint64_t v76 = v167;
          v74(v167, v75, v8);
          uint64_t v77 = v168;
          sub_251037730();
          uint64_t v78 = a1;
          uint64_t v79 = v169;
          sub_251037730();
          LODWORD(v177) = sub_251037710();
          uint64_t v80 = *v164;
          uint64_t v81 = v79;
          uint64_t v82 = v170;
          (*v164)(v81, v170);
          uint64_t v83 = v77;
          uint64_t v8 = v173;
          v80(v83, v82);
          uint64_t v84 = *v163;
          (*v163)(v76, v8);
          v84(v73, v8);
          if ((v177 & 1) == 0) {
            break;
          }
          uint64_t v85 = *v78;
          if (!*v78) {
            goto LABEL_141;
          }
          uint64_t v67 = v161;
          uint64_t v66 = (uint64_t)v162;
          uint64_t v86 = (char *)v162 + v85 + v69;
          uint64_t v87 = (void (*)(char *, char *, uint64_t))*v178;
          ((void (*)(char *, char *, uint64_t))*v178)(v174, &v161[v85 + v69], v8);
          swift_arrayInitWithTakeFrontToBack();
          v87(v86, v174, v8);
          v69 -= (uint64_t)v160;
          uint64_t v70 = v176 + 1;
          uint64_t v68 = v171;
          a1 = v172;
          if (v171 == v176 + 1) {
            goto LABEL_48;
          }
        }
        uint64_t v68 = v171;
        a1 = v78;
        uint64_t v67 = v161;
        uint64_t v66 = (uint64_t)v162;
LABEL_48:
        uint64_t v30 = v68 + 1;
        v66 += (uint64_t)v160;
        uint64_t v67 = &v160[(void)v67];
      }
      while (v30 != v153);
      uint64_t v30 = v153;
      uint64_t v2 = v154;
      uint64_t v26 = v150;
      uint64_t v27 = v156;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  sub_251039630();
  __break(1u);
}

void sub_250F8B1B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v46 = a1;
  uint64_t v56 = sub_251037720();
  uint64_t v7 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v54 = (char *)&v44 - v10;
  uint64_t v11 = sub_251037740();
  MEMORY[0x270FA5388](v11);
  unint64_t v62 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v53 = (char *)&v44 - v14;
  v17.n128_f64[0] = MEMORY[0x270FA5388](v15);
  uint64_t v52 = (char *)&v44 - v18;
  uint64_t v60 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    uint64_t v20 = *(void (**)(void, void, void, __n128))(v16 + 16);
    uint64_t v19 = v16 + 16;
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v48 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v49 = (void (*)(char *, uint64_t, uint64_t))v20;
    uint64_t v47 = (void (**)(char *, uint64_t))(v19 - 8);
    uint64_t v50 = v11;
    uint64_t v51 = v19;
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v22 = v21 * (v60 - 1);
    uint64_t v57 = v21;
    uint64_t v23 = v21 * v60;
LABEL_5:
    uint64_t v24 = 0;
    uint64_t v64 = v46;
    uint64_t v58 = v23;
    uint64_t v59 = v22;
    while (1)
    {
      uint64_t v25 = *a4;
      uint64_t v63 = v23 + v24;
      uint64_t v26 = v23 + v24 + v25;
      uint64_t v27 = v52;
      uint64_t v28 = v49;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v49)(v52, v26, v11, v17);
      uint64_t v29 = v22 + v24 + v25;
      uint64_t v30 = v53;
      v28(v53, v29, v11);
      uint64_t v31 = v54;
      sub_251037730();
      uint64_t v32 = a4;
      uint64_t v33 = v55;
      sub_251037730();
      int v65 = sub_251037710();
      uint64_t v34 = *v48;
      uint64_t v35 = v33;
      uint64_t v36 = v56;
      (*v48)(v35, v56);
      uint64_t v37 = v36;
      a4 = v32;
      uint64_t v11 = v50;
      v34(v31, v37);
      uint64_t v38 = *v47;
      uint64_t v39 = v30;
      uint64_t v22 = v59;
      (*v47)(v39, v11);
      uint64_t v40 = v27;
      uint64_t v23 = v58;
      v38(v40, v11);
      if ((v65 & 1) == 0)
      {
LABEL_4:
        v22 += v57;
        v23 += v57;
        if (++v60 == v45) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v41 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v42 = (char *)(v41 + v22 + v24);
      uint64_t v43 = *v61;
      (*v61)(v62, v41 + v23 + v24, v11);
      swift_arrayInitWithTakeFrontToBack();
      v43(v42, (uint64_t)v62, v11);
      v24 -= v57;
      if (v60 == ++v64) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_250F8B590(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v75 = sub_251037720();
  uint64_t v8 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v73 = (char *)&v61 - v11;
  uint64_t v77 = sub_251037740();
  uint64_t v12 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v72 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v71 = (char *)&v61 - v15;
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_61;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_62;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v17;
  unint64_t v80 = a1;
  unint64_t v79 = a4;
  uint64_t v20 = v18 / v17;
  if (v19 >= v18 / v17)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v17;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v41 = a4 + v22;
      unint64_t v78 = a4 + v22;
      unint64_t v80 = a2;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v43 = -v17;
        uint64_t v44 = *(void (**)(void))(v12 + 16);
        uint64_t v63 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v64 = (void (*)(char *))v44;
        uint64_t v70 = v12 + 16;
        unint64_t v62 = (void (**)(char *, uint64_t))(v12 + 8);
        int v65 = (void (**)(char *, uint64_t))a1;
        unint64_t v66 = a4;
        uint64_t v45 = v71;
        do
        {
          unint64_t v76 = (void (**)(char *, uint64_t))a3;
          uint64_t v68 = (void (**)(char *, uint64_t))a2;
          unint64_t v69 = a3 + v43;
          uint64_t v46 = v77;
          uint64_t v47 = v64;
          ((void (*)(char *, unint64_t, uint64_t))v64)(v45, v41 + v43, v77);
          uint64_t v48 = v72;
          uint64_t v67 = (void (**)(char *, uint64_t))(a2 + v43);
          v47(v72);
          uint64_t v49 = v73;
          sub_251037730();
          uint64_t v50 = v74;
          sub_251037730();
          LOBYTE(v47) = sub_251037710();
          uint64_t v51 = v43;
          uint64_t v52 = *v63;
          uint64_t v53 = v50;
          uint64_t v54 = v75;
          (*v63)(v53, v75);
          v52(v49, v54);
          uint64_t v55 = *v62;
          (*v62)(v48, v46);
          v55(v45, v46);
          if (v47)
          {
            a3 = v69;
            if (v76 < v68 || v69 >= (unint64_t)v68)
            {
              uint64_t v58 = v67;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              uint64_t v43 = v51;
            }
            else
            {
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              uint64_t v43 = v51;
              uint64_t v58 = v67;
              if (v76 != v68) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v80 += v43;
          }
          else
          {
            uint64_t v58 = v68;
            a3 = v69;
            unint64_t v59 = v78;
            v78 += v51;
            uint64_t v43 = v51;
            if ((unint64_t)v76 < v59 || v69 >= v59)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v57 = v65;
              unint64_t v56 = v66;
            }
            else
            {
              uint64_t v57 = v65;
              unint64_t v56 = v66;
              if (v76 != (void (**)(char *, uint64_t))v59) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
          }
          unint64_t v41 = v78;
          if (v78 <= v56) {
            break;
          }
          a2 = (unint64_t)v58;
        }
        while (v58 > v57);
      }
      goto LABEL_59;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v17;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v69 = a4 + v21;
    unint64_t v78 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      uint64_t v24 = *(void (***)(char *, uint64_t))(v12 + 16);
      uint64_t v67 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v68 = v24;
      uint64_t v70 = v12 + 16;
      uint64_t v64 = (void (*)(char *))v17;
      int v65 = (void (**)(char *, uint64_t))(v12 + 8);
      unint64_t v76 = (void (**)(char *, uint64_t))a3;
      uint64_t v26 = v71;
      uint64_t v25 = v72;
      do
      {
        unint64_t v27 = a4;
        uint64_t v28 = v77;
        uint64_t v29 = v68;
        ((void (*)(char *, unint64_t, uint64_t))v68)(v26, a2, v77);
        ((void (*)(char *, unint64_t, uint64_t))v29)(v25, v27, v28);
        uint64_t v30 = v73;
        sub_251037730();
        uint64_t v31 = v74;
        sub_251037730();
        LOBYTE(v27) = sub_251037710();
        uint64_t v32 = *v67;
        uint64_t v33 = v31;
        uint64_t v34 = v75;
        (*v67)(v33, v75);
        v32(v30, v34);
        uint64_t v35 = *v65;
        (*v65)(v25, v28);
        v35(v26, v28);
        unint64_t v36 = v80;
        if (v27)
        {
          uint64_t v37 = (void (*)(void))v64;
          unint64_t v38 = (unint64_t)v64 + a2;
          if (v80 < a2 || v80 >= v38)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v39 = (unint64_t)v76;
          }
          else
          {
            unint64_t v39 = (unint64_t)v76;
            if (v80 == a2) {
              unint64_t v36 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v37 = (void (*)(void))v64;
          unint64_t v40 = (unint64_t)v64 + v79;
          if (v80 < v79 || v80 >= v40)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v39 = (unint64_t)v76;
          }
          else
          {
            unint64_t v39 = (unint64_t)v76;
            if (v80 != v79) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v79 = v40;
          unint64_t v38 = a2;
        }
        unint64_t v80 = (unint64_t)v37 + v36;
        a4 = v79;
        if (v79 >= v69) {
          break;
        }
        a2 = v38;
      }
      while (v38 < v39);
    }
LABEL_59:
    sub_25100EB90(&v80, &v79, (uint64_t *)&v78);
    return 1;
  }
LABEL_63:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

void sub_250F8BC98(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  unint64_t v78 = a4;
  sub_250F7F704(0, &qword_26B210A78, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = sub_251037400();
  uint64_t v69 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v76 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v68 = (char *)&v55 - v13;
  uint64_t v14 = sub_251037740();
  uint64_t v70 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v79 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v77 = (char *)&v55 - v17;
  sub_250F940FC(0, (unint64_t *)&qword_26B210AB0, MEMORY[0x263F42CD0], MEMORY[0x263F07490]);
  uint64_t v67 = v18;
  MEMORY[0x270FA5388](v18);
  unint64_t v66 = (char *)&v55 - v19;
  uint64_t v20 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v63 = v20;
  if (v20)
  {
    unint64_t v21 = 0;
    uint64_t v62 = v69 + 16;
    uint64_t v64 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
    uint64_t v65 = v70 + 16;
    uint64_t v61 = v69 + 48;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v69 + 32);
    uint64_t v75 = (void (**)(char *, char *, uint64_t))(v70 + 32);
    uint64_t v58 = a1;
    uint64_t v57 = a2;
    uint64_t v60 = v14;
    uint64_t v59 = v10;
    unint64_t v56 = v9;
    while (v21 < *(void *)(a1 + 16))
    {
      uint64_t v23 = *(void *)(v70 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v77, a1 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80)) + v23 * v21, v14);
      unint64_t v24 = *(void *)(a2 + 16);
      if (v21 == v24)
      {
        (*v64)(v9, 1, 1, v10);
LABEL_21:
        (*(void (**)(char *, uint64_t))(v70 + 8))(v77, v14);
        sub_250F93EE4((uint64_t)v9, &qword_26B210A78, MEMORY[0x263F07490]);
        goto LABEL_22;
      }
      if (v21 >= v24) {
        goto LABEL_24;
      }
      int v74 = a3;
      uint64_t v25 = v69;
      uint64_t v26 = a2 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      uint64_t v73 = *(void *)(v69 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v69 + 16))(v9, v26 + v73 * v21, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v9, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v10) == 1) {
        goto LABEL_21;
      }
      uint64_t v71 = v23;
      unint64_t v72 = v21;
      unint64_t v27 = v9;
      uint64_t v28 = *v22;
      uint64_t v29 = v68;
      (*v22)(v68, v27, v10);
      uint64_t v30 = v22;
      uint64_t v31 = v66;
      uint64_t v32 = &v66[*(int *)(v67 + 48)];
      uint64_t v33 = v10;
      uint64_t v34 = *v75;
      (*v75)(v66, v77, v14);
      v28(v32, v29, v33);
      uint64_t v35 = (uint64_t)v79;
      unint64_t v36 = v31;
      uint64_t v22 = v30;
      v34(v79, v36, v14);
      v28(v76, v32, v33);
      uint64_t v37 = (void *)*v78;
      unint64_t v39 = sub_250FCB6DC(v35);
      uint64_t v40 = v37[2];
      BOOL v41 = (v38 & 1) == 0;
      uint64_t v42 = v40 + v41;
      if (__OFADD__(v40, v41)) {
        goto LABEL_25;
      }
      char v43 = v38;
      if (v37[3] >= v42)
      {
        uint64_t v46 = v71;
        unint64_t v47 = v72;
        if (v74)
        {
          if (v38) {
            goto LABEL_18;
          }
        }
        else
        {
          sub_250FCDDC4();
          if (v43) {
            goto LABEL_18;
          }
        }
      }
      else
      {
        sub_250FCCA84(v42, v74 & 1);
        unint64_t v44 = sub_250FCB6DC((uint64_t)v79);
        uint64_t v46 = v71;
        unint64_t v47 = v72;
        if ((v43 & 1) != (v45 & 1)) {
          goto LABEL_27;
        }
        unint64_t v39 = v44;
        if (v43)
        {
LABEL_18:
          uint64_t v53 = (void *)swift_allocError();
          swift_willThrow();
          id v82 = v53;
          id v54 = v53;
          sub_250F32D94();
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v69 + 8))(v76, v59);
            (*(void (**)(char *, uint64_t))(v70 + 8))(v79, v60);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return;
          }
          goto LABEL_28;
        }
      }
      uint64_t v48 = (uint64_t)v79;
      uint64_t v49 = (void *)*v78;
      *(void *)(*v78 + 8 * (v39 >> 6) + 64) |= 1 << v39;
      uint64_t v14 = v60;
      v34((char *)(v49[6] + v39 * v46), (char *)v48, v60);
      uint64_t v10 = v59;
      v28((char *)(v49[7] + v39 * v73), v76, v59);
      uint64_t v50 = v49[2];
      BOOL v51 = __OFADD__(v50, 1);
      uint64_t v52 = v50 + 1;
      if (v51) {
        goto LABEL_26;
      }
      unint64_t v21 = v47 + 1;
      v49[2] = v52;
      a3 = 1;
      a1 = v58;
      a2 = v57;
      uint64_t v9 = v56;
      if (v63 == v21) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    sub_251039810();
    __break(1u);
LABEL_28:
    uint64_t v80 = 0;
    unint64_t v81 = 0xE000000000000000;
    sub_251039550();
    sub_251039210();
    sub_251039610();
    sub_251039210();
    sub_251039640();
    __break(1u);
  }
  else
  {
LABEL_22:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_250F8C488(uint64_t (*a1)(unint64_t), uint64_t a2)
{
  return sub_250F8C4C8(a1, a2, MEMORY[0x263F42E58], (uint64_t (*)(uint64_t))sub_250F8A438);
}

uint64_t sub_250F8C4C8(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = v4;
  uint64_t v10 = a3(0);
  MEMORY[0x270FA5388](v10);
  unint64_t v47 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v46 = (char *)&v36 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v49 = v7;
  uint64_t v18 = *v7;
  uint64_t v19 = *(void *)(*v7 + 16);
  if (!v19) {
    return 0;
  }
  char v38 = a4;
  unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v40 = v15;
  uint64_t v50 = *(void *)(v15 + 72);
  swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  unint64_t v41 = v20;
  while (1)
  {
    char v22 = a1(v18 + v20);
    if (v5)
    {
      swift_bridgeObjectRelease();
      return v21;
    }
    if (v22) {
      break;
    }
    ++v21;
    v20 += v50;
    if (v19 == v21)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v18 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v21, 1))
  {
    unint64_t v24 = *(void *)(v18 + 16);
    if (v21 + 1 == v24) {
      return v21;
    }
    uint64_t v25 = v50 + v20;
    unint64_t v26 = v21 + 1;
    unint64_t v27 = (void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    unint64_t v44 = a1;
    char v45 = (uint64_t (**)(char *, uint64_t))(v40 + 8);
    uint64_t v37 = (uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 40);
    uint64_t v42 = v17;
    uint64_t v43 = a2;
    uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    while (v26 < v24)
    {
      uint64_t v28 = v18 + v25;
      uint64_t v29 = (uint64_t (*)(char *))a1;
      uint64_t v30 = *v27;
      (*v27)(v17, v28, v10);
      LOBYTE(v29) = v29(v17);
      uint64_t result = (*v45)(v17, v10);
      if (v29)
      {
        a1 = v44;
        unint64_t v27 = v48;
      }
      else
      {
        unint64_t v27 = v48;
        if (v26 != v21)
        {
          if ((v21 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          uint64_t v31 = *v49;
          if (v21 >= *(void *)(*v49 + 16)) {
            goto LABEL_33;
          }
          unint64_t v40 = *(void *)(*v49 + 16);
          uint64_t v39 = v21 * v50;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v30)(v46, v31 + v41 + v21 * v50, v10);
          if (v26 >= v40) {
            goto LABEL_34;
          }
          v30(v47, v31 + v25, v10);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t *v49 = v31;
          if ((result & 1) == 0)
          {
            uint64_t result = v38(v31);
            uint64_t v31 = result;
            uint64_t *v49 = result;
          }
          if (v21 >= *(void *)(v31 + 16)) {
            goto LABEL_35;
          }
          unint64_t v32 = v31 + v41 + v39;
          uint64_t v33 = *v37;
          uint64_t result = (*v37)(v32, v47, v10);
          if (v26 >= *(void *)(*v49 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = v33(*v49 + v25, v46, v10);
          unint64_t v27 = v48;
        }
        BOOL v34 = __OFADD__(v21++, 1);
        a1 = v44;
        if (v34) {
          goto LABEL_31;
        }
      }
      unint64_t v35 = v26 + 1;
      uint64_t v17 = v42;
      if (__OFADD__(v26, 1)) {
        goto LABEL_30;
      }
      uint64_t v18 = *v49;
      unint64_t v24 = *(void *)(*v49 + 16);
      ++v26;
      v25 += v50;
      if (v35 == v24) {
        return v21;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_250F8C8DC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = sub_251039500();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        sub_250F8CDC0(&qword_26B210A88, MEMORY[0x263F42CD0]);
        uint64_t v17 = sub_251039070();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            char v22 = (_OWORD *)(v21 + 16 * a1);
            uint64_t v23 = (_OWORD *)(v21 + 16 * v9);
            uint64_t v12 = v33;
            if (16 * a1 != 16 * v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *char v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    unint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *unint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_250F8CBDC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    sub_250FF1CCC(0, v2, 0);
    uint64_t v3 = v14;
    uint64_t v6 = *(void *)(sub_251037740() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    do
    {
      a2(&v13, v7);
      uint64_t v9 = v13;
      uint64_t v14 = v3;
      unint64_t v11 = *(void *)(v3 + 16);
      unint64_t v10 = *(void *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_250FF1CCC(v10 > 1, v11 + 1, 1);
        uint64_t v3 = v14;
      }
      *(void *)(v3 + 16) = v11 + 1;
      *(void *)(v3 + 8 * v11 + 32) = v9;
      v7 += v8;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void sub_250F8CD24()
{
  if (!qword_26B210BF0)
  {
    sub_251037740();
    sub_250F8CDC0(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v0 = sub_251039690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210BF0);
    }
  }
}

uint64_t sub_250F8CDC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsViewModelV7SummaryV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[8];
  uint64_t v8 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v11 = a2[8];
  uint64_t v16 = a2[7];
  uint64_t v17 = a1[7];
  if (a1[1] == a2[1] && a1[2] == a2[2] || (char v12 = sub_2510397F0(), result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7) {
        return 0;
      }
      if (v2 != v8 || v4 != v7)
      {
        char v14 = sub_2510397F0();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v5)
    {
      if (!v9) {
        return 0;
      }
      if (v3 != v10 || v5 != v9)
      {
        char v15 = sub_2510397F0();
        uint64_t result = 0;
        if ((v15 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (v6)
    {
      if (v11 && (v17 == v16 && v6 == v11 || (sub_2510397F0() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v11)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v77 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v75 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v76 = (uint64_t)&v70 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v78 = (uint64_t)&v70 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v79 = (uint64_t)&v70 - v11;
  uint64_t v12 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  char v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F94198(0, (unint64_t *)&qword_269B13880, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v70 - v18;
  sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v20 - 8);
  char v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v70 - v24;
  double v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v70 - v28;
  if ((MEMORY[0x25338F3D0](a1, a2, v27) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v74 = v13;
  unint64_t v30 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  if ((sub_250F84D3C(*(void *)(a1 + v30[5]), *(void *)(a2 + v30[5]), MEMORY[0x263F42D70], &qword_269B13D18, MEMORY[0x263F42D70], MEMORY[0x263F42D80]) & 1) == 0|| (sub_250F8D938(a1 + v30[6], a2 + v30[6]) & 1) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v31 = v30[7];
  uint64_t v72 = a1;
  sub_250F93FB0(a1 + v31, (uint64_t)v29, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  uint64_t v71 = v30;
  uint64_t v32 = v30[7];
  uint64_t v73 = a2;
  sub_250F93FB0(a2 + v32, (uint64_t)v25, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  uint64_t v33 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_250F93FB0((uint64_t)v29, (uint64_t)v19, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  sub_250F93FB0((uint64_t)v25, v33, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  BOOL v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v34((uint64_t)v19, 1, v12) == 1)
  {
    sub_250F93EE4((uint64_t)v25, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    sub_250F93EE4((uint64_t)v29, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    if (v34(v33, 1, v12) == 1)
    {
      sub_250F93EE4((uint64_t)v19, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      goto LABEL_11;
    }
LABEL_9:
    sub_250F93F54((uint64_t)v19, (unint64_t *)&qword_269B13880, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_24;
  }
  sub_250F93FB0((uint64_t)v19, (uint64_t)v22, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  if (v34(v33, 1, v12) == 1)
  {
    sub_250F93EE4((uint64_t)v25, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    sub_250F93EE4((uint64_t)v29, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    sub_250F8E484((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_9;
  }
  sub_250F8ED84(v33, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
  char v35 = _s15HealthBalanceUI26OvernightMetricsChartPointV2eeoiySbAC_ACtFZ_0((uint64_t)v22, (uint64_t)v15);
  sub_250F8E484((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
  sub_250F93EE4((uint64_t)v25, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  sub_250F93EE4((uint64_t)v29, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  sub_250F8E484((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
  sub_250F93EE4((uint64_t)v19, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  if ((v35 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v37 = v71;
  uint64_t v36 = v72;
  uint64_t v38 = v71[8];
  uint64_t v39 = v72 + v38;
  uint64_t v40 = v73;
  uint64_t v41 = v73 + v38;
  if ((sub_250F83D84(*(void *)(v72 + v38), *(void *)(v73 + v38)) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  if ((MEMORY[0x25338F200](v39 + *(int *)(v42 + 20), v41 + *(int *)(v42 + 20)) & 1) == 0) {
    goto LABEL_24;
  }
  sub_250FBE830(*(void *)(v39 + *(int *)(v42 + 24)), *(void *)(v41 + *(int *)(v42 + 24)));
  if ((v43 & 1) == 0
    || (sub_250F83D84(*(void *)(v36 + v37[9]), *(void *)(v40 + v37[9])) & 1) == 0
    || (sub_250F84D3C(*(void *)(v36 + v37[10]), *(void *)(v40 + v37[10]), MEMORY[0x263F07490], &qword_269B13308, MEMORY[0x263F07490], MEMORY[0x263F074B0]) & 1) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v44 = v37[11];
  uint64_t v45 = v36 + v44;
  uint64_t v46 = v40 + v44;
  sub_251037400();
  sub_250F8CDC0(&qword_269B13308, MEMORY[0x263F07490]);
  char v47 = sub_2510390F0();
  uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
  uint64_t v49 = v79;
  sub_250F7F8D8(v45, v79, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v50 = v78;
  sub_250F7F8D8(v46, v78, &qword_26B210F90, v48);
  if ((v47 & 1) == 0)
  {
    unint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
    uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
    uint64_t v68 = v50;
LABEL_23:
    sub_250F8F2C0(v68, &qword_26B210F90, v66);
    sub_250F8F2C0(v49, &qword_26B210F90, v67);
    goto LABEL_24;
  }
  char v51 = sub_2510390F0();
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
  sub_250F8F2C0(v50, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  sub_250F8F2C0(v49, &qword_26B210F90, v52);
  if ((v51 & 1) == 0)
  {
LABEL_24:
    char v65 = 0;
    return v65 & 1;
  }
  uint64_t v53 = v71[12];
  uint64_t v54 = v72 + v53;
  uint64_t v55 = v73 + v53;
  char v56 = sub_2510390F0();
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
  uint64_t v49 = v76;
  sub_250F7F8D8(v54, v76, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v58 = v55;
  uint64_t v59 = v75;
  sub_250F7F8D8(v58, v75, &qword_26B210F90, v57);
  if ((v56 & 1) == 0)
  {
    unint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
    uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
    uint64_t v68 = v59;
    goto LABEL_23;
  }
  char v60 = sub_2510390F0();
  uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
  sub_250F8F2C0(v59, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  sub_250F8F2C0(v49, &qword_26B210F90, v61);
  if ((v60 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v63 = v71;
  uint64_t v62 = v72;
  uint64_t v64 = v73;
  if ((sub_250F84D3C(*(void *)(v72 + v71[13]), *(void *)(v73 + v71[13]), MEMORY[0x263F07490], &qword_269B13308, MEMORY[0x263F07490], MEMORY[0x263F074B0]) & 1) == 0)goto LABEL_24; {
  char v65 = sub_250F84D3C(*(void *)(v62 + v63[14]), *(void *)(v64 + v63[14]), MEMORY[0x263F42CD0], &qword_26B210A90, MEMORY[0x263F42CD0], MEMORY[0x263F42CE8]);
  }
  return v65 & 1;
}

uint64_t sub_250F8D938(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = sub_2510379E0();
  uint64_t v42 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v40 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EF8];
  sub_250F94198(0, &qword_26B210AD0, qword_26B210D00, MEMORY[0x263F42EF8]);
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v43 = (uint64_t)&v39 - v8;
  sub_250F7F704(0, qword_26B210D00, v5, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v41 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t *)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - v18;
  sub_250F94210();
  MEMORY[0x270FA5388](v20 - 8);
  char v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t *)&v22[*(int *)(v23 + 56)];
  sub_250F7F7B4(a1, (uint64_t)v22, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_250F7F7B4(a2, (uint64_t)v24, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_250F7F7B4((uint64_t)v22, (uint64_t)v16, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v25 = *v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      char v26 = sub_250F84D3C(v25, *v24, MEMORY[0x263F42CD0], &qword_26B210A90, MEMORY[0x263F42CD0], MEMORY[0x263F42CE8]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_17:
      double v27 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod;
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_250F7F7B4((uint64_t)v22, (uint64_t)v19, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_250F7F254((uint64_t)v24, (uint64_t)v13);
    uint64_t v28 = v43;
    uint64_t v29 = v43 + *(int *)(v7 + 48);
    sub_250F7F254((uint64_t)v19, v43);
    sub_250F93FB0((uint64_t)v13, v29, qword_26B210D00, MEMORY[0x263F42EF8]);
    uint64_t v30 = v42;
    uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    uint64_t v32 = v44;
    if (v31(v28, 1, v44) == 1)
    {
      sub_250F93EE4((uint64_t)v13, qword_26B210D00, MEMORY[0x263F42EF8]);
      if (v31(v29, 1, v32) == 1)
      {
        sub_250F93EE4(v28, qword_26B210D00, MEMORY[0x263F42EF8]);
        char v26 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v33 = v41;
      sub_250F93FB0(v28, v41, qword_26B210D00, MEMORY[0x263F42EF8]);
      if (v31(v29, 1, v32) != 1)
      {
        BOOL v34 = v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v40, v29, v32);
        sub_250F8CDC0(&qword_269B13D20, MEMORY[0x263F42EF8]);
        char v35 = sub_2510390F0();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v30 + 8);
        v36(v34, v32);
        uint64_t v37 = (uint64_t (*)(uint64_t))MEMORY[0x263F42EF8];
        sub_250F93EE4((uint64_t)v13, qword_26B210D00, MEMORY[0x263F42EF8]);
        v36((char *)v33, v32);
        sub_250F93EE4(v28, qword_26B210D00, v37);
        double v27 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod;
        if (v35)
        {
          char v26 = 1;
          goto LABEL_18;
        }
LABEL_16:
        char v26 = 0;
        goto LABEL_17;
      }
      sub_250F93EE4((uint64_t)v13, qword_26B210D00, MEMORY[0x263F42EF8]);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v32);
    }
    sub_250F93F54(v28, &qword_26B210AD0, qword_26B210D00, MEMORY[0x263F42EF8]);
    goto LABEL_16;
  }
  sub_250F93EE4((uint64_t)v19, qword_26B210D00, MEMORY[0x263F42EF8]);
LABEL_7:
  char v26 = 0;
  double v27 = (uint64_t (*)(void))sub_250F94210;
LABEL_18:
  sub_250F8E484((uint64_t)v22, v27);
  return v26 & 1;
}

uint64_t sub_250F8DFDC(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v58 = a4;
  uint64_t v7 = sub_251037740();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v57 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v44 - v11;
  sub_250F94274();
  uint64_t v53 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v52 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v45 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = v15;
  if (!v15)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v16 = 0;
  uint64_t v17 = v8 + 16;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v50 = v8 + 16;
  uint64_t v18 = *(void *)(v8 + 72);
  uint64_t v19 = v45 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v54 = v18;
  uint64_t v55 = v17 + 16;
  uint64_t v46 = (void (**)(char *, uint64_t))(v17 - 8);
  char v47 = v12;
  uint64_t v48 = a2;
  uint64_t v20 = (void (**)(char *, char *, uint64_t))(v17 + 16);
  v49(v12, v19, v7);
  while (1)
  {
    unint64_t v22 = *(void *)(a2 + 16);
    if (v16 == v22)
    {
      (*v46)(v12, v7);
      goto LABEL_20;
    }
    if (v16 >= v22) {
      break;
    }
    uint64_t v56 = v19;
    uint64_t v23 = *(void *)(a2 + 8 * v16 + 32);
    uint64_t v24 = v52;
    uint64_t v25 = *(int *)(v53 + 48);
    char v26 = *v20;
    (*v20)(v52, v12, v7);
    *(void *)&v24[v25] = v23;
    uint64_t v27 = (uint64_t)v57;
    uint64_t v28 = v24;
    uint64_t v29 = v7;
    v26(v57, v28, v7);
    uint64_t v30 = *v58;
    swift_bridgeObjectRetain();
    unint64_t v32 = sub_250FCB6DC(v27);
    uint64_t v33 = *(void *)(v30 + 16);
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      goto LABEL_22;
    }
    char v36 = v31;
    if (*(void *)(v30 + 24) >= v35)
    {
      if (a3)
      {
        if (v31) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_250FCD694();
        if (v36) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_250FCBEC4(v35, a3 & 1);
      unint64_t v37 = sub_250FCB6DC((uint64_t)v57);
      if ((v36 & 1) != (v38 & 1)) {
        goto LABEL_24;
      }
      unint64_t v32 = v37;
      if (v36)
      {
LABEL_3:
        (*v46)(v57, v29);
        uint64_t v21 = *(void *)(*v58 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v21 + 8 * v32) = v23;
        uint64_t v7 = v29;
        goto LABEL_4;
      }
    }
    uint64_t v39 = (void *)*v58;
    *(void *)(*v58 + 8 * (v32 >> 6) + 64) |= 1 << v32;
    uint64_t v7 = v29;
    v26((char *)(v39[6] + v32 * v54), v57, v29);
    *(void *)(v39[7] + 8 * v32) = v23;
    uint64_t v40 = v39[2];
    BOOL v41 = __OFADD__(v40, 1);
    uint64_t v42 = v40 + 1;
    if (v41) {
      goto LABEL_23;
    }
    v39[2] = v42;
LABEL_4:
    ++v16;
    uint64_t v19 = v56 + v54;
    a3 = 1;
    uint64_t v12 = v47;
    a2 = v48;
    if (v51 == v16) {
      goto LABEL_20;
    }
    v49(v47, v19, v7);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_251039810();
  __break(1u);
  return result;
}

uint64_t sub_250F8E3A0(uint64_t a1, uint64_t a2)
{
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F8E420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F8E484(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F8E4E4()
{
  return sub_250F81B60() & 1;
}

uint64_t sub_250F8E504(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v17 = sub_251037640();
  uint64_t v5 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (v8)
  {
    v15[1] = v3;
    uint64_t v20 = MEMORY[0x263F8EE78];
    sub_250FF1E04(0, v8, 0);
    uint64_t v9 = v20;
    uint64_t v10 = *(void *)(sub_251037740() - 8);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v16 = *(void *)(v10 + 72);
    do
    {
      v18(v11);
      uint64_t v20 = v9;
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v12 = *(void *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_250FF1E04(v12 > 1, v13 + 1, 1);
        uint64_t v9 = v20;
      }
      *(void *)(v9 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, v7, v17);
      v11 += v16;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_250F8E6F8(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v76 = a4;
  uint64_t v7 = sub_251037640();
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v56 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v74 = &v52[-v10];
  uint64_t v11 = sub_251037740();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v75 = &v52[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = &v52[-v15];
  sub_250F940FC(0, &qword_26B2101A0, MEMORY[0x263F42CD0], MEMORY[0x263F42BC0]);
  uint64_t v65 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v64 = &v52[-v18];
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v53 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v63 = v19;
  if (!v19)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v20 = 0;
  unint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v21 = v12 + 16;
  uint64_t v61 = v22;
  uint64_t v23 = v53 + ((*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64));
  uint64_t v69 = (void (**)(unint64_t, unsigned char *, uint64_t))(v21 + 16);
  uint64_t v67 = *(void *)(v21 + 56);
  uint64_t v60 = v66 + 16;
  uint64_t v62 = v21;
  uint64_t v55 = (void (**)(unsigned char *, uint64_t))(v21 - 8);
  uint64_t v54 = (void (**)(unint64_t, unsigned char *, uint64_t))(v66 + 40);
  uint64_t v57 = v16;
  uint64_t v58 = a2;
  uint64_t v68 = v11;
  uint64_t v59 = v66 + 32;
  v22(v16, v23, v11);
  while (1)
  {
    unint64_t v25 = *(void *)(a2 + 16);
    if (v20 == v25)
    {
      (*v55)(v16, v11);
      goto LABEL_20;
    }
    if (v20 >= v25) {
      break;
    }
    unint64_t v70 = v20;
    uint64_t v71 = v23;
    uint64_t v26 = v7;
    int v72 = a3;
    uint64_t v27 = v66;
    uint64_t v28 = a2 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    uint64_t v73 = *(void *)(v66 + 72);
    uint64_t v29 = v28 + v73 * v20;
    uint64_t v30 = v11;
    char v31 = v64;
    unint64_t v32 = &v64[*(int *)(v65 + 48)];
    uint64_t v33 = *v69;
    (*v69)((unint64_t)v64, v16, v30);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16))(v32, v29, v26);
    BOOL v34 = v75;
    uint64_t v35 = v30;
    char v36 = v33;
    v33((unint64_t)v75, v31, v35);
    unint64_t v37 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 32);
    uint64_t v7 = v26;
    v37(v74, v32, v26);
    uint64_t v38 = *v76;
    unint64_t v40 = sub_250FCB6DC((uint64_t)v34);
    uint64_t v41 = *(void *)(v38 + 16);
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_22;
    }
    char v44 = v39;
    if (*(void *)(v38 + 24) >= v43)
    {
      if (v72)
      {
        if (v39) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_250FCD934();
        if (v44) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_250FCC2F4(v43, v72 & 1);
      unint64_t v45 = sub_250FCB6DC((uint64_t)v75);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_24;
      }
      unint64_t v40 = v45;
      if (v44)
      {
LABEL_3:
        uint64_t v24 = v56;
        v37(v56, v74, v26);
        uint64_t v11 = v68;
        (*v55)(v75, v68);
        (*v54)(*(void *)(*v76 + 56) + v40 * v73, v24, v26);
        goto LABEL_4;
      }
    }
    char v47 = (void *)*v76;
    *(void *)(*v76 + 8 * (v40 >> 6) + 64) |= 1 << v40;
    v36(v47[6] + v40 * v67, v75, v68);
    v37((unsigned char *)(v47[7] + v40 * v73), v74, v26);
    uint64_t v48 = v47[2];
    BOOL v49 = __OFADD__(v48, 1);
    uint64_t v50 = v48 + 1;
    if (v49) {
      goto LABEL_23;
    }
    void v47[2] = v50;
    uint64_t v11 = v68;
LABEL_4:
    unint64_t v20 = v70 + 1;
    uint64_t v23 = v71 + v67;
    a3 = 1;
    uint64_t v16 = v57;
    a2 = v58;
    if (v63 == v70 + 1) {
      goto LABEL_20;
    }
    v61(v57, v23, v11);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_251039810();
  __break(1u);
  return result;
}

uint64_t sub_250F8EC74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5365727574616566 && a2 == 0xED00007375746174;
  if (v2 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465786966 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_250F8ED84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F8EDEC()
{
  return sub_250F88974();
}

void sub_250F8EDF4()
{
  if (!qword_269B13B90)
  {
    sub_250F8EE68(255, &qword_269B13B98, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_2510397D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13B90);
    }
  }
}

void sub_250F8EE68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_250F8EEB8()
{
  unint64_t result = qword_269B13050;
  if (!qword_269B13050)
  {
    sub_250F8EE68(255, (unint64_t *)&qword_269B12FB0, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13050);
  }
  return result;
}

unint64_t sub_250F8EF2C()
{
  unint64_t result = qword_269B13BA8;
  if (!qword_269B13BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13BA8);
  }
  return result;
}

unint64_t sub_250F8EF80()
{
  unint64_t result = qword_269B13BC0;
  if (!qword_269B13BC0)
  {
    sub_250F7F704(255, &qword_269B13BB8, MEMORY[0x263F42D70], MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13BC8, MEMORY[0x263F42D70]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13BC0);
  }
  return result;
}

unint64_t sub_250F8F050()
{
  unint64_t result = qword_269B13BE8;
  if (!qword_269B13BE8)
  {
    sub_250F7F704(255, &qword_269B13820, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13BD8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13BE8);
  }
  return result;
}

unint64_t sub_250F8F120()
{
  unint64_t result = qword_269B13BF8;
  if (!qword_269B13BF8)
  {
    sub_250F7F704(255, &qword_269B13BF0, MEMORY[0x263F07490], MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13B10, MEMORY[0x263F07490]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13BF8);
  }
  return result;
}

unint64_t sub_250F8F1F0()
{
  unint64_t result = qword_269B13C08;
  if (!qword_269B13C08)
  {
    sub_250F7F704(255, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13C10, MEMORY[0x263F42CD0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C08);
  }
  return result;
}

uint64_t sub_250F8F2C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  sub_250F8FF80(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_250F8F31C()
{
  unint64_t result = qword_269B13C28;
  if (!qword_269B13C28)
  {
    sub_250F7F704(255, &qword_269B13BB8, MEMORY[0x263F42D70], MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13C30, MEMORY[0x263F42D70]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C28);
  }
  return result;
}

uint64_t sub_250F8F3EC(uint64_t a1, uint64_t a2)
{
  sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F8F480(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_250F8F4E8()
{
  unint64_t result = qword_269B13C50;
  if (!qword_269B13C50)
  {
    sub_250F7F704(255, &qword_269B13820, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13C40, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C50);
  }
  return result;
}

unint64_t sub_250F8F5B8()
{
  unint64_t result = qword_269B13C58;
  if (!qword_269B13C58)
  {
    sub_250F7F704(255, &qword_269B13BF0, MEMORY[0x263F07490], MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13B50, MEMORY[0x263F07490]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C58);
  }
  return result;
}

uint64_t sub_250F8F688(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F8FF80(255, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    sub_250F8CDC0(a2, MEMORY[0x263F07490]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F8F734(uint64_t a1, uint64_t a2)
{
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_250F8F7B4()
{
  unint64_t result = qword_269B13C68;
  if (!qword_269B13C68)
  {
    sub_250F7F704(255, &qword_269B13248, MEMORY[0x263F42CD0], MEMORY[0x263F8D488]);
    sub_250F8CDC0(&qword_269B13C70, MEMORY[0x263F42CD0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C68);
  }
  return result;
}

unint64_t sub_250F8F884()
{
  unint64_t result = qword_269B13C78;
  if (!qword_269B13C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C78);
  }
  return result;
}

unint64_t sub_250F8F8DC()
{
  unint64_t result = qword_269B13C88;
  if (!qword_269B13C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C88);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for OvernightMetricsViewModel(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    char v6 = a3;
    uint64_t v7 = sub_2510376B0();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = v6[6];
    *(void *)&a1[v6[5]] = *(uint64_t *)((char *)a2 + v6[5]);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v12 = sub_2510379E0();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v13 + 16))(v9, v10, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = v6[7];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v19 = *((void *)v18 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v21 = sub_251037400();
      uint64_t v60 = v19;
      unint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v16, v17, v21);
      uint64_t v23 = v18[5];
      uint64_t v62 = v6;
      uint64_t v24 = &v16[v23];
      unint64_t v25 = &v17[v23];
      v22(&v16[v23], &v17[v23], v21);
      sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
      uint64_t v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v24[v27[5]] = *(void *)&v25[v27[5]];
      *(void *)&v24[v27[6]] = *(void *)&v25[v27[6]];
      *(void *)&v24[v27[7]] = *(void *)&v25[v27[7]];
      uint64_t v28 = v18[6];
      uint64_t v29 = &v16[v28];
      uint64_t v30 = &v17[v28];
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      v29[16] = v30[16];
      v16[v18[7]] = v17[v18[7]];
      v16[v18[8]] = v17[v18[8]];
      v16[v18[9]] = v17[v18[9]];
      uint64_t v31 = v18[10];
      unint64_t v32 = &v16[v31];
      uint64_t v33 = &v17[v31];
      uint64_t v34 = *((void *)v33 + 1);
      *(void *)unint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = v34;
      uint64_t v35 = v18[11];
      char v36 = &v16[v35];
      unint64_t v37 = &v17[v35];
      uint64_t v38 = *((void *)v37 + 1);
      *(void *)char v36 = *(void *)v37;
      *((void *)v36 + 1) = v38;
      char v39 = *(void (**)(char *, void, uint64_t, int *))(v60 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v6 = v62;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v16, 0, 1, v18);
    }
    uint64_t v40 = v6[8];
    uint64_t v41 = &a1[v40];
    BOOL v42 = (char *)a2 + v40;
    *(void *)&a1[v40] = *(uint64_t *)((char *)a2 + v40);
    uint64_t v43 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v44 = *(int *)(v43 + 20);
    uint64_t v61 = &v42[v44];
    uint64_t v63 = &v41[v44];
    unint64_t v45 = v6;
    uint64_t v46 = sub_2510374F0();
    char v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
    swift_bridgeObjectRetain();
    v47(v63, v61, v46);
    *(void *)&v41[*(int *)(v43 + 24)] = *(void *)&v42[*(int *)(v43 + 24)];
    uint64_t v48 = v45[10];
    *(void *)&a1[v45[9]] = *(uint64_t *)((char *)a2 + v45[9]);
    *(void *)&a1[v48] = *(uint64_t *)((char *)a2 + v48);
    uint64_t v49 = v45[11];
    uint64_t v64 = &a1[v49];
    uint64_t v50 = (char *)a2 + v49;
    uint64_t v51 = sub_251037400();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v64, v50, v51);
    sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v54 = v53;
    v52(&v64[*(int *)(v53 + 36)], &v50[*(int *)(v53 + 36)], v51);
    uint64_t v55 = v45[12];
    uint64_t v56 = &a1[v55];
    uint64_t v57 = (char *)a2 + v55;
    v52(&a1[v55], (char *)a2 + v55, v51);
    v52(&v56[*(int *)(v54 + 36)], &v57[*(int *)(v54 + 36)], v51);
    uint64_t v58 = v45[14];
    *(void *)&a1[v45[13]] = *(uint64_t *)((char *)a2 + v45[13]);
    *(void *)&a1[v58] = *(uint64_t *)((char *)a2 + v58);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void sub_250F8FF80(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_250F8CDC0((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for OvernightMetricsViewModel(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = sub_2510379E0();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    }
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = sub_251037400();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    v11(v8, v10);
    uint64_t v12 = v8 + *(int *)(v9 + 20);
    v11(v12, v10);
    sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v11(v12 + *(int *)(v13 + 36), v10);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = a1 + a2[8];
  swift_bridgeObjectRelease();
  uint64_t v15 = v14 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v16 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = a1 + a2[11];
  uint64_t v18 = sub_251037400();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(v17, v18);
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v21 = v20;
  v19(v17 + *(int *)(v20 + 36), v18);
  uint64_t v22 = a1 + a2[12];
  v19(v22, v18);
  v19(v22 + *(int *)(v21 + 36), v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v8 = *v9;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v10 = sub_2510379E0();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v17 = *((void *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = sub_251037400();
    uint64_t v58 = v17;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    v20(v14, v15, v19);
    uint64_t v21 = v16[5];
    uint64_t v60 = a3;
    uint64_t v22 = &v14[v21];
    uint64_t v23 = &v15[v21];
    v20(&v14[v21], &v15[v21], v19);
    sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v20(&v22[*(int *)(v24 + 36)], &v23[*(int *)(v24 + 36)], v19);
    unint64_t v25 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v22[v25[5]] = *(void *)&v23[v25[5]];
    *(void *)&v22[v25[6]] = *(void *)&v23[v25[6]];
    *(void *)&v22[v25[7]] = *(void *)&v23[v25[7]];
    uint64_t v26 = v16[6];
    uint64_t v27 = &v14[v26];
    uint64_t v28 = &v15[v26];
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    v14[v16[7]] = v15[v16[7]];
    v14[v16[8]] = v15[v16[8]];
    v14[v16[9]] = v15[v16[9]];
    uint64_t v29 = v16[10];
    uint64_t v30 = &v14[v29];
    uint64_t v31 = &v15[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)uint64_t v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = v16[11];
    uint64_t v34 = &v14[v33];
    uint64_t v35 = &v15[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    unint64_t v37 = *(void (**)(char *, void, uint64_t, int *))(v58 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v14, 0, 1, v16);
  }
  uint64_t v38 = a3[8];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(void *)(a1 + v38) = *(void *)(a2 + v38);
  uint64_t v41 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v42 = *(int *)(v41 + 20);
  uint64_t v59 = v40 + v42;
  uint64_t v61 = v39 + v42;
  uint64_t v43 = a3;
  uint64_t v44 = sub_2510374F0();
  unint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16);
  swift_bridgeObjectRetain();
  v45(v61, v59, v44);
  *(void *)(v39 + *(int *)(v41 + 24)) = *(void *)(v40 + *(int *)(v41 + 24));
  uint64_t v46 = v43[10];
  *(void *)(a1 + v43[9]) = *(void *)(a2 + v43[9]);
  *(void *)(a1 + v46) = *(void *)(a2 + v46);
  uint64_t v47 = v43[11];
  uint64_t v62 = a1 + v47;
  uint64_t v48 = a2 + v47;
  uint64_t v49 = sub_251037400();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50(v62, v48, v49);
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(v62 + *(int *)(v51 + 36), v48 + *(int *)(v51 + 36), v49);
  uint64_t v53 = v43[12];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v50(a1 + v53, a2 + v53, v49);
  v50(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v49);
  uint64_t v56 = v43[14];
  *(void *)(a1 + v43[13]) = *(void *)(a2 + v43[13]);
  *(void *)(a1 + v56) = *(void *)(a2 + v56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_250F8E484(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v8 = *v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = sub_2510379E0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (unsigned char *)(a1 + v13);
  uint64_t v15 = (unsigned char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      uint64_t v59 = sub_251037400();
      uint64_t v60 = *(void (**)(void))(*(void *)(v59 - 8) + 24);
      uint64_t v78 = v59;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v60)(v14, v15, v59);
      uint64_t v61 = v16[5];
      uint64_t v62 = &v14[v61];
      uint64_t v75 = &v15[v61];
      v60(&v14[v61]);
      sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      ((void (*)(char *, char *, uint64_t))v60)(&v62[*(int *)(v63 + 36)], &v75[*(int *)(v63 + 36)], v78);
      uint64_t v64 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v62[v64[5]] = *(void *)&v75[v64[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v62[v64[6]] = *(void *)&v75[v64[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v62[v64[7]] = *(void *)&v75[v64[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v65 = v16[6];
      uint64_t v66 = &v14[v65];
      uint64_t v67 = &v15[v65];
      long long v68 = *(_OWORD *)v67;
      v66[16] = v67[16];
      *(_OWORD *)uint64_t v66 = v68;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      uint64_t v69 = v16[10];
      unint64_t v70 = &v14[v69];
      uint64_t v71 = &v15[v69];
      *unint64_t v70 = *v71;
      v70[1] = v71[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v72 = v16[11];
      uint64_t v73 = &v14[v72];
      uint64_t v74 = &v15[v72];
      *uint64_t v73 = *v74;
      v73[1] = v74[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_250F8E484((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v21 = sub_251037400();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
  uint64_t v76 = v17;
  v22(v14, v15, v21);
  uint64_t v23 = v22;
  uint64_t v24 = v16[5];
  unint64_t v25 = &v14[v24];
  uint64_t v26 = &v15[v24];
  v23(&v14[v24], &v15[v24], v21);
  sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
  uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
  *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
  *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
  uint64_t v29 = v16[6];
  uint64_t v30 = &v14[v29];
  uint64_t v31 = &v15[v29];
  char v32 = v31[16];
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  v30[16] = v32;
  v14[v16[7]] = v15[v16[7]];
  v14[v16[8]] = v15[v16[8]];
  v14[v16[9]] = v15[v16[9]];
  uint64_t v33 = v16[10];
  uint64_t v34 = &v14[v33];
  uint64_t v35 = &v15[v33];
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  uint64_t v36 = v16[11];
  unint64_t v37 = &v14[v36];
  uint64_t v38 = &v15[v36];
  *unint64_t v37 = *v38;
  v37[1] = v38[1];
  uint64_t v77 = *(void (**)(unsigned char *, void, uint64_t, int *))(v76 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77(v14, 0, 1, v16);
LABEL_14:
  uint64_t v40 = a3[8];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  *(void *)(a1 + v40) = *(void *)(a2 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = v41 + v44;
  uint64_t v46 = v42 + v44;
  uint64_t v47 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  *(void *)(v41 + *(int *)(v43 + 24)) = *(void *)(v42 + *(int *)(v43 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[11];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  uint64_t v51 = sub_251037400();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24);
  v52(v49, v50, v51);
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v54 = v53;
  v52(v49 + *(int *)(v53 + 36), v50 + *(int *)(v53 + 36), v51);
  uint64_t v55 = a3[12];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  v52(a1 + v55, a2 + v55, v51);
  v52(v56 + *(int *)(v54 + 36), v57 + *(int *)(v54 + 36), v51);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_2510379E0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v51 = v18;
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
    v21(v15, v16, v20);
    uint64_t v22 = v17[5];
    uint64_t v23 = &v15[v22];
    uint64_t v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
    *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
    *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
    uint64_t v27 = v17[6];
    uint64_t v28 = &v15[v27];
    uint64_t v29 = &v16[v27];
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v51 + 56))(v15, 0, 1, v17);
  }
  uint64_t v30 = a3[8];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(void *)(a1 + v30) = *(void *)(a2 + v30);
  uint64_t v33 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v34 = *(int *)(v33 + 20);
  uint64_t v35 = v31 + v34;
  uint64_t v36 = v32 + v34;
  uint64_t v37 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  *(void *)(v31 + *(int *)(v33 + 24)) = *(void *)(v32 + *(int *)(v33 + 24));
  uint64_t v38 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v38) = *(void *)(a2 + v38);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = sub_251037400();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v45 = v44;
  v43(v40 + *(int *)(v44 + 36), v41 + *(int *)(v44 + 36), v42);
  uint64_t v46 = a3[12];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  v43(a1 + v46, a2 + v46, v42);
  v43(v47 + *(int *)(v45 + 36), v48 + *(int *)(v45 + 36), v42);
  uint64_t v49 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v49) = *(void *)(a2 + v49);
  return a1;
}

uint64_t assignWithTake for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_250F8E484(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = sub_2510379E0();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = (unsigned char *)(a1 + v14);
  uint64_t v16 = (unsigned char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      uint64_t v53 = sub_251037400();
      uint64_t v54 = *(void (**)(void))(*(void *)(v53 - 8) + 40);
      uint64_t v74 = v53;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v54)(v15, v16, v53);
      uint64_t v55 = v17[5];
      uint64_t v56 = &v15[v55];
      uint64_t v72 = &v16[v55];
      v54(&v15[v55]);
      sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      ((void (*)(char *, char *, uint64_t))v54)(&v56[*(int *)(v57 + 36)], &v72[*(int *)(v57 + 36)], v74);
      uint64_t v58 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v56[v58[5]] = *(void *)&v72[v58[5]];
      swift_bridgeObjectRelease();
      *(void *)&v56[v58[6]] = *(void *)&v72[v58[6]];
      swift_bridgeObjectRelease();
      *(void *)&v56[v58[7]] = *(void *)&v72[v58[7]];
      swift_bridgeObjectRelease();
      uint64_t v59 = v17[6];
      uint64_t v60 = &v15[v59];
      uint64_t v61 = &v16[v59];
      *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
      v60[16] = v61[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      uint64_t v62 = v17[10];
      uint64_t v63 = &v15[v62];
      uint64_t v64 = (uint64_t *)&v16[v62];
      uint64_t v66 = *v64;
      uint64_t v65 = v64[1];
      void *v63 = v66;
      v63[1] = v65;
      swift_bridgeObjectRelease();
      uint64_t v67 = v17[11];
      long long v68 = &v15[v67];
      uint64_t v69 = (uint64_t *)&v16[v67];
      uint64_t v71 = *v69;
      uint64_t v70 = v69[1];
      void *v68 = v71;
      v68[1] = v70;
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_250F8E484((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_13;
  }
  if (v21)
  {
LABEL_13:
    sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v22 = sub_251037400();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
  uint64_t v73 = v18;
  v23(v15, v16, v22);
  uint64_t v24 = v23;
  uint64_t v25 = v17[5];
  uint64_t v26 = &v15[v25];
  uint64_t v27 = &v16[v25];
  v24(&v15[v25], &v16[v25], v22);
  sub_250F8FF80(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v22);
  uint64_t v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v26[v29[5]] = *(void *)&v27[v29[5]];
  *(void *)&v26[v29[6]] = *(void *)&v27[v29[6]];
  *(void *)&v26[v29[7]] = *(void *)&v27[v29[7]];
  uint64_t v30 = v17[6];
  uint64_t v31 = &v15[v30];
  uint64_t v32 = &v16[v30];
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  v31[16] = v32[16];
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
  *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v73 + 56))(v15, 0, 1, v17);
LABEL_14:
  uint64_t v34 = a3[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 40))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 40);
  v46(v43, v44, v45);
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = a3[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F91FB0);
}

uint64_t sub_250F91FB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_2510376B0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[6];
LABEL_13:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_14;
  }
  sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[7];
    goto LABEL_13;
  }
  uint64_t v17 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a3[8];
    goto LABEL_13;
  }
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a3[11];
  return v19(v21, a2, v20);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F92228);
}

uint64_t sub_250F92228(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_2510376B0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_12:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_11:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_12;
  }
  sub_250F7F704(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_11;
  }
  uint64_t v17 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
  {
    uint64_t v10 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a4[8];
    goto LABEL_11;
  }
  sub_250F8FF80(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[11];
  return v19(v21, a2, a2, v20);
}

void sub_250F9248C()
{
  sub_2510376B0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(319);
    if (v1 <= 0x3F)
    {
      sub_250F7F704(319, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChartPointCollection();
        if (v3 <= 0x3F)
        {
          sub_250F8FF80(319, &qword_26B210F90, MEMORY[0x263F8D1A0]);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t destroy for OvernightMetricsViewModel.Summary()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsViewModel.Summary(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsViewModel.Summary(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsViewModel.Summary(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsViewModel.Summary(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsViewModel.Summary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.Summary()
{
  return &type metadata for OvernightMetricsViewModel.Summary;
}

unsigned char *storeEnumTagSinglePayload for OvernightMetricsViewModel.Summary.Variant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250F929E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.Summary.Variant()
{
  return &type metadata for OvernightMetricsViewModel.Summary.Variant;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for OvernightMetricsViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *__n128 result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250F92B7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.CodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.CodingKeys;
}

uint64_t *sub_250F92BB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = sub_2510379E0();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_250F92D8C(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = sub_2510379E0();
    uint64_t v5 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v3);
    if (!result)
    {
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      return v4(a1, v3);
    }
  }
  return result;
}

void *sub_250F92E8C(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = sub_2510379E0();
    uint64_t v5 = *(void *)(v4 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_250F93014(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_250F8E484((uint64_t)a1, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = sub_2510379E0();
      uint64_t v5 = *(void *)(v4 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
      {
        sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_250F931C0(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_2510379E0();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_250F9334C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250F8E484((uint64_t)a1, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_2510379E0();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        sub_250F7F704(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_250F934FC()
{
  sub_250F7F704(319, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

unint64_t sub_250F935C4()
{
  unint64_t result = qword_269B13C90;
  if (!qword_269B13C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C90);
  }
  return result;
}

unint64_t sub_250F9361C()
{
  unint64_t result = qword_269B13C98;
  if (!qword_269B13C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13C98);
  }
  return result;
}

unint64_t sub_250F93674()
{
  unint64_t result = qword_269B13CA0;
  if (!qword_269B13CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13CA0);
  }
  return result;
}

uint64_t sub_250F936C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676E6152796164 && a2 == 0xE800000000000000;
  if (v2 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000025103FF90 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x800000025103FFB0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000025103FFE0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000251040000 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696F507472616863 && a2 == 0xEB0000000073746ELL || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000251040020 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000251040040 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x736574614479656BLL && a2 == 0xED000065676E6152 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000251040060 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000251040080)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

unint64_t sub_250F93B1C()
{
  unint64_t result = qword_269B13CB0;
  if (!qword_269B13CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13CB0);
  }
  return result;
}

unint64_t sub_250F93B70()
{
  unint64_t result = qword_269B13CC0;
  if (!qword_269B13CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13CC0);
  }
  return result;
}

unint64_t sub_250F93BC4()
{
  unint64_t result = qword_269B13CD0;
  if (!qword_269B13CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13CD0);
  }
  return result;
}

void sub_250F93C18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_250F93C80()
{
  unint64_t result = qword_269B13D00;
  if (!qword_269B13D00)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B13D00);
  }
  return result;
}

uint64_t sub_250F93CC0(uint64_t a1, uint64_t a2)
{
  return sub_250F93CEC(a1, a2, (uint64_t (*)(void))sub_250FA1B90, MEMORY[0x263F42E58]);
}

uint64_t sub_250F93CEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  uint64_t v13 = *(void *)(a4(0) - 8);
  unint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_28;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 - v9;
    if (!v23)
    {
      *(void *)(v6 + 16) = v24;
LABEL_22:
      *uint64_t v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250F93EE4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250F7F704(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250F93F54(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250F94198(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_250F93FB0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250F7F704(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_250F94030@<X0>(uint64_t a1@<X8>)
{
  return sub_2510337EC(a1);
}

void sub_250F94050(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_251037740();
    a3(255);
    sub_250F8CDC0(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v5 = sub_251039690();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_250F940FC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_250F94178(uint64_t a1)
{
  return sub_250F89C98(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

void sub_250F94198(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_250F7F704(255, a3, a4, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_250F94210()
{
  if (!qword_26B210AE0)
  {
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B210AE0);
    }
  }
}

void sub_250F94274()
{
  if (!qword_26B210AA8)
  {
    sub_251037740();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B210AA8);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250F943A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys;
}

unsigned char *_s15HealthBalanceUI25OvernightMetricsViewModelV34DataTypeVisibilityDerivationMethodO23FeatureStatusCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250F94494);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys;
}

unint64_t sub_250F944D0()
{
  unint64_t result = qword_269B13D28;
  if (!qword_269B13D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D28);
  }
  return result;
}

unint64_t sub_250F94528()
{
  unint64_t result = qword_269B13D30;
  if (!qword_269B13D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D30);
  }
  return result;
}

unint64_t sub_250F94580()
{
  unint64_t result = qword_269B13D38;
  if (!qword_269B13D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D38);
  }
  return result;
}

unint64_t sub_250F945D8()
{
  unint64_t result = qword_269B13D40;
  if (!qword_269B13D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D40);
  }
  return result;
}

unint64_t sub_250F94630()
{
  unint64_t result = qword_269B13D48;
  if (!qword_269B13D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D48);
  }
  return result;
}

unint64_t sub_250F94688()
{
  unint64_t result = qword_269B13D50;
  if (!qword_269B13D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D50);
  }
  return result;
}

unint64_t sub_250F946E0()
{
  unint64_t result = qword_269B13D58;
  if (!qword_269B13D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D58);
  }
  return result;
}

unint64_t sub_250F94738()
{
  unint64_t result = qword_269B13D60;
  if (!qword_269B13D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13D60);
  }
  return result;
}

unint64_t sub_250F94790()
{
  unint64_t result = qword_269B13D68;
  if (!qword_269B13D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_269B13D68);
  }
  return result;
}

uint64_t dispatch thunk of SleepingSampleDataTypePreferredUnitProviding.preferredAggregateValueUnit(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SleepingSampleDataTypePreferredUnitProviding.startObserving()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void *sub_250F9481C(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_250FCB9B0((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = sub_251039620();

  if (!v4) {
    return 0;
  }
  sub_250F408B4(0, (unint64_t *)&qword_26B2108E8);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

id sub_250F948F4()
{
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 16);
  return v1;
}

id sub_250F949A4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 16);
  *a2 = v4;
  return v4;
}

uint64_t sub_250F94A5C(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  id v2 = v1;
  sub_251037520();

  return swift_release();
}

uint64_t sub_250F94B38()
{
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t sub_250F94BE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = &unk_269B13D90;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_250F94CC0(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_250F94D90;
  return v5();
}

uint64_t sub_250F94D90(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  void *v3 = a1;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_250F94EA0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  swift_retain();
  sub_251037520();
  swift_release();
  return swift_release();
}

uint64_t sub_250F94FBC(int *a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_250F95098;
  return v4(v1 + 16);
}

uint64_t sub_250F95098()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t sub_250F951A4()
{
  return swift_retain();
}

uint64_t sub_250F95248@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  *a2 = *(void *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_250F952F4()
{
  return swift_release();
}

uint64_t sub_250F953D4()
{
  return swift_retain();
}

uint64_t sub_250F95478@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  *a2 = *(void *)(v3 + 48);
  return swift_retain();
}

uint64_t sub_250F95524()
{
  return swift_release();
}

void *sub_250F95604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_250F408B4(0, &qword_26B2108C0);
  uint64_t v8 = MEMORY[0x253391120]((id)*MEMORY[0x263F09BE0]);
  unint64_t result = (id)_HKGenerateDefaultUnitForQuantityType();
  if (result)
  {
    uint64_t v10 = result;
    id v11 = objc_msgSend(self, sel__changeInUnit_, result);

    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = a1;
    uint64_t v12[3] = v8;
    v12[4] = a2;
    v12[5] = a3;
    v12[6] = v4;
    type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
    uint64_t v13 = (void *)swift_allocObject();
    v13[5] = 0;
    v13[6] = 0;
    sub_251037560();
    v13[2] = v11;
    v13[3] = &unk_269B13DD0;
    v13[4] = v12;
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_250F9572C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[27] = a4;
  v5[28] = a5;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  uint64_t v6 = sub_251037C90();
  v5[29] = v6;
  v5[30] = *(void *)(v6 - 8);
  v5[31] = swift_task_alloc();
  sub_2510392D0();
  v5[32] = sub_2510392C0();
  uint64_t v8 = sub_251039280();
  v5[33] = v8;
  v5[34] = v7;
  return MEMORY[0x270FA2498](sub_250F95828, v8, v7);
}

uint64_t sub_250F95828()
{
  uint64_t v1 = v0[25];
  sub_250F9930C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25103C4E0;
  *(void *)(inited + 32) = v1;
  unint64_t v12 = inited;
  sub_251039250();
  uint64_t v3 = (void *)v0[25];
  if (!(v12 >> 62))
  {
    uint64_t v4 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v5 = v3;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  id v6 = v3;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_251039650();
  swift_bridgeObjectRelease();
  if (v7) {
LABEL_3:
  }
    sub_250F99368(v12);
LABEL_5:
  uint64_t v8 = (void *)v0[24];
  swift_bridgeObjectRelease();
  sub_250F408B4(0, &qword_26B2108C0);
  sub_250F996C0();
  uint64_t v9 = sub_251039360();
  v0[35] = v9;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[7] = v0 + 20;
  v0[3] = sub_250F95A1C;
  uint64_t v10 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_250F95F70;
  v0[13] = &block_descriptor;
  v0[14] = v10;
  objc_msgSend(v8, sel_preferredUnitsForQuantityTypes_completion_, v9, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_250F95A1C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 288) = v2;
  uint64_t v3 = *(void *)(v1 + 272);
  uint64_t v4 = *(void *)(v1 + 264);
  if (v2) {
    id v5 = sub_250F95C70;
  }
  else {
    id v5 = sub_250F95B4C;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_250F95B4C()
{
  uint64_t v1 = (void *)v0[35];
  uint64_t v2 = (void *)v0[25];
  swift_release();
  uint64_t v3 = v0[20];

  id v4 = v2;
  id v5 = sub_250F9481C(v4, v3);
  swift_bridgeObjectRelease();

  if (!v5)
  {
    id v5 = (id)_HKGenerateDefaultUnitForQuantityType();
    if (!v5) {
      id v5 = objc_msgSend(self, sel_degreeCelsiusUnit);
    }
  }
  id v6 = (void (*)(void))v0[26];
  if (v6) {
    v6();
  }
  id v7 = objc_msgSend(self, sel__changeInUnit_, v5);

  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(id))v0[1];
  return v8(v7);
}

uint64_t sub_250F95C70()
{
  uint64_t v29 = v0;
  uint64_t v2 = (void *)v0[35];
  uint64_t v1 = (void *)v0[36];
  swift_release();
  swift_willThrow();

  sub_251037C70();
  id v3 = v1;
  id v4 = v1;
  id v5 = sub_251037C80();
  os_log_type_t v6 = sub_2510393B0();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (void *)v0[36];
    uint64_t v8 = v0[30];
    uint64_t v26 = v0[29];
    uint64_t v27 = v0[31];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v28[0] = v10;
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v11 = sub_251039940();
    v0[21] = sub_250F32744(v11, v12, v28);
    sub_2510394A0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    v0[22] = v7;
    id v13 = v7;
    sub_250F32D94();
    uint64_t v14 = sub_2510391F0();
    v0[23] = sub_250F32744(v14, v15, v28);
    sub_2510394A0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_250F1E000, v5, v6, "[%{public}s] Error retrieving unit preferences: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v10, -1, -1);
    MEMORY[0x253391D80](v9, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v27, v26);
  }
  else
  {
    uint64_t v16 = (void *)v0[36];
    uint64_t v18 = v0[30];
    uint64_t v17 = v0[31];
    uint64_t v19 = v0[29];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  id v20 = (id)_HKGenerateDefaultUnitForQuantityType();
  uint64_t v21 = (void *)v0[36];
  if (!v20) {
    id v20 = objc_msgSend(self, sel_degreeCelsiusUnit);
  }

  uint64_t v22 = (void (*)(void))v0[26];
  if (v22) {
    v22();
  }
  id v23 = objc_msgSend(self, sel__changeInUnit_, v20);

  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(id))v0[1];
  return v24(v23);
}

uint64_t sub_250F95F70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_250F32D94();
    uint64_t v5 = swift_allocError();
    *os_log_type_t v6 = a3;
    id v7 = a3;
    return MEMORY[0x270FA2410](v3, v5);
  }
  else
  {
    sub_250F408B4(0, &qword_26B2108C0);
    sub_250F408B4(0, (unint64_t *)&qword_26B2108E8);
    sub_250F996C0();
    **(void **)(*(void *)(v3 + 64) + 40) = sub_251039050();
    return MEMORY[0x270FA2408](v3);
  }
}

id sub_250F96074(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == *MEMORY[0x263F42CC8] || v9 == *MEMORY[0x263F42CB8])
  {
    id v10 = objc_msgSend(self, sel__countPerMinuteUnit);
LABEL_12:
    return v10;
  }
  if (v9 == *MEMORY[0x263F42CB0])
  {
    id v10 = objc_msgSend(self, sel_percentUnit);
    goto LABEL_12;
  }
  if (v9 != *MEMORY[0x263F42CC0])
  {
    if (v9 != *MEMORY[0x263F42CA8])
    {
      id result = (id)sub_251039640();
      __break(1u);
      return result;
    }
    id v10 = objc_msgSend(self, sel_secondUnit);
    goto LABEL_12;
  }
  swift_getKeyPath();
  v13[1] = v2;
  sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  uint64_t v11 = *(void **)(v2 + 16);
  return v11;
}

void sub_250F9633C()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  sub_250F98FD0(0, &qword_26B210BE0, MEMORY[0x263F8F520]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v39 - v4;
  uint64_t v6 = sub_251037C90();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  id v10 = (char *)v0
      + OBJC_IVAR____TtC15HealthBalanceUI43SleepingSampleDataTypePreferredUnitProvider___observationRegistrar;
  uint64_t v48 = (void (*)(void, void, void, void))v1;
  uint64_t v11 = sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  if (!*(void *)(v1 + 40))
  {
    uint64_t v44 = v11;
    uint64_t v45 = v10;
    sub_251037C70();
    unint64_t v12 = sub_251037C80();
    os_log_type_t v13 = sub_2510393D0();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v46 = v2;
    if (v14)
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = (void (*)(void, void, void, void))swift_slowAlloc();
      uint64_t v48 = v43;
      *(_DWORD *)unint64_t v15 = 136446210;
      uint64_t v42 = v15 + 4;
      uint64_t v16 = sub_251039940();
      uint64_t v47 = sub_250F32744(v16, v17, (uint64_t *)&v48);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v12, v13, "[%{public}s] Beginning observation", v15, 0xCu);
      uint64_t v18 = v43;
      swift_arrayDestroy();
      MEMORY[0x253391D80](v18, -1, -1);
      uint64_t v19 = v15;
      uint64_t v2 = v46;
      MEMORY[0x253391D80](v19, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v20 = sub_251039300();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    id v23 = (uint8_t *)(v21 + 56);
    uint64_t v41 = v20;
    v22(v5, 1, 1, v20);
    uint64_t v42 = v23;
    uint64_t v43 = (void (*)(void, void, void, void))v22;
    uint64_t v24 = v22;
    sub_2510392D0();
    swift_retain();
    uint64_t v25 = sub_2510392C0();
    uint64_t v26 = (void *)swift_allocObject();
    uint64_t v27 = MEMORY[0x263F8F500];
    v26[2] = v25;
    v26[3] = v27;
    v26[4] = v1;
    sub_250FB1C40((uint64_t)v5, (uint64_t)&unk_269B13DA0, (uint64_t)v26);
    swift_release();
    id v28 = objc_msgSend(self, sel_defaultCenter);
    v24(v5, 1, 1, v20);
    uint64_t v29 = swift_allocObject();
    swift_weakInit();
    uint64_t v30 = (void *)swift_allocObject();
    void v30[2] = 0;
    v30[3] = 0;
    v30[4] = v28;
    v30[5] = v29;
    v30[6] = v2;
    id v31 = v28;
    uint64_t v32 = sub_251006FAC((uint64_t)v5, (uint64_t)&unk_269B13DB0, (uint64_t)v30);
    uint64_t v40 = (void (*)(uint64_t))MEMORY[0x263F8F520];
    sub_250F9906C((uint64_t)v5, &qword_26B210BE0, MEMORY[0x263F8F520]);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    v39[-2] = v1;
    v39[-1] = v32;
    uint64_t v48 = (void (*)(void, void, void, void))v1;
    v39[1] = MEMORY[0x263F8EE60] + 8;
    sub_251037520();
    swift_release();
    swift_release();
    v43(v5, 1, 1, v41);
    uint64_t v34 = swift_allocObject();
    swift_weakInit();
    uint64_t v35 = (void *)swift_allocObject();
    v35[2] = 0;
    v35[3] = 0;
    v35[4] = v31;
    v35[5] = v34;
    v35[6] = v46;
    id v36 = v31;
    uint64_t v37 = sub_251006FAC((uint64_t)v5, (uint64_t)&unk_269B13DC0, (uint64_t)v35);
    sub_250F9906C((uint64_t)v5, &qword_26B210BE0, v40);
    uint64_t v38 = swift_getKeyPath();
    MEMORY[0x270FA5388](v38);
    v39[-2] = v1;
    v39[-1] = v37;
    uint64_t v48 = (void (*)(void, void, void, void))v1;
    sub_251037520();
    swift_release();
    swift_release();
  }
}

uint64_t sub_250F96974()
{
  v0[2] = sub_2510392D0();
  v0[3] = sub_2510392C0();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_250F96A20;
  return sub_250F97E9C();
}

uint64_t sub_250F96A20()
{
  swift_task_dealloc();
  uint64_t v1 = sub_251039280();
  return MEMORY[0x270FA2498](sub_250F96B5C, v1, v0);
}

uint64_t sub_250F96B5C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_250F96BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = sub_251037C90();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  sub_250F98FD0(0, &qword_26B2107F8, MEMORY[0x263F06320]);
  v6[12] = swift_task_alloc();
  uint64_t v8 = sub_251039450();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_250F96D24, 0, 0);
}

uint64_t sub_250F96D24()
{
  v0[16] = sub_251039460();
  swift_retain();
  sub_251039440();
  swift_beginAccess();
  uint64_t v1 = sub_250F99024(&qword_26B2108E0, MEMORY[0x263F07C88]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[17] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_250F96E50;
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  return MEMORY[0x270FA1E80](v3, v4, v1);
}

uint64_t sub_250F96E50()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_250F972D8;
  }
  else {
    uint64_t v2 = sub_250F96F64;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_250F96F64()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[12];
  uint64_t v2 = sub_251037100();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    sub_251037C70();
    uint64_t v5 = sub_251037C80();
    os_log_type_t v6 = sub_2510393D0();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = v0[9];
    if (v7)
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v13 = sub_251039940();
      *(void *)(v11 + 4) = sub_250F32744(v13, v14, &v21);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v5, v6, "[%{public}s] Received unit preferences did change notification", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v12, -1, -1);
      MEMORY[0x253391D80](v11, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t Strong = swift_weakLoadStrong();
    v0[19] = Strong;
    if (Strong)
    {
      uint64_t v16 = (void *)swift_task_alloc();
      v0[20] = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_250F97358;
      return sub_250F97E9C();
    }
    else
    {
      sub_250F9906C(v0[12], &qword_26B2107F8, MEMORY[0x263F06320]);
      uint64_t v17 = sub_250F99024(&qword_26B2108E0, MEMORY[0x263F07C88]);
      uint64_t v18 = (void *)swift_task_alloc();
      v0[17] = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_250F96E50;
      uint64_t v19 = v0[12];
      uint64_t v20 = v0[13];
      return MEMORY[0x270FA1E80](v19, v20, v17);
    }
  }
}

uint64_t sub_250F972D8()
{
  *(void *)(v0 + 40) = *(void *)(v0 + 144);
  sub_250F32D94();
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_250F97358()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_250F97470, 0, 0);
}

uint64_t sub_250F97470()
{
  sub_250F9906C(v0[12], &qword_26B2107F8, MEMORY[0x263F06320]);
  uint64_t v1 = sub_250F99024(&qword_26B2108E0, MEMORY[0x263F07C88]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[17] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_250F96E50;
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  return MEMORY[0x270FA1E80](v3, v4, v1);
}

uint64_t sub_250F9756C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = sub_251037C90();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  sub_250F98FD0(0, &qword_26B2107F8, MEMORY[0x263F06320]);
  v6[12] = swift_task_alloc();
  uint64_t v8 = sub_251039450();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_250F976D4, 0, 0);
}

uint64_t sub_250F976D4()
{
  v0[16] = sub_251039460();
  swift_retain();
  sub_251039440();
  swift_beginAccess();
  uint64_t v1 = sub_250F99024(&qword_26B2108E0, MEMORY[0x263F07C88]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[17] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_250F97800;
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  return MEMORY[0x270FA1E80](v3, v4, v1);
}

uint64_t sub_250F97800()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_250F99B64;
  }
  else {
    uint64_t v2 = sub_250F97914;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_250F97914()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[12];
  uint64_t v2 = sub_251037100();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    sub_251037C70();
    uint64_t v5 = sub_251037C80();
    os_log_type_t v6 = sub_2510393D0();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = v0[9];
    if (v7)
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v13 = sub_251039940();
      *(void *)(v11 + 4) = sub_250F32744(v13, v14, &v21);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v5, v6, "[%{public}s] Received current locale did change notification", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v12, -1, -1);
      MEMORY[0x253391D80](v11, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t Strong = swift_weakLoadStrong();
    v0[19] = Strong;
    if (Strong)
    {
      uint64_t v16 = (void *)swift_task_alloc();
      v0[20] = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_250F97C88;
      return sub_250F97E9C();
    }
    else
    {
      sub_250F9906C(v0[12], &qword_26B2107F8, MEMORY[0x263F06320]);
      uint64_t v17 = sub_250F99024(&qword_26B2108E0, MEMORY[0x263F07C88]);
      uint64_t v18 = (void *)swift_task_alloc();
      v0[17] = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_250F97800;
      uint64_t v19 = v0[12];
      uint64_t v20 = v0[13];
      return MEMORY[0x270FA1E80](v19, v20, v17);
    }
  }
}

uint64_t sub_250F97C88()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_250F97DA0, 0, 0);
}

uint64_t sub_250F97DA0()
{
  sub_250F9906C(v0[12], &qword_26B2107F8, MEMORY[0x263F06320]);
  uint64_t v1 = sub_250F99024(&qword_26B2108E0, MEMORY[0x263F07C88]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[17] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_250F97800;
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  return MEMORY[0x270FA1E80](v3, v4, v1);
}

uint64_t sub_250F97E9C()
{
  v1[7] = v0;
  v1[8] = *v0;
  uint64_t v2 = sub_251037C90();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  sub_2510392D0();
  v1[13] = sub_2510392C0();
  uint64_t v4 = sub_251039280();
  v1[14] = v4;
  v1[15] = v3;
  return MEMORY[0x270FA2498](sub_250F97FC8, v4, v3);
}

uint64_t sub_250F97FC8()
{
  uint64_t v1 = v0[7];
  swift_getKeyPath();
  v0[16] = OBJC_IVAR____TtC15HealthBalanceUI43SleepingSampleDataTypePreferredUnitProvider___observationRegistrar;
  v0[2] = v1;
  v0[17] = sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  sub_251037530();
  swift_release();
  uint64_t v2 = *(int **)(v1 + 24);
  v0[18] = *(void *)(v1 + 32);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[19] = v3;
  void *v3 = v0;
  v3[1] = sub_250F98128;
  return v5();
}

uint64_t sub_250F98128(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  return MEMORY[0x270FA2498](sub_250F98274, v4, v3);
}

uint64_t sub_250F98274()
{
  uint64_t v38 = v0;
  uint64_t v1 = v0[7];
  swift_release();
  swift_getKeyPath();
  v0[3] = v1;
  sub_251037530();
  swift_release();
  uint64_t v2 = *(void **)(v1 + 16);
  sub_250F408B4(0, (unint64_t *)&qword_26B2108E8);
  id v3 = v2;
  char v4 = sub_251039480();

  if (v4)
  {
    sub_251037C70();
    uint64_t v5 = sub_251037C80();
    os_log_type_t v6 = sub_2510393D0();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = (void *)v0[20];
    uint64_t v10 = v0[10];
    uint64_t v9 = v0[11];
    uint64_t v11 = v0[9];
    if (v7)
    {
      uint64_t v35 = v0[9];
      uint64_t v33 = (void *)v0[20];
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      uint64_t v13 = v37[0];
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v14 = sub_251039940();
      v0[6] = sub_250F32744(v14, v15, v37);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v5, v6, "[%{public}s] Fetched units (no changes)", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v13, -1, -1);
      MEMORY[0x253391D80](v12, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v35);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
  }
  else
  {
    uint64_t v16 = (void *)v0[20];
    uint64_t v17 = v0[7];
    swift_getKeyPath();
    uint64_t v18 = swift_task_alloc();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v16;
    v0[4] = v17;
    id v19 = v16;
    sub_251037520();
    swift_release();

    swift_task_dealloc();
    sub_251037C70();
    uint64_t v20 = sub_251037C80();
    os_log_type_t v21 = sub_2510393D0();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = (void *)v0[20];
    uint64_t v24 = v0[12];
    uint64_t v25 = v0[9];
    uint64_t v26 = v0[10];
    if (v22)
    {
      uint64_t v34 = (void *)v0[20];
      uint64_t v36 = v0[12];
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v37[0] = v28;
      *(_DWORD *)uint64_t v27 = 136446210;
      uint64_t v29 = sub_251039940();
      v0[5] = sub_250F32744(v29, v30, v37);
      sub_2510394A0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250F1E000, v20, v21, "[%{public}s] Updated units", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v28, -1, -1);
      MEMORY[0x253391D80](v27, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v36, v25);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

uint64_t sub_250F986C4()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI43SleepingSampleDataTypePreferredUnitProvider___observationRegistrar;
  uint64_t v2 = sub_251037570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_250F98784()
{
  return type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
}

uint64_t type metadata accessor for SleepingSampleDataTypePreferredUnitProvider()
{
  uint64_t result = qword_26B2108A0;
  if (!qword_26B2108A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F987D8()
{
  uint64_t result = sub_251037570();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_250F98890(uint64_t a1)
{
  return sub_250F96074(a1);
}

void sub_250F988B4()
{
}

uint64_t sub_250F988D8(uint64_t a1)
{
  uint64_t result = sub_250F99024(&qword_26B210890, (void (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_250F98940()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  id v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v2;
  id v4 = v2;
}

uint64_t sub_250F98978()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250F989B0()
{
  uint64_t v2 = *(int **)(v0 + 16);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_250F99B44;
  id v4 = (uint64_t (*)(int *))((char *)&dword_269B13D78 + dword_269B13D78);
  return v4(v2);
}

uint64_t sub_250F98A5C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 24) = v0[3];
  *(void *)(v1 + 32) = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_250F98A9C(uint64_t a1)
{
  id v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_250F99B68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_269B13D88 + dword_269B13D88);
  return v6(a1, v4);
}

uint64_t sub_250F98B5C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250F98B9C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_250F99B68;
  return sub_250F96974();
}

uint64_t sub_250F98C50()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_250F98C8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_250F98D54;
  return sub_250F96BBC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_250F98D54()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_250F98E48()
{
  return sub_250F990C8();
}

uint64_t objectdestroy_50Tm()
{
  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250F98EAC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_250F99B68;
  return sub_250F9756C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_250F98F7C()
{
  return sub_250F98F94();
}

uint64_t sub_250F98F94()
{
  *(void *)(*(void *)(v0 + 16) + 48) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

void sub_250F98FD0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250F99024(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250F9906C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_250F98FD0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250F990C8()
{
  *(void *)(*(void *)(v0 + 16) + 40) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_250F99104()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_250F99154()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_250F99210;
  return sub_250F9572C(v2, v3, v4, v5, v6);
}

uint64_t sub_250F99210(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

void sub_250F9930C()
{
  if (!qword_26B210908)
  {
    unint64_t v0 = sub_2510397D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B210908);
    }
  }
}

void sub_250F99368(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_251039650();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_250F99728();
      uint64_t v3 = sub_251039530();
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_251039650();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = v3 + 56;
  uint64_t v43 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v41 = v1;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = MEMORY[0x2533912B0](v8, v1);
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        uint64_t v12 = sub_251039470();
        uint64_t v13 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)(v7 + 8 * v15) = v17 | v16;
        *(void *)(*(void *)(v3 + 48) + 8 * v14) = v11;
        uint64_t v23 = *(void *)(v3 + 16);
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        *(void *)(v3 + 16) = v24;
        if (v8 == v5) {
          return;
        }
      }
      sub_250F408B4(0, &qword_26B2108C0);
      id v18 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
      char v19 = sub_251039480();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
          char v22 = sub_251039480();

          if (v22) {
            goto LABEL_11;
          }
        }
        unint64_t v1 = v41;
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      unint64_t v1 = v41;
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v40 = v1 + 32;
  uint64_t v42 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    id v26 = *(id *)(v40 + 8 * v25);
    uint64_t v27 = sub_251039470();
    uint64_t v28 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v29 = v27 & ~v28;
    unint64_t v30 = v29 >> 6;
    uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
    uint64_t v32 = 1 << v29;
    if (((1 << v29) & v31) != 0)
    {
      sub_250F408B4(0, &qword_26B2108C0);
      id v33 = *(id *)(*(void *)(v3 + 48) + 8 * v29);
      char v34 = sub_251039480();

      if (v34)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v35 = ~v28;
      while (1)
      {
        unint64_t v29 = (v29 + 1) & v35;
        unint64_t v30 = v29 >> 6;
        uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
        uint64_t v32 = 1 << v29;
        if ((v31 & (1 << v29)) == 0) {
          break;
        }
        id v36 = *(id *)(*(void *)(v3 + 48) + 8 * v29);
        char v37 = sub_251039480();

        if (v37) {
          goto LABEL_24;
        }
      }
    }
    *(void *)(v7 + 8 * v30) = v32 | v31;
    *(void *)(*(void *)(v3 + 48) + 8 * v29) = v26;
    uint64_t v38 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v38, 1);
    uint64_t v39 = v38 + 1;
    if (v10) {
      goto LABEL_38;
    }
    *(void *)(v3 + 16) = v39;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

unint64_t sub_250F996C0()
{
  unint64_t result = qword_26B2108C8;
  if (!qword_26B2108C8)
  {
    sub_250F408B4(255, &qword_26B2108C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2108C8);
  }
  return result;
}

void sub_250F99728()
{
  if (!qword_26B2108F0)
  {
    sub_250F408B4(255, &qword_26B2108C0);
    sub_250F996C0();
    unint64_t v0 = sub_251039540();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2108F0);
    }
  }
}

uint64_t sub_250F9979C(uint64_t a1)
{
  uint64_t v2 = sub_251037740();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_250F99AB0();
    uint64_t v9 = sub_251039530();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_250F99024(&qword_26B210A88, MEMORY[0x263F42CD0]);
      uint64_t v16 = sub_251039070();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_250F99024(&qword_26B210A90, MEMORY[0x263F42CD0]);
          char v23 = sub_2510390F0();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

void sub_250F99AB0()
{
  if (!qword_269B13DD8)
  {
    sub_251037740();
    sub_250F99024(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v0 = sub_251039540();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13DD8);
    }
  }
}

void sub_250F99B4C()
{
}

void *sub_250F99B6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_251037640();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_250F99C48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = sub_251037640();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t sub_250F99CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F99D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F99DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F99E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_250F99EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F99F04);
}

uint64_t sub_250F99F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_251037640();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 32);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_250F99FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F99FC8);
}

uint64_t sub_250F99FC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 16) = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_251037640();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartWarmupProgressCounter()
{
  uint64_t result = qword_269B13DE0;
  if (!qword_269B13DE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F9A0B8()
{
  uint64_t result = sub_251037640();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_250F9A168()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F9A184@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v2 = sub_251037640();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for WarmupProgressCounter();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v24 - v11;
  sub_250F9A478();
  uint64_t v25 = v13;
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OvernightMetricsChartWarmupProgressCounter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, (char *)v1 + *(int *)(v16 + 32), v2);
  double v17 = v1[3] * *v1;
  double v18 = *v1 * v1[4];
  unint64_t v19 = &v9[*(int *)(v7 + 32)];
  v30[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v30);
  sub_250F9A600((uint64_t)v30, (uint64_t)v31, (uint64_t (*)(void))sub_250F9A4E8);
  memcpy(v19, v31, 0x119uLL);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v9, v5, v2);
  uint64_t v20 = &v9[*(int *)(v7 + 28)];
  *(double *)uint64_t v20 = v17;
  *((double *)v20 + 1) = v18;
  *((_OWORD *)v20 + 1) = xmmword_25103C670;
  sub_250F9A600((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for WarmupProgressCounter);
  sub_251038D00();
  sub_251038150();
  sub_250F9A540((uint64_t)v12, (uint64_t)v15);
  uint64_t v21 = &v15[*(int *)(v25 + 36)];
  long long v22 = v28;
  *(_OWORD *)uint64_t v21 = v27;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v29;
  sub_250F9A5A4((uint64_t)v12);
  return sub_250F9A600((uint64_t)v15, v26, (uint64_t (*)(void))sub_250F9A478);
}

void sub_250F9A478()
{
  if (!qword_269B13DF0)
  {
    type metadata accessor for WarmupProgressCounter();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13DF0);
    }
  }
}

uint64_t sub_250F9A4E0(uint64_t result)
{
  *(unsigned char *)(result + 280) = 0;
  return result;
}

void sub_250F9A4E8()
{
  if (!qword_269B139B0)
  {
    unint64_t v0 = sub_251038090();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B139B0);
    }
  }
}

uint64_t sub_250F9A540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WarmupProgressCounter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F9A5A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WarmupProgressCounter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250F9A600(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_250F9A66C()
{
  unint64_t result = qword_269B13DF8;
  if (!qword_269B13DF8)
  {
    sub_250F9A478();
    sub_250F9A6E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13DF8);
  }
  return result;
}

unint64_t sub_250F9A6E4()
{
  unint64_t result = qword_269B13E00;
  if (!qword_269B13E00)
  {
    type metadata accessor for WarmupProgressCounter();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13E00);
  }
  return result;
}

void *sub_250F9A73C(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v47 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v48 = (void *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_251037740();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_251037400();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = v8[6];
    unint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    v13(&a1[v14], &a2[v14], v12);
    sub_250F26E08();
    uint64_t v18 = v17;
    v13(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
    uint64_t v19 = v8[7];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    v13(&a1[v19], &a2[v19], v12);
    uint64_t v106 = v12;
    uint64_t v107 = v18;
    uint64_t v108 = v13;
    v13(&v20[*(int *)(v18 + 36)], &v21[*(int *)(v18 + 36)], v12);
    uint64_t v22 = v8[8];
    char v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    *(void *)char v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = v8[9];
    uint64_t v26 = &a1[v25];
    long long v27 = &a2[v25];
    uint64_t v28 = sub_2510378C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    uint64_t v29 = v8[10];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)uint64_t v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = v8[11];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = v8[12];
    uint64_t v38 = &a1[v37];
    uint64_t v39 = &a2[v37];
    uint64_t v40 = *((void *)v39 + 1);
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = v40;
    uint64_t v41 = a3[5];
    uint64_t v42 = &a1[v41];
    uint64_t v43 = &a2[v41];
    uint64_t v44 = *(void *)&a2[v41];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44)
    {
      uint64_t v45 = *((void *)v43 + 1);
      *(void *)uint64_t v42 = v44;
      *((void *)v42 + 1) = v45;
      long long v46 = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 1) = *((_OWORD *)v43 + 1);
      *((_OWORD *)v42 + 2) = v46;
      *((_OWORD *)v42 + 3) = *((_OWORD *)v43 + 3);
      *((void *)v42 + 8) = *((void *)v43 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v49 = *((_OWORD *)v43 + 3);
      *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 3) = v49;
      *((void *)v42 + 8) = *((void *)v43 + 8);
      long long v50 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v50;
    }
    uint64_t v51 = a3[7];
    uint64_t v110 = a3;
    uint64_t v111 = a1;
    a1[a3[6]] = a2[a3[6]];
    uint64_t v52 = &a1[v51];
    uint64_t v53 = &a2[v51];
    *(void *)&a1[v51] = *(void *)&a2[v51];
    uint64_t v54 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v55 = v54[5];
    uint64_t v56 = &v52[v55];
    uint64_t v57 = &v53[v55];
    uint64_t v58 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v105 = *((void *)v58 - 1);
    uint64_t v59 = *(unsigned int (**)(char *, uint64_t, int *))(v105 + 48);
    swift_bridgeObjectRetain();
    if (v59(v57, 1, v58))
    {
      sub_250F6CD98();
      memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      v108(v56, v57, v106);
      uint64_t v61 = v58[5];
      uint64_t v62 = &v56[v61];
      uint64_t v63 = &v57[v61];
      v108(&v56[v61], &v57[v61], v106);
      v108(&v62[*(int *)(v107 + 36)], &v63[*(int *)(v107 + 36)], v106);
      uint64_t v64 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v62[v64[5]] = *(void *)&v63[v64[5]];
      *(void *)&v62[v64[6]] = *(void *)&v63[v64[6]];
      *(void *)&v62[v64[7]] = *(void *)&v63[v64[7]];
      uint64_t v65 = v58[6];
      uint64_t v66 = &v56[v65];
      uint64_t v67 = &v57[v65];
      *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
      v66[16] = v67[16];
      v56[v58[7]] = v57[v58[7]];
      v56[v58[8]] = v57[v58[8]];
      v56[v58[9]] = v57[v58[9]];
      uint64_t v68 = v58[10];
      uint64_t v69 = &v56[v68];
      uint64_t v70 = &v57[v68];
      uint64_t v71 = *((void *)v70 + 1);
      *(void *)uint64_t v69 = *(void *)v70;
      *((void *)v69 + 1) = v71;
      uint64_t v72 = v58[11];
      uint64_t v73 = &v56[v72];
      uint64_t v74 = &v57[v72];
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = v75;
      uint64_t v109 = *(void (**)(char *, void, uint64_t, int *))(v105 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v109(v56, 0, 1, v58);
    }
    *(_OWORD *)&v52[v54[6]] = *(_OWORD *)&v53[v54[6]];
    uint64_t v76 = v54[7];
    uint64_t v77 = &v52[v76];
    uint64_t v78 = &v53[v76];
    long long v79 = *((_OWORD *)v78 + 1);
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    *((_OWORD *)v77 + 1) = v79;
    *((void *)v77 + 10) = *((void *)v78 + 10);
    long long v80 = *((_OWORD *)v78 + 4);
    long long v81 = *((_OWORD *)v78 + 2);
    *((_OWORD *)v77 + 3) = *((_OWORD *)v78 + 3);
    *((_OWORD *)v77 + 4) = v80;
    *((_OWORD *)v77 + 2) = v81;
    *(void *)&v52[v54[8]] = *(void *)&v53[v54[8]];
    *(void *)&v52[v54[9]] = *(void *)&v53[v54[9]];
    uint64_t v82 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v83 = &v52[v82];
    uint64_t v84 = &v53[v82];
    uint64_t v85 = *((void *)v84 + 1);
    *(void *)uint64_t v83 = *(void *)v84;
    *((void *)v83 + 1) = v85;
    uint64_t v86 = *((void *)v84 + 3);
    *((void *)v83 + 2) = *((void *)v84 + 2);
    *((void *)v83 + 3) = v86;
    *((void *)v83 + 4) = *((void *)v84 + 4);
    *(_OWORD *)(v83 + 40) = *(_OWORD *)(v84 + 40);
    *(_OWORD *)(v83 + 56) = *(_OWORD *)(v84 + 56);
    *(_OWORD *)(v83 + 72) = *(_OWORD *)(v84 + 72);
    *(_OWORD *)(v83 + 88) = *(_OWORD *)(v84 + 88);
    *(_OWORD *)(v83 + 104) = *(_OWORD *)(v84 + 104);
    uint64_t v87 = v110[8];
    uint64_t v88 = (char *)v111 + v87;
    unint64_t v89 = &a2[v87];
    uint64_t v90 = *(void *)&a2[v87];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v90)
    {
      uint64_t v91 = *((void *)v89 + 1);
      uint64_t v92 = *((void *)v89 + 2);
      *(void *)uint64_t v88 = v90;
      *((void *)v88 + 1) = v91;
      *((void *)v88 + 2) = v92;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
      *((void *)v88 + 2) = *((void *)v89 + 2);
    }
    v88[24] = v89[24];
    v88[32] = v89[32];
    uint64_t v93 = *((void *)v89 + 6);
    *((void *)v88 + 5) = *((void *)v89 + 5);
    *((void *)v88 + 6) = v93;
    v88[56] = v89[56];
    uint64_t v94 = *((void *)v89 + 9);
    *((void *)v88 + 8) = *((void *)v89 + 8);
    *((void *)v88 + 9) = v94;
    *((void *)v88 + 10) = *((void *)v89 + 10);
    long long v95 = *(_OWORD *)(v89 + 88);
    *(_OWORD *)(v88 + 104) = *(_OWORD *)(v89 + 104);
    *(_OWORD *)(v88 + 88) = v95;
    long long v96 = *(_OWORD *)(v89 + 120);
    long long v97 = *(_OWORD *)(v89 + 136);
    *(_OWORD *)(v88 + 152) = *(_OWORD *)(v89 + 152);
    *(_OWORD *)(v88 + 136) = v97;
    *(_OWORD *)(v88 + 120) = v96;
    uint64_t v98 = *((void *)v89 + 22);
    *((void *)v88 + 21) = *((void *)v89 + 21);
    *((void *)v88 + 22) = v98;
    uint64_t v100 = *((void *)v89 + 23);
    uint64_t v99 = *((void *)v89 + 24);
    v88[200] = v89[200];
    *((void *)v88 + 23) = v100;
    *((void *)v88 + 24) = v99;
    v88[201] = v89[201];
    uint64_t v101 = *((void *)v89 + 27);
    *((void *)v88 + 26) = *((void *)v89 + 26);
    *((void *)v88 + 27) = v101;
    uint64_t v102 = *((void *)v89 + 29);
    *((void *)v88 + 28) = *((void *)v89 + 28);
    *((void *)v88 + 29) = v102;
    *((void *)v88 + 30) = *((void *)v89 + 30);
    v88[248] = v89[248];
    uint64_t v103 = *((void *)v89 + 33);
    *((void *)v88 + 32) = *((void *)v89 + 32);
    *((void *)v88 + 33) = v103;
    *((void *)v88 + 34) = *((void *)v89 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v48 = v111;
  }
  swift_retain();
  return v48;
}

uint64_t sub_250F9AE5C(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v6 = a1 + v5[5];
  uint64_t v7 = sub_251037400();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = a1 + v5[6];
  v8(v9, v7);
  sub_250F26E08();
  uint64_t v11 = v10;
  v8(v9 + *(int *)(v10 + 36), v7);
  uint64_t v12 = a1 + v5[7];
  v8(v12, v7);
  v8(v12 + *(int *)(v11 + 36), v7);
  uint64_t v13 = a1 + v5[9];
  uint64_t v14 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + a2[7];
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v17 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v8(v16, v7);
    uint64_t v18 = v16 + *(int *)(v17 + 20);
    v8(v18, v7);
    v8(v18 + *(int *)(v11 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_250F9B1E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v103 = v17;
  uint64_t v104 = (void (*)(char *, char *, uint64_t))v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = v7[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = v7[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = v7[11];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = v7[12];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = a3[5];
  uint64_t v108 = a1;
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = *(void *)(a2 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v43)
  {
    uint64_t v44 = *(void *)(v42 + 8);
    *(void *)uint64_t v41 = v43;
    *(void *)(v41 + 8) = v44;
    long long v45 = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 16) = *(_OWORD *)(v42 + 16);
    *(_OWORD *)(v41 + 32) = v45;
    *(_OWORD *)(v41 + 48) = *(_OWORD *)(v42 + 48);
    *(void *)(v41 + 64) = *(void *)(v42 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v46 = *(_OWORD *)(v42 + 48);
    *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 48) = v46;
    *(void *)(v41 + 64) = *(void *)(v42 + 64);
    long long v47 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v47;
  }
  uint64_t v48 = a3[7];
  uint64_t v106 = a2;
  uint64_t v107 = a3;
  *(unsigned char *)(v108 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v49 = v108 + v48;
  uint64_t v50 = a2 + v48;
  *(void *)(v108 + v48) = *(void *)(a2 + v48);
  uint64_t v51 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v52 = v51[5];
  uint64_t v53 = (char *)(v49 + v52);
  uint64_t v54 = (char *)(v50 + v52);
  uint64_t v55 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v102 = *((void *)v55 - 1);
  uint64_t v56 = *(unsigned int (**)(char *, uint64_t, int *))(v102 + 48);
  swift_bridgeObjectRetain();
  if (v56(v54, 1, v55))
  {
    sub_250F6CD98();
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    v104(v53, v54, v11);
    uint64_t v58 = v55[5];
    uint64_t v59 = &v53[v58];
    uint64_t v60 = &v54[v58];
    v104(&v53[v58], &v54[v58], v11);
    v104(&v59[*(int *)(v103 + 36)], &v60[*(int *)(v103 + 36)], v11);
    uint64_t v61 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v59[v61[5]] = *(void *)&v60[v61[5]];
    *(void *)&v59[v61[6]] = *(void *)&v60[v61[6]];
    *(void *)&v59[v61[7]] = *(void *)&v60[v61[7]];
    uint64_t v62 = v55[6];
    uint64_t v63 = &v53[v62];
    uint64_t v64 = &v54[v62];
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    v63[16] = v64[16];
    v53[v55[7]] = v54[v55[7]];
    v53[v55[8]] = v54[v55[8]];
    v53[v55[9]] = v54[v55[9]];
    uint64_t v65 = v55[10];
    uint64_t v66 = &v53[v65];
    uint64_t v67 = &v54[v65];
    uint64_t v68 = *((void *)v67 + 1);
    *(void *)uint64_t v66 = *(void *)v67;
    *((void *)v66 + 1) = v68;
    uint64_t v69 = v55[11];
    uint64_t v70 = &v53[v69];
    uint64_t v71 = &v54[v69];
    uint64_t v72 = *((void *)v71 + 1);
    *(void *)uint64_t v70 = *(void *)v71;
    *((void *)v70 + 1) = v72;
    uint64_t v105 = *(void (**)(char *, void, uint64_t, int *))(v102 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v105(v53, 0, 1, v55);
  }
  *(_OWORD *)(v49 + v51[6]) = *(_OWORD *)(v50 + v51[6]);
  uint64_t v73 = v51[7];
  uint64_t v74 = v49 + v73;
  uint64_t v75 = v50 + v73;
  long long v76 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
  *(_OWORD *)(v74 + 16) = v76;
  *(void *)(v74 + 80) = *(void *)(v75 + 80);
  long long v77 = *(_OWORD *)(v75 + 64);
  long long v78 = *(_OWORD *)(v75 + 32);
  *(_OWORD *)(v74 + 48) = *(_OWORD *)(v75 + 48);
  *(_OWORD *)(v74 + 64) = v77;
  *(_OWORD *)(v74 + 32) = v78;
  *(void *)(v49 + v51[8]) = *(void *)(v50 + v51[8]);
  *(void *)(v49 + v51[9]) = *(void *)(v50 + v51[9]);
  uint64_t v79 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v80 = v49 + v79;
  uint64_t v81 = v50 + v79;
  uint64_t v82 = *(void *)(v81 + 8);
  *(void *)uint64_t v80 = *(void *)v81;
  *(void *)(v80 + 8) = v82;
  uint64_t v83 = *(void *)(v81 + 24);
  *(void *)(v80 + 16) = *(void *)(v81 + 16);
  *(void *)(v80 + 24) = v83;
  *(void *)(v80 + 32) = *(void *)(v81 + 32);
  *(_OWORD *)(v80 + 40) = *(_OWORD *)(v81 + 40);
  *(_OWORD *)(v80 + 56) = *(_OWORD *)(v81 + 56);
  *(_OWORD *)(v80 + 72) = *(_OWORD *)(v81 + 72);
  *(_OWORD *)(v80 + 88) = *(_OWORD *)(v81 + 88);
  *(_OWORD *)(v80 + 104) = *(_OWORD *)(v81 + 104);
  uint64_t v84 = v107[8];
  uint64_t v85 = v108 + v84;
  uint64_t v86 = v106 + v84;
  uint64_t v87 = *(void *)(v106 + v84);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v87)
  {
    uint64_t v88 = *(void *)(v86 + 8);
    uint64_t v89 = *(void *)(v86 + 16);
    *(void *)uint64_t v85 = v87;
    *(void *)(v85 + 8) = v88;
    *(void *)(v85 + 16) = v89;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    *(void *)(v85 + 16) = *(void *)(v86 + 16);
  }
  *(unsigned char *)(v85 + 24) = *(unsigned char *)(v86 + 24);
  *(unsigned char *)(v85 + 32) = *(unsigned char *)(v86 + 32);
  uint64_t v90 = *(void *)(v86 + 48);
  *(void *)(v85 + 40) = *(void *)(v86 + 40);
  *(void *)(v85 + 48) = v90;
  *(unsigned char *)(v85 + 56) = *(unsigned char *)(v86 + 56);
  uint64_t v91 = *(void *)(v86 + 72);
  *(void *)(v85 + 64) = *(void *)(v86 + 64);
  *(void *)(v85 + 72) = v91;
  *(void *)(v85 + 80) = *(void *)(v86 + 80);
  long long v92 = *(_OWORD *)(v86 + 88);
  *(_OWORD *)(v85 + 104) = *(_OWORD *)(v86 + 104);
  *(_OWORD *)(v85 + 88) = v92;
  long long v93 = *(_OWORD *)(v86 + 120);
  long long v94 = *(_OWORD *)(v86 + 136);
  *(_OWORD *)(v85 + 152) = *(_OWORD *)(v86 + 152);
  *(_OWORD *)(v85 + 136) = v94;
  *(_OWORD *)(v85 + 120) = v93;
  uint64_t v95 = *(void *)(v86 + 176);
  *(void *)(v85 + 168) = *(void *)(v86 + 168);
  *(void *)(v85 + 176) = v95;
  uint64_t v97 = *(void *)(v86 + 184);
  uint64_t v96 = *(void *)(v86 + 192);
  *(unsigned char *)(v85 + 200) = *(unsigned char *)(v86 + 200);
  *(void *)(v85 + 184) = v97;
  *(void *)(v85 + 192) = v96;
  *(unsigned char *)(v85 + 201) = *(unsigned char *)(v86 + 201);
  uint64_t v98 = *(void *)(v86 + 216);
  *(void *)(v85 + 208) = *(void *)(v86 + 208);
  *(void *)(v85 + 216) = v98;
  uint64_t v99 = *(void *)(v86 + 232);
  *(void *)(v85 + 224) = *(void *)(v86 + 224);
  *(void *)(v85 + 232) = v99;
  *(void *)(v85 + 240) = *(void *)(v86 + 240);
  *(unsigned char *)(v85 + 248) = *(unsigned char *)(v86 + 248);
  uint64_t v100 = *(void *)(v86 + 264);
  *(void *)(v85 + 256) = *(void *)(v86 + 256);
  *(void *)(v85 + 264) = v100;
  *(void *)(v85 + 272) = *(void *)(v86 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v108;
}

uint64_t sub_250F9B8B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v111 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 24);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v112 = v17;
  uint64_t v109 = v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  char v24 = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = v24;
  uint64_t v25 = v7[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  uint64_t v29 = v7[10];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = v7[11];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  void *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v7[12];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[5];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = a2 + v38;
  uint64_t v41 = *(void *)(a2 + v38);
  if (*(void *)(a1 + v38))
  {
    if (v41)
    {
      void *v39 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[1] = *(void *)(v40 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v39[2] = *(void *)(v40 + 16);
      v39[3] = *(void *)(v40 + 24);
      v39[4] = *(void *)(v40 + 32);
      v39[5] = *(void *)(v40 + 40);
      v39[6] = *(void *)(v40 + 48);
      v39[7] = *(void *)(v40 + 56);
      v39[8] = *(void *)(v40 + 64);
    }
    else
    {
      sub_250F21DD0(a1 + v38);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      long long v43 = *(_OWORD *)(v40 + 32);
      long long v42 = *(_OWORD *)(v40 + 48);
      long long v44 = *(_OWORD *)(v40 + 16);
      v39[8] = *(void *)(v40 + 64);
      *((_OWORD *)v39 + 2) = v43;
      *((_OWORD *)v39 + 3) = v42;
      *((_OWORD *)v39 + 1) = v44;
    }
  }
  else if (v41)
  {
    void *v39 = v41;
    v39[1] = *(void *)(v40 + 8);
    void v39[2] = *(void *)(v40 + 16);
    v39[3] = *(void *)(v40 + 24);
    v39[4] = *(void *)(v40 + 32);
    v39[5] = *(void *)(v40 + 40);
    v39[6] = *(void *)(v40 + 48);
    v39[7] = *(void *)(v40 + 56);
    v39[8] = *(void *)(v40 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    long long v45 = *(_OWORD *)(v40 + 16);
    long long v46 = *(_OWORD *)(v40 + 32);
    long long v47 = *(_OWORD *)(v40 + 48);
    v39[8] = *(void *)(v40 + 64);
    *((_OWORD *)v39 + 2) = v46;
    *((_OWORD *)v39 + 3) = v47;
    *((_OWORD *)v39 + 1) = v45;
  }
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v114 = a3;
  uint64_t v115 = a2;
  uint64_t v48 = a3[7];
  uint64_t v116 = a1;
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  *(void *)(a1 + v48) = *(void *)(a2 + v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v113 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v51 = v113[5];
  uint64_t v52 = (char *)(v49 + v51);
  uint64_t v53 = (char *)(v50 + v51);
  uint64_t v54 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v110 = *((void *)v54 - 1);
  uint64_t v55 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v110 + 48);
  int v56 = v55(v52, 1, v54);
  int v57 = v55(v53, 1, v54);
  if (v56)
  {
    if (!v57)
    {
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
      v58(v52, v53, v11);
      uint64_t v59 = v54[5];
      uint64_t v60 = &v52[v59];
      uint64_t v61 = &v53[v59];
      v58(&v52[v59], &v53[v59], v11);
      v58(&v60[*(int *)(v112 + 36)], &v61[*(int *)(v112 + 36)], v11);
      uint64_t v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v60[v62[5]] = *(void *)&v61[v62[5]];
      *(void *)&v60[v62[6]] = *(void *)&v61[v62[6]];
      *(void *)&v60[v62[7]] = *(void *)&v61[v62[7]];
      uint64_t v63 = v54[6];
      uint64_t v64 = &v52[v63];
      uint64_t v65 = &v53[v63];
      char v66 = v65[16];
      *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
      v64[16] = v66;
      v52[v54[7]] = v53[v54[7]];
      v52[v54[8]] = v53[v54[8]];
      v52[v54[9]] = v53[v54[9]];
      uint64_t v67 = v54[10];
      uint64_t v68 = &v52[v67];
      uint64_t v69 = &v53[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      uint64_t v70 = v54[11];
      uint64_t v71 = &v52[v70];
      uint64_t v72 = &v53[v70];
      *(void *)uint64_t v71 = *(void *)v72;
      *((void *)v71 + 1) = *((void *)v72 + 1);
      uint64_t v73 = *(void (**)(unsigned char *, void, uint64_t, int *))(v110 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73(v52, 0, 1, v54);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v57)
  {
    sub_250F9DAA0((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F6CD98();
    memcpy(v52, v53, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_14;
  }
  v109((uint64_t)v52, (uint64_t)v53, v11);
  uint64_t v90 = v54[5];
  uint64_t v91 = &v52[v90];
  long long v92 = &v53[v90];
  v109((uint64_t)&v52[v90], (uint64_t)&v53[v90], v11);
  v109((uint64_t)&v91[*(int *)(v112 + 36)], (uint64_t)&v92[*(int *)(v112 + 36)], v11);
  long long v93 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v91[v93[5]] = *(void *)&v92[v93[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v91[v93[6]] = *(void *)&v92[v93[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v91[v93[7]] = *(void *)&v92[v93[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = v54[6];
  uint64_t v95 = &v52[v94];
  uint64_t v96 = &v53[v94];
  long long v97 = *(_OWORD *)v96;
  v95[16] = v96[16];
  *(_OWORD *)uint64_t v95 = v97;
  v52[v54[7]] = v53[v54[7]];
  v52[v54[8]] = v53[v54[8]];
  v52[v54[9]] = v53[v54[9]];
  uint64_t v98 = v54[10];
  uint64_t v99 = &v52[v98];
  uint64_t v100 = &v53[v98];
  *(void *)uint64_t v99 = *(void *)v100;
  *((void *)v99 + 1) = *((void *)v100 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v101 = v54[11];
  uint64_t v102 = &v52[v101];
  uint64_t v103 = &v53[v101];
  *(void *)uint64_t v102 = *(void *)v103;
  *((void *)v102 + 1) = *((void *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v75 = v113[6];
  long long v76 = (void *)(v49 + v75);
  long long v77 = (void *)(v50 + v75);
  void *v76 = *v77;
  v76[1] = v77[1];
  uint64_t v78 = v113[7];
  uint64_t v79 = v49 + v78;
  uint64_t v80 = v50 + v78;
  *(void *)uint64_t v79 = *(void *)v80;
  uint64_t v81 = *(void *)(v80 + 8);
  *(unsigned char *)(v79 + 16) = *(unsigned char *)(v80 + 16);
  *(void *)(v79 + 8) = v81;
  *(void *)(v79 + 24) = *(void *)(v80 + 24);
  *(void *)(v79 + 32) = *(void *)(v80 + 32);
  *(void *)(v79 + 40) = *(void *)(v80 + 40);
  *(void *)(v79 + 48) = *(void *)(v80 + 48);
  *(void *)(v79 + 56) = *(void *)(v80 + 56);
  *(void *)(v79 + 64) = *(void *)(v80 + 64);
  *(void *)(v79 + 72) = *(void *)(v80 + 72);
  *(void *)(v79 + 80) = *(void *)(v80 + 80);
  *(void *)(v49 + v113[8]) = *(void *)(v50 + v113[8]);
  *(void *)(v49 + v113[9]) = *(void *)(v50 + v113[9]);
  uint64_t v82 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v83 = (void *)(v49 + v82);
  uint64_t v84 = (void *)(v50 + v82);
  *(void *)(v49 + v82) = *v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[1] = v84[1];
  v83[2] = v84[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[3] = v84[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[4] = v84[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[5] = v84[5];
  v83[6] = v84[6];
  v83[7] = v84[7];
  v83[8] = v84[8];
  v83[9] = v84[9];
  v83[10] = v84[10];
  v83[11] = v84[11];
  v83[12] = v84[12];
  v83[13] = v84[13];
  v83[14] = v84[14];
  uint64_t v85 = v114[8];
  uint64_t v86 = v116 + v85;
  uint64_t v87 = (long long *)(v115 + v85);
  uint64_t v88 = *(void *)(v115 + v85);
  if (*(void *)(v116 + v85))
  {
    if (v88)
    {
      *(void *)uint64_t v86 = v88;
      swift_retain();
      swift_release();
      *(void *)(v86 + 8) = *((void *)v87 + 1);
      swift_retain();
      swift_release();
      *(void *)(v86 + 16) = *((void *)v87 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80(v116 + v85);
      uint64_t v89 = *((void *)v87 + 2);
      *(_OWORD *)uint64_t v86 = *v87;
      *(void *)(v86 + 16) = v89;
    }
  }
  else if (v88)
  {
    *(void *)uint64_t v86 = v88;
    *(void *)(v86 + 8) = *((void *)v87 + 1);
    *(void *)(v86 + 16) = *((void *)v87 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v104 = *v87;
    *(void *)(v86 + 16) = *((void *)v87 + 2);
    *(_OWORD *)uint64_t v86 = v104;
  }
  *(unsigned char *)(v86 + 24) = *((unsigned char *)v87 + 24);
  *(unsigned char *)(v86 + 32) = *((unsigned char *)v87 + 32);
  *(void *)(v86 + 40) = *((void *)v87 + 5);
  swift_retain();
  swift_release();
  uint64_t v105 = *((void *)v87 + 6);
  *(unsigned char *)(v86 + 56) = *((unsigned char *)v87 + 56);
  *(void *)(v86 + 48) = v105;
  *(void *)(v86 + 64) = *((void *)v87 + 8);
  *(void *)(v86 + 72) = *((void *)v87 + 9);
  swift_retain();
  swift_release();
  *(void *)(v86 + 80) = *((void *)v87 + 10);
  swift_retain();
  swift_release();
  *(void *)(v86 + 88) = *((void *)v87 + 11);
  uint64_t v106 = *((void *)v87 + 12);
  *(unsigned char *)(v86 + 104) = *((unsigned char *)v87 + 104);
  *(void *)(v86 + 96) = v106;
  *(void *)(v86 + 112) = *((void *)v87 + 14);
  *(void *)(v86 + 120) = *((void *)v87 + 15);
  *(void *)(v86 + 128) = *((void *)v87 + 16);
  *(void *)(v86 + 136) = *((void *)v87 + 17);
  *(void *)(v86 + 144) = *((void *)v87 + 18);
  *(void *)(v86 + 152) = *((void *)v87 + 19);
  *(void *)(v86 + 160) = *((void *)v87 + 20);
  *(void *)(v86 + 168) = *((void *)v87 + 21);
  *(void *)(v86 + 176) = *((void *)v87 + 22);
  swift_retain();
  swift_release();
  *(void *)(v86 + 184) = *((void *)v87 + 23);
  swift_retain();
  swift_release();
  uint64_t v107 = *((void *)v87 + 24);
  *(unsigned char *)(v86 + 200) = *((unsigned char *)v87 + 200);
  *(void *)(v86 + 192) = v107;
  *(unsigned char *)(v86 + 201) = *((unsigned char *)v87 + 201);
  *(void *)(v86 + 208) = *((void *)v87 + 26);
  swift_retain();
  swift_release();
  *(void *)(v86 + 216) = *((void *)v87 + 27);
  swift_retain();
  swift_release();
  *(void *)(v86 + 224) = *((void *)v87 + 28);
  swift_retain();
  swift_release();
  *(void *)(v86 + 232) = *((void *)v87 + 29);
  swift_retain();
  swift_release();
  *(void *)(v86 + 240) = *((void *)v87 + 30);
  swift_retain();
  swift_release();
  *(unsigned char *)(v86 + 248) = *((unsigned char *)v87 + 248);
  *(void *)(v86 + 256) = *((void *)v87 + 32);
  swift_retain();
  swift_release();
  *(void *)(v86 + 264) = *((void *)v87 + 33);
  swift_retain();
  swift_release();
  *(void *)(v86 + 272) = *((void *)v87 + 34);
  return v116;
}

uint64_t sub_250F9C410(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v64 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = v7[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  *(_OWORD *)(a1 + v7[10]) = *(_OWORD *)(a2 + v7[10]);
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
  uint64_t v28 = a3[5];
  uint64_t v29 = a3[6];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(void *)(v30 + 64) = *(void *)(v31 + 64);
  long long v32 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v32;
  long long v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  char v66 = a3;
  uint64_t v34 = a3[7];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  uint64_t v65 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v37 = v65[5];
  uint64_t v38 = (char *)(v35 + v37);
  uint64_t v39 = (char *)(v36 + v37);
  uint64_t v40 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v63 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v63 + 48))(v39, 1, v40))
  {
    sub_250F6CD98();
    memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v38, (uint64_t)v39, v11);
    uint64_t v42 = v40[5];
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v12;
    long long v43 = &v38[v42];
    long long v44 = &v39[v42];
    v62(&v38[v42], &v39[v42], v11);
    v62(&v43[*(int *)(v64 + 36)], &v44[*(int *)(v64 + 36)], v11);
    long long v45 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v43[v45[5]] = *(void *)&v44[v45[5]];
    *(void *)&v43[v45[6]] = *(void *)&v44[v45[6]];
    *(void *)&v43[v45[7]] = *(void *)&v44[v45[7]];
    uint64_t v46 = v40[6];
    long long v47 = &v38[v46];
    uint64_t v48 = &v39[v46];
    *(_OWORD *)long long v47 = *(_OWORD *)v48;
    v47[16] = v48[16];
    v38[v40[7]] = v39[v40[7]];
    v38[v40[8]] = v39[v40[8]];
    v38[v40[9]] = v39[v40[9]];
    *(_OWORD *)&v38[v40[10]] = *(_OWORD *)&v39[v40[10]];
    *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v38, 0, 1, v40);
  }
  *(_OWORD *)(v35 + v65[6]) = *(_OWORD *)(v36 + v65[6]);
  uint64_t v49 = v65[7];
  uint64_t v50 = v35 + v49;
  uint64_t v51 = v36 + v49;
  long long v52 = *(_OWORD *)(v51 + 16);
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  *(_OWORD *)(v50 + 16) = v52;
  *(void *)(v50 + 80) = *(void *)(v51 + 80);
  long long v53 = *(_OWORD *)(v51 + 64);
  long long v54 = *(_OWORD *)(v51 + 32);
  *(_OWORD *)(v50 + 48) = *(_OWORD *)(v51 + 48);
  *(_OWORD *)(v50 + 64) = v53;
  *(_OWORD *)(v50 + 32) = v54;
  *(void *)(v35 + v65[8]) = *(void *)(v36 + v65[8]);
  *(void *)(v35 + v65[9]) = *(void *)(v36 + v65[9]);
  uint64_t v55 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v56 = v35 + v55;
  uint64_t v57 = v36 + v55;
  long long v58 = *(_OWORD *)(v57 + 80);
  *(_OWORD *)(v56 + 64) = *(_OWORD *)(v57 + 64);
  *(_OWORD *)(v56 + 80) = v58;
  *(_OWORD *)(v56 + 96) = *(_OWORD *)(v57 + 96);
  *(void *)(v56 + 112) = *(void *)(v57 + 112);
  long long v59 = *(_OWORD *)(v57 + 16);
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *(_OWORD *)(v56 + 16) = v59;
  long long v60 = *(_OWORD *)(v57 + 48);
  *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
  *(_OWORD *)(v56 + 48) = v60;
  memcpy((void *)(a1 + v66[8]), (const void *)(a2 + v66[8]), 0x118uLL);
  return a1;
}

uint64_t sub_250F9C8BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 40);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v100 = v17;
  long long v97 = v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = v7[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = v7[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v7[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v7[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  void *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[5];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  if (*(void *)(a1 + v43))
  {
    if (*(void *)v45)
    {
      *(void *)uint64_t v44 = *(void *)v45;
      swift_bridgeObjectRelease();
      *(void *)(v44 + 8) = *(void *)(v45 + 8);
      swift_bridgeObjectRelease();
      long long v46 = *(_OWORD *)(v45 + 32);
      *(_OWORD *)(v44 + 16) = *(_OWORD *)(v45 + 16);
      *(_OWORD *)(v44 + 32) = v46;
      *(_OWORD *)(v44 + 48) = *(_OWORD *)(v45 + 48);
      *(void *)(v44 + 64) = *(void *)(v45 + 64);
      goto LABEL_6;
    }
    sub_250F21DD0(v44);
  }
  long long v47 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v47;
  *(void *)(v44 + 64) = *(void *)(v45 + 64);
  long long v48 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v48;
LABEL_6:
  uint64_t v49 = a3[7];
  long long v104 = a3;
  uint64_t v105 = a1;
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v50 = a1 + v49;
  uint64_t v101 = a2;
  uint64_t v51 = a2 + v49;
  *(void *)(a1 + v49) = *(void *)(a2 + v49);
  swift_bridgeObjectRelease();
  uint64_t v103 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v52 = v103[5];
  long long v53 = (char *)(v50 + v52);
  long long v54 = (char *)(v51 + v52);
  uint64_t v55 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v98 = *((void *)v55 - 1);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, int *))(v98 + 48);
  int v57 = v56(v53, 1, v55);
  __src = v54;
  int v58 = v56(v54, 1, v55);
  if (v57)
  {
    if (!v58)
    {
      long long v59 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
      v59(v53, v54, v11);
      uint64_t v60 = v55[5];
      uint64_t v61 = &v53[v60];
      uint64_t v62 = &v54[v60];
      v59(&v53[v60], &v54[v60], v11);
      v59(&v61[*(int *)(v100 + 36)], &v62[*(int *)(v100 + 36)], v11);
      uint64_t v63 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v61[v63[5]] = *(void *)&v62[v63[5]];
      *(void *)&v61[v63[6]] = *(void *)&v62[v63[6]];
      *(void *)&v61[v63[7]] = *(void *)&v62[v63[7]];
      uint64_t v64 = v55[6];
      uint64_t v65 = &v53[v64];
      char v66 = &v54[v64];
      *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
      v65[16] = v66[16];
      v53[v55[7]] = v54[v55[7]];
      v53[v55[8]] = v54[v55[8]];
      v53[v55[9]] = v54[v55[9]];
      *(_OWORD *)&v53[v55[10]] = *(_OWORD *)&v54[v55[10]];
      *(_OWORD *)&v53[v55[11]] = *(_OWORD *)&v54[v55[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v98 + 56))(v53, 0, 1, v55);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v58)
  {
    sub_250F9DAA0((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_11:
    sub_250F6CD98();
    memcpy(v53, v54, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_12;
  }
  v97((uint64_t)v53, (uint64_t)v54, v11);
  uint64_t v80 = v55[5];
  uint64_t v81 = &v53[v80];
  uint64_t v82 = &v54[v80];
  v97((uint64_t)&v53[v80], (uint64_t)&__src[v80], v11);
  v97((uint64_t)&v81[*(int *)(v100 + 36)], (uint64_t)&v82[*(int *)(v100 + 36)], v11);
  uint64_t v83 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v81[v83[5]] = *(void *)&v82[v83[5]];
  swift_bridgeObjectRelease();
  *(void *)&v81[v83[6]] = *(void *)&v82[v83[6]];
  swift_bridgeObjectRelease();
  *(void *)&v81[v83[7]] = *(void *)&v82[v83[7]];
  swift_bridgeObjectRelease();
  uint64_t v84 = v55[6];
  uint64_t v85 = &v53[v84];
  uint64_t v86 = &__src[v84];
  *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
  v85[16] = v86[16];
  v53[v55[7]] = __src[v55[7]];
  v53[v55[8]] = __src[v55[8]];
  v53[v55[9]] = __src[v55[9]];
  uint64_t v87 = v55[10];
  uint64_t v88 = &v53[v87];
  uint64_t v89 = (uint64_t *)&__src[v87];
  uint64_t v91 = *v89;
  uint64_t v90 = v89[1];
  char *v88 = v91;
  v88[1] = v90;
  swift_bridgeObjectRelease();
  uint64_t v92 = v55[11];
  long long v93 = &v53[v92];
  uint64_t v94 = (uint64_t *)&__src[v92];
  uint64_t v96 = *v94;
  uint64_t v95 = v94[1];
  *long long v93 = v96;
  v93[1] = v95;
  swift_bridgeObjectRelease();
LABEL_12:
  *(_OWORD *)(v50 + v103[6]) = *(_OWORD *)(v51 + v103[6]);
  uint64_t v68 = v103[7];
  uint64_t v69 = v50 + v68;
  uint64_t v70 = v51 + v68;
  *(void *)uint64_t v69 = *(void *)v70;
  *(void *)(v69 + 8) = *(void *)(v70 + 8);
  *(unsigned char *)(v69 + 16) = *(unsigned char *)(v70 + 16);
  *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
  *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
  *(_OWORD *)(v69 + 56) = *(_OWORD *)(v70 + 56);
  *(_OWORD *)(v69 + 72) = *(_OWORD *)(v70 + 72);
  *(void *)(v50 + v103[8]) = *(void *)(v51 + v103[8]);
  *(void *)(v50 + v103[9]) = *(void *)(v51 + v103[9]);
  uint64_t v71 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v72 = v50 + v71;
  uint64_t v73 = v51 + v71;
  *(void *)(v50 + v71) = *(void *)(v51 + v71);
  swift_bridgeObjectRelease();
  *(void *)(v72 + 8) = *(void *)(v73 + 8);
  *(void *)(v72 + 16) = *(void *)(v73 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v72 + 24) = *(void *)(v73 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v72 + 32) = *(void *)(v73 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
  *(_OWORD *)(v72 + 56) = *(_OWORD *)(v73 + 56);
  *(_OWORD *)(v72 + 72) = *(_OWORD *)(v73 + 72);
  *(_OWORD *)(v72 + 88) = *(_OWORD *)(v73 + 88);
  *(_OWORD *)(v72 + 104) = *(_OWORD *)(v73 + 104);
  uint64_t v74 = v104[8];
  uint64_t v75 = v105 + v74;
  uint64_t v76 = v101 + v74;
  if (!*(void *)(v105 + v74))
  {
LABEL_16:
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    *(void *)(v75 + 16) = *(void *)(v76 + 16);
    goto LABEL_17;
  }
  if (!*(void *)v76)
  {
    sub_250F27E80(v75);
    goto LABEL_16;
  }
  *(void *)uint64_t v75 = *(void *)v76;
  swift_release();
  *(void *)(v75 + 8) = *(void *)(v76 + 8);
  swift_release();
  *(void *)(v75 + 16) = *(void *)(v76 + 16);
  swift_release();
LABEL_17:
  *(unsigned char *)(v75 + 24) = *(unsigned char *)(v76 + 24);
  *(unsigned char *)(v75 + 32) = *(unsigned char *)(v76 + 32);
  *(void *)(v75 + 40) = *(void *)(v76 + 40);
  swift_release();
  *(void *)(v75 + 48) = *(void *)(v76 + 48);
  *(unsigned char *)(v75 + 56) = *(unsigned char *)(v76 + 56);
  *(void *)(v75 + 64) = *(void *)(v76 + 64);
  *(void *)(v75 + 72) = *(void *)(v76 + 72);
  swift_release();
  *(void *)(v75 + 80) = *(void *)(v76 + 80);
  swift_release();
  *(void *)(v75 + 88) = *(void *)(v76 + 88);
  *(void *)(v75 + 96) = *(void *)(v76 + 96);
  *(unsigned char *)(v75 + 104) = *(unsigned char *)(v76 + 104);
  long long v77 = *(_OWORD *)(v76 + 128);
  *(_OWORD *)(v75 + 112) = *(_OWORD *)(v76 + 112);
  *(_OWORD *)(v75 + 128) = v77;
  long long v78 = *(_OWORD *)(v76 + 160);
  *(_OWORD *)(v75 + 144) = *(_OWORD *)(v76 + 144);
  *(_OWORD *)(v75 + 160) = v78;
  *(void *)(v75 + 176) = *(void *)(v76 + 176);
  swift_release();
  *(void *)(v75 + 184) = *(void *)(v76 + 184);
  swift_release();
  *(void *)(v75 + 192) = *(void *)(v76 + 192);
  *(unsigned char *)(v75 + 200) = *(unsigned char *)(v76 + 200);
  *(unsigned char *)(v75 + 201) = *(unsigned char *)(v76 + 201);
  *(void *)(v75 + 208) = *(void *)(v76 + 208);
  swift_release();
  *(void *)(v75 + 216) = *(void *)(v76 + 216);
  swift_release();
  *(void *)(v75 + 224) = *(void *)(v76 + 224);
  swift_release();
  *(void *)(v75 + 232) = *(void *)(v76 + 232);
  swift_release();
  *(void *)(v75 + 240) = *(void *)(v76 + 240);
  swift_release();
  *(unsigned char *)(v75 + 248) = *(unsigned char *)(v76 + 248);
  *(void *)(v75 + 256) = *(void *)(v76 + 256);
  swift_release();
  *(void *)(v75 + 264) = *(void *)(v76 + 264);
  swift_release();
  *(void *)(v75 + 272) = *(void *)(v76 + 272);
  return v105;
}

uint64_t sub_250F9D150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F9D164);
}

uint64_t sub_250F9D164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32) + 40);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_250F9D27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F9D290);
}

uint64_t sub_250F9D290(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + 40) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for OvernightMetricsChartPointForeground()
{
  uint64_t result = qword_269B13E08;
  if (!qword_269B13E08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250F9D3F0()
{
  uint64_t result = type metadata accessor for IndividualOvernightMetricChartPoint(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_250F9D4D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F9D4F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPointForeground();
  uint64_t v5 = *(void *)(v1 + *(int *)(v4 + 32) + 40);
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_retain();
  sub_251038D00();
  sub_251038150();
  uint64_t v6 = v20;
  char v7 = v21;
  uint64_t v8 = v22;
  char v9 = v23;
  uint64_t v10 = v24;
  uint64_t result = sub_250F9D778();
  double v12 = 0.0;
  if ((result & 1) == 0)
  {
    uint64_t v13 = v1 + *(int *)(v4 + 20);
    uint64_t v14 = *(void *)v13;
    if (*(void *)v13)
    {
      double v12 = *(double *)(v13 + 16);
      double v15 = *(double *)(v13 + 32);
      uint64_t v16 = *(void *)v13;
      uint64_t v17 = *(void *)(v13 + 8);
    }
    else
    {
      if (qword_269B12BB8 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_269B1AD38;
      swift_getKeyPath();
      sub_250F9DE28((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
      sub_251037530();
      swift_release();
      uint64_t v16 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      double v12 = *(double *)(v18 + 32);
      double v15 = *(double *)(v18 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v6 = v20;
    }
    sub_250F22234(v14);
    if (sub_250FFA7EC(v2, v16))
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = sub_250FFA7EC(v2, v17);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v19) {
        double v12 = v15;
      }
      else {
        double v12 = 0.0;
      }
    }
    char v7 = v21;
    uint64_t v8 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v25;
  *(double *)(a1 + 56) = v12;
  return result;
}

BOOL sub_250F9D778()
{
  uint64_t v1 = type metadata accessor for OvernightMetricsChartPointForeground();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *(unsigned __int8 *)(v0 + *(int *)(v4 + 24));
  sub_250F9DA3C(v0, (uint64_t)v3);
  if (v5 == 1)
  {
    uint64_t v6 = (uint64_t *)&v3[*(int *)(v1 + 20)];
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    double v10 = *((double *)v6 + 4);
    uint64_t v9 = v6[5];
    v22[2] = v6[3];
    v22[3] = v9;
    uint64_t v11 = v6[7];
    void v22[4] = v6[6];
    if (v8)
    {
      double v12 = v10;
      uint64_t v13 = v8;
      uint64_t v14 = v7;
    }
    else
    {
      v22[1] = v11;
      if (qword_269B12BB8 != -1) {
        swift_once();
      }
      uint64_t v16 = qword_269B1AD38;
      swift_getKeyPath();
      v22[5] = v16;
      sub_250F9DE28((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
      sub_251037530();
      swift_release();
      uint64_t v13 = *(void *)(v16 + 16);
      uint64_t v14 = *(void *)(v16 + 24);
      double v12 = *(double *)(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v17 = *(int *)(v1 + 28);
    uint64_t v18 = &v3[*(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32)];
    if (v18[8])
    {
      sub_250F22234(v8);
    }
    else
    {
      double v19 = *(double *)v18;
      sub_250F22234(v8);
      if ((sub_250FFA7EC((uint64_t)v3, v13) & 1) == 0 || v12 >= 1.0)
      {
        uint64_t v20 = type metadata accessor for OvernightMetricsChartLayout(0);
        if (*(void *)(v14 + 16) >= 2uLL)
        {
          BOOL v15 = sub_250FFAA00(*(void *)&v3[v17 + 32 + *(int *)(v20 + 20)], v19);
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
    }
    swift_bridgeObjectRelease();
    BOOL v15 = 0;
    goto LABEL_15;
  }
  BOOL v15 = 0;
LABEL_16:
  sub_250F9DAA0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointForeground);
  return v15;
}

uint64_t sub_250F9DA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPointForeground();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250F9DAA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250F9DB00()
{
  return sub_250F9DD00(&qword_269B13E18, sub_250F9DB50, (void (*)(void))sub_250F9DCC4);
}

void sub_250F9DB50(uint64_t a1)
{
}

void sub_250F9DB78(uint64_t a1)
{
}

void sub_250F9DBA0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250F9DC04()
{
  if (!qword_269B13E30)
  {
    sub_250F9DC64();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13E30);
    }
  }
}

void sub_250F9DC64()
{
  if (!qword_269B13E38)
  {
    unint64_t v0 = sub_251038600();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13E38);
    }
  }
}

uint64_t sub_250F9DCC4()
{
  return sub_250F9DD00(&qword_269B13E40, sub_250F9DB78, (void (*)(void))sub_250F9DD80);
}

uint64_t sub_250F9DD00(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250F9DD80()
{
  unint64_t result = qword_269B13E48;
  if (!qword_269B13E48)
  {
    sub_250F9DC04();
    sub_250F70040();
    sub_250F9DE28(&qword_269B13E50, (void (*)(uint64_t))sub_250F9DC64);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13E48);
  }
  return result;
}

uint64_t sub_250F9DE28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_250F9DE70(uint64_t *a1, uint64_t *a2)
{
  sub_250F49D48(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(v6 + 36)), (uint64_t *)((char *)a2 + *(int *)(v6 + 36)), v7);
  }
  return a1;
}

uint64_t sub_250F9DF60(uint64_t a1)
{
  uint64_t v2 = sub_251037400();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v2 - 8), a1, v2);
  sub_250F49D48(0);
  uint64_t v4 = a1 + *(int *)(v3 + 36);
  return v6(v4, v2);
}

uint64_t sub_250F9DFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037400();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  sub_250F49D48(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_250F9E098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037400();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  sub_250F49D48(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_250F9E134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037400();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  sub_250F49D48(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_250F9E1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037400();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  sub_250F49D48(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_250F9E26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250F9E280);
}

uint64_t sub_250F9E280(uint64_t a1, uint64_t a2)
{
  sub_250F49D48(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_250F9E2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250F9E300);
}

uint64_t sub_250F9E300(uint64_t a1, uint64_t a2)
{
  sub_250F49D48(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OvernightMetricsChartSizingPlaceholder()
{
  uint64_t result = qword_269B13E58;
  if (!qword_269B13E58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250F9E3BC()
{
  sub_250F49D48(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_250F9E448()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250F9E464@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  sub_250F9E798();
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F9E848();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v24[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v24[-1] - v16;
  sub_250F4CB10(v2, (uint64_t)&v24[-1] - v16);
  sub_251037F40();
  v24[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v24);
  sub_250F9E9DC((uint64_t)v24, (uint64_t)v25, (uint64_t (*)(void))sub_250F9A4E8);
  memcpy(v26, v25, sizeof(v26));
  sub_250F9E8B0((uint64_t)v17, (uint64_t)v14);
  v27[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v27);
  sub_250F9E9DC((uint64_t)v27, (uint64_t)v28, (uint64_t (*)(void))sub_250F9A4E8);
  memcpy(&v6[v4[12]], v26, 0x119uLL);
  sub_250F9E9DC((uint64_t)v14, (uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration);
  uint64_t v18 = &v6[v4[11]];
  *((void *)v18 + 8) = 0;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  memcpy(&v6[v4[13]], v28, 0x119uLL);
  double v19 = (uint64_t *)&v6[v4[14]];
  uint64_t *v19 = swift_getKeyPath();
  sub_250F9E91C();
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v23, v11, v8);
  sub_250F9E974();
  sub_250F9E9DC((uint64_t)v6, v20 + *(int *)(v21 + 36), (uint64_t (*)(void))sub_250F9E798);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return sub_250F9EA44((uint64_t)v17);
}

void sub_250F9E798()
{
  if (!qword_269B13E68)
  {
    sub_250F9E7F4();
    unint64_t v0 = type metadata accessor for OvernightMetricsAxisStyle();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13E68);
    }
  }
}

unint64_t sub_250F9E7F4()
{
  unint64_t result = qword_269B13E70;
  if (!qword_269B13E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13E70);
  }
  return result;
}

void sub_250F9E848()
{
  if (!qword_269B13E78)
  {
    unint64_t v0 = sub_251037F50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13E78);
    }
  }
}

uint64_t sub_250F9E8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_250F9E91C()
{
  if (!qword_269B13230)
  {
    sub_2510374F0();
    unint64_t v0 = sub_251038090();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13230);
    }
  }
}

void sub_250F9E974()
{
  if (!qword_269B13E80)
  {
    sub_250F9E848();
    sub_250F9E798();
    unint64_t v0 = sub_251038270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13E80);
    }
  }
}

uint64_t sub_250F9E9DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250F9EA44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_250F9EAA4()
{
  unint64_t result = qword_269B13E88;
  if (!qword_269B13E88)
  {
    sub_250F9E974();
    sub_250F9EB7C(&qword_269B13E90, (void (*)(uint64_t))sub_250F9E848);
    sub_250F9EB7C((unint64_t *)&qword_269B13E98, (void (*)(uint64_t))sub_250F9E798);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B13E88);
  }
  return result;
}

uint64_t sub_250F9EB7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SleepingSampleDataType.preferredImage.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_251037740();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, v1, v2, v4);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 != *MEMORY[0x263F42CC8] && v7 != *MEMORY[0x263F42CB8])
  {
    if (v7 == *MEMORY[0x263F42CB0]) {
      return sub_251038B50();
    }
    if (v7 != *MEMORY[0x263F42CC0] && v7 != *MEMORY[0x263F42CA8])
    {
      uint64_t v9 = sub_251038B40();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      return v9;
    }
  }
  return sub_251038B40();
}

uint64_t SleepingSampleDataType.localizedName.getter()
{
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v11((char *)v18 - v9, v0, v3, v8);
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v10, v3) == *MEMORY[0x263F42CA8])
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  uint64_t v15 = (void *)sub_2510376E0();
  id v16 = objc_msgSend(v15, sel_hk_localizedName);

  if (v16)
  {
    uint64_t v14 = sub_2510391C0();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    return v14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v11)(v6, v0, v3);
  void v18[2] = 0;
  void v18[3] = 0xE000000000000000;
  sub_251039550();
  sub_251039210();
  sub_251039610();
  uint64_t result = sub_251039640();
  __break(1u);
  return result;
}

uint64_t SleepingSampleDataType.localizedShortenedName.getter()
{
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x263F42CC8]
    || v8 == *MEMORY[0x263F42CB8]
    || v8 == *MEMORY[0x263F42CB0]
    || v8 == *MEMORY[0x263F42CC0]
    || v8 == *MEMORY[0x263F42CA8])
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

Swift::String_optional __swiftcall SleepingSampleDataType.localizedUnitString(for:)(HKUnit a1)
{
  uint64_t v2 = sub_251037460();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251039180();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = sub_251037740();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  int v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v1, v4, v6);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == *MEMORY[0x263F42CC8])
  {
    sub_250F9F88C();
    id v10 = objc_msgSend(self, sel__countPerMinuteUnit);
    char v11 = sub_251039480();

    if (v11) {
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_17;
  }
  if (v9 == *MEMORY[0x263F42CB8])
  {
    sub_250F9F88C();
    id v14 = objc_msgSend(self, sel__countPerMinuteUnit);
    char v15 = sub_251039480();

    if (v15)
    {
LABEL_6:
      sub_251039100();
      type metadata accessor for HealthBalanceUI();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v17 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_251037450();
      uint64_t v12 = sub_2510391D0();
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v9 != *MEMORY[0x263F42CB0] && v9 != *MEMORY[0x263F42CC0] && v9 != *MEMORY[0x263F42CA8]) {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  uint64_t v12 = 0;
  id v13 = 0;
LABEL_18:
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

unint64_t sub_250F9F88C()
{
  unint64_t result = qword_26B2108E8;
  if (!qword_26B2108E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2108E8);
  }
  return result;
}

uint64_t (*SleepingSampleDataType.EducationalSummarySection.title.modify())()
{
  return nullsub_1;
}

uint64_t (*SleepingSampleDataType.EducationalSummarySection.description.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataType.eductionalSummarySections.getter()
{
  uint64_t v0 = sub_251037460();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_251039180();
  MEMORY[0x270FA5388](v1 - 8);
  sub_250FA2278(0, &qword_269B13EA0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_25103AD40;
  uint64_t v3 = sub_250F9FBD8();
  uint64_t v5 = v4;
  uint64_t v6 = sub_250F9FFB8();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  *(void *)(v2 + 48) = v6;
  *(void *)(v2 + 56) = v7;
  uint64_t v8 = sub_250FA0398();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    uint64_t v14 = sub_2510391D0();
    uint64_t v16 = v15;
    uint64_t v2 = (uint64_t)sub_250FA1874((void *)1, 2, 1, (void *)v2);
    *(void *)(v2 + 16) = 2;
    *(void *)(v2 + 64) = v14;
    *(void *)(v2 + 72) = v16;
    *(void *)(v2 + 80) = v10;
    *(void *)(v2 + 88) = v11;
    uint64_t v17 = sub_250FA06A0();
    if (!v18) {
      return v2;
    }
  }
  else
  {
    uint64_t v17 = sub_250FA06A0();
    if (!v18) {
      return v2;
    }
  }
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  sub_251039100();
  type metadata accessor for HealthBalanceUI();
  uint64_t v21 = swift_getObjCClassFromMetadata();
  id v22 = objc_msgSend(self, (SEL)0x26535EF25, v21);
  sub_251037450();
  uint64_t v23 = sub_2510391D0();
  uint64_t v25 = v24;
  unint64_t v27 = *(void *)(v2 + 16);
  unint64_t v26 = *(void *)(v2 + 24);
  if (v27 >= v26 >> 1) {
    uint64_t v2 = (uint64_t)sub_250FA1874((void *)(v26 > 1), v27 + 1, 1, (void *)v2);
  }
  *(void *)(v2 + 16) = v27 + 1;
  uint64_t v28 = (void *)(v2 + 32 * v27);
  v28[4] = v23;
  v28[5] = v25;
  v28[6] = v19;
  v28[7] = v20;
  return v2;
}

uint64_t sub_250F9FBD8()
{
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x263F42CC8]
    || v8 == *MEMORY[0x263F42CB8]
    || v8 == *MEMORY[0x263F42CB0]
    || v8 == *MEMORY[0x263F42CC0]
    || v8 == *MEMORY[0x263F42CA8])
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t sub_250F9FFB8()
{
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x263F42CC8]
    || v8 == *MEMORY[0x263F42CB8]
    || v8 == *MEMORY[0x263F42CB0]
    || v8 == *MEMORY[0x263F42CC0]
    || v8 == *MEMORY[0x263F42CA8])
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t sub_250FA0398()
{
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x263F42CC8] || v8 == *MEMORY[0x263F42CB8] || v8 == *MEMORY[0x263F42CC0])
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t sub_250FA06A0()
{
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_251037740();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x263F42CC8] || v8 == *MEMORY[0x263F42CB8] || v8 == *MEMORY[0x263F42CB0])
  {
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    return sub_2510391D0();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t SleepingSampleDataType.WarmupSummarySection.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleDataType.WarmupSummarySection.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SleepingSampleDataType.WarmupSummarySection.title.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataType.WarmupSummarySection.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleDataType.WarmupSummarySection.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*SleepingSampleDataType.WarmupSummarySection.description.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataType.warmupSummarySection.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_251037460();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = sub_251039180();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = sub_251037740();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v1, v5, v7);
  if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v9, v5) == *MEMORY[0x263F42CC0])
  {
    uint64_t v10 = SleepingSampleDataType.localizedName.getter();
    uint64_t v12 = v11;
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v14 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    uint64_t result = sub_2510391D0();
    *a1 = v10;
    a1[1] = v12;
    a1[2] = result;
    a1[3] = v16;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t SleepingSampleDataType.accessibilityIdentifier.getter()
{
  uint64_t v1 = sub_251037740();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v2 + 16))(v5, v0, v1, v3);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v5, v1);
  if (v6 == *MEMORY[0x263F42CC8]) {
    return 0x7461527472616548;
  }
  int v8 = v6;
  if (v6 == *MEMORY[0x263F42CB8]) {
    return 0x7461726970736552;
  }
  if (v6 == *MEMORY[0x263F42CB0]) {
    return 0x79784F646F6F6C42;
  }
  uint64_t result = 0xD000000000000010;
  if (v8 != *MEMORY[0x263F42CC0])
  {
    if (v8 == *MEMORY[0x263F42CA8])
    {
      return 0x656C7341656D6954;
    }
    else
    {
      uint64_t result = sub_251039640();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_250FA0F28(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250FA1318(a1, a2, a3, a4, &qword_26B210C20, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
}

void *sub_250FA0F70(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250FA2278(0, qword_26B210C38);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250FA1C68(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_250FA108C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250FA2278(0, &qword_269B13EC8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250FA1D54(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_250FA11A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250FA22C0(0, &qword_269B13EB8, (void (*)(uint64_t))sub_250F2F370);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250FA1E48(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_250FA12D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250FA1318(a1, a2, a3, a4, &qword_269B12E20, (void (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(void))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(void))type metadata accessor for MultilayerCircularGaugeLayer);
}

uint64_t sub_250FA1318(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, void (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    uint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v13 = a2;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v13 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v13;
  }
  if (!v15)
  {
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_250FA22C0(0, a5, a6);
  uint64_t v16 = *(void *)(a7(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_29:
    uint64_t result = sub_251039630();
    __break(1u);
    return result;
  }
  v19[2] = v14;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  uint64_t v22 = *(void *)(a7(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  if (a1)
  {
    if ((unint64_t)v19 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v14)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_250FA211C(0, v14, v24, a4, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

void *sub_250FA15A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250FA2278(0, (unint64_t *)&qword_269B13EA8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250FA1F34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_250FA16BC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250FA22C0(0, &qword_269B13ED0, (void (*)(uint64_t))sub_250FA2314);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250FA1E48(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_250FA17E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250FA1318(a1, a2, a3, a4, &qword_26B210C30, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint, type metadata accessor for IndividualOvernightMetricChartPoint, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_250FA182C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250FA1318(a1, a2, a3, a4, &qword_269B13EC0, MEMORY[0x263F42D70], MEMORY[0x263F42D70], MEMORY[0x263F42D70]);
}

void *sub_250FA1874(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250FA2278(0, &qword_269B13EA0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250FA2028(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataType.EducationalSummarySection()
{
  return &type metadata for SleepingSampleDataType.EducationalSummarySection;
}

uint64_t _s25EducationalSummarySectionVwxx_0()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s25EducationalSummarySectionVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s25EducationalSummarySectionVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s25EducationalSummarySectionVwta_0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s25EducationalSummarySectionVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_250FA1B40(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataType.WarmupSummarySection()
{
  return &type metadata for SleepingSampleDataType.WarmupSummarySection;
}

uint64_t sub_250FA1B90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250FA1318(a1, a2, a3, a4, &qword_26B2108F8, MEMORY[0x263F42E58], MEMORY[0x263F42E58], MEMORY[0x263F42E58]);
}

uint64_t sub_250FA1BD8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250FA1318(a1, a2, a3, a4, &qword_269B13EB0, (void (*)(uint64_t))type metadata accessor for BaselineRelativeChartPoint, (uint64_t (*)(void))type metadata accessor for BaselineRelativeChartPoint, (uint64_t (*)(void))type metadata accessor for BaselineRelativeChartPoint);
}

uint64_t sub_250FA1C20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250FA1318(a1, a2, a3, a4, &qword_26B210310, MEMORY[0x263F1FD10], MEMORY[0x263F1FD10], MEMORY[0x263F1FD10]);
}

char *sub_250FA1C68(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  __n128 result = (char *)sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FA1D54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

char *sub_250FA1E48(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FA1F34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FA2028(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FA211C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

void sub_250FA2278(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_2510397D0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_250FA22C0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510397D0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250FA2314()
{
  if (!qword_269B13ED8)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B13ED8);
    }
  }
}

uint64_t sub_250FA2394@<X0>(uint64_t a1@<X8>)
{
  sub_250FA471C();
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_251038750();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v15 = sub_2510385E0();
  uint64_t v9 = sub_251038160();
  uint64_t v14 = sub_251038AD0();
  uint64_t v10 = sub_251038160();
  sub_251038740();
  uint64_t v11 = sub_251038760();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
  sub_251038770();
  uint64_t v12 = sub_2510387A0();
  sub_250FA4774((uint64_t)v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = 0x4010000000000000;
  return result;
}

uint64_t static OvernightMetricsChartSpec.accented(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 88);
  char v19 = *(unsigned char *)(a1 + 104);
  char v20 = *(unsigned char *)(a1 + 24);
  long long v22 = *(_OWORD *)(a1 + 128);
  long long v23 = *(_OWORD *)(a1 + 112);
  long long v21 = *(_OWORD *)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 168);
  char v27 = *(unsigned char *)(a1 + 248);
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v25 = *(void *)(a1 + 256);
  uint64_t v26 = *(void *)(a1 + 264);
  uint64_t v6 = *(void *)(a1 + 272);
  sub_251038AD0();
  uint64_t v18 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v17 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v16 = sub_251038AE0();
  swift_release();
  sub_251038AB0();
  uint64_t v15 = sub_251038160();
  sub_251038AD0();
  uint64_t v7 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v8 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  sub_251038AE0();
  swift_release();
  uint64_t v9 = sub_251038160();
  sub_251038AD0();
  sub_251038AE0();
  swift_release();
  uint64_t v10 = sub_251038160();
  sub_251038AC0();
  uint64_t v11 = sub_251038160();
  sub_251038AD0();
  sub_251038AE0();
  swift_release();
  uint64_t v12 = sub_251038160();
  sub_251038AD0();
  uint64_t v13 = sub_251038160();
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 24) = v20;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v15;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  *(void *)(a2 + 64) = 0x4014000000000000;
  *(void *)(a2 + 72) = v7;
  *(void *)(a2 + 80) = v8;
  *(void *)(a2 + 88) = v3;
  *(void *)(a2 + 96) = v24;
  *(unsigned char *)(a2 + 104) = v19;
  *(_OWORD *)(a2 + 112) = v23;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v21;
  *(void *)(a2 + 160) = v4;
  *(void *)(a2 + 168) = v5;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(unsigned char *)(a2 + 200) = 1;
  *(unsigned char *)(a2 + 201) = 1;
  *(void *)(a2 + 208) = v9;
  *(void *)(a2 + 216) = v10;
  *(void *)(a2 + 224) = v11;
  *(void *)(a2 + 232) = v12;
  *(void *)(a2 + 240) = v13;
  *(unsigned char *)(a2 + 248) = v27;
  *(void *)(a2 + 256) = v25;
  *(void *)(a2 + 264) = v26;
  *(void *)(a2 + 272) = v6;
  swift_retain();
  return swift_retain();
}

uint64_t static OvernightMetricsChartSpec.vibrant(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 88);
  char v19 = *(unsigned char *)(a1 + 104);
  char v20 = *(unsigned char *)(a1 + 24);
  long long v22 = *(_OWORD *)(a1 + 128);
  long long v23 = *(_OWORD *)(a1 + 112);
  long long v21 = *(_OWORD *)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v27 = *(void *)(a1 + 232);
  uint64_t v28 = *(void *)(a1 + 240);
  char v29 = *(unsigned char *)(a1 + 248);
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v25 = *(void *)(a1 + 256);
  uint64_t v26 = *(void *)(a1 + 264);
  uint64_t v6 = *(void *)(a1 + 272);
  sub_251038AD0();
  uint64_t v18 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v17 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v16 = sub_251038AE0();
  swift_release();
  sub_251038AB0();
  uint64_t v7 = sub_251038160();
  uint64_t v15 = sub_251038AD0();
  uint64_t v8 = sub_251038AD0();
  sub_251038AD0();
  sub_251038AE0();
  swift_release();
  uint64_t v9 = sub_251038160();
  sub_251038AD0();
  sub_251038AE0();
  swift_release();
  uint64_t v10 = sub_251038160();
  sub_251038AD0();
  sub_251038AE0();
  swift_release();
  uint64_t v11 = sub_251038160();
  sub_251038AD0();
  sub_251038AE0();
  swift_release();
  uint64_t v12 = sub_251038160();
  sub_251038AC0();
  uint64_t v13 = sub_251038160();
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 24) = v20;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  *(void *)(a2 + 64) = 0x4014000000000000;
  *(void *)(a2 + 72) = v15;
  *(void *)(a2 + 80) = v8;
  *(void *)(a2 + 88) = v3;
  *(void *)(a2 + 96) = v24;
  *(unsigned char *)(a2 + 104) = v19;
  *(_OWORD *)(a2 + 112) = v23;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v21;
  *(void *)(a2 + 160) = v4;
  *(void *)(a2 + 168) = v5;
  *(void *)(a2 + 176) = v9;
  *(void *)(a2 + 184) = v10;
  *(void *)(a2 + 192) = 0x3FF0000000000000;
  *(unsigned char *)(a2 + 200) = 0;
  *(unsigned char *)(a2 + 201) = 0;
  *(void *)(a2 + 208) = v11;
  *(void *)(a2 + 216) = v12;
  *(void *)(a2 + 224) = v13;
  *(void *)(a2 + 232) = v27;
  *(void *)(a2 + 240) = v28;
  *(unsigned char *)(a2 + 248) = v29;
  *(void *)(a2 + 256) = v25;
  *(void *)(a2 + 264) = v26;
  *(void *)(a2 + 272) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t EnvironmentValues.overnightMetricsChartSpec.getter()
{
  sub_250F65A0C();
  return sub_251038460();
}

uint64_t EnvironmentValues.overnightMetricsChartSpec.setter(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  sub_250F65A0C();
  return sub_251038470();
}

double static OvernightMetricsChartSpec.watchApp.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251037C50();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269B12BC0 != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v2, (uint64_t)qword_269B1AD40);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v7(v5, v6, v2);
  sub_251038B20();
  uint64_t v26 = sub_251038AE0();
  swift_release();
  if (qword_269B12BC8 != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v2, (uint64_t)qword_269B1AD58);
  v7(v5, v8, v2);
  sub_251038B20();
  uint64_t v25 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v9 = sub_251038AE0();
  swift_release();
  *(void *)&long long v27 = sub_251038AB0();
  uint64_t v10 = sub_251038160();
  if (qword_26B210178 != -1) {
    swift_once();
  }
  uint64_t v11 = MEMORY[0x2533907A0]((id)qword_26B210328);
  if (qword_26B210180 != -1) {
    swift_once();
  }
  uint64_t v12 = MEMORY[0x2533907A0]((id)qword_26B210330);
  *(void *)&long long v27 = sub_251038A90();
  uint64_t v13 = sub_251038160();
  sub_251038A90();
  uint64_t v14 = sub_251038AE0();
  swift_release();
  *(void *)&long long v27 = v14;
  uint64_t v15 = sub_251038160();
  LODWORD(v27) = sub_2510385D0();
  DWORD1(v27) = 1036831949;
  sub_250F659AC();
  sub_250FA3690();
  uint64_t v16 = sub_251038160();
  sub_250FA2394((uint64_t)&v27);
  char v17 = v28;
  uint64_t v18 = v29;
  uint64_t v19 = v30;
  double result = v31;
  char v38 = 1;
  char v36 = 0;
  char v34 = 1;
  uint64_t v21 = v25;
  *(void *)a1 = v26;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 25) = *(_DWORD *)v40;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)&v40[3];
  *(unsigned char *)(a1 + 32) = 1;
  int v22 = *(_DWORD *)v39;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v39[3];
  *(_DWORD *)(a1 + 33) = v22;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = v38;
  *(_DWORD *)(a1 + 57) = *(_DWORD *)v37;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)&v37[3];
  *(void *)(a1 + 64) = 0x4014000000000000;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = 0x3FE0000000000000;
  *(void *)(a1 + 96) = 0x4028000000000000;
  *(unsigned char *)(a1 + 104) = v36;
  int v23 = *(_DWORD *)v35;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v35[3];
  *(_DWORD *)(a1 + 105) = v23;
  *(_OWORD *)(a1 + 112) = xmmword_25103A620;
  *(_OWORD *)(a1 + 128) = xmmword_25103A630;
  *(_OWORD *)(a1 + 144) = xmmword_25103A640;
  *(_OWORD *)(a1 + 160) = xmmword_25103A650;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 200) = v34;
  *(unsigned char *)(a1 + 201) = 0;
  *(_DWORD *)(a1 + 202) = *(_DWORD *)&v32[7];
  *(_WORD *)(a1 + 206) = v33;
  *(void *)(a1 + 208) = v13;
  *(void *)(a1 + 216) = v15;
  *(void *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 232) = v27;
  *(unsigned char *)(a1 + 248) = v17;
  int v24 = *(_DWORD *)v32;
  *(_DWORD *)(a1 + 252) = *(_DWORD *)&v32[3];
  *(_DWORD *)(a1 + 249) = v24;
  *(void *)(a1 + 256) = v18;
  *(void *)(a1 + 264) = v19;
  *(double *)(a1 + 272) = result;
  return result;
}

void (*EnvironmentValues.overnightMetricsChartSpec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x470uLL);
  *a1 = v3;
  v3[140] = v1;
  v3[141] = sub_250F65A0C();
  sub_251038460();
  return sub_250FA30D4;
}

void sub_250FA30D4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1 + 280);
  if (a2)
  {
    memcpy((void *)(v2 + 560), (const void *)v2, 0x118uLL);
    memcpy((void *)(v2 + 840), (const void *)v2, 0x118uLL);
    sub_250F2A3B4((uint64_t *)(v2 + 560));
    sub_251038470();
    memcpy(v3, (const void *)v2, 0x118uLL);
    sub_250F2E048((uint64_t *)v3);
  }
  else
  {
    memcpy((void *)(*a1 + 280), (const void *)v2, 0x118uLL);
    sub_251038470();
  }
  free((void *)v2);
}

double sub_250FA31BC()
{
  uint64_t v0 = sub_251037C50();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269B12BC0 != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)qword_269B1AD40);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  sub_251038B20();
  uint64_t v18 = sub_251038AE0();
  swift_release();
  if (qword_269B12BC8 != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v0, (uint64_t)qword_269B1AD58);
  v5(v3, v6, v0);
  sub_251038B20();
  uint64_t v7 = sub_251038AE0();
  swift_release();
  sub_251038AD0();
  uint64_t v8 = sub_251038AE0();
  swift_release();
  *(void *)&long long v19 = sub_251038AB0();
  uint64_t v9 = sub_251038160();
  if (qword_26B210178 != -1) {
    swift_once();
  }
  uint64_t v10 = MEMORY[0x2533907A0]((id)qword_26B210328);
  if (qword_26B210180 != -1) {
    swift_once();
  }
  uint64_t v11 = MEMORY[0x2533907A0]((id)qword_26B210330);
  *(void *)&long long v19 = sub_251038A90();
  uint64_t v12 = sub_251038160();
  sub_251038A90();
  uint64_t v13 = sub_251038AE0();
  swift_release();
  *(void *)&long long v19 = v13;
  uint64_t v14 = sub_251038160();
  LODWORD(v19) = sub_2510385D0();
  DWORD1(v19) = 1036831949;
  sub_250F659AC();
  sub_250FA3690();
  uint64_t v15 = sub_251038160();
  sub_250FA2394((uint64_t)&v19);
  double result = v23;
  qword_269B13EE0 = v18;
  *(void *)algn_269B13EE8 = v7;
  qword_269B13EF0 = v8;
  byte_269B13EF8 = 0;
  *(_DWORD *)algn_269B13EF9 = *(_DWORD *)v29;
  dword_269B13EFC = *(_DWORD *)&v29[3];
  byte_269B13F00 = 1;
  dword_269B13F04 = *(_DWORD *)&v28[3];
  *(_DWORD *)algn_269B13F01 = *(_DWORD *)v28;
  qword_269B13F08 = v9;
  unk_269B13F10 = 0;
  byte_269B13F18 = 1;
  *(_DWORD *)algn_269B13F19 = *(_DWORD *)v27;
  dword_269B13F1C = *(_DWORD *)&v27[3];
  qword_269B13F20 = 0x4014000000000000;
  unk_269B13F28 = v10;
  qword_269B13F30 = v11;
  unk_269B13F38 = 0x3FE0000000000000;
  qword_269B13F40 = 0;
  byte_269B13F48 = 1;
  dword_269B13F4C = *(_DWORD *)&v26[3];
  *(_DWORD *)algn_269B13F49 = *(_DWORD *)v26;
  xmmword_269B13F50 = xmmword_25103A620;
  unk_269B13F60 = xmmword_25103A630;
  xmmword_269B13F70 = xmmword_25103A640;
  unk_269B13F80 = xmmword_25103A650;
  qword_269B13F98 = 0;
  unk_269B13FA0 = 0;
  qword_269B13F90 = 0;
  byte_269B13FA8 = 1;
  byte_269B13FA9 = 0;
  unk_269B13FAA = *(_DWORD *)&v24[7];
  word_269B13FAE = v25;
  qword_269B13FB0 = v12;
  unk_269B13FB8 = v14;
  qword_269B13FC0 = v15;
  unk_269B13FC8 = v19;
  byte_269B13FD8 = v20;
  dword_269B13FDC = *(_DWORD *)&v24[3];
  *(_DWORD *)algn_269B13FD9 = *(_DWORD *)v24;
  qword_269B13FE0 = v21;
  unk_269B13FE8 = v22;
  qword_269B13FF0 = *(void *)&v23;
  return result;
}

uint64_t *sub_250FA35FC@<X0>(void *a1@<X8>)
{
  if (qword_269B12BA0 != -1) {
    swift_once();
  }
  memcpy(__dst, &qword_269B13EE0, sizeof(__dst));
  memcpy(a1, &qword_269B13EE0, 0x118uLL);
  return sub_250F2A3B4(__dst);
}

unint64_t sub_250FA3690()
{
  unint64_t result = qword_269B137E0;
  if (!qword_269B137E0)
  {
    sub_250F659AC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B137E0);
  }
  return result;
}

uint64_t destroy for OvernightMetricsChartSpec(void *a1)
{
  if (*a1)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  long long v9 = *(_OWORD *)(a2 + 120);
  long long v10 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  uint64_t v13 = *(void *)(a2 + 184);
  uint64_t v12 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 184) = v13;
  *(void *)(a1 + 192) = v12;
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  uint64_t v14 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v14;
  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v15;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  uint64_t v16 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v16;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = v5;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = a2[1];
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = a2[2];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80(a1);
      uint64_t v6 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v6;
    }
  }
  else if (v5)
  {
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = a2[2];
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v7;
  }
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  uint64_t v8 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = a2[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = a2[11];
  uint64_t v9 = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = a2[18];
  *(void *)(a1 + 152) = a2[19];
  *(void *)(a1 + 160) = a2[20];
  *(void *)(a1 + 168) = a2[21];
  *(void *)(a1 + 176) = a2[22];
  swift_retain();
  swift_release();
  *(void *)(a1 + 184) = a2[23];
  swift_retain();
  swift_release();
  uint64_t v10 = a2[24];
  *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
  *(void *)(a1 + 192) = v10;
  *(unsigned char *)(a1 + 201) = *((unsigned char *)a2 + 201);
  *(void *)(a1 + 208) = a2[26];
  swift_retain();
  swift_release();
  *(void *)(a1 + 216) = a2[27];
  swift_retain();
  swift_release();
  *(void *)(a1 + 224) = a2[28];
  swift_retain();
  swift_release();
  *(void *)(a1 + 232) = a2[29];
  swift_retain();
  swift_release();
  *(void *)(a1 + 240) = a2[30];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
  *(void *)(a1 + 256) = a2[32];
  swift_retain();
  swift_release();
  *(void *)(a1 + 264) = a2[33];
  swift_retain();
  swift_release();
  *(void *)(a1 + 272) = a2[34];
  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for OvernightMetricsChartSpec(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    goto LABEL_5;
  }
  if (!*(void *)a2)
  {
    sub_250F27E80(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  long long v4 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v4;
  long long v5 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v5;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_release();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_release();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_release();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_release();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_release();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_release();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 280)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 280) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec()
{
  return &type metadata for OvernightMetricsChartSpec;
}

uint64_t destroy for OvernightMetricsChartSpec.XAxisSpec()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec.XAxisSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec.XAxisSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartSpec.XAxisSpec(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec.XAxisSpec(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec.XAxisSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.XAxisSpec()
{
  return &type metadata for OvernightMetricsChartSpec.XAxisSpec;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.WarmupProgressCounterSpec()
{
  return &type metadata for OvernightMetricsChartSpec.WarmupProgressCounterSpec;
}

uint64_t destroy for OvernightMetricsChartSpec.GradientPillSpec()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec.GradientPillSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec.GradientPillSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartSpec.GradientPillSpec(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec.GradientPillSpec(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec.GradientPillSpec(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.GradientPillSpec()
{
  return &type metadata for OvernightMetricsChartSpec.GradientPillSpec;
}

uint64_t destroy for OvernightMetricsChartSpec.ChartPointSpec()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec.ChartPointSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.ChartPointSpec()
{
  return &type metadata for OvernightMetricsChartSpec.ChartPointSpec;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwxx_0()
{
  swift_release();
  swift_release();
  return swift_release();
}

void *_s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *_s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.BaselineBandColors()
{
  return &type metadata for OvernightMetricsChartSpec.BaselineBandColors;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpecKey()
{
  return &type metadata for OvernightMetricsChartSpecKey;
}

void sub_250FA471C()
{
  if (!qword_269B12E08)
  {
    sub_251038760();
    unint64_t v0 = sub_251039490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12E08);
    }
  }
}

uint64_t sub_250FA4774(uint64_t a1)
{
  sub_250FA471C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250FA47D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v152 = a1;
  uint64_t v153 = a5;
  uint64_t v8 = sub_251039160();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v124 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_251039180();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_2510378C0();
  uint64_t v13 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155);
  uint64_t v15 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v151 = (char *)&v115 - v17;
  uint64_t v18 = sub_251037380();
  uint64_t v146 = *(void *)(v18 - 8);
  uint64_t v147 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v145 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_251037280();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v144 = (char *)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_251037510();
  MEMORY[0x270FA5388](v22 - 8);
  unint64_t v143 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_2510374F0();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v142 = (char *)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_251037460();
  MEMORY[0x270FA5388](v27 - 8);
  unint64_t v148 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250FACC74(0, &qword_26B210A58, MEMORY[0x263F06FF0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v138 = (char *)&v115 - v31;
  sub_250FACC74(0, &qword_26B210A60, MEMORY[0x263F07008], v29);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v136 = (char *)&v115 - v33;
  uint64_t v141 = sub_2510373B0();
  uint64_t v140 = *(void *)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  uint64_t v137 = (char *)&v115 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v139 = (char *)&v115 - v36;
  uint64_t v135 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x270FA5388](v135);
  char v38 = (char *)&v115 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v150 = (uint64_t)&v115 - v40;
  uint64_t v133 = sub_2510374E0();
  uint64_t v132 = *(void *)(v133 - 8);
  MEMORY[0x270FA5388](v133);
  uint64_t v131 = (char *)&v115 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F26E08();
  MEMORY[0x270FA5388](v42 - 8);
  uint64_t v134 = (uint64_t)&v115 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v44);
  uint64_t v154 = (char *)&v115 - v45;
  if (!*(void *)(a2 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a4, v24);
    uint64_t v100 = sub_251037400();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v152, v100);
    uint64_t v101 = type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56);
    uint64_t v103 = v101;
    uint64_t v104 = v153;
    return v102(v104, 1, 1, v103);
  }
  uint64_t v117 = a3;
  uint64_t v118 = v25;
  uint64_t v119 = v24;
  uint64_t v120 = v12;
  uint64_t v149 = a4;
  uint64_t v46 = a2 + 64;
  uint64_t v47 = 1;
  uint64_t v48 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v49 = -1;
  if (v48 < 64) {
    uint64_t v49 = ~(-1 << v48);
  }
  unint64_t v50 = v49 & *(void *)(a2 + 64);
  int64_t v51 = (unint64_t)(v48 + 63) >> 6;
  uint64_t v130 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  uint64_t v129 = (uint64_t (**)(char *, uint64_t))(v13 + 88);
  int v128 = *MEMORY[0x263F42E20];
  int v127 = *MEMORY[0x263F42E18];
  int v126 = *MEMORY[0x263F42E28];
  uint64_t v125 = (void (**)(char *, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  int v122 = 0;
  int v121 = 0;
  int v123 = 0;
  int64_t v52 = 0;
  uint64_t v116 = 0;
  double v53 = 0.0;
  long long v54 = (void *)MEMORY[0x263F8EE78];
  double v55 = 0.0;
  while (v50)
  {
    unint64_t v56 = __clz(__rbit64(v50));
    v50 &= v50 - 1;
    unint64_t v57 = v56 | (v52 << 6);
LABEL_6:
    uint64_t v58 = *(void *)(a2 + 56) + 16 * v57;
    if ((*(unsigned char *)(v58 + 8) & 1) == 0)
    {
      double v62 = *(double *)v58;
      if (v47)
      {
        double v55 = *(double *)v58;
        double v53 = *(double *)v58;
      }
      else if (v62 >= v53)
      {
        if (v55 < v62)
        {
          double v55 = *(double *)v58;
          if (v53 > v62) {
            goto LABEL_54;
          }
        }
      }
      else
      {
        double v53 = *(double *)v58;
        if (v62 > v55) {
          goto LABEL_53;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v54 = sub_250FA0F70(0, v54[2] + 1, 1, v54);
      }
      unint64_t v64 = v54[2];
      unint64_t v63 = v54[3];
      if (v64 >= v63 >> 1) {
        long long v54 = sub_250FA0F70((void *)(v63 > 1), v64 + 1, 1, v54);
      }
      v54[2] = v64 + 1;
      *(double *)&v54[v64 + 4] = v62;
      uint64_t v65 = (uint64_t)v151;
      sub_251037890();
      uint64_t v66 = v65;
      uint64_t v67 = v155;
      (*v130)(v15, v66, v155);
      int v68 = (*v129)(v15, v67);
      if (v68 == v128)
      {
        uint64_t v47 = 0;
        int v123 = 1;
      }
      else if (v68 == v127)
      {
        uint64_t v47 = 0;
        int v122 = 1;
      }
      else if (v68 == v126)
      {
        uint64_t v47 = 0;
        int v121 = 1;
      }
      else
      {
        (*v125)(v15, v155);
        uint64_t v47 = 0;
      }
    }
  }
  if (__OFADD__(v52++, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v52 >= v51) {
    goto LABEL_43;
  }
  unint64_t v60 = *(void *)(v46 + 8 * v52);
  if (v60)
  {
LABEL_20:
    unint64_t v50 = (v60 - 1) & v60;
    unint64_t v57 = __clz(__rbit64(v60)) + (v52 << 6);
    goto LABEL_6;
  }
  int64_t v61 = v52 + 1;
  if (v52 + 1 >= v51) {
    goto LABEL_43;
  }
  unint64_t v60 = *(void *)(v46 + 8 * v61);
  if (v60) {
    goto LABEL_19;
  }
  int64_t v61 = v52 + 2;
  if (v52 + 2 >= v51) {
    goto LABEL_43;
  }
  unint64_t v60 = *(void *)(v46 + 8 * v61);
  if (v60) {
    goto LABEL_19;
  }
  int64_t v61 = v52 + 3;
  if (v52 + 3 >= v51) {
    goto LABEL_43;
  }
  unint64_t v60 = *(void *)(v46 + 8 * v61);
  if (v60)
  {
LABEL_19:
    int64_t v52 = v61;
    goto LABEL_20;
  }
  int64_t v61 = v52 + 4;
  if (v52 + 4 < v51)
  {
    unint64_t v60 = *(void *)(v46 + 8 * v61);
    if (!v60)
    {
      while (1)
      {
        int64_t v52 = v61 + 1;
        if (__OFADD__(v61, 1)) {
          break;
        }
        if (v52 >= v51) {
          goto LABEL_43;
        }
        unint64_t v60 = *(void *)(v46 + 8 * v52);
        ++v61;
        if (v60) {
          goto LABEL_20;
        }
      }
LABEL_52:
      __break(1u);
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      swift_release();
      __break(1u);
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    goto LABEL_19;
  }
LABEL_43:
  uint64_t v155 = v47;
  uint64_t v69 = v117;
  uint64_t v151 = v38;
  swift_release();
  uint64_t v70 = swift_bridgeObjectRetain();
  uint64_t v71 = (void *)sub_250FA748C(v70);
  swift_bridgeObjectRelease();
  v156[0] = v71;
  uint64_t v72 = v116;
  sub_250FA760C(v156);
  uint64_t v74 = v156[0];
  if (v72) {
    goto LABEL_55;
  }
  MEMORY[0x270FA5388](v73);
  uint64_t v75 = v152;
  *(&v115 - 4) = v69;
  *(&v115 - 3) = v75;
  *(&v115 - 2) = v149;
  unint64_t v76 = sub_250FEDCCC((void (*)(uint64_t))sub_250FACAA4, (uint64_t)(&v115 - 6), (uint64_t)v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v77 = v132;
  long long v78 = v131;
  uint64_t v79 = v133;
  (*(void (**)(char *, void, uint64_t))(v132 + 104))(v131, *MEMORY[0x263F07870], v133);
  uint64_t v80 = v154;
  sub_250FA6854(v75, v154);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
  uint64_t v81 = (uint64_t)v80;
  uint64_t v82 = v134;
  sub_250FACCD8(v81, v134, (uint64_t (*)(void))sub_250F26E08);
  v156[0] = v54;
  swift_bridgeObjectRetain();
  sub_250FA76B4((uint64_t *)v156);
  swift_bridgeObjectRelease();
  uint64_t v83 = v156[0];
  uint64_t v84 = (uint64_t)v151;
  sub_250FACCD8(v82, (uint64_t)v151, (uint64_t (*)(void))sub_250F26E08);
  uint64_t v85 = v135;
  *(void *)(v84 + *(int *)(v135 + 20)) = v76;
  *(void *)(v84 + *(int *)(v85 + 24)) = v83;
  uint64_t v86 = swift_bridgeObjectRetain();
  uint64_t v87 = sub_250FAC240(v86);
  swift_bridgeObjectRelease();
  sub_250FAB298(v82, (uint64_t (*)(void))sub_250F26E08);
  *(void *)(v84 + *(int *)(v85 + 28)) = v87;
  uint64_t v88 = v150;
  sub_250FACB0C(v84, v150, (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  uint64_t v89 = sub_2510372D0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v136, 1, 1, v89);
  uint64_t v90 = sub_2510372C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v138, 1, 1, v90);
  sub_251037440();
  sub_2510374B0();
  sub_251037500();
  sub_251037270();
  uint64_t v91 = v137;
  sub_2510372E0();
  uint64_t v92 = v145;
  sub_251037360();
  long long v93 = v139;
  sub_2510373A0();
  (*(void (**)(char *, uint64_t))(v146 + 8))(v92, v147);
  uint64_t v94 = *(void (**)(char *, uint64_t))(v140 + 8);
  uint64_t v95 = v141;
  v94(v91, v141);
  sub_250FACAC4(&qword_26B210A68, MEMORY[0x263F07258]);
  sub_2510373F0();
  v94(v93, v95);
  uint64_t v96 = v156[0];
  long long v97 = v156[1];
  if (v155)
  {
    sub_251039100();
  }
  else
  {
    sub_25102F51C(v53);
    sub_25102F51C(v55);
    sub_251039150();
    sub_251039140();
    sub_251039130();
    swift_bridgeObjectRelease();
    sub_251039140();
    sub_251039130();
    uint64_t v88 = v150;
    swift_bridgeObjectRelease();
    sub_251039140();
    sub_251039170();
  }
  type metadata accessor for HealthBalanceUI();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v99 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_251037450();
  uint64_t v106 = sub_2510391D0();
  uint64_t v108 = v107;
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v149, v119);
  sub_250FAB298((uint64_t)v154, (uint64_t (*)(void))sub_250F26E08);
  uint64_t v109 = sub_251037400();
  uint64_t v110 = v153;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 32))(v153, v75, v109);
  uint64_t v111 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  sub_250FACB0C(v88, v110 + v111[5], (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  uint64_t v112 = v110 + v111[6];
  *(double *)uint64_t v112 = v53;
  *(double *)(v112 + 8) = v55;
  *(unsigned char *)(v112 + 16) = v155 & 1;
  *(unsigned char *)(v110 + v111[7]) = v123 & 1;
  *(unsigned char *)(v110 + v111[8]) = v121 & 1;
  *(unsigned char *)(v110 + v111[9]) = v122 & 1;
  uint64_t v113 = (void *)(v110 + v111[10]);
  *uint64_t v113 = v96;
  v113[1] = v97;
  uint64_t v114 = (uint64_t *)(v110 + v111[11]);
  *uint64_t v114 = v106;
  v114[1] = v108;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v111 - 1) + 56))(v110, 0, 1, v111);
}

uint64_t OvernightMetricsChartPoint.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_251037400();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t OvernightMetricsChartPoint.hash(into:)(long long *a1)
{
  uint64_t v2 = v1;
  sub_251037400();
  sub_250FACAC4((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
  sub_251039080();
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v5 = v1 + *(int *)(v4 + 20);
  sub_251039080();
  sub_250F26E08();
  sub_251039080();
  uint64_t v6 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  uint64_t v7 = *(void *)(v5 + v6[5]);
  swift_bridgeObjectRetain();
  sub_250FAA5C0((uint64_t)a1, v7);
  swift_bridgeObjectRelease();
  sub_250FAA928((uint64_t)a1, *(void *)(v5 + v6[6]));
  uint64_t v8 = *(void *)(v5 + v6[7]);
  swift_bridgeObjectRetain();
  sub_250FA9DC4(a1, v8);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v2 + *(int *)(v4 + 24) + 16) == 1)
  {
    sub_251039870();
  }
  else
  {
    sub_251039870();
    sub_251039880();
    sub_251039880();
  }
  sub_251039870();
  sub_251039870();
  sub_251039870();
  swift_bridgeObjectRetain();
  sub_251039200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_251039200();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for OvernightMetricsChartPoint()
{
  uint64_t result = qword_26B210DB0;
  if (!qword_26B210DB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_250FA5C08(char a1)
{
  unint64_t result = 1702125924;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
    case 6:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_250FA5CFC()
{
  return sub_250FA5C08(*v0);
}

uint64_t sub_250FA5D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250FAC690(a1, a2);
  *a3 = result;
  return result;
}

void sub_250FA5D2C(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_250FA5D38(uint64_t a1)
{
  unint64_t v2 = sub_250FAB180();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250FA5D74(uint64_t a1)
{
  unint64_t v2 = sub_250FAB180();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t OvernightMetricsChartPoint.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250FAB1D4(0, &qword_269B13FF8, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v14[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250FAB180();
  sub_2510398B0();
  LOBYTE(v15) = 0;
  sub_251037400();
  sub_250FACAC4(&qword_269B13B10, MEMORY[0x263F07490]);
  sub_2510397A0();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
    LOBYTE(v15) = 1;
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    sub_250FACAC4(&qword_269B14008, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    sub_2510397A0();
    uint64_t v11 = (long long *)(v3 + *(int *)(v10 + 24));
    char v12 = *((unsigned char *)v11 + 16);
    long long v15 = *v11;
    char v16 = v12;
    v14[15] = 2;
    sub_250F2F370();
    sub_250FAB238(&qword_269B14010);
    sub_251039760();
    LOBYTE(v15) = 3;
    sub_251039780();
    LOBYTE(v15) = 4;
    sub_251039780();
    LOBYTE(v15) = 5;
    sub_251039780();
    LOBYTE(v15) = 6;
    sub_251039770();
    LOBYTE(v15) = 7;
    sub_251039770();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t OvernightMetricsChartPoint.hashValue.getter()
{
  sub_251039850();
  OvernightMetricsChartPoint.hash(into:)(v1);
  return sub_251039890();
}

uint64_t OvernightMetricsChartPoint.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_251037400();
  uint64_t v30 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v33 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FAB1D4(0, &qword_269B14018, MEMORY[0x263F8E040]);
  uint64_t v35 = v6;
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = &v11[*(int *)(v12 + 24)];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  unsigned char v13[16] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250FAB180();
  uint64_t v34 = v8;
  uint64_t v14 = v36;
  sub_2510398A0();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v15 = (uint64_t)v32;
  LOBYTE(v37) = 0;
  sub_250FACAC4(&qword_269B13B50, MEMORY[0x263F07490]);
  sub_251039730();
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v11, v33, v4);
  LOBYTE(v37) = 1;
  sub_250FACAC4(&qword_269B14020, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  sub_251039730();
  sub_250FACB0C(v15, (uint64_t)&v11[v9[5]], (uint64_t (*)(void))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  sub_250F2F370();
  char v39 = 2;
  sub_250FAB238(&qword_269B14028);
  sub_2510396F0();
  char v16 = v38;
  *(_OWORD *)uint64_t v13 = v37;
  unsigned char v13[16] = v16;
  LOBYTE(v37) = 3;
  v11[v9[7]] = sub_251039710() & 1;
  LOBYTE(v37) = 4;
  char v17 = sub_251039710();
  uint64_t v18 = v31;
  v11[v9[8]] = v17 & 1;
  LOBYTE(v37) = 5;
  v11[v9[9]] = sub_251039710() & 1;
  LOBYTE(v37) = 6;
  uint64_t v19 = sub_251039700();
  uint64_t v20 = (uint64_t *)&v11[v9[10]];
  *uint64_t v20 = v19;
  v20[1] = v21;
  LOBYTE(v37) = 7;
  uint64_t v22 = sub_251039700();
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v34, v35);
  uint64_t v25 = (uint64_t *)&v11[v9[11]];
  *uint64_t v25 = v22;
  v25[1] = v24;
  sub_250FACCD8((uint64_t)v11, v28, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_250FAB298((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
}

uint64_t sub_250FA67A0()
{
  sub_251039850();
  OvernightMetricsChartPoint.hash(into:)(v1);
  return sub_251039890();
}

uint64_t sub_250FA67E4()
{
  sub_251039850();
  OvernightMetricsChartPoint.hash(into:)(v1);
  return sub_251039890();
}

uint64_t sub_250FA6820@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsChartPoint.init(from:)(a1, a2);
}

uint64_t sub_250FA6838(void *a1)
{
  return OvernightMetricsChartPoint.encode(to:)(a1);
}

uint64_t sub_250FA6854@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v35 = a2;
  sub_250F805C8();
  uint64_t v37 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - v5;
  uint64_t v7 = sub_251037400();
  uint64_t v8 = *(void **)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v33 - v12;
  sub_250FACC74(0, &qword_26B210A50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  char v16 = (char *)&v33 - v15;
  uint64_t v17 = sub_2510370F0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510374A0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    sub_2510370D0();
    sub_2510370B0();
    sub_250FACAC4((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    char v22 = sub_2510390C0();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    if (v22)
    {
      uint64_t v23 = v37;
      uint64_t v24 = &v6[*(int *)(v37 + 48)];
      uint64_t v25 = (void (*)(char *, char *, uint64_t))v8[4];
      v25(v6, v13, v7);
      v25(v24, v10, v7);
      uint64_t v26 = v34;
      uint64_t v27 = &v34[*(int *)(v23 + 48)];
      uint64_t v28 = (void (*)(char *, char *, uint64_t))v8[2];
      v28(v34, v6, v7);
      v28(v27, v24, v7);
      uint64_t v29 = v35;
      v25(v35, v26, v7);
      uint64_t v30 = (void (*)(char *, uint64_t))v8[1];
      v30(v27, v7);
      uint64_t v31 = &v26[*(int *)(v37 + 48)];
      v25(v26, v6, v7);
      v25(v31, v24, v7);
      sub_250F26E08();
      v25(&v29[*(int *)(v32 + 36)], v31, v7);
      return ((uint64_t (*)(char *, uint64_t))v30)(v26, v7);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_250FA6CAC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v66 = a4;
  uint64_t v62 = a3;
  uint64_t v78 = a5;
  uint64_t v65 = sub_2510374E0();
  uint64_t v76 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  unint64_t v63 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F26E08();
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v64 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v73 = (char *)&v59 - v10;
  uint64_t v72 = sub_2510378C0();
  uint64_t v74 = *(void (***)(void, void, void))(v72 - 8);
  MEMORY[0x270FA5388](v72);
  int64_t v61 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v60 = (char *)&v59 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v71 = (char *)&v59 - v15;
  sub_250FACC74(0, &qword_26B210A78, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v81 = sub_251037400();
  uint64_t v19 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v70 = (uint64_t)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v75 = (uint64_t)&v59 - v22;
  sub_250FACB74();
  uint64_t v24 = v23 - 8;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_251037740();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v69 = (uint64_t)&v59 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v31 = MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v59 - v32;
  uint64_t v34 = a1;
  uint64_t v35 = (uint64_t *)(a1 + *(int *)(v24 + 56));
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16);
  v36(v26, v34, v27, v31);
  uint64_t v67 = *v35;
  int v68 = *((unsigned __int8 *)v35 + 8);
  uint64_t v37 = v77;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v33, v26, v27);
  if (!v37[2] || (unint64_t v38 = sub_250FCB6DC((uint64_t)v33), (v39 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, 1, 1, v81);
    goto LABEL_7;
  }
  unint64_t v40 = v37[7] + *(void *)(v19 + 72) * v38;
  uint64_t v41 = v81;
  uint64_t v77 = *(void **)(v19 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v77)(v18, v40, v81);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, v41);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v41) == 1)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
    sub_250FACBE0((uint64_t)v18);
    uint64_t v44 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v78, 1, 1, v44);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v75, v18, v41);
  uint64_t v42 = v60;
  if (v68)
  {
    uint64_t v43 = v72;
    ((void (**)(char *, void, uint64_t))v74)[13](v60, *MEMORY[0x263F42E10], v72);
  }
  else
  {
    sub_251037890();
    uint64_t v43 = v72;
  }
  ((void (**)(char *, char *, uint64_t))v74)[4](v71, v42, v43);
  ((void (*)(uint64_t, char *, uint64_t))v36)(v69, v33, v27);
  uint64_t v46 = v62;
  ((void (*)(uint64_t, uint64_t, uint64_t))v77)(v70, v62, v81);
  uint64_t v47 = *MEMORY[0x263F07870];
  uint64_t v48 = v76;
  unint64_t v60 = *(char **)(v76 + 104);
  uint64_t v77 = (void *)(v76 + 104);
  uint64_t v49 = v63;
  uint64_t v50 = v65;
  ((void (*)(char *, uint64_t, uint64_t))v60)(v63, v47, v65);
  sub_250FA6854(v46, v73);
  int64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v76 = v48 + 8;
  v51(v49, v50);
  int64_t v52 = v51;
  ((void (*)(char *, void, uint64_t))v60)(v49, *MEMORY[0x263F078C8], v50);
  double v53 = v64;
  sub_250FA6854(v75, v64);
  v52(v49, v50);
  uint64_t v79 = v67;
  char v80 = v68;
  long long v54 = v74;
  uint64_t v55 = (uint64_t)v61;
  unint64_t v57 = v71;
  uint64_t v56 = v72;
  ((void (**)(char *, char *, uint64_t))v74)[2](v61, v71, v72);
  sub_251002760(v69, v70, (uint64_t)v73, (uint64_t)v53, (uint64_t)&v79, v55, v78);
  ((void (*)(char *, uint64_t))v54[1])(v57, v56);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v75, v81);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
  uint64_t v58 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v78, 0, 1, v58);
}

size_t sub_250FA748C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_250FACC74(0, &qword_26B210C10, (uint64_t (*)(uint64_t))sub_250FACB74, MEMORY[0x263F8E0F8]);
  sub_250FACB74();
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 72);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      sub_250FAACC4(&v11, (uint64_t)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_250FACC6C();
      if (v10 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_250FA760C(void **a1)
{
  sub_250FACB74();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = (void *)sub_25100EEB8(v4);
  }
  uint64_t v5 = v4[2];
  v6[0] = (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v6[1] = v5;
  sub_250FA7720(v6);
  *a1 = v4;
}

uint64_t sub_250FA76B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25100EECC(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_250FA8724(v5);
  *a1 = v2;
  return result;
}

void sub_250FA7720(void *a1)
{
  uint64_t v199 = sub_251037720();
  uint64_t v2 = *(void *)(v199 - 8);
  MEMORY[0x270FA5388](v199);
  v198 = (char *)&v178 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v200 = (char *)&v178 - v5;
  sub_250FACB74();
  uint64_t v202 = v6;
  uint64_t v189 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v185 = (uint64_t)&v178 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v203 = (uint64_t)&v178 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v197 = (char *)&v178 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v196 = (char *)&v178 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v209 = (uint64_t)&v178 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v208 = (uint64_t)&v178 - v17;
  uint64_t v18 = a1[1];
  uint64_t v19 = sub_2510397B0();
  if (v19 >= v18)
  {
    if (v18 < 0) {
      goto LABEL_139;
    }
    if (v18) {
      sub_250FA8DB8(0, v18, 1, a1);
    }
    return;
  }
  if (v18 >= 0) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v18 + 1;
  }
  if (v18 < -1) {
    goto LABEL_147;
  }
  uint64_t v21 = v19;
  if (v18 < 2)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    unint64_t v187 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80));
    if (v18 != 1)
    {
      unint64_t v26 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v25 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v170 = v25;
      if (v26 >= 2)
      {
        uint64_t v171 = *a1;
        uint64_t v188 = v23;
        do
        {
          unint64_t v172 = v26 - 2;
          if (v26 < 2) {
            goto LABEL_134;
          }
          if (!v171) {
            goto LABEL_146;
          }
          uint64_t v173 = *(void *)&v170[16 * v172 + 32];
          uint64_t v174 = *(void *)&v170[16 * v26 + 24];
          uint64_t v175 = v190;
          sub_250FA92A4(v171 + *(void *)(v189 + 72) * v173, v171 + *(void *)(v189 + 72) * *(void *)&v170[16 * v26 + 16], v171 + *(void *)(v189 + 72) * v174, v187);
          if (v175) {
            goto LABEL_115;
          }
          if (v174 < v173) {
            goto LABEL_135;
          }
          uint64_t v190 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v170 = sub_25100EE7C((uint64_t)v170);
          }
          if (v172 >= *((void *)v170 + 2)) {
            goto LABEL_136;
          }
          uint64_t v176 = &v170[16 * v172 + 32];
          *(void *)uint64_t v176 = v173;
          *((void *)v176 + 1) = v174;
          unint64_t v177 = *((void *)v170 + 2);
          if (v26 > v177) {
            goto LABEL_137;
          }
          memmove(&v170[16 * v26 + 16], &v170[16 * v26 + 32], 16 * (v177 - v26));
          *((void *)v170 + 2) = v177 - 1;
          unint64_t v26 = v177 - 1;
          uint64_t v23 = v188;
        }
        while (v177 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v23 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v22 = v20 >> 1;
    uint64_t v23 = sub_251039260();
    *(void *)(v23 + 16) = v22;
    unint64_t v187 = v23 + ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80));
  }
  uint64_t v24 = 0;
  v195 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v25 = (char *)MEMORY[0x263F8EE78];
  uint64_t v188 = v23;
  uint64_t v179 = v21;
  v191 = a1;
  while (1)
  {
    uint64_t v27 = v24;
    uint64_t v28 = v24 + 1;
    uint64_t v186 = v24;
    if (v24 + 1 < v18)
    {
      uint64_t v29 = *a1;
      uint64_t v30 = *(void *)(v189 + 72);
      uint64_t v201 = v28;
      uint64_t v31 = v30;
      uint64_t v207 = v30;
      uint64_t v32 = v29;
      uint64_t v180 = v29;
      uint64_t v33 = v208;
      sub_250FACCD8(v29 + v30 * v28, v208, (uint64_t (*)(void))sub_250FACB74);
      sub_250FACCD8(v32 + v31 * v27, v209, (uint64_t (*)(void))sub_250FACB74);
      uint64_t v34 = *(int *)(v202 + 48);
      uint64_t v35 = v196;
      uint64_t v206 = v18;
      uint64_t v36 = &v196[v34];
      uint64_t v37 = v33;
      uint64_t v38 = v33 + v34;
      uint64_t v39 = sub_251037740();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v205 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
      v205(v35, v37, v39);
      char v41 = *(unsigned char *)(v38 + 8);
      *(void *)uint64_t v36 = *(void *)v38;
      v36[8] = v41;
      sub_251037730();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v40 + 8);
      v42(v35, v39);
      uint64_t v43 = *(int *)(v202 + 48);
      uint64_t v44 = v197;
      uint64_t v45 = &v197[v43];
      uint64_t v46 = v209 + v43;
      uint64_t v192 = v40 + 16;
      ((void (*)(char *))v205)(v197);
      char v47 = *(unsigned char *)(v46 + 8);
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v47;
      uint64_t v48 = v198;
      sub_251037730();
      uint64_t v193 = v40 + 8;
      uint64_t v194 = v39;
      uint64_t v184 = v42;
      v42(v44, v39);
      uint64_t v49 = v200;
      LODWORD(v204) = sub_251037710();
      uint64_t v50 = *v195;
      int64_t v51 = v48;
      uint64_t v52 = v207;
      uint64_t v53 = v199;
      (*v195)(v51, v199);
      uint64_t v27 = v186;
      uint64_t v183 = v50;
      v50(v49, v53);
      sub_250FAB298(v209, (uint64_t (*)(void))sub_250FACB74);
      sub_250FAB298(v208, (uint64_t (*)(void))sub_250FACB74);
      uint64_t v28 = v27 + 2;
      if (v27 + 2 >= v206)
      {
        uint64_t v21 = v179;
        uint64_t v18 = v206;
      }
      else
      {
        uint64_t v178 = v25;
        uint64_t v182 = v52 * v201;
        uint64_t v54 = v180;
        uint64_t v181 = v52 * v28;
        while (1)
        {
          uint64_t v201 = v28;
          uint64_t v55 = v208;
          sub_250FACCD8(v54 + v181, v208, (uint64_t (*)(void))sub_250FACB74);
          sub_250FACCD8(v54 + v182, v209, (uint64_t (*)(void))sub_250FACB74);
          uint64_t v56 = v202;
          uint64_t v57 = *(int *)(v202 + 48);
          uint64_t v58 = v196;
          uint64_t v59 = &v196[v57];
          uint64_t v60 = v55 + v57;
          uint64_t v61 = v55;
          uint64_t v62 = v194;
          unint64_t v63 = (void (*)(char *))v205;
          v205(v196, v61, v194);
          char v64 = *(unsigned char *)(v60 + 8);
          *(void *)uint64_t v59 = *(void *)v60;
          v59[8] = v64;
          sub_251037730();
          uint64_t v65 = v184;
          v184(v58, v62);
          uint64_t v66 = *(int *)(v56 + 48);
          uint64_t v67 = v197;
          int v68 = &v197[v66];
          uint64_t v69 = v209 + v66;
          v63(v197);
          char v70 = *(unsigned char *)(v69 + 8);
          *(void *)int v68 = *(void *)v69;
          v68[8] = v70;
          uint64_t v71 = v198;
          sub_251037730();
          v65(v67, v62);
          uint64_t v72 = v200;
          LODWORD(v68) = sub_251037710();
          uint64_t v73 = v71;
          uint64_t v74 = v199;
          uint64_t v75 = v183;
          v183(v73, v199);
          v75(v72, v74);
          sub_250FAB298(v209, (uint64_t (*)(void))sub_250FACB74);
          sub_250FAB298(v208, (uint64_t (*)(void))sub_250FACB74);
          if ((v204 ^ v68)) {
            break;
          }
          uint64_t v28 = v201 + 1;
          uint64_t v52 = v207;
          v54 += v207;
          if (v206 == v201 + 1)
          {
            uint64_t v18 = v206;
            uint64_t v28 = v206;
            uint64_t v23 = v188;
            uint64_t v25 = v178;
            uint64_t v21 = v179;
            uint64_t v27 = v186;
            goto LABEL_23;
          }
        }
        uint64_t v23 = v188;
        uint64_t v25 = v178;
        uint64_t v21 = v179;
        uint64_t v28 = v201;
        uint64_t v27 = v186;
        uint64_t v18 = v206;
        uint64_t v52 = v207;
      }
LABEL_23:
      a1 = v191;
      if (v204)
      {
        if (v28 < v27) {
          goto LABEL_140;
        }
        if (v27 < v28)
        {
          uint64_t v178 = v25;
          uint64_t v76 = 0;
          uint64_t v77 = v52 * (v28 - 1);
          uint64_t v78 = v28 * v52;
          uint64_t v79 = v27;
          uint64_t v80 = v27 * v52;
          uint64_t v201 = v28;
          do
          {
            if (v79 != v28 + v76 - 1)
            {
              uint64_t v81 = v180;
              if (!v180) {
                goto LABEL_145;
              }
              unint64_t v82 = v180 + v80;
              uint64_t v83 = v180 + v77;
              sub_250FACB0C(v180 + v80, v185, (uint64_t (*)(void))sub_250FACB74);
              if (v80 < v77 || v82 >= v81 + v78)
              {
                swift_arrayInitWithTakeFrontToBack();
                uint64_t v52 = v207;
              }
              else
              {
                uint64_t v52 = v207;
                if (v80 != v77) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_250FACB0C(v185, v83, (uint64_t (*)(void))sub_250FACB74);
              uint64_t v28 = v201;
              uint64_t v27 = v186;
            }
            ++v79;
            --v76;
            v77 -= v52;
            v78 -= v52;
            v80 += v52;
          }
          while (v79 < v28 + v76);
          uint64_t v23 = v188;
          uint64_t v25 = v178;
          uint64_t v21 = v179;
          uint64_t v18 = v206;
        }
      }
    }
    if (v28 < v18)
    {
      if (__OFSUB__(v28, v27)) {
        goto LABEL_138;
      }
      if (v28 - v27 < v21) {
        break;
      }
    }
LABEL_55:
    if (v28 < v27) {
      goto LABEL_133;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v201 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v25 = sub_25100EA68(0, *((void *)v25 + 2) + 1, 1, v25);
    }
    unint64_t v118 = *((void *)v25 + 2);
    unint64_t v117 = *((void *)v25 + 3);
    unint64_t v26 = v118 + 1;
    if (v118 >= v117 >> 1) {
      uint64_t v25 = sub_25100EA68((char *)(v117 > 1), v118 + 1, 1, v25);
    }
    *((void *)v25 + 2) = v26;
    uint64_t v119 = v25 + 32;
    uint64_t v120 = &v25[16 * v118 + 32];
    uint64_t v121 = v201;
    *(void *)uint64_t v120 = v27;
    *((void *)v120 + 1) = v121;
    if (v118)
    {
      while (1)
      {
        unint64_t v122 = v26 - 1;
        if (v26 >= 4)
        {
          int v127 = &v119[16 * v26];
          uint64_t v128 = *((void *)v127 - 8);
          uint64_t v129 = *((void *)v127 - 7);
          BOOL v133 = __OFSUB__(v129, v128);
          uint64_t v130 = v129 - v128;
          if (v133) {
            goto LABEL_122;
          }
          uint64_t v132 = *((void *)v127 - 6);
          uint64_t v131 = *((void *)v127 - 5);
          BOOL v133 = __OFSUB__(v131, v132);
          uint64_t v125 = v131 - v132;
          char v126 = v133;
          if (v133) {
            goto LABEL_123;
          }
          unint64_t v134 = v26 - 2;
          uint64_t v135 = &v119[16 * v26 - 32];
          uint64_t v137 = *(void *)v135;
          uint64_t v136 = *((void *)v135 + 1);
          BOOL v133 = __OFSUB__(v136, v137);
          uint64_t v138 = v136 - v137;
          if (v133) {
            goto LABEL_125;
          }
          BOOL v133 = __OFADD__(v125, v138);
          uint64_t v139 = v125 + v138;
          if (v133) {
            goto LABEL_128;
          }
          if (v139 >= v130)
          {
            unint64_t v157 = &v119[16 * v122];
            uint64_t v159 = *(void *)v157;
            uint64_t v158 = *((void *)v157 + 1);
            BOOL v133 = __OFSUB__(v158, v159);
            uint64_t v160 = v158 - v159;
            if (v133) {
              goto LABEL_132;
            }
            BOOL v150 = v125 < v160;
            goto LABEL_92;
          }
        }
        else
        {
          if (v26 != 3)
          {
            uint64_t v151 = *((void *)v25 + 4);
            uint64_t v152 = *((void *)v25 + 5);
            BOOL v133 = __OFSUB__(v152, v151);
            uint64_t v144 = v152 - v151;
            char v145 = v133;
            goto LABEL_86;
          }
          uint64_t v124 = *((void *)v25 + 4);
          uint64_t v123 = *((void *)v25 + 5);
          BOOL v133 = __OFSUB__(v123, v124);
          uint64_t v125 = v123 - v124;
          char v126 = v133;
        }
        if (v126) {
          goto LABEL_124;
        }
        unint64_t v134 = v26 - 2;
        uint64_t v140 = &v119[16 * v26 - 32];
        uint64_t v142 = *(void *)v140;
        uint64_t v141 = *((void *)v140 + 1);
        BOOL v143 = __OFSUB__(v141, v142);
        uint64_t v144 = v141 - v142;
        char v145 = v143;
        if (v143) {
          goto LABEL_127;
        }
        uint64_t v146 = &v119[16 * v122];
        uint64_t v148 = *(void *)v146;
        uint64_t v147 = *((void *)v146 + 1);
        BOOL v133 = __OFSUB__(v147, v148);
        uint64_t v149 = v147 - v148;
        if (v133) {
          goto LABEL_130;
        }
        if (__OFADD__(v144, v149)) {
          goto LABEL_131;
        }
        if (v144 + v149 >= v125)
        {
          BOOL v150 = v125 < v149;
LABEL_92:
          if (v150) {
            unint64_t v122 = v134;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v145) {
          goto LABEL_126;
        }
        uint64_t v153 = &v119[16 * v122];
        uint64_t v155 = *(void *)v153;
        uint64_t v154 = *((void *)v153 + 1);
        BOOL v133 = __OFSUB__(v154, v155);
        uint64_t v156 = v154 - v155;
        if (v133) {
          goto LABEL_129;
        }
        if (v156 < v144) {
          goto LABEL_14;
        }
LABEL_94:
        unint64_t v161 = v122 - 1;
        if (v122 - 1 >= v26)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*a1) {
          goto LABEL_144;
        }
        uint64_t v162 = v25;
        uint64_t v163 = &v119[16 * v161];
        uint64_t v164 = *(void *)v163;
        uint64_t v165 = v119;
        uint64_t v166 = &v119[16 * v122];
        uint64_t v167 = *((void *)v166 + 1);
        uint64_t v168 = v190;
        sub_250FA92A4(*a1 + *(void *)(v189 + 72) * *(void *)v163, *a1 + *(void *)(v189 + 72) * *(void *)v166, *a1 + *(void *)(v189 + 72) * v167, v187);
        if (v168)
        {
LABEL_115:
          swift_bridgeObjectRelease();
          *(void *)(v188 + 16) = 0;
          swift_bridgeObjectRelease();
          return;
        }
        if (v167 < v164) {
          goto LABEL_119;
        }
        if (v122 > *((void *)v162 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v163 = v164;
        *(void *)&v165[16 * v161 + 8] = v167;
        unint64_t v169 = *((void *)v162 + 2);
        if (v122 >= v169) {
          goto LABEL_121;
        }
        uint64_t v25 = v162;
        uint64_t v190 = 0;
        unint64_t v26 = v169 - 1;
        memmove(v166, v166 + 16, 16 * (v169 - 1 - v122));
        uint64_t v119 = v165;
        *((void *)v162 + 2) = v169 - 1;
        uint64_t v23 = v188;
        if (v169 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v26 = 1;
LABEL_14:
    uint64_t v18 = a1[1];
    uint64_t v24 = v201;
    uint64_t v21 = v179;
    if (v201 >= v18) {
      goto LABEL_103;
    }
  }
  if (__OFADD__(v27, v21)) {
    goto LABEL_141;
  }
  if (v27 + v21 >= v18) {
    uint64_t v84 = (void (*)(void, void))v18;
  }
  else {
    uint64_t v84 = (void (*)(void, void))(v27 + v21);
  }
  if ((uint64_t)v84 >= v27)
  {
    if ((void (*)(void, void))v28 != v84)
    {
      uint64_t v178 = v25;
      uint64_t v85 = *(void *)(v189 + 72);
      uint64_t v86 = v85 * (v28 - 1);
      uint64_t v192 = v85;
      uint64_t v87 = v28 * v85;
      uint64_t v184 = (void (*)(char *, uint64_t))v84;
      do
      {
        uint64_t v89 = 0;
        uint64_t v201 = v28;
        uint64_t v193 = v87;
        uint64_t v194 = v86;
        while (1)
        {
          uint64_t v206 = v27;
          uint64_t v90 = *a1;
          uint64_t v205 = (void (*)(char *, uint64_t, uint64_t))(v87 + v89);
          uint64_t v91 = v87 + v89 + v90;
          uint64_t v92 = v208;
          sub_250FACCD8(v91, v208, (uint64_t (*)(void))sub_250FACB74);
          uint64_t v207 = v89;
          uint64_t v204 = v86 + v89;
          sub_250FACCD8(v86 + v89 + v90, v209, (uint64_t (*)(void))sub_250FACB74);
          uint64_t v93 = v202;
          uint64_t v94 = *(int *)(v202 + 48);
          uint64_t v95 = v196;
          uint64_t v96 = &v196[v94];
          uint64_t v97 = v92 + v94;
          uint64_t v98 = sub_251037740();
          uint64_t v99 = *(void *)(v98 - 8);
          uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
          v100(v95, v92, v98);
          char v101 = *(unsigned char *)(v97 + 8);
          *(void *)uint64_t v96 = *(void *)v97;
          v96[8] = v101;
          uint64_t v102 = v200;
          sub_251037730();
          uint64_t v103 = *(void (**)(char *, uint64_t))(v99 + 8);
          v103(v95, v98);
          uint64_t v104 = *(int *)(v93 + 48);
          uint64_t v105 = v197;
          uint64_t v106 = &v197[v104];
          uint64_t v107 = v209 + v104;
          ((void (*)(char *))v100)(v197);
          char v108 = *(unsigned char *)(v107 + 8);
          *(void *)uint64_t v106 = *(void *)v107;
          v106[8] = v108;
          uint64_t v109 = v198;
          sub_251037730();
          v103(v105, v98);
          LOBYTE(v105) = sub_251037710();
          uint64_t v110 = *v195;
          uint64_t v111 = v109;
          uint64_t v112 = v199;
          (*v195)(v111, v199);
          v110(v102, v112);
          sub_250FAB298(v209, (uint64_t (*)(void))sub_250FACB74);
          sub_250FAB298(v208, (uint64_t (*)(void))sub_250FACB74);
          if ((v105 & 1) == 0) {
            break;
          }
          a1 = v191;
          uint64_t v113 = *v191;
          if (!*v191) {
            goto LABEL_143;
          }
          uint64_t v87 = v193;
          uint64_t v86 = v194;
          uint64_t v114 = v207;
          uint64_t v115 = v113 + v194 + v207;
          sub_250FACB0C(v113 + v193 + v207, v203, (uint64_t (*)(void))sub_250FACB74);
          swift_arrayInitWithTakeFrontToBack();
          sub_250FACB0C(v203, v115, (uint64_t (*)(void))sub_250FACB74);
          uint64_t v89 = v114 - v192;
          uint64_t v27 = v206 + 1;
          uint64_t v88 = v201;
          if (v201 == v206 + 1) {
            goto LABEL_48;
          }
        }
        a1 = v191;
        uint64_t v88 = v201;
        uint64_t v87 = v193;
        uint64_t v86 = v194;
LABEL_48:
        uint64_t v28 = v88 + 1;
        v86 += v192;
        v87 += v192;
        uint64_t v27 = v186;
      }
      while ((void (*)(char *, uint64_t))v28 != v184);
      uint64_t v28 = (uint64_t)v184;
      uint64_t v23 = v188;
      uint64_t v25 = v178;
    }
    goto LABEL_55;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  sub_251039630();
  __break(1u);
}

uint64_t sub_250FA8724(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_2510397B0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = 0;
      uint64_t v81 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v83 = *(double *)(v81 + 8 * i);
        uint64_t v84 = v80;
        do
        {
          uint64_t v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85) {
            break;
          }
          if (!v81) {
            goto LABEL_140;
          }
          *(void *)(v85 + 8) = *(void *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v97 = result;
  uint64_t v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_102:
      uint64_t v96 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          unint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          uint64_t v88 = v11;
          uint64_t v89 = v11 + 32;
          uint64_t v90 = *(void *)&v11[16 * v87 + 32];
          uint64_t v91 = *(void *)&v11[16 * v12 + 24];
          sub_250FA9B54((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(void *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = sub_25100EE7C((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          uint64_t v92 = &v88[16 * v87 + 32];
          *(void *)uint64_t v92 = v90;
          *((void *)v92 + 1) = v91;
          unint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          uint64_t v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v96 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_251039260();
    *(void *)(v7 + 16) = v6;
    uint64_t v3 = v98;
    uint64_t v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v94 = v2;
  uint64_t v95 = *v2 - 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v99 = *v2;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      double v14 = *(double *)(v10 + 8 * v9);
      double v15 = *(double *)(v10 + 8 * v13);
      uint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        double v16 = v14;
        while (1)
        {
          double v17 = v16;
          double v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          uint64_t v18 = (uint64_t *)(v95 + 8 * v9);
          uint64_t v19 = v9;
          uint64_t v20 = v13;
          uint64_t v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              uint64_t v22 = *v21;
              uint64_t *v21 = *v18;
              *uint64_t v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    uint64_t v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      uint64_t v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      uint64_t v24 = (double *)(v95 + 8 * v9);
      do
      {
        double v25 = *(double *)(v10 + 8 * v9);
        uint64_t v26 = v13;
        uint64_t v27 = v24;
        do
        {
          double v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          double *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      uint64_t v9 = v23;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_25100EA68(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v30 = *((void *)v11 + 2);
    unint64_t v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v99;
    if (v30 >= v29 >> 1)
    {
      uint64_t v79 = sub_25100EA68((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v99;
      uint64_t v11 = v79;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v31 = v11 + 32;
    uint64_t v32 = &v11[16 * v30 + 32];
    *(void *)uint64_t v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        unint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          BOOL v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          uint64_t v43 = *((void *)v38 - 6);
          uint64_t v42 = *((void *)v38 - 5);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v36 = v42 - v43;
          char v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          unint64_t v45 = v12 - 2;
          uint64_t v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          BOOL v44 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          BOOL v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            int v68 = &v31[16 * v33];
            uint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            BOOL v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            BOOL v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            BOOL v44 = __OFSUB__(v63, v62);
            uint64_t v55 = v63 - v62;
            char v56 = v44;
            goto LABEL_77;
          }
          uint64_t v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          BOOL v44 = __OFSUB__(v34, v35);
          uint64_t v36 = v34 - v35;
          char v37 = v44;
        }
        if (v37) {
          goto LABEL_121;
        }
        unint64_t v45 = v12 - 2;
        int64_t v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        BOOL v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        char v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v57 = &v31[16 * v33];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          BOOL v61 = v36 < v60;
LABEL_83:
          if (v61) {
            unint64_t v33 = v45;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v56) {
          goto LABEL_123;
        }
        char v64 = &v31[16 * v33];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        uint64_t v73 = &v31[16 * v72];
        uint64_t v74 = *(void *)v73;
        uint64_t v75 = v31;
        uint64_t v76 = &v31[16 * v33];
        uint64_t v77 = *((void *)v76 + 1);
        sub_250FA9B54((double *)(v10 + 8 * *(void *)v73), (double *)(v10 + 8 * *(void *)v76), v10 + 8 * v77, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        unint64_t v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unint64_t v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        uint64_t v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        uint64_t v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v98;
    if (v9 >= v98)
    {
      uint64_t v8 = v96;
      uint64_t v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = sub_251039630();
  __break(1u);
  return result;
}

void sub_250FA8DB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v55 = a1;
  uint64_t v62 = sub_251037720();
  uint64_t v7 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  BOOL v61 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v60 = (char *)&v53 - v10;
  sub_250FACB74();
  uint64_t v67 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v68 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v59 = (char *)&v53 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v58 = (char *)&v53 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v74 = (uint64_t)&v53 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v73 = (uint64_t)&v53 - v21;
  uint64_t v66 = a3;
  uint64_t v54 = a2;
  if (a3 != a2)
  {
    uint64_t v22 = *(void *)(v20 + 72);
    char v56 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v57 = a4;
    uint64_t v23 = v22 * (v66 - 1);
    uint64_t v63 = v22;
    uint64_t v24 = v22 * v66;
LABEL_5:
    uint64_t v25 = 0;
    uint64_t v71 = v55;
    uint64_t v64 = v24;
    uint64_t v65 = v23;
    while (1)
    {
      uint64_t v72 = v25;
      uint64_t v26 = *a4;
      uint64_t v70 = v24 + v25;
      uint64_t v27 = v73;
      sub_250FACCD8(v24 + v25 + v26, v73, (uint64_t (*)(void))sub_250FACB74);
      uint64_t v69 = v23 + v25;
      sub_250FACCD8(v23 + v25 + v26, v74, (uint64_t (*)(void))sub_250FACB74);
      uint64_t v28 = v67;
      uint64_t v29 = *(int *)(v67 + 48);
      unint64_t v30 = v58;
      uint64_t v31 = &v58[v29];
      uint64_t v32 = v27 + v29;
      uint64_t v33 = sub_251037740();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
      v35(v30, v27, v33);
      char v36 = *(unsigned char *)(v32 + 8);
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v36;
      char v37 = v60;
      sub_251037730();
      uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      v38(v30, v33);
      uint64_t v39 = *(int *)(v28 + 48);
      uint64_t v40 = v59;
      uint64_t v41 = &v59[v39];
      uint64_t v42 = (uint64_t *)(v74 + v39);
      ((void (*)(char *))v35)(v59);
      uint64_t v43 = *v42;
      char v44 = *((unsigned char *)v42 + 8);
      uint64_t v45 = v72;
      *(void *)uint64_t v41 = v43;
      v41[8] = v44;
      uint64_t v46 = v61;
      sub_251037730();
      v38(v40, v33);
      LOBYTE(v40) = sub_251037710();
      uint64_t v47 = *v56;
      uint64_t v48 = v46;
      uint64_t v49 = v62;
      (*v56)(v48, v62);
      uint64_t v50 = v49;
      uint64_t v23 = v65;
      v47(v37, v50);
      uint64_t v24 = v64;
      a4 = v57;
      sub_250FAB298(v74, (uint64_t (*)(void))sub_250FACB74);
      sub_250FAB298(v73, (uint64_t (*)(void))sub_250FACB74);
      if ((v40 & 1) == 0)
      {
LABEL_4:
        v23 += v63;
        v24 += v63;
        if (++v66 == v54) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v51 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v52 = v51 + v23 + v45;
      sub_250FACB0C(v51 + v24 + v45, v68, (uint64_t (*)(void))sub_250FACB74);
      swift_arrayInitWithTakeFrontToBack();
      sub_250FACB0C(v68, v52, (uint64_t (*)(void))sub_250FACB74);
      uint64_t v25 = v45 - v63;
      if (v66 == ++v71) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_250FA92A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v93 = sub_251037720();
  uint64_t v8 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v92 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v91 = (char *)&v82 - v11;
  sub_250FACB74();
  uint64_t v95 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v90 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v89 = (char *)&v82 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v98 = (uint64_t)&v82 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v97 = (uint64_t)&v82 - v19;
  uint64_t v21 = *(void *)(v20 + 72);
  if (!v21)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v21 == -1) {
    goto LABEL_61;
  }
  int64_t v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v21 == -1) {
    goto LABEL_62;
  }
  uint64_t v23 = (uint64_t)(a2 - a1) / v21;
  unint64_t v101 = a1;
  unint64_t v100 = a4;
  uint64_t v24 = v22 / v21;
  if (v23 >= v22 / v21)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      uint64_t v26 = v24 * v21;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v54 = a4 + v26;
      unint64_t v99 = a4 + v26;
      unint64_t v101 = a2;
      if (v26 >= 1 && a1 < a2)
      {
        uint64_t v56 = -v21;
        uint64_t v84 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v85 = (void (**)(void, void))a1;
        unint64_t v86 = a4;
        uint64_t v83 = v56;
        do
        {
          unint64_t v96 = a2;
          unint64_t v94 = a3;
          unint64_t v88 = a3 + v56;
          uint64_t v57 = v97;
          sub_250FACCD8(v54 + v56, v97, (uint64_t (*)(void))sub_250FACB74);
          uint64_t v87 = a2 + v56;
          sub_250FACCD8(a2 + v56, v98, (uint64_t (*)(void))sub_250FACB74);
          uint64_t v58 = v95;
          uint64_t v59 = *(int *)(v95 + 48);
          uint64_t v60 = v89;
          BOOL v61 = &v89[v59];
          uint64_t v62 = v57 + v59;
          uint64_t v63 = sub_251037740();
          uint64_t v64 = *(void *)(v63 - 8);
          uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
          v65(v60, v57, v63);
          char v66 = *(unsigned char *)(v62 + 8);
          *(void *)BOOL v61 = *(void *)v62;
          v61[8] = v66;
          uint64_t v67 = v91;
          sub_251037730();
          uint64_t v68 = *(void (**)(char *, uint64_t))(v64 + 8);
          v68(v60, v63);
          uint64_t v69 = *(int *)(v58 + 48);
          uint64_t v70 = v90;
          uint64_t v71 = &v90[v69];
          uint64_t v72 = v98 + v69;
          ((void (*)(char *))v65)(v90);
          uint64_t v74 = v92;
          uint64_t v73 = v93;
          char v75 = *(unsigned char *)(v72 + 8);
          *(void *)uint64_t v71 = *(void *)v72;
          v71[8] = v75;
          sub_251037730();
          v68(v70, v63);
          LOBYTE(v70) = sub_251037710();
          uint64_t v76 = *v84;
          (*v84)(v74, v73);
          v76(v67, v73);
          sub_250FAB298(v98, (uint64_t (*)(void))sub_250FACB74);
          sub_250FAB298(v97, (uint64_t (*)(void))sub_250FACB74);
          if (v70)
          {
            uint64_t v56 = v83;
            a3 = v88;
            if (v94 < v96 || v88 >= v96)
            {
              unint64_t v79 = v87;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v78 = v85;
              unint64_t v77 = v86;
            }
            else
            {
              unint64_t v78 = v85;
              unint64_t v77 = v86;
              unint64_t v79 = v87;
              if (v94 != v96) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v101 += v56;
          }
          else
          {
            unint64_t v79 = v96;
            unint64_t v80 = v99;
            v99 += v83;
            uint64_t v56 = v83;
            a3 = v88;
            if (v94 < v80 || v88 >= v80)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v78 = v85;
              unint64_t v77 = v86;
            }
            else
            {
              unint64_t v78 = v85;
              unint64_t v77 = v86;
              if (v94 != v80) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
          }
          unint64_t v54 = v99;
          if (v99 <= v77) {
            break;
          }
          a2 = v79;
        }
        while (v79 > (unint64_t)v78);
      }
      goto LABEL_59;
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = v23 * v21;
    if (a4 < a1 || a1 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v88 = a4 + v25;
    unint64_t v99 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      uint64_t v85 = (void (**)(void, void))(v8 + 8);
      unint64_t v94 = a3;
      uint64_t v87 = v21;
      do
      {
        unint64_t v96 = a2;
        uint64_t v28 = v97;
        sub_250FACCD8(a2, v97, (uint64_t (*)(void))sub_250FACB74);
        sub_250FACCD8(a4, v98, (uint64_t (*)(void))sub_250FACB74);
        uint64_t v29 = v95;
        uint64_t v30 = *(int *)(v95 + 48);
        uint64_t v31 = v89;
        uint64_t v32 = &v89[v30];
        uint64_t v33 = v28 + v30;
        uint64_t v34 = sub_251037740();
        uint64_t v35 = *(void *)(v34 - 8);
        char v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
        v36(v31, v28, v34);
        char v37 = *(unsigned char *)(v33 + 8);
        *(void *)uint64_t v32 = *(void *)v33;
        v32[8] = v37;
        uint64_t v38 = v91;
        sub_251037730();
        uint64_t v39 = *(void (**)(char *, uint64_t))(v35 + 8);
        v39(v31, v34);
        uint64_t v40 = *(int *)(v29 + 48);
        uint64_t v41 = v90;
        uint64_t v42 = &v90[v40];
        uint64_t v43 = v98 + v40;
        ((void (*)(char *))v36)(v90);
        char v44 = *(unsigned char *)(v43 + 8);
        *(void *)uint64_t v42 = *(void *)v43;
        v42[8] = v44;
        uint64_t v45 = v92;
        sub_251037730();
        v39(v41, v34);
        LOBYTE(v41) = sub_251037710();
        uint64_t v46 = (void (*)(char *, uint64_t))*v85;
        uint64_t v47 = v93;
        (*v85)(v45, v93);
        v46(v38, v47);
        sub_250FAB298(v98, (uint64_t (*)(void))sub_250FACB74);
        sub_250FAB298(v97, (uint64_t (*)(void))sub_250FACB74);
        unint64_t v48 = v101;
        if (v41)
        {
          uint64_t v49 = v87;
          unint64_t v50 = v96 + v87;
          if (v101 < v96 || v101 >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v51 = v94;
          }
          else
          {
            unint64_t v51 = v94;
            if (v101 == v96) {
              unint64_t v48 = v96;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v52 = v96;
          uint64_t v49 = v87;
          unint64_t v53 = v100 + v87;
          if (v101 < v100 || v101 >= v53)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v51 = v94;
          }
          else
          {
            unint64_t v51 = v94;
            if (v101 != v100) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v100 = v53;
          unint64_t v50 = v52;
        }
        unint64_t v101 = v48 + v49;
        a4 = v100;
        if (v100 >= v88) {
          break;
        }
        a2 = v50;
      }
      while (v50 < v51);
    }
LABEL_59:
    sub_25100EC64(&v101, &v100, (uint64_t *)&v99);
    return 1;
  }
LABEL_63:
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FA9B54(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[v13];
      int64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (double *)(a3 - 8);
        while (1)
        {
          uint64_t v18 = v17 + 1;
          uint64_t v19 = v6 - 1;
          double v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            int64_t v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *uint64_t v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *uint64_t v17 = v20;
            }
            uint64_t v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[v10];
    int64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            double *v7 = *v4;
          }
          uint64_t v23 = ++v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            double *v7 = *v6;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    sub_25100EC7C((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_2510396A0();
  __break(1u);
  return result;
}

uint64_t sub_250FA9DC4(long long *a1, uint64_t a2)
{
  uint64_t v55 = a1;
  uint64_t v3 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v48 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_2510378C0();
  uint64_t v6 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  unint64_t v54 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FACC74(0, &qword_269B14050, (uint64_t (*)(uint64_t))sub_250FAC96C, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v44 = a2 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v49 = v6 + 16;
  uint64_t v50 = v6;
  unint64_t v52 = (void (**)(char *, uint64_t))(v6 + 8);
  unint64_t v53 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  int64_t v43 = v45 - 1;
  uint64_t v51 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  int64_t v58 = 0;
  uint64_t v47 = v10;
  uint64_t v46 = v13;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      uint64_t v21 = (v17 - 1) & v17;
      unint64_t v22 = v20 | (v58 << 6);
      goto LABEL_8;
    }
    int64_t v27 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v27 < v45)
    {
      unint64_t v28 = *(void *)(v44 + 8 * v27);
      if (v28) {
        goto LABEL_12;
      }
      int64_t v29 = v58 + 2;
      ++v58;
      if (v27 + 1 < v45)
      {
        unint64_t v28 = *(void *)(v44 + 8 * v29);
        if (v28)
        {
          ++v27;
          goto LABEL_12;
        }
        int64_t v30 = v27 + 2;
        int64_t v58 = v27 + 1;
        if (v27 + 2 < v45) {
          break;
        }
      }
    }
LABEL_24:
    sub_250FAC96C();
    uint64_t v26 = v31;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v10, 1, 1, v31);
    uint64_t v21 = 0;
LABEL_25:
    sub_250FACA10((uint64_t)v10, (uint64_t)v13);
    sub_250FAC96C();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v13, 1, v26) == 1)
    {
      swift_release();
      return sub_251039860();
    }
    unint64_t v59 = v21;
    uint64_t v32 = *(int *)(v26 + 48);
    uint64_t v33 = v54;
    uint64_t v34 = v60;
    (*v53)(v54, v13, v60);
    uint64_t v35 = *(void *)&v13[v32];
    uint64_t v36 = *((void *)v55 + 8);
    long long v37 = v55[1];
    long long v61 = *v55;
    long long v62 = v37;
    long long v38 = v55[3];
    long long v63 = v55[2];
    long long v64 = v38;
    uint64_t v65 = v36;
    sub_250FACAC4(&qword_26B210AC0, MEMORY[0x263F42E30]);
    sub_251039080();
    (*v52)(v33, v34);
    uint64_t v39 = *(void *)(v35 + 16);
    sub_251039860();
    if (v39)
    {
      uint64_t v57 = v19;
      uint64_t v40 = *(unsigned __int8 *)(v48 + 80);
      uint64_t v56 = v35;
      uint64_t v41 = v35 + ((v40 + 32) & ~v40);
      uint64_t v42 = *(void *)(v48 + 72);
      do
      {
        sub_250FACCD8(v41, (uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
        sub_251037740();
        sub_250FACAC4(&qword_26B210A88, MEMORY[0x263F42CD0]);
        sub_251039080();
        sub_251037400();
        sub_250FACAC4((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
        sub_251039080();
        sub_251039080();
        sub_250F26E08();
        sub_251039080();
        sub_251039080();
        sub_251039080();
        if (v5[*(int *)(v3 + 32) + 8])
        {
          sub_251039860();
        }
        else
        {
          sub_251039860();
          sub_251039880();
        }
        sub_251039080();
        swift_bridgeObjectRetain();
        sub_251039200();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_251039200();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_251039200();
        swift_bridgeObjectRelease();
        sub_250FAB298((uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
        v41 += v42;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
      uint64_t v10 = v47;
      uint64_t v13 = v46;
      uint64_t v19 = v57;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t result = sub_251039890();
    v19 ^= result;
    unint64_t v17 = v59;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v30);
  if (v28)
  {
    v27 += 2;
LABEL_12:
    uint64_t v21 = (v28 - 1) & v28;
    unint64_t v22 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v58 = v27;
LABEL_8:
    uint64_t v23 = v51;
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v10, *(void *)(v51 + 48) + *(void *)(v50 + 72) * v22, v60);
    uint64_t v24 = *(void *)(*(void *)(v23 + 56) + 8 * v22);
    sub_250FAC96C();
    uint64_t v26 = v25;
    *(void *)&v10[*(int *)(v25 + 48)] = v24;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v10, 0, 1, v25);
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v27 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v27 >= v45)
    {
      int64_t v58 = v43;
      goto LABEL_24;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v27);
    ++v30;
    if (v28) {
      goto LABEL_12;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_250FAA5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t result = sub_251039860();
  if (v7)
  {
    uint64_t v9 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v10 = *(void *)(v4 + 72);
    do
    {
      sub_250FACCD8(v9, (uint64_t)v6, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_251037740();
      sub_250FACAC4(&qword_26B210A88, MEMORY[0x263F42CD0]);
      sub_251039080();
      sub_251037400();
      sub_250FACAC4((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
      sub_251039080();
      sub_251039080();
      sub_250F26E08();
      sub_251039080();
      sub_251039080();
      sub_251039080();
      if (v6[*(int *)(v3 + 32) + 8])
      {
        sub_251039860();
      }
      else
      {
        sub_251039860();
        sub_251039880();
      }
      sub_2510378C0();
      sub_250FACAC4(&qword_26B210AC0, MEMORY[0x263F42E30]);
      sub_251039080();
      swift_bridgeObjectRetain();
      sub_251039200();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_251039200();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_251039200();
      swift_bridgeObjectRelease();
      uint64_t result = sub_250FAB298((uint64_t)v6, type metadata accessor for IndividualOvernightMetricChartPoint);
      v9 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_250FAA928(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_251039860();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8;
      uint64_t result = sub_251039880();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_250FAA980(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t result = sub_251039860();
  if (v8)
  {
    uint64_t v10 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      sub_250FACCD8(v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      sub_251037400();
      sub_250FACAC4((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
      sub_251039080();
      uint64_t v12 = &v7[*(int *)(v4 + 20)];
      sub_251039080();
      sub_250F26E08();
      sub_251039080();
      uint64_t v13 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      uint64_t v14 = *(void *)&v12[v13[5]];
      swift_bridgeObjectRetain();
      sub_250FAA5C0((uint64_t)a1, v14);
      swift_bridgeObjectRelease();
      sub_250FAA928((uint64_t)a1, *(void *)&v12[v13[6]]);
      uint64_t v15 = *(void *)&v12[v13[7]];
      swift_bridgeObjectRetain();
      sub_250FA9DC4(a1, v15);
      swift_bridgeObjectRelease();
      if (v7[*(int *)(v4 + 24) + 16] == 1)
      {
        sub_251039870();
      }
      else
      {
        sub_251039870();
        sub_251039880();
        sub_251039880();
      }
      sub_251039870();
      sub_251039870();
      sub_251039870();
      swift_bridgeObjectRetain();
      sub_251039200();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_251039200();
      swift_bridgeObjectRelease();
      uint64_t result = sub_250FAB298((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_250FAAC78()
{
  return sub_251039880();
}

void sub_250FAACC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_250FACB74();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = *(void *)(a4 + 64);
  uint64_t v37 = a4 + 64;
  uint64_t v15 = -1 << *(unsigned char *)(a4 + 32);
  if (-v15 < 64) {
    uint64_t v16 = ~(-1 << -(char)v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = a4;
    a1[1] = v31;
    a1[2] = ~v15;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v35 = a1;
  int64_t v18 = 0;
  uint64_t v19 = 0;
  int64_t v36 = (unint64_t)(63 - v15) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v20 = a3;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v22 = v21 | (v18 << 6);
  while (1)
  {
    ++v19;
    uint64_t v26 = *(void *)(a4 + 48);
    uint64_t v27 = sub_251037740();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v10, v26 + *(void *)(*(void *)(v27 - 8) + 72) * v22, v27);
    uint64_t v28 = *(void *)(a4 + 56) + 16 * v22;
    uint64_t v29 = *(void *)v28;
    LOBYTE(v28) = *(unsigned char *)(v28 + 8);
    int64_t v30 = &v10[*(int *)(v39 + 48)];
    *(void *)int64_t v30 = v29;
    v30[8] = v28;
    sub_250FACB0C((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))sub_250FACB74);
    sub_250FACB0C((uint64_t)v13, a2, (uint64_t (*)(void))sub_250FACB74);
    if (v19 == v20) {
      goto LABEL_37;
    }
    a2 += *(void *)(v38 + 72);
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v23 >= v36) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v37 + 8 * v23);
    if (!v24) {
      break;
    }
LABEL_18:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v18 = v23;
  }
  v18 += 2;
  if (v23 + 1 >= v36)
  {
    unint64_t v17 = 0;
    int64_t v18 = v23;
    goto LABEL_37;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v18);
  if (v24) {
    goto LABEL_14;
  }
  int64_t v25 = v23 + 2;
  if (v23 + 2 >= v36) {
    goto LABEL_33;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v18 = v23 + 3;
  if (v23 + 3 >= v36)
  {
    unint64_t v17 = 0;
    int64_t v18 = v23 + 2;
    goto LABEL_37;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v18);
  if (v24)
  {
LABEL_14:
    int64_t v23 = v18;
    goto LABEL_18;
  }
  int64_t v25 = v23 + 4;
  if (v23 + 4 >= v36)
  {
LABEL_33:
    unint64_t v17 = 0;
LABEL_37:
    uint64_t v15 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v25);
  if (v24)
  {
LABEL_17:
    int64_t v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v36)
    {
      unint64_t v17 = 0;
      int64_t v18 = v33;
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v37 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
}

uint64_t _s15HealthBalanceUI26OvernightMetricsChartPointV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((sub_2510373D0() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  if ((sub_250F7C960(a1 + v4[5], a2 + v4[5]) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[6];
  uint64_t v6 = (double *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 16);
  uint64_t v8 = a2 + v5;
  if (v7)
  {
    if (!*(unsigned char *)(v8 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(v8 + 16)) {
      return 0;
    }
    if (*v6 != *(double *)v8 || v6[1] != *(double *)(v8 + 8)) {
      return 0;
    }
  }
  if (*(unsigned __int8 *)(a1 + v4[7]) != *(unsigned __int8 *)(a2 + v4[7])
    || *(unsigned __int8 *)(a1 + v4[8]) != *(unsigned __int8 *)(a2 + v4[8])
    || *(unsigned __int8 *)(a1 + v4[9]) != *(unsigned __int8 *)(a2 + v4[9]))
  {
    return 0;
  }
  uint64_t v11 = v4[10];
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (void *)(a2 + v11);
  BOOL v15 = v12 == *v14 && v13 == v14[1];
  if (v15 || (char v16 = sub_2510397F0(), result = 0, (v16 & 1) != 0))
  {
    uint64_t v17 = v4[11];
    uint64_t v18 = *(void *)(a1 + v17);
    uint64_t v19 = *(void *)(a1 + v17 + 8);
    uint64_t v20 = (void *)(a2 + v17);
    if (v18 == *v20 && v19 == v20[1])
    {
      return 1;
    }
    else
    {
      return sub_2510397F0();
    }
  }
  return result;
}

unint64_t sub_250FAB180()
{
  unint64_t result = qword_269B14000;
  if (!qword_269B14000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14000);
  }
  return result;
}

void sub_250FAB1D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250FAB180();
    unint64_t v7 = a3(a1, &type metadata for OvernightMetricsChartPoint.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250FAB238(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250F2F370();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FAB298(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FAB2F8()
{
  return sub_250FACAC4(&qword_269B14030, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
}

uint64_t sub_250FAB340()
{
  return sub_250FACAC4((unint64_t *)&qword_269B12CE8, MEMORY[0x263F07490]);
}

char *initializeBufferWithCopyOfBuffer for OvernightMetricsChartPoint(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    v8(&a1[v9], &a2[v9], v7);
    sub_250F26E08();
    v8(&v10[*(int *)(v12 + 36)], &v11[*(int *)(v12 + 36)], v7);
    uint64_t v13 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v10[v13[5]] = *(void *)&v11[v13[5]];
    *(void *)&v10[v13[6]] = *(void *)&v11[v13[6]];
    *(void *)&v10[v13[7]] = *(void *)&v11[v13[7]];
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    char v16 = &a1[v14];
    uint64_t v17 = &a2[v14];
    *(_OWORD *)char v16 = *(_OWORD *)v17;
    unsigned char v16[16] = v17[16];
    a1[v15] = a2[v15];
    uint64_t v18 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    a1[v18] = a2[v18];
    uint64_t v19 = a3[10];
    uint64_t v20 = a3[11];
    unint64_t v21 = &a1[v19];
    unint64_t v22 = &a2[v19];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)unint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    unint64_t v24 = &a1[v20];
    int64_t v25 = &a2[v20];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)unint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037400();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  v5(v6, v4);
  sub_250F26E08();
  v5(v6 + *(int *)(v7 + 36), v4);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250F26E08();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)(v9 + v12[5]) = *(void *)(v10 + v12[5]);
  *(void *)(v9 + v12[6]) = *(void *)(v10 + v12[6]);
  *(void *)(v9 + v12[7]) = *(void *)(v10 + v12[7]);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v17 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v18);
  unint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (void *)(a1 + v19);
  unint64_t v24 = (void *)(a2 + v19);
  uint64_t v25 = v24[1];
  void *v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250F26E08();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)(v9 + v12[5]) = *(void *)(v10 + v12[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v9 + v12[6]) = *(void *)(v10 + v12[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v9 + v12[7]) = *(void *)(v10 + v12[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (long long *)(a2 + v13);
  long long v16 = *v15;
  *(unsigned char *)(v14 + 16) = *((unsigned char *)v15 + 16);
  *(_OWORD *)uint64_t v14 = v16;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[11];
  unint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  void *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250F26E08();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)(v9 + v12[5]) = *(void *)(v10 + v12[5]);
  *(void *)(v9 + v12[6]) = *(void *)(v10 + v12[6]);
  *(void *)(v9 + v12[7]) = *(void *)(v10 + v12[7]);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v17 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250F26E08();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)(v9 + v12[5]) = *(void *)(v10 + v12[5]);
  swift_bridgeObjectRelease();
  *(void *)(v9 + v12[6]) = *(void *)(v10 + v12[6]);
  swift_bridgeObjectRelease();
  *(void *)(v9 + v12[7]) = *(void *)(v10 + v12[7]);
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v17 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  void *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[11];
  unint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *unint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FABC78);
}

uint64_t sub_250FABC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FABDA4);
}

uint64_t sub_250FABDA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_251037400();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for IndividualOvernightMetricChartPointCollection();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_250FABEB8()
{
  uint64_t result = sub_251037400();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for IndividualOvernightMetricChartPointCollection();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartPoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for OvernightMetricsChartPoint.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250FAC100);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartPoint.CodingKeys()
{
  return &type metadata for OvernightMetricsChartPoint.CodingKeys;
}

unint64_t sub_250FAC13C()
{
  unint64_t result = qword_269B14038;
  if (!qword_269B14038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14038);
  }
  return result;
}

unint64_t sub_250FAC194()
{
  unint64_t result = qword_269B14040;
  if (!qword_269B14040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14040);
  }
  return result;
}

unint64_t sub_250FAC1EC()
{
  unint64_t result = qword_269B14048;
  if (!qword_269B14048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14048);
  }
  return result;
}

uint64_t sub_250FAC240(uint64_t a1)
{
  uint64_t v2 = sub_2510378C0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v48 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v36 - v10;
  uint64_t v11 = (void *)MEMORY[0x263F8EE80];
  uint64_t v50 = (void *)MEMORY[0x263F8EE80];
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return (uint64_t)v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = a1 + v14;
  uint64_t v16 = *(void *)(v9 + 72);
  uint64_t v46 = v14;
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v41 = v16 + v14;
  uint64_t v39 = v3 + 32;
  uint64_t v40 = v13 | 7;
  uint64_t v38 = (void (**)(char *, uint64_t))(v3 + 8);
  long long v37 = xmmword_25103AD40;
  uint64_t v44 = v5;
  uint64_t v45 = v3;
  uint64_t v42 = v2;
  uint64_t v43 = v6;
  while (1)
  {
    uint64_t v17 = v49;
    sub_250FACCD8(v15, v49, type metadata accessor for IndividualOvernightMetricChartPoint);
    (*v47)(v5, v17 + *(int *)(v6 + 36), v2);
    unint64_t v19 = sub_250FCB7F8((uint64_t)v5);
    uint64_t v20 = v11[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    char v23 = v18;
    if (v11[3] < v22)
    {
      sub_250FCC620(v22, 1);
      uint64_t v11 = v50;
      unint64_t v24 = sub_250FCB7F8((uint64_t)v5);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_19;
      }
      unint64_t v19 = v24;
    }
    if (v23)
    {
      (*v38)(v5, v2);
      uint64_t v11 = v50;
      uint64_t v26 = v50[7];
      sub_250FACB0C(v49, v48, type metadata accessor for IndividualOvernightMetricChartPoint);
      unint64_t v27 = *(void *)(v26 + 8 * v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v26 + 8 * v19) = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v27 = sub_250FA17E4(0, *(void *)(v27 + 16) + 1, 1, v27);
        *(void *)(v26 + 8 * v19) = v27;
      }
      unint64_t v30 = *(void *)(v27 + 16);
      unint64_t v29 = *(void *)(v27 + 24);
      if (v30 >= v29 >> 1)
      {
        unint64_t v27 = sub_250FA17E4(v29 > 1, v30 + 1, 1, v27);
        *(void *)(v26 + 8 * v19) = v27;
      }
      uint64_t v2 = v42;
      *(void *)(v27 + 16) = v30 + 1;
      sub_250FACB0C(v48, v27 + v46 + v30 * v16, type metadata accessor for IndividualOvernightMetricChartPoint);
      uint64_t v6 = v43;
      uint64_t v5 = v44;
    }
    else
    {
      sub_250FACC74(0, &qword_26B210C30, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8E0F8]);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = v37;
      sub_250FACB0C(v49, v31 + v46, type metadata accessor for IndividualOvernightMetricChartPoint);
      v11[(v19 >> 6) + 8] |= 1 << v19;
      (*(void (**)(unint64_t, char *, uint64_t))(v45 + 32))(v11[6] + *(void *)(v45 + 72) * v19, v5, v2);
      *(void *)(v11[7] + 8 * v19) = v31;
      uint64_t v32 = v11[2];
      BOOL v33 = __OFADD__(v32, 1);
      uint64_t v34 = v32 + 1;
      if (v33) {
        goto LABEL_18;
      }
      v11[2] = v34;
    }
    v15 += v16;
    if (!--v12) {
      return (uint64_t)v11;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = sub_251039810();
  __break(1u);
  return result;
}

uint64_t sub_250FAC690(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000002510408A0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002510408C0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002510408E0 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000251040900 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000251040920 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000251040940 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000251040960)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

void sub_250FAC96C()
{
  if (!qword_269B14058)
  {
    sub_2510378C0();
    sub_250FACC74(255, &qword_26B210BD8, type metadata accessor for IndividualOvernightMetricChartPoint, MEMORY[0x263F8D488]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B14058);
    }
  }
}

uint64_t sub_250FACA10(uint64_t a1, uint64_t a2)
{
  sub_250FACC74(0, &qword_269B14050, (uint64_t (*)(uint64_t))sub_250FAC96C, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250FACAA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250FA6CAC(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_250FACAC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FACB0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_250FACB74()
{
  if (!qword_26B210A80)
  {
    sub_251037740();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B210A80);
    }
  }
}

uint64_t sub_250FACBE0(uint64_t a1)
{
  sub_250FACC74(0, &qword_26B210A78, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250FACC6C()
{
  return swift_release();
}

void sub_250FACC74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250FACCD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t BalanceAccessibilityIdentifier.namespaced.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_250FF5DF0(v0);
  sub_250FACDD0();
  sub_250F8EEB8();
  uint64_t v1 = sub_2510390A0();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_250FACDD0()
{
  if (!qword_269B12FB0)
  {
    unint64_t v0 = sub_251039270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B12FB0);
    }
  }
}

uint64_t BalanceAccessibilityIdentifier.init(trailingComponents:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for BalanceAccessibilityIdentifier()
{
  return &type metadata for BalanceAccessibilityIdentifier;
}

__n128 WarmupProgressCounter.init(progress:configuration:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v12 = *a2;
  unint64_t v5 = a2[1].n128_u64[0];
  unint64_t v6 = a2[1].n128_u64[1];
  uint64_t v7 = type metadata accessor for WarmupProgressCounter();
  unint64_t v8 = (void *)(a3 + *(int *)(v7 + 24));
  v13[0] = swift_getKeyPath();
  sub_250F9A4E0((uint64_t)v13);
  sub_250F76708((uint64_t)v13, (uint64_t)__src);
  memcpy(v8, __src, 0x119uLL);
  uint64_t v9 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a3, a1, v9);
  uint64_t v10 = (__n128 *)(a3 + *(int *)(v7 + 20));
  __n128 result = v12;
  *uint64_t v10 = v12;
  v10[1].n128_u64[0] = v5;
  v10[1].n128_u64[1] = v6;
  return result;
}

uint64_t type metadata accessor for WarmupProgressCounter()
{
  uint64_t result = qword_269B14110;
  if (!qword_269B14110) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double WarmupProgressCounter.Configuration.fiveDayPillWidth.getter()
{
  return *(double *)v0;
}

void WarmupProgressCounter.Configuration.fiveDayPillWidth.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.fiveDayPillWidth.modify())()
{
  return nullsub_1;
}

double WarmupProgressCounter.Configuration.sevenDayPillWidth.getter()
{
  return *(double *)(v0 + 8);
}

void WarmupProgressCounter.Configuration.sevenDayPillWidth.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.sevenDayPillWidth.modify())()
{
  return nullsub_1;
}

double WarmupProgressCounter.Configuration.strokeLineWidth.getter()
{
  return *(double *)(v0 + 16);
}

void WarmupProgressCounter.Configuration.strokeLineWidth.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.strokeLineWidth.modify())()
{
  return nullsub_1;
}

double WarmupProgressCounter.Configuration.horizontalInset.getter()
{
  return *(double *)(v0 + 24);
}

void WarmupProgressCounter.Configuration.horizontalInset.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.horizontalInset.modify())()
{
  return nullsub_1;
}

uint64_t WarmupProgressCounter.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for WarmupProgressCounter();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  sub_250FAE028();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)unint64_t v8 = sub_251038490();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  sub_250FAE834();
  uint64_t v10 = *(int *)(v9 + 44);
  uint64_t result = sub_251037610();
  if (result < 1)
  {
    __break(1u);
  }
  else
  {
    v24[1] = &v8[v10];
    void v24[2] = 1;
    void v24[3] = result;
    v24[0] = swift_getKeyPath();
    sub_250FAFBB8(v1, (uint64_t)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for WarmupProgressCounter);
    unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v13 = swift_allocObject();
    sub_250FAE9EC((uint64_t)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(void))type metadata accessor for WarmupProgressCounter);
    sub_250FAE140();
    sub_250FAE2D4(0, &qword_269B14078, (void (*)(uint64_t))sub_250FAE1A0);
    sub_250FAE684();
    sub_250FAE7E4(&qword_269B140F8, &qword_269B14078, (void (*)(uint64_t))sub_250FAE1A0);
    sub_251038C80();
    LOBYTE(v12) = sub_2510386E0();
    sub_251038050();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    sub_250FAFBB8((uint64_t)v8, a1, (uint64_t (*)(void))sub_250FAE028);
    sub_250FAEAD4(0, &qword_269B14108, (void (*)(uint64_t))sub_250FAE028);
    uint64_t v23 = a1 + *(int *)(v22 + 36);
    *(unsigned char *)uint64_t v23 = v12;
    *(void *)(v23 + 8) = v15;
    *(void *)(v23 + 16) = v17;
    *(void *)(v23 + 24) = v19;
    *(void *)(v23 + 32) = v21;
    *(unsigned char *)(v23 + 40) = 0;
    return sub_250FAFAF4((uint64_t)v8, (uint64_t (*)(void))sub_250FAE028);
  }
  return result;
}

uint64_t sub_250FAD348@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250FAE234();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - v10);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *a1;
  uint64_t *v11 = sub_251038D00();
  v11[1] = v16;
  sub_250FAFA70();
  sub_250FAD4D8(v15, a2, (char *)v11 + *(int *)(v17 + 44));
  sub_250FAE9EC((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))sub_250FAE234);
  LOBYTE(v15) = v15 == sub_251037610();
  sub_250FAFBB8((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void))sub_250FAE234);
  sub_250FAFBB8((uint64_t)v8, a3, (uint64_t (*)(void))sub_250FAE234);
  sub_250FAE1A0();
  uint64_t v19 = a3 + *(int *)(v18 + 48);
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 0;
  *(unsigned char *)(v19 + 9) = v15;
  sub_250FAFAF4((uint64_t)v14, (uint64_t (*)(void))sub_250FAE234);
  return sub_250FAFAF4((uint64_t)v8, (uint64_t (*)(void))sub_250FAE234);
}

uint64_t sub_250FAD4D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v83 = a1;
  unint64_t v100 = a3;
  uint64_t v4 = sub_2510384E0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v90 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FAE4A8();
  uint64_t v91 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v97 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FAEAD4(0, &qword_269B140B0, (void (*)(uint64_t))sub_250FAE4A8);
  uint64_t v96 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v95 = (uint64_t)&v81 - v10;
  sub_250FAE408(0, &qword_269B140A8, &qword_269B140B0, (void (*)(uint64_t))sub_250FAE4A8, (void (*)(void))sub_250FAE56C);
  uint64_t v98 = *(void *)(v11 - 8);
  uint64_t v99 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v104 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v94 = (char *)&v81 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v103 = (char *)&v81 - v16;
  uint64_t v17 = sub_251038C50();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v89 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v81 - v20;
  sub_250F21FD8();
  uint64_t v23 = v22;
  MEMORY[0x270FA5388](v22);
  char v25 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FAEAD4(0, &qword_269B12CA8, (void (*)(uint64_t))sub_250F21FD8);
  uint64_t v86 = v26;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v81 - v27;
  sub_250FAE408(0, &qword_269B140A0, &qword_269B12CA8, (void (*)(uint64_t))sub_250F21FD8, (void (*)(void))sub_250F22380);
  uint64_t v102 = v29;
  uint64_t v106 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  unint64_t v101 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v85 = (char *)&v81 - v32;
  double v34 = MEMORY[0x270FA5388](v33);
  uint64_t v105 = (char *)&v81 - v35;
  unsigned int v36 = *MEMORY[0x263F19860];
  uint64_t v92 = v5;
  uint64_t v93 = v4;
  long long v37 = *(void (**)(void, double))(v5 + 104);
  unsigned int v84 = v36;
  uint64_t v87 = (void (*)(char *, void, uint64_t))v37;
  uint64_t v88 = v5 + 104;
  v37(v21, v34);
  uint64_t v38 = a2;
  uint64_t v39 = v83;
  if (sub_251037630() >= v39)
  {
    uint64_t v42 = type metadata accessor for WarmupProgressCounter();
    memcpy(v118, (const void *)(v38 + *(int *)(v42 + 24)), 0x119uLL);
    sub_250F76798((uint64_t)v118, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
    sub_250F75B5C(v108);
    sub_250F76798((uint64_t)v118, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
    memcpy(v117, v108, 0x118uLL);
    uint64_t v41 = v117[27];
    swift_retain();
    sub_250F2E048(v117);
  }
  else
  {
    uint64_t v40 = type metadata accessor for WarmupProgressCounter();
    memcpy(v118, (const void *)(v38 + *(int *)(v40 + 24)), 0x119uLL);
    sub_250F76798((uint64_t)v118, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
    sub_250F75B5C(v108);
    sub_250F76798((uint64_t)v118, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
    memcpy(v117, v108, 0x118uLL);
    uint64_t v41 = v117[28];
    swift_retain();
    swift_retain();
    swift_retain();
    sub_250F2E048(v117);
    swift_release();
    swift_release();
  }
  uint64_t v43 = (uint64_t (*)(void))MEMORY[0x263F1B7A0];
  sub_250FAFBB8((uint64_t)v21, (uint64_t)v25, MEMORY[0x263F1B7A0]);
  *(void *)&v25[*(int *)(v23 + 52)] = v41;
  *(_WORD *)&v25[*(int *)(v23 + 56)] = 256;
  uint64_t v82 = (uint64_t (*)(void))MEMORY[0x263F1B7A0];
  sub_250FAFAF4((uint64_t)v21, MEMORY[0x263F1B7A0]);
  sub_251037610();
  uint64_t v44 = type metadata accessor for WarmupProgressCounter();
  sub_251038D00();
  sub_251038150();
  sub_250FAFBB8((uint64_t)v25, (uint64_t)v28, (uint64_t (*)(void))sub_250F21FD8);
  uint64_t v45 = &v28[*(int *)(v86 + 36)];
  long long v46 = v110;
  *(_OWORD *)uint64_t v45 = v109;
  *((_OWORD *)v45 + 1) = v46;
  *((_OWORD *)v45 + 2) = v111;
  sub_250FAFAF4((uint64_t)v25, (uint64_t (*)(void))sub_250F21FD8);
  sub_251037630();
  sub_250F22380();
  uint64_t v47 = v85;
  sub_251038920();
  sub_250FAFB54((uint64_t)v28, &qword_269B12CA8, (void (*)(uint64_t))sub_250F21FD8);
  (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v47, v102);
  uint64_t v48 = (uint64_t)v89;
  uint64_t v49 = v93;
  uint64_t v50 = v87;
  v87(v89, v84, v93);
  memcpy(v117, (const void *)(v38 + *(int *)(v44 + 24)), 0x119uLL);
  sub_250F76798((uint64_t)v117, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40BE0);
  sub_250F75B5C(v107);
  sub_250F76798((uint64_t)v117, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_250F40D40);
  memcpy(v108, v107, sizeof(v108));
  uint64_t v51 = v108[26];
  swift_retain();
  sub_250F2E048(v108);
  sub_2510380A0();
  double v52 = v112;
  uint64_t v53 = v114;
  uint64_t v86 = v115;
  uint64_t v54 = v116;
  uint64_t v55 = v97;
  sub_250FAFBB8(v48, v97, v43);
  uint64_t v56 = v113;
  uint64_t v57 = v90;
  v50(v90, *MEMORY[0x263F19868], v49);
  char v58 = sub_2510384D0();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v57, v49);
  unint64_t v59 = COERCE_UNSIGNED_INT64(v112 * 0.5) & 0xFFFFFFFFFFFFFFFELL | ((v58 & 1) == 0);
  uint64_t v60 = sub_251038D00();
  uint64_t v61 = v55 + *(int *)(v91 + 68);
  *(void *)uint64_t v61 = v59;
  *(double *)(v61 + 8) = v52;
  *(void *)(v61 + 16) = v56;
  *(void *)(v61 + 24) = v53;
  *(void *)(v61 + 32) = v86;
  *(void *)(v61 + 40) = v54;
  *(void *)(v61 + 48) = v51;
  *(_WORD *)(v61 + 56) = 256;
  *(void *)(v61 + 64) = v60;
  *(void *)(v61 + 72) = v62;
  sub_250FAFAF4(v48, v82);
  sub_251037610();
  sub_251038D00();
  sub_251038150();
  uint64_t v63 = v95;
  sub_250FAFBB8(v55, v95, (uint64_t (*)(void))sub_250FAE4A8);
  long long v64 = (_OWORD *)(v63 + *(int *)(v96 + 36));
  long long v65 = *(_OWORD *)&v107[16];
  *long long v64 = *(_OWORD *)v107;
  v64[1] = v65;
  v64[2] = *(_OWORD *)&v107[32];
  sub_250FAFAF4(v55, (uint64_t (*)(void))sub_250FAE4A8);
  sub_250FAE56C();
  char v66 = v94;
  sub_251038920();
  sub_250FAFB54(v63, &qword_269B140B0, (void (*)(uint64_t))sub_250FAE4A8);
  uint64_t v68 = v98;
  uint64_t v67 = v99;
  uint64_t v69 = v103;
  (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v103, v66, v99);
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
  uint64_t v71 = v101;
  uint64_t v72 = v102;
  v70(v101, v105, v102);
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v73(v104, v69, v67);
  uint64_t v74 = v100;
  v70(v100, v71, v72);
  sub_250FAE328();
  uint64_t v76 = &v74[*(int *)(v75 + 48)];
  unint64_t v77 = v104;
  v73(v76, v104, v67);
  unint64_t v78 = *(void (**)(char *, uint64_t))(v68 + 8);
  v78(v103, v67);
  unint64_t v79 = *(void (**)(char *, uint64_t))(v106 + 8);
  v79(v105, v72);
  v78(v77, v67);
  return ((uint64_t (*)(char *, uint64_t))v79)(v101, v72);
}

BOOL _s15HealthBalanceUI21WarmupProgressCounterV13ConfigurationV2eeoiySbAE_AEtFZ_0(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

void sub_250FAE028()
{
  if (!qword_269B14060)
  {
    sub_250FAE08C();
    sub_250FAE750();
    unint64_t v0 = sub_251038BF0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14060);
    }
  }
}

void sub_250FAE08C()
{
  if (!qword_269B14068)
  {
    sub_250FAE140();
    sub_250FAE2D4(255, &qword_269B14078, (void (*)(uint64_t))sub_250FAE1A0);
    sub_250FAE684();
    unint64_t v0 = sub_251038C90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14068);
    }
  }
}

void sub_250FAE140()
{
  if (!qword_269B14070)
  {
    unint64_t v0 = sub_2510390D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14070);
    }
  }
}

void sub_250FAE1A0()
{
  if (!qword_269B14080)
  {
    sub_250FAE234();
    sub_250FAE638(255, &qword_269B140E0, MEMORY[0x263F1B6B0], MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B14080);
    }
  }
}

void sub_250FAE234()
{
  if (!qword_269B14088)
  {
    sub_250FAE2D4(255, &qword_269B14090, (void (*)(uint64_t))sub_250FAE328);
    sub_250FAE7E4(&qword_269B140D8, &qword_269B14090, (void (*)(uint64_t))sub_250FAE328);
    unint64_t v0 = sub_251038C30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14088);
    }
  }
}

void sub_250FAE2D4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038D80();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250FAE328()
{
  if (!qword_269B14098)
  {
    sub_250FAE408(255, &qword_269B140A0, &qword_269B12CA8, (void (*)(uint64_t))sub_250F21FD8, (void (*)(void))sub_250F22380);
    sub_250FAE408(255, &qword_269B140A8, &qword_269B140B0, (void (*)(uint64_t))sub_250FAE4A8, (void (*)(void))sub_250FAE56C);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B14098);
    }
  }
}

void sub_250FAE408(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    sub_250FAEAD4(255, a3, a4);
    a5();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v8) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_250FAE4A8()
{
  if (!qword_269B140B8)
  {
    sub_251038C50();
    sub_250FAFA28(&qword_269B140C0, MEMORY[0x263F1B7A0]);
    unint64_t v0 = sub_2510385A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B140B8);
    }
  }
}

unint64_t sub_250FAE56C()
{
  unint64_t result = qword_269B140C8;
  if (!qword_269B140C8)
  {
    sub_250FAEAD4(255, &qword_269B140B0, (void (*)(uint64_t))sub_250FAE4A8);
    sub_250FAFA28(&qword_269B140D0, (void (*)(uint64_t))sub_250FAE4A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B140C8);
  }
  return result;
}

void sub_250FAE638(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_250FAE684()
{
  unint64_t result = qword_269B140E8;
  if (!qword_269B140E8)
  {
    sub_250FAE140();
    sub_250FAE6FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B140E8);
  }
  return result;
}

unint64_t sub_250FAE6FC()
{
  unint64_t result = qword_26B210BB8;
  if (!qword_26B210BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B210BB8);
  }
  return result;
}

unint64_t sub_250FAE750()
{
  unint64_t result = qword_269B140F0;
  if (!qword_269B140F0)
  {
    sub_250FAE08C();
    sub_250FAE7E4(&qword_269B140F8, &qword_269B14078, (void (*)(uint64_t))sub_250FAE1A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B140F0);
  }
  return result;
}

uint64_t sub_250FAE7E4(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250FAE2D4(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FAE834()
{
  if (!qword_269B14100)
  {
    sub_250FAE08C();
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14100);
    }
  }
}

uint64_t sub_250FAE89C()
{
  uint64_t v1 = (int *)(type metadata accessor for WarmupProgressCounter() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t v3 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = v2 + v1[8];
  long long v7 = *(_OWORD *)(v4 + 240);
  long long v8 = *(_OWORD *)(v4 + 256);
  long long v6 = *(_OWORD *)(v4 + 208);
  sub_250F40D40(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 72), *(void *)(v4 + 80), *(void *)(v4 + 88), *(void *)(v4 + 96), *(void *)(v4 + 104), *(void *)(v4 + 112), *(void *)(v4 + 120), *(void *)(v4 + 128), *(void *)(v4 + 136), *(void *)(v4 + 144),
    *(void *)(v4 + 152),
    *(void *)(v4 + 160),
    *(void *)(v4 + 168),
    *(void *)(v4 + 176),
    *(void *)(v4 + 184),
    *(void *)(v4 + 192),
    *(void *)(v4 + 200),
    v6,
    *((uint64_t *)&v6 + 1),
    *(void *)(v4 + 224),
    *(void *)(v4 + 232),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    *(void *)(v4 + 272),
    *(unsigned char *)(v4 + 280));
  return swift_deallocObject();
}

uint64_t sub_250FAE9EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250FAEA54@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for WarmupProgressCounter() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_250FAD348(a1, v6, a2);
}

void sub_250FAEAD4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250FAEB38()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for WarmupProgressCounter(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    uint64_t v17 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_251037640();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (_OWORD *)((char *)a1 + v8);
    uint64_t v11 = (_OWORD *)((char *)a2 + v8);
    long long v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v47 = *(void *)((char *)a2 + v9 + 24);
    uint64_t v48 = *(void *)((char *)a2 + v9 + 16);
    uint64_t v45 = *(void *)((char *)a2 + v9 + 40);
    uint64_t v46 = *(void *)((char *)a2 + v9 + 32);
    uint64_t v43 = *(void *)((char *)a2 + v9 + 56);
    uint64_t v44 = *(void *)((char *)a2 + v9 + 48);
    uint64_t v53 = *(void *)((char *)a2 + v9 + 64);
    uint64_t v20 = *(void *)((char *)a2 + v9 + 80);
    uint64_t v21 = *(void *)((char *)a2 + v9 + 88);
    uint64_t v22 = *(void *)((char *)a2 + v9 + 96);
    uint64_t v23 = *(void *)((char *)a2 + v9 + 104);
    uint64_t v24 = *(void *)((char *)a2 + v9 + 112);
    uint64_t v26 = *(void *)((char *)a2 + v9 + 120);
    uint64_t v27 = *(void *)((char *)a2 + v9 + 128);
    uint64_t v28 = *(void *)((char *)a2 + v9 + 136);
    uint64_t v29 = *(void *)((char *)a2 + v9 + 144);
    uint64_t v30 = *(void *)((char *)a2 + v9 + 152);
    uint64_t v31 = *(void *)((char *)a2 + v9 + 160);
    uint64_t v32 = *(void *)((char *)a2 + v9 + 168);
    uint64_t v33 = *(void *)((char *)a2 + v9 + 176);
    uint64_t v34 = *(void *)((char *)a2 + v9 + 184);
    uint64_t v35 = *(void *)((char *)a2 + v9 + 192);
    uint64_t v36 = *(void *)((char *)a2 + v9 + 200);
    uint64_t v37 = *(void *)((char *)a2 + v9 + 208);
    uint64_t v38 = *(void *)((char *)a2 + v9 + 216);
    uint64_t v39 = *(void *)((char *)a2 + v9 + 224);
    char v25 = a1;
    uint64_t v40 = *(void *)((char *)a2 + v9 + 232);
    uint64_t v41 = *(void *)((char *)a2 + v9 + 240);
    uint64_t v42 = *(void *)((char *)a2 + v9 + 248);
    uint64_t v49 = *(void *)((char *)a2 + v9 + 256);
    uint64_t v50 = *(void *)((char *)a2 + v9 + 264);
    uint64_t v51 = *(void *)((char *)a2 + v9 + 272);
    char v52 = *((unsigned char *)a2 + v9 + 280);
    uint64_t v14 = *(void *)((char *)a2 + v9 + 72);
    uint64_t v15 = *(void *)((char *)a2 + v9);
    uint64_t v16 = *(void *)((char *)a2 + v9 + 8);
    sub_250F40BE0(v15, v16, v48, v47, v46, v45, v44, v43, v53, v14, v20, v21, v22, v23, v24, v26, v27, v28, v29,
      v30,
      v31,
      v32,
      v33,
      v34,
      v35,
      v36,
      v37,
      v38,
      v39,
      v40,
      v41,
      v42,
      v49,
      v50,
      v51,
      v52);
    *(void *)uint64_t v13 = v15;
    *((void *)v13 + 1) = v16;
    *((void *)v13 + 2) = v48;
    *((void *)v13 + 3) = v47;
    *((void *)v13 + 4) = v46;
    *((void *)v13 + 5) = v45;
    *((void *)v13 + 6) = v44;
    *((void *)v13 + 7) = v43;
    *((void *)v13 + 8) = v53;
    *((void *)v13 + 9) = v14;
    *((void *)v13 + 10) = v20;
    *((void *)v13 + 11) = v21;
    *((void *)v13 + 12) = v22;
    *((void *)v13 + 13) = v23;
    uint64_t v17 = v25;
    *((void *)v13 + 14) = v24;
    *((void *)v13 + 15) = v26;
    *((void *)v13 + 16) = v27;
    *((void *)v13 + 17) = v28;
    *((void *)v13 + 18) = v29;
    *((void *)v13 + 19) = v30;
    *((void *)v13 + 20) = v31;
    *((void *)v13 + 21) = v32;
    *((void *)v13 + 22) = v33;
    *((void *)v13 + 23) = v34;
    *((void *)v13 + 24) = v35;
    *((void *)v13 + 25) = v36;
    *((void *)v13 + 26) = v37;
    *((void *)v13 + 27) = v38;
    *((void *)v13 + 28) = v39;
    *((void *)v13 + 29) = v40;
    *((void *)v13 + 30) = v41;
    *((void *)v13 + 31) = v42;
    *((void *)v13 + 32) = v49;
    *((void *)v13 + 33) = v50;
    *((void *)v13 + 34) = v51;
    v13[280] = v52;
  }
  return v17;
}

uint64_t destroy for WarmupProgressCounter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  long long v8 = *(_OWORD *)(v5 + 240);
  long long v9 = *(_OWORD *)(v5 + 256);
  long long v7 = *(_OWORD *)(v5 + 208);
  return sub_250F40D40(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 80), *(void *)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112), *(void *)(v5 + 120), *(void *)(v5 + 128), *(void *)(v5 + 136), *(void *)(v5 + 144),
           *(void *)(v5 + 152),
           *(void *)(v5 + 160),
           *(void *)(v5 + 168),
           *(void *)(v5 + 176),
           *(void *)(v5 + 184),
           *(void *)(v5 + 192),
           *(void *)(v5 + 200),
           v7,
           *((uint64_t *)&v7 + 1),
           *(void *)(v5 + 224),
           *(void *)(v5 + 232),
           v8,
           *((uint64_t *)&v8 + 1),
           v9,
           *((uint64_t *)&v9 + 1),
           *(void *)(v5 + 272),
           *(unsigned char *)(v5 + 280));
}

uint64_t initializeWithCopy for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v51 = a1;
  long long v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[1];
  *long long v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v42 = *(void *)(a2 + v8 + 24);
  uint64_t v45 = *(void *)(a2 + v8 + 40);
  uint64_t v46 = *(void *)(a2 + v8 + 32);
  uint64_t v43 = *(void *)(a2 + v8 + 56);
  uint64_t v44 = *(void *)(a2 + v8 + 48);
  uint64_t v19 = *(void *)(a2 + v8 + 72);
  uint64_t v20 = *(void *)(a2 + v8 + 80);
  uint64_t v21 = *(void *)(a2 + v8 + 88);
  uint64_t v22 = *(void *)(a2 + v8 + 96);
  uint64_t v23 = *(void *)(a2 + v8 + 104);
  uint64_t v24 = *(void *)(a2 + v8 + 112);
  uint64_t v25 = *(void *)(a2 + v8 + 120);
  uint64_t v26 = *(void *)(a2 + v8 + 128);
  uint64_t v27 = *(void *)(a2 + v8 + 136);
  uint64_t v28 = *(void *)(a2 + v8 + 144);
  uint64_t v29 = *(void *)(a2 + v8 + 152);
  uint64_t v30 = *(void *)(a2 + v8 + 160);
  uint64_t v31 = *(void *)(a2 + v8 + 168);
  uint64_t v32 = *(void *)(a2 + v8 + 176);
  uint64_t v33 = *(void *)(a2 + v8 + 184);
  uint64_t v34 = *(void *)(a2 + v8 + 192);
  uint64_t v35 = *(void *)(a2 + v8 + 200);
  uint64_t v36 = *(void *)(a2 + v8 + 208);
  uint64_t v37 = *(void *)(a2 + v8 + 216);
  uint64_t v38 = *(void *)(a2 + v8 + 224);
  uint64_t v39 = *(void *)(a2 + v8 + 232);
  uint64_t v40 = *(void *)(a2 + v8 + 240);
  uint64_t v41 = *(void *)(a2 + v8 + 248);
  uint64_t v47 = *(void *)(a2 + v8 + 256);
  uint64_t v48 = *(void *)(a2 + v8 + 264);
  uint64_t v49 = *(void *)(a2 + v8 + 272);
  char v50 = *(unsigned char *)(a2 + v8 + 280);
  uint64_t v14 = *(void *)(a2 + v8 + 64);
  uint64_t v16 = *(void *)(a2 + v8);
  uint64_t v15 = *(void *)(a2 + v8 + 8);
  uint64_t v17 = *(void *)(a2 + v8 + 16);
  sub_250F40BE0(v16, v15, *(void *)(v13 + 16), v42, v46, v45, v44, v43, v14, v19, v20, v21, v22, v23, v24, *(void *)(v13 + 120), *(void *)(v13 + 128), *(void *)(v13 + 136), *(void *)(v13 + 144),
    *(void *)(v13 + 152),
    *(void *)(v13 + 160),
    *(void *)(v13 + 168),
    *(void *)(v13 + 176),
    *(void *)(v13 + 184),
    *(void *)(v13 + 192),
    *(void *)(v13 + 200),
    *(void *)(v13 + 208),
    *(void *)(v13 + 216),
    *(void *)(v13 + 224),
    *(void *)(v13 + 232),
    *(void *)(v13 + 240),
    *(void *)(v13 + 248),
    *(void *)(v13 + 256),
    *(void *)(v13 + 264),
    *(void *)(v13 + 272),
    *(unsigned char *)(v13 + 280));
  *(void *)uint64_t v12 = v16;
  *(void *)(v12 + 8) = v15;
  *(void *)(v12 + 16) = v17;
  *(void *)(v12 + 24) = v42;
  *(void *)(v12 + 32) = v46;
  *(void *)(v12 + 40) = v45;
  *(void *)(v12 + 48) = v44;
  *(void *)(v12 + 56) = v43;
  *(void *)(v12 + 64) = v14;
  *(void *)(v12 + 72) = v19;
  *(void *)(v12 + 80) = v20;
  *(void *)(v12 + 88) = v21;
  *(void *)(v12 + 96) = v22;
  *(void *)(v12 + 104) = v23;
  *(void *)(v12 + 112) = v24;
  *(void *)(v12 + 120) = v25;
  *(void *)(v12 + 128) = v26;
  *(void *)(v12 + 136) = v27;
  *(void *)(v12 + 144) = v28;
  *(void *)(v12 + 152) = v29;
  *(void *)(v12 + 160) = v30;
  *(void *)(v12 + 168) = v31;
  *(void *)(v12 + 176) = v32;
  *(void *)(v12 + 184) = v33;
  *(void *)(v12 + 192) = v34;
  *(void *)(v12 + 200) = v35;
  *(void *)(v12 + 208) = v36;
  *(void *)(v12 + 216) = v37;
  *(void *)(v12 + 224) = v38;
  *(void *)(v12 + 232) = v39;
  *(void *)(v12 + 240) = v40;
  *(void *)(v12 + 248) = v41;
  *(void *)(v12 + 256) = v47;
  *(void *)(v12 + 264) = v48;
  *(void *)(v12 + 272) = v49;
  *(unsigned char *)(v12 + 280) = v50;
  return v51;
}

uint64_t assignWithCopy for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v65 = a1;
  uint64_t v8 = (void *)(a1 + v7);
  long long v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  void v8[2] = v9[2];
  v8[3] = v9[3];
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v72 = *(void *)(v12 + 8);
  uint64_t v73 = *(void *)v12;
  uint64_t v70 = *(void *)(v12 + 24);
  uint64_t v71 = *(void *)(v12 + 16);
  uint64_t v68 = *(void *)(v12 + 40);
  uint64_t v69 = *(void *)(v12 + 32);
  uint64_t v66 = *(void *)(v12 + 56);
  uint64_t v67 = *(void *)(v12 + 48);
  uint64_t v46 = *(void *)(v12 + 72);
  uint64_t v47 = *(void *)(v12 + 80);
  uint64_t v48 = *(void *)(v12 + 88);
  uint64_t v49 = *(void *)(v12 + 96);
  uint64_t v50 = *(void *)(v12 + 104);
  uint64_t v51 = *(void *)(v12 + 112);
  uint64_t v52 = *(void *)(v12 + 120);
  uint64_t v13 = *(void *)(v12 + 136);
  uint64_t v53 = *(void *)(v12 + 128);
  uint64_t v54 = *(void *)(v12 + 144);
  uint64_t v14 = *(void *)(v12 + 152);
  uint64_t v15 = *(void *)(v12 + 160);
  uint64_t v16 = *(void *)(v12 + 168);
  uint64_t v17 = *(void *)(v12 + 176);
  uint64_t v18 = *(void *)(v12 + 184);
  uint64_t v19 = *(void *)(v12 + 192);
  uint64_t v20 = *(void *)(v12 + 200);
  uint64_t v55 = *(void *)(v12 + 208);
  uint64_t v56 = *(void *)(v12 + 216);
  uint64_t v57 = *(void *)(v12 + 224);
  uint64_t v58 = *(void *)(v12 + 232);
  uint64_t v59 = *(void *)(v12 + 240);
  uint64_t v60 = *(void *)(v12 + 248);
  uint64_t v61 = *(void *)(v12 + 256);
  uint64_t v62 = *(void *)(v12 + 264);
  uint64_t v63 = *(void *)(v12 + 272);
  char v64 = *(unsigned char *)(v12 + 280);
  uint64_t v21 = *(void *)(v12 + 64);
  sub_250F40BE0(*(void *)v12, v72, v71, v70, v69, v68, v67, v66, v21, v46, v47, v48, v49, v50, v51, v52, v53, v13, v54,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64);
  uint64_t v22 = *(void *)v11;
  uint64_t v23 = *(void *)(v11 + 8);
  *(void *)uint64_t v11 = v73;
  *(void *)(v11 + 8) = v72;
  uint64_t v24 = *(void *)(v11 + 16);
  uint64_t v25 = *(void *)(v11 + 24);
  *(void *)(v11 + 16) = v71;
  *(void *)(v11 + 24) = v70;
  uint64_t v26 = *(void *)(v11 + 32);
  uint64_t v27 = *(void *)(v11 + 40);
  *(void *)(v11 + 32) = v69;
  *(void *)(v11 + 40) = v68;
  uint64_t v28 = *(void *)(v11 + 48);
  uint64_t v29 = *(void *)(v11 + 56);
  *(void *)(v11 + 48) = v67;
  long long v30 = *(_OWORD *)(v11 + 64);
  long long v31 = *(_OWORD *)(v11 + 80);
  *(void *)(v11 + 56) = v66;
  *(void *)(v11 + 64) = v21;
  *(void *)(v11 + 72) = v46;
  *(void *)(v11 + 80) = v47;
  *(void *)(v11 + 88) = v48;
  long long v32 = *(_OWORD *)(v11 + 96);
  long long v33 = *(_OWORD *)(v11 + 112);
  *(void *)(v11 + 96) = v49;
  *(void *)(v11 + 104) = v50;
  *(void *)(v11 + 112) = v51;
  *(void *)(v11 + 120) = v52;
  long long v34 = *(_OWORD *)(v11 + 128);
  long long v35 = *(_OWORD *)(v11 + 144);
  *(void *)(v11 + 128) = v53;
  *(void *)(v11 + 136) = v13;
  *(void *)(v11 + 144) = v54;
  *(void *)(v11 + 152) = v14;
  long long v36 = *(_OWORD *)(v11 + 160);
  long long v37 = *(_OWORD *)(v11 + 176);
  *(void *)(v11 + 160) = v15;
  *(void *)(v11 + 168) = v16;
  *(void *)(v11 + 176) = v17;
  *(void *)(v11 + 184) = v18;
  long long v38 = *(_OWORD *)(v11 + 192);
  long long v39 = *(_OWORD *)(v11 + 208);
  *(void *)(v11 + 192) = v19;
  *(void *)(v11 + 200) = v20;
  *(void *)(v11 + 208) = v55;
  *(void *)(v11 + 216) = v56;
  long long v40 = *(_OWORD *)(v11 + 224);
  long long v41 = *(_OWORD *)(v11 + 240);
  *(void *)(v11 + 224) = v57;
  *(void *)(v11 + 232) = v58;
  *(void *)(v11 + 240) = v59;
  *(void *)(v11 + 248) = v60;
  long long v42 = *(_OWORD *)(v11 + 256);
  *(void *)(v11 + 256) = v61;
  *(void *)(v11 + 264) = v62;
  uint64_t v43 = *(void *)(v11 + 272);
  *(void *)(v11 + 272) = v63;
  char v44 = *(unsigned char *)(v11 + 280);
  *(unsigned char *)(v11 + 280) = v64;
  sub_250F40D40(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v43,
    v44);
  return v65;
}

uint64_t initializeWithTake for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  long long v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[1];
  *long long v9 = *v10;
  v9[1] = v11;
  memcpy((void *)(a1 + v8), (const void *)(a2 + v8), 0x119uLL);
  return a1;
}

uint64_t assignWithTake for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  long long v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[1];
  *long long v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = *(void *)(v13 + 272);
  char v15 = *(unsigned char *)(v13 + 280);
  uint64_t v16 = *(void *)v12;
  uint64_t v17 = *(void *)(v12 + 8);
  uint64_t v18 = *(void *)(v12 + 16);
  uint64_t v19 = *(void *)(v12 + 24);
  uint64_t v20 = *(void *)(v12 + 32);
  uint64_t v21 = *(void *)(v12 + 40);
  uint64_t v22 = *(void *)(v12 + 48);
  uint64_t v23 = *(void *)(v12 + 56);
  long long v24 = *(_OWORD *)(v12 + 64);
  long long v25 = *(_OWORD *)(v12 + 80);
  long long v26 = *(_OWORD *)(v12 + 96);
  long long v27 = *(_OWORD *)(v12 + 112);
  long long v28 = *(_OWORD *)(v12 + 128);
  long long v29 = *(_OWORD *)(v12 + 144);
  long long v30 = *(_OWORD *)(v12 + 160);
  long long v31 = *(_OWORD *)(v12 + 176);
  long long v32 = *(_OWORD *)(v12 + 192);
  long long v33 = *(_OWORD *)(v12 + 208);
  long long v34 = *(_OWORD *)(v12 + 224);
  long long v35 = *(_OWORD *)(v12 + 240);
  long long v36 = *(_OWORD *)(v12 + 256);
  uint64_t v37 = *(void *)(v12 + 272);
  char v38 = *(unsigned char *)(v12 + 280);
  long long v39 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v39;
  long long v40 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = v40;
  long long v41 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(v12 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(v12 + 80) = v41;
  long long v42 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(v12 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(v12 + 112) = v42;
  long long v43 = *(_OWORD *)(v13 + 144);
  *(_OWORD *)(v12 + 128) = *(_OWORD *)(v13 + 128);
  *(_OWORD *)(v12 + 144) = v43;
  long long v44 = *(_OWORD *)(v13 + 176);
  *(_OWORD *)(v12 + 160) = *(_OWORD *)(v13 + 160);
  *(_OWORD *)(v12 + 176) = v44;
  long long v45 = *(_OWORD *)(v13 + 208);
  *(_OWORD *)(v12 + 192) = *(_OWORD *)(v13 + 192);
  *(_OWORD *)(v12 + 208) = v45;
  long long v46 = *(_OWORD *)(v13 + 240);
  *(_OWORD *)(v12 + 224) = *(_OWORD *)(v13 + 224);
  *(_OWORD *)(v12 + 240) = v46;
  *(_OWORD *)(v12 + 256) = *(_OWORD *)(v13 + 256);
  *(void *)(v12 + 272) = v14;
  *(unsigned char *)(v12 + 280) = v15;
  sub_250F40D40(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FAF6C8);
}

uint64_t sub_250FAF6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251037640();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 280);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FAF79C);
}

uint64_t sub_250FAF79C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_251037640();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24) + 280) = -(char)a2;
  }
  return result;
}

uint64_t sub_250FAF85C()
{
  uint64_t result = sub_251037640();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WarmupProgressCounter.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WarmupProgressCounter.Configuration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WarmupProgressCounter.Configuration()
{
  return &type metadata for WarmupProgressCounter.Configuration;
}

unint64_t sub_250FAF95C()
{
  unint64_t result = qword_269B14120;
  if (!qword_269B14120)
  {
    sub_250FAEAD4(255, &qword_269B14108, (void (*)(uint64_t))sub_250FAE028);
    sub_250FAFA28(&qword_269B14128, (void (*)(uint64_t))sub_250FAE028);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14120);
  }
  return result;
}

uint64_t sub_250FAFA28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FAFA70()
{
  if (!qword_269B14130)
  {
    sub_250FAE2D4(255, &qword_269B14090, (void (*)(uint64_t))sub_250FAE328);
    unint64_t v0 = sub_2510381D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14130);
    }
  }
}

uint64_t sub_250FAFAF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FAFB54(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_250FAEAD4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250FAFBB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void static Color.balanceBlue.getter()
{
}

void static Color.balancePink.getter()
{
}

void static Color.balancePurple.getter()
{
}

void sub_250FAFC8C(void *a1, id *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  id v3 = *a2;
  JUMPOUT(0x2533907A0);
}

uint64_t static Color.balanceBackgroundBlue.getter()
{
  return sub_250FAFD48(&qword_269B12BC0, (uint64_t)qword_269B1AD40);
}

uint64_t static Color.balanceBackgroundPurple.getter()
{
  return sub_250FAFD48(&qword_269B12BD0, (uint64_t)qword_269B1AD70);
}

uint64_t static Color.balanceBackgroundPink.getter()
{
  return sub_250FAFD48(&qword_269B12BC8, (uint64_t)qword_269B1AD58);
}

uint64_t sub_250FAFD48(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_251037C50();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v4, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  return sub_251038B20();
}

uint64_t sub_250FAFE48(uint64_t a1)
{
  return sub_250FB006C(a1, (uint64_t)sub_250FAFE70, (uint64_t)&block_descriptor_6, &qword_26B210328);
}

id sub_250FAFE70(void *a1)
{
  if (objc_msgSend(a1, sel_accessibilityContrast) == (id)1)
  {
    id v2 = objc_allocWithZone(MEMORY[0x263F825C8]);
    double v3 = 0.094;
    double v4 = 0.427;
    double v5 = 0.788;
  }
  else
  {
    id v6 = objc_msgSend(a1, sel_userInterfaceStyle);
    id v2 = objc_allocWithZone(MEMORY[0x263F825C8]);
    if (v6 == (id)2)
    {
      double v3 = 0.333;
      double v4 = 0.682;
      double v5 = 1.0;
    }
    else
    {
      double v3 = 0.243;
      double v4 = 0.592;
      double v5 = 0.973;
    }
  }
  return objc_msgSend(v2, sel_initWithRed_green_blue_alpha_, v3, v4, v5, 1.0);
}

id static UIColor.balanceBlue.getter()
{
  return sub_250FB01DC(&qword_26B210178, (void **)&qword_26B210328);
}

uint64_t sub_250FAFF6C(uint64_t a1)
{
  return sub_250FB006C(a1, (uint64_t)sub_250FAFF94, (uint64_t)&block_descriptor_0, &qword_269B14138);
}

id sub_250FAFF94(void *a1)
{
  id v1 = objc_msgSend(a1, sel_accessibilityContrast);
  id v2 = objc_allocWithZone(MEMORY[0x263F825C8]);
  if (v1 == (id)1)
  {
    double v3 = 0.612;
    double v4 = 0.349;
    double v5 = 0.709;
  }
  else
  {
    double v3 = 0.729;
    double v4 = 0.443;
    double v5 = 1.0;
  }
  return objc_msgSend(v2, sel_initWithRed_green_blue_alpha_, v3, v4, v5, 1.0);
}

id static UIColor.balancePurple.getter()
{
  return sub_250FB01DC(&qword_269B12BA8, (void **)&qword_269B14138);
}

uint64_t sub_250FB0044(uint64_t a1)
{
  return sub_250FB006C(a1, (uint64_t)sub_250FB012C, (uint64_t)&block_descriptor_3, &qword_26B210330);
}

uint64_t sub_250FB006C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = objc_allocWithZone(MEMORY[0x263F825C8]);
  v11[4] = a2;
  v11[5] = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_250FB0228;
  v11[3] = a3;
  uint64_t v8 = _Block_copy(v11);
  id v9 = objc_msgSend(v7, sel_initWithDynamicProvider_, v8);
  _Block_release(v8);
  uint64_t result = swift_release();
  *a4 = v9;
  return result;
}

id sub_250FB012C(void *a1)
{
  id v1 = objc_msgSend(a1, sel_accessibilityContrast);
  id v2 = objc_allocWithZone(MEMORY[0x263F825C8]);
  if (v1 == (id)1)
  {
    double v3 = 0.8;
    double v4 = 0.129;
    double v5 = 0.694;
  }
  else
  {
    double v4 = 0.424;
    double v5 = 0.898;
    double v3 = 1.0;
  }
  return objc_msgSend(v2, sel_initWithRed_green_blue_alpha_, v3, v4, v5, 1.0);
}

id static UIColor.balancePink.getter()
{
  return sub_250FB01DC(&qword_26B210180, (void **)&qword_26B210330);
}

id sub_250FB01DC(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  double v3 = *a2;
  return v3;
}

id sub_250FB0228(uint64_t a1, void *a2)
{
  double v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  double v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OpenRing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenRing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenRing()
{
  return &type metadata for OpenRing;
}

unsigned char *storeEnumTagSinglePayload for LineCapStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250FB0448);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineCapStyle()
{
  return &type metadata for LineCapStyle;
}

unint64_t sub_250FB0484()
{
  unint64_t result = qword_269B14140;
  if (!qword_269B14140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14140);
  }
  return result;
}

unint64_t sub_250FB04DC()
{
  unint64_t result = qword_269B14148;
  if (!qword_269B14148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14148);
  }
  return result;
}

void sub_250FB0530(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double v11 = *(double *)(v5 + 16);
  if (sub_251038A50())
  {
    sub_251038840();
    v22.origin.x = a2;
    v22.origin.y = a3;
    v22.size.width = a4;
    v22.size.height = a5;
    CGRectGetMidX(v22);
    __sincos_stret(v11);
    v23.origin.x = a2;
    v23.origin.y = a3;
    v23.size.width = a4;
    v23.size.height = a5;
    CGRectGetMidY(v23);
    long long v18 = 0x3FF0000000000000uLL;
    *(void *)&long long v19 = 0;
    *((void *)&v19 + 1) = 0x3FF0000000000000;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_251038830();
    long long v12 = v15;
    long long v13 = v16;
    char v14 = v17;
  }
  else
  {
    sub_250FB065C((uint64_t)&v18, a2, a3, a4, a5);
    long long v12 = v18;
    long long v13 = v19;
    char v14 = v20;
  }
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v13;
  *(unsigned char *)(a1 + 32) = v14;
}

__n128 sub_250FB065C@<Q0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  v60.origin.x = 0.0;
  v60.origin.y = 0.0;
  v60.size.width = 0.0;
  v60.size.height = 0.0;
  if (!CGRectEqualToRect(*(CGRect *)&a2, v60))
  {
    double v12 = *(double *)(v5 + 8);
    double v32 = *(double *)(v5 + 16);
    double v30 = *(double *)(v5 + 24);
    double v13 = *(double *)v5;
    v58.origin.x = a2;
    v58.origin.y = a3;
    v58.size.width = a4;
    v58.size.height = a5;
    double MidX = CGRectGetMidX(v58);
    v59.origin.x = a2;
    v59.origin.y = a3;
    v59.size.width = a4;
    v59.size.height = a5;
    double v44 = MidX;
    double MidY = CGRectGetMidY(v59);
    double v46 = v12 - v13 * 0.5;
    double v47 = v13;
    double v48 = v12 + v13 * 0.5;
    CGFloat v49 = a2;
    CGFloat v50 = a3;
    CGFloat v51 = a4;
    CGFloat v52 = a5;
    double v53 = v12;
    double v15 = v46;
    Mutable = CGPathCreateMutable();
    uint64_t v38 = 0x3FF0000000000000;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0x3FF0000000000000;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    double v31 = v48;
    sub_2510393F0();
    __double2 v17 = __sincos_stret(v30);
    double v18 = MidX + v17.__cosval * v46;
    double v19 = MidY;
    double v20 = v17.__sinval * v46 + MidY;
    int v21 = *(unsigned __int8 *)(v5 + 32);
    if (v21 != 3 && *(unsigned char *)(v5 + 32))
    {
      sub_250FB1118(v5 + 40, (uint64_t)v37);
      sub_250FB1118((uint64_t)v37, (uint64_t)&v54);
      if ((v21 - 3) < 0xFFFFFFFE)
      {
        if (v21 == 2) {
          goto LABEL_11;
        }
        goto LABEL_13;
      }
      if ((v55 & 1) == 0)
      {
        double v22 = v54;
        sub_250FB0AFC(v30, v54);
        sub_2510393F0();
        sub_250FB0BC0(1, (double *)&v33, v30, v22);
        double v18 = v34;
        double v20 = v35;
        sub_2510393F0();
      }
    }
    else
    {
      atan2(v17.__sinval * v48 + MidY - (v17.__sinval * v48 + MidY + v20) * 0.5, MidX + v17.__cosval * v48 - (MidX + v17.__cosval * v48 + v18) * 0.5);
      sub_2510393F0();
      if (!v21) {
        goto LABEL_11;
      }
    }
    if (v21 == 2)
    {
LABEL_11:
      atan2(v20 - v19, v18 - MidX);
      sub_2510393F0();
      __double2 v23 = __sincos_stret(v32);
      atan2(v23.__sinval * v15 + v19 - (v23.__sinval * v15 + v19 + v23.__sinval * v31 + v19) * 0.5, MidX + v23.__cosval * v15 - (MidX + v23.__cosval * v15 + MidX + v23.__cosval * v31) * 0.5);
LABEL_17:
      sub_2510393F0();
      CGPathCloseSubpath(Mutable);
      double v11 = (double *)&v33;
      sub_251038850();
      goto LABEL_18;
    }
LABEL_13:
    sub_250FB1118(v5 + 40, (uint64_t)v36);
    sub_250FB1118((uint64_t)v36, (uint64_t)&v56);
    if ((v57 & 1) != 0 || (v21 | 2) != 3)
    {
      atan2(v20 - v19, v18 - MidX);
    }
    else
    {
      double v24 = v56;
      sub_250FB0AFC(v32, v56);
      sub_250FB0BC0(0, (double *)&v33, v32, v24);
      double v25 = v34;
      double v26 = v35;
      atan2(v20 - v19, v18 - MidX);
      atan2(v26 - v19, v25 - MidX);
      sub_2510393F0();
      sub_2510393F0();
    }
    goto LABEL_17;
  }
  double v11 = &v44;
  sub_251038840();
LABEL_18:
  char v27 = *((unsigned char *)v11 + 32);
  __n128 result = *(__n128 *)v11;
  long long v29 = *((_OWORD *)v11 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 16) = v29;
  *(unsigned char *)(a1 + 32) = v27;
  return result;
}

double sub_250FB0AFC(double a1, double a2)
{
  double v4 = v2[4];
  __double2 v5 = __sincos_stret(a1);
  double v6 = *v2;
  double v7 = v2[1];
  double v8 = v5.__cosval * v4 + *v2;
  double v9 = v5.__sinval * v4 + v7;
  double v10 = a2 + a2;
  double v11 = v8 - (a2 + a2);
  if (*v2 >= v8) {
    double v11 = a2 + a2 + v8;
  }
  BOOL v12 = v7 < v9;
  double v13 = v9 - v10;
  double v14 = v10 + v9;
  if (!v12) {
    double v13 = v14;
  }
  BOOL v15 = v8 == v6;
  if (v8 == v6) {
    double v16 = v5.__cosval * v4 + *v2;
  }
  else {
    double v16 = v11;
  }
  if (!v15) {
    double v13 = v9;
  }
  double v17 = (v8 + v16) * 0.5;
  atan2(v9 - (v9 + v13) * 0.5, v8 - v17);
  return v17;
}

void sub_250FB0BC0(char a1@<W0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v8 = v4[4];
  __double2 v9 = __sincos_stret(a3);
  double v10 = *v4;
  double v11 = v4[1];
  double v12 = v9.__cosval * v8 + *v4;
  double v13 = v9.__sinval * v8 + v11;
  double v14 = sub_250FB11D4(v12, v13, v4[2]);
  double v15 = v12 - v14;
  if (v10 >= v12) {
    double v15 = v12 + v14;
  }
  double v16 = v13 - v14;
  double v17 = v13 + v14;
  if (v11 < v13) {
    double v17 = v16;
  }
  if (v12 == v10) {
    double v13 = v17;
  }
  else {
    double v12 = v15;
  }
  double v18 = a4 + a4;
  if (v12 == v10)
  {
    if (v11 >= v13) {
      double v19 = v13 - v18;
    }
    else {
      double v19 = v18 + v13;
    }
    double v20 = v12;
  }
  else
  {
    double v20 = v18 + v12;
    double v21 = v12 - v18;
    if (v10 >= v12) {
      double v20 = v21;
    }
    double v19 = v13;
  }
  double v22 = (v12 + v20) * 0.5;
  double v23 = (v13 + v19) * 0.5;
  double v24 = atan2(v13 - v23, v12 - v22);
  double v25 = v24 + -1.57079633;
  if ((a1 & 1) == 0) {
    double v25 = v24;
  }
  *a2 = v22;
  a2[1] = v23;
  if ((a1 & 1) == 0) {
    double v24 = v24 + 1.57079633;
  }
  a2[2] = v25;
  a2[3] = v24;
  a2[4] = v12;
  a2[5] = v13;
}

double sub_250FB0CEC@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  long long v7 = v5[1];
  long long v12 = *v5;
  long long v13 = v7;
  long long v14 = v5[2];
  char v15 = *((unsigned char *)v5 + 48);
  sub_250FB0530((uint64_t)v10, a2, a3, a4, a5);
  double result = *(double *)v10;
  long long v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t sub_250FB0D54()
{
  return MEMORY[0x270F047C8]();
}

void (*sub_250FB0D6C(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_251038030();
  return sub_250FB0DDC;
}

void sub_250FB0DDC(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t sub_250FB0E2C()
{
  unint64_t result = qword_269B14150;
  if (!qword_269B14150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14150);
  }
  return result;
}

unint64_t sub_250FB0E84()
{
  unint64_t result = qword_269B14158;
  if (!qword_269B14158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14158);
  }
  return result;
}

unint64_t sub_250FB0EDC()
{
  unint64_t result = qword_269B14160;
  if (!qword_269B14160)
  {
    sub_250FB0F34();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14160);
  }
  return result;
}

void sub_250FB0F34()
{
  if (!qword_269B14168)
  {
    sub_250FB0FB0();
    unint64_t v0 = sub_251038060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14168);
    }
  }
}

unint64_t sub_250FB0FB0()
{
  unint64_t result = qword_269B14170;
  if (!qword_269B14170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14170);
  }
  return result;
}

uint64_t sub_250FB1004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_250FB0FB0();
  return MEMORY[0x270F04808](a1, a2, a3, v6);
}

uint64_t sub_250FB1068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_250FB0FB0();
  return MEMORY[0x270F047D0](a1, a2, a3, v6);
}

uint64_t sub_250FB10CC(uint64_t a1)
{
  unint64_t v2 = sub_250FB0FB0();
  return MEMORY[0x270F047E0](a1, v2);
}

uint64_t sub_250FB1118(uint64_t a1, uint64_t a2)
{
  sub_250FB117C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_250FB117C()
{
  if (!qword_269B14178)
  {
    unint64_t v0 = sub_251039490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14178);
    }
  }
}

double sub_250FB11D4(double a1, double a2, double a3)
{
  double v4 = *v3;
  double v5 = v3[1];
  if (*v3 == a1)
  {
    BOOL v6 = v5 <= a2;
    double result = a2 - v5 - a3;
    double v8 = v5 - a3 - a2;
    if (!v6) {
      return v8;
    }
  }
  else
  {
    double v9 = sqrt(a3 * a3 - (a2 - v5) * (a2 - v5));
    if (v4 >= a1) {
      return v4 - a1 - v9;
    }
    else {
      return a1 - v4 - v9;
    }
  }
  return result;
}

uint64_t sub_250FB1230(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = v20 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(void *)(v4 + 40) = a2[5];
    uint64_t v8 = a3[6];
    uint64_t v9 = v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = sub_2510374F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[8];
    *(unsigned char *)(v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    long long v13 = (void *)(v4 + v12);
    long long v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    *long long v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[9];
    double v17 = (void *)(v4 + v16);
    double v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *double v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_250FB1380(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_release();
}

uint64_t sub_250FB141C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v12 = (void *)(a1 + v11);
  long long v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)(a1 + v15);
  double v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *sub_250FB1518(uint64_t *a1, uint64_t *a2, int *a3)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v10 = a3[8];
  uint64_t v11 = (uint64_t *)((char *)a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  void *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  uint64_t v14 = a3[9];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        double result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *double result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_250FB182C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_250FB18E0(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  swift_release();
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  swift_release();
  return a1;
}

uint64_t sub_250FB19B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FB19CC);
}

uint64_t sub_250FB19CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2510374F0();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250FB1A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FB1A90);
}

uint64_t sub_250FB1A90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2510374F0();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for BalanceWidgetTimelineProvider()
{
  uint64_t result = qword_26B210120;
  if (!qword_26B210120) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250FB1B84()
{
  uint64_t result = sub_2510374F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_250FB1C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_251039300();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_2510392F0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_250FB5918(a1, &qword_26B210BE0, MEMORY[0x263F8F520]);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_251039280();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

id sub_250FB1E04()
{
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    unint64_t v1 = result;
    id v2 = objc_msgSend(result, sel_isAppleWatch);

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_250FB1E64@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v31 = a3;
  uint64_t v7 = sub_251037C90();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BalanceWidgetTimelineProvider();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (double *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v14 = *a2;
  uint64_t v16 = (uint64_t (**)())((char *)v13 + *(int *)(v15 + 32));
  *uint64_t v16 = sub_250FB1E00;
  v16[1] = 0;
  uint64_t v17 = (id (**)())((char *)v13 + *(int *)(v15 + 36));
  *uint64_t v17 = sub_250FB1E04;
  v17[1] = 0;
  sub_251037C70();
  uint64_t v18 = sub_251037C80();
  os_log_type_t v19 = sub_2510393D0();
  if (os_log_type_enabled(v18, v19))
  {
    double v30 = a1;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = v7;
    double v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v33 = v22;
    int v29 = v14;
    *(_DWORD *)double v21 = 136446210;
    uint64_t v32 = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v33);
    a1 = v30;
    LOBYTE(v14) = v29;
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v18, v19, "[%{public}s] init", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v22, -1, -1);
    MEMORY[0x253391D80](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v28);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  sub_250FB61E4((uint64_t)a1, (uint64_t)v13);
  double v23 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  double v24 = (char *)v13 + *(int *)(v11 + 24);
  double v25 = (char *)v23 + *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  uint64_t v26 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  v13[5] = a4;
  *((unsigned char *)v13 + *(int *)(v11 + 28)) = v14;
  sub_250FB6014((uint64_t)v13, v31, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineProvider);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_250FB21A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251037400();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_251037C90();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251037C70();
  uint64_t v13 = sub_251037C80();
  os_log_type_t v14 = sub_2510393D0();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v26 = v9;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v28 = v3;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = v2;
    uint64_t v18 = v17;
    uint64_t v32 = v17;
    uint64_t v27 = a1;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v31 = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v32);
    a1 = v27;
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v13, v14, "[%{public}s] returning placeholder", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v18;
    uint64_t v2 = v29;
    MEMORY[0x253391D80](v19, -1, -1);
    uint64_t v20 = v16;
    uint64_t v3 = v28;
    MEMORY[0x253391D80](v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v26);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v21 = type metadata accessor for BalanceWidgetTimelineProvider();
  uint64_t v22 = v30 + *(int *)(v21 + 24);
  LOBYTE(v32) = *(unsigned char *)(v30 + *(int *)(v21 + 28));
  sub_2510373E0();
  sub_2510373E0();
  sub_250F26310(v22, (unsigned __int8 *)&v32, (uint64_t)v8, (uint64_t)v5, a1);
  double v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  v23(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v8, v2);
}

uint64_t sub_250FB24B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_251037C90();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251037C70();
  uint64_t v11 = sub_251037C80();
  os_log_type_t v12 = sub_2510393D0();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v20 = a2;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = v4;
    os_log_type_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = v15;
    uint64_t v19 = v7;
    *(_DWORD *)os_log_type_t v14 = 136446210;
    uint64_t v22 = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v23);
    a2 = v20;
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v11, v12, "[%{public}s] fetching snapshot", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v15, -1, -1);
    MEMORY[0x253391D80](v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  unsigned __int8 v16 = sub_250F7019C();
  return sub_250FB26F0(v16 & 1, a2, a3);
}

uint64_t sub_250FB26F0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  int v81 = a1;
  uint64_t v5 = (int *)type metadata accessor for BalanceWidgetTimelineProvider();
  uint64_t v79 = *((void *)v5 - 1);
  MEMORY[0x270FA5388](v5);
  uint64_t v80 = v6;
  uint64_t v90 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250FB6180(0, &qword_26B210BE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v89 = (uint64_t)&v67 - v9;
  uint64_t v10 = sub_2510374E0();
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v77 = v10;
  MEMORY[0x270FA5388](v10);
  os_log_type_t v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB6180(0, &qword_26B210A78, MEMORY[0x263F07490], v7);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v73 = (char *)&v67 - v14;
  uint64_t v15 = sub_2510376B0();
  uint64_t v88 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v88 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v87 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v67 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v67 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v91 = (char *)&v67 - v24;
  uint64_t v78 = sub_251037400();
  uint64_t v72 = *(void *)(v78 - 8);
  uint64_t v25 = *(void *)(v72 + 64);
  MEMORY[0x270FA5388](v78);
  uint64_t v85 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  unsigned int v84 = (char *)&v67 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v68 = (char *)&v67 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v86 = (char *)&v67 - v31;
  double v33 = MEMORY[0x270FA5388](v32);
  double v35 = (char *)&v67 - v34;
  uint64_t v36 = (*(uint64_t (**)(double))(v3 + v5[8]))(v33);
  if (*(unsigned char *)(v3 + v5[7]))
  {
    sub_251037670();
    uint64_t v37 = v88;
  }
  else
  {
    if ((*(uint64_t (**)(uint64_t))(v3 + v5[9]))(v36)) {
      sub_251037670();
    }
    else {
      sub_2510376A0();
    }
    uint64_t v37 = v88;
    (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v22, v19, v15);
  }
  sub_250FB3B00((uint64_t)v22, (uint64_t)v91);
  uint64_t v74 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v75 = v37 + 8;
  v74(v22, v15);
  uint64_t v71 = v4;
  uint64_t v39 = v76;
  uint64_t v38 = v77;
  (*(void (**)(char *, void, uint64_t))(v76 + 104))(v12, *MEMORY[0x263F07870], v77);
  uint64_t v40 = v73;
  sub_2510374D0();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v38);
  uint64_t v41 = v72;
  uint64_t v42 = (uint64_t)v40;
  uint64_t v43 = v40;
  uint64_t v44 = v78;
  uint64_t v45 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v43, 1, v78) == 1)
  {
    sub_250FB5918(v42, &qword_26B210A78, MEMORY[0x263F07490]);
    double v46 = v86;
    (*(void (**)(void))(v41 + 16))();
  }
  else
  {
    double v47 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v68, v42, v44);
    double v46 = v86;
    sub_251037490();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v44);
  }
  uint64_t v70 = v35;
  uint64_t v48 = sub_251039300();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v89, 1, 1, v48);
  sub_250FB607C(v71, v90, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineProvider);
  uint64_t v49 = v88;
  CGFloat v50 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 16);
  uint64_t v69 = v45;
  v50(v87, (uint64_t)v91, v45);
  uint64_t v51 = v41;
  CGFloat v52 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v52(v84, v35, v44);
  v52(v85, v46, v44);
  unint64_t v53 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
  uint64_t v54 = v44;
  unint64_t v55 = (v80 + *(unsigned __int8 *)(v49 + 80) + v53) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v56 = v55 + v16;
  uint64_t v57 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v58 = (v57 + v56 + 1) & ~v57;
  uint64_t v59 = (v25 + v57 + v58) & ~v57;
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = 0;
  *(void *)(v60 + 24) = 0;
  sub_250FB6014(v90, v60 + v53, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineProvider);
  uint64_t v61 = v69;
  (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(v60 + v55, v87, v69);
  *(unsigned char *)(v60 + v56) = v81 & 1;
  uint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
  v62(v60 + v58, v84, v54);
  v62(v60 + v59, v85, v54);
  uint64_t v63 = (void *)(v60 + ((v25 + v59 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v64 = v83;
  void *v63 = v82;
  v63[1] = v64;
  swift_retain();
  sub_250FB1C40(v89, (uint64_t)&unk_269B141B0, v60);
  swift_release();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v51 + 8);
  v65(v86, v54);
  v74(v91, v61);
  return ((uint64_t (*)(char *, uint64_t))v65)(v70, v54);
}

uint64_t sub_250FB2F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_251037C90();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251037C70();
  os_log_type_t v12 = sub_251037C80();
  os_log_type_t v13 = sub_2510393D0();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v22 = v4;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v20 = v8;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = v16;
    uint64_t v21 = a2;
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v23 = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v24);
    a2 = v21;
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v12, v13, "[%{public}s] fetching timeline", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v16, -1, -1);
    MEMORY[0x253391D80](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v20);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  swift_retain();
  sub_250FB24B8(a1, (uint64_t)sub_250FB60E4, v17);
  return swift_release();
}

uint64_t sub_250FB31B4(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v31 = a1;
  uint64_t v5 = sub_251038FD0();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB60EC();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v30 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_251037C90();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251037C70();
  uint64_t v16 = sub_251037C80();
  os_log_type_t v17 = sub_2510393D0();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v28[2] = a3;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v29 = a2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    v28[0] = v12;
    uint64_t v21 = v20;
    uint64_t v33 = v20;
    v28[1] = v7;
    *(_DWORD *)uint64_t v19 = 136446210;
    uint64_t v32 = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v33);
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v16, v17, "[%{public}s] returning timeline", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v21, -1, -1);
    uint64_t v22 = v19;
    a2 = v29;
    MEMORY[0x253391D80](v22, -1, -1);

    (*(void (**)(char *, void))(v13 + 8))(v15, v28[0]);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  sub_250FB6180(0, &qword_269B141D0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry, MEMORY[0x263F8E0F8]);
  uint64_t v23 = *(void *)(type metadata accessor for BalanceWidgetTimelineEntry() - 8);
  unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_25103AD40;
  sub_250FB607C(v31, v25 + v24, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
  sub_251038FC0();
  sub_250FB5F6C(qword_269B14188, (void (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry);
  uint64_t v26 = v30;
  sub_251039010();
  a2(v26);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v26, v9);
}

uint64_t sub_250FB35F4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = type metadata accessor for BalanceWidgetTimelineEntry();
  v2[6] = swift_task_alloc();
  uint64_t v3 = sub_251037C90();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_250FB36E4, 0, 0);
}

uint64_t sub_250FB36E4()
{
  uint64_t v18 = v0;
  sub_251037C70();
  uint64_t v1 = sub_251037C80();
  os_log_type_t v2 = sub_2510393D0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[8];
    uint64_t v3 = v0[9];
    uint64_t v5 = v0[7];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v17 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[2] = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v17);
    sub_2510394A0();
    _os_log_impl(&dword_250F1E000, v1, v2, "[%{public}s] returning widget relevance", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v7, -1, -1);
    MEMORY[0x253391D80](v6, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v11 = v0[4];
  uint64_t v12 = swift_task_alloc();
  v0[10] = v12;
  *(void *)(v12 + 16) = v11;
  *(unsigned char *)(v12 + 24) = 1;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[11] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_250FB394C;
  uint64_t v15 = v0[5];
  uint64_t v14 = v0[6];
  return MEMORY[0x270FA2318](v14, 0, 0, 0xD000000000000029, 0x80000002510409D0, sub_250FB55D0, v12, v15);
}

uint64_t sub_250FB394C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_250FB3A64, 0, 0);
}

uint64_t sub_250FB3A64()
{
  uint64_t v1 = v0[6];
  sub_250F704C0(v1, v0[3]);
  sub_250FB5FB4(v1, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_250FB3B00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v76 = a1;
  uint64_t v2 = sub_2510374F0();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v69 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB5F04();
  uint64_t v67 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v68 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v66 = (char *)&v61 - v7;
  sub_250F326B0();
  uint64_t v73 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v65 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v71 = (uint64_t)&v61 - v11;
  uint64_t v12 = sub_251038ED0();
  uint64_t v70 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (void (*)(char *, uint64_t))((char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v72 = (char *)&v61 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v74 = (char *)&v61 - v18;
  uint64_t v19 = sub_251037C90();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510391C0();
  id v23 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  unint64_t v24 = (void *)sub_251039190();
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v23, sel_initWithSuiteName_, v24);

  if (v25)
  {
    uint64_t v26 = (void *)sub_251039190();
    id v27 = objc_msgSend(v25, sel_integerForKey_, v26);

    uint64_t result = (uint64_t)objc_msgSend(self, sel_sharedBehavior);
    if (!result)
    {
LABEL_12:
      __break(1u);
      return result;
    }
    uint64_t v29 = (void *)result;
    unsigned int v30 = objc_msgSend((id)result, sel_isAppleInternalInstall);

    if (v30)
    {
      uint64_t v62 = (uint64_t)v27;
      sub_251037C70();
      uint64_t v31 = sub_251037C80();
      os_log_type_t v32 = sub_2510393D0();
      BOOL v33 = os_log_type_enabled(v31, v32);
      uint64_t v63 = v12;
      uint64_t v64 = v14;
      if (v33)
      {
        uint64_t v34 = swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        uint64_t v78 = v35;
        *(_DWORD *)uint64_t v34 = 136446466;
        uint64_t v77 = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v78);
        sub_2510394A0();
        *(_WORD *)(v34 + 12) = 2048;
        uint64_t v77 = v62;
        sub_2510394A0();
        _os_log_impl(&dword_250F1E000, v31, v32, "[%{public}s] applying days offset: %ld", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x253391D80](v35, -1, -1);
        MEMORY[0x253391D80](v34, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      uint64_t v36 = v70;
      uint64_t v42 = v71;
      sub_251037660();
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
      uint64_t v44 = v72;
      uint64_t v45 = v63;
      v43(v72, v42, v63);
      sub_250FB5FB4(v42, (uint64_t (*)(void))sub_250F326B0);
      sub_251038EB0();
      double v46 = *(void (**)(char *, uint64_t))(v36 + 8);
      v46(v44, v45);
      sub_251037660();
      double v47 = (char *)v64;
      v43((char *)v64, v42 + *(int *)(v73 + 36), v45);
      uint64_t v48 = v42;
      uint64_t v49 = v45;
      sub_250FB5FB4(v48, (uint64_t (*)(void))sub_250F326B0);
      sub_251038EB0();
      CGFloat v50 = v74;
      uint64_t v64 = v46;
      uint64_t v62 = v36 + 8;
      v46(v47, v49);
      sub_250FB5F6C(&qword_26B210BA0, MEMORY[0x263F090E8]);
      uint64_t result = sub_2510390C0();
      if (result)
      {
        uint64_t v51 = v67;
        CGFloat v52 = v44;
        uint64_t v53 = (uint64_t)v65;
        uint64_t v54 = v66;
        unint64_t v55 = &v66[*(int *)(v67 + 48)];
        v43(v66, (uint64_t)v50, v49);
        v43(v55, (uint64_t)v52, v49);
        uint64_t v56 = v68;
        uint64_t v57 = &v68[*(int *)(v51 + 48)];
        v43(v68, (uint64_t)v54, v49);
        v43(v57, (uint64_t)v55, v49);
        uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
        v58(v53, v56, v49);
        v64(v57, v49);
        uint64_t v59 = &v56[*(int *)(v51 + 48)];
        v58((uint64_t)v56, v54, v49);
        v58((uint64_t)v59, v55, v49);
        v58(v53 + *(int *)(v73 + 36), v59, v49);
        uint64_t v60 = v64;
        v64(v56, v49);
        sub_250FB6014(v53, v71, (uint64_t (*)(void))sub_250F326B0);
        sub_251037680();
        sub_251037650();
        v60(v72, v49);
        return ((uint64_t (*)(char *, uint64_t))v60)(v74, v49);
      }
      __break(1u);
      goto LABEL_12;
    }
  }
  uint64_t v37 = sub_2510376B0();
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
  uint64_t v39 = v37;
  uint64_t v40 = v75;
  uint64_t v41 = v76;
  return v38(v40, v41, v39);
}

uint64_t sub_250FB434C(uint64_t a1, uint64_t a2, int a3)
{
  sub_250FB57B0();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_250FB26F0(a3, (uint64_t)sub_250FB58A8, v11);
  return swift_release();
}

uint64_t sub_250FB4490(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BalanceWidgetTimelineEntry();
  MEMORY[0x270FA5388](v2 - 8);
  sub_250FB607C(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
  sub_250FB57B0();
  return sub_251039290();
}

uint64_t sub_250FB4538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 72) = v16;
  *(void *)(v8 + 80) = v17;
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a8;
  *(unsigned char *)(v8 + 288) = a6;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  uint64_t v9 = sub_251037C90();
  *(void *)(v8 + 88) = v9;
  *(void *)(v8 + 96) = *(void *)(v9 - 8);
  *(void *)(v8 + 104) = swift_task_alloc();
  *(void *)(v8 + 112) = type metadata accessor for BalanceWidgetTimelineEntry();
  *(void *)(v8 + 120) = swift_task_alloc();
  uint64_t v10 = sub_2510375C0();
  *(void *)(v8 + 128) = v10;
  *(void *)(v8 + 136) = *(void *)(v10 - 8);
  *(void *)(v8 + 144) = swift_task_alloc();
  sub_250FB6180(0, qword_26B210D00, MEMORY[0x263F42EF8], MEMORY[0x263F8D8F0]);
  *(void *)(v8 + 152) = swift_task_alloc();
  uint64_t v11 = sub_2510376B0();
  *(void *)(v8 + 160) = v11;
  *(void *)(v8 + 168) = *(void *)(v11 - 8);
  *(void *)(v8 + 176) = swift_task_alloc();
  *(void *)(v8 + 184) = swift_task_alloc();
  *(void *)(v8 + 192) = type metadata accessor for BalanceWidgetViewModel();
  *(void *)(v8 + 200) = swift_task_alloc();
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v12 = sub_2510379E0();
  *(void *)(v8 + 216) = v12;
  *(void *)(v8 + 224) = *(void *)(v12 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  uint64_t v13 = sub_2510379A0();
  *(void *)(v8 + 248) = v13;
  *(void *)(v8 + 256) = *(void *)(v13 - 8);
  *(void *)(v8 + 264) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_250FB4868, 0, 0);
}

uint64_t sub_250FB4868()
{
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_250FB491C;
  uint64_t v2 = *(void *)(v0 + 264);
  char v3 = *(unsigned char *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 48);
  return BalanceWidgetDataProvider.loadSummaries(for:isLiveContent:isRetrying:)(v2, v4, v3, 0);
}

uint64_t sub_250FB491C()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_250FB50FC;
  }
  else {
    uint64_t v2 = sub_250FB4A30;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_250FB4A30()
{
  uint64_t v62 = v0;
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 240);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
  sub_250F31E10(v2);
  uint64_t v3 = *(void *)(v0 + 264);
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 248));
    sub_251037C70();
    id v4 = v1;
    id v5 = v1;
    uint64_t v6 = sub_251037C80();
    os_log_type_t v7 = sub_2510393B0();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 88);
    if (v8)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      v61[0] = v58;
      *(_DWORD *)uint64_t v12 = 136446466;
      *(void *)(v0 + 16) = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, v61);
      sub_2510394A0();
      *(_WORD *)(v12 + 12) = 2082;
      *(void *)(v0 + 24) = v1;
      id v13 = v1;
      sub_250F32D94();
      uint64_t v14 = sub_2510391E0();
      *(void *)(v0 + 32) = sub_250F32744(v14, v15, v61);
      sub_2510394A0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_250F1E000, v6, v7, "[%{public}s] error while fetching day summaries: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v58, -1, -1);
      MEMORY[0x253391D80](v12, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    uint64_t v29 = *(void *)(v0 + 120);
    unsigned int v30 = *(void (**)(uint64_t))(v0 + 72);
    uint64_t v32 = *(void *)(v0 + 56);
    uint64_t v31 = *(void *)(v0 + 64);
    uint64_t v33 = *(void *)(v0 + 40);
    uint64_t v34 = type metadata accessor for BalanceWidgetTimelineProvider();
    uint64_t v35 = *(int *)(v34 + 28);
    uint64_t v36 = v33 + *(int *)(v34 + 24);
    LOBYTE(v61[0]) = *(unsigned char *)(v33 + v35);
    sub_250F26310(v36, (unsigned __int8 *)v61, v32, v31, v29);
    v30(v29);

    sub_250FB5FB4(v29, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 224);
    uint64_t v54 = *(void *)(v0 + 208);
    uint64_t v19 = *(void *)(v0 + 184);
    uint64_t v49 = *(void *)(v0 + 192);
    uint64_t v40 = *(void *)(v0 + 176);
    uint64_t v41 = *(void *)(v0 + 216);
    uint64_t v44 = *(void *)(v0 + 168);
    uint64_t v45 = *(void *)(v0 + 200);
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v46 = *(void *)(v0 + 144);
    uint64_t v47 = *(void *)(v0 + 136);
    uint64_t v48 = *(void *)(v0 + 128);
    uint64_t v50 = *(void *)(v0 + 120);
    uint64_t v51 = *(void *)(v0 + 152);
    uint64_t v53 = *(int **)(v0 + 112);
    uint64_t v57 = *(void (**)(uint64_t))(v0 + 72);
    uint64_t v56 = *(void *)(v0 + 64);
    uint64_t v55 = *(void *)(v0 + 56);
    uint64_t v60 = *(void *)(v0 + 248);
    uint64_t v21 = *(void *)(v0 + 40);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
    uint64_t v43 = *(void *)(v0 + 256);
    v22(v19, *(void *)(v0 + 48), v20);
    uint64_t v59 = v3;
    uint64_t v39 = sub_251037970();
    char v42 = *(unsigned char *)(v21 + *(int *)(type metadata accessor for BalanceWidgetTimelineProvider() + 28));
    id v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v23(v17, v16, v41);
    v22(v40, v19, v20);
    v23(v51, v17, v41);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v51, 0, 1, v41);
    OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)(v40, v39, v51, v45);
    sub_2510375B0();
    CGFloat v52 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v52(v17, v41);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v19, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v45 + *(int *)(v49 + 20), v46, v48);
    *(unsigned char *)(v45 + *(int *)(v49 + 24)) = v42;
    sub_250FB6014(v45, v54, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    sub_250FB607C(v54, v50, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    uint64_t v24 = v50 + v53[5];
    uint64_t v25 = sub_251037400();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16);
    v26(v24, v55, v25);
    uint64_t v27 = v50 + v53[6];
    sub_250F702D0();
    uint64_t v28 = sub_251038FF0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
    v26(v50 + v53[7], v56, v25);
    v57(v50);
    sub_250FB5FB4(v50, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
    sub_250FB5FB4(v54, (uint64_t (*)(void))type metadata accessor for BalanceWidgetViewModel);
    v52(v16, v41);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v59, v60);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_250FB50FC()
{
  uint64_t v29 = v0;
  uint64_t v1 = (void *)v0[35];
  sub_251037C70();
  id v2 = v1;
  id v3 = v1;
  id v4 = sub_251037C80();
  os_log_type_t v5 = sub_2510393B0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[12];
    uint64_t v26 = v0[13];
    uint64_t v7 = v0[11];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v28 = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    v0[2] = sub_250F32744(0xD00000000000001DLL, 0x800000025103D070, &v28);
    sub_2510394A0();
    *(_WORD *)(v8 + 12) = 2082;
    v0[3] = v1;
    id v10 = v1;
    sub_250F32D94();
    uint64_t v11 = sub_2510391E0();
    v0[4] = sub_250F32744(v11, v12, &v28);
    sub_2510394A0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_250F1E000, v4, v5, "[%{public}s] error while fetching day summaries: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x253391D80](v9, -1, -1);
    MEMORY[0x253391D80](v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v26, v7);
  }
  else
  {
    uint64_t v14 = v0[12];
    uint64_t v13 = v0[13];
    uint64_t v15 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  uint64_t v16 = v0[15];
  uint64_t v17 = (void (*)(uint64_t))v0[9];
  uint64_t v19 = v0[7];
  uint64_t v18 = v0[8];
  uint64_t v20 = v0[5];
  uint64_t v21 = type metadata accessor for BalanceWidgetTimelineProvider();
  uint64_t v22 = *(int *)(v21 + 28);
  uint64_t v23 = v20 + *(int *)(v21 + 24);
  unsigned __int8 v27 = *(unsigned char *)(v20 + v22);
  sub_250F26310(v23, &v27, v19, v18, v16);
  v17(v16);

  sub_250FB5FB4(v16, (uint64_t (*)(void))type metadata accessor for BalanceWidgetTimelineEntry);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_250FB543C(uint64_t a1)
{
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_250F99B68;
  return sub_250FB35F4(a1);
}

uint64_t sub_250FB54D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_250F99B68;
  return MEMORY[0x270F07728](a1, a2, a3);
}

uint64_t sub_250FB5588()
{
  return sub_250FB5F6C(qword_269B14188, (void (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry);
}

uint64_t sub_250FB55D0(uint64_t a1)
{
  return sub_250FB434C(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_250FB55DC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = sub_250FB56B8;
  return v6(a1);
}

uint64_t sub_250FB56B8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_250FB57B0()
{
  if (!qword_26B2102F0)
  {
    type metadata accessor for BalanceWidgetTimelineEntry();
    unint64_t v0 = sub_2510392A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2102F0);
    }
  }
}

uint64_t sub_250FB5818()
{
  sub_250FB57B0();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_250FB58A8(uint64_t a1)
{
  sub_250FB57B0();
  return sub_250FB4490(a1);
}

uint64_t sub_250FB5918(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250FB6180(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250FB5988()
{
  uint64_t v1 = (int *)(type metadata accessor for BalanceWidgetTimelineProvider() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v17 = sub_2510376B0();
  uint64_t v4 = *(void *)(v17 - 8);
  unint64_t v16 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = sub_251037400();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + v16 + 1) & ~v8;
  uint64_t v10 = (*(void *)(v7 + 64) + v8 + v9) & ~v8;
  swift_unknownObjectRelease();
  uint64_t v11 = v0 + v2;
  __swift_destroy_boxed_opaque_existential_0(v11);
  uint64_t v12 = v11 + v1[8];
  uint64_t v13 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v16, v17);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14(v0 + v9, v6);
  v14(v0 + v10, v6);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250FB5BF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BalanceWidgetTimelineProvider() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(sub_2510376B0() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_251037400() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v8 + v10 + 1) & ~v10;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  char v14 = *(unsigned char *)(v1 + v8);
  uint64_t v15 = v1 + v11;
  uint64_t v16 = v1 + ((*(void *)(v9 + 64) + v10 + v11) & ~v10);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = sub_250F98D54;
  return sub_250FB4538(a1, v12, v13, v1 + v4, v1 + v7, v14, v15, v16);
}

uint64_t sub_250FB5E14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_250FB5E4C(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_250F98D54;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_269B141B8 + dword_269B141B8);
  return v6(a1, v4);
}

void sub_250FB5F04()
{
  if (!qword_26B2102E0)
  {
    sub_251038ED0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B2102E0);
    }
  }
}

uint64_t sub_250FB5F6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FB5FB4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FB6014(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250FB607C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250FB60E4(uint64_t a1)
{
  return sub_250FB31B4(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

void sub_250FB60EC()
{
  if (!qword_269B141C8)
  {
    type metadata accessor for BalanceWidgetTimelineEntry();
    sub_250FB5F6C(qword_269B14188, (void (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry);
    unint64_t v0 = sub_251039020();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B141C8);
    }
  }
}

void sub_250FB6180(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250FB61E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_250FB624C@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  sub_250F805C8();
  uint64_t v76 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v72 = (char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v69 = (char *)v63 - v7;
  sub_250F49D48(0);
  uint64_t v70 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v71 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2510374E0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB7600(0, &qword_26B210A78, MEMORY[0x263F07490]);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v66 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v63 - v17;
  uint64_t v19 = sub_251037400();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v64 = (char *)v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v74 = (char *)v63 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)v63 - v25;
  uint64_t v68 = a1;
  sub_251037490();
  unsigned __int8 v27 = *(void (**)(char *, void, uint64_t))(v11 + 104);
  v27(v13, *MEMORY[0x263F07870], v10);
  uint64_t v75 = v26;
  uint64_t v67 = v2;
  sub_2510374D0();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v65 = v10;
  v28(v13, v10);
  uint64_t v77 = v20;
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v29(v18, 1, v19) == 1)
  {
    uint64_t v30 = (uint64_t)v18;
    uint64_t v31 = (void *)v77;
LABEL_5:
    uint64_t v33 = v75;
    sub_250FB7654(v30, &qword_26B210A78, MEMORY[0x263F07490]);
    sub_250F23584();
    uint64_t v34 = v68;
    uint64_t result = sub_2510390C0();
    if (result)
    {
      uint64_t v36 = v76;
      uint64_t v37 = v69;
      uint64_t v38 = &v69[*(int *)(v76 + 48)];
      uint64_t v39 = (void (*)(char *, char *, uint64_t))v31[4];
      v39(v69, v33, v19);
      uint64_t v40 = (void (*)(char *, void (*)(void, void), uint64_t))v31[2];
      uint64_t v75 = v38;
      v40(v38, (void (*)(void, void))v34, v19);
      uint64_t v41 = v72;
      char v42 = &v72[*(int *)(v36 + 48)];
      v40(v72, (void (*)(void, void))v37, v19);
      v40(v42, (void (*)(void, void))v38, v19);
      uint64_t v43 = (uint64_t)v71;
      v39(v71, v41, v19);
      uint64_t v44 = (void (*)(char *, uint64_t))v31[1];
      v44(v42, v19);
      uint64_t v45 = &v41[*(int *)(v76 + 48)];
      v39(v41, v37, v19);
      v39(v45, v75, v19);
      v39((char *)(v43 + *(int *)(v70 + 36)), v45, v19);
      v44(v41, v19);
      return sub_250F8E3A0(v43, v73);
    }
    __break(1u);
    goto LABEL_11;
  }
  v63[0] = *(void *)(v77 + 32);
  v63[1] = v77 + 32;
  ((void (*)(char *, char *, uint64_t))v63[0])(v74, v18, v19);
  uint64_t v32 = v65;
  v27(v13, *MEMORY[0x263F078C8], v65);
  uint64_t v30 = (uint64_t)v66;
  sub_2510374D0();
  v28(v13, v32);
  if (v29((char *)v30, 1, v19) == 1)
  {
    uint64_t v31 = (void *)v77;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v74, v19);
    goto LABEL_5;
  }
  uint64_t v46 = v64;
  ((void (*)(char *, uint64_t, uint64_t))v63[0])(v64, v30, v19);
  sub_250F23584();
  uint64_t v47 = v75;
  char v48 = sub_2510390C0();
  uint64_t v50 = (char *)(v77 + 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t))(v77 + 8);
  uint64_t result = v49(v74, v19);
  if (v48)
  {
    uint64_t v51 = v76;
    CGFloat v52 = v69;
    uint64_t v53 = &v69[*(int *)(v76 + 48)];
    uint64_t v54 = (void (*)(char *, char *, uint64_t))v63[0];
    ((void (*)(char *, char *, uint64_t))v63[0])(v69, v47, v19);
    uint64_t v74 = v53;
    uint64_t v75 = v50;
    uint64_t v55 = v53;
    v54(v53, v46, v19);
    uint64_t v56 = *(int *)(v51 + 48);
    uint64_t v57 = v72;
    uint64_t v68 = v49;
    uint64_t v58 = &v72[v56];
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v59(v72, v52, v19);
    v59(v58, v55, v19);
    uint64_t v60 = v71;
    v54(v71, v57, v19);
    uint64_t v61 = (void (*)(char *, uint64_t))v68;
    v68(v58, v19);
    uint64_t v62 = &v57[*(int *)(v51 + 48)];
    v54(v57, v52, v19);
    v54(v62, v74, v19);
    v54(&v60[*(int *)(v70 + 36)], v62, v19);
    v61(v57, v19);
    uint64_t v43 = (uint64_t)v60;
    return sub_250F8E3A0(v43, v73);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_250FB69C0@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  sub_250F805C8();
  uint64_t v58 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v56 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v54 = (char *)&v51 - v7;
  sub_250F49D48(0);
  uint64_t v67 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v55 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2510374E0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB7600(0, &qword_26B210A78, MEMORY[0x263F07490]);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v64 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v51 - v17;
  uint64_t v19 = sub_251037400();
  uint64_t v20 = *(void **)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v57 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v61 = (char *)&v51 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  unsigned __int8 v27 = (char *)&v51 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v51 - v28;
  sub_251037490();
  uint64_t v65 = a1;
  sub_251037490();
  uint64_t v30 = *MEMORY[0x263F07870];
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v60(v13, v30, v10);
  uint64_t v63 = v2;
  sub_2510374D0();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v62 = v11 + 8;
  uint64_t v59 = v31;
  v31(v13, v10);
  uint64_t v68 = v20;
  uint64_t v32 = (unsigned int (*)(char *, uint64_t, uint64_t))v20[6];
  if (v32(v18, 1, v19) == 1)
  {
    uint64_t v33 = (void (*)(char *, uint64_t))v68[1];
    v33(v27, v19);
    uint64_t v34 = v29;
LABEL_5:
    v33(v34, v19);
    sub_250FB7654((uint64_t)v18, &qword_26B210A78, MEMORY[0x263F07490]);
    return sub_250F609C8((uint64_t)v65, v66);
  }
  CGFloat v52 = v27;
  uint64_t v53 = v29;
  uint64_t v35 = v61;
  uint64_t v51 = (void (*)(char *, char *, uint64_t))v68[4];
  v51(v61, v18, v19);
  v60(v13, *MEMORY[0x263F078C8], v10);
  uint64_t v18 = v64;
  sub_2510374D0();
  v59(v13, v10);
  if (v32(v18, 1, v19) == 1)
  {
    uint64_t v33 = (void (*)(char *, uint64_t))v68[1];
    v33(v35, v19);
    v33(v52, v19);
    uint64_t v34 = v53;
    goto LABEL_5;
  }
  uint64_t v37 = v57;
  v51(v57, v18, v19);
  sub_250F23584();
  uint64_t v38 = v53;
  char v39 = sub_2510390C0();
  uint64_t v40 = (void (*)(char *, uint64_t))v68[1];
  v40(v35, v19);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v52, v19);
  if (v39)
  {
    uint64_t v65 = v40;
    uint64_t v41 = v58;
    char v42 = v54;
    uint64_t v43 = &v54[*(int *)(v58 + 48)];
    uint64_t v44 = v51;
    v51(v54, v38, v19);
    v44(v43, v37, v19);
    uint64_t v45 = v56;
    uint64_t v46 = &v56[*(int *)(v41 + 48)];
    uint64_t v47 = (void (*)(char *, char *, uint64_t))v68[2];
    v47(v56, v42, v19);
    v47(v46, v43, v19);
    uint64_t v48 = (uint64_t)v55;
    v44(v55, v45, v19);
    uint64_t v49 = v65;
    v65(v46, v19);
    uint64_t v50 = &v45[*(int *)(v58 + 48)];
    v44(v45, v42, v19);
    v44(v50, v43, v19);
    v44((char *)(v48 + *(int *)(v67 + 36)), v50, v19);
    v49(v45, v19);
    return sub_250F8E3A0(v48, v66);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_250FB706C(uint64_t a1)
{
  uint64_t v2 = sub_251037C90();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  MEMORY[0x270FA5388](v2);
  char v39 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2510374E0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB7600(0, &qword_26B210A50, MEMORY[0x263F062D0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = sub_2510370F0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_251037400();
  uint64_t v16 = ((uint64_t (*)(uint64_t))MEMORY[0x270FA5388])(v15);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  if (a1 < 1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v34 = v17;
  uint64_t v35 = v16;
  uint64_t v20 = v19;
  sub_251037490();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F07870], v4);
  sub_2510374A0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_250FB7654((uint64_t)v10, &qword_26B210A50, MEMORY[0x263F062D0]);
    uint64_t v21 = v39;
    sub_251037C70();
    uint64_t v22 = sub_251037C80();
    os_log_type_t v23 = sub_2510393B0();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v26 = v37;
    uint64_t v25 = v38;
    if (v24)
    {
      unsigned __int8 v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v41 = v28;
      *(_DWORD *)unsigned __int8 v27 = 136315138;
      uint64_t v40 = sub_250F32744(0x7261646E656C6143, 0xE800000000000000, &v41);
      sub_2510394A0();
      _os_log_impl(&dword_250F1E000, v22, v23, "[%s] Unable to compute day date interval; returning no dates",
        v27,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x253391D80](v28, -1, -1);
      MEMORY[0x253391D80](v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v26 + 8))(v39, v25);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v25);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v35);
    return MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  uint64_t v29 = sub_2510370E0();
  double v30 = MEMORY[0x270FA5388](v29);
  *(&v34 - 2) = (uint64_t)v20;
  *((double *)&v34 - 1) = v30;
  uint64_t v32 = sub_250FED32C((void (*)(uint64_t *))sub_250FB75B8, (uint64_t)(&v34 - 4), 0, v31);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v35);
  return v32;
}

uint64_t sub_250FB75B8()
{
  return sub_2510373C0();
}

void sub_250FB7600(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250FB7654(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_250FB7600(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_250FB76B0(long double a1)
{
  uint64_t v2 = v1;
  sub_250FB961C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v59 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v58 = (uint64_t)&v51 - v7;
  uint64_t v8 = sub_251038CB0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  CGFloat v52 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = *((void *)v1 + 1);
  char v61 = *v1;
  uint64_t v62 = v17;
  sub_250FF9DB8((uint64_t)&v51 - v15, (uint64_t)v13, a1);
  double v18 = fmod(a1, 1.0);
  char v19 = sub_250FB7C5C((uint64_t)v16);
  uint64_t v20 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
  if (v19) {
    uint64_t v21 = 8;
  }
  else {
    uint64_t v21 = 16;
  }
  uint64_t v22 = *(void *)&v1[*(int *)(v20 + 32) + v21];
  swift_retain();
  uint64_t v60 = v13;
  if (sub_250FB7C5C((uint64_t)v13)) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = 16;
  }
  uint64_t v24 = *(void *)&v1[*(int *)(v20 + 32) + v23];
  swift_retain();
  char v25 = sub_251038A70();
  uint64_t v56 = v24;
  if ((v25 & 1) != 0 || v18 == 0.0)
  {
    swift_retain();
    uint64_t v55 = v22;
  }
  else if (v18 == 1.0)
  {
    swift_retain();
    uint64_t v55 = v24;
  }
  else
  {
    uint64_t v26 = v52;
    sub_251038CA0();
    uint64_t v55 = sub_251038A80();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v26, v8);
  }
  char v27 = sub_250FB8250((uint64_t)v16);
  uint64_t v28 = (uint64_t *)&v2[*(int *)(v20 + 32)];
  if ((v27 & 1) == 0) {
    v28 += 2;
  }
  uint64_t v29 = *v28;
  swift_retain();
  char v30 = sub_250FB8250((uint64_t)v60);
  uint64_t v31 = (uint64_t *)&v2[*(int *)(v20 + 32)];
  if ((v30 & 1) == 0) {
    v31 += 2;
  }
  uint64_t v32 = *v31;
  swift_retain();
  char v33 = sub_251038A70();
  uint64_t v51 = v9;
  uint64_t v57 = v22;
  if ((v33 & 1) != 0 || v18 == 0.0)
  {
    uint64_t v34 = v8;
    swift_retain();
    uint64_t v54 = v29;
  }
  else if (v18 == 1.0)
  {
    uint64_t v34 = v8;
    swift_retain();
    uint64_t v54 = v32;
  }
  else
  {
    uint64_t v35 = v52;
    sub_251038CA0();
    uint64_t v54 = sub_251038A80();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v34 = v8;
    v36(v35, v8);
  }
  if (sub_250FB87F8((uint64_t)v16)) {
    uint64_t v37 = 8;
  }
  else {
    uint64_t v37 = 16;
  }
  uint64_t v38 = *(void *)&v2[*(int *)(v20 + 32) + v37];
  swift_retain();
  if (sub_250FB87F8((uint64_t)v60)) {
    uint64_t v39 = 8;
  }
  else {
    uint64_t v39 = 16;
  }
  uint64_t v40 = *(void *)&v2[*(int *)(v20 + 32) + v39];
  swift_retain();
  char v41 = sub_251038A70();
  uint64_t v53 = v29;
  if ((v41 & 1) != 0 || v18 == 0.0)
  {
    swift_retain();
    uint64_t v42 = v38;
  }
  else if (v18 == 1.0)
  {
    swift_retain();
    uint64_t v42 = v40;
  }
  else
  {
    uint64_t v43 = v52;
    sub_251038CA0();
    uint64_t v42 = sub_251038A80();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v34);
  }
  uint64_t v44 = &v2[*(int *)(v20 + 36)];
  if (*v2) {
    v44 += *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  }
  uint64_t v45 = (uint64_t)v44;
  uint64_t v46 = v59;
  sub_250F609C8(v45, v59);
  uint64_t v47 = v58;
  sub_250F8E3A0(v46, v58);
  char v48 = sub_250FB8250((uint64_t)v16);
  unint64_t v49 = sub_250FCABA4(v47, v55, v54, v42, v48 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_250F60A2C(v47);
  sub_250FB8DA0((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_250FB8DA0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  return v49;
}

uint64_t sub_250FB7C5C(uint64_t a1)
{
  uint64_t v3 = sub_2510378C0();
  uint64_t v47 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v46 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6CD98();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB8E00();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = *v1;
  uint64_t v19 = (uint64_t)&v16[*(int *)(v18 + 56)];
  *uint64_t v16 = *v1;
  sub_250FB8E68(a1, v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  if ((v17 & 1) == 0)
  {
    uint64_t v28 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
    sub_250FB8E68((uint64_t)&v1[*(int *)(v28 + 24)], (uint64_t)v13, (uint64_t (*)(void))sub_250F6CD98);
    uint64_t v29 = type metadata accessor for OvernightMetricsChartPoint();
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v13, 1, v29);
    uint64_t v31 = (uint64_t (*)(void))sub_250F6CD98;
    if (v30 == 1)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = v13[*(int *)(v29 + 28)];
      uint64_t v31 = (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint;
    }
    sub_250FB8DA0((uint64_t)v13, v31);
    sub_250FB8DA0(v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
    return v21;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v19, 1, v8) != 1)
  {
    uint64_t v32 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v19, v8);
    char v33 = &v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
    if (*(void *)(*(void *)&v33[*(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24)]
                   + 16)
      && (sub_250FCB6DC(v32), (v34 & 1) != 0))
    {
      uint64_t v35 = swift_bridgeObjectRetain();
      uint64_t v36 = *(void *)(v35 + 16);
      if (!v36)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        uint64_t v21 = 0;
LABEL_23:
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v32, v8);
        return v21;
      }
    }
    else
    {
      uint64_t v35 = MEMORY[0x263F8EE78];
      uint64_t v36 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (!v36) {
        goto LABEL_13;
      }
    }
    uint64_t v44 = v9;
    uint64_t v45 = v8;
    uint64_t v37 = v35 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    uint64_t v38 = *MEMORY[0x263F42E20];
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v47 + 104);
    uint64_t v40 = (void (**)(char *, uint64_t))(v47 + 8);
    uint64_t v41 = *(void *)(v46 + 72);
    uint64_t v47 = v35;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_250FB8E68(v37, (uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      (*v39)(v5, v38, v3);
      char v42 = sub_2510378B0();
      (*v40)(v5, v3);
      sub_250FB8DA0((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      if (v42) {
        break;
      }
      v37 += v41;
      if (!--v36)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v21 = 0;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v21 = 1;
LABEL_22:
    uint64_t v9 = v44;
    uint64_t v8 = v45;
    uint64_t v32 = (uint64_t)v48;
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)&v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(void *)(v23 + 72);
    char v25 = (unsigned __int8 *)(v20
                            + *(int *)(v22 + 28)
                            + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)));
    uint64_t v26 = v21 - 1;
    do
    {
      uint64_t v21 = *v25;
      if (v21) {
        break;
      }
      uint64_t v27 = v26--;
      v25 += v24;
    }
    while (v27);
  }
  return v21;
}

uint64_t type metadata accessor for OvernightMetricsChartBaselineBandColorValues()
{
  uint64_t result = qword_269B141E0;
  if (!qword_269B141E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250FB8250(uint64_t a1)
{
  uint64_t v3 = sub_2510378C0();
  uint64_t v47 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v46 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6CD98();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB8E00();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = *v1;
  uint64_t v19 = (uint64_t)&v16[*(int *)(v18 + 56)];
  *uint64_t v16 = *v1;
  sub_250FB8E68(a1, v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  if ((v17 & 1) == 0)
  {
    uint64_t v28 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
    sub_250FB8E68((uint64_t)&v1[*(int *)(v28 + 24)], (uint64_t)v13, (uint64_t (*)(void))sub_250F6CD98);
    uint64_t v29 = type metadata accessor for OvernightMetricsChartPoint();
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v13, 1, v29);
    uint64_t v31 = (uint64_t (*)(void))sub_250F6CD98;
    if (v30 == 1)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = v13[*(int *)(v29 + 32)];
      uint64_t v31 = (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint;
    }
    sub_250FB8DA0((uint64_t)v13, v31);
    sub_250FB8DA0(v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
    return v21;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v19, 1, v8) != 1)
  {
    uint64_t v32 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v19, v8);
    char v33 = &v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
    if (*(void *)(*(void *)&v33[*(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24)]
                   + 16)
      && (sub_250FCB6DC(v32), (v34 & 1) != 0))
    {
      uint64_t v35 = swift_bridgeObjectRetain();
      uint64_t v36 = *(void *)(v35 + 16);
      if (!v36)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        uint64_t v21 = 0;
LABEL_23:
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v32, v8);
        return v21;
      }
    }
    else
    {
      uint64_t v35 = MEMORY[0x263F8EE78];
      uint64_t v36 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (!v36) {
        goto LABEL_13;
      }
    }
    uint64_t v44 = v9;
    uint64_t v45 = v8;
    uint64_t v37 = v35 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    uint64_t v38 = *MEMORY[0x263F42E28];
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v47 + 104);
    uint64_t v40 = (void (**)(char *, uint64_t))(v47 + 8);
    uint64_t v41 = *(void *)(v46 + 72);
    uint64_t v47 = v35;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_250FB8E68(v37, (uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      (*v39)(v5, v38, v3);
      char v42 = sub_2510378B0();
      (*v40)(v5, v3);
      sub_250FB8DA0((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      if (v42) {
        break;
      }
      v37 += v41;
      if (!--v36)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v21 = 0;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v21 = 1;
LABEL_22:
    uint64_t v9 = v44;
    uint64_t v8 = v45;
    uint64_t v32 = (uint64_t)v48;
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)&v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(void *)(v23 + 72);
    char v25 = (unsigned __int8 *)(v20
                            + *(int *)(v22 + 32)
                            + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)));
    uint64_t v26 = v21 - 1;
    do
    {
      uint64_t v21 = *v25;
      if (v21) {
        break;
      }
      uint64_t v27 = v26--;
      v25 += v24;
    }
    while (v27);
  }
  return v21;
}

uint64_t sub_250FB87F8(uint64_t a1)
{
  uint64_t v3 = sub_2510378C0();
  uint64_t v47 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v46 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_251037740();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250F6CD98();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FB8E00();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = *v1;
  uint64_t v19 = (uint64_t)&v16[*(int *)(v18 + 56)];
  *uint64_t v16 = *v1;
  sub_250FB8E68(a1, v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  if ((v17 & 1) == 0)
  {
    uint64_t v28 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
    sub_250FB8E68((uint64_t)&v1[*(int *)(v28 + 24)], (uint64_t)v13, (uint64_t (*)(void))sub_250F6CD98);
    uint64_t v29 = type metadata accessor for OvernightMetricsChartPoint();
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v13, 1, v29);
    uint64_t v31 = (uint64_t (*)(void))sub_250F6CD98;
    if (v30 == 1)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = v13[*(int *)(v29 + 36)];
      uint64_t v31 = (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint;
    }
    sub_250FB8DA0((uint64_t)v13, v31);
    sub_250FB8DA0(v19, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
    return v21;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v19, 1, v8) != 1)
  {
    uint64_t v32 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v19, v8);
    char v33 = &v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
    if (*(void *)(*(void *)&v33[*(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24)]
                   + 16)
      && (sub_250FCB6DC(v32), (v34 & 1) != 0))
    {
      uint64_t v35 = swift_bridgeObjectRetain();
      uint64_t v36 = *(void *)(v35 + 16);
      if (!v36)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        uint64_t v21 = 0;
LABEL_23:
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v32, v8);
        return v21;
      }
    }
    else
    {
      uint64_t v35 = MEMORY[0x263F8EE78];
      uint64_t v36 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (!v36) {
        goto LABEL_13;
      }
    }
    uint64_t v44 = v9;
    uint64_t v45 = v8;
    uint64_t v37 = v35 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    uint64_t v38 = *MEMORY[0x263F42E18];
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v47 + 104);
    uint64_t v40 = (void (**)(char *, uint64_t))(v47 + 8);
    uint64_t v41 = *(void *)(v46 + 72);
    uint64_t v47 = v35;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_250FB8E68(v37, (uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      (*v39)(v5, v38, v3);
      char v42 = sub_2510378B0();
      (*v40)(v5, v3);
      sub_250FB8DA0((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      if (v42) {
        break;
      }
      v37 += v41;
      if (!--v36)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v21 = 0;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v21 = 1;
LABEL_22:
    uint64_t v9 = v44;
    uint64_t v8 = v45;
    uint64_t v32 = (uint64_t)v48;
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)&v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(void *)(v23 + 72);
    char v25 = (unsigned __int8 *)(v20
                            + *(int *)(v22 + 36)
                            + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)));
    uint64_t v26 = v21 - 1;
    do
    {
      uint64_t v21 = *v25;
      if (v21) {
        break;
      }
      uint64_t v27 = v26--;
      v25 += v24;
    }
    while (v27);
  }
  return v21;
}

uint64_t sub_250FB8DA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_250FB8E00()
{
  if (!qword_269B141D8)
  {
    type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B141D8);
    }
  }
}

uint64_t sub_250FB8E68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *sub_250FB8ED0(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v15 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v11 = *((void *)v10 - 1);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
    swift_bridgeObjectRetain();
    uint64_t v99 = v12;
    uint64_t v98 = v11;
    unint64_t v100 = v10;
    unint64_t v101 = v6;
    if (v12(v9, 1, v10))
    {
      sub_250F6CD98();
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v16 = sub_251037400();
      char v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      uint64_t v97 = v3;
      v17(v8, v9, v16);
      uint64_t v18 = v10[5];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      v17(&v8[v18], &v9[v18], v16);
      sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v16);
      uint64_t v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v19[v22[5]] = *(void *)&v20[v22[5]];
      *(void *)&v19[v22[6]] = *(void *)&v20[v22[6]];
      *(void *)&v19[v22[7]] = *(void *)&v20[v22[7]];
      uint64_t v23 = v10[6];
      uint64_t v24 = &v8[v23];
      char v25 = &v9[v23];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      uint64_t v26 = v10[10];
      uint64_t v27 = &v8[v26];
      uint64_t v28 = &v9[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      uint64_t v30 = v10[11];
      uint64_t v31 = &v8[v30];
      uint64_t v32 = &v9[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      char v34 = *(void (**)(char *, void, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v8, 0, 1, v10);
      uint64_t v6 = v101;
      uint64_t v3 = v97;
    }
    uint64_t v35 = v6[7];
    uint64_t v36 = (char *)a1 + v35;
    uint64_t v37 = v3;
    uint64_t v38 = (void *)((char *)v3 + v35);
    *(void *)((char *)a1 + v35) = *v38;
    uint64_t v39 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v40 = *(int *)(v39 + 20);
    uint64_t v41 = &v36[v40];
    char v42 = (char *)v38 + v40;
    uint64_t v43 = sub_2510374F0();
    uint64_t v102 = a1;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
    swift_bridgeObjectRetain();
    v44(v41, v42, v43);
    *(void *)&v36[*(int *)(v39 + 24)] = *(void *)((char *)v38 + *(int *)(v39 + 24));
    uint64_t v45 = v101[8];
    uint64_t v46 = v101[9];
    uint64_t v47 = (void *)((char *)v102 + v45);
    char v48 = (void *)((char *)v37 + v45);
    uint64_t v49 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v49;
    void v47[2] = v48[2];
    uint64_t v50 = (char *)v102 + v46;
    uint64_t v51 = (uint64_t)v37 + v46;
    uint64_t v52 = sub_251037400();
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    v53(v50, v51, v52);
    sub_250FB961C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v55 = v54;
    v53(&v50[*(int *)(v54 + 36)], v51 + *(int *)(v54 + 36), v52);
    uint64_t v56 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    uint64_t v57 = *(int *)(v56 + 20);
    uint64_t v58 = &v50[v57];
    uint64_t v59 = v51 + v57;
    v53(&v50[v57], v51 + v57, v52);
    v53(&v58[*(int *)(v55 + 36)], v59 + *(int *)(v55 + 36), v52);
    *(void *)&v50[*(int *)(v56 + 24)] = *(void *)(v51 + *(int *)(v56 + 24));
    uint64_t v60 = v101[10];
    char v61 = (char *)v102 + v60;
    uint64_t v62 = (uint64_t)v37 + v60;
    *(void *)((char *)v102 + v60) = *(void *)((char *)v37 + v60);
    uint64_t v63 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v64 = v63[5];
    uint64_t v65 = &v61[v64];
    uint64_t v66 = (char *)(v62 + v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v99(v66, 1, v100))
    {
      sub_250F6CD98();
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      v53(v65, (uint64_t)v66, v52);
      uint64_t v68 = v100[5];
      uint64_t v69 = &v65[v68];
      uint64_t v70 = &v66[v68];
      v53(&v65[v68], (uint64_t)&v66[v68], v52);
      sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v53(&v69[*(int *)(v71 + 36)], (uint64_t)&v70[*(int *)(v71 + 36)], v52);
      uint64_t v72 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v69[v72[5]] = *(void *)&v70[v72[5]];
      *(void *)&v69[v72[6]] = *(void *)&v70[v72[6]];
      *(void *)&v69[v72[7]] = *(void *)&v70[v72[7]];
      uint64_t v73 = v100[6];
      uint64_t v74 = &v65[v73];
      uint64_t v75 = &v66[v73];
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      v74[16] = v75[16];
      v65[v100[7]] = v66[v100[7]];
      v65[v100[8]] = v66[v100[8]];
      v65[v100[9]] = v66[v100[9]];
      uint64_t v76 = v100[10];
      uint64_t v77 = &v65[v76];
      uint64_t v78 = &v66[v76];
      uint64_t v79 = *((void *)v78 + 1);
      *(void *)uint64_t v77 = *(void *)v78;
      *((void *)v77 + 1) = v79;
      uint64_t v80 = v100[11];
      int v81 = &v65[v80];
      uint64_t v82 = &v66[v80];
      uint64_t v83 = *((void *)v82 + 1);
      *(void *)int v81 = *(void *)v82;
      *((void *)v81 + 1) = v83;
      unsigned int v84 = *(void (**)(char *, void, uint64_t, int *))(v98 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v84(v65, 0, 1, v100);
    }
    *(_OWORD *)&v61[v63[6]] = *(_OWORD *)(v62 + v63[6]);
    uint64_t v85 = v63[7];
    uint64_t v86 = &v61[v85];
    uint64_t v87 = v62 + v85;
    long long v88 = *(_OWORD *)(v87 + 16);
    *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
    *((_OWORD *)v86 + 1) = v88;
    *((void *)v86 + 10) = *(void *)(v87 + 80);
    long long v89 = *(_OWORD *)(v87 + 64);
    long long v90 = *(_OWORD *)(v87 + 32);
    *((_OWORD *)v86 + 3) = *(_OWORD *)(v87 + 48);
    *((_OWORD *)v86 + 4) = v89;
    *((_OWORD *)v86 + 2) = v90;
    *(void *)&v61[v63[8]] = *(void *)(v62 + v63[8]);
    *(void *)&v61[v63[9]] = *(void *)(v62 + v63[9]);
    uint64_t v91 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    uint64_t v92 = &v61[v91];
    uint64_t v93 = v62 + v91;
    uint64_t v94 = *(void *)(v93 + 8);
    *(void *)uint64_t v92 = *(void *)v93;
    *((void *)v92 + 1) = v94;
    uint64_t v95 = *(void *)(v93 + 24);
    *((void *)v92 + 2) = *(void *)(v93 + 16);
    *((void *)v92 + 3) = v95;
    *((void *)v92 + 4) = *(void *)(v93 + 32);
    *(_OWORD *)(v92 + 40) = *(_OWORD *)(v93 + 40);
    *(_OWORD *)(v92 + 56) = *(_OWORD *)(v93 + 56);
    *(_OWORD *)(v92 + 72) = *(_OWORD *)(v93 + 72);
    *(_OWORD *)(v92 + 88) = *(_OWORD *)(v93 + 88);
    *(_OWORD *)(v92 + 104) = *(_OWORD *)(v93 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v102;
  }
  return (void *)v15;
}

void sub_250FB961C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    unint64_t v7 = sub_250F23584();
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250FB9688(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v24(v4, 1, v5))
  {
    uint64_t v6 = sub_251037400();
    unint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v4, v6);
    uint64_t v8 = v4 + *(int *)(v5 + 20);
    v7(v8, v6);
    sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v7(v8 + *(int *)(v9 + 36), v6);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[7];
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v12 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v13 = a1 + a2[9];
  uint64_t v14 = sub_251037400();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v15(v13, v14);
  sub_250FB961C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v17 = v16;
  v15(v13 + *(int *)(v16 + 36), v14);
  uint64_t v18 = v13 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v15(v18, v14);
  v15(v18 + *(int *)(v17 + 36), v14);
  swift_bridgeObjectRelease();
  uint64_t v19 = a1 + a2[10];
  swift_bridgeObjectRelease();
  uint64_t v20 = v19 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v24(v20, 1, v5))
  {
    v15(v20, v14);
    uint64_t v21 = v20 + *(int *)(v5 + 20);
    v15(v21, v14);
    sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v15(v21 + *(int *)(v22 + 36), v14);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_250FB9AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)(a1 + v5);
  unint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, int *))(v9 + 48);
  swift_bridgeObjectRetain();
  uint64_t v94 = v10;
  uint64_t v93 = v9;
  uint64_t v95 = v3;
  uint64_t v96 = v8;
  if (v10(v7, 1, v8))
  {
    sub_250F6CD98();
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = sub_251037400();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v6, v7, v12);
    uint64_t v14 = v8[5];
    uint64_t v15 = &v6[v14];
    uint64_t v16 = &v7[v14];
    v13(&v6[v14], &v7[v14], v12);
    sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v13(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
    uint64_t v18 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v15[v18[5]] = *(void *)&v16[v18[5]];
    *(void *)&v15[v18[6]] = *(void *)&v16[v18[6]];
    *(void *)&v15[v18[7]] = *(void *)&v16[v18[7]];
    uint64_t v19 = v8[6];
    uint64_t v20 = &v6[v19];
    uint64_t v21 = &v7[v19];
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[16] = v21[16];
    v6[v8[7]] = v7[v8[7]];
    v6[v8[8]] = v7[v8[8]];
    v6[v8[9]] = v7[v8[9]];
    uint64_t v22 = v8[10];
    uint64_t v23 = &v6[v22];
    uint64_t v24 = &v7[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    uint64_t v26 = v8[11];
    uint64_t v27 = &v6[v26];
    uint64_t v28 = &v7[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    uint64_t v30 = *(void (**)(char *, void, uint64_t, int *))(v9 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v3 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30(v6, 0, 1, v8);
  }
  uint64_t v31 = *(int *)(v3 + 28);
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(void *)(a1 + v31) = *(void *)(a2 + v31);
  uint64_t v34 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v35 = *(int *)(v34 + 20);
  uint64_t v36 = v32 + v35;
  uint64_t v37 = v3;
  uint64_t v38 = v33 + v35;
  uint64_t v39 = sub_2510374F0();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16);
  uint64_t v97 = a2;
  swift_bridgeObjectRetain();
  v40(v36, v38, v39);
  *(void *)(v32 + *(int *)(v34 + 24)) = *(void *)(v33 + *(int *)(v34 + 24));
  uint64_t v41 = *(int *)(v37 + 32);
  uint64_t v42 = *(int *)(v37 + 36);
  uint64_t v43 = (void *)(a1 + v41);
  uint64_t v44 = (void *)(a2 + v41);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  v43[2] = v44[2];
  uint64_t v46 = a1 + v42;
  uint64_t v47 = v97 + v42;
  uint64_t v48 = sub_251037400();
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v49(v46, v47, v48);
  sub_250FB961C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v51 = v50;
  v49(v46 + *(int *)(v50 + 36), v47 + *(int *)(v50 + 36), v48);
  uint64_t v52 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = v46 + v53;
  uint64_t v55 = v47 + v53;
  v49(v46 + v53, v47 + v53, v48);
  v49(v54 + *(int *)(v51 + 36), v55 + *(int *)(v51 + 36), v48);
  *(void *)(v46 + *(int *)(v52 + 24)) = *(void *)(v47 + *(int *)(v52 + 24));
  uint64_t v56 = *(int *)(v95 + 40);
  uint64_t v57 = a1 + v56;
  uint64_t v58 = v97 + v56;
  *(void *)(a1 + v56) = *(void *)(v97 + v56);
  uint64_t v59 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v60 = v59[5];
  char v61 = (char *)(v57 + v60);
  uint64_t v62 = (char *)(v58 + v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v94(v62, 1, v96))
  {
    sub_250F6CD98();
    memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v49((uint64_t)v61, (uint64_t)v62, v48);
    uint64_t v64 = v96[5];
    uint64_t v65 = &v61[v64];
    uint64_t v66 = &v62[v64];
    v49((uint64_t)&v61[v64], (uint64_t)&v62[v64], v48);
    sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v49((uint64_t)&v65[*(int *)(v67 + 36)], (uint64_t)&v66[*(int *)(v67 + 36)], v48);
    uint64_t v68 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v65[v68[5]] = *(void *)&v66[v68[5]];
    *(void *)&v65[v68[6]] = *(void *)&v66[v68[6]];
    *(void *)&v65[v68[7]] = *(void *)&v66[v68[7]];
    uint64_t v69 = v96[6];
    uint64_t v70 = &v61[v69];
    uint64_t v71 = &v62[v69];
    *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
    v70[16] = v71[16];
    v61[v96[7]] = v62[v96[7]];
    v61[v96[8]] = v62[v96[8]];
    v61[v96[9]] = v62[v96[9]];
    uint64_t v72 = v96[10];
    uint64_t v73 = &v61[v72];
    uint64_t v74 = &v62[v72];
    uint64_t v75 = *((void *)v74 + 1);
    *(void *)uint64_t v73 = *(void *)v74;
    *((void *)v73 + 1) = v75;
    uint64_t v76 = v96[11];
    uint64_t v77 = &v61[v76];
    uint64_t v78 = &v62[v76];
    uint64_t v79 = *((void *)v78 + 1);
    *(void *)uint64_t v77 = *(void *)v78;
    *((void *)v77 + 1) = v79;
    uint64_t v80 = *(void (**)(char *, void, uint64_t, int *))(v93 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v80(v61, 0, 1, v96);
  }
  *(_OWORD *)(v57 + v59[6]) = *(_OWORD *)(v58 + v59[6]);
  uint64_t v81 = v59[7];
  uint64_t v82 = v57 + v81;
  uint64_t v83 = v58 + v81;
  long long v84 = *(_OWORD *)(v83 + 16);
  *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
  *(_OWORD *)(v82 + 16) = v84;
  *(void *)(v82 + 80) = *(void *)(v83 + 80);
  long long v85 = *(_OWORD *)(v83 + 64);
  long long v86 = *(_OWORD *)(v83 + 32);
  *(_OWORD *)(v82 + 48) = *(_OWORD *)(v83 + 48);
  *(_OWORD *)(v82 + 64) = v85;
  *(_OWORD *)(v82 + 32) = v86;
  *(void *)(v57 + v59[8]) = *(void *)(v58 + v59[8]);
  *(void *)(v57 + v59[9]) = *(void *)(v58 + v59[9]);
  uint64_t v87 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v88 = v57 + v87;
  uint64_t v89 = v58 + v87;
  uint64_t v90 = *(void *)(v89 + 8);
  *(void *)uint64_t v88 = *(void *)v89;
  *(void *)(v88 + 8) = v90;
  uint64_t v91 = *(void *)(v89 + 24);
  *(void *)(v88 + 16) = *(void *)(v89 + 16);
  *(void *)(v88 + 24) = v91;
  *(void *)(v88 + 32) = *(void *)(v89 + 32);
  *(_OWORD *)(v88 + 40) = *(_OWORD *)(v89 + 40);
  *(_OWORD *)(v88 + 56) = *(_OWORD *)(v89 + 56);
  *(_OWORD *)(v88 + 72) = *(_OWORD *)(v89 + 72);
  *(_OWORD *)(v88 + 88) = *(_OWORD *)(v89 + 88);
  *(_OWORD *)(v88 + 104) = *(_OWORD *)(v89 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_250FBA198(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v133 = a1;
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(void))(v10 + 48);
  int v12 = ((uint64_t (*)(char *, uint64_t, int *))v11)(v7, 1, v9);
  uint64_t v130 = v11;
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v11)(v8, 1, v9);
  uint64_t v126 = v10;
  uint64_t v131 = a3;
  uint64_t v128 = v9;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037400();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      v15(v7, v8, v14);
      uint64_t v16 = v9[5];
      uint64_t v17 = &v7[v16];
      uint64_t v18 = &v8[v16];
      v15(&v7[v16], &v8[v16], v14);
      sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v14);
      uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v17[v20[5]] = *(void *)&v18[v20[5]];
      *(void *)&v17[v20[6]] = *(void *)&v18[v20[6]];
      *(void *)&v17[v20[7]] = *(void *)&v18[v20[7]];
      uint64_t v21 = v9[6];
      uint64_t v22 = &v7[v21];
      uint64_t v23 = &v8[v21];
      char v24 = v23[16];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      v22[16] = v24;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      uint64_t v25 = v9[10];
      uint64_t v26 = &v7[v25];
      uint64_t v27 = &v8[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      *((void *)v26 + 1) = *((void *)v27 + 1);
      uint64_t v28 = v9[11];
      uint64_t v29 = &v7[v28];
      uint64_t v30 = &v8[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = *((void *)v30 + 1);
      uint64_t v31 = *(void (**)(char *, void, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a3 = v131;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_250FB8DA0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F6CD98();
    memcpy(v7, v8, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v92 = a3;
  uint64_t v93 = sub_251037400();
  uint64_t v94 = *(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 24);
  v94(v7, v8, v93);
  uint64_t v95 = v9[5];
  uint64_t v96 = &v7[v95];
  uint64_t v97 = &v8[v95];
  v94(&v7[v95], &v8[v95], v93);
  sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v94(&v96[*(int *)(v98 + 36)], &v97[*(int *)(v98 + 36)], v93);
  uint64_t v99 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v96[v99[5]] = *(void *)&v97[v99[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v96[v99[6]] = *(void *)&v97[v99[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v96[v99[7]] = *(void *)&v97[v99[7]];
  swift_bridgeObjectRetain();
  a3 = v92;
  swift_bridgeObjectRelease();
  uint64_t v100 = v9[6];
  unint64_t v101 = &v7[v100];
  uint64_t v102 = &v8[v100];
  long long v103 = *(_OWORD *)v102;
  v101[16] = v102[16];
  *(_OWORD *)unint64_t v101 = v103;
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  uint64_t v104 = v9[10];
  uint64_t v105 = &v7[v104];
  uint64_t v106 = &v8[v104];
  *(void *)uint64_t v105 = *(void *)v106;
  *((void *)v105 + 1) = *((void *)v106 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v107 = v9[11];
  char v108 = &v7[v107];
  long long v109 = &v8[v107];
  *(void *)char v108 = *(void *)v109;
  *((void *)v108 + 1) = *((void *)v109 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v33 = a3[7];
  uint64_t v34 = v133 + v33;
  uint64_t v35 = a2 + v33;
  *(void *)(v133 + v33) = *(void *)(a2 + v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v37 = *(int *)(v36 + 20);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = v35 + v37;
  uint64_t v40 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 24))(v38, v39, v40);
  *(void *)(v34 + *(int *)(v36 + 24)) = *(void *)(v35 + *(int *)(v36 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[8];
  uint64_t v42 = v133 + v41;
  uint64_t v43 = a2 + v41;
  *(void *)(v133 + v41) = *(void *)(a2 + v41);
  swift_retain();
  swift_release();
  *(void *)(v42 + 8) = *(void *)(v43 + 8);
  swift_retain();
  swift_release();
  *(void *)(v42 + 16) = *(void *)(v43 + 16);
  swift_retain();
  swift_release();
  uint64_t v44 = a3[9];
  uint64_t v45 = v133 + v44;
  uint64_t v46 = a2 + v44;
  uint64_t v47 = sub_251037400();
  uint64_t v125 = *(void *)(v47 - 8);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 24);
  v48(v45, v46, v47);
  sub_250FB961C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v50 = v49;
  v48(v45 + *(int *)(v49 + 36), v46 + *(int *)(v49 + 36), v47);
  uint64_t v51 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v52 = *(int *)(v51 + 20);
  uint64_t v53 = a2;
  uint64_t v54 = v45 + v52;
  uint64_t v55 = v46 + v52;
  v48(v45 + v52, v46 + v52, v47);
  v48(v54 + *(int *)(v50 + 36), v55 + *(int *)(v50 + 36), v47);
  *(void *)(v45 + *(int *)(v51 + 24)) = *(void *)(v46 + *(int *)(v51 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v131[10];
  uint64_t v57 = v133 + v56;
  uint64_t v58 = v53 + v56;
  *(void *)(v133 + v56) = *(void *)(v53 + v56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v129 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v59 = v129[5];
  uint64_t v127 = v57;
  uint64_t v132 = v58;
  uint64_t v60 = (unsigned char *)(v58 + v59);
  char v61 = (unsigned char *)(v57 + v59);
  LODWORD(v55) = v130();
  int v62 = ((uint64_t (*)(unsigned char *, uint64_t, int *))v130)(v60, 1, v128);
  if (!v55)
  {
    if (!v62)
    {
      v48((uint64_t)v61, (uint64_t)v60, v47);
      uint64_t v110 = v128[5];
      long long v111 = &v61[v110];
      double v112 = &v60[v110];
      v48((uint64_t)&v61[v110], (uint64_t)&v60[v110], v47);
      sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v48((uint64_t)&v111[*(int *)(v113 + 36)], (uint64_t)&v112[*(int *)(v113 + 36)], v47);
      uint64_t v114 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v111[v114[5]] = *(void *)&v112[v114[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v111[v114[6]] = *(void *)&v112[v114[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v111[v114[7]] = *(void *)&v112[v114[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v115 = v128[6];
      uint64_t v116 = &v61[v115];
      unint64_t v117 = &v60[v115];
      long long v118 = *(_OWORD *)v117;
      v116[16] = v117[16];
      *(_OWORD *)uint64_t v116 = v118;
      v61[v128[7]] = v60[v128[7]];
      v61[v128[8]] = v60[v128[8]];
      v61[v128[9]] = v60[v128[9]];
      uint64_t v119 = v128[10];
      uint64_t v120 = &v61[v119];
      uint64_t v121 = &v60[v119];
      *uint64_t v120 = *v121;
      v120[1] = v121[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v122 = v128[11];
      uint64_t v123 = &v61[v122];
      uint64_t v124 = &v60[v122];
      void *v123 = *v124;
      v123[1] = v124[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_250FB8DA0((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_12;
  }
  if (v62)
  {
LABEL_12:
    sub_250F6CD98();
    memcpy(v61, v60, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
  v63(v61, v60, v47);
  uint64_t v64 = v128[5];
  uint64_t v65 = &v61[v64];
  uint64_t v66 = &v60[v64];
  v63(&v61[v64], &v60[v64], v47);
  sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v63(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v47);
  uint64_t v68 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v65[v68[5]] = *(void *)&v66[v68[5]];
  *(void *)&v65[v68[6]] = *(void *)&v66[v68[6]];
  *(void *)&v65[v68[7]] = *(void *)&v66[v68[7]];
  uint64_t v69 = v128[6];
  uint64_t v70 = &v61[v69];
  uint64_t v71 = &v60[v69];
  char v72 = v71[16];
  *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
  v70[16] = v72;
  v61[v128[7]] = v60[v128[7]];
  v61[v128[8]] = v60[v128[8]];
  v61[v128[9]] = v60[v128[9]];
  uint64_t v73 = v128[10];
  uint64_t v74 = &v61[v73];
  uint64_t v75 = &v60[v73];
  void *v74 = *v75;
  v74[1] = v75[1];
  uint64_t v76 = v128[11];
  uint64_t v77 = &v61[v76];
  uint64_t v78 = &v60[v76];
  *uint64_t v77 = *v78;
  v77[1] = v78[1];
  uint64_t v79 = *(void (**)(unsigned char *, void, uint64_t, int *))(v126 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79(v61, 0, 1, v128);
LABEL_13:
  uint64_t v81 = v129[6];
  uint64_t v82 = (void *)(v127 + v81);
  uint64_t v83 = (void *)(v132 + v81);
  void *v82 = *v83;
  v82[1] = v83[1];
  uint64_t v84 = v129[7];
  uint64_t v85 = v127 + v84;
  uint64_t v86 = v132 + v84;
  *(void *)uint64_t v85 = *(void *)v86;
  uint64_t v87 = *(void *)(v86 + 8);
  *(unsigned char *)(v85 + 16) = *(unsigned char *)(v86 + 16);
  *(void *)(v85 + 8) = v87;
  *(void *)(v85 + 24) = *(void *)(v86 + 24);
  *(void *)(v85 + 32) = *(void *)(v86 + 32);
  *(void *)(v85 + 40) = *(void *)(v86 + 40);
  *(void *)(v85 + 48) = *(void *)(v86 + 48);
  *(void *)(v85 + 56) = *(void *)(v86 + 56);
  *(void *)(v85 + 64) = *(void *)(v86 + 64);
  *(void *)(v85 + 72) = *(void *)(v86 + 72);
  *(void *)(v85 + 80) = *(void *)(v86 + 80);
  *(void *)(v127 + v129[8]) = *(void *)(v132 + v129[8]);
  *(void *)(v127 + v129[9]) = *(void *)(v132 + v129[9]);
  uint64_t v88 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v89 = (void *)(v127 + v88);
  uint64_t v90 = (void *)(v132 + v88);
  void *v89 = *(void *)(v132 + v88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89[1] = v90[1];
  v89[2] = v90[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89[3] = v90[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89[4] = v90[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89[5] = v90[5];
  v89[6] = v90[6];
  v89[7] = v90[7];
  v89[8] = v90[8];
  v89[9] = v90[9];
  void v89[10] = v90[10];
  v89[11] = v90[11];
  v89[12] = v90[12];
  v89[13] = v90[13];
  v89[14] = v90[14];
  return v133;
}

uint64_t sub_250FBAD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)(a1 + v5);
  unint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v74 = *(unsigned int (**)(char *, uint64_t, int *))(v9 + 48);
  uint64_t v73 = v9;
  uint64_t v75 = v3;
  if (v74(v7, 1, v8))
  {
    sub_250F6CD98();
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_251037400();
    int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(v6, v7, v11);
    uint64_t v13 = v8[5];
    uint64_t v14 = &v6[v13];
    uint64_t v15 = &v7[v13];
    v12(&v6[v13], &v7[v13], v11);
    sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v12(&v14[*(int *)(v16 + 36)], &v15[*(int *)(v16 + 36)], v11);
    uint64_t v3 = v75;
    uint64_t v17 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v14[v17[5]] = *(void *)&v15[v17[5]];
    *(void *)&v14[v17[6]] = *(void *)&v15[v17[6]];
    *(void *)&v14[v17[7]] = *(void *)&v15[v17[7]];
    uint64_t v18 = v8[6];
    uint64_t v19 = &v6[v18];
    uint64_t v20 = &v7[v18];
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    unsigned char v19[16] = v20[16];
    v6[v8[7]] = v7[v8[7]];
    v6[v8[8]] = v7[v8[8]];
    v6[v8[9]] = v7[v8[9]];
    *(_OWORD *)&v6[v8[10]] = *(_OWORD *)&v7[v8[10]];
    *(_OWORD *)&v6[v8[11]] = *(_OWORD *)&v7[v8[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v21 = *(int *)(v3 + 28);
  uint64_t v22 = v3;
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v25 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v26 = *(int *)(v25 + 20);
  uint64_t v27 = v23 + v26;
  uint64_t v28 = v24 + v26;
  uint64_t v29 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  *(void *)(v23 + *(int *)(v25 + 24)) = *(void *)(v24 + *(int *)(v25 + 24));
  uint64_t v30 = *(int *)(v22 + 32);
  uint64_t v31 = *(int *)(v22 + 36);
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(void *)(v32 + 16) = *(void *)(v33 + 16);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  uint64_t v34 = a1 + v31;
  uint64_t v35 = a2 + v31;
  uint64_t v36 = sub_251037400();
  uint64_t v37 = *(void (**)(void))(*(void *)(v36 - 8) + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v34, v35, v36);
  sub_250FB961C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v39 = v38;
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v34 + *(int *)(v38 + 36), v35 + *(int *)(v38 + 36), v36);
  uint64_t v40 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v41 = *(int *)(v40 + 20);
  uint64_t v42 = a2;
  uint64_t v43 = v34 + v41;
  uint64_t v44 = v35 + v41;
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v34 + v41, v35 + v41, v36);
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v43 + *(int *)(v39 + 36), v44 + *(int *)(v39 + 36), v36);
  *(void *)(v34 + *(int *)(v40 + 24)) = *(void *)(v35 + *(int *)(v40 + 24));
  uint64_t v45 = *(int *)(v75 + 40);
  uint64_t v46 = a1 + v45;
  uint64_t v47 = v42 + v45;
  *(void *)(a1 + v45) = *(void *)(v42 + v45);
  uint64_t v48 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v49 = v48[5];
  uint64_t v50 = (char *)(v46 + v49);
  uint64_t v51 = (char *)(v47 + v49);
  if (v74((char *)(v47 + v49), 1, v8))
  {
    sub_250F6CD98();
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v37)(v50, v51, v36);
    uint64_t v53 = v8[5];
    uint64_t v76 = &v50[v53];
    uint64_t v54 = &v51[v53];
    v37();
    sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    ((void (*)(char *, char *, uint64_t))v37)(&v76[*(int *)(v55 + 36)], &v54[*(int *)(v55 + 36)], v36);
    uint64_t v56 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v76[v56[5]] = *(void *)&v54[v56[5]];
    *(void *)&v76[v56[6]] = *(void *)&v54[v56[6]];
    *(void *)&v76[v56[7]] = *(void *)&v54[v56[7]];
    uint64_t v57 = v8[6];
    uint64_t v58 = &v50[v57];
    uint64_t v59 = &v51[v57];
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    v58[16] = v59[16];
    v50[v8[7]] = v51[v8[7]];
    v50[v8[8]] = v51[v8[8]];
    v50[v8[9]] = v51[v8[9]];
    *(_OWORD *)&v50[v8[10]] = *(_OWORD *)&v51[v8[10]];
    *(_OWORD *)&v50[v8[11]] = *(_OWORD *)&v51[v8[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v73 + 56))(v50, 0, 1, v8);
  }
  *(_OWORD *)(v46 + v48[6]) = *(_OWORD *)(v47 + v48[6]);
  uint64_t v60 = v48[7];
  uint64_t v61 = v46 + v60;
  uint64_t v62 = v47 + v60;
  long long v63 = *(_OWORD *)(v62 + 16);
  *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
  *(_OWORD *)(v61 + 16) = v63;
  *(void *)(v61 + 80) = *(void *)(v62 + 80);
  long long v64 = *(_OWORD *)(v62 + 64);
  long long v65 = *(_OWORD *)(v62 + 32);
  *(_OWORD *)(v61 + 48) = *(_OWORD *)(v62 + 48);
  *(_OWORD *)(v61 + 64) = v64;
  *(_OWORD *)(v61 + 32) = v65;
  *(void *)(v46 + v48[8]) = *(void *)(v47 + v48[8]);
  *(void *)(v46 + v48[9]) = *(void *)(v47 + v48[9]);
  uint64_t v66 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v67 = v46 + v66;
  uint64_t v68 = v47 + v66;
  long long v69 = *(_OWORD *)(v68 + 80);
  *(_OWORD *)(v67 + 64) = *(_OWORD *)(v68 + 64);
  *(_OWORD *)(v67 + 80) = v69;
  *(_OWORD *)(v67 + 96) = *(_OWORD *)(v68 + 96);
  *(void *)(v67 + 112) = *(void *)(v68 + 112);
  long long v70 = *(_OWORD *)(v68 + 16);
  *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
  *(_OWORD *)(v67 + 16) = v70;
  long long v71 = *(_OWORD *)(v68 + 48);
  *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
  *(_OWORD *)(v67 + 48) = v71;
  return a1;
}

uint64_t sub_250FBB394(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v120 = a1;
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(void))(v10 + 48);
  int v12 = ((uint64_t (*)(char *, uint64_t, int *))v11)(v7, 1, v9);
  unint64_t v117 = v11;
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v11)(v8, 1, v9);
  uint64_t v114 = v10;
  long long v118 = a3;
  uint64_t v115 = v9;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = sub_251037400();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      v15(v7, v8, v14);
      uint64_t v16 = v9[5];
      uint64_t v17 = &v7[v16];
      uint64_t v18 = &v8[v16];
      v15(&v7[v16], &v8[v16], v14);
      sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v14);
      uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v17[v20[5]] = *(void *)&v18[v20[5]];
      *(void *)&v17[v20[6]] = *(void *)&v18[v20[6]];
      *(void *)&v17[v20[7]] = *(void *)&v18[v20[7]];
      a3 = v118;
      uint64_t v21 = v9[6];
      uint64_t v22 = &v7[v21];
      uint64_t v23 = &v8[v21];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      v22[16] = v23[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
      *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_250FB8DA0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_250F6CD98();
    memcpy(v7, v8, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v74 = sub_251037400();
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 40);
  v75(v7, v8, v74);
  uint64_t v76 = v9[5];
  uint64_t v77 = a3;
  uint64_t v78 = &v7[v76];
  uint64_t v79 = &v8[v76];
  v75(&v7[v76], &v8[v76], v74);
  sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v75(&v78[*(int *)(v80 + 36)], &v79[*(int *)(v80 + 36)], v74);
  uint64_t v81 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v78[v81[5]] = *(void *)&v79[v81[5]];
  swift_bridgeObjectRelease();
  *(void *)&v78[v81[6]] = *(void *)&v79[v81[6]];
  swift_bridgeObjectRelease();
  *(void *)&v78[v81[7]] = *(void *)&v79[v81[7]];
  a3 = v77;
  swift_bridgeObjectRelease();
  uint64_t v82 = v9[6];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
  v83[16] = v84[16];
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  uint64_t v85 = v9[10];
  uint64_t v86 = &v7[v85];
  uint64_t v87 = (uint64_t *)&v8[v85];
  uint64_t v89 = *v87;
  uint64_t v88 = v87[1];
  *(void *)uint64_t v86 = v89;
  *((void *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  uint64_t v90 = v9[11];
  uint64_t v91 = &v7[v90];
  uint64_t v92 = (uint64_t *)&v8[v90];
  uint64_t v94 = *v92;
  uint64_t v93 = v92[1];
  *(void *)uint64_t v91 = v94;
  *((void *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v25 = a3[7];
  uint64_t v26 = v120 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)(v120 + v25) = *(void *)(a2 + v25);
  swift_bridgeObjectRelease();
  uint64_t v28 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v29 = *(int *)(v28 + 20);
  uint64_t v30 = v26 + v29;
  uint64_t v31 = v27 + v29;
  uint64_t v32 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  *(void *)(v26 + *(int *)(v28 + 24)) = *(void *)(v27 + *(int *)(v28 + 24));
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[8];
  uint64_t v34 = v120 + v33;
  uint64_t v35 = a2 + v33;
  *(void *)(v120 + v33) = *(void *)(a2 + v33);
  swift_release();
  *(void *)(v34 + 8) = *(void *)(v35 + 8);
  swift_release();
  *(void *)(v34 + 16) = *(void *)(v35 + 16);
  swift_release();
  uint64_t v36 = a3[9];
  uint64_t v37 = v120 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = sub_251037400();
  uint64_t v113 = *(void *)(v39 - 8);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 40);
  v40(v37, v38, v39);
  sub_250FB961C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v42 = v41;
  v40(v37 + *(int *)(v41 + 36), v38 + *(int *)(v41 + 36), v39);
  uint64_t v43 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = a2;
  uint64_t v46 = v37 + v44;
  uint64_t v47 = v38 + v44;
  v40(v37 + v44, v38 + v44, v39);
  v40(v46 + *(int *)(v42 + 36), v47 + *(int *)(v42 + 36), v39);
  *(void *)(v37 + *(int *)(v43 + 24)) = *(void *)(v38 + *(int *)(v43 + 24));
  swift_bridgeObjectRelease();
  uint64_t v48 = v118[10];
  uint64_t v49 = v120 + v48;
  uint64_t v50 = v45 + v48;
  *(void *)(v120 + v48) = *(void *)(v45 + v48);
  swift_bridgeObjectRelease();
  uint64_t v119 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v51 = v119[5];
  uint64_t v116 = v50;
  uint64_t v52 = (unsigned char *)(v50 + v51);
  uint64_t v53 = (unsigned char *)(v49 + v51);
  LODWORD(v50) = v117();
  int v54 = ((uint64_t (*)(unsigned char *, uint64_t, int *))v117)(v52, 1, v115);
  if (!v50)
  {
    if (!v54)
    {
      v40((uint64_t)v53, (uint64_t)v52, v39);
      uint64_t v95 = v115[5];
      uint64_t v96 = &v53[v95];
      uint64_t v97 = &v52[v95];
      v40((uint64_t)&v53[v95], (uint64_t)&v52[v95], v39);
      sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v40((uint64_t)&v96[*(int *)(v98 + 36)], (uint64_t)&v97[*(int *)(v98 + 36)], v39);
      uint64_t v99 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v96[v99[5]] = *(void *)&v97[v99[5]];
      swift_bridgeObjectRelease();
      *(void *)&v96[v99[6]] = *(void *)&v97[v99[6]];
      swift_bridgeObjectRelease();
      *(void *)&v96[v99[7]] = *(void *)&v97[v99[7]];
      swift_bridgeObjectRelease();
      uint64_t v100 = v115[6];
      unint64_t v101 = &v53[v100];
      uint64_t v102 = &v52[v100];
      *(_OWORD *)unint64_t v101 = *(_OWORD *)v102;
      v101[16] = v102[16];
      v53[v115[7]] = v52[v115[7]];
      v53[v115[8]] = v52[v115[8]];
      v53[v115[9]] = v52[v115[9]];
      uint64_t v103 = v115[10];
      uint64_t v104 = &v53[v103];
      uint64_t v105 = (uint64_t *)&v52[v103];
      uint64_t v107 = *v105;
      uint64_t v106 = v105[1];
      *uint64_t v104 = v107;
      v104[1] = v106;
      swift_bridgeObjectRelease();
      uint64_t v108 = v115[11];
      long long v109 = &v53[v108];
      uint64_t v110 = (uint64_t *)&v52[v108];
      uint64_t v112 = *v110;
      uint64_t v111 = v110[1];
      *long long v109 = v112;
      v109[1] = v111;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_250FB8DA0((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_12;
  }
  if (v54)
  {
LABEL_12:
    sub_250F6CD98();
    memcpy(v53, v52, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v55 = v53;
  uint64_t v56 = v53;
  uint64_t v57 = *(void (**)(unsigned char *, char *, uint64_t))(v113 + 32);
  v57(v56, v52, v39);
  uint64_t v58 = v115[5];
  uint64_t v59 = &v55[v58];
  uint64_t v60 = &v52[v58];
  v57(&v55[v58], &v52[v58], v39);
  sub_250FB961C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v57(&v59[*(int *)(v61 + 36)], &v60[*(int *)(v61 + 36)], v39);
  uint64_t v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v59[v62[5]] = *(void *)&v60[v62[5]];
  *(void *)&v59[v62[6]] = *(void *)&v60[v62[6]];
  *(void *)&v59[v62[7]] = *(void *)&v60[v62[7]];
  uint64_t v63 = v115[6];
  long long v64 = &v55[v63];
  long long v65 = &v52[v63];
  *(_OWORD *)long long v64 = *(_OWORD *)v65;
  v64[16] = v65[16];
  v55[v115[7]] = v52[v115[7]];
  v55[v115[8]] = v52[v115[8]];
  v55[v115[9]] = v52[v115[9]];
  *(_OWORD *)&v55[v115[10]] = *(_OWORD *)&v52[v115[10]];
  *(_OWORD *)&v55[v115[11]] = *(_OWORD *)&v52[v115[11]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v114 + 56))(v55, 0, 1, v115);
LABEL_13:
  *(_OWORD *)(v49 + v119[6]) = *(_OWORD *)(v116 + v119[6]);
  uint64_t v67 = v119[7];
  uint64_t v68 = v49 + v67;
  uint64_t v69 = v116 + v67;
  *(void *)uint64_t v68 = *(void *)v69;
  *(void *)(v68 + 8) = *(void *)(v69 + 8);
  *(unsigned char *)(v68 + 16) = *(unsigned char *)(v69 + 16);
  *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
  *(_OWORD *)(v68 + 40) = *(_OWORD *)(v69 + 40);
  *(_OWORD *)(v68 + 56) = *(_OWORD *)(v69 + 56);
  *(_OWORD *)(v68 + 72) = *(_OWORD *)(v69 + 72);
  *(void *)(v49 + v119[8]) = *(void *)(v116 + v119[8]);
  *(void *)(v49 + v119[9]) = *(void *)(v116 + v119[9]);
  uint64_t v70 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v71 = v49 + v70;
  uint64_t v72 = v116 + v70;
  *(void *)(v49 + v70) = *(void *)(v116 + v70);
  swift_bridgeObjectRelease();
  *(void *)(v71 + 8) = *(void *)(v72 + 8);
  *(void *)(v71 + 16) = *(void *)(v72 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v71 + 24) = *(void *)(v72 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v71 + 32) = *(void *)(v72 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
  *(_OWORD *)(v71 + 56) = *(_OWORD *)(v72 + 56);
  *(_OWORD *)(v71 + 72) = *(_OWORD *)(v72 + 72);
  *(_OWORD *)(v71 + 88) = *(_OWORD *)(v72 + 88);
  *(_OWORD *)(v71 + 104) = *(_OWORD *)(v72 + 104);
  return v120;
}

uint64_t sub_250FBBDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FBBDD8);
}

uint64_t sub_250FBBDD8(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  sub_250F6CD98();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  uint64_t v13 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[10];
  return v16(v18, a2, v17);
}

uint64_t sub_250FBBF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FBBFB0);
}

uint64_t sub_250FBBFB0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  sub_250F6CD98();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for OvernightMetricsChartPointCollection();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  uint64_t v13 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[10];
  return v16(v18, a2, a2, v17);
}

void sub_250FBC174()
{
  sub_250F6CD98();
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartPointCollection();
    if (v1 <= 0x3F)
    {
      type metadata accessor for OvernightMetricsChart.Derivations(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChartLayout(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_250FBC2D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  unint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v111 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 24);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v112 = v17;
  long long v109 = v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  char v24 = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = v24;
  uint64_t v25 = v7[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  uint64_t v29 = v7[10];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = v7[11];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  void *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v7[12];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[5];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = a2 + v38;
  uint64_t v41 = *(void *)(a2 + v38);
  if (*(void *)(a1 + v38))
  {
    if (v41)
    {
      void *v39 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[1] = *(void *)(v40 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v39[2] = *(void *)(v40 + 16);
      v39[3] = *(void *)(v40 + 24);
      v39[4] = *(void *)(v40 + 32);
      v39[5] = *(void *)(v40 + 40);
      v39[6] = *(void *)(v40 + 48);
      unsigned char v39[7] = *(void *)(v40 + 56);
      v39[8] = *(void *)(v40 + 64);
    }
    else
    {
      sub_250F21DD0(a1 + v38);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      long long v43 = *(_OWORD *)(v40 + 32);
      long long v42 = *(_OWORD *)(v40 + 48);
      long long v44 = *(_OWORD *)(v40 + 16);
      v39[8] = *(void *)(v40 + 64);
      *((_OWORD *)v39 + 2) = v43;
      *((_OWORD *)v39 + 3) = v42;
      *((_OWORD *)v39 + 1) = v44;
    }
  }
  else if (v41)
  {
    void *v39 = v41;
    v39[1] = *(void *)(v40 + 8);
    void v39[2] = *(void *)(v40 + 16);
    v39[3] = *(void *)(v40 + 24);
    v39[4] = *(void *)(v40 + 32);
    v39[5] = *(void *)(v40 + 40);
    v39[6] = *(void *)(v40 + 48);
    unsigned char v39[7] = *(void *)(v40 + 56);
    v39[8] = *(void *)(v40 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    long long v45 = *(_OWORD *)(v40 + 16);
    long long v46 = *(_OWORD *)(v40 + 32);
    long long v47 = *(_OWORD *)(v40 + 48);
    v39[8] = *(void *)(v40 + 64);
    *((_OWORD *)v39 + 2) = v46;
    *((_OWORD *)v39 + 3) = v47;
    *((_OWORD *)v39 + 1) = v45;
  }
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v114 = a3;
  uint64_t v115 = a2;
  uint64_t v48 = a3[7];
  uint64_t v116 = a1;
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  *(void *)(a1 + v48) = *(void *)(a2 + v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v113 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v51 = v113[5];
  uint64_t v52 = (char *)(v49 + v51);
  uint64_t v53 = (char *)(v50 + v51);
  int v54 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v110 = *((void *)v54 - 1);
  uint64_t v55 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v110 + 48);
  int v56 = v55(v52, 1, v54);
  int v57 = v55(v53, 1, v54);
  if (v56)
  {
    if (!v57)
    {
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
      v58(v52, v53, v11);
      uint64_t v59 = v54[5];
      uint64_t v60 = &v52[v59];
      uint64_t v61 = &v53[v59];
      v58(&v52[v59], &v53[v59], v11);
      v58(&v60[*(int *)(v112 + 36)], &v61[*(int *)(v112 + 36)], v11);
      uint64_t v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v60[v62[5]] = *(void *)&v61[v62[5]];
      *(void *)&v60[v62[6]] = *(void *)&v61[v62[6]];
      *(void *)&v60[v62[7]] = *(void *)&v61[v62[7]];
      uint64_t v63 = v54[6];
      long long v64 = &v52[v63];
      long long v65 = &v53[v63];
      char v66 = v65[16];
      *(_OWORD *)long long v64 = *(_OWORD *)v65;
      v64[16] = v66;
      v52[v54[7]] = v53[v54[7]];
      v52[v54[8]] = v53[v54[8]];
      v52[v54[9]] = v53[v54[9]];
      uint64_t v67 = v54[10];
      uint64_t v68 = &v52[v67];
      uint64_t v69 = &v53[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      uint64_t v70 = v54[11];
      uint64_t v71 = &v52[v70];
      uint64_t v72 = &v53[v70];
      *(void *)uint64_t v71 = *(void *)v72;
      *((void *)v71 + 1) = *((void *)v72 + 1);
      uint64_t v73 = *(void (**)(unsigned char *, void, uint64_t, int *))(v110 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73(v52, 0, 1, v54);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v57)
  {
    sub_250FBE1D8((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_250F6CD98();
    memcpy(v52, v53, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_14;
  }
  v109((uint64_t)v52, (uint64_t)v53, v11);
  uint64_t v90 = v54[5];
  uint64_t v91 = &v52[v90];
  uint64_t v92 = &v53[v90];
  v109((uint64_t)&v52[v90], (uint64_t)&v53[v90], v11);
  v109((uint64_t)&v91[*(int *)(v112 + 36)], (uint64_t)&v92[*(int *)(v112 + 36)], v11);
  uint64_t v93 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v91[v93[5]] = *(void *)&v92[v93[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v91[v93[6]] = *(void *)&v92[v93[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v91[v93[7]] = *(void *)&v92[v93[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = v54[6];
  uint64_t v95 = &v52[v94];
  uint64_t v96 = &v53[v94];
  long long v97 = *(_OWORD *)v96;
  v95[16] = v96[16];
  *(_OWORD *)uint64_t v95 = v97;
  v52[v54[7]] = v53[v54[7]];
  v52[v54[8]] = v53[v54[8]];
  v52[v54[9]] = v53[v54[9]];
  uint64_t v98 = v54[10];
  uint64_t v99 = &v52[v98];
  uint64_t v100 = &v53[v98];
  *(void *)uint64_t v99 = *(void *)v100;
  *((void *)v99 + 1) = *((void *)v100 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v101 = v54[11];
  uint64_t v102 = &v52[v101];
  uint64_t v103 = &v53[v101];
  *(void *)uint64_t v102 = *(void *)v103;
  *((void *)v102 + 1) = *((void *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v75 = v113[6];
  uint64_t v76 = (void *)(v49 + v75);
  uint64_t v77 = (void *)(v50 + v75);
  void *v76 = *v77;
  v76[1] = v77[1];
  uint64_t v78 = v113[7];
  uint64_t v79 = v49 + v78;
  uint64_t v80 = v50 + v78;
  *(void *)uint64_t v79 = *(void *)v80;
  uint64_t v81 = *(void *)(v80 + 8);
  *(unsigned char *)(v79 + 16) = *(unsigned char *)(v80 + 16);
  *(void *)(v79 + 8) = v81;
  *(void *)(v79 + 24) = *(void *)(v80 + 24);
  *(void *)(v79 + 32) = *(void *)(v80 + 32);
  *(void *)(v79 + 40) = *(void *)(v80 + 40);
  *(void *)(v79 + 48) = *(void *)(v80 + 48);
  *(void *)(v79 + 56) = *(void *)(v80 + 56);
  *(void *)(v79 + 64) = *(void *)(v80 + 64);
  *(void *)(v79 + 72) = *(void *)(v80 + 72);
  *(void *)(v79 + 80) = *(void *)(v80 + 80);
  *(void *)(v49 + v113[8]) = *(void *)(v50 + v113[8]);
  *(void *)(v49 + v113[9]) = *(void *)(v50 + v113[9]);
  uint64_t v82 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v83 = (void *)(v49 + v82);
  uint64_t v84 = (void *)(v50 + v82);
  *(void *)(v49 + v82) = *v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[1] = v84[1];
  v83[2] = v84[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[3] = v84[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[4] = v84[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[5] = v84[5];
  v83[6] = v84[6];
  v83[7] = v84[7];
  v83[8] = v84[8];
  v83[9] = v84[9];
  v83[10] = v84[10];
  v83[11] = v84[11];
  v83[12] = v84[12];
  v83[13] = v84[13];
  v83[14] = v84[14];
  uint64_t v85 = v114[8];
  uint64_t v86 = v116 + v85;
  uint64_t v87 = (long long *)(v115 + v85);
  uint64_t v88 = *(void *)(v115 + v85);
  if (*(void *)(v116 + v85))
  {
    if (v88)
    {
      *(void *)uint64_t v86 = v88;
      swift_retain();
      swift_release();
      *(void *)(v86 + 8) = *((void *)v87 + 1);
      swift_retain();
      swift_release();
      *(void *)(v86 + 16) = *((void *)v87 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_250F27E80(v116 + v85);
      uint64_t v89 = *((void *)v87 + 2);
      *(_OWORD *)uint64_t v86 = *v87;
      *(void *)(v86 + 16) = v89;
    }
  }
  else if (v88)
  {
    *(void *)uint64_t v86 = v88;
    *(void *)(v86 + 8) = *((void *)v87 + 1);
    *(void *)(v86 + 16) = *((void *)v87 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v104 = *v87;
    *(void *)(v86 + 16) = *((void *)v87 + 2);
    *(_OWORD *)uint64_t v86 = v104;
  }
  *(unsigned char *)(v86 + 24) = *((unsigned char *)v87 + 24);
  *(unsigned char *)(v86 + 32) = *((unsigned char *)v87 + 32);
  *(void *)(v86 + 40) = *((void *)v87 + 5);
  swift_retain();
  swift_release();
  uint64_t v105 = *((void *)v87 + 6);
  *(unsigned char *)(v86 + 56) = *((unsigned char *)v87 + 56);
  *(void *)(v86 + 48) = v105;
  *(void *)(v86 + 64) = *((void *)v87 + 8);
  *(void *)(v86 + 72) = *((void *)v87 + 9);
  swift_retain();
  swift_release();
  *(void *)(v86 + 80) = *((void *)v87 + 10);
  swift_retain();
  swift_release();
  *(void *)(v86 + 88) = *((void *)v87 + 11);
  uint64_t v106 = *((void *)v87 + 12);
  *(unsigned char *)(v86 + 104) = *((unsigned char *)v87 + 104);
  *(void *)(v86 + 96) = v106;
  *(void *)(v86 + 112) = *((void *)v87 + 14);
  *(void *)(v86 + 120) = *((void *)v87 + 15);
  *(void *)(v86 + 128) = *((void *)v87 + 16);
  *(void *)(v86 + 136) = *((void *)v87 + 17);
  *(void *)(v86 + 144) = *((void *)v87 + 18);
  *(void *)(v86 + 152) = *((void *)v87 + 19);
  *(void *)(v86 + 160) = *((void *)v87 + 20);
  *(void *)(v86 + 168) = *((void *)v87 + 21);
  *(void *)(v86 + 176) = *((void *)v87 + 22);
  swift_retain();
  swift_release();
  *(void *)(v86 + 184) = *((void *)v87 + 23);
  swift_retain();
  swift_release();
  uint64_t v107 = *((void *)v87 + 24);
  *(unsigned char *)(v86 + 200) = *((unsigned char *)v87 + 200);
  *(void *)(v86 + 192) = v107;
  *(unsigned char *)(v86 + 201) = *((unsigned char *)v87 + 201);
  *(void *)(v86 + 208) = *((void *)v87 + 26);
  swift_retain();
  swift_release();
  *(void *)(v86 + 216) = *((void *)v87 + 27);
  swift_retain();
  swift_release();
  *(void *)(v86 + 224) = *((void *)v87 + 28);
  swift_retain();
  swift_release();
  *(void *)(v86 + 232) = *((void *)v87 + 29);
  swift_retain();
  swift_release();
  *(void *)(v86 + 240) = *((void *)v87 + 30);
  swift_retain();
  swift_release();
  *(unsigned char *)(v86 + 248) = *((unsigned char *)v87 + 248);
  *(void *)(v86 + 256) = *((void *)v87 + 32);
  swift_retain();
  swift_release();
  *(void *)(v86 + 264) = *((void *)v87 + 33);
  swift_retain();
  swift_release();
  *(void *)(v86 + 272) = *((void *)v87 + 34);
  return v116;
}

uint64_t sub_250FBCE30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_251037740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  unint64_t v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_251037400();
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 40);
  v12(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_250F26E08();
  uint64_t v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  uint64_t v100 = v17;
  long long v97 = v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  uint64_t v21 = v7[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = v7[9];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = sub_2510378C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = v7[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v7[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v7[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  void *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[5];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  if (*(void *)(a1 + v43))
  {
    if (*(void *)v45)
    {
      *(void *)uint64_t v44 = *(void *)v45;
      swift_bridgeObjectRelease();
      *(void *)(v44 + 8) = *(void *)(v45 + 8);
      swift_bridgeObjectRelease();
      long long v46 = *(_OWORD *)(v45 + 32);
      *(_OWORD *)(v44 + 16) = *(_OWORD *)(v45 + 16);
      *(_OWORD *)(v44 + 32) = v46;
      *(_OWORD *)(v44 + 48) = *(_OWORD *)(v45 + 48);
      *(void *)(v44 + 64) = *(void *)(v45 + 64);
      goto LABEL_6;
    }
    sub_250F21DD0(v44);
  }
  long long v47 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v47;
  *(void *)(v44 + 64) = *(void *)(v45 + 64);
  long long v48 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v48;
LABEL_6:
  uint64_t v49 = a3[7];
  long long v104 = a3;
  uint64_t v105 = a1;
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v50 = a1 + v49;
  uint64_t v101 = a2;
  uint64_t v51 = a2 + v49;
  *(void *)(a1 + v49) = *(void *)(a2 + v49);
  swift_bridgeObjectRelease();
  uint64_t v103 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v52 = v103[5];
  uint64_t v53 = (char *)(v50 + v52);
  int v54 = (char *)(v51 + v52);
  uint64_t v55 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v98 = *((void *)v55 - 1);
  int v56 = *(uint64_t (**)(char *, uint64_t, int *))(v98 + 48);
  int v57 = v56(v53, 1, v55);
  __src = v54;
  int v58 = v56(v54, 1, v55);
  if (v57)
  {
    if (!v58)
    {
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
      v59(v53, v54, v11);
      uint64_t v60 = v55[5];
      uint64_t v61 = &v53[v60];
      uint64_t v62 = &v54[v60];
      v59(&v53[v60], &v54[v60], v11);
      v59(&v61[*(int *)(v100 + 36)], &v62[*(int *)(v100 + 36)], v11);
      uint64_t v63 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v61[v63[5]] = *(void *)&v62[v63[5]];
      *(void *)&v61[v63[6]] = *(void *)&v62[v63[6]];
      *(void *)&v61[v63[7]] = *(void *)&v62[v63[7]];
      uint64_t v64 = v55[6];
      long long v65 = &v53[v64];
      char v66 = &v54[v64];
      *(_OWORD *)long long v65 = *(_OWORD *)v66;
      v65[16] = v66[16];
      v53[v55[7]] = v54[v55[7]];
      v53[v55[8]] = v54[v55[8]];
      v53[v55[9]] = v54[v55[9]];
      *(_OWORD *)&v53[v55[10]] = *(_OWORD *)&v54[v55[10]];
      *(_OWORD *)&v53[v55[11]] = *(_OWORD *)&v54[v55[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v98 + 56))(v53, 0, 1, v55);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v58)
  {
    sub_250FBE1D8((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
LABEL_11:
    sub_250F6CD98();
    memcpy(v53, v54, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_12;
  }
  v97((uint64_t)v53, (uint64_t)v54, v11);
  uint64_t v80 = v55[5];
  uint64_t v81 = &v53[v80];
  uint64_t v82 = &v54[v80];
  v97((uint64_t)&v53[v80], (uint64_t)&__src[v80], v11);
  v97((uint64_t)&v81[*(int *)(v100 + 36)], (uint64_t)&v82[*(int *)(v100 + 36)], v11);
  uint64_t v83 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v81[v83[5]] = *(void *)&v82[v83[5]];
  swift_bridgeObjectRelease();
  *(void *)&v81[v83[6]] = *(void *)&v82[v83[6]];
  swift_bridgeObjectRelease();
  *(void *)&v81[v83[7]] = *(void *)&v82[v83[7]];
  swift_bridgeObjectRelease();
  uint64_t v84 = v55[6];
  uint64_t v85 = &v53[v84];
  uint64_t v86 = &__src[v84];
  *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
  v85[16] = v86[16];
  v53[v55[7]] = __src[v55[7]];
  v53[v55[8]] = __src[v55[8]];
  v53[v55[9]] = __src[v55[9]];
  uint64_t v87 = v55[10];
  uint64_t v88 = &v53[v87];
  uint64_t v89 = (uint64_t *)&__src[v87];
  uint64_t v91 = *v89;
  uint64_t v90 = v89[1];
  char *v88 = v91;
  v88[1] = v90;
  swift_bridgeObjectRelease();
  uint64_t v92 = v55[11];
  uint64_t v93 = &v53[v92];
  uint64_t v94 = (uint64_t *)&__src[v92];
  uint64_t v96 = *v94;
  uint64_t v95 = v94[1];
  *uint64_t v93 = v96;
  v93[1] = v95;
  swift_bridgeObjectRelease();
LABEL_12:
  *(_OWORD *)(v50 + v103[6]) = *(_OWORD *)(v51 + v103[6]);
  uint64_t v68 = v103[7];
  uint64_t v69 = v50 + v68;
  uint64_t v70 = v51 + v68;
  *(void *)uint64_t v69 = *(void *)v70;
  *(void *)(v69 + 8) = *(void *)(v70 + 8);
  *(unsigned char *)(v69 + 16) = *(unsigned char *)(v70 + 16);
  *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
  *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
  *(_OWORD *)(v69 + 56) = *(_OWORD *)(v70 + 56);
  *(_OWORD *)(v69 + 72) = *(_OWORD *)(v70 + 72);
  *(void *)(v50 + v103[8]) = *(void *)(v51 + v103[8]);
  *(void *)(v50 + v103[9]) = *(void *)(v51 + v103[9]);
  uint64_t v71 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  uint64_t v72 = v50 + v71;
  uint64_t v73 = v51 + v71;
  *(void *)(v50 + v71) = *(void *)(v51 + v71);
  swift_bridgeObjectRelease();
  *(void *)(v72 + 8) = *(void *)(v73 + 8);
  *(void *)(v72 + 16) = *(void *)(v73 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v72 + 24) = *(void *)(v73 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v72 + 32) = *(void *)(v73 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
  *(_OWORD *)(v72 + 56) = *(_OWORD *)(v73 + 56);
  *(_OWORD *)(v72 + 72) = *(_OWORD *)(v73 + 72);
  *(_OWORD *)(v72 + 88) = *(_OWORD *)(v73 + 88);
  *(_OWORD *)(v72 + 104) = *(_OWORD *)(v73 + 104);
  uint64_t v74 = v104[8];
  uint64_t v75 = v105 + v74;
  uint64_t v76 = v101 + v74;
  if (!*(void *)(v105 + v74))
  {
LABEL_16:
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    *(void *)(v75 + 16) = *(void *)(v76 + 16);
    goto LABEL_17;
  }
  if (!*(void *)v76)
  {
    sub_250F27E80(v75);
    goto LABEL_16;
  }
  *(void *)uint64_t v75 = *(void *)v76;
  swift_release();
  *(void *)(v75 + 8) = *(void *)(v76 + 8);
  swift_release();
  *(void *)(v75 + 16) = *(void *)(v76 + 16);
  swift_release();
LABEL_17:
  *(unsigned char *)(v75 + 24) = *(unsigned char *)(v76 + 24);
  *(unsigned char *)(v75 + 32) = *(unsigned char *)(v76 + 32);
  *(void *)(v75 + 40) = *(void *)(v76 + 40);
  swift_release();
  *(void *)(v75 + 48) = *(void *)(v76 + 48);
  *(unsigned char *)(v75 + 56) = *(unsigned char *)(v76 + 56);
  *(void *)(v75 + 64) = *(void *)(v76 + 64);
  *(void *)(v75 + 72) = *(void *)(v76 + 72);
  swift_release();
  *(void *)(v75 + 80) = *(void *)(v76 + 80);
  swift_release();
  *(void *)(v75 + 88) = *(void *)(v76 + 88);
  *(void *)(v75 + 96) = *(void *)(v76 + 96);
  *(unsigned char *)(v75 + 104) = *(unsigned char *)(v76 + 104);
  long long v77 = *(_OWORD *)(v76 + 128);
  *(_OWORD *)(v75 + 112) = *(_OWORD *)(v76 + 112);
  *(_OWORD *)(v75 + 128) = v77;
  long long v78 = *(_OWORD *)(v76 + 160);
  *(_OWORD *)(v75 + 144) = *(_OWORD *)(v76 + 144);
  *(_OWORD *)(v75 + 160) = v78;
  *(void *)(v75 + 176) = *(void *)(v76 + 176);
  swift_release();
  *(void *)(v75 + 184) = *(void *)(v76 + 184);
  swift_release();
  *(void *)(v75 + 192) = *(void *)(v76 + 192);
  *(unsigned char *)(v75 + 200) = *(unsigned char *)(v76 + 200);
  *(unsigned char *)(v75 + 201) = *(unsigned char *)(v76 + 201);
  *(void *)(v75 + 208) = *(void *)(v76 + 208);
  swift_release();
  *(void *)(v75 + 216) = *(void *)(v76 + 216);
  swift_release();
  *(void *)(v75 + 224) = *(void *)(v76 + 224);
  swift_release();
  *(void *)(v75 + 232) = *(void *)(v76 + 232);
  swift_release();
  *(void *)(v75 + 240) = *(void *)(v76 + 240);
  swift_release();
  *(unsigned char *)(v75 + 248) = *(unsigned char *)(v76 + 248);
  *(void *)(v75 + 256) = *(void *)(v76 + 256);
  swift_release();
  *(void *)(v75 + 264) = *(void *)(v76 + 264);
  swift_release();
  *(void *)(v75 + 272) = *(void *)(v76 + 272);
  return v105;
}

uint64_t sub_250FBD6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FBD6D8);
}

uint64_t sub_250FBD6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32) + 40);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_250FBD7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FBD804);
}

uint64_t sub_250FBD804(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + 40) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for OvernightMetricsChartPointShadow()
{
  uint64_t result = qword_269B141F0;
  if (!qword_269B141F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250FBD964()
{
  uint64_t result = type metadata accessor for IndividualOvernightMetricChartPoint(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_250FBDA48()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_250FBDA64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  unint64_t v4 = (int *)type metadata accessor for OvernightMetricsChartPointShadow();
  memcpy(__dst, (const void *)(v1 + v4[8]), 0x118uLL);
  uint64_t v5 = __dst[8];
  uint64_t v6 = __dst[9];
  uint64_t v7 = __dst[10];
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8))
  {
    uint64_t v7 = sub_251038A90();
  }
  else
  {
    sub_250F2A3B4(__dst);
    if (sub_2510378A0())
    {
      swift_retain();
      sub_250F2E048(__dst);
    }
    else
    {
      swift_retain();
      sub_250F2E048(__dst);
      uint64_t v7 = v6;
    }
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_251038D00();
  sub_251038150();
  uint64_t v20 = sub_250FBDD90();
  uint64_t v8 = v1 + v4[5];
  uint64_t v9 = *(void *)v8;
  if (*(void *)v8)
  {
    double v10 = *(double *)(v8 + 24);
    double v11 = *(double *)(v8 + 40);
    uint64_t v12 = *(void *)v8;
    uint64_t v13 = *(void *)(v8 + 8);
  }
  else
  {
    uint64_t v19 = v7;
    if (qword_269B12BB8 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_269B1AD38;
    swift_getKeyPath();
    sub_250FBE458((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
    sub_251037530();
    swift_release();
    uint64_t v12 = *(void *)(v14 + 16);
    uint64_t v13 = *(void *)(v14 + 24);
    double v10 = *(double *)(v14 + 40);
    double v11 = *(double *)(v14 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = v19;
  }
  int v15 = *(unsigned __int8 *)(v2 + v4[6]);
  sub_250F22234(v9);
  if (sub_250FFA7EC(v2, v12))
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = sub_250FFA7EC(v2, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    double v18 = 0.26;
    if (v15) {
      double v18 = 0.0;
    }
    if (v17) {
      double v10 = v11;
    }
    else {
      double v10 = v18;
    }
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v23;
  *(unsigned char *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v25;
  *(void *)(a1 + 48) = v26;
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(double *)(a1 + 88) = v10;
  return result;
}

uint64_t sub_250FBDD90()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OvernightMetricsChartPointShadow();
  MEMORY[0x270FA5388](v2);
  unint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2510378C0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndividualOvernightMetricChartPoint(0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F42E28], v5);
  char v9 = sub_2510378B0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (qword_26B210178 != -1) {
      swift_once();
    }
    double v10 = &qword_26B210328;
  }
  else
  {
    if (qword_26B210180 != -1) {
      swift_once();
    }
    double v10 = &qword_26B210330;
  }
  MEMORY[0x2533907A0]((id)*v10);
  int v11 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 32) + 56);
  sub_250FBE174(v1, (uint64_t)v4);
  if (v11 == 1)
  {
    uint64_t v12 = (uint64_t *)&v4[*(int *)(v2 + 20)];
    uint64_t v13 = *v12;
    uint64_t v14 = v12[3];
    uint64_t v15 = v12[5];
    uint64_t v16 = v12[6];
    if (*v12)
    {
      uint64_t v17 = *v12;
      uint64_t v18 = v12[1];
    }
    else
    {
      v22[1] = v12[7];
      v22[2] = v16;
      v22[3] = v15;
      void v22[4] = v14;
      if (qword_269B12BB8 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_269B1AD38;
      swift_getKeyPath();
      v22[5] = v19;
      sub_250FBE458((unint64_t *)&qword_269B12CC0, (void (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState);
      sub_251037530();
      swift_release();
      uint64_t v17 = *(void *)(v19 + 16);
      uint64_t v18 = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_250F22234(v13);
    if ((sub_250FFA7EC((uint64_t)v4, v17) & 1) == 0) {
      sub_250FFA7EC((uint64_t)v4, v18);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_250FBE1D8((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointShadow);
  uint64_t v20 = sub_251038AE0();
  swift_release();
  return v20;
}

uint64_t sub_250FBE174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPointShadow();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250FBE1D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FBE238()
{
  return sub_250FBE3D8(&qword_269B14200, sub_250FBE288, (void (*)(void))sub_250FBE39C);
}

void sub_250FBE288(uint64_t a1)
{
}

void sub_250FBE2B0(uint64_t a1)
{
}

void sub_250FBE2D8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251038270();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250FBE33C()
{
  if (!qword_269B138D0)
  {
    unint64_t v0 = sub_251038600();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B138D0);
    }
  }
}

uint64_t sub_250FBE39C()
{
  return sub_250FBE3D8(&qword_269B14218, sub_250FBE2B0, (void (*)(void))sub_250F6FEF8);
}

uint64_t sub_250FBE3D8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FBE458(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static OvernightMetricsChartPointCollection.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  if (sub_250F83D84(*a1, *a2))
  {
    uint64_t v4 = type metadata accessor for OvernightMetricsChartPointCollection();
    if (MEMORY[0x25338F200]((char *)a1 + *(int *)(v4 + 20), (char *)a2 + *(int *)(v4 + 20)))
    {
      uint64_t v5 = *(int *)(v4 + 24);
      uint64_t v6 = *(uint64_t *)((char *)a1 + v5);
      uint64_t v7 = *(uint64_t *)((char *)a2 + v5);
      sub_250FBE830(v6, v7);
    }
  }
}

uint64_t type metadata accessor for OvernightMetricsChartPointCollection()
{
  uint64_t result = qword_26B210E60;
  if (!qword_26B210E60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_250FBE578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  void v5[2] = a1;
  unint64_t result = sub_250FEDCF8((void (*)(uint64_t))sub_250FC18AC, (uint64_t)v5, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250FBE5D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + *(int *)(type metadata accessor for OvernightMetricsChartPoint() + 20);
  uint64_t v10 = *(void *)(v9 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 20));
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v18 = v5;
    uint64_t v19 = a2;
    uint64_t v20 = v2;
    uint64_t v12 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v16 = v10;
    uint64_t v17 = v6;
    uint64_t v13 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_250FC18C8(v12, (uint64_t)v8, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_251037740();
      sub_250FC1930(&qword_26B210A98, MEMORY[0x263F42CD0]);
      sub_251039240();
      sub_251039240();
      if (v22 == v21) {
        break;
      }
      sub_250FC1978((uint64_t)v8, type metadata accessor for IndividualOvernightMetricChartPoint);
      v12 += v13;
      if (!--v11)
      {
        uint64_t v14 = 1;
        a2 = v19;
        goto LABEL_8;
      }
    }
    a2 = v19;
    sub_250FC19D8((uint64_t)v8, v19, type metadata accessor for IndividualOvernightMetricChartPoint);
    uint64_t v14 = 0;
LABEL_8:
    uint64_t v6 = v17;
    uint64_t v5 = v18;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v14, 1, v5);
  return swift_bridgeObjectRelease();
}

void sub_250FBE830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037740();
  uint64_t v41 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC180C(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v33 - v12;
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v42 = 0;
  uint64_t v38 = a1;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v35 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v41 + 16;
  uint64_t v39 = (void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v40 = (void (**)(char *, char *, uint64_t))(v41 + 32);
  int64_t v34 = v36 - 1;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v42 << 6);
LABEL_8:
      uint64_t v20 = v38;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v41 + 16))(v9, *(void *)(v38 + 48) + *(void *)(v41 + 72) * v19, v4, v11);
      uint64_t v21 = *(void *)(*(void *)(v20 + 56) + 8 * v19);
      sub_250FC1840();
      uint64_t v23 = v22;
      *(void *)&v9[*(int *)(v22 + 48)] = v21;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 0, 1, v22);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    int64_t v24 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 < v36)
    {
      unint64_t v25 = *(void *)(v35 + 8 * v24);
      if (v25) {
        goto LABEL_12;
      }
      int64_t v26 = v42 + 2;
      ++v42;
      if (v24 + 1 < v36)
      {
        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (v25) {
          goto LABEL_15;
        }
        int64_t v42 = v24 + 1;
        if (v24 + 2 < v36)
        {
          unint64_t v25 = *(void *)(v35 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_12;
          }
          int64_t v26 = v24 + 3;
          int64_t v42 = v24 + 2;
          if (v24 + 3 < v36) {
            break;
          }
        }
      }
    }
LABEL_26:
    sub_250FC1840();
    uint64_t v23 = v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
    unint64_t v17 = 0;
LABEL_27:
    sub_250FC19D8((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))sub_250FC180C);
    sub_250FC1840();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v13, 1, v23) == 1) {
      return;
    }
    uint64_t v28 = *(int *)(v23 + 48);
    (*v40)(v6, v13, v4);
    uint64_t v29 = *(void *)&v13[v28];
    sub_250FCB6DC((uint64_t)v6);
    LOBYTE(v28) = v30;
    (*v39)(v6, v4);
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v31 = swift_bridgeObjectRetain();
    char v32 = sub_250F842FC(v31, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0) {
      return;
    }
  }
  unint64_t v25 = *(void *)(v35 + 8 * v26);
  if (v25)
  {
LABEL_15:
    int64_t v24 = v26;
LABEL_12:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v42 = v24;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v36)
    {
      int64_t v42 = v34;
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v35 + 8 * v24);
    ++v26;
    if (v25) {
      goto LABEL_12;
    }
  }
LABEL_35:
  __break(1u);
}

void sub_250FBECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_251037640();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v59 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v65 = sub_251037740();
  uint64_t v58 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v60 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC1750(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15.n128_f64[0] = MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v48 - v16;
  if (a1 == a2)
  {
    BOOL v62 = 1;
    return;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
LABEL_33:
    BOOL v62 = 0;
    return;
  }
  uint64_t v57 = a2;
  int64_t v61 = 0;
  uint64_t v52 = a1;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v49 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v50 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v51 = v58 + 16;
  uint64_t v63 = v5 + 16;
  uint64_t v53 = (void (**)(uint64_t, uint64_t))(v58 + 8);
  int v54 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v55 = (void (**)(char *, uint64_t))(v5 + 8);
  int v56 = (void (**)(char *, char *, uint64_t))(v58 + 32);
  int64_t v48 = v50 - 1;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      uint64_t v23 = (v21 - 1) & v21;
      unint64_t v24 = v22 | (v61 << 6);
LABEL_8:
      uint64_t v25 = v52;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v58 + 16))(v13, *(void *)(v52 + 48) + *(void *)(v58 + 72) * v24, v65, v15);
      unint64_t v26 = *(void *)(v25 + 56) + *(void *)(v5 + 72) * v24;
      sub_250FC178C(0, &qword_269B142A0, MEMORY[0x263F42CD0], MEMORY[0x263F42BC0]);
      uint64_t v28 = v27;
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v13[*(int *)(v27 + 48)], v26, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v13, 0, 1, v28);
      goto LABEL_27;
    }
    int64_t v29 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v29 < v50)
    {
      unint64_t v30 = *(void *)(v49 + 8 * v29);
      if (v30) {
        goto LABEL_12;
      }
      int64_t v31 = v61 + 2;
      ++v61;
      if (v29 + 1 < v50)
      {
        unint64_t v30 = *(void *)(v49 + 8 * v31);
        if (v30) {
          goto LABEL_15;
        }
        int64_t v61 = v29 + 1;
        if (v29 + 2 < v50)
        {
          unint64_t v30 = *(void *)(v49 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_12;
          }
          int64_t v31 = v29 + 3;
          int64_t v61 = v29 + 2;
          if (v29 + 3 < v50) {
            break;
          }
        }
      }
    }
LABEL_26:
    sub_250FC178C(0, &qword_269B142A0, MEMORY[0x263F42CD0], MEMORY[0x263F42BC0]);
    uint64_t v28 = v32;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 1, 1, v32);
    uint64_t v23 = 0;
LABEL_27:
    sub_250FC19D8((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))sub_250FC1750);
    sub_250FC178C(0, &qword_269B142A0, MEMORY[0x263F42CD0], MEMORY[0x263F42BC0]);
    int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v17, 1, v28);
    BOOL v62 = v33 == 1;
    if (v33 == 1) {
      return;
    }
    unint64_t v64 = v23;
    int64_t v34 = v13;
    uint64_t v35 = v5;
    int64_t v36 = &v17[*(int *)(v28 + 48)];
    uint64_t v37 = (uint64_t)v60;
    uint64_t v38 = v17;
    uint64_t v39 = v65;
    (*v56)(v60, v17, v65);
    (*v54)(v9, v36, v4);
    uint64_t v40 = v57;
    unint64_t v41 = sub_250FCB6DC(v37);
    char v43 = v42;
    (*v53)(v37, v39);
    if ((v43 & 1) == 0)
    {
      (*v55)(v9, v4);
      goto LABEL_33;
    }
    uint64_t v5 = v35;
    unint64_t v44 = *(void *)(v40 + 56) + *(void *)(v35 + 72) * v41;
    uint64_t v45 = v59;
    (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v59, v44, v4);
    sub_250FC1930(&qword_269B142A8, MEMORY[0x263F42BC0]);
    char v46 = sub_2510390F0();
    long long v47 = *(void (**)(char *, uint64_t))(v35 + 8);
    v47(v45, v4);
    v47(v9, v4);
    uint64_t v13 = v34;
    unint64_t v17 = v38;
    unint64_t v21 = v64;
    if ((v46 & 1) == 0) {
      return;
    }
  }
  unint64_t v30 = *(void *)(v49 + 8 * v31);
  if (v30)
  {
LABEL_15:
    int64_t v29 = v31;
LABEL_12:
    uint64_t v23 = (v30 - 1) & v30;
    unint64_t v24 = __clz(__rbit64(v30)) + (v29 << 6);
    int64_t v61 = v29;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v50)
    {
      int64_t v61 = v48;
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v49 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
}

unint64_t sub_250FBF374(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = 8 * v11;
    double v16 = *(double *)(*(void *)(v3 + 56) + v15);
    unint64_t result = sub_250FCB7B0(*(double *)(*(void *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(double *)(*(void *)(a2 + 56) + 8 * result) != v16) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_250FBF4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510378C0();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC1618(0);
  MEMORY[0x270FA5388](v7 - 8);
  int64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v44 - v12;
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v47 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  int64_t v50 = (void (**)(char *, char *, uint64_t))(v52 + 32);
  int64_t v51 = 0;
  uint64_t v48 = v52 + 16;
  uint64_t v49 = (void (**)(char *, uint64_t))(v52 + 8);
  uint64_t v45 = v15;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  int64_t v44 = v46 - 1;
  uint64_t v20 = &qword_269B14290;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v51 << 6);
LABEL_9:
      uint64_t v23 = v47;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v52 + 16))(v9, *(void *)(v47 + 48) + *(void *)(v52 + 72) * v22, v53, v11);
      uint64_t v24 = *(void *)(*(void *)(v23 + 56) + 8 * v22);
      sub_250FC178C(0, v20, MEMORY[0x263F42E30], (void (*)(uint64_t))sub_250F33580);
      uint64_t v25 = v20;
      uint64_t v27 = v26;
      *(void *)&v9[*(int *)(v26 + 48)] = v24;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v9, 0, 1, v26);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    int64_t v28 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v28 < v46)
    {
      unint64_t v29 = *(void *)(v45 + 8 * v28);
      if (v29) {
        goto LABEL_13;
      }
      int64_t v30 = v51 + 2;
      ++v51;
      if (v28 + 1 < v46)
      {
        unint64_t v29 = *(void *)(v45 + 8 * v30);
        if (v29) {
          goto LABEL_16;
        }
        int64_t v51 = v28 + 1;
        if (v28 + 2 < v46)
        {
          unint64_t v29 = *(void *)(v45 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_13;
          }
          int64_t v30 = v28 + 3;
          int64_t v51 = v28 + 2;
          if (v28 + 3 < v46) {
            break;
          }
        }
      }
    }
LABEL_27:
    sub_250FC178C(0, v20, MEMORY[0x263F42E30], (void (*)(uint64_t))sub_250F33580);
    uint64_t v25 = v20;
    uint64_t v27 = v31;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v9, 1, 1, v31);
    unint64_t v19 = 0;
LABEL_28:
    sub_250FC19D8((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))sub_250FC1618);
    uint64_t v20 = v25;
    sub_250FC178C(0, v25, MEMORY[0x263F42E30], (void (*)(uint64_t))sub_250F33580);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v13, 1, v27) == 1) {
      return;
    }
    uint64_t v32 = *(int *)(v27 + 48);
    uint64_t v33 = v53;
    (*v50)(v6, v13, v53);
    uint64_t v34 = *(void *)&v13[v32];
    unint64_t v35 = sub_250FCB7F8((uint64_t)v6);
    LOBYTE(v32) = v36;
    (*v49)(v6, v33);
    if ((v32 & 1) == 0
      || (uint64_t v37 = *(void *)(*(void *)(a2 + 56) + 8 * v35), v38 = *(void *)(v37 + 16), v38 != *(void *)(v34 + 16)))
    {
LABEL_44:
      swift_bridgeObjectRelease();
      return;
    }
    if (v38) {
      BOOL v39 = v37 == v34;
    }
    else {
      BOOL v39 = 1;
    }
    if (!v39)
    {
      if (*(double *)(v37 + 32) != *(double *)(v34 + 32) || *(double *)(v37 + 40) != *(double *)(v34 + 40)) {
        goto LABEL_44;
      }
      uint64_t v40 = v38 - 1;
      if (v40)
      {
        if (*(double *)(v37 + 48) != *(double *)(v34 + 48) || *(double *)(v37 + 56) != *(double *)(v34 + 56)) {
          goto LABEL_44;
        }
        uint64_t v41 = 0;
        while (--v40)
        {
          uint64_t v42 = v37 + v41;
          uint64_t v43 = v34 + v41;
          if (*(double *)(v37 + v41 + 64) == *(double *)(v34 + v41 + 64))
          {
            v41 += 16;
            if (*(double *)(v42 + 72) == *(double *)(v43 + 72)) {
              continue;
            }
          }
          goto LABEL_44;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v29 = *(void *)(v45 + 8 * v30);
  if (v29)
  {
LABEL_16:
    int64_t v28 = v30;
LABEL_13:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v22 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v51 = v28;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v46)
    {
      int64_t v51 = v44;
      goto LABEL_27;
    }
    unint64_t v29 = *(void *)(v45 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_13;
    }
  }
LABEL_48:
  __break(1u);
}

void sub_250FBFA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510378C0();
  uint64_t v41 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC1714(0);
  MEMORY[0x270FA5388](v7 - 8);
  int64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v33 - v12;
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v42 = 0;
  uint64_t v38 = a1;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v35 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v41 + 16;
  BOOL v39 = (void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v40 = (void (**)(char *, char *, uint64_t))(v41 + 32);
  int64_t v34 = v36 - 1;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v42 << 6);
LABEL_8:
      uint64_t v20 = v38;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v41 + 16))(v9, *(void *)(v38 + 48) + *(void *)(v41 + 72) * v19, v4, v11);
      uint64_t v21 = *(void *)(*(void *)(v20 + 56) + 8 * v19);
      sub_250FC178C(0, (unint64_t *)&qword_269B14058, MEMORY[0x263F42E30], sub_250F55D14);
      uint64_t v23 = v22;
      *(void *)&v9[*(int *)(v22 + 48)] = v21;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 0, 1, v22);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    int64_t v24 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 < v36)
    {
      unint64_t v25 = *(void *)(v35 + 8 * v24);
      if (v25) {
        goto LABEL_12;
      }
      int64_t v26 = v42 + 2;
      ++v42;
      if (v24 + 1 < v36)
      {
        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (v25) {
          goto LABEL_15;
        }
        int64_t v42 = v24 + 1;
        if (v24 + 2 < v36)
        {
          unint64_t v25 = *(void *)(v35 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_12;
          }
          int64_t v26 = v24 + 3;
          int64_t v42 = v24 + 2;
          if (v24 + 3 < v36) {
            break;
          }
        }
      }
    }
LABEL_26:
    sub_250FC178C(0, (unint64_t *)&qword_269B14058, MEMORY[0x263F42E30], sub_250F55D14);
    uint64_t v23 = v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
    unint64_t v17 = 0;
LABEL_27:
    sub_250FC19D8((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))sub_250FC1714);
    sub_250FC178C(0, (unint64_t *)&qword_269B14058, MEMORY[0x263F42E30], sub_250F55D14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v13, 1, v23) == 1) {
      return;
    }
    uint64_t v28 = *(int *)(v23 + 48);
    (*v40)(v6, v13, v4);
    uint64_t v29 = *(void *)&v13[v28];
    sub_250FCB7F8((uint64_t)v6);
    LOBYTE(v28) = v30;
    (*v39)(v6, v4);
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v31 = swift_bridgeObjectRetain();
    char v32 = sub_250F842FC(v31, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0) {
      return;
    }
  }
  unint64_t v25 = *(void *)(v35 + 8 * v26);
  if (v25)
  {
LABEL_15:
    int64_t v24 = v26;
LABEL_12:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v42 = v24;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v36)
    {
      int64_t v42 = v34;
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v35 + 8 * v24);
    ++v26;
    if (v25) {
      goto LABEL_12;
    }
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_250FBFF7C()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000014;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73746E696F70;
  }
}

uint64_t sub_250FBFFD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250FC14D4(a1, a2);
  *a3 = result;
  return result;
}

void sub_250FC0000(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_250FC000C(uint64_t a1)
{
  unint64_t v2 = sub_250FC0328();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250FC0048(uint64_t a1)
{
  unint64_t v2 = sub_250FC0328();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t OvernightMetricsChartPointCollection.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  sub_250FC0998(0, &qword_269B14220, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250FC0328();
  sub_2510398B0();
  uint64_t v13 = *v3;
  HIBYTE(v12) = 0;
  sub_250FC16B0(0, &qword_269B13820, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D488]);
  sub_250FC09FC((unint64_t *)&qword_269B13BE8, &qword_269B13BD8);
  sub_2510397A0();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for OvernightMetricsChartPointCollection();
    LOBYTE(v13) = 1;
    sub_2510374F0();
    sub_250FC1930(&qword_269B14230, MEMORY[0x263F07920]);
    sub_2510397A0();
    uint64_t v13 = *(uint64_t *)((char *)v3 + *(int *)(v10 + 24));
    HIBYTE(v12) = 2;
    sub_250FC037C();
    sub_250FC0418();
    sub_2510397A0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_250FC0328()
{
  unint64_t result = qword_269B14228;
  if (!qword_269B14228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14228);
  }
  return result;
}

void sub_250FC037C()
{
  if (!qword_269B14238)
  {
    sub_251037740();
    sub_250FC1930(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v0 = sub_251039060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B14238);
    }
  }
}

unint64_t sub_250FC0418()
{
  unint64_t result = qword_269B14240;
  if (!qword_269B14240)
  {
    sub_250FC037C();
    sub_250FC1930(&qword_269B13C10, MEMORY[0x263F42CD0]);
    sub_250FC04C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14240);
  }
  return result;
}

unint64_t sub_250FC04C0()
{
  unint64_t result = qword_269B14248;
  if (!qword_269B14248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14248);
  }
  return result;
}

uint64_t OvernightMetricsChartPointCollection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = sub_2510374F0();
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC0998(0, &qword_269B14250, MEMORY[0x263F8E040]);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x270FA5388](v9);
  __n128 v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250FC0328();
  unint64_t v25 = v8;
  uint64_t v12 = v26;
  sub_2510398A0();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v13 = v5;
  int64_t v26 = a1;
  uint64_t v14 = v23;
  uint64_t v15 = v11;
  sub_250FC16B0(0, &qword_269B13820, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D488]);
  char v27 = 0;
  sub_250FC09FC((unint64_t *)&qword_269B13C50, &qword_269B13C40);
  uint64_t v16 = v24;
  sub_251039730();
  *(void *)uint64_t v15 = v28;
  LOBYTE(v28) = 1;
  sub_250FC1930(&qword_269B14258, MEMORY[0x263F07920]);
  sub_251039730();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v15[*(int *)(v9 + 20)], v13, v3);
  sub_250FC037C();
  char v27 = 2;
  sub_250FC0ABC();
  sub_251039730();
  uint64_t v17 = v14;
  uint64_t v18 = (uint64_t)v26;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
  *(void *)&v15[*(int *)(v9 + 24)] = v28;
  sub_250FC18C8((uint64_t)v15, v21, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
  __swift_destroy_boxed_opaque_existential_0(v18);
  return sub_250FC1978((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPointCollection);
}

void sub_250FC0998(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250FC0328();
    unint64_t v7 = a3(a1, &type metadata for OvernightMetricsChartPointCollection.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250FC09FC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250FC16B0(255, &qword_269B13820, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D488]);
    sub_250FC1930(a2, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250FC0ABC()
{
  unint64_t result = qword_269B14260;
  if (!qword_269B14260)
  {
    sub_250FC037C();
    sub_250FC1930(&qword_269B13C70, MEMORY[0x263F42CD0]);
    sub_250FC0B64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14260);
  }
  return result;
}

unint64_t sub_250FC0B64()
{
  unint64_t result = qword_269B14268;
  if (!qword_269B14268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14268);
  }
  return result;
}

void sub_250FC0BB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if ((sub_250F83D84(*a1, *a2) & 1) != 0
    && (MEMORY[0x25338F200]((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = *(uint64_t *)((char *)a1 + v6);
    uint64_t v8 = *(uint64_t *)((char *)a2 + v6);
    sub_250FBE830(v7, v8);
  }
}

uint64_t sub_250FC0C3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsChartPointCollection.init(from:)(a1, a2);
}

uint64_t sub_250FC0C54(void *a1)
{
  return OvernightMetricsChartPointCollection.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for OvernightMetricsChartPointCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_2510374F0();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for OvernightMetricsChartPointCollection(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for OvernightMetricsChartPointCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510374F0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OvernightMetricsChartPointCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for OvernightMetricsChartPointCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for OvernightMetricsChartPointCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510374F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartPointCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FC10C0);
}

uint64_t sub_250FC10C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2510374F0();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartPointCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FC1184);
}

void *sub_250FC1184(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2510374F0();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_250FC122C()
{
  uint64_t result = sub_2510374F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OvernightMetricsChartPointCollection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250FC1394);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartPointCollection.CodingKeys()
{
  return &type metadata for OvernightMetricsChartPointCollection.CodingKeys;
}

unint64_t sub_250FC13D0()
{
  unint64_t result = qword_269B14270;
  if (!qword_269B14270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14270);
  }
  return result;
}

unint64_t sub_250FC1428()
{
  unint64_t result = qword_269B14278;
  if (!qword_269B14278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14278);
  }
  return result;
}

unint64_t sub_250FC1480()
{
  unint64_t result = qword_269B14280;
  if (!qword_269B14280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B14280);
  }
  return result;
}

uint64_t sub_250FC14D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73746E696F70 && a2 == 0xE600000000000000;
  if (v2 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000251040A20 || (sub_2510397F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000251040A40)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_2510397F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void sub_250FC1618(uint64_t a1)
{
}

void sub_250FC1654(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  if (!*a2)
  {
    sub_250FC178C(255, a3, a4, a5);
    unint64_t v6 = sub_251039490();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_250FC16B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250FC1714(uint64_t a1)
{
}

void sub_250FC1750(uint64_t a1)
{
}

void sub_250FC178C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_250FC180C(uint64_t a1)
{
}

void sub_250FC1840()
{
  if (!qword_269B142B8)
  {
    sub_251037740();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B142B8);
    }
  }
}

uint64_t sub_250FC18AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250FBE5D4(a1, a2);
}

uint64_t sub_250FC18C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250FC1930(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250FC1978(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250FC19D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id static NSBundle.healthBalanceUI.getter()
{
  type metadata accessor for HealthBalanceUI();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  return v1;
}

uint64_t type metadata accessor for HealthBalanceUI()
{
  return self;
}

uint64_t sub_250FC1AC0()
{
  return swift_deallocClassInstance();
}

uint64_t BalanceWidgetViewModel.init(dayRange:chronologicalDaySummaries:timeScope:featureStatus:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v9 = sub_2510375C0();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_250FC6EB4(0, qword_26B210D00, MEMORY[0x263F42EF8]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = &v24[-v13];
  uint64_t v15 = sub_2510376B0();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x270FA5388](v15);
  unint64_t v19 = &v24[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v25 = *a3;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v15, v17);
  uint64_t v20 = sub_2510379E0();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v21 + 16))(v14, a4, v20);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v21 + 56))(v14, 0, 1, v20);
  OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)((uint64_t)v19, v26, (uint64_t)v14, a5);
  sub_2510375B0();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a4, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  uint64_t v22 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v27 + 32))(a5 + *(int *)(v22 + 20), v11, v28);
  *(unsigned char *)(a5 + *(int *)(v22 + 24)) = v25;
  return result;
}

uint64_t sub_250FC1D98()
{
  sub_250FC6EB4(0, &qword_26B210AB8, MEMORY[0x263F42D70]);
  MEMORY[0x270FA5388](v0 - 8);
  BOOL v2 = (char *)&v9 - v1;
  uint64_t v3 = sub_2510377E0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250FC6474((uint64_t)v2, &qword_26B210AB8, MEMORY[0x263F42D70]);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  if ((sub_2510377D0() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  uint64_t v7 = MEMORY[0x25338F500]();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t sub_250FC1F70()
{
  uint64_t v0 = sub_251037940();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC6EB4(0, &qword_26B210AB8, MEMORY[0x263F42D70]);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)&v35 - v5;
  uint64_t v7 = sub_2510377E0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_250FC6474((uint64_t)v6, &qword_26B210AB8, MEMORY[0x263F42D70]);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  uint64_t v11 = sub_2510377B0();
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    int64_t v36 = v10;
    uint64_t v37 = v8;
    uint64_t v38 = v7;
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    uint64_t v13 = *(unsigned __int8 *)(v1 + 80);
    uint64_t v35 = v11;
    uint64_t v14 = v11 + ((v13 + 32) & ~v13);
    uint64_t v15 = *(void *)(v1 + 72);
    uint64_t v16 = (void (**)(char *, uint64_t))(v1 + 8);
    double v17 = (double *)MEMORY[0x263F8EE78];
    uint64_t v39 = v1 + 16;
    v40(v3, v14, v0);
    while (1)
    {
      uint64_t v18 = sub_251037850();
      char v20 = v19;
      (*v16)(v3, v0);
      if ((v20 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v17 = (double *)sub_250FA0F70(0, *((void *)v17 + 2) + 1, 1, v17);
        }
        unint64_t v22 = *((void *)v17 + 2);
        unint64_t v21 = *((void *)v17 + 3);
        if (v22 >= v21 >> 1) {
          double v17 = (double *)sub_250FA0F70((void *)(v21 > 1), v22 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v22 + 1;
        *(void *)&v17[v22 + 4] = v18;
      }
      v14 += v15;
      if (!--v12) {
        break;
      }
      v40(v3, v14, v0);
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v37;
    uint64_t v7 = v38;
    uint64_t v10 = v36;
    uint64_t v23 = *((void *)v17 + 2);
    if (v23) {
      goto LABEL_14;
    }
LABEL_17:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  double v17 = (double *)MEMORY[0x263F8EE78];
  uint64_t v23 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v23) {
    goto LABEL_17;
  }
LABEL_14:
  double v24 = v17[4];
  uint64_t v25 = v23 - 1;
  if (v25)
  {
    uint64_t v28 = v17 + 5;
    uint64_t v29 = v25;
    double v26 = v17[4];
    do
    {
      double v30 = *v28++;
      double v31 = v30;
      if (v30 < v26) {
        double v26 = v31;
      }
      --v29;
    }
    while (v29);
    char v32 = v17 + 5;
    do
    {
      double v33 = *v32++;
      double v34 = v33;
      if (v24 < v33) {
        double v24 = v34;
      }
      --v25;
    }
    while (v25);
  }
  else
  {
    double v26 = v17[4];
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v26 <= v24) {
    return *(void *)&v26;
  }
  __break(1u);
  return result;
}

void *sub_250FC2370(uint64_t a1)
{
  uint64_t v2 = sub_251037940();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC6EB4(0, &qword_26B210AB8, MEMORY[0x263F42D70]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v30 - v7;
  uint64_t v9 = sub_2510377E0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_250FC6474((uint64_t)v8, &qword_26B210AB8, MEMORY[0x263F42D70]);
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    uint64_t v14 = sub_2510377B0();
    MEMORY[0x270FA5388](v14);
    v30[-2] = a1;
    sub_250F7D05C((uint64_t (*)(void))sub_250FC6F08, (uint64_t)&v30[-4], v15);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      double v31 = v12;
      uint64_t v32 = v10;
      uint64_t v33 = v9;
      char v19 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
      uint64_t v18 = v3 + 16;
      uint64_t v35 = v19;
      uint64_t v20 = *(unsigned __int8 *)(v18 + 64);
      v30[1] = v16;
      uint64_t v21 = v16 + ((v20 + 32) & ~v20);
      uint64_t v22 = *(void *)(v18 + 56);
      uint64_t v23 = (void (**)(char *, uint64_t))(v18 - 8);
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v34 = v18;
      v19(v5, v21, v2);
      while (1)
      {
        uint64_t v24 = sub_251037850();
        char v26 = v25;
        (*v23)(v5, v2);
        if ((v26 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v13 = sub_250FA0F70(0, v13[2] + 1, 1, v13);
          }
          unint64_t v28 = v13[2];
          unint64_t v27 = v13[3];
          if (v28 >= v27 >> 1) {
            uint64_t v13 = sub_250FA0F70((void *)(v27 > 1), v28 + 1, 1, v13);
          }
          void v13[2] = v28 + 1;
          v13[v28 + 4] = v24;
        }
        v21 += v22;
        if (!--v17) {
          break;
        }
        v35(v5, v21, v2);
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = v32;
      uint64_t v9 = v33;
      uint64_t v12 = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v13;
}

uint64_t sub_250FC2718@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  int v37 = a1;
  uint64_t v38 = a2;
  uint64_t v39 = sub_2510375A0();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v36[-v8];
  sub_250FC6EB4(0, &qword_269B142C0, MEMORY[0x263F42B38]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = &v36[-v14];
  uint64_t v16 = sub_2510375C0();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  char v19 = &v36[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = &v36[-v21];
  uint64_t v23 = type metadata accessor for BalanceWidgetViewModel();
  uint64_t v24 = v3 + *(int *)(v23 + 20);
  char v25 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16);
  if (*(unsigned char *)(v3 + *(int *)(v23 + 24)))
  {
    v25(v19, v24, v16);
    uint64_t v26 = *MEMORY[0x263F42B28];
    uint64_t v27 = sub_251037590();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 104))(v12, v26, v27);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v12, 0, 1, v27);
    uint64_t v29 = (unsigned int *)MEMORY[0x263F42B40];
    if ((v37 & 1) == 0) {
      uint64_t v29 = (unsigned int *)MEMORY[0x263F42B50];
    }
    uint64_t v30 = v39;
    (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, *v29, v39);
    sub_251037580();
    uint64_t v9 = v6;
    uint64_t v15 = v12;
    uint64_t v22 = v19;
  }
  else
  {
    v25(v22, v24, v16);
    uint64_t v31 = *MEMORY[0x263F42B20];
    uint64_t v32 = sub_251037590();
    uint64_t v33 = *(void *)(v32 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v33 + 104))(v15, v31, v32);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v33 + 56))(v15, 0, 1, v32);
    uint64_t v34 = (unsigned int *)MEMORY[0x263F42B40];
    if ((v37 & 1) == 0) {
      uint64_t v34 = (unsigned int *)MEMORY[0x263F42B50];
    }
    uint64_t v30 = v39;
    (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v9, *v34, v39);
    sub_251037580();
  }
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v30);
  sub_250FC6474((uint64_t)v15, &qword_269B142C0, MEMORY[0x263F42B38]);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t sub_250FC2B70()
{
  uint64_t v0 = sub_251039160();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_251037460();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039180();
  MEMORY[0x270FA5388](v2 - 8);
  sub_250FC6EB4(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v25 - v4;
  uint64_t v6 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_250FC1D98();
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = v10;
    sub_250FC6F28();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_25103AD40;
    if (v12)
    {
      sub_251039150();
      sub_251039140();
      uint64_t v14 = sub_250FC1D98();
      if (v15) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v14;
      }
      v25[1] = v16;
      sub_251039120();
      sub_251039140();
      sub_251039170();
      type metadata accessor for HealthBalanceUI();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v18 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    }
    else
    {
      sub_251039100();
      type metadata accessor for HealthBalanceUI();
      uint64_t v22 = swift_getObjCClassFromMetadata();
      id v18 = objc_msgSend(self, sel_bundleForClass_, v22);
    }
    goto LABEL_13;
  }
  sub_250FC6880((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_250FC6474((uint64_t)v5, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
LABEL_11:
    sub_250FC6F28();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_25103AD40;
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t v21 = swift_getObjCClassFromMetadata();
    id v18 = objc_msgSend(self, sel_bundleForClass_, v21);
LABEL_13:
    id v23 = v18;
    sub_251037450();
    *(void *)(v13 + 32) = sub_2510391D0();
    *(void *)(v13 + 40) = v24;
    return v13;
  }
  sub_250F7145C((uint64_t)v5, (uint64_t)v9);
  uint64_t v19 = sub_251037610();
  uint64_t result = sub_251037630();
  if (!__OFSUB__(v19, result))
  {
    sub_250FC5310((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_250FC3070()
{
  uint64_t v0 = sub_251037460();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_251039180();
  MEMORY[0x270FA5388](v3 - 8);
  v37[3] = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_251039160();
  MEMORY[0x270FA5388](v5 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v37[2] = (char *)v37 - v7;
  sub_250FC6EB4(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v37 - v12;
  uint64_t v14 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v37 - v19;
  uint64_t v21 = sub_250FC1D98();
  if ((v22 & 1) == 0)
  {
    if (v21)
    {
      sub_251039150();
      sub_251039140();
      uint64_t v23 = sub_250FC1D98();
      if (v24) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v23;
      }
      uint64_t v38 = v25;
      sub_251039120();
      sub_251039140();
      sub_251039170();
      type metadata accessor for HealthBalanceUI();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v27 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    }
    else
    {
      sub_251039100();
      type metadata accessor for HealthBalanceUI();
      uint64_t v34 = swift_getObjCClassFromMetadata();
      id v27 = objc_msgSend(self, sel_bundleForClass_, v34);
    }
    v27;
    sub_251037450();
    return sub_2510391D0();
  }
  v37[1] = v2;
  sub_250FC6880((uint64_t)v13);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v28(v13, 1, v14) == 1)
  {
    sub_250FC6474((uint64_t)v13, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
LABEL_13:
    sub_251039100();
    type metadata accessor for HealthBalanceUI();
    uint64_t v33 = swift_getObjCClassFromMetadata();
    objc_msgSend(self, sel_bundleForClass_, v33);
    sub_251037450();
    return sub_2510391D0();
  }
  sub_250F7145C((uint64_t)v13, (uint64_t)v20);
  uint64_t v29 = sub_251037610();
  uint64_t result = sub_251037630();
  uint64_t v31 = v29 - result;
  if (__OFSUB__(v29, result))
  {
    __break(1u);
  }
  else
  {
    sub_250FC5310((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    if (v31 <= 0) {
      goto LABEL_13;
    }
    sub_251039150();
    sub_251039140();
    sub_250FC6880((uint64_t)v10);
    if (v28(v10, 1, v14) == 1)
    {
      sub_250FC6474((uint64_t)v10, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      uint64_t v32 = 0;
LABEL_18:
      uint64_t v38 = v32;
      sub_251039120();
      sub_251039140();
      sub_251039170();
      type metadata accessor for HealthBalanceUI();
      uint64_t v36 = swift_getObjCClassFromMetadata();
      objc_msgSend(self, sel_bundleForClass_, v36);
      sub_251037450();
      return sub_2510391D0();
    }
    sub_250F7145C((uint64_t)v10, (uint64_t)v17);
    uint64_t v35 = sub_251037610();
    uint64_t result = sub_251037630();
    if (!__OFSUB__(v35, result))
    {
      uint64_t v32 = (v35 - result) & ~((v35 - result) >> 63);
      sub_250FC5310((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_250FC36C0()
{
  sub_250FC6EB4(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v10 - v1;
  uint64_t v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC6880((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_250FC6474((uint64_t)v2, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    uint64_t v7 = 0;
LABEL_5:
    v10[1] = v7;
    sub_250F8F884();
    return sub_2510394F0();
  }
  sub_250F7145C((uint64_t)v2, (uint64_t)v6);
  uint64_t v8 = sub_251037610();
  uint64_t result = sub_251037630();
  if (!__OFSUB__(v8, result))
  {
    uint64_t v7 = (v8 - result) & ~((v8 - result) >> 63);
    sub_250FC5310((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BalanceWidgetViewModel()
{
  uint64_t result = qword_26B2100F8;
  if (!qword_26B2100F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for BalanceWidgetViewModel(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510376B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(void *)&a1[v8[5]] = *(void *)&a2[v8[5]];
    uint64_t v9 = v8[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v10 = *(void *)v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = sub_2510379E0();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        sub_250FC6EB4(0, qword_26B210D00, MEMORY[0x263F42EF8]);
        memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v11, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = v8[7];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v20 = *((void *)v19 - 1);
    uint64_t v68 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      sub_250FC6EB4(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = sub_251037400();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      v23(v17, v18, v22);
      uint64_t v24 = v19[5];
      uint64_t v65 = v8;
      uint64_t v25 = &v17[v24];
      uint64_t v26 = &v18[v24];
      v23(&v17[v24], &v18[v24], v22);
      sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
      uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
      *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
      *(void *)&v25[v28[7]] = *(void *)&v26[v28[7]];
      uint64_t v29 = v19[6];
      uint64_t v30 = &v17[v29];
      uint64_t v31 = &v18[v29];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v17[v19[7]] = v18[v19[7]];
      v17[v19[8]] = v18[v19[8]];
      v17[v19[9]] = v18[v19[9]];
      uint64_t v32 = v19[10];
      uint64_t v33 = &v17[v32];
      uint64_t v34 = &v18[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      uint64_t v36 = v19[11];
      int v37 = &v17[v36];
      uint64_t v38 = &v18[v36];
      uint64_t v39 = *((void *)v38 + 1);
      *(void *)int v37 = *(void *)v38;
      *((void *)v37 + 1) = v39;
      uint64_t v40 = *(void (**)(char *, void, uint64_t, int *))(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = v65;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v17, 0, 1, v19);
    }
    uint64_t v41 = v8[8];
    int64_t v42 = &a1[v41];
    uint64_t v43 = &a2[v41];
    *(void *)&a1[v41] = *(void *)&a2[v41];
    uint64_t v44 = type metadata accessor for OvernightMetricsChartPointCollection();
    uint64_t v45 = *(int *)(v44 + 20);
    unint64_t v64 = &v43[v45];
    char v66 = &v42[v45];
    int64_t v46 = v8;
    uint64_t v47 = sub_2510374F0();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
    swift_bridgeObjectRetain();
    v48(v66, v64, v47);
    *(void *)&v42[*(int *)(v44 + 24)] = *(void *)&v43[*(int *)(v44 + 24)];
    *(void *)&a1[v46[9]] = *(void *)&a2[v46[9]];
    *(void *)&a1[v46[10]] = *(void *)&a2[v46[10]];
    uint64_t v49 = v46[11];
    uint64_t v67 = &a1[v49];
    int64_t v50 = &a2[v49];
    uint64_t v51 = sub_251037400();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v67, v50, v51);
    sub_250FC3F6C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
    uint64_t v54 = v53;
    v52(&v67[*(int *)(v53 + 36)], &v50[*(int *)(v53 + 36)], v51);
    uint64_t v55 = v46[12];
    int v56 = &a1[v55];
    uint64_t v57 = &a2[v55];
    v52(&a1[v55], &a2[v55], v51);
    v52(&v56[*(int *)(v54 + 36)], &v57[*(int *)(v54 + 36)], v51);
    *(void *)&a1[v46[13]] = *(void *)&a2[v46[13]];
    *(void *)&a1[v46[14]] = *(void *)&a2[v46[14]];
    uint64_t v58 = *(int *)(v68 + 20);
    uint64_t v59 = &a1[v58];
    uint64_t v60 = &a2[v58];
    uint64_t v61 = sub_2510375C0();
    BOOL v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62(v59, v60, v61);
    a1[*(int *)(v68 + 24)] = a2[*(int *)(v68 + 24)];
  }
  return a1;
}

void sub_250FC3F6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_251037400();
    uint64_t v7 = sub_250FC6E6C((unint64_t *)&qword_26B210CF8, MEMORY[0x263F07490]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for BalanceWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = sub_2510379E0();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  uint64_t v9 = a1 + v5[7];
  uint64_t v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = sub_251037400();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v9, v11);
    uint64_t v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  uint64_t v17 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + v5[11];
  uint64_t v19 = sub_251037400();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_250FC3F6C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  uint64_t v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = a1 + *(int *)(a2 + 20);
  uint64_t v25 = sub_2510375C0();
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8);
  return v26(v24, v25);
}

uint64_t initializeWithCopy for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = sub_2510379E0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_250FC6EB4(0, qword_26B210D00, MEMORY[0x263F42EF8]);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v66 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_250FC6EB4(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_251037400();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v15, v16, v20);
    uint64_t v22 = v17[5];
    uint64_t v63 = v7;
    uint64_t v23 = &v15[v22];
    uint64_t v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
    *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
    *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
    uint64_t v27 = v17[6];
    uint64_t v28 = &v15[v27];
    uint64_t v29 = &v16[v27];
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    uint64_t v30 = v17[10];
    uint64_t v31 = &v15[v30];
    uint64_t v32 = &v16[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = v17[11];
    uint64_t v35 = &v15[v34];
    uint64_t v36 = &v16[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v37;
    uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = v63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v15, 0, 1, v17);
  }
  uint64_t v39 = v7[8];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v62 = v41 + v43;
  uint64_t v64 = v40 + v43;
  uint64_t v44 = v7;
  uint64_t v45 = sub_2510374F0();
  int64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16);
  swift_bridgeObjectRetain();
  v46(v64, v62, v45);
  *(void *)(v40 + *(int *)(v42 + 24)) = *(void *)(v41 + *(int *)(v42 + 24));
  *(void *)(a1 + v44[9]) = *(void *)(a2 + v44[9]);
  *(void *)(a1 + v44[10]) = *(void *)(a2 + v44[10]);
  uint64_t v47 = v44[11];
  uint64_t v65 = a1 + v47;
  uint64_t v48 = a2 + v47;
  uint64_t v49 = sub_251037400();
  int64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50(v65, v48, v49);
  sub_250FC3F6C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(v65 + *(int *)(v51 + 36), v48 + *(int *)(v51 + 36), v49);
  uint64_t v53 = v44[12];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v50(a1 + v53, a2 + v53, v49);
  v50(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v49);
  *(void *)(a1 + v44[13]) = *(void *)(a2 + v44[13]);
  *(void *)(a1 + v44[14]) = *(void *)(a2 + v44[14]);
  uint64_t v56 = *(int *)(v66 + 20);
  uint64_t v57 = a1 + v56;
  uint64_t v58 = a2 + v56;
  uint64_t v59 = sub_2510375C0();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60(v57, v58, v59);
  *(unsigned char *)(a1 + *(int *)(v66 + 24)) = *(unsigned char *)(a2 + *(int *)(v66 + 24));
  return a1;
}

uint64_t assignWithCopy for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v6[5]) = *(void *)(a2 + v6[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = v6[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_250FC5310(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v8 = *v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = sub_2510379E0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_250FC6EB4(0, qword_26B210D00, MEMORY[0x263F42EF8]);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = v6[7];
  uint64_t v14 = (unsigned char *)(a1 + v13);
  uint64_t v15 = (unsigned char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v79 = *((void *)v16 - 1);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v79 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v61 = sub_251037400();
      uint64_t v62 = *(void (**)(void))(*(void *)(v61 - 8) + 24);
      uint64_t v81 = v61;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v62)(v14, v15, v61);
      uint64_t v63 = (void (*)(char *, char *, uint64_t))v62;
      uint64_t v64 = v16[5];
      uint64_t v65 = &v14[v64];
      long long v78 = &v15[v64];
      ((void (*)(unsigned char *))v63)(&v14[v64]);
      sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v63(&v65[*(int *)(v66 + 36)], &v78[*(int *)(v66 + 36)], v81);
      uint64_t v67 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v65[v67[5]] = *(void *)&v78[v67[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v65[v67[6]] = *(void *)&v78[v67[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v65[v67[7]] = *(void *)&v78[v67[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v68 = v16[6];
      uint64_t v69 = &v14[v68];
      uint64_t v70 = &v15[v68];
      long long v71 = *(_OWORD *)v70;
      v69[16] = v70[16];
      *(_OWORD *)uint64_t v69 = v71;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      uint64_t v72 = v16[10];
      uint64_t v73 = &v14[v72];
      uint64_t v74 = &v15[v72];
      *uint64_t v73 = *v74;
      v73[1] = v74[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v75 = v16[11];
      uint64_t v76 = &v14[v75];
      long long v77 = &v15[v75];
      void *v76 = *v77;
      v76[1] = v77[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_250FC5310((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_13;
  }
  if (v19)
  {
LABEL_13:
    sub_250FC6EB4(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v14, v15, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v20 = sub_251037400();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  v21(v14, v15, v20);
  uint64_t v22 = v16[5];
  uint64_t v23 = &v14[v22];
  uint64_t v24 = &v15[v22];
  v21(&v14[v22], &v15[v22], v20);
  sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
  uint64_t v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v23[v26[5]] = *(void *)&v24[v26[5]];
  *(void *)&v23[v26[6]] = *(void *)&v24[v26[6]];
  *(void *)&v23[v26[7]] = *(void *)&v24[v26[7]];
  uint64_t v27 = v16[6];
  uint64_t v28 = &v14[v27];
  uint64_t v29 = &v15[v27];
  char v30 = v29[16];
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[16] = v30;
  v14[v16[7]] = v15[v16[7]];
  v14[v16[8]] = v15[v16[8]];
  v14[v16[9]] = v15[v16[9]];
  uint64_t v31 = v16[10];
  uint64_t v32 = &v14[v31];
  uint64_t v33 = &v15[v31];
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  uint64_t v34 = v16[11];
  uint64_t v35 = &v14[v34];
  uint64_t v36 = &v15[v34];
  void *v35 = *v36;
  v35[1] = v36[1];
  uint64_t v80 = *(void (**)(unsigned char *, void, uint64_t, int *))(v79 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80(v14, 0, 1, v16);
LABEL_14:
  uint64_t v38 = v6[8];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(void *)(a1 + v38) = *(void *)(a2 + v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v42 = *(int *)(v41 + 20);
  uint64_t v43 = v39 + v42;
  uint64_t v44 = v40 + v42;
  uint64_t v45 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 24))(v43, v44, v45);
  *(void *)(v39 + *(int *)(v41 + 24)) = *(void *)(v40 + *(int *)(v41 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = v6[11];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  uint64_t v49 = sub_251037400();
  int64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 24);
  v50(v47, v48, v49);
  sub_250FC3F6C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v52 = v51;
  v50(v47 + *(int *)(v51 + 36), v48 + *(int *)(v51 + 36), v49);
  uint64_t v53 = v6[12];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v50(a1 + v53, a2 + v53, v49);
  v50(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v49);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[14]) = *(void *)(a2 + v6[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = *(int *)(a3 + 20);
  uint64_t v57 = a1 + v56;
  uint64_t v58 = a2 + v56;
  uint64_t v59 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 24))(v57, v58, v59);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_250FC5310(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = sub_2510379E0();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_250FC6EB4(0, qword_26B210D00, MEMORY[0x263F42EF8]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = v7[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  int v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v19 = *((void *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_250FC6EB4(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = sub_251037400();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
    uint64_t v57 = v19;
    v22(v16, v17, v21);
    uint64_t v23 = v22;
    uint64_t v24 = v18[5];
    uint64_t v25 = &v16[v24];
    uint64_t v58 = a3;
    uint64_t v26 = &v17[v24];
    v23(&v16[v24], &v17[v24], v21);
    sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v21);
    uint64_t v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v25[v28[5]] = *(void *)&v26[v28[5]];
    *(void *)&v25[v28[6]] = *(void *)&v26[v28[6]];
    uint64_t v29 = v28[7];
    uint64_t v30 = *(void *)&v26[v29];
    a3 = v58;
    *(void *)&v25[v29] = v30;
    uint64_t v31 = v18[6];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = &v17[v31];
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    v32[16] = v33[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v16, 0, 1, v18);
  }
  uint64_t v34 = v7[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  uint64_t v37 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  uint64_t v41 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
  *(void *)(v35 + *(int *)(v37 + 24)) = *(void *)(v36 + *(int *)(v37 + 24));
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  uint64_t v42 = v7[11];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = sub_251037400();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32);
  v46(v43, v44, v45);
  sub_250FC3F6C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v48 = v47;
  v46(v43 + *(int *)(v47 + 36), v44 + *(int *)(v47 + 36), v45);
  uint64_t v49 = v7[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  v46(a1 + v49, a2 + v49, v45);
  v46(v50 + *(int *)(v48 + 36), v51 + *(int *)(v48 + 36), v45);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  *(void *)(a1 + v7[14]) = *(void *)(a2 + v7[14]);
  uint64_t v52 = *(int *)(a3 + 20);
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  uint64_t v55 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 32))(v53, v54, v55);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510376B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v8 = v7[6];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_250FC5310(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    uint64_t v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v12 = sub_2510379E0();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_250FC6EB4(0, qword_26B210D00, MEMORY[0x263F42EF8]);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v81 = a3;
  uint64_t v15 = v7[7];
  uint64_t v16 = (unsigned char *)(a1 + v15);
  uint64_t v17 = (unsigned char *)(a2 + v15);
  int v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v19 = *((void *)v18 - 1);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      uint64_t v58 = sub_251037400();
      uint64_t v59 = *(void (**)(void))(*(void *)(v58 - 8) + 40);
      uint64_t v80 = v58;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v59)(v16, v17, v58);
      uint64_t v60 = (void (*)(char *, char *, uint64_t))v59;
      uint64_t v61 = v18[5];
      uint64_t v62 = &v16[v61];
      long long v78 = &v17[v61];
      ((void (*)(unsigned char *))v60)(&v16[v61]);
      sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v60(&v62[*(int *)(v63 + 36)], &v78[*(int *)(v63 + 36)], v80);
      uint64_t v64 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v62[v64[5]] = *(void *)&v78[v64[5]];
      swift_bridgeObjectRelease();
      *(void *)&v62[v64[6]] = *(void *)&v78[v64[6]];
      swift_bridgeObjectRelease();
      *(void *)&v62[v64[7]] = *(void *)&v78[v64[7]];
      swift_bridgeObjectRelease();
      uint64_t v65 = v18[6];
      uint64_t v66 = &v16[v65];
      uint64_t v67 = &v17[v65];
      *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
      v66[16] = v67[16];
      v16[v18[7]] = v17[v18[7]];
      v16[v18[8]] = v17[v18[8]];
      v16[v18[9]] = v17[v18[9]];
      uint64_t v68 = v18[10];
      uint64_t v69 = &v16[v68];
      uint64_t v70 = (uint64_t *)&v17[v68];
      uint64_t v72 = *v70;
      uint64_t v71 = v70[1];
      void *v69 = v72;
      v69[1] = v71;
      swift_bridgeObjectRelease();
      uint64_t v73 = v18[11];
      uint64_t v74 = &v16[v73];
      uint64_t v75 = (uint64_t *)&v17[v73];
      uint64_t v77 = *v75;
      uint64_t v76 = v75[1];
      void *v74 = v77;
      v74[1] = v76;
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_250FC5310((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_13;
  }
  if (v22)
  {
LABEL_13:
    sub_250FC6EB4(0, (unint64_t *)&qword_26B210E00, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v16, v17, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v23 = sub_251037400();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
  uint64_t v79 = v19;
  v24(v16, v17, v23);
  uint64_t v25 = v24;
  uint64_t v26 = v18[5];
  uint64_t v27 = &v16[v26];
  uint64_t v28 = &v17[v26];
  v25(&v16[v26], &v17[v26], v23);
  sub_250FC3F6C(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v25(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v23);
  uint64_t v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v27[v30[5]] = *(void *)&v28[v30[5]];
  *(void *)&v27[v30[6]] = *(void *)&v28[v30[6]];
  *(void *)&v27[v30[7]] = *(void *)&v28[v30[7]];
  uint64_t v31 = v18[6];
  uint64_t v32 = &v16[v31];
  uint64_t v33 = &v17[v31];
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  v32[16] = v33[16];
  v16[v18[7]] = v17[v18[7]];
  v16[v18[8]] = v17[v18[8]];
  v16[v18[9]] = v17[v18[9]];
  *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
  *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v79 + 56))(v16, 0, 1, v18);
LABEL_14:
  uint64_t v35 = v7[8];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  *(void *)(a1 + v35) = *(void *)(a2 + v35);
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for OvernightMetricsChartPointCollection();
  uint64_t v39 = *(int *)(v38 + 20);
  uint64_t v40 = v36 + v39;
  uint64_t v41 = v37 + v39;
  uint64_t v42 = sub_2510374F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  *(void *)(v36 + *(int *)(v38 + 24)) = *(void *)(v37 + *(int *)(v38 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  uint64_t v43 = v7[11];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = sub_251037400();
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 40);
  v47(v44, v45, v46);
  sub_250FC3F6C(0, &qword_26B210F90, MEMORY[0x263F8D1A0]);
  uint64_t v49 = v48;
  v47(v44 + *(int *)(v48 + 36), v45 + *(int *)(v48 + 36), v46);
  uint64_t v50 = v7[12];
  uint64_t v51 = a1 + v50;
  uint64_t v52 = a2 + v50;
  v47(a1 + v50, a2 + v50, v46);
  v47(v51 + *(int *)(v49 + 36), v52 + *(int *)(v49 + 36), v46);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[14]) = *(void *)(a2 + v7[14]);
  swift_bridgeObjectRelease();
  uint64_t v53 = *(int *)(v81 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = sub_2510375C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 40))(v54, v55, v56);
  *(unsigned char *)(a1 + *(int *)(v81 + 24)) = *(unsigned char *)(a2 + *(int *)(v81 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FC6170);
}

uint64_t sub_250FC6170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = sub_2510375C0();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
      if (v14 >= 2) {
        return v14 - 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FC6294);
}

uint64_t sub_250FC6294(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OvernightMetricsViewModel(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_2510375C0();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_250FC63A4()
{
  uint64_t result = type metadata accessor for OvernightMetricsViewModel(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_2510375C0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_250FC6474(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_250FC6EB4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250FC64D0()
{
  uint64_t v0 = sub_251037460();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_251039180();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_251039160();
  MEMORY[0x270FA5388](v2 - 8);
  sub_250FC6EB4(0, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - v4;
  uint64_t v6 = type metadata accessor for OvernightMetricsWarmupProgress();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC6880((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_250FC6474((uint64_t)v5, &qword_26B210278, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    return 0;
  }
  else
  {
    sub_250F7145C((uint64_t)v5, (uint64_t)v9);
    uint64_t v15 = sub_251037610();
    sub_250F8F884();
    sub_2510394F0();
    uint64_t v15 = sub_251037630();
    sub_2510394F0();
    sub_251039150();
    sub_251039140();
    sub_251039130();
    swift_bridgeObjectRelease();
    sub_251039140();
    sub_251039130();
    swift_bridgeObjectRelease();
    sub_251039140();
    sub_251039170();
    type metadata accessor for HealthBalanceUI();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v12 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_251037450();
    uint64_t v10 = sub_2510391D0();
    sub_250FC5310((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  return v10;
}

uint64_t sub_250FC6880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_251037640();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250FC6EB4(0, &qword_26B210AB8, MEMORY[0x263F42D70]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = sub_2510377E0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_250FC6474((uint64_t)v8, &qword_26B210AB8, MEMORY[0x263F42D70]);
    uint64_t v13 = type metadata accessor for OvernightMetricsWarmupProgress();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    uint64_t v25 = a1;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    sub_251037B60();
    uint64_t v15 = sub_2510376F0();
    v24[1] = v24;
    MEMORY[0x270FA5388](v15);
    v24[-2] = v12;
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_250F8E504(v16, (void (*)(uint64_t))sub_250F8EDEC, (uint64_t)&v24[-4]);
    swift_bridgeObjectRelease();
    if (*(void *)(v17 + 16) >= *(void *)(v15 + 16)) {
      uint64_t v18 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    if (v18)
    {
      sub_250FC6DC0();
      uint64_t v19 = sub_251039680();
    }
    else
    {
      uint64_t v19 = MEMORY[0x263F8EE80];
    }
    uint64_t v26 = v19;
    uint64_t v20 = swift_bridgeObjectRetain();
    sub_250F8E6F8(v20, v17, 1, &v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v25;
    uint64_t v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v25, v5, v2);
    uint64_t v23 = type metadata accessor for OvernightMetricsWarmupProgress();
    *(void *)(v22 + *(int *)(v23 + 20)) = v21;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
}

uint64_t sub_250FC6C4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v5 < v2) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t sub_250FC6C90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t sub_250FC6CD4()
{
  uint64_t v0 = sub_2510378C0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510378D0();
  char v4 = sub_2510378B0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

void sub_250FC6DC0()
{
  if (!qword_26B2102F8)
  {
    sub_251037740();
    sub_251037640();
    sub_250FC6E6C(&qword_26B210A88, MEMORY[0x263F42CD0]);
    unint64_t v0 = sub_251039690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2102F8);
    }
  }
}

uint64_t sub_250FC6E6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250FC6EB4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_251039490();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_250FC6F08()
{
  return sub_250FC6CD4() & 1;
}

void sub_250FC6F28()
{
  if (!qword_269B13EA8)
  {
    unint64_t v0 = sub_2510397D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B13EA8);
    }
  }
}

uint64_t *sub_250FC6F80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a3;
    uint64_t v7 = a1;
    uint64_t v8 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    id v12 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v47 = *((void *)v12 - 1);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, int *))(v47 + 48);
    swift_bridgeObjectRetain();
    if (v13(v11, 1, v12))
    {
      sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_251037400();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      uint64_t v46 = v5;
      v16(v10, v11, v15);
      uint64_t v17 = v16;
      uint64_t v18 = v12[5];
      uint64_t v19 = &v10[v18];
      uint64_t v20 = &v11[v18];
      v17(&v10[v18], &v11[v18], v15);
      sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v15);
      uint64_t v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v19[v22[5]] = *(void *)&v20[v22[5]];
      *(void *)&v19[v22[6]] = *(void *)&v20[v22[6]];
      *(void *)&v19[v22[7]] = *(void *)&v20[v22[7]];
      uint64_t v23 = v12[6];
      uint64_t v24 = &v10[v23];
      uint64_t v25 = &v11[v23];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v10[v12[7]] = v11[v12[7]];
      v10[v12[8]] = v11[v12[8]];
      v10[v12[9]] = v11[v12[9]];
      uint64_t v26 = v12[10];
      uint64_t v27 = &v10[v26];
      uint64_t v28 = &v11[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      uint64_t v30 = v12[11];
      uint64_t v31 = &v10[v30];
      uint64_t v32 = &v11[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      uint64_t v48 = *(void (**)(char *, void, uint64_t, int *))(v47 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48(v10, 0, 1, v12);
      uint64_t v5 = v46;
    }
    *(_OWORD *)((char *)v7 + v8[6]) = *(_OWORD *)((char *)a2 + v8[6]);
    uint64_t v34 = v8[7];
    uint64_t v35 = (char *)v7 + v34;
    uint64_t v36 = (char *)a2 + v34;
    long long v37 = *((_OWORD *)v36 + 1);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v37;
    *((void *)v35 + 10) = *((void *)v36 + 10);
    long long v38 = *((_OWORD *)v36 + 4);
    long long v39 = *((_OWORD *)v36 + 2);
    *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
    *((_OWORD *)v35 + 4) = v38;
    *((_OWORD *)v35 + 2) = v39;
    *(uint64_t *)((char *)v7 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
    *(uint64_t *)((char *)v7 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
    uint64_t v40 = *(int *)(v5 + 20);
    uint64_t v41 = (char *)v7 + v40;
    uint64_t v42 = (char *)a2 + v40;
    uint64_t v43 = *((void *)v42 + 1);
    *(void *)uint64_t v41 = *(void *)v42;
    *((void *)v41 + 1) = v43;
    uint64_t v44 = *((void *)v42 + 3);
    *((void *)v41 + 2) = *((void *)v42 + 2);
    *((void *)v41 + 3) = v44;
    *((void *)v41 + 4) = *((void *)v42 + 4);
    *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
    *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    *(_OWORD *)(v41 + 72) = *(_OWORD *)(v42 + 72);
    *(_OWORD *)(v41 + 88) = *(_OWORD *)(v42 + 88);
    *(_OWORD *)(v41 + 104) = *(_OWORD *)(v42 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t type metadata accessor for OvernightMetricsChartLayout.Configuration(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B142D8);
}

uint64_t sub_250FC737C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  uint64_t v3 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    uint64_t v4 = sub_251037400();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    v5(v2, v4);
    uint64_t v6 = v2 + *(int *)(v3 + 20);
    v5(v6, v4);
    sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v5(v6 + *(int *)(v7 + 36), v4);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_250FC752C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v45 = *((void *)v10 - 1);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, int *))(v45 + 48);
  swift_bridgeObjectRetain();
  if (v11(v9, 1, v10))
  {
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    uint64_t v44 = a3;
    v14(v8, v9, v13);
    uint64_t v15 = v14;
    uint64_t v16 = v10[5];
    uint64_t v17 = &v8[v16];
    uint64_t v18 = &v9[v16];
    v15(&v8[v16], &v9[v16], v13);
    sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v13);
    uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v17[v20[5]] = *(void *)&v18[v20[5]];
    *(void *)&v17[v20[6]] = *(void *)&v18[v20[6]];
    *(void *)&v17[v20[7]] = *(void *)&v18[v20[7]];
    uint64_t v21 = v10[6];
    uint64_t v22 = &v8[v21];
    uint64_t v23 = &v9[v21];
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    uint64_t v24 = v10[10];
    uint64_t v25 = &v8[v24];
    uint64_t v26 = &v9[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = *(void *)v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = v10[11];
    uint64_t v29 = &v8[v28];
    uint64_t v30 = &v9[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v46 = *(void (**)(char *, void, uint64_t, int *))(v45 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46(v8, 0, 1, v10);
    a3 = v44;
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  uint64_t v32 = v6[7];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  long long v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((void *)v33 + 10) = *((void *)v34 + 10);
  long long v36 = *((_OWORD *)v34 + 4);
  long long v37 = *((_OWORD *)v34 + 2);
  *((_OWORD *)v33 + 3) = *((_OWORD *)v34 + 3);
  *((_OWORD *)v33 + 4) = v36;
  *((_OWORD *)v33 + 2) = v37;
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  uint64_t v38 = *(int *)(a3 + 20);
  long long v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)long long v39 = *(void *)v40;
  *((void *)v39 + 1) = v41;
  uint64_t v42 = *((void *)v40 + 3);
  *((void *)v39 + 2) = *((void *)v40 + 2);
  *((void *)v39 + 3) = v42;
  *((void *)v39 + 4) = *((void *)v40 + 4);
  *(_OWORD *)(v39 + 40) = *(_OWORD *)(v40 + 40);
  *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
  *(_OWORD *)(v39 + 72) = *(_OWORD *)(v40 + 72);
  *(_OWORD *)(v39 + 88) = *(_OWORD *)(v40 + 88);
  *(_OWORD *)(v39 + 104) = *(_OWORD *)(v40 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_250FC78BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v45 = sub_251037400();
      uint64_t v46 = *(void (**)(void))(*(void *)(v45 - 8) + 24);
      uint64_t v64 = v45;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v46)(v7, v8, v45);
      uint64_t v47 = (void (*)(char *, char *, uint64_t))v46;
      uint64_t v48 = v9[5];
      uint64_t v49 = &v7[v48];
      uint64_t v62 = &v8[v48];
      ((void (*)(unsigned char *))v47)(&v7[v48]);
      sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v47(&v49[*(int *)(v50 + 36)], &v62[*(int *)(v50 + 36)], v64);
      uint64_t v51 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v49[v51[5]] = *(void *)&v62[v51[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v49[v51[6]] = *(void *)&v62[v51[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v49[v51[7]] = *(void *)&v62[v51[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v52 = v9[6];
      uint64_t v53 = &v7[v52];
      uint64_t v54 = &v8[v52];
      long long v55 = *(_OWORD *)v54;
      v53[16] = v54[16];
      *(_OWORD *)uint64_t v53 = v55;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      uint64_t v56 = v9[10];
      uint64_t v57 = &v7[v56];
      uint64_t v58 = &v8[v56];
      *uint64_t v57 = *v58;
      v57[1] = v58[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v59 = v9[11];
      uint64_t v60 = &v7[v59];
      uint64_t v61 = &v8[v59];
      void *v60 = *v61;
      v60[1] = v61[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_250FCEC5C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = sub_251037400();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  uint64_t v63 = v5;
  v15(v7, v8, v14);
  uint64_t v16 = v15;
  uint64_t v17 = v9[5];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  v16(&v7[v17], &v8[v17], v14);
  sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v14);
  uint64_t v21 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v18[v21[5]] = *(void *)&v19[v21[5]];
  *(void *)&v18[v21[6]] = *(void *)&v19[v21[6]];
  *(void *)&v18[v21[7]] = *(void *)&v19[v21[7]];
  uint64_t v22 = v9[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  char v25 = v24[16];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v23[16] = v25;
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  uint64_t v26 = v9[10];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  void *v27 = *v28;
  v27[1] = v28[1];
  uint64_t v29 = v9[11];
  uint64_t v30 = &v7[v29];
  uint64_t v31 = &v8[v29];
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  uint64_t v32 = *(void (**)(unsigned char *, void, uint64_t, int *))(v10 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(v7, 0, 1, v9);
  uint64_t v5 = v63;
LABEL_7:
  uint64_t v34 = v5[6];
  long long v35 = (void *)((char *)a1 + v34);
  long long v36 = (void *)((char *)a2 + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  uint64_t v37 = v5[7];
  uint64_t v38 = (char *)a1 + v37;
  long long v39 = (char *)a2 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  v38[16] = v39[16];
  *((void *)v38 + 1) = v40;
  *((void *)v38 + 3) = *((void *)v39 + 3);
  *((void *)v38 + 4) = *((void *)v39 + 4);
  *((void *)v38 + 5) = *((void *)v39 + 5);
  *((void *)v38 + 6) = *((void *)v39 + 6);
  *((void *)v38 + 7) = *((void *)v39 + 7);
  *((void *)v38 + 8) = *((void *)v39 + 8);
  *((void *)v38 + 9) = *((void *)v39 + 9);
  *((void *)v38 + 10) = *((void *)v39 + 10);
  *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  uint64_t v41 = *(int *)(a3 + 20);
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  *(void *)((char *)a1 + v41) = *(void *)((char *)a2 + v41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42[1] = v43[1];
  id v42[2] = v43[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42[3] = v43[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42[4] = v43[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42[5] = v43[5];
  v42[6] = v43[6];
  v42[7] = v43[7];
  v42[8] = v43[8];
  v42[9] = v43[9];
  v42[10] = v43[10];
  v42[11] = v43[11];
  v42[12] = v43[12];
  v42[13] = v43[13];
  v42[14] = v43[14];
  return a1;
}

void *sub_250FC7EE8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v11 = *((void *)v10 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v37 = v11;
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    uint64_t v38 = a3;
    v14(v8, v9, v13);
    uint64_t v15 = v14;
    uint64_t v16 = v10[5];
    uint64_t v17 = &v8[v16];
    uint64_t v18 = &v9[v16];
    v15(&v8[v16], &v9[v16], v13);
    sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v13);
    a3 = v38;
    uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v17[v20[5]] = *(void *)&v18[v20[5]];
    *(void *)&v17[v20[6]] = *(void *)&v18[v20[6]];
    *(void *)&v17[v20[7]] = *(void *)&v18[v20[7]];
    uint64_t v21 = v10[6];
    uint64_t v22 = &v8[v21];
    uint64_t v23 = &v9[v21];
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    *(_OWORD *)&v8[v10[10]] = *(_OWORD *)&v9[v10[10]];
    *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  uint64_t v24 = v6[7];
  char v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)char v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((void *)v25 + 10) = *((void *)v26 + 10);
  long long v28 = *((_OWORD *)v26 + 4);
  long long v29 = *((_OWORD *)v26 + 2);
  *((_OWORD *)v25 + 3) = *((_OWORD *)v26 + 3);
  *((_OWORD *)v25 + 4) = v28;
  *((_OWORD *)v25 + 2) = v29;
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  long long v33 = *((_OWORD *)v32 + 5);
  *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
  *((_OWORD *)v31 + 5) = v33;
  *((_OWORD *)v31 + 6) = *((_OWORD *)v32 + 6);
  *((void *)v31 + 14) = *((void *)v32 + 14);
  long long v34 = *((_OWORD *)v32 + 1);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v34;
  long long v35 = *((_OWORD *)v32 + 3);
  *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  *((_OWORD *)v31 + 3) = v35;
  return a1;
}

void *sub_250FC8200(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v33 = sub_251037400();
      long long v34 = *(void (**)(void))(*(void *)(v33 - 8) + 40);
      uint64_t v55 = v33;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v34)(v7, v8, v33);
      long long v35 = (void (*)(char *, char *, uint64_t))v34;
      uint64_t v36 = v9[5];
      uint64_t v37 = &v7[v36];
      uint64_t v54 = &v8[v36];
      ((void (*)(unsigned char *))v35)(&v7[v36]);
      sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v35(&v37[*(int *)(v38 + 36)], &v54[*(int *)(v38 + 36)], v55);
      long long v39 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v37[v39[5]] = *(void *)&v54[v39[5]];
      swift_bridgeObjectRelease();
      *(void *)&v37[v39[6]] = *(void *)&v54[v39[6]];
      swift_bridgeObjectRelease();
      *(void *)&v37[v39[7]] = *(void *)&v54[v39[7]];
      swift_bridgeObjectRelease();
      uint64_t v40 = v9[6];
      uint64_t v41 = &v7[v40];
      uint64_t v42 = &v8[v40];
      *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
      v41[16] = v42[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      uint64_t v43 = v9[10];
      uint64_t v44 = &v7[v43];
      uint64_t v45 = (uint64_t *)&v8[v43];
      uint64_t v47 = *v45;
      uint64_t v46 = v45[1];
      void *v44 = v47;
      v44[1] = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = v9[11];
      uint64_t v49 = &v7[v48];
      uint64_t v50 = (uint64_t *)&v8[v48];
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      void *v49 = v52;
      v49[1] = v51;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_250FCEC5C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = sub_251037400();
  uint64_t v15 = *(void (**)(unsigned char *, unsigned char *))(*(void *)(v14 - 8) + 32);
  uint64_t v53 = v10;
  uint64_t v16 = v14;
  v15(v7, v8);
  uint64_t v17 = v9[5];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v15)(&v7[v17], &v8[v17], v16);
  sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  ((void (*)(char *, char *, uint64_t))v15)(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v16);
  uint64_t v21 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v18[v21[5]] = *(void *)&v19[v21[5]];
  *(void *)&v18[v21[6]] = *(void *)&v19[v21[6]];
  *(void *)&v18[v21[7]] = *(void *)&v19[v21[7]];
  uint64_t v22 = v9[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v23[16] = v24[16];
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v53 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_OWORD *)((char *)a1 + v5[6]) = *(_OWORD *)((char *)a2 + v5[6]);
  uint64_t v26 = v5[7];
  long long v27 = (char *)a1 + v26;
  long long v28 = (char *)a2 + v26;
  *(void *)long long v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  v27[16] = v28[16];
  *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v28 + 56);
  *(_OWORD *)(v27 + 72) = *(_OWORD *)(v28 + 72);
  *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  uint64_t v29 = *(int *)(a3 + 20);
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  *(void *)((char *)a1 + v29) = *(void *)v31;
  swift_bridgeObjectRelease();
  *((void *)v30 + 1) = *((void *)v31 + 1);
  *((void *)v30 + 2) = *((void *)v31 + 2);
  swift_bridgeObjectRelease();
  *((void *)v30 + 3) = *((void *)v31 + 3);
  swift_bridgeObjectRelease();
  *((void *)v30 + 4) = *((void *)v31 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v31 + 56);
  *(_OWORD *)(v30 + 72) = *(_OWORD *)(v31 + 72);
  *(_OWORD *)(v30 + 88) = *(_OWORD *)(v31 + 88);
  *(_OWORD *)(v30 + 104) = *(_OWORD *)(v31 + 104);
  return a1;
}

uint64_t sub_250FC8728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FC873C);
}

uint64_t sub_250FC873C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_250FC87FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FC8810);
}

uint64_t sub_250FC8810(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartLayout(uint64_t a1)
{
  return sub_250F397EC(a1, (uint64_t *)&unk_269B142C8);
}

uint64_t sub_250FC88EC()
{
  uint64_t result = type metadata accessor for OvernightMetricsChartLayout.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_250FC8980(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    uint64_t v12 = *((void *)v11 - 1);
    int v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_251037400();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      uint64_t v42 = v12;
      v16(v9, v10, v15);
      uint64_t v17 = v16;
      uint64_t v18 = v11[5];
      uint64_t v19 = &v9[v18];
      uint64_t v20 = &v10[v18];
      v17(&v9[v18], &v10[v18], v15);
      sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v15);
      uint64_t v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v19[v22[5]] = *(void *)&v20[v22[5]];
      *(void *)&v19[v22[6]] = *(void *)&v20[v22[6]];
      *(void *)&v19[v22[7]] = *(void *)&v20[v22[7]];
      uint64_t v23 = v11[6];
      uint64_t v24 = &v9[v23];
      uint64_t v25 = &v10[v23];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v9[v11[7]] = v10[v11[7]];
      v9[v11[8]] = v10[v11[8]];
      v9[v11[9]] = v10[v11[9]];
      uint64_t v26 = v11[10];
      long long v27 = &v9[v26];
      long long v28 = &v10[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)long long v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      uint64_t v30 = v11[11];
      uint64_t v31 = &v9[v30];
      uint64_t v32 = &v10[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      uint64_t v43 = *(void (**)(char *, void, uint64_t, int *))(v42 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43(v9, 0, 1, v11);
    }
    uint64_t v34 = a3[7];
    *(_OWORD *)((char *)v7 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
    long long v35 = (char *)v7 + v34;
    uint64_t v36 = (char *)a2 + v34;
    long long v37 = *((_OWORD *)v36 + 1);
    *(_OWORD *)long long v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v37;
    *((void *)v35 + 10) = *((void *)v36 + 10);
    long long v38 = *((_OWORD *)v36 + 4);
    long long v39 = *((_OWORD *)v36 + 2);
    *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
    *((_OWORD *)v35 + 4) = v38;
    *((_OWORD *)v35 + 2) = v39;
    uint64_t v40 = a3[9];
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v7 + v40) = *(uint64_t *)((char *)a2 + v40);
  }
  return v7;
}

uint64_t sub_250FC8CF4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = sub_251037400();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    uint64_t v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_250FC8E80(void *a1, void *a2, int *a3)
{
  int v3 = a3;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_251037400();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v7, v8, v13);
    uint64_t v40 = v3;
    uint64_t v15 = v14;
    uint64_t v16 = v9[5];
    uint64_t v17 = &v7[v16];
    uint64_t v18 = &v8[v16];
    v15(&v7[v16], &v8[v16], v13);
    sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v13);
    int v3 = v40;
    uint64_t v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v17[v20[5]] = *(void *)&v18[v20[5]];
    *(void *)&v17[v20[6]] = *(void *)&v18[v20[6]];
    *(void *)&v17[v20[7]] = *(void *)&v18[v20[7]];
    uint64_t v21 = v9[6];
    uint64_t v22 = &v7[v21];
    uint64_t v23 = &v8[v21];
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    uint64_t v24 = v9[10];
    uint64_t v25 = &v7[v24];
    uint64_t v26 = &v8[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = *(void *)v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = v9[11];
    uint64_t v29 = &v7[v28];
    uint64_t v30 = &v8[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v41 = *(void (**)(char *, void, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v7, 0, 1, v9);
  }
  uint64_t v32 = v3[7];
  *(_OWORD *)((char *)a1 + v3[6]) = *(_OWORD *)((char *)a2 + v3[6]);
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  long long v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((void *)v33 + 10) = *((void *)v34 + 10);
  long long v36 = *((_OWORD *)v34 + 4);
  long long v37 = *((_OWORD *)v34 + 2);
  *((_OWORD *)v33 + 3) = *((_OWORD *)v34 + 3);
  *((_OWORD *)v33 + 4) = v36;
  *((_OWORD *)v33 + 2) = v37;
  uint64_t v38 = v3[9];
  *(void *)((char *)a1 + v3[8]) = *(void *)((char *)a2 + v3[8]);
  *(void *)((char *)a1 + v38) = *(void *)((char *)a2 + v38);
  return a1;
}

void *sub_250FC918C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v42 = sub_251037400();
      uint64_t v43 = *(void (**)(void))(*(void *)(v42 - 8) + 24);
      uint64_t v60 = v42;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v43)(v7, v8, v42);
      uint64_t v44 = v9[5];
      uint64_t v45 = &v7[v44];
      uint64_t v58 = &v8[v44];
      v43(&v7[v44]);
      sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      ((void (*)(char *, char *, uint64_t))v43)(&v45[*(int *)(v46 + 36)], &v58[*(int *)(v46 + 36)], v60);
      uint64_t v47 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v45[v47[5]] = *(void *)&v58[v47[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v45[v47[6]] = *(void *)&v58[v47[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v45[v47[7]] = *(void *)&v58[v47[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v48 = v9[6];
      uint64_t v49 = &v7[v48];
      uint64_t v50 = &v8[v48];
      long long v51 = *(_OWORD *)v50;
      v49[16] = v50[16];
      *(_OWORD *)uint64_t v49 = v51;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      uint64_t v52 = v9[10];
      uint64_t v53 = &v7[v52];
      uint64_t v54 = &v8[v52];
      void *v53 = *v54;
      v53[1] = v54[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v55 = v9[11];
      uint64_t v56 = &v7[v55];
      uint64_t v57 = &v8[v55];
      *uint64_t v56 = *v57;
      v56[1] = v57[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_250FCEC5C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = sub_251037400();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  uint64_t v59 = a3;
  v15(v7, v8, v14);
  uint64_t v16 = v15;
  uint64_t v17 = v9[5];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  v16(&v7[v17], &v8[v17], v14);
  sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v14);
  uint64_t v21 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v18[v21[5]] = *(void *)&v19[v21[5]];
  *(void *)&v18[v21[6]] = *(void *)&v19[v21[6]];
  *(void *)&v18[v21[7]] = *(void *)&v19[v21[7]];
  uint64_t v22 = v9[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  char v25 = v24[16];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v23[16] = v25;
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  uint64_t v26 = v9[10];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  void *v27 = *v28;
  v27[1] = v28[1];
  uint64_t v29 = v9[11];
  uint64_t v30 = &v7[v29];
  uint64_t v31 = &v8[v29];
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  uint64_t v32 = *(void (**)(unsigned char *, void, uint64_t, int *))(v10 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(v7, 0, 1, v9);
  a3 = v59;
LABEL_7:
  uint64_t v34 = a3[6];
  long long v35 = (void *)((char *)a1 + v34);
  long long v36 = (void *)((char *)a2 + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  uint64_t v37 = a3[7];
  uint64_t v38 = (char *)a1 + v37;
  long long v39 = (char *)a2 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  v38[16] = v39[16];
  *((void *)v38 + 1) = v40;
  *((void *)v38 + 3) = *((void *)v39 + 3);
  *((void *)v38 + 4) = *((void *)v39 + 4);
  *((void *)v38 + 5) = *((void *)v39 + 5);
  *((void *)v38 + 6) = *((void *)v39 + 6);
  *((void *)v38 + 7) = *((void *)v39 + 7);
  *((void *)v38 + 8) = *((void *)v39 + 8);
  *((void *)v38 + 9) = *((void *)v39 + 9);
  *((void *)v38 + 10) = *((void *)v39 + 10);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *sub_250FC96E0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v30 = v10;
    uint64_t v12 = sub_251037400();
    int v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(v7, v8, v12);
    uint64_t v14 = v9[5];
    uint64_t v15 = &v7[v14];
    uint64_t v16 = &v8[v14];
    v13(&v7[v14], &v8[v14], v12);
    sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
    v13(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
    uint64_t v18 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(void *)&v15[v18[5]] = *(void *)&v16[v18[5]];
    *(void *)&v15[v18[6]] = *(void *)&v16[v18[6]];
    *(void *)&v15[v18[7]] = *(void *)&v16[v18[7]];
    uint64_t v19 = v9[6];
    uint64_t v20 = &v7[v19];
    uint64_t v21 = &v8[v19];
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[16] = v21[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
    *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v7, 0, 1, v9);
  }
  uint64_t v22 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((void *)v23 + 10) = *((void *)v24 + 10);
  long long v26 = *((_OWORD *)v24 + 4);
  long long v27 = *((_OWORD *)v24 + 2);
  *((_OWORD *)v23 + 3) = *((_OWORD *)v24 + 3);
  *((_OWORD *)v23 + 4) = v26;
  *((_OWORD *)v23 + 2) = v27;
  uint64_t v28 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
  return a1;
}

void *sub_250FC99A4(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v32 = sub_251037400();
      uint64_t v33 = *(void (**)(void))(*(void *)(v32 - 8) + 40);
      uint64_t v53 = v32;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v33)(v7, v8, v32);
      uint64_t v34 = v9[5];
      long long v35 = &v7[v34];
      uint64_t v52 = &v8[v34];
      v33(&v7[v34]);
      sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
      ((void (*)(char *, char *, uint64_t))v33)(&v35[*(int *)(v36 + 36)], &v52[*(int *)(v36 + 36)], v53);
      uint64_t v37 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(void *)&v35[v37[5]] = *(void *)&v52[v37[5]];
      swift_bridgeObjectRelease();
      *(void *)&v35[v37[6]] = *(void *)&v52[v37[6]];
      swift_bridgeObjectRelease();
      *(void *)&v35[v37[7]] = *(void *)&v52[v37[7]];
      swift_bridgeObjectRelease();
      uint64_t v38 = v9[6];
      long long v39 = &v7[v38];
      uint64_t v40 = &v8[v38];
      *(_OWORD *)long long v39 = *(_OWORD *)v40;
      v39[16] = v40[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      uint64_t v41 = v9[10];
      uint64_t v42 = &v7[v41];
      uint64_t v43 = (uint64_t *)&v8[v41];
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      *uint64_t v42 = v45;
      v42[1] = v44;
      swift_bridgeObjectRelease();
      uint64_t v46 = v9[11];
      uint64_t v47 = &v7[v46];
      uint64_t v48 = (uint64_t *)&v8[v46];
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *uint64_t v47 = v50;
      v47[1] = v49;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_250FCEC5C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = sub_251037400();
  uint64_t v15 = *(void (**)(unsigned char *, unsigned char *))(*(void *)(v14 - 8) + 32);
  long long v51 = v4;
  uint64_t v16 = v14;
  v15(v7, v8);
  uint64_t v17 = v9[5];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v15)(&v7[v17], &v8[v17], v16);
  sub_250FCED20(0, (unint64_t *)&qword_26B210F98, MEMORY[0x263F8D870]);
  uint64_t v21 = v16;
  uint64_t v4 = v51;
  ((void (*)(char *, char *, uint64_t))v15)(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v21);
  uint64_t v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(void *)&v18[v22[5]] = *(void *)&v19[v22[5]];
  *(void *)&v18[v22[6]] = *(void *)&v19[v22[6]];
  *(void *)&v18[v22[7]] = *(void *)&v19[v22[7]];
  uint64_t v23 = v9[6];
  uint64_t v24 = &v7[v23];
  long long v25 = &v8[v23];
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  v24[16] = v25[16];
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v27 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)v4 + a3[6]);
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)v4 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  v28[16] = v29[16];
  *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
  *(_OWORD *)(v28 + 40) = *(_OWORD *)(v29 + 40);
  *(_OWORD *)(v28 + 56) = *(_OWORD *)(v29 + 56);
  *(_OWORD *)(v28 + 72) = *(_OWORD *)(v29 + 72);
  uint64_t v30 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)v4 + a3[8]);
  *(void *)((char *)a1 + v30) = *(void *)((char *)v4 + v30);
  return a1;
}

uint64_t sub_250FC9E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250FC9E48);
}

uint64_t sub_250FC9E48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250FC9F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250FC9F3C);
}

void *sub_250FC9F3C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_250FCFB20(0, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_250FCA014()
{
  sub_250FCFB20(319, (unint64_t *)&qword_26B210E00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartLayout.DrawingProportions(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartLayout.DrawingProportions(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartLayout.DrawingProportions()
{
  return &type metadata for OvernightMetricsChartLayout.DrawingProportions;
}

unint64_t sub_250FCA198(double a1)
{
  if (!*(void *)(*(void *)(v1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20)) + 16)
    || (unint64_t result = sub_250FCB7B0(a1), (v4 & 1) == 0))
  {
    sub_251039550();
    sub_251039210();
    sub_251039350();
    unint64_t result = sub_251039640();
    __break(1u);
  }
  return result;
}

uint64_t sub_250FCA284(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v4 = v1 - 1;
  if (v1 != 1)
  {
    double v5 = *(double *)&result;
    double v6 = *(double *)(a1 + 40);
    for (uint64_t i = (double *)(a1 + 56); ; i += 2)
    {
      double v9 = *(i - 1);
      double v8 = *i;
      if (v9 < v5) {
        break;
      }
      if (v9 > v6)
      {
        BOOL v10 = v9 < v5;
        double v6 = *(i - 1);
        double v9 = v5;
        if (v10) {
          goto LABEL_23;
        }
        goto LABEL_11;
      }
      double v9 = v5;
      if (v8 >= v5)
      {
LABEL_14:
        if (v6 >= v8)
        {
          double v5 = v9;
        }
        else
        {
          double v6 = *i;
          double v5 = v9;
          if (v9 > v8) {
            goto LABEL_24;
          }
        }
        goto LABEL_5;
      }
LABEL_4:
      double v5 = *i;
      if (v8 > v6)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
LABEL_5:
      if (!--v4) {
        return *(void *)&v5;
      }
    }
    if (v9 > v6) {
      goto LABEL_22;
    }
LABEL_11:
    if (v8 >= v9) {
      goto LABEL_14;
    }
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_250FCA364(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  if (*(unsigned char *)(v5 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v7 = v4;
  double v8 = *(double *)v5;
  double v9 = *(double *)(v5 + 8);
  uint64_t v10 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  uint64_t v11 = (double *)(v2 + *(int *)(v10 + 24));
  double v13 = *v11;
  double v12 = v11[1];
  double v14 = *(double *)(v2 + *(int *)(v10 + 28) + 64);
  uint64_t v15 = a1 + *(int *)(v7 + 20);
  uint64_t v16 = *(void *)(v15 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 24));
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    uint64_t v19 = MEMORY[0x263F8EE78];
    do
    {
      double v22 = *(double *)(v16 + 8 * v18 + 32);
      if (v22 < v13)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_250FF1ED4(0, *(void *)(v19 + 16) + 1, 1);
        }
        unint64_t v21 = *(void *)(v19 + 16);
        unint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1) {
          sub_250FF1ED4(v20 > 1, v21 + 1, 1);
        }
        *(void *)(v19 + 16) = v21 + 1;
        *(double *)(v19 + 8 * v21 + 32) = v22;
      }
      ++v18;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v23 = sub_250FC6C90(v19);
  uint64_t v6 = v24;
  swift_release();
  uint64_t v25 = *(void *)(v16 + 16);
  if (v25)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    uint64_t v27 = MEMORY[0x263F8EE78];
    do
    {
      double v30 = *(double *)(v16 + 8 * v26 + 32);
      if (v12 < v30)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_250FF1ED4(0, *(void *)(v27 + 16) + 1, 1);
        }
        unint64_t v29 = *(void *)(v27 + 16);
        unint64_t v28 = *(void *)(v27 + 24);
        if (v29 >= v28 >> 1) {
          sub_250FF1ED4(v28 > 1, v29 + 1, 1);
        }
        *(void *)(v27 + 16) = v29 + 1;
        *(double *)(v27 + 8 * v29 + 32) = v30;
      }
      ++v26;
    }
    while (v25 != v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = MEMORY[0x263F8EE78];
  }
  uint64_t v31 = sub_250FC6C4C(v27);
  char v33 = v32;
  swift_release();
  if (v12 >= v9 && v8 >= v13)
  {
    sub_250FCFB20(0, &qword_269B13ED0, (uint64_t (*)(uint64_t))sub_250FA2314, MEMORY[0x263F8E0F8]);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_25103A670;
    sub_250FCA198(v8);
    *(void *)(v6 + 32) = v34;
    *(unsigned char *)(v6 + 40) = 0;
    sub_250FCA198(v9);
    *(void *)(v6 + 48) = v35;
    *(unsigned char *)(v6 + 56) = 0;
    return v6;
  }
  uint64_t v36 = v2 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  double v74 = *(double *)(v36 + 80);
  sub_250FCFB20(0, &qword_269B13ED0, (uint64_t (*)(uint64_t))sub_250FA2314, MEMORY[0x263F8E0F8]);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_25103AD40;
  uint64_t v38 = v37;
  double v39 = *(double *)(v36 + 8) * 0.5;
  sub_250FCA198(v8);
  double v41 = v40 - v39;
  sub_250FCA198(v8);
  if (v41 > v39 + v42)
  {
    __break(1u);
    __break(1u);
    goto LABEL_57;
  }
  *(double *)(v38 + 32) = v41;
  *(unsigned char *)(v38 + 40) = v8 < v13;
  double v75 = v14;
  if (v6)
  {
    double v51 = 0.0;
    double v49 = 0.0;
    if (v33) {
      goto LABEL_50;
    }
    goto LABEL_37;
  }
  sub_250FCA198(*(double *)&v23);
  double v44 = v43;
  sub_250FCA198(*(double *)&v23);
  double v45 = v44 - v39;
  double v47 = v39 + v46;
  if (v44 - v39 > v39 + v46)
  {
    __break(1u);
    goto LABEL_60;
  }
  sub_250FCA198(v13);
  double v49 = v48 - v39;
  sub_250FCA198(v13);
  double v51 = v39 + v50;
  if (v49 > v39 + v50)
  {
LABEL_60:
    __break(1u);
    __break(1u);
    goto LABEL_61;
  }
  double v52 = v45 + v75 * (v47 - v45);
  if (v49 < v52)
  {
    double v51 = v74 + v52;
    double v49 = v45 + v75 * (v47 - v45);
    if (v52 > v74 + v52) {
      goto LABEL_63;
    }
  }
  double v53 = 0.0;
  double v54 = 0.0;
  if (v33) {
    goto LABEL_47;
  }
LABEL_37:
  double v73 = v9;
  sub_250FCA198(*(double *)&v31);
  double v56 = v55;
  sub_250FCA198(*(double *)&v31);
  double v57 = v56 - v39;
  double v59 = v39 + v58;
  if (v56 - v39 > v39 + v58)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  sub_250FCA198(v12);
  double v53 = v60 - v39;
  sub_250FCA198(v12);
  double v54 = v39 + v61;
  if (v53 > v39 + v61)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  double v62 = v57 + (1.0 - v75) * (v59 - v57);
  if (v62 < v54)
  {
    double v53 = v62 - v74;
    double v54 = v57 + (1.0 - v75) * (v59 - v57);
    if (v62 - v74 > v62) {
LABEL_64:
    }
      __break(1u);
  }
  double v9 = v73;
  if (v6)
  {
LABEL_48:
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25103A670;
    *(double *)(inited + 32) = v53;
    *(unsigned char *)(inited + 40) = 0;
    *(double *)(inited + 48) = v54;
    *(unsigned char *)(inited + 56) = 1;
    goto LABEL_49;
  }
  if (v54 < v49 || v51 < v53)
  {
LABEL_47:
    uint64_t v64 = swift_initStackObject();
    *(_OWORD *)(v64 + 16) = xmmword_25103A670;
    *(double *)(v64 + 32) = v49;
    *(unsigned char *)(v64 + 40) = 1;
    *(double *)(v64 + 48) = v51;
    *(unsigned char *)(v64 + 56) = 0;
    sub_250FF5F48(v64);
    if (v33) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25103A660;
  *(double *)(inited + 32) = v49;
  *(unsigned char *)(inited + 40) = 1;
  *(double *)(inited + 48) = (v49 + v54) * 0.5;
  *(unsigned char *)(inited + 56) = 0;
  *(double *)(inited + 64) = v54;
  *(unsigned char *)(inited + 72) = 1;
LABEL_49:
  sub_250FF5F48(inited);
LABEL_50:
  sub_250FCA198(v9);
  double v67 = v66 - v39;
  sub_250FCA198(v9);
  double v13 = v39 + v68;
  if (v67 > v39 + v68)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v6 = v38;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_58:
  }
    uint64_t v6 = (uint64_t)sub_250FA16BC(0, *(void *)(v6 + 16) + 1, 1, (void *)v6);
  unint64_t v70 = *(void *)(v6 + 16);
  unint64_t v69 = *(void *)(v6 + 24);
  if (v70 >= v69 >> 1) {
    uint64_t v6 = (uint64_t)sub_250FA16BC((void *)(v69 > 1), v70 + 1, 1, (void *)v6);
  }
  *(void *)(v6 + 16) = v70 + 1;
  uint64_t v71 = v6 + 16 * v70;
  *(double *)(v71 + 32) = v13;
  *(unsigned char *)(v71 + 40) = v12 < v9;
  return v6;
}

void *sub_250FCAA30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v3 = type metadata accessor for OvernightMetricsChartPoint();
  uint64_t v4 = a1
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
  uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 72);
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v7 = (long long *)(v4 + *(int *)(v3 + 24));
    if ((v7[1] & 1) == 0)
    {
      long long v11 = *v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_250FA11A8(0, v6[2] + 1, 1, v6);
      }
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1) {
        uint64_t v6 = sub_250FA11A8((void *)(v8 > 1), v9 + 1, 1, v6);
      }
      void v6[2] = v9 + 1;
      *(_OWORD *)&v6[2 * v9 + 4] = v11;
    }
    v4 += v5;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_250FCABA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (double *)(v5 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20));
  double v12 = v10[5];
  double v11 = v10[6];
  double v13 = v10[7];
  double v14 = v10[8];
  uint64_t v15 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  double v56 = *(double *)(v5 + *(int *)(v15 + 28) + 48);
  double v57 = v10[1];
  uint64_t v16 = (double *)(v5 + *(int *)(v15 + 24));
  double v17 = *v16;
  sub_250FCA198(*v16);
  double v19 = v18;
  double v20 = v16[1];
  unint64_t result = sub_250FCA198(v20);
  if (v19 > v22) {
    double v23 = v19;
  }
  else {
    double v23 = v22;
  }
  if (v19 > v23)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_250FCA198(v11);
  double v25 = v24;
  sub_250FCA198(v17);
  double v27 = v26;
  unint64_t result = sub_250FCA198(v20);
  if (v27 > v28) {
    double v28 = v27;
  }
  if (v27 > v28) {
    goto LABEL_24;
  }
  double v55 = v25;
  double v29 = v13;
  sub_250FCA198(v17);
  double v31 = v30;
  unint64_t result = sub_250FCA198(v20);
  if (v31 > v32) {
    double v32 = v31;
  }
  if (v31 > v32) {
    goto LABEL_25;
  }
  double v54 = v32;
  sub_250FCA198(v12);
  double v34 = v33;
  sub_250FCA198(v17);
  double v36 = v35;
  unint64_t result = sub_250FCA198(v20);
  if (v36 > v37) {
    double v37 = v36;
  }
  if (v36 > v37) {
    goto LABEL_26;
  }
  double v53 = v34;
  double v38 = (v14 - v29) * v56 * 0.5;
  double v39 = v38 + v23;
  double v40 = v57 * 0.25 + v55;
  sub_250FCFB20(0, &qword_269B142F8, type metadata accessor for BaselineBand.Configuration, MEMORY[0x263F8E0F8]);
  double v41 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  uint64_t v42 = *(void *)(*((void *)v41 - 1) + 72);
  unint64_t v43 = (*(unsigned __int8 *)(*((void *)v41 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v41 - 1) + 80);
  unint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_25103A660;
  if (v39 > v40) {
    double v40 = v39;
  }
  if (v39 > v40) {
    goto LABEL_27;
  }
  unint64_t v44 = result;
  double v45 = v38 + v27;
  double v46 = (double *)(result + v43);
  unint64_t result = sub_250F609C8(a1, (uint64_t)v46 + v41[5]);
  *double v46 = v39;
  v46[1] = v40;
  *(double *)((char *)v46 + v41[6]) = 6.0;
  *(void *)((char *)v46 + v41[7]) = a2;
  *((unsigned char *)v46 + v41[8]) = 0;
  if (v45 > v54 - v38)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v47 = a4;
  double v48 = v36 - v38;
  char v49 = a5;
  double v50 = (double *)((char *)v46 + v42);
  unint64_t result = sub_250F609C8(a1, (uint64_t)v46 + v42 + v41[5]);
  *double v50 = v45;
  v50[1] = v54 - v38;
  *(double *)((char *)v50 + v41[6]) = 6.0;
  *(void *)((char *)v50 + v41[7]) = a3;
  *((unsigned char *)v50 + v41[8]) = v49 & 1;
  if (v36 - v38 >= v53 - v57 * 0.25) {
    double v51 = v53 - v57 * 0.25;
  }
  else {
    double v51 = v36 - v38;
  }
  if (v51 <= v48)
  {
    double v52 = (double *)((char *)v46 + 2 * v42);
    sub_250F609C8(a1, (uint64_t)v52 + v41[5]);
    *double v52 = v51;
    v52[1] = v48;
    *(double *)((char *)v52 + v41[6]) = 6.0;
    *(void *)((char *)v52 + v41[7]) = v47;
    *((unsigned char *)v52 + v41[8]) = 0;
    swift_retain();
    swift_retain();
    swift_retain();
    return v44;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_250FCAF1C()
{
  sub_251039880();
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    sub_251039870();
  }
  else
  {
    sub_251039870();
    sub_251039880();
  }
  sub_251039880();
  sub_251039880();
  sub_251039880();
  sub_251039880();
  sub_251039880();
  sub_251039880();
  sub_251039880();
  return sub_251039880();
}