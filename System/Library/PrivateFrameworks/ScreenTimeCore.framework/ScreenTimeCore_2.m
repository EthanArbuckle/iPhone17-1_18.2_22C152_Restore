void sub_1001DE3B0(void *a1)
{
  uint64_t v1;
  Class isa;
  char v4;
  id v5;
  id v6;
  char v7;
  id v8;
  void *v9;
  void *v10;

  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) == 0)
  {
    v5 = sub_1001D7640();
    __chkstk_darwin(v5);
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (!v1)
    {
      sub_1000A0760(0, (unint64_t *)&unk_100343B90);
      v6 = v9;
      v7 = static NSObject.== infix(_:_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0) {
        v8 = a1;
      }
    }
  }
}

id sub_1001DE538(uint64_t a1)
{
  id v3 = sub_1001D7640();
  id v4 = [objc_allocWithZone((Class)STCoreUser) initWithContext:v3];

  [v4 setDsid:*(void *)a1];
  id v5 = sub_10020BA68();
  v6 = v4;
  if (!v1)
  {
    id v31 = v5;
    v7 = *(void **)(a1 + 72);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
    {
      id v19 = v7;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v14 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v26 = v25;
            if (v24 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v26 != v27)
            {
              char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v6 = v31;
              if ((v28 & 1) == 0)
              {
                type metadata accessor for DataStore.DataStoreError(0);
                sub_1000AA560();
                swift_allocError();
                void *v29 = v14;
                swift_storeEnumTagMultiPayload();
                id v30 = v14;
                swift_willThrow();

                goto LABEL_17;
              }
              goto LABEL_16;
            }

            swift_bridgeObjectRelease_n();
            goto LABEL_15;
          }
        }

LABEL_15:
        v6 = v31;
LABEL_16:
        id v21 = sub_1001D7640();
        id v22 = [objc_allocWithZone((Class)STFamilyOrganizationSettings) initWithContext:v21];

        [v4 setFamilySettings:v22];
        [v22 setOrganization:v6];

        goto LABEL_17;
      }
    }

    v6 = v31;
    if (*(unsigned char *)(a1 + 80)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:

  return v4;
}

void sub_1001DE814(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X8>)
{
  v6 = (void *)sub_1001E05E8(a1, a2, a3);
  if (!v4)
  {
    v7 = v6;
    sub_1001E0FB4(v6, a4);
  }
}

void sub_1001DE874(uint64_t *a1@<X8>)
{
  id v3 = [self fetchRequest];
  id v12 = 0;
  id v4 = [v3 execute:&v12];
  id v5 = v12;
  if (v4)
  {
    v6 = v4;
    sub_1000A0760(0, &qword_1003415D0);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v8 = v5;

    swift_retain();
    uint64_t v9 = sub_10020ABF8(v7);
    swift_bridgeObjectRelease();
    if (v1)
    {

      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v11 = sub_10020B22C((uint64_t)v9);

      swift_bridgeObjectRelease();
      *a1 = v11;
    }
  }
  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1001DE9EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = sub_1001E05E8(a2, a3, a4);
  if (!v5)
  {
    id v8 = (void *)v7;
    type metadata accessor for DataStore.DeviceDetails(0);
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 setName:v9];

    id v10 = [v8 userDeviceStates];
    sub_1000A0760(0, &qword_1003415E0);
    sub_1000AA614((unint64_t *)&qword_1003415E8, &qword_1003415E0);
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v12 = (void *)sub_1001D5CEC(v11, &qword_1003415E0);
    swift_bridgeObjectRelease();
    if (v12)
    {
      if (*(void *)(a5 + 24)) {
        NSString v13 = String._bridgeToObjectiveC()();
      }
      else {
        NSString v13 = 0;
      }
      [v12 setCoreDuetIdentifier:v13];
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001DEB50(uint64_t a1)
{
  uint64_t v113 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v113 - 8);
  uint64_t v4 = __chkstk_darwin(v113);
  uint64_t v110 = (uint64_t)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v114 = (uint64_t)v96 - v7;
  __chkstk_darwin(v6);
  NSString v9 = (char *)v96 - v8;
  id v102 = self;
  id v10 = [v102 fetchRequest];
  unint64_t v121 = 0;
  id v11 = [v10 execute:&v121];
  id v12 = (id)v121;
  if (!v11)
  {
    id v94 = (id)v121;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  NSString v13 = v11;
  uint64_t v115 = sub_1000A0760(0, &qword_1003415D0);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v109 = a1;
  unint64_t v15 = v14;
  id v16 = v12;

  uint64_t v17 = sub_1001DF9D8(v15);
  uint64_t v119 = v1;
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_10020A230((uint64_t)v17);
  swift_bridgeObjectRelease();
  int64_t v19 = 0;
  uint64_t v20 = *(void *)(v18 + 56);
  uint64_t v99 = v18 + 56;
  uint64_t v103 = v18;
  uint64_t v21 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v100 = (unint64_t)(v21 + 63) >> 6;
  v112 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  v98 = &v121;
  *((void *)&v24 + 1) = 4;
  long long v101 = xmmword_100284C10;
  *(void *)&long long v24 = 136446466;
  long long v97 = v24;
  v96[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v24 = 138412290;
  long long v108 = v24;
  v104 = v9;
  while (1)
  {
    if (v23)
    {
      uint64_t v107 = (v23 - 1) & v23;
      unint64_t v25 = __clz(__rbit64(v23)) | (v19 << 6);
    }
    else
    {
      if (__OFADD__(v19++, 1)) {
        goto LABEL_102;
      }
      if (v19 >= v100)
      {
LABEL_98:

        swift_release();
        return;
      }
      unint64_t v27 = *(void *)(v99 + 8 * v19);
      if (!v27)
      {
        int64_t v28 = v19 + 1;
        if (v19 + 1 >= v100) {
          goto LABEL_98;
        }
        unint64_t v27 = *(void *)(v99 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v19 + 2;
          if (v19 + 2 >= v100) {
            goto LABEL_98;
          }
          unint64_t v27 = *(void *)(v99 + 8 * v28);
          if (!v27)
          {
            int64_t v28 = v19 + 3;
            if (v19 + 3 >= v100) {
              goto LABEL_98;
            }
            unint64_t v27 = *(void *)(v99 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                int64_t v19 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  break;
                }
                if (v19 >= v100) {
                  goto LABEL_98;
                }
                unint64_t v27 = *(void *)(v99 + 8 * v19);
                ++v28;
                if (v27) {
                  goto LABEL_19;
                }
              }
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:

              __break(1u);
            }
          }
        }
        int64_t v19 = v28;
      }
LABEL_19:
      uint64_t v107 = (v27 - 1) & v27;
      unint64_t v25 = __clz(__rbit64(v27)) + (v19 << 6);
    }
    v29 = (uint64_t *)(*(void *)(v103 + 48) + 16 * v25);
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    swift_bridgeObjectRetain();
    id v32 = [v102 fetchRequest];

    sub_10009EE78(&qword_1003414D8);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = v101;
    sub_1000A0760(0, (unint64_t *)&unk_100343A80);
    *(void *)(v33 + 56) = &type metadata for String;
    unint64_t v34 = sub_1000A5124();
    *(void *)(v33 + 32) = 0x696669746E656469;
    *(void *)(v33 + 40) = 0xEA00000000007265;
    *(void *)(v33 + 96) = &type metadata for String;
    *(void *)(v33 + 104) = v34;
    *(void *)(v33 + 64) = v34;
    *(void *)(v33 + 72) = v30;
    *(void *)(v33 + 80) = v31;
    swift_bridgeObjectRetain();
    id v35 = v32;
    v36 = NSPredicate.init(format:_:)();
    [v35 setPredicate:v36];

    unint64_t v121 = 0;
    id v37 = [v35 execute:&v121];

    id v38 = (id)v121;
    if (!v37)
    {
      id v95 = (id)v121;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();

      return;
    }
    int64_t v105 = v19;
    unint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v40 = v38;

    unint64_t v41 = v39 >> 62;
    unint64_t v117 = v39;
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v42 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v106 = v35;
    if (v42 <= 1) {
      goto LABEL_5;
    }
    sub_1001D7700((uint64_t)v9);
    unint64_t v43 = v117;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v44 = Logger.logObject.getter();
    v45 = v9;
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      unint64_t v118 = swift_slowAlloc();
      unint64_t v121 = v118;
      *(_DWORD *)uint64_t v47 = v97;
      swift_bridgeObjectRetain();
      uint64_t v120 = sub_1000A2E70(v30, v31, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v47 + 12) = 2050;
      swift_bridgeObjectRelease();
      uint64_t v120 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "REPAIR NEEDED: Deleting duplicate coreDevices with identifier: %{public}s, count: %{public}ld", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v48 = *v112;
      v49 = v104;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v48 = *v112;
      v49 = v45;
    }
    v111 = v48;
    v48((uint64_t)v49, v113);
    unint64_t v50 = v43;
    if (v41) {
      break;
    }
    uint64_t v51 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v51) {
      goto LABEL_29;
    }
LABEL_5:
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    id v10 = v106;
    NSString v9 = v104;
    int64_t v19 = v105;
    unint64_t v23 = v107;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v51) {
    goto LABEL_5;
  }
LABEL_29:
  uint64_t v52 = 0;
  id v116 = 0;
  unint64_t v118 = v43 & 0xC000000000000001;
  uint64_t v53 = 4;
  while (1)
  {
    if (v118) {
      id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v55 = *(id *)(v50 + 8 * v53);
    }
    v56 = v55;
    uint64_t v57 = v53 - 3;
    if (__OFADD__(v53 - 4, 1))
    {
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    uint64_t v58 = v51;
    id v59 = [v55 userDeviceStates];
    sub_1000A0760(0, &qword_1003415E0);
    sub_1000AA614((unint64_t *)&qword_1003415E8, &qword_1003415E0);
    uint64_t v60 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v60 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v61 = __CocoaSet.count.getter();
      if (!v61) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v61 = *(void *)(v60 + 16);
      swift_bridgeObjectRetain();
      if (!v61)
      {
LABEL_43:
        swift_bridgeObjectRelease();
        v62 = _swiftEmptyArrayStorage;
        goto LABEL_47;
      }
    }
    if (v61 <= 0)
    {
      v62 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10009EE78(&qword_100342BE0);
      v62 = (void *)swift_allocObject();
      int64_t v63 = j__malloc_size(v62);
      uint64_t v64 = v63 - 32;
      if (v63 < 32) {
        uint64_t v64 = v63 - 25;
      }
      v62[2] = v61;
      v62[3] = (2 * (v64 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    v65 = sub_1002589A0(&v121, v62 + 4, v61, v60);
    sub_1000AA60C();
    if (v65 != (void *)v61) {
      goto LABEL_100;
    }
    swift_bridgeObjectRelease();
LABEL_47:
    unint64_t v121 = (unint64_t)v62;
    uint64_t v66 = v119;
    sub_100208484((uint64_t *)&v121);
    uint64_t v119 = v66;
    if (v66) {
      break;
    }
    swift_bridgeObjectRelease();
    unint64_t v67 = v121;
    if ((v121 & 0x8000000000000000) != 0 || (v121 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v73)
      {
LABEL_51:
        if ((v67 & 0xC000000000000001) != 0)
        {
          id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)(v67 + 16)) {
            goto LABEL_101;
          }
          id v68 = *(id *)(v67 + 32);
        }
        v69 = v68;
        swift_release();
        id v70 = [v69 installedApps];

        if (!v70) {
          goto LABEL_107;
        }
        sub_1000A0760(0, (unint64_t *)&unk_100343A60);
        sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
        uint64_t v71 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v71 & 0xC000000000000001) != 0) {
          uint64_t v72 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v72 = *(void *)(v71 + 16);
        }
        swift_bridgeObjectRelease();
        if (v52 >= v72)
        {
        }
        else
        {

          uint64_t v52 = v72;
          id v116 = v56;
        }
        goto LABEL_31;
      }
    }
    else if (*(void *)(v121 + 16))
    {
      goto LABEL_51;
    }

    swift_release();
LABEL_31:
    uint64_t v51 = v58;
    ++v53;
    BOOL v54 = v57 == v58;
    unint64_t v50 = v117;
    if (v54)
    {
      swift_bridgeObjectRelease();
      if (v116)
      {
        if (v58 < 1) {
          goto LABEL_104;
        }
        for (uint64_t i = 0; i != v51; ++i)
        {
          if (v118) {
            id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v77 = *(id *)(v50 + 8 * i + 32);
          }
          id v78 = v77;
          id v79 = v116;
          char v80 = static NSObject.== infix(_:_:)();

          if ((v80 & 1) == 0)
          {
            sub_1001D7700(v114);
            v81 = v78;
            v75 = Logger.logObject.getter();
            os_log_type_t v82 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v75, v82))
            {
              uint64_t v83 = swift_slowAlloc();
              v84 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v83 = v108;
              *(void *)(v83 + 4) = v81;
              void *v84 = v81;
              _os_log_impl((void *)&_mh_execute_header, v75, v82, "Deleting duplicate coreDevice: %@", (uint8_t *)v83, 0xCu);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              unint64_t v50 = v117;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              v75 = v81;
            }

            v111(v114, v113);
            id v76 = sub_1001D7640();
            [v76 deleteObject:v81];

            uint64_t v51 = v58;
          }
        }
      }
      else
      {
        if (v58 < 0) {
          goto LABEL_103;
        }
        if (v58 != 1)
        {
          if (!v118 && (unint64_t)(v58 - 2) >= *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_106;
          }
          uint64_t v85 = 0;
          do
          {
            if (v118) {
              id v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v88 = *(id *)(v50 + 8 * v85 + 32);
            }
            v89 = v88;
            sub_1001D7700(v110);
            v90 = v89;
            v86 = Logger.logObject.getter();
            os_log_type_t v91 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v86, v91))
            {
              uint64_t v92 = swift_slowAlloc();
              v93 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v92 = v108;
              *(void *)(v92 + 4) = v90;
              void *v93 = v90;
              _os_log_impl((void *)&_mh_execute_header, v86, v91, "Deleting duplicate coreDevice: %@", (uint8_t *)v92, 0xCu);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              v86 = v90;
            }
            ++v85;

            v111(v110, v113);
            id v87 = sub_1001D7640();
            [v87 deleteObject:v90];
          }
          while (v58 - 1 != v85);
        }
      }
      goto LABEL_6;
    }
  }
  swift_release();
  __break(1u);
}

void *sub_1001DF9D8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = [v5 identifier];
      if (v8)
      {
        NSString v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_100207740(0, v3[2] + 1, 1, v3);
        }
        unint64_t v14 = v3[2];
        unint64_t v13 = v3[3];
        if (v14 >= v13 >> 1) {
          uint64_t v3 = sub_100207740((void *)(v13 > 1), v14 + 1, 1, v3);
        }
        v3[2] = v14 + 1;
        unint64_t v15 = &v3[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
      }
      else
      {
      }
      ++v4;
      if (v7 == v2) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
LABEL_19:
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1001DFB70(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000A0760(0, (unint64_t *)&unk_100343A60);
    sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v26 = v28;
    uint64_t v3 = v29;
    uint64_t v2 = v30;
    unint64_t v4 = v31;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  uint64_t v23 = v3;
  int64_t v25 = (unint64_t)(v3 + 64) >> 6;
  long long v24 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v8 = v2;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    sub_1000A0760(0, (unint64_t *)&unk_100343A60);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_38;
    }
LABEL_31:
    id v15 = objc_msgSend(v11, "bundleIdentifier", v23);
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v24 = sub_100207740(0, v24[2] + 1, 1, v24);
      }
      unint64_t v21 = v24[2];
      unint64_t v20 = v24[3];
      if (v21 >= v20 >> 1) {
        long long v24 = sub_100207740((void *)(v20 > 1), v21 + 1, 1, v24);
      }
      v24[2] = v21 + 1;
      uint64_t v22 = &v24[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v2 << 6);
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v25) {
      goto LABEL_38;
    }
    unint64_t v13 = *(void *)(v26 + 8 * v12);
    ++v2;
    if (!v13)
    {
      uint64_t v2 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_38;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v2);
      if (!v13)
      {
        uint64_t v2 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_38;
        }
        unint64_t v13 = *(void *)(v26 + 8 * v2);
        if (!v13)
        {
          uint64_t v2 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_38;
          }
          unint64_t v13 = *(void *)(v26 + 8 * v2);
          if (!v13)
          {
            uint64_t v2 = v8 + 5;
            if (v8 + 5 >= v25) {
              goto LABEL_38;
            }
            unint64_t v13 = *(void *)(v26 + 8 * v2);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v25 != v14)
              {
                unint64_t v13 = *(void *)(v26 + 8 * v14++);
                if (v13)
                {
                  uint64_t v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              sub_1000AA60C();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

void sub_1001DFF00(uint8_t *a1@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  v65 = a1;
  uint64_t v6 = type metadata accessor for Logger();
  int64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int64_t v12 = (char *)&v55 - v11;
  id v13 = sub_10020B2D4(a2);
  if (v3) {
    return;
  }
  uint64_t v14 = v13;
  uint64_t v61 = (uint64_t)v10;
  int64_t v63 = v7;
  uint64_t v64 = v12;
  unint64_t v73 = (unint64_t)_swiftEmptyArrayStorage;
  id v15 = [v13 userDeviceStates];
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = (uint64_t)v64;
    sub_1001D7700((uint64_t)v64);
    id v23 = v14;
    long long v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v62 = v6;
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      v65 = v27 + 4;
      id v29 = [v23 dsid];
      id v67 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v29;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "user with dsid: %@ has no user device state", v27, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v22, v62);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v22, v6);
    }
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    *uint64_t v53 = a2;
    swift_storeEnumTagMultiPayload();
    id v54 = a2;
    swift_willThrow();

    return;
  }
  id v16 = v15;
  id v56 = v14;
  uint64_t v57 = a3;
  uint64_t v58 = 0;
  uint64_t v17 = sub_1000A0760(0, &qword_1003415E0);
  sub_1000AA614((unint64_t *)&qword_1003415E8, &qword_1003415E0);
  uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v62 = v6;
  uint64_t v60 = v17;
  if ((v18 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v18 = v68;
    uint64_t v64 = (char *)v69;
    uint64_t v19 = v70;
    uint64_t v20 = v71;
    unint64_t v21 = v72;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v30 = -1 << *(unsigned char *)(v18 + 32);
    uint64_t v31 = *(void *)(v18 + 56);
    uint64_t v64 = (char *)(v18 + 56);
    uint64_t v19 = ~v30;
    uint64_t v32 = -v30;
    if (v32 < 64) {
      uint64_t v33 = ~(-1 << v32);
    }
    else {
      uint64_t v33 = -1;
    }
    unint64_t v21 = v33 & v31;
  }
  int64_t v34 = v63;
  uint64_t v35 = v61;
  uint64_t v61 = v18 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v55 = v19;
  int64_t v63 = (unint64_t)(v19 + 64) >> 6;
  v36 = (void (**)(uint64_t, uint64_t))(v34 + 8);
  id v59 = (char *)&type metadata for Swift.AnyObject + 8;
  while (v18 < 0)
  {
    uint64_t v40 = __CocoaSet.Iterator.next()();
    if (!v40) {
      goto LABEL_44;
    }
    uint64_t v66 = v40;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v41 = v67;
    swift_unknownObjectRelease();
    uint64_t v39 = v20;
    uint64_t v37 = v21;
    if (!v41) {
      goto LABEL_44;
    }
LABEL_35:
    id v45 = objc_msgSend(v41, "device", v55);
    if (!v45) {
      goto LABEL_47;
    }
    os_log_type_t v46 = v45;
    id v47 = [v45 identifier];

    if (v47)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v48 = objc_allocWithZone((Class)STDeviceID);
      NSString v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v48 initWithIdentifier:v49];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      sub_1001D7700(v35);
      unint64_t v50 = Logger.logObject.getter();
      uint64_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, (os_log_type_t)v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v51, "device identifier cannot be nil", v52, 2u);
        swift_slowDealloc();
      }

      (*v36)(v35, v62);
    }
    uint64_t v20 = v39;
    unint64_t v21 = v37;
  }
  if (v21)
  {
    uint64_t v37 = (v21 - 1) & v21;
    unint64_t v38 = __clz(__rbit64(v21)) | (v20 << 6);
    uint64_t v39 = v20;
LABEL_34:
    id v41 = *(id *)(*(void *)(v18 + 48) + 8 * v38);
    if (!v41) {
      goto LABEL_44;
    }
    goto LABEL_35;
  }
  int64_t v42 = v20 + 1;
  if (!__OFADD__(v20, 1))
  {
    if (v42 >= v63) {
      goto LABEL_44;
    }
    unint64_t v43 = *(void *)&v64[8 * v42];
    uint64_t v39 = v20 + 1;
    if (!v43)
    {
      uint64_t v39 = v20 + 2;
      if (v20 + 2 >= v63) {
        goto LABEL_44;
      }
      unint64_t v43 = *(void *)&v64[8 * v39];
      if (!v43)
      {
        uint64_t v39 = v20 + 3;
        if (v20 + 3 >= v63) {
          goto LABEL_44;
        }
        unint64_t v43 = *(void *)&v64[8 * v39];
        if (!v43)
        {
          uint64_t v39 = v20 + 4;
          if (v20 + 4 >= v63) {
            goto LABEL_44;
          }
          unint64_t v43 = *(void *)&v64[8 * v39];
          if (!v43)
          {
            uint64_t v44 = v20 + 5;
            while (v63 != v44)
            {
              unint64_t v43 = *(void *)&v64[8 * v44++];
              if (v43)
              {
                uint64_t v39 = v44 - 1;
                goto LABEL_33;
              }
            }
LABEL_44:
            sub_1000AA60C();

            *uint64_t v57 = v73;
            return;
          }
        }
      }
    }
LABEL_33:
    uint64_t v37 = (v43 - 1) & v43;
    unint64_t v38 = __clz(__rbit64(v43)) + (v39 << 6);
    goto LABEL_34;
  }
  __break(1u);
LABEL_47:
  __break(1u);
}

uint64_t sub_1001E05E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (void *)type metadata accessor for Logger();
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    if (a3 == 1)
    {
      int64_t v12 = self;
      swift_bridgeObjectRetain();
      id v13 = [v12 fetchRequest];
      sub_10009EE78(&qword_1003414D8);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_100284C10;
      sub_1000A0760(0, (unint64_t *)&unk_100343A80);
      *(void *)(v14 + 56) = &type metadata for String;
      unint64_t v15 = sub_1000A5124();
      *(void *)(v14 + 32) = 0x696669746E656469;
      *(void *)(v14 + 40) = 0xEA00000000007265;
      *(void *)(v14 + 96) = &type metadata for String;
      *(void *)(v14 + 104) = v15;
      *(void *)(v14 + 64) = v15;
      *(void *)(v14 + 72) = a1;
      *(void *)(v14 + 80) = a2;
      id v16 = NSPredicate.init(format:_:)();
      [v13 setPredicate:v16];

      id v59 = 0;
      id v17 = [v13 execute:&v59];
      id v18 = v59;
      if (v17)
      {
        uint64_t v8 = v17;
        sub_1000A0760(0, &qword_1003415D0);
        unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        id v20 = v18;

        if (v19 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v21) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v21)
          {
LABEL_6:
            if (v21 == 1)
            {
              if ((v19 & 0xC000000000000001) == 0)
              {
                if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_10;
                }
LABEL_27:
                id v42 = *(id *)(v19 + 32);
LABEL_28:
                a2 = (uint64_t)v42;
                swift_bridgeObjectRelease();

                return a2;
              }
              goto LABEL_42;
            }
            type metadata accessor for DataStore.DataStoreError(0);
            sub_1000AA560();
            swift_allocError();
            uint64_t v45 = v44;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)uint64_t v45 = a1;
            *(void *)(v45 + 8) = a2;
            char v46 = 1;
LABEL_35:
            *(unsigned char *)(v45 + 16) = v46;
            *(void *)(v45 + 24) = v21;
LABEL_45:
            swift_storeEnumTagMultiPayload();
            goto LABEL_46;
          }
        }
        swift_bridgeObjectRelease();
        type metadata accessor for DataStore.DataStoreError(0);
        sub_1000AA560();
        swift_allocError();
        *(void *)uint64_t v50 = a1;
        *(void *)(v50 + 8) = a2;
        *(unsigned char *)(v50 + 16) = 1;
        swift_storeEnumTagMultiPayload();
        sub_1000B3828(a1, a2, 1u);
LABEL_46:
        swift_willThrow();
LABEL_47:

        return a2;
      }
LABEL_29:
      id v43 = v18;
      _convertNSErrorToError(_:)();

      goto LABEL_46;
    }
    if (a1 | a2)
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *(void *)uint64_t v35 = a1;
      *(void *)(v35 + 8) = a2;
      *(unsigned char *)(v35 + 16) = 2;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return a2;
    }
    id v13 = [self fetchRequest];
    sub_1000A0760(0, (unint64_t *)&unk_100343A80);
    sub_10009EE78(&qword_1003414D8);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_100286230;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_1000A5124();
    *(void *)(v37 + 32) = 0xD000000000000014;
    *(void *)(v37 + 40) = 0x8000000100295F90;
    unint64_t v38 = NSPredicate.init(format:_:)();
    [v13 setPredicate:v38];

    id v59 = 0;
    id v39 = [v13 execute:&v59];
    id v18 = v59;
    if (!v39) {
      goto LABEL_29;
    }
    uint64_t v40 = v39;
    sub_1000A0760(0, &qword_1003415D0);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v41 = v18;

    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v21)
      {
LABEL_24:
        if (v21 == 1)
        {
          if ((v19 & 0xC000000000000001) == 0)
          {
            if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              __break(1u);
            }
            goto LABEL_27;
          }
LABEL_42:
          id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_28;
        }
        type metadata accessor for DataStore.DataStoreError(0);
        sub_1000AA560();
        swift_allocError();
        uint64_t v45 = v49;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v45 = a1;
        *(void *)(v45 + 8) = a2;
        char v46 = 2;
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    *(void *)uint64_t v53 = a1;
    *(void *)(v53 + 8) = a2;
    *(unsigned char *)(v53 + 16) = 2;
    goto LABEL_45;
  }
LABEL_10:
  uint64_t v56 = v9;
  uint64_t v58 = v4;
  uint64_t v22 = self;
  swift_bridgeObjectRetain();
  id v23 = [v22 fetchRequest];
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  sub_10009EE78(&qword_1003414D8);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100284C10;
  *(void *)(v24 + 56) = &type metadata for String;
  unint64_t v25 = sub_1000A5124();
  *(void *)(v24 + 32) = 0xD000000000000012;
  *(void *)(v24 + 40) = 0x8000000100295E00;
  *(void *)(v24 + 96) = &type metadata for String;
  *(void *)(v24 + 104) = v25;
  *(void *)(v24 + 64) = v25;
  *(void *)(v24 + 72) = a1;
  uint64_t v57 = a1;
  *(void *)(v24 + 80) = a2;
  uint64_t v26 = NSPredicate.init(format:_:)();
  [v23 setPredicate:v26];

  id v59 = 0;
  id v27 = [v23 execute:&v59];
  id v28 = v59;
  if (!v27)
  {
    id v36 = v59;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return a2;
  }
  id v29 = v27;
  uint64_t v30 = v23;
  sub_1000A0760(0, &qword_1003415E0);
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v32 = v28;

  if (!(v31 >> 62))
  {
    id v13 = *(id *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_13;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    uint64_t v51 = v57;
    *(void *)uint64_t v52 = v57;
    *(void *)(v52 + 8) = a2;
    *(unsigned char *)(v52 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    sub_1000B3828(v51, a2, 0);
    swift_willThrow();

    return a2;
  }
  swift_bridgeObjectRetain();
  id v13 = (id)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_39;
  }
LABEL_13:
  if ((v31 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v33 = *(id *)(v31 + 32);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_42;
  }
  id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_16:
  id v13 = v33;
  swift_bridgeObjectRelease();
  id v34 = [v13 device];
  if (!v34)
  {
    sub_1001D7700((uint64_t)v11);
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      a2 = swift_slowAlloc();
      *(_WORD *)a2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "UserDeviceState is missing a device.", (uint8_t *)a2, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, void *))(v56 + 8))(v11, v8);
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_47;
  }
  a2 = (uint64_t)v34;

  return a2;
}

void sub_1001E0FB4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v99 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  int64_t v12 = (char *)v87 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v15 = (char *)v87 - v14;
  __chkstk_darwin(v13);
  id v17 = (char *)v87 - v16;
  id v18 = [a1 identifier];
  if (!v18)
  {
    sub_1001D7700((uint64_t)v9);
    id v29 = a1;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      long long v97 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v32 = 138412290;
      uint64_t v98 = v6;
      int64_t v100 = v29;
      id v33 = v29;
      uint64_t v6 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)long long v97 = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "CoreDevice is missing an identifier. %@", v32, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v30 = v29;
    }
    uint64_t v39 = v99;

    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v6);
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    goto LABEL_21;
  }
  unint64_t v19 = v18;
  long long v97 = v3;
  uint64_t v98 = v6;
  id v94 = a2;
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  id v22 = [a1 userDeviceStates];
  sub_1000A0760(0, &qword_1003415E0);
  sub_1000AA614((unint64_t *)&qword_1003415E8, &qword_1003415E0);
  uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = (void *)sub_1001D5CEC(v23, &qword_1003415E0);
  swift_bridgeObjectRelease();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    sub_1001D7700((uint64_t)v12);
    id v34 = a1;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      long long v97 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412290;
      int64_t v100 = v34;
      unint64_t v38 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)long long v97 = v34;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "CoreDevice is missing a UserDeviceState. %@", v37, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v35 = v34;
    }
    uint64_t v52 = v98;
    uint64_t v53 = v99;

    (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v52);
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    uint64_t v55 = v54;
    id v56 = [v34 identifier];
    if (!v56) {
      goto LABEL_35;
    }
    uint64_t v57 = v56;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;

    *uint64_t v55 = v58;
    v55[1] = v60;
LABEL_21:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  id v95 = v21;
  id v25 = [v24 coreDuetIdentifier];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v89 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v40 = v15;
  id v41 = [v24 user];
  if (v41)
  {
    id v42 = v41;
    id v43 = [v24 user];
    if (v43)
    {
      uint64_t v44 = v43;
      id v45 = [v43 localUserDeviceState];

      id v88 = v17;
      uint64_t v90 = v28;
      id v91 = v24;
      if (v45)
      {

        id v92 = 0;
      }
      else
      {
        id v92 = [v44 dsid];
      }
      uint64_t v61 = type metadata accessor for Date();
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v63 = *(void *)(v62 + 64);
      __chkstk_darwin(v61);
      uint64_t v64 = v96;
      sub_1001F10F8(a1, v42, (uint64_t)v87 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
      if (v64)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v87[0] = v62;
        v87[1] = v87;
        v96 = v42;
        id v65 = [a1 name];
        if (v65)
        {
          uint64_t v66 = v65;
          uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v68 = v67;

          __chkstk_darwin(v69);
          uint64_t v70 = (char *)v87 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v71 = v87[0];
          (*(void (**)(char *, char *, uint64_t))(v87[0] + 16))(v70, v70, v61);
          unsigned __int16 v72 = (unsigned __int16)[a1 platform];

          (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v61);
          unint64_t v73 = (char *)v94;
          v74 = v95;
          *id v94 = v93;
          *((void *)v73 + 1) = v74;
          uint64_t v75 = v90;
          *((void *)v73 + 2) = v89;
          *((void *)v73 + 3) = v75;
          *((void *)v73 + 4) = v92;
          id v76 = (int *)type metadata accessor for DataStore.DeviceDetails(0);
          (*(void (**)(char *, char *, uint64_t))(v71 + 32))(&v73[v76[7]], v70, v61);
          *(_WORD *)&v73[v76[8]] = v72;
          id v77 = (uint64_t *)&v73[v76[9]];
          *id v77 = v99;
          v77[1] = v68;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v80 = (uint64_t)v88;
          sub_1001D7700((uint64_t)v88);
          v81 = a1;
          os_log_type_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v82, v83))
          {
            v84 = (uint8_t *)swift_slowAlloc();
            id v95 = (void *)swift_slowAlloc();
            long long v97 = v84;
            *(_DWORD *)v84 = 138412290;
            id v94 = (uint64_t *)(v84 + 4);
            int64_t v100 = v81;
            uint64_t v85 = v81;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v95 = v81;

            _os_log_impl((void *)&_mh_execute_header, v82, v83, "CoreDevice is missing a name.%@", v97, 0xCu);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            os_log_type_t v82 = v81;
          }
          uint64_t v86 = v87[0];

          (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v80, v98);
          type metadata accessor for DataStore.DataStoreError(0);
          sub_1000AA560();
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();

          (*(void (**)(char *, uint64_t))(v86 + 8))((char *)v87 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), v61);
        }
      }
      return;
    }
    __break(1u);
LABEL_35:
    swift_errorRelease();
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001D7700((uint64_t)v15);
  char v46 = v24;
  id v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    v96 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 138412290;
    int64_t v100 = v46;
    uint64_t v50 = v46;
    long long v97 = v46;
    uint64_t v51 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v96 = v24;

    char v46 = v97;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "UserDeviceState is missing a user. %@", v49, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v47 = v46;
  }
  uint64_t v78 = v98;
  uint64_t v79 = v99;

  (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v78);
  type metadata accessor for DataStore.DataStoreError(0);
  sub_1000AA560();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
}

void sub_1001E1B54(void *a1@<X1>, void *a2@<X8>)
{
  id v4 = sub_10020B2D4(a1);
  if (!v2)
  {
    uint64_t v5 = v4;
    id v6 = sub_1001D7640();
    __chkstk_darwin(v6);
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v7 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    id v8 = sub_1001FADE4(STBlueprintTypeDowntime, 0, 0, v5, v7);
    id v9 = [v8 downtimeConfiguration];

    *a2 = v9;
  }
}

void sub_1001E1CE8(void *a1@<X1>, char a2@<W2>, void **a3@<X3>, void (*a4)(void)@<X4>, uint64_t *a5@<X8>)
{
  id v29 = a4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = sub_10020B2D4(a1);
  if (!v5)
  {
    unint64_t v15 = v14;
    uint64_t v26 = v10;
    uint64_t v27 = a5;
    uint64_t v28 = v11;
    if (a2) {
      id v16 = sub_10020BA68();
    }
    else {
      id v16 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    id v17 = v16;
    uint64_t v18 = (uint64_t)v13;
    unint64_t v19 = *a3;
    id v20 = v15;
    id v21 = sub_1001FADE4(v19, 0, 0, v15, v17);
    id v22 = [v21 objectID];
    id v23 = sub_1001D7640();
    sub_1001D7700(v18);

    v29(0);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_objectID) = v22;
    *(void *)(v24 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_managedObjectContext) = v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v24 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_logger, v18, v26);
    *uint64_t v27 = v24;
  }
}

uint64_t sub_1001E1F0C@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a3;
  v24[0] = a4;
  v24[1] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v32 = (uint64_t)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [*a1 identifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  v31[0] = v8;
  v31[1] = v10;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 95;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  sub_1000DA39C();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_10009EE78(&qword_100342B20);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000A4FD8((uint64_t)v15, &qword_100342B20);
    sub_1001D7700(v32);
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)id v20 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_1000A2E70(v8, v10, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Usage limit has an unexpected identifier: %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v32, v5);
    id v22 = v26;
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    uint64_t v23 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t result = swift_willThrow();
    *id v22 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void, char *, uint64_t))(v17 + 32))(v24[0], v15, v16);
  }
  return result;
}

void sub_1001E2340(void *a1@<X1>, char a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_10020B2D4(a1);
  if (!v3)
  {
    Swift::String v12 = v11;
    if (a2) {
      id v13 = sub_10020BA68();
    }
    else {
      id v13 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v32 = v13;
    uint64_t v28 = v8;
    uint64_t v29 = a3;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v14;
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = 95;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = v30;
    uint64_t v17 = v31;
    uint64_t v18 = UUID.uuidString.getter();
    id v20 = v19;
    uint64_t v30 = v16;
    uint64_t v31 = v17;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v22 = v32;
    id v23 = sub_1001FADE4(STBlueprintTypeUsageLimit, v30, v31, v12, v32);
    swift_bridgeObjectRelease();
    id v27 = [v23 objectID];
    id v24 = sub_1001D7640();
    sub_1001D7700((uint64_t)v10);

    type metadata accessor for UsageLimit();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_objectID) = v27;
    *(void *)(v25 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_managedObjectContext) = v24;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v25 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_logger, v10, v7);
    uint64_t *v29 = v25;
  }
}

void sub_1001E25E8(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, void (*a5)(id *, uint64_t, uint64_t *)@<X4>, uint64_t *a6@<X8>)
{
  id v12 = sub_10020B2D4(a2);
  if (!v6)
  {
    id v13 = v12;
    if (a3) {
      id v14 = sub_10020BA68();
    }
    else {
      id v14 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    Swift::String v15 = v14;
    unint64_t v16 = sub_10020C608(*a4, (uint64_t)v13, (uint64_t)v14);
    swift_retain();
    uint64_t v17 = sub_10020AFDC(v16, a1, a5);
    swift_bridgeObjectRelease();

    swift_release();
    *a6 = v17;
  }
}

uint64_t sub_1001E26FC@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  v25[1] = a2;
  uint64_t v26 = a3;
  v25[0] = a4;
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [*a1 identifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v32 = v8;
  unint64_t v33 = v10;
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v11;
  sub_1000DA39C();
  char v12 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v32 = v8;
    unint64_t v33 = v10;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v13;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 95;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v15 = sub_10009EE78(&qword_100342B20);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_1000A4FD8((uint64_t)v17, &qword_100342B20);
    sub_1001D7700((uint64_t)v6);
    swift_bridgeObjectRetain();
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)id v22 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_1000A2E70(v8, v10, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Usage override has an unexpected identifier: %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v34);
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    uint64_t v24 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t result = swift_willThrow();
    *uint64_t v26 = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void, char *, uint64_t))(v19 + 32))(v25[0], v17, v18);
  }
  return result;
}

uint64_t sub_1001E2B88(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  char v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  Swift::String v14 = (char *)&v66 - v13;
  uint64_t v15 = (uint64_t *)sub_10020B2D4(a2);
  if (v4) {
    return a3;
  }
  uint64_t v16 = v15;
  id v76 = v12;
  id v77 = v3;
  uint64_t v78 = a1;
  if (a3) {
    id v17 = sub_10020BA68();
  }
  else {
    id v17 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
  }
  uint64_t v18 = v17;
  id v74 = a2;
  uint64_t v75 = v16;
  uint64_t v72 = v9;
  uint64_t v73 = v8;
  id v19 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100286350;
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000A5124();
  *(void *)(v20 + 64) = v21;
  strcpy((char *)(v20 + 32), "organization");
  *(unsigned char *)(v20 + 45) = 0;
  *(_WORD *)(v20 + 46) = -5120;
  *(void *)(v20 + 96) = sub_1000A0760(0, &qword_1003453B8);
  *(void *)(v20 + 104) = sub_1000AA614(&qword_1003453C0, &qword_1003453B8);
  *(void *)(v20 + 72) = v18;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v20 + 136) = &type metadata for String;
  *(void *)(v20 + 144) = v21;
  *(void *)(v20 + 112) = 0x696669746E656469;
  *(void *)(v20 + 120) = 0xEA00000000007265;
  id v22 = v18;
  uint64_t v23 = UUID.uuidString.getter();
  *(void *)(v20 + 176) = &type metadata for String;
  *(void *)(v20 + 184) = v21;
  uint64_t v24 = v19;
  *(void *)(v20 + 152) = v23;
  *(void *)(v20 + 160) = v25;
  uint64_t v26 = NSPredicate.init(format:_:)();
  [v19 setPredicate:v26];

  id v80 = 0;
  id v27 = [v19 execute:&v80];
  id v28 = v80;
  if (!v27)
  {
    id v40 = v80;
    a3 = _convertNSErrorToError(_:)();

    swift_willThrow();
    return a3;
  }
  unint64_t v29 = v27;
  sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
  unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v31 = v28;

  uint64_t v32 = v75;
  if (!(v30 >> 62))
  {
    uint64_t v33 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v33) {
      goto LABEL_7;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    a3 = type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    uint64_t v61 = (void *)STBlueprintTypeUsageLimitOverride;
    void *v62 = STBlueprintTypeUsageLimitOverride;
    id v63 = v74;
    v62[1] = v74;
    swift_storeEnumTagMultiPayload();
    id v64 = v61;
    id v65 = v63;
    swift_willThrow();

    return a3;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v33) {
    goto LABEL_20;
  }
LABEL_7:
  if (v33 == 1)
  {
    if ((v30 & 0xC000000000000001) != 0)
    {
      uint64_t v34 = v22;
      id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        __break(1u);
      }
      uint64_t v34 = v22;
      id v35 = *(id *)(v30 + 32);
    }
    os_log_type_t v36 = v35;
    swift_bridgeObjectRelease();
    id v37 = [v36 objectID];
    id v38 = sub_1001D7640();
    sub_1001D7700((uint64_t)v14);

    type metadata accessor for UsageOverride();
    a3 = swift_allocObject();
    *(void *)(a3 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_objectID) = v37;
    *(void *)(a3 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_managedObjectContext) = v38;
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(a3 + OBJC_IVAR____TtC15ScreenTimeAgent9Blueprint_logger, v14, v73);
  }
  else
  {
    uint64_t v69 = v33;
    unint64_t v70 = v30;
    id v71 = v22;
    id v77 = v19;
    uint64_t v41 = (uint64_t)v76;
    sub_1001D7700((uint64_t)v76);
    uint64_t v42 = type metadata accessor for UUID();
    uint64_t v43 = *(void *)(v42 - 8);
    __chkstk_darwin(v42);
    id v45 = (char *)&v66 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t *, uint64_t))(v43 + 16))(v45, v78, v42);
    char v46 = v32;
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v78 = v46;
      uint64_t v50 = v49;
      uint64_t v67 = (void *)swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      id v80 = v68;
      *(_DWORD *)uint64_t v50 = 136315394;
      uint64_t v75 = &v66;
      sub_10020D2E4((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v51 = v47;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v79 = sub_1000A2E70(v52, v53, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
      *(_WORD *)(v50 + 12) = 2112;
      id v54 = [v78 dsid];
      uint64_t v79 = (uint64_t)v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v67 = v54;

      _os_log_impl((void *)&_mh_execute_header, v51, v48, "Invalid number of usagelimit override blueprints found with UUID: %s for user: %@", (uint8_t *)v50, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      char v46 = v78;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v72 + 8))(v76, v73);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);

      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v41, v73);
    }
    a3 = type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    id v56 = v55;
    uint64_t v57 = (void *)STBlueprintTypeUsageLimitOverride;
    id v58 = v74;
    id v59 = v74;
    id v60 = v57;
    swift_bridgeObjectRelease();
    void *v56 = v58;
    v56[1] = v60;
    v56[2] = v69;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return a3;
}

void sub_1001E3434(void *a1@<X1>, char a2@<W2>, unsigned __int8 *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    if (a2) {
      id v8 = sub_10020BA68();
    }
    else {
      id v8 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v9 = v8;
    id v10 = sub_1001D7640();
    __chkstk_darwin(v10);
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (v13)
    {
      id v11 = sub_1001FADE4(STBlueprintTypeDowntime, 0, 0, v7, v9);
      unsigned __int8 v12 = [v11 enabled];

      *a3 = v12;
    }
    else
    {

      *a3 = 0;
    }
  }
}

void sub_1001E35E0(unsigned char *a1@<X8>)
{
  id v3 = [self registeredIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = sub_1001D7640();
  sub_1000A0760(0, &qword_1003415C8);
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();

    self;
    id v5 = [(id)swift_dynamicCastObjCClassUnconditional() payloadMode];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9) {
      char v10 = 1;
    }
    else {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    *a1 = v10 & 1;
  }
}

void sub_1001E379C(void *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    uint64_t v7 = v6;
    if (a2) {
      id v8 = sub_10020BA68();
    }
    else {
      id v8 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v9 = v8;
    id v10 = sub_1001D7640();
    __chkstk_darwin(v10);
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (v13)
    {
      id v11 = sub_1001FADE4(STBlueprintTypeDowntime, 0, 0, v7, v9);
      id v12 = [v11 activeOverride];

      *a3 = v12;
    }
    else
    {

      *a3 = 0;
    }
  }
}

void sub_1001E3950(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = sub_10020B2D4(a2);
  if (!v3)
  {
    id v6 = v5;
    id v7 = [v5 dsid];
    id v8 = [objc_allocWithZone((Class)STUserID) initWithDSID:v7];

    uint64_t v9 = self;
    id v10 = sub_1001D7640();
    id v14 = 0;
    id v11 = [v9 applyAutomaticOnDemandDowntimeStateChange:a3 forUserID:v8 context:v10 error:&v14];

    if (v11)
    {
      id v12 = v14;
    }
    else
    {
      id v13 = v14;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_1001E3AA4(void *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    if (a2) {
      id v8 = sub_10020BA68();
    }
    else {
      id v8 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v9 = v8;
    id v10 = sub_1001FADE4(STBlueprintTypeDowntime, 0, 0, v7, v8);
    id v11 = [v10 downtimeConfiguration];
    id v12 = [v11 currentState];

    *a3 = v12;
  }
}

void sub_1001E3BB8(void *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    if (a2) {
      id v8 = sub_10020BA68();
    }
    else {
      id v8 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v9 = v8;
    id v10 = sub_1001FADE4(STBlueprintTypeDowntime, 0, 0, v7, v8);
    id v11 = [v10 schedule];
    if (v11)
    {
      id v12 = v11;
      id v13 = [v11 scheduleRepresentation];

      *a3 = v13;
    }
    else
    {

      *a3 = 0;
    }
  }
}

void sub_1001E3CF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = sub_10020B2D4(a2);
  if (!v3)
  {
    id v6 = v5;
    id v7 = sub_10020BE78(v5);
    LOBYTE(v74) = 0;
    id v8 = sub_1001D7640();
    __chkstk_darwin(v8);
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v63 = sub_10020C738(v6, 0);
    id v9 = sub_1001D7640();
    __chkstk_darwin(v9);
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v10 = [v7 blueprints];
    if (v10)
    {
      id v11 = v10;
      id v60 = v7;
      uint64_t v12 = sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
      sub_1000AA614(&qword_100345310, (unint64_t *)&unk_100342BB0);
      uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v13 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v14 = v69;
        uint64_t v65 = v70;
        uint64_t v15 = v71;
        uint64_t v16 = v72;
        unint64_t v17 = v73;
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v18 = -1 << *(unsigned char *)(v13 + 32);
        uint64_t v65 = v13 + 56;
        uint64_t v19 = ~v18;
        uint64_t v20 = -v18;
        if (v20 < 64) {
          uint64_t v21 = ~(-1 << v20);
        }
        else {
          uint64_t v21 = -1;
        }
        unint64_t v17 = v21 & *(void *)(v13 + 56);
        uint64_t v15 = v19;
        uint64_t v14 = v13;
      }
      uint64_t v59 = v15;
      int64_t v64 = (unint64_t)(v15 + 64) >> 6;
      uint64_t v61 = v12;
      uint64_t v66 = v14;
      if ((v14 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v22 = v74;
        swift_unknownObjectRelease();
        uint64_t v23 = v16;
        uint64_t v68 = v17;
        while (v22)
        {
          uint64_t v67 = v23;
          id v28 = objc_msgSend(v22, "type", v59, v60, v61);
          if (!v28)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_37:

LABEL_38:
            swift_bridgeObjectRelease();
            uint64_t v16 = v67;
            unint64_t v17 = v68;
            if (v14 < 0) {
              goto LABEL_10;
            }
            goto LABEL_12;
          }
          unint64_t v29 = v28;
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v32 = v31;

          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          if (!v32)
          {
            uint64_t v14 = v66;
            goto LABEL_37;
          }
          if (v30 == v33 && v32 == v34)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) == 0) {
              goto LABEL_45;
            }
          }
          id v36 = [v22 users];
          if (v36)
          {
            id v37 = v36;
            sub_1000A0760(0, &qword_1003431E0);
            sub_1000AA614((unint64_t *)&qword_100343B80, &qword_1003431E0);
            id v38 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
          }
          else
          {
            id v38 = &_swiftEmptySetSingleton;
            if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
              && _CocoaArrayWrapper.endIndex.getter())
            {
              sub_1000A03C4((unint64_t)_swiftEmptyArrayStorage);
              id v38 = v58;
            }
          }
          char v39 = sub_1001D6858(v6, (uint64_t)v38, &qword_1003431E0);
          swift_bridgeObjectRelease();
          if (v39)
          {
            id v40 = [v22 identifier];
            uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v43 = v42;

            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            id v74 = (void *)*a3;
            id v45 = (void *)*a3;
            *a3 = 0x8000000000000000;
            uint64_t v62 = v41;
            unint64_t v47 = sub_10010A024(v41, v43);
            uint64_t v48 = v45[2];
            BOOL v49 = (v46 & 1) == 0;
            uint64_t v50 = v48 + v49;
            if (__OFADD__(v48, v49)) {
              goto LABEL_64;
            }
            char v51 = v46;
            if (v45[3] >= v50)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_1002360B4();
              }
            }
            else
            {
              sub_100235134(v50, isUniquelyReferenced_nonNull_native);
              uint64_t v52 = sub_10010A024(v62, v43);
              if ((v51 & 1) != (v53 & 1)) {
                goto LABEL_67;
              }
              unint64_t v47 = v52;
            }
            if (v51)
            {
              *(unsigned char *)(v74[7] + v47) = 0;
            }
            else
            {
              v74[(v47 >> 6) + 8] |= 1 << v47;
              id v54 = (uint64_t *)(v74[6] + 16 * v47);
              *id v54 = v62;
              v54[1] = v43;
              *(unsigned char *)(v74[7] + v47) = 0;
              uint64_t v55 = v74[2];
              BOOL v56 = __OFADD__(v55, 1);
              uint64_t v57 = v55 + 1;
              if (v56) {
                goto LABEL_65;
              }
              v74[2] = v57;
              swift_bridgeObjectRetain();
            }
            uint64_t v14 = v66;
            *a3 = v74;

            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
LABEL_45:

          uint64_t v16 = v67;
          unint64_t v17 = v68;
          uint64_t v14 = v66;
          if (v66 < 0) {
            goto LABEL_10;
          }
LABEL_12:
          if (v17)
          {
            uint64_t v68 = (v17 - 1) & v17;
            unint64_t v24 = __clz(__rbit64(v17)) | (v16 << 6);
            uint64_t v23 = v16;
          }
          else
          {
            int64_t v25 = v16 + 1;
            if (__OFADD__(v16, 1))
            {
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
            if (v25 >= v64) {
              break;
            }
            unint64_t v26 = *(void *)(v65 + 8 * v25);
            uint64_t v23 = v16 + 1;
            if (!v26)
            {
              uint64_t v23 = v16 + 2;
              if (v16 + 2 >= v64) {
                break;
              }
              unint64_t v26 = *(void *)(v65 + 8 * v23);
              if (!v26)
              {
                uint64_t v23 = v16 + 3;
                if (v16 + 3 >= v64) {
                  break;
                }
                unint64_t v26 = *(void *)(v65 + 8 * v23);
                if (!v26)
                {
                  uint64_t v23 = v16 + 4;
                  if (v16 + 4 >= v64) {
                    break;
                  }
                  unint64_t v26 = *(void *)(v65 + 8 * v23);
                  if (!v26)
                  {
                    uint64_t v27 = v16 + 5;
                    while (v64 != v27)
                    {
                      unint64_t v26 = *(void *)(v65 + 8 * v27++);
                      if (v26)
                      {
                        uint64_t v23 = v27 - 1;
                        goto LABEL_27;
                      }
                    }
                    break;
                  }
                }
              }
            }
LABEL_27:
            uint64_t v68 = (v26 - 1) & v26;
            unint64_t v24 = __clz(__rbit64(v26)) + (v23 << 6);
          }
          id v22 = *(id *)(*(void *)(v14 + 48) + 8 * v24);
        }
      }
      sub_1000AA60C();
    }
    else
    {
LABEL_66:
      __break(1u);
LABEL_67:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
}

void sub_1001E44C0(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  id v10 = sub_10020B2D4(a1);
  if (!v5)
  {
    id v11 = v10;
    if (a2) {
      id v12 = sub_10020BA68();
    }
    else {
      id v12 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v13 = v12;
    id v14 = sub_1001FADE4(STBlueprintTypeUsageLimit, a3, a4, v11, v12);
    id v15 = [v14 usageLimit];
    uint64_t v16 = v15;
    if (!v15)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_9;
    }
    id v17 = [v15 usageItemType];
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    id v20 = [v16 applicationIdentifiers];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v65 = 0;
    }
    id v22 = [v16 categoryIdentifiersVersion2];
    uint64_t v66 = v19;
    if (v22)
    {
      uint64_t v23 = v22;
      int64_t v64 = v13;
      type metadata accessor for Identifier(0);
      uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v25 = *(void *)(v24 + 16);
      if (v25)
      {
        id v59 = v14;
        id v60 = v16;
        uint64_t v61 = v11;
        uint64_t v62 = a5;
        sub_1002080AC(0, v25, 0);
        uint64_t v26 = 0;
        uint64_t v27 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v30 = v29;
          unint64_t v32 = _swiftEmptyArrayStorage[2];
          unint64_t v31 = _swiftEmptyArrayStorage[3];
          if (v32 >= v31 >> 1) {
            sub_1002080AC(v31 > 1, v32 + 1, 1);
          }
          ++v26;
          _swiftEmptyArrayStorage[2] = v32 + 1;
          uint64_t v33 = &_swiftEmptyArrayStorage[2 * v32];
          v33[4] = v28;
          v33[5] = v30;
        }
        while (v25 != v26);
LABEL_26:
        swift_bridgeObjectRelease();
        id v11 = v61;
        a5 = v62;
        uint64_t v13 = v64;
        id v14 = v59;
        uint64_t v16 = v60;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v27 = [v16 categoryIdentifiers];
      if (!v27) {
        goto LABEL_28;
      }
      int64_t v64 = v13;
      type metadata accessor for Identifier(0);
      uint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        id v59 = v14;
        id v60 = v16;
        uint64_t v61 = v11;
        uint64_t v62 = a5;
        sub_1002080AC(0, v35, 0);
        uint64_t v36 = 0;
        uint64_t v27 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;
          unint64_t v41 = _swiftEmptyArrayStorage[2];
          unint64_t v40 = _swiftEmptyArrayStorage[3];
          if (v41 >= v40 >> 1) {
            sub_1002080AC(v40 > 1, v41 + 1, 1);
          }
          ++v36;
          _swiftEmptyArrayStorage[2] = v41 + 1;
          uint64_t v42 = &_swiftEmptyArrayStorage[2 * v41];
          v42[4] = v37;
          v42[5] = v39;
        }
        while (v35 != v36);
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v13 = v64;
LABEL_28:
    id v43 = objc_msgSend(v16, "websiteIdentifiers", v59, v60, v61, v62);
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v45 = 0;
    }
    if (v65 && *(void *)(v65 + 16) || v27 && v27[2]) {
      goto LABEL_37;
    }
    if (v45)
    {
      if (*(void *)(v45 + 16))
      {
LABEL_37:

        swift_bridgeObjectRelease();
        *a5 = v65;
        a5[1] = (uint64_t)v27;
        a5[2] = v45;
        return;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v66)
    {
      if (v63 == v46 && v66 == v47)
      {
        swift_bridgeObjectRelease();
LABEL_45:
        swift_bridgeObjectRelease();
        id v49 = [v16 itemIdentifiers];
        uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        a5[2] = 0;
        *a5 = v50;
        goto LABEL_11;
      }
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v48) {
        goto LABEL_45;
      }
      if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v51)
      {
        swift_bridgeObjectRelease();
LABEL_50:
        swift_bridgeObjectRelease();
        id v53 = [v16 itemIdentifiers];
        uint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        *a5 = 0;
        a5[1] = v54;
        a5[2] = 0;
        return;
      }
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v52) {
        goto LABEL_50;
      }
      if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v55)
      {
        swift_bridgeObjectRelease_n();
LABEL_55:
        id v57 = [v16 itemIdentifiers];
        uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        *a5 = 0;
        a5[1] = 0;
        a5[2] = v58;
        return;
      }
      char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v56) {
        goto LABEL_55;
      }

LABEL_10:
      a5[2] = 0;
      *a5 = 1;
LABEL_11:
      a5[1] = 0;
      return;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
}

void sub_1001E4B58(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  id v10 = sub_10020B2D4(a1);
  if (!v5)
  {
    id v11 = v10;
    if (a2) {
      id v12 = sub_10020BA68();
    }
    else {
      id v12 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v13 = v12;
    id v14 = sub_1001FADE4(STBlueprintTypeUsageLimit, a3, a4, v11, v12);
    id v15 = [v14 usageLimit];
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = [v15 budgetLimitScheduleRepresentation];

      *a5 = v17;
    }
    else
    {

      *a5 = 0;
    }
  }
}

void sub_1001E4C9C(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unsigned char *a5@<X8>)
{
  id v10 = sub_10020B2D4(a1);
  if (!v5)
  {
    id v11 = v10;
    if (a2) {
      id v12 = sub_10020BA68();
    }
    else {
      id v12 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v13 = v12;
    id v14 = sub_1001FADE4(STBlueprintTypeUsageLimit, a3, a4, v11, v12);
    id v15 = [v14 configurations];
    if (v15
      && (uint64_t v16 = v15,
          sub_1000A0760(0, (unint64_t *)&qword_100340F90),
          sub_1000AA614(&qword_1003453B0, (unint64_t *)&qword_100340F90),
          uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
          v16,
          uint64_t v18 = (void *)sub_1001D5CEC(v17, (unint64_t *)&qword_100340F90),
          swift_bridgeObjectRelease(),
          v18))
    {
      sub_1000A0760(0, &qword_1003453E0);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      id v35 = v18;
      id v20 = [v35 payloadPlist];
      uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A0168(v21, v23);
      id v36 = 0;
      id v25 = [ObjCClassFromMetadata declarationForData:isa error:&v36];

      if (v25)
      {
        id v26 = v36;
        id v27 = [v25 payloadMode];
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;

        if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31) {
          char v33 = 1;
        }
        else {
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *a5 = v33 & 1;
      }
      else
      {
        id v34 = v36;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {

      *a5 = 0;
    }
  }
}

void sub_1001E4FE8(uint64_t a1, void *a2)
{
  id v3 = sub_10020B2D4(a2);
  if (!v2)
  {
    id v4 = v3;
    id v5 = sub_10020BE78(v3);
    id v6 = sub_1001D7640();
    __chkstk_darwin(v6);
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v7 = sub_1001D7640();
    __chkstk_darwin(v7);
    NSManagedObjectContext.performAndWait<A>(_:)();
  }
}

void sub_1001E56A0(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
}

void sub_1001E56C0(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
}

void sub_1001E56E0(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, SEL *a5@<X5>, uint64_t a6@<X8>)
{
  id v12 = sub_10020B2D4(a1);
  if (!v6)
  {
    uint64_t v13 = v12;
    if (a2) {
      id v14 = sub_10020BA68();
    }
    else {
      id v14 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    id v15 = v14;
    id v16 = sub_1001FADE4(STBlueprintTypeUsageLimitOverride, a3, a4, v13, v14);
    uint64_t v17 = v16;
    id v18 = [v16 *a5];
    if (v18)
    {
      uint64_t v19 = v18;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a6, 0, 1, v20);
    }
    else
    {

      uint64_t v21 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a6, 1, 1, v21);
    }
  }
}

void sub_1001E5878(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  id v10 = sub_10020B2D4(a1);
  if (v5) {
    return;
  }
  id v11 = v10;
  if (a2) {
    id v12 = sub_10020BA68();
  }
  else {
    id v12 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
  }
  uint64_t v61 = v12;
  id v62 = sub_1001FADE4(STBlueprintTypeUsageLimitOverride, a3, a4, v11, v12);
  id v13 = [v62 configurations];
  if (!v13
    || (id v14 = v13,
        sub_1000A0760(0, (unint64_t *)&qword_100340F90),
        sub_1000AA614(&qword_1003453B0, (unint64_t *)&qword_100340F90),
        uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
        v14,
        id v16 = (void *)sub_1001D5CEC(v15, (unint64_t *)&qword_100340F90),
        swift_bridgeObjectRelease(),
        !v16))
  {
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    uint64_t v29 = (void *)STBlueprintConfigurationTypeAppPolicy;
    *uint64_t v30 = STBlueprintConfigurationTypeAppPolicy;
    v30[1] = a3;
    v30[2] = a4;
    swift_storeEnumTagMultiPayload();
    id v31 = v29;
    swift_bridgeObjectRetain();
    swift_willThrow();

    return;
  }
  id v17 = v16;
  id v18 = [v17 type];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
      if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0)
        {
          type metadata accessor for DataStore.DataStoreError(0);
          sub_1000AA560();
          swift_allocError();
          *id v60 = v18;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();

          goto LABEL_27;
        }
      }
      unint64_t v32 = v18;
      sub_1000A0760(0, &qword_1003453E8);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      id v48 = [v17 payloadPlist];
      uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v50;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A0168(v49, v51);
      id v63 = 0;
      id v53 = [ObjCClassFromMetadata declarationForData:isa error:&v63];

      id v40 = v63;
      if (v53)
      {
        id v54 = v63;
        id v55 = [v53 payloadHostnames];
        char v56 = v32;
        if (v55)
        {
          id v57 = v55;
          uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {

          uint64_t v58 = 0;
        }
        *a5 = 0;
        a5[1] = v58;
        return;
      }
LABEL_26:
      id v59 = v40;
      _convertNSErrorToError(_:)();

      swift_willThrow();
LABEL_27:

      return;
    }
  }
  unint64_t v32 = v18;
  sub_1000A0760(0, &qword_1003453F0);
  char v33 = (void *)swift_getObjCClassFromMetadata();
  id v34 = [v17 payloadPlist];
  uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v37 = v36;

  Class v38 = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A0168(v35, v37);
  id v63 = 0;
  id v39 = [v33 declarationForData:v38 error:&v63];

  id v40 = v63;
  if (!v39) {
    goto LABEL_26;
  }
  id v41 = v63;
  id v42 = [v39 payloadApps];
  id v43 = v32;
  if (v42)
  {
    uint64_t v44 = v42;
    uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    uint64_t v45 = 0;
  }
  *a5 = v45;
  a5[1] = 0;
}

void sub_1001E5E98(void *a1@<X0>, char a2@<W2>, unsigned __int8 *a3@<X8>)
{
  if (a1)
  {
    id v6 = sub_10020B2D4(a1);
    if (!v3)
    {
      id v7 = v6;
      id v8 = [v6 familySettings];
      if (!v8)
      {
        type metadata accessor for DataStore.DataStoreError(0);
        sub_1000AA560();
        swift_allocError();
        *id v16 = a1;
        swift_storeEnumTagMultiPayload();
        id v17 = a1;
        swift_willThrow();

        return;
      }
      id v9 = v8;
      id v10 = [v8 isAppAndWebsiteActivityEnabled];
      if (v10)
      {
        id v11 = v10;
        unsigned __int8 v12 = [v10 BOOLValue];

LABEL_6:
        *a3 = v12;
        return;
      }

      goto LABEL_11;
    }
  }
  else
  {
    id v14 = sub_10020B2D4(0);
    if (!v3)
    {
      uint64_t v15 = v14;
      id v18 = sub_10020C738(v14, a2 & 1);
      self;
      uint64_t v19 = (void *)swift_dynamicCastObjCClass();
      if (v19)
      {
        unsigned __int8 v20 = [v19 isAppAndWebsiteActivityEnabled];

        *a3 = v20;
      }
      else
      {
        self;
        uint64_t v21 = swift_dynamicCastObjCClass();
        if (v21)
        {
          uint64_t v22 = (void *)v21;
          id v7 = v18;
          id v23 = [v22 isAppAndWebsiteActivityEnabled];
          if (v23)
          {
            char v24 = v23;
            unsigned __int8 v12 = [v23 BOOLValue];

            goto LABEL_6;
          }

LABEL_11:
          *a3 = 0;
          return;
        }
        uint64_t v25 = self;
        id v26 = sub_1001D7640();
        id v31 = 0;
        id v27 = [v25 fetchScreenTimeSettingsInContext:v26 error:&v31];

        if (v27)
        {
          id v28 = v31;
          unsigned __int8 v29 = [v27 screenTimeEnabled];

          *a3 = v29;
        }
        else
        {
          id v30 = v31;
          _convertNSErrorToError(_:)();

          swift_willThrow();
        }
      }
    }
  }
}

void sub_1001E6160(void *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v86 = a3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v78 - v14;
  if (a1)
  {
    id v16 = sub_10020B2D4(a1);
    if (!v5)
    {
      id v17 = v16;
      char v18 = a5;
      id v19 = [v16 familySettings];
      if (v19)
      {
        unsigned __int8 v20 = v19;
        sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
        Class isa = NSNumber.init(BOOLeanLiteral:)(v86 & 1).super.super.isa;
        [v20 setIsAppAndWebsiteActivityEnabled:isa];

        if (v18)
        {
          sub_1001D7700((uint64_t)v13);
          uint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v22, v23))
          {
            char v24 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v24 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Marking family settings as dirty to notify the family.", v24, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          [v20 setIsDirty:1];
        }
      }
      else
      {
        type metadata accessor for DataStore.DataStoreError(0);
        sub_1000AA560();
        swift_allocError();
        *id v31 = a1;
        swift_storeEnumTagMultiPayload();
        id v32 = a1;
        swift_willThrow();
      }
    }
    return;
  }
  int v84 = a5;
  int v85 = a4;
  uint64_t v25 = self;
  id v26 = sub_1001D7640();
  id v87 = 0;
  id v27 = [v25 fetchScreenTimeSettingsInContext:v26 error:&v87];

  if (!v27)
  {
    id v30 = v87;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v28 = v87;
  id v29 = sub_10020B2D4(0);
  if (v5)
  {

    return;
  }
  id v33 = v29;
  unsigned int v34 = [v27 screenTimeEnabled];
  int v35 = v86;
  if ((v34 ^ v86))
  {
    id v83 = v33;
    uint64_t v36 = sub_10009EE78(&qword_100342B30);
    __chkstk_darwin(v36 - 8);
    Class v38 = (char *)&v78 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v35)
    {
      static Date.now.getter();
      uint64_t v39 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
      sub_100209D14((uint64_t)v38);
      sub_1000A4FD8((uint64_t)v38, &qword_100342B30);
LABEL_16:
      id v33 = v83;
      goto LABEL_28;
    }
    uint64_t v81 = v10;
    uint64_t v40 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v38, 1, 1, v40);
    sub_100209D14((uint64_t)v38);
    sub_1000A4FD8((uint64_t)v38, &qword_100342B30);
    id v82 = [self fetchRequest];
    sub_10009EE78(&qword_1003414D8);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_100284C10;
    sub_1000A0760(0, (unint64_t *)&unk_100343A80);
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1000A5124();
    *(void *)(v41 + 32) = 0x73752E6567617375;
    *(void *)(v41 + 40) = 0xEA00000000007265;
    *(void *)(v41 + 96) = sub_1000A0760(0, &qword_1003431E0);
    *(void *)(v41 + 104) = sub_1000AA614(&qword_1003452F0, &qword_1003431E0);
    id v42 = v83;
    *(void *)(v41 + 72) = v83;
    id v43 = v42;
    id v44 = v82;
    uint64_t v45 = NSPredicate.init(format:_:)();
    [v44 setPredicate:v45];

    id v87 = 0;
    id v46 = [v44 execute:&v87];
    id v47 = v87;
    if (!v46)
    {
      id v77 = v87;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return;
    }
    id v48 = v46;
    sub_1000A0760(0, &qword_1003452F8);
    unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v50 = v47;
    unint64_t v51 = v49;

    if (v49 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v52 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v10 = v81;
    int v35 = v86;
    if (!v52)
    {

      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    uint64_t v79 = v9;
    id v80 = v27;
    if (v52 < 1) {
      __break(1u);
    }
    uint64_t v53 = 0;
    unint64_t v54 = v51 & 0xC000000000000001;
    unint64_t v55 = v51;
    do
    {
      if (v54) {
        id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v56 = *(id *)(v51 + 8 * v53 + 32);
      }
      id v57 = v56;
      ++v53;
      id v58 = sub_1001D7640();
      [v58 deleteObject:v57];

      unint64_t v51 = v55;
    }
    while (v52 != v53);

    swift_bridgeObjectRelease();
    id v27 = v80;
    uint64_t v10 = v81;
    int v35 = v86;
    id v33 = v83;
    uint64_t v9 = v79;
  }
LABEL_28:
  char v59 = v85 & 1;
  [v27 setScreenTimeEnabled:v35 & 1];
  id v60 = sub_10020C738(v33, v59);
  id v83 = v33;
  self;
  uint64_t v61 = swift_dynamicCastObjCClass();
  if (v61)
  {
    id v62 = (void *)v61;
    id v63 = v60;
    if (([v62 isAppAndWebsiteActivityEnabled] ^ v35))
    {
      [v62 setIsAppAndWebsiteActivityEnabled:v35 & 1];
    }
    else
    {
    }
    return;
  }
  id v80 = v27;
  self;
  uint64_t v64 = swift_dynamicCastObjCClass();
  if (!v64)
  {

LABEL_48:
    return;
  }
  uint64_t v65 = (void *)v64;
  id v60 = v60;
  id v66 = [v65 isAppAndWebsiteActivityEnabled];
  if (v66)
  {
    uint64_t v67 = v66;
    unsigned __int8 v68 = [v66 BOOLValue];

    char v69 = v68 ^ v86;
    LOBYTE(v35) = v86;
    if ((v69 & 1) == 0)
    {

      goto LABEL_48;
    }
  }
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  id v70 = v60;
  char v71 = v35;
  id v72 = v70;
  Class v73 = NSNumber.init(BOOLeanLiteral:)(v71 & 1).super.super.isa;
  [v65 setIsAppAndWebsiteActivityEnabled:v73];

  if (v84)
  {
    sub_1001D7700((uint64_t)v15);
    id v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      id v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Marking family settings as dirty to notify the family.", v76, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    [v65 setIsDirty:1];
  }
}

id sub_1001E6B14@<X0>(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  id result = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = result;
    id v8 = sub_10020C738(result, a2 & 1);
    id v9 = [v8 modificationDate];
    uint64_t v10 = sub_10009EE78(&qword_100342B30);
    __chkstk_darwin(v10 - 8);
    uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      uint64_t v13 = type metadata accessor for Date();
      v21[1] = v21;
      uint64_t v14 = *(void *)(v13 - 8);
      v21[3] = v21;
      uint64_t v15 = v14;
      __chkstk_darwin(v13);
      id v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      char v18 = v17;
      id v19 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v19(v12, v18, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v13) != 1)
      {

        return (id)((uint64_t (*)(uint64_t, char *, uint64_t))v19)(a3, v12, v13);
      }
    }
    else
    {
      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
    }
    static Date.distantPast.getter();

    return (id)sub_1000A4FD8((uint64_t)v12, &qword_100342B30);
  }
  return result;
}

void sub_1001E6D90(void *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    id v8 = sub_10020C738(v6, a2 & 1);
    id v9 = [v8 communicationPolicy];
    id v10 = [v7 communicationWhileLimitedPolicy];

    *a3 = v9;
    a3[1] = v10;
  }
}

void sub_1001E6E2C(void *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    id v8 = sub_10020C738(v6, a2 & 1);
    id v9 = [v8 contactManagementState];

    *a3 = v9;
  }
}

void sub_1001E6EB4(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v7 = sub_10020B2D4(a2);
  if (!v4)
  {
    id v8 = v7;
    int v9 = a3 & 1;
    id v10 = sub_10020C738(v7, a3 & 1);
    [v10 setContactManagementState:a4];
    if (v9)
    {
      id v11 = [v8 familySettings];
      if (v11)
      {
        uint64_t v12 = v11;
        [v11 setIsDirty:1];
      }
    }
  }
}

void sub_1001E6F74(void *a1@<X1>, char a2@<W2>, unsigned char *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    id v8 = sub_10020C738(v6, a2 & 1);
    *a3 = [v8 isCommunicationSafetySendingRestricted];
    a3[1] = [v8 isCommunicationSafetyReceivingRestricted];
    a3[2] = [v8 isCommunicationSafetyNotificationEnabled];
    unsigned __int8 v9 = [v8 isCommunicationSafetyAnalyticsEnabled];

    a3[3] = v9;
  }
}

void sub_1001E7038(void *a1@<X1>, char a2@<W2>, unsigned char *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    id v8 = sub_10020C738(v6, a2 & 1);
    *a3 = [v8 isCommunicationSafetySendingRestricted];
    unsigned __int8 v9 = [v8 isCommunicationSafetyReceivingRestricted];

    a3[1] = v9;
  }
}

void sub_1001E70D4(void *a1@<X1>, char a2@<W2>, unsigned __int8 *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    if (a2) {
      id v8 = sub_10020BA68();
    }
    else {
      id v8 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    unsigned __int8 v9 = v8;
    id v10 = sub_1001FADE4(STBlueprintTypeRestrictions, 0, 0, v7, v8);
    unsigned __int8 v11 = [v10 enabled];

    *a3 = v11;
  }
}

id sub_1001E71C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v20 - v5;
  id v7 = [objc_allocWithZone((Class)STDefaultUserPolicyApplicator) init];
  v22[0] = 0;
  id v8 = [v7 applyDefaultUserPoliciesWithError:v22];

  id v9 = v22[0];
  id v23 = v22[0];
  id result = v22[0];
  if (v8 == (id)2)
  {
    sub_1001D7700((uint64_t)v6);
    unsigned __int8 v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Successfully applied default user policies", v13, 2u);
      swift_slowDealloc();
    }

    id result = (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    id v9 = v23;
  }
  if (v9)
  {
    sub_1001D7700((uint64_t)v4);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      id v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      swift_beginAccess();
      id v18 = v23;
      if (v23)
      {
        uint64_t v20 = v16 + 12;
        uint64_t v21 = v17;
        v22[0] = v23;
        id v19 = v23;
        id v17 = v21;
      }
      else
      {
        v22[0] = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v17 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed applying user default policies with error: %@", v16, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    id result = (id)swift_beginAccess();
    if (v23) {
      return (id)swift_willThrow();
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001E753C()
{
  id v1 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v0) {
    char v2 = v4;
  }
  return v2 & 1;
}

void sub_1001E75C8(void *a1@<X1>, unsigned __int8 *a2@<X8>)
{
  id v4 = sub_10020B2D4(a1);
  if (!v2)
  {
    uint64_t v5 = v4;
    id v6 = [v4 familySettings];
    if (v6)
    {
      id v7 = v6;
      unsigned __int8 v8 = [v6 isManaged];
    }
    else
    {

      unsigned __int8 v8 = 0;
    }
    *a2 = v8;
  }
}

void sub_1001E7654(uint64_t a1, void *a2, char a3)
{
  id v6 = sub_10020B2D4(a2);
  if (!v3)
  {
    id v7 = v6;
    id v8 = [v6 familySettings];
    if (v8)
    {
      id v9 = v8;
      [v8 setIsManaged:a3 & 1];
      [v9 setIsDirty:1];
    }
    else
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *id v10 = a2;
      swift_storeEnumTagMultiPayload();
      id v11 = a2;
      swift_willThrow();
    }
  }
}

void sub_1001E7734(uint64_t a1, void *a2)
{
  id v3 = sub_10020B2D4(a2);
  if (!v2)
  {
    id v4 = v3;
    id v5 = [objc_allocWithZone((Class)STPINController) initWithUser:v3];
    NSString v6 = String._bridgeToObjectiveC()();
    id v10 = 0;
    unsigned __int8 v7 = [v5 authenticateWithPIN:v6 error:&v10];

    if (v7)
    {
      id v8 = v10;
    }
    else
    {
      id v9 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_1001E7848(void *a1@<X1>, char a2@<W2>, uint64_t *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    unsigned __int8 v7 = v6;
    id v8 = sub_10020C738(v6, a2 & 1);
    id v9 = [v8 passcode];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
    }
    else
    {

      uint64_t v11 = 0;
      uint64_t v13 = 0;
    }
    *a3 = v11;
    a3[1] = v13;
  }
}

id sub_1001E7908@<X0>(void *a1@<X1>, Class *a2@<X8>)
{
  id result = sub_10020B2D4(a1);
  if (!v2)
  {
    id v5 = result;
    sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
    Class isa = NSNumber.init(integerLiteral:)((Swift::Int)[v5 passcodeEntryAttemptCount]).super.super.isa;
    uint64_t v7 = sub_10009EE78(&qword_100342B30);
    id v19 = &v17;
    uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
    __chkstk_darwin(v7 - 8);
    id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v10 = [v5 passcodeEntryTimeoutEndDate];
    uint64_t v20 = &v17;
    uint64_t v11 = __chkstk_darwin(v10);
    Class v21 = isa;
    if (v11)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 0, 1, v12);
    }
    else
    {
      uint64_t v12 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
    }
    sub_1000FDE9C((uint64_t)v9, (uint64_t)v9, &qword_100342B30);
    uint64_t v13 = sub_10009EE78(&qword_1003435B8);
    uint64_t v20 = &v17;
    id v18 = (char *)a2 + *(int *)(v13 + 48);
    Class v14 = v21;
    *a2 = v21;
    __chkstk_darwin(v13);
    sub_1000D9F9C((uint64_t)v9, (uint64_t)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100342B30);
    type metadata accessor for Date();
    uint64_t v15 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v12) == 1)
    {
      uint64_t v16 = v14;
      Date.init()();

      sub_1000A4FD8((uint64_t)v9, &qword_100342B30);
      return (id)sub_1000A4FD8((uint64_t)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100342B30);
    }
    else
    {
      sub_1000A4FD8((uint64_t)v9, &qword_100342B30);

      return (id)(*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
    }
  }
  return result;
}

void sub_1001E7C0C(void *a1@<X1>, char a2@<W2>, unsigned __int8 *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    uint64_t v7 = v6;
    id v8 = sub_10020C738(v6, a2 & 1);
    unsigned __int8 v9 = [v8 needsToSetPasscode];

    *a3 = v9;
  }
}

void sub_1001E7C94(uint64_t a1, void *a2, char a3)
{
  id v5 = sub_10020B2D4(a2);
  if (!v3)
  {
    id v6 = v5;
    int v7 = a3 & 1;
    id v8 = sub_10020C738(v5, a3 & 1);
    [v8 setPasscode:0];
    if (v7)
    {
      id v9 = [v6 familySettings];
      if (v9)
      {
        id v10 = v9;
        [v9 setIsDirty:1];
      }
    }
  }
}

void sub_1001E7D48(uint64_t a1, void *a2, char a3, uint64_t a4, NSString a5)
{
  id v9 = sub_10020B2D4(a2);
  if (!v5)
  {
    id v10 = v9;
    int v11 = a3 & 1;
    id v12 = sub_10020C738(v9, a3 & 1);
    id v13 = [v12 passcode];
    if (v13)
    {
      Class v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v17 = v16;

      if (!a5)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        [v12 setPasscode:a5];

        if (v11)
        {
          id v20 = [v10 familySettings];
          if (v20)
          {
            Class v21 = v20;
            [v20 setIsDirty:1];
          }
        }
        goto LABEL_16;
      }
      if (v15 == a4 && v17 == a5)
      {

        swift_bridgeObjectRelease();
        return;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_16;
      }
    }
    else if (!a5)
    {
LABEL_16:

      return;
    }
    a5 = String._bridgeToObjectiveC()();
    goto LABEL_13;
  }
}

void sub_1001E7EC0(unsigned __int8 *a1@<X8>)
{
  uint64_t v2 = self;
  id v3 = sub_1001D7640();
  id v8 = 0;
  id v4 = [v2 fetchScreenTimeSettingsInContext:v3 error:&v8];

  if (v4)
  {
    id v5 = v8;
    unsigned __int8 v6 = [v4 cloudSyncEnabled];

    *a1 = v6;
  }
  else
  {
    id v7 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1001E7FC0(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned __int8 v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = self;
  id v8 = sub_1001D7640();
  id v15 = 0;
  id v9 = [v7 fetchScreenTimeSettingsInContext:v8 error:&v15];

  if (v9)
  {
    id v10 = v15;
    sub_1001D7700((uint64_t)v6);
    int v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v13 = 67109120;
      LODWORD(v15) = a2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Updating screenTime cloudSyncEnabled to: %{BOOL}d", v13, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    [v9 setCloudSyncEnabled:a2 & 1];
  }
  else
  {
    id v14 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1001E8200(uint8_t *a1@<X0>, char *a2@<X1>, uint8_t *a3@<X8>)
{
  v230 = a1;
  v231 = a2;
  v227 = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v229 = *(void (***)(char *, uint64_t))(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)&v197 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  id v10 = (char *)&v197 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v197 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v197 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  char v19 = (char *)&v197 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v197 - v21;
  __chkstk_darwin(v20);
  char v24 = (char *)&v197 - v23;
  id v25 = sub_10020BA68();
  if (v3) {
    return;
  }
  v213 = v19;
  v212 = v16;
  v228 = v10;
  v209 = v24;
  v207 = v22;
  v206 = v13;
  v205 = v7;
  *(void *)&long long v217 = v4;
  uint64_t v214 = 0;
  id v26 = v25;
  id v224 = self;
  id v27 = [v224 fetchRequest];
  uint64_t v223 = sub_10009EE78(&qword_1003414D8);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100286550;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v29 = sub_1000A5124();
  *(void *)(v28 + 64) = v29;
  strcpy((char *)(v28 + 32), "organization");
  *(unsigned char *)(v28 + 45) = 0;
  *(_WORD *)(v28 + 46) = -5120;
  uint64_t v221 = sub_1000A0760(0, &qword_100343A48);
  *(void *)(v28 + 96) = v221;
  uint64_t v220 = sub_1000AA614(&qword_100345420, &qword_100343A48);
  *(void *)(v28 + 104) = v220;
  *(void *)(v28 + 72) = v26;
  uint64_t v30 = sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v28 + 136) = &type metadata for String;
  *(void *)(v28 + 144) = v29;
  unint64_t v222 = v29;
  strcpy((char *)(v28 + 112), "isTombstoned");
  *(unsigned char *)(v28 + 125) = 0;
  *(_WORD *)(v28 + 126) = -5120;
  id v31 = v26;
  uint64_t v219 = v30;
  id v32 = NSPredicate.init(format:_:)();
  [v27 setPredicate:v32];

  v235[0] = 0;
  id v33 = [v27 execute:v235];
  id v34 = v235[0];
  if (!v33)
  {
    id v52 = v235[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  int v35 = v33;
  id v225 = v27;
  id v226 = v31;
  uint64_t v218 = sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
  uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v37 = v34;

  if ((unint64_t)v36 >> 62) {
    goto LABEL_144;
  }
  uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v39 = v217;
    uint64_t v40 = v231;
    if (v38)
    {
      v235[0] = _swiftEmptyArrayStorage;
      sub_1002080AC(0, v38 & ~(v38 >> 63), 0);
      if (v38 < 0) {
        goto LABEL_146;
      }
      uint64_t v41 = 0;
      id v42 = v235[0];
      do
      {
        if ((v36 & 0xC000000000000001) != 0) {
          id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v43 = *(id *)(v36 + 8 * v41 + 32);
        }
        id v44 = v43;
        id v45 = [v43 identifier];
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;

        v235[0] = v42;
        unint64_t v50 = v42[2];
        unint64_t v49 = v42[3];
        if (v50 >= v49 >> 1)
        {
          sub_1002080AC(v49 > 1, v50 + 1, 1);
          id v42 = v235[0];
        }
        ++v41;
        v42[2] = v50 + 1;
        unint64_t v51 = &v42[2 * v50];
        v51[4] = v46;
        v51[5] = v48;
      }
      while (v38 != v41);
      swift_bridgeObjectRelease();
      uint64_t v39 = v217;
      uint64_t v40 = v231;
    }
    else
    {
      swift_bridgeObjectRelease();
      id v42 = _swiftEmptyArrayStorage;
    }
    uint64_t v53 = sub_10020A230((uint64_t)v42);
    swift_bridgeObjectRelease();
    uint64_t v234 = v53;
    uint64_t v36 = (uint64_t)v227;
    uint64_t v215 = *((void *)v40 + 2);
    if (v215) {
      break;
    }
    uint64_t v211 = 1;
    id v56 = v225;
LABEL_60:
    uint64_t v114 = 0;
    uint64_t v115 = *(void *)(v53 + 56);
    v212 = (char *)(v53 + 56);
    uint64_t v116 = 1 << *(unsigned char *)(v53 + 32);
    uint64_t v117 = -1;
    if (v116 < 64) {
      uint64_t v117 = ~(-1 << v116);
    }
    unint64_t v118 = v117 & v115;
    v213 = (char *)((unint64_t)(v116 + 63) >> 6);
    v231 = (char *)STBlueprintTypeUsageLimitOverride;
    long long v217 = xmmword_100286360;
    v216 = (char *)0x8000000100295FF0;
    uint64_t v215 = v53;
    while (1)
    {
      if (v118)
      {
        v228 = (char *)((v118 - 1) & v118);
        v229 = v114;
        unint64_t v119 = __clz(__rbit64(v118)) | ((void)v114 << 6);
      }
      else
      {
        BOOL v120 = __OFADD__(v114, 1);
        uint64_t v121 = (uint64_t)v114 + 1;
        if (v120) {
          goto LABEL_142;
        }
        if (v121 >= (uint64_t)v213)
        {
LABEL_120:

          swift_release();
          *(unsigned char *)uint64_t v36 = v211 & 1;
          return;
        }
        unint64_t v122 = *(void *)&v212[8 * v121];
        if (!v122)
        {
          uint64_t v123 = v121 + 1;
          if (v121 + 1 >= (uint64_t)v213) {
            goto LABEL_120;
          }
          unint64_t v122 = *(void *)&v212[8 * v123];
          if (!v122)
          {
            uint64_t v123 = v121 + 2;
            if (v121 + 2 >= (uint64_t)v213) {
              goto LABEL_120;
            }
            unint64_t v122 = *(void *)&v212[8 * v123];
            if (!v122)
            {
              uint64_t v123 = v121 + 3;
              if (v121 + 3 >= (uint64_t)v213) {
                goto LABEL_120;
              }
              unint64_t v122 = *(void *)&v212[8 * v123];
              if (!v122)
              {
                while (1)
                {
                  uint64_t v121 = v123 + 1;
                  if (__OFADD__(v123, 1)) {
                    break;
                  }
                  if (v121 >= (uint64_t)v213) {
                    goto LABEL_120;
                  }
                  unint64_t v122 = *(void *)&v212[8 * v121];
                  ++v123;
                  if (v122) {
                    goto LABEL_76;
                  }
                }
                __break(1u);
LABEL_146:
                __break(1u);
              }
            }
          }
          uint64_t v121 = v123;
        }
LABEL_76:
        v228 = (char *)((v122 - 1) & v122);
        v229 = (void (**)(char *, uint64_t))v121;
        unint64_t v119 = __clz(__rbit64(v122)) + (v121 << 6);
      }
      v124 = (uint64_t *)(*(void *)(v53 + 48) + 16 * v119);
      uint64_t v126 = *v124;
      uint64_t v125 = v124[1];
      swift_bridgeObjectRetain();
      id v127 = [v224 fetchRequest];
      uint64_t v128 = swift_allocObject();
      *(_OWORD *)(v128 + 16) = v217;
      unint64_t v129 = v222;
      *(void *)(v128 + 56) = &type metadata for String;
      *(void *)(v128 + 64) = v129;
      strcpy((char *)(v128 + 32), "organization");
      *(unsigned char *)(v128 + 45) = 0;
      *(_WORD *)(v128 + 46) = -5120;
      uint64_t v130 = v220;
      *(void *)(v128 + 96) = v221;
      *(void *)(v128 + 104) = v130;
      id v131 = v226;
      *(void *)(v128 + 72) = v226;
      *(void *)(v128 + 136) = &type metadata for String;
      *(void *)(v128 + 144) = v129;
      *(void *)(v128 + 112) = 0x696669746E656469;
      *(void *)(v128 + 120) = 0xEA00000000007265;
      *(void *)(v128 + 176) = &type metadata for String;
      *(void *)(v128 + 184) = v129;
      *(void *)(v128 + 152) = v126;
      *(void *)(v128 + 160) = v125;
      *(void *)(v128 + 216) = &type metadata for String;
      *(void *)(v128 + 224) = v129;
      strcpy((char *)(v128 + 192), "isTombstoned");
      *(unsigned char *)(v128 + 205) = 0;
      *(_WORD *)(v128 + 206) = -5120;
      id v132 = v131;
      v133 = NSPredicate.init(format:_:)();
      [v127 setPredicate:v133];

      v235[0] = 0;
      v230 = (uint8_t *)v127;
      id v134 = [v127 execute:v235];
      id v135 = v235[0];
      if (!v134)
      {
        id v159 = v235[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_release();

        return;
      }
      v136 = v134;
      unint64_t v137 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v138 = v135;

      if (v137 >> 62) {
        break;
      }
      uint64_t v36 = *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v36) {
        goto LABEL_80;
      }
LABEL_63:

      swift_bridgeObjectRelease();
      id v56 = v225;
      uint64_t v36 = (uint64_t)v227;
      unint64_t v118 = (unint64_t)v228;
      uint64_t v53 = v215;
      uint64_t v114 = v229;
    }
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v36) {
      goto LABEL_63;
    }
LABEL_80:
    if (v36 >= 1)
    {
      uint64_t v139 = 0;
      while (1)
      {
        id v140 = (v137 & 0xC000000000000001) != 0
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
             : *(id *)(v137 + 8 * v139 + 32);
        v141 = v140;
        id v142 = [v140 type];
        if (!v142) {
          break;
        }
        v143 = v142;
        uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v146 = v145;

        uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (!v146) {
          goto LABEL_97;
        }
        if (v144 == v147 && v146 == v148) {
          goto LABEL_102;
        }
        char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v150) {
          goto LABEL_103;
        }
LABEL_98:
        id v151 = [v141 type];
        if (v151)
        {
          v152 = v151;
          uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v155 = v154;

          uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          if (v155)
          {
            if (v153 == v156 && v155 == v157)
            {
LABEL_102:
              swift_bridgeObjectRelease_n();
              goto LABEL_103;
            }
            char v158 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v158) {
LABEL_103:
            }
              [v141 tombstone];

            goto LABEL_84;
          }
        }
        else
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }

        swift_bridgeObjectRelease();
LABEL_84:
        if (v36 == ++v139) {
          goto LABEL_63;
        }
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_97:
      swift_bridgeObjectRelease();
      goto LABEL_98;
    }
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  ++v229;
  v203 = (uint64_t *)&v233;
  swift_bridgeObjectRetain();
  uint64_t v54 = 0;
  uint64_t v211 = 1;
  v216 = (char *)&type metadata for Any + 8;
  *(void *)&long long v55 = 136315138;
  long long v204 = v55;
  *(void *)&long long v55 = 136315394;
  long long v202 = v55;
  *(void *)&long long v55 = 136315650;
  long long v201 = v55;
  unint64_t v200 = 0x8000000100295FB0;
  while (1)
  {
    uint64_t v57 = *(void *)&v40[8 * v54 + 32];
    uint64_t v58 = *(void *)(v57 + 16);
    swift_bridgeObjectRetain();
    if (!v58
      || (uint64_t v59 = sub_10010A024(0x7372657375, 0xE500000000000000), (v60 & 1) == 0)
      || (sub_1000A4F78(*(void *)(v57 + 56) + 32 * v59, (uint64_t)v235),
          sub_10009EE78(&qword_100343A78),
          (swift_dynamicCast() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v160 = (uint64_t)v209;
      sub_1001D7700((uint64_t)v209);
      swift_bridgeObjectRetain();
      v161 = Logger.logObject.getter();
      os_log_type_t v162 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v161, v162))
      {
        v163 = (uint8_t *)swift_slowAlloc();
        v235[0] = (id)swift_slowAlloc();
        *(_DWORD *)v163 = v204;
        v231 = (char *)(v163 + 4);
        swift_bridgeObjectRetain();
        uint64_t v164 = Dictionary.description.getter();
        unint64_t v166 = v165;
        swift_bridgeObjectRelease();
        unint64_t v232 = sub_1000A2E70(v164, v166, (uint64_t *)v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v161, v162, "Blueprint dictionary from family does not contain a 'users' key. %s", v163, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v229)(v209, v217);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*v229)((char *)v160, v39);
      }
      id v174 = v225;
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      void *v175 = 0x7372657375;
      v175[1] = 0xE500000000000000;
      v175[2] = 0x727065756C425453;
      v175[3] = 0xEB00000000746E69;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_123;
    }
    unint64_t v61 = v232;
    unint64_t v62 = v232 >> 62;
    if (v232 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v105 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v64 = (uint64_t)v228;
      if (!v105)
      {
LABEL_56:
        swift_bridgeObjectRelease_n();
        sub_1001D7700(v64);
        swift_bridgeObjectRetain();
        id v106 = Logger.logObject.getter();
        os_log_type_t v107 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v106, v107))
        {
          uint64_t v108 = swift_slowAlloc();
          v235[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v108 = v204;
          swift_bridgeObjectRetain();
          id v210 = (char *)&type metadata for Any + 8;
          uint64_t v109 = v54;
          uint64_t v110 = Dictionary.description.getter();
          unint64_t v112 = v111;
          swift_bridgeObjectRelease();
          uint64_t v113 = v110;
          uint64_t v54 = v109;
          *(void *)(v108 + 4) = sub_1000A2E70(v113, v112, (uint64_t *)v235);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v106, v107, "Blueprint dictionary 'users' array is empty. %s, skip and continue processing next blueprint...", (uint8_t *)v108, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v229)(v228, v39);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*v229)((char *)v64, v39);
        }
        uint64_t v36 = (uint64_t)v227;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v63 = *(void *)((v232 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v64 = (uint64_t)v228;
      if (!v63) {
        goto LABEL_56;
      }
    }
    if ((v61 & 0xC000000000000001) != 0)
    {
      id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_143;
      }
      id v65 = *(id *)(v61 + 32);
    }
    id v66 = v65;
    swift_bridgeObjectRelease();
    if (v62)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v67 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v67 != 1)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v185 = (uint64_t)v205;
      sub_1001D7700((uint64_t)v205);
      swift_bridgeObjectRetain();
      v186 = Logger.logObject.getter();
      os_log_type_t v187 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v186, v187))
      {
        v188 = (uint8_t *)swift_slowAlloc();
        v189 = (char *)swift_slowAlloc();
        v230 = v188;
        v231 = v189;
        v235[0] = v189;
        *(_DWORD *)v188 = v204;
        v227 = v188 + 4;
        swift_bridgeObjectRetain();
        v228 = (char *)&type metadata for Any + 8;
        uint64_t v190 = Dictionary.description.getter();
        unint64_t v192 = v191;
        swift_bridgeObjectRelease();
        unint64_t v232 = sub_1000A2E70(v190, v192, (uint64_t *)v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v186, v187, "Blueprint dictionary 'users' array contains more than one user. %s", v230, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v229)((char *)v185, v217);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*v229)((char *)v185, v39);
      }
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      v195 = v194;
      if (v62)
      {
        swift_bridgeObjectRetain();
        uint64_t v196 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v196 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t *v195 = v196;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

LABEL_124:
      return;
    }
    swift_bridgeObjectRelease();
    if (!*(void *)(v57 + 16)
      || (uint64_t v68 = sub_10010A024(0x696669746E656469, 0xEA00000000007265), (v69 & 1) == 0)
      || (sub_1000A4F78(*(void *)(v57 + 56) + 32 * v68, (uint64_t)v235), (swift_dynamicCast() & 1) == 0))
    {
      id v210 = v66;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v167 = (uint64_t)v207;
      sub_1001D7700((uint64_t)v207);
      swift_bridgeObjectRetain();
      v168 = Logger.logObject.getter();
      os_log_type_t v169 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v168, v169))
      {
        v170 = (uint8_t *)swift_slowAlloc();
        v235[0] = (id)swift_slowAlloc();
        *(_DWORD *)v170 = v204;
        v230 = v170 + 4;
        swift_bridgeObjectRetain();
        v231 = (char *)&type metadata for Any + 8;
        uint64_t v171 = Dictionary.description.getter();
        unint64_t v173 = v172;
        swift_bridgeObjectRelease();
        unint64_t v232 = sub_1000A2E70(v171, v173, (uint64_t *)v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v168, v169, "Blueprint dictionary from family does not contain an identifier key. %s", v170, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v229)((char *)v167, v217);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*v229)((char *)v167, v39);
      }
      id v174 = v225;
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

LABEL_123:
      goto LABEL_124;
    }
    char v71 = (void *)v232;
    id v70 = v233;
    uint64_t v72 = v214;
    id v73 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    uint64_t v214 = v72;
    if (v72)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_140;
    }
    id v74 = v73;
    self;
    uint64_t v75 = swift_dynamicCastObjCClass();

    unint64_t v76 = 0x796C696D6166;
    if (v75)
    {
      unint64_t v77 = 0xE600000000000000;
    }
    else
    {
      unint64_t v76 = 0x6C616E6F73726570;
      unint64_t v77 = 0xE800000000000000;
    }
    v235[0] = v71;
    v235[1] = v70;
    unint64_t v232 = v76;
    v233 = (void *)v77;
    sub_1000DA39C();
    char v78 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if ((v78 & 1) == 0) {
      break;
    }
    uint64_t v208 = v54;
    uint64_t v79 = (uint64_t)v213;
    sub_1001D7700((uint64_t)v213);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = swift_slowAlloc();
      v199 = (void *)swift_slowAlloc();
      v235[0] = v199;
      *(_DWORD *)uint64_t v82 = v202;
      id v210 = v66;
      swift_bridgeObjectRetain();
      unint64_t v232 = sub_1000A2E70((uint64_t)v71, (unint64_t)v70, (uint64_t *)v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v82 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v83 = Dictionary.description.getter();
      unint64_t v85 = v84;
      swift_bridgeObjectRelease();
      unint64_t v232 = sub_1000A2E70(v83, v85, (uint64_t *)v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      int v86 = v229;
      swift_bridgeObjectRelease();
      uint64_t v39 = v217;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Blueprint identifier %s shouldn't exist in family org. %s, skip and continue processing next blueprint...", (uint8_t *)v82, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*v86)(v213, v39);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*v229)((char *)v79, v39);
    }
    uint64_t v36 = (uint64_t)v227;
    uint64_t v54 = v208;
LABEL_21:
    ++v54;
    id v56 = v225;
    uint64_t v40 = v231;
    if (v215 == v54)
    {
      swift_bridgeObjectRelease();
      uint64_t v53 = v234;
      goto LABEL_60;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v87 = v214;
  sub_1001DE3B0(v66);
  uint64_t v89 = v87;
  if (v87)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v90 = v88;
  id v210 = v66;
  uint64_t v91 = (uint64_t)v212;
  sub_1001D7700((uint64_t)v212);
  swift_bridgeObjectRetain_n();
  id v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = swift_slowAlloc();
    v198 = (void *)swift_slowAlloc();
    v235[0] = v198;
    *(_DWORD *)uint64_t v94 = v201;
    uint64_t v214 = 0;
    unint64_t v232 = sub_1000A2E70(0xD00000000000001ALL, v200, (uint64_t *)v235);
    uint64_t v208 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v94 + 12) = 2048;
    unint64_t v232 = 1739;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v94 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v95 = Dictionary.description.getter();
    v199 = v90;
    uint64_t v96 = v95;
    unint64_t v98 = v97;
    swift_bridgeObjectRelease();
    unint64_t v232 = sub_1000A2E70(v96, v98, (uint64_t *)v235);
    uint64_t v54 = v208;
    uint64_t v89 = v214;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v99 = v229;
    uint64_t v39 = v217;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "%s %ld Processing updated blueprint dictionary %s for family organization", (uint8_t *)v94, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int64_t v100 = *v99;
    (*v99)(v212, v39);
    uint64_t v90 = v199;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    int64_t v100 = *v229;
    (*v229)((char *)v91, v39);
  }
  uint64_t v36 = (uint64_t)v227;
  int v101 = sub_1001EA08C(v90, v57);
  uint64_t v214 = v89;
  if (!v89)
  {
    if (!*(void *)(v57 + 16)
      || (int v102 = v101, v103 = sub_10010A024(0x696669746E656469, 0xEA00000000007265), (v104 & 1) == 0)
      || (sub_1000A4F78(*(void *)(v57 + 56) + 32 * v103, (uint64_t)v235), (swift_dynamicCast() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v176 = (uint64_t)v206;
      sub_1001D7700((uint64_t)v206);
      swift_bridgeObjectRetain();
      v177 = Logger.logObject.getter();
      os_log_type_t v178 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v177, v178))
      {
        v199 = v90;
        v179 = (uint8_t *)swift_slowAlloc();
        v231 = (char *)swift_slowAlloc();
        v235[0] = v231;
        *(_DWORD *)v179 = v204;
        v228 = (char *)(v179 + 4);
        swift_bridgeObjectRetain();
        v230 = (uint8_t *)&type metadata for Any + 8;
        uint64_t v180 = Dictionary.description.getter();
        unint64_t v182 = v181;
        swift_bridgeObjectRelease();
        unint64_t v232 = sub_1000A2E70(v180, v182, (uint64_t *)v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v90 = v199;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v177, v178, "Blueprint dictionary from family does not contain an identifier key. %s", v179, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v183 = v176;
        uint64_t v184 = v217;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v183 = v176;
        uint64_t v184 = v39;
      }
      v100((char *)v183, v184);
      id v193 = v225;
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      return;
    }
    uint64_t v211 = v102 & v211;
    swift_bridgeObjectRelease();
    sub_1000CDC74(v232, (uint64_t)v233);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_140:
  swift_bridgeObjectRelease();
}

uint64_t sub_1001EA08C(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v112 = (char *)v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v114 = (char *)v104 - v8;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v119 = v9;
  uint64_t v120 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v111 = (char *)v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v113 = (char *)v104 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v104 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v104 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (uint64_t)v104 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v115 = (char *)v104 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)v104 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)v104 - v29;
  if (!*(void *)(a2 + 16) || (v117 = v2, uint64_t v31 = sub_10010A024(1701869940, 0xE400000000000000), (v32 & 1) == 0))
  {
LABEL_13:
    sub_1001D7700((uint64_t)v17);
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v118 = v5;
      id v42 = (uint8_t *)swift_slowAlloc();
      v123[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v42 = 136315138;
      uint64_t v116 = v42 + 4;
      swift_bridgeObjectRetain();
      uint64_t v117 = (char *)&type metadata for Any + 8;
      uint64_t v43 = Dictionary.description.getter();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_1000A2E70(v43, v45, (uint64_t *)v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Blueprint dictionary from family does not contain a 'type' key. %s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v120 + 8))(v17, v119);
    LOBYTE(v23) = 116;
    sub_1000AA560();
    swift_allocError();
    *(void *)uint64_t v46 = 1701869940;
    *(void *)(v46 + 8) = 0xE400000000000000;
    unint64_t v47 = 0x727065756C425453;
    unint64_t v48 = 0xEB00000000746E69;
    goto LABEL_17;
  }
  uint64_t v118 = v5;
  sub_1000A4F78(*(void *)(a2 + 56) + 32 * v31, (uint64_t)v123);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v5 = v118;
    goto LABEL_13;
  }
  uint64_t v33 = *(void *)(a2 + 16);
  uint64_t v110 = a2;
  if (!v33
    || (uint64_t v108 = v121, v109 = (char *)v122,
                     uint64_t v34 = sub_10010A024(0xD000000000000012, 0x8000000100293660),
                     (v35 & 1) == 0)
    || (sub_1000A4F78(*(void *)(a2 + 56) + 32 * v34, (uint64_t)v123), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    sub_1001D7700((uint64_t)v20);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)v23, v50))
    {
      unint64_t v51 = (uint8_t *)swift_slowAlloc();
      v123[0] = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v51 = 136315138;
      uint64_t v116 = v51 + 4;
      swift_bridgeObjectRetain();
      uint64_t v117 = (char *)&type metadata for Any + 8;
      uint64_t v52 = Dictionary.description.getter();
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_1000A2E70(v52, v54, (uint64_t *)v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v23, v50, "Blueprint dictionary from family does not contain a 'organization' key. We will assume the Family organization for: %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v120 + 8))(v20, v119);
    sub_1000AA560();
    swift_allocError();
    strcpy((char *)v46, "organization");
    *(unsigned char *)(v46 + 13) = 0;
    *(_WORD *)(v46 + 14) = -5120;
    unint64_t v47 = 0xD000000000000018;
    unint64_t v48 = 0x8000000100295F00;
LABEL_17:
    *(void *)(v46 + 16) = v47;
    *(void *)(v46 + 24) = v48;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return v23 & 1;
  }
  uint64_t v36 = v121;
  unint64_t v37 = v122;
  if ((v121 != 0xD000000000000014 || v122 != 0x8000000100295EC0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1001D7700((uint64_t)v30);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    int v69 = v68;
    if (os_log_type_enabled((os_log_t)v23, v68))
    {
      uint64_t v70 = swift_slowAlloc();
      LODWORD(v117) = v69;
      uint64_t v71 = v70;
      uint64_t v116 = (void *)swift_slowAlloc();
      v123[0] = v116;
      *(_DWORD *)uint64_t v71 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v121 = sub_1000A2E70(v36, v37, (uint64_t *)v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 12) = 2080;
      uint64_t v114 = (char *)(v71 + 14);
      swift_bridgeObjectRetain();
      uint64_t v115 = (char *)&type metadata for Any + 8;
      uint64_t v72 = Dictionary.description.getter();
      uint64_t v73 = v36;
      unint64_t v75 = v74;
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_1000A2E70(v72, v75, (uint64_t *)v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v36 = v73;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v23, (os_log_type_t)v117, "Blueprint dictionary from family is for an unsupported organization = %{public}s. %s", (uint8_t *)v71, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v120 + 8))(v30, v119);
    sub_1000AA560();
    swift_allocError();
    *uint64_t v82 = v36;
    v82[1] = v37;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = v116;
  uint64_t v39 = (char *)sub_10020B2D4(a1);
  if (v38)
  {
    swift_bridgeObjectRelease();
    return v23 & 1;
  }
  long long v55 = v39;
  uint64_t v56 = v110;
  if (!*(void *)(v110 + 16)
    || (uint64_t v57 = sub_10010A024(0x72756769666E6F63, 0xEE00736E6F697461), (v58 & 1) == 0)
    || (sub_1000A4F78(*(void *)(v56 + 56) + 32 * v57, (uint64_t)v123),
        sub_10009EE78((uint64_t *)&unk_100342AF0),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    sub_1001D7700(v23);
    swift_bridgeObjectRetain_n();
    unint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v117 = v55;
      char v78 = (uint8_t *)swift_slowAlloc();
      v123[0] = (id)swift_slowAlloc();
      *(_DWORD *)char v78 = 136315138;
      uint64_t v115 = (char *)(v78 + 4);
      swift_bridgeObjectRetain();
      uint64_t v116 = (void *)((char *)&type metadata for Any + 8);
      uint64_t v79 = Dictionary.description.getter();
      unint64_t v81 = v80;
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_1000A2E70(v79, v81, (uint64_t *)v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      long long v55 = v117;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Blueprint dictionary from family does not contain a 'configurations' key. %s", v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v23, v119);
    goto LABEL_38;
  }
  uint64_t v59 = (void *)v121;
  if (!*(void *)(v121 + 16))
  {
    sub_1001D7700((uint64_t)v28);
    swift_bridgeObjectRetain_n();
    char v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    int v62 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v116 = v59;
      uint64_t v63 = swift_slowAlloc();
      int v107 = v62;
      uint64_t v64 = (uint8_t *)v63;
      id v106 = (void *)swift_slowAlloc();
      v123[0] = v106;
      uint64_t v105 = v64;
      *(_DWORD *)uint64_t v64 = 136315138;
      v104[0] = v64 + 4;
      swift_bridgeObjectRetain();
      v104[1] = (char *)&type metadata for Any + 8;
      uint64_t v65 = Dictionary.description.getter();
      unint64_t v67 = v66;
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_1000A2E70(v65, v67, (uint64_t *)v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v59 = v116;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v107, "Blueprint dictionary from family does not contain any configurations. No changes will be made to the local configurations. %s", v105, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v120 + 8))(v28, v119);
  }
  uint64_t v83 = v110;
  if (!*(void *)(v110 + 16)
    || (uint64_t v84 = sub_10010A024(0x696669746E656469, 0xEA00000000007265), (v85 & 1) == 0)
    || (sub_1000A4F78(*(void *)(v83 + 56) + 32 * v84, (uint64_t)v123), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v90 = v115;
    sub_1001D7700((uint64_t)v115);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v23, v91))
    {
      id v92 = (uint8_t *)swift_slowAlloc();
      v123[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v92 = 136315138;
      uint64_t v116 = v92 + 4;
      swift_bridgeObjectRetain();
      uint64_t v117 = (char *)&type metadata for Any + 8;
      uint64_t v93 = Dictionary.description.getter();
      unint64_t v95 = v94;
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_1000A2E70(v93, v95, (uint64_t *)v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v23, v91, "Blueprint dictionary from family does not contain an identifier key. %s", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v120 + 8))(v115, v119);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v90, v119);
    }
LABEL_38:
    sub_1000AA560();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    return v23 & 1;
  }
  int v86 = v55;
  uint64_t v87 = v121;
  uint64_t v88 = v122;
  uint64_t v89 = (char *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v96 = (char *)sub_10020BA68();
  uint64_t v116 = v59;
  swift_bridgeObjectRetain();
  uint64_t v108 = v87;
  uint64_t v109 = v89;
  uint64_t v115 = v96;
  uint64_t v23 = (uint64_t)sub_1001FADE4(v89, v87, v88, v86, v96);
  swift_bridgeObjectRelease_n();
  v123[0] = (id)v23;
  unint64_t v97 = (char *)(id)v23;
  sub_10023BA40(v110);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LODWORD(v23) = [v97 updateWithDictionaryRepresentation:isa];

  if (v23)
  {
    uint64_t v99 = v116[2];
    if (v99)
    {
      for (uint64_t i = 0; i != v99; ++i)
      {
        uint64_t v101 = v116[i + 4];
        swift_bridgeObjectRetain();
        id v102 = sub_1001D7640();
        sub_1001EB674(v123, v101, (uint64_t)v102);
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v103 = v86;
    int v86 = v115;
    uint64_t v115 = v97;
    unint64_t v97 = v109;
  }
  else
  {
    uint64_t v103 = v109;
  }

  swift_bridgeObjectRelease();
  return v23 & 1;
}

void sub_1001EB674(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v102 = (uint64_t)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v94 = (uint64_t)&v91 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v93 = (uint64_t)&v91 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v91 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v91 - v20;
  uint64_t v101 = v3;
  sub_1001D7700((uint64_t)&v91 - v20);
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  LODWORD(v100) = v23;
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v99 = v10;
  unint64_t v95 = v19;
  uint64_t v96 = a3;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v92 = swift_slowAlloc();
    v104[0] = v92;
    *(_DWORD *)uint64_t v25 = 136315650;
    unint64_t v98 = a1;
    v103[0] = (id)sub_1000A2E70(0xD000000000000021, 0x8000000100295F20, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2048;
    v103[0] = (id)1836;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 22) = 2080;
    uint64_t v91 = v25 + 24;
    swift_bridgeObjectRetain();
    uint64_t v97 = v4;
    uint64_t v26 = v9;
    uint64_t v27 = Dictionary.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v30 = v27;
    uint64_t v9 = v26;
    v103[0] = (id)sub_1000A2E70(v30, v29, v104);
    a1 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v10 = v99;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v100, "%s %ld Processing incoming configurations %s", (uint8_t *)v25, 0x20u);
    uint64_t v5 = v97;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  int64_t v100 = *(void (**)(char *, uint64_t))(v10 + 8);
  v100(v21, v9);
  if (!*(void *)(a2 + 16)
    || (uint64_t v31 = sub_10010A024(0x696669746E656469, 0xEA00000000007265), (v32 & 1) == 0)
    || (sub_1000A4F78(*(void *)(a2 + 56) + 32 * v31, (uint64_t)v104), (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v50 = v102;
    sub_1001D7700(v102);
    swift_bridgeObjectRetain_n();
    unint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v53 = 136315138;
      unint64_t v98 = (id *)(v53 + 4);
      swift_bridgeObjectRetain();
      uint64_t v54 = Dictionary.description.getter();
      uint64_t v101 = v9;
      unint64_t v56 = v55;
      swift_bridgeObjectRelease();
      v103[0] = (id)sub_1000A2E70(v54, v56, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Configuration dictionary from family does not contain a 'identifier' key. %s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v58 = v101;
      uint64_t v57 = v102;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v57 = v50;
      uint64_t v58 = v9;
    }
    v100((char *)v57, v58);
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    *uint64_t v59 = 0x696669746E656469;
    v59[1] = 0xEA00000000007265;
    v59[2] = 0xD000000000000018;
    v59[3] = 0x8000000100295F00;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  uint64_t v102 = a2;
  uint64_t v33 = (char *)v103[0];
  id v34 = v103[1];
  id v35 = [*a1 configurations];
  if (!v35)
  {
    uint64_t v92 = (uint64_t)v34;
    unint64_t v95 = v33;
    uint64_t v60 = v94;
    sub_1001D7700(v94);
    os_log_type_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    BOOL v63 = os_log_type_enabled(v61, v62);
    uint64_t v97 = v5;
    if (v63)
    {
      uint64_t v64 = swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315394;
      v103[0] = (id)sub_1000A2E70(0xD000000000000021, 0x8000000100295F20, v104);
      uint64_t v101 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v64 + 12) = 2048;
      v103[0] = (id)1845;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s %ld No configurations found for the blueprint; creating new configuration",
        (uint8_t *)v64,
        0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v65 = v60;
      uint64_t v66 = v101;
    }
    else
    {

      uint64_t v65 = v60;
      uint64_t v66 = v9;
    }
    v100((char *)v65, v66);
    id v73 = objc_allocWithZone((Class)STBlueprintConfiguration);
    id v74 = [v73 initWithContext:v96];
    sub_10023BA40(v102);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v74 updateWithDictionaryRepresentation:isa];

    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v74 setIdentifier:v76];

    id v77 = *a1;
    [v74 setBlueprint:*a1];
    sub_10009EE78(&qword_100342BE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002869B0;
    *(void *)(inited + 32) = v74;
    v104[0] = inited;
    specialized Array._endMutation()();
    unint64_t v79 = v104[0];
    if ((unint64_t)v104[0] >> 62)
    {
      id v88 = v74;
      swift_bridgeObjectRetain();
      uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v89) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v80 = *(void *)((v104[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v81 = v74;
      if (!v80)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        sub_1000A0760(0, (unint64_t *)&qword_100340F90);
        sub_1000AA614(&qword_1003453B0, (unint64_t *)&qword_100340F90);
        Class v90 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v77 setConfigurations:v90];

        return;
      }
    }
    sub_1000A0744(v79);
    goto LABEL_29;
  }
  uint64_t v36 = v35;
  unint64_t v98 = a1;
  uint64_t v37 = sub_1000A0760(0, (unint64_t *)&qword_100340F90);
  uint64_t v38 = sub_1000AA614(&qword_1003453B0, (unint64_t *)&qword_100340F90);
  uint64_t v39 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v104[0] = v39;
  swift_bridgeObjectRetain();
  uint64_t v40 = swift_bridgeObjectRetain();
  sub_10020B6D0(v40, (uint64_t)v33, (uint64_t)v34);
  id v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v42)
  {
    id v43 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v44 = (uint64_t)v95;
    sub_1001D7700((uint64_t)v95);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      v103[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v101 = v9;
      uint64_t v105 = sub_1000A2E70(0xD000000000000021, 0x8000000100295F20, (uint64_t *)v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2048;
      uint64_t v105 = 1856;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s %ld Configuration was found in the list of existing configurations for the blueprint", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = (uint64_t)v95;
      uint64_t v49 = v101;
    }
    else
    {

      uint64_t v48 = v44;
      uint64_t v49 = v9;
    }
    v100((char *)v48, v49);
    sub_10023BA40(v102);
    Class v72 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v43 updateWithDictionaryRepresentation:v72];

    [v43 setBlueprint:*v98];
  }
  else
  {
    uint64_t v97 = v38;
    uint64_t v94 = v37;
    uint64_t v92 = (uint64_t)v34;
    unint64_t v95 = v33;
    uint64_t v67 = v93;
    sub_1001D7700(v93);
    os_log_type_t v68 = Logger.logObject.getter();
    uint64_t v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, (os_log_type_t)v69))
    {
      uint64_t v70 = swift_slowAlloc();
      v103[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 136315394;
      uint64_t v105 = sub_1000A2E70(0xD000000000000021, 0x8000000100295F20, (uint64_t *)v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v70 + 12) = 2048;
      uint64_t v105 = 1861;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "%s %ld Configuration was not found in the list of existing configurations; creating new and inserting into list",
        (uint8_t *)v70,
        0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v71 = v93;
    }
    else
    {

      uint64_t v71 = v67;
    }
    v100((char *)v71, v9);
    id v82 = objc_allocWithZone((Class)STBlueprintConfiguration);
    id v83 = [v82 initWithContext:v96];
    NSString v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v83 setIdentifier:v84];

    sub_10023BA40(v102);
    Class v85 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v83 updateWithDictionaryRepresentation:v85];

    id v43 = v83;
    sub_100257F4C(v103, v43);

    id v86 = *v98;
    Class v87 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v86 setConfigurations:v87];

    [v43 setBlueprint:v86];
  }
}

void sub_1001EC510(void *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    uint64_t v7 = (uint64_t)v6;
    if (a2) {
      id v8 = sub_10020BA68();
    }
    else {
      id v8 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    unint64_t v9 = (unint64_t)v8;
    uint64_t v10 = [self fetchRequestMatchingBlueprintsForUser:v7 fromOrganization:v8 includeTombstones:1];
    id v31 = 0;
    id v11 = [v10 execute:&v31];
    id v12 = v31;
    if (v11)
    {
      uint64_t v13 = v11;
      sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
      unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v15 = v12;

      if (v14 >> 62) {
        goto LABEL_28;
      }
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        uint64_t v25 = a3;
        uint64_t v26 = v10;
        uint64_t v27 = (void *)v9;
        unint64_t v28 = (void *)v7;
        if (!v16) {
          break;
        }
        unint64_t v30 = v14 & 0xC000000000000001;
        uint64_t v10 = _swiftEmptyArrayStorage;
        uint64_t v7 = 4;
        unint64_t v29 = v14;
        while (1)
        {
          id v17 = v30 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v14 + 8 * v7);
          uint64_t v18 = v17;
          unint64_t v14 = v7 - 3;
          if (__OFADD__(v7 - 4, 1)) {
            break;
          }
          id v19 = [v17 dictionaryRepresentation];
          uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v21 = sub_1001D5E14(v20);
          swift_bridgeObjectRelease();
          if (!v21)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for DataStore.DataStoreError(0);
            sub_1000AA560();
            swift_allocError();
            swift_storeEnumTagMultiPayload();
            swift_willThrow();

            return;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = sub_100207630(0, v10[2] + 1, 1, v10);
          }
          unint64_t v9 = v10[2];
          unint64_t v22 = v10[3];
          a3 = (void *)(v9 + 1);
          if (v9 >= v22 >> 1) {
            uint64_t v10 = sub_100207630((void *)(v22 > 1), v9 + 1, 1, v10);
          }
          v10[2] = a3;
          v10[v9 + 4] = v21;

          ++v7;
          BOOL v23 = v14 == v16;
          unint64_t v14 = v29;
          if (v23) {
            goto LABEL_24;
          }
        }
        __break(1u);
LABEL_28:
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_24:

      swift_bridgeObjectRelease();
      *uint64_t v25 = v10;
    }
    else
    {
      id v24 = v31;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_1001EC8B0(void *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    uint64_t v7 = v6;
    if (a2) {
      id v8 = sub_10020BA68();
    }
    else {
      id v8 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    unint64_t v9 = v8;
    uint64_t v10 = (uint64_t)[self fetchRequestMatchingBlueprintsForUser:v7 fromOrganization:v8 includeTombstones:1];
    id v39 = 0;
    id v11 = [(id)v10 execute:&v39];
    id v12 = v39;
    if (v11)
    {
      uint64_t v13 = v11;
      sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
      unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v15 = v12;

      if (v14 >> 62) {
        goto LABEL_40;
      }
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
      id v34 = a3;
      id v35 = (void *)v10;
      uint64_t v36 = v9;
      uint64_t v37 = v7;
      if (v16)
      {
        uint64_t v38 = _swiftEmptyArrayStorage;
        uint64_t v10 = 4;
        while (1)
        {
          if ((v14 & 0xC000000000000001) != 0) {
            id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v18 = *(id *)(v14 + 8 * v10);
          }
          id v19 = v18;
          unint64_t v9 = (void *)(v10 - 3);
          if (__OFADD__(v10 - 4, 1))
          {
            __break(1u);
LABEL_40:
            swift_bridgeObjectRetain();
            uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_8;
          }
          id v20 = [v18 type];
          if (v20)
          {
            unint64_t v21 = v20;
            a3 = (void *)v16;
            uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v24 = v23;

            uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v7 = v26;
            if (v24)
            {
              if (v22 == v25 && v24 == v26)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v28 & 1) == 0)
                {
LABEL_33:

                  uint64_t v16 = (uint64_t)a3;
                  goto LABEL_12;
                }
              }
              id v29 = objc_msgSend(v19, "dictionaryRepresentation", v34);
              uint64_t v30 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v7 = (void *)sub_1001D5E14(v30);
              swift_bridgeObjectRelease();
              if (!v7)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                type metadata accessor for DataStore.DataStoreError(0);
                sub_1000AA560();
                swift_allocError();
                swift_storeEnumTagMultiPayload();
                swift_willThrow();

                return;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v38 = sub_100207630(0, v38[2] + 1, 1, v38);
              }
              unint64_t v32 = v38[2];
              unint64_t v31 = v38[3];
              if (v32 >= v31 >> 1) {
                uint64_t v38 = sub_100207630((void *)(v31 > 1), v32 + 1, 1, v38);
              }
              v38[2] = v32 + 1;
              v38[v32 + 4] = v7;
              goto LABEL_33;
            }
            uint64_t v16 = (uint64_t)a3;
          }
          else
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v7 = v17;
          }

          swift_bridgeObjectRelease();
LABEL_12:
          ++v10;
          if (v9 == (void *)v16) {
            goto LABEL_36;
          }
        }
      }
      uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_36:

      swift_bridgeObjectRelease();
      *id v34 = v38;
    }
    else
    {
      id v33 = v39;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_1001ECD20(void *a1@<X1>, char a2@<W2>, unint64_t *a3@<X8>)
{
  id v7 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v8 = v7;
    id v9 = sub_10020C738(v7, a2 & 1);
    id v10 = [v9 dictionaryRepresentation];
    uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v12 = sub_1001D5E14(v11);
    swift_bridgeObjectRelease();
    if (v12)
    {

      *a3 = v12;
    }
    else
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *uint64_t v13 = a1;
      swift_storeEnumTagMultiPayload();
      id v14 = a1;
      swift_willThrow();
    }
  }
}

uint64_t sub_1001ECE50(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D7700((uint64_t)v9);
  swift_bridgeObjectRetain_n();
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = v7;
    uint64_t v13 = v12;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v26 = v21;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v24 = v2;
    uint64_t v25 = sub_1000A2E70(0xD000000000000015, 0x8000000100295EE0, &v26);
    uint64_t v23 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2048;
    uint64_t v25 = 1927;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_10009EE78(&qword_100341F28);
    uint64_t v14 = Array.description.getter();
    uint64_t v20 = v6;
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_1000A2E70(v14, v16, &v26);
    uint64_t v4 = v23;
    uint64_t v3 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s %ld Processing incoming settings from family %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  id v17 = sub_1001D7640();
  __chkstk_darwin(v17);
  *(&v20 - 2) = a1;
  *(&v20 - 1) = v4;
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v3) {
    char v18 = v26;
  }
  return v18 & 1;
}

void sub_1001ED19C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v8 = __chkstk_darwin(v63);
  __chkstk_darwin(v8);
  unint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v64 = (uint8_t *)v11;
    unint64_t v45 = a3;
    uint64_t v47 = (uint64_t)&v44 - v10;
    uint64_t v61 = a1 + 32;
    uint64_t v13 = (void (**)(uint64_t, uint64_t))(v9 + 8);
    unint64_t v51 = &v67;
    uint64_t v48 = a1;
    swift_bridgeObjectRetain();
    unint64_t v14 = 0;
    unint64_t v44 = v12 - 1;
    int v46 = 1;
    uint64_t v60 = (char *)&type metadata for Any + 8;
    *(void *)&long long v15 = 136315650;
    long long v50 = v15;
    unint64_t v49 = 0x8000000100295EE0;
    uint64_t v52 = a2;
    unint64_t v53 = v13;
    unint64_t v59 = v12;
LABEL_3:
    if (v14 <= v12) {
      unint64_t v16 = v12;
    }
    else {
      unint64_t v16 = v14;
    }
    unint64_t v62 = v16;
    unint64_t v17 = v14;
    while (1)
    {
      if (v62 == v17)
      {
        __break(1u);
        return;
      }
      uint64_t v18 = *(void *)(v61 + 8 * v17);
      uint64_t v19 = *(void *)(v18 + 16);
      swift_bridgeObjectRetain();
      if (!v19) {
        break;
      }
      uint64_t v20 = sub_10010A024(1919251317, 0xE400000000000000);
      if ((v21 & 1) == 0) {
        break;
      }
      sub_1000A4F78(*(void *)(v18 + 56) + 32 * v20, (uint64_t)v65);
      sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v22 = (void *)v66;
      sub_1001DE3B0((void *)v66);
      if (v4)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v24 = v23;
      sub_1001D7700((uint64_t)v64);
      swift_bridgeObjectRetain_n();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      int v27 = v26;
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        v65[0] = v57;
        *(_DWORD *)uint64_t v28 = v50;
        uint64_t v66 = sub_1000A2E70(0xD000000000000015, v49, v65);
        uint64_t v58 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 12) = 2048;
        uint64_t v66 = 1937;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 22) = 2080;
        uint64_t v54 = v28 + 24;
        swift_bridgeObjectRetain();
        unint64_t v56 = (char *)&type metadata for Any + 8;
        uint64_t v29 = Dictionary.description.getter();
        int v55 = v27;
        unint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = v29;
        uint64_t v13 = v53;
        uint64_t v66 = sub_1000A2E70(v32, v31, v65);
        uint64_t v24 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v55, "%s %ld Processing updated settings dictionary %s for family organization.", (uint8_t *)v28, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*v13)((uint64_t)v64, v63);
      char v33 = sub_1001ED8A8(v24, v18);

      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0)
      {
        char v43 = 0;
        int v46 = 0;
        unint64_t v14 = v17 + 1;
        unint64_t v12 = v59;
        if (v44 != v17) {
          goto LABEL_3;
        }
        goto LABEL_26;
      }
      if (v59 == ++v17)
      {
        char v43 = v46;
LABEL_26:
        swift_bridgeObjectRelease();
        a3 = v45;
        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v34 = v47;
    sub_1001D7700(v47);
    swift_bridgeObjectRetain();
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v64 = v37 + 4;
      v65[0] = v38;
      swift_bridgeObjectRetain();
      uint64_t v39 = Dictionary.description.getter();
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      uint64_t v66 = sub_1000A2E70(v39, v41, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Settings dictionary from family does not contain a 'user' key. %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*v53)(v47, v63);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*v13)(v34, v63);
    }
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    *id v42 = 1919251317;
    v42[1] = 0xE400000000000000;
    v42[2] = 0x727065756C425453;
    v42[3] = 0xEB00000000746E69;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    char v43 = 1;
LABEL_27:
    *a3 = v43 & 1;
  }
}

uint64_t sub_1001ED8A8(void *a1, uint64_t a2)
{
  uint64_t v103 = a1;
  uint64_t v4 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v4);
  int64_t v100 = (char *)v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v110 - 8);
  uint64_t v7 = __chkstk_darwin(v110);
  uint64_t v99 = (char *)v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v97 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v101 = (uint64_t)v97 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)v97 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)v97 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)v97 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v97 - v23;
  if (!*(void *)(a2 + 16)
    || (v106 = v2, uint64_t v25 = sub_10010A024(0x7373616C63, 0xE500000000000000), (v26 & 1) == 0)
    || (uint64_t v98 = a2, sub_1000A4F78(*(void *)(a2 + 56) + 32 * v25, (uint64_t)v109), (swift_dynamicCast() & 1) == 0))
  {
    sub_1001D7700((uint64_t)v11);
    swift_bridgeObjectRetain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v34, v35))
    {
      uint64_t v104 = v6;
      os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      uint64_t v105 = v4;
      *(_DWORD *)os_log_type_t v36 = 136315138;
      uint64_t v103 = v36 + 4;
      swift_bridgeObjectRetain();
      id v106 = (char *)&type metadata for Any + 8;
      uint64_t v37 = Dictionary.description.getter();
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      uint64_t v107 = sub_1000A2E70(v37, v39, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v34, v35, "Settings dictionary from family does not contain serializable class name. %s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v104 + 8))(v11, v110);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v110);
    }
    sub_1000AA560();
    swift_allocError();
    *unint64_t v40 = 0x7373616C63;
    v40[1] = 0xE500000000000000;
    v40[2] = 0xD00000000000001CLL;
    v40[3] = 0x8000000100295E40;
    goto LABEL_11;
  }
  uint64_t v104 = v6;
  uint64_t v105 = v4;
  uint64_t v28 = v107;
  unint64_t v27 = v108;
  id v29 = [self serializableClassName];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  char v33 = (char *)v28;
  if (v28 == v30 && v27 == v32)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
    {
      sub_1001D7700((uint64_t)v24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      LODWORD(v34) = v67;
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = swift_slowAlloc();
        LODWORD(v103) = v34;
        uint64_t v34 = v68;
        id v102 = (id)swift_slowAlloc();
        v109[0] = (uint64_t)v102;
        *(_DWORD *)uint64_t v34 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v69 = sub_1000A2E70(v28, v27, v109);
        id v106 = (char *)v28;
        uint64_t v107 = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v34 + 12) = 2080;
        uint64_t v101 = v34 + 14;
        swift_bridgeObjectRetain();
        uint64_t v70 = Dictionary.description.getter();
        unint64_t v72 = v71;
        swift_bridgeObjectRelease();
        uint64_t v107 = sub_1000A2E70(v70, v72, v109);
        char v33 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v103, "Settings dictionary from family has unsupported serializable class: %{public}s. %s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v104 + 8))(v24, v110);
      sub_1000AA560();
      swift_allocError();
      *id v73 = v33;
      v73[1] = v27;
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v43 = v98;
  if (!*(void *)(v98 + 16)
    || (uint64_t v44 = sub_10010A024(0x617A696E6167726FLL, 0xEC0000006E6F6974), (v45 & 1) == 0)
    || (sub_1000A4F78(*(void *)(v43 + 56) + 32 * v44, (uint64_t)v109), (swift_dynamicCast() & 1) == 0))
  {
    sub_1001D7700((uint64_t)v19);
    swift_bridgeObjectRetain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      long long v50 = (uint8_t *)swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      *(_DWORD *)long long v50 = 136315138;
      v97[1] = v50 + 4;
      swift_bridgeObjectRetain();
      v97[2] = (char *)&type metadata for Any + 8;
      uint64_t v51 = Dictionary.description.getter();
      unint64_t v53 = v52;
      swift_bridgeObjectRelease();
      uint64_t v54 = v51;
      uint64_t v43 = v98;
      uint64_t v107 = sub_1000A2E70(v54, v53, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Settings dictionary from family does not contain a 'organization' key. %s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v104 + 8))(v19, v110);
    goto LABEL_25;
  }
  uint64_t v46 = v107;
  unint64_t v47 = v108;
  if (v107 == 0xD000000000000014 && v108 == 0x8000000100295EA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = v98;
LABEL_25:
    uint64_t v34 = (uint64_t)v106;
    goto LABEL_26;
  }
  uint64_t v34 = (uint64_t)v106;
  if ((v46 != 0xD000000000000014 || v47 != 0x8000000100295EC0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    sub_1001D7700((uint64_t)v22);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    Class v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    LODWORD(v34) = v91;
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = swift_slowAlloc();
      LODWORD(v103) = v34;
      uint64_t v34 = v92;
      id v102 = (id)swift_slowAlloc();
      v109[0] = (uint64_t)v102;
      *(_DWORD *)uint64_t v34 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v107 = sub_1000A2E70(v46, v47, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v101 = v34 + 14;
      swift_bridgeObjectRetain();
      id v106 = (char *)v46;
      uint64_t v93 = Dictionary.description.getter();
      unint64_t v95 = v94;
      swift_bridgeObjectRelease();
      uint64_t v107 = sub_1000A2E70(v93, v95, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v103, "Settings dictionary from family is for an unsupported organization = %{public}s. %s", (uint8_t *)v34, 0x16u);
      uint64_t v46 = (uint64_t)v106;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v104 + 8))(v22, v110);
    sub_1000AA560();
    swift_allocError();
    uint64_t *v96 = v46;
    v96[1] = v47;
LABEL_11:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return v34 & 1;
  }
  swift_bridgeObjectRelease();
  uint64_t v43 = v98;
LABEL_26:
  id v55 = v102;
  unint64_t v56 = v103;
  id v57 = sub_10020B2D4(v103);
  if (!v55)
  {
    uint64_t v58 = v57;
    id v59 = [v57 familySettings];

    if (!v59)
    {
      sub_1001D7700((uint64_t)v16);
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = swift_slowAlloc();
        v109[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 136315394;
        uint64_t v107 = sub_1000A2E70(0xD000000000000019, 0x8000000100295E80, v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v62 + 12) = 2048;
        uint64_t v107 = 1973;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s %ld Current users does not have any associated family settings.", (uint8_t *)v62, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v104 + 8))(v16, v110);
      id v63 = sub_1001D7640();
      id v64 = [objc_allocWithZone((Class)STFamilyOrganizationSettings) initWithContext:v63];

      [v64 setUser:v58];
      id v65 = sub_10020BA68();
      unint64_t v56 = v103;
      id v74 = v65;
      [v64 setOrganization:v65];

      [v58 setFamilySettings:v64];
      uint64_t v34 = (uint64_t)v106;
      uint64_t v43 = v98;
    }
    id v102 = v58;
    id v75 = [v58 familySettings];
    uint64_t v76 = v104;
    if (v75)
    {
      id v77 = v75;
      if (v56)
      {
LABEL_37:
        id v78 = v102;
        sub_10023BA40(v43);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        LOBYTE(v34) = [v77 updateWithDictionaryRepresentation:isa];

        return v34 & 1;
      }
      if (!*(void *)(v43 + 16)) {
        goto LABEL_49;
      }
      uint64_t v85 = sub_10010A024(0xD00000000000001ELL, 0x8000000100295E60);
      if ((v86 & 1) == 0)
      {
        char v88 = 0;
        uint64_t v34 = (uint64_t)v106;
        goto LABEL_51;
      }
      sub_1000A4F78(*(void *)(v43 + 56) + 32 * v85, (uint64_t)v109);
      int v87 = swift_dynamicCast();
      uint64_t v34 = (uint64_t)v106;
      if (v87) {
        char v88 = v107;
      }
      else {
LABEL_49:
      }
        char v88 = 0;
LABEL_51:
      id v89 = sub_1001D7640();
      __chkstk_darwin(v89);
      v97[-4] = 0;
      v97[-3] = v34;
      LOBYTE(v97[-2]) = v88;
      *(_WORD *)((char *)&v97[-2] + 1) = 1;
      NSManagedObjectContext.performAndWait<A>(_:)();

      goto LABEL_37;
    }
    uint64_t v80 = v101;
    sub_1001D7700(v101);
    id v81 = Logger.logObject.getter();
    LOBYTE(v34) = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, (os_log_type_t)v34))
    {
      id v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v34, "We were unable to create a new family settings object.", v82, 2u);
      unint64_t v56 = v103;
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v80, v110);
    sub_1000AA560();
    swift_allocError();
    *id v83 = v56;
    swift_storeEnumTagMultiPayload();
    id v84 = v56;
    swift_willThrow();
  }
  return v34 & 1;
}

void sub_1001EEAA8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, void *a7)
{
  uint64_t v31 = a7;
  uint64_t v32 = a4;
  v29[5] = a6;
  uint64_t v30 = a3;
  uint64_t v33 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  v29[4] = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v29 - v16;
  __chkstk_darwin(v15);
  id v18 = sub_10020B2D4(a2);
  if (!v7)
  {
    v29[2] = v12;
    v29[3] = v17;
    v29[1] = v10;
    uint64_t v19 = v31;
    if (a5 >= 2u && v30 | v32)
    {
      uint64_t v20 = v18;
      uint64_t v22 = (void *)sub_10020C8AC(v18);
    }
    else
    {
      uint64_t v20 = v18;
      id v21 = (id)sub_1001E05E8(v30, v32, a5);
      uint64_t v22 = (void *)sub_10020CC4C(v21);
    }
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_1001EF1C4(isa, v22, v19);

    uint64_t v24 = type metadata accessor for Date();
    uint64_t v25 = *(void *)(v24 - 8);
    __chkstk_darwin(v24);
    unint64_t v27 = (char *)v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Date.now.getter();
    Class v28 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    [v22 setLastUpdatedDate:v28];
  }
}

void sub_1001EF1C4(void *a1, void *a2, void *a3)
{
  id v158 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v154 = *(void (***)(unsigned char *, uint64_t))(v5 - 8);
  uint64_t v155 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v156 = &v142[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  id v159 = &v142[-v8];
  id v9 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100286350;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v11 = sub_1000A5124();
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 32) = 0x6567617375;
  *(void *)(v10 + 40) = 0xE500000000000000;
  *(void *)(v10 + 96) = sub_1000A0760(0, &qword_100340F80);
  *(void *)(v10 + 104) = sub_1000AA614(&qword_100345398, &qword_100340F80);
  *(void *)(v10 + 72) = a2;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v10 + 136) = &type metadata for String;
  *(void *)(v10 + 144) = v11;
  *(void *)(v10 + 112) = 0x7461447472617473;
  *(void *)(v10 + 120) = 0xE900000000000065;
  *(void *)(v10 + 176) = sub_1000A0760(0, &qword_100342B40);
  *(void *)(v10 + 184) = sub_1000AA614(&qword_1003415F0, &qword_100342B40);
  *(void *)(v10 + 152) = a1;
  id v12 = a2;
  id v157 = a1;
  uint64_t v13 = NSPredicate.init(format:_:)();
  [v9 setPredicate:v13];

  v161 = 0;
  id v14 = [v9 execute:&v161];
  uint64_t v15 = v161;
  if (!v14)
  {
    unint64_t v38 = v161;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v16 = v14;
  id v153 = v9;
  sub_1000A0760(0, &qword_1003452F8);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v18 = v15;

  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(unsigned char **)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v20 = v156;
  id v148 = v12;
  if (v19)
  {
    sub_1001D7700((uint64_t)v156);
    id v21 = v12;
    id v22 = v157;
    swift_bridgeObjectRetain_n();
    id v23 = v21;
    uint64_t v24 = v22;
    uint64_t v25 = Logger.logObject.getter();
    int v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      int v143 = v26;
      id v159 = v19;
      os_log_t v145 = v25;
      uint64_t v146 = (void (*)(unsigned char *, unsigned char *))(v17 >> 62);
      uint64_t v27 = swift_slowAlloc();
      Class v28 = (void *)swift_slowAlloc();
      uint64_t v144 = swift_slowAlloc();
      uint64_t v160 = v24;
      v161 = v144;
      *(_DWORD *)uint64_t v27 = 138413826;
      id v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Class v28 = v24;

      *(_WORD *)(v27 + 12) = 2112;
      uint64_t v30 = [v23 objectID];
      uint64_t v160 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v151 = v28;
      v28[1] = v30;

      v152 = (_WORD *)v27;
      *(_WORD *)(v27 + 22) = 2080;
      id v31 = [v23 device];
      if (v31)
      {
        uint64_t v32 = v31;
        id v33 = [v31 objectID];

        id v34 = [v33 description];
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        unint64_t v37 = 0xE300000000000000;
        uint64_t v35 = 7104878;
      }
      id v57 = v152;
      uint64_t v160 = (void *)sub_1000A2E70(v35, v37, (uint64_t *)&v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v57[16] = 2080;
      id v58 = [v23 lastEventDate];
      uint64_t v59 = sub_10009EE78(&qword_100342B30);
      __chkstk_darwin(v59);
      os_log_type_t v61 = &v142[-((v60 + 15) & 0xFFFFFFFFFFFFFFF0)];
      if (v58)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v62 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 0, 1, v62);
      }
      else
      {
        uint64_t v62 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 1, 1, v62);
      }
      id v63 = v152;
      uint64_t v64 = String.init<A>(describing:)();
      uint64_t v160 = (void *)sub_1000A2E70(v64, v65, (uint64_t *)&v161);
      char v150 = (id *)&v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v63[21] = 2080;
      v149 = v63 + 22;
      id v66 = [v23 lastUpdatedDate];
      uint64_t v67 = type metadata accessor for Date();
      uint64_t v147 = v142;
      uint64_t v68 = *(void *)(v62 - 8);
      __chkstk_darwin(v67);
      uint64_t v70 = &v142[-v69];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10020D2E4((unint64_t *)&qword_100341938, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v73 = v72;
      (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v70, v62);
      uint64_t v160 = (void *)sub_1000A2E70(v71, v73, (uint64_t *)&v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v63[26] = 2112;
      id v74 = [v23 user];
      id v75 = &selRef_numberWithUnsignedInteger_;
      uint64_t v76 = [v74 objectID];

      uint64_t v160 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((void *)v151 + 2) = v76;

      v63[31] = 2082;
      uint64_t v160 = _swiftEmptyArrayStorage;
      uint64_t v77 = (uint64_t)v159;
      sub_1002080AC(0, v77 & ~(v77 >> 63), 0);
      if (v77 < 0) {
LABEL_67:
      }
        __break(1u);
      id v78 = 0;
      unint64_t v79 = v160;
      do
      {
        if ((v17 & 0xC000000000000001) != 0) {
          id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v80 = *(id *)(v17 + 8 * (void)v78 + 32);
        }
        id v81 = v80;
        id v82 = [v80 v75[6]];
        id v83 = [v82 description];

        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v86 = v85;

        uint64_t v160 = v79;
        unint64_t v88 = v79[2];
        unint64_t v87 = v79[3];
        if (v88 >= v87 >> 1)
        {
          sub_1002080AC(v87 > 1, v88 + 1, 1);
          unint64_t v79 = v160;
        }
        id v78 = (char *)v78 + 1;
        v79[2] = v88 + 1;
        id v89 = &v79[2 * v88];
        v89[4] = v84;
        v89[5] = v86;
        id v75 = &selRef_numberWithUnsignedInteger_;
      }
      while (v159 != v78);
      uint64_t v160 = v79;
      Class v90 = (uint8_t *)v152;
      sub_10009EE78(&qword_1003426F0);
      sub_10020DAD0();
      uint64_t v91 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v93 = v92;
      swift_release();
      uint64_t v160 = (void *)sub_1000A2E70(v91, v93, (uint64_t *)&v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v94 = v145;
      _os_log_impl((void *)&_mh_execute_header, v145, (os_log_type_t)v143, "Usage block(s) exist(s) for %@ in STUsage %@ {\n    device = %s\n    lastEventDate = %s\n    lastUpdatedDate = %s\n    user = %@.\n}\nWill delete blocks: [\n    %{public}s\n]", v90, 0x48u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v154[1](v156, v155);
      uint64_t v53 = v17 & 0xFFFFFFFFFFFFFF8;
      if (v146)
      {
LABEL_29:
        swift_bridgeObjectRetain();
        uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v54) {
          goto LABEL_30;
        }
        goto LABEL_36;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v154[1](v20, v155);
      uint64_t v53 = v17 & 0xFFFFFFFFFFFFFF8;
      if (v17 >> 62) {
        goto LABEL_29;
      }
    }
    uint64_t v54 = *(void *)(v53 + 16);
    if (v54)
    {
LABEL_30:
      if (v54 < 1)
      {
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v95 = 0;
      do
      {
        if ((v17 & 0xC000000000000001) != 0) {
          id v96 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v96 = *(id *)(v17 + 8 * v95 + 32);
        }
        uint64_t v97 = v96;
        ++v95;
        id v98 = sub_1001D7640();
        [v98 deleteObject:v97];
      }
      while (v54 != v95);
    }
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  unint64_t v39 = v159;
  sub_1001D7700((uint64_t)v159);
  id v40 = v12;
  id v41 = v157;
  char v42 = v40;
  uint64_t v43 = v41;
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  int v46 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v47 = swift_slowAlloc();
    LODWORD(v156) = v46;
    uint64_t v48 = v47;
    os_log_type_t v49 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 138412546;
    v161 = v43;
    long long v50 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v49 = v43;
    uint64_t v51 = v49;

    *(_WORD *)(v48 + 12) = 2112;
    v161 = v42;
    unint64_t v52 = v42;
    unint64_t v39 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v51[1] = v42;

    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v156, "No usage block exists for %@ in %@.\n A new one will be created.", (uint8_t *)v48, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v44 = v43;
  }
  unint64_t v56 = v154;
  uint64_t v55 = v155;

  v56[1](v39, v55);
LABEL_37:
  id v99 = sub_1001D7640();
  int64_t v100 = [objc_allocWithZone((Class)STUsageBlock) initWithContext:v99];

  id v159 = v100;
  [v100 setDurationInMinutes:60];
  Class isa = (Class)[v158 firstPickup];
  uint64_t v102 = sub_10009EE78(&qword_100342B30);
  uint64_t v103 = *(void *)(*(void *)(v102 - 8) + 64);
  __chkstk_darwin(v102 - 8);
  if (isa)
  {
    uint64_t v104 = (unsigned char *)type metadata accessor for Date();
    uint64_t v105 = *((void *)v104 - 1);
    __chkstk_darwin(v104);
    uint64_t v107 = &v142[-((v106 + 15) & 0xFFFFFFFFFFFFFFF0)];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, unsigned char *, unsigned char *))(v105 + 32))(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], v107, v104);
    (*(void (**)(unsigned char *, void, uint64_t, unsigned char *))(v105 + 56))(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], 0, 1, v104);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, unsigned char *))(v105 + 48))(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], 1, v104) == 1)
    {
      Class isa = 0;
    }
    else
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(unsigned char *, unsigned char *))(v105 + 8))(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], v104);
    }
  }
  else
  {
    uint64_t v104 = (unsigned char *)type metadata accessor for Date();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, unsigned char *))(*((void *)v104 - 1) + 56))(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], 1, 1, v104);
  }
  id v108 = v159;
  [v159 setFirstPickupDate:isa];

  id v109 = v158;
  id v110 = [v158 lastEventDate];
  uint64_t v111 = type metadata accessor for Date();
  uint64_t v112 = *((void *)v104 - 1);
  __chkstk_darwin(v111);
  uint64_t v114 = &v142[-v113];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class v115 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v155 = v112;
  uint64_t v156 = v104;
  uint64_t v146 = *(void (**)(unsigned char *, unsigned char *))(v112 + 8);
  uint64_t v147 = (unsigned char *)(v112 + 8);
  v146(v114, v104);
  [v108 setLastEventDate:v115];

  v149 = v142;
  __chkstk_darwin(v116);
  uint64_t v117 = sub_10009EE78(&qword_1003453A0);
  id v151 = v142;
  uint64_t v118 = *(void *)(*(void *)(v117 - 8) + 64);
  __chkstk_darwin(v117 - 8);
  uint64_t v119 = &v142[-((v118 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v120 = [v109 longestSession];
  char v150 = (id *)v142;
  if (__chkstk_darwin(v120))
  {
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v121 = type metadata accessor for DateInterval();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v119, 0, 1, v121);
  }
  else
  {
    uint64_t v121 = type metadata accessor for DateInterval();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v119, 1, 1, v121);
  }
  sub_1000FDE9C((uint64_t)v119, (uint64_t)v119, &qword_1003453A0);
  type metadata accessor for DateInterval();
  uint64_t v122 = *(void *)(v121 - 8);
  v152 = *(_WORD **)(v122 + 48);
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v152)(v119, 1, v121) == 1)
  {
    sub_1000A4FD8((uint64_t)v119, &qword_1003453A0);
    uint64_t v154 = *(void (***)(unsigned char *, uint64_t))(v155 + 56);
    ((void (*)(unsigned char *, uint64_t, uint64_t, unsigned char *))v154)(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], 1, 1, v156);
    Class v123 = 0;
  }
  else
  {
    DateInterval.end.getter();
    (*(void (**)(unsigned char *, uint64_t))(v122 + 8))(v119, v121);
    uint64_t v124 = v155;
    uint64_t v125 = v156;
    uint64_t v126 = *(void (***)(unsigned char *, uint64_t))(v155 + 56);
    ((void (*)(unsigned char *, void, uint64_t, unsigned char *))v126)(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], 0, 1, v156);
    int v127 = (*(uint64_t (**)(unsigned char *, uint64_t, unsigned char *))(v124 + 48))(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], 1, v125);
    uint64_t v154 = v126;
    if (v127 == 1)
    {
      Class v123 = 0;
    }
    else
    {
      Class v123 = Date._bridgeToObjectiveC()().super.isa;
      v146(&v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)], v125);
    }
  }
  [v159 setLongestSessionEndDate:v123];

  char v150 = (id *)v142;
  uint64_t v129 = __chkstk_darwin(v128);
  uint64_t v130 = &v142[-((v103 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v151 = v142;
  __chkstk_darwin(v129);
  id v131 = &v142[-((v118 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v132 = [v158 longestSession];
  if (__chkstk_darwin(v132))
  {
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v133 = 0;
  }
  else
  {
    uint64_t v133 = 1;
  }
  id v134 = v156;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v131, v133, 1, v121);
  sub_1000FDE9C((uint64_t)v131, (uint64_t)v131, &qword_1003453A0);
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v152)(v131, 1, v121) == 1)
  {
    sub_1000A4FD8((uint64_t)v131, &qword_1003453A0);
    ((void (*)(unsigned char *, uint64_t, uint64_t, unsigned char *))v154)(v130, 1, 1, v134);
    Class v135 = 0;
  }
  else
  {
    DateInterval.start.getter();
    (*(void (**)(unsigned char *, uint64_t))(v122 + 8))(v131, v121);
    uint64_t v136 = v155;
    ((void (*)(unsigned char *, void, uint64_t, unsigned char *))v154)(v130, 0, 1, v134);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, unsigned char *))(v136 + 48))(v130, 1, v134) == 1)
    {
      Class v135 = 0;
    }
    else
    {
      Class v135 = Date._bridgeToObjectiveC()().super.isa;
      v146(v130, v134);
    }
  }
  unint64_t v137 = v153;
  id v138 = v159;
  [v159 setLongestSessionStartDate:v135];

  id v139 = v158;
  objc_msgSend(v138, "setNumberOfPickupsWithoutApplicationUsage:", objc_msgSend(v158, "pickupsWithoutApplicationUsage"));
  [v139 screenTime];
  if ((~*(void *)&v140 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_64;
  }
  if (v140 <= -9.22337204e18)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v140 >= 9.22337204e18)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  id v141 = v159;
  [v159 setScreenTimeInSeconds:(uint64_t)v140];
  [v141 setStartDate:v157];
  [v141 setUsage:v148];
  sub_1001F0860((uint64_t)v141, v158);
}

uint64_t sub_1001F0860(uint64_t a1, id a2)
{
  id v4 = [a2 categoryUsage];
  sub_1000A0760(0, &qword_100345380);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v5 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      ++v8;
      id v11 = v9;
      sub_1001F09A0((unint64_t *)&v11, v2, a1);
    }
    while (v6 != v8);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

void sub_1001F09A0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *a1;
  id v32 = 0;
  [(id)v5 totalUsageTime];
  id v7 = 0;
  if (v6 > 0.0)
  {
    double v8 = v6;
    id v9 = sub_1001D7640();
    id v7 = [objc_allocWithZone((Class)STUsageCategory) initWithContext:v9];

    id v10 = [(id)v5 categoryIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 setIdentifier:v11];

    if ((~*(void *)&v8 & 0x7FF0000000000000) != 0)
    {
      if (v8 > -9.22337204e18)
      {
        if (v8 < 9.22337204e18)
        {
          [v7 setTotalTimeInSeconds:(uint64_t)v8];
          [v7 setBlock:a3];
          id v32 = v7;
          goto LABEL_6;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_6:
  id v12 = [(id)v5 applicationUsage];
  sub_1000A0760(0, &qword_100345388);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    id v28 = (id)v5;
    if (!v14) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v28 = (id)v5;
    if (!v14) {
      goto LABEL_15;
    }
  }
  if (v14 < 1) {
    goto LABEL_34;
  }
  uint64_t v15 = 0;
  do
  {
    if ((v13 & 0xC000000000000001) != 0) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(v13 + 8 * v15 + 32);
    }
    unint64_t v17 = v16;
    ++v15;
    id v31 = v16;
    sub_1001F0E44(&v31, &v32, a2, a3);
  }
  while (v14 != v15);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (v7)
  {
    id v30 = v7;
    id v18 = [v28 webUsage];
    sub_1000A0760(0, &qword_100345390);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v5 >> 62) {
      goto LABEL_35;
    }
    uint64_t v19 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v20 = &selRef_setOrganizationIdentifier_;
    if (v19)
    {
      while (v19 >= 1)
      {
        uint64_t v21 = 0;
        id v29 = (id)(v5 & 0xC000000000000001);
        while (1)
        {
          id v22 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v21 + 32);
          id v23 = v22;
          id v24 = sub_1001D7640();
          id v25 = [objc_allocWithZone((Class)STUsageTimedItem) initWithContext:v24];

          NSString v26 = [v23 domainIdentifier];
          if (!v26)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v26 = String._bridgeToObjectiveC()();
            uint64_t v20 = &selRef_setOrganizationIdentifier_;
            swift_bridgeObjectRelease();
          }
          objc_msgSend(v25, "setDomain:", v26, v29);

          objc_msgSend(v25, "setUsageTrusted:", objc_msgSend(v23, "webUsageTrusted"));
          [v23 v20[273]];
          if ((~*(void *)&v27 & 0x7FF0000000000000) == 0) {
            break;
          }
          if (v27 <= -9.22337204e18) {
            goto LABEL_32;
          }
          if (v27 >= 9.22337204e18) {
            goto LABEL_33;
          }
          ++v21;
          [v25 setTotalTimeInSeconds:(uint64_t)v27];
          [v25 setCategory:v30];

          if (v19 == v21) {
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v20 = &selRef_setOrganizationIdentifier_;
        if (!v19) {
          goto LABEL_29;
        }
      }
      goto LABEL_40;
    }
LABEL_29:
    swift_bridgeObjectRelease_n();
  }
}

void sub_1001F0E44(id *a1, id *a2, uint64_t a3, uint64_t a4)
{
  id v6 = *a1;
  id v7 = [*a1 canonicalBundleIdentifier];
  NSString v8 = v7;
  NSString v9 = v7;
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = v7;
  id v11 = [v6 applicationUsageTrusted];
  [v6 totalUsageTime];
  if (!*a2) {
    goto LABEL_9;
  }
  double v13 = v12;
  if (v12 <= 0.0) {
    goto LABEL_9;
  }
  uint64_t v22 = a4;
  id v14 = *a2;
  id v15 = sub_1001D7640();
  id v16 = [objc_allocWithZone((Class)STUsageTimedItem) initWithContext:v15];

  [v16 setBundleIdentifier:v9];
  [v16 setUsageTrusted:v11];
  if ((~*(void *)&v13 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    return;
  }
  [v16 setTotalTimeInSeconds:(uint64_t)v13];
  [v16 setCategory:v14];

  NSString v9 = v16;
  a4 = v22;
LABEL_9:

  id v17 = [v6 totalUserNotifications];
  uint64_t v18 = (uint64_t)[v6 totalPickups];
  uint64_t v19 = v18;
  if ((uint64_t)v17 > 0 || v18 >= 1)
  {
    id v20 = sub_1001D7640();
    id v21 = [objc_allocWithZone((Class)STUsageCountedItem) initWithContext:v20];

    [v21 setBundleIdentifier:v8];
    [v21 setNumberOfNotifications:v17];
    [v21 setNumberOfPickups:v19];
    [v21 setUsageTrusted:v11];
    [v21 setBlock:a4];
    NSString v8 = v21;
  }
}

void sub_1001F10F8(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a3;
  id v6 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100284C10;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000A5124();
  strcpy((char *)(v7 + 32), "usage.device");
  *(unsigned char *)(v7 + 45) = 0;
  *(_WORD *)(v7 + 46) = -5120;
  *(void *)(v7 + 96) = sub_1000A0760(0, &qword_1003415D0);
  *(void *)(v7 + 104) = sub_1000AA614(&qword_100345370, &qword_1003415D0);
  *(void *)(v7 + 72) = a1;
  id v8 = a1;
  NSString v9 = NSPredicate.init(format:_:)();
  [v6 setPredicate:v9];

  sub_10009EE78(&qword_1003415D8);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100286230;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 32) = 0x7461447472617473;
  *(void *)(v10 + 40) = 0xE900000000000065;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setPropertiesToFetch:isa];

  sub_10009EE78(&qword_100342BE0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002869B0;
  id v13 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 initWithKey:v14 ascending:0];

  *(void *)(v12 + 32) = v15;
  specialized Array._endMutation()();
  sub_1000A0760(0, &qword_100345378);
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setSortDescriptors:v16];

  id v36 = 0;
  id v17 = [v6 execute:&v36];
  id v18 = v36;
  if (!v17)
  {
    id v31 = v36;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v19 = v17;
  sub_1000A0760(0, &qword_1003452F8);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v21 = v18;

  id v22 = [a2 localUserDeviceState];
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v35 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  __chkstk_darwin(v35);
  id v25 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v22)
  {
    sub_1001D65EC((uint64_t)v25);
    if (!(v20 >> 62)) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v32) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  sub_1000AB07C((uint64_t)v25);
  if (v20 >> 62) {
    goto LABEL_12;
  }
LABEL_4:
  if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_5:
    v33[0] = v33;
    v33[1] = v3;
    if ((v20 & 0xC000000000000001) != 0)
    {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        __break(1u);
      }
      id v26 = *(id *)(v20 + 32);
    }
    double v27 = v26;
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v27, "startDate", v33[0]);
    __chkstk_darwin(v28);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v28) = static Date.> infix(_:_:)();
    id v29 = *(void (**)(char *, uint64_t))(v23 + 8);
    v29((char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v35);
    if (v28)
    {
      id v30 = [v27 startDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v29(v25, v35);
      return;
    }

    goto LABEL_15;
  }
LABEL_13:

  swift_bridgeObjectRelease();
LABEL_15:
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v34, v25, v35);
}

void sub_1001F16BC()
{
  id v1 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100284C10;
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v3 = sub_1000A5124();
  *(void *)(v2 + 32) = 1919251317;
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 40) = 0xE400000000000000;
  id v4 = sub_10020B2D4(0);
  if (v0)
  {
    sub_1000A4F28(v2 + 32);
    *(void *)(v2 + 16) = 0;

    swift_release();
    return;
  }
  id v5 = v4;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v2 + 96) = sub_1000A0760(0, &qword_1003431E0);
  *(void *)(v2 + 104) = sub_1000AA614(&qword_1003452F0, &qword_1003431E0);
  *(void *)(v2 + 72) = v5;
  id v6 = NSPredicate.init(format:_:)();
  [v1 setPredicate:v6];

  id v18 = 0;
  id v7 = [v1 execute:&v18];
  id v8 = v18;
  if (!v7)
  {
    id v17 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  NSString v9 = v7;
  sub_1000A0760(0, &qword_100340F80);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = v8;

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
LABEL_6:
      if (v12 < 1) {
        __break(1u);
      }
      uint64_t v13 = 0;
      do
      {
        if ((v10 & 0xC000000000000001) != 0) {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v14 = *(id *)(v10 + 8 * v13 + 32);
        }
        id v15 = v14;
        ++v13;
        id v16 = sub_1001D7640();
        [v16 deleteObject:v15];
      }
      while (v12 != v13);
    }
  }

  swift_bridgeObjectRelease();
}

void sub_1001F19D4()
{
  id v1 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100284C10;
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v3 = sub_1000A5124();
  *(void *)(v2 + 32) = 0x73752E6567617375;
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 40) = 0xEA00000000007265;
  id v4 = sub_10020B2D4(0);
  if (v0)
  {
    sub_1000A4F28(v2 + 32);
    *(void *)(v2 + 16) = 0;

    swift_release();
    return;
  }
  id v5 = v4;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v2 + 96) = sub_1000A0760(0, &qword_1003431E0);
  *(void *)(v2 + 104) = sub_1000AA614(&qword_1003452F0, &qword_1003431E0);
  *(void *)(v2 + 72) = v5;
  id v6 = NSPredicate.init(format:_:)();
  [v1 setPredicate:v6];

  id v18 = 0;
  id v7 = [v1 execute:&v18];
  id v8 = v18;
  if (!v7)
  {
    id v17 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  NSString v9 = v7;
  sub_1000A0760(0, &qword_1003452F8);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = v8;

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
LABEL_6:
      if (v12 < 1) {
        __break(1u);
      }
      uint64_t v13 = 0;
      do
      {
        if ((v10 & 0xC000000000000001) != 0) {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v14 = *(id *)(v10 + 8 * v13 + 32);
        }
        id v15 = v14;
        ++v13;
        id v16 = sub_1001D7640();
        [v16 deleteObject:v15];
      }
      while (v12 != v13);
    }
  }

  swift_bridgeObjectRelease();
}

void sub_1001F1CF4()
{
  id v0 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100284C10;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_1000A5124();
  *(void *)(v1 + 32) = 0x7461447472617473;
  *(void *)(v1 + 40) = 0xE900000000000065;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  *(void *)(v1 + 96) = sub_1000A0760(0, &qword_100342B40);
  *(void *)(v1 + 104) = sub_1000AA614(&qword_1003415F0, &qword_100342B40);
  *(void *)(v1 + 72) = isa;
  unint64_t v3 = NSPredicate.init(format:_:)();
  [v0 setPredicate:v3];

  id v15 = 0;
  id v4 = [v0 execute:&v15];
  id v5 = v15;
  if (!v4)
  {
    id v14 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v6 = v4;
  sub_1000A0760(0, &qword_1003452F8);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = v5;

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
LABEL_4:
      if (v9 < 1) {
        __break(1u);
      }
      uint64_t v10 = 0;
      do
      {
        if ((v7 & 0xC000000000000001) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(v7 + 8 * v10 + 32);
        }
        uint64_t v12 = v11;
        ++v10;
        id v13 = sub_1001D7640();
        [v13 deleteObject:v12];
      }
      while (v9 != v10);
    }
  }

  swift_bridgeObjectRelease();
}

void sub_1001F1FEC(void *a1@<X1>, void *a2@<X8>)
{
  id v4 = sub_10020CFD4(a1);
  if (v2) {
    return;
  }
  id v5 = v4;
  id v6 = [v4 requestedApplicationBundleIdentifier];
  char v42 = a2;
  uint64_t v41 = 0;
  if (v6)
  {

    id v7 = [v5 requestedApplicationBundleIdentifier];
    if (v7) {
      goto LABEL_10;
    }
    __break(1u);
  }
  id v8 = [v5 requestedWebDomain];
  if (!v8) {
    goto LABEL_8;
  }

  id v7 = [v5 requestedWebDomain];
  if (v7)
  {
LABEL_10:
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_11;
  }
  __break(1u);
LABEL_8:
  id v9 = [v5 requestedCategoryIdentifier];
  if (v9)
  {

    id v7 = [v5 requestedCategoryIdentifier];
    if (!v7)
    {
      __break(1u);
      return;
    }
    goto LABEL_10;
  }
LABEL_11:
  id v40 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", objc_msgSend(v5, "usageType"));
  id v10 = [v40 integerValue];
  id v11 = objc_allocWithZone((Class)STAskForTimeRequest);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithUsageType:v10 requestedResourceIdentifier:v12];

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v13 setRequestIdentifier:isa];

  id v15 = [v5 timeRequested];
  id v39 = v13;
  [v13 setTimeRequested:v15];

  uint64_t v16 = type metadata accessor for Date();
  v38[2] = v38;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v20 = (char *)v38 - v19;
  id v21 = [v5 requestTimeStamp];
  uint64_t v22 = sub_10009EE78(&qword_100342B30);
  v38[1] = v38;
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  id v25 = (char *)v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v25, 1, 1, v16);
    goto LABEL_15;
  }
  __chkstk_darwin(v23);
  id v26 = (char *)v38 - v19;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  double v27 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v27(v25, v26, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v25, 0, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v25, 1, v16) == 1)
  {
LABEL_15:
    static Date.now.getter();
    sub_1000A4FD8((uint64_t)v25, &qword_100342B30);
    goto LABEL_16;
  }
  v27(v20, v25, v16);
LABEL_16:
  id v29 = v39;
  id v28 = v40;
  Class v30 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  [v29 setTimeStamp:v30];

  id v31 = [v5 requestingUser];
  if (v31)
  {
    uint64_t v32 = v31;
    id v33 = [v31 dsid];
  }
  else
  {
    id v33 = 0;
  }
  [v29 setRequestingUserDSID:v33];

  id v34 = [v5 requestingUser];
  NSString v35 = v34;
  if (v34)
  {
    id v36 = [v34 givenName];

    unint64_t v37 = v42;
    if (v36)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v35 = 0;
    }
  }
  else
  {
    unint64_t v37 = v42;
  }
  [v29 setRequestingUserDisplayName:v35];

  *unint64_t v37 = v29;
}

void sub_1001F2550(void *a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v7 = v6;
    id v8 = self;
    id v9 = sub_1001D7640();
    id v25 = 0;
    id v10 = [v8 upsertAskForTimeRequest:a2 fromUser:v7 inContext:v9 error:&v25];

    if (v10)
    {
      uint64_t v24 = a3;
      id v11 = v25;
      id v12 = [v10 identifier];
      uint64_t v13 = sub_10009EE78(&qword_100342B20);
      v23[2] = v23;
      __chkstk_darwin(v13 - 8);
      id v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v12)
      {
        uint64_t v16 = type metadata accessor for UUID();
        v23[1] = v23;
        uint64_t v17 = *(void *)(v16 - 8);
        __chkstk_darwin(v16);
        unint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
        v20(v15, v19, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
        {

          v20(v24, v15, v16);
          return;
        }
      }
      else
      {
        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v15, 1, 1, v22);
      }
      __break(1u);
    }
    else
    {
      id v21 = v25;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_1001F2840(uint8_t *a1, void *a2)
{
  id v74 = a1;
  uint64_t v75 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v75);
  uint64_t v76 = (void *)((char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v72 = v5;
  uint64_t v73 = v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v77 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (uint8_t *)v69 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v69 - v12;
  id v14 = [a2 associatedRequestIdentifier];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v18 = sub_10020CFD4((char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))((char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
    unint64_t v19 = v76;
    unint64_t v20 = v77;
    id v80 = (uint8_t *)v2;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v19;
        unint64_t v21 = v19[1];
        sub_1001D7700((uint64_t)v20);
        swift_bridgeObjectRetain();
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v23, v24))
        {
          id v25 = (uint8_t *)swift_slowAlloc();
          uint64_t v79 = swift_slowAlloc();
          *(_DWORD *)id v25 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v78 = sub_1000A2E70(v22, v21, &v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Request has already been removed. Ignoring: %{public}s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v73 + 8))(v77, v72);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v20, v72);
        }
      }
      else
      {
        sub_1000C9DB4((uint64_t)v19);
      }
    }
    return swift_errorRelease();
  }
  else
  {
    id v26 = v18;
    uint64_t v70 = v11;
    double v27 = *(void (**)(char *, uint64_t))(v16 + 8);
    v27((char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
    id v71 = v26;
    id v28 = [v26 answer];

    if (v28)
    {
      sub_1001D7700((uint64_t)v13);
      id v29 = a2;
      Class v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      int v32 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v33 = swift_slowAlloc();
        LODWORD(v75) = v32;
        id v34 = (uint8_t *)v33;
        NSString v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = (uint64_t *)v35;
        v69[1] = v69;
        id v80 = v35;
        uint64_t v77 = v13;
        id v74 = v34;
        *(_DWORD *)id v34 = 136446210;
        uint64_t v70 = v34 + 4;
        __chkstk_darwin(v35);
        id v36 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        id v37 = [v29 associatedRequestIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10020D2E4((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
        id v39 = v27;
        unint64_t v41 = v40;
        v39(v36, v15);
        uint64_t v79 = sub_1000A2E70(v38, v41, (uint64_t *)&v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v75, "Request has already been answered. Ignoring: %{public}s", v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v77, v72);
      }
      else
      {

        return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v13, v72);
      }
    }
    else
    {
      uint64_t v43 = a2;
      id v44 = [a2 respondingUserDSID];
      sub_1001DE3B0(v44);
      int v46 = v45;
      uint64_t v47 = (char *)sub_10020B2D4(v45);
      id v48 = v71;
      uint64_t v77 = v47;
      [v71 setRespondingUser:v47];
      id v49 = [a2 amountGranted];
      [v48 setAmountGranted:v49];

      id v50 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v43, "answer"));
      [v48 setAnswer:v50];

      id v51 = [v43 timeStamp];
      uint64_t v52 = type metadata accessor for Date();
      uint64_t v53 = *(void *)(v52 - 8);
      __chkstk_darwin(v52);
      uint64_t v55 = v48;
      unint64_t v56 = (char *)v69 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v52);
      [v55 setResponseTimeStamp:isa];

      uint64_t v58 = (uint64_t)v70;
      sub_1001D7700((uint64_t)v70);
      id v59 = v55;
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.default.getter();
      int v62 = v61;
      if (os_log_type_enabled(v60, v61))
      {
        LODWORD(v75) = v62;
        id v63 = (uint8_t *)swift_slowAlloc();
        id v74 = (uint8_t *)swift_slowAlloc();
        id v80 = v74;
        *(_DWORD *)id v63 = 136446210;
        id v71 = v63 + 4;
        id v64 = [v59 description];
        uint64_t v76 = v46;
        id v65 = v64;
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v68 = v67;

        uint64_t v79 = sub_1000A2E70(v66, v68, (uint64_t *)&v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v75, "Updated request with response, approver %{public}s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (*(uint64_t (**)(uint8_t *, uint64_t))(v73 + 8))(v70, v72);
      }
      else
      {

        return (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v58, v72);
      }
    }
  }
}

void sub_1001F323C(uint64_t a1, void *a2, Swift::Int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v50 = (void *)a1;
  uint64_t v9 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v9);
  id v11 = (void *)((char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v45 - v16;
  id v18 = sub_10020CFD4(a2);
  if (v4) {
    goto LABEL_2;
  }
  id v48 = v18;
  uint64_t v49 = v12;
  id v24 = [v18 answer];

  if (v24)
  {
    sub_1001D7700((uint64_t)v17);
    uint64_t v25 = type metadata accessor for UUID();
    id v50 = v45;
    uint64_t v26 = *(void *)(v25 - 8);
    __chkstk_darwin(v25);
    id v28 = (char *)v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void *, uint64_t))(v26 + 16))(v28, a2, v25);
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v54 = v47;
      int v46 = v31;
      *(_DWORD *)os_log_type_t v31 = 136446210;
      v45[1] = v31 + 4;
      sub_10020D2E4((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = sub_1000A2E70(v32, v33, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Request has already been answered. Ignoring: %{public}s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    }

    (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v49);
    return;
  }
  id v34 = sub_10020B2D4(0);
  NSString v35 = v34;
  id v36 = v48;
  [v48 setRespondingUser:v34];
  if (a3)
  {
LABEL_18:
    Swift::Int v37 = a3;
    uint64_t v38 = v35;
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void *)(v39 - 8);
    __chkstk_darwin(v39);
    char v42 = (char *)v45 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
    [v36 setResponseTimeStamp:isa];

    sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
    Class v44 = NSNumber.init(integerLiteral:)(v37).super.super.isa;
    [v36 setAnswer:v44];

    return;
  }
  uint64_t v12 = v49;
  if (a4)
  {
    id v36 = v48;
    [v48 setAmountGranted:a4];
    goto LABEL_18;
  }
  sub_1000AA560();
  uint64_t v5 = swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();

LABEL_2:
  uint64_t v54 = v5;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      swift_errorRelease();
      uint64_t v20 = *v11;
      unint64_t v19 = v11[1];
      sub_1001D7700((uint64_t)v15);
      swift_bridgeObjectRetain();
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v50 = (void *)v20;
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        uint64_t v49 = v12;
        *(_DWORD *)uint64_t v23 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_1000A2E70((uint64_t)v50, v19, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Request has already been removed. Ignoring: %{public}s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v51 + 8))(v15, v49);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v15, v12);
      }
    }
    else
    {
      sub_1000C9DB4((uint64_t)v11);
    }
  }
  swift_errorRelease();
}

void sub_1001F39BC(void *a1)
{
  unint64_t v2 = (unint64_t)[self fetchRequestMatchingUnexpiredOneMoreMinuteBlueprints];
  v40[0] = 0;
  id v3 = [(id)v2 execute:v40];
  id v4 = v40[0];
  if (v3)
  {
    uint64_t v5 = v3;
    sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v4;

    if (v6 >> 62) {
      goto LABEL_50;
    }
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
      while (1)
      {
        unint64_t v9 = 0;
        unint64_t v36 = v6 & 0xC000000000000001;
        unint64_t v31 = v6 + 32;
        uint64_t v32 = v6 & 0xFFFFFFFFFFFFFF8;
        unint64_t v34 = v6;
        unint64_t v35 = v2;
        uint64_t v33 = v8;
        while (1)
        {
          if (v36)
          {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v9 >= *(void *)(v32 + 16)) {
              goto LABEL_49;
            }
            id v11 = *(id *)(v31 + 8 * v9);
          }
          uint64_t v10 = v11;
          if (__OFADD__(v9++, 1)) {
            goto LABEL_48;
          }
          id v13 = [v11 configurations];
          if (v13) {
            break;
          }
LABEL_6:

          if (v9 == v8) {
            goto LABEL_51;
          }
        }
        uint64_t v14 = v13;
        unint64_t v38 = v9;
        unint64_t v6 = sub_1000A0760(0, (unint64_t *)&qword_100340F90);
        sub_1000AA614(&qword_1003453B0, (unint64_t *)&qword_100340F90);
        uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::Int v37 = v10;
        if ((v15 & 0xC000000000000001) != 0)
        {
          __CocoaSet.makeIterator()();
          Set.Iterator.init(_cocoa:)();
          uint64_t v15 = (uint64_t)v40[1];
          uint64_t v39 = v40[2];
          uint64_t v16 = (uint64_t)v40[3];
          id v17 = v40[4];
          unint64_t v2 = (unint64_t)v40[5];
        }
        else
        {
          id v17 = 0;
          uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
          uint64_t v39 = (void *)(v15 + 56);
          uint64_t v16 = ~v18;
          uint64_t v19 = -v18;
          uint64_t v20 = v19 < 64 ? ~(-1 << v19) : -1;
          unint64_t v2 = v20 & *(void *)(v15 + 56);
        }
        int64_t v21 = (unint64_t)(v16 + 64) >> 6;
        while (v15 < 0)
        {
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_5;
          }
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v22 = v40[0];
          swift_unknownObjectRelease();
          id v24 = (char *)v17;
          unint64_t v6 = v2;
          if (!v22) {
            goto LABEL_5;
          }
LABEL_43:
          id v28 = [v22 cemConfiguration];
          if (v28)
          {
            id v29 = v28;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            id v22 = v29;
          }

          id v17 = v24;
          unint64_t v2 = v6;
        }
        if (v2) {
          break;
        }
        uint64_t v25 = (uint64_t)v17 + 1;
        if (!__OFADD__(v17, 1))
        {
          if (v25 >= v21) {
            goto LABEL_5;
          }
          unint64_t v26 = v39[v25];
          id v24 = (char *)v17 + 1;
          if (!v26)
          {
            id v24 = (char *)v17 + 2;
            if ((uint64_t)v17 + 2 >= v21) {
              goto LABEL_5;
            }
            unint64_t v26 = v39[(void)v24];
            if (!v26)
            {
              id v24 = (char *)v17 + 3;
              if ((uint64_t)v17 + 3 >= v21) {
                goto LABEL_5;
              }
              unint64_t v26 = v39[(void)v24];
              if (!v26)
              {
                id v24 = (char *)v17 + 4;
                if ((uint64_t)v17 + 4 >= v21) {
                  goto LABEL_5;
                }
                unint64_t v26 = v39[(void)v24];
                if (!v26)
                {
                  uint64_t v27 = (char *)v17 + 5;
                  while ((char *)v21 != v27)
                  {
                    unint64_t v26 = v39[(void)v27++];
                    if (v26)
                    {
                      id v24 = v27 - 1;
                      goto LABEL_41;
                    }
                  }
LABEL_5:
                  sub_1000AA60C();
                  unint64_t v6 = v34;
                  unint64_t v2 = v35;
                  uint64_t v8 = v33;
                  uint64_t v10 = v37;
                  unint64_t v9 = v38;
                  goto LABEL_6;
                }
              }
            }
          }
LABEL_41:
          unint64_t v6 = (v26 - 1) & v26;
          unint64_t v23 = __clz(__rbit64(v26)) + ((void)v24 << 6);
          goto LABEL_42;
        }
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v8) {
          goto LABEL_51;
        }
      }
      unint64_t v6 = (v2 - 1) & v2;
      unint64_t v23 = __clz(__rbit64(v2)) | ((void)v17 << 6);
      id v24 = (char *)v17;
LABEL_42:
      id v22 = *(id *)(*(void *)(v15 + 48) + 8 * v23);
      if (!v22) {
        goto LABEL_5;
      }
      goto LABEL_43;
    }
LABEL_51:

    swift_bridgeObjectRelease();
  }
  else
  {
    id v30 = v40[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1001F3E90()
{
  id v0 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
}

void sub_1001F3F0C(void *a1, void *a2)
{
  id v3 = v2;
  uint64_t v78 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v77 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v65 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  id v89 = (char *)&v65 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v65 - v14;
  sub_1001D7700((uint64_t)&v65 - v14);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Beginning Update of a user device state.", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v15, v5);
  id v20 = sub_1001D7640();
  __chkstk_darwin(v20);
  *(&v65 - 2) = (uint64_t)a1;
  *(&v65 - 1) = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v2)
  {

    return;
  }
  uint64_t v75 = v5;
  id v76 = a1;

  int64_t v21 = (void *)v82;
  uint64_t v22 = v83;
  uint64_t v73 = v84;
  uint64_t v74 = v85;
  uint64_t v23 = v86;
  uint64_t v72 = v87;
  if ((v88 & 1) == 0)
  {
    unint64_t v38 = v82;
    sub_1001D7700((uint64_t)v89);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Ignoring user device state from family member because local user is not a parent.", v41, 2u);
      swift_slowDealloc();
      char v42 = v72;
    }
    else
    {
      char v42 = v39;
      uint64_t v39 = v38;
      unint64_t v38 = v72;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v46 = v89;
    goto LABEL_29;
  }
  sub_1001D7700((uint64_t)v11);
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    id v89 = 0;
    *(_WORD *)unint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Retrieving user information for updating user device state.", v26, 2u);
    id v3 = v89;
    swift_slowDealloc();
  }

  v19(v11, v75);
  uint64_t v27 = v78;
  if (!v78[2])
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v28 = sub_10010A024(1919251317, 0xE400000000000000);
  if ((v29 & 1) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  sub_1000A4F78(v27[7] + 32 * v28, (uint64_t)v81);
  sub_1000B8B44(v81, &v82);
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  swift_dynamicCast();
  if (!v27[2])
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  id v30 = v79;
  uint64_t v31 = sub_10010A024(0x656369766564, 0xE600000000000000);
  if ((v32 & 1) == 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  sub_1000A4F78(v27[7] + 32 * v31, (uint64_t)v81);
  sub_1000B8B44(v81, &v82);
  sub_10009EE78(&qword_100341F28);
  swift_dynamicCast();
  uint64_t v33 = v79;
  if (!v79[2])
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v34 = sub_10010A024(0x696669746E656469, 0xEA00000000007265);
  if (v35)
  {
    sub_1000A4F78(v33[7] + 32 * v34, (uint64_t)v81);
    sub_1000B8B44(v81, &v82);
    swift_dynamicCast();
    uint64_t v70 = (uint8_t *)v79;
    id v89 = v80;
    if (v33[2] && (uint64_t v36 = sub_10010A024(0xD000000000000012, 0x8000000100295E00), (v37 & 1) != 0))
    {
      sub_1000A4F78(v33[7] + 32 * v36, (uint64_t)&v82);
    }
    else
    {
      long long v82 = 0u;
      long long v83 = 0u;
    }
    uint64_t v71 = v23;
    swift_bridgeObjectRelease();
    if (*((void *)&v83 + 1))
    {
      int v43 = swift_dynamicCast();
      if (v43) {
        uint64_t v44 = *(void *)&v81[0];
      }
      else {
        uint64_t v44 = 0;
      }
      if (v43) {
        unint64_t v45 = *((void *)&v81[0] + 1);
      }
      else {
        unint64_t v45 = 0;
      }
    }
    else
    {
      sub_1000A4FD8((uint64_t)&v82, &qword_100341CD8);
      uint64_t v44 = 0;
      unint64_t v45 = 0;
    }
    uint64_t v47 = (uint64_t)v76;
    sub_1001DE3B0(v30);
    if (v3)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_33:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v67 = v22;
    id v69 = v30;
    uint64_t v49 = v48;
    id v50 = sub_1001D7640();
    unint64_t v68 = &v65;
    __chkstk_darwin(v50);
    *(&v65 - 2) = v47;
    *(&v65 - 1) = (uint64_t)v49;
    NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v66 = v49;

    if (v82)
    {
      uint64_t v51 = v66;
      uint64_t v52 = sub_1001F69E4(v66, (uint64_t)v70, v89, v44, v45);
      id v53 = v69;
      int v62 = v52;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10023BA40((uint64_t)v78);
      id v63 = v53;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v62 updateWithDictionaryRepresentation:isa];

      goto LABEL_33;
    }
    uint64_t v78 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v54 = v77;
    sub_1001D7700(v77);
    id v55 = v69;
    unint64_t v56 = (char *)Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    id v89 = v56;
    if (os_log_type_enabled((os_log_t)v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      id v59 = (void *)swift_slowAlloc();
      uint64_t v70 = v58;
      *(_DWORD *)uint64_t v58 = 138412290;
      id v69 = v58 + 4;
      *(void *)&long long v82 = v55;
      id v60 = v55;
      uint64_t v54 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v59 = v55;
      id v76 = v60;

      os_log_type_t v61 = v89;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v89, v57, "Ignoring user device state from family member because sender %@ is not currently managed.", v70, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    int v46 = (char *)v54;
LABEL_29:
    v19(v46, v75);
    return;
  }
LABEL_45:
  __break(1u);
}

void sub_1001F49E8(uint64_t a1, void *a2, void *a3, char *a4, char *a5)
{
  uint64_t v215 = a4;
  v216 = a5;
  id v214 = a3;
  long long v217 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)v188 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v188 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v188 - v15;
  id v17 = sub_1001D7640();
  uint64_t v218 = a1;
  uint64_t v219 = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v5)
  {

    return;
  }
  long long v204 = v14;
  v205 = v11;
  uint64_t v212 = 0;
  uint64_t v213 = a1;
  uint64_t v206 = v8;
  uint64_t v207 = v7;

  uint64_t v208 = v222[0];
  uint64_t v209 = v222[2];
  uint64_t v18 = v222[6];
  uint64_t v19 = v222[8];
  uint64_t v210 = v222[4];
  uint64_t v211 = v222[9];
  if ((v223 & 1) == 0)
  {
    sub_1001D7700((uint64_t)v16);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Ignoring user device state from family memeber because local user is not a parent.", v25, 2u);
      swift_slowDealloc();
      unint64_t v26 = v211;
      uint64_t v27 = v208;
    }
    else
    {
      unint64_t v26 = v23;
      uint64_t v23 = v208;
      uint64_t v27 = v211;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v206 + 8))(v16, v207);
    return;
  }
  id v20 = sub_1001D7640();
  __chkstk_darwin(v20);
  int64_t v21 = v217;
  uint64_t v22 = v212;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v22)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }

  if ((v222[0] & 1) == 0)
  {
    uint64_t v28 = (uint64_t)v204;
    sub_1001D7700((uint64_t)v204);
    char v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Ignoring user device state from family member because sender is not currently managed.", v31, 2u);
      swift_slowDealloc();
      char v32 = v211;
      uint64_t v33 = v208;
    }
    else
    {
      char v32 = v29;
      char v29 = v208;
      uint64_t v33 = v211;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v28, v207);
    return;
  }
  uint64_t v34 = sub_1001F69E4(v21, (uint64_t)v214, v215, 0, 0);
  uint64_t v196 = (uint64_t *)[objc_allocWithZone((Class)NSMutableSet) init];
  v189 = v34;
  id v35 = [v34 installedApps];
  if (!v35) {
    goto LABEL_184;
  }
  uint64_t v36 = v35;
  uint64_t v212 = 0;
  uint64_t v37 = sub_1000A0760(0, (unint64_t *)&unk_100343A60);
  uint64_t v38 = sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
  uint64_t v39 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  os_log_type_t v40 = v216;
  uint64_t v194 = v37;
  v188[1] = v38;
  if ((v39 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v39 = v224;
    id v193 = v225;
    uint64_t v41 = v226;
    uint64_t v42 = v227;
    unint64_t v43 = v228;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v44 = -1 << *(unsigned char *)(v39 + 32);
    uint64_t v45 = *(void *)(v39 + 56);
    id v193 = (void (**)(uint64_t, uint64_t))(v39 + 56);
    uint64_t v46 = ~v44;
    uint64_t v47 = -v44;
    if (v47 < 64) {
      uint64_t v48 = ~(-1 << v47);
    }
    else {
      uint64_t v48 = -1;
    }
    unint64_t v43 = v48 & v45;
    uint64_t v41 = v46;
  }
  v188[3] = v41;
  id v191 = (id)(v39 & 0x7FFFFFFFFFFFFFFFLL);
  *(void *)&long long v192 = (unint64_t)(v41 + 64) >> 6;
  uint64_t v190 = (char *)&type metadata for Swift.AnyObject + 8;
  v188[4] = v19;
  v188[2] = v18;
  v195 = (char *)v39;
  while (v39 < 0)
  {
    uint64_t v56 = __CocoaSet.Iterator.next()();
    if (!v56) {
      goto LABEL_71;
    }
    uint64_t v220 = (void *)v56;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v57 = (id)v222[0];
    swift_unknownObjectRelease();
    uint64_t v53 = v42;
    uint64_t v54 = v43;
LABEL_46:
    if (!v57) {
      goto LABEL_71;
    }
    long long v217 = (void *)v54;
    id v61 = [v57 bundleIdentifier];
    if (v61)
    {
      int v62 = v61;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v203 = v63;

      id v64 = [v57 displayName];
      if (v64)
      {
        uint64_t v65 = v64;
        uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v202 = 0;
      }
      id v66 = [v57 iconData];
      if (v66)
      {
        uint64_t v67 = v66;
        uint64_t v197 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v69 = v68;
      }
      else
      {
        uint64_t v197 = 0;
        unint64_t v69 = 0xF000000000000000;
      }
      id v70 = [v57 distributorID];
      if (v70)
      {
        uint64_t v71 = v70;
        int64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v73 = v72;
      }
      else
      {
        int64_t v198 = 0;
        uint64_t v73 = 0;
      }
      LODWORD(v199) = [v57 distributorIsThirdParty];
      id v74 = [v57 adamID];
      if (v74)
      {
        uint64_t v75 = v74;
        long long v201 = (char *)[v74 unsignedLongLongValue];
      }
      else
      {
        long long v201 = 0;
      }
      id v76 = [v57 versionIdentifier];
      long long v204 = (char *)v53;
      if (v76)
      {
        uint64_t v77 = v76;
        id v200 = [v76 unsignedLongLongValue];
      }
      else
      {
        id v200 = 0;
      }
      id v78 = [v57 betaVersionIdentifier];
      if (v78)
      {
        uint64_t v79 = v78;
        id v80 = [v78 unsignedLongLongValue];
      }
      else
      {
        id v80 = 0;
      }
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v69 >> 60 == 15)
      {
        Class isa = 0;
        uint64_t v84 = v199;
        if (!v73) {
          goto LABEL_70;
        }
      }
      else
      {
        unint64_t v85 = v69;
        uint64_t v86 = v197;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1000FD918(v86, v85);
        uint64_t v84 = v199;
        if (!v73)
        {
LABEL_70:
          NSString v49 = 0;
          goto LABEL_24;
        }
      }
      NSString v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
LABEL_24:
      id v50 = objc_allocWithZone((Class)STAppInformation);
      id v51 = [v50 initWithBundleIdentifier:v81 displayName:v82 iconData:isa distributorID:v49 distributorIsThirdParty:v84 adamID:v201 versionIdentifier:v200 betaVersionIdentifier:v80];

      id v52 = v51;
      [v196 addObject:v52];

      os_log_type_t v40 = v216;
      uint64_t v39 = (uint64_t)v195;
      uint64_t v53 = (uint64_t)v204;
    }

    uint64_t v42 = v53;
    unint64_t v43 = (unint64_t)v217;
  }
  if (v43)
  {
    uint64_t v54 = (v43 - 1) & v43;
    unint64_t v55 = __clz(__rbit64(v43)) | (v42 << 6);
    uint64_t v53 = v42;
LABEL_45:
    id v57 = *(id *)(*(void *)(v39 + 48) + 8 * v55);
    goto LABEL_46;
  }
  uint64_t v58 = v42 + 1;
  if (__OFADD__(v42, 1))
  {
    __break(1u);
    goto LABEL_181;
  }
  if (v58 >= (uint64_t)v192) {
    goto LABEL_71;
  }
  unint64_t v59 = (unint64_t)v193[v58];
  uint64_t v53 = v42 + 1;
  if (v59) {
    goto LABEL_44;
  }
  uint64_t v53 = v42 + 2;
  if (v42 + 2 >= (uint64_t)v192) {
    goto LABEL_71;
  }
  unint64_t v59 = (unint64_t)v193[v53];
  if (v59) {
    goto LABEL_44;
  }
  uint64_t v53 = v42 + 3;
  if (v42 + 3 >= (uint64_t)v192) {
    goto LABEL_71;
  }
  unint64_t v59 = (unint64_t)v193[v53];
  if (v59) {
    goto LABEL_44;
  }
  uint64_t v53 = v42 + 4;
  if (v42 + 4 >= (uint64_t)v192) {
    goto LABEL_71;
  }
  unint64_t v59 = (unint64_t)v193[v53];
  if (v59)
  {
LABEL_44:
    uint64_t v54 = (v59 - 1) & v59;
    unint64_t v55 = __clz(__rbit64(v59)) + (v53 << 6);
    goto LABEL_45;
  }
  uint64_t v60 = v42 + 5;
  while ((void)v192 != v60)
  {
    unint64_t v59 = (unint64_t)v193[v60++];
    if (v59)
    {
      uint64_t v53 = v60 - 1;
      goto LABEL_44;
    }
  }
LABEL_71:
  sub_1000AA60C();
  unint64_t v87 = v196;
  uint64_t v88 = v212;
  id v89 = (void *)sub_1001F6108(v40, v196, (uint64_t)v214, (uint64_t)v215, 1);
  if (v88)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  id v191 = v89;
  id v90 = [v89 apps];
  uint64_t v91 = sub_1000A0760(0, &qword_100345330);
  sub_1000AA614(&qword_100345338, &qword_100345330);
  uint64_t v92 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v92 & 0xC000000000000001) != 0) {
    uint64_t v93 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v93 = *(void *)(v92 + 16);
  }
  uint64_t v212 = 0;
  swift_bridgeObjectRelease();
  id v214 = [objc_allocWithZone((Class)NSMutableDictionary) initWithCapacity:v93];
  id v94 = [v191 apps];
  uint64_t v95 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  long long v204 = (char *)v91;
  if ((v95 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v95 = v229;
    long long v217 = v230;
    uint64_t v96 = v231;
    uint64_t v97 = v232;
    unint64_t v98 = v233;
  }
  else
  {
    uint64_t v97 = 0;
    uint64_t v99 = -1 << *(unsigned char *)(v95 + 32);
    uint64_t v100 = *(void *)(v95 + 56);
    long long v217 = (void *)(v95 + 56);
    uint64_t v101 = ~v99;
    uint64_t v102 = -v99;
    if (v102 < 64) {
      uint64_t v103 = ~(-1 << v102);
    }
    else {
      uint64_t v103 = -1;
    }
    unint64_t v98 = v103 & v100;
    uint64_t v96 = v101;
  }
  uint64_t v203 = v96;
  v216 = (char *)((unint64_t)(v96 + 64) >> 6);
  uint64_t v215 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v95 < 0) {
    goto LABEL_85;
  }
LABEL_83:
  if (v98)
  {
    uint64_t v104 = (v98 - 1) & v98;
    unint64_t v105 = __clz(__rbit64(v98)) | ((void)v97 << 6);
    uint64_t v106 = v97;
LABEL_101:
    id v108 = *(id *)(*(void *)(v95 + 48) + 8 * v105);
    while (v108)
    {
      id v112 = [v108 bundleIdentifier];
      uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v115 = v114;

      v222[0] = v113;
      v222[1] = v115;
      id v116 = v108;
      swift_bridgeObjectRetain();
      objc_msgSend(v214, "__swift_setObject:forKeyedSubscript:", v116, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      uint64_t v97 = v106;
      unint64_t v98 = v104;
      if ((v95 & 0x8000000000000000) == 0) {
        goto LABEL_83;
      }
LABEL_85:
      uint64_t v107 = __CocoaSet.Iterator.next()();
      if (!v107) {
        break;
      }
      uint64_t v220 = (void *)v107;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v108 = (id)v222[0];
      swift_unknownObjectRelease();
      uint64_t v106 = v97;
      uint64_t v104 = v98;
    }
  }
  else
  {
    uint64_t v109 = (uint64_t)(v97 + 1);
    if (__OFADD__(v97, 1)) {
      goto LABEL_182;
    }
    if (v109 < (uint64_t)v216)
    {
      unint64_t v110 = *((void *)v217 + v109);
      uint64_t v106 = v97 + 1;
      if (v110) {
        goto LABEL_100;
      }
      uint64_t v106 = v97 + 2;
      if ((uint64_t)(v97 + 2) >= (uint64_t)v216) {
        goto LABEL_105;
      }
      unint64_t v110 = *((void *)v217 + (void)v106);
      if (v110) {
        goto LABEL_100;
      }
      uint64_t v106 = v97 + 3;
      if ((uint64_t)(v97 + 3) >= (uint64_t)v216) {
        goto LABEL_105;
      }
      unint64_t v110 = *((void *)v217 + (void)v106);
      if (v110) {
        goto LABEL_100;
      }
      uint64_t v106 = v97 + 4;
      if ((uint64_t)(v97 + 4) >= (uint64_t)v216) {
        goto LABEL_105;
      }
      unint64_t v110 = *((void *)v217 + (void)v106);
      if (v110)
      {
LABEL_100:
        uint64_t v104 = (v110 - 1) & v110;
        unint64_t v105 = __clz(__rbit64(v110)) + ((void)v106 << 6);
        goto LABEL_101;
      }
      uint64_t v111 = v97 + 5;
      while (v216 != v111)
      {
        unint64_t v110 = *((void *)v217 + (void)v111++);
        if (v110)
        {
          uint64_t v106 = v111 - 1;
          goto LABEL_100;
        }
      }
    }
  }
LABEL_105:
  sub_1000AA60C();
  id v117 = [v189 installedApps];
  if (!v117) {
    goto LABEL_185;
  }
  uint64_t v118 = v117;
  uint64_t v119 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v121 = (uint64_t)v205;
  id v122 = v214;
  if ((v119 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v119 = v234;
    uint64_t v199 = v235;
    Class v123 = v236;
    uint64_t v124 = v237;
    unint64_t v125 = v238;
  }
  else
  {
    uint64_t v124 = 0;
    uint64_t v126 = -1 << *(unsigned char *)(v119 + 32);
    uint64_t v127 = *(void *)(v119 + 56);
    uint64_t v199 = v119 + 56;
    uint64_t v128 = ~v126;
    uint64_t v129 = -v126;
    if (v129 < 64) {
      uint64_t v130 = ~(-1 << v129);
    }
    else {
      uint64_t v130 = -1;
    }
    unint64_t v125 = v130 & v127;
    Class v123 = (char *)v128;
  }
  uint64_t v190 = v123;
  uint64_t v197 = v119 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v198 = (unint64_t)(v123 + 64) >> 6;
  id v193 = (void (**)(uint64_t, uint64_t))(v206 + 8);
  long long v201 = (char *)&type metadata for Any + 8;
  *(void *)&long long v120 = 138412290;
  long long v192 = v120;
  v195 = (char *)&type metadata for Swift.AnyObject + 8;
  id v200 = (id)v119;
  while (2)
  {
    if (v119 < 0)
    {
      uint64_t v135 = __CocoaSet.Iterator.next()();
      if (!v135) {
        goto LABEL_166;
      }
      uint64_t v220 = (void *)v135;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v136 = (char *)v222[0];
      swift_unknownObjectRelease();
      unint64_t v137 = v136;
      uint64_t v132 = v124;
      uint64_t v133 = v125;
    }
    else
    {
      if (v125)
      {
        uint64_t v133 = (v125 - 1) & v125;
        unint64_t v134 = __clz(__rbit64(v125)) | (v124 << 6);
        uint64_t v132 = v124;
      }
      else
      {
        int64_t v138 = v124 + 1;
        if (__OFADD__(v124, 1)) {
          goto LABEL_183;
        }
        if (v138 >= v198) {
          goto LABEL_166;
        }
        unint64_t v139 = *(void *)(v199 + 8 * v138);
        uint64_t v132 = v124 + 1;
        if (!v139)
        {
          uint64_t v132 = v124 + 2;
          if (v124 + 2 >= v198) {
            goto LABEL_166;
          }
          unint64_t v139 = *(void *)(v199 + 8 * v132);
          if (!v139)
          {
            uint64_t v132 = v124 + 3;
            if (v124 + 3 >= v198) {
              goto LABEL_166;
            }
            unint64_t v139 = *(void *)(v199 + 8 * v132);
            if (!v139)
            {
              uint64_t v132 = v124 + 4;
              if (v124 + 4 >= v198) {
                goto LABEL_166;
              }
              unint64_t v139 = *(void *)(v199 + 8 * v132);
              if (!v139)
              {
                uint64_t v140 = v124 + 5;
                while (v198 != v140)
                {
                  unint64_t v139 = *(void *)(v199 + 8 * v140++);
                  if (v139)
                  {
                    uint64_t v132 = v140 - 1;
                    goto LABEL_134;
                  }
                }
LABEL_166:
                sub_1000AA60C();
                id v170 = [v122 allValues];
                uint64_t v171 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v172 = *(void *)(v171 + 16);
                if (v172)
                {
                  long long v217 = (void *)v171;
                  uint64_t v173 = v171 + 32;
                  id v174 = v211;
                  do
                  {
                    sub_1000A4F78(v173, (uint64_t)v222);
                    if (swift_dynamicCast())
                    {
                      v179 = v220;
                      id v180 = sub_1001D7640();
                      id v181 = [objc_allocWithZone((Class)STInstalledApp) initWithContext:v180];

                      NSString v182 = [v179 bundleIdentifier];
                      if (!v182)
                      {
                        static String._unconditionallyBridgeFromObjectiveC(_:)();
                        NSString v182 = String._bridgeToObjectiveC()();
                        swift_bridgeObjectRelease();
                      }
                      [v181 setBundleIdentifier:v182];

                      [v181 setUserDeviceState:v189];
                      NSString v183 = [v179 displayName];
                      if (!v183)
                      {
                        static String._unconditionallyBridgeFromObjectiveC(_:)();
                        NSString v183 = String._bridgeToObjectiveC()();
                        swift_bridgeObjectRelease();
                      }
                      [v181 setDisplayName:v183];

                      Class v184 = (Class)[v179 iconData];
                      if (v184)
                      {
                        uint64_t v185 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v187 = v186;

                        Class v184 = Data._bridgeToObjectiveC()().super.isa;
                        sub_1000A0168(v185, v187);
                      }
                      [v181 setIconData:v184];

                      id v175 = [v179 distributorID];
                      [v181 setDistributorID:v175];

                      objc_msgSend(v181, "setDistributorIsThirdParty:", objc_msgSend(v179, "distributorIsThirdParty"));
                      [v179 adamID];
                      Class v176 = UInt64._bridgeToObjectiveC()().super.super.isa;
                      [v181 setAdamID:v176];

                      [v179 versionIdentifier];
                      Class v177 = UInt64._bridgeToObjectiveC()().super.super.isa;
                      [v181 setVersionIdentifier:v177];

                      [v179 betaVersionIdentifier];
                      Class v178 = UInt64._bridgeToObjectiveC()().super.super.isa;
                      [v181 setBetaVersionIdentifier:v178];

                      id v174 = v211;
                    }
                    v173 += 32;
                    --v172;
                  }
                  while (v172);

                  swift_bridgeObjectRelease();
                }
                else
                {

                  swift_bridgeObjectRelease();
                  id v174 = v211;
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return;
              }
            }
          }
        }
LABEL_134:
        uint64_t v133 = (v139 - 1) & v139;
        unint64_t v134 = __clz(__rbit64(v139)) + (v132 << 6);
      }
      unint64_t v137 = (char *)*(id *)(*(void *)(v119 + 48) + 8 * v134);
    }
    if (!v137) {
      goto LABEL_166;
    }
    v216 = v137;
    id v141 = [v137 bundleIdentifier];
    if (!v141)
    {
LABEL_115:

      uint64_t v124 = v132;
      unint64_t v125 = v133;
      continue;
    }
    break;
  }
  id v142 = v141;
  uint64_t v203 = v133;
  uint64_t v206 = v132;
  uint64_t v215 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v217 = v143;
  id v144 = [v122 allKeys];
  uint64_t v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v146 = *(void *)(v145 + 16);
  if (v146)
  {
    uint64_t v202 = (uint64_t)v142;
    v239 = _swiftEmptyArrayStorage;
    sub_1002080AC(0, v146, 0);
    uint64_t v147 = v145 + 32;
    id v148 = v239;
    do
    {
      sub_1000A4F78(v147, (uint64_t)v222);
      swift_dynamicCast();
      v149 = v220;
      uint64_t v150 = v221;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002080AC(0, v148[2] + 1, 1);
        id v148 = v239;
      }
      unint64_t v152 = v148[2];
      unint64_t v151 = v148[3];
      if (v152 >= v151 >> 1)
      {
        sub_1002080AC(v151 > 1, v152 + 1, 1);
        id v148 = v239;
      }
      v148[2] = v152 + 1;
      id v153 = &v148[2 * v152];
      v153[4] = v149;
      v153[5] = v150;
      v147 += 32;
      --v146;
    }
    while (v146);
    swift_bridgeObjectRelease();
    uint64_t v154 = v207;
    uint64_t v121 = (uint64_t)v205;
    id v142 = (void *)v202;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v148 = _swiftEmptyArrayStorage;
    uint64_t v154 = v207;
  }
  uint64_t v155 = v148[2];
  if (!v155)
  {
    swift_bridgeObjectRelease();
    goto LABEL_162;
  }
  uint64_t v156 = v142;
  if ((char *)v148[4] == v215 && (void *)v148[5] == v217
    || (char v157 = _stringCompareWithSmolCheck(_:_:expecting:)(), v158 = v217, (v157 & 1) != 0))
  {
LABEL_113:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v122 = v214;
    id v131 = v156;
    [v214 removeObjectForKey:v156];
    uint64_t v121 = (uint64_t)v205;
LABEL_114:

    uint64_t v119 = (uint64_t)v200;
    uint64_t v132 = v206;
    uint64_t v133 = v203;
    goto LABEL_115;
  }
  if (v155 == 1)
  {
LABEL_160:
    swift_bridgeObjectRelease();
    uint64_t v121 = (uint64_t)v205;
    id v142 = v156;
LABEL_162:
    swift_bridgeObjectRelease();

    sub_1001D7700(v121);
    uint64_t v164 = v216;
    unint64_t v165 = v216;
    unint64_t v166 = Logger.logObject.getter();
    os_log_type_t v167 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v166, v167))
    {
      uint64_t v168 = swift_slowAlloc();
      os_log_type_t v169 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v168 = v192;
      *(void *)(v168 + 4) = v165;
      *os_log_type_t v169 = v164;
      _os_log_impl((void *)&_mh_execute_header, v166, v167, "Deleting installedApp %@", (uint8_t *)v168, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v166 = v165;
    }

    (*v193)(v121, v154);
    id v131 = sub_1001D7640();
    [v131 deleteObject:v165];
    id v122 = v214;
    goto LABEL_114;
  }
  id v159 = v148 + 7;
  uint64_t v160 = 1;
  while (1)
  {
    uint64_t v161 = v160 + 1;
    if (__OFADD__(v160, 1)) {
      break;
    }
    if ((char *)*(v159 - 1) == v215 && *v159 == (void)v158) {
      goto LABEL_113;
    }
    char v163 = _stringCompareWithSmolCheck(_:_:expecting:)();
    id v158 = v217;
    if (v163) {
      goto LABEL_113;
    }
    v159 += 2;
    ++v160;
    if (v161 == v155) {
      goto LABEL_160;
    }
  }
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
}

uint64_t sub_1001F6108(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = sub_1001E05E8(a3, a4, a5);
  if (v6) {
    return (uint64_t)v5;
  }
  uint64_t v10 = (void *)v9;
  uint64_t v72 = 0;
  NSString v11 = [a1 deviceName];
  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v10 setName:v11];

  uint64_t v12 = (char *)[a1 platform];
  if ((unint64_t)(v12 - 1) < 5) {
    __int16 v13 = (__int16)v12;
  }
  else {
    __int16 v13 = 0;
  }
  id v71 = v10;
  [v10 setPlatform:v13];
  id v14 = [a1 installedApps];
  uint64_t v15 = sub_1000A0760(0, &qword_100345330);
  uint64_t v16 = sub_1000AA614(&qword_100345338, &qword_100345330);
  uint64_t v76 = v15;
  uint64_t v75 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v74 = a1;
  id v17 = [a1 removedApps];
  sub_1000A0760(0, &qword_100345340);
  sub_1000AA614(&qword_100345348, &qword_100345340);
  uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v80 = (id)(v18 & 0xC000000000000001);
  if ((v18 & 0xC000000000000001) != 0)
  {
    uint64_t v19 = __CocoaSet.count.getter();
    uint64_t v73 = v16;
    if (v19) {
      goto LABEL_9;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v73 = v16;
  if (!v19) {
    goto LABEL_12;
  }
LABEL_9:
  unint64_t v85 = _swiftEmptyArrayStorage;
  sub_1002080AC(0, v19 & ~(v19 >> 63), 0);
  if (v80)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v22 = 1;
  }
  else
  {
    uint64_t result = sub_100209BDC(v18);
    char v22 = v24 & 1;
  }
  *(void *)&long long v81 = result;
  *((void *)&v81 + 1) = v21;
  char v82 = v22;
  if (v19 < 0) {
    goto LABEL_61;
  }
  uint64_t v25 = v18 & 0xFFFFFFFFFFFFFF8;
  if (v18 < 0) {
    uint64_t v25 = v18;
  }
  uint64_t v77 = v25;
  id v78 = a2;
  uint64_t v79 = v18;
  do
  {
    while (1)
    {
      long long v31 = v81;
      char v32 = v82;
      sub_100209968(v81, SDWORD2(v81), v82, v18, &qword_100345340);
      uint64_t v34 = v33;
      id v35 = [v33 bundleIdentifier];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      uint64_t v39 = v85;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1002080AC(0, v39[2] + 1, 1);
        uint64_t v39 = v85;
      }
      unint64_t v41 = v39[2];
      unint64_t v40 = v39[3];
      if (v41 >= v40 >> 1)
      {
        uint64_t result = sub_1002080AC(v40 > 1, v41 + 1, 1);
        uint64_t v39 = v85;
      }
      v39[2] = v41 + 1;
      uint64_t v42 = &v39[2 * v41];
      v42[4] = v36;
      v42[5] = v38;
      if (v80) {
        break;
      }
      uint64_t v18 = v79;
      int64_t v26 = sub_100209870(v31, SDWORD2(v31), v32, v79);
      uint64_t v28 = v27;
      char v30 = v29;
      sub_10019D864(v31, *((uint64_t *)&v31 + 1), v32);
      *(void *)&long long v81 = v26;
      *((void *)&v81 + 1) = v28;
      char v82 = v30 & 1;
      a2 = v78;
      if (!--v19) {
        goto LABEL_28;
      }
    }
    uint64_t v18 = v79;
    if ((v32 & 1) == 0) {
      goto LABEL_62;
    }
    a2 = v78;
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_10009EE78(&qword_100345350);
    unint64_t v43 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v43(&v83, 0);
    --v19;
  }
  while (v19);
LABEL_28:
  sub_10019D864(v81, *((uint64_t *)&v81 + 1), v82);
  swift_bridgeObjectRelease();
  uint64_t v23 = v85;
LABEL_29:
  [a2 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1000A0760(0, &qword_100345358);
  swift_dynamicCast();
  uint64_t v44 = (void *)v81;
  sub_1001D6CAC(v75);
  swift_bridgeObjectRelease();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(id)v81 unionSet:isa];

  uint64_t v77 = type metadata accessor for NSFastEnumerationIterator();
  id v78 = &v69;
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v47 = (char *)&v69 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v80 = v44;
  [v44 copy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1000A0760(0, &qword_100345360);
  swift_dynamicCast();
  uint64_t v48 = (void *)v81;
  NSSet.makeIterator()();

  NSFastEnumerationIterator.next()();
  if (!v84)
  {
LABEL_57:
    (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v77);
    swift_bridgeObjectRelease();
    id v61 = v74;
    id v62 = [v74 deviceID];
    id v63 = [v61 deviceName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v64 = [v61 platform];
    *(void *)&long long v83 = 0;
    id v65 = v80;
    uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)();
    if (!(void)v83) {
      goto LABEL_63;
    }

    id v66 = objc_allocWithZone((Class)STDevice);
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v68 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v5 = [v66 initWithID:v62 name:v67 platform:v64 apps:v68];

    return (uint64_t)v5;
  }
  id v70 = v23 + 9;
  uint64_t v79 = (uint64_t)&type metadata for Any + 8;
  while (1)
  {
    sub_1000B8B44(&v83, &v81);
    if (!swift_dynamicCast()) {
      goto LABEL_32;
    }
    id v49 = v85;
    id v50 = [v85 bundleIdentifier];
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;

    uint64_t v54 = v23[2];
    if (v54) {
      break;
    }

    swift_bridgeObjectRelease();
LABEL_32:
    NSFastEnumerationIterator.next()();
    if (!v84) {
      goto LABEL_57;
    }
  }
  unint64_t v55 = v23;
  BOOL v56 = v23[4] == v51 && v23[5] == v53;
  if (v56 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    [v80 removeObject:v49];

LABEL_41:
    uint64_t v23 = v55;
    goto LABEL_32;
  }
  if (v54 == 1) {
    goto LABEL_43;
  }
  if (v23[6] == v51 && v23[7] == v53) {
    goto LABEL_40;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    goto LABEL_40;
  }
  if (v54 == 2)
  {
LABEL_43:

    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  id v57 = v70;
  uint64_t v58 = 2;
  while (1)
  {
    uint64_t v59 = v58 + 1;
    if (__OFADD__(v58, 1)) {
      break;
    }
    if (*(v57 - 1) == v51 && *v57 == v53) {
      goto LABEL_40;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_40;
    }
    v57 += 2;
    ++v58;
    if (v59 == v54) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

char *sub_1001F69E4(void *a1, uint64_t a2, char *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v95 = a5;
  uint64_t v94 = a4;
  uint64_t v96 = a3;
  id v97 = (id)a2;
  uint64_t v7 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  id v17 = (char *)&v83 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v83 - v18;
  id v20 = sub_10020B2D4(a1);
  if (v5) {
    return v14;
  }
  uint64_t v91 = v9;
  uint64_t v92 = v11;
  uint64_t v88 = a1;
  uint64_t v89 = v7;
  uint64_t v84 = v14;
  unint64_t v85 = v17;
  uint64_t v86 = v19;
  uint64_t v87 = v10;
  id v90 = 0;
  uint64_t v21 = v20;
  id v93 = v20;
  id v22 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100286350;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v24 = sub_1000A5124();
  *(void *)(v23 + 64) = v24;
  *(void *)(v23 + 32) = 0x6973642E72657375;
  *(void *)(v23 + 40) = 0xE900000000000064;
  id v25 = [v21 dsid];
  *(void *)(v23 + 96) = sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  int64_t v26 = v22;
  uint64_t v27 = sub_1000AA614(&qword_100345328, (unint64_t *)&qword_100342AE0);
  *(void *)(v23 + 72) = v25;
  *(void *)(v23 + 136) = &type metadata for String;
  *(void *)(v23 + 144) = v24;
  *(void *)(v23 + 104) = v27;
  *(void *)(v23 + 112) = 0xD000000000000011;
  *(void *)(v23 + 120) = 0x8000000100295DC0;
  *(void *)(v23 + 176) = &type metadata for String;
  *(void *)(v23 + 184) = v24;
  id v14 = v96;
  uint64_t v28 = (uint64_t)v97;
  *(void *)(v23 + 152) = v97;
  *(void *)(v23 + 160) = v14;
  swift_bridgeObjectRetain();
  char v29 = NSPredicate.init(format:_:)();
  [v22 setPredicate:v29];

  uint64_t v100 = 0;
  id v30 = [v22 execute:&v100];
  long long v31 = v100;
  char v32 = v93;
  if (!v30)
  {
    uint64_t v42 = v100;
    _convertNSErrorToError(_:)();

LABEL_14:
    swift_willThrow();

    return v14;
  }
  uint64_t v33 = v30;
  sub_1000A0760(0, &qword_1003415E0);
  unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v35 = v31;

  if (v34 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v37 = (uint64_t)v91;
  uint64_t v38 = v92;
  if (v36 != 1)
  {
    swift_bridgeObjectRelease();
    if (v36)
    {
      sub_1000AA560();
      swift_allocError();
      unint64_t v43 = v88;
      void *v44 = v88;
      v44[1] = v28;
      v44[2] = v14;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      id v45 = v43;
      goto LABEL_14;
    }
    uint64_t v47 = v90;
    uint64_t v48 = sub_1001E05E8(v28, (uint64_t)v14, 1);
    if (v47)
    {
      uint64_t v100 = v47;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 36)
        {
          id v49 = v32;
          swift_errorRelease();
          sub_1000B3840(*(void *)v37, *(void *)(v37 + 8), *(unsigned char *)(v37 + 16));
          uint64_t v50 = (uint64_t)v84;
          sub_1001D7700((uint64_t)v84);
          swift_bridgeObjectRetain_n();
          uint64_t v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.default.getter();
          BOOL v53 = os_log_type_enabled(v51, v52);
          long long v83 = v26;
          if (v53)
          {
            uint64_t v54 = (uint8_t *)swift_slowAlloc();
            uint64_t v99 = swift_slowAlloc();
            *(_DWORD *)uint64_t v54 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v98 = sub_1000A2E70((uint64_t)v97, (unint64_t)v14, &v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v51, v52, "Creating CoreDevice for identifier: %{public}s", v54, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v38 + 8))(v84, v87);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v50, v87);
          }
          uint64_t v56 = (uint64_t)v86;
          id v57 = sub_1001D7640();
          id v58 = [objc_allocWithZone((Class)STCoreDevice) initWithContext:v57];

          id v59 = v58;
          NSString v60 = String._bridgeToObjectiveC()();
          [v59 setIdentifier:v60];
          id v97 = v59;

          swift_errorRelease();
          id v90 = 0;
          unint64_t v55 = v95;
LABEL_28:
          sub_1001D7700(v56);
          swift_bridgeObjectRetain_n();
          id v61 = v49;
          id v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v64 = swift_slowAlloc();
            id v65 = (void *)swift_slowAlloc();
            uint64_t v96 = (char *)swift_slowAlloc();
            uint64_t v100 = v96;
            *(_DWORD *)uint64_t v64 = 136446466;
            if (v55) {
              uint64_t v66 = v94;
            }
            else {
              uint64_t v66 = 0xD000000000000015;
            }
            if (v55) {
              unint64_t v67 = v55;
            }
            else {
              unint64_t v67 = 0x8000000100295DE0;
            }
            swift_bridgeObjectRetain();
            uint64_t v99 = sub_1000A2E70(v66, v67, (uint64_t *)&v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 12) = 2112;
            id v68 = [v61 dsid];
            uint64_t v99 = (uint64_t)v68;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v65 = v68;

            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Creating UserDeviceState for coreDuetIdentifier: %{public}s and user: %@", (uint8_t *)v64, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v69 = *(void (**)(char *, uint64_t))(v92 + 8);
            v69(v86, v87);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            uint64_t v69 = *(void (**)(char *, uint64_t))(v38 + 8);
            v69((char *)v56, v87);
          }
          id v70 = sub_1001D7640();
          id v71 = [objc_allocWithZone((Class)STUserDeviceState) initWithContext:v70];

          id v14 = (char *)v71;
          [v14 setUser:v61];
          [v14 setDevice:v97];
          if (v55)
          {
            sub_1001D7700((uint64_t)v85);
            uint64_t v72 = Logger.logObject.getter();
            os_log_type_t v73 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v72, v73))
            {
              id v74 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v74 = 0;
              _os_log_impl((void *)&_mh_execute_header, v72, v73, "A coreDuetIdentifier was not provided, so we will not update the user device state property for CoreDuetIdentifier.", v74, 2u);
              swift_slowDealloc();
            }

            v69(v85, v87);
            NSString v75 = String._bridgeToObjectiveC()();
            [v14 setCoreDuetIdentifier:v75];
          }
          unint64_t v41 = v97;
          if (!v88)
          {
            [v14 setLocalDevice:v97];
            [v61 setLocalUserDeviceState:v14];
          }

          id v76 = sub_1001D7640();
          id v77 = [objc_allocWithZone((Class)STUsage) initWithContext:v76];

          [v77 setDevice:v41];
          [v77 setUser:v61];
          uint64_t v78 = type metadata accessor for Date();
          uint64_t v79 = *(void *)(v78 - 8);
          __chkstk_darwin(v78);
          long long v81 = (char *)&v83 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
          static Date.now.getter();
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v78);
          [v77 setLastUpdatedDate:isa];

          char v32 = v83;
          goto LABEL_44;
        }

        sub_1000C9DB4(v37);
      }
      else
      {
      }
      swift_errorRelease();
      return v14;
    }
    id v97 = (id)v48;
    id v49 = v32;
    id v90 = 0;
    long long v83 = v26;
    unint64_t v55 = v95;
    uint64_t v56 = (uint64_t)v86;
    goto LABEL_28;
  }
  if ((v34 & 0xC000000000000001) != 0)
  {
    uint64_t v39 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    uint64_t v39 = (char *)*(id *)(v34 + 32);
  }
  id v14 = v39;
  swift_bridgeObjectRelease();
  id v40 = [v14 device];

  if (v40)
  {
    unint64_t v41 = v26;
LABEL_44:

    return v14;
  }
  sub_1000AA560();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();

  return v14;
}

id sub_1001F7658@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, unint64_t *a4@<X8>)
{
  id result = (id)sub_1001E05E8(a1, a2, a3);
  if (!v4)
  {
    uint64_t v7 = result;
    id result = [result localUserDeviceState];
    if (result)
    {
      uint64_t v8 = result;
      id v9 = [result dictionaryRepresentation];

      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = sub_1001F7730(v10);

      id result = (id)swift_bridgeObjectRelease();
      *a4 = v11;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_1001F7730(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_1003431A0);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v24 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)v35 + 8;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v13 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v13 >= v23) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v13);
  int64_t v15 = i + 1;
  if (!v14)
  {
    int64_t v15 = i + 2;
    if (i + 2 >= v23) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = i + 3;
      if (i + 3 >= v23) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = i + 4;
        if (i + 4 >= v23) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v15);
        if (!v14)
        {
          int64_t v16 = i + 5;
          if (i + 5 < v23)
          {
            unint64_t v14 = *(void *)(v24 + 8 * v16);
            if (v14)
            {
              int64_t v15 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v15 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_36;
              }
              if (v15 >= v23) {
                break;
              }
              unint64_t v14 = *(void *)(v24 + 8 * v15);
              ++v16;
              if (v14) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000AA60C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v14 - 1) & v14;
  unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
  for (i = v15; ; unint64_t v12 = v11 | (i << 6))
  {
    sub_10010B560(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v34);
    sub_1000A4F78(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v6);
    v32[0] = v35[0];
    v32[1] = v35[1];
    uint64_t v33 = v36;
    uint64_t v31[2] = v34[0];
    v31[3] = v34[1];
    swift_dynamicCast();
    sub_1000B8B44((_OWORD *)((char *)v32 + 8), v28);
    sub_1000B8B44(v28, v30);
    sub_1000B8B44(v30, v31);
    sub_1000B8B44(v31, &v29);
    unint64_t result = sub_10010A024(v26, v27);
    unint64_t v17 = result;
    if (v18)
    {
      uint64_t v8 = v6;
      id v9 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *id v9 = v26;
      v9[1] = v27;
      uint64_t v6 = v8;
      uint64_t v10 = (_OWORD *)(v2[7] + 32 * v17);
      sub_1000A4F28((uint64_t)v10);
      unint64_t result = (unint64_t)sub_1000B8B44(&v29, v10);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v19 = v26;
    v19[1] = v27;
    unint64_t result = (unint64_t)sub_1000B8B44(&v29, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v20 = v2[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_34;
    }
    v2[2] = v22;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_1001F7AA0(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = sub_10020B2D4(a2);
  if (v4) {
    return;
  }
  uint64_t v8 = v7;
  if (a3) {
    id v9 = sub_10020BA68();
  }
  else {
    id v9 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
  }
  uint64_t v10 = v9;
  id v64 = sub_10020C738(v8, a3 & 1);
  id v11 = sub_1001D7640();
  __chkstk_darwin(v11);
  NSManagedObjectContext.performAndWait<A>(_:)();

  int v63 = v68;
  id v12 = [self fetchRequestMatchingBlueprintsForUser:v8 fromOrganization:v10 includeTombstones:0];
  id v68 = 0;
  id v13 = [v12 execute:&v68];
  id v14 = v68;
  if (v13)
  {
    int64_t v15 = v13;
    sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v17 = v14;

    if (v16 >> 62)
    {
LABEL_67:
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18)
      {
LABEL_10:
        unint64_t v19 = 0;
        unint64_t v62 = v16 & 0xC000000000000001;
        unint64_t v58 = v16 + 32;
        uint64_t v59 = v16 & 0xFFFFFFFFFFFFFF8;
        uint64_t v56 = v10;
        id v57 = v12;
        unint64_t v61 = v16;
        uint64_t v60 = v18;
        while (1)
        {
          if (v62)
          {
            id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v19 >= *(void *)(v59 + 16)) {
              goto LABEL_66;
            }
            id v20 = *(id *)(v58 + 8 * v19);
          }
          BOOL v21 = __OFADD__(v19, 1);
          unint64_t v22 = v19 + 1;
          if (v21)
          {
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
          unint64_t v65 = v22;
          unint64_t v67 = v20;
          id v23 = [v20 type];
          if (!v23)
          {
            __break(1u);
            return;
          }
          uint64_t v24 = v23;
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;

          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v25 && v28 == v27)
          {
            swift_bridgeObjectRelease();
LABEL_26:
            swift_bridgeObjectRelease();
            unint64_t v19 = v65;
            char v32 = v67;
            if (!v63 || ![v67 limitEnabled])
            {
LABEL_57:

              goto LABEL_58;
            }
            unsigned __int8 v33 = [v64 allLimitsEnabled];
LABEL_29:
            if ((v33 & 1) == 0) {
              goto LABEL_57;
            }
            goto LABEL_42;
          }
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v30) {
            goto LABEL_26;
          }
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v25 && v31 == v27) {
            break;
          }
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v34) {
            goto LABEL_32;
          }
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v25 && v36 == v27)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_41;
          }
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v37)
          {
            swift_bridgeObjectRelease();
LABEL_41:
            unint64_t v19 = v65;
            char v32 = v67;
            if ((v63 & 1) == 0) {
              goto LABEL_57;
            }
            goto LABEL_42;
          }
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v25 && v49 == v27)
          {
            swift_bridgeObjectRelease_n();
            unint64_t v19 = v65;
          }
          else
          {
            char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v19 = v65;
            if ((v50 & 1) == 0)
            {
              char v32 = v67;
              unsigned __int8 v33 = [v67 enabled];
              goto LABEL_29;
            }
          }
          id v51 = [v64 passcode];
          char v32 = v67;
          if (!v51) {
            goto LABEL_57;
          }

          if (![v67 enabled]) {
            goto LABEL_57;
          }
LABEL_42:
          id v68 = 0;
          id v38 = [v32 declarationsWithError:&v68];
          id v39 = v68;
          if (!v38)
          {
            uint64_t v54 = v32;
            id v55 = v68;
            swift_bridgeObjectRelease();
            _convertNSErrorToError(_:)();

            swift_willThrow();
            goto LABEL_62;
          }
          id v40 = v38;
          sub_10009EE78(&qword_100341F28);
          uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          id v42 = v39;

          uint64_t v43 = *(void *)(v41 + 16);
          if (v43)
          {
            uint64_t v66 = self;
            uint64_t v44 = 0;
            while (1)
            {
              swift_bridgeObjectRetain();
              Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v68 = 0;
              id v46 = [v66 declarationForPayload:isa error:&v68];

              if (!v46) {
                break;
              }
              id v47 = v68;
              id v48 = v46;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              ++v44;
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();

              if (v43 == v44)
              {

                swift_bridgeObjectRelease();
                uint64_t v10 = v56;
                id v12 = v57;
                unint64_t v19 = v65;
                goto LABEL_58;
              }
            }
            id v53 = v68;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            _convertNSErrorToError(_:)();

            swift_willThrow();
            return;
          }

          swift_bridgeObjectRelease();
          id v12 = v57;
LABEL_58:
          unint64_t v16 = v61;
          if (v19 == v60) {
            goto LABEL_68;
          }
        }
        swift_bridgeObjectRelease();
LABEL_32:
        swift_bridgeObjectRelease();
        unint64_t v19 = v65;
        char v32 = v67;
        if (!v63) {
          goto LABEL_57;
        }
        if (([v67 enabled] & 1) == 0)
        {
          id v35 = [v67 activeOverride];

          if (!v35) {
            goto LABEL_57;
          }
        }
        goto LABEL_42;
      }
    }
LABEL_68:

    swift_bridgeObjectRelease();
    return;
  }
  id v52 = v68;
  _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_62:
}

void sub_1001F82A4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, void *a6@<X8>)
{
  id v48 = a3;
  id v46 = a6;
  uint64_t v11 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v12 = __chkstk_darwin(v11);
  id v47 = (void **)((char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  id v14 = self;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 blueprintTypeForDeclarationType:v15];

  if (!v16)
  {
    sub_1000AA560();
    swift_allocError();
    *unint64_t v19 = a1;
    v19[1] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    return;
  }
  uint64_t v17 = v11;
  id v18 = sub_10020B2D4(a4);
  if (v6)
  {

    return;
  }
  id v20 = v18;
  if (a5) {
    id v21 = sub_10020BA68();
  }
  else {
    id v21 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
  }
  unint64_t v22 = v21;
  id v45 = v20;
  id v23 = sub_1001FADE4(v16, 0, 0, v20, v21);
  id v44 = v22;
  id v48 = v23;
  id v24 = [v48 type];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  id v29 = sub_10020D67C(v26, v28, a1, a2);
  swift_bridgeObjectRelease();
  id v43 = v29;
  id v34 = sub_10020D7E4(v29, 0, 0, v48);

  id v35 = [v34 cemConfiguration];
  if (!v35)
  {
    sub_1000AA560();
    v42[1] = v17;
    uint64_t v38 = swift_allocError();
    *id v39 = a1;
    v39[1] = a2;
    v39[2] = (uint64_t)a4;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    id v40 = a4;
    swift_willThrow();
    id v41 = v44;

    uint64_t v49 = v38;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    char v30 = v47;
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() != 25)
      {

        sub_1000C9DB4((uint64_t)v30);
        goto LABEL_16;
      }
      swift_errorRelease();
      uint64_t v31 = *v30;
      swift_bridgeObjectRelease();

      sub_1000AA560();
      swift_allocError();
      *char v32 = a1;
      v32[1] = a2;
      _OWORD v32[2] = (uint64_t)a4;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      id v33 = a4;
      swift_willThrow();
    }

LABEL_16:
    swift_errorRelease();
    return;
  }
  id v36 = [v34 cemConfiguration];
  if (v36)
  {
    id v37 = v36;

    *id v46 = v37;
  }
  else
  {
    __break(1u);
  }
}

void sub_1001F8824(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = sub_10020B2D4(a2);
  if (v4) {
    return;
  }
  uint64_t v8 = v7;
  if (a3) {
    id v9 = sub_10020BA68();
  }
  else {
    id v9 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
  }
  uint64_t v10 = v9;
  id v11 = sub_1001FADE4(STBlueprintTypeRestrictions, 0, 0, v8, v9);
  uint64_t v12 = v11;
  if (![v11 enabled])
  {

LABEL_5:
    return;
  }
  id v28 = 0;
  id v13 = [v12 declarationsWithError:&v28];
  id v14 = v28;
  if (!v13)
  {
    id v23 = v28;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  NSString v15 = v13;
  uint64_t v25 = v12;
  sub_10009EE78(&qword_100341F28);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = v14;

  uint64_t v27 = *(void *)(v16 + 16);
  if (!v27)
  {
LABEL_18:

    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  id v26 = self;
  uint64_t v18 = 0;
  while (1)
  {
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = 0;
    id v20 = [v26 declarationForPayload:isa error:&v28];

    if (!v20) {
      break;
    }
    id v21 = v28;
    id v22 = v20;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v18;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    if (v27 == v18) {
      goto LABEL_18;
    }
  }
  id v24 = v28;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  swift_willThrow();
}

void sub_1001F8B34(void *a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v8 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v8);
  NSString v9 = [a1 declarationType];
  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [self blueprintTypeForDeclarationType:v9];

  id v37 = v10;
  if (v10)
  {
    id v36 = a1;
    NSString v11 = [a1 declarationType];
    if (!v11)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v12 = [self blueprintConfigurationTypeForDeclarationType:v11];

    if (v12)
    {
      id v13 = sub_10020B2D4(a3);
      if (v4)
      {
      }
      else
      {
        id v26 = v13;
        uint64_t v27 = (objc_class *)v10;
        if (a4) {
          id v28 = sub_10020BA68();
        }
        else {
          id v28 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
        }
        id v29 = v28;
        id v34 = sub_1001FADE4(v37, 0, 0, v26, v28);
        id v35 = v29;
        id v30 = v12;
        uint64_t v31 = sub_100200A2C(v27, v26, v29, (uint64_t)v12);
        uint64_t v33 = v32;

        sub_1001FB4B0(v34, v36, v31, v33);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_1000AA560();
      swift_allocError();
      id v21 = v20;
      id v22 = [v36 declarationType];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      *id v21 = v23;
      v21[1] = v25;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
  else
  {
    sub_1000AA560();
    swift_allocError();
    NSString v15 = v14;
    id v16 = [a1 declarationType];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    *NSString v15 = v17;
    v15[1] = v19;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void sub_1001F92D8(void *a1, uint64_t a2, void *a3, char a4, char a5)
{
  NSString v10 = [a1 declarationType];
  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v11 = sub_10020B2D4(a3);
  if (v5) {
    goto LABEL_4;
  }
  id v12 = v11;
  if (a4) {
    id v13 = sub_10020BA68();
  }
  else {
    id v13 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
  }
  id v14 = v13;
  id v52 = a1;
  NSString v15 = (void *)STBlueprintTypeUsageLimitOverride;
  id v16 = sub_1001D7640();
  id v53 = [objc_allocWithZone((Class)STBlueprint) initWithContext:v16];

  id v48 = sub_1001FF2B4(v15, a5 & 1, v12, v14);
  uint64_t v49 = v12;
  id v51 = v14;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v47 = (uint64_t)&v47;
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  v21.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  char v50 = (objc_class *)v15;
  Class isa = v21.super.isa;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  id v23 = v53;
  objc_msgSend(v53, "setCreationDate:", isa, v47, v48);

  uint64_t v24 = v50;
  Class v25 = Date._bridgeToObjectiveC()().super.isa;
  [v23 setExpiration:v25];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 setType:v26];

  uint64_t v27 = v51;
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 setIdentifier:v28];

  [v23 setOrganization:v27];
  id v29 = [v23 users];
  if (v29)
  {
    sub_1000A0760(0, &qword_1003431E0);
    sub_1000AA614((unint64_t *)&qword_100343B80, &qword_1003431E0);
    uint64_t v30 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v55 = v30;
    uint64_t v31 = v49;
    sub_100257F68(&v54, v49);
    if (v55)
    {
      v32.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v32.super.Class isa = 0;
    }
    id v33 = v53;
    [v53 setUsers:v32.super.isa];

    uint64_t v24 = v50;
    uint64_t v27 = v51;
  }
  else
  {
    id v33 = v23;
    [v23 setUsers:0];
    uint64_t v31 = v49;
  }
  [v33 setIsDirty:1];
  id v34 = v10;
  sub_100200A2C(v24, v31, v27, (uint64_t)v10);
  NSString v10 = v34;

  id v35 = sub_1001D7640();
  id v36 = [objc_allocWithZone((Class)STBlueprintConfiguration) initWithContext:v35];

  NSString v37 = String._bridgeToObjectiveC()();
  [v36 setIdentifier:v37];

  [v36 setBlueprint:v33];
  [v36 setType:v34];
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v39 = v52;
  [v52 setDeclarationIdentifier:v38];

  id v54 = 0;
  id v40 = [v39 serializeAsDataWithError:&v54];
  id v41 = v54;
  if (!v40)
  {
    id v46 = v41;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_4:

    return;
  }
  uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v44 = v43;

  Class v45 = Data._bridgeToObjectiveC()().super.isa;
  [v36 setPayloadPlist:v45];

  sub_1000A0168(v42, v44);
}

void sub_1001F98F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  uint64_t v102 = a7;
  uint64_t v103 = a8;
  uint64_t v104 = a5;
  uint64_t v105 = a6;
  uint64_t v19 = type metadata accessor for Logger();
  unint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v22 = (char *)v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = sub_10020B2D4(0);
  if (v14) {
    return;
  }
  uint64_t v24 = v23;
  uint64_t v94 = v22;
  unint64_t v101 = v20;
  uint64_t v106 = v19;
  uint64_t v96 = a1;
  uint64_t v98 = a4;
  id v25 = [v23 localUserDeviceState];
  if (!v25)
  {
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    *id v46 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    return;
  }
  NSString v26 = v25;
  id v95 = v24;
  uint64_t v93 = 0;
  id v100 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100286350;
  *(void *)(v27 + 56) = &type metadata for String;
  unint64_t v28 = sub_1000A5124();
  *(void *)(v27 + 32) = 0xD000000000000010;
  *(void *)(v27 + 40) = 0x8000000100295D40;
  *(void *)(v27 + 96) = &type metadata for String;
  *(void *)(v27 + 104) = v28;
  *(void *)(v27 + 64) = v28;
  *(void *)(v27 + 72) = a2;
  uint64_t v97 = a2;
  *(void *)(v27 + 80) = a3;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v27 + 136) = &type metadata for String;
  *(void *)(v27 + 144) = v28;
  *(void *)(v27 + 112) = 0x6976654472657375;
  *(void *)(v27 + 120) = 0xEF65746174536563;
  *(void *)(v27 + 176) = sub_1000A0760(0, &qword_1003415E0);
  *(void *)(v27 + 184) = sub_1000AA614(&qword_100345318, &qword_1003415E0);
  *(void *)(v27 + 152) = v26;
  unint64_t v99 = a3;
  swift_bridgeObjectRetain();
  id v29 = v26;
  id v30 = v100;
  uint64_t v31 = NSPredicate.init(format:_:)();
  [v30 setPredicate:v31];

  id v109 = 0;
  id v32 = [v30 execute:&v109];
  id v33 = v109;
  if (!v32)
  {
    id v47 = v109;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v34 = v32;
  id v107 = v29;
  uint64_t v35 = sub_1000A0760(0, (unint64_t *)&unk_100343A60);
  unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v37 = v33;

  NSString v38 = (v36 >> 62);
  if (v36 >> 62)
  {
LABEL_45:
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v40 = v106;
  id v41 = v107;
  uint64_t v42 = v98;
  unint64_t v43 = v101;
  uint64_t v106 = v35;
  if (v39 == 1)
  {
    if ((v36 & 0xC000000000000001) != 0)
    {
      id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        __break(1u);
      }
      id v45 = *(id *)(v36 + 32);
      swift_bridgeObjectRelease();
    }
  }
  else if (v39)
  {
    uint64_t v92 = v38;
    uint64_t v48 = (uint64_t)v94;
    sub_1001D7700((uint64_t)v94);
    unint64_t v49 = v99;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    NSString v38 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    int v51 = v50;
    BOOL v52 = os_log_type_enabled(v38, v50);
    unint64_t v101 = v36;
    if (v52)
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v91 = (void *)swift_slowAlloc();
      id v109 = v91;
      *(_DWORD *)uint64_t v53 = 136446466;
      v89[1] = v53 + 4;
      swift_bridgeObjectRetain();
      uint64_t v108 = sub_1000A2E70(v97, v49, (uint64_t *)&v109);
      int v90 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2050;
      swift_bridgeObjectRelease();
      uint64_t v108 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v90, "Invalid number of installed apps detected for identifier: %{public}s, count: %{public}ld. Will replace them with a single new one", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v36 = v101;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v48, v40);
    if (v92)
    {
      swift_bridgeObjectRetain();
      uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v54 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (v54)
    {
      unint64_t v55 = v36 & 0xC000000000000001;
      uint64_t v56 = 4;
      while (1)
      {
        uint64_t v35 = v56 - 4;
        if (v55) {
          id v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v59 = *(id *)(v36 + 8 * v56);
        }
        uint64_t v60 = v59;
        unint64_t v36 = v56 - 3;
        if (__OFADD__(v35, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
        id v61 = [v41 installedApps];
        if (!v61) {
          break;
        }
        unint64_t v62 = v61;
        sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
        int v63 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

        id v109 = v63;
        NSString v38 = sub_1000CDE04(v60);
        if (v109)
        {
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          Class isa = 0;
        }
        id v41 = v107;
        [v107 setInstalledApps:isa];

        ++v56;
        BOOL v58 = v36 == v54;
        unint64_t v36 = v101;
        if (v58) {
          goto LABEL_31;
        }
      }
      __break(1u);
      goto LABEL_49;
    }
LABEL_31:
    swift_bridgeObjectRelease_n();
    id v64 = sub_1001D7640();
    id v45 = [objc_allocWithZone((Class)STInstalledApp) initWithContext:v64];

    uint64_t v42 = v98;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v44 = sub_1001D7640();
    id v45 = [objc_allocWithZone((Class)STInstalledApp) initWithContext:v44];
  }
  NSString v65 = String._bridgeToObjectiveC()();
  [v45 setBundleIdentifier:v65];

  id v66 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v42];
  [v45 setAdamID:v66];

  if (v105) {
    NSString v67 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v67 = 0;
  }
  [v45 setDistributorID:v67];

  [v45 setInstalledLocally:1];
  id v68 = v45;
  id v69 = [v107 installedApps];
  if (!v69)
  {
LABEL_49:
    __break(1u);
    return;
  }
  id v70 = v69;
  sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
  uint64_t v71 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v108 = v71;
  sub_100257F84(&v109, v68);

  if (v108)
  {
    v72.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v72.super.Class isa = 0;
  }
  id v73 = v107;
  [v107 setInstalledApps:v72.super.isa];

  NSString v74 = String._bridgeToObjectiveC()();
  [v68 setDisplayName:v74];

  NSString v75 = String._bridgeToObjectiveC()();
  [v68 setBundleIdentifier:v75];

  [v68 setDistributorIsThirdParty:a9 & 1];
  id v76 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:a10];
  [v68 setVersionIdentifier:v76];

  id v77 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:a11];
  [v68 setBetaVersionIdentifier:v77];

  if (a13 >> 60 == 15)
  {
    uint64_t v78 = type metadata accessor for URL();
    uint64_t v79 = *(void *)(v78 - 8);
    __chkstk_darwin(v78);
    long long v81 = (char *)v89 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v82 = sub_10009EE78(&qword_1003460E0);
    __chkstk_darwin(v82 - 8);
    uint64_t v84 = (char *)v89 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000D9F9C(a14, (uint64_t)v84, &qword_1003460E0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v84, 1, v78) == 1)
    {

      sub_1000A4FD8((uint64_t)v84, &qword_1003460E0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v81, v84, v78);
      URL._bridgeToObjectiveC()(v86);
      uint64_t v88 = v87;
      [v68 updateIconDataWithURL:v87];

      (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v78);
    }
  }
  else
  {
    sub_1000B88B8(a12, a13);
    Class v85 = Data._bridgeToObjectiveC()().super.isa;
    [v68 setIconData:v85];

    sub_1000FD918(a12, a13);
  }
}

void sub_1001FA544(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  NSString v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_10020B2D4(0);
  if (!v3)
  {
    uint64_t v60 = v10;
    id v12 = v11;
    id v13 = [v11 localUserDeviceState];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v61 = v8;
      uint64_t v53 = v7;
      uint64_t v54 = a1;
      id v48 = v12;
      id v15 = [self fetchRequest];
      sub_10009EE78(&qword_1003414D8);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_100286350;
      *(void *)(v16 + 56) = &type metadata for String;
      unint64_t v17 = sub_1000A5124();
      *(void *)(v16 + 32) = 0xD000000000000010;
      *(void *)(v16 + 40) = 0x8000000100295D40;
      *(void *)(v16 + 96) = &type metadata for String;
      *(void *)(v16 + 104) = v17;
      *(void *)(v16 + 64) = v17;
      *(void *)(v16 + 72) = a2;
      uint64_t v52 = a2;
      *(void *)(v16 + 80) = a3;
      sub_1000A0760(0, (unint64_t *)&unk_100343A80);
      *(void *)(v16 + 136) = &type metadata for String;
      *(void *)(v16 + 144) = v17;
      *(void *)(v16 + 112) = 0x6976654472657375;
      *(void *)(v16 + 120) = 0xEF65746174536563;
      *(void *)(v16 + 176) = sub_1000A0760(0, &qword_1003415E0);
      *(void *)(v16 + 184) = sub_1000AA614(&qword_100345318, &qword_1003415E0);
      *(void *)(v16 + 152) = v14;
      swift_bridgeObjectRetain();
      id v18 = v14;
      uint64_t v19 = NSPredicate.init(format:_:)();
      [v15 setPredicate:v19];

      id v63 = 0;
      id v20 = [v15 execute:&v63];
      id v21 = v63;
      if (v20)
      {
        id v22 = v20;
        v47[0] = v15;
        uint64_t v59 = sub_1000A0760(0, (unint64_t *)&unk_100343A60);
        unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        id v24 = v21;

        v47[1] = 0;
        if (v23 >> 62) {
          goto LABEL_25;
        }
        uint64_t v26 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        for (uint64_t i = v53; v26; uint64_t i = v53)
        {
          id v57 = (void (**)(uint64_t, uint64_t))(v61 + 8);
          unint64_t v58 = v23 & 0xC000000000000001;
          uint64_t v28 = 4;
          *(void *)&long long v25 = 136446466;
          long long v50 = v25;
          unint64_t v49 = (char *)&type metadata for Any + 8;
          unint64_t v51 = a3;
          id v62 = v18;
          uint64_t v55 = v26;
          unint64_t v56 = v23;
          while (1)
          {
            id v31 = v58 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v23 + 8 * v28);
            id v18 = v31;
            if (__OFADD__(v28 - 4, 1)) {
              break;
            }
            uint64_t v61 = v28 - 3;
            uint64_t v32 = (uint64_t)v60;
            sub_1001D7700((uint64_t)v60);
            swift_bridgeObjectRetain_n();
            id v33 = v18;
            id v34 = Logger.logObject.getter();
            os_log_type_t v35 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v34, v35))
            {
              uint64_t v36 = swift_slowAlloc();
              id v63 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v36 = v50;
              swift_bridgeObjectRetain();
              *(void *)(v36 + 4) = sub_1000A2E70(v52, a3, (uint64_t *)&v63);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v36 + 12) = 2082;
              id v37 = [v33 displayName];
              if (v37)
              {
                NSString v38 = v37;
                uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v41 = v40;
              }
              else
              {
                unint64_t v41 = 0xE300000000000000;
                uint64_t v39 = 4271950;
              }
              *(void *)(v36 + 14) = sub_1000A2E70(v39, v41, (uint64_t *)&v63);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v34, v35, "Removing installed app with bundleID: %{public}s, name: %{public}s", (uint8_t *)v36, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t i = v53;
              (*v57)((uint64_t)v60, v53);
              a3 = v51;
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*v57)(v32, i);
            }
            id v42 = [v62 installedApps];
            if (!v42) {
              __break(1u);
            }
            unint64_t v43 = v42;
            sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
            id v44 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

            id v63 = v44;
            if (v63)
            {
              v29.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
            }
            else
            {
              v29.super.Class isa = 0;
            }
            id v18 = v62;
            [v62 setInstalledApps:v29.super.isa];

            id v30 = sub_1001D7640();
            [v30 deleteObject:v33];

            ++v28;
            unint64_t v23 = v56;
            if (v61 == v55) {
              goto LABEL_26;
            }
          }
          __break(1u);
LABEL_25:
          swift_bridgeObjectRetain();
          uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
LABEL_26:

        swift_bridgeObjectRelease();
      }
      else
      {
        id v46 = v63;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      void *v45 = 0;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
}

void sub_1001FAC74(uint64_t *a1@<X8>)
{
  id v3 = sub_10020B2D4(0);
  if (!v1)
  {
    uint64_t v4 = v3;
    id v5 = [v3 localUserDeviceState];
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = [v5 installedApps];
      if (v7)
      {
        uint64_t v8 = v7;
        sub_1000A0760(0, (unint64_t *)&unk_100343A60);
        sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
        uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1001DFB70(v9);
        id v11 = v10;
        swift_bridgeObjectRelease();
      }
      else
      {
        id v11 = _swiftEmptyArrayStorage;
      }
      uint64_t v13 = sub_10020A230((uint64_t)v11);

      swift_bridgeObjectRelease();
      *a1 = v13;
    }
    else
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *id v12 = 0;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
}

id sub_1001FADE4(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  __chkstk_darwin(v9);
  id v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = self;
  uint64_t v13 = v12;
  if (a3)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 fetchRequestMatchingBlueprintsForUser:a4 ofType:a1 withIdentifier:v14 fromOrganization:a5 includeTombstones:1];
  }
  else
  {
    id v15 = [v12 fetchRequestMatchingBlueprintsForUser:a4 ofType:a1 fromOrganization:a5 includeTombstones:1];
  }
  id v68 = 0;
  id v66 = v15;
  id v16 = [v15 execute:&v68];
  id v17 = v68;
  if (!v16)
  {
    id v42 = v68;
    _convertNSErrorToError(_:)();

LABEL_26:
    swift_willThrow();

    return v42;
  }
  id v18 = v16;
  sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v20 = v17;

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21 >= 2) {
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v21 > 1)
    {
LABEL_7:
      sub_1001D7700((uint64_t)v11);
      swift_bridgeObjectRetain_n();
      id v22 = a1;
      id v23 = a4;
      id v24 = a5;
      id v25 = v22;
      id v26 = v23;
      id v27 = v24;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      int v30 = v29;
      id v62 = v28;
      BOOL v31 = os_log_type_enabled(v28, v29);
      uint64_t v63 = v21;
      if (v31)
      {
        uint64_t v32 = swift_slowAlloc();
        unint64_t v58 = (void *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        id v68 = v60;
        *(_DWORD *)uint64_t v32 = 134349826;
        swift_bridgeObjectRelease();
        uint64_t v67 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2082;
        int v59 = v30;
        id v56 = v27;
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v61 = v25;
        uint64_t v67 = sub_1000A2E70(v33, v34, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 22) = 2112;
        uint64_t v67 = (uint64_t)v26;
        id v35 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v36 = v58;
        *unint64_t v58 = v26;

        *(_WORD *)(v32 + 32) = 2114;
        id v37 = v56;
        uint64_t v67 = (uint64_t)v56;
        id v38 = v56;
        id v57 = v11;
        id v39 = v37;
        id v40 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v36[1] = v39;

        id v25 = v61;
        unint64_t v41 = v62;
        _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v59, "There is %{public}ld blueprints of type %{public}s for %@ in %{public}@.", (uint8_t *)v32, 0x2Au);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v64 + 8))(v57, v65);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v65);
      }
      id v42 = (id)type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      id v44 = v43;
      id v45 = [v26 localUserDeviceState];

      if (v45)
      {
        id v46 = v25;
        swift_bridgeObjectRelease();
        void *v44 = 0;
        v44[1] = v46;
      }
      else
      {
        id v47 = [v26 dsid];
        id v48 = v25;
        swift_bridgeObjectRelease();
        void *v44 = v47;
        v44[1] = v48;
      }
      v44[2] = v63;
      goto LABEL_25;
    }
  }
  if (!v21)
  {
    swift_bridgeObjectRelease();
    id v42 = (id)type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    unint64_t v51 = v50;
    id v52 = a1;
    id v53 = [a4 localUserDeviceState];

    if (v53)
    {
      *unint64_t v51 = v52;
      v51[1] = 0;
    }
    else
    {
      id v54 = [a4 dsid];
      *unint64_t v51 = v52;
      v51[1] = v54;
    }
LABEL_25:
    swift_storeEnumTagMultiPayload();
    goto LABEL_26;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
    id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    id v49 = v66;
  }
  else
  {
    id v49 = v66;
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v42 = *(id *)(v19 + 32);
  }

  swift_bridgeObjectRelease();
  return v42;
}

void sub_1001FB4B0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v30[11] = a3;
  v30[12] = a4;
  id v32 = a2;
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  v30[13] = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v8);
  id v9 = [a1 type];
  v30[10] = v6;
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  id v14 = [v32 declarationType];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  id v18 = sub_10020D67C(v11, v13, v15, v17);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v20 = sub_10020D7E4(v19, 0, 0, a1);
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = v32;
    [v32 setDeclarationIdentifier:v21];

    id v33 = 0;
    id v23 = [v22 serializeAsDataWithError:&v33];
    id v24 = v33;
    if (v23)
    {
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v20 setPayloadPlist:isa];
      sub_1000A0168(v25, v27);
    }
    else
    {
      os_log_type_t v29 = v24;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_1001FBCD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v23 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - v9;
  sub_1001D7700((uint64_t)&v22 - v9);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v6;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Deleting family organization", v13, 2u);
    uint64_t v1 = v0;
    uint64_t v6 = v22;
    swift_slowDealloc();
  }

  id v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v10, v5);
  id v15 = sub_10020BA68();
  if (!v1)
  {
    id v20 = v15;
    id v21 = sub_1001D7640();
    [v21 deleteObject:v20];

    return;
  }
  uint64_t v24 = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 49)
  {
    sub_1000C9DB4((uint64_t)v4);
LABEL_11:
    swift_errorRelease();
    return;
  }
  swift_errorRelease();
  uint64_t v16 = v23;
  sub_1001D7700(v23);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "There is no family organization to delete.", v19, 2u);
    swift_slowDealloc();
  }

  v14((char *)v16, v5);
  swift_errorRelease();
}

void sub_1001FC014(void *a1@<X1>, unsigned __int8 *a2@<X8>)
{
  id v4 = sub_10020B2D4(a1);
  if (!v2)
  {
    uint64_t v5 = v4;
    unsigned __int8 v6 = [v4 isEyeReliefEnabled];

    *a2 = v6;
  }
}

void sub_1001FC06C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = sub_10020B2D4(a2);
  if (!v3)
  {
    unsigned __int8 v6 = v5;
    id v7 = [v5 localUserDeviceState];

    if (!v7)
    {

LABEL_5:
      *a3 = 1;
      return;
    }
    id v8 = sub_10020BC8C((uint64_t)STScreenTimeSettings_ptr, &qword_1003415C0, (id)0xD);
    uint64_t v9 = v8;
    id v10 = [v8 currentOrganization];

    if (v10)
    {
      id v11 = [v9 currentOrganization];
      if (v11)
      {
        os_log_type_t v12 = v11;
        self;
        if (swift_dynamicCastObjCClass())
        {

          goto LABEL_5;
        }
        self;
        if (swift_dynamicCastObjCClass())
        {

          *a3 = 0;
          return;
        }
        self;
      }
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *uint64_t v13 = 0xD000000000000010;
      v13[1] = 0x8000000100295D00;
    }
    else
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
    }
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void sub_1001FC258(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  id v10 = (char *)v130 - v9;
  __chkstk_darwin(v8);
  os_log_type_t v12 = (char *)v130 - v11;
  id v13 = sub_10020B2D4(0);
  if (v1) {
    return;
  }
  id v14 = v13;
  id v15 = sub_10020BC8C((uint64_t)STScreenTimeSettings_ptr, &qword_1003415C0, (id)0xD);
  uint64_t v141 = v3;
  id v145 = v15;
  uint64_t v146 = a1;
  id v147 = v14;
  id v16 = [v14 localSettings];
  id v144 = v16;
  if (v16)
  {
    id v17 = v16;
    id v18 = [v16 organization];
    id v143 = v17;
  }
  else
  {
    id v143 = 0;
    id v18 = 0;
  }
  id v19 = v147;
  id v20 = [v147 cloudSettings];
  if (v20)
  {
    id v21 = v20;
    id v22 = [v20 organization];

    id v18 = v22;
    id v19 = v147;
  }
  id v23 = [v19 familySettings];
  uint64_t v142 = v4;
  if (v23)
  {
    uint64_t v24 = v23;
    if ([v23 isManaged])
    {
      id v25 = [v24 organization];

      uint64_t v24 = v18;
      id v18 = v25;
      id v19 = v147;
    }
  }
  id v26 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (v18)
  {
    unint64_t v27 = v18;
    uint64_t v140 = v18;
  }
  else
  {
    id v28 = [v19 cloudSettings];
    if (!v28) {
      goto LABEL_90;
    }
    os_log_type_t v29 = v28;
    int v30 = [v28 organization];

    if (!v30)
    {
      id v38 = 0;
      id v35 = v144;
      uint64_t v36 = v145;
      goto LABEL_82;
    }
    uint64_t v140 = v30;
    unint64_t v27 = v30;
  }
  self;
  uint64_t v31 = swift_dynamicCastObjCClass();
  id v32 = v18;

  if (v31)
  {
    id v33 = v147;
    id v34 = [v147 cloudSettings];
    id v35 = v144;
    uint64_t v36 = v145;
    if (v34)
    {
      id v37 = v34;
      id v43 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
      id v44 = [v33 localSettings];
      id v138 = v43;
      if (!v44)
      {

LABEL_76:
        id v116 = v43;
        id v117 = sub_10020DD64();
        if (v117)
        {
          uint64_t v132 = v37;
          sub_1001D7700((uint64_t)v7);
          uint64_t v118 = v117;
          uint64_t v119 = Logger.logObject.getter();
          os_log_type_t v120 = static os_log_type_t.default.getter();
          int v121 = v120;
          if (os_log_type_enabled(v119, v120))
          {
            id v122 = (_DWORD *)swift_slowAlloc();
            uint64_t v140 = (void *)swift_slowAlloc();
            *id v122 = 138412290;
            LODWORD(v139) = v121;
            Class v123 = (uint8_t *)v122;
            v149 = v118;
            unint64_t v136 = (unint64_t)v150;
            unint64_t v137 = v122 + 1;
            uint64_t v124 = v118;
            uint64_t v36 = v145;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v140 = v117;

            id v43 = v138;
            _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v139, "Deleting local org %@", v123, 0xCu);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v119 = v118;
          }

          (*(void (**)(char *, uint64_t))(v142 + 8))(v7, v141);
          id v125 = sub_1001D7640();
          [v125 deleteObject:v118];

          id v35 = v144;
          id v37 = v132;
        }

        id v38 = v43;
        goto LABEL_82;
      }
      id v45 = v44;
      objc_msgSend(v37, "setIsAppAndWebsiteActivityEnabled:", objc_msgSend(v36, "screenTimeEnabled"));
      uint64_t v132 = v37;
      id v46 = v37;
      id v47 = [v45 passcode];
      [v46 setPasscode:v47];

      id v48 = v46;
      objc_msgSend(v48, "setNeedsToSetPasscode:", objc_msgSend(v45, "needsToSetPasscode"));

      id v49 = v48;
      objc_msgSend(v49, "setAllLimitsEnabled:", objc_msgSend(v45, "allLimitsEnabled"));

      id v50 = v49;
      objc_msgSend(v50, "setDefaultUserPolicies:", objc_msgSend(v45, "defaultUserPolicies"));

      id v51 = v50;
      objc_msgSend(v51, "setCommunicationPolicy:", objc_msgSend(v45, "communicationPolicy"));

      id v52 = v51;
      objc_msgSend(v52, "setCommunicationWhileLimitedPolicy:", objc_msgSend(v45, "communicationWhileLimitedPolicy"));

      id v53 = v52;
      objc_msgSend(v53, "setContactManagementState:", objc_msgSend(v45, "contactManagementState"));

      id v54 = v53;
      objc_msgSend(v54, "setIsCommunicationSafetySendingRestricted:", objc_msgSend(v45, "isCommunicationSafetySendingRestricted"));

      id v55 = v54;
      objc_msgSend(v55, "setIsCommunicationSafetyReceivingRestricted:", objc_msgSend(v45, "isCommunicationSafetyReceivingRestricted"));

      id v56 = v55;
      objc_msgSend(v56, "setIsCommunicationSafetyNotificationEnabled:", objc_msgSend(v45, "isCommunicationSafetyNotificationEnabled"));

      id v57 = v56;
      objc_msgSend(v57, "setIsCommunicationSafetyAnalyticsEnabled:", objc_msgSend(v45, "isCommunicationSafetyAnalyticsEnabled"));

      id v58 = v57;
      Class isa = (Class)[v45 modificationDate];
      uint64_t v60 = sub_10009EE78(&qword_100342B30);
      unint64_t v139 = (char *)v130;
      __chkstk_darwin(v60 - 8);
      id v62 = (char *)v130 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v133 = v45;
      if (isa)
      {
        uint64_t v63 = type metadata accessor for Date();
        unint64_t v137 = v130;
        uint64_t v64 = *(void *)(v63 - 8);
        __chkstk_darwin(v63);
        id v66 = (char *)v130 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v67 = v66;
        uint64_t v36 = v145;
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v62, v67, v63);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v62, 0, 1, v63);
        id v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
        unint64_t v137 = (void *)v63;
        uint64_t v69 = v63;
        id v70 = v133;
        Class isa = 0;
        if (v68(v62, 1, v69) != 1)
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, void *))(v64 + 8))(v62, v137);
        }
      }
      else
      {
        id v70 = v45;
        uint64_t v71 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v62, 1, 1, v71);
      }
      [v58 setModificationDate:isa];

      id v72 = v58;
      objc_msgSend(v72, "setIsEyeReliefEnabled:", objc_msgSend(v70, "isEyeReliefEnabled"));

      id v73 = self;
      NSString v74 = v138;
      id v75 = [v73 fetchRequestMatchingBlueprintsForUser:v147 fromOrganization:v138 includeTombstones:0];
      v149 = 0;
      id v76 = [v75 execute:&v149];
      id v77 = v149;
      if (v76)
      {
        uint64_t v78 = v76;
        id v131 = v75;
        unint64_t v137 = (void *)sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
        unint64_t v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v80 = v77;

        if (v79 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v81) {
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v81 = *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v81) {
            goto LABEL_42;
          }
        }
        if (v81 >= 1)
        {
          uint64_t v82 = 0;
          do
          {
            if ((v79 & 0xC000000000000001) != 0) {
              id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v83 = *(id *)(v79 + 8 * v82 + 32);
            }
            uint64_t v84 = v83;
            ++v82;
            id v85 = sub_1001D7640();
            [v85 deleteObject:v84];
          }
          while (v81 != v82);
LABEL_42:
          swift_bridgeObjectRelease();
          id v87 = [v147 blueprints];
          if (v87)
          {
            uint64_t v88 = v87;
            sub_1000AA614(&qword_100345310, (unint64_t *)&unk_100342BB0);
            uint64_t v89 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v90 = v89;
            if ((v89 & 0xC000000000000001) != 0)
            {
              __CocoaSet.makeIterator()();
              Set.Iterator.init(_cocoa:)();
              uint64_t v90 = v150[0];
              uint64_t v135 = v150[1];
              uint64_t v91 = v150[2];
              uint64_t v92 = (char *)v150[3];
              unint64_t v93 = v150[4];
            }
            else
            {
              uint64_t v92 = 0;
              uint64_t v94 = -1 << *(unsigned char *)(v89 + 32);
              uint64_t v95 = *(void *)(v89 + 56);
              uint64_t v135 = v89 + 56;
              uint64_t v91 = ~v94;
              uint64_t v96 = -v94;
              if (v96 < 64) {
                uint64_t v97 = ~(-1 << v96);
              }
              else {
                uint64_t v97 = -1;
              }
              unint64_t v93 = v97 & v95;
            }
            v130[1] = v91;
            int64_t v98 = (unint64_t)(v91 + 64) >> 6;
            unint64_t v134 = (char *)&type metadata for Swift.AnyObject + 8;
            unint64_t v136 = v90;
            unint64_t v139 = v92;
            if ((v90 & 0x8000000000000000) == 0) {
              goto LABEL_54;
            }
LABEL_52:
            unint64_t v99 = v93;
            uint64_t v100 = __CocoaSet.Iterator.next()();
            if (v100)
            {
              uint64_t v148 = v100;
              swift_unknownObjectRetain();
              swift_dynamicCast();
              unint64_t v101 = v149;
              swift_unknownObjectRelease();
              uint64_t v102 = v139;
              uint64_t v103 = v99;
              while (v101)
              {
                [v101 setOrganization:v138];

                uint64_t v92 = v102;
                unint64_t v93 = v103;
                uint64_t v90 = v136;
                unint64_t v139 = v102;
                if ((v136 & 0x8000000000000000) != 0) {
                  goto LABEL_52;
                }
LABEL_54:
                if (v93)
                {
                  uint64_t v103 = (v93 - 1) & v93;
                  unint64_t v104 = __clz(__rbit64(v93)) | ((void)v92 << 6);
                  uint64_t v102 = v92;
                }
                else
                {
                  int64_t v105 = (int64_t)(v92 + 1);
                  if (__OFADD__(v92, 1)) {
                    __break(1u);
                  }
                  if (v105 >= v98) {
                    break;
                  }
                  unint64_t v106 = *(void *)(v135 + 8 * v105);
                  uint64_t v102 = v92 + 1;
                  if (!v106)
                  {
                    uint64_t v102 = v92 + 2;
                    if ((uint64_t)(v92 + 2) >= v98) {
                      break;
                    }
                    unint64_t v106 = *(void *)(v135 + 8 * (void)v102);
                    if (!v106)
                    {
                      uint64_t v102 = v92 + 3;
                      if ((uint64_t)(v92 + 3) >= v98) {
                        break;
                      }
                      unint64_t v106 = *(void *)(v135 + 8 * (void)v102);
                      if (!v106)
                      {
                        uint64_t v102 = v92 + 4;
                        if ((uint64_t)(v92 + 4) >= v98) {
                          break;
                        }
                        unint64_t v106 = *(void *)(v135 + 8 * (void)v102);
                        if (!v106)
                        {
                          id v107 = v92 + 5;
                          while ((char *)v98 != v107)
                          {
                            unint64_t v106 = *(void *)(v135 + 8 * (void)v107++);
                            if (v106)
                            {
                              uint64_t v102 = v107 - 1;
                              goto LABEL_69;
                            }
                          }
                          break;
                        }
                      }
                    }
                  }
LABEL_69:
                  uint64_t v103 = (v106 - 1) & v106;
                  unint64_t v104 = __clz(__rbit64(v106)) + ((void)v102 << 6);
                }
                unint64_t v101 = *(id *)(*(void *)(v90 + 48) + 8 * v104);
              }
            }
            sub_1000AA60C();
            sub_1001D7700((uint64_t)v10);
            uint64_t v108 = v133;
            id v109 = Logger.logObject.getter();
            os_log_type_t v110 = static os_log_type_t.default.getter();
            int v111 = v110;
            if (os_log_type_enabled(v109, v110))
            {
              id v112 = (uint8_t *)swift_slowAlloc();
              unint64_t v137 = (void *)swift_slowAlloc();
              *(_DWORD *)id v112 = 138412290;
              unint64_t v136 = (unint64_t)(v112 + 4);
              v149 = v108;
              LODWORD(v139) = v111;
              uint64_t v113 = v108;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *unint64_t v137 = v133;

              _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v139, "Deleting local settings %@", v112, 0xCu);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              id v109 = v108;
            }
            uint64_t v36 = v145;
            id v43 = v138;
            uint64_t v114 = v131;

            (*(void (**)(char *, uint64_t))(v142 + 8))(v10, v141);
            id v115 = sub_1001D7640();
            [v115 deleteObject:v108];

            id v35 = v144;
            id v37 = v132;
            goto LABEL_76;
          }
LABEL_91:

          __break(1u);
          return;
        }
        __break(1u);
LABEL_90:

        __break(1u);
        goto LABEL_91;
      }
      uint64_t v86 = v149;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      sub_1001D7700((uint64_t)v12);
      id v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        unint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Local user does not have cloud settings. They should have been created before this.", v41, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v142 + 8))(v12, v141);
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *id v42 = 0;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    return;
  }
  id v35 = v144;
  uint64_t v36 = v145;
  id v38 = v140;
LABEL_82:
  [v36 setCurrentOrganization:v38];
  id v126 = v143;
  if (v143)
  {
    id v127 = sub_1001D7640();
    [v127 deleteObject:v126];
  }
  id v128 = sub_10020DD64();
  if (v128)
  {
    id v129 = sub_1001D7640();
    [v129 deleteObject:v128];
  }
}

uint64_t sub_1001FD43C()
{
  id v1 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v0) {
    char v2 = v4;
  }
  return v2 & 1;
}

void sub_1001FD4B8(void (*a1)(uint64_t, uint64_t)@<X0>, unsigned char *a2@<X8>)
{
  id v127 = a1;
  uint64_t v124 = a2;
  uint64_t v123 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v3 = __chkstk_darwin(v123);
  id v122 = &v107[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  int v121 = &v107[-v5];
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v125 = *(void *)(v6 - 8);
  uint64_t v126 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v107[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v7);
  os_log_type_t v12 = &v107[-v11];
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = &v107[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = &v107[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = &v107[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = &v107[-v23];
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = &v107[-v26];
  __chkstk_darwin(v25);
  os_log_type_t v29 = &v107[-v28];
  id v30 = sub_10020B2D4(0);
  if (!v2)
  {
    uint64_t v31 = v30;
    uint64_t v118 = v29;
    uint64_t v119 = v18;
    os_log_type_t v120 = v21;
    id v115 = v24;
    id v116 = v27;
    id v117 = v15;
    uint64_t v113 = v9;
    uint64_t v114 = v12;
    id v32 = [v30 familySettings];
    id v33 = [v31 cloudSettings];
    id v34 = sub_10020BC8C((uint64_t)STScreenTimeSettings_ptr, &qword_1003415C0, (id)0xD);
    id v111 = v31;
    id v112 = v33;
    LOBYTE(v128) = 0;
    id v35 = v127;
    id v36 = sub_1001D7640();
    __chkstk_darwin(v36);
    *(void *)&v107[-32] = v35;
    *(void *)&v107[-24] = 0;
    *(void *)&v107[-16] = &v128;
    NSManagedObjectContext.performAndWait<A>(_:)();
    os_log_type_t v110 = 0;

    int v108 = v128;
    id v109 = v34;
    if (v32 && ([v32 isManaged] & 1) != 0)
    {
      id v37 = v118;
      sub_1001D7700((uint64_t)v118);
      id v38 = v111;
      id v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      int v41 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v42 = swift_slowAlloc();
        LODWORD(v122) = v41;
        id v43 = (uint8_t *)v42;
        id v44 = (void *)swift_slowAlloc();
        *(_DWORD *)id v43 = 138543362;
        os_log_type_t v120 = v43 + 4;
        id v128 = v38;
        id v45 = v38;
        id v37 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v44 = v38;

        _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v122, "Family settings indicated the user: %{public}@ is managed.", v43, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v39 = v38;
      }
      id v71 = v112;

      uint64_t v73 = v125 + 8;
      id v72 = *(void (**)(NSObject *, uint64_t))(v125 + 8);
      v72(v37, v126);
      id v74 = [v32 organization];
      if (v74)
      {
        id v63 = v74;
        uint64_t v64 = v124;
        id v47 = v127;
        goto LABEL_38;
      }
      id v122 = v38;
      uint64_t v125 = v73;
      uint64_t v75 = (uint64_t)v116;
      sub_1001D7700((uint64_t)v116);
      id v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Family settings does not have an organization.", v78, 2u);
        id v71 = v112;
        swift_slowDealloc();
      }

      v72(v75, v126);
      unint64_t v79 = v110;
      id v80 = sub_10020BA68();
      if (!v79)
      {
        uint64_t v123 = (uint64_t)v80;
        os_log_type_t v110 = 0;
        uint64_t v92 = (uint64_t)v115;
        sub_1001D7700((uint64_t)v115);
        unint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "Found the existing family organization.", v95, 2u);
          swift_slowDealloc();
        }

        v72(v92, v126);
        uint64_t v64 = v124;
        id v47 = v127;
        goto LABEL_37;
      }
      id v128 = v79;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      uint64_t v81 = v121;
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 49)
        {
          swift_errorRelease();
          id v47 = v127;
          id v82 = sub_1001D7640();
          id v83 = [objc_allocWithZone((Class)STFamilyOrganization) initWithContext:v82];

          uint64_t v123 = (uint64_t)v83;
          [v32 setOrganization:v83];
          uint64_t v84 = (uint64_t)v114;
          sub_1001D7700((uint64_t)v114);
          id v85 = Logger.logObject.getter();
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            id v87 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v87 = 0;
            _os_log_impl((void *)&_mh_execute_header, v85, v86, "We had to make a new family organization.", v87, 2u);
            swift_slowDealloc();
          }

          v72(v84, v126);
          swift_errorRelease();
          os_log_type_t v110 = 0;
          uint64_t v64 = v124;
          goto LABEL_37;
        }

        uint64_t v100 = (uint64_t)v81;
        goto LABEL_43;
      }

LABEL_44:
      swift_errorRelease();
      return;
    }
    int v121 = v32;
    uint64_t v46 = (uint64_t)v120;
    id v47 = v127;
    sub_1001D7700((uint64_t)v120);
    id v48 = v111;
    id v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    id v52 = v112;
    uint64_t v118 = v48;
    if (v51)
    {
      id v53 = (uint8_t *)swift_slowAlloc();
      id v54 = (void *)swift_slowAlloc();
      *(_DWORD *)id v53 = 138543362;
      id v116 = v53 + 4;
      id v128 = v48;
      id v55 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v54 = v48;

      uint64_t v46 = (uint64_t)v120;
      id v56 = v127;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "The user: %{public}@ is using cloud settings.", v53, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v47 = v56;
      swift_slowDealloc();
    }
    else
    {

      id v49 = v48;
    }
    uint64_t v57 = v125;
    uint64_t v58 = (uint64_t)v119;

    int v59 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    uint64_t v60 = v46;
    uint64_t v61 = v126;
    v59(v60, v126);
    if (!v52)
    {
      __break(1u);
      return;
    }
    id v62 = [v52 organization];
    if (v62)
    {
      id v63 = v62;
      uint64_t v64 = v124;
      id v32 = v121;
      goto LABEL_38;
    }
    sub_1001D7700(v58);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Cloud settings does not have an organization.", v67, 2u);
      uint64_t v61 = v126;
      swift_slowDealloc();
    }

    id v127 = v59;
    v59(v58, v61);
    id v68 = v110;
    id v69 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    if (v68)
    {
      id v128 = v68;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      id v70 = v122;
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_18;
      }
      if (swift_getEnumCaseMultiPayload() != 7)
      {

        uint64_t v100 = (uint64_t)v70;
LABEL_43:
        sub_1000C9DB4(v100);
        goto LABEL_44;
      }
      if (v70->isa)
      {
LABEL_18:

        goto LABEL_44;
      }
      swift_errorRelease();
      id v101 = sub_1001D7640();
      id v102 = [objc_allocWithZone((Class)STiCloudOrganization) initWithContext:v101];

      uint64_t v123 = (uint64_t)v102;
      [v52 setOrganization:v102];
      uint64_t v103 = (uint64_t)v113;
      sub_1001D7700((uint64_t)v113);
      unint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v104, v105))
      {
        unint64_t v106 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v106 = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "We had to make a new cloud organization.", v106, 2u);
        swift_slowDealloc();
      }

      v127(v103, v61);
      swift_errorRelease();
      os_log_type_t v110 = 0;
    }
    else
    {
      uint64_t v123 = (uint64_t)v69;
      os_log_type_t v110 = 0;
      uint64_t v88 = (uint64_t)v117;
      sub_1001D7700((uint64_t)v117);
      uint64_t v89 = Logger.logObject.getter();
      os_log_type_t v90 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v89, v90))
      {
        uint64_t v91 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v91 = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "Found the existing cloud organization.", v91, 2u);
        uint64_t v88 = (uint64_t)v117;
        swift_slowDealloc();
      }

      v127(v88, v61);
    }
    uint64_t v64 = v124;
    id v32 = v121;
LABEL_37:
    id v63 = (id)v123;
LABEL_38:
    id v96 = v109;
    uint64_t v97 = v63;
    [v109 setCurrentOrganization:v63];
    LOBYTE(v128) = 0;
    id v98 = sub_1001D7640();
    __chkstk_darwin(v98);
    *(void *)&v107[-32] = v47;
    *(void *)&v107[-24] = 0;
    *(void *)&v107[-16] = &v128;
    unint64_t v99 = v110;
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (!v99) {
      *uint64_t v64 = (v108 ^ v128) & 1;
    }
  }
}

id sub_1001FE26C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v44 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v38 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - v12;
  id v14 = [a1 changeType];
  if ((unint64_t)v14 >= 2)
  {
    if (v14 == (id)2)
    {
      sub_1001D7700((uint64_t)v11);
      uint64_t v28 = a1;
      os_log_type_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v42 = v5;
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        id v32 = (void *)swift_slowAlloc();
        uint64_t v43 = v4;
        *(_DWORD *)uint64_t v31 = 138412290;
        uint64_t v40 = (uint64_t)(v31 + 4);
        int v41 = v31;
        uint64_t v46 = v28;
        id v33 = v28;
        uint64_t v5 = v42;
        uint64_t v4 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v32 = v28;

        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Delete change: %@ impacts family", v41, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        os_log_type_t v29 = v28;
      }

      id result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
    else
    {
      sub_1001D7700((uint64_t)v8);
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        id v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unknown NSPersistentChangeHistory type detected.", v37, 2u);
        swift_slowDealloc();
      }

      id result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    unsigned char *v44 = 0;
  }
  else
  {
    id result = sub_1001FE7B4(a1);
    if (!v2)
    {
      LODWORD(v41) = result;
      sub_1001D7700((uint64_t)v13);
      id v16 = a1;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      int v19 = v18;
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v20 = swift_slowAlloc();
        id v21 = (void *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        uint64_t v46 = v40;
        *(_DWORD *)uint64_t v20 = 138412546;
        int v39 = v19;
        uint64_t v42 = v5;
        uint64_t v45 = (uint64_t)v16;
        os_log_t v38 = v17;
        id v22 = v16;
        uint64_t v43 = v4;
        id v23 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v21 = v16;

        *(_WORD *)(v20 + 12) = 2080;
        char v24 = (char)v41;
        if (v41) {
          uint64_t v25 = 0x2073746361706D69;
        }
        else {
          uint64_t v25 = 0xD000000000000017;
        }
        if (v41) {
          unint64_t v26 = 0xEE00796C696D6166;
        }
        else {
          unint64_t v26 = 0x8000000100296020;
        }
        uint64_t v45 = sub_1000A2E70(v25, v26, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v27 = v38;
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Updated change: %@ %s", (uint8_t *)v20, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id result = (id)(*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v13, v43);
      }
      else
      {

        id result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v13, v4);
        char v24 = (char)v41;
      }
      unsigned char *v44 = v24 & 1;
    }
  }
  return result;
}

id sub_1001FE7B4(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_1001D7640();
  id v7 = [a1 changedObjectID];
  id v74 = 0;
  id v8 = [v6 existingObjectWithID:v7 error:&v74];

  uint64_t v9 = v74;
  if (!v8)
  {
    uint64_t v72 = v3;
    uint64_t v73 = v2;
    uint64_t v17 = v74;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for CocoaError.Code();
    uint64_t v18 = *(void *)(v10 - 8);
    __chkstk_darwin(v10);
    uint64_t v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_errorRetain();
    static CocoaError.managedObjectReferentialIntegrity.getter();
    sub_10020D2E4((unint64_t *)&qword_100341D70, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    char v21 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v10);
    if (v21)
    {
      swift_errorRelease();
      sub_1001D7700((uint64_t)v5);
      id v22 = a1;
      id v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        id v71 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 138412290;
        id v74 = v22;
        unint64_t v26 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v71 = v22;

        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Object for change: %@ no longer exists. Skipping update.", v25, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v23 = v22;
      }
      uint64_t v42 = v72;
      uint64_t v10 = v73;

      (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v10);
      LOBYTE(v10) = 0;
    }
    return (id)(v10 & 1);
  }
  uint64_t v10 = (uint64_t)v8;
  uint64_t v11 = v9;
  id v12 = [(id)v10 entity];
  id v13 = [v12 name];

  if (v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  sub_1000A0760(0, (unint64_t *)&unk_100342B80);
  id v27 = [(id)swift_getObjCClassFromMetadata() entityName];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  if (v16)
  {
    if (v28 == v14 && v16 == v30)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      LOBYTE(v10) = 1;
      return (id)(v10 & 1);
    }
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_bridgeObjectRelease();

      LOBYTE(v10) = 1;
      return (id)(v10 & 1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
  id v32 = [(id)swift_getObjCClassFromMetadata() entityName];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  if (v16)
  {
    if (v33 == v14 && v16 == v35)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      self;
      id v37 = [(id)swift_dynamicCastObjCClassUnconditional() organization];
      goto LABEL_47;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_22;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1000A0760(0, (unint64_t *)&qword_100340F90);
  id v38 = [(id)swift_getObjCClassFromMetadata() entityName];
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;

  if (v16)
  {
    if (v39 == v14 && v16 == v41) {
      goto LABEL_42;
    }
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v43)
    {
LABEL_45:
      swift_bridgeObjectRelease();
      self;
      id v50 = [(id)swift_dynamicCastObjCClassUnconditional() blueprint];
      id v51 = [v50 organization];
      goto LABEL_46;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1000A0760(0, &qword_100342BC0);
  id v44 = [(id)swift_getObjCClassFromMetadata() entityName];
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  if (!v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  if (v45 != v14 || v16 != v47)
  {
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v48) {
      goto LABEL_37;
    }
LABEL_39:
    sub_1000A0760(0, &qword_100342BC8);
    id v52 = [(id)swift_getObjCClassFromMetadata() entityName];
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;

    if (v16)
    {
      if (v53 == v14 && v16 == v55)
      {
LABEL_42:
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v56) {
        goto LABEL_45;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_1000A0760(0, &qword_1003415E0);
    id v57 = [(id)swift_getObjCClassFromMetadata() entityName];
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;

    if (v16)
    {
      if (v58 == v14 && v16 == v60)
      {
        swift_bridgeObjectRelease();
LABEL_55:
        swift_bridgeObjectRelease();
        self;
        id v62 = [(id)swift_dynamicCastObjCClassUnconditional() localUser];

        LOBYTE(v10) = v62 != 0;
        return (id)(v10 & 1);
      }
      char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v61) {
        goto LABEL_55;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_1000A0760(0, (unint64_t *)&unk_100343A60);
    id v63 = [(id)swift_getObjCClassFromMetadata() entityName];
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;

    if (!v16)
    {

      swift_bridgeObjectRelease();
      goto LABEL_65;
    }
    if (v64 == v14 && v16 == v66)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v67 & 1) == 0)
      {

        goto LABEL_65;
      }
    }
    self;
    id result = [(id)swift_dynamicCastObjCClassUnconditional() userDeviceState];
    if (result)
    {
      id v68 = result;
      id v69 = [result localUser];

      LOBYTE(v10) = v69 != 0;
      return (id)(v10 & 1);
    }
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
LABEL_37:
  swift_bridgeObjectRelease();
  self;
  id result = [(id)swift_dynamicCastObjCClassUnconditional() blueprint];
  if (result)
  {
    id v50 = result;
    id v51 = [result organization];
LABEL_46:
    id v37 = v51;

LABEL_47:
    if (v37)
    {
      self;
      LOBYTE(v10) = swift_dynamicCastObjCClass() != 0;

      return (id)(v10 & 1);
    }
LABEL_65:
    LOBYTE(v10) = 0;
    return (id)(v10 & 1);
  }
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

id sub_1001FF2B4(void *a1, int a2, NSObject *a3, void *a4)
{
  long long v192 = a3;
  LODWORD(v191) = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v189 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v177 - v11;
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  uint64_t v193 = v4;
  uint64_t v190 = v7;
  if (v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;
    if (v51 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v53 != v54)
    {
      char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v56 & 1) == 0)
      {
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v59 = v58;
        if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60)
        {
          swift_bridgeObjectRelease_n();
          return (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v75) {
          return (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v82 = v81;
        if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v82 == v83) {
          goto LABEL_38;
        }
        char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v87 & 1) == 0)
        {
          uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v94 = v93;
          if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v94 == v95)
          {
LABEL_57:
            swift_bridgeObjectRelease_n();
LABEL_62:
            id v194 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v195 = v85;
            swift_bridgeObjectRetain();
            v86._countAndFlagsBits = 95;
            v86._object = (void *)0xE100000000000000;
            String.append(_:)(v86);
            swift_bridgeObjectRelease();
            id v41 = v194;
            uint64_t v40 = v195;
            id v42 = [v192 dsid];
            id v43 = [v42 stringValue];
            goto LABEL_25;
          }
          char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v109) {
            goto LABEL_62;
          }
          uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v116 = v115;
          if (v114 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v116 == v117) {
            goto LABEL_67;
          }
          char v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v119) {
            goto LABEL_72;
          }
          uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v122 = v121;
          if (v120 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v122 == v123)
          {
LABEL_77:
            swift_bridgeObjectRelease_n();
            goto LABEL_82;
          }
          char v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v153)
          {
LABEL_82:
            if ((v191 & 1) == 0)
            {
              uint64_t v124 = type metadata accessor for UUID();
              uint64_t v125 = *(void *)(v124 - 8);
              __chkstk_darwin(v124);
              id v127 = (char *)&v177 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
              UUID.init()();
              uint64_t v49 = UUID.uuidString.getter();
              (*(void (**)(char *, uint64_t))(v125 + 8))(v127, v124);
              return (id)v49;
            }
            goto LABEL_72;
          }
          sub_1001D7700((uint64_t)v10);
          uint64_t v154 = swift_allocObject();
          *(void *)(v154 + 16) = a1;
          uint64_t v155 = v154;
          uint64_t v191 = v154;
          uint64_t v193 = swift_allocObject();
          *(void *)(v193 + 16) = a4;
          id v156 = a1;
          id v157 = a4;
          id v184 = v156;
          id v185 = v157;
          long long v192 = Logger.logObject.getter();
          LODWORD(v180) = static os_log_type_t.error.getter();
          os_log_t v187 = (os_log_t)swift_allocObject();
          LOBYTE(v187[2].isa) = 34;
          uint64_t v158 = swift_allocObject();
          *(unsigned char *)(v158 + 16) = 8;
          uint64_t v159 = v158;
          uint64_t v160 = (void *)swift_allocObject();
          v160[2] = sub_1000FE290;
          v160[3] = v155;
          uint64_t v161 = swift_allocObject();
          *(void *)(v161 + 16) = sub_1000FE51C;
          *(void *)(v161 + 24) = v160;
          uint64_t v162 = v161;
          uint64_t v188 = v161;
          uint64_t v186 = swift_allocObject();
          *(unsigned char *)(v186 + 16) = 66;
          uint64_t v178 = swift_allocObject();
          *(unsigned char *)(v178 + 16) = 8;
          char v163 = (void *)swift_allocObject();
          uint64_t v164 = v193;
          v163[2] = sub_1000FE6A0;
          v163[3] = v164;
          uint64_t v165 = swift_allocObject();
          *(void *)(v165 + 16) = sub_1000FE520;
          *(void *)(v165 + 24) = v163;
          sub_10009EE78(&qword_100342BF8);
          uint64_t inited = swift_initStackObject();
          v179 = (void *)sub_10010D550(inited, 6);
          os_log_t v167 = v187;
          void *v168 = sub_1000FE55C;
          v168[1] = v167;
          v168[2] = sub_1000FE55C;
          v168[3] = v159;
          v168[4] = sub_1000FE554;
          v168[5] = v162;
          uint64_t v169 = v186;
          v168[6] = sub_1000FE55C;
          v168[7] = v169;
          uint64_t v170 = v178;
          v168[8] = sub_1000FE55C;
          v168[9] = v170;
          v168[10] = sub_1000FE558;
          v168[11] = v165;
          swift_retain();
          id v183 = v160;
          swift_retain();
          swift_retain();
          id v182 = v163;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v181 = v165;
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v180) = v180;
          if (os_log_type_enabled(v192, (os_log_type_t)v180))
          {
            uint64_t v171 = (uint8_t *)swift_slowAlloc();
            v179 = (void *)swift_slowAlloc();
            id v194 = (id)swift_slowAlloc();
            *(_WORD *)uint64_t v171 = 514;
            v171[2] = 34;
            swift_release();
            v171[3] = 8;
            swift_release();
            uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v196 = sub_1000A2E70(v172, v173, (uint64_t *)&v194);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            v171[12] = 66;
            swift_release();
            v171[13] = 8;
            swift_release();
            id v174 = v185;
            uint64_t v196 = (uint64_t)v185;
            id v175 = v185;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v179 = v174;

            swift_release();
            swift_release();
            swift_release();
            Class v176 = v192;
            _os_log_impl((void *)&_mh_execute_header, v192, (os_log_type_t)v180, "Unknown blueprint type used to create blueprint identifier: Type = %{public}s, Org = %{public}@", v171, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          (*(void (**)(char *, uint64_t))(v189 + 8))(v10, v190);
LABEL_93:
          uint64_t v49 = type metadata accessor for DataStore.DataStoreError(0);
          sub_1000AA560();
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          return (id)v49;
        }
      }
LABEL_39:
      id v194 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v195 = v63;
      swift_bridgeObjectRetain();
      v64._countAndFlagsBits = 95;
      v64._object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      id v65 = v194;
      uint64_t v66 = v195;
      self;
      uint64_t v67 = swift_dynamicCastObjCClass();
      if (v67) {
        uint64_t v68 = 0x796C696D6166;
      }
      else {
        uint64_t v68 = 0x6C616E6F73726570;
      }
      if (v67) {
        id v69 = (void *)0xE600000000000000;
      }
      else {
        id v69 = (void *)0xE800000000000000;
      }
      id v194 = v65;
      uint64_t v195 = v66;
      swift_bridgeObjectRetain();
      v70._countAndFlagsBits = v68;
      v70._object = v69;
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
LABEL_38:
    swift_bridgeObjectRelease_n();
    goto LABEL_39;
  }
LABEL_4:
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_18:
    id v194 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v195 = v31;
    swift_bridgeObjectRetain();
    v32._countAndFlagsBits = 95;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    id v33 = v194;
    uint64_t v34 = v195;
    self;
    uint64_t v35 = swift_dynamicCastObjCClass();
    if (v35) {
      uint64_t v36 = 0x796C696D6166;
    }
    else {
      uint64_t v36 = 0x6C616E6F73726570;
    }
    if (v35) {
      id v37 = (void *)0xE600000000000000;
    }
    else {
      id v37 = (void *)0xE800000000000000;
    }
    goto LABEL_24;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_37:
    id v194 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v195 = v61;
    swift_bridgeObjectRetain();
    v62._countAndFlagsBits = 46;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    id v41 = v194;
    uint64_t v40 = v195;
    id v42 = [v192 dsid];
    id v43 = [v42 stringValue];
    goto LABEL_25;
  }
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;
  if (v27 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v29 != v30)
  {
    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v71) {
      goto LABEL_47;
    }
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v78 = v77;
    if (v76 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v78 == v79) {
      goto LABEL_57;
    }
    char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v84) {
      goto LABEL_62;
    }
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v90 = v89;
    if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v90 == v91)
    {
LABEL_67:
      swift_bridgeObjectRelease_n();
LABEL_72:
      id v194 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v195 = v97;
      swift_bridgeObjectRetain();
      v98._countAndFlagsBits = 95;
      v98._object = (void *)0xE100000000000000;
      String.append(_:)(v98);
      swift_bridgeObjectRelease();
      id v100 = v194;
      uint64_t v99 = v195;
      uint64_t v101 = type metadata accessor for UUID();
      uint64_t v102 = *(void *)(v101 - 8);
      __chkstk_darwin(v101);
      unint64_t v104 = (char *)&v177 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
      UUID.init()();
      uint64_t v105 = UUID.uuidString.getter();
      id v107 = v106;
      (*(void (**)(char *, uint64_t))(v102 + 8))(v104, v101);
      id v194 = v100;
      uint64_t v195 = v99;
      swift_bridgeObjectRetain();
      v108._countAndFlagsBits = v105;
      v108._object = v107;
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v194;
    }
    char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v96) {
      goto LABEL_72;
    }
    uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v112 = v111;
    if (v110 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v112 == v113) {
      goto LABEL_77;
    }
    char v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118) {
      goto LABEL_82;
    }
    sub_1001D7700((uint64_t)v12);
    id v128 = swift_allocObject();
    v128[2].Class isa = (Class)a1;
    id v129 = v128;
    long long v192 = v128;
    uint64_t v193 = swift_allocObject();
    *(void *)(v193 + 16) = a4;
    id v130 = a1;
    id v131 = a4;
    id v182 = v130;
    id v183 = v131;
    os_log_t v187 = (os_log_t)Logger.logObject.getter();
    LODWORD(v186) = static os_log_type_t.error.getter();
    uint64_t v132 = swift_allocObject();
    *(unsigned char *)(v132 + 16) = 34;
    uint64_t v133 = v132;
    uint64_t v191 = swift_allocObject();
    *(unsigned char *)(v191 + 16) = 8;
    uint64_t v134 = swift_allocObject();
    *(void *)(v134 + 16) = sub_1000FE680;
    *(void *)(v134 + 24) = v129;
    uint64_t v135 = swift_allocObject();
    *(void *)(v135 + 16) = sub_1000FE51C;
    *(void *)(v135 + 24) = v134;
    id v185 = (id)swift_allocObject();
    *((unsigned char *)v185 + 16) = 66;
    uint64_t v136 = swift_allocObject();
    *(unsigned char *)(v136 + 16) = 8;
    uint64_t v188 = v136;
    uint64_t v137 = swift_allocObject();
    uint64_t v138 = v193;
    *(void *)(v137 + 16) = sub_1000FDFD8;
    *(void *)(v137 + 24) = v138;
    uint64_t v139 = swift_allocObject();
    *(void *)(v139 + 16) = sub_1000FE520;
    *(void *)(v139 + 24) = v137;
    sub_10009EE78(&qword_100342BF8);
    uint64_t v140 = swift_initStackObject();
    id v184 = (id)sub_10010D550(v140, 6);
    void *v141 = sub_1000FE55C;
    v141[1] = v133;
    uint64_t v142 = (void *)v133;
    uint64_t v143 = v191;
    v141[2] = sub_1000FE55C;
    v141[3] = v143;
    v141[4] = sub_1000FE554;
    v141[5] = v135;
    id v144 = v185;
    v141[6] = sub_1000FE55C;
    v141[7] = v144;
    v141[8] = sub_1000FE55C;
    v141[9] = v136;
    v141[10] = sub_1000FE558;
    v141[11] = v139;
    id v145 = v142;
    swift_retain();
    uint64_t v181 = v134;
    swift_retain();
    swift_retain();
    uint64_t v178 = v137;
    swift_retain();
    v179 = v145;
    swift_retain();
    swift_retain();
    uint64_t v180 = v135;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    os_log_t v146 = v187;
    LODWORD(v186) = v186;
    if (os_log_type_enabled(v187, (os_log_type_t)v186))
    {
      id v147 = (uint8_t *)swift_slowAlloc();
      Class v177 = (void *)swift_slowAlloc();
      id v184 = (id)swift_slowAlloc();
      id v194 = v184;
      *(_WORD *)id v147 = 514;
      v147[2] = 34;
      swift_release();
      v147[3] = 8;
      swift_release();
      uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v196 = sub_1000A2E70(v148, v149, (uint64_t *)&v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v147[12] = 66;
      swift_release();
      v147[13] = 8;
      swift_release();
      id v150 = v183;
      uint64_t v196 = (uint64_t)v183;
      id v151 = v183;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v177 = v150;

      swift_release();
      swift_release();
      swift_release();
      os_log_t v152 = v187;
      _os_log_impl((void *)&_mh_execute_header, v187, (os_log_type_t)v186, "Unknown blueprint type used to create blueprint identifier: Type = %{public}s, Org = %{public}@", v147, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v189 + 8))(v12, v190);
    goto LABEL_93;
  }
  swift_bridgeObjectRelease_n();
LABEL_47:
  id v194 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v195 = v72;
  swift_bridgeObjectRetain();
  v73._countAndFlagsBits = 95;
  v73._object = (void *)0xE100000000000000;
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  id v33 = v194;
  uint64_t v34 = v195;
  self;
  uint64_t v74 = swift_dynamicCastObjCClass();
  if (v74) {
    uint64_t v36 = 0x796C696D6166;
  }
  else {
    uint64_t v36 = 0x6C616E6F73726570;
  }
  if (v74) {
    id v37 = (void *)0xE600000000000000;
  }
  else {
    id v37 = (void *)0xE800000000000000;
  }
LABEL_24:
  id v194 = v33;
  uint64_t v195 = v34;
  swift_bridgeObjectRetain();
  v38._countAndFlagsBits = v36;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = 95;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  id v41 = v194;
  uint64_t v40 = v195;
  id v42 = [v192 dsid];
  id v43 = [v42 stringValue];
LABEL_25:
  id v44 = v43;

  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  id v194 = v41;
  uint64_t v195 = v40;
  swift_bridgeObjectRetain();
  v48._countAndFlagsBits = v45;
  v48._object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
  return v194;
}

uint64_t sub_100200A2C(objc_class *a1, NSObject *a2, NSObject *a3, uint64_t a4)
{
  v450 = a1;
  uint64_t v446 = a4;
  v447 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v444 = v5;
  uint64_t v445 = v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v426 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  id v12 = (char *)&v426 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (objc_class *)((char *)&v426 - v14);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v426 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v426 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v426 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  v443 = ((char *)&v426 - v26);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v426 - v27;
  self;
  v448 = a3;
  if (swift_dynamicCastObjCClass())
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v442 = v15;
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v29)
  {
LABEL_4:
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;
    id v33 = v450;
    if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v32 == v34)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
      {
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v39 = v38;
        if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v39 == v40)
        {
          swift_bridgeObjectRelease_n();
LABEL_27:
          uint64_t v66 = (void *)v446;
          if (v446)
          {
            uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v452 = v67;
            swift_bridgeObjectRetain();
            v68._countAndFlagsBits = 46;
            v68._object = (void *)0xE100000000000000;
            String.append(_:)(v68);
            uint64_t v70 = v451;
            uint64_t v69 = v452;
            id v71 = v66;
            swift_bridgeObjectRelease();
            id v72 = [v447 dsid];
            id v73 = [v72 stringValue];

            uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v76 = v75;

            uint64_t v451 = v70;
            uint64_t v452 = v69;
            swift_bridgeObjectRetain();
            v77._countAndFlagsBits = v74;
            v77._object = v76;
            String.append(_:)(v77);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v78._countAndFlagsBits = 46;
            v78._object = (void *)0xE100000000000000;
            String.append(_:)(v78);
            swift_bridgeObjectRelease();
            uint64_t v79 = v451;
            uint64_t v80 = v452;
            uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v83 = v82;
            uint64_t v451 = v79;
            uint64_t v452 = v80;
            swift_bridgeObjectRetain();
            v84._countAndFlagsBits = v81;
            v84._object = v83;
            String.append(_:)(v84);

            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
          sub_1001D7700((uint64_t)v28);
          uint64_t v94 = swift_allocObject();
          v94[2].Class isa = v33;
          uint64_t v95 = v94;
          v447 = v94;
          v449 = swift_allocObject();
          char v96 = v448;
          v449[2].Class isa = (Class)v448;
          uint64_t v97 = v33;
          Swift::String v98 = v96;
          v440 = v97;
          v441 = v98;
          v448 = Logger.logObject.getter();
          LODWORD(v446) = static os_log_type_t.error.getter();
          v443 = swift_allocObject();
          LOBYTE(v443[2].isa) = 34;
          uint64_t v99 = swift_allocObject();
          *(unsigned char *)(v99 + 16) = 8;
          id v100 = (objc_class *)swift_allocObject();
          *((void *)v100 + 2) = sub_1000FE680;
          *((void *)v100 + 3) = v95;
          uint64_t v101 = swift_allocObject();
          *(void *)(v101 + 16) = sub_1000FE51C;
          *(void *)(v101 + 24) = v100;
          uint64_t v102 = swift_allocObject();
          *(unsigned char *)(v102 + 16) = 66;
          uint64_t v103 = swift_allocObject();
          *(unsigned char *)(v103 + 16) = 8;
          unint64_t v104 = swift_allocObject();
          uint64_t v105 = v449;
          v104[2].Class isa = (Class)sub_1000FE6A0;
          v104[3].Class isa = (Class)v105;
          uint64_t v106 = swift_allocObject();
          *(void *)(v106 + 16) = sub_1000FE520;
          *(void *)(v106 + 24) = v104;
          sub_10009EE78(&qword_100342BF8);
          uint64_t v107 = swift_allocObject();
          v442 = (objc_class *)sub_10010D550(v107, 6);
          Swift::String v108 = v443;
          *char v109 = sub_1000FE55C;
          v109[1] = v108;
          v109[2] = sub_1000FE55C;
          v109[3] = v99;
          uint64_t v109[4] = sub_1000FE554;
          v109[5] = v101;
          v109[6] = sub_1000FE55C;
          v109[7] = v102;
          v109[8] = sub_1000FE55C;
          v109[9] = v103;
          v109[10] = sub_1000FE558;
          v109[11] = v106;
          swift_retain();
          v435 = v100;
          swift_retain();
          swift_retain();
          v436 = v104;
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v438 = v101;
          swift_retain();
          uint64_t v434 = v102;
          swift_retain();
          uint64_t v437 = v103;
          swift_retain();
          uint64_t v439 = v106;
          swift_retain();
          swift_bridgeObjectRelease();
          os_log_type_t v110 = v446;
          uint64_t v111 = v448;
          if (os_log_type_enabled(v448, (os_log_type_t)v446))
          {
            uint64_t v112 = (uint8_t *)swift_slowAlloc();
            uint64_t v113 = (void *)swift_slowAlloc();
            uint64_t v446 = swift_slowAlloc();
            uint64_t v451 = v446;
            *(_WORD *)uint64_t v112 = 514;
            v112[2] = 34;
            swift_release();
            v112[3] = 8;
            swift_release();
            uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            os_log_type_t v115 = v110;
            v453 = sub_1000A2E70(v114, v116, &v451);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            v112[12] = 66;
            swift_release();
            v112[13] = 8;
            swift_release();
            uint64_t v117 = v441;
            v453 = v441;
            char v118 = v441;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v113 = v117;

            swift_release();
            swift_release();
            swift_release();
            char v119 = v448;
            _os_log_impl((void *)&_mh_execute_header, v448, v115, "Configuration type is required to build restrictions configuration identifier: Type = %{public}s, Org = %{public}@", v112, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          (*(void (**)(char *, uint64_t))(v445 + 8))(v28, v444);
LABEL_47:
          uint64_t v58 = type metadata accessor for DataStore.DataStoreError(0);
          sub_1000AA560();
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          return v58;
        }
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v65) {
          goto LABEL_27;
        }
        uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v122 = v121;
        if (v120 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v122 == v123)
        {
          swift_bridgeObjectRelease_n();
LABEL_49:
          uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v452 = v129;
          swift_bridgeObjectRetain();
          v130._countAndFlagsBits = 95;
          v130._object = (void *)0xE100000000000000;
          String.append(_:)(v130);
          swift_bridgeObjectRelease();
          uint64_t v44 = v451;
          uint64_t v43 = v452;
          self;
          uint64_t v131 = swift_dynamicCastObjCClass();
          if (v131) {
            uint64_t v46 = 0x796C696D6166;
          }
          else {
            uint64_t v46 = 0x6C616E6F73726570;
          }
          if (v131) {
            uint64_t v47 = (void *)0xE600000000000000;
          }
          else {
            uint64_t v47 = (void *)0xE800000000000000;
          }
LABEL_19:
          uint64_t v451 = v44;
          uint64_t v452 = v43;
          swift_bridgeObjectRetain();
          v48._countAndFlagsBits = v46;
          v48._object = v47;
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v49._countAndFlagsBits = 95;
          v49._object = (void *)0xE100000000000000;
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          uint64_t v51 = v451;
          uint64_t v50 = v452;
          id v52 = [v447 dsid];
          id v53 = [v52 stringValue];

          uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          char v56 = v55;

          uint64_t v451 = v51;
          uint64_t v452 = v50;
          swift_bridgeObjectRetain();
          v57._countAndFlagsBits = v54;
          v57._object = v56;
          String.append(_:)(v57);
LABEL_20:
          swift_bridgeObjectRelease();
LABEL_21:
          swift_bridgeObjectRelease();
          return v451;
        }
        char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v128) {
          goto LABEL_49;
        }
        uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v171 = v170;
        if (v169 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v171 == v172)
        {
          swift_bridgeObjectRelease_n();
LABEL_69:
          uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v452 = v178;
          swift_bridgeObjectRetain();
          v179._countAndFlagsBits = 95;
          v179._object = (void *)0xE100000000000000;
          String.append(_:)(v179);
          swift_bridgeObjectRelease();
          uint64_t v44 = v451;
          uint64_t v43 = v452;
          self;
          uint64_t v180 = swift_dynamicCastObjCClass();
          if (v180) {
            uint64_t v46 = 0x796C696D6166;
          }
          else {
            uint64_t v46 = 0x6C616E6F73726570;
          }
          if (v180) {
            uint64_t v47 = (void *)0xE600000000000000;
          }
          else {
            uint64_t v47 = (void *)0xE800000000000000;
          }
          goto LABEL_19;
        }
        char v177 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v177) {
          goto LABEL_69;
        }
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v184 = v183;
        if (v182 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v184 == v185) {
          goto LABEL_79;
        }
        char v190 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v190) {
          goto LABEL_84;
        }
        uint64_t v199 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v201 = v200;
        if (v199 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v201 == v202)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v203 = (void *)v446;
        }
        else
        {
          char v208 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v203 = (void *)v446;
          if ((v208 & 1) == 0)
          {
            sub_1001D7700((uint64_t)v21);
            v242 = swift_allocObject();
            v242[2].Class isa = v33;
            v243 = v242;
            v447 = v242;
            v449 = swift_allocObject();
            v244 = v448;
            v449[2].Class isa = (Class)v448;
            v245 = v33;
            v246 = v244;
            v440 = v245;
            v441 = v246;
            v448 = Logger.logObject.getter();
            LODWORD(v446) = static os_log_type_t.error.getter();
            v443 = swift_allocObject();
            LOBYTE(v443[2].isa) = 34;
            uint64_t v247 = swift_allocObject();
            *(unsigned char *)(v247 + 16) = 8;
            v248 = (objc_class *)swift_allocObject();
            *((void *)v248 + 2) = sub_1000FE680;
            *((void *)v248 + 3) = v243;
            uint64_t v249 = swift_allocObject();
            *(void *)(v249 + 16) = sub_1000FE51C;
            *(void *)(v249 + 24) = v248;
            uint64_t v250 = swift_allocObject();
            *(unsigned char *)(v250 + 16) = 66;
            uint64_t v251 = swift_allocObject();
            *(unsigned char *)(v251 + 16) = 8;
            v252 = swift_allocObject();
            v253 = v449;
            v252[2].Class isa = (Class)sub_1000FE6A0;
            v252[3].Class isa = (Class)v253;
            uint64_t v254 = swift_allocObject();
            *(void *)(v254 + 16) = sub_1000FE520;
            *(void *)(v254 + 24) = v252;
            sub_10009EE78(&qword_100342BF8);
            uint64_t v255 = swift_allocObject();
            v442 = (objc_class *)sub_10010D550(v255, 6);
            v256 = v443;
            void *v257 = sub_1000FE55C;
            v257[1] = v256;
            v257[2] = sub_1000FE55C;
            v257[3] = v247;
            v257[4] = sub_1000FE554;
            v257[5] = v249;
            v257[6] = sub_1000FE55C;
            v257[7] = v250;
            v257[8] = sub_1000FE55C;
            v257[9] = v251;
            v257[10] = sub_1000FE558;
            v257[11] = v254;
            swift_retain();
            v435 = v248;
            swift_retain();
            swift_retain();
            v436 = v252;
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v438 = v249;
            swift_retain();
            uint64_t v434 = v250;
            swift_retain();
            uint64_t v437 = v251;
            swift_retain();
            uint64_t v439 = v254;
            swift_retain();
            swift_bridgeObjectRelease();
            LODWORD(v446) = v446;
            if (os_log_type_enabled(v448, (os_log_type_t)v446))
            {
              v258 = (uint8_t *)swift_slowAlloc();
              v442 = (objc_class *)swift_slowAlloc();
              uint64_t v451 = swift_slowAlloc();
              *(_WORD *)v258 = 514;
              v258[2] = 34;
              swift_release();
              v258[3] = 8;
              swift_release();
              uint64_t v259 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v453 = sub_1000A2E70(v259, v260, &v451);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              v258[12] = 66;
              swift_release();
              v258[13] = 8;
              swift_release();
              v261 = v441;
              v453 = v441;
              v262 = v441;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(void *)v442 = v261;

              swift_release();
              swift_release();
              swift_release();
              v263 = v448;
              _os_log_impl((void *)&_mh_execute_header, v448, (os_log_type_t)v446, "Unknown blueprint type used to create identifier: Type = %{public}s, Org = %{public}@", v258, 0x16u);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
            }
            (*(void (**)(char *, uint64_t))(v445 + 8))(v21, v444);
            goto LABEL_47;
          }
        }
        if (!v203)
        {
          sub_1001D7700((uint64_t)v24);
          uint64_t v220 = swift_allocObject();
          v220[2].Class isa = v33;
          uint64_t v221 = v220;
          v447 = v220;
          v449 = swift_allocObject();
          unint64_t v222 = v448;
          v449[2].Class isa = (Class)v448;
          char v223 = v33;
          uint64_t v224 = v222;
          v440 = v223;
          v441 = v224;
          v448 = Logger.logObject.getter();
          LODWORD(v446) = static os_log_type_t.error.getter();
          v443 = swift_allocObject();
          LOBYTE(v443[2].isa) = 34;
          uint64_t v225 = swift_allocObject();
          *(unsigned char *)(v225 + 16) = 8;
          uint64_t v226 = (objc_class *)swift_allocObject();
          *((void *)v226 + 2) = sub_1000FE680;
          *((void *)v226 + 3) = v221;
          uint64_t v227 = swift_allocObject();
          *(void *)(v227 + 16) = sub_1000FE51C;
          *(void *)(v227 + 24) = v226;
          uint64_t v228 = swift_allocObject();
          *(unsigned char *)(v228 + 16) = 66;
          uint64_t v229 = swift_allocObject();
          *(unsigned char *)(v229 + 16) = 8;
          v230 = swift_allocObject();
          uint64_t v231 = v449;
          v230[2].Class isa = (Class)sub_1000FE6A0;
          v230[3].Class isa = (Class)v231;
          uint64_t v232 = swift_allocObject();
          *(void *)(v232 + 16) = sub_1000FE520;
          *(void *)(v232 + 24) = v230;
          sub_10009EE78(&qword_100342BF8);
          uint64_t v233 = swift_allocObject();
          v442 = (objc_class *)sub_10010D550(v233, 6);
          uint64_t v234 = v443;
          *uint64_t v235 = sub_1000FE55C;
          v235[1] = v234;
          id v235[2] = sub_1000FE55C;
          v235[3] = v225;
          v235[4] = sub_1000FE554;
          v235[5] = v227;
          v235[6] = sub_1000FE55C;
          v235[7] = v228;
          v235[8] = sub_1000FE55C;
          v235[9] = v229;
          v235[10] = sub_1000FE558;
          v235[11] = v232;
          swift_retain();
          v435 = v226;
          swift_retain();
          swift_retain();
          v436 = v230;
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v438 = v227;
          swift_retain();
          uint64_t v434 = v228;
          swift_retain();
          uint64_t v437 = v229;
          swift_retain();
          uint64_t v439 = v232;
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v446) = v446;
          if (os_log_type_enabled(v448, (os_log_type_t)v446))
          {
            v236 = (uint8_t *)swift_slowAlloc();
            v442 = (objc_class *)swift_slowAlloc();
            uint64_t v451 = swift_slowAlloc();
            *(_WORD *)v236 = 514;
            v236[2] = 34;
            swift_release();
            v236[3] = 8;
            swift_release();
            uint64_t v237 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v453 = sub_1000A2E70(v237, v238, &v451);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            v236[12] = 66;
            swift_release();
            v236[13] = 8;
            swift_release();
            v239 = v441;
            v453 = v441;
            v240 = v441;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(void *)v442 = v239;

            swift_release();
            swift_release();
            swift_release();
            v241 = v448;
            _os_log_impl((void *)&_mh_execute_header, v448, (os_log_type_t)v446, "Configuration type is required to build managed user configuration identifier: Type = %{public}s Org = %{public}@", v236, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          (*(void (**)(char *, uint64_t))(v445 + 8))(v24, v444);
          goto LABEL_47;
        }
        uint64_t v209 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v211 = v210;
        if (v209 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v211 == v212)
        {
          id v213 = v203;
          swift_bridgeObjectRelease_n();
LABEL_112:
          uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v452 = v266;
          swift_bridgeObjectRetain();
          v267._countAndFlagsBits = 95;
          v267._object = (void *)0xE100000000000000;
          String.append(_:)(v267);
          swift_bridgeObjectRelease();
          v268 = v203;
          uint64_t v270 = v451;
          uint64_t v269 = v452;
          id v271 = [v447 dsid];
          id v272 = [v271 stringValue];
LABEL_113:
          id v273 = v272;

          uint64_t v274 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v276 = v275;

          uint64_t v451 = v270;
          uint64_t v452 = v269;
          swift_bridgeObjectRetain();
          v277._countAndFlagsBits = v274;
          v277._object = v276;
          String.append(_:)(v277);

          goto LABEL_20;
        }
        char v264 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v265 = v203;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v264) {
          goto LABEL_112;
        }
        uint64_t v278 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v280 = v279;
        if (v278 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v280 == v281) {
          goto LABEL_120;
        }
        char v311 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v311) {
          goto LABEL_129;
        }
        sub_1001D7700((uint64_t)v443);
        v348 = swift_allocObject();
        v348[2].Class isa = v265;
        v349 = v348;
        v441 = v348;
        v350 = (void *)swift_allocObject();
        v351 = v450;
        v350[2] = v450;
        v352 = v350;
        v442 = (objc_class *)v350;
        v449 = swift_allocObject();
        v353 = v448;
        v449[2].Class isa = (Class)v448;
        v354 = v265;
        v355 = v351;
        v356 = v353;
        v448 = v354;
        v432 = v355;
        v433 = v356;
        v447 = Logger.logObject.getter();
        LODWORD(v437) = static os_log_type_t.error.getter();
        uint64_t v434 = swift_allocObject();
        *(unsigned char *)(v434 + 16) = 34;
        uint64_t v357 = swift_allocObject();
        *(unsigned char *)(v357 + 16) = 8;
        v358 = (void *)swift_allocObject();
        v358[2] = sub_1000FE680;
        v358[3] = v349;
        v359 = v358;
        v440 = (objc_class *)v358;
        uint64_t v360 = swift_allocObject();
        *(void *)(v360 + 16) = sub_1000FE51C;
        *(void *)(v360 + 24) = v359;
        uint64_t v361 = v360;
        uint64_t v439 = v360;
        uint64_t v362 = swift_allocObject();
        *(unsigned char *)(v362 + 16) = 34;
        uint64_t v363 = v362;
        v436 = swift_allocObject();
        LOBYTE(v436[2].isa) = 8;
        uint64_t v364 = swift_allocObject();
        *(void *)(v364 + 16) = sub_1000FE680;
        *(void *)(v364 + 24) = v352;
        uint64_t v365 = swift_allocObject();
        *(void *)(v365 + 16) = sub_1000FE51C;
        *(void *)(v365 + 24) = v364;
        uint64_t v438 = swift_allocObject();
        *(unsigned char *)(v438 + 16) = 66;
        uint64_t v366 = swift_allocObject();
        *(unsigned char *)(v366 + 16) = 8;
        uint64_t v367 = swift_allocObject();
        v368 = v449;
        *(void *)(v367 + 16) = sub_1000FE6A0;
        *(void *)(v367 + 24) = v368;
        uint64_t v369 = swift_allocObject();
        *(void *)(v369 + 16) = sub_1000FE520;
        *(void *)(v369 + 24) = v367;
        sub_10009EE78(&qword_100342BF8);
        uint64_t v370 = swift_allocObject();
        v435 = (objc_class *)sub_10010D550(v370, 9);
        uint64_t v371 = v434;
        void *v372 = sub_1000FE55C;
        v372[1] = v371;
        v372[2] = sub_1000FE55C;
        v372[3] = v357;
        v372[4] = sub_1000FE554;
        v372[5] = v361;
        v372[6] = sub_1000FE55C;
        v372[7] = v363;
        uint64_t v373 = v363;
        v374 = v436;
        v372[8] = sub_1000FE55C;
        v372[9] = v374;
        v372[10] = sub_1000FE554;
        v372[11] = v365;
        uint64_t v375 = v438;
        v372[12] = sub_1000FE55C;
        v372[13] = v375;
        v372[14] = sub_1000FE55C;
        v372[15] = v366;
        v372[16] = sub_1000FE558;
        v372[17] = v369;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v431 = v364;
        swift_retain();
        swift_retain();
        uint64_t v429 = v367;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v427 = v373;
        swift_retain();
        swift_retain();
        uint64_t v430 = v365;
        swift_retain();
        swift_retain();
        swift_retain();
        v428 = (void *)v369;
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v437) = v437;
        if (os_log_type_enabled(v447, (os_log_type_t)v437))
        {
          v376 = (uint8_t *)swift_slowAlloc();
          v435 = (objc_class *)swift_slowAlloc();
          uint64_t v451 = swift_slowAlloc();
          *(_WORD *)v376 = 770;
          v376[2] = 34;
          swift_release();
          v376[3] = 8;
          swift_release();
          uint64_t v377 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v453 = sub_1000A2E70(v377, v378, &v451);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          v376[12] = 34;
          swift_release();
          v376[13] = 8;
          swift_release();
          uint64_t v379 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v453 = sub_1000A2E70(v379, v380, &v451);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          v376[22] = 66;
          swift_release();
          v376[23] = 8;
          swift_release();
          v381 = v433;
          v453 = v433;
          v382 = v433;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(void *)v435 = v381;

          swift_release();
          swift_release();
          swift_release();
          v383 = v447;
          _os_log_impl((void *)&_mh_execute_header, v447, (os_log_type_t)v437, "Unsupported configuration type for managed user configuration: Type = %{public}s, Blueprint = %{public}s, Org = %{public}@", v376, 0x20u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        (*(void (**)(NSObject *, uint64_t))(v445 + 8))(v443, v444);
        uint64_t v58 = type metadata accessor for DataStore.DataStoreError(0);
        sub_1000AA560();
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        return v58;
      }
    }
    uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v452 = v41;
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits = 95;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t v44 = v451;
    uint64_t v43 = v452;
    self;
    uint64_t v45 = swift_dynamicCastObjCClass();
    if (v45) {
      uint64_t v46 = 0x796C696D6166;
    }
    else {
      uint64_t v46 = 0x6C616E6F73726570;
    }
    if (v45) {
      uint64_t v47 = (void *)0xE600000000000000;
    }
    else {
      uint64_t v47 = (void *)0xE800000000000000;
    }
    goto LABEL_19;
  }
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;
  uint64_t v63 = v450;
  if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v64) {
    goto LABEL_25;
  }
  char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v85) {
    goto LABEL_30;
  }
  uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v126 = v125;
  if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v126 == v127)
  {
    swift_bridgeObjectRelease_n();
LABEL_56:
    uint64_t v133 = (void *)v446;
    if (v446)
    {
      uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v452 = v134;
      swift_bridgeObjectRetain();
      v135._countAndFlagsBits = 46;
      v135._object = (void *)0xE100000000000000;
      String.append(_:)(v135);
      uint64_t v136 = v451;
      uint64_t v137 = v452;
      id v138 = v133;
      swift_bridgeObjectRelease();
      uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v141 = v140;
      uint64_t v451 = v136;
      uint64_t v452 = v137;
      swift_bridgeObjectRetain();
      v142._countAndFlagsBits = v139;
      v142._object = v141;
      String.append(_:)(v142);

      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    sub_1001D7700((uint64_t)v18);
    uint64_t v143 = swift_allocObject();
    v143[2].Class isa = v63;
    id v144 = v143;
    v447 = v143;
    v449 = swift_allocObject();
    id v145 = v448;
    v449[2].Class isa = (Class)v448;
    os_log_t v146 = v63;
    id v147 = v145;
    v440 = v146;
    v441 = v147;
    v448 = Logger.logObject.getter();
    LODWORD(v446) = static os_log_type_t.error.getter();
    v443 = swift_allocObject();
    LOBYTE(v443[2].isa) = 34;
    uint64_t v148 = swift_allocObject();
    *(unsigned char *)(v148 + 16) = 8;
    unint64_t v149 = (objc_class *)swift_allocObject();
    *((void *)v149 + 2) = sub_1000FE680;
    *((void *)v149 + 3) = v144;
    uint64_t v150 = swift_allocObject();
    *(void *)(v150 + 16) = sub_1000FE51C;
    *(void *)(v150 + 24) = v149;
    uint64_t v151 = swift_allocObject();
    *(unsigned char *)(v151 + 16) = 66;
    uint64_t v152 = swift_allocObject();
    *(unsigned char *)(v152 + 16) = 8;
    char v153 = swift_allocObject();
    uint64_t v154 = v449;
    v153[2].Class isa = (Class)sub_1000FE6A0;
    v153[3].Class isa = (Class)v154;
    uint64_t v155 = swift_allocObject();
    *(void *)(v155 + 16) = sub_1000FE520;
    *(void *)(v155 + 24) = v153;
    sub_10009EE78(&qword_100342BF8);
    uint64_t v156 = swift_allocObject();
    v442 = (objc_class *)sub_10010D550(v156, 6);
    id v157 = v443;
    *uint64_t v158 = sub_1000FE55C;
    v158[1] = v157;
    v158[2] = sub_1000FE55C;
    v158[3] = v148;
    v158[4] = sub_1000FE554;
    v158[5] = v150;
    v158[6] = sub_1000FE55C;
    v158[7] = v151;
    v158[8] = sub_1000FE55C;
    v158[9] = v152;
    v158[10] = sub_1000FE558;
    v158[11] = v155;
    swift_retain();
    v435 = v149;
    swift_retain();
    swift_retain();
    v436 = v153;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v438 = v150;
    swift_retain();
    uint64_t v434 = v151;
    swift_retain();
    uint64_t v437 = v152;
    swift_retain();
    uint64_t v439 = v155;
    swift_retain();
    swift_bridgeObjectRelease();
    os_log_type_t v159 = v446;
    uint64_t v160 = v448;
    if (os_log_type_enabled(v448, (os_log_type_t)v446))
    {
      uint64_t v161 = (uint8_t *)swift_slowAlloc();
      uint64_t v162 = (void *)swift_slowAlloc();
      uint64_t v446 = swift_slowAlloc();
      uint64_t v451 = v446;
      *(_WORD *)uint64_t v161 = 514;
      v161[2] = 34;
      swift_release();
      v161[3] = 8;
      swift_release();
      uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_type_t v164 = v159;
      v453 = sub_1000A2E70(v163, v165, &v451);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v161[12] = 66;
      swift_release();
      v161[13] = 8;
      swift_release();
      unint64_t v166 = v441;
      v453 = v441;
      os_log_t v167 = v441;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v162 = v166;

      swift_release();
      swift_release();
      swift_release();
      uint64_t v168 = v448;
      _os_log_impl((void *)&_mh_execute_header, v448, v164, "Configuration type is required to build restrictions configuration identifier: Type = %{public}s, Org = %{public}@", v161, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v445 + 8))(v18, v444);
    goto LABEL_47;
  }
  char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v132) {
    goto LABEL_56;
  }
  uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v175 = v174;
  if (v173 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v175 == v176)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
LABEL_30:
    uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v452 = v86;
    swift_bridgeObjectRetain();
    v87._countAndFlagsBits = 95;
    v87._object = (void *)0xE100000000000000;
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    uint64_t v89 = v451;
    uint64_t v88 = v452;
    self;
    uint64_t v90 = swift_dynamicCastObjCClass();
    if (v90) {
      uint64_t v91 = 0x796C696D6166;
    }
    else {
      uint64_t v91 = 0x6C616E6F73726570;
    }
    if (v90) {
      uint64_t v92 = (void *)0xE600000000000000;
    }
    else {
      uint64_t v92 = (void *)0xE800000000000000;
    }
    uint64_t v451 = v89;
    uint64_t v452 = v88;
    swift_bridgeObjectRetain();
    v93._countAndFlagsBits = v91;
    v93._object = v92;
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  char v181 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v181) {
    goto LABEL_30;
  }
  uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v188 = v187;
  if (v186 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v188 == v189)
  {
    swift_bridgeObjectRelease_n();
LABEL_86:
    uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v452 = v196;
    swift_bridgeObjectRetain();
    v197._countAndFlagsBits = 95;
    v197._object = (void *)0xE100000000000000;
    String.append(_:)(v197);
    swift_bridgeObjectRelease();
    uint64_t v44 = v451;
    uint64_t v43 = v452;
    self;
    uint64_t v198 = swift_dynamicCastObjCClass();
    if (v198) {
      uint64_t v46 = 0x796C696D6166;
    }
    else {
      uint64_t v46 = 0x6C616E6F73726570;
    }
    if (v198) {
      uint64_t v47 = (void *)0xE600000000000000;
    }
    else {
      uint64_t v47 = (void *)0xE800000000000000;
    }
    goto LABEL_19;
  }
  char v195 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v195) {
    goto LABEL_86;
  }
  uint64_t v204 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v206 = v205;
  if (v204 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v206 == v207)
  {
LABEL_79:
    swift_bridgeObjectRelease_n();
LABEL_84:
    uint64_t v191 = type metadata accessor for UUID();
    uint64_t v192 = *(void *)(v191 - 8);
    __chkstk_darwin(v191);
    id v194 = (char *)&v426 - ((v193 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init()();
    uint64_t v58 = UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v192 + 8))(v194, v191);
    return v58;
  }
  char v214 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v214) {
    goto LABEL_84;
  }
  uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v217 = v216;
  if (v215 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v217 == v218)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v219 = (void *)v446;
  }
  else
  {
    char v282 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v219 = (void *)v446;
    if ((v282 & 1) == 0)
    {
      sub_1001D7700((uint64_t)v9);
      uint64_t v322 = swift_allocObject();
      *(void *)(v322 + 16) = v63;
      uint64_t v323 = v322;
      uint64_t v446 = v322;
      v324 = swift_allocObject();
      v325 = v448;
      v324[2].Class isa = (Class)v448;
      v326 = v324;
      v447 = v324;
      v327 = v63;
      v328 = v325;
      v443 = v327;
      v448 = v328;
      v449 = Logger.logObject.getter();
      LODWORD(v437) = static os_log_type_t.error.getter();
      uint64_t v329 = swift_allocObject();
      *(unsigned char *)(v329 + 16) = 34;
      uint64_t v330 = swift_allocObject();
      *(unsigned char *)(v330 + 16) = 8;
      v331 = swift_allocObject();
      v331[2].Class isa = (Class)sub_1000FE680;
      v331[3].Class isa = (Class)v323;
      uint64_t v332 = swift_allocObject();
      *(void *)(v332 + 16) = sub_1000FDD64;
      *(void *)(v332 + 24) = v331;
      v333 = (objc_class *)swift_allocObject();
      *((unsigned char *)v333 + 16) = 66;
      uint64_t v334 = swift_allocObject();
      *(unsigned char *)(v334 + 16) = 8;
      v335 = (objc_class *)swift_allocObject();
      *((void *)v335 + 2) = sub_1000FE6A0;
      *((void *)v335 + 3) = v326;
      uint64_t v336 = swift_allocObject();
      *(void *)(v336 + 16) = sub_1000FDE0C;
      *(void *)(v336 + 24) = v335;
      sub_10009EE78(&qword_100342BF8);
      uint64_t v337 = swift_allocObject();
      sub_10010D550(v337, 6);
      void *v338 = sub_1000FDD4C;
      v338[1] = v329;
      v338[2] = sub_1000FE55C;
      v338[3] = v330;
      v338[4] = sub_1000FDD6C;
      v338[5] = v332;
      v338[6] = sub_1000FE55C;
      v338[7] = v333;
      v338[8] = sub_1000FE55C;
      v338[9] = v334;
      v338[10] = sub_1000FDE14;
      v338[11] = v336;
      swift_retain();
      v441 = v331;
      swift_retain();
      swift_retain();
      v440 = v335;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v438 = v332;
      swift_retain();
      v442 = v333;
      swift_retain();
      swift_retain();
      uint64_t v439 = v336;
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v437) = v437;
      if (os_log_type_enabled(v449, (os_log_type_t)v437))
      {
        v339 = (uint8_t *)swift_slowAlloc();
        v436 = swift_slowAlloc();
        uint64_t v451 = swift_slowAlloc();
        *(_WORD *)v339 = 514;
        v339[2] = 34;
        swift_release();
        v339[3] = 8;
        swift_release();
        uint64_t v340 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v453 = sub_1000A2E70(v340, v341, &v451);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        v339[12] = 66;
        swift_release();
        v339[13] = 8;
        swift_release();
        v342 = v448;
        v453 = v448;
        v343 = v448;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v436->Class isa = (Class)v342;

        swift_release();
        swift_release();
        swift_release();
        v344 = v449;
        _os_log_impl((void *)&_mh_execute_header, v449, (os_log_type_t)v437, "Unknown blueprint type used to create identifier: Type = %{public}s, Org = %{public}@", v339, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v445 + 8))(v9, v444);
      goto LABEL_47;
    }
  }
  if (!v219)
  {
    sub_1001D7700((uint64_t)v12);
    uint64_t v288 = swift_allocObject();
    *(void *)(v288 + 16) = v63;
    uint64_t v289 = v288;
    uint64_t v446 = v288;
    v290 = swift_allocObject();
    v291 = v448;
    v290[2].Class isa = (Class)v448;
    v292 = v290;
    v447 = v290;
    v293 = v63;
    v294 = v291;
    v442 = v293;
    v443 = v294;
    v449 = Logger.logObject.getter();
    LODWORD(v448) = static os_log_type_t.error.getter();
    uint64_t v295 = swift_allocObject();
    *(unsigned char *)(v295 + 16) = 34;
    uint64_t v296 = swift_allocObject();
    *(unsigned char *)(v296 + 16) = 8;
    v297 = (objc_class *)swift_allocObject();
    *((void *)v297 + 2) = sub_1000FE680;
    *((void *)v297 + 3) = v289;
    uint64_t v298 = swift_allocObject();
    *(void *)(v298 + 16) = sub_1000FE51C;
    *(void *)(v298 + 24) = v297;
    v299 = swift_allocObject();
    LOBYTE(v299[2].isa) = 66;
    uint64_t v300 = swift_allocObject();
    *(unsigned char *)(v300 + 16) = 8;
    uint64_t v301 = swift_allocObject();
    *(void *)(v301 + 16) = sub_1000FE6A0;
    *(void *)(v301 + 24) = v292;
    uint64_t v302 = swift_allocObject();
    *(void *)(v302 + 16) = sub_1000FE520;
    *(void *)(v302 + 24) = v301;
    sub_10009EE78(&qword_100342BF8);
    uint64_t v303 = swift_allocObject();
    sub_10010D550(v303, 6);
    void *v304 = sub_1000FE55C;
    v304[1] = v295;
    v304[2] = sub_1000FE55C;
    v304[3] = v296;
    v304[4] = sub_1000FE554;
    v304[5] = v298;
    v304[6] = sub_1000FE55C;
    v304[7] = v299;
    v304[8] = sub_1000FE55C;
    v304[9] = v300;
    v304[10] = sub_1000FE558;
    v304[11] = v302;
    swift_retain();
    v440 = v297;
    swift_retain();
    swift_retain();
    uint64_t v439 = v301;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v437 = v298;
    swift_retain();
    v441 = v299;
    swift_retain();
    swift_retain();
    uint64_t v438 = v302;
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v448) = v448;
    if (os_log_type_enabled(v449, (os_log_type_t)v448))
    {
      v305 = (uint8_t *)swift_slowAlloc();
      v436 = swift_slowAlloc();
      uint64_t v451 = swift_slowAlloc();
      *(_WORD *)v305 = 514;
      v305[2] = 34;
      swift_release();
      v305[3] = 8;
      swift_release();
      uint64_t v306 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v453 = sub_1000A2E70(v306, v307, &v451);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v305[12] = 66;
      swift_release();
      v305[13] = 8;
      swift_release();
      v308 = v443;
      v453 = v443;
      v309 = v443;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v436->Class isa = (Class)v308;

      swift_release();
      swift_release();
      swift_release();
      v310 = v449;
      _os_log_impl((void *)&_mh_execute_header, v449, (os_log_type_t)v448, "Configuration type is required to build managed user configuration identifier: Type = %{public}s, Org = %{public}@", v305, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v445 + 8))(v12, v444);
    goto LABEL_47;
  }
  uint64_t v283 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v285 = v284;
  if (v283 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v285 == v286)
  {
    id v287 = v219;
    swift_bridgeObjectRelease_n();
    v268 = v219;
LABEL_133:
    uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v452 = v346;
    swift_bridgeObjectRetain();
    v347._countAndFlagsBits = 95;
    v347._object = (void *)0xE100000000000000;
    String.append(_:)(v347);
    swift_bridgeObjectRelease();
    uint64_t v270 = v451;
    uint64_t v269 = v452;
    id v271 = [v447 dsid];
    id v272 = [v271 stringValue];
    goto LABEL_113;
  }
  char v345 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v265 = v219;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v268 = v219;
  if (v345) {
    goto LABEL_133;
  }
  uint64_t v384 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v386 = v385;
  if (v384 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v386 == v387)
  {
LABEL_120:
    swift_bridgeObjectRelease_n();
LABEL_129:
    uint64_t v451 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v452 = v312;
    swift_bridgeObjectRetain();
    v313._countAndFlagsBits = 95;
    v313._object = (void *)0xE100000000000000;
    String.append(_:)(v313);
    swift_bridgeObjectRelease();
    uint64_t v315 = v451;
    uint64_t v314 = v452;
    id v316 = [v447 dsid];
    id v317 = [v316 stringValue];

    uint64_t v318 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v320 = v319;

    uint64_t v451 = v315;
    uint64_t v452 = v314;
    swift_bridgeObjectRetain();
    v321._countAndFlagsBits = v318;
    v321._object = v320;
    String.append(_:)(v321);

    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  char v388 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v388) {
    goto LABEL_129;
  }
  sub_1001D7700((uint64_t)v442);
  v389 = swift_allocObject();
  v389[2].Class isa = v265;
  v390 = v389;
  v441 = v389;
  v391 = swift_allocObject();
  v392 = v450;
  v391[2].Class isa = v450;
  v393 = v391;
  v443 = v391;
  v394 = swift_allocObject();
  v395 = v448;
  v394[2].Class isa = (Class)v448;
  v396 = v394;
  v447 = v394;
  v397 = v265;
  v398 = v392;
  v399 = v395;
  v449 = v397;
  v435 = v398;
  v436 = v399;
  v448 = Logger.logObject.getter();
  LODWORD(v429) = static os_log_type_t.error.getter();
  uint64_t v427 = swift_allocObject();
  *(unsigned char *)(v427 + 16) = 34;
  uint64_t v400 = swift_allocObject();
  *(unsigned char *)(v400 + 16) = 8;
  v401 = (void *)swift_allocObject();
  v401[2] = sub_1000FE680;
  v401[3] = v390;
  v402 = v401;
  v440 = (objc_class *)v401;
  uint64_t v403 = swift_allocObject();
  *(void *)(v403 + 16) = sub_1000FE51C;
  *(void *)(v403 + 24) = v402;
  uint64_t v404 = v403;
  uint64_t v438 = v403;
  uint64_t v405 = swift_allocObject();
  *(unsigned char *)(v405 + 16) = 34;
  uint64_t v406 = v405;
  uint64_t v437 = swift_allocObject();
  *(unsigned char *)(v437 + 16) = 8;
  uint64_t v407 = swift_allocObject();
  *(void *)(v407 + 16) = sub_1000FE680;
  *(void *)(v407 + 24) = v393;
  v408 = swift_allocObject();
  v408[2].Class isa = (Class)sub_1000FE51C;
  v408[3].Class isa = (Class)v407;
  uint64_t v439 = swift_allocObject();
  *(unsigned char *)(v439 + 16) = 66;
  uint64_t v409 = swift_allocObject();
  *(unsigned char *)(v409 + 16) = 8;
  v410 = (objc_class *)swift_allocObject();
  *((void *)v410 + 2) = sub_1000FE6A0;
  *((void *)v410 + 3) = v396;
  uint64_t v411 = swift_allocObject();
  *(void *)(v411 + 16) = sub_1000FE520;
  *(void *)(v411 + 24) = v410;
  sub_10009EE78(&qword_100342BF8);
  uint64_t v412 = swift_allocObject();
  v428 = (void *)sub_10010D550(v412, 9);
  uint64_t v413 = v427;
  void *v414 = sub_1000FE55C;
  v414[1] = v413;
  v414[2] = sub_1000FE55C;
  v414[3] = v400;
  v414[4] = sub_1000FE554;
  v414[5] = v404;
  v414[6] = sub_1000FE55C;
  v414[7] = v406;
  uint64_t v415 = v406;
  uint64_t v416 = v437;
  v414[8] = sub_1000FE55C;
  v414[9] = v416;
  v414[10] = sub_1000FE554;
  v414[11] = v408;
  uint64_t v417 = v439;
  v414[12] = sub_1000FE55C;
  v414[13] = v417;
  v414[14] = sub_1000FE55C;
  v414[15] = v409;
  v414[16] = sub_1000FE558;
  v414[17] = v411;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v434 = v407;
  swift_retain();
  swift_retain();
  v432 = v410;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v430 = v415;
  swift_retain();
  swift_retain();
  v433 = v408;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v431 = v411;
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v429) = v429;
  if (os_log_type_enabled(v448, (os_log_type_t)v429))
  {
    v418 = (uint8_t *)swift_slowAlloc();
    v428 = (void *)swift_slowAlloc();
    uint64_t v451 = swift_slowAlloc();
    *(_WORD *)v418 = 770;
    v418[2] = 34;
    swift_release();
    v418[3] = 8;
    swift_release();
    uint64_t v419 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v453 = sub_1000A2E70(v419, v420, &v451);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v418[12] = 34;
    swift_release();
    v418[13] = 8;
    swift_release();
    uint64_t v421 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v453 = sub_1000A2E70(v421, v422, &v451);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v418[22] = 66;
    swift_release();
    v418[23] = 8;
    swift_release();
    v423 = v436;
    v453 = v436;
    v424 = v436;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v428 = v423;

    swift_release();
    swift_release();
    swift_release();
    v425 = v448;
    _os_log_impl((void *)&_mh_execute_header, v448, (os_log_type_t)v429, "Unsupported configuration type for managed user configuration: Type = %{public}s, Blueprint = %{public}s, Org = %{public}@", v418, 0x20u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  (*(void (**)(objc_class *, uint64_t))(v445 + 8))(v442, v444);
  uint64_t v58 = type metadata accessor for DataStore.DataStoreError(0);
  sub_1000AA560();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();

  return v58;
}

uint64_t sub_100204B68()
{
  sub_1000A4FD8((uint64_t)v0 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  return swift_deallocClassInstance();
}

uint64_t sub_100204BEC()
{
  return type metadata accessor for DataStore(0);
}

uint64_t type metadata accessor for DataStore(uint64_t a1)
{
  return sub_1000C5978(a1, qword_100344CF0);
}

void sub_100204C14()
{
  sub_1000B57FC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DataStore.DataStoreError(uint64_t a1)
{
  return sub_1000C5978(a1, qword_100345558);
}

uint64_t sub_100204CE4()
{
  uint64_t v1 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v253 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1002073F4(v0, (uint64_t)v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v17._uint64_t countAndFlagsBits = 0xD000000000000031;
      v17._object = (void *)0x8000000100295BC0;
      String.append(_:)(v17);
      id v18 = [v4 description];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      v22._uint64_t countAndFlagsBits = v19;
      v22._object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 46;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      unint64_t v24 = v254;
      unint64_t v25 = v255;
      uint64_t v10 = (objc_class *)[self mainBundle];
      unint64_t v16 = 0xD00000000000001CLL;
      uint64_t v26 = "duplicateSerializableObjects";
      goto LABEL_34;
    case 2u:
      uint64_t v28 = *v3;
      uint64_t v27 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0xD000000000000026;
      unint64_t v255 = 0x8000000100295A70;
      v29._uint64_t countAndFlagsBits = v28;
      v29._object = v27;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000016;
      uint64_t v34 = "invalidDeclarationType";
      goto LABEL_38;
    case 3u:
      uint64_t v36 = *v3;
      uint64_t v35 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v37._uint64_t countAndFlagsBits = 0xD000000000000038;
      v37._object = (void *)0x8000000100295A10;
      String.append(_:)(v37);
      v38._uint64_t countAndFlagsBits = v36;
      v38._object = v35;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000014;
      uint64_t v34 = "invalidManagedObject";
      goto LABEL_38;
    case 4u:
      uint64_t v40 = *v3;
      uint64_t v39 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0xD00000000000002FLL;
      unint64_t v255 = 0x80000001002955E0;
      v41._uint64_t countAndFlagsBits = v40;
      v41._object = v39;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD00000000000001ALL;
      uint64_t v34 = "invalidNumberOfActivations";
      goto LABEL_38;
    case 5u:
      uint64_t v43 = *v3;
      Swift::String v42 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0xD000000000000030;
      unint64_t v255 = 0x8000000100295580;
      v44._uint64_t countAndFlagsBits = v43;
      v44._object = v42;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD00000000000001ALL;
      uint64_t v34 = "invalidNumberOfAskRequests";
      goto LABEL_38;
    case 6u:
      uint64_t v45 = (void *)*v3;
      uint64_t v46 = (void *)v3[1];
      unint64_t v47 = v3[2];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(73);
      v48._uint64_t countAndFlagsBits = 0xD000000000000026;
      v48._object = (void *)0x8000000100295530;
      String.append(_:)(v48);
      unint64_t v257 = (unint64_t)v46;
      type metadata accessor for STBlueprintType(0);
      _print_unlocked<A, B>(_:_:)();
      v49._uint64_t countAndFlagsBits = 0x20726F6620;
      v49._object = (void *)0xE500000000000000;
      String.append(_:)(v49);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v50._object = (void *)0x80000001002954F0;
      v50._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v50);
      unint64_t v257 = v47;
      v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = v254;
      id v53 = (void *)v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v55 = 0xD000000000000019;
      char v56 = "invalidNumberOfBlueprints";
      goto LABEL_26;
    case 7u:
      uint64_t v57 = *v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(71);
      v58._uint64_t countAndFlagsBits = 0xD000000000000045;
      v58._object = (void *)0x8000000100295910;
      String.append(_:)(v58);
      unint64_t v257 = v57;
      v59._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000021;
      uint64_t v34 = "invalidNumberOfCloudOrganizations";
      goto LABEL_38;
    case 8u:
      uint64_t v61 = *v3;
      uint64_t v60 = (void *)v3[1];
      uint64_t v63 = (void *)v3[2];
      unint64_t v62 = v3[3];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(114);
      v64._uint64_t countAndFlagsBits = 0xD000000000000045;
      v64._object = (void *)0x80000001002954A0;
      String.append(_:)(v64);
      unint64_t v257 = (unint64_t)v63;
      type metadata accessor for STBlueprintConfigurationType(0);
      _print_unlocked<A, B>(_:_:)();
      v65._uint64_t countAndFlagsBits = 0x756C6220726F6620;
      v65._object = (void *)0xEF20746E69727065;
      String.append(_:)(v65);
      v66._uint64_t countAndFlagsBits = v61;
      v66._object = v60;
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      v67._object = (void *)0x80000001002954F0;
      v67._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v67);
      unint64_t v257 = v62;
      v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      unint64_t v69 = v254;
      unint64_t v70 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v71 = 0xD00000000000001DLL;
      id v72 = "invalidNumberOfConfigurations";
      goto LABEL_47;
    case 9u:
      uint64_t v73 = *v3;
      uint64_t v74 = v3[1];
      unint64_t v75 = v3[3];
      unsigned __int8 v76 = *((unsigned char *)v3 + 16);
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      unint64_t v257 = v254;
      unint64_t v258 = v255;
      v77._uint64_t countAndFlagsBits = 0xD000000000000025;
      v77._object = (void *)0x80000001002958C0;
      String.append(_:)(v77);
      unint64_t v254 = v73;
      unint64_t v255 = v74;
      unsigned __int8 v256 = v76;
      _print_unlocked<A, B>(_:_:)();
      sub_1000B3840(v73, v74, v76);
      v78._object = (void *)0x80000001002954F0;
      v78._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v78);
      unint64_t v254 = v75;
      v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v79);
      swift_bridgeObjectRelease();
      unint64_t v30 = v257;
      unint64_t v31 = v258;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000016;
      uint64_t v34 = "invalidNumberOfDevices";
      goto LABEL_38;
    case 0xAu:
      uint64_t v80 = *v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(72);
      v81._uint64_t countAndFlagsBits = 0xD000000000000046;
      v81._object = (void *)0x8000000100295840;
      String.append(_:)(v81);
      unint64_t v257 = v80;
      v82._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000022;
      uint64_t v34 = "invalidNumberOfFamilyOrganizations";
      goto LABEL_38;
    case 0xBu:
      uint64_t v83 = *v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(64);
      v84._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
      v84._object = (void *)0x80000001002957E0;
      String.append(_:)(v84);
      unint64_t v257 = v83;
      v85._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v85);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD00000000000001BLL;
      uint64_t v34 = "invalidNumberOfLocalDevices";
      goto LABEL_38;
    case 0xCu:
      uint64_t v86 = *v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v87._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
      v87._object = (void *)0x80000001002957A0;
      String.append(_:)(v87);
      unint64_t v257 = v86;
      v88._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000019;
      uint64_t v34 = "invalidNumberOfLocalUsers";
      goto LABEL_38;
    case 0xDu:
      uint64_t v89 = *v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(71);
      v90._uint64_t countAndFlagsBits = 0xD000000000000045;
      v90._object = (void *)0x8000000100295990;
      String.append(_:)(v90);
      unint64_t v257 = v89;
      v91._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v91);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000021;
      uint64_t v34 = "invalidNumberOfScreenTimeSettings";
      goto LABEL_38;
    case 0xEu:
      uint64_t v4 = (void *)*v3;
      unint64_t v92 = v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(70);
      v93._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
      v93._object = (void *)0x8000000100295750;
      String.append(_:)(v93);
      id v94 = [v4 description];
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v97 = v96;

      v98._uint64_t countAndFlagsBits = v95;
      v98._object = v97;
      String.append(_:)(v98);
      swift_bridgeObjectRelease();
      v99._object = (void *)0x80000001002954F0;
      v99._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v99);
      unint64_t v257 = v92;
      v100._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      unint64_t v24 = v254;
      unint64_t v25 = v255;
      uint64_t v10 = (objc_class *)[self mainBundle];
      unint64_t v16 = 0xD000000000000019;
      uint64_t v26 = "invalidNumberOfLocalUsers";
      goto LABEL_34;
    case 0xFu:
      uint64_t v45 = (void *)*v3;
      uint64_t v101 = v3[1];
      uint64_t v102 = (void *)v3[2];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v103._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
      v103._object = (void *)0x8000000100295630;
      String.append(_:)(v103);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v104._uint64_t countAndFlagsBits = 0x20646E6120;
      v104._object = (void *)0xE500000000000000;
      String.append(_:)(v104);
      v105._uint64_t countAndFlagsBits = v101;
      v105._object = v102;
      String.append(_:)(v105);
      swift_bridgeObjectRelease();
      v106._uint64_t countAndFlagsBits = 46;
      v106._object = (void *)0xE100000000000000;
      String.append(_:)(v106);
      unint64_t v107 = v254;
      unint64_t v108 = v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v109 = 0xD00000000000001FLL;
      os_log_type_t v110 = "invalidNumberOfUserDeviceStates";
      goto LABEL_42;
    case 0x10u:
      uint64_t v45 = (void *)*v3;
      unint64_t v111 = v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(63);
      v112._uint64_t countAndFlagsBits = 0xD000000000000023;
      v112._object = (void *)0x8000000100295700;
      String.append(_:)(v112);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v113._object = (void *)0x80000001002954F0;
      v113._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v113);
      unint64_t v257 = v111;
      v114._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v114);
      swift_bridgeObjectRelease();
      unint64_t v107 = v254;
      unint64_t v108 = v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v109 = 0xD000000000000014;
      os_log_type_t v110 = "invalidNumberOfUsers";
      goto LABEL_42;
    case 0x11u:
      uint64_t v115 = *v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(72);
      v116._uint64_t countAndFlagsBits = 0xD000000000000046;
      v116._object = (void *)0x8000000100295680;
      String.append(_:)(v116);
      unint64_t v257 = v115;
      v117._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000020;
      uint64_t v34 = "invalidNumberOfUsersforBlueprint";
      goto LABEL_38;
    case 0x12u:
      uint64_t v119 = *v3;
      char v118 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v120._uint64_t countAndFlagsBits = 0xD000000000000019;
      v120._object = (void *)0x8000000100295460;
      String.append(_:)(v120);
      v121._uint64_t countAndFlagsBits = v119;
      v121._object = v118;
      String.append(_:)(v121);
      swift_bridgeObjectRelease();
      v122._uint64_t countAndFlagsBits = 0xD000000000000023;
      v122._object = (void *)0x8000000100295410;
      String.append(_:)(v122);
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000013;
      uint64_t v34 = "invalidOrganization";
      goto LABEL_38;
    case 0x13u:
      uint64_t v124 = *v3;
      uint64_t v123 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v125._object = (void *)0x80000001002953F0;
      v125._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v125);
      v126._uint64_t countAndFlagsBits = v124;
      v126._object = v123;
      String.append(_:)(v126);
      swift_bridgeObjectRelease();
      v127._uint64_t countAndFlagsBits = 0xD000000000000023;
      v127._object = (void *)0x8000000100295410;
      String.append(_:)(v127);
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD00000000000001CLL;
      uint64_t v34 = "invalidSerializableClassName";
      goto LABEL_38;
    case 0x14u:
      uint64_t v63 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      v128._uint64_t countAndFlagsBits = 0x74207265626D654DLL;
      v128._object = (void *)0xEF20666F20657079;
      String.append(_:)(v128);
      unint64_t v257 = (unint64_t)v63;
      type metadata accessor for STFamilyMemberType(0);
      _print_unlocked<A, B>(_:_:)();
      v129._uint64_t countAndFlagsBits = 0x75736E7520736920;
      v129._object = (void *)0xEF646574726F7070;
      String.append(_:)(v129);
      unint64_t v130 = v254;
      unint64_t v131 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v248 = 0xEF65707954726573;
      unint64_t v132 = v130;
      unint64_t v133 = v131;
      v134.super.Class isa = v32;
      uint64_t v135 = 0;
      unint64_t v136 = 0xE000000000000000;
      unint64_t v71 = 0x5564696C61766E69;
      goto LABEL_48;
    case 0x15u:
      uint64_t v138 = *v3;
      uint64_t v137 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0xD00000000000002CLL;
      unint64_t v255 = 0x80000001002951C0;
      v139._uint64_t countAndFlagsBits = v138;
      v139._object = v137;
      String.append(_:)(v139);
      swift_bridgeObjectRelease();
      v140._uint64_t countAndFlagsBits = 46;
      v140._object = (void *)0xE100000000000000;
      String.append(_:)(v140);
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000011;
      uint64_t v34 = "missingActivation";
      goto LABEL_38;
    case 0x16u:
      uint64_t v142 = *v3;
      uint64_t v141 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v143._uint64_t countAndFlagsBits = 0xD000000000000030;
      v143._object = (void *)0x8000000100295160;
      String.append(_:)(v143);
      v144._uint64_t countAndFlagsBits = v142;
      v144._object = v141;
      String.append(_:)(v144);
      swift_bridgeObjectRelease();
      v145._uint64_t countAndFlagsBits = 46;
      v145._object = (void *)0xE100000000000000;
      String.append(_:)(v145);
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000011;
      uint64_t v34 = "missingAskRequest";
      goto LABEL_38;
    case 0x17u:
      uint64_t v46 = (void *)*v3;
      uint64_t v45 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      v146._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v146._object = (void *)0x8000000100295120;
      String.append(_:)(v146);
      unint64_t v257 = (unint64_t)v46;
      type metadata accessor for STBlueprintType(0);
      _print_unlocked<A, B>(_:_:)();
      v147._uint64_t countAndFlagsBits = 0x20726F6620;
      v147._object = (void *)0xE500000000000000;
      String.append(_:)(v147);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v148._uint64_t countAndFlagsBits = 46;
      v148._object = (void *)0xE100000000000000;
      String.append(_:)(v148);
      uint64_t v52 = v254;
      id v53 = (void *)v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v55 = 0xD000000000000010;
      char v56 = "missingBlueprint";
LABEL_26:
      unint64_t v249 = (unint64_t)(v56 - 32) | 0x8000000000000000;
      v149._uint64_t countAndFlagsBits = v52;
      v149._object = v53;
      v150._uint64_t countAndFlagsBits = 0;
      v150._object = (void *)0xE000000000000000;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v149, (Swift::String_optional)0, (NSBundle)v54, v150, *(Swift::String *)&v55)._countAndFlagsBits;

      goto LABEL_44;
    case 0x18u:
      uint64_t v45 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      v152._uint64_t countAndFlagsBits = 0xD000000000000020;
      v152._object = (void *)0x80000001002950D0;
      String.append(_:)(v152);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v153._uint64_t countAndFlagsBits = 46;
      v153._object = (void *)0xE100000000000000;
      String.append(_:)(v153);
      unint64_t v107 = v254;
      unint64_t v108 = v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v109 = 0xD000000000000014;
      os_log_type_t v110 = "missingCloudSettings";
      goto LABEL_42;
    case 0x19u:
      uint64_t v63 = (void *)*v3;
      uint64_t v154 = v3[1];
      uint64_t v155 = (void *)v3[2];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v156._uint64_t countAndFlagsBits = 0xD000000000000022;
      v156._object = (void *)0x8000000100295080;
      String.append(_:)(v156);
      unint64_t v257 = (unint64_t)v63;
      type metadata accessor for STBlueprintConfigurationType(0);
      _print_unlocked<A, B>(_:_:)();
      v157._uint64_t countAndFlagsBits = 0x756C6220726F6620;
      v157._object = (void *)0xEF20746E69727065;
      String.append(_:)(v157);
      v158._uint64_t countAndFlagsBits = v154;
      v158._object = v155;
      String.append(_:)(v158);
      swift_bridgeObjectRelease();
      v159._uint64_t countAndFlagsBits = 46;
      v159._object = (void *)0xE100000000000000;
      String.append(_:)(v159);
      unint64_t v69 = v254;
      unint64_t v70 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v71 = 0xD000000000000014;
      id v72 = "missingConfiguration";
      goto LABEL_47;
    case 0x1Au:
      uint64_t v160 = *v3;
      uint64_t v161 = (void *)v3[1];
      uint64_t v45 = (void *)v3[2];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      v162._uint64_t countAndFlagsBits = 0xD000000000000020;
      v162._object = (void *)0x8000000100294F60;
      String.append(_:)(v162);
      v163._uint64_t countAndFlagsBits = v160;
      v163._object = v161;
      String.append(_:)(v163);
      swift_bridgeObjectRelease();
      v164._uint64_t countAndFlagsBits = 0x20726F6620;
      v164._object = (void *)0xE500000000000000;
      String.append(_:)(v164);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v165._uint64_t countAndFlagsBits = 46;
      v165._object = (void *)0xE100000000000000;
      String.append(_:)(v165);
      unint64_t v107 = v254;
      unint64_t v108 = v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v109 = 0xD000000000000012;
      os_log_type_t v110 = "missingDeclaration";
      goto LABEL_42;
    case 0x1Bu:
      uint64_t v45 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      v166._uint64_t countAndFlagsBits = 0xD000000000000020;
      v166._object = (void *)0x8000000100294F10;
      String.append(_:)(v166);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v167._uint64_t countAndFlagsBits = 46;
      v167._object = (void *)0xE100000000000000;
      String.append(_:)(v167);
      unint64_t v107 = v254;
      unint64_t v108 = v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v109 = 0xD000000000000015;
      os_log_type_t v110 = "missingFamilySettings";
      goto LABEL_42;
    case 0x1Cu:
      uint64_t v168 = *v3;
      uint64_t v169 = (void *)v3[1];
      uint64_t v171 = v3[2];
      uint64_t v170 = (void *)v3[3];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v172._uint64_t countAndFlagsBits = 0x7369206572656854;
      v172._object = (void *)0xEC000000206F6E20;
      String.append(_:)(v172);
      v173._uint64_t countAndFlagsBits = v168;
      v173._object = v169;
      String.append(_:)(v173);
      swift_bridgeObjectRelease();
      v174._uint64_t countAndFlagsBits = 0x65687420726F6620;
      v174._object = (void *)0xEE00206570797420;
      String.append(_:)(v174);
      v175._uint64_t countAndFlagsBits = v171;
      v175._object = v170;
      String.append(_:)(v175);
      swift_bridgeObjectRelease();
      v176._object = (void *)0x8000000100294ED0;
      v176._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v176);
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000019;
      uint64_t v34 = "missingKeyOrIncorrectType";
      goto LABEL_38;
    case 0x1Du:
      uint64_t v177 = type metadata accessor for URL();
      uint64_t v178 = *(void *)(v177 - 8);
      __chkstk_darwin(v177);
      uint64_t v180 = (char *)&v253 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, void *, uint64_t))(v178 + 32))(v180, v3, v177);
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0xD000000000000026;
      unint64_t v255 = 0x8000000100294EA0;
      sub_10020D2E4((unint64_t *)&qword_100341D78, (void (*)(uint64_t))&type metadata accessor for URL);
      v181._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v181);
      swift_bridgeObjectRelease();
      v182._uint64_t countAndFlagsBits = 46;
      v182._object = (void *)0xE100000000000000;
      String.append(_:)(v182);
      uint64_t v183 = v254;
      uint64_t v184 = (void *)v255;
      id v185 = [self mainBundle];
      v259._object = (void *)0xED00007463656A62;
      v186._uint64_t countAndFlagsBits = v183;
      v186._object = v184;
      v187._uint64_t countAndFlagsBits = 0;
      v187._object = (void *)0xE000000000000000;
      v259._uint64_t countAndFlagsBits = 0x4F676E697373696DLL;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v186, (Swift::String_optional)0, (NSBundle)v185, v187, v259)._countAndFlagsBits;
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v178 + 8))(v180, v177);
      return countAndFlagsBits;
    case 0x1Eu:
      uint64_t v4 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0xD000000000000026;
      unint64_t v255 = 0x8000000100294E50;
      id v188 = [v4 description];
      uint64_t v189 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v191 = v190;

      v192._uint64_t countAndFlagsBits = v189;
      v192._object = v191;
      String.append(_:)(v192);
      swift_bridgeObjectRelease();
      v193._uint64_t countAndFlagsBits = 46;
      v193._object = (void *)0xE100000000000000;
      String.append(_:)(v193);
      unint64_t v24 = v254;
      unint64_t v25 = v255;
      uint64_t v10 = (objc_class *)[self mainBundle];
      unint64_t v16 = 0xD000000000000019;
      uint64_t v26 = "missingSerializableObject";
LABEL_34:
      unint64_t v247 = (unint64_t)(v26 - 32) | 0x8000000000000000;
      unint64_t v11 = v24;
      unint64_t v12 = v25;
      v13.super.Class isa = v10;
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
      goto LABEL_36;
    case 0x1Fu:
      uint64_t v4 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0xD00000000000001FLL;
      unint64_t v255 = 0x8000000100294E30;
      id v194 = [v4 description];
      uint64_t v195 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v197 = v196;

      v198._uint64_t countAndFlagsBits = v195;
      v198._object = v197;
      String.append(_:)(v198);
      swift_bridgeObjectRelease();
      v199._uint64_t countAndFlagsBits = 46;
      v199._object = (void *)0xE100000000000000;
      String.append(_:)(v199);
      unint64_t v200 = v254;
      unint64_t v201 = v255;
      uint64_t v10 = (objc_class *)[self mainBundle];
      unint64_t v247 = 0xEC00000065676173;
      unint64_t v11 = v200;
      unint64_t v12 = v201;
      v13.super.Class isa = v10;
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
      unint64_t v16 = 0x55676E697373696DLL;
      goto LABEL_36;
    case 0x20u:
      uint64_t v203 = *v3;
      uint64_t v202 = (void *)v3[1];
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      unint64_t v254 = 0x203A656369766544;
      unint64_t v255 = 0xE800000000000000;
      v204._uint64_t countAndFlagsBits = v203;
      v204._object = v202;
      String.append(_:)(v204);
      swift_bridgeObjectRelease();
      v205._uint64_t countAndFlagsBits = 0xD000000000000020;
      v205._object = (void *)0x8000000100294DE0;
      String.append(_:)(v205);
      unint64_t v30 = v254;
      unint64_t v31 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v33 = 0xD000000000000016;
      uint64_t v34 = "missingUserDeviceState";
LABEL_38:
      unint64_t v250 = (unint64_t)(v34 - 32) | 0x8000000000000000;
      unint64_t v206 = v30;
      unint64_t v207 = v31;
      v208.super.Class isa = v32;
      uint64_t v209 = 0;
      unint64_t v210 = 0xE000000000000000;
      goto LABEL_39;
    case 0x21u:
      uint64_t v45 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      v211._uint64_t countAndFlagsBits = 0x203A72657355;
      v211._object = (void *)0xE600000000000000;
      String.append(_:)(v211);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v212._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v212._object = (void *)0x8000000100294DA0;
      String.append(_:)(v212);
      unint64_t v107 = v254;
      unint64_t v108 = v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v109 = 0xD000000000000017;
      os_log_type_t v110 = "missingUserDeviceStates";
LABEL_42:
      unint64_t v251 = (unint64_t)(v110 - 32) | 0x8000000000000000;
      unint64_t v213 = v107;
      unint64_t v214 = v108;
      v215.super.Class isa = v54;
      uint64_t v216 = 0;
      unint64_t v217 = 0xE000000000000000;
      goto LABEL_43;
    case 0x22u:
      uint64_t v218 = *v3;
      uint64_t v219 = v3[1];
      unsigned __int8 v220 = *((unsigned char *)v3 + 16);
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      unint64_t v257 = v254;
      unint64_t v258 = v255;
      v221._uint64_t countAndFlagsBits = 0x203A656369766544;
      v221._object = (void *)0xE800000000000000;
      String.append(_:)(v221);
      unint64_t v254 = v218;
      unint64_t v255 = v219;
      unsigned __int8 v256 = v220;
      _print_unlocked<A, B>(_:_:)();
      sub_1000B3840(v218, v219, v220);
      v222._uint64_t countAndFlagsBits = 0xD000000000000013;
      v222._object = (void *)0x8000000100294D80;
      String.append(_:)(v222);
      unint64_t v223 = v257;
      unint64_t v224 = v258;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v250 = 0xE700000000000000;
      unint64_t v206 = v223;
      unint64_t v207 = v224;
      v208.super.Class isa = v32;
      uint64_t v209 = 0;
      unint64_t v210 = 0xE000000000000000;
      unint64_t v33 = 0x65676173556F6ELL;
      goto LABEL_39;
    case 0x23u:
      uint64_t v63 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v225._uint64_t countAndFlagsBits = 0xD000000000000042;
      v225._object = (void *)0x8000000100294D00;
      String.append(_:)(v225);
      unint64_t v257 = (unint64_t)v63;
      type metadata accessor for STBlueprintConfigurationType(0);
      _print_unlocked<A, B>(_:_:)();
      v226._uint64_t countAndFlagsBits = 46;
      v226._object = (void *)0xE100000000000000;
      String.append(_:)(v226);
      unint64_t v69 = v254;
      unint64_t v70 = v255;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v71 = 0xD00000000000002DLL;
      id v72 = "unexpectedUsageLimitOverrideConfigurationType";
LABEL_47:
      unint64_t v248 = (unint64_t)(v72 - 32) | 0x8000000000000000;
      unint64_t v132 = v69;
      unint64_t v133 = v70;
      v134.super.Class isa = v32;
      uint64_t v135 = 0;
      unint64_t v136 = 0xE000000000000000;
LABEL_48:
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v132, (Swift::String_optional)0, v134, *(Swift::String *)&v135, *(Swift::String *)&v71)._countAndFlagsBits;

      goto LABEL_40;
    case 0x24u:
      uint64_t v227 = *v3;
      uint64_t v228 = v3[1];
      unsigned __int8 v229 = *((unsigned char *)v3 + 16);
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      unint64_t v257 = v254;
      unint64_t v258 = v255;
      v230._uint64_t countAndFlagsBits = 0x206E776F6E6B6E55;
      v230._object = (void *)0xEF20656369766564;
      String.append(_:)(v230);
      unint64_t v254 = v227;
      unint64_t v255 = v228;
      unsigned __int8 v256 = v229;
      _print_unlocked<A, B>(_:_:)();
      sub_1000B3840(v227, v228, v229);
      v231._uint64_t countAndFlagsBits = 46;
      v231._object = (void *)0xE100000000000000;
      String.append(_:)(v231);
      unint64_t v232 = v257;
      unint64_t v233 = v258;
      uint64_t v32 = (objc_class *)[self mainBundle];
      unint64_t v250 = 0xED00006563697665;
      unint64_t v206 = v232;
      unint64_t v207 = v233;
      v208.super.Class isa = v32;
      uint64_t v209 = 0;
      unint64_t v210 = 0xE000000000000000;
      unint64_t v33 = 0x446E776F6E6B6E75;
LABEL_39:
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v206, (Swift::String_optional)0, v208, *(Swift::String *)&v209, *(Swift::String *)&v33)._countAndFlagsBits;
LABEL_40:
      swift_bridgeObjectRelease();

      return countAndFlagsBits;
    case 0x25u:
      uint64_t v45 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      v234._uint64_t countAndFlagsBits = 0x206E776F6E6B6E55;
      v234._object = (void *)0xED00002072657375;
      String.append(_:)(v234);
      unint64_t v257 = (unint64_t)v45;
      _print_unlocked<A, B>(_:_:)();
      v235._uint64_t countAndFlagsBits = 46;
      v235._object = (void *)0xE100000000000000;
      String.append(_:)(v235);
      unint64_t v236 = v254;
      unint64_t v237 = v255;
      uint64_t v54 = (objc_class *)[self mainBundle];
      unint64_t v251 = 0xEB00000000726573;
      unint64_t v213 = v236;
      unint64_t v214 = v237;
      v215.super.Class isa = v54;
      uint64_t v216 = 0;
      unint64_t v217 = 0xE000000000000000;
      unint64_t v109 = 0x556E776F6E6B6E75;
LABEL_43:
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v213, (Swift::String_optional)0, v215, *(Swift::String *)&v216, *(Swift::String *)&v109)._countAndFlagsBits;
LABEL_44:
      swift_bridgeObjectRelease();

      return countAndFlagsBits;
    case 0x26u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000020;
      unint64_t v240 = 0xD000000000000046;
      unint64_t v252 = 0x8000000100295C70;
      v241 = "Ask for time was approved without time amount or invalid resource type";
      goto LABEL_65;
    case 0x27u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000011;
      unint64_t v240 = 0xD00000000000001DLL;
      unint64_t v252 = 0x8000000100295BA0;
      v241 = "Cloud activation is malformed";
      goto LABEL_65;
    case 0x28u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000010;
      unint64_t v240 = 0xD000000000000016;
      unint64_t v252 = 0x8000000100295B60;
      v241 = "Blueprint is malformed";
      goto LABEL_65;
    case 0x29u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000011;
      unint64_t v240 = 0xD000000000000017;
      unint64_t v252 = 0x8000000100295B20;
      v241 = "CoreDevice is malformed";
      goto LABEL_65;
    case 0x2Au:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000016;
      unint64_t v240 = 0xD00000000000001ELL;
      unint64_t v252 = 0x8000000100295AE0;
      v241 = "User Device State is malformed";
      goto LABEL_65;
    case 0x2Bu:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000017;
      unint64_t v240 = 0xD00000000000001ELL;
      unint64_t v252 = 0x80000001002953D0;
      v241 = "Serialized object is malformed";
      goto LABEL_65;
    case 0x2Cu:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000016;
      unint64_t v240 = 0xD000000000000034;
      unint64_t v252 = 0x8000000100295390;
      v241 = "The name for the local STCoreDevice is nil or empty.";
      goto LABEL_65;
    case 0x2Du:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD00000000000001CLL;
      unint64_t v240 = 0xD000000000000050;
      unint64_t v252 = 0x80000001002952C0;
      v241 = "The device platform for the local STCoreDevice does not match the actual device.";
      goto LABEL_65;
    case 0x2Eu:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD00000000000001BLL;
      unint64_t v240 = 0xD000000000000042;
      unint64_t v252 = 0x8000000100295330;
      v241 = "The local user device state for the local STCoreDevice is missing.";
      goto LABEL_65;
    case 0x2Fu:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v240 = 0xD000000000000020;
      unint64_t v252 = 0x8000000100295240;
      unint64_t v242 = 0x8000000100295210;
      v243.super.Class isa = v238;
      uint64_t v244 = 0;
      unint64_t v245 = 0xE000000000000000;
      unint64_t v239 = 0xD000000000000018;
      goto LABEL_66;
    case 0x30u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD00000000000001ALL;
      unint64_t v240 = 0xD00000000000004CLL;
      unint64_t v252 = 0x8000000100295060;
      v241 = "There is no current organization for the local user in screen time settings.";
      goto LABEL_65;
    case 0x31u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000019;
      unint64_t v240 = 0xD000000000000038;
      unint64_t v252 = 0x8000000100294FF0;
      v241 = "There is no family organization in screen time settings.";
      goto LABEL_65;
    case 0x32u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD00000000000001DLL;
      unint64_t v240 = 0xD000000000000020;
      unint64_t v252 = 0x8000000100294CE0;
      v241 = "Unsupported serializable object.";
      goto LABEL_65;
    case 0x33u:
      unint64_t v238 = (objc_class *)[self mainBundle];
      unint64_t v239 = 0xD000000000000010;
      unint64_t v240 = 0xD000000000000033;
      unint64_t v252 = 0x8000000100294C90;
      v241 = "Provided user details do not match provided userID.";
LABEL_65:
      unint64_t v242 = (unint64_t)(v241 - 32) | 0x8000000000000000;
      v243.super.Class isa = v238;
      uint64_t v244 = 0;
      unint64_t v245 = 0xE000000000000000;
LABEL_66:
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v240, (Swift::String_optional)0, v243, *(Swift::String *)&v244, *(Swift::String *)&v239)._countAndFlagsBits;

      break;
    default:
      uint64_t v4 = (void *)*v3;
      unint64_t v254 = 0;
      unint64_t v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v5._uint64_t countAndFlagsBits = 0xD000000000000035;
      v5._object = (void *)0x8000000100295CA0;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 46;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      unint64_t v8 = v254;
      unint64_t v9 = v255;
      uint64_t v10 = (objc_class *)[self mainBundle];
      unint64_t v247 = 0x8000000100295CE0;
      unint64_t v11 = v8;
      unint64_t v12 = v9;
      v13.super.Class isa = v10;
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
      unint64_t v16 = 0xD000000000000018;
LABEL_36:
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v11, (Swift::String_optional)0, v13, *(Swift::String *)&v14, *(Swift::String *)&v16)._countAndFlagsBits;

      swift_bridgeObjectRelease();
      break;
  }
  return countAndFlagsBits;
}

uint64_t sub_1002073F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataStore.DataStoreError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100207458(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  uint64_t v1 = Dictionary.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1002074D4(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void *sub_10020750C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10009EE78((uint64_t *)&unk_100342AD0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      unint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10020A138(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100207630(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10009EE78(&qword_100345400);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      NSBundle v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      NSBundle v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10020A2C8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100207740(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10009EE78(&qword_100342120);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      NSBundle v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      NSBundle v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10020B5DC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100207850(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100207864(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10009EE78(&qword_100345308);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  NSBundle v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002079D0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10009EE78(&qword_100342120);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  NSBundle v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100207B3C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10009EE78(&qword_1003453F8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_10009EE78(&qword_100341F20);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100207CC8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10009EE78(&qword_100345440);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100207E44(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10009EE78(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  Swift::String v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020808C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100207864(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002080AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002079D0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002080CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100207E44(a1, a2, a3, (void *)*v3, &qword_1003453D8, (uint64_t (*)(void))&type metadata accessor for WebDomain);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100208108(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100207E44(a1, a2, a3, (void *)*v3, &qword_1003453D0, (uint64_t (*)(void))&type metadata accessor for ActivityCategory);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100208144(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100207E44(a1, a2, a3, (void *)*v3, &qword_1003453C8, (uint64_t (*)(void))&type metadata accessor for Application);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100208180(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100207B3C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002081A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100207CC8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002081C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100207E44(a1, a2, a3, (void *)*v3, &qword_100345410, (uint64_t (*)(void))&type metadata accessor for UUID);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002081F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_39:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10009EE78(&qword_100345300);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v9 = (unsigned char *)result;
  Swift::String v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_42;
    }
    if (v15 >= a2) {
      goto LABEL_39;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_39;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_39;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    id v18 = *(void **)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    if (v18)
    {
      Hasher._combine(_:)(1uLL);
      id v19 = v18;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v9[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*((void *)v9 + 6) + 8 * v23) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (!v5) {
      goto LABEL_39;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_39;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_39;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100208484(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100207850(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100208500(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_100208500(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 < v4)
  {
    if (v4 >= 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v4 + 1;
    }
    if (v4 >= -1)
    {
      Swift::Int v7 = v5;
      uint64_t v115 = a1;
      if (v4 < 2)
      {
        unint64_t v10 = (char *)_swiftEmptyArrayStorage;
        uint64_t v129 = (uint64_t)_swiftEmptyArrayStorage;
        Swift::String v127 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
        if (v4 != 1)
        {
          unint64_t v13 = _swiftEmptyArrayStorage[2];
          if (v13 < 2) {
            goto LABEL_134;
          }
          goto LABEL_122;
        }
      }
      else
      {
        uint64_t v8 = v6 >> 1;
        sub_1000A0760(0, &qword_1003415E0);
        uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
        Swift::String v127 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
        uint64_t v129 = v9;
      }
      Swift::Int v118 = v7;
      Swift::Int v11 = 0;
      uint64_t v12 = *a1;
      uint64_t v116 = *a1 - 8;
      uint64_t v117 = *a1 + 16;
      unint64_t v10 = (char *)_swiftEmptyArrayStorage;
      uint64_t v128 = *a1;
      Swift::Int v124 = v4;
      while (1)
      {
        Swift::Int v14 = v11++;
        Swift::Int v123 = v14;
        if (v11 < v4)
        {
          uint64_t v119 = v10;
          uint64_t v15 = *(void **)(v12 + 8 * v14);
          id v16 = *(id *)(v12 + 8 * v11);
          id v17 = v15;
          id v18 = [v16 installedApps];
          if (!v18) {
            goto LABEL_169;
          }
          id v19 = v18;
          sub_1000A0760(0, (unint64_t *)&unk_100343A60);
          sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
          uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          if ((v20 & 0xC000000000000001) != 0) {
            uint64_t v125 = __CocoaSet.count.getter();
          }
          else {
            uint64_t v125 = *(void *)(v20 + 16);
          }
          swift_bridgeObjectRelease();
          id v21 = [v17 installedApps];
          if (!v21) {
            goto LABEL_170;
          }
          unint64_t v22 = v21;
          uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          if ((v23 & 0xC000000000000001) != 0) {
            uint64_t v121 = __CocoaSet.count.getter();
          }
          else {
            uint64_t v121 = *(void *)(v23 + 16);
          }

          swift_bridgeObjectRelease();
          Swift::Int v11 = v14 + 2;
          if (v14 + 2 < v124)
          {
            char v24 = (id *)(v117 + 8 * v14);
            do
            {
              unint64_t v25 = *(v24 - 1);
              id v26 = *v24;
              id v27 = v25;
              id v28 = [v26 installedApps];
              if (!v28) {
                goto LABEL_165;
              }
              Swift::String v29 = v28;
              uint64_t v30 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

              if ((v30 & 0xC000000000000001) != 0) {
                uint64_t v31 = __CocoaSet.count.getter();
              }
              else {
                uint64_t v31 = *(void *)(v30 + 16);
              }
              swift_bridgeObjectRelease();
              id v32 = [v27 installedApps];
              if (!v32) {
                goto LABEL_166;
              }
              unint64_t v33 = v32;
              uint64_t v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

              if ((v34 & 0xC000000000000001) != 0) {
                uint64_t v35 = __CocoaSet.count.getter();
              }
              else {
                uint64_t v35 = *(void *)(v34 + 16);
              }

              swift_bridgeObjectRelease();
              if (v121 < v125 == v35 >= v31) {
                goto LABEL_37;
              }
              ++v11;
              ++v24;
            }
            while (v124 != v11);
            Swift::Int v11 = v124;
LABEL_37:
            Swift::Int v14 = v123;
          }
          unint64_t v10 = v119;
          uint64_t v12 = v128;
          if (v121 < v125)
          {
            if (v11 < v14) {
              goto LABEL_158;
            }
            if (v14 < v11)
            {
              uint64_t v36 = (uint64_t *)(v116 + 8 * v11);
              Swift::Int v37 = v11;
              Swift::Int v38 = v14;
              uint64_t v39 = (uint64_t *)(v128 + 8 * v14);
              do
              {
                if (v38 != --v37)
                {
                  if (!v128) {
                    goto LABEL_167;
                  }
                  uint64_t v40 = *v39;
                  *uint64_t v39 = *v36;
                  uint64_t *v36 = v40;
                }
                ++v38;
                --v36;
                ++v39;
              }
              while (v38 < v37);
            }
          }
        }
        if (v11 < v124)
        {
          if (__OFSUB__(v11, v14)) {
            goto LABEL_156;
          }
          if (v11 - v14 < v118)
          {
            if (__OFADD__(v14, v118)) {
              goto LABEL_159;
            }
            Swift::Int v41 = v124;
            if (v14 + v118 < v124) {
              Swift::Int v41 = v14 + v118;
            }
            if (v41 < v14)
            {
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
              break;
            }
            if (v11 != v41)
            {
              Swift::String v120 = v10;
              uint64_t v42 = v116 + 8 * v11;
              Swift::Int v122 = v41;
              do
              {
                uint64_t v43 = *(void **)(v12 + 8 * v11);
                uint64_t v126 = v42;
                while (1)
                {
                  Swift::String v44 = *(void **)v42;
                  id v45 = v43;
                  id v46 = v44;
                  id v47 = [v45 installedApps];
                  if (!v47) {
                    goto LABEL_161;
                  }
                  Swift::String v48 = v47;
                  sub_1000A0760(0, (unint64_t *)&unk_100343A60);
                  sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
                  uint64_t v49 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

                  if ((v49 & 0xC000000000000001) != 0) {
                    uint64_t v50 = __CocoaSet.count.getter();
                  }
                  else {
                    uint64_t v50 = *(void *)(v49 + 16);
                  }
                  swift_bridgeObjectRelease();
                  id v51 = [v46 installedApps];
                  if (!v51) {
                    goto LABEL_162;
                  }
                  uint64_t v52 = v51;
                  uint64_t v53 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v54 = (v53 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v53 + 16);
                  swift_bridgeObjectRelease();

                  if (v54 >= v50) {
                    break;
                  }
                  uint64_t v12 = v128;
                  if (!v128) {
                    goto LABEL_163;
                  }
                  unint64_t v55 = *(void **)v42;
                  uint64_t v43 = *(void **)(v42 + 8);
                  *(void *)uint64_t v42 = v43;
                  *(void *)(v42 + 8) = v55;
                  v42 -= 8;
                  if (v11 == ++v14) {
                    goto LABEL_57;
                  }
                }
                uint64_t v12 = v128;
LABEL_57:
                ++v11;
                uint64_t v42 = v126 + 8;
                Swift::Int v14 = v123;
              }
              while (v11 != v122);
              Swift::Int v11 = v122;
              unint64_t v10 = v120;
            }
          }
        }
        if (v11 < v14) {
          goto LABEL_151;
        }
        char v56 = v10;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v10 = v56;
        }
        else {
          unint64_t v10 = sub_100209600(0, *((void *)v56 + 2) + 1, 1, v56);
        }
        unint64_t v58 = *((void *)v10 + 2);
        unint64_t v57 = *((void *)v10 + 3);
        unint64_t v13 = v58 + 1;
        uint64_t v12 = v128;
        if (v58 >= v57 >> 1)
        {
          unint64_t v107 = sub_100209600((char *)(v57 > 1), v58 + 1, 1, v10);
          uint64_t v12 = v128;
          unint64_t v10 = v107;
        }
        *((void *)v10 + 2) = v13;
        Swift::String v59 = v10 + 32;
        uint64_t v60 = &v10[16 * v58 + 32];
        *(void *)uint64_t v60 = v123;
        *((void *)v60 + 1) = v11;
        if (v58)
        {
          while (1)
          {
            unint64_t v61 = v13 - 1;
            if (v13 >= 4)
            {
              Swift::String v66 = &v59[16 * v13];
              uint64_t v67 = *((void *)v66 - 8);
              uint64_t v68 = *((void *)v66 - 7);
              BOOL v72 = __OFSUB__(v68, v67);
              uint64_t v69 = v68 - v67;
              if (v72) {
                goto LABEL_140;
              }
              uint64_t v71 = *((void *)v66 - 6);
              uint64_t v70 = *((void *)v66 - 5);
              BOOL v72 = __OFSUB__(v70, v71);
              uint64_t v64 = v70 - v71;
              char v65 = v72;
              if (v72) {
                goto LABEL_141;
              }
              unint64_t v73 = v13 - 2;
              uint64_t v74 = &v59[16 * v13 - 32];
              uint64_t v76 = *(void *)v74;
              uint64_t v75 = *((void *)v74 + 1);
              BOOL v72 = __OFSUB__(v75, v76);
              uint64_t v77 = v75 - v76;
              if (v72) {
                goto LABEL_143;
              }
              BOOL v72 = __OFADD__(v64, v77);
              uint64_t v78 = v64 + v77;
              if (v72) {
                goto LABEL_146;
              }
              if (v78 >= v69)
              {
                char v96 = &v59[16 * v61];
                uint64_t v98 = *(void *)v96;
                uint64_t v97 = *((void *)v96 + 1);
                BOOL v72 = __OFSUB__(v97, v98);
                uint64_t v99 = v97 - v98;
                if (v72) {
                  goto LABEL_150;
                }
                BOOL v89 = v64 < v99;
                goto LABEL_109;
              }
            }
            else
            {
              if (v13 != 3)
              {
                uint64_t v90 = *((void *)v10 + 4);
                uint64_t v91 = *((void *)v10 + 5);
                BOOL v72 = __OFSUB__(v91, v90);
                uint64_t v83 = v91 - v90;
                char v84 = v72;
                goto LABEL_103;
              }
              uint64_t v63 = *((void *)v10 + 4);
              uint64_t v62 = *((void *)v10 + 5);
              BOOL v72 = __OFSUB__(v62, v63);
              uint64_t v64 = v62 - v63;
              char v65 = v72;
            }
            if (v65) {
              goto LABEL_142;
            }
            unint64_t v73 = v13 - 2;
            Swift::String v79 = &v59[16 * v13 - 32];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v82 = __OFSUB__(v80, v81);
            uint64_t v83 = v80 - v81;
            char v84 = v82;
            if (v82) {
              goto LABEL_145;
            }
            Swift::String v85 = &v59[16 * v61];
            uint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v72 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v72) {
              goto LABEL_148;
            }
            if (__OFADD__(v83, v88)) {
              goto LABEL_149;
            }
            if (v83 + v88 >= v64)
            {
              BOOL v89 = v64 < v88;
LABEL_109:
              if (v89) {
                unint64_t v61 = v73;
              }
              goto LABEL_111;
            }
LABEL_103:
            if (v84) {
              goto LABEL_144;
            }
            unint64_t v92 = &v59[16 * v61];
            uint64_t v94 = *(void *)v92;
            uint64_t v93 = *((void *)v92 + 1);
            BOOL v72 = __OFSUB__(v93, v94);
            uint64_t v95 = v93 - v94;
            if (v72) {
              goto LABEL_147;
            }
            if (v95 < v83) {
              goto LABEL_14;
            }
LABEL_111:
            unint64_t v100 = v61 - 1;
            if (v61 - 1 >= v13)
            {
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
              goto LABEL_160;
            }
            if (!v12) {
              goto LABEL_164;
            }
            uint64_t v101 = v10;
            uint64_t v102 = &v59[16 * v100];
            uint64_t v103 = *(void *)v102;
            Swift::String v104 = &v59[16 * v61];
            uint64_t v105 = *((void *)v104 + 1);
            sub_100209110((id *)(v12 + 8 * *(void *)v102), (id *)(v12 + 8 * *(void *)v104), v12 + 8 * v105, v127);
            if (v1) {
              goto LABEL_134;
            }
            if (v105 < v103) {
              goto LABEL_137;
            }
            if (v61 > *((void *)v101 + 2)) {
              goto LABEL_138;
            }
            *(void *)uint64_t v102 = v103;
            *(void *)&v59[16 * v100 + 8] = v105;
            unint64_t v106 = *((void *)v101 + 2);
            if (v61 >= v106) {
              goto LABEL_139;
            }
            unint64_t v13 = v106 - 1;
            memmove(&v59[16 * v61], v104 + 16, 16 * (v106 - 1 - v61));
            unint64_t v10 = v101;
            *((void *)v101 + 2) = v106 - 1;
            uint64_t v12 = v128;
            if (v106 <= 2) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v13 = 1;
LABEL_14:
        Swift::Int v4 = v124;
        if (v11 >= v124)
        {
          uint64_t v2 = v1;
          if (v13 < 2)
          {
LABEL_134:
            swift_bridgeObjectRelease();
            *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_122:
          uint64_t v108 = *v115;
          while (1)
          {
            unint64_t v109 = v13 - 2;
            if (v13 < 2) {
              goto LABEL_152;
            }
            if (!v108) {
              goto LABEL_168;
            }
            os_log_type_t v110 = v10;
            uint64_t v111 = *(void *)&v10[16 * v109 + 32];
            uint64_t v112 = *(void *)&v10[16 * v13 + 24];
            sub_100209110((id *)(v108 + 8 * v111), (id *)(v108 + 8 * *(void *)&v10[16 * v13 + 16]), v108 + 8 * v112, v127);
            if (v2) {
              goto LABEL_134;
            }
            if (v112 < v111) {
              goto LABEL_153;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              os_log_type_t v110 = sub_1002097B8((uint64_t)v110);
            }
            if (v109 >= *((void *)v110 + 2)) {
              goto LABEL_154;
            }
            Swift::String v113 = &v110[16 * v109 + 32];
            *(void *)Swift::String v113 = v111;
            *((void *)v113 + 1) = v112;
            unint64_t v114 = *((void *)v110 + 2);
            if (v13 > v114) {
              goto LABEL_155;
            }
            memmove(&v110[16 * v13 + 16], &v110[16 * v13 + 32], 16 * (v114 - v13));
            unint64_t v10 = v110;
            *((void *)v110 + 2) = v114 - 1;
            unint64_t v13 = v114 - 1;
            if (v114 <= 2) {
              goto LABEL_134;
            }
          }
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v4 < 0) {
    goto LABEL_157;
  }
  if (v4) {
    sub_100208F20(0, v4, 1, a1);
  }
}

void sub_100208F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v23 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v6 = *(void **)(v23 + 8 * v4);
    uint64_t v7 = a1;
    uint64_t v22 = v5;
    while (1)
    {
      uint64_t v8 = *(void **)v5;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 installedApps];
      if (!v11) {
        break;
      }
      uint64_t v12 = v11;
      sub_1000A0760(0, (unint64_t *)&unk_100343A60);
      sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
      uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v13 & 0xC000000000000001) != 0) {
        uint64_t v14 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v14 = *(void *)(v13 + 16);
      }
      swift_bridgeObjectRelease();
      id v15 = [v10 installedApps];
      if (!v15) {
        goto LABEL_19;
      }
      id v16 = v15;
      uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v17 & 0xC000000000000001) != 0) {
        uint64_t v18 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v18 = *(void *)(v17 + 16);
      }

      swift_bridgeObjectRelease();
      if (v18 < v14)
      {
        if (!v23) {
          goto LABEL_20;
        }
        id v19 = *(void **)v5;
        uint64_t v6 = *(void **)(v5 + 8);
        *(void *)uint64_t v5 = v6;
        *(void *)(v5 + 8) = v19;
        v5 -= 8;
        if (v4 != ++v7) {
          continue;
        }
      }
      ++v4;
      uint64_t v5 = v22 + 8;
      if (v4 == a2) {
        return;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
}

uint64_t sub_100209110(id *a1, id *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  uint64_t v5 = (char *)__src - (char *)a1;
  uint64_t v6 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v6 = (char *)__src - (char *)a1;
  }
  uint64_t v7 = v6 >> 3;
  uint64_t v8 = a3 - (void)__src;
  uint64_t v9 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v9 = a3 - (void)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v52 = a1;
  id v51 = (void **)a4;
  if (v7 >= v9 >> 3)
  {
    if (v8 >= -7)
    {
      if (a4 != (char *)__src || &__src[v10] <= (id *)a4) {
        memmove(a4, __src, 8 * v10);
      }
      id v26 = &a4[8 * v10];
      uint64_t v50 = v26;
      uint64_t v52 = v4;
      if (a1 < v4 && v8 >= 8)
      {
        id v27 = (id *)(a3 - 8);
        id v28 = v4;
        while (1)
        {
          id v47 = v26;
          uint64_t v49 = v4;
          uint64_t v30 = (void *)*((void *)v26 - 1);
          v26 -= 8;
          Swift::String v29 = v30;
          uint64_t v31 = *--v28;
          id v32 = v29;
          id v33 = v31;
          id v34 = [v32 installedApps];
          if (!v34) {
            break;
          }
          uint64_t v35 = v34;
          sub_1000A0760(0, (unint64_t *)&unk_100343A60);
          sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
          uint64_t v36 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          if ((v36 & 0xC000000000000001) != 0) {
            uint64_t v37 = __CocoaSet.count.getter();
          }
          else {
            uint64_t v37 = *(void *)(v36 + 16);
          }
          swift_bridgeObjectRelease();
          id v38 = [v33 installedApps];
          if (!v38) {
            goto LABEL_61;
          }
          uint64_t v39 = v38;
          uint64_t v40 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          if ((v40 & 0xC000000000000001) != 0) {
            uint64_t v41 = __CocoaSet.count.getter();
          }
          else {
            uint64_t v41 = *(void *)(v40 + 16);
          }
          uint64_t v42 = v27 + 1;

          swift_bridgeObjectRelease();
          if (v41 >= v37)
          {
            uint64_t v50 = v26;
            if (v42 < (id *)v47 || v27 >= (id *)v47 || v42 != (id *)v47) {
              *id v27 = *(id *)v26;
            }
            id v28 = v49;
          }
          else
          {
            id v26 = v47;
            if (v42 != v49 || v27 >= v49) {
              *id v27 = *v28;
            }
            uint64_t v52 = v28;
          }
          if (v28 > a1)
          {
            --v27;
            uint64_t v4 = v28;
            if (v26 > a4) {
              continue;
            }
          }
          goto LABEL_59;
        }
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
LABEL_59:
      sub_1002096FC((void **)&v52, (const void **)&v51, &v50);
      return 1;
    }
  }
  else if (v5 >= -7)
  {
    if (a4 != (char *)a1 || &a1[v7] <= (id *)a4) {
      memmove(a4, a1, 8 * v7);
    }
    id v46 = &a4[8 * v7];
    uint64_t v50 = v46;
    if ((unint64_t)v4 < a3 && v5 >= 8)
    {
      id v11 = (void **)a4;
      uint64_t v12 = a1;
      while (1)
      {
        uint64_t v13 = v4;
        uint64_t v14 = *v11;
        id v15 = *v4;
        id v16 = v14;
        id v17 = [v15 installedApps];
        if (!v17) {
          break;
        }
        uint64_t v18 = v17;
        sub_1000A0760(0, (unint64_t *)&unk_100343A60);
        sub_1000AA614(&qword_100345320, (unint64_t *)&unk_100343A60);
        uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v19 & 0xC000000000000001) != 0) {
          uint64_t v20 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v20 = *(void *)(v19 + 16);
        }
        swift_bridgeObjectRelease();
        id v21 = [v16 installedApps];
        if (!v21) {
          goto LABEL_63;
        }
        uint64_t v22 = v21;
        uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v23 & 0xC000000000000001) != 0) {
          uint64_t v24 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v24 = *(void *)(v23 + 16);
        }

        swift_bridgeObjectRelease();
        if (v24 >= v20)
        {
          if (v12 != v11) {
            *uint64_t v12 = *v11;
          }
          id v51 = ++v11;
          unint64_t v25 = v13;
        }
        else
        {
          unint64_t v25 = v13 + 1;
          if (v12 < v13 || v12 >= v25 || v12 != v13) {
            *uint64_t v12 = *v13;
          }
        }
        ++v12;
        if (v11 < (void **)v46)
        {
          uint64_t v4 = v25;
          if ((unint64_t)v25 < a3) {
            continue;
          }
        }
        uint64_t v52 = v12;
        goto LABEL_59;
      }
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    goto LABEL_59;
  }
LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100209600(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10009EE78(&qword_100345428);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1002096FC(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1002097B8(uint64_t a1)
{
  return sub_100209600(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1002097CC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_100209870(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_100209954(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_100209968(uint64_t a1, int a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_1000A0760(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_1000A0760(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v7 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v7 = (v7 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_23;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_17:
  id v15 = *(void **)(*(void *)(a4 + 48) + 8 * v7);
  id v16 = v15;
}

uint64_t sub_100209BDC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100209C64(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1)
      {
        if (a1 == a4 && a2 == a5) {
          return 1;
        }
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
    else if (a1 | a2)
    {
      if (a6 == 2 && a4 == 1 && !a5) {
        return 1;
      }
    }
    else if (a6 == 2 && !(a5 | a4))
    {
      return 1;
    }
  }
  else if (!a6)
  {
    if (a1 == a4 && a2 == a5) {
      return 1;
    }
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 0;
}

void sub_100209D14(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  int v5 = v4(a1, 1, v2);
  id v6 = [self standardUserDefaults];
  if (v5 == 1)
  {
    id v13 = String._bridgeToObjectiveC()();
    [v6 removeObjectForKey:v13];
  }
  else
  {
    uint64_t v7 = sub_10009EE78(&qword_100342B30);
    __chkstk_darwin(v7 - 8);
    uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000D9F9C(a1, (uint64_t)v9, &qword_100342B30);
    if (v4((uint64_t)v9, 1, v2) == 1)
    {
      Class isa = 0;
    }
    else
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    }
    NSString v11 = String._bridgeToObjectiveC()();
    [v6 setObject:isa forKey:v11];

    swift_unknownObjectRelease();
  }
}

uint64_t sub_100209F5C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100209FB0(char a1, uint64_t a2)
{
  type metadata accessor for DataStore(0);
  unint64_t v4 = (void *)swift_allocObject();
  v4[3] = 0;
  v4[4] = 0;
  int v5 = (char *)v4 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  if ((a1 & 1) != 0 || byte_10034B308 == 1)
  {
    v4[2] = a2;
    return (uint64_t)v4;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10020A0B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1000FDAF0();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    unint64_t v4 = (void **)(a1 + 32);
    do
    {
      int v5 = *v4++;
      id v6 = v5;
      sub_1002578E8(&v7, v5);

      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10020A138(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020A230(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100257ACC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10020A2C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_10009EE78(&qword_100341F28);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020A3D4(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_1000A0760(0, &qword_100342B68);
  sub_1000AA614((unint64_t *)&qword_100342B70, &qword_100342B68);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        unint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100257C7C(&v9, v6);
      }
    }
    else
    {
      Swift::Int v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        sub_100257C7C(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020A550(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D7700((uint64_t)v9);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = v7;
    uint64_t v13 = v12;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v26 = v21;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v24 = v2;
    uint64_t v25 = sub_1000A2E70(0xD00000000000001ALL, 0x8000000100295FB0, &v26);
    uint64_t v23 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2048;
    uint64_t v25 = 1692;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_10009EE78(&qword_100341F28);
    uint64_t v14 = Array.description.getter();
    uint64_t v20 = v6;
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_1000A2E70(v14, v16, &v26);
    uint64_t v4 = v23;
    uint64_t v3 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s %ld Processing incoming blueprints %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  id v17 = sub_1001D7640();
  __chkstk_darwin(v17);
  *(&v20 - 2) = v4;
  *(&v20 - 1) = a1;
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v3) {
    char v18 = v26;
  }
  return v18 & 1;
}

void *sub_10020A89C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_20;
        }
        uint64_t v10 = v5;
        id v11 = [v7 identifier];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v16)
          {
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        ++v6;
        uint64_t v5 = v10;
        if (v9 == v10) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10020AA5C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_10020808C(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      unint64_t v6 = v5;
      id v7 = [v5 localUserDeviceState];

      if (v7)
      {

        id v8 = 0;
      }
      else
      {
        id v8 = [v6 dsid];
      }
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_10020808C(v9 > 1, v10 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v8;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *sub_10020ABF8(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)sub_1002081A0(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    uint64_t v36 = v2;
    unint64_t v37 = v1 & 0xC000000000000001;
    unint64_t v34 = v1 + 32;
    unint64_t v35 = v1;
    while (1)
    {
      if (v4 == v2)
      {
        __break(1u);
        goto LABEL_38;
      }
      if (v37) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v34 + 8 * v4);
      }
      unint64_t v6 = v5;
      id v7 = [v5 localUserDeviceState];

      if (v7)
      {

        uint64_t v8 = 0;
        uint64_t v9 = 0;
        char v10 = 2;
      }
      else
      {
        id v11 = [v6 userDeviceStates];
        sub_1000A0760(0, &qword_1003415E0);
        sub_1000AA614((unint64_t *)&qword_1003415E8, &qword_1003415E0);
        uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v13 = v12 & 0xC000000000000001;
        if ((v12 & 0xC000000000000001) != 0)
        {
          unint64_t v14 = __CocoaSet.startIndex.getter();
          uint64_t v16 = v15;
          __CocoaSet.endIndex.getter();
          char v17 = static __CocoaSet.Index.== infix(_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v18 = v14;
          if (v17) {
            goto LABEL_30;
          }
        }
        else
        {
          char v19 = *(unsigned char *)(v12 + 32);
          uint64_t v18 = 1 << v19;
          unint64_t v20 = *(void *)(v12 + 56);
          if (v20)
          {
            uint64_t v21 = 0;
          }
          else
          {
            if ((v19 & 0x3Fu) < 7) {
              goto LABEL_29;
            }
            unint64_t v20 = *(void *)(v12 + 64);
            if (!v20)
            {
              uint64_t v26 = 0;
              unint64_t v27 = (unint64_t)(v18 + 63) >> 6;
              if (v27 <= 2) {
                unint64_t v27 = 2;
              }
              unint64_t v28 = v27 - 2;
              while (v28 != v26)
              {
                unint64_t v20 = *(void *)(v12 + 72 + 8 * v26++);
                if (v20)
                {
                  uint64_t v21 = v26 + 1;
                  goto LABEL_17;
                }
              }
LABEL_29:
              uint64_t v16 = *(unsigned int *)(v12 + 36);
LABEL_30:
              sub_10019D864(v18, v16, v13 != 0);
              swift_bridgeObjectRelease();
LABEL_31:
              uint64_t result = [v6 identifier];
              unint64_t v1 = v35;
              if (!result) {
                goto LABEL_40;
              }
              Swift::String v29 = result;
              uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v9 = v30;

              char v10 = 1;
              goto LABEL_33;
            }
            uint64_t v21 = 1;
          }
LABEL_17:
          unint64_t v14 = __clz(__rbit64(v20)) + (v21 << 6);
          uint64_t v16 = *(unsigned int *)(v12 + 36);
          if (v14 == v18) {
            goto LABEL_30;
          }
        }
        sub_100209968(v14, v16, v13 != 0, v12, &qword_1003415E0);
        uint64_t v23 = v22;
        sub_10019D864(v14, v16, v13 != 0);
        swift_bridgeObjectRelease();
        id v24 = [v23 coreDuetIdentifier];

        if (!v24) {
          goto LABEL_31;
        }
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v9 = v25;

        char v10 = 0;
        unint64_t v1 = v35;
      }
LABEL_33:
      unint64_t v32 = _swiftEmptyArrayStorage[2];
      unint64_t v31 = _swiftEmptyArrayStorage[3];
      if (v32 >= v31 >> 1) {
        sub_1002081A0(v31 > 1, v32 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v32 + 1;
      id v33 = (char *)&_swiftEmptyArrayStorage[3 * v32];
      *((void *)v33 + 4) = v8;
      *((void *)v33 + 5) = v9;
      v33[48] = v10;
      uint64_t v2 = v36;
      if (v4 == v36) {
        return _swiftEmptyArrayStorage;
      }
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10020AFDC(unint64_t a1, uint64_t a2, void (*a3)(id *, uint64_t, uint64_t *))
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v4 = v3;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    id v7 = _swiftEmptyArrayStorage;
    if (!v6) {
      return (uint64_t)v7;
    }
    unint64_t v28 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1002081C0(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0) {
      break;
    }
    id v7 = v28;
    unint64_t v23 = a1 & 0xC000000000000001;
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = 0;
    uint64_t v21 = v9;
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v22 = *(void *)(v11 + 64);
    uint64_t v19 = v6;
    uint64_t v20 = v11 + 32;
    while (v6 != v10)
    {
      __chkstk_darwin(v9);
      unint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v23) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v15 = v14;
      id v27 = v14;
      v25(&v27, v24, &v26);
      if (v4)
      {
        swift_release();

        return (uint64_t)v7;
      }
      uint64_t v4 = 0;

      unint64_t v28 = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_1002081C0(v16 > 1, v17 + 1, 1);
        id v7 = v28;
      }
      ++v10;
      v7[2] = v17 + 1;
      uint64_t v9 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v17, v13, v21);
      uint64_t v6 = v19;
      if (v19 == v10) {
        return (uint64_t)v7;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10020B22C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10020DF10();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned char *)(a1 + 48);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      uint64_t v6 = *((void *)v4 - 1);
      char v7 = *v4;
      v4 += 24;
      sub_1000B3828(v5, v6, v7);
      sub_100257C98((uint64_t)v8, v5, v6, v7);
      sub_1000B3840(v8[0], v8[1], v9);
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

id sub_10020B2D4(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
    id v2 = v1;
    Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    char v4 = static NSObject.== infix(_:_:)();

    if (v4)
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *uint64_t v5 = v1;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return v1;
    }
    id v6 = [self fetchRequestForUsersWithDSID:v2];
  }
  else
  {
    id v6 = [self fetchRequestMatchingLocalUser];
  }
  id v20 = 0;
  id v7 = [v6 execute:&v20];
  id v8 = v20;
  if (!v7)
  {
    id v1 = v20;
    _convertNSErrorToError(_:)();

LABEL_18:
    swift_willThrow();

    return v1;
  }
  unsigned __int8 v9 = v7;
  sub_1000A0760(0, &qword_1003431E0);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = v8;

  if (!(v10 >> 62))
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_9;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    *unint64_t v17 = v1;
    swift_storeEnumTagMultiPayload();
    id v18 = v1;
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_17;
  }
LABEL_9:
  if (v12 != 1)
  {
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    uint64_t v15 = v14;
    id v16 = v1;
    swift_bridgeObjectRelease();
    *uint64_t v15 = v1;
    v15[1] = v12;
    swift_storeEnumTagMultiPayload();
    goto LABEL_18;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v13 = *(id *)(v10 + 32);
  }
  id v1 = v13;
  swift_bridgeObjectRelease();

  return v1;
}

uint64_t sub_10020B5DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10020B6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000A0760(0, (unint64_t *)&qword_100340F90);
    sub_1000AA614(&qword_1003453B0, (unint64_t *)&qword_100340F90);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v29;
    uint64_t v26 = v30;
    uint64_t v5 = v31;
    int64_t v6 = v32;
    unint64_t v7 = v33;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v9 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v7 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = v9;
    int64_t v6 = 0;
  }
  uint64_t v24 = v5;
  int64_t v25 = (unint64_t)(v5 + 64) >> 6;
  int64_t v27 = v6;
  if (v4 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v7)
  {
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v13 = v12 | (v6 << 6);
    goto LABEL_29;
  }
  int64_t v15 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v15 < v25)
    {
      unint64_t v16 = *(void *)(v26 + 8 * v15);
      ++v6;
      if (v16) {
        goto LABEL_28;
      }
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v25) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v26 + 8 * v6);
      if (v16) {
        goto LABEL_28;
      }
      int64_t v6 = v15 + 2;
      if (v15 + 2 >= v25) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v26 + 8 * v6);
      if (v16) {
        goto LABEL_28;
      }
      int64_t v6 = v15 + 3;
      if (v15 + 3 >= v25) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v26 + 8 * v6);
      if (v16)
      {
LABEL_28:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_29:
        id v14 = *(id *)(*(void *)(v4 + 48) + 8 * v13);
        if (v14)
        {
          while (1)
          {
            uint64_t v18 = a3;
            id v19 = objc_msgSend(v14, "identifier", v24);
            uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v22 = v21;

            a3 = v18;
            if (v20 == a2 && v22 == v18) {
              break;
            }
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v23) {
              goto LABEL_36;
            }

            int64_t v27 = v6;
            if ((v4 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              sub_1000A0760(0, (unint64_t *)&qword_100340F90);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v14 = v34;
              swift_unknownObjectRelease();
              if (v34) {
                continue;
              }
            }
            goto LABEL_36;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_36;
      }
      int64_t v6 = v15 + 4;
      if (v15 + 4 < v25)
      {
        unint64_t v16 = *(void *)(v26 + 8 * v6);
        if (!v16)
        {
          uint64_t v17 = v27 + 6;
          while (v25 != v17)
          {
            unint64_t v16 = *(void *)(v26 + 8 * v17++);
            if (v16)
            {
              int64_t v6 = v17 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_28;
      }
    }
LABEL_36:
    sub_1000AA60C();
    return;
  }
  __break(1u);
}

id sub_10020BA68()
{
  id v0 = [self fetchRequest];
  id v11 = 0;
  id v1 = [v0 execute:&v11];
  id v2 = v11;
  if (!v1)
  {
    id v7 = v11;
    _convertNSErrorToError(_:)();

LABEL_14:
    swift_willThrow();

    return v2;
  }
  uint64_t v3 = v1;
  sub_1000A0760(0, &qword_100343A48);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v2;

  if (!(v4 >> 62))
  {
    id v2 = *(id *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  id v2 = (id)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 != (id)1)
  {
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    *uint64_t v9 = v2;
LABEL_13:
    swift_storeEnumTagMultiPayload();
    goto LABEL_14;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v6 = *(id *)(v4 + 32);
  }
  id v2 = v6;
  swift_bridgeObjectRelease();

  return v2;
}

id sub_10020BC8C(uint64_t a1, unint64_t *a2, id a3)
{
  id v5 = [self fetchRequest];
  id v16 = 0;
  id v6 = [v5 execute:&v16];
  id v7 = v16;
  if (!v6)
  {
    a3 = v16;
    _convertNSErrorToError(_:)();

LABEL_11:
    swift_willThrow();

    return a3;
  }
  uint64_t v8 = v6;
  sub_1000A0760(0, a2);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v7;

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11 == 1) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v11 != 1)
  {
LABEL_10:
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    id v14 = v13;
    swift_bridgeObjectRelease();
    *id v14 = v11;
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
LABEL_4:
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v12 = *(id *)(v9 + 32);
  }
  a3 = v12;
  swift_bridgeObjectRelease();

  return a3;
}

id sub_10020BE78(void *a1)
{
  id v3 = [a1 localUserDeviceState];

  if (!v3)
  {
    id v8 = sub_10020BA68();
    if (!v1) {
      return v8;
    }
    return (id)v2;
  }
  id v4 = sub_10020BC8C((uint64_t)STScreenTimeSettings_ptr, &qword_1003415C0, (id)0xD);
  if (v1) {
    return (id)v2;
  }
  id v5 = v4;
  id v6 = [v4 currentOrganization];

  if (!v6)
  {
    uint64_t v2 = type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    return (id)v2;
  }
  id result = [v5 currentOrganization];
  if (result)
  {
    uint64_t v2 = (uint64_t)result;

    return (id)v2;
  }
  __break(1u);
  return result;
}

id sub_10020BF94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v30 = [a1 dsid];
  id v4 = [a1 altDSID];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v7;
    uint64_t v29 = v6;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  id v8 = [a1 appleID];
  if (v8)
  {
    unint64_t v9 = v8;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v11 = 0;
  }
  id v12 = objc_msgSend(a1, "familyName", v26);
  if (v12)
  {
    unint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  id v17 = [a1 givenName];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  id v22 = [a1 familyMemberType];
  if (!v22) {
    id v22 = STFamilyMemberTypeUnknown;
  }
  unsigned __int8 v23 = [a1 isParent];
  unsigned __int8 v24 = [a1 isFamilyOrganizer];
  id result = [a1 isManaged];
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v29;
  *(void *)(a2 + 16) = v28;
  *(void *)(a2 + 24) = v27;
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v21;
  *(void *)(a2 + 72) = v22;
  *(unsigned char *)(a2 + 80) = v23;
  *(unsigned char *)(a2 + 81) = v24;
  *(unsigned char *)(a2 + 82) = (_BYTE)result;
  return result;
}

void sub_10020C17C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  int64_t v4 = 0;
  uint64_t v7 = *(void *)(a3 + 56);
  uint64_t v5 = a3 + 56;
  uint64_t v6 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v5 - 24);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v6;
  uint64_t v22 = v5;
  int64_t v23 = (unint64_t)(v8 + 63) >> 6;
LABEL_4:
  uint64_t v21 = v3;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v4 << 6);
    uint64_t v13 = v29;
LABEL_18:
    id v17 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    id v18 = sub_1001D7640();
    __chkstk_darwin(v18);
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v13) {
      goto LABEL_28;
    }
    uint64_t v29 = 0;

    id v18 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v28)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v3 = v21 + 1;
      if (!__OFADD__(v21, 1)) {
        goto LABEL_4;
      }
      __break(1u);
LABEL_28:

      return;
    }
  }
  BOOL v14 = __OFADD__(v4++, 1);
  uint64_t v13 = v29;
  if (v14)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v4 >= v23) {
    goto LABEL_29;
  }
  unint64_t v15 = *(void *)(v22 + 8 * v4);
  if (v15)
  {
LABEL_17:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_18;
  }
  int64_t v16 = v4 + 1;
  if (v4 + 1 >= v23) {
    goto LABEL_29;
  }
  unint64_t v15 = *(void *)(v22 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v4 + 2;
  if (v4 + 2 >= v23) {
    goto LABEL_29;
  }
  unint64_t v15 = *(void *)(v22 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v4 + 3;
  if (v4 + 3 >= v23)
  {
LABEL_29:
    swift_retain();
    sub_1002081F0(a1, a2, v21, a3);
    return;
  }
  unint64_t v15 = *(void *)(v22 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v4 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v23) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v22 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_10020C43C(uint64_t a1)
{
  uint64_t v2 = v1;
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v7 = 8 * v6;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    swift_retain();
    sub_10020C17C((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, a1);
    uint64_t v10 = v9;
    swift_release();
    swift_release();
    if (v2) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v7);
    swift_retain();
    sub_10020C17C((unint64_t *)v11, v6, a1);
    uint64_t v10 = v12;
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v10;
}

uint64_t sub_10020C608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = [self fetchRequestMatchingBlueprintsForUser:a2 ofType:a1 fromOrganization:a3 includeTombstones:1];
  id v11 = 0;
  id v5 = [v4 execute:&v11];
  id v6 = v11;
  if (v5)
  {
    size_t v7 = v5;
    sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v8 = v6;
  }
  else
  {
    id v9 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  return v3;
}

id sub_10020C738(id a1, char a2)
{
  if (a2)
  {
    id result = [a1 familySettings];
    if (result) {
      return result;
    }
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    id v9 = v8;
    id v10 = [a1 localUserDeviceState];

    id v11 = 0;
    if (!v10) {
      id v11 = [a1 dsid];
    }
    *id v9 = v11;
  }
  else
  {
    id result = [a1 cloudSettings];
    if (result) {
      return result;
    }
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    id v5 = v4;
    id v6 = [a1 localUserDeviceState];

    id v7 = 0;
    if (!v6) {
      id v7 = [a1 dsid];
    }
    *id v5 = v7;
  }
  swift_storeEnumTagMultiPayload();
  return (id)swift_willThrow();
}

uint64_t sub_10020C8AC(void *a1)
{
  id v2 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100286550;
  *(void *)(v3 + 56) = &type metadata for String;
  unint64_t v4 = sub_1000A5124();
  *(void *)(v3 + 64) = v4;
  *(void *)(v3 + 32) = 0x656369766564;
  *(void *)(v3 + 40) = 0xE600000000000000;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v3 + 96) = &type metadata for String;
  *(void *)(v3 + 104) = v4;
  *(void *)(v3 + 72) = 1919251317;
  *(void *)(v3 + 80) = 0xE400000000000000;
  *(void *)(v3 + 136) = sub_1000A0760(0, &qword_1003431E0);
  *(void *)(v3 + 144) = sub_1000AA614(&qword_1003452F0, &qword_1003431E0);
  *(void *)(v3 + 112) = a1;
  id v5 = a1;
  id v6 = NSPredicate.init(format:_:)();
  [v2 setPredicate:v6];

  uint64_t v21 = 0;
  id v7 = [v2 execute:&v21];
  id v8 = v21;
  if (!v7)
  {
    uint64_t v13 = v21;
    _convertNSErrorToError(_:)();

LABEL_16:
    swift_willThrow();

    return (uint64_t)v8;
  }
  id v9 = v7;
  sub_1000A0760(0, &qword_100340F80);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = v8;

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    id v8 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    id v8 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_4:
      if (v8 == (void *)1)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            __break(1u);
          }
          uint64_t v12 = *(id *)(v10 + 32);
        }
        id v8 = v12;
        swift_bridgeObjectRelease();

        return (uint64_t)v8;
      }
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      unint64_t v15 = v14;
      id v16 = [v2 predicate];
      if (v16)
      {
        id v17 = v16;
        swift_bridgeObjectRelease();
        *unint64_t v15 = v17;
        v15[1] = v8;
LABEL_15:
        swift_storeEnumTagMultiPayload();
        goto LABEL_16;
      }
      swift_errorRelease();
      __break(1u);
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRelease();
  type metadata accessor for DataStore.DataStoreError(0);
  sub_1000AA560();
  swift_allocError();
  id v8 = v18;
  id v19 = [v2 predicate];
  if (v19)
  {
    *id v8 = v19;
    goto LABEL_15;
  }
LABEL_21:
  uint64_t result = swift_errorRelease();
  __break(1u);
  return result;
}

uint64_t sub_10020CC4C(void *a1)
{
  id v2 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100284C10;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1000A5124();
  *(void *)(v3 + 32) = 0x656369766564;
  *(void *)(v3 + 40) = 0xE600000000000000;
  *(void *)(v3 + 96) = sub_1000A0760(0, &qword_1003415D0);
  *(void *)(v3 + 104) = sub_1000AA614(&qword_100345370, &qword_1003415D0);
  *(void *)(v3 + 72) = a1;
  id v4 = a1;
  id v5 = NSPredicate.init(format:_:)();
  [v2 setPredicate:v5];

  uint64_t v20 = 0;
  id v6 = [v2 execute:&v20];
  id v7 = v20;
  if (!v6)
  {
    uint64_t v12 = v20;
    _convertNSErrorToError(_:)();

LABEL_16:
    swift_willThrow();

    return (uint64_t)v7;
  }
  id v8 = v6;
  sub_1000A0760(0, &qword_100340F80);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v7;

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    id v7 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
  }
  else
  {
    id v7 = *(void **)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7)
    {
LABEL_4:
      if (v7 == (void *)1)
      {
        if ((v9 & 0xC000000000000001) != 0)
        {
          id v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            __break(1u);
          }
          id v11 = *(id *)(v9 + 32);
        }
        id v7 = v11;
        swift_bridgeObjectRelease();

        return (uint64_t)v7;
      }
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      uint64_t v14 = v13;
      id v15 = [v2 predicate];
      if (v15)
      {
        id v16 = v15;
        swift_bridgeObjectRelease();
        *uint64_t v14 = v16;
        v14[1] = v7;
LABEL_15:
        swift_storeEnumTagMultiPayload();
        goto LABEL_16;
      }
      swift_errorRelease();
      __break(1u);
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRelease();
  type metadata accessor for DataStore.DataStoreError(0);
  sub_1000AA560();
  swift_allocError();
  id v7 = v17;
  id v18 = [v2 predicate];
  if (v18)
  {
    void *v7 = v18;
    goto LABEL_15;
  }
LABEL_21:
  uint64_t result = swift_errorRelease();
  __break(1u);
  return result;
}

id sub_10020CFD4(id a1)
{
  id v2 = [self fetchRequest];
  sub_10009EE78(&qword_1003414D8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100284C10;
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1000A5124();
  *(void *)(v3 + 32) = 0x696669746E656469;
  *(void *)(v3 + 40) = 0xEA00000000007265;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v3 + 96) = sub_1000A0760(0, &qword_1003452D8);
  *(void *)(v3 + 104) = sub_1000AA614(&qword_1003452E0, &qword_1003452D8);
  *(void *)(v3 + 72) = isa;
  id v5 = NSPredicate.init(format:_:)();
  [v2 setPredicate:v5];

  id v19 = 0;
  id v6 = [v2 execute:&v19];
  id v7 = v19;
  if (!v6)
  {
    id v13 = v19;
    _convertNSErrorToError(_:)();

LABEL_11:
    swift_willThrow();

    return a1;
  }
  id v8 = v6;
  sub_1000A0760(0, &qword_1003452E8);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v7;

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14 == 1) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v11 != 1)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    id v16 = v15;
    *id v15 = UUID.uuidString.getter();
    v16[1] = v17;
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
LABEL_4:
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v12 = *(id *)(v9 + 32);
  }
  a1 = v12;
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_10020D2E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DataStore.DeviceDetails(uint64_t a1)
{
  return sub_1000C5978(a1, qword_1003454A0);
}

uint64_t sub_10020D34C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020D384()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D394()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D3A4()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020D3DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D3EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D3FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D40C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D41C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D42C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D43C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D44C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D45C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D46C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D47C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D48C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D49C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D4AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D4BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D4CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D4DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D4EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D4FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D50C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D51C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D52C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D53C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D54C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D55C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D56C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D57C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D58C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D59C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D5AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D5BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D5CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D5DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D5EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D5FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D60C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D61C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D62C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D63C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D64C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D65C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D66C()
{
  return _swift_deallocObject(v0, 17, 7);
}

id sub_10020D67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v9 == a1 && v10 == a2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return v8;
      }
    }
    id v13 = self;
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 blueprintConfigurationTypeForDeclarationType:v14];

    if (v15)
    {

      return v15;
    }
    else
    {
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      *id v16 = a3;
      v16[1] = a4;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v8;
}

id sub_10020D7E4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  id v6 = [self fetchRequestMatchingBlueprintsConfigurationForBlueprint:a4 ofType:a1 includeTombstones:1];
  id v29 = 0;
  id v7 = [v6 execute:&v29];
  id v8 = v29;
  if (!v7)
  {
    id v19 = v29;
    _convertNSErrorToError(_:)();

LABEL_15:
    swift_willThrow();

    return v5;
  }
  uint64_t v9 = v7;
  char v28 = v6;
  sub_1000A0760(0, (unint64_t *)&qword_100340F90);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = v8;

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12 >= 2) {
      goto LABEL_4;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v12 > 1)
    {
LABEL_4:
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      NSString v14 = v13;
      id v15 = [a4 identifier];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      id v5 = v5;
      swift_bridgeObjectRelease();
      *NSString v14 = v16;
      v14[1] = v18;
      v14[2] = (uint64_t)v5;
      v14[3] = v12;
LABEL_14:
      swift_storeEnumTagMultiPayload();
      id v6 = v28;
      goto LABEL_15;
    }
  }
  if (!v12)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    uint64_t v22 = v21;
    id v5 = v5;
    id v23 = [a4 identifier];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    *uint64_t v22 = v5;
    v22[1] = v24;
    v22[2] = v26;
    goto LABEL_14;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v20 = *(id *)(v10 + 32);
  }
  id v5 = v20;

  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_10020DAD0()
{
  unint64_t result = qword_1003453A8;
  if (!qword_1003453A8)
  {
    sub_1000C5390(&qword_1003426F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003453A8);
  }
  return result;
}

void sub_10020DB2C(unsigned char *a1@<X8>)
{
  sub_1001ED19C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_10020DB48(void *a1@<X8>)
{
}

void sub_10020DB68()
{
}

void sub_10020DB84(uint64_t *a1@<X8>)
{
  sub_1001E1CE8(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), (void **)&STBlueprintTypeDowntime, (void (*)(void))type metadata accessor for Downtime, a1);
}

void sub_10020DBC0(uint64_t *a1@<X8>)
{
  sub_1001E1CE8(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), (void **)&STBlueprintTypeAlwaysAllowedApps, (void (*)(void))type metadata accessor for AlwaysAllowed, a1);
}

void sub_10020DBFC(uint64_t *a1@<X8>)
{
  sub_1001E1CE8(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), (void **)&STBlueprintTypeManagedUser, (void (*)(void))type metadata accessor for ManagedUser, a1);
}

void sub_10020DC38(uint64_t *a1@<X8>)
{
  sub_1001E1CE8(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), (void **)&STBlueprintTypeRestrictions, (void (*)(void))type metadata accessor for Restrictions, a1);
}

void sub_10020DC74(uint64_t *a1@<X8>)
{
  sub_1001E25E8(*(void *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32), (uint64_t *)&STBlueprintTypeUsageLimit, (void (*)(id *, uint64_t, uint64_t *))sub_1001E1F0C, a1);
}

void sub_10020DCB0(uint64_t *a1@<X8>)
{
  sub_1001E25E8(*(void *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32), (uint64_t *)&STBlueprintTypeUsageLimitOverride, (void (*)(id *, uint64_t, uint64_t *))sub_1001E26FC, a1);
}

void sub_10020DCEC(uint64_t *a1@<X8>)
{
  sub_1001E2340(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

void sub_10020DD10(uint8_t *a1@<X8>)
{
  sub_1001E8200(*(uint8_t **)(v1 + 16), *(char **)(v1 + 24), a1);
}

void sub_10020DD2C()
{
}

void sub_10020DD48()
{
  sub_1001D8D3C(v0);
}

id sub_10020DD64()
{
  id v0 = [self fetchRequest];
  id v10 = 0;
  id v1 = [v0 execute:&v10];
  id v2 = v10;
  if (!v1)
  {
    id v7 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v2;
  }
  uint64_t v3 = v1;
  sub_1000A0760(0, &qword_100343A58);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v2;

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 == 1) {
      goto LABEL_4;
    }
LABEL_10:
    swift_bridgeObjectRelease();

    return 0;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v6 = *(id *)(v4 + 32);
  }
  id v2 = v6;
  swift_bridgeObjectRelease();

  return v2;
}

unint64_t sub_10020DF10()
{
  unint64_t result = qword_100345438;
  if (!qword_100345438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100345438);
  }
  return result;
}

uint64_t *sub_10020DF64(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = (void *)a2[4];
    uint64_t v10 = a3[7];
    uint64_t v21 = (char *)a1 + v10;
    id v11 = (char *)a2 + v10;
    a1[4] = (uint64_t)v9;
    uint64_t v12 = type metadata accessor for Date();
    id v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v14 = v9;
    v13(v21, v11, v12);
    uint64_t v15 = a3[9];
    *(_WORD *)((char *)v4 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
    uint64_t v16 = (uint64_t *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10020E0A4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *sub_10020E144(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = (void *)a2[4];
  a1[4] = v8;
  uint64_t v9 = a3[7];
  uint64_t v19 = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v8;
  v12(v19, v10, v11);
  uint64_t v14 = a3[9];
  *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10020E234(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)a2[4];
  uint64_t v7 = (void *)a1[4];
  a1[4] = v6;
  id v8 = v6;

  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10020E344(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

void *sub_10020E3EC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)a1[4];
  a1[4] = a2[4];

  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[9];
  *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10020E4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020E4D8);
}

uint64_t sub_10020E4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10020E588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10020E59C);
}

uint64_t sub_10020E59C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10020E644()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void destroy for DataStore.UserDetails(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v2 = *(void **)(a1 + 72);
}

uint64_t initializeWithCopy for DataStore.UserDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void **)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  id v9 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = v8;
  return a1;
}

uint64_t assignWithCopy for DataStore.UserDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a2 + 72);
  uint64_t v8 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v7;
  id v9 = v7;

  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  return a1;
}

__n128 initializeWithTake for DataStore.UserDetails(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for DataStore.UserDetails(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);

  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStore.UserDetails(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 83)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataStore.UserDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 82) = 0;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 83) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 83) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataStore.UserDetails()
{
  return &type metadata for DataStore.UserDetails;
}

ValueMetadata *type metadata accessor for DataStore.DeviceID()
{
  return &type metadata for DataStore.DeviceID;
}

void **initializeBufferWithCopyOfBuffer for DataStore.UserID(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for DataStore.UserID(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void *initializeWithTake for DataStore.UserID(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void **assignWithTake for DataStore.UserID(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DataStore.UserID(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DataStore.UserID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t sub_10020EBB4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10020EBCC(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DataStore.UserID()
{
  return &type metadata for DataStore.UserID;
}

uint64_t *sub_10020EBFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 0x14u:
      case 0x18u:
      case 0x1Bu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x21u:
      case 0x23u:
      case 0x25u:
        uint64_t v7 = (void *)*a2;
        *a1 = *a2;
        id v8 = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x20u:
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v12 = (void *)*a2;
        uint64_t v13 = (void *)a2[1];
        *a1 = *a2;
        a1[1] = (uint64_t)v13;
        a1[2] = a2[2];
        id v14 = v12;
        id v15 = v13;
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        uint64_t v18 = (void *)a2[2];
        uint64_t v17 = a2[3];
        a1[2] = (uint64_t)v18;
        a1[3] = v17;
        swift_bridgeObjectRetain();
        id v19 = v18;
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        uint64_t v20 = *a2;
        uint64_t v21 = a2[1];
        unsigned __int8 v22 = *((unsigned char *)a2 + 16);
        sub_1000B3828(*a2, v21, v22);
        *a1 = v20;
        a1[1] = v21;
        *((unsigned char *)a1 + 16) = v22;
        a1[3] = a2[3];
        swift_storeEnumTagMultiPayload();
        break;
      case 0xEu:
      case 0x10u:
        id v23 = (void *)*a2;
        uint64_t v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        id v25 = v23;
        swift_storeEnumTagMultiPayload();
        break;
      case 0xFu:
      case 0x19u:
        uint64_t v26 = (void *)*a2;
        uint64_t v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        a1[2] = a2[2];
        id v28 = v26;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0x17u:
        id v29 = (void *)*a2;
        id v30 = (void *)a2[1];
        *a1 = (uint64_t)v29;
        a1[1] = (uint64_t)v30;
        id v31 = v29;
        id v32 = v30;
        swift_storeEnumTagMultiPayload();
        break;
      case 0x1Au:
        uint64_t v33 = a2[1];
        *a1 = *a2;
        a1[1] = v33;
        unint64_t v34 = (void *)a2[2];
        a1[2] = (uint64_t)v34;
        swift_bridgeObjectRetain();
        id v35 = v34;
        swift_storeEnumTagMultiPayload();
        break;
      case 0x1Cu:
        uint64_t v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        uint64_t v37 = a2[2];
        uint64_t v38 = a2[3];
        a1[2] = v37;
        a1[3] = v38;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0x1Du:
        uint64_t v39 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
        swift_storeEnumTagMultiPayload();
        break;
      case 0x22u:
      case 0x24u:
        uint64_t v40 = *a2;
        uint64_t v41 = a2[1];
        unsigned __int8 v42 = *((unsigned char *)a2 + 16);
        sub_1000B3828(v40, v41, v42);
        *a1 = v40;
        a1[1] = v41;
        *((unsigned char *)a1 + 16) = v42;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void sub_10020F238(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 0xEu:
    case 0x10u:
    case 0x14u:
    case 0x18u:
    case 0x1Bu:
    case 0x1Eu:
    case 0x1Fu:
    case 0x21u:
    case 0x23u:
    case 0x25u:
      id v2 = *(id *)a1;
      goto LABEL_3;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 0x12u:
    case 0x13u:
    case 0x15u:
    case 0x16u:
    case 0x20u:
      goto LABEL_6;
    case 6u:
    case 0x17u:

      id v2 = *(id *)(a1 + 8);
      goto LABEL_3;
    case 8u:
    case 0x1Au:
      swift_bridgeObjectRelease();
      id v2 = *(id *)(a1 + 16);
LABEL_3:

      return;
    case 9u:
    case 0x22u:
    case 0x24u:
      id v3 = *(id *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
      sub_1000B3840((uint64_t)v3, v4, v5);
      return;
    case 0xFu:
    case 0x19u:

      goto LABEL_6;
    case 0x1Cu:
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 0x1Du:
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v7(a1, v6);
      break;
    default:
      return;
  }
}

uint64_t *sub_10020F414(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 0x14u:
    case 0x18u:
    case 0x1Bu:
    case 0x1Eu:
    case 0x1Fu:
    case 0x21u:
    case 0x23u:
    case 0x25u:
      uint64_t v38 = (void *)*a2;
      *a1 = *a2;
      id v39 = v38;
      goto LABEL_15;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 0x12u:
    case 0x13u:
    case 0x15u:
    case 0x16u:
    case 0x20u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_15;
    case 6u:
      uint64_t v7 = (void *)*a2;
      id v8 = (void *)a2[1];
      *a1 = *a2;
      a1[1] = (uint64_t)v8;
      a1[2] = a2[2];
      id v9 = v7;
      id v10 = v8;
      goto LABEL_15;
    case 8u:
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v13 = (void *)a2[2];
      uint64_t v12 = a2[3];
      a1[2] = (uint64_t)v13;
      a1[3] = v12;
      swift_bridgeObjectRetain();
      id v14 = v13;
      goto LABEL_15;
    case 9u:
      uint64_t v15 = *a2;
      uint64_t v16 = a2[1];
      unsigned __int8 v17 = *((unsigned char *)a2 + 16);
      sub_1000B3828(*a2, v16, v17);
      *a1 = v15;
      a1[1] = v16;
      *((unsigned char *)a1 + 16) = v17;
      a1[3] = a2[3];
      goto LABEL_15;
    case 0xEu:
    case 0x10u:
      uint64_t v18 = (void *)*a2;
      uint64_t v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      id v20 = v18;
      goto LABEL_15;
    case 0xFu:
    case 0x19u:
      uint64_t v21 = (void *)*a2;
      uint64_t v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      a1[2] = a2[2];
      id v23 = v21;
      swift_bridgeObjectRetain();
      goto LABEL_15;
    case 0x17u:
      uint64_t v24 = (void *)*a2;
      id v25 = (void *)a2[1];
      *a1 = (uint64_t)v24;
      a1[1] = (uint64_t)v25;
      id v26 = v24;
      id v27 = v25;
      goto LABEL_15;
    case 0x1Au:
      uint64_t v28 = a2[1];
      *a1 = *a2;
      a1[1] = v28;
      id v29 = (void *)a2[2];
      a1[2] = (uint64_t)v29;
      swift_bridgeObjectRetain();
      id v30 = v29;
      goto LABEL_15;
    case 0x1Cu:
      uint64_t v31 = a2[1];
      *a1 = *a2;
      a1[1] = v31;
      uint64_t v32 = a2[2];
      uint64_t v33 = a2[3];
      a1[2] = v32;
      a1[3] = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_15;
    case 0x1Du:
      uint64_t v34 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v34 - 8) + 16))(a1, a2, v34);
      goto LABEL_15;
    case 0x22u:
    case 0x24u:
      uint64_t v35 = *a2;
      uint64_t v36 = a2[1];
      unsigned __int8 v37 = *((unsigned char *)a2 + 16);
      sub_1000B3828(v35, v36, v37);
      *a1 = v35;
      a1[1] = v36;
      *((unsigned char *)a1 + 16) = v37;
LABEL_15:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_10020F990(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000C9DB4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 0x14u:
      case 0x18u:
      case 0x1Bu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x21u:
      case 0x23u:
      case 0x25u:
        id v29 = (void *)*a2;
        *a1 = *a2;
        id v30 = v29;
        goto LABEL_16;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x20u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 6u:
        uint64_t v6 = (void *)*a2;
        *a1 = *a2;
        uint64_t v7 = (void *)a2[1];
        a1[1] = (uint64_t)v7;
        a1[2] = a2[2];
        id v8 = v6;
        id v9 = v7;
        goto LABEL_16;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        id v10 = (void *)a2[2];
        a1[2] = (uint64_t)v10;
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        id v11 = v10;
        goto LABEL_16;
      case 9u:
        uint64_t v12 = *a2;
        uint64_t v13 = a2[1];
        unsigned __int8 v14 = *((unsigned char *)a2 + 16);
        sub_1000B3828(*a2, v13, v14);
        *a1 = v12;
        a1[1] = v13;
        *((unsigned char *)a1 + 16) = v14;
        a1[3] = a2[3];
        goto LABEL_16;
      case 0xEu:
      case 0x10u:
        uint64_t v15 = (void *)*a2;
        *a1 = *a2;
        a1[1] = a2[1];
        id v16 = v15;
        goto LABEL_16;
      case 0xFu:
      case 0x19u:
        unsigned __int8 v17 = (void *)*a2;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        id v18 = v17;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 0x17u:
        uint64_t v19 = (void *)*a2;
        *a1 = *a2;
        id v20 = (void *)a2[1];
        a1[1] = (uint64_t)v20;
        id v21 = v19;
        id v22 = v20;
        goto LABEL_16;
      case 0x1Au:
        *a1 = *a2;
        a1[1] = a2[1];
        id v23 = (void *)a2[2];
        a1[2] = (uint64_t)v23;
        swift_bridgeObjectRetain();
        id v24 = v23;
        goto LABEL_16;
      case 0x1Cu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 0x1Du:
        uint64_t v25 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        goto LABEL_16;
      case 0x22u:
      case 0x24u:
        uint64_t v26 = *a2;
        uint64_t v27 = a2[1];
        unsigned __int8 v28 = *((unsigned char *)a2 + 16);
        sub_1000B3828(v26, v27, v28);
        *a1 = v26;
        a1[1] = v27;
        *((unsigned char *)a1 + 16) = v28;
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10020FFBC(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 29)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100210074(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000C9DB4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 29)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10021013C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100210164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100210190()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1002101A0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1002102E0()
{
  unint64_t result = qword_100345590;
  if (!qword_100345590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100345590);
  }
  return result;
}

unint64_t sub_100210338()
{
  unint64_t result = qword_100345598;
  if (!qword_100345598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100345598);
  }
  return result;
}

unint64_t sub_100210494(uint64_t a1)
{
  if (a1 < 0)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v3 = 0xD000000000000022;
  }
  else
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v3 = 0xD000000000000020;
  }
  swift_getErrorValue();
  v1._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  sub_1001D5A04();
  return v3;
}

unint64_t sub_1002105A0()
{
  return sub_100210494(*v0);
}

void *initializeBufferWithCopyOfBuffer for CloudStoreLoaderError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  sub_1001D59E8();
  *a1 = v3;
  return a1;
}

uint64_t destroy for CloudStoreLoaderError()
{
  return sub_1001D5A04();
}

void *assignWithCopy for CloudStoreLoaderError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  sub_1001D59E8();
  *a1 = v3;
  sub_1001D5A04();
  return a1;
}

void *assignWithTake for CloudStoreLoaderError(void *a1, void *a2)
{
  *a1 = *a2;
  sub_1001D5A04();
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStoreLoaderError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CloudStoreLoaderError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100210700(void *a1)
{
  return *a1 >> 63;
}

void *sub_10021070C(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_10021071C(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for CloudStoreLoaderError()
{
  return &type metadata for CloudStoreLoaderError;
}

id sub_100210744()
{
  Swift::String v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)STDaemonPersistenceController) init];
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    Swift::String v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_1002107B0()
{
  Swift::String v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)STUserNotificationManager) init];
    uint64_t v4 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v3;
    id v2 = v3;

    Swift::String v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_10021081C()
{
  Swift::String v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)STConcreteAskForTimeEventRelay) init];
    uint64_t v4 = *(void **)(v0 + 32);
    *(void *)(v0 + 32) = v3;
    id v2 = v3;

    Swift::String v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_100210888()
{
  Swift::String v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)STConcreteDeviceInformationPrimitives) init];
    uint64_t v4 = *(void **)(v0 + 40);
    *(void *)(v0 + 40) = v3;
    id v2 = v3;

    Swift::String v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_1002108F4()
{
  Swift::String v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)STConcreteAskForTimeConfigurationProvider) init];
    uint64_t v4 = *(void **)(v0 + 48);
    *(void *)(v0 + 48) = v3;
    id v2 = v3;

    Swift::String v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_100210960()
{
  Swift::String v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)type metadata accessor for STConcreteAskToManager()) init];
    uint64_t v4 = *(void **)(v0 + 56);
    *(void *)(v0 + 56) = v3;
    id v2 = v3;

    Swift::String v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_1002109CC()
{
  Swift::String v1 = *(void **)(v0 + 64);
  if (v1)
  {
    id v2 = *(id *)(v0 + 64);
  }
  else
  {
    id v3 = sub_100210744();
    id v4 = sub_1002107B0();
    id v5 = sub_10021081C();
    id v6 = sub_1002108F4();
    id v7 = sub_100210960();
    id v8 = [objc_allocWithZone((Class)STAskForTimeManager) initWithPersistenceController:v3 userNotificationManager:v4 eventRelay:v5 askForTimeConfigurationProvider:v6 askToManager:v7];

    id v9 = *(void **)(v0 + 64);
    *(void *)(v0 + 64) = v8;
    id v2 = v8;

    Swift::String v1 = 0;
  }
  id v10 = v1;
  return v2;
}

uint64_t sub_100210A9C()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void *)(v0 + 72);
  }
  else
  {
    uint64_t v2 = v0;
    id v12 = sub_100210744();
    id v13 = sub_1002109CC();
    sub_1001D51D8();
    uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    uint64_t v11 = (uint64_t)&v11;
    __chkstk_darwin(v3);
    (*(void (**)(char *, void))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
    uint64_t v6 = type metadata accessor for DispatchQoS();
    __chkstk_darwin(v6 - 8);
    static DispatchQoS.unspecified.getter();
    uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
    __chkstk_darwin(v7);
    unsigned __int8 v14 = _swiftEmptyArrayStorage;
    sub_100211874();
    sub_10009EE78(&qword_1003457A8);
    sub_1002118C0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v8 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    id v9 = v12;
    uint64_t v1 = sub_1002113B4(v12, v8);

    *(void *)(v2 + 72) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

id sub_100210D1C()
{
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
    id v2 = *(id *)(v0 + 80);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)STAccountNotifier) init];
    uint64_t v4 = *(void **)(v0 + 80);
    *(void *)(v0 + 80) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_100210D88()
{
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1)
  {
    id v2 = *(id *)(v0 + 88);
  }
  else
  {
    id v3 = sub_100210744();
    id v4 = sub_1002109CC();
    uint64_t v5 = sub_100210A9C();
    id v6 = sub_100210D1C();
    id v7 = sub_100210888();
    id v8 = [v7 screenTimeCapabilities];

    id v9 = [objc_allocWithZone((Class)STScreenTimeOrganizationController) initWithPersistenceController:v3 askForTimeManager:v4 mirroringMonitor:v5 accountNotifier:v6 capabilities:v8];
    swift_unknownObjectRelease();

    id v10 = *(void **)(v0 + 88);
    *(void *)(v0 + 88) = v9;
    id v2 = v9;

    uint64_t v1 = 0;
  }
  id v11 = v1;
  return v2;
}

id sub_100210E78()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    id v2 = *(id *)(v0 + 96);
  }
  else
  {
    id v3 = sub_100210D88();
    id v4 = [objc_allocWithZone((Class)STAgentServer) initWithScreenTimeStateManager:v3];

    uint64_t v5 = *(void **)(v0 + 96);
    *(void *)(v0 + 96) = v4;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v6 = v1;
  return v2;
}

id *sub_100210EF8()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100210F68()
{
  sub_100210EF8();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConcreteDependencyFactory()
{
  return self;
}

double sub_100210FC0()
{
  *(void *)(v0 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

uint64_t sub_100210FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v38[3] = &type metadata for ConcretePersistentStoreSynchronizer;
  v38[4] = &off_1003088B0;
  v38[0] = a1;
  uint64_t v13 = type metadata accessor for ConcretePushServicePrimitives();
  v37[3] = v13;
  v37[4] = &off_1003088C0;
  v37[0] = a3;
  uint64_t v35 = type metadata accessor for ConcreteStoreChangeSyncTrigger();
  uint64_t v36 = &off_100308908;
  v34[0] = a5;
  type metadata accessor for AutomaticCloudMirroringMonitor();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = sub_1000C5908((uint64_t)v38, (uint64_t)&type metadata for ConcretePersistentStoreSynchronizer);
  __chkstk_darwin(v15);
  unsigned __int8 v17 = (uint64_t *)((char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_1000C5908((uint64_t)v37, v13);
  __chkstk_darwin(v19);
  id v21 = (uint64_t *)((char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_1000C5908((uint64_t)v34, v35);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = *v17;
  uint64_t v28 = *v21;
  uint64_t v29 = *v25;
  sub_1002119B8(a2, (uint64_t)v33);
  uint64_t v30 = sub_1002112C0(v27, v33, v28, a4, v29, a6, a7, v14);
  sub_100211A14(a2);
  sub_1000A4F28((uint64_t)v34);
  sub_1000A4F28((uint64_t)v37);
  sub_1000A4F28((uint64_t)v38);
  return v30;
}

uint64_t sub_1002112C0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a8 + 80) = &type metadata for GenesisCloudStoreLoader;
  *(void *)(a8 + 88) = &off_100309748;
  uint64_t v16 = (_OWORD *)swift_allocObject();
  *(void *)(a8 + 56) = v16;
  long long v17 = a2[3];
  v16[3] = a2[2];
  v16[4] = v17;
  long long v18 = a2[5];
  v16[5] = a2[4];
  v16[6] = v18;
  long long v19 = a2[1];
  v16[1] = *a2;
  v16[2] = v19;
  *(void *)(a8 + 40) = &type metadata for ConcretePersistentStoreSynchronizer;
  *(void *)(a8 + 48) = &off_1003088B0;
  *(void *)(a8 + 16) = a1;
  *(void *)(a8 + 120) = type metadata accessor for ConcretePushServicePrimitives();
  *(void *)(a8 + 128) = &off_1003088C0;
  *(void *)(a8 + 96) = a3;
  *(void *)(a8 + 184) = type metadata accessor for ConcreteStoreChangeSyncTrigger();
  *(void *)(a8 + 192) = &off_100308908;
  *(unsigned char *)(a8 + 200) = 0;
  *(void *)(a8 + 216) = 0;
  *(void *)(a8 + 224) = 0;
  *(void *)(a8 + 208) = 0;
  *(void *)(a8 + 152) = a4;
  *(void *)(a8 + 160) = a5;
  *(void *)(a8 + 136) = a6;
  *(void *)(a8 + 144) = a7;
  return a8;
}

uint64_t sub_1002113B4(void *a1, void *a2)
{
  if (qword_100340E18 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10009DA74(v4, (uint64_t)qword_10034B3B8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "using mirroring with automatic scheduling", v7, 2u);
    swift_slowDealloc();
  }

  id v8 = [objc_allocWithZone((Class)STUnique) initWithPersistenceController:a1];
  v30[4] = &type metadata for ConcretePersistentStoreSynchronizer;
  v30[5] = &off_1003088B0;
  v30[0] = a1;
  v30[1] = v8;
  v24[3] = &type metadata for MirroringCloudStoreLoader;
  v24[4] = &off_100309AC8;
  v24[0] = a1;
  v24[1] = a2;
  uint64_t v26 = &type metadata for GenesisCloudMirroringImporter;
  uint64_t v27 = &off_100309548;
  uint64_t v25 = swift_allocObject();
  sub_10021195C((uint64_t)v30, v25 + 16);
  type metadata accessor for DefaultsBackedCloudMirroringGenesisStateStore();
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = &off_1003094A8;
  type metadata accessor for ConcreteStoreChangeSyncTrigger();
  uint64_t v9 = swift_allocObject();
  sub_10009EE78(&qword_1003457B8);
  swift_allocObject();
  id v10 = a1;
  id v11 = a2;
  id v12 = v10;
  id v13 = v11;
  id v14 = v8;
  *(void *)(v9 + 16) = PassthroughSubject.init()();
  type metadata accessor for ConcretePushServicePrimitives();
  swift_allocObject();
  id v15 = v14;
  uint64_t v16 = sub_100211EF4();
  uint64_t v17 = sub_100212E68(v12, (uint64_t)v13);
  id v18 = objc_allocWithZone((Class)STConcretePrimitiveOSTransactionProvider);
  id v19 = v13;
  swift_retain();
  id v20 = [v18 init];
  sub_1002119B8((uint64_t)v24, (uint64_t)v23);
  uint64_t v21 = sub_100210FDC((uint64_t)v15, (uint64_t)v23, v16, v17, v9, (uint64_t)v19, (uint64_t)v20);

  swift_release();
  sub_100211A14((uint64_t)v24);
  sub_100211A68((uint64_t)v30);
  return v21;
}

uint64_t sub_100211688()
{
  sub_1001D51D8();
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  v6[1] = _swiftEmptyArrayStorage;
  sub_100211874();
  sub_10009EE78(&qword_1003457A8);
  sub_1002118C0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t sub_100211874()
{
  unint64_t result = qword_1003457A0;
  if (!qword_1003457A0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003457A0);
  }
  return result;
}

unint64_t sub_1002118C0()
{
  unint64_t result = qword_1003457B0;
  if (!qword_1003457B0)
  {
    sub_1000C5390(&qword_1003457A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003457B0);
  }
  return result;
}

uint64_t sub_10021191C()
{
  sub_1000A4F28(v0 + 24);
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10021195C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002119B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100211A14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100211A68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100211ABC()
{
  sub_1000A4F28(v0 + 16);
  sub_1000A4F28(v0 + 56);
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100211B04(void *a1)
{
  unsigned __int8 v6 = 0;
  id v5 = 0;
  if ([a1 migrateWithExportNeeded:&v6 error:&v5])
  {
    uint64_t v1 = v6;
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    uint64_t v1 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

ValueMetadata *type metadata accessor for ConcretePersistentStoreSynchronizer()
{
  return &type metadata for ConcretePersistentStoreSynchronizer;
}

uint64_t sub_100211BC0()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Repairing usage limit blueprint.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t result = NSManagedObjectContext.performAndWait<A>(_:)();
  if (!v0)
  {
    uint64_t v7 = __chkstk_darwin(result);
    __chkstk_darwin(v7);
    uint64_t v8 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v9 = __chkstk_darwin(v8);
    __chkstk_darwin(v9);
    return NSManagedObjectContext.performAndWait<A>(_:)();
  }
  return result;
}

uint64_t sub_100211E3C()
{
  return type metadata accessor for UsageLimit();
}

uint64_t type metadata accessor for UsageLimit()
{
  uint64_t result = qword_1003457E8;
  if (!qword_1003457E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100211E90()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConcretePushServicePrimitives()
{
  return self;
}

uint64_t sub_100211EF4()
{
  sub_1001D51D8();
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  v7[1] = _swiftEmptyArrayStorage;
  sub_100211874();
  sub_10009EE78(&qword_1003457A8);
  sub_1002118C0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 24) = 0;
  return v0;
}

uint64_t sub_1002120EC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t type metadata accessor for Family()
{
  return self;
}

uint64_t sub_1002121D0()
{
  return _swift_task_switch(sub_1002121EC, 0, 0);
}

uint64_t sub_1002121EC()
{
  id v1 = [objc_allocWithZone((Class)FAFetchFamilyCircleRequest) init];
  v0[16] = v1;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100212308;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1002120EC;
  v0[13] = &unk_1003088D8;
  v0[14] = v2;
  [v1 startRequestWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100212308()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_100212480;
  }
  else {
    uint64_t v2 = sub_100212418;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100212418()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100212480()
{
  swift_willThrow();
  _s3__C4CodeOMa_1(0);
  *(void *)(v0 + 80) = -1004;
  swift_errorRetain();
  sub_1002125A4();
  char v1 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 128);
    swift_errorRelease();
    id v3 = [objc_allocWithZone((Class)FAFamilyCircle) init];

    uint64_t v4 = *(uint64_t (**)(id))(v0 + 8);
    return v4(v3);
  }
  else
  {

    unsigned __int8 v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

unint64_t sub_1002125A4()
{
  unint64_t result = qword_100341208;
  if (!qword_100341208)
  {
    _s3__C4CodeOMa_1(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100341208);
  }
  return result;
}

id sub_1002125FC(void *a1)
{
  id v1 = [a1 members];
  sub_100212A68();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      id result = (id)sub_10020808C(0, v3 & ~(v3 >> 63), 0);
      if (v3 < 0) {
        break;
      }
      uint64_t v5 = 0;
      while (v3 != v5)
      {
        if ((v2 & 0xC000000000000001) != 0) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v6 = *(id *)(v2 + 8 * v5 + 32);
        }
        uint64_t v7 = v6;
        if ([v6 isMe])
        {

          id v8 = 0;
        }
        else
        {
          id result = [v7 dsid];
          if (!result) {
            goto LABEL_21;
          }
          id v8 = result;
        }
        unint64_t v10 = _swiftEmptyArrayStorage[2];
        unint64_t v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1) {
          sub_10020808C(v9 > 1, v10 + 1, 1);
        }
        ++v5;
        _swiftEmptyArrayStorage[2] = v10 + 1;
        _swiftEmptyArrayStorage[v10 + 4] = v8;
        if (v3 == v5) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v3) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10020A0B4((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    return (id)v11;
  }
  return result;
}

id sub_1002127E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result = [a1 dsid];
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [a1 altDSID];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v10 = 0;
    }
    id v11 = [a1 appleID];
    if (v11)
    {
      id v12 = v11;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v14 = 0;
    }
    id v15 = [a1 lastName];
    uint64_t v34 = v8;
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v18 = 0;
    }
    id v19 = [a1 firstName];
    if (v19)
    {
      id v20 = v19;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v22 = 0;
    }
    unsigned __int8 v33 = [a1 isGuardian];
    unsigned __int8 v23 = [a1 isOrganizer];
    uint64_t v24 = (void *)STFamilyMemberTypeUnknown;
    swift_bridgeObjectRetain();
    id v25 = v24;
    id v26 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v27 = [a1 memberType];
    if ((unint64_t)v27 <= 2)
    {
      id v28 = *(id *)*(&off_1003088F0 + (void)v27);

      id v25 = v28;
    }
    id v29 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    id result = (id)swift_bridgeObjectRelease_n();
    *(void *)a2 = v29;
    *(void *)(a2 + 8) = v34;
    *(void *)(a2 + 16) = v10;
    *(void *)(a2 + 24) = v32;
    *(void *)(a2 + 32) = v14;
    *(void *)(a2 + 40) = v31;
    *(void *)(a2 + 48) = v18;
    *(void *)(a2 + 56) = v30;
    *(void *)(a2 + 64) = v22;
    *(void *)(a2 + 72) = v25;
    *(unsigned char *)(a2 + 80) = v33;
    *(unsigned char *)(a2 + 81) = v23;
    *(unsigned char *)(a2 + 82) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100212A68()
{
  unint64_t result = qword_100342A90;
  if (!qword_100342A90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100342A90);
  }
  return result;
}

void *sub_100212AA8(uint64_t a1, uint64_t a2, id a3)
{
  id v5 = [a3 members];
  sub_100212A68();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62) {
    goto LABEL_49;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v7)
  {
    unint64_t v8 = 0;
    unint64_t v9 = v6 & 0xC000000000000001;
    while (1)
    {
      if (v9)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v8 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_47;
        }
        id v10 = *(id *)(v6 + 32 + 8 * v8);
      }
      id v11 = v10;
      if (__OFADD__(v8++, 1)) {
        break;
      }
      id v13 = [v10 appleID];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        if (v15 == a1 && v17 == a2)
        {
LABEL_44:
          swift_bridgeObjectRelease();
LABEL_45:
          swift_bridgeObjectRelease();
          return v11;
        }
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_45;
        }
      }
      id v20 = [v11 dictionary];
      if (!v20) {
        goto LABEL_4;
      }
      uint64_t v21 = v20;
      uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      AnyHashable.init<A>(_:)();
      if (*(void *)(v22 + 16) && (unint64_t v23 = sub_10010A0C0((uint64_t)v33), (v24 & 1) != 0))
      {
        sub_1000A4F78(*(void *)(v22 + 56) + 32 * v23, (uint64_t)&v34);
      }
      else
      {
        long long v34 = 0u;
        long long v35 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000FD990((uint64_t)v33);
      if (!*((void *)&v35 + 1))
      {

        sub_1000D3920((uint64_t)&v34);
        goto LABEL_5;
      }
      sub_10009EE78(&qword_1003426F0);
      if (swift_dynamicCast())
      {
        uint64_t v25 = MEMORY[0xD000000000000026];
        if (MEMORY[0xD000000000000026])
        {
          if (MEMORY[0xD000000000000036] == a1 && MEMORY[0xD00000000000003E] == a2
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            goto LABEL_44;
          }
          if (v25 != 1)
          {
            if (MEMORY[0xD000000000000046] == a1 && MEMORY[0xD00000000000004E] == a2
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              goto LABEL_44;
            }
            if (v25 != 2)
            {
              unint64_t v31 = v9;
              uint64_t v32 = v7;
              id v26 = (void *)0xD00000000000005ELL;
              uint64_t v27 = 2;
              while (1)
              {
                uint64_t v28 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_48;
                }
                BOOL v29 = *(v26 - 1) == a1 && *v26 == a2;
                if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_44;
                }
                v26 += 2;
                ++v27;
                if (v28 == v25)
                {

                  swift_bridgeObjectRelease();
                  unint64_t v9 = v31;
                  uint64_t v7 = v32;
                  goto LABEL_5;
                }
              }
            }
          }
        }

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_4:
      }
LABEL_5:
      if (v8 == v7) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_50:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100212E68(void *a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v3 = sub_10009EE78(&qword_100345B20);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v42 + 64);
  __chkstk_darwin(v3);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  unsigned __int8 v37 = (char *)&v34 - v5;
  uint64_t v6 = sub_100213460(a1);
  __chkstk_darwin(v6);
  uint64_t v7 = (char *)&v34 - v5;
  uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [self defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  sub_100213AFC();
  long long v35 = v7;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = sub_10009EE78(&qword_100345B28);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v39 = v13;
  uint64_t v40 = v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10009EE78(&qword_100345B30);
  uint64_t v17 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  char v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = *(void *)(v38 + 16);
  sub_10009EE78(&qword_1003457B8);
  sub_1001D59A4(&qword_100345B38, &qword_1003457B8);
  sub_1001D59A4(&qword_100345B40, &qword_100345B20);
  uint64_t v34 = v3;
  Publisher.merge<A, B>(with:_:)();
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  uint64_t v43 = v41;
  uint64_t v24 = sub_10009EE78(&qword_100344C50);
  __chkstk_darwin(v24 - 8);
  id v26 = (char *)&v34 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  sub_1000A0760(0, (unint64_t *)&qword_100340F00);
  sub_1001D59A4(&qword_100345B48, &qword_100345B30);
  sub_100213B48();
  uint64_t v28 = v36;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_1000A4FD8((uint64_t)v26, &qword_100344C50);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v28);
  sub_1001D59A4((unint64_t *)&unk_100345B50, &qword_100345B28);
  uint64_t v29 = v39;
  uint64_t v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v29);
  unint64_t v31 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v32 = v34;
  v31(v35, v34);
  v31(v37, v32);
  return v30;
}

uint64_t sub_100213460(void *a1)
{
  id v2 = [a1 persistentContainer];
  id v3 = [v2 persistentStoreCoordinator];

  uint64_t v4 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self defaultCenter];
  id v9 = v3;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = a1;
  sub_100213AFC();
  id v11 = v9;
  id v12 = a1;
  Publisher.compactMap<A>(_:)();

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_100213630(void *a1@<X1>, void *a2@<X2>, char *a3@<X8>)
{
  uint64_t v6 = Notification.userInfo.getter();
  if (!v6)
  {
    long long v25 = 0u;
    long long v26 = 0u;
LABEL_13:
    sub_1000A4FD8((uint64_t)&v25, &qword_100341CD8);
LABEL_14:
    char v17 = 3;
    goto LABEL_15;
  }
  uint64_t v7 = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_10010A0C0((uint64_t)&v24), (v9 & 1) != 0))
  {
    sub_1000A4F78(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v25);
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000FD990((uint64_t)&v24);
  if (!*((void *)&v26 + 1)) {
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [a1 persistentStoreForIdentifier:v10];

  if (!v11) {
    goto LABEL_14;
  }
  id v12 = [v11 configurationName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  if (v13 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v15 != v16)
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18)
    {

      char v17 = 0;
      goto LABEL_15;
    }
    id v19 = v11;
    id v20 = [a2 localStore];
    if (v20)
    {
      uint64_t v21 = v20;
      sub_1000A0760(0, (unint64_t *)&qword_100342B90);
      id v22 = v19;
      char v23 = static NSObject.== infix(_:_:)();

      if (v23)
      {
        char v17 = 0;
        goto LABEL_15;
      }
    }
    else
    {
    }
    goto LABEL_14;
  }

  swift_bridgeObjectRelease_n();
  char v17 = 0;
LABEL_15:
  *a3 = v17;
}

void sub_1002138A8(char *a1@<X8>)
{
  uint64_t v2 = Notification.userInfo.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    *(void *)&long long v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v12 + 1) = v4;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v3 + 16) && (unint64_t v5 = sub_10010A0C0((uint64_t)v10), (v6 & 1) != 0))
    {
      sub_1000A4F78(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1000FD990((uint64_t)v10);
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  sub_1000B8ADC((uint64_t)&v12, (uint64_t)v10);
  if (!v10[3])
  {
    sub_1000A4FD8((uint64_t)v10, &qword_100341CD8);
    goto LABEL_14;
  }
  sub_1000A0760(0, (unint64_t *)&unk_100346090);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    sub_1000A4FD8((uint64_t)&v12, &qword_100341CD8);
    goto LABEL_15;
  }
  id v7 = v11;
  if ([v11 type] == (id)1 || !objc_msgSend(v7, "type"))
  {
    unsigned __int8 v9 = [v7 succeeded];

    sub_1000A4FD8((uint64_t)&v12, &qword_100341CD8);
    if (v9)
    {
      char v8 = 1;
      goto LABEL_16;
    }
  }
  else
  {
    sub_1000A4FD8((uint64_t)&v12, &qword_100341CD8);
  }
LABEL_15:
  char v8 = 3;
LABEL_16:
  *a1 = v8;
}

uint64_t type metadata accessor for ConcreteStoreChangeSyncTrigger()
{
  return self;
}

uint64_t sub_100213A78()
{
  return PassthroughSubject.send(_:)();
}

uint64_t sub_100213AB4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100213AF4(char *a1@<X8>)
{
  sub_100213630(*(void **)(v1 + 16), *(void **)(v1 + 24), a1);
}

unint64_t sub_100213AFC()
{
  unint64_t result = qword_100345B18;
  if (!qword_100345B18)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100345B18);
  }
  return result;
}

unint64_t sub_100213B48()
{
  unint64_t result = qword_100344C68;
  if (!qword_100344C68)
  {
    sub_1000A0760(255, (unint64_t *)&qword_100340F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100344C68);
  }
  return result;
}

uint64_t sub_100213BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000A4FD8(a1, &qword_100340F10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_100213D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000A4FD8(a1, &qword_100340F10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10009EE78(&qword_1003460C8);
  return swift_task_create();
}

double sub_100213EB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (uint64_t v6 = sub_10010A024(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_1000A4F78(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double sub_100213F18@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_10010A0C0(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_1000A4F78(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

id sub_100213F80()
{
  id v3 = 0;
  if (objc_msgSend(v0, "setTaskExpiredWithRetryAfter:error:", &v3)) {
    return v3;
  }
  id v2 = v3;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_100214028(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

id sub_100214110()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DaemonFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DaemonFactory()
{
  return self;
}

id sub_100214168()
{
  return sub_1002141A8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___persistenceController, (uint64_t (*)(void))sub_100210744);
}

id sub_100214188()
{
  return sub_1002141A8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___notificationManager, (uint64_t (*)(void))sub_1002107B0);
}

id sub_1002141A8(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v7 = v2;
    sub_1000C5860((void *)(v2 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory), *(void *)(v2 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory + 24));
    uint64_t v8 = (void *)a2();
    unsigned __int8 v9 = *(void **)(v2 + v3);
    *(void *)(v7 + v3) = v8;
    id v5 = v8;

    uint64_t v4 = 0;
  }
  id v10 = v4;
  return v5;
}

id sub_100214228()
{
  return sub_1002141A8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___screenTimeOrganizationController, (uint64_t (*)(void))sub_100210D88);
}

id sub_100214248()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeListener);
}

void sub_10021425C()
{
  uint64_t v1 = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeListenerDelegate;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeListenerDelegate);
  if (v2) {
    goto LABEL_4;
  }
  uint64_t v3 = v0;
  sub_1000C5860((void *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory), *(void *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory + 24));
  id v4 = sub_1002109CC();
  id v5 = [objc_allocWithZone((Class)STAskForTimeListenerDelegate) initWithAskForTimeManager:v4];

  if (v5)
  {
    char v6 = *(void **)(v3 + v1);
    *(void *)(v3 + v1) = v5;
    v5;

    uint64_t v2 = 0;
LABEL_4:
    id v7 = v2;
    return;
  }
  __break(1u);
}

id sub_100214308()
{
  uint64_t v1 = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeEventRelay;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeEventRelay))
  {
    id v2 = *(id *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeEventRelay);
  }
  else
  {
    sub_1000C5860((void *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory), *(void *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory + 24));
    id v3 = sub_10021081C();
    *(void *)(v0 + v1) = v3;
    id v2 = v3;
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

id sub_100214388()
{
  return sub_1002141A8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeResponseHandler, (uint64_t (*)(void))sub_1002109CC);
}

id sub_1002143A8()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___commandLineToolListener);
}

id sub_1002143BC()
{
  uint64_t v1 = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___commandLineToolListenerDelegate;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___commandLineToolListenerDelegate);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___commandLineToolListenerDelegate);
  }
  else
  {
    uint64_t v4 = v0;
    sub_1000C5860((void *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory), *(void *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory + 24));
    id v5 = sub_100210744();
    id v6 = sub_100210D88();
    id v7 = sub_1002107B0();
    id v8 = [objc_allocWithZone((Class)STToolServerDelegate) initWithPersistenceController:v5 screenTimeOrganizationController:v6 notificationManager:v7];

    unsigned __int8 v9 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v8;
    id v3 = v8;

    id v2 = 0;
  }
  id v10 = v2;
  return v3;
}

id sub_100214488()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___contactsAgentListener);
}

id sub_10021449C()
{
  return sub_1002144FC(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___agentListenerDelegate, (uint64_t (*)(void))sub_100210D88, (Class *)&off_1002FA008, (SEL *)&selRef_initWithScreenTimeStateManager_);
}

id sub_1002144CC()
{
  return sub_1002144FC(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___coreAnalyticsManager, (uint64_t (*)(void))sub_100210744, (Class *)&off_1002FA0E0, (SEL *)&selRef_initWithPersistenceController_);
}

id sub_1002144FC(uint64_t *a1, uint64_t (*a2)(void), Class *a3, SEL *a4)
{
  uint64_t v5 = *a1;
  id v6 = *(void **)(v4 + *a1);
  if (v6)
  {
    id v7 = *(id *)(v4 + *a1);
  }
  else
  {
    uint64_t v11 = v4;
    sub_1000C5860((void *)(v4 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory), *(void *)(v4 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory + 24));
    long long v12 = (void *)a2();
    id v13 = objc_msgSend(objc_allocWithZone(*a3), *a4, v12);

    uint64_t v14 = *(void **)(v11 + v5);
    *(void *)(v11 + v5) = v13;
    id v7 = v13;

    id v6 = 0;
  }
  id v15 = v6;
  return v7;
}

id sub_1002145AC()
{
  return sub_100214634(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___storeServer, (Class *)&off_1002FA2F8);
}

id sub_1002145C0()
{
  uint64_t v1 = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___bootstrapperQueue;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___bootstrapperQueue);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___bootstrapperQueue);
  }
  else
  {
    uint64_t v4 = (void *)sub_100211688();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_100214620()
{
  return sub_100214634(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___xpcServiceProvider, (Class *)off_1002FA0D8);
}

id sub_100214634(uint64_t *a1, Class *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = [objc_allocWithZone(*a2) init];
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id sub_1002146F0()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askListener);
}

id sub_100214704()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askAlternateListener);
}

id sub_100214718()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___communicationListener);
}

id sub_10021472C()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___contactsListener);
}

id sub_100214740()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___diagnosticsListener);
}

id sub_100214754()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___downtimeListener);
}

id sub_100214768()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___privateListener);
}

id sub_10021477C()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___settingsListener);
}

id sub_100214790()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___setupListener);
}

id sub_1002147A4()
{
  return sub_1002147B8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___publicListener);
}

id sub_1002147B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = objc_allocWithZone((Class)NSXPCListener);
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v7 = [v5 initWithMachServiceName:v6];

    id v8 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v7;
    id v4 = v7;

    uint64_t v3 = 0;
  }
  id v9 = v3;
  return v4;
}

id sub_10021486C()
{
  return sub_1002148D8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___cleanupActivityScheduler);
}

id sub_100214890()
{
  return sub_1002148D8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___appCollectionActivityScheduler);
}

id sub_1002148B4()
{
  return sub_1002148D8(&OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___analyticsActivityScheduler);
}

id sub_1002148D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    id v5 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 initWithIdentifier:v6];

    [v7 setPreregistered:1];
    id v8 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v7;
    id v4 = v7;

    uint64_t v3 = 0;
  }
  id v9 = v3;
  return v4;
}

id sub_100214990()
{
  uint64_t v1 = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient);
LABEL_5:
    id v12 = v2;
    return v3;
  }
  id result = [self systemConnection];
  if (result)
  {
    id v5 = result;
    id v6 = objc_allocWithZone((Class)DMFConfigurationSourceClient);
    NSString v7 = String._bridgeToObjectiveC()();
    NSString v8 = String._bridgeToObjectiveC()();
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v6 initWithConnection:v5 organizationIdentifier:v7 displayName:v8 localMachServiceName:v9];

    uint64_t v11 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v10;
    id v3 = v10;

    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_100214AD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ScreenTimeFeatureFlags();
  v16[3] = v2;
  v16[4] = sub_10022A498(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  id v3 = sub_1000C532C(v16);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v3, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v2);
  LOBYTE(v2) = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v16);
  if (v2)
  {
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "ScreenTimeAgent as simplifiedAgent is shutting down", v6, 2u);
      swift_slowDealloc();
    }

    sub_100214D3C();
    NSString v7 = self;
    id v8 = [v7 sharedScheduler];
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 deregisterTaskWithIdentifier:v9];

    id v10 = [v7 sharedScheduler];
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 deregisterTaskWithIdentifier:v11];

    sub_100214E54();
    id v12 = sub_10021486C();
    [v12 invalidate];

    id v13 = sub_1002148B4();
    [v13 invalidate];

    sub_100215128();
  }
  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for Daemon();
  return objc_msgSendSuper2(&v15, "dealloc");
}

void sub_100214D3C()
{
  id v0 = sub_1002146F0();
  [v0 invalidate];

  id v1 = sub_100214718();
  [v1 invalidate];

  id v2 = sub_10021472C();
  [v2 invalidate];

  id v3 = sub_100214990();
  [v3 invalidate];

  id v4 = sub_100214754();
  [v4 invalidate];

  id v5 = sub_100214768();
  [v5 invalidate];

  id v6 = sub_10021477C();
  [v6 invalidate];

  id v7 = sub_100214790();
  [v7 invalidate];

  if (os_variant_has_internal_content())
  {
    id v8 = sub_100214740();
    [v8 invalidate];
  }
  id v9 = sub_1002147A4();
  [v9 invalidate];
}

void sub_100214E54()
{
  uint64_t v0 = static STUserNotifications.notificationCentersByBundle.getter();
  int64_t v1 = 0;
  uint64_t v18 = v0 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(v0 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(v0 + 64);
  int64_t v19 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      unint64_t v5 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v6 = v5 | (v1 << 6);
      goto LABEL_22;
    }
    int64_t v7 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }
    if (v7 >= v19) {
      goto LABEL_24;
    }
    unint64_t v8 = *(void *)(v18 + 8 * v7);
    ++v1;
    if (!v8)
    {
      int64_t v1 = v7 + 1;
      if (v7 + 1 >= v19) {
        goto LABEL_24;
      }
      unint64_t v8 = *(void *)(v18 + 8 * v1);
      if (!v8)
      {
        int64_t v1 = v7 + 2;
        if (v7 + 2 >= v19) {
          goto LABEL_24;
        }
        unint64_t v8 = *(void *)(v18 + 8 * v1);
        if (!v8) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v4 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v1 << 6);
LABEL_22:
    id v10 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v6);
    uint64_t v12 = *v10;
    unint64_t v11 = v10[1];
    id v13 = *(void **)(*(void *)(v0 + 56) + 8 * v6);
    swift_bridgeObjectRetain_n();
    id v14 = v13;
    objc_super v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v17 + 4) = sub_1000A2E70(v12, v11, &v20);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "UNUserNotificationCenterDelegate unhooking %s", (uint8_t *)v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    [v14 setDelegate:0];
  }
  int64_t v9 = v7 + 3;
  if (v9 < v19)
  {
    unint64_t v8 = *(void *)(v18 + 8 * v9);
    if (!v8)
    {
      while (1)
      {
        int64_t v1 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_28;
        }
        if (v1 >= v19) {
          goto LABEL_24;
        }
        unint64_t v8 = *(void *)(v18 + 8 * v1);
        ++v9;
        if (v8) {
          goto LABEL_21;
        }
      }
    }
    int64_t v1 = v9;
    goto LABEL_21;
  }
LABEL_24:
  swift_release();
}

void sub_100215128()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136315138;
    sub_1000A2E70(0xD00000000000001DLL, 0x8000000100297640, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s : Unregistering from store change notifications", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v5 = [self defaultCenter];
  [v5 removeObserver:v1];
}

uint64_t sub_1002155B8()
{
  return type metadata accessor for Daemon();
}

uint64_t type metadata accessor for Daemon()
{
  uint64_t result = qword_100345CD0;
  if (!qword_100345CD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10021560C()
{
  uint64_t v1 = v0;
  uint64_t v79 = type metadata accessor for OSSignpostError();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v77 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v85 - 8);
  uint64_t v4 = __chkstk_darwin(v85);
  uint64_t v6 = (void (*)(uint64_t, char *, uint64_t))((char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v4);
  int64_t v9 = (char *)&v74 - v8;
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v74 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  objc_super v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OSSignposter();
  uint64_t v83 = *(void *)(v16 - 8);
  uint64_t v84 = v16;
  __chkstk_darwin(v16);
  uint64_t v86 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ScreenTimeFeatureFlags();
  uint64_t v90 = (void *)v18;
  uint64_t v82 = sub_10022A498(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v91 = (uint64_t (*)(uint64_t (*)(uint64_t)))v82;
  int64_t v19 = sub_1000C532C((uint64_t *)&aBlock);
  uint64_t v20 = *(void *)(v18 - 8);
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 104);
  uint64_t v80 = v20 + 104;
  uint64_t v81 = v21;
  v21((uint64_t)v19, (char *)enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v18);
  char v22 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)&aBlock);
  if (v22)
  {
    uint64_t v81 = v6;
    uint64_t v82 = (uint64_t)v9;
    type metadata accessor for OSActivity();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 24) = 0;
    *(void *)(inited + 32) = 0;
    if (qword_100340DE0 != -1) {
      swift_once();
    }
    os_activity_t v24 = _os_activity_create((void *)&_mh_execute_header, "Daemon.start", (os_activity_t)qword_100343300, OS_ACTIVITY_FLAG_DEFAULT);
    uint64_t v80 = inited;
    *(void *)(inited + 16) = v24;
    swift_beginAccess();
    long long v25 = swift_unknownObjectRetain();
    os_activity_scope_enter(v25, (os_activity_scope_state_t)(inited + 24));
    swift_endAccess();
    swift_unknownObjectRelease();
    long long v26 = *(void (**)(char *))(v13 + 16);
    uint64_t v76 = &v1[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_logger];
    v26(v15);
    OSSignposter.init(logger:)();
    static OSSignpostID.exclusive.getter();
    uint64_t v27 = OSSignposter.logHandle.getter();
    os_signpost_type_t v28 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
      uint64_t v30 = v82;
      uint64_t v31 = v85;
      v29(v82, v11, v85);
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      os_signpost_id_t v33 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, v28, v33, "st-daemon-start", "", v32, 2u);
      swift_slowDealloc();

      uint64_t v34 = v30;
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v30, v31);
      long long v35 = (char *)v81;
    }
    else
    {

      uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
      uint64_t v31 = v85;
      long long v35 = (char *)v81;
      uint64_t v34 = v82;
    }
    uint64_t v81 = v29;
    v29(v34, v11, v31);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    OSSignpostIntervalState.init(id:isOpen:)();
    Swift::String v44 = *(void (**)(char *, uint64_t))(v3 + 8);
    v44(v11, v31);
    id v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      id v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent starting as simplifiedAgent", v47, 2u);
      swift_slowDealloc();
    }

    sub_1002186CC();
    sub_100216178();
    sub_10021634C();
    sub_1002167CC();
    sub_100216B20();
    sub_100233454();
    sub_10009D124();
    sub_100216E18();
    sub_1002171B4();
    Swift::String v48 = v86;
    uint64_t v49 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v50 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      id v51 = v77;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v52 = v78;
      uint64_t v53 = v79;
      int v54 = (*(uint64_t (**)(char *, uint64_t))(v78 + 88))(v51, v79);
      uint64_t v75 = (void (*)(uint64_t, uint64_t))v44;
      if (v54 == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v68 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
        uint64_t v68 = "";
      }
      uint64_t v69 = v82;
      uint64_t v70 = v85;
      v81(v82, v35, v85);
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      os_signpost_id_t v72 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, v50, v72, "st-daemon-start", v68, v71, 2u);
      swift_slowDealloc();

      swift_release();
      unint64_t v73 = v75;
      v75((uint64_t)v35, v70);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v86, v84);
      swift_release();
      v73(v69, v70);
    }
    else
    {

      swift_release();
      v44(v35, v31);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v48, v84);
      swift_release();
    }
  }
  else
  {
    sub_1000C5860(&v1[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory], *(void *)&v1[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory + 24]);
    id v36 = sub_100210888();
    id v37 = [v36 screenTimeCapabilities];

    uint64_t v38 = (void **)v37;
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = (void *)swift_slowAlloc();
      uint64_t v86 = v1;
      *(_DWORD *)uint64_t v41 = 138412290;
      aBlock = v38;
      uint64_t v43 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v42 = v38;

      _os_log_impl((void *)&_mh_execute_header, v39, v40, "ScreenTimeAgent starting with capabilities: %@", v41, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    char v56 = v81;
    unint64_t v55 = (uint64_t (*)(uint64_t (*)(uint64_t)))v82;

    sub_100217614();
    sub_100217848();
    sub_100217D58();
    sub_100218004();
    id v57 = sub_100214168();
    id v58 = [v57 newBackgroundContext];

    id v59 = [self sharedScheduler];
    uint64_t v90 = (void *)v18;
    uint64_t v91 = v55;
    uint64_t v60 = sub_1000C532C((uint64_t *)&aBlock);
    v56((uint64_t)v60, (char *)enum case for ScreenTimeFeatureFlags.legacyUsageShutdown(_:), v18);
    char v61 = isFeatureEnabled(_:)();
    sub_1000A4F28((uint64_t)&aBlock);
    type metadata accessor for LegacyUsageShutdownScheduler.DeviceRecordProvider();
    sub_1001066FC(&aBlock);
    id v62 = [self userKnowledgeStore];
    if (v62)
    {
      uint64_t v63 = v62;
      sub_1002264FC(v58, v59, v61 & 1, (uint64_t)&aBlock, v62);

      sub_1000A4F28((uint64_t)&aBlock);
      id v64 = sub_100214890();
      uint64_t v91 = sub_10022B70C;
      uint64_t v92 = 0;
      aBlock = _NSConcreteStackBlock;
      uint64_t v88 = 1107296256;
      BOOL v89 = sub_100217508;
      uint64_t v90 = &unk_100309160;
      char v65 = _Block_copy(&aBlock);
      [v64 scheduleWithBlock:v65];
      _Block_release(v65);

      id v66 = sub_10021486C();
      uint64_t v91 = sub_10021759C;
      uint64_t v92 = 0;
      aBlock = _NSConcreteStackBlock;
      uint64_t v88 = 1107296256;
      BOOL v89 = sub_100217508;
      uint64_t v90 = &unk_100309188;
      uint64_t v67 = _Block_copy(&aBlock);
      [v66 scheduleWithBlock:v67];
      _Block_release(v67);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100216178()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = sub_1000A2E70(0xD00000000000001BLL, 0x8000000100297530, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Starting to load core data stores", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v5 = [self defaultCenter];
  if (qword_100340D90 != -1) {
    swift_once();
  }
  objc_msgSend(v5, "addObserver:selector:name:object:", v1, "containerEventChanged:", NSPersistentCloudKitContainerEventChangedNotification, qword_10034B310, v6);
}

void sub_10021634C()
{
  uint64_t v32 = *(void *)&v0[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamNotifyd + 8];
  sub_1000A0760(0, (unint64_t *)&qword_100340F00);
  uint64_t v1 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v33 = v2[8];
  __chkstk_darwin(v1);
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v28 = v4;
  unsigned int v35 = enum case for DispatchQoS.QoSClass.background(_:);
  id v5 = (void (*)(void))v2[13];
  uint64_t v30 = v2 + 13;
  uint64_t v31 = (void (*)(char *, void, uint64_t))v5;
  v5((char *)v27 - v4);
  uint64_t v6 = static OS_dispatch_queue.global(qos:)();
  uint64_t v34 = (void (*)(char *, uint64_t))v2[1];
  v34((char *)v27 - v4, v1);
  v27[1] = v2 + 1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v0;
  os_log_type_t v40 = sub_10022B210;
  uint64_t v41 = v7;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v29 = &v38;
  uint64_t v38 = sub_10021A8B8;
  uint64_t v39 = &unk_1003092A0;
  uint64_t v8 = _Block_copy(&aBlock);
  int64_t v9 = v0;
  swift_release();
  uint64_t v10 = String.utf8CString.getter();
  xpc_set_event_stream_handler((const char *)(v10 + 32), v6, v8);
  swift_release();
  _Block_release(v8);

  uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamAlarm + 8];
  uint64_t v32 = *(void *)&v9[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamAlarm];
  v27[0] = v11;
  __chkstk_darwin(v12);
  uint64_t v13 = (char *)v27 - v4;
  uint64_t v14 = v31;
  v31((char *)v27 - v4, v35, v1);
  objc_super v15 = static OS_dispatch_queue.global(qos:)();
  v34(v13, v1);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v9;
  os_log_type_t v40 = sub_10022B218;
  uint64_t v41 = v16;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_10021A8B8;
  uint64_t v39 = &unk_1003092F0;
  uint64_t v17 = _Block_copy(&aBlock);
  uint64_t v18 = v9;
  swift_release();
  uint64_t v19 = String.utf8CString.getter();
  xpc_set_event_stream_handler((const char *)(v19 + 32), v15, v17);
  swift_release();
  _Block_release(v17);

  __chkstk_darwin(v20);
  uint64_t v21 = (char *)v27 - v28;
  v14((char *)v27 - v28, v35, v1);
  char v22 = static OS_dispatch_queue.global(qos:)();
  v34(v21, v1);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v18;
  os_log_type_t v40 = sub_10022B254;
  uint64_t v41 = v23;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_10021A8B8;
  uint64_t v39 = &unk_100309340;
  os_activity_t v24 = _Block_copy(&aBlock);
  long long v25 = v18;
  swift_release();
  uint64_t v26 = String.utf8CString.getter();
  xpc_set_event_stream_handler((const char *)(v26 + 32), v22, v24);
  swift_release();
  _Block_release(v24);
}

void sub_1002167CC()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    sub_1000A2E70(0xD00000000000001ALL, 0x80000001002972E0, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "%s called", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v3 = sub_1002148B4();
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = sub_10022B098;
  uint64_t v17 = v4;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_100217508;
  objc_super v15 = &unk_1003091D8;
  id v5 = _Block_copy(&aBlock);
  swift_release();
  [v3 scheduleWithBlock:v5];
  _Block_release(v5);

  id v6 = sub_100214890();
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = sub_10022B0D4;
  uint64_t v17 = v7;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_100217508;
  objc_super v15 = &unk_100309200;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_release();
  [v6 scheduleWithBlock:v8];
  _Block_release(v8);

  id v9 = sub_10021486C();
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = sub_10022B0DC;
  uint64_t v17 = v10;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_100217508;
  objc_super v15 = &unk_100309228;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_release();
  [v9 scheduleWithBlock:v11];
  _Block_release(v11);
}

void sub_100216B20()
{
  uint64_t v1 = v0;
  uint64_t v2 = static STUserNotifications.notificationCentersByBundle.getter();
  uint64_t v3 = v2;
  int64_t v4 = 0;
  uint64_t v24 = v2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 64);
  int64_t v25 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v23 = v2;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v26 = v4;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }
    if (v10 >= v25) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v24 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v25) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v24 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v25) {
          goto LABEL_24;
        }
        unint64_t v11 = *(void *)(v24 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v11 - 1) & v11;
    int64_t v26 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_22:
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v17 = *(void **)(*(void *)(v3 + 56) + 8 * v9);
    swift_bridgeObjectRetain_n();
    id v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = v1;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v22 + 4) = sub_1000A2E70(v16, v15, &v27);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "UNUserNotificationCenterDelegate hooking up %s", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v21;
      uint64_t v3 = v23;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    int64_t v4 = v26;
    [v18 setDelegate:v1];
    [v18 setWantsNotificationResponsesDelivered];
  }
  uint64_t v13 = v4 + 4;
  if (v4 + 4 < v25)
  {
    unint64_t v11 = *(void *)(v24 + 8 * v13);
    if (!v11)
    {
      while (1)
      {
        int64_t v12 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_28;
        }
        if (v12 >= v25) {
          goto LABEL_24;
        }
        unint64_t v11 = *(void *)(v24 + 8 * v12);
        ++v13;
        if (v11) {
          goto LABEL_21;
        }
      }
    }
    int64_t v12 = v4 + 4;
    goto LABEL_21;
  }
LABEL_24:
  swift_release();
}

void sub_100216E18()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)int64_t v4 = 136315138;
    sub_1000A2E70(0xD000000000000013, 0x80000001002972C0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s called", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v5 = sub_1002146F0();
  [v5 setDelegate:v1];

  id v6 = sub_1002146F0();
  [v6 activate];

  id v7 = sub_100214704();
  [v7 setDelegate:v1];

  id v8 = sub_100214704();
  [v8 activate];

  id v9 = sub_100214718();
  [v9 setDelegate:v1];

  id v10 = sub_100214718();
  [v10 activate];

  id v11 = sub_10021472C();
  [v11 setDelegate:v1];

  id v12 = sub_10021472C();
  [v12 activate];

  id v13 = sub_100214990();
  [v13 setDelegate:v1];

  id v14 = sub_100214990();
  [v14 resume];

  id v15 = sub_100214754();
  [v15 setDelegate:v1];

  id v16 = sub_100214754();
  [v16 activate];

  id v17 = sub_100214768();
  [v17 setDelegate:v1];

  id v18 = sub_100214768();
  [v18 activate];

  id v19 = sub_1002147A4();
  [v19 setDelegate:v1];

  id v20 = sub_1002147A4();
  [v20 activate];

  id v21 = sub_10021477C();
  [v21 setDelegate:v1];

  id v22 = sub_10021477C();
  [v22 activate];

  id v23 = sub_100214790();
  [v23 setDelegate:v1];

  id v24 = sub_100214790();
  [v24 activate];

  if (os_variant_has_internal_content())
  {
    id v25 = sub_100214740();
    [v25 setDelegate:v1];

    id v26 = sub_100214740();
    [v26 resume];
  }
}

void sub_1002171B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  uint64_t v20 = v1;
  if (os_log_type_enabled(v2, v3))
  {
    int64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)int64_t v4 = 136315138;
    uint64_t v21 = sub_1000A2E70(0xD000000000000017, 0x80000001002972A0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s called", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_100340DE8 != -1) {
    swift_once();
  }
  id v17 = (id)qword_10034B360;
  sub_1000A0760(0, (unint64_t *)&qword_100340F00);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  id v6 = *(void **)(v5 - 8);
  uint64_t v7 = v6[8];
  __chkstk_darwin(v5);
  unint64_t v19 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v8 = (char *)&v17 - v19;
  id v9 = (void (*)(char *))v6[13];
  unsigned int v18 = enum case for DispatchQoS.QoSClass.default(_:);
  v9((char *)&v17 - v19);
  id v10 = (void *)static OS_dispatch_queue.global(qos:)();
  id v11 = (void (*)(char *, uint64_t))v6[1];
  v11(v8, v5);
  uint64_t v12 = v20;
  [v17 addDelegate:v20 queue:v10];

  if (qword_100340DF0 != -1) {
    uint64_t v13 = swift_once();
  }
  id v14 = (void *)qword_10034B368;
  __chkstk_darwin(v13);
  id v15 = (char *)&v17 - v19;
  ((void (*)(char *, void, uint64_t))v9)((char *)&v17 - v19, v18, v5);
  id v16 = (void *)static OS_dispatch_queue.global(qos:)();
  v11(v15, v5);
  [v14 addDelegate:v12 queue:v16];
}

uint64_t sub_100217508(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  os_log_type_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_10022B584, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_10021759C(uint64_t (*a1)(uint64_t))
{
  return a1(1);
}

void sub_100217614()
{
  uint64_t v1 = v0;
  int out_token = 0;
  sub_1000A0760(0, (unint64_t *)&qword_100340F00);
  uint64_t v2 = static OS_dispatch_queue.main.getter();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  v6[4] = sub_10022B058;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  void v6[2] = sub_1002177F4;
  v6[3] = &unk_100309138;
  uint64_t v4 = _Block_copy(v6);
  id v5 = v1;
  swift_release();
  notify_register_dispatch("com.apple.language.changed", &out_token, v2, v4);
  _Block_release(v4);
}

uint64_t sub_100217748()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Language changed, going to exit soon.", v2, 2u);
    swift_slowDealloc();
  }

  return xpc_transaction_exit_clean();
}

uint64_t sub_1002177F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void sub_100217848()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)STDowngradeMigrator) init];
  unsigned __int8 v3 = sub_1000CEED8();
  if (v3)
  {
    uint64_t v4 = type metadata accessor for ScreenTimeFeatureFlags();
    v17[3] = v4;
    v17[4] = sub_10022A498(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
    id v5 = sub_1000C532C(v17);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v4);
    LOBYTE(v4) = isFeatureEnabled(_:)();
    sub_1000A4F28((uint64_t)v17);
    if ((v4 & 1) == 0)
    {
      sub_1000CE6BC();
      sub_1000CC6B0();
      sub_1000CCB28();
    }
    id v6 = sub_100214168();
    [v6 resume];

    id v7 = sub_100214168();
    id v8 = [v7 viewContext];
    sub_1000CCE0C();
  }
  else
  {
    id v9 = sub_100214168();
    [v9 resume];
  }
  id v10 = sub_100214228();
  [v10 resume];

  if (v3)
  {
    id v11 = sub_100214228();
    id v12 = [v11 requestManager];

    sub_1000CE964(v12);
    id v13 = sub_100214990();
    [v13 setDelegate:v1];

    id v14 = sub_100214990();
    [v14 resume];

    sub_1000CEB6C();
  }
  else
  {
    id v15 = sub_100214990();
    [v15 setDelegate:v1];

    id v16 = sub_100214990();
    [v16 resume];
  }
}

void sub_100217D58()
{
  uint64_t v1 = v0;
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "XPC services resuming", v4, 2u);
    swift_slowDealloc();
  }

  id v5 = sub_100214620();
  id v6 = [v5 providePublicAgentService];

  id v7 = (void *)(v1 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory);
  sub_1000C5860((void *)(v1 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory), *(void *)(v1 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory + 24));
  id v8 = sub_100210E78();
  [v6 setDelegate:v8];
  swift_unknownObjectRelease();

  id v9 = sub_100214620();
  id v10 = [v9 providePrivateAgentService];

  sub_1000C5860(v7, v7[3]);
  id v11 = sub_100210E78();
  [v10 setDelegate:v11];
  swift_unknownObjectRelease();

  id v12 = sub_100214248();
  sub_10021425C();
  id v14 = v13;
  [v12 setDelegate:v13];

  id v15 = sub_100214248();
  [v15 resume];

  id v16 = sub_100214488();
  id v17 = sub_10021449C();
  [v16 setDelegate:v17];

  id v18 = sub_100214488();
  [v18 resume];

  id v19 = sub_1002145AC();
  [v19 resume];

  id v20 = sub_1002143A8();
  id v21 = sub_1002143BC();
  [v20 setDelegate:v21];

  id v22 = sub_1002143A8();
  [v22 resume];

  id v23 = sub_100214188();
  [v23 resume];

  id v24 = sub_1002144CC();
  [v24 startSendingEvents];
}

uint64_t sub_100218004()
{
  id v1 = sub_1002145C0();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  aBlock[4] = sub_10022AF98;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100213F7C;
  aBlock[3] = &unk_100309048;
  os_log_type_t v3 = _Block_copy(aBlock);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = _swiftEmptyArrayStorage;
  sub_10022AFA0();
  sub_10009EE78(&qword_100344C80);
  sub_10022AFEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v3);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

void sub_10021826C(void *a1)
{
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Bootstrapping reactor", v4, 2u);
    swift_slowDealloc();
  }

  id v21 = self;
  id v5 = sub_100214168();
  id v6 = [v5 persistentContainer];

  id v7 = sub_100214620();
  id v8 = sub_100214228();
  id v9 = [v8 adapter];

  id v10 = sub_100214308();
  id v11 = sub_100214388();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  id v26 = sub_10022B048;
  uint64_t v27 = v12;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  id v24 = sub_100213F7C;
  id v25 = &unk_100309098;
  id v13 = _Block_copy(&aBlock);
  id v14 = a1;
  swift_release();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  id v26 = sub_10022B050;
  uint64_t v27 = v15;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  id v24 = sub_100213F7C;
  id v25 = &unk_1003090E8;
  id v16 = _Block_copy(&aBlock);
  id v17 = v14;
  swift_release();
  id v18 = [v21 bootstrappedReactorWithPersistentContainer:v6 xpcServiceProvider:v7 organizationControllerConfigurationAdapter:v9 askForTimeEventRelay:v10 askForTimeResponseHandler:v11 reactorWillShutdown:v13 reactorDidShutdown:v16];
  _Block_release(v16);
  _Block_release(v13);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v19 = (void *)qword_10034B378;
  qword_10034B378 = (uint64_t)v18;

  id v20 = sub_100214620();
  [v20 resume];
}

void sub_100218550()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Reactor will shutdown.", v2, 2u);
    swift_slowDealloc();
  }

  id v3 = sub_100214620();
  [v3 suspend];
}

uint64_t sub_100218624()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Reactor did shutdown. Restarting.", v2, 2u);
    swift_slowDealloc();
  }

  return sub_100218004();
}

void sub_1002186CC()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v0);
  id v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self persistentStoreDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v5 = [self defaultManager];
  URL._bridgeToObjectiveC()(v6);
  id v8 = v7;
  id v30 = 0;
  unsigned int v9 = [v5 createDirectoryAtURL:v7 withIntermediateDirectories:1 attributes:0 error:&v30];

  if (v9)
  {
    id v10 = v30;
    URL.path(percentEncoded:)(0);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v11 = rootless_check_datavault_flag();
    uint64_t v12 = swift_release();
    if (!v11)
    {
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
LABEL_9:

      return;
    }
    __chkstk_darwin(v12);
    id v13 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v13, v3, v0);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v28 = v1;
      id v17 = (uint8_t *)v16;
      id v18 = (void *)swift_slowAlloc();
      id v27 = v5;
      id v30 = v18;
      *(_DWORD *)id v17 = 136315138;
      uint64_t v26 = v0;
      Swift::String v19 = URL.path(percentEncoded:)(0);
      uint64_t v29 = sub_1000A2E70(v19._countAndFlagsBits, (unint64_t)v19._object, (uint64_t *)&v30);
      uint64_t v0 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v20 = *(void (**)(char *, uint64_t))(v28 + 8);
      v20(v13, v0);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Creating datavault at: %s", v17, 0xCu);
      swift_arrayDestroy();
      id v5 = v27;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v20 = *(void (**)(char *, uint64_t))(v1 + 8);
      v20(v13, v0);
    }
    URL.path(percentEncoded:)(0);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v21 = rootless_convert_to_datavault();
    swift_release();
    if (!v21)
    {
      v20(v3, v0);
      goto LABEL_9;
    }
    id v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    id v30 = (id)0xD000000000000025;
    unint64_t v31 = 0x8000000100297230;
    LODWORD(v29) = errno.getter();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v22 = v30;
    uint64_t v23 = _convertNSErrorToError(_:)();

    swift_willThrow();
    id v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    v24._uint64_t countAndFlagsBits = 0xD000000000000027;
    v24._object = (void *)0x80000001002971E0;
    String.append(_:)(v24);
    uint64_t v29 = v23;
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    _print_unlocked<A, B>(_:_:)();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100218C20()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100218D18(uint64_t a1, unint64_t a2, xpc_object_t xdict)
{
  if (xpc_dictionary_get_string(xdict, _xpc_event_key_name))
  {
    uint64_t v5 = String.init(cString:)();
    unint64_t v7 = v6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315650;
      sub_1000A2E70(0xD00000000000001FLL, 0x8000000100297470, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1000A2E70(a1, a2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_1000A2E70(v5, v7, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - stream: '%s'; event-name: '%s'", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    int v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      sub_1000A2E70(0xD00000000000001FLL, 0x8000000100297470, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1000A2E70(a1, a2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - stream: '%s' unable to get event-name", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    return 0;
  }
  return v5;
}

void sub_1002190CC(void *a1, char *a2)
{
  uint64_t v4 = sub_10009EE78(&qword_100340F10);
  __chkstk_darwin(v4 - 8);
  Swift::String v48 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100218D18(*(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamNotifyd], *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamNotifyd + 8], a1);
  unint64_t v8 = v7;
  os_log_type_t v9 = &a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_logger];
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v49 = v6;
  if (v12)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    id v47 = v9;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v51 = v14;
    if (v8) {
      uint64_t v15 = v6;
    }
    else {
      uint64_t v15 = 0x6E776F6E6B6E75;
    }
    if (v8) {
      unint64_t v16 = v8;
    }
    else {
      unint64_t v16 = 0xE700000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1000A2E70(v15, v16, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting Notifyd Stream handler for %s", v13, 0xCu);
    swift_arrayDestroy();
    os_log_type_t v9 = v47;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v8)
  {
    uint64_t v19 = v49;
    if (v17 == v49 && v8 == v18)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v26 = type metadata accessor for TaskPriority();
      uint64_t v27 = (uint64_t)v48;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v48, 1, 1, v26);
      uint64_t v28 = (void *)swift_allocObject();
      _OWORD v28[2] = 0;
      v28[3] = 0;
      v28[4] = a2;
      uint64_t v29 = a2;
      id v30 = &unk_1003461E8;
LABEL_27:
      sub_1000A27A0(v27, (uint64_t)v30, (uint64_t)v28);
      swift_release();
      goto LABEL_38;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_23;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = v49;
  }
  NSString v22 = String._bridgeToObjectiveC()();
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v8)
  {
    if (v23 == v19 && v8 == v25)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v32 = type metadata accessor for TaskPriority();
      uint64_t v27 = (uint64_t)v48;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v48, 1, 1, v32);
      uint64_t v28 = (void *)swift_allocObject();
      _OWORD v28[2] = 0;
      v28[3] = 0;
      v28[4] = a2;
      uint64_t v33 = a2;
      id v30 = &unk_1003461D8;
      goto LABEL_27;
    }
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_26;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)id v36 = 136315138;
    uint64_t v51 = v37;
    if (v8) {
      uint64_t v38 = v49;
    }
    else {
      uint64_t v38 = 0x6E776F6E6B6E75;
    }
    id v47 = v9;
    if (v8) {
      unint64_t v39 = v8;
    }
    else {
      unint64_t v39 = 0xE700000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1000A2E70(v38, v39, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unhandled Notifyd stream: %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

LABEL_38:
  swift_bridgeObjectRetain();
  os_log_type_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v51 = v43;
    if (v8) {
      uint64_t v44 = v49;
    }
    else {
      uint64_t v44 = 0x6E776F6E6B6E75;
    }
    if (v8) {
      unint64_t v45 = v8;
    }
    else {
      unint64_t v45 = 0xE700000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1000A2E70(v44, v45, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Ending Notifyd Stream handler for %s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100219768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  type metadata accessor for Logger();
  *(void *)(v4 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_1002197F8, 0, 0);
}

uint64_t sub_1002197F8()
{
  id v1 = *(id *)(v0 + 32);
  Logger.init(subsystem:category:)();
  unint64_t v7 = (char *)&dword_100343528 + dword_100343528;
  id v2 = v1;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *id v3 = v0;
  v3[1] = sub_100219910;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  return ((uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))v7)("Family Update Handler", 21, 2, v4, 1, 0, v5);
}

uint64_t sub_100219910()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100219A54, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100219A54()
{
  uint64_t v9 = v0;

  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v0 + 16) = sub_1000A2E70(0xD00000000000001DLL, 0x8000000100297390, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2112;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in %s: %@", (uint8_t *)v3, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100219CAC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_100219CCC, 0, 0);
}

uint64_t sub_100219CCC()
{
  *(void *)(v0 + 24) = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_logger;
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Handling family change notification", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = (uint64_t (__cdecl *)())((char *)&dword_100345A50 + dword_100345A50);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100219DF4;
  return v6();
}

uint64_t sub_100219DF4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[5] = a1;
  v3[6] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_100219F28, 0, 0);
  }
}

uint64_t sub_100219F28()
{
  if (qword_100340DB0 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10034B338;
  *(void *)(v0 + 56) = qword_10034B338;
  swift_retain();
  return _swift_task_switch(sub_100219FD0, v1, 0);
}

uint64_t sub_100219FD0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1000F2650(*(uint64_t **)(v0 + 40));
  *(void *)(v0 + 64) = v1;
  swift_release();
  if (v1) {
    os_log_type_t v2 = sub_10021A144;
  }
  else {
    os_log_type_t v2 = sub_10021A064;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10021A064()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done handling family change notification", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void **)(v0 + 40);

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10021A144()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10021A1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  type metadata accessor for Logger();
  *(void *)(v4 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_10021A238, 0, 0);
}

uint64_t sub_10021A238()
{
  uint64_t v1 = *(void *)(v0 + 40);
  id v2 = *(id *)(v0 + 32);
  Logger.init(subsystem:category:)();
  sub_100124240("Device name changed notification", 32, 2, v1, 1, 0, v2);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_10021A4FC()
{
  uint64_t v1 = type metadata accessor for DataStore.DeviceDetails(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Handling device name changed notification", v6, 2u);
    swift_slowDealloc();
  }

  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v8 = (void *)swift_allocObject();
  v8[3] = 0;
  v8[4] = 0;
  uint64_t v9 = (char *)v8 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  if (byte_10034B308 == 1)
  {
    uint64_t v8[2] = v7;
    id v11 = v7;
    id v12 = sub_1001D7640();
    __chkstk_darwin(v12);
    *(&v22 - 3) = 0;
    id v20 = 0;
    *(&v22 - 4) = (uint64_t)v8;
    LOBYTE(v21) = 2;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v0)
    {
      swift_release();
    }
    else
    {

      id v13 = (id)STGetDeviceName();
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      uint64_t v17 = (uint64_t *)&v3[*(int *)(v1 + 36)];
      swift_bridgeObjectRelease();
      *uint64_t v17 = v14;
      v17[1] = v16;
      id v18 = sub_1001D7640();
      __chkstk_darwin(v18);
      *(&v22 - 5) = 0;
      *(&v22 - 4) = 0;
      *(&v22 - 6) = (uint64_t)v8;
      *((unsigned char *)&v22 - 24) = 2;
      id v20 = v3;
      NSManagedObjectContext.performAndWait<A>(_:)();

      id v19 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();
      swift_release();

      sub_10022B4EC((uint64_t)v3, type metadata accessor for DataStore.DeviceDetails);
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_10021A8B8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_10021A918(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v2 = sub_100218D18(*(void *)(a1 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamAlarm), *(void *)(a1 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamAlarm + 8), xdict);
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    if (v4) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = 0x6E776F6E6B6E75;
    }
    if (v4) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = 0xE700000000000000;
    }
    swift_bridgeObjectRetain();
    sub_1000A2E70(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting Stream handler for %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10021AAD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, char *, uint64_t, void, id, uint64_t))
{
  uint64_t v10 = type metadata accessor for Logger();
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = a2;
  swift_unknownObjectRetain();
  Logger.init(subsystem:category:)();
  return a5(a3, a4, 2, v12, 1, 0, v13, a1);
}

void sub_10021ADB4(char *a1, void *a2)
{
  uint64_t v5 = sub_10009EE78(&qword_100340F10);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100218D18(*(void *)&a1[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamDistnoted], *(void *)&a1[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamDistnoted + 8], a2);
  unint64_t v10 = v9;
  uint64_t v11 = &a1[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_logger];
  swift_bridgeObjectRetain_n();
  uint64_t v33 = v11;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v34 = v8;
  if (v14)
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v32 = v2;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    if (v10) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = 0x6E776F6E6B6E75;
    }
    char v31 = a1;
    if (v10) {
      unint64_t v18 = v10;
    }
    else {
      unint64_t v18 = 0xE700000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000A2E70(v17, v18, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a1 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting Stream handler for %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v10) {
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease_n();

    if (!v10) {
      return;
    }
  }
  uint64_t v19 = v34;
  if (v34 == 0xD00000000000003ALL && v10 == 0x8000000100297430
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v19 == 0xD00000000000003FLL && v10 == 0x80000001002973F0
    || ((char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), v19 == 0xD00000000000003ALL)
      ? (BOOL v21 = v10 == 0x80000001002973B0)
      : (BOOL v21 = 0),
        !v21 ? (char v22 = 0) : (char v22 = 1),
        (v20 & 1) != 0 || (v22 & 1) != 0))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      return;
    }
  }
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Handling usage deletion distributed notification", v26, 2u);
    swift_slowDealloc();
  }

  uint64_t v27 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v7, 1, 1, v27);
  uint64_t v28 = (void *)swift_allocObject();
  _OWORD v28[2] = 0;
  v28[3] = 0;
  v28[4] = a1;
  uint64_t v29 = a1;
  sub_100213BA4((uint64_t)v7, (uint64_t)&unk_1003461C8, (uint64_t)v28);
  swift_release();
}

uint64_t sub_10021B1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10021B1EC, 0, 0);
}

uint64_t sub_10021B1EC()
{
  if (qword_100340D50 != -1) {
    swift_once();
  }
  *(void *)(v0 + 24) = qword_10034B2A0;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10021B2C0;
  return sub_1000B22C0();
}

uint64_t sub_10021B2C0()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10021B4BC;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10021B3DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10021B3DC()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done handling usage deletion distributed notification", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10021B4BC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10021B520(uint64_t a1, const char *a2)
{
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a2, v4, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10021B634(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning Analytics handler", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Ending Analytics handler", v8, 2u);
    swift_slowDealloc();
  }

  return a2(1);
}

void sub_10021B76C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v8 = Strong;
    swift_retain();
    Logger.init(subsystem:category:)();
    swift_retain();
    sub_100126CF8("App Collection Handler", 22, 2, (uint64_t)v6, 1, 0, v8, a1, a2);
    swift_release();
  }
  else
  {
    ((void (*)(uint64_t))a1)(1);
  }
}

void sub_10021BA9C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning App Collection handler", v6, 2u);
    swift_slowDealloc();
  }

  sub_1002268BC();
  if (!v2)
  {
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ending App Collection handler", v9, 2u);
      swift_slowDealloc();
    }

    a2(1);
  }
}

void sub_10021BBE4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, char *, uint64_t, void, id, void (*)(uint64_t), uint64_t))
{
  uint64_t v11 = type metadata accessor for Logger();
  __chkstk_darwin(v11 - 8);
  os_log_type_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v15 = Strong;
    swift_retain();
    Logger.init(subsystem:category:)();
    swift_retain();
    a6(a4, a5, 2, v13, 1, 0, v15, a1, a2);
    swift_release();
  }
  else
  {
    a1(1);
  }
}

void sub_10021BF20(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning Cleanup handler", v6, 2u);
    swift_slowDealloc();
  }

  sub_10021C088();
  if (v2)
  {
  }
  else
  {
    os_log_type_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ending Cleanup handler", v10, 2u);
      swift_slowDealloc();
    }

    a2(1);
  }
}

void sub_10021C088()
{
  uint64_t v1 = sub_10009EE78(&qword_100340F10);
  __chkstk_darwin(v1 - 8);
  os_log_type_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting routine database maintainance", v6, 2u);
    swift_slowDealloc();
  }

  if (qword_100340D90 != -1) {
    swift_once();
  }
  os_log_type_t v7 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  os_log_type_t v8 = (id *)swift_allocObject();
  v8[3] = 0;
  v8[4] = 0;
  os_log_type_t v9 = (char *)v8 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  if (byte_10034B308 == 1)
  {
    uint64_t v8[2] = v7;
    id v11 = v7;
    id v12 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v0)
    {
      swift_release();
    }
    else
    {

      id v13 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();

      BOOL v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Completed routine database maintainance", v16, 2u);
        swift_slowDealloc();
      }

      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting purging of old transaction history", v19, 2u);
        swift_slowDealloc();
      }

      char v20 = sub_1001D7910();
      sub_1000D34C4();

      BOOL v21 = sub_1001D7904();
      sub_1000D34C4();

      id v22 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();

      char v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Completed purging of old transaction history", v25, 2u);
        swift_slowDealloc();
      }

      uint64_t v26 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v3, 1, 1, v26);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = 0;
      *(void *)(v27 + 24) = 0;
      sub_100213BA4((uint64_t)v3, (uint64_t)&unk_1003461B8, v27);
      swift_release();
      swift_setDeallocating();

      sub_1000A4FD8((uint64_t)v8 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
      swift_deallocClassInstance();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_10021C5F4()
{
  return _swift_task_switch(sub_10021C610, 0, 0);
}

uint64_t sub_10021C610()
{
  if (qword_100340DB0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = qword_10034B338;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10021C6E4;
  return sub_1000EF8B8();
}

uint64_t sub_10021C6E4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10021C820, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10021C820()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10021C884(void *a1, uint64_t a2, void *a3, uint64_t a4, NSObject *a5, char a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (a1)
  {
    if (a3)
    {
      if (a5)
      {
        uint64_t v14 = a2 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_logger;
        id v15 = a3;
        swift_bridgeObjectRetain();
        id v16 = a1;
        uint64_t v17 = v16;
        if (a6)
        {
          id v18 = v16;
          swift_bridgeObjectRetain();
          id v19 = v18;
          char v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = swift_slowAlloc();
            uint64_t v45 = swift_slowAlloc();
            *(_DWORD *)uint64_t v22 = 136315394;
            swift_bridgeObjectRetain();
            sub_1000A2E70(a4, (unint64_t)a5, &v45);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v22 + 12) = 2080;
            sub_1000A0760(0, &qword_100342A78);
            if (qword_100340DE8 != -1) {
              swift_once();
            }
            id v23 = (id)qword_10034B360;
            char v24 = static NSObject.== infix(_:_:)();

            if (v24) {
              uint64_t v25 = 12662;
            }
            else {
              uint64_t v25 = 12918;
            }
            sub_1000A2E70(v25, 0xE200000000000000, &v45);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "Message %s was sent! (service: %s", (uint8_t *)v22, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          if (qword_100340D90 != -1) {
            swift_once();
          }
          uint64_t v38 = (void *)qword_10034B310;
          type metadata accessor for DataStore(0);
          unint64_t v39 = (id *)swift_allocObject();
          v39[3] = 0;
          v39[4] = 0;
          os_log_type_t v40 = (char *)v39 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
          uint64_t v41 = type metadata accessor for Logger();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
          if (byte_10034B308 == 1)
          {
            v39[2] = v38;
            id v42 = v38;
            id v43 = sub_1001D7640();
            __chkstk_darwin(v43);
            NSManagedObjectContext.performAndWait<A>(_:)();
            if (v8)
            {

              swift_release();
            }
            else
            {

              id v44 = sub_1001D7640();
              NSManagedObjectContext.performAndWait<A>(_:)();

              swift_setDeallocating();
              sub_1000A4FD8((uint64_t)v39 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
              swift_deallocClassInstance();
            }
          }
          else
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
        }
        else
        {
          sub_10010D560(a4, a5, (uint64_t)v16, v14, a7);
          if (v7)
          {

            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
      else
      {
        id v33 = a3;
        id v34 = a1;
        uint64_t v35 = Logger.logObject.getter();
        uint64_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, (os_log_type_t)v36))
        {
          uint64_t v37 = swift_slowAlloc();
          uint64_t v45 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 136315394;
          sub_1000A2E70(0xD00000000000003FLL, 0x8000000100297140, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v37 + 12) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v36, "%s %ld: context cannot be nil", (uint8_t *)v37, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
      }
    }
    else
    {
      id v29 = a1;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315394;
        sub_1000A2E70(0xD00000000000003FLL, 0x8000000100297140, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s %ld: account cannot be nil", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
  }
  else
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      sub_1000A2E70(0xD00000000000003FLL, 0x8000000100297140, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s %ld: service cannot be nil", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10021D324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 72) = v12;
  *(_OWORD *)(v8 + 56) = v11;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  type metadata accessor for Logger();
  *(void *)(v8 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_10021D3D0, 0, 0);
}

void sub_10021D3D0()
{
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 16);
  id v6 = *(id *)(v0 + 32);
  id v7 = v5;
  id v8 = v4;
  sub_1000FD884(v3, v2);
  id v9 = v1;
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  id v10 = v7;
  id v11 = v8;
  id v12 = v6;
  sub_1000FD884(v3, v2);
  id v15 = (char *)&dword_1003434E0 + dword_1003434E0;
  swift_bridgeObjectRetain();
  id v13 = v9;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10021D574;
  __asm { BR              X8 }
}

uint64_t sub_10021D574()
{
  unint64_t v2 = *(void **)(*v1 + 72);
  unint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_1000FD918(v4, v3);
  if (v0)
  {

    return _swift_task_switch(sub_10021D784, 0, 0);
  }
  else
  {
    id v6 = *(void **)(v5 + 72);
    uint64_t v8 = *(void *)(v5 + 40);
    unint64_t v7 = *(void *)(v5 + 48);
    id v10 = *(void **)(v5 + 24);
    id v9 = *(void **)(v5 + 32);

    sub_1000FD918(v8, v7);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    id v11 = *(uint64_t (**)(void))(v5 + 8);
    return v11();
  }
}

uint64_t sub_10021D784()
{
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v5 = *(void **)(v0 + 24);
  uint64_t v4 = *(void **)(v0 + 32);

  sub_1000FD918(v3, v2);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10021D838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[27] = a8;
  v8[28] = v10;
  v8[25] = a6;
  v8[26] = a7;
  v8[23] = a4;
  v8[24] = a5;
  v8[21] = a2;
  v8[22] = a3;
  return _swift_task_switch(sub_10021D86C, 0, 0);
}

uint64_t sub_10021D86C()
{
  uint64_t v103 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received message from family", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[22];

  if (!v4)
  {
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, (os_log_type_t)v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      v0[2] = sub_1000A2E70(0xD00000000000002FLL, 0x80000001002970E0, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2048;
      v0[3] = 801;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v14, "%s %ld: service cannot be nil", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_31;
  }
  id v6 = (void *)v0[22];
  uint64_t v5 = (void *)v0[23];
  if (!v5)
  {
    id v16 = v6;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      v0[4] = sub_1000A2E70(0xD00000000000002FLL, 0x80000001002970E0, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2048;
      v0[5] = 805;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v17, "%s %ld: account cannot be nil", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    goto LABEL_31;
  }
  unint64_t v7 = v0[25];
  if (v7 >> 60 == 15)
  {
    id v8 = v6;
    id v9 = v5;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v102 = v13;
      v0[6] = sub_1000A2E70(0xD00000000000002FLL, 0x80000001002970E0, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2048;
      v0[7] = 809;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s %ld: data cannot be nil", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_31;
  }
  if (!v0[27])
  {
    uint64_t v35 = v0[24];
    id v36 = v6;
    id v37 = v5;
    sub_1000FD884(v35, v7);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    BOOL v39 = os_log_type_enabled(v10, v38);
    uint64_t v41 = v0[24];
    unint64_t v40 = v0[25];
    if (v39)
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315394;
      v0[8] = sub_1000A2E70(0xD00000000000002FLL, 0x80000001002970E0, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2048;
      v0[9] = 813;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v38, "%s %ld: fromID cannot be nil", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v43 = v41;
      unint64_t v44 = v40;
LABEL_30:
      sub_1000FD918(v43, v44);
LABEL_31:

      goto LABEL_32;
    }
    goto LABEL_28;
  }
  id v19 = (void *)v0[28];
  uint64_t v20 = v0[24];
  if (!v19)
  {
    id v36 = v6;
    id v37 = v5;
    sub_1000FD884(v20, v7);
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v45 = static os_log_type_t.error.getter();
    BOOL v46 = os_log_type_enabled(v10, (os_log_type_t)v45);
    uint64_t v41 = v0[24];
    unint64_t v40 = v0[25];
    if (v46)
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315394;
      v0[10] = sub_1000A2E70(0xD00000000000002FLL, 0x80000001002970E0, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2048;
      v0[11] = 817;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v45, "%s %ld: context cannot be nil", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_29:
      uint64_t v43 = v41;
      unint64_t v44 = v40;
      goto LABEL_30;
    }
LABEL_28:

    goto LABEL_29;
  }
  unint64_t v21 = v0[27];
  sub_1000A0760(0, &qword_100342A78);
  id v22 = v6;
  id v23 = v5;
  sub_1000FD884(v20, v7);
  uint64_t v24 = qword_100340DE8;
  id v25 = v19;
  if (v24 != -1) {
    swift_once();
  }
  id v26 = (id)qword_10034B360;
  char v27 = static NSObject.== infix(_:_:)();

  if (v27)
  {
    if (qword_100340DB0 != -1) {
      swift_once();
    }
    v0[29] = qword_10034B338;
    swift_retain();
    swift_bridgeObjectRetain();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v29 = [self destinationWithURI:v28];
    v0[30] = v29;

    id v30 = v29;
    os_log_type_t v31 = (void *)swift_task_alloc();
    v0[31] = v31;
    *os_log_type_t v31 = v0;
    v31[1] = sub_10021E91C;
    uint64_t v33 = v0[24];
    uint64_t v32 = v0[25];
    return sub_1000DC4A8(v33, v32, (uint64_t)v30);
  }
  else
  {
    if (qword_100340DF0 != -1) {
      swift_once();
    }
    id v49 = (id)qword_10034B368;
    char v50 = static NSObject.== infix(_:_:)();

    uint64_t v52 = v0[24];
    unint64_t v51 = v0[25];
    if ((v50 & 1) == 0)
    {

      sub_1000FD918(v52, v51);
      goto LABEL_32;
    }
    unint64_t v100 = v22;
    id v53 = v23;
    sub_1000FD884(v52, v51);
    id v54 = v25;
    swift_bridgeObjectRetain();
    id v101 = v53;
    sub_1000FD884(v52, v51);
    id v55 = v54;
    swift_bridgeObjectRetain();
    char v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v97 = v0[28];
      uint64_t v95 = v0[26];
      unint64_t v94 = v21;
      uint64_t v58 = v0[24];
      unint64_t v59 = v0[25];
      uint64_t v93 = v0[23];
      log = v56;
      uint64_t v60 = swift_slowAlloc();
      uint64_t v98 = (void *)swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136316418;
      v0[15] = sub_1000A2E70(0xD00000000000002FLL, 0x80000001002970E0, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2048;
      v0[16] = 828;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 22) = 2112;
      v0[17] = v101;
      id v61 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v98 = v93;

      *(_WORD *)(v60 + 32) = 2080;
      unint64_t v62 = v59;
      sub_1000B88B8(v58, v59);
      uint64_t v63 = Data.description.getter();
      unint64_t v65 = v64;
      sub_1000FD918(v58, v62);
      v0[18] = sub_1000A2E70(v63, v65, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000FD918(v58, v62);
      sub_1000FD918(v58, v62);
      *(_WORD *)(v60 + 42) = 2080;
      swift_bridgeObjectRetain();
      v0[19] = sub_1000A2E70(v95, v94, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v60 + 52) = 2112;
      v0[20] = v55;
      id v66 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v98[1] = v97;

      uint64_t v67 = v100;
      _os_log_impl((void *)&_mh_execute_header, log, v57, "[v2] %s %ld \n Incoming IDS messsage for \n account: %@ \n incomingData: %s \nfromID: %s \n context: %@", (uint8_t *)v60, 0x3Eu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v69 = v0[24];
      unint64_t v68 = v0[25];

      sub_1000FD918(v69, v68);
      sub_1000FD918(v69, v68);
      swift_bridgeObjectRelease_n();

      uint64_t v67 = v100;
    }
    id v70 = [v55 incomingResponseIdentifier];
    if (v70)
    {
      uint64_t v71 = v70;
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v74 = v73;

      swift_bridgeObjectRetain();
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.default.getter();
      BOOL v77 = os_log_type_enabled(v75, v76);
      uint64_t v79 = v0[24];
      unint64_t v78 = v0[25];
      if (v77)
      {
        unint64_t v99 = v0[25];
        uint64_t v80 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 136315650;
        v0[12] = sub_1000A2E70(0xD00000000000002FLL, 0x80000001002970E0, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v80 + 12) = 2048;
        v0[13] = 835;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v80 + 22) = 2080;
        swift_bridgeObjectRetain();
        v0[14] = sub_1000A2E70(v72, v74, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "[v2] %s %ld: Did deliver v2 message with incomingResponseIdentifier: %s", (uint8_t *)v80, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000FD918(v79, v99);
      }
      else
      {

        sub_1000FD918(v79, v78);
        swift_bridgeObjectRelease_n();
      }
LABEL_32:
      Swift::String v48 = (uint64_t (*)(void))v0[1];
      return v48();
    }
    id v81 = [v55 outgoingResponseIdentifier];
    if (!v81)
    {
      uint64_t v91 = v0[24];
      unint64_t v92 = v0[25];

      sub_1000FD918(v91, v92);
      goto LABEL_32;
    }
    uint64_t v82 = v81;
    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v85 = v84;

    v0[36] = v85;
    if (qword_100340DB0 != -1) {
      swift_once();
    }
    v0[37] = qword_10034B338;
    swift_retain();
    uint64_t v86 = (void *)swift_task_alloc();
    v0[38] = v86;
    void *v86 = v0;
    v86[1] = sub_10021EDC8;
    uint64_t v87 = v0[26];
    uint64_t v88 = v0[27];
    uint64_t v90 = v0[24];
    uint64_t v89 = v0[25];
    return sub_1000E5798(v90, v89, v87, v88, v83, v85);
  }
}

uint64_t sub_10021E91C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 240);
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();

  if (v0)
  {
    uint64_t v4 = sub_10021EF94;
    uint64_t v5 = 0;
  }
  else
  {
    unint64_t v7 = *(void **)(v2 + 224);
    uint64_t v6 = *(void *)(v2 + 232);
    uint64_t v9 = *(void *)(v2 + 192);
    unint64_t v8 = *(void *)(v2 + 200);
    uint64_t v10 = *(void **)(v2 + 184);
    id v11 = *(id *)(v2 + 176);
    id v12 = v10;
    sub_1000FD884(v9, v8);
    id v13 = v7;
    uint64_t v4 = sub_10021EA88;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10021EA88()
{
  uint64_t v1 = (void *)v0[28];
  uint64_t v3 = v0[24];
  unint64_t v2 = v0[25];
  uint64_t v5 = (void *)v0[22];
  uint64_t v4 = (void *)v0[23];
  sub_1000FD63C(v5, v4, v3, v2, v1);

  sub_1000FD918(v3, v2);
  return _swift_task_switch(sub_10021EB34, 0, 0);
}

uint64_t sub_10021EB34()
{
  if (qword_100340E00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 264) = qword_10034B370;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10021EC0C;
  return sub_10019F170(0);
}

uint64_t sub_10021EC0C()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = sub_10021F034;
  }
  else
  {
    swift_release();
    unint64_t v2 = sub_10021ED28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10021ED28()
{
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 192);
  unint64_t v2 = *(void *)(v0 + 200);
  uint64_t v5 = *(void **)(v0 + 176);
  uint64_t v4 = *(void **)(v0 + 184);

  sub_1000FD918(v3, v2);
  swift_release();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10021EDC8()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    unint64_t v2 = sub_10021F0E4;
  }
  else {
    unint64_t v2 = sub_10021EEF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10021EEF8()
{
  uint64_t v2 = *(void *)(v0 + 192);
  unint64_t v1 = *(void *)(v0 + 200);
  uint64_t v4 = *(void **)(v0 + 176);
  uint64_t v3 = *(void **)(v0 + 184);

  sub_1000FD918(v2, v1);
  swift_release();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10021EF94()
{
  unint64_t v1 = *(void **)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  unint64_t v2 = *(void *)(v0 + 200);
  uint64_t v5 = *(void **)(v0 + 176);
  uint64_t v4 = *(void **)(v0 + 184);

  swift_release();
  sub_1000FD918(v3, v2);

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10021F034()
{
  unint64_t v1 = (void *)v0[30];
  unint64_t v2 = (void *)v0[28];
  uint64_t v4 = v0[24];
  unint64_t v3 = v0[25];
  uint64_t v6 = (void *)v0[22];
  uint64_t v5 = (void *)v0[23];
  swift_release();

  swift_release();
  sub_1000FD918(v4, v3);

  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10021F0E4()
{
  unint64_t v1 = (void *)v0[28];
  uint64_t v2 = v0[24];
  unint64_t v3 = v0[25];
  uint64_t v5 = (void *)v0[22];
  uint64_t v4 = (void *)v0[23];
  swift_release();

  sub_1000FD918(v2, v3);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10021F380(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = type metadata accessor for Logger();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[2] = a3;
  uint64_t v18 = v6;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  Logger.init(subsystem:category:)();
  return sub_1000BA738("Daemon.unpackingIDSData", 23, 2, (uint64_t)v15, 1, 0, (void (*)(uint64_t, uint64_t))sub_10022A6B0, v17);
}

uint64_t sub_10021F698(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v46 = a5;
  uint64_t v47 = a7;
  uint64_t v50 = a6;
  Swift::String v48 = a3;
  id v49 = a4;
  uint64_t v10 = sub_10009EE78(&qword_100340F10);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10009EE78(&qword_1003460E0);
  uint64_t v45 = *(void **)(v13 - 8);
  uint64_t v14 = v45[8];
  __chkstk_darwin(v13 - 8);
  sub_10022A6D8(a1, (uint64_t)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))((char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v15);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = Data.init(contentsOf:options:)();
    if (v7)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))((char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
    }
    else
    {
      uint64_t v20 = *(void (**)(char *, uint64_t))(v16 + 8);
      uint64_t v42 = v19;
      uint64_t v43 = v18;
      v20((char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
      uint64_t v21 = type metadata accessor for TaskPriority();
      uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
      unint64_t v44 = v12;
      uint64_t v23 = v22(v12, 1, 1, v21);
      v41[1] = v41;
      __chkstk_darwin(v23);
      uint64_t v24 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_10022A6D8(a1, (uint64_t)v24);
      unint64_t v25 = (*((unsigned __int8 *)v45 + 80) + 56) & ~(unint64_t)*((unsigned __int8 *)v45 + 80);
      unint64_t v26 = (v14 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
      NSString v28 = (void *)swift_allocObject();
      _OWORD v28[2] = 0;
      v28[3] = 0;
      v28[4] = a2;
      uint64_t v45 = a2;
      id v29 = v47;
      id v30 = v48;
      uint64_t v31 = (uint64_t)v28 + v25;
      uint64_t v32 = v49;
      v28[5] = v48;
      v28[6] = v32;
      sub_1000D9F34((uint64_t)v24, v31);
      uint64_t v33 = (void *)((char *)v28 + v26);
      uint64_t v34 = v50;
      *uint64_t v33 = v46;
      v33[1] = v34;
      *(void *)((char *)v28 + v27) = v29;
      uint64_t v35 = (void *)((char *)v28 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v36 = v42;
      *uint64_t v35 = v43;
      v35[1] = v36;
      id v37 = v29;
      os_log_type_t v38 = v45;
      id v39 = v30;
      id v40 = v32;
      swift_bridgeObjectRetain();
      sub_100213D2C((uint64_t)v44, (uint64_t)&unk_1003460F0, (uint64_t)v28);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10021F9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 72) = v12;
  *(void *)(v8 + 80) = v13;
  *(_OWORD *)(v8 + 56) = v11;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  type metadata accessor for Logger();
  *(void *)(v8 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_10021FA78, 0, 0);
}

uint64_t sub_10021FA78()
{
  uint64_t v1 = *(void *)(v0 + 80);
  long long v8 = *(_OWORD *)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 96) = v2;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v7;
  *(_OWORD *)(v2 + 48) = v8;
  *(_OWORD *)(v2 + 64) = v9;
  *(void *)(v2 + 80) = v1;
  Logger.init(subsystem:category:)();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                              + dword_1003467A8);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *unint64_t v3 = v0;
  v3[1] = sub_10021FBE0;
  uint64_t v4 = *(void *)(v0 + 88);
  return v10((uint64_t)"IDSServiceDelegate.incomingResourceAt", 37, 2, v4, 1, 0, (uint64_t)&unk_100346100, v2);
}

uint64_t sub_10021FBE0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10021FD28, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10021FD28()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10021FD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[28] = v10;
  v8[29] = v11;
  v8[26] = a7;
  v8[27] = a8;
  v8[24] = a5;
  v8[25] = a6;
  v8[22] = a3;
  v8[23] = a4;
  v8[21] = a2;
  return _swift_task_switch(sub_10021FDCC, 0, 0);
}

uint64_t sub_10021FDCC()
{
  uint64_t v85 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received large message from family", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[22];

  if (!v4)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      v0[2] = sub_1000A2E70(0xD000000000000035, 0x8000000100297050, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2048;
      v0[3] = 864;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v15, "%s %ld: service cannot be nil", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_29;
  }
  long long v6 = (void *)v0[22];
  uint64_t v5 = (void *)v0[23];
  if (!v5)
  {
    id v11 = v6;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      v0[4] = sub_1000A2E70(0xD000000000000035, 0x8000000100297050, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2048;
      v0[5] = 868;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v17, "%s %ld: account cannot be nil", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_28;
  }
  uint64_t v7 = v0[24];
  sub_10009EE78(&qword_1003460E0);
  uint64_t v8 = swift_task_alloc();
  sub_10022A6D8(v7, v8);
  uint64_t v9 = type metadata accessor for URL();
  LODWORD(v7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  id v10 = v6;
  id v11 = v5;
  sub_1000A4FD8(v8, &qword_1003460E0);
  swift_task_dealloc();
  if (v7 == 1)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v82 = v11;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      v0[6] = sub_1000A2E70(0xD000000000000035, 0x8000000100297050, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2048;
      v0[7] = 872;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s %ld: data cannot be nil", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
LABEL_24:
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_29:
LABEL_30:
      id v37 = (uint64_t (*)(void))v0[1];
      return v37();
    }
    goto LABEL_27;
  }
  unint64_t v19 = v0[26];
  if (!v19)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v82 = v11;
      uint64_t v84 = v34;
      v0[8] = sub_1000A2E70(0xD000000000000035, 0x8000000100297050, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2048;
      v0[9] = 876;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v32, "%s %ld: fromID cannot be nil", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  uint64_t v20 = (void *)v0[27];
  if (!v20)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      v0[10] = sub_1000A2E70(0xD000000000000035, 0x8000000100297050, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2048;
      v0[11] = 880;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v35, "%s %ld: context cannot be nil", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_28:
      goto LABEL_29;
    }
LABEL_27:

    goto LABEL_28;
  }
  uint64_t v83 = v10;
  sub_1000A0760(0, &qword_100342A78);
  uint64_t v21 = qword_100340DE8;
  id v22 = v20;
  if (v21 != -1) {
    swift_once();
  }
  id v23 = (id)qword_10034B360;
  char v24 = static NSObject.== infix(_:_:)();

  if (v24)
  {
    if (qword_100340DB0 != -1) {
      swift_once();
    }
    v0[30] = qword_10034B338;
    swift_retain();
    swift_bridgeObjectRetain();
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v26 = [self destinationWithURI:v25];
    v0[31] = v26;

    id v27 = v26;
    NSString v28 = (void *)swift_task_alloc();
    v0[32] = v28;
    *NSString v28 = v0;
    v28[1] = sub_100220DFC;
    uint64_t v30 = v0[28];
    uint64_t v29 = v0[29];
    return sub_1000DC4A8(v30, v29, (uint64_t)v27);
  }
  else
  {
    if (qword_100340DF0 != -1) {
      swift_once();
    }
    id v38 = (id)qword_10034B368;
    char v39 = static NSObject.== infix(_:_:)();

    if ((v39 & 1) == 0)
    {

      goto LABEL_30;
    }
    uint64_t v41 = v0[28];
    unint64_t v40 = v0[29];
    id v42 = v11;
    id v43 = v22;
    swift_bridgeObjectRetain();
    sub_1000B88B8(v41, v40);
    id v44 = v42;
    id v45 = v43;
    swift_bridgeObjectRetain();
    sub_1000B88B8(v41, v40);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = v0[28];
    unint64_t v80 = v0[29];
    id v81 = v44;
    if (v48)
    {
      os_log_type_t type = v47;
      uint64_t v76 = v0[27];
      uint64_t v75 = v0[25];
      uint64_t v74 = v0[23];
      uint64_t v79 = v45;
      uint64_t v50 = swift_slowAlloc();
      unint64_t v78 = (void *)swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136316418;
      v0[15] = sub_1000A2E70(0xD000000000000035, 0x8000000100297050, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2048;
      v0[16] = 891;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 22) = 2112;
      v0[17] = v44;
      id v51 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v78 = v74;

      *(_WORD *)(v50 + 32) = 2080;
      sub_1000B88B8(v49, v80);
      uint64_t v52 = Data.description.getter();
      unint64_t v54 = v53;
      sub_1000A0168(v49, v80);
      v0[18] = sub_1000A2E70(v52, v54, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A0168(v49, v80);
      sub_1000A0168(v49, v80);
      *(_WORD *)(v50 + 42) = 2080;
      swift_bridgeObjectRetain();
      v0[19] = sub_1000A2E70(v75, v19, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v50 + 52) = 2112;
      id v55 = v79;
      v0[20] = v79;
      id v56 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v78[1] = v76;

      id v44 = v81;
      _os_log_impl((void *)&_mh_execute_header, v46, type, "[v2] %s %ld \n Incoming IDS messsage for \n account: %@ \n incomingData: %s \nfromID: %s \n context: %@", (uint8_t *)v50, 0x3Eu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000A0168(v49, v80);
      sub_1000A0168(v49, v80);
      swift_bridgeObjectRelease_n();

      id v55 = v45;
    }
    id v57 = [v55 incomingResponseIdentifier];
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v61 = v60;

      swift_bridgeObjectRetain();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v12, v62))
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_30;
      }
      uint64_t v63 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315650;
      v0[12] = sub_1000A2E70(0xD000000000000035, 0x8000000100297050, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 12) = 2048;
      v0[13] = 898;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 22) = 2080;
      swift_bridgeObjectRetain();
      v0[14] = sub_1000A2E70(v59, v61, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v62, "[v2] %s %ld: Did deliver v2 message with incomingResponseIdentifier: %s", (uint8_t *)v63, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_29;
    }
    id v64 = [v55 outgoingResponseIdentifier];
    if (!v64)
    {

      goto LABEL_30;
    }
    unint64_t v65 = v64;
    uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v68 = v67;

    v0[37] = v68;
    if (qword_100340DB0 != -1) {
      swift_once();
    }
    v0[38] = qword_10034B338;
    swift_retain();
    uint64_t v69 = (void *)swift_task_alloc();
    v0[39] = v69;
    void *v69 = v0;
    v69[1] = sub_100221260;
    uint64_t v71 = v0[28];
    uint64_t v70 = v0[29];
    uint64_t v72 = v0[25];
    uint64_t v73 = v0[26];
    return sub_1000E5798(v71, v70, v72, v73, v66, v68);
  }
}

uint64_t sub_100220DFC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 248);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();

  if (v0)
  {
    uint64_t v4 = sub_100221410;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 240);
    uint64_t v7 = *(void **)(v2 + 216);
    uint64_t v8 = *(void **)(v2 + 184);
    id v9 = *(id *)(v2 + 176);
    id v10 = v8;
    id v11 = v7;
    uint64_t v4 = sub_100220F54;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100220F54()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = (void *)v0[22];
  uint64_t v2 = (void *)v0[23];
  sub_1000FD63C(v3, v2, v0[28], v0[29], v1);

  return _swift_task_switch(sub_100220FE4, 0, 0);
}

uint64_t sub_100220FE4()
{
  if (qword_100340E00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 272) = qword_10034B370;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002210BC;
  return sub_10019F170(0);
}

uint64_t sub_1002210BC()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100221498;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1002211D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002211D8()
{
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 184);

  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100221260()
{
  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_100221530;
  }
  else {
    uint64_t v2 = sub_100221390;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100221390()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = (void *)v0[22];
  uint64_t v2 = (void *)v0[23];
  swift_release();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100221410()
{
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 184);

  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100221498()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = (void *)v0[27];
  uint64_t v4 = (void *)v0[22];
  uint64_t v3 = (void *)v0[23];
  swift_release();

  swift_release();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100221530()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = (void *)v0[22];
  uint64_t v2 = (void *)v0[23];
  swift_release();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100221758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for Logger();
  v5[4] = swift_task_alloc();
  return _swift_task_switch(sub_1002217E8, 0, 0);
}

uint64_t sub_1002217E8()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = *(id *)(v0 + 16);
  id v3 = v1;
  Logger.init(subsystem:category:)();
  id v11 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003434D0
                                                                                              + dword_1003434D0);
  id v4 = v2;
  id v5 = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  void *v6 = v0;
  v6[1] = sub_100221918;
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v9 = *(void *)(v0 + 16);
  return v11((uint64_t)"IDSServiceDelegate.activeAccountsChanged", 40, 2, v7, 1, 0, v9, v8);
}

uint64_t sub_100221918()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100221A68, 0, 0);
  }
  else
  {
    id v3 = *(void **)(v2 + 16);

    swift_task_dealloc();
    id v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

uint64_t sub_100221A68()
{
  uint64_t v1 = *(void **)(v0 + 16);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100221ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return _swift_task_switch(sub_100221AFC, 0, 0);
}

uint64_t sub_100221AFC()
{
  os_log_type_t v15 = v0;
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    v0[7] = sub_1000A0760(0, &qword_100342A78);
    uint64_t v2 = qword_100340DE8;
    id v3 = v1;
    if (v2 != -1) {
      swift_once();
    }
    id v4 = (id)qword_10034B360;
    char v5 = static NSObject.== infix(_:_:)();

    if (v5) {
      goto LABEL_8;
    }
    if (qword_100340DF0 != -1) {
      swift_once();
    }
    id v6 = (id)qword_10034B368;
    char v7 = static NSObject.== infix(_:_:)();

    if (v7)
    {
LABEL_8:
      if (qword_100340D58 != -1) {
        swift_once();
      }
      uint64_t v8 = qword_10034B2A8;
      v0[8] = qword_10034B2A8;
      swift_retain();
      return _swift_task_switch(sub_100221E0C, v8, 0);
    }
  }
  else
  {
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315394;
      v0[2] = sub_1000A2E70(0xD000000000000021, 0x8000000100297000, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2048;
      v0[3] = 920;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s %ld: service cannot be nil", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100221E0C()
{
  sub_1000B656C();
  *(void *)(v0 + 72) = 0;
  swift_release();
  return _swift_task_switch(sub_100221EA0, 0, 0);
}

uint64_t sub_100221EA0()
{
  os_log_type_t v15 = v0;
  uint64_t v1 = (void *)v0[5];
  v0[10] = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_logger;
  id v2 = v1;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (void *)v0[5];
    id v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)id v6 = 136315138;
    id v7 = (id)qword_10034B360;
    char v8 = static NSObject.== infix(_:_:)();

    if (v8) {
      uint64_t v9 = 12662;
    }
    else {
      uint64_t v9 = 12918;
    }
    v0[4] = sub_1000A2E70(v9, 0xE200000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Handling IDS account changed notification on service: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    os_log_type_t v10 = (void *)v0[5];
  }
  uint64_t v13 = (uint64_t (__cdecl *)())((char *)&dword_100345A50 + dword_100345A50);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[11] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1002220C4;
  return v13();
}

uint64_t sub_1002220C4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    os_log_type_t v4 = sub_100222314;
  }
  else {
    os_log_type_t v4 = sub_1002221D8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002221D8()
{
  if (qword_100340DB0 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10034B338;
  *(void *)(v0 + 112) = qword_10034B338;
  swift_retain();
  return _swift_task_switch(sub_100222280, v1, 0);
}

uint64_t sub_100222280()
{
  uint64_t v1 = *(void *)(v0 + 104);
  sub_1000F2650(*(uint64_t **)(v0 + 96));
  *(void *)(v0 + 120) = v1;
  swift_release();
  if (v1) {
    id v2 = sub_1002224E0;
  }
  else {
    id v2 = sub_100222378;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100222314()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100222378()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = (void *)v0[12];
  char v5 = (void *)v0[5];
  if (v3)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done handling IDS account changed notification", v6, 2u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v4 = v5;
  }

  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10022247C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002224E0()
{
  uint64_t v1 = *(void **)(v0 + 40);

  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1002225D4()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    long long v28 = 0u;
    long long v29 = 0u;
LABEL_12:
    sub_1000A4FD8((uint64_t)&v28, &qword_100341CD8);
    goto LABEL_14;
  }
  uint64_t v1 = v0;
  v26[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26[2] = v2;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v3 = sub_10010A0C0((uint64_t)v27), (v4 & 1) != 0))
  {
    sub_1000A4F78(*(void *)(v1 + 56) + 32 * v3, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000FD990((uint64_t)v27);
  if (!*((void *)&v29 + 1)) {
    goto LABEL_12;
  }
  sub_1000B8B44(&v28, v30);
  sub_1000A4F78((uint64_t)v30, (uint64_t)v27);
  sub_1000A0760(0, (unint64_t *)&unk_100346090);
  if (swift_dynamicCast())
  {
    char v5 = (void *)v28;
    id v6 = [(id)v28 endDate];
    uint64_t v7 = sub_10009EE78(&qword_100342B30);
    __chkstk_darwin(v7 - 8);
    uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(void *)(v10 - 8);
      __chkstk_darwin(v10);
      uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v13, v10);
      char v14 = 1;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
      {
LABEL_20:
        sub_1000A4FD8((uint64_t)v9, &qword_100342B30);
        id v19 = [v5 type];
        id v20 = [v5 error];
        if (v20)
        {

          sub_100222B8C(v5);
LABEL_22:

          sub_1000A4F28((uint64_t)v30);
          return;
        }
        if (v19 == (id)2)
        {
          if (v14)
          {
            sub_1002231DC(v5, 0xD000000000000017, 0x8000000100296F90);
            goto LABEL_22;
          }
          uint64_t v24 = 0xD000000000000018;
          NSString v25 = "willExportToCloudKit(_:)";
        }
        else if (v19 == (id)1)
        {
          if (v14)
          {
            sub_100222DAC(v5);
            goto LABEL_22;
          }
          uint64_t v24 = 0xD00000000000001ALL;
          NSString v25 = "willImportFromCloudKit(_:)";
        }
        else
        {
          if (v19)
          {
            uint64_t v21 = Logger.logObject.getter();
            os_log_type_t v22 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v21, v22))
            {
              id v23 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v23 = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unknown event", v23, 2u);
              swift_slowDealloc();
            }

            goto LABEL_22;
          }
          if (v14)
          {
            sub_1002231DC(v5, 0xD000000000000014, 0x8000000100296EE0);
            goto LABEL_22;
          }
          uint64_t v24 = 0xD000000000000015;
          NSString v25 = "willSetupCloudKit(_:)";
        }
        sub_100222FDC(v5, v24, (unint64_t)(v25 - 32) | 0x8000000000000000);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 1, 1, v18);
    }
    char v14 = 0;
    goto LABEL_20;
  }
  sub_1000A4F28((uint64_t)v30);
LABEL_14:
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v17 = 136315138;
    *(void *)&v30[0] = sub_1000A2E70(0xD000000000000019, 0x8000000100296EA0, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Failed to retrieve the container event from notification.userInfo.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

void sub_100222B8C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    char v5 = (void *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    sub_1000A2E70(0xD000000000000017, 0x8000000100296EC0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2112;
    id v6 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v5 = v1;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "------- %s called %@", (uint8_t *)v4, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (qword_100340D90 != -1) {
    swift_once();
  }
  *(unsigned char *)(qword_10034B310 + OBJC_IVAR____TtC15ScreenTimeAgent19PersistentContainer_cloudKitStatus) = 1;
}

uint64_t sub_100222DAC(void *a1)
{
  uint64_t v3 = sub_10009EE78(&qword_100340F10);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v8[2] = 0;
  v8[3] = 0;
  v8[4] = v1;
  v8[5] = a1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  id v10 = v1;
  id v11 = a1;
  if (v9 == 1)
  {
    sub_1000A4FD8((uint64_t)v5, &qword_100340F10);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      if (v14 | v12)
      {
        v16[0] = 0;
        v16[1] = 0;
        v16[2] = v12;
        v16[3] = v14;
      }
    }
  }
  swift_task_create();
  return swift_release();
}

void sub_100222FDC(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    sub_1000A2E70(a2, a3, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2112;
    id v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v5;

    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "------- %s called %@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1002231DC(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = a1;
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    sub_1000A2E70(a2, a3, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "------- %s called %@", (uint8_t *)v8, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (qword_100340D90 != -1) {
    swift_once();
  }
  *(unsigned char *)(qword_10034B310 + OBJC_IVAR____TtC15ScreenTimeAgent19PersistentContainer_cloudKitStatus) = 0;
}

uint64_t sub_1002234D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  type metadata accessor for Logger();
  v5[6] = swift_task_alloc();
  return _swift_task_switch(sub_100223568, 0, 0);
}

uint64_t sub_100223568()
{
  uint64_t v14 = v0;
  id v1 = *(id *)(v0 + 40);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 40);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v0 + 16) = sub_1000A2E70(0xD000000000000019, 0x8000000100296F50, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    *(void *)(v0 + 24) = v4;
    id v6 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v4;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "------- %s called %@", (uint8_t *)v5, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 40);
  }
  Logger.init(subsystem:category:)();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char))((char *)&dword_1003434C0 + dword_1003434C0);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100223834;
  uint64_t v9 = *(void *)(v0 + 48);
  return v12((uint64_t)"CloudPersistentContainer.didImportFromCloudKit", 46, 2, v9, 1, 0);
}

uint64_t sub_100223834()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100223970, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100223970()
{
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002239D4()
{
  return _swift_task_switch(sub_1002239F0, 0, 0);
}

uint64_t sub_1002239F0()
{
  if (qword_100340D58 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10034B2A8;
  *(void *)(v0 + 16) = qword_10034B2A8;
  swift_retain();
  return _swift_task_switch(sub_100223A98, v1, 0);
}

uint64_t sub_100223A98()
{
  sub_1000B7534();
  swift_release();
  return _swift_task_switch(sub_100223B50, 0, 0);
}

uint64_t sub_100223B50()
{
  if (qword_100340E00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 24) = qword_10034B370;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100223C28;
  return sub_10019F170(0);
}

uint64_t sub_100223C28()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000AFEE0;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100223D44;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100223D44()
{
  if (qword_100340D90 != -1) {
    swift_once();
  }
  *(unsigned char *)(qword_10034B310 + OBJC_IVAR____TtC15ScreenTimeAgent19PersistentContainer_cloudKitStatus) = 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100223DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  type metadata accessor for LocalDeviceManagement();
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_100223E88, 0, 0);
}

uint64_t sub_100223E88()
{
  _s3__C4CodeOMa_0(0);
  v0[2] = 4002;
  sub_10022A498(&qword_1003411C0, _s3__C4CodeOMa_0);
  char v1 = static _ErrorCodeProtocol.~= infix(_:_:)();
  v0[10] = OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_logger;
  if (v1)
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting DMF organization setup and initialization", v4, 2u);
      swift_slowDealloc();
    }

    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138543362;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v17 = v8;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Removing all DMD declarations failed with: %{public}@", v7, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    Logger.init(subsystem:category:)();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[11] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100224330;
    return sub_1000C839C();
  }
  else
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      v0[3] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "DMF Configuration Client failed to start: %@. Cannot continue.", v11, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_errorRetain();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_100224330()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  sub_10022B4EC(*(void *)(v2 + 72), (uint64_t (*)(void))type metadata accessor for LocalDeviceManagement);
  if (v0) {
    os_log_type_t v3 = sub_1002248E8;
  }
  else {
    os_log_type_t v3 = sub_100224478;
  }
  return _swift_task_switch(v3, 0, 0);
}

id sub_100224478()
{
  id v1 = sub_100214990();
  [v1 invalidate];

  id result = [self systemConnection];
  if (result)
  {
    os_log_type_t v3 = result;
    uint64_t v4 = *(void *)(v0 + 56);
    id v5 = objc_allocWithZone((Class)DMFConfigurationSourceClient);
    NSString v6 = String._bridgeToObjectiveC()();
    NSString v7 = String._bridgeToObjectiveC()();
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v5 initWithConnection:v3 organizationIdentifier:v6 displayName:v7 localMachServiceName:v8];

    os_log_type_t v10 = *(void **)(v4 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient);
    *(void *)(v4 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient) = v9;

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v11();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100224608()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  sub_10022B4EC(*(void *)(v2 + 64), (uint64_t (*)(void))type metadata accessor for LocalDeviceManagement);
  if (v0) {
    os_log_type_t v3 = sub_100224B08;
  }
  else {
    os_log_type_t v3 = sub_100224750;
  }
  return _swift_task_switch(v3, 0, 0);
}

id sub_100224750()
{
  swift_errorRelease();
  id v1 = sub_100214990();
  [v1 invalidate];

  id result = [self systemConnection];
  if (result)
  {
    os_log_type_t v3 = result;
    uint64_t v4 = *(void *)(v0 + 56);
    id v5 = objc_allocWithZone((Class)DMFConfigurationSourceClient);
    NSString v6 = String._bridgeToObjectiveC()();
    NSString v7 = String._bridgeToObjectiveC()();
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v5 initWithConnection:v3 organizationIdentifier:v6 displayName:v7 localMachServiceName:v8];

    os_log_type_t v10 = *(void **)(v4 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient);
    *(void *)(v4 + OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient) = v9;

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v11();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002248E8()
{
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create DM organization: %@. Will retry", v3, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  Logger.init(subsystem:category:)();
  NSString v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v6;
  void *v6 = v0;
  v6[1] = sub_100224608;
  return sub_1000C839C();
}

uint64_t sub_100224B08()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100224BEC()
{
  uint64_t v0 = type metadata accessor for ScreenTimeFeatureFlags();
  v10[3] = v0;
  v10[4] = sub_10022A498(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  id v1 = sub_1000C532C(v10);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v0 - 8) + 104))(v1, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v0);
  LOBYTE(v0) = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v10);
  if (v0)
  {
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "DMSourceClient toSendStatusUpdate Not implemented", v4, 2u);
      swift_slowDealloc();
    }

    return [objc_allocWithZone((Class)CATOperation) init];
  }
  else
  {
    id v6 = sub_100214228();
    id v7 = [v6 requestManager];

    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    id v9 = [v7 operationToSendStatusUpdate:isa];

    return v9;
  }
}

uint64_t sub_100224EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + 40) = a3;
  return _swift_task_switch(sub_100224F10, 0, 0);
}

uint64_t sub_100224F10()
{
  uint64_t v29 = v0;
  id v1 = [*(id *)(v0 + 32) notification];
  id v2 = [v1 request];

  id v3 = [v2 content];
  id v4 = [v3 categoryIdentifier];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_1000A2E70(v5, v7, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "userNotificationCenter received response %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v5 && v11 == v7)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v5 && v14 == v7)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v21 & 1) == 0)
        {
          swift_bridgeObjectRetain();
          os_log_type_t v22 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v22, v25))
          {

            swift_bridgeObjectRelease_n();
            goto LABEL_23;
          }
          id v26 = (uint8_t *)swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          *(_DWORD *)id v26 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 16) = sub_1000A2E70(v5, v7, &v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v25, "userNotificationCenter Not handling notification %s", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRelease();
      os_log_type_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, v23))
      {
LABEL_22:

LABEL_23:
        id v27 = *(uint64_t (**)(void))(v0 + 8);
        return v27();
      }
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Not implemented yet!", v24, 2u);
LABEL_21:
      swift_slowDealloc();
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
  type metadata accessor for AskService();
  uint64_t v15 = swift_allocObject();
  *(void *)(v0 + 48) = v15;
  uint64_t v16 = v15 + OBJC_IVAR____TtC15ScreenTimeAgent10AskService____lazy_storage___logger;
  uint64_t v17 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100225464;
  uint64_t v19 = *(void *)(v0 + 32);
  return sub_10024B6BC(v19);
}

uint64_t sub_100225464()
{
  id v2 = (void *)*v1;
  v2[8] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002255F4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2[6];
    swift_setDeallocating();
    sub_1000A4FD8(v3 + OBJC_IVAR____TtC15ScreenTimeAgent10AskService____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();
    id v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1002255F4()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_setDeallocating();
  sub_1000A4FD8(v1 + OBJC_IVAR____TtC15ScreenTimeAgent10AskService____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10022582C(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  uint64_t v12 = (uint64_t (*)(id))((char *)&dword_100346068 + dword_100346068);
  id v8 = a1;
  id v9 = a2;
  a4;
  os_log_type_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *os_log_type_t v10 = v4;
  v10[1] = sub_100225914;
  return v12(v9);
}

uint64_t sub_100225914()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 40);
  id v2 = *(void **)(*v0 + 32);
  uint64_t v3 = *(void **)(*v0 + 24);
  uint64_t v4 = *(void **)(*v0 + 16);
  uint64_t v7 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_100225A84()
{
  _Block_release(*(const void **)(v0 + 32));
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100225AD4()
{
  id v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_10009F840;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_100346048 + dword_100346048);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100225B94@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_100225BA4(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, a3, a4, v13, a6, a7, a1, a2);
}

void sub_100225C30(id a1, char a2)
{
  if (a2)
  {
    if (qword_100340DB8 != -1) {
      swift_once();
    }
    id v20 = 0;
    if ([a1 setTaskExpiredWithRetryAfter:&v20 error:*(double *)&qword_100342F80])
    {
      uint64_t v3 = qword_100340DC0;
      id v4 = v20;
      if (v3 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_10009DA74(v5, (uint64_t)qword_100342F88);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        id v20 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136446210;
        sub_1000A2E70(0xD000000000000033, 0x8000000100293480, (uint64_t *)&v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully completed and expired %{public}s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      id v13 = v20;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100340DC0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10009DA74(v14, (uint64_t)qword_100342F88);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        id v20 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136446466;
        sub_1000A2E70(0xD000000000000033, 0x8000000100293480, (uint64_t *)&v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 12) = 2082;
        swift_errorRetain();
        sub_10009EE78((uint64_t *)&unk_1003431B0);
        uint64_t v18 = String.init<A>(describing:)();
        sub_1000A2E70(v18, v19, (uint64_t *)&v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to expire %{public}s: %{public}s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      [a1 setTaskCompleted];
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10009DA74(v9, (uint64_t)qword_100342F88);
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      id v20 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_1000A2E70(0xD000000000000033, 0x8000000100293480, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully completed %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    [a1 setTaskCompleted];
  }
}

id sub_1002261A0(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for ConcreteDependencyFactory();
  v12[4] = &off_1003087F0;
  v12[5] = &off_100308828;
  v12[6] = &off_100308818;
  v12[7] = &off_1003087E0;
  v12[8] = &off_1003087D0;
  v12[9] = &off_1003087C0;
  v12[10] = &off_1003087B0;
  v12[11] = &off_1003087A0;
  v12[12] = &off_100308790;
  v12[13] = &off_100308760;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___mirroringMonitor] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___persistenceController] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___notificationManager] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___screenTimeOrganizationController] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeListener] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeListenerDelegate] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeEventRelay] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeResponseHandler] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askForTimeConfigurationProvider] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askToManager] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___commandLineToolListener] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___commandLineToolListenerDelegate] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___publicAgentListener] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___privateAgentListener] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___contactsAgentListener] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___agentListenerDelegate] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___coreAnalyticsManager] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___storeServer] = 0;
  v12[14] = &off_100308730;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___bootstrapperQueue] = 0;
  v12[3] = v4;
  v12[0] = a1;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___xpcServiceProvider] = 0;
  *(void *)&a2[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_organizationControllerAdapter] = 0;
  uint64_t v5 = a2;
  Logger.init(subsystem:category:)();
  uint64_t v6 = &v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamNotifyd];
  *(void *)uint64_t v6 = 0xD00000000000001ALL;
  *((void *)v6 + 1) = 0x8000000100297660;
  os_log_type_t v7 = &v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamAlarm];
  *(void *)os_log_type_t v7 = 0x6C7070612E6D6F63;
  *((void *)v7 + 1) = 0xEF6D72616C612E65;
  uint64_t v8 = &v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_kXpcStreamDistnoted];
  *(void *)uint64_t v8 = 0xD00000000000001CLL;
  *((void *)v8 + 1) = 0x8000000100297680;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___askAlternateListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___communicationListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___contactsListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___diagnosticsListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___downtimeListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___privateListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___settingsListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___setupListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___publicListener] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___cleanupActivityScheduler] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___appCollectionActivityScheduler] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___analyticsActivityScheduler] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon____lazy_storage___configurationSourceClient] = 0;
  sub_10022B690((uint64_t)v12, (uint64_t)&v5[OBJC_IVAR____TtC15ScreenTimeAgent6Daemon_factory]);

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for Daemon();
  id v9 = objc_msgSendSuper2(&v11, "init");
  sub_1000A4F28((uint64_t)v12);
  return v9;
}

uint64_t sub_1002264FC(void *a1, void *a2, char a3, uint64_t a4, void *a5)
{
  void v26[3] = sub_1000A0760(0, &qword_100343200);
  v26[4] = &off_100302050;
  v26[0] = a5;
  sub_1000C58A4(a4, (uint64_t)v25);
  sub_1000C58A4((uint64_t)v26, (uint64_t)v24);
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a1;
  *(void *)(v10 + 32) = a2;
  sub_10022B5E8(v25, v10 + 40);
  sub_10022B5E8(v24, v10 + 80);
  id v11 = a5;
  id v12 = a2;
  id v13 = a1;
  NSString v14 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_10022B600;
  aBlock[5] = v10;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10009D4FC;
  aBlock[3] = (uint64_t)&unk_100309430;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  LODWORD(v12) = [v12 registerForTaskWithIdentifier:v14 usingQueue:0 launchHandler:v15];

  _Block_release(v15);
  swift_release();
  swift_release();
  if (v12)
  {
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10009DA74(v16, (uint64_t)qword_100342F88);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136446210;
      *(void *)&v25[0] = sub_1000A2E70(0xD000000000000033, 0x8000000100293480, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v20 = "Successfully registered %{public}s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v20, v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10009DA74(v21, (uint64_t)qword_100342F88);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136446210;
      *(void *)&v25[0] = sub_1000A2E70(0xD000000000000033, 0x8000000100293480, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v20 = "Failed to register %{public}s";
      goto LABEL_10;
    }
  }

  return sub_1000A4F28((uint64_t)v26);
}

void sub_1002268BC()
{
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  id v2 = (void *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  uint64_t v3 = (char *)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  if (byte_10034B308 == 1)
  {
    v2[2] = v1;
    id v5 = v1;
    sub_1000CAF4C((uint64_t)v2);
    if (v0)
    {
      swift_release();
    }
    else
    {
      id v6 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();
      swift_release();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void sub_100226A5C(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for LegacyUsageShutdownScheduler();
  if (sub_10010AF2C((uint64_t)a2, a4))
  {
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10009DA74(v8, (uint64_t)qword_100342F88);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(void *)&v23[0] = swift_slowAlloc();
      *(_DWORD *)id v11 = 136446210;
      v22[0] = sub_1000A2E70(0xD000000000000033, 0x8000000100293480, (uint64_t *)v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Legacy usage is already disabled, expiring %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100225C30(a1, 1);
  }
  else
  {
    sub_1000C58A4((uint64_t)a4, (uint64_t)v23);
    sub_1000C58A4((uint64_t)v23, (uint64_t)v22);
    id v12 = (void *)swift_allocObject();
    v12[2] = v7;
    v12[3] = a2;
    uint64_t v13 = sub_10022B5E8(v23, (uint64_t)(v12 + 4));
    v12[9] = a1;
    v12[10] = &off_100301878;
    __chkstk_darwin(v13);
    id v14 = a2;
    id v15 = a1;
    id v16 = v14;
    id v17 = v15;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10009DA74(v18, (uint64_t)qword_100342F88);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Local user is not eligible to disable legacy usage. Skipping device OS version check.", v21, 2u);
      swift_slowDealloc();
    }

    sub_1002270B8(0, 0, (uint64_t)v16, v22, v17);
    swift_release();
    sub_1000A4F28((uint64_t)v22);
  }
}

void sub_1002270B8(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5)
{
  type metadata accessor for LegacyUsageShutdownScheduler();
  if (a2)
  {
    swift_errorRetain();
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10009DA74(v14, (uint64_t)qword_100342F88);
    swift_errorRetain();
    swift_errorRetain();
    id v11 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)id v16 = 136446210;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      uint64_t v17 = String.init<A>(describing:)();
      sub_1000A2E70(v17, v18, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010C8B8(a1, 1);
      sub_10010C8B8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, v15, "Failed to determine whether we can disable legacy usage: %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10010C8B8(a1, 1);
LABEL_20:
      char v26 = 0;
      goto LABEL_21;
    }
    sub_10010C8B8(a1, 1);
    sub_10010C8B8(a1, 1);
    swift_errorRelease();
LABEL_19:

    goto LABEL_20;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10009DA74(v10, (uint64_t)qword_100342F88);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "We can't disable legacy usage yet.", v13, 2u);
      swift_slowDealloc();
    }
    goto LABEL_19;
  }
  if (qword_100340DC0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10009DA74(v19, (uint64_t)qword_100342F88);
  os_log_type_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Disabling legacy usage.", v22, 2u);
    swift_slowDealloc();
  }

  sub_100106AB8(a3, a4);
  os_log_type_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v25 = 136446210;
    sub_1000A2E70(0xD000000000000033, 0x8000000100293480, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully disabled legacy usage %{public}s", v25, 0xCu);
    char v26 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    char v26 = 1;
  }
LABEL_21:
  sub_100225C30(a5, v26);
}

void sub_1002276C8(void *a1, char a2, void *a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    aBlock[4] = (uint64_t)sub_10010AE44;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100213F7C;
    aBlock[3] = (uint64_t)&unk_100309458;
    id v9 = _Block_copy(aBlock);
    swift_release();
    [a1 setExpirationHandler:v9];
    _Block_release(v9);
    sub_100226A5C(a1, a3, a4, a5);
  }
  else
  {
    if (qword_100340DC0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10009DA74(v10, (uint64_t)qword_100342F88);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t aBlock[6] = sub_1000A2E70(0xD000000000000033, 0x8000000100293480, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Feature is disabled, expiring %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100225C30(a1, 1);
  }
}

uint64_t sub_100227904(void *a1)
{
  id v2 = v1;
  type metadata accessor for OSActivity();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 24) = 0;
  *(void *)(inited + 32) = 0;
  if (qword_100340DE0 != -1) {
    swift_once();
  }
  *(void *)(inited + 16) = _os_activity_create((void *)&_mh_execute_header, "XPC Listener Delegate: Should Accept Connection", (os_activity_t)qword_100343300, OS_ACTIVITY_FLAG_DEFAULT);
  swift_beginAccess();
  id v5 = swift_unknownObjectRetain();
  os_activity_scope_enter(v5, (os_activity_scope_state_t)(inited + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  id v6 = [a1 serviceName];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v10 = 0xE900000000000073;
    uint64_t v8 = 0x756F6D796E6F6E41;
  }
  swift_bridgeObjectRetain_n();
  id v11 = a1;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_bridgeObjectRetain();
    sub_1000A2E70(v8, v10, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 1024;
    [v11 processIdentifier];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s connection received from process %d", (uint8_t *)v14, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v15 == v10) {
    goto LABEL_11;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_16;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v17 == v10)
  {
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    id v19 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STAskServiceProtocol];
    [v11 setExportedInterface:v19];

    type metadata accessor for AskService();
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v20 + OBJC_IVAR____TtC15ScreenTimeAgent10AskService____lazy_storage___logger;
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
    [v11 setExportedObject:v20];
    swift_release();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v2;
    Swift::String v113 = sub_10022AF50;
    uint64_t v114 = v24;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308FA8;
    os_log_type_t v25 = _Block_copy(&aBlock);
    id v26 = v2;
    swift_release();
    [v11 setInterruptionHandler:v25];
    _Block_release(v25);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v26;
    Swift::String v113 = sub_10022AF74;
    uint64_t v114 = v27;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v28 = &unk_100308FF8;
    goto LABEL_17;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_16;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v32 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    id v34 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STCommunicationServiceProtocol];
    [v11 setExportedInterface:v34];

    type metadata accessor for CommunicationService();
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v35 + OBJC_IVAR____TtC15ScreenTimeAgent20CommunicationService____lazy_storage___logger;
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v23 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
    [v11 setExportedObject:v35];
    swift_release();
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = v2;
    Swift::String v113 = sub_10022AF08;
    uint64_t v114 = v38;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308F08;
    char v39 = _Block_copy(&aBlock);
    id v26 = v2;
    swift_release();
    [v11 setInterruptionHandler:v39];
    _Block_release(v39);
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v26;
    Swift::String v113 = sub_10022AF2C;
    uint64_t v114 = v40;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v28 = &unk_100308F58;
    goto LABEL_17;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_23;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v41 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    id v43 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STContactsServiceProtocol];
    [v11 setExportedInterface:v43];

    type metadata accessor for ContactsService();
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v44 + OBJC_IVAR____TtC15ScreenTimeAgent15ContactsService____lazy_storage___logger;
    uint64_t v46 = type metadata accessor for Logger();
    uint64_t v23 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 1, 1, v46);
    *(void *)(v44 + OBJC_IVAR____TtC15ScreenTimeAgent15ContactsService____lazy_storage___privateService) = 0;
    [v11 setExportedObject:v44];
    swift_release();
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = v2;
    Swift::String v113 = sub_10022AEC0;
    uint64_t v114 = v47;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308E68;
    BOOL v48 = _Block_copy(&aBlock);
    id v26 = v2;
    swift_release();
    [v11 setInterruptionHandler:v48];
    _Block_release(v48);
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v26;
    Swift::String v113 = sub_10022AEE4;
    uint64_t v114 = v49;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v28 = &unk_100308EB8;
    goto LABEL_17;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v42) {
    goto LABEL_28;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v50 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    id v52 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STDiagnosticsServiceProtocol];
    [v11 setExportedInterface:v52];
    [v11 setRemoteObjectInterface:v52];

    type metadata accessor for DiagnosticsService();
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = 0;
    uint64_t v54 = v53 + OBJC_IVAR____TtC15ScreenTimeAgent18DiagnosticsService____lazy_storage___logger;
    uint64_t v55 = type metadata accessor for Logger();
    uint64_t v23 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
    id v56 = *(void **)(v53 + 16);
    *(void *)(v53 + 16) = v11;
    id v57 = v11;

    [v57 setExportedObject:v53];
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v2;
    Swift::String v113 = sub_10022AE78;
    uint64_t v114 = v58;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308DC8;
    uint64_t v59 = _Block_copy(&aBlock);
    id v60 = v2;
    swift_release();
    [v57 setInterruptionHandler:v59];
    _Block_release(v59);
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = v60;
    Swift::String v113 = sub_10022AE9C;
    uint64_t v114 = v61;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308E18;
    os_log_type_t v62 = _Block_copy(&aBlock);
    id v63 = v60;
    swift_release();
    [v57 setInvalidationHandler:v62];
    _Block_release(v62);
    [v57 activate];
    swift_release();
    swift_release();

    return v23;
  }
  char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v51) {
    goto LABEL_33;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v64 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRelease();
    id v66 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STDowntimeServiceProtocol];
    [v11 setExportedInterface:v66];

    type metadata accessor for DowntimeService();
    uint64_t v67 = swift_allocObject();
    uint64_t v68 = v67 + OBJC_IVAR____TtC15ScreenTimeAgent15DowntimeService____lazy_storage___logger;
    uint64_t v69 = type metadata accessor for Logger();
    uint64_t v23 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 1, 1, v69);
    [v11 setExportedObject:v67];
    swift_release();
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = v2;
    Swift::String v113 = sub_10022AE30;
    uint64_t v114 = v70;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308D28;
    uint64_t v71 = _Block_copy(&aBlock);
    id v26 = v2;
    swift_release();
    [v11 setInterruptionHandler:v71];
    _Block_release(v71);
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = v26;
    Swift::String v113 = sub_10022AE54;
    uint64_t v114 = v72;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v28 = &unk_100308D78;
    goto LABEL_17;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v65) {
    goto LABEL_38;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v73 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    swift_bridgeObjectRelease();
    id v75 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STPrivateServiceProtocol];
    [v11 setExportedInterface:v75];

    type metadata accessor for PrivateService();
    uint64_t v76 = swift_allocObject();
    uint64_t v77 = v76 + OBJC_IVAR____TtC15ScreenTimeAgent14PrivateService____lazy_storage___logger;
    uint64_t v78 = type metadata accessor for Logger();
    uint64_t v23 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 1, 1, v78);
    [v11 setExportedObject:v76];
    swift_release();
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = v2;
    Swift::String v113 = sub_10022ADE8;
    uint64_t v114 = v79;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308C88;
    unint64_t v80 = _Block_copy(&aBlock);
    id v26 = v2;
    swift_release();
    [v11 setInterruptionHandler:v80];
    _Block_release(v80);
    uint64_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = v26;
    Swift::String v113 = sub_10022AE0C;
    uint64_t v114 = v81;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v28 = &unk_100308CD8;
    goto LABEL_17;
  }
  char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v74) {
    goto LABEL_43;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v82 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRelease();
    id v84 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STPublicServiceProtocol];
    [v11 setExportedInterface:v84];

    type metadata accessor for PublicService();
    uint64_t v85 = swift_allocObject();
    uint64_t v86 = v85 + OBJC_IVAR____TtC15ScreenTimeAgent13PublicService____lazy_storage___logger;
    uint64_t v87 = type metadata accessor for Logger();
    uint64_t v23 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 1, 1, v87);
    [v11 setExportedObject:v85];
    swift_release();
    uint64_t v88 = swift_allocObject();
    *(void *)(v88 + 16) = v2;
    Swift::String v113 = sub_10022ADA0;
    uint64_t v114 = v88;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_100213F7C;
    uint64_t v112 = &unk_100308BE8;
    uint64_t v89 = _Block_copy(&aBlock);
    id v26 = v2;
    swift_release();
    [v11 setInterruptionHandler:v89];
    _Block_release(v89);
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = v26;
    Swift::String v113 = sub_10022ADC4;
    uint64_t v114 = v90;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v28 = &unk_100308C38;
    goto LABEL_17;
  }
  char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v83) {
    goto LABEL_48;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v91 == v10)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v92 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v100 == v10)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v101 & 1) == 0)
        {
          swift_release();
          return 0;
        }
      }
      id v102 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STSetupServiceProtocol];
      [v11 setExportedInterface:v102];

      type metadata accessor for SetupService();
      uint64_t v103 = swift_allocObject();
      uint64_t v104 = v103 + OBJC_IVAR____TtC15ScreenTimeAgent12SetupService____lazy_storage___logger;
      uint64_t v105 = type metadata accessor for Logger();
      uint64_t v23 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 1, 1, v105);
      [v11 setExportedObject:v103];
      swift_release();
      uint64_t v106 = swift_allocObject();
      *(void *)(v106 + 16) = v2;
      Swift::String v113 = sub_10022ACF8;
      uint64_t v114 = v106;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v110 = 1107296256;
      uint64_t v111 = sub_100213F7C;
      uint64_t v112 = &unk_100308AA8;
      unint64_t v107 = _Block_copy(&aBlock);
      id v26 = v2;
      swift_release();
      [v11 setInterruptionHandler:v107];
      _Block_release(v107);
      uint64_t v108 = swift_allocObject();
      *(void *)(v108 + 16) = v26;
      Swift::String v113 = sub_10022AD34;
      uint64_t v114 = v108;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v110 = 1107296256;
      uint64_t v28 = &unk_100308AF8;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  id v93 = [self interfaceWithProtocol:&OBJC_PROTOCOL___STSettingsServiceProtocol];
  [v11 setExportedInterface:v93];

  type metadata accessor for SettingsService();
  uint64_t v94 = swift_allocObject();
  uint64_t v95 = v94 + OBJC_IVAR____TtC15ScreenTimeAgent15SettingsService____lazy_storage___logger;
  uint64_t v96 = type metadata accessor for Logger();
  uint64_t v23 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v95, 1, 1, v96);
  [v11 setExportedObject:v94];
  swift_release();
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = v2;
  Swift::String v113 = sub_10022AD58;
  uint64_t v114 = v97;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  uint64_t v111 = sub_100213F7C;
  uint64_t v112 = &unk_100308B48;
  uint64_t v98 = _Block_copy(&aBlock);
  id v26 = v2;
  swift_release();
  [v11 setInterruptionHandler:v98];
  _Block_release(v98);
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = v26;
  Swift::String v113 = sub_10022AD7C;
  uint64_t v114 = v99;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  uint64_t v28 = &unk_100308B98;
LABEL_17:
  uint64_t v111 = sub_100213F7C;
  uint64_t v112 = v28;
  uint64_t v29 = _Block_copy(&aBlock);
  id v30 = v26;
  swift_release();
  [v11 setInvalidationHandler:v29];
  _Block_release(v29);
  [v11 activate];
  swift_release();
  return v23;
}

uint64_t sub_100229120(void *a1, void *a2, uint64_t a3, NSObject *a4, char a5, uint64_t a6)
{
  uint64_t v13 = type metadata accessor for Logger();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = a1;
  id v17 = v6;
  id v18 = a2;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  Logger.init(subsystem:category:)();
  sub_100184504("IDSServiceDelegate.didSendWithSuccess", 37, 2, (uint64_t)v15, 1, 0, a1, v17, (uint64_t)a2, a3, a4, a5, a6);
  swift_errorRelease();

  return swift_bridgeObjectRelease();
}

void sub_100229444(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain_n();
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    id v6 = (void *)swift_slowAlloc();
    *(_DWORD *)id v5 = 138412290;
    if (a2)
    {
      sub_1000AA5B8();
      swift_allocError();
      void *v7 = a1;
      v7[1] = a2;
      swift_bridgeObjectRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v8 = 0;
    }
    void *v6 = v8;
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Message %@ has been delivered with context", v5, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100229664(void *a1)
{
  uint64_t v3 = sub_10009EE78(&qword_100340F10);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = v1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  id v10 = a1;
  id v11 = v1;
  if (v9 == 1)
  {
    sub_1000A4FD8((uint64_t)v5, &qword_100340F10);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v14;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  sub_10009EE78(&qword_1003460C8);
  if (v13 | v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v12;
    v16[3] = v13;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10022988C(uint64_t a1)
{
  uint64_t v3 = sub_10009EE78(&qword_100340F10);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = v1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  swift_errorRetain();
  id v10 = v1;
  if (v9 == 1)
  {
    sub_1000A4FD8((uint64_t)v5, &qword_100340F10);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      if (v13 | v11)
      {
        v15[0] = 0;
        v15[1] = 0;
        v15[2] = v11;
        v15[3] = v13;
      }
    }
  }
  swift_task_create();
  return swift_release();
}

id sub_100229AC0()
{
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  if (qword_100340DE0 != -1) {
    swift_once();
  }
  _os_activity_create((void *)&_mh_execute_header, "DMFConfigurationSourceClientDelegate.operation(toSendEvents)", (os_activity_t)qword_100343300, OS_ACTIVITY_FLAG_DEFAULT);
  swift_beginAccess();
  uint64_t v0 = swift_unknownObjectRetain();
  os_activity_scope_enter(v0, &v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DMSourceClient toSendEvents Not implemented", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [objc_allocWithZone((Class)CATOperation) init];
  swift_beginAccess();
  os_activity_scope_leave(&v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  return v4;
}

id sub_100229C74()
{
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  if (qword_100340DE0 != -1) {
    swift_once();
  }
  _os_activity_create((void *)&_mh_execute_header, "DMFConfigurationSourceClientDelegate.operation(toResolveAsset)", (os_activity_t)qword_100343300, OS_ACTIVITY_FLAG_DEFAULT);
  swift_beginAccess();
  uint64_t v0 = swift_unknownObjectRetain();
  os_activity_scope_enter(v0, &v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DMSourceClient toResolveAsset Not implemented", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [objc_allocWithZone((Class)CATOperation) init];
  swift_beginAccess();
  os_activity_scope_leave(&v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_100229E28(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  type metadata accessor for Logger();
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100229EB8, 0, 0);
}

uint64_t sub_100229EB8()
{
  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = *(id *)(v0 + 32);
  id v3 = v1;
  Logger.init(subsystem:category:)();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003434B0
                                                                                              + dword_1003434B0);
  id v4 = v2;
  id v5 = v3;
  os_activity_scope_state_s v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  void *v6 = v0;
  v6[1] = sub_100229FE8;
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 32);
  return v11((uint64_t)"Daemon:userNotificationCenter.didReceiveResponse", 48, 2, v7, 1, 0, v9, v8);
}

uint64_t sub_100229FE8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10022A130, 0, 0);
  }
  else
  {
    id v3 = *(void **)(v2 + 40);

    swift_task_dealloc();
    id v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

uint64_t sub_10022A130()
{
  uint64_t v10 = v0;
  uint64_t v1 = *(void **)(v0 + 40);

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    *(void *)(v0 + 16) = sub_1000A2E70(0xD000000000000025, 0x8000000100296DC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error in %s: %@", (uint8_t *)v4, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10022A390()
{
  swift_unknownObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10022A3D8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000A516C;
  return sub_100223DE8(a1, v4, v5, v7, v6);
}

uint64_t sub_10022A498(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022A4E4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000A516C;
  return sub_1002234D8(a1, v4, v5, v7, v6);
}

uint64_t sub_10022A5A8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10022A5F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000A516C;
  return sub_100221758(a1, v4, v5, v7, v6);
}

uint64_t sub_10022A6B0()
{
  return sub_10021F698(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64));
}

uint64_t sub_10022A6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10009EE78(&qword_1003460E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022A740()
{
  uint64_t v1 = *(void *)(sub_10009EE78(&qword_1003460E0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();

  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))((char *)v0 + v3, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v0 + v3, v5);
  }
  unint64_t v7 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();

  sub_1000A0168(*(uint64_t *)((char *)v0 + v8), *(unint64_t *)((char *)v0 + v8 + 8));
  return _swift_deallocObject(v0, v8 + 16, v2 | 7);
}

uint64_t sub_10022A8C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10009EE78(&qword_1003460E0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[4];
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[2];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = (uint64_t)v1 + v4;
  uint64_t v9 = *(void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000A516C;
  return sub_10021F9CC(a1, v13, v12, v5, v6, v7, v8, v9);
}

uint64_t sub_10022AA40()
{
  long long v8 = *(_OWORD *)(v0 + 16);
  long long v6 = *(_OWORD *)(v0 + 48);
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v5 = *(_OWORD *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000A516C;
  *(void *)(v3 + 232) = v2;
  *(_OWORD *)(v3 + 216) = v5;
  *(_OWORD *)(v3 + 200) = v6;
  *(_OWORD *)(v3 + 184) = v7;
  *(_OWORD *)(v3 + 168) = v8;
  return _swift_task_switch(sub_10021FDCC, 0, 0);
}

uint64_t sub_10022AB28()
{
  swift_unknownObjectRelease();

  unint64_t v1 = *(void *)(v0 + 64);
  if (v1 >> 60 != 15) {
    sub_1000A0168(*(void *)(v0 + 56), v1);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10022ABA0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1000A516C;
  return sub_10021D324(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_10022ACA0()
{
  sub_1001D93A8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10022ACC0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10022ACF8()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to setup service interrupted");
}

uint64_t sub_10022AD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10022AD2C()
{
  return swift_release();
}

void sub_10022AD34()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to setup service invalidated");
}

void sub_10022AD58()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to settings service interrupted");
}

void sub_10022AD7C()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to settings service invalidated");
}

void sub_10022ADA0()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to public service interrupted");
}

void sub_10022ADC4()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to public service invalidated");
}

void sub_10022ADE8()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to private service interrupted");
}

void sub_10022AE0C()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to private service invalidated");
}

void sub_10022AE30()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to downtime service interrupted");
}

void sub_10022AE54()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to downtime service invalidated");
}

void sub_10022AE78()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to diagnostics service interrupted");
}

void sub_10022AE9C()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to diagnostics service invalidated");
}

void sub_10022AEC0()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to contacts service interrupted");
}

void sub_10022AEE4()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to contacts service invalidated");
}

void sub_10022AF08()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to communication service interrupted");
}

void sub_10022AF2C()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to communication service invalidated");
}

void sub_10022AF50()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to ask service interrupted");
}

void sub_10022AF74()
{
  sub_10021B520(*(void *)(v0 + 16), "Connection to ask service invalidated");
}

void sub_10022AF98()
{
  sub_10021826C(*(void **)(v0 + 16));
}

unint64_t sub_10022AFA0()
{
  unint64_t result = qword_100346190;
  if (!qword_100346190)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100346190);
  }
  return result;
}

unint64_t sub_10022AFEC()
{
  unint64_t result = qword_1003461A0;
  if (!qword_1003461A0)
  {
    sub_1000C5390(&qword_100344C80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003461A0);
  }
  return result;
}

void sub_10022B048()
{
}

uint64_t sub_10022B050()
{
  return sub_100218624();
}

uint64_t sub_10022B058()
{
  return sub_100217748();
}

uint64_t sub_10022B060()
{
  swift_unknownObjectWeakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10022B098(void (*a1)(uint64_t), uint64_t a2)
{
  sub_10021BBE4(a1, a2, v2, (uint64_t)"Analytics Handler", 17, (void (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, void, id, void (*)(uint64_t), uint64_t))sub_100126CA0);
}

void sub_10022B0D4(uint64_t *a1, uint64_t a2)
{
}

void sub_10022B0DC(void (*a1)(uint64_t), uint64_t a2)
{
  sub_10021BBE4(a1, a2, v2, (uint64_t)"Cleanup Handler", 15, (void (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, void, id, void (*)(uint64_t), uint64_t))sub_100128200);
}

void sub_10022B118()
{
  sub_1001D86DC(v0);
}

uint64_t sub_10022B134()
{
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022B16C()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10009F840;
  return _swift_task_switch(sub_10021C610, 0, 0);
}

void sub_10022B210(void *a1)
{
  sub_1002190CC(a1, *(char **)(v1 + 16));
}

uint64_t sub_10022B218(uint64_t a1)
{
  return sub_10021AAD4(a1, *(void **)(v1 + 16), (uint64_t)"xpcAlarm Stream Handler", 23, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, void, id, uint64_t))sub_1001256CC);
}

uint64_t sub_10022B254(uint64_t a1)
{
  return sub_10021AAD4(a1, *(void **)(v1 + 16), (uint64_t)"distnoted Stream Handler", 24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, void, id, uint64_t))sub_10012571C);
}

uint64_t sub_10022B294()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000A516C;
  v3[2] = v2;
  return _swift_task_switch(sub_10021B1EC, 0, 0);
}

uint64_t sub_10022B340(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000A516C;
  return sub_10021A1A8(a1, v4, v5, v6);
}

uint64_t sub_10022B3F8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10022B438(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000A516C;
  return sub_100219768(a1, v4, v5, v6);
}

uint64_t sub_10022B4EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10022B54C()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10022B584()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10022B598()
{
  sub_1000A4F28(v0 + 40);
  sub_1000A4F28(v0 + 80);
  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10022B5E8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_10022B600(void *a1)
{
  sub_1002276C8(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24), v1 + 40, (void *)(v1 + 80));
}

uint64_t sub_10022B614()
{
  sub_1000A4F28(v0 + 32);
  return _swift_deallocObject(v0, 88, 7);
}

void sub_10022B65C(uint64_t a1, char a2)
{
  sub_100106A30(a1, a2 & 1, v2[2], v2[3], v2 + 4, v2[9], v2[10]);
}

void sub_10022B670()
{
  sub_100106DE8(*(void *)(v0 + 16), *(unsigned char **)(v0 + 24));
}

uint64_t sub_10022B690(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 112);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(void *)(a2 + 112) = v4;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for DefaultsBackedCloudMirroringGenesisStateStore()
{
  return self;
}

uint64_t destroy for GenesisCloudMirroringImporter(id *a1)
{
  uint64_t v1 = (uint64_t)(a1 + 1);

  return sub_1000A4F28(v1);
}

uint64_t initializeWithCopy for GenesisCloudMirroringImporter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = v6;
  long long v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  id v9 = v3;
  v8(v4, v5, v7);
  return a1;
}

void **assignWithCopy for GenesisCloudMirroringImporter(void **a1, void **a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 1);
  uint64_t v3 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  long long v6 = (uint64_t *)(a1 + 1);
  id v7 = v3;

  sub_10022B9A4(v6, v4);
  return a1;
}

uint64_t *sub_10022B9A4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for GenesisCloudMirroringImporter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenesisCloudMirroringImporter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  sub_1000A4F28(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenesisCloudMirroringImporter(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenesisCloudMirroringImporter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenesisCloudMirroringImporter()
{
  return &type metadata for GenesisCloudMirroringImporter;
}

uint64_t sub_10022BCE4()
{
  uint64_t v1 = sub_10009EE78(&qword_1003462A8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021195C(v0, (uint64_t)&v13);
  uint64_t v5 = (_OWORD *)swift_allocObject();
  long long v6 = v14;
  v5[1] = v13;
  v5[2] = v6;
  v5[3] = v15;
  sub_10009EE78(&qword_1003462B0);
  swift_allocObject();
  v12[1] = Future.init(_:)();
  sub_10021195C(v0, (uint64_t)&v13);
  uint64_t v7 = (_OWORD *)swift_allocObject();
  long long v8 = v14;
  v7[1] = v13;
  void v7[2] = v8;
  v7[3] = v15;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10022C504;
  *(void *)(v9 + 24) = v7;
  static Subscribers.Demand.unlimited.getter();
  sub_10009EE78(&qword_1003462B8);
  sub_1001D59A4(&qword_1003462C0, &qword_1003462B0);
  sub_1001D59A4(&qword_1003462C8, &qword_1003462B8);
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  sub_1001D59A4(&qword_1003462D0, &qword_1003462A8);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v10;
}

unint64_t sub_10022BF98(uint64_t a1)
{
  uint64_t v1 = (void **)sub_1000C5860((void *)(a1 + 8), *(void *)(a1 + 32));
  unint64_t v2 = sub_100211B04(*v1);
  unint64_t v3 = v2;
  if (v2 >= 2)
  {
    sub_10009EE78(&qword_1003462D8);
    Result.publisher.getter();
    return sub_1001D587C(v3);
  }
  else
  {
    sub_1001D587C(v2);
    sub_10009EE78(&qword_1003462D8);
    return Result.publisher.getter();
  }
}

void sub_10022C044(void (*a1)(void ***), uint64_t a2, void **a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *a3;
  swift_retain();
  id v8 = [v7 cloudStore];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_10022C534;
    *(void *)(v10 + 24) = v6;
    id v11 = objc_allocWithZone((Class)NSCloudKitMirroringImportRequest);
    uint64_t v36 = sub_10022C8D8;
    uint64_t v37 = v10;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    id v34 = sub_10009D4FC;
    uint64_t v35 = &unk_100309620;
    uint64_t v12 = _Block_copy(&aBlock);
    swift_release();
    id v13 = [v11 initWithOptions:0 completionBlock:v12];
    _Block_release(v12);
    sub_10009EE78(&qword_100342BE0);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1002869B0;
    *(void *)(v14 + 32) = v9;
    uint64_t aBlock = (void **)v14;
    specialized Array._endMutation()();
    sub_1000D38E0();
    id v15 = v13;
    id v16 = v9;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 setAffectedStores:isa];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v18 = objc_allocWithZone((Class)NSError);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v20 = (void **)[v18 initWithDomain:v19 code:6 userInfo:0];

    id v30 = v20;
    char v31 = 1;
    uint64_t v21 = *a3;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = &v30;
    *(void *)(v22 + 24) = v15;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_10022CA50;
    *(void *)(v23 + 24) = v22;
    uint64_t v36 = sub_10022CA68;
    uint64_t v37 = v23;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    id v34 = sub_10022C9B4;
    uint64_t v35 = &unk_100309698;
    uint64_t v24 = _Block_copy(&aBlock);
    id v25 = v15;
    swift_retain();
    swift_release();
    [v21 performBackgroundTaskAndWait:v24];
    _Block_release(v24);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v15)
    {
      __break(1u);
    }
    else
    {
      if (v31 == 1)
      {
        uint64_t v26 = (uint64_t)v30;
        uint64_t aBlock = v30;
        LOBYTE(v33) = v31;
        swift_errorRetain();
        a1(&aBlock);

        sub_10010C8B8(v26, 1);
      }
      else
      {
      }
      sub_10010C8B8((uint64_t)v30, v31);
      swift_release();
    }
  }
  else
  {
    swift_release();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v27 = objc_allocWithZone((Class)NSError);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v29 = (void **)[v27 initWithDomain:v28 code:6 userInfo:0];

    uint64_t aBlock = v29;
    LOBYTE(v33) = 1;
    a1(&aBlock);
  }
}

void sub_10022C4B8(void (*a1)(void ***), uint64_t a2)
{
  sub_10022C044(a1, a2, (void **)(v2 + 16));
}

uint64_t sub_10022C4C4()
{
  sub_1000A4F28(v0 + 24);
  return _swift_deallocObject(v0, 64, 7);
}

unint64_t sub_10022C504()
{
  return sub_10022BF98(v0 + 16);
}

uint64_t sub_10022C50C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10022C534(uint64_t a1, char a2)
{
  return sub_100231C7C(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_10022C540(void *a1, uint64_t (*a2)(id, uint64_t))
{
  if ([a1 success])
  {
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10009DA74(v4, (uint64_t)qword_10034B3B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "genesis import completed successfully", v7, 2u);
      swift_slowDealloc();
    }

    return a2(0, 0);
  }
  else
  {
    id v9 = [a1 error];
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = objc_allocWithZone((Class)NSError);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v9 = [v10 initWithDomain:v11 code:6 userInfo:0];
    }
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10009DA74(v12, (uint64_t)qword_10034B3B8);
    swift_errorRetain();
    swift_errorRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)id v15 = 136315138;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      sub_1000A2E70(v16, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "genesis import completed with an error: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v9, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
}

uint64_t sub_10022C8A0()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022C8D8(void *a1)
{
  return sub_10022C540(a1, *(uint64_t (**)(id, uint64_t))(v1 + 16));
}

uint64_t sub_10022C8E0(void *a1, uint64_t a2, uint64_t a3)
{
  id v11 = 0;
  id v5 = [a1 executeRequest:a3 error:&v11];
  if (v5)
  {
    id v6 = v11;
  }
  else
  {
    id v7 = v11;
    uint64_t v3 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  uint64_t v8 = *(void *)a2;
  char v9 = *(unsigned char *)(a2 + 8);
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return sub_10010C8B8(v8, v9);
}

void sub_10022C9B4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_10022CA00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10022CA10()
{
  return swift_release();
}

uint64_t sub_10022CA18()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022CA50(void *a1)
{
  return sub_10022C8E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10022CA58()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022CA68()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t destroy for GenesisCloudStoreLoader(uint64_t a1)
{
  sub_1000A4F28(a1);
  sub_1000A4F28(a1 + 40);
  return swift_unknownObjectRelease();
}

_OWORD *initializeWithCopy for GenesisCloudStoreLoader(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  a1[5] = a2[5];
  swift_unknownObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for GenesisCloudStoreLoader(uint64_t *a1, uint64_t *a2)
{
  sub_10022B9A4(a1, a2);
  sub_10022B9A4(a1 + 5, a2 + 5);
  uint64_t v4 = a2[11];
  a1[10] = a2[10];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[11] = v4;
  return a1;
}

__n128 initializeWithTake for GenesisCloudStoreLoader(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for GenesisCloudStoreLoader(uint64_t a1, uint64_t a2)
{
  sub_1000A4F28(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_1000A4F28(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  swift_unknownObjectRelease();
  *(void *)(a1 + 88) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for GenesisCloudStoreLoader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenesisCloudStoreLoader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenesisCloudStoreLoader()
{
  return &type metadata for GenesisCloudStoreLoader;
}

uint64_t sub_10022CD30()
{
  uint64_t v1 = sub_10009EE78(&qword_1003462F0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  long long v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  sub_1000C5860(v0, v5);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  sub_1002119B8((uint64_t)v0, (uint64_t)v15);
  uint64_t v7 = (_OWORD *)swift_allocObject();
  long long v8 = v15[3];
  v7[3] = v15[2];
  v7[4] = v8;
  long long v9 = v15[5];
  v7[5] = v15[4];
  v7[6] = v9;
  long long v10 = v15[1];
  v7[1] = v15[0];
  void v7[2] = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10022DCB4;
  *(void *)(v11 + 24) = v7;
  static Subscribers.Demand.unlimited.getter();
  sub_10009EE78(&qword_100344C98);
  sub_1001D59A4(&qword_100344CA0, &qword_100344C98);
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  sub_1001D59A4(&qword_1003462F8, &qword_1003462F0);
  uint64_t v12 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

uint64_t sub_10022CF80(uint64_t a1)
{
  uint64_t v2 = sub_10009EE78(&qword_100346300);
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  long long v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10009EE78(&qword_100346308);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10009EE78(&qword_100346310);
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10009EE78(&qword_100346318);
  uint64_t v31 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self standardUserDefaults];
  NSString v15 = String._bridgeToObjectiveC()();
  unsigned __int8 v16 = [v14 BOOLForKey:v15];

  if (v16)
  {
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10009DA74(v17, (uint64_t)qword_10034B3B8);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "genesis import has already occurred, skipping", v20, 2u);
      swift_slowDealloc();
    }

    Just.init(_:)();
    sub_1001D5A0C();
    uint64_t v21 = v33;
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v21);
    sub_1001D59A4((unint64_t *)&unk_100346340, &qword_100346308);
    uint64_t v22 = v35;
    uint64_t v23 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v22);
  }
  else
  {
    sub_1000C5860((void *)(a1 + 40), *(void *)(a1 + 64));
    uint64_t v37 = sub_10022BCE4();
    sub_1002119B8(a1, (uint64_t)v36);
    uint64_t v24 = (_OWORD *)swift_allocObject();
    long long v25 = v36[3];
    v24[3] = v36[2];
    v24[4] = v25;
    long long v26 = v36[5];
    void v24[5] = v36[4];
    v24[6] = v26;
    long long v27 = v36[1];
    v24[1] = v36[0];
    long long v24[2] = v27;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = sub_10022DD38;
    *(void *)(v28 + 24) = v24;
    sub_10009EE78(&qword_100346320);
    sub_1001D59A4(&qword_100346328, &qword_100346320);
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    sub_10009EE78(&qword_100344C98);
    sub_1001D59A4(&qword_100346330, &qword_100346310);
    sub_1001D59A4(&qword_100344CA0, &qword_100344C98);
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
    sub_1001D59A4(&qword_100346338, &qword_100346318);
    uint64_t v23 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  }
  return v23;
}

void sub_10022D57C()
{
  id v0 = [self standardUserDefaults];
  id v1 = String._bridgeToObjectiveC()();
  [v0 setBool:1 forKey:v1];
}

uint64_t sub_10022D614@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10009EE78(&qword_100346300);
  uint64_t v21 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10009EE78(&qword_100346308);
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100340E18 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10009DA74(v8, (uint64_t)qword_10034B3B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = a1;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v18 = v2;
    uint64_t v19 = v5;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    uint64_t v23 = sub_1000A2E70(v13, v14, &v24);
    uint64_t v2 = v18;
    uint64_t v5 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "dropping genesis import error: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v20;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  Just.init(_:)();
  sub_1001D5A0C();
  Just.setFailureType<A>(to:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  sub_1001D59A4((unint64_t *)&unk_100346340, &qword_100346308);
  uint64_t v15 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  *a1 = v15;
  return result;
}

uint64_t sub_10022D9A0()
{
  uint64_t v1 = sub_10009EE78(&qword_1003462E0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  long long v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  sub_1000C5860(v0, v5);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  sub_1002119B8((uint64_t)v0, (uint64_t)v15);
  uint64_t v7 = (_OWORD *)swift_allocObject();
  long long v8 = v15[3];
  v7[3] = v15[2];
  v7[4] = v8;
  long long v9 = v15[5];
  v7[5] = v15[4];
  v7[6] = v9;
  long long v10 = v15[1];
  v7[1] = v15[0];
  void v7[2] = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10022DC80;
  *(void *)(v11 + 24) = v7;
  sub_10009EE78(&qword_100344C98);
  sub_1001D59A4(&qword_100344CA0, &qword_100344C98);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  sub_1001D59A4(&qword_1003462E8, &qword_1003462E0);
  uint64_t v12 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

void sub_10022DBDC()
{
  id v0 = [self standardUserDefaults];
  id v1 = String._bridgeToObjectiveC()();
  [v0 setBool:0 forKey:v1];
}

void sub_10022DC80()
{
}

uint64_t sub_10022DC88()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10022DCB4()
{
  return sub_10022CF80(v0 + 16);
}

uint64_t sub_10022DCBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_10022DCF0()
{
  sub_1000A4F28(v0 + 16);
  sub_1000A4F28(v0 + 56);
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 112, 7);
}

void sub_10022DD38()
{
}

uint64_t sub_10022DD40()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022DD84()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_10022DDD4(void *a1)
{
  type metadata accessor for STUnifiedTransportPayloadDictionaryKey(0);
  sub_1002319C0();
  id v2 = a1;
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_10022DE38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10009EE78(&qword_100341930);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  long long v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ScreenTimeAgent12SetupService____lazy_storage___logger;
  swift_beginAccess();
  sub_1000D10B8(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_1000B6270((uint64_t)v8);
  Logger.init(subsystem:category:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_1000D1120((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t sub_10022E030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return _swift_task_switch(sub_10022E0C4, 0, 0);
}

uint64_t sub_10022E0C4()
{
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  id v2 = (void *)swift_allocObject();
  *(void *)(v0 + 72) = v2;
  v2[3] = 0;
  v2[4] = 0;
  uint64_t v3 = (char *)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v5 = *(void **)(v0 + 56);
  v2[2] = v1;
  id v6 = v1;
  id v7 = [v5 dsid];
  sub_1001DE3B0(v7);
  uint64_t v9 = v8;
  *(void *)(v0 + 80) = v8;

  id v11 = sub_1001D7640();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v9;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  *(unsigned char *)(v0 + 138) = *(unsigned char *)(v0 + 136);
  *(unsigned char *)(v0 + 137) = 0;
  id v13 = sub_1001D7640();
  uint64_t v14 = (void *)swift_task_alloc();
  void v14[2] = v2;
  v14[3] = v9;
  v14[4] = v0 + 137;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  char v15 = *(unsigned char *)(v0 + 137);
  id v16 = sub_1001D7640();
  uint64_t v17 = swift_task_alloc();
  *(void *)(v17 + 16) = v2;
  *(void *)(v17 + 24) = v9;
  *(unsigned char *)(v17 + 32) = v15;
  sub_10009EE78(&qword_100342288);
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  if (*(void *)(v0 + 24))
  {
    id v18 = objc_allocWithZone((Class)STOpaquePasscode);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v20 = [v18 initWithPasscode:v19];
  }
  else
  {
    id v20 = 0;
  }
  *(void *)(v0 + 88) = v20;
  id v21 = sub_1001D7640();
  uint64_t v22 = swift_task_alloc();
  *(void *)(v22 + 16) = v2;
  *(void *)(v22 + 24) = v9;
  *(unsigned char *)(v22 + 32) = v15;
  type metadata accessor for ContactManagementState(0);
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v23 = *(void **)(v0 + 56);

  swift_task_dealloc();
  *(void *)(v0 + 96) = sub_1002309EC(*(void *)(v0 + 32));
  id v24 = [v23 dsid];
  *(void *)(v0 + 104) = v24;
  long long v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v25;
  *long long v25 = v0;
  v25[1] = sub_10022E5DC;
  return sub_1002313A0((uint64_t)v24);
}

uint64_t sub_10022E5DC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();

  if (v1) {
    uint64_t v5 = sub_10022E95C;
  }
  else {
    uint64_t v5 = sub_10022E744;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022E744()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void **)(v0 + 56);
  if (*(unsigned char *)(v0 + 138)) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  BOOL v5 = (uint64_t)[*(id *)(v0 + 120) integerValue] > 0;
  id v6 = objc_allocWithZone((Class)STSetupConfiguration);
  *(void *)(v0 + 40) = 0;
  id v7 = [v6 initWithUser:v3 screenTimeState:v4 passcode:v1 contactManagementState:v2 userHasContacts:v5 error:v0 + 40];
  uint64_t v8 = *(void **)(v0 + 40);
  uint64_t v9 = *(void **)(v0 + 120);
  uint64_t v10 = *(void **)(v0 + 88);
  id v11 = *(id **)(v0 + 72);
  uint64_t v12 = *(void **)(v0 + 80);
  id v13 = *(void **)(v0 + 56);
  if (v7)
  {
    id v14 = v7;
    char v15 = *(void **)(v0 + 48);
    id v16 = v8;

    swift_setDeallocating();
    sub_1000B6270((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
    swift_deallocClassInstance();
    *char v15 = v14;
  }
  else
  {
    id v18 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
  }
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10022E95C()
{
  uint64_t v1 = *(void **)(v0 + 80);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10022EB84(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_10022EC44, 0, 0);
}

uint64_t sub_10022EC44()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_100343490
                                                                                             + dword_100343490);
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10022ED78;
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8((uint64_t)"SetupService.currentConfiguration", 33, 2, v4, 1, 0, v6, v5);
}

uint64_t sub_10022ED78(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10022EF54;
  }
  else
  {

    swift_release();
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = sub_10022EEB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022EEB0()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = *(void (***)(void, void, void))(v0 + 40);

  swift_release();
  ((void (**)(void, void *, void))v2)[2](v2, v1, 0);
  _Block_release(v2);

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10022EF54()
{
  uint64_t v1 = (void (**)(void, void, void))v0[5];
  id v2 = (void *)v0[2];

  swift_release_n();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  ((void (**)(void, void, void *))v1)[2](v1, 0, v3);

  _Block_release(v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10022F014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_10022F0D4, 0, 0);
}

uint64_t sub_10022F0D4()
{
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v4 = (void *)swift_allocObject();
  *(void *)(v0 + 64) = v4;
  v4[3] = 0;
  v4[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))((uint64_t)v4 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v1);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v5 = *(void **)(v0 + 24);
  v4[2] = v3;
  id v6 = v3;
  id v7 = [v5 associatedUser];
  id v8 = [v7 dsid];
  *(void *)(v0 + 72) = v8;

  sub_1001DE3B0(v8);
  uint64_t v34 = v9;
  *(void *)(v0 + 80) = v9;
  sub_10022DE38(*(void *)(v0 + 56));
  id v11 = v8;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    log = v12;
    char v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)char v15 = 138412290;
    *(void *)(v0 + 16) = v11;
    id v16 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v11;

    uint64_t v12 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v13, "Updating configuration for: %@", v15, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v17 = *(void **)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  id v18 = [v17 screenTimeState];
  sub_10023068C((uint64_t)v18, v34, (uint64_t)v4);
  if (v18 == (id)1)
  {
    id v19 = [*(id *)(v0 + 24) passcode];
    if (v19)
    {
      uint64_t v20 = v19;
      id v21 = [v19 passcode];

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
    }
    id v25 = sub_1001D7640();
    uint64_t v26 = swift_task_alloc();
    *(void *)(v26 + 16) = v4;
    *(void *)(v26 + 24) = v34;
    *(unsigned char *)(v26 + 32) = 1;
    *(void *)(v26 + 40) = v22;
    *(void *)(v26 + 48) = v24;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    if (v24) {
      swift_bridgeObjectRelease();
    }
    id v27 = sub_1001D7640();
    uint64_t v28 = swift_task_alloc();
    *(void *)(v28 + 16) = v4;
    *(void *)(v28 + 24) = v34;
    *(unsigned char *)(v28 + 32) = 1;
    *(unsigned char *)(v28 + 33) = v24 != 0;
    NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v29 = *(void **)(v0 + 24);

    swift_task_dealloc();
    sub_100230B38((uint64_t)[v29 contactManagementState], v34, (uint64_t)v4);
  }
  id v30 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (qword_100340E00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 88) = qword_10034B370;
  swift_retain();
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_10022F6E8;
  return sub_10019F170(0);
}

uint64_t sub_10022F6E8()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10022F8E4;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10022F804;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10022F804()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = *(id **)(v0 + 64);

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10022F8E4()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = (void *)v0[9];
  swift_release();

  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10022FAEC(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_10022FBAC, 0, 0);
}

uint64_t sub_10022FBAC()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_100343480
                                                                                             + dword_100343480);
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10022FCE0;
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8((uint64_t)"SetupService.applyUpdatedConfiguration", 38, 2, v4, 1, 0, v6, v5);
}

uint64_t sub_10022FCE0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001B3C30;
  }
  else
  {

    swift_release();
    uint64_t v3 = sub_1000D6414;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022FE04(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10022FED4, 0, 0);
}

uint64_t sub_10022FED4()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[8];
  swift_retain();
  id v4 = v1;
  Logger.init(subsystem:category:)();
  sub_100128258("SetupService.promptForPasscodeFromUser", 38, 2, v2, 1, 0, v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void sub_100230190(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10022DE38((uint64_t)v6);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Setup Service - prompt for passcode from user", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v10 = self;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  sub_10009EE78(&qword_1003423D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100286230;
  v18[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18[2] = v14;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 72) = 1;
  sub_100238BAC(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [v10 sharedDescriptionWithServiceName:v11 viewControllerClassName:v12 configurationContextUserInfo:isa];

  id v17 = [objc_allocWithZone((Class)STConcretePrimitiveRemoteViewService) initWithServiceDescription:v16 listenerEndpoint:a2];
  [v17 activate];
}

uint64_t sub_1002305C8(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  void *v6 = v3;
  v6[1] = sub_1000D2AEC;
  return sub_10022FE04((uint64_t)v5);
}

void sub_10023068C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = 0;
  id v11 = sub_1001D7640();
  uint64_t v23 = a3;
  uint64_t v24 = a2;
  id v25 = &v26;
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v3)
  {
    uint64_t v22 = v8;
    if (a1 == 1)
    {
      char v13 = v26;
      id v14 = sub_1001D7640();
      __chkstk_darwin(v14);
      *(&v21 - 4) = a2;
      *(&v21 - 3) = a3;
      *((unsigned char *)&v21 - 16) = 1;
      *((unsigned char *)&v21 - 15) = v13;
      *((unsigned char *)&v21 - 14) = 1;
      NSManagedObjectContext.performAndWait<A>(_:)();

      id v15 = sub_1001D7640();
      __chkstk_darwin(v15);
      *(&v21 - 4) = a3;
      *(&v21 - 3) = a2;
      *((unsigned char *)&v21 - 16) = 1;
      NSManagedObjectContext.performAndWait<A>(_:)();
    }
    else if (a1 == 2)
    {
      id v12 = sub_1001D7640();
      __chkstk_darwin(v12);
      *(&v21 - 4) = a3;
      *(&v21 - 3) = a2;
      *((unsigned char *)&v21 - 16) = 0;
      NSManagedObjectContext.performAndWait<A>(_:)();
    }
    else
    {
      sub_10022DE38((uint64_t)v10);
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        id v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "unknown setup configuration for user", v19, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v7);
      sub_100230F34();
      swift_allocError();
      *uint64_t v20 = 0;
      swift_willThrow();
    }
  }
}

unint64_t sub_1002309EC(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >= 3)
  {
    sub_10022DE38((uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unknown contact management state", v8, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  return a1;
}

void sub_100230B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v24 = 0;
  id v11 = sub_1001D7640();
  uint64_t v20 = a3;
  uint64_t v21 = a2;
  uint64_t v22 = &v24;
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v3)
  {
    uint64_t v19 = v8;
    unsigned __int8 v12 = v24;
    if (!a1)
    {
      id v13 = sub_1001D7640();
      __chkstk_darwin(v13);
      *(&v18 - 4) = a3;
      *(&v18 - 3) = a2;
      *((unsigned char *)&v18 - 16) = v12;
      *(&v18 - 1) = 0;
      goto LABEL_8;
    }
    int v23 = v24;
    if (a1 == 1)
    {
      id v13 = sub_1001D7640();
      __chkstk_darwin(v13);
      *(&v18 - 4) = a3;
      *(&v18 - 3) = a2;
      *((unsigned char *)&v18 - 16) = v23;
      *(&v18 - 1) = 1;
      goto LABEL_8;
    }
    if (a1 == 2)
    {
      id v13 = sub_1001D7640();
      __chkstk_darwin(v13);
      *(&v18 - 4) = a3;
      *(&v18 - 3) = a2;
      *((unsigned char *)&v18 - 16) = v23;
      *(&v18 - 1) = 2;
LABEL_8:
      NSManagedObjectContext.performAndWait<A>(_:)();

      return;
    }
    sub_10022DE38((uint64_t)v10);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unknown contact management state", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v7);
    sub_100230F34();
    swift_allocError();
    *os_log_type_t v17 = 0;
    swift_willThrow();
  }
}

uint64_t sub_100230E78()
{
  sub_1000B6270(v0 + OBJC_IVAR____TtC15ScreenTimeAgent12SetupService____lazy_storage___logger);
  return swift_deallocClassInstance();
}

uint64_t sub_100230EDC()
{
  return type metadata accessor for SetupService();
}

uint64_t type metadata accessor for SetupService()
{
  uint64_t result = qword_1003463E0;
  if (!qword_1003463E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100230F34()
{
  unint64_t result = qword_1003464D0;
  if (!qword_1003464D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003464D0);
  }
  return result;
}

uint64_t sub_100230F88(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    id v2 = [v1 description];
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = v4;

    v6._uint64_t countAndFlagsBits = v3;
    v6._object = v5;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    id v7 = [self mainBundle];
    v14._object = (void *)0xEE007265626D654DLL;
    v8._uint64_t countAndFlagsBits = 0xD000000000000022;
    v8._object = (void *)0x8000000100297850;
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    v14._uint64_t countAndFlagsBits = 0x796C696D61466F6ELL;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v14)._countAndFlagsBits;

    swift_bridgeObjectRelease();
  }
  else
  {
    id v7 = [self mainBundle];
    v15._object = (void *)0xEE00726F72724520;
    v11._object = (void *)0x8000000100297830;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v15._uint64_t countAndFlagsBits = 0x6C616E7265746E49;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v7, v12, v15)._countAndFlagsBits;
  }

  return countAndFlagsBits;
}

uint64_t sub_100231158()
{
  return sub_100230F88(*v0);
}

uint64_t sub_100231164()
{
  id v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  id v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *id v5 = v1;
  v5[1] = sub_1000A516C;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1003464E0 + dword_1003464E0);
  return v6(v2, v3, v4);
}

uint64_t sub_100231224()
{
  id v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  id v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *id v5 = v1;
  v5[1] = sub_1000A516C;
  Swift::String v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_100346500 + dword_100346500);
  return v6(v2, v3, v4);
}

uint64_t sub_1002312E4()
{
  id v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  id v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *id v5 = v1;
  v5[1] = sub_10009F840;
  Swift::String v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_100346530 + dword_100346530);
  return v6(v2, v3, v4);
}

uint64_t sub_1002313A0(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  uint64_t v2 = dword_100345A50;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100231470;
  return ((uint64_t (__cdecl *)())((char *)&dword_100345A50 + v2))();
}

uint64_t sub_100231470(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 40) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_1002315E8, 0, 0);
  }
}

uint64_t sub_1002315E8()
{
  id v1 = [*(id *)(v0 + 40) members];
  sub_1000A0760(0, (unint64_t *)&qword_100342A90);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = *(void **)(v0 + 24);
  if (!(v2 >> 62))
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v5 = v3;
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_18:
    char v26 = *(void **)(v0 + 40);
    uint64_t v33 = *(void **)(v0 + 24);
    swift_bridgeObjectRelease_n();

    sub_100230F34();
    swift_allocError();
    *uint64_t v34 = v33;
    id v35 = v33;
    swift_willThrow();
LABEL_19:

    uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
LABEL_17:
  id v32 = v3;
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t v6 = 0;
  unint64_t v37 = v2 & 0xC000000000000001;
  while (1)
  {
    if (v37) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v2 + 8 * v6 + 32);
    }
    uint64_t v8 = v7;
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    id v10 = [v7 dsid];
    if (v10)
    {
      Swift::String v11 = v10;
      unint64_t v12 = v2;
      uint64_t v13 = v4;
      Swift::String v14 = *(void **)(v0 + 24);
      sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
      id v15 = v14;
      id v16 = v11;
      LOBYTE(v11) = static NSObject.== infix(_:_:)();

      uint64_t v4 = v13;
      unint64_t v2 = v12;

      if (v11) {
        break;
      }
    }

    ++v6;
    if (v9 == v4) {
      goto LABEL_18;
    }
  }
  os_log_type_t v17 = *(void **)(v0 + 24);
  swift_bridgeObjectRelease_n();

  uint64_t v18 = self;
  id v19 = v8;
  id v20 = [v18 storeForFamilyMember:v19];
  id v21 = objc_allocWithZone((Class)CNContactFetchRequest);
  sub_10009EE78(&qword_100346568);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v23 = [v21 initWithKeysToFetch:isa];

  *(void *)(v0 + 16) = 0;
  id v24 = [v20 contactCountForFetchRequest:v23 error:v0 + 16];
  id v25 = *(void **)(v0 + 16);
  char v26 = *(void **)(v0 + 40);
  if (!v24)
  {
    id v31 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_19;
  }
  id v27 = v24;
  id v28 = v25;

  uint64_t v29 = *(uint64_t (**)(id))(v0 + 8);
  return v29(v27);
}

unint64_t sub_1002319C0()
{
  unint64_t result = qword_100341270;
  if (!qword_100341270)
  {
    type metadata accessor for STUnifiedTransportPayloadDictionaryKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100341270);
  }
  return result;
}

ValueMetadata *type metadata accessor for SetupService.SetupServiceError()
{
  return &type metadata for SetupService.SetupServiceError;
}

uint64_t sub_100231A28(uint64_t a1)
{
  return sub_100231A68(a1, qword_10034B3A0);
}

uint64_t sub_100231A44(uint64_t a1)
{
  return sub_100231A68(a1, qword_10034B3B8);
}

uint64_t sub_100231A68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10009EEBC(v3, a2);
  sub_10009DA74(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

void *initializeBufferWithCopyOfBuffer for MirroringCloudStoreLoader(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for MirroringCloudStoreLoader(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for MirroringCloudStoreLoader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for MirroringCloudStoreLoader(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MirroringCloudStoreLoader(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MirroringCloudStoreLoader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MirroringCloudStoreLoader()
{
  return &type metadata for MirroringCloudStoreLoader;
}

uint64_t sub_100231C7C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  return a3(&v4);
}

uint64_t sub_100231CBC(void *a1, void *a2)
{
  uint64_t v22 = sub_10009EE78(&qword_100346570);
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  id v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10009EE78(&qword_100346578);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  __chkstk_darwin(v7);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  sub_10009EE78(&qword_1003462B0);
  swift_allocObject();
  id v12 = a1;
  id v13 = a2;
  uint64_t v25 = Future.init(_:)();
  sub_1001D59A4(&qword_1003462C0, &qword_1003462B0);
  sub_1001D5A0C();
  Publisher.mapError<A>(_:)();
  swift_release();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1002333B0;
  *(void *)(v15 + 24) = v14;
  id v16 = v12;
  id v17 = v13;
  static Subscribers.Demand.unlimited.getter();
  sub_10009EE78(&qword_100346580);
  sub_1001D59A4(&qword_100346588, &qword_100346570);
  sub_1001D59A4(&qword_100346590, &qword_100346580);
  uint64_t v18 = v22;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
  sub_1001D59A4(&qword_100346598, &qword_100346578);
  uint64_t v19 = v23;
  uint64_t v20 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v19);
  return v20;
}

uint64_t sub_100232054@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_errorRetain();
}

uint64_t sub_100232060(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(unsigned char *)(v4 + 32) = 1;
  sub_10009EE78(&qword_100346580);
  swift_allocObject();
  id v5 = a1;
  id v6 = a2;
  return Future.init(_:)();
}

uint64_t sub_1002320F4(void *a1, void *a2)
{
  uint64_t v22 = sub_10009EE78(&qword_100346570);
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  id v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10009EE78(&qword_100346578);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  __chkstk_darwin(v7);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  sub_10009EE78(&qword_1003462B0);
  swift_allocObject();
  id v12 = a1;
  id v13 = a2;
  uint64_t v25 = Future.init(_:)();
  sub_1001D59A4(&qword_1003462C0, &qword_1003462B0);
  sub_1001D5A0C();
  Publisher.mapError<A>(_:)();
  swift_release();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_100233180;
  *(void *)(v15 + 24) = v14;
  id v16 = v12;
  id v17 = v13;
  static Subscribers.Demand.unlimited.getter();
  sub_10009EE78(&qword_100346580);
  sub_1001D59A4(&qword_100346588, &qword_100346570);
  sub_1001D59A4(&qword_100346590, &qword_100346580);
  uint64_t v18 = v22;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
  sub_1001D59A4(&qword_100346598, &qword_100346578);
  uint64_t v19 = v23;
  uint64_t v20 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v19);
  return v20;
}

uint64_t sub_10023248C(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(unsigned char *)(v4 + 32) = 0;
  sub_10009EE78(&qword_100346580);
  swift_allocObject();
  id v5 = a1;
  id v6 = a2;
  return Future.init(_:)();
}

uint64_t sub_10023251C(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = a5;
  *(void *)(v11 + 24) = a3;
  *(void *)(v11 + 32) = a4;
  *(void *)(v11 + 40) = sub_1002331FC;
  *(void *)(v11 + 48) = v10;
  aBlock[4] = sub_100233248;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100213F7C;
  aBlock[3] = &unk_100309BD0;
  id v12 = _Block_copy(aBlock);
  v22[0] = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  uint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  id v16 = a3;
  a4;
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = _swiftEmptyArrayStorage;
  sub_10022AFA0();
  sub_10009EE78(&qword_100344C80);
  sub_1001D59A4((unint64_t *)&qword_1003461A0, &qword_100344C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, void))(v13 + 8))(v15, v22[0]);
  return swift_release();
}

void sub_1002327F4(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = [self persistentStoreDescriptionForConfigurationName:STPersistenceConfigurationNameCloud type:NSSQLiteStoreType];
  [v9 setShouldAddStoreAsynchronously:0];
  if (a1)
  {
    id v10 = objc_allocWithZone((Class)NSCloudKitMirroringDelegateOptions);
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 initWithContainerIdentifier:v11];

    [v12 setUseDeviceToDeviceEncryption:1];
    id v13 = [objc_allocWithZone((Class)CKContainerOptions) init];
    [v13 setUseZoneWidePCS:1];
    id v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    [v12 setValue:v14 forKey:v15];

    [v12 setAutomaticallyScheduleImportAndExportOperations:1];
    NSString v16 = String._bridgeToObjectiveC()();
    [v12 setApsConnectionMachServiceName:v16];

    id v17 = [objc_allocWithZone((Class)NSCloudKitMirroringDelegate) initWithOptions:v12];
    [v9 setOption:v17 forMirroringKey:NSPersistentStoreMirroringDelegateOptionKey];
  }
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a4;
  *(void *)(v18 + 24) = a5;
  v20[4] = sub_100233270;
  v20[5] = v18;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_10009D4FC;
  v20[3] = &unk_100309C20;
  uint64_t v19 = _Block_copy(v20);
  swift_retain();
  swift_release();
  [a2 loadPersistentStoreDescription:v9 completionHandler:v19];
  _Block_release(v19);
}

uint64_t sub_100232AB0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100233278;
  *(void *)(v7 + 24) = v6;
  uint64_t v18 = sub_10022CA68;
  uint64_t v19 = v7;
  id v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  NSString v16 = sub_10022C9B4;
  id v17 = &unk_100309C98;
  uint64_t v8 = _Block_copy(&v14);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1002332B8;
  *(void *)(v10 + 24) = v9;
  uint64_t v18 = sub_1002332F4;
  uint64_t v19 = v10;
  id v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  NSString v16 = sub_100232D28;
  id v17 = &unk_100309D10;
  NSString v11 = _Block_copy(&v14);
  swift_retain();
  swift_retain();
  swift_release();
  [a1 evaluateWithSuccess:v8 failure:v11];
  _Block_release(v8);
  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a1)
  {
    __break(1u);
    goto LABEL_5;
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void sub_100232D28(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_100232D74(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = sub_1002331FC;
  v9[5] = v8;
  aBlock[4] = sub_1002333A4;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100213F7C;
  aBlock[3] = &unk_100309D88;
  uint64_t v10 = _Block_copy(aBlock);
  v20[0] = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v20[0] - 8);
  __chkstk_darwin(v20[0]);
  id v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  id v14 = a3;
  a4;
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = _swiftEmptyArrayStorage;
  sub_10022AFA0();
  sub_10009EE78(&qword_100344C80);
  sub_1001D59A4((unint64_t *)&qword_1003461A0, &qword_100344C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, void))(v11 + 8))(v13, v20[0]);
  return swift_release();
}

uint64_t sub_100233044(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  id v8 = 0;
  if ([a1 unloadCloudPersistentStoreWithError:&v8])
  {
    id v4 = v8;
    return a3(0, 0);
  }
  else
  {
    id v6 = v8;
    uint64_t v7 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    a3(v7, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
}

uint64_t sub_100233128()
{
  return sub_100231CBC(*v0, v0[1]);
}

uint64_t sub_100233130()
{
  return sub_1002320F4(*v0, v0[1]);
}

uint64_t sub_100233138()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100233178(uint64_t a1, uint64_t a2)
{
  return sub_100232D74(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_100233180()
{
  return sub_10023248C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100233188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1002331B8(uint64_t a1, uint64_t a2)
{
  return sub_10023251C(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(unsigned char *)(v2 + 32));
}

uint64_t sub_1002331C4()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100233200()
{
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

void sub_100233248()
{
  sub_1002327F4(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100233258(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100233268()
{
  return swift_release();
}

uint64_t sub_100233270(void *a1)
{
  return sub_100232AB0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100233278()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(0, 0);
}

uint64_t sub_1002332A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002332B8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, 1);
}

uint64_t sub_1002332E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002332F4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10023331C(uint64_t a1, char a2)
{
  id v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10023335C()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002333A4()
{
  return sub_100233044(*(void **)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 32));
}

uint64_t sub_1002333B0()
{
  return sub_100232060(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002333B8()
{
  return _swift_deallocObject(v0, 33, 7);
}

void sub_100233454()
{
  id v0 = [self sharedScheduler];
  NSString v1 = String._bridgeToObjectiveC()();
  sub_1000A0760(0, (unint64_t *)&qword_100340F00);
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
  char v6 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  aBlock[4] = sub_100233A98;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10009D4FC;
  aBlock[3] = &unk_100309E50;
  uint64_t v7 = _Block_copy(aBlock);
  swift_release();
  [v0 registerForTaskWithIdentifier:v1 usingQueue:v6 launchHandler:v7];
  _Block_release(v7);
}

uint64_t sub_100233648()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10009EEBC(v0, qword_1003465A0);
  sub_10009DA74(v0, (uint64_t)qword_1003465A0);
  return Logger.init(subsystem:category:)();
}

id sub_1002336CC()
{
  if (qword_100340D90 != -1) {
    swift_once();
  }
  id v4 = (id)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v0 = (void *)swift_allocObject();
  v0[3] = 0;
  v0[4] = 0;
  NSString v1 = (char *)v0 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  if (byte_10034B308 == 1)
  {
    v0[2] = v4;
    qword_1003465B8 = (uint64_t)v0;
    return v4;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_100233810(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  __chkstk_darwin(v2);
  id v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = a1;
  Logger.init(subsystem:category:)();
  sub_100185A3C("Downtime Biome Donation", 23, 2, (uint64_t)v4, 1, 0, v5);
}

uint64_t sub_100233A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100233AAC()
{
  return swift_release();
}

Swift::Int sub_100233AB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10009EE78(&qword_1003465D0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
      do
      {
        swift_dynamicCast();
        sub_1000A0760(0, &qword_1003465C0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100234E60(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_100233D08(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10009EE78(&qword_1003465E8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100234020(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10009EE78(&qword_1003431A0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1000B8B44(v24, v35);
      }
      else
      {
        sub_1000A4F78((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1000B8B44(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100234320(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10009EE78(&qword_100345430);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *int64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100234648(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10009EE78(&qword_1003465E0);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    uint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    unint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    unint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_1000B8B44(v22, v36);
    }
    else
    {
      sub_1000A4F78((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_1000B8B44(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100234984(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = type metadata accessor for DeviceActivityEvent();
  uint64_t v5 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DeviceActivityEvent.Name();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10009EE78(&qword_100343E88);
  int v51 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v53 = v7;
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v45 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  id v43 = v2;
  int64_t v44 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v46 = v5 + 16;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v50 = v5;
  id v52 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  uint64_t v48 = v11;
  uint64_t v49 = v8;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v44) {
      break;
    }
    unint64_t v26 = v45;
    unint64_t v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v27 = v45[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v51 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v44) {
              goto LABEL_34;
            }
            unint64_t v27 = v45[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v8 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v51)
    {
      (*v18)(v10, v30, v53);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 32))(v54, v31 + v32 * v24, v55);
    }
    else
    {
      (*v47)(v10, v30, v53);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v54, v33 + v32 * v24, v55);
    }
    sub_1002383FC();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v8 = v49;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      uint64_t v8 = v49;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v53);
    uint64_t result = (*v52)(*(void *)(v13 + 56) + v32 * v22, v54, v55);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
  }
  swift_release();
  uint64_t v3 = v43;
  unint64_t v26 = v45;
  if ((v51 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100234E60(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10009EE78(&qword_1003465D0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100235134(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10009EE78(&qword_1003465D8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_100235440()
{
  NSString v1 = v0;
  sub_10009EE78(&qword_1003465E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *NSString v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002355F8()
{
  NSString v1 = v0;
  sub_10009EE78(&qword_1003431A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *NSString v1 = v4;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000A4F78(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_1000B8B44(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    NSString v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002357E0()
{
  NSString v1 = v0;
  sub_10009EE78(&qword_100345430);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *NSString v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10023599C()
{
  NSString v1 = v0;
  sub_10009EE78(&qword_1003465E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *NSString v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1000A4F78(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_1000B8B44(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100235B64()
{
  uint64_t v42 = type metadata accessor for DeviceActivityEvent();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DeviceActivityEvent.Name();
  uint64_t v44 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  BOOL v39 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009EE78(&qword_100343E88);
  char v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v46 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v31 = v46;
    uint64_t v30 = v32;
LABEL_25:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v46;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  uint64_t v43 = v3;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v45;
  uint64_t v14 = v44;
  uint64_t v37 = v45 + 16;
  uint64_t v38 = v44 + 16;
  uint64_t v35 = v45 + 32;
  uint64_t v36 = v44 + 32;
  unint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = v42;
  uint64_t v18 = v46;
  while (1)
  {
    if (v12)
    {
      unint64_t v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v47 = v9;
      unint64_t v20 = v19 | (v9 << 6);
      uint64_t v21 = v43;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v21 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    int64_t v28 = v9 + 1;
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    int64_t v47 = v28;
    unint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    unint64_t v22 = *(void *)(v14 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v21 + 48) + v22, v16);
    unint64_t v23 = *(void *)(v13 + 72) * v20;
    unint64_t v24 = *(void *)(v21 + 56) + v23;
    int64_t v25 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v41, v24, v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v18 + 48) + v22, v15, v16);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v18 + 56) + v23, v25, v17);
    int64_t v9 = v47;
  }
  int64_t v29 = v26 + 2;
  if (v29 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v30 = v32;
    uint64_t v31 = v46;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100235F0C()
{
  uint64_t v1 = v0;
  sub_10009EE78(&qword_1003465D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002360B4()
{
  uint64_t v1 = v0;
  sub_10009EE78(&qword_1003465D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    id v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *id v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100236260()
{
  uint64_t v1 = v0;
  uint64_t v56 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v56);
  id v57 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v52 = sub_100238AA0((uint64_t)_swiftEmptyArrayStorage);
  if (qword_100340E28 != -1) {
    goto LABEL_45;
  }
LABEL_2:
  p_class_meths = &OBJC_PROTOCOL___UNUserNotificationCenterDelegate.class_meths;
  id v4 = sub_1001D7640();
  sub_10009EE78((uint64_t *)&unk_100342B00);
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (v1) {
    return swift_bridgeObjectRelease();
  }
  int64_t v7 = 0;
  uint64_t v8 = v63[7];
  uint64_t v53 = (char *)(v63 + 7);
  uint64_t v55 = v63;
  uint64_t v9 = 1 << *((unsigned char *)v63 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v54 = (unint64_t)(v9 + 63) >> 6;
  *(void *)&long long v5 = 138412290;
  long long v51 = v5;
  if ((v10 & v8) != 0)
  {
LABEL_7:
    unint64_t v12 = __clz(__rbit64(v11));
    uint64_t v13 = (v11 - 1) & v11;
    unint64_t v14 = v12 | (v7 << 6);
    goto LABEL_19;
  }
  while (1)
  {
    BOOL v15 = __OFADD__(v7++, 1);
    if (v15)
    {
      __break(1u);
LABEL_45:
      swift_once();
      goto LABEL_2;
    }
    if (v7 >= v54) {
      goto LABEL_43;
    }
    unint64_t v16 = *(void *)&v53[8 * v7];
    if (!v16) {
      break;
    }
LABEL_18:
    uint64_t v13 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_19:
    uint64_t v18 = *(void **)(v55[6] + 8 * v14);
    id v19 = p_class_meths[183];
    id v20 = v18;
    id v21 = sub_1001D7640();
    __chkstk_darwin(v21);
    *((void *)&v51 - 2) = v19;
    *((void *)&v51 - 1) = v18;
    NSManagedObjectContext.performAndWait<A>(_:)();
    unint64_t v58 = v13;

    uint64_t v60 = v64;
    uint64_t v61 = v65;
    uint64_t v62 = v66;
    uint64_t v69 = v67;
    id v59 = v68;
    int64_t v22 = p_class_meths[183];
    unint64_t v23 = v63;
    id v24 = sub_1001D7640();
    __chkstk_darwin(v24);
    *((void *)&v51 - 2) = v22;
    *((void *)&v51 - 1) = v18;
    sub_1000A0760(0, &qword_1003465C0);
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v25 = v63;
    if ((v52 & 0xC000000000000001) != 0)
    {
      if (v52 < 0) {
        uint64_t v26 = v52;
      }
      else {
        uint64_t v26 = v52 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v1 = v23;
      unint64_t v27 = v23;
      id v28 = v25;
      uint64_t v29 = __CocoaDictionary.count.getter();
      p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___UNUserNotificationCenterDelegate + 32);
      if (__OFADD__(v29, 1)) {
        goto LABEL_48;
      }
      Swift::Int v30 = sub_100233AB4(v26, v29 + 1);
    }
    else
    {
      uint64_t v1 = v23;
      uint64_t v31 = v23;
      id v32 = v25;
      Swift::Int v30 = v52;
      p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___UNUserNotificationCenterDelegate + 32);
    }
    unint64_t v11 = v58;
    uint64_t v33 = (void *)v30;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v63 = v33;
    unint64_t v36 = sub_10010A230((uint64_t)v1);
    uint64_t v37 = v33[2];
    BOOL v38 = (v35 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38)) {
      goto LABEL_47;
    }
    if (v33[3] >= v39)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        LODWORD(v58) = v35;
        unint64_t v50 = v36;
        sub_100235F0C();
        unint64_t v36 = v50;
        LOBYTE(v35) = v58;
      }
    }
    else
    {
      char v40 = isUniquelyReferenced_nonNull_native;
      char v41 = v35;
      sub_100234E60(v39, v40);
      unint64_t v42 = sub_10010A230((uint64_t)v1);
      if ((v41 & 1) != (v43 & 1)) {
        goto LABEL_50;
      }
      unint64_t v36 = v42;
      LOBYTE(v35) = v41;
    }
    uint64_t v44 = v63;
    uint64_t v45 = 8 * v36;
    int64_t v52 = (int64_t)v63;
    if (v35)
    {
      uint64_t v46 = v63[7];

      *(void *)(v46 + v45) = v25;
    }
    else
    {
      v63[(v36 >> 6) + 8] |= 1 << v36;
      *(void *)(v44[6] + 8 * v36) = v1;
      *(void *)(v44[7] + 8 * v36) = v25;
      uint64_t v47 = v44[2];
      BOOL v15 = __OFADD__(v47, 1);
      uint64_t v48 = v47 + 1;
      if (v15) {
        goto LABEL_49;
      }
      v44[2] = v48;
      id v49 = v1;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_7;
    }
  }
  int64_t v17 = v7 + 1;
  if (v7 + 1 >= v54) {
    goto LABEL_43;
  }
  unint64_t v16 = *(void *)&v53[8 * v17];
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v7 + 2;
  if (v7 + 2 >= v54) {
    goto LABEL_43;
  }
  unint64_t v16 = *(void *)&v53[8 * v17];
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v7 + 3;
  if (v7 + 3 >= v54)
  {
LABEL_43:
    swift_release();
    return v52;
  }
  unint64_t v16 = *(void *)&v53[8 * v17];
  if (v16)
  {
LABEL_17:
    int64_t v7 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v54) {
      goto LABEL_43;
    }
    unint64_t v16 = *(void *)&v53[8 * v7];
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100236AA8(unint64_t a1)
{
  unint64_t v2 = v1;
  if (qword_100340E20 != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v67 = sub_10009DA74(v4, (uint64_t)qword_1003465A0);
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    int64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "A downtime donation is needed.", v7, 2u);
    swift_slowDealloc();
  }

  id v8 = (id)BiomeLibrary();
  id v76 = 0;
  id v9 = [v8 streamWithIdentifier:BMFamilyScreenTimeChildStateIdentifier error:&v76];
  swift_unknownObjectRelease();
  if (v9)
  {
    id v10 = v76;
    id v68 = [v9 source];
    v61[0] = v9;
    v61[1] = (id)v2;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v11 = __CocoaDictionary.makeIterator()();
      unint64_t v63 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      unint64_t v2 = v11 | 0x8000000000000000;
    }
    else
    {
      uint64_t v15 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v12 = ~v15;
      uint64_t v16 = *(void *)(a1 + 64);
      unint64_t v63 = a1 + 64;
      uint64_t v17 = -v15;
      if (v17 < 64) {
        uint64_t v18 = ~(-1 << v17);
      }
      else {
        uint64_t v18 = -1;
      }
      unint64_t v13 = v18 & v16;
      unint64_t v2 = a1;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    v61[3] = (id)(v2 & 0x7FFFFFFFFFFFFFFFLL);
    int64_t v62 = (unint64_t)(v12 + 64) >> 6;
    id v20 = &selRef__setupConfigurationContactManagementStateForContactManagementState_;
    *(void *)&long long v21 = 138412290;
    long long v64 = v21;
    v61[2] = (char *)&type metadata for Swift.AnyObject + 8;
    unint64_t v65 = v2;
    uint64_t v66 = v12;
    while (1)
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        uint64_t v26 = __CocoaDictionary.Iterator.next()();
        if (!v26) {
          goto LABEL_41;
        }
        uint64_t v28 = v27;
        uint64_t v75 = v26;
        sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v29 = v76;
        swift_unknownObjectRelease();
        uint64_t v75 = v28;
        sub_1000A0760(0, &qword_1003465C0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v30 = v76;
        swift_unknownObjectRelease();
        uint64_t v25 = v19;
        uint64_t v23 = v13;
        if (!v29) {
          goto LABEL_41;
        }
      }
      else
      {
        if (v13)
        {
          uint64_t v23 = (v13 - 1) & v13;
          unint64_t v24 = __clz(__rbit64(v13)) | (v19 << 6);
          uint64_t v25 = v19;
        }
        else
        {
          int64_t v31 = v19 + 1;
          if (__OFADD__(v19, 1))
          {
            __break(1u);
            goto LABEL_43;
          }
          if (v31 >= v62) {
            goto LABEL_41;
          }
          unint64_t v32 = *(void *)(v63 + 8 * v31);
          uint64_t v25 = v19 + 1;
          if (!v32)
          {
            uint64_t v25 = v19 + 2;
            if (v19 + 2 >= v62) {
              goto LABEL_41;
            }
            unint64_t v32 = *(void *)(v63 + 8 * v25);
            if (!v32)
            {
              uint64_t v25 = v19 + 3;
              if (v19 + 3 >= v62) {
                goto LABEL_41;
              }
              unint64_t v32 = *(void *)(v63 + 8 * v25);
              if (!v32)
              {
                uint64_t v25 = v19 + 4;
                if (v19 + 4 >= v62) {
                  goto LABEL_41;
                }
                unint64_t v32 = *(void *)(v63 + 8 * v25);
                if (!v32)
                {
                  uint64_t v33 = v19 + 5;
                  while (v62 != v33)
                  {
                    unint64_t v32 = *(void *)(v63 + 8 * v33++);
                    if (v32)
                    {
                      uint64_t v25 = v33 - 1;
                      goto LABEL_34;
                    }
                  }
LABEL_41:
                  sub_1000AA60C();

                  return;
                }
              }
            }
          }
LABEL_34:
          uint64_t v23 = (v32 - 1) & v32;
          unint64_t v24 = __clz(__rbit64(v32)) + (v25 << 6);
        }
        uint64_t v34 = 8 * v24;
        int v35 = *(void **)(*(void *)(v2 + 56) + v34);
        id v29 = *(id *)(*(void *)(v2 + 48) + v34);
        id v30 = v35;
        if (!v29) {
          goto LABEL_41;
        }
      }
      id v36 = objc_msgSend(v30, v20[326], v61[0]);
      uint64_t v72 = v23;
      uint64_t v73 = v25;
      BOOL v37 = v36 == (id)4 || [v30 v20[326]] == (id)2;
      BOOL v38 = v30;
      id v39 = [objc_allocWithZone((Class)NSNumber) initWithBool:v37];
      uint64_t v40 = type metadata accessor for UUID();
      uint64_t v69 = v61;
      uint64_t v41 = *(void *)(v40 - 8);
      __chkstk_darwin(v40);
      char v43 = (char *)v61 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v74 = v39;
      UUID.init()();
      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
      id v70 = v38;
      id v44 = [v38 currentDate];
      uint64_t v45 = type metadata accessor for Date();
      uint64_t v46 = *(void *)(v45 - 8);
      __chkstk_darwin(v45);
      uint64_t v48 = (char *)v61 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v71 = v29;
      id v49 = [v29 stringValue];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v50 = objc_allocWithZone((Class)BMScreenTimeChildState);
      NSString v51 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      NSString v53 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      int64_t v54 = v50;
      id v55 = v74;
      id v56 = [v54 initWithStarting:v74 eventID:v51 signalDate:isa userDSID:v53 state:1];

      (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
      id v57 = v56;
      int64_t v22 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = v64;
        *(void *)(v59 + 4) = v57;
        *uint64_t v60 = v57;
        _os_log_impl((void *)&_mh_execute_header, v22, v58, "Sending childState to biome: %@", (uint8_t *)v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        int64_t v22 = v57;
      }
      unint64_t v2 = v65;
      a1 = v72;
      uint64_t v19 = v73;

      [v68 sendEvent:v57];
      unint64_t v13 = a1;
      id v20 = &selRef__setupConfigurationContactManagementStateForContactManagementState_;
    }
  }
  id v14 = v76;
  _convertNSErrorToError(_:)();

  swift_willThrow();
}

uint64_t sub_10023729C(unint64_t a1)
{
  id v2 = [self distantFuture];
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSinceNow.getter();
  double v7 = v6;
  id v8 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v75 = v3;
  long long v64 = v8;
  uint64_t v65 = v4 + 8;
  v8((char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = __CocoaDictionary.makeIterator()();
    unint64_t v70 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = v9 | 0x8000000000000000;
  }
  else
  {
    uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v10 = ~v13;
    uint64_t v14 = *(void *)(a1 + 64);
    unint64_t v70 = a1 + 64;
    uint64_t v15 = -v13;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v11 = v16 & v14;
    unint64_t v12 = a1;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  uint64_t v66 = v10;
  uint64_t v68 = v12 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v69 = (unint64_t)(v10 + 64) >> 6;
  id v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  id v71 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v72 = (uint64_t (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v67 = (char *)&type metadata for Swift.AnyObject + 8;
  double v19 = v7;
  unint64_t v73 = v12;
LABEL_8:
  uint64_t v20 = v18;
  unint64_t v21 = v11;
  while ((v12 & 0x8000000000000000) != 0)
  {
    uint64_t v24 = __CocoaDictionary.Iterator.next()();
    if (!v24) {
      goto LABEL_37;
    }
    uint64_t v26 = v25;
    uint64_t v77 = v24;
    sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v27 = v78;
    swift_unknownObjectRelease();
    uint64_t v77 = v26;
    sub_1000A0760(0, &qword_1003465C0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v28 = v78;
    swift_unknownObjectRelease();
    uint64_t v18 = v20;
    uint64_t v22 = v21;
    if (!v27) {
      goto LABEL_37;
    }
LABEL_32:
    unint64_t v76 = v22;

    __chkstk_darwin(v34);
    unint64_t v35 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v36 = (char *)&v60 - v35;
    id v37 = [v28 nextStateChangeDate];
    uint64_t v38 = sub_10009EE78(&qword_100342B30);
    uint64_t v39 = __chkstk_darwin(v38 - 8);
    uint64_t v41 = (char *)&v60 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v37)
    {
      __chkstk_darwin(v39);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = *v72;
      char v43 = (char *)&v60 - v35;
      uint64_t v44 = v75;
      (*v72)(v41, v43, v75);
      (*v74)(v41, 0, 1, v44);
      if ((*v71)(v41, 1, v44) != 1)
      {
        uint64_t v45 = v42(v36, v41, v75);
        unint64_t v63 = &v60;
        __chkstk_darwin(v45);
        int64_t v62 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        id v46 = [self autoupdatingCurrentCalendar];
        uint64_t v47 = type metadata accessor for Calendar();
        uint64_t v48 = *(void *)(v47 - 8);
        __chkstk_darwin(v47);
        id v50 = (char *)&v60 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
        static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

        Class v51 = Calendar._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
        Class v52 = isa;
        id v53 = (id)STLocalDateFromUTCErasedDate();

        int64_t v54 = v62;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSinceNow.getter();
        double v56 = v55;

        if (v56 < v19) {
          double v19 = v56;
        }
        id v57 = v54;
        uint64_t v58 = v75;
        uint64_t v59 = v64;
        v64(v57, v75);
        uint64_t result = v59(v36, v58);
        unint64_t v12 = v73;
        unint64_t v11 = v76;
        goto LABEL_8;
      }
    }
    else
    {
      (*v74)(v41, 1, 1, v75);
    }

    uint64_t result = sub_1000AA370((uint64_t)v41);
    uint64_t v20 = v18;
    unint64_t v21 = v76;
    unint64_t v12 = v73;
  }
  if (v21)
  {
    uint64_t v22 = (v21 - 1) & v21;
    unint64_t v23 = __clz(__rbit64(v21)) | (v20 << 6);
    uint64_t v18 = v20;
    goto LABEL_31;
  }
  int64_t v29 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    return result;
  }
  if (v29 >= v69) {
    goto LABEL_37;
  }
  unint64_t v30 = *(void *)(v70 + 8 * v29);
  uint64_t v18 = v20 + 1;
  if (v30) {
    goto LABEL_30;
  }
  uint64_t v18 = v20 + 2;
  if (v20 + 2 >= v69) {
    goto LABEL_37;
  }
  unint64_t v30 = *(void *)(v70 + 8 * v18);
  if (v30) {
    goto LABEL_30;
  }
  uint64_t v18 = v20 + 3;
  if (v20 + 3 >= v69) {
    goto LABEL_37;
  }
  unint64_t v30 = *(void *)(v70 + 8 * v18);
  if (v30) {
    goto LABEL_30;
  }
  uint64_t v18 = v20 + 4;
  if (v20 + 4 >= v69) {
    goto LABEL_37;
  }
  unint64_t v30 = *(void *)(v70 + 8 * v18);
  if (v30)
  {
LABEL_30:
    uint64_t v22 = (v30 - 1) & v30;
    unint64_t v23 = __clz(__rbit64(v30)) + (v18 << 6);
LABEL_31:
    uint64_t v32 = 8 * v23;
    uint64_t v33 = *(void **)(*(void *)(v12 + 56) + v32);
    id v27 = *(id *)(*(void *)(v12 + 48) + v32);
    id v28 = v33;
    if (!v27) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  uint64_t v31 = v20 + 5;
  while (v69 != v31)
  {
    unint64_t v30 = *(void *)(v70 + 8 * v31++);
    if (v30)
    {
      uint64_t v18 = v31 - 1;
      goto LABEL_30;
    }
  }
LABEL_37:
  sub_1000AA60C();
  if (v19 == v7) {
    return 0;
  }
  else {
    return *(void *)&v19;
  }
}

void sub_1002379D8(void *a1)
{
  if (qword_100340E20 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10009DA74(v3, (uint64_t)qword_1003465A0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    double v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Checking if a downtime donation is needed.", v6, 2u);
    swift_slowDealloc();
  }

  if (qword_100340E28 != -1) {
    swift_once();
  }
  id v7 = sub_1001D7640();
  __chkstk_darwin(v7);
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v1)
  {

    return;
  }

  id v8 = v54[0];
  id v9 = v55;
  if (v56)
  {
    uint64_t v10 = sub_100236260();
    unint64_t v14 = v10;
    if ((v10 & 0xC000000000000001) != 0)
    {
      if (__CocoaDictionary.count.getter())
      {
LABEL_18:
        sub_100236AA8(v14);
        if (a1)
        {
          id v53 = a1;
          uint64_t v17 = Logger.logObject.getter();
          os_log_type_t v18 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v17, v18))
          {
            double v19 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)double v19 = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, v18, "Background System Task detected in this block. Mark this task as complete.", v19, 2u);
            swift_slowDealloc();
          }

          [v53 setTaskCompleted];
        }
        Class v51 = self;
        id v20 = [v51 sharedScheduler];
        NSString v21 = String._bridgeToObjectiveC()();
        id v22 = [v20 taskRequestForIdentifier:v21];

        if (v22)
        {
          unint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v25 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v25 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, v24, "There is an existing task request. Cancel this one and create a new one.", v25, 2u);
            swift_slowDealloc();
          }

          id v26 = [v51 sharedScheduler];
          NSString v27 = String._bridgeToObjectiveC()();
          v54[0] = 0;
          unsigned int v28 = [v26 cancelTaskRequestWithIdentifier:v27 error:v54];

          if (!v28)
          {
            id v48 = v54[0];
            swift_bridgeObjectRelease();
            _convertNSErrorToError(_:)();

            swift_willThrow();
            goto LABEL_44;
          }
          id v29 = v54[0];
        }
        id v30 = objc_allocWithZone((Class)BGNonRepeatingSystemTaskRequest);
        NSString v31 = String._bridgeToObjectiveC()();
        id v32 = [v30 initWithIdentifier:v31];

        *(double *)&uint64_t v33 = COERCE_DOUBLE(sub_10023729C(v14));
        if ((v34 & 1) == 0)
        {
          double v35 = *(double *)&v33;
          swift_bridgeObjectRelease();
          double v36 = v35;
          [v32 setScheduleAfter:v35];
          id v37 = [v51 sharedScheduler];
          v54[0] = 0;
          unsigned int v38 = [v37 submitTaskRequest:v32 error:v54];

          if (v38)
          {
            id v39 = v54[0];
            uint64_t v40 = Logger.logObject.getter();
            os_log_type_t v41 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v40, v41))
            {
              Class v52 = v32;
              uint64_t v42 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v42 = 134217984;
              v54[0] = *(id *)&v36;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v40, v41, "Scheduled the next donation to occur after %f seconds", v42, 0xCu);
LABEL_38:
              swift_slowDealloc();

LABEL_44:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_13;
            }
          }
          else
          {
            id v49 = v54[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
          }

          goto LABEL_44;
        }
        Class v52 = v32;
        swift_bridgeObjectRetain();
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v40, v43))
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_44;
        }
        os_log_type_t v50 = v43;
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        v54[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315138;
        sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
        sub_1000A0760(0, &qword_1003465C0);
        sub_100238368();
        swift_bridgeObjectRetain();
        uint64_t v45 = Dictionary.description.getter();
        unint64_t v47 = v46;
        swift_bridgeObjectRelease();
        sub_1000A2E70(v45, v47, (uint64_t *)v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v50, "Failed to schedule next donation. Could not calculate next interval from given configurations: %s", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_38;
      }
    }
    else if (*(void *)(v10 + 16))
    {
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v15, "No managed users with downtime configurations detected. No need to donate.", v16, 2u);
      swift_slowDealloc();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
LABEL_14:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v11, v12)) {
    goto LABEL_14;
  }
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v13 = 0;
  _os_log_impl((void *)&_mh_execute_header, v11, v12, "User is not a managing member. No need to donate.", v13, 2u);
  swift_slowDealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
}

unint64_t sub_100238368()
{
  unint64_t result = qword_1003465C8;
  if (!qword_1003465C8)
  {
    sub_1000A0760(255, (unint64_t *)&qword_100342AE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003465C8);
  }
  return result;
}

void sub_1002383C4(uint64_t *a1@<X8>)
{
}

void sub_1002383E0(void *a1@<X8>)
{
  sub_1001E1B54(*(void **)(v1 + 24), a1);
}

unint64_t sub_1002383FC()
{
  unint64_t result = qword_1003431F0;
  if (!qword_1003431F0)
  {
    type metadata accessor for DeviceActivityEvent.Name();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003431F0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SyncTriggerEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100238520);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncTriggerEvent()
{
  return &type metadata for SyncTriggerEvent;
}

uint64_t sub_100238558(unsigned __int8 a1)
{
  uint64_t result = 0xD000000000000012;
  if (a1 >= 2u) {
    return 0x6C61756E616DLL;
  }
  return result;
}

uint64_t sub_1002385B0()
{
  return sub_100238558(*v0);
}

unint64_t sub_1002385BC()
{
  unint64_t result = qword_1003465F0;
  if (!qword_1003465F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003465F0);
  }
  return result;
}

unint64_t sub_100238610(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78(&qword_1003431A0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000D9F9C(v6, (uint64_t)&v15, &qword_1003431A8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10010A024(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000B8B44(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100238748(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78(&qword_100345430);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10010A024(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10023886C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78((uint64_t *)&unk_1003468E0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10010A024(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100238980(uint64_t a1)
{
  return sub_100238998(a1, &qword_1003468C0);
}

unint64_t sub_10023898C(uint64_t a1)
{
  return sub_100238998(a1, &qword_1003468B8);
}

unint64_t sub_100238998(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10010A104((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10) = v7;
    *(void *)(v3[7] + v10) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100238AA0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78(&qword_1003465D0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_10010A230((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100238BAC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78(&qword_100346880);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000D9F9C(v6, (uint64_t)v15, &qword_100346888);
    unint64_t result = sub_10010A0C0((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000B8B44(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100238CF0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78(&qword_1003468B0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    id v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_10010A024(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100238E0C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_100238E40, 0, 0);
}

uint64_t sub_100238E40()
{
  uint64_t v121 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  uint64_t v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 264) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  id v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    char v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  long long v11 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unsigned int v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_100259ABC();
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_10025A220(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  BOOL v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)id v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      long long v11 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_100259ABC();
    uint64_t v29 = swift_allocError();
    *double v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 73) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        id v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_100259ABC();
      swift_allocError();
      *Class v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    double v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        id v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          Swift::String v113 = (void *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *Swift::String v113 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v98 = *(void *)(v0 + 232);
        sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v99 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v100 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v98, v100);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v116 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        unsigned char *v104 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v105, v106))
      {
        unint64_t v107 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v107 = 138412290;
        swift_errorRetain();
        uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v116 = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v108 = v109;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "The preflight error %@ did not result in a TTR.", v107, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v110 = *(void *)(v0 + 232);
      sub_10023C5B0(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v111 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v110, v111);
      goto LABEL_75;
    }
    char v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    id v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          int64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)int64_t v62 = 136315138;
          v120[0] = v63;
          swift_bridgeObjectRetain();
          uint64_t *v56 = sub_1000A2E70(v59, v58, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v101 = *(void *)(v0 + 232);
        sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *id v102 = v59;
        v102[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v103 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v101, v103);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[4]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[4])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5B0(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v112 = *(uint64_t (**)(void))(v0 + 8);
        return v112();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v118 = *(unsigned char *)(v0 + 290);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v115 = *(void *)(v0 + 216);
      uint64_t v117 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v115;
      *(void *)(v89 + 8) = v117;
      *(unsigned char *)(v89 + 16) = v118;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_100341D50, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 291);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      double v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      long long v11 = (unsigned char *)(v1 + 72);
      unint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        long long v11 = (unsigned char *)(v1 + 72);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      *id v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    id v53 = (uint8_t *)swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)id v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  char v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }
  uint64_t v95 = *(int **)(v0 + 240);

  uint64_t v119 = (uint64_t (*)(void))((char *)v95 + *v95);
  uint64_t v96 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v96;
  void *v96 = v0;
  v96[1] = sub_10023A3A0;
  return v119();
}

uint64_t sub_10023A3A0()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10023A554;
  }
  else {
    uint64_t v2 = sub_10023A4B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023A4B4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10023A554()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
  {
    swift_errorRelease();
    BOOL v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_100259ABC();
    swift_allocError();
    *os_log_type_t v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        *id v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        char v56 = (uint8_t *)swift_slowAlloc();
        id v57 = (void *)swift_slowAlloc();
        *(_DWORD *)char v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5B0(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    double v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        id v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *Class v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->Class isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5B0(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 290);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100341D50, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    *char v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

unint64_t sub_10023B30C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_1003431A0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  os_log_type_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  char v10 = (char *)&type metadata for Any + 8;
  id v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000AA60C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    os_log_type_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000B8B44(v6, v7);
    sub_1000B8B44(v7, v40);
    sub_1000B8B44(v40, &v38);
    unint64_t result = sub_10010A024(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      BOOL v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      os_log_type_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *os_log_type_t v17 = v35;
      v17[1] = v36;
      char v10 = v16;
      id v11 = v15;
      uint64_t v1 = v14;
      os_log_type_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_1000A4F28((uint64_t)v18);
      unint64_t result = (unint64_t)sub_1000B8B44(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    os_log_type_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *os_log_type_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_1000B8B44(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10023B678(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_100346880);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  os_log_type_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    os_log_type_t v17 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    sub_1000A4F78(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(void *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    *(void *)&v36[0] = v17;
    type metadata accessor for STUnifiedTransportPayloadDictionaryKey(0);
    id v18 = v17;
    swift_dynamicCast();
    sub_1000B8B44((_OWORD *)((char *)v37 + 8), v31);
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000B8B44(v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000B8B44(v35, v36);
    sub_1000B8B44(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000B8B44(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000AA60C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10023BA40(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_100346880);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  os_log_type_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    os_log_type_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000A4F78(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    _OWORD v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000B8B44(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000B8B44(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000B8B44(v36, v37);
    sub_1000B8B44(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000B8B44(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1000AA60C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10023BE08(uint64_t a1)
{
  return sub_10023BE20(a1, (uint64_t *)&unk_100342AF0);
}

uint64_t sub_10023BE14(uint64_t a1)
{
  return sub_10023BE20(a1, &qword_100341F28);
}

uint64_t sub_10023BE20(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_100346880);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v27) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v28 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
LABEL_28:
    *(void *)&v38[0] = *(void *)(*(void *)(a1 + 48) + 8 * v13);
    uint64_t v18 = *(void **)&v38[0];
    type metadata accessor for STUnifiedTransportPayloadDictionaryKey(0);
    id v19 = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10009EE78(a2);
    swift_dynamicCast();
    long long v34 = v30;
    long long v35 = v31;
    uint64_t v36 = v32;
    sub_1000B8B44(&v33, v37);
    long long v30 = v34;
    long long v31 = v35;
    uint64_t v32 = v36;
    sub_1000B8B44(v37, v38);
    sub_1000B8B44(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v20 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v7[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v21) & ~*(void *)&v7[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v7[8 * v22];
      }
      while (v26 == -1);
      unint64_t v10 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    uint64_t result = (uint64_t)sub_1000B8B44(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  int64_t v17 = v9 + 5;
  if (v9 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1000AA60C();
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v27) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10023C1E8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_100346880);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    int64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    id v19 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v37[0] = *v17;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    v19;
    swift_dynamicCast();
    sub_1000A0760(0, &qword_100342B40);
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000B8B44(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000B8B44(v36, v37);
    sub_1000B8B44(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000B8B44(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1000AA60C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10023C5B0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v17 = a1;
  uint64_t v2 = type metadata accessor for CocoaError();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if (swift_dynamicCast())
  {
    unint64_t v6 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v7 = v6((char *)v16 - v5, v2);
    v16[2] = v16;
    __chkstk_darwin(v7);
    uint64_t v17 = v1;
    swift_errorRetain();
    swift_dynamicCast();
    sub_100259C00(&qword_1003467B0, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v8 = Error.localizedDescription.getter();
    uint64_t v10 = v9;
    sub_10009EE78(&qword_1003467B8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100286230;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 48) = v8;
    *(void *)(inited + 56) = v10;
    unint64_t v13 = sub_100238748(inited);
    v16[1] = v16;
    __chkstk_darwin(v13);
    uint64_t v14 = type metadata accessor for CocoaError.Code();
    __chkstk_darwin(v14 - 8);
    sub_100259C00(&qword_1003467C0, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    _BridgedStoredNSError.code.getter();
    sub_10023B30C(v13);
    swift_bridgeObjectRelease();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v1 = CocoaError._nsError.getter();
    v6((char *)v16 - v5, v2);
    v6((char *)v16 - v5, v2);
  }
  else
  {
    swift_errorRetain();
  }
  return v1;
}

uint64_t sub_10023C8B4()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for ATQuestion.Topic());
  uint64_t result = ATQuestion.Topic.init(rawValue:)();
  qword_10034B3D0 = result;
  return result;
}

uint64_t sub_10023C904@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10009EE78(&qword_100341930);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ScreenTimeAgent10AskService____lazy_storage___logger;
  swift_beginAccess();
  sub_1000D9F9C(v9, (uint64_t)v8, &qword_100341930);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_1000A4FD8((uint64_t)v8, &qword_100341930);
  Logger.init(subsystem:category:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_1000D1120((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t sub_10023CB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10023CBF4, 0, 0);
}

uint64_t sub_10023CBF4()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 48);
  sub_10023C904(*(void *)(v0 + 72));
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 48);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543874;
    id v8 = [v5 timeRequested];
    if (v8) {
      *(void *)(v0 + 32) = v8;
    }
    else {
      *(void *)(v0 + 16) = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v31 = *(void *)(v0 + 64);
    unint64_t v13 = *(void **)(v0 + 48);
    uint64_t v32 = *(void *)(v0 + 56);
    uint64_t v33 = *(void *)(v0 + 72);
    void *v7 = v8;
    *(_WORD *)(v6 + 12) = 1026;
    *(_DWORD *)(v0 + 176) = [v13 oneMoreMinute];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 18) = 2082;
    id v14 = [v13 requestedResourceIdentifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    *(void *)(v0 + 24) = sub_1000A2E70(v15, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "approveException called for time: %{public}@, oneMoreMinute %{BOOL,public}d for %{public}s", (uint8_t *)v6, 0x1Cu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v12 = *(void **)(v0 + 48);
    uint64_t v11 = *(void *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v18 = *(void *)(v0 + 56);
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t v20 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  unint64_t v21 = (void *)swift_allocObject();
  *(void *)(v0 + 80) = v21;
  v21[3] = 0;
  void v21[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))((uint64_t)v21 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v18);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  unint64_t v22 = *(void **)(v0 + 48);
  v21[2] = v20;
  id v23 = v20;
  if ([v22 oneMoreMinute])
  {
    Swift::Int v24 = 60;
LABEL_15:
    sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
    Class isa = NSNumber.init(integerLiteral:)(v24).super.super.isa;
    goto LABEL_16;
  }
  Class isa = (Class)[*(id *)(v0 + 48) timeRequested];
  if (!isa)
  {
    Swift::Int v24 = 0;
    goto LABEL_15;
  }
LABEL_16:
  *(void *)(v0 + 88) = isa;
  uint64_t v27 = type metadata accessor for Date();
  *(void *)(v0 + 96) = v27;
  *(void *)(v0 + 104) = *(void *)(v27 - 8);
  uint64_t v28 = swift_task_alloc();
  *(void *)(v0 + 112) = v28;
  long long v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v29;
  void *v29 = v0;
  v29[1] = sub_10023D158;
  uint64_t v30 = *(void *)(v0 + 48);
  return sub_10024C218(v28, v30, (uint64_t)isa, (uint64_t)v21);
}

uint64_t sub_10023D158()
{
  id v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10023D7C4;
  }
  else
  {
    (*(void (**)(void, void))(v2[13] + 8))(v2[14], v2[12]);
    uint64_t v3 = sub_10023D2B8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023D2B8()
{
  swift_task_dealloc();
  if (qword_100340E00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 136) = qword_10034B370;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10023D3CC;
  return sub_10019F170(0);
}

uint64_t sub_10023D3CC()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_10023D874;
  }
  else
  {
    swift_release();
    id v2 = sub_10023D51C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023D51C()
{
  if (qword_100340D58 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10034B2A8;
  *(void *)(v0 + 160) = qword_10034B2A8;
  swift_retain();
  return _swift_task_switch(sub_10023D5F8, v1, 0);
}

uint64_t sub_10023D5F8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  sub_1000B6F8C();
  *(void *)(v0 + 168) = v1;
  swift_release();
  if (v1) {
    id v2 = sub_10023D924;
  }
  else {
    id v2 = sub_10023D6B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023D6B4()
{
  uint64_t v1 = *(id **)(v0 + 80);

  swift_setDeallocating();
  sub_1000A4FD8((uint64_t)v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10023D7C4()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10023D874()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release();

  swift_release();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10023D924()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10023DB44(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_10023DC04, 0, 0);
}

uint64_t sub_10023DC04()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_100343468
                                                                                             + dword_100343468);
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001B47F4;
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8((uint64_t)"AskService.approveException", 27, 2, v4, 1, 0, v5, v6);
}

uint64_t sub_10023DD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[44] = a4;
  v5[45] = a5;
  v5[42] = a2;
  v5[43] = a3;
  uint64_t v6 = type metadata accessor for Logger();
  v5[46] = v6;
  v5[47] = *(void *)(v6 - 8);
  v5[48] = swift_task_alloc();
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  v5[51] = swift_task_alloc();
  v5[52] = swift_task_alloc();
  v5[53] = swift_task_alloc();
  return _swift_task_switch(sub_10023DE68, 0, 0);
}

uint64_t sub_10023DE68()
{
  uint64_t v103 = v0;
  id v1 = *(void **)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 344);
  sub_10023C904(*(void *)(v0 + 424));
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(v0 + 432) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  *(void *)(v0 + 440) = v4;
  *(void *)(v0 + 448) = *(void *)(v4 + 64);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v0 + 456) = v7;
  *(void *)(v0 + 464) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v100 = v6;
  uint64_t v94 = v7;
  v7(v6, v2, v3);
  id v8 = v1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  uint64_t v98 = v9;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v90 = *(void *)(v0 + 352);
    uint64_t v92 = *(void *)(v0 + 360);
    uint64_t v11 = v5;
    uint64_t v12 = swift_slowAlloc();
    os_log_type_t v93 = (void *)swift_slowAlloc();
    v102[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446722;
    sub_100259C00((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 304) = sub_1000A2E70(v13, v14, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v96(v100, v3);
    *(_WORD *)(v12 + 12) = 2082;
    if (v90) {
      uint64_t v15 = 0x6F72707061736964;
    }
    else {
      uint64_t v15 = 0x6465766F72707061;
    }
    if (v90) {
      unint64_t v16 = 0xEB00000000646576;
    }
    else {
      unint64_t v16 = 0xE800000000000000;
    }
    *(void *)(v0 + 312) = sub_1000A2E70(v15, v16, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2114;
    if (v92)
    {
      *(void *)(v0 + 328) = v8;
      id v17 = v8;
    }
    else
    {
      *(void *)(v0 + 320) = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v23 = *(void *)(v0 + 424);
    uint64_t v24 = *(void *)(v0 + 368);
    uint64_t v25 = *(void *)(v0 + 376);
    void *v93 = *(void *)(v0 + 360);

    _os_log_impl((void *)&_mh_execute_header, v98, v10, "Begin handling answer for request %{public}s, answer:%{public}s, time approved:%{public}@", (uint8_t *)v12, 0x20u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v22(v23, v24);
    swift_task_dealloc();
    unint64_t v21 = v96;
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 424);
    uint64_t v19 = *(void *)(v0 + 368);
    uint64_t v20 = *(void *)(v0 + 376);
    unint64_t v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v21(v100, v3);

    swift_task_dealloc();
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v22(v18, v19);
  }
  *(void *)(v0 + 472) = v22;
  *(void *)(v0 + 480) = v21;
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v27 = *(void *)(v0 + 368);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v28 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  long long v29 = (void *)swift_allocObject();
  *(void *)(v0 + 488) = v29;
  v29[3] = 0;
  v29[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))((uint64_t)v29 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v27);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v97 = v21;
  uint64_t v30 = *(objc_class **)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 344);
  v29[2] = v28;
  id v32 = v28;
  uint64_t v33 = (void *)sub_100250488(v30);
  *(void *)(v0 + 496) = v33;
  id v34 = sub_1001D7640();
  uint64_t v35 = swift_task_alloc();
  *(void *)(v35 + 16) = v29;
  *(void *)(v35 + 24) = v31;
  sub_1000A0760(0, &qword_1003467C8);
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v38 = *(void *)(v0 + 344);
  uint64_t v37 = *(void *)(v0 + 352);

  swift_task_dealloc();
  long long v39 = *(void **)(v0 + 288);
  *(void *)(v0 + 504) = v39;
  id v40 = sub_1001D7640();
  uint64_t v41 = (void *)swift_task_alloc();
  void v41[2] = v29;
  v41[3] = v38;
  v41[4] = v37;
  v41[5] = v33;
  NSManagedObjectContext.performAndWait<A>(_:)();

  uint64_t v101 = v39;
  swift_task_dealloc();
  id v43 = sub_1001D7640();
  uint64_t v44 = swift_task_alloc();
  *(void *)(v44 + 16) = v29;
  *(void *)(v44 + 24) = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v45 = *(void *)(v0 + 352);

  swift_task_dealloc();
  uint64_t v46 = *(void **)(v0 + 104);
  *(void *)(v0 + 512) = v46;
  *(void *)(v0 + 520) = *(void *)(v0 + 120);
  *(void *)(v0 + 528) = *(void *)(v0 + 136);
  *(void *)(v0 + 536) = *(void *)(v0 + 152);
  uint64_t v47 = *(void **)(v0 + 176);
  *(void *)(v0 + 544) = *(void *)(v0 + 168);
  unint64_t v88 = v47;
  *(void *)(v0 + 552) = v47;
  id v48 = [objc_allocWithZone((Class)STAskForTimeResponse) init];
  *(void *)(v0 + 560) = v48;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v48 setAssociatedRequestIdentifier:isa];

  [v48 setAnswer:v45];
  uint64_t v91 = v46;
  [v48 setRespondingUserDSID:v46];
  [v48 setAmountGranted:v33];
  uint64_t v50 = type metadata accessor for Date();
  *(void *)(v0 + 568) = v50;
  uint64_t v51 = *(void *)(v50 - 8);
  *(void *)(v0 + 576) = *(void *)(v51 + 64);
  uint64_t v52 = swift_task_alloc();
  static Date.now.getter();
  Class v53 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  *(void *)(v0 + 584) = v54;
  *(void *)(v0 + 592) = (v51 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v54(v52, v50);
  swift_task_dealloc();
  unint64_t v89 = v48;
  [v48 setTimeStamp:v53];

  id v55 = [v101 requestingUserDSID];
  *(void *)(v0 + 600) = v55;
  if (v55)
  {
    id v56 = v55;
    id v57 = v55;
    id v58 = sub_1001D7640();
    uint64_t v59 = swift_task_alloc();
    *(void *)(v59 + 16) = v29;
    *(void *)(v59 + 24) = v56;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    os_log_type_t v66 = *(void **)(v0 + 192);
    *(void *)(v0 + 608) = v66;
    *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 208);
    uint64_t v67 = *(void *)(v0 + 224);
    *(void *)(v0 + 632) = v67;
    *(void *)(v0 + 640) = *(void *)(v0 + 240);
    uint64_t v68 = *(void **)(v0 + 264);
    *(void *)(v0 + 648) = *(void *)(v0 + 256);
    *(void *)(v0 + 656) = v68;
    if (v67)
    {
      uint64_t v69 = *(void *)(v0 + 400);
      uint64_t v70 = *(void *)(v0 + 344);
      swift_bridgeObjectRetain();
      sub_10023C904(v69);
      uint64_t v71 = swift_task_alloc();
      v94(v71, v70, v3);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.default.getter();
      BOOL v74 = os_log_type_enabled(v72, v73);
      uint64_t v75 = *(void *)(v0 + 400);
      uint64_t v76 = *(void *)(v0 + 368);
      if (v74)
      {
        uint64_t v99 = *(void *)(v0 + 368);
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        v102[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = 136446210;
        uint64_t v78 = UUID.uuidString.getter();
        *(void *)(v0 + 296) = sub_1000A2E70(v78, v79, v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v97(v71, v3);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Sending response via family messaging %{public}s", v77, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v22(v75, v99);
        swift_task_dealloc();
      }
      else
      {
        v97(v71, v3);

        swift_task_dealloc();
        v22(v75, v76);
      }
      if (qword_100340DB0 != -1) {
        swift_once();
      }
      *(void *)(v0 + 664) = qword_10034B338;
      uint64_t v86 = dword_100345A50;
      swift_retain();
      uint64_t v87 = (void *)swift_task_alloc();
      *(void *)(v0 + 672) = v87;
      *uint64_t v87 = v0;
      v87[1] = sub_10023ED90;
      return ((uint64_t (__cdecl *)())((char *)&dword_100345A50 + v86))();
    }
    uint64_t v95 = v66;
    sub_10023C904(*(void *)(v0 + 408));
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "The requesting child does not have an appleID in the local database.", v82, 2u);
      swift_slowDealloc();
    }
    uint64_t v83 = *(void *)(v0 + 408);
    uint64_t v84 = *(void *)(v0 + 368);

    v22(v83, v84);
    sub_100253B48();
    swift_allocError();
    *unint64_t v85 = 1;
    swift_willThrow();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10023C904(*(void *)(v0 + 416));
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      int64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "The AskForMore request in the local database does not have a DSID for the requesting child.", v62, 2u);
      swift_slowDealloc();
    }
    uint64_t v63 = *(void *)(v0 + 416);
    uint64_t v64 = *(void *)(v0 + 368);

    v22(v63, v64);
    sub_100253B48();
    swift_allocError();
    unsigned char *v65 = 2;
    swift_willThrow();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
  return v42();
}

uint64_t sub_10023ED90(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[85] = a1;
  v4[86] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[83];
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[90] = v1;
    uint64_t v6 = sub_10023F24C;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = sub_10023EF38;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10023EF38()
{
  uint64_t v1 = *(void *)(v0 + 688);
  sub_1000F1670(*(void **)(v0 + 560), *(void **)(v0 + 680), *(void *)(v0 + 624), *(void *)(v0 + 632));
  uint64_t v2 = *(void **)(v0 + 680);
  swift_release();

  swift_bridgeObjectRelease();
  if (v1)
  {
    *(void *)(v0 + 720) = v1;
    uint64_t v3 = sub_10023F24C;
  }
  else
  {
    uint64_t v3 = sub_10023F01C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023F01C()
{
  *(void *)(v0 + 696) = [objc_allocWithZone((Class)PeopleClient) init];
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 704) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10023F0F8;
  return PeopleClient.canSendFamilyScreenTimeRequestIMessage()();
}

uint64_t sub_10023F0F8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 712) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10023FCDC;
  }
  else
  {
    *(unsigned char *)(v4 + 99) = a1 & 1;
    uint64_t v5 = sub_10023F3E4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10023F24C()
{
  uint64_t v1 = *(void **)(v0 + 656);
  uint64_t v2 = *(void **)(v0 + 600);
  uint64_t v3 = *(void **)(v0 + 560);
  uint64_t v4 = *(void **)(v0 + 552);
  uint64_t v6 = *(void **)(v0 + 504);
  uint64_t v5 = *(void **)(v0 + 512);
  uint64_t v7 = *(void **)(v0 + 496);

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10023F3E4()
{
  uint64_t v68 = v0;
  char v1 = *(unsigned char *)(v0 + 99);

  if (v1)
  {
    sub_10023C904(*(void *)(v0 + 392));
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "AskTo is enabled, writing Biome event for response.", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 712);
    uint64_t v6 = *(void *)(v0 + 488);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v8 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 368);

    v7(v8, v9);
    id v10 = sub_1001D7640();
    uint64_t v11 = swift_task_alloc();
    *(void *)(v11 + 16) = v6;
    *(void *)(v11 + 24) = 0;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v5)
    {
      uint64_t v12 = *(void **)(v0 + 656);
      uint64_t v13 = *(void **)(v0 + 608);
      unint64_t v14 = *(void **)(v0 + 600);
      uint64_t v15 = *(void **)(v0 + 560);
      unint64_t v16 = *(void **)(v0 + 552);
      uint64_t v18 = *(void **)(v0 + 504);
      id v17 = *(void **)(v0 + 512);
      int64_t v62 = *(void **)(v0 + 496);
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
LABEL_15:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
LABEL_16:
      return v41();
    }
    long long v29 = *(void **)(v0 + 560);
    uint64_t v30 = *(void **)(v0 + 504);

    swift_task_dealloc();
    uint64_t v31 = *(void **)(v0 + 16);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_100258EAC(v29);
    sub_100252354(v32, v30, v31);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 712);
  }
  id v19 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v5)
  {
    uint64_t v33 = *(void **)(v0 + 656);
    id v34 = *(void **)(v0 + 608);
    uint64_t v35 = *(void **)(v0 + 600);
    uint64_t v36 = *(void **)(v0 + 560);
    uint64_t v37 = *(void **)(v0 + 552);
    uint64_t v38 = *(void **)(v0 + 504);
    long long v39 = *(void **)(v0 + 512);
    id v40 = *(void **)(v0 + 496);
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v20 = *(void *)(v0 + 496);
  uint64_t v21 = *(void *)(v0 + 352);

  if (v21 || !v20)
  {
    unint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
    uint64_t v43 = *(void *)(v0 + 432);
    uint64_t v44 = *(void *)(v0 + 344);
    sub_10023C904(*(void *)(v0 + 384));
    uint64_t v66 = swift_task_alloc();
    v42(v66, v44, v43);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    os_log_t log = v45;
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v59 = *(void **)(v0 + 656);
    uint64_t v60 = *(void **)(v0 + 608);
    uint64_t v64 = *(void **)(v0 + 560);
    id v58 = *(void **)(v0 + 552);
    id v57 = *(void **)(v0 + 512);
    id v48 = *(void **)(v0 + 496);
    uint64_t v63 = *(void **)(v0 + 504);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v51 = *(void *)(v0 + 432);
    uint64_t v52 = *(void *)(v0 + 384);
    uint64_t v65 = *(void *)(v0 + 368);
    if (v47)
    {
      id v56 = *(void **)(v0 + 600);
      Class v53 = (uint8_t *)swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)Class v53 = 136446210;
      sub_100259C00((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 280) = sub_1000A2E70(v54, v55, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v49(v66, v51);
      _os_log_impl((void *)&_mh_execute_header, log, v46, "Completed handling answer for request %{public}s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50(v52, v65);
      swift_task_dealloc();
    }
    else
    {

      v49(v66, v51);
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      v50(v52, v65);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_16;
  }
  unint64_t v22 = *(void **)(v0 + 496);
  uint64_t v23 = swift_task_alloc();
  *(void *)(v0 + 728) = v23;
  id v24 = v22;
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 736) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_10023FE80;
  uint64_t v26 = *(void *)(v0 + 504);
  uint64_t v27 = *(void *)(v0 + 488);
  return sub_10024C218(v23, v26, (uint64_t)v24, v27);
}

uint64_t sub_10023FCDC()
{
  char v1 = *(void **)(v0 + 656);
  uint64_t v2 = *(void **)(v0 + 608);
  os_log_type_t v3 = *(void **)(v0 + 600);
  uint64_t v4 = *(void **)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  uint64_t v7 = *(void **)(v0 + 504);
  uint64_t v6 = *(void **)(v0 + 512);
  uint64_t v8 = *(void **)(v0 + 496);

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10023FE80()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 744) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = sub_10024070C;
  }
  else
  {
    (*(void (**)(void, void))(v2 + 584))(*(void *)(v2 + 728), *(void *)(v2 + 568));
    os_log_type_t v3 = sub_10023FFDC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023FFDC()
{
  swift_task_dealloc();
  *(void *)(v0 + 752) = qword_10034B338;
  swift_retain();
  char v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v1;
  *char v1 = v0;
  v1[1] = sub_1002400BC;
  return sub_1000E879C();
}

uint64_t sub_1002400BC()
{
  *(void *)(*(void *)v1 + 768) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002408B8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10024020C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10024020C()
{
  uint64_t v39 = v0;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 344);
  sub_10023C904(*(void *)(v0 + 384));
  uint64_t v4 = swift_task_alloc();
  v1(v4, v3, v2);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v28 = *(void **)(v0 + 656);
    uint64_t v30 = *(void **)(v0 + 600);
    unint64_t v22 = *(void **)(v0 + 560);
    uint64_t v23 = *(void **)(v0 + 608);
    uint64_t v26 = *(void **)(v0 + 552);
    id v24 = *(void **)(v0 + 512);
    uint64_t v25 = *(void **)(v0 + 496);
    uint64_t v21 = *(void **)(v0 + 504);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v33 = *(void *)(v0 + 384);
    uint64_t v32 = *(void *)(v0 + 368);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    sub_100259C00((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 280) = sub_1000A2E70(v9, v10, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v4, v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Completed handling answer for request %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36(v33, v32);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 608);
    uint64_t v12 = *(void **)(v0 + 560);
    uint64_t v27 = *(void **)(v0 + 552);
    long long v29 = *(void **)(v0 + 656);
    unint64_t v14 = *(void **)(v0 + 504);
    uint64_t v13 = *(void **)(v0 + 512);
    uint64_t v31 = v5;
    uint64_t v15 = *(void **)(v0 + 496);
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v17 = *(void *)(v0 + 432);
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 368);

    v16(v4, v17);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v37(v35, v34);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_10024070C()
{
  uint64_t v1 = *(void **)(v0 + 656);
  uint64_t v2 = *(void **)(v0 + 608);
  uint64_t v3 = *(void **)(v0 + 560);
  uint64_t v4 = *(void **)(v0 + 552);
  os_log_type_t v6 = *(void **)(v0 + 504);
  uint64_t v5 = *(void **)(v0 + 512);
  uint64_t v7 = *(void **)(v0 + 496);

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1002408B8()
{
  uint64_t v1 = (void *)v0[82];
  uint64_t v2 = (void *)v0[76];
  uint64_t v3 = (void *)v0[75];
  uint64_t v4 = (void *)v0[70];
  uint64_t v5 = (void *)v0[69];
  uint64_t v7 = (void *)v0[63];
  os_log_type_t v6 = (void *)v0[64];
  uint64_t v8 = (void *)v0[62];
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100240BF4(uint64_t a1, uint64_t a2, void *a3, const void *a4, uint64_t a5)
{
  v5[3] = a3;
  v5[4] = a5;
  v5[2] = a1;
  type metadata accessor for Logger();
  v5[5] = swift_task_alloc();
  v5[6] = _Block_copy(a4);
  uint64_t v8 = type metadata accessor for UUID();
  v5[7] = v8;
  v5[8] = *(void *)(v8 - 8);
  v5[9] = swift_task_alloc();
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  swift_retain();
  return _swift_task_switch(sub_100240D24, 0, 0);
}

uint64_t sub_100240D24()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  v5[2] = v2;
  v5[3] = v1;
  v5[4] = v4;
  v5[5] = v3;
  Logger.init(subsystem:category:)();
  id v9 = (char *)&dword_1003467A8 + dword_1003467A8;
  os_log_type_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  void *v6 = v0;
  v6[1] = sub_100240E74;
  uint64_t v7 = v0[5];
  return ((uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, void, void *, void *))v9)("AskService.handleAnswer", 23, 2, v7, 1, 0, &unk_100346850, v5);
}

uint64_t sub_100240E74()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100241048;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100240F90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100240F90()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void **)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));

  swift_release();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100241048()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void **)(v0 + 24);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);

  swift_release();
  os_log_type_t v6 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v6);

  _Block_release(*(const void **)(v0 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10024113C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[36] = a4;
  v5[37] = a5;
  v5[34] = a2;
  v5[35] = a3;
  uint64_t v6 = type metadata accessor for Logger();
  v5[38] = v6;
  v5[39] = *(void *)(v6 - 8);
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  v5[46] = swift_task_alloc();
  v5[47] = swift_task_alloc();
  return _swift_task_switch(sub_100241284, 0, 0);
}

uint64_t sub_100241284()
{
  uint64_t v121 = v0;
  sub_10023C904(*(void *)(v0 + 376));
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v117 = *(void *)(v0 + 376);
    uint64_t v3 = *(void *)(v0 + 312);
    uint64_t v114 = *(void *)(v0 + 304);
    unint64_t v4 = *(void *)(v0 + 288);
    uint64_t v111 = *(void *)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 280);
    uint64_t v6 = swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 256) = sub_1000A2E70(v5, v4, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2050;
    *(void *)(v0 + 264) = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Begin handling askTo answer for request %{public}s, answer:%{public}ld", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v117, v114);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 376);
    uint64_t v9 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 312);
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  *(void *)(v0 + 384) = v7;
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v0 + 392) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v0 + 400) = v12;
  uint64_t v13 = swift_task_alloc();
  *(void *)(v0 + 408) = v13;
  sub_10009EE78(&qword_100342B20);
  uint64_t v14 = swift_task_alloc();
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11) == 1)
  {
    sub_1000A4FD8(v14, &qword_100342B20);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100253B48();
    swift_allocError();
    *uint64_t v15 = 5;
    swift_willThrow();
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  uint64_t v16 = *(void *)(v0 + 296);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v13, v14, v11);
  swift_task_dealloc();
  unint64_t v17 = v16 - 1;
  if (v17 <= 2)
  {
    Swift::Int v20 = qword_100288518[v17];
    sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
    Class isa = NSNumber.init(integerLiteral:)(v20).super.super.isa;
    uint64_t v19 = 0;
  }
  else
  {
    Class isa = 0;
    uint64_t v19 = 1;
  }
  uint64_t v115 = v19;
  *(unsigned char *)(v0 + 99) = v17 > 2;
  *(void *)(v0 + 416) = isa;
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v22 = *(void *)(v0 + 312);
  uint64_t v23 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  id v24 = (id *)swift_allocObject();
  *(void *)(v0 + 424) = v24;
  v24[3] = 0;
  v24[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))((uint64_t)v24 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v21);
  if ((byte_10034B308 & 1) == 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  Class v118 = isa;
  Swift::String v113 = v7;
  uint64_t v25 = *(void *)(v0 + 368);
  long long v24[2] = v23;
  id v26 = v23;
  sub_10023C904(v25);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = *(void *)(v0 + 368);
  uint64_t v31 = *(void *)(v0 + 304);
  unint64_t v32 = *(void *)(v0 + 288);
  uint64_t v109 = v11;
  if (v29)
  {
    uint64_t v106 = *(void *)(v0 + 368);
    uint64_t v33 = *(void *)(v0 + 280);
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 248) = sub_1000A2E70(v33, v32, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Retrieving askForTime request for %{public}s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v35 = v106;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v35 = v30;
  }
  v113(v35, v31);
  id v37 = sub_1001D7640();
  uint64_t v38 = swift_task_alloc();
  *(void *)(v38 + 16) = v24;
  *(void *)(v38 + 24) = v13;
  sub_1000A0760(0, &qword_1003467C8);
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  uint64_t v40 = *(void **)(v0 + 192);
  *(void *)(v0 + 432) = v40;
  uint64_t v112 = v40;
  id v41 = [v40 requestingUserDSID];
  *(void *)(v0 + 440) = v41;
  if (!v41)
  {
    sub_10023C904(*(void *)(v0 + 360));
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      id v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "The askForMore request in the local database does not have a DSID for the requesting child.", v48, 2u);
      swift_slowDealloc();
    }
    uint64_t v49 = *(void *)(v0 + 360);
    uint64_t v50 = *(void *)(v0 + 304);

    v113(v49, v50);
    sub_100253B48();
    swift_allocError();
    *uint64_t v51 = 2;
    swift_willThrow();

    swift_setDeallocating();
    sub_1000A4FD8((uint64_t)v24 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v109);
    goto LABEL_17;
  }
  id v42 = v41;
  id v43 = v41;
  id v44 = sub_1001D7640();
  uint64_t v45 = swift_task_alloc();
  *(void *)(v45 + 16) = v24;
  *(void *)(v45 + 24) = v42;
  NSManagedObjectContext.performAndWait<A>(_:)();

  uint64_t v110 = v43;
  swift_task_dealloc();
  uint64_t v104 = *(void **)(v0 + 104);
  *(void *)(v0 + 448) = v104;
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 120);
  uint64_t v52 = *(void *)(v0 + 136);
  uint64_t v53 = *(void *)(v0 + 152);
  *(void *)(v0 + 472) = v52;
  *(void *)(v0 + 480) = v53;
  uint64_t v54 = *(void **)(v0 + 176);
  *(void *)(v0 + 488) = *(void *)(v0 + 168);
  *(void *)(v0 + 496) = v54;
  uint64_t v105 = v54;
  if (!v52)
  {
    sub_10023C904(*(void *)(v0 + 352));
    id v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "The requesting child does not have an appleID in the local database.", v60, 2u);
      swift_slowDealloc();
    }
    uint64_t v61 = *(void *)(v0 + 352);
    uint64_t v62 = *(void *)(v0 + 304);

    v113(v61, v62);
    sub_100253B48();
    swift_allocError();
    *uint64_t v63 = 1;
    swift_willThrow();

    swift_setDeallocating();
    sub_1000A4FD8((uint64_t)v24 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v109);
LABEL_17:
    swift_task_dealloc();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  unint64_t v55 = (void *)sub_100250488(v118);
  *(void *)(v0 + 504) = v55;
  id v56 = sub_1001D7640();
  id v57 = (void *)swift_task_alloc();
  v57[2] = v24;
  v57[3] = v13;
  v57[4] = v115;
  v57[5] = v55;
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v64 = *(void *)(v0 + 344);

  swift_task_dealloc();
  sub_10023C904(v64);
  id v65 = v55;
  swift_bridgeObjectRetain_n();
  id v66 = v65;
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v67, v68))
  {
    id v102 = v66;
    uint64_t v70 = *(void *)(v0 + 280);
    unint64_t v71 = *(void *)(v0 + 288);
    uint64_t v72 = swift_slowAlloc();
    uint64_t v103 = (void *)swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v72 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 224) = sub_1000A2E70(v70, v71, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v72 + 12) = 2114;
    if (v55)
    {
      os_log_type_t v73 = v102;
      *(void *)(v0 + 240) = v102;
      id v74 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      *(void *)(v0 + 232) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_type_t v73 = v102;
    }
    uint64_t v108 = *(void *)(v0 + 344);
    uint64_t v107 = *(void *)(v0 + 304);
    *uint64_t v103 = v55;

    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Updated %{public}s record with adjusted time %{public}@", (uint8_t *)v72, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v113(v108, v107);
    id v77 = v73;
  }
  else
  {
    uint64_t v75 = *(void *)(v0 + 344);
    uint64_t v76 = *(void *)(v0 + 304);
    swift_bridgeObjectRelease_n();

    v113(v75, v76);
    id v77 = v66;
  }
  id v78 = sub_1001D7640();
  uint64_t v79 = swift_task_alloc();
  *(void *)(v79 + 16) = v24;
  *(void *)(v79 + 24) = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v80 = *(void *)(v0 + 336);

  swift_task_dealloc();
  uint64_t v81 = *(void *)(v0 + 16);
  *(void *)(v0 + 512) = v81;
  *(void *)(v0 + 520) = *(void *)(v0 + 32);
  *(void *)(v0 + 528) = *(void *)(v0 + 48);
  *(void *)(v0 + 536) = *(void *)(v0 + 64);
  uint64_t v82 = *(void *)(v0 + 88);
  *(void *)(v0 + 544) = *(void *)(v0 + 80);
  *(void *)(v0 + 552) = v82;
  id v83 = [objc_allocWithZone((Class)STAskForTimeResponse) init];
  *(void *)(v0 + 560) = v83;
  Class v84 = UUID._bridgeToObjectiveC()().super.isa;
  [v83 setAssociatedRequestIdentifier:v84];

  [v83 setAnswer:v115];
  [v83 setRespondingUserDSID:v81];
  [v83 setAmountGranted:v77];
  uint64_t v85 = type metadata accessor for Date();
  *(void *)(v0 + 568) = v85;
  uint64_t v86 = *(void *)(v85 - 8);
  *(void *)(v0 + 576) = *(void *)(v86 + 64);
  uint64_t v87 = swift_task_alloc();
  static Date.now.getter();
  Class v88 = Date._bridgeToObjectiveC()().super.isa;
  unint64_t v89 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  *(void *)(v0 + 584) = v89;
  *(void *)(v0 + 592) = (v86 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v89(v87, v85);
  swift_task_dealloc();
  [v83 setTimeStamp:v88];

  sub_10023C904(v80);
  swift_bridgeObjectRetain_n();
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.default.getter();
  BOOL v92 = os_log_type_enabled(v90, v91);
  uint64_t v93 = *(void *)(v0 + 336);
  uint64_t v94 = *(void *)(v0 + 304);
  unint64_t v95 = *(void *)(v0 + 288);
  if (v92)
  {
    uint64_t v96 = *(void *)(v0 + 280);
    uint64_t v119 = *(void *)(v0 + 304);
    uint64_t v116 = *(void *)(v0 + 336);
    uint64_t v97 = (uint8_t *)swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v97 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 216) = sub_1000A2E70(v96, v95, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Sending response via family messaging %{public}s", v97, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v98 = v116;
    uint64_t v99 = v119;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v98 = v93;
    uint64_t v99 = v94;
  }
  v113(v98, v99);
  if (qword_100340DB0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 600) = qword_10034B338;
  uint64_t v100 = dword_100345A50;
  swift_retain();
  uint64_t v101 = (void *)swift_task_alloc();
  *(void *)(v0 + 608) = v101;
  *uint64_t v101 = v0;
  v101[1] = sub_1002427FC;
  return ((uint64_t (__cdecl *)())((char *)&dword_100345A50 + v100))();
}

uint64_t sub_1002427FC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  unint64_t v4 = (void *)*v2;
  v4[77] = a1;
  v4[78] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[75];
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[80] = v1;
    uint64_t v6 = sub_100242A8C;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = sub_1002429A4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002429A4()
{
  uint64_t v1 = *(void *)(v0 + 624);
  sub_1000F1670(*(void **)(v0 + 560), *(void **)(v0 + 616), *(void *)(v0 + 464), *(void *)(v0 + 472));
  *(void *)(v0 + 632) = v1;

  swift_release();
  swift_bridgeObjectRelease();
  if (v1)
  {
    *(void *)(v0 + 640) = v1;
    os_log_type_t v2 = sub_100242A8C;
  }
  else
  {
    os_log_type_t v2 = sub_100242CCC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100242A8C()
{
  uint64_t v1 = *(void **)(v0 + 560);
  os_log_type_t v2 = *(void **)(v0 + 552);
  uint64_t v3 = *(void **)(v0 + 512);
  uint64_t v4 = *(void **)(v0 + 496);
  uint64_t v5 = *(void **)(v0 + 448);
  uint64_t v11 = *(void **)(v0 + 440);
  uint64_t v12 = *(void **)(v0 + 504);
  uint64_t v6 = *(id **)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v8 = *(void *)(v0 + 400);
  uint64_t v13 = *(void **)(v0 + 416);
  uint64_t v14 = *(void *)(v0 + 392);

  swift_setDeallocating();
  sub_1000A4FD8((uint64_t)v6 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100242CCC()
{
  uint64_t v59 = v0;
  sub_10023C904(*(void *)(v0 + 328));
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v54 = *(void *)(v0 + 328);
    id v56 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v51 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 280);
    unint64_t v3 = *(void *)(v0 + 288);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 208) = sub_1000A2E70(v4, v3, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Updating biome event %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v56(v54, v51);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 304);
    swift_bridgeObjectRelease_n();

    v6(v7, v8);
  }
  uint64_t v9 = *(void *)(v0 + 632);
  sub_100252354(*(void *)(v0 + 296), *(void **)(v0 + 432), *(void **)(v0 + 512));
  if (v9)
  {
    uint64_t v10 = *(void **)(v0 + 560);
    uint64_t v11 = *(void **)(v0 + 552);
    uint64_t v12 = *(void **)(v0 + 512);
    os_log_type_t v47 = *(void **)(v0 + 504);
    uint64_t v13 = *(void **)(v0 + 496);
    uint64_t v14 = *(void **)(v0 + 448);
    uint64_t v45 = *(void **)(v0 + 440);
    uint64_t v15 = *(id **)(v0 + 424);
    uint64_t v16 = *(void *)(v0 + 408);
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v50 = *(void **)(v0 + 416);
    uint64_t v52 = *(void *)(v0 + 392);

    swift_setDeallocating();
    sub_1000A4FD8((uint64_t)v15 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v52);
    goto LABEL_7;
  }
  id v18 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v21 = *(void *)(v0 + 504);
  char v22 = *(unsigned char *)(v0 + 99);

  if ((v22 & 1) != 0 || !v21)
  {
    sub_10023C904(*(void *)(v0 + 320));
    swift_bridgeObjectRetain_n();
    BOOL v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v40 = *(void **)(v0 + 560);
    id v43 = *(void **)(v0 + 552);
    id v48 = *(void **)(v0 + 504);
    id v41 = *(void **)(v0 + 512);
    id v42 = *(void **)(v0 + 448);
    id v44 = *(void **)(v0 + 496);
    os_log_type_t v46 = *(void **)(v0 + 440);
    uint64_t v32 = *(void *)(v0 + 408);
    uint64_t v49 = *(void **)(v0 + 416);
    uint64_t v33 = *(void *)(v0 + 400);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v55 = *(void *)(v0 + 320);
    uint64_t v57 = *(void *)(v0 + 392);
    uint64_t v53 = *(void *)(v0 + 304);
    unint64_t v35 = *(void *)(v0 + 288);
    if (v31)
    {
      uint64_t v39 = *(void *)(v0 + 400);
      uint64_t v36 = *(void *)(v0 + 280);
      uint64_t v38 = *(void **)(v0 + 432);
      id v37 = (uint8_t *)swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)id v37 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 200) = sub_1000A2E70(v36, v35, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Completed handling answer for request %{public}s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v34(v55, v53);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v32, v57);
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34(v55, v53);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v57);
    }
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  uint64_t v23 = *(void **)(v0 + 504);
  uint64_t v24 = swift_task_alloc();
  *(void *)(v0 + 648) = v24;
  id v25 = v23;
  id v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 656) = v26;
  *id v26 = v0;
  v26[1] = sub_100243728;
  uint64_t v28 = *(void *)(v0 + 424);
  uint64_t v27 = *(void *)(v0 + 432);
  return sub_10024C218(v24, v27, (uint64_t)v25, v28);
}

uint64_t sub_100243728()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = sub_100243F94;
  }
  else
  {
    (*(void (**)(void, void))(v2 + 584))(*(void *)(v2 + 648), *(void *)(v2 + 568));
    unint64_t v3 = sub_100243884;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100243884()
{
  swift_task_dealloc();
  *(void *)(v0 + 672) = qword_10034B338;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 680) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100243964;
  return sub_1000E879C();
}

uint64_t sub_100243964()
{
  *(void *)(*(void *)v1 + 688) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100244184;
  }
  else {
    uint64_t v2 = sub_100243AC4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100243AC4()
{
  uint64_t v38 = v0;

  sub_10023C904(*(void *)(v0 + 320));
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void **)(v0 + 560);
    uint64_t v17 = *(void **)(v0 + 512);
    uint64_t v24 = *(void **)(v0 + 504);
    uint64_t v19 = *(void **)(v0 + 552);
    Swift::Int v20 = *(void **)(v0 + 496);
    id v18 = *(void **)(v0 + 448);
    char v22 = *(void **)(v0 + 440);
    uint64_t v15 = *(void **)(v0 + 432);
    uint64_t v3 = *(void *)(v0 + 400);
    uint64_t v33 = *(void *)(v0 + 392);
    uint64_t v35 = *(void *)(v0 + 408);
    BOOL v31 = *(void **)(v0 + 416);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 320);
    uint64_t v26 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 280);
    unint64_t v5 = *(void *)(v0 + 288);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = sub_1000A2E70(v4, v5, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Completed handling answer for request %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v32(v29, v26);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v35, v33);
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 560);
    uint64_t v8 = *(void **)(v0 + 552);
    uint64_t v9 = *(void **)(v0 + 512);
    id v25 = *(void **)(v0 + 504);
    uint64_t v10 = *(void **)(v0 + 496);
    uint64_t v11 = *(void **)(v0 + 448);
    uint64_t v21 = *(void **)(v0 + 440);
    uint64_t v23 = *(void **)(v0 + 416);
    uint64_t v12 = *(void *)(v0 + 400);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 408);
    uint64_t v28 = *(void *)(v0 + 320);
    os_log_type_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v27 = *(void *)(v0 + 304);

    swift_release();
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30(v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v36, v34);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100243F94()
{
  uint64_t v1 = *(void **)(v0 + 560);
  os_log_type_t v2 = *(void **)(v0 + 552);
  uint64_t v4 = *(void **)(v0 + 504);
  uint64_t v3 = *(void **)(v0 + 512);
  unint64_t v5 = *(void **)(v0 + 496);
  uint64_t v6 = *(void **)(v0 + 448);
  uint64_t v7 = *(void **)(v0 + 440);
  uint64_t v8 = *(void *)(v0 + 400);
  uint64_t v13 = *(void *)(v0 + 408);
  uint64_t v11 = *(void **)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 392);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100244184()
{
  uint64_t v1 = *(void **)(v0 + 560);
  os_log_type_t v2 = *(void **)(v0 + 552);
  uint64_t v3 = *(void **)(v0 + 504);
  uint64_t v4 = *(void **)(v0 + 512);
  unint64_t v5 = *(void **)(v0 + 448);
  uint64_t v11 = *(void **)(v0 + 496);
  uint64_t v12 = *(void **)(v0 + 440);
  uint64_t v6 = *(id **)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v8 = *(void *)(v0 + 400);
  uint64_t v13 = *(void **)(v0 + 416);
  uint64_t v14 = *(void *)(v0 + 392);

  swift_setDeallocating();
  sub_1000A4FD8((uint64_t)v6 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100244550(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  type metadata accessor for Logger();
  v4[4] = swift_task_alloc();
  v4[5] = _Block_copy(a3);
  v4[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[7] = v6;
  swift_retain();
  return _swift_task_switch(sub_100244618, 0, 0);
}

void sub_100244618()
{
  swift_retain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  os_log_type_t v2 = (char *)&dword_100343460 + dword_100343460;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10024475C;
  __asm { BR              X8; sub_100163B10 }
}

uint64_t sub_10024475C()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_100244918;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    os_log_type_t v2 = sub_100244884;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100244884()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100244918()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release_n();
  swift_bridgeObjectRelease_n();
  os_log_type_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1002449D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_100244ACC, 0, 0);
}

uint64_t sub_100244ACC()
{
  sub_10023C904(v0[24]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting to send ask for more request", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[19];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[25] = v7;
  v0[26] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  v0[27] = [objc_allocWithZone((Class)PeopleClient) init];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[28] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100244C30;
  return PeopleClient.canSendFamilyScreenTimeRequestIMessage()();
}

uint64_t sub_100244C30(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 232) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10024581C;
  }
  else
  {
    *(unsigned char *)(v4 + 99) = a1 & 1;
    uint64_t v5 = sub_100244D5C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100244D5C()
{
  uint64_t v74 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 99);
  os_log_type_t v2 = *(void **)(v0 + 136);

  [v2 setDeliverQuietly:v1];
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v5 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v6 = (id *)swift_allocObject();
  *(void *)(v0 + 240) = v6;
  v6[3] = 0;
  v6[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))((uint64_t)v6 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v4);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v7 = *(void *)(v0 + 232);
  void v6[2] = v5;
  id v8 = v5;
  id v9 = sub_1001D7640();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v6;
  *(void *)(v10 + 24) = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v7)
  {

    swift_setDeallocating();
    sub_1000A4FD8((uint64_t)v6 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 184);

    swift_task_dealloc();
    uint64_t v13 = *(void *)(v0 + 32);
    os_log_t log = *(os_log_t *)(v0 + 16);
    *(void *)(v0 + 248) = log;
    *(void *)(v0 + 256) = v13;
    uint64_t v66 = *(void *)(v0 + 64);
    *(void *)(v0 + 264) = *(void *)(v0 + 48);
    *(void *)(v0 + 272) = v66;
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 88);
    *(void *)(v0 + 280) = v15;
    *(void *)(v0 + 288) = v14;
    sub_10023C904(v12);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Populate request fields from fetched or new ask for time request", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    uint64_t v20 = *(void *)(v0 + 184);
    char v22 = *(void **)(v0 + 136);
    uint64_t v21 = *(void *)(v0 + 144);

    v19(v20, v21);
    [v22 setRequestingUserDSID:log];
    if (v15)
    {
      swift_bridgeObjectRetain();
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v23 = 0;
    }
    uint64_t v24 = *(void **)(v0 + 136);
    [v24 setRequestingUserDisplayName:v23];

    uint64_t v25 = type metadata accessor for UUID();
    *(void *)(v0 + 296) = v25;
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = v26;
    *(void *)(v0 + 304) = v26;
    *(void *)(v0 + 312) = *(void *)(v26 + 64);
    uint64_t v28 = swift_task_alloc();
    UUID.init()();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    os_log_type_t v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    *(void *)(v0 + 320) = v30;
    *(void *)(v0 + 328) = (v27 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v65 = v30;
    v30(v28, v25);
    swift_task_dealloc();
    [v24 setRequestIdentifier:isa];

    uint64_t v31 = swift_task_alloc();
    id v32 = sub_1001D7640();
    uint64_t v33 = (void *)swift_task_alloc();
    void v33[2] = v6;
    v33[3] = 0;
    v33[4] = v24;
    NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v68 = v27;
    uint64_t v35 = *(void *)(v0 + 176);
    uint64_t v36 = *(void **)(v0 + 136);

    swift_task_dealloc();
    Class v37 = UUID._bridgeToObjectiveC()().super.isa;
    v65(v31, v25);
    swift_task_dealloc();
    [v36 setRequestIdentifier:v37];

    sub_10023C904(v35);
    id v38 = v36;
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    os_log_t loga = v39;
    if (os_log_type_enabled(v39, v40))
    {
      os_log_type_t v69 = v40;
      id v42 = *(void **)(v0 + 136);
      uint64_t v43 = swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446722;
      id v44 = [v42 requestedResourceIdentifier];
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;

      *(void *)(v0 + 112) = sub_1000A2E70(v45, v47, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v43 + 12) = 2082;
      sub_10009EE78(&qword_100342B20);
      uint64_t v48 = swift_task_alloc();
      id v49 = [v42 requestIdentifier];
      uint64_t v50 = swift_task_alloc();
      if (v49)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v51 = 0;
      }
      else
      {
        uint64_t v51 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v50, v51, 1, v25);
      sub_1000A2214(v50, v48);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v48, 1, v25))
      {
        unint64_t v56 = 0xD000000000000015;
        swift_task_dealloc();
        sub_1000A4FD8(v48, &qword_100342B20);
        unint64_t v57 = 0x8000000100297B80;
      }
      else
      {
        uint64_t v58 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v58, v48, v25);
        sub_1000A4FD8(v48, &qword_100342B20);
        unint64_t v56 = UUID.uuidString.getter();
        unint64_t v57 = v59;
        v65(v58, v25);
        swift_task_dealloc();
        swift_task_dealloc();
      }
      uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      uint64_t v60 = *(void *)(v0 + 176);
      uint64_t v62 = *(void **)(v0 + 136);
      uint64_t v61 = *(void *)(v0 + 144);
      swift_task_dealloc();
      *(void *)(v0 + 120) = sub_1000A2E70(v56, v57, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v43 + 22) = 1026;
      unsigned int v63 = [v62 deliverQuietly];

      *(_DWORD *)(v0 + 100) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, loga, v69, "Ask for time request for %{public}s, %{public}s, deliverQuietly set to %{BOOL,public}d", (uint8_t *)v43, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v67(v60, v61);
    }
    else
    {
      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      uint64_t v53 = *(void *)(v0 + 176);
      uint64_t v55 = *(void **)(v0 + 136);
      uint64_t v54 = *(void *)(v0 + 144);

      v52(v53, v54);
    }
    if (qword_100340DB0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 336) = qword_10034B338;
    logb = (uint64_t (__cdecl *)())((char *)&dword_100345A50 + dword_100345A50);
    swift_retain();
    uint64_t v64 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v64;
    *uint64_t v64 = v0;
    v64[1] = sub_1002458C0;
    return logb();
  }
}

uint64_t sub_10024581C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002458C0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc();
  if (v1)
  {
    v3[47] = v1;
    uint64_t v4 = sub_10024617C;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[42];
    uint64_t v4 = sub_1002459F0;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1002459F0()
{
  uint64_t v1 = *(void *)(v0 + 360);
  sub_1000F0A9C(*(id *)(v0 + 136), *(void **)(v0 + 352));
  *(void *)(v0 + 368) = v1;

  if (v1)
  {
    *(void *)(v0 + 376) = v1;
    os_log_type_t v2 = sub_10024617C;
  }
  else
  {
    os_log_type_t v2 = sub_100245A8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100245A8C()
{
  uint64_t v52 = v0;
  if (([*(id *)(v0 + 136) deliverQuietly] & 1) == 0)
  {
    uint64_t v12 = *(void *)(v0 + 368);
    id v13 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (!v12)
    {
      uint64_t v18 = *(void *)(v0 + 160);
      uint64_t v19 = *(void **)(v0 + 136);

      sub_10023C904(v18);
      id v20 = v19;
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        NSString v23 = *(void **)(v0 + 136);
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446210;
        sub_10009EE78(&qword_100342B20);
        uint64_t v25 = swift_task_alloc();
        id v26 = [v23 requestIdentifier];
        uint64_t v27 = swift_task_alloc();
        if (v26)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = 1;
        }
        uint64_t v33 = *(void *)(v0 + 296);
        uint64_t v34 = *(void *)(v0 + 304);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v27, v28, 1, v33);
        sub_1000A2214(v27, v25);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v25, 1, v33))
        {
          swift_task_dealloc();
          sub_1000A4FD8(v25, &qword_100342B20);
          unint64_t v35 = 0x8000000100297B80;
          unint64_t v36 = 0xD000000000000015;
        }
        else
        {
          id v49 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
          uint64_t v37 = *(void *)(v0 + 304);
          uint64_t v38 = *(void *)(v0 + 296);
          uint64_t v39 = swift_task_alloc();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v39, v25, v38);
          sub_1000A4FD8(v25, &qword_100342B20);
          unint64_t v36 = UUID.uuidString.getter();
          unint64_t v35 = v40;
          v49(v39, v38);
          swift_task_dealloc();
          swift_task_dealloc();
        }
        uint64_t v43 = *(void **)(v0 + 288);
        id v42 = *(void **)(v0 + 248);
        uint64_t v45 = *(void *)(v0 + 160);
        unint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
        id v41 = *(void **)(v0 + 136);
        uint64_t v44 = *(void *)(v0 + 144);
        swift_task_dealloc();
        *(void *)(v0 + 104) = sub_1000A2E70(v36, v35, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Sent ask for more request %{public}s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v47(v45, v44);
      }
      else
      {
        uint64_t v29 = v21;
        os_log_type_t v30 = *(void **)(v0 + 288);
        uint64_t v31 = *(void **)(v0 + 248);
        uint64_t v48 = *(void *)(v0 + 160);
        uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
        id v32 = *(void **)(v0 + 136);
        uint64_t v46 = *(void *)(v0 + 144);

        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v50(v48, v46);
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_22;
    }
    id v9 = *(void **)(v0 + 288);
    uint64_t v10 = *(void **)(v0 + 248);
    uint64_t v11 = *(id **)(v0 + 240);

LABEL_8:
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();

    sub_1000A4FD8((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
LABEL_22:
    return v14();
  }
  sub_10023C904(*(void *)(v0 + 168));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "AskTo is enabled, sending via AskTo.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 168);
  id v8 = *(void **)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);

  v5(v6, v7);
  sub_100251A64(v8);
  if (v4)
  {
    id v9 = *(void **)(v0 + 288);
    uint64_t v10 = *(void **)(v0 + 248);
    uint64_t v11 = *(id **)(v0 + 240);
    goto LABEL_8;
  }
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1002462CC;
  uint64_t v16 = *(void *)(v0 + 136);
  return sub_100251038(v16);
}

uint64_t sub_10024617C()
{
  uint64_t v1 = (void *)v0[36];
  os_log_type_t v2 = (void *)v0[31];
  uint64_t v3 = (id *)v0[30];
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();

  sub_1000A4FD8((uint64_t)v3 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002462CC()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100246974;
  }
  else {
    os_log_type_t v2 = sub_1002463E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002463E0()
{
  id v42 = v0;
  uint64_t v1 = v0[49];
  id v2 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v1)
  {
    uint64_t v3 = (void *)v0[36];
    uint64_t v4 = (void *)v0[31];
    uint64_t v5 = (id *)v0[30];

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();

    sub_1000A4FD8((uint64_t)v5 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v7 = v0[20];
    id v8 = (void *)v0[17];

    sub_10023C904(v7);
    id v9 = v8;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (void *)v0[17];
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136446210;
      sub_10009EE78(&qword_100342B20);
      uint64_t v14 = swift_task_alloc();
      id v15 = [v12 requestIdentifier];
      uint64_t v16 = swift_task_alloc();
      if (v15)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 1;
      }
      uint64_t v22 = v0[37];
      uint64_t v23 = v0[38];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v16, v17, 1, v22);
      sub_1000A2214(v16, v14);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v14, 1, v22))
      {
        swift_task_dealloc();
        sub_1000A4FD8(v14, &qword_100342B20);
        unint64_t v24 = 0x8000000100297B80;
        unint64_t v25 = 0xD000000000000015;
      }
      else
      {
        uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[40];
        uint64_t v26 = v0[38];
        uint64_t v27 = v0[37];
        uint64_t v28 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v28, v14, v27);
        sub_1000A4FD8(v14, &qword_100342B20);
        unint64_t v25 = UUID.uuidString.getter();
        unint64_t v24 = v29;
        v39(v28, v27);
        swift_task_dealloc();
        swift_task_dealloc();
      }
      uint64_t v33 = (void *)v0[36];
      id v32 = (void *)v0[31];
      uint64_t v35 = v0[20];
      uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[25];
      os_log_type_t v30 = (void *)v0[17];
      uint64_t v34 = v0[18];
      swift_task_dealloc();
      v0[13] = sub_1000A2E70(v25, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sent ask for more request %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37(v35, v34);
    }
    else
    {
      uint64_t v18 = v10;
      uint64_t v19 = (void *)v0[36];
      id v20 = (void *)v0[31];
      uint64_t v38 = v0[20];
      unint64_t v40 = (void (*)(uint64_t, uint64_t))v0[25];
      uint64_t v21 = (void *)v0[17];
      uint64_t v36 = v0[18];

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40(v38, v36);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  return v6();
}

uint64_t sub_100246974()
{
  uint64_t v1 = (void *)v0[36];
  id v2 = (void *)v0[31];
  uint64_t v3 = (id *)v0[30];
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();

  sub_1000A4FD8((uint64_t)v3 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100246C44(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_100246D04, 0, 0);
}

uint64_t sub_100246D04()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_100343458
                                                                                             + dword_100343458);
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001B3B10;
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8((uint64_t)"AskService.sendAsk", 18, 2, v4, 1, 0, v5, v6);
}

uint64_t sub_100246E38(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  uint64_t v4 = type metadata accessor for STUserNotifications.NotificationType();
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[23] = v5;
  v3[24] = *(void *)(v5 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  return _swift_task_switch(sub_100246F8C, 0, 0);
}

uint64_t sub_100246F8C()
{
  uint64_t v70 = v0;
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v4 = (void *)swift_allocObject();
  v0[30] = v4;
  v4[3] = 0;
  v4[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))((uint64_t)v4 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v1);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v4[2] = v3;
  id v5 = objc_allocWithZone((Class)STAskForTimeRequest);
  id v6 = v3;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [v5 initWithPayload:isa];
  v0[31] = v8;

  sub_10009EE78(&qword_100342B20);
  uint64_t v9 = swift_task_alloc();
  id v10 = [v8 requestIdentifier];
  uint64_t v11 = swift_task_alloc();
  if (v10)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  }
  else
  {
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  sub_1000A2214(v11, v9);
  type metadata accessor for UUID();
  v0[32] = v12;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12))
  {
    uint64_t v15 = v0[25];
    swift_task_dealloc();
    sub_1000A4FD8(v9, &qword_100342B20);
    swift_task_dealloc();
    sub_10023C904(v15);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "handleRequest incoming payload has no requestIdentifier", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[24];
    uint64_t v19 = v0[25];
    uint64_t v21 = v0[23];

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    sub_100253B48();
    swift_allocError();
    *uint64_t v22 = 5;
    swift_willThrow();
    swift_release();

LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v52 = (uint64_t (*)(void))v0[1];
    return v52();
  }
  uint64_t v68 = v8;
  uint64_t v65 = v0[18];
  v0[33] = *(void *)(v13 + 64);
  uint64_t v23 = swift_task_alloc();
  unint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v0[34] = v24;
  v0[35] = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v24(v23, v9, v12);
  sub_1000A4FD8(v9, &qword_100342B20);
  uint64_t v25 = UUID.uuidString.getter();
  unint64_t v27 = v26;
  uint64_t v64 = v25;
  v0[36] = v25;
  v0[37] = v26;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v0[38] = v28;
  v0[39] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v28(v23, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v29 = sub_1001D7640();
  uint64_t v30 = swift_task_alloc();
  *(void *)(v30 + 16) = v4;
  *(void *)(v30 + 24) = v65;
  NSManagedObjectContext.performAndWait<A>(_:)();

  unint64_t v67 = v27;
  swift_task_dealloc();
  uint64_t v31 = (void *)v0[2];
  uint64_t v33 = v0[4];
  uint64_t v32 = v0[5];
  v0[40] = v31;
  v0[41] = v33;
  unint64_t v34 = v0[6];
  uint64_t v35 = v0[8];
  uint64_t v36 = v0[9];
  v0[42] = v34;
  v0[43] = v35;
  unint64_t v37 = v0[10];
  uint64_t v38 = (void *)v0[11];
  v0[44] = v38;
  if (v37)
  {
    unint64_t v34 = v37;
  }
  else
  {
    if (!v34)
    {
      uint64_t v43 = v31;
      uint64_t v44 = v0[26];
      swift_bridgeObjectRelease();
      sub_10023C904(v44);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        unint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "handleRequest user details has no child name", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = v0[26];
      uint64_t v50 = v0[23];
      uint64_t v49 = v0[24];

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      sub_100253B48();
      swift_allocError();
      *uint64_t v51 = 3;
      swift_willThrow();
      swift_release();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    swift_bridgeObjectRetain();
    unint64_t v37 = 0;
    uint64_t v36 = v32;
  }
  uint64_t v63 = v36;
  v0[46] = v36;
  v0[47] = v34;
  v0[45] = v37;
  uint64_t v39 = v0[18];
  v0[48] = swift_task_alloc();
  swift_bridgeObjectRetain();
  id v40 = sub_1001D7640();
  uint64_t v41 = (void *)swift_task_alloc();
  void v41[2] = v4;
  v41[3] = v39;
  v41[4] = v68;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  id v42 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v53 = v0[29];

  sub_10023C904(v53);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  BOOL v56 = os_log_type_enabled(v54, v55);
  uint64_t v57 = v0[29];
  uint64_t v59 = v0[23];
  uint64_t v58 = v0[24];
  if (v56)
  {
    uint64_t v66 = v0[29];
    uint64_t v60 = swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 136446466;
    swift_bridgeObjectRetain();
    v0[15] = sub_1000A2E70(v63, v34, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v60 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[16] = sub_1000A2E70(v64, v67, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Saved askForTime request from child %{public}s %{public}s", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v61(v66, v59);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v61(v57, v59);
  }
  v0[49] = v61;
  v0[50] = [objc_allocWithZone((Class)PeopleClient) init];
  uint64_t v62 = (void *)swift_task_alloc();
  v0[51] = v62;
  void *v62 = v0;
  v62[1] = sub_100247AFC;
  return PeopleClient.canSendFamilyScreenTimeRequestIMessage()();
}

uint64_t sub_100247AFC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 416) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_100248180;
  }
  else
  {
    *(unsigned char *)(v4 + 99) = a1 & 1;
    id v5 = sub_100247C28;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100247C28()
{
  uint64_t v46 = v0;
  char v1 = *(unsigned char *)(v0 + 99);
  uint64_t v2 = *(void **)(v0 + 248);

  unsigned int v3 = [v2 deliverQuietly];
  *(unsigned char *)(v0 + 440) = v3;
  if (v3 && (v1 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 384);
    id v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
    uint64_t v6 = *(void *)(v0 + 256);
    sub_10023C904(*(void *)(v0 + 216));
    uint64_t v7 = swift_task_alloc();
    v5(v7, v4, v6);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
      uint64_t v43 = *(void *)(v0 + 384);
      uint64_t v35 = *(void **)(v0 + 352);
      unint64_t v34 = *(void **)(v0 + 320);
      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
      uint64_t v10 = *(void *)(v0 + 256);
      uint64_t v33 = *(void **)(v0 + 248);
      uint64_t v38 = *(void *)(v0 + 216);
      char v31 = *(unsigned char *)(v0 + 440) & *(unsigned char *)(v0 + 99);
      uint64_t v37 = *(void *)(v0 + 184);
      uint64_t v11 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446466;
      sub_100259C00((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 104) = sub_1000A2E70(v12, v13, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v32(v7, v10);
      *(_WORD *)(v11 + 12) = 1026;
      *(_DWORD *)(v0 + 100) = v31 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully processed incoming ask request %{public}s deliverQuietly: %{BOOL,public}d", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v41(v38, v37);
      v32(v43, v10);
      swift_task_dealloc();
    }
    else
    {
      id v42 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
      uint64_t v44 = *(void *)(v0 + 384);
      uint64_t v36 = *(void **)(v0 + 352);
      unint64_t v26 = *(void **)(v0 + 320);
      unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
      uint64_t v28 = *(void *)(v0 + 256);
      uint64_t v40 = *(void *)(v0 + 216);
      uint64_t v39 = *(void *)(v0 + 184);

      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27(v7, v28);
      swift_task_dealloc();
      v42(v40, v39);
      v27(v44, v28);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
  else
  {
    uint64_t v14 = *(void **)(v0 + 248);
    id v15 = *(id *)(v0 + 320);
    id v16 = [v14 resourceDisplayName];
    if (!v16) {
      id v16 = [*(id *)(v0 + 248) requestedResourceIdentifier];
    }
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    long long v20 = *(_OWORD *)(v0 + 368);
    uint64_t v21 = *(void *)(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 176);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v22 + 16) = v20;
    *(void *)(v22 + 32) = v21;
    *(void *)(v22 + 40) = v17;
    *(void *)(v22 + 48) = v19;
    (*(void (**)(void))(v23 + 104))();
    unint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v24;
    *unint64_t v24 = v0;
    v24[1] = sub_1002482C8;
    uint64_t v25 = *(void *)(v0 + 176);
    return static STUserNotifications.post(notification:)(v25);
  }
}

uint64_t sub_100248180()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void **)(v0 + 352);
  unsigned int v3 = *(void **)(v0 + 320);
  id v8 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  uint64_t v4 = *(void **)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1002482C8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[21] + 8))(v2[22], v2[20]);
  if (v0) {
    unsigned int v3 = sub_100248A2C;
  }
  else {
    unsigned int v3 = sub_100248430;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100248430()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 256);
  sub_10023C904(*(void *)(v0 + 224));
  uint64_t v4 = swift_task_alloc();
  v2(v4, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v42 = *(void *)(v0 + 224);
    uint64_t v39 = *(void *)(v0 + 184);
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136446210;
    sub_100259C00((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 112) = sub_1000A2E70(v9, v10, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v35(v4, v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "handleRequest posted notification for %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v45(v42, v39);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 184);
    (*(void (**)(uint64_t, void))(v0 + 304))(v4, *(void *)(v0 + 256));

    swift_task_dealloc();
    v11(v12, v13);
  }
  uint64_t v14 = *(void *)(v0 + 384);
  id v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
  uint64_t v16 = *(void *)(v0 + 256);
  sub_10023C904(*(void *)(v0 + 216));
  uint64_t v46 = swift_task_alloc();
  v15(v46, v14, v16);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v43 = *(void *)(v0 + 384);
    uint64_t v33 = *(void **)(v0 + 352);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    uint64_t v19 = *(void *)(v0 + 256);
    char v31 = *(void **)(v0 + 248);
    uint64_t v32 = *(void **)(v0 + 320);
    uint64_t v36 = *(void *)(v0 + 216);
    char v29 = *(unsigned char *)(v0 + 440) & *(unsigned char *)(v0 + 99);
    uint64_t v34 = *(void *)(v0 + 184);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    sub_100259C00((unint64_t *)&qword_100342B28, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 104) = sub_1000A2E70(v21, v22, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v30(v46, v19);
    *(_WORD *)(v20 + 12) = 1026;
    *(_DWORD *)(v0 + 100) = v29 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully processed incoming ask request %{public}s deliverQuietly: %{BOOL,public}d", (uint8_t *)v20, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40(v36, v34);
    v30(v43, v19);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v44 = *(void *)(v0 + 384);
    uint64_t v23 = *(void **)(v0 + 352);
    unint64_t v24 = *(void **)(v0 + 320);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    uint64_t v26 = *(void *)(v0 + 256);
    uint64_t v37 = *(void *)(v0 + 184);
    uint64_t v38 = *(void *)(v0 + 216);

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25(v46, v26);
    swift_task_dealloc();
    v41(v38, v37);
    v25(v44, v26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_100248A2C()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void **)(v0 + 352);
  uint64_t v3 = *(void **)(v0 + 320);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 256);

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100248B54(uint64_t a1, uint64_t a2)
{
  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  uint64_t v4 = type metadata accessor for STUserNotifications.NotificationType();
  v3[33] = v4;
  v3[34] = *(void *)(v4 - 8);
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[38] = v5;
  v3[39] = *(void *)(v5 - 8);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  return _swift_task_switch(sub_100248CD0, 0, 0);
}

uint64_t sub_100248CD0()
{
  uint64_t v72 = v0;
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[38];
  uint64_t v1 = v0[39];
  uint64_t v3 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v4 = (void *)swift_allocObject();
  v0[46] = v4;
  v4[3] = 0;
  v4[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))((uint64_t)v4 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v2);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v70 = v0;
  uint64_t v5 = v0 + 30;
  v4[2] = v3;
  id v6 = objc_allocWithZone((Class)STAskForTimeResponse);
  id v7 = v3;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithPayload:isa];
  v5[17] = v9;

  uint64_t v10 = type metadata accessor for UUID();
  v5[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  v5[19] = v11;
  v5[20] = *(void *)(v11 + 64);
  uint64_t v13 = swift_task_alloc();
  v5[21] = v13;
  id v14 = [v9 associatedRequestIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v15 = sub_1001D7640();
  uint64_t v16 = swift_task_alloc();
  *(void *)(v16 + 16) = v4;
  *(void *)(v16 + 24) = v13;
  sub_1000A0760(0, &qword_1003467C8);
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v65 = v12;
  *(void *)os_log_type_t type = v9;
  uint64_t v68 = v10;
  uint64_t v18 = v70[31];

  swift_task_dealloc();
  uint64_t v19 = (void *)v70[24];
  v70[52] = v19;
  id v20 = sub_1001D7640();
  uint64_t v21 = swift_task_alloc();
  *(void *)(v21 + 16) = v4;
  *(void *)(v21 + 24) = v18;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  unint64_t v22 = (void *)v70[13];
  uint64_t v23 = v70[15];
  uint64_t v24 = v70[16];
  v70[53] = v22;
  v70[54] = v23;
  uint64_t v25 = v70[17];
  uint64_t v27 = v70[19];
  uint64_t v26 = v70[20];
  v70[55] = v25;
  v70[56] = v27;
  uint64_t v28 = v70[21];
  uint64_t v63 = (void *)v70[22];
  uint64_t v64 = v22;
  v70[57] = v63;
  uint64_t v29 = v13;
  if (v28)
  {
    uint64_t v62 = v13;
    uint64_t v30 = v28;
    goto LABEL_10;
  }
  if (v25)
  {
    uint64_t v62 = v13;
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v28 = 0;
    uint64_t v26 = v24;
    uint64_t v30 = v31;
LABEL_10:
    v70[59] = v26;
    v70[60] = v30;
    v70[58] = v28;
    uint64_t v32 = v26;
    swift_bridgeObjectRetain();
    id v33 = sub_1001D7640();
    uint64_t v34 = swift_task_alloc();
    *(void *)(v34 + 16) = v4;
    *(void *)(v34 + 24) = *(void *)type;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    uint64_t v61 = v32;
    id v35 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v44 = v70[45];

    sub_10023C904(v44);
    uint64_t v45 = swift_task_alloc();
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
    v70[61] = v46;
    v70[62] = (v65 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v46(v45, v62, v68);
    unint64_t v47 = v30;
    swift_bridgeObjectRetain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = v70[45];
    uint64_t v52 = v70[38];
    uint64_t v53 = v70[39];
    if (v50)
    {
      os_log_type_t typea = v49;
      uint64_t v69 = v70[38];
      unint64_t v54 = v47;
      uint64_t v55 = swift_slowAlloc();
      v71[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136446466;
      swift_bridgeObjectRetain();
      v70[28] = sub_1000A2E70(v61, v54, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v55 + 12) = 2082;
      uint64_t v56 = UUID.uuidString.getter();
      v70[29] = sub_1000A2E70(v56, v57, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v58(v45, v68);
      _os_log_impl((void *)&_mh_execute_header, v48, typea, "Saved askForTime response from %{public}s for request %{public}s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      v59(v51, v69);
      swift_task_dealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v58(v45, v68);

      swift_task_dealloc();
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      v59(v51, v52);
    }
    v70[63] = v59;
    v70[64] = v58;
    v70[65] = [objc_allocWithZone((Class)PeopleClient) init];
    uint64_t v60 = (void *)swift_task_alloc();
    v70[66] = v60;
    *uint64_t v60 = v70;
    v60[1] = sub_10024970C;
    return PeopleClient.canSendFamilyScreenTimeRequestIMessage()();
  }
  sub_10023C904(v70[40]);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "handleResponse user details has no parent name", v39, 2u);
    swift_slowDealloc();
  }
  uint64_t v41 = v70[39];
  uint64_t v40 = v70[40];
  uint64_t v42 = v70[38];

  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  sub_100253B48();
  swift_allocError();
  *uint64_t v43 = 4;
  swift_willThrow();

  swift_bridgeObjectRelease_n();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v29, v68);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v70[1];
  return v36();
}

uint64_t sub_10024970C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 536) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10024A098;
  }
  else
  {
    *(unsigned char *)(v4 + 99) = a1 & 1;
    uint64_t v5 = sub_100249838;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100249838()
{
  int v1 = *(unsigned __int8 *)(v0 + 99);

  uint64_t v2 = *(void *)(v0 + 536);
  if (v1 == 1)
  {
    uint64_t v3 = *(void **)(v0 + 416);
    uint64_t v4 = *(void **)(v0 + 376);
    uint64_t v5 = sub_100258EAC(v4);
    id v6 = [v4 respondingUserDSID];
    sub_100252354(v5, v3, v6);
    if (v2)
    {
      uint64_t v7 = *(void **)(v0 + 456);
      uint64_t v8 = *(void **)(v0 + 416);
      id v9 = *(void **)(v0 + 424);
      uint64_t v10 = *(void **)(v0 + 376);
      (*(void (**)(void, void))(v0 + 512))(*(void *)(v0 + 408), *(void *)(v0 + 384));
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
      return v19();
    }
  }
  uint64_t v11 = *(void *)(v0 + 368);
  id v12 = sub_1001D7640();
  uint64_t v13 = swift_task_alloc();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v2)
  {
    id v14 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    id v15 = *(void **)(v0 + 456);
    uint64_t v74 = *(void **)(v0 + 424);
    uint64_t v16 = *(void *)(v0 + 408);
    uint64_t v75 = *(void **)(v0 + 416);
    uint64_t v17 = *(void *)(v0 + 384);
    uint64_t v18 = *(void **)(v0 + 376);

    swift_task_dealloc();
    v14(v16, v17);
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  swift_task_dealloc();
  uint64_t v21 = *(void **)(v0 + 16);
  char v22 = *(unsigned char *)(v0 + 96);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t v23 = *(void **)(v0 + 416);
    uint64_t v24 = *(uint64_t **)(v0 + 296);
    uint64_t v25 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 272);
    swift_bridgeObjectRelease();
    uint64_t v27 = UUID.uuidString.getter();
    uint64_t v29 = v28;
    id v30 = [v23 requestingUserDSID];
    *uint64_t v24 = v27;
    v24[1] = v29;
    long long v24[2] = 0;
    v24[3] = 0xE000000000000000;
    v24[4] = (uint64_t)v30;
    void v24[5] = 0;
    v24[6] = 0xE000000000000000;
    (*(void (**)(uint64_t *, void, uint64_t))(v26 + 104))(v24, enum case for STUserNotifications.NotificationType.askRequest(_:), v25);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_10024A214;
    uint64_t v32 = *(void *)(v0 + 296);
    return static STUserNotifications.remove(notification:)(v32);
  }
  else
  {
    id v33 = *(void **)(v0 + 416);
    id v34 = [v33 requestedResourceIdentifier];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    if (![v33 usageType])
    {
      os_log_type_t v38 = *(void **)(v0 + 416);
      swift_bridgeObjectRelease();
      id v39 = [self sharedCache];
      NSString v40 = [v38 requestedResourceIdentifier];
      if (!v40)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v41 = [v39 appInfoForBundleIdentifier:v40];

      id v42 = [v41 displayName];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v43;
    }
    if ([*(id *)(v0 + 376) answer])
    {
      uint64_t v45 = *(void *)(v0 + 472);
      uint64_t v44 = *(void *)(v0 + 480);
      uint64_t v47 = *(void *)(v0 + 272);
      uint64_t v46 = *(uint64_t **)(v0 + 280);
      uint64_t v48 = *(void *)(v0 + 264);
      *uint64_t v46 = UUID.uuidString.getter();
      v46[1] = v49;
      v46[2] = v45;
      v46[3] = v44;
      v46[4] = v35;
      v46[5] = v37;
      (*(void (**)(uint64_t *, void, uint64_t))(v47 + 104))(v46, enum case for STUserNotifications.NotificationType.timeDenied(_:), v48);
      BOOL v50 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v50;
      *BOOL v50 = v0;
      v50[1] = sub_10024AD24;
      uint64_t v51 = *(void *)(v0 + 280);
    }
    else
    {
      uint64_t v52 = (objc_class *)[*(id *)(v0 + 376) amountGranted];
      uint64_t v53 = sub_100250488(v52);
      *(void *)(v0 + 560) = v53;

      uint64_t v54 = *(void *)(v0 + 480);
      if (!v53)
      {
        uint64_t v63 = *(void *)(v0 + 336);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10023C904(v63);
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v66 = 0;
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "handleResponse parent approved but no time granted", v66, 2u);
          swift_slowDealloc();
        }
        unint64_t v67 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
        uint64_t v68 = *(void **)(v0 + 456);
        id v78 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
        uint64_t v69 = *(void **)(v0 + 424);
        uint64_t v76 = *(void *)(v0 + 384);
        uint64_t v77 = *(void *)(v0 + 408);
        uint64_t v72 = *(void **)(v0 + 376);
        uint64_t v73 = *(void **)(v0 + 416);
        uint64_t v70 = *(void *)(v0 + 336);
        uint64_t v71 = *(void *)(v0 + 304);

        v67(v70, v71);
        type metadata accessor for DataStore.DataStoreError(0);
        sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        swift_bridgeObjectRelease();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v78(v77, v76);
        goto LABEL_8;
      }
      uint64_t v55 = *(void *)(v0 + 472);
      uint64_t v56 = *(uint64_t **)(v0 + 288);
      uint64_t v57 = *(void *)(v0 + 272);
      uint64_t v79 = *(void *)(v0 + 264);
      uint64_t v58 = UUID.uuidString.getter();
      uint64_t v60 = v59;
      Double.init(truncating:)();
      uint64_t *v56 = v58;
      v56[1] = v60;
      v56[2] = v55;
      v56[3] = v54;
      v56[4] = v35;
      v56[5] = v37;
      v56[6] = v61;
      (*(void (**)(uint64_t *, void, uint64_t))(v57 + 104))(v56, enum case for STUserNotifications.NotificationType.timeApproved(_:), v79);
      uint64_t v62 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v62;
      void *v62 = v0;
      v62[1] = sub_10024A788;
      uint64_t v51 = *(void *)(v0 + 288);
    }
    return static STUserNotifications.post(notification:)(v51);
  }
}

uint64_t sub_10024A098()
{
  int v1 = *(void **)(v0 + 456);
  id v9 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  uint64_t v2 = *(void **)(v0 + 424);
  uint64_t v3 = *(void **)(v0 + 416);
  uint64_t v4 = *(void **)(v0 + 376);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 408);

  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v8, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10024A214()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[34] + 8))(v2[37], v2[33]);
  if (v0) {
    uint64_t v3 = sub_10024B298;
  }
  else {
    uint64_t v3 = sub_10024A37C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10024A37C()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 384);
  sub_10023C904(*(void *)(v0 + 352));
  uint64_t v4 = swift_task_alloc();
  v1(v4, v2, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    uint64_t v21 = *(void **)(v0 + 456);
    id v20 = *(void **)(v0 + 424);
    uint64_t v19 = *(void **)(v0 + 416);
    uint64_t v27 = *(void *)(v0 + 408);
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v18 = *(void **)(v0 + 376);
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v23 = *(void *)(v0 + 352);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v8 = UUID.uuidString.getter();
    *(void *)(v0 + 216) = sub_1000A2E70(v8, v9, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v17(v4, v16);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "handleResponse parent removed notification for %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29(v23, v22);
    v17(v27, v16);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    id v30 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    uint64_t v10 = *(void **)(v0 + 456);
    uint64_t v11 = *(void **)(v0 + 424);
    uint64_t v28 = *(void *)(v0 + 408);
    uint64_t v12 = *(void *)(v0 + 384);
    uint64_t v13 = *(void **)(v0 + 376);
    uint64_t v24 = *(void *)(v0 + 304);
    uint64_t v25 = *(void *)(v0 + 352);

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26(v4, v12);
    swift_task_dealloc();
    v30(v25, v24);
    v26(v28, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10024A788()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 576) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[34] + 8))(v2[36], v2[33]);
  if (v0) {
    uint64_t v3 = sub_10024B3F8;
  }
  else {
    uint64_t v3 = sub_10024A8F0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10024A8F0()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 384);
  sub_10023C904(*(void *)(v0 + 344));
  uint64_t v4 = swift_task_alloc();
  v1(v4, v2, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v21 = *(void **)(v0 + 560);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    uint64_t v23 = *(void **)(v0 + 456);
    id v20 = *(void **)(v0 + 424);
    uint64_t v19 = *(void **)(v0 + 416);
    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v18 = *(void **)(v0 + 376);
    uint64_t v24 = *(void *)(v0 + 304);
    uint64_t v25 = *(void *)(v0 + 344);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v8 = UUID.uuidString.getter();
    *(void *)(v0 + 208) = sub_1000A2E70(v8, v9, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v17(v4, v16);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "handleResponse posted approval notification for %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31(v25, v24);
    v17(v29, v16);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v22 = *(void **)(v0 + 560);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    uint64_t v10 = *(void **)(v0 + 456);
    uint64_t v11 = *(void **)(v0 + 424);
    uint64_t v30 = *(void *)(v0 + 408);
    uint64_t v12 = *(void *)(v0 + 384);
    uint64_t v13 = *(void **)(v0 + 376);
    uint64_t v26 = *(void *)(v0 + 304);
    uint64_t v27 = *(void *)(v0 + 344);

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28(v4, v12);
    swift_task_dealloc();
    v32(v27, v26);
    v28(v30, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10024AD24()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 592) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[34] + 8))(v2[35], v2[33]);
  if (v0) {
    uint64_t v3 = sub_10024B55C;
  }
  else {
    uint64_t v3 = sub_10024AE8C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10024AE8C()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 384);
  sub_10023C904(*(void *)(v0 + 328));
  uint64_t v4 = swift_task_alloc();
  v1(v4, v2, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    uint64_t v21 = *(void **)(v0 + 456);
    id v20 = *(void **)(v0 + 424);
    uint64_t v19 = *(void **)(v0 + 416);
    uint64_t v27 = *(void *)(v0 + 408);
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v18 = *(void **)(v0 + 376);
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v23 = *(void *)(v0 + 328);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v8 = UUID.uuidString.getter();
    *(void *)(v0 + 200) = sub_1000A2E70(v8, v9, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v17(v4, v16);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "handleResponse posted disapproval notification for %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29(v23, v22);
    v17(v27, v16);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    uint64_t v10 = *(void **)(v0 + 456);
    uint64_t v11 = *(void **)(v0 + 424);
    uint64_t v28 = *(void *)(v0 + 408);
    uint64_t v12 = *(void *)(v0 + 384);
    uint64_t v13 = *(void **)(v0 + 376);
    uint64_t v24 = *(void *)(v0 + 304);
    uint64_t v25 = *(void *)(v0 + 328);

    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26(v4, v12);
    swift_task_dealloc();
    v30(v25, v24);
    v26(v28, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10024B298()
{
  uint64_t v1 = *(void **)(v0 + 456);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  uint64_t v2 = *(void **)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v4 = *(void **)(v0 + 376);

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v7, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10024B3F8()
{
  uint64_t v1 = *(void **)(v0 + 560);
  uint64_t v2 = *(void **)(v0 + 456);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  uint64_t v3 = *(void **)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 408);
  uint64_t v4 = *(void **)(v0 + 376);

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v8, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10024B55C()
{
  uint64_t v1 = *(void **)(v0 + 456);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  uint64_t v2 = *(void **)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v4 = *(void **)(v0 + 376);

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v7, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10024B6BC(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10024B798, 0, 0);
}

uint64_t sub_10024B798()
{
  uint64_t v57 = v0;
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[10];
  id v3 = [v1 notification];
  id v4 = [v3 request];
  v0[11] = v4;

  id v5 = [v4 content];
  id v6 = [v5 categoryIdentifier];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  id v10 = [v1 actionIdentifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  sub_10023C904(v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  uint64_t v53 = v11;
  unint64_t v54 = v13;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v50 = v0[7];
    uint64_t v51 = v0[6];
    uint64_t v52 = v0[10];
    uint64_t v16 = swift_slowAlloc();
    v56[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    swift_bridgeObjectRetain();
    v0[2] = sub_1000A2E70(v7, v9, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[3] = sub_1000A2E70(v11, v13, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "handleResponse from User Notification for  %{public}s with action %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v17(v52, v51);
  }
  else
  {
    id v18 = v4;
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[6];
    uint64_t v21 = v0[7];

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    uint64_t v22 = v19;
    id v4 = v18;
    v17(v22, v20);
  }
  uint64_t v23 = type metadata accessor for UUID();
  v0[12] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v0[13] = v24;
  uint64_t v25 = swift_task_alloc();
  v0[14] = v25;
  sub_10009EE78(&qword_100342B20);
  uint64_t v26 = swift_task_alloc();
  uint64_t v27 = v4;
  id v28 = [v4 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v23) == 1)
  {
    uint64_t v29 = v0[8];
    swift_bridgeObjectRelease();
    sub_1000A4FD8(v26, &qword_100342B20);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10023C904(v29);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "User Notification response has no requestIdentifier", v32, 2u);
      swift_slowDealloc();
    }
    uint64_t v33 = v0[8];
    uint64_t v34 = v0[6];

    v17(v33, v34);
    sub_100253B48();
    swift_allocError();
    *uint64_t v35 = 5;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v25, v26, v23);
  swift_task_dealloc();
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v53 && v38 == v54)
  {
    Swift::Int isa = 900;
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v40)
  {
    Swift::Int isa = 900;
    goto LABEL_16;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v53 && v46 == v54)
  {
    Swift::Int isa = 3600;
    goto LABEL_13;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v47)
  {
    Swift::Int isa = 3600;
    goto LABEL_16;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v53 && v48 == v54)
  {
    Swift::Int isa = 0;
    goto LABEL_13;
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::Int isa = 0;
  if ((v49 & 1) == 0)
  {
    uint64_t v41 = 1;
    goto LABEL_18;
  }
LABEL_17:
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  Swift::Int isa = (Swift::Int)NSNumber.init(integerLiteral:)(isa).super.super.isa;
  uint64_t v41 = 0;
LABEL_18:
  v0[15] = isa;
  uint64_t v42 = v0[5];
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  v43[2] = v42;
  v43[3] = v25;
  v43[4] = v41;
  v43[5] = isa;
  Logger.init(subsystem:category:)();
  uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                              + dword_1003467A8);
  uint64_t v44 = (void *)swift_task_alloc();
  v0[17] = v44;
  void *v44 = v0;
  v44[1] = sub_10024BF78;
  uint64_t v45 = v0[9];
  return v55((uint64_t)"AskService.handleAnswer", 23, 2, v45, 1, 0, (uint64_t)&unk_1003467A0, (uint64_t)v43);
}

uint64_t sub_10024BF78()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10024C158;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10024C094;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10024C094()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10024C158()
{
  uint64_t v1 = (void *)v0[15];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  id v5 = (void *)v0[11];
  uint64_t v4 = v0[12];
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10024C218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_10024C328, 0, 0);
}

uint64_t sub_10024C328()
{
  uint64_t v1 = (void *)v0[7];
  sub_10023C904(v0[15]);
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)v0[7];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138543362;
    id v9 = [v6 timeRequested];
    id v10 = v9;
    if (v9) {
      v0[5] = v9;
    }
    else {
      v0[4] = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = (void *)v0[7];
    *uint64_t v8 = v10;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Approving exception for usage limit, requested: %{public}@", v7, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[11];
  uint64_t v14 = v0[12];
  os_log_type_t v15 = (objc_class *)v0[8];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v0[16] = v16;
  v0[17] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v12, v13);
  uint64_t v17 = sub_100250488(v15);
  v0[18] = v17;
  if (v17)
  {
    uint64_t v18 = v17;
    sub_10009EE78(&qword_100342B30);
    uint64_t v19 = swift_task_alloc();
    v0[19] = v19;
    uint64_t v20 = (void *)swift_task_alloc();
    v0[20] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10024C734;
    uint64_t v21 = v0[9];
    uint64_t v22 = v0[7];
    return sub_10024CDEC(v19, v18, v22, v21);
  }
  else
  {
    sub_10023C904(v0[13]);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Approving exception but no time granted", v26, 2u);
      swift_slowDealloc();
    }
    uint64_t v27 = v0[13];
    uint64_t v28 = v0[11];

    v16(v27, v28);
    type metadata accessor for DataStore.DataStoreError(0);
    sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = (uint64_t (*)(void))v0[1];
    return v29();
  }
}

uint64_t sub_10024C734()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10024CD30;
  }
  else {
    id v2 = sub_10024C874;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10024C874()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[19];
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  BOOL v5 = (void *)v0[18];
  if (v4 == 1)
  {
    sub_1000A4FD8(v1, &qword_100342B30);
    swift_task_dealloc();
    type metadata accessor for DataStore.DataStoreError(0);
    sub_10025A220((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8, v1, v2);
    swift_task_dealloc();
    sub_10023C904(v7);
    uint64_t v9 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v9, v8, v2);
    id v10 = v5;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = (void *)v0[18];
    os_log_type_t v15 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v16 = v0[14];
    uint64_t v26 = v0[11];
    if (v13)
    {
      os_log_type_t v25 = (void (*)(uint64_t, uint64_t))v0[16];
      uint64_t v17 = swift_slowAlloc();
      os_log_type_t type = v12;
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138543618;
      v0[2] = v14;
      os_log_t log = v11;
      id v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v14;

      *(_WORD *)(v17 + 12) = 2082;
      sub_100259C00((unint64_t *)&qword_100341938, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1000A2E70(v20, v21, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v2);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Approved exception for usage limit %{public}@ %{public}s", (uint8_t *)v17, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v25(v16, v26);
      swift_task_dealloc();
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v2);
      swift_task_dealloc();
      v15(v16, v26);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  return v6();
}

uint64_t sub_10024CD30()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10024CDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_10024CEC4, 0, 0);
}

uint64_t sub_10024CEC4()
{
  char v40 = v0;
  uint64_t v2 = (void *)v0[7];
  uint64_t v1 = (void *)v0[8];
  sub_10023C904(v0[14]);
  id v3 = v2;
  id v4 = v1;
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  uint64_t v9 = &selRef_numberWithUnsignedInteger_;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v36 = v0[12];
    uint64_t v37 = v0[11];
    uint64_t v38 = v0[14];
    id v10 = (void *)v0[7];
    id v33 = (id)v0[8];
    uint64_t v11 = swift_slowAlloc();
    os_log_t log = v7;
    os_log_type_t v12 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v0[4] = v10;
    uint64_t v39 = v35;
    *(_DWORD *)uint64_t v11 = 138543618;
    id v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v12 = v10;

    *(_WORD *)(v11 + 12) = 2082;
    id v14 = [v33 requestedResourceIdentifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v18 = v15;
    uint64_t v9 = &selRef_numberWithUnsignedInteger_;
    v0[5] = sub_1000A2E70(v18, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Approving %{public}@ seconds for %{public}s", (uint8_t *)v11, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v19 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v19(v38, v37);
  }
  else
  {
    uint64_t v20 = v0[14];
    uint64_t v21 = v0[11];
    uint64_t v22 = v0[12];
    uint64_t v24 = (void *)v0[7];
    uint64_t v23 = (void *)v0[8];

    id v19 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v19(v20, v21);
  }
  v0[15] = v19;
  os_log_type_t v25 = (void *)v0[8];
  id v26 = [v25 v9[244]];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  v0[16] = v29;
  id v30 = [v25 usageType];
  os_log_type_t v31 = (void *)swift_task_alloc();
  v0[17] = v31;
  *os_log_type_t v31 = v0;
  v31[1] = sub_10024D21C;
  return sub_10024DE48(v27, v29, (uint64_t)v30);
}

uint64_t sub_10024D21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = (void *)*v5;
  v6[18] = a1;
  v6[19] = a2;
  v6[20] = a3;
  v6[21] = a4;
  v6[22] = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v7 = sub_10024DDD4;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_10024D340;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10024D340()
{
  uint64_t v77 = v0;
  uint64_t v1 = *(void *)(v0 + 144);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = self;
    id v3 = CEMPolicyAppDeclaration_Mode_override;
    sub_100253DEC(v1);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    id v5 = [v2 buildWithIdentifier:0 withMode:v3 withApps:isa];

    id v6 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 160);
  if (!*(void *)(v8 + 16) && !*(void *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v9 = self;
  id v10 = CEMPolicyCategoryDeclaration_Mode_override;
  sub_100253DEC(v8);
  swift_bridgeObjectRelease();
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  sub_100253DEC(v7);
  swift_bridgeObjectRelease();
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v13 = [v9 buildWithIdentifier:0 withMode:v10 withCategories:v11 withCategoriesVersion2:v12];

  id v14 = v13;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_39;
  }
  while (1)
  {
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

LABEL_10:
    uint64_t v15 = *(void *)(v0 + 168);
    if (*(void *)(v15 + 16))
    {
      unint64_t v16 = self;
      id v17 = CEMPolicyWebSiteDeclaration_Mode_override;
      sub_100253DEC(v15);
      swift_bridgeObjectRelease();
      Class v18 = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      id v19 = [v16 buildWithIdentifier:0 withMode:v17 withHostnames:v18];

      id v20 = v19;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    Class v21 = (Class)[*(id *)(v0 + 64) requestingUserDSID];
    if (!v21)
    {
      sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
      Class v21 = NSNumber.init(integerLiteral:)(0).super.super.isa;
    }
    uint64_t v22 = *(void *)(v0 + 176);
    sub_1001DE3B0(v21);
    if (v22)
    {
      swift_bridgeObjectRelease();

      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_31;
    }
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)(v0 + 72);
    id v26 = *(void **)(v0 + 56);

    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = swift_task_alloc();
    id v30 = [self now];
    uint64_t v31 = swift_task_alloc();
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    [v26 doubleValue];
    Date.addingTimeInterval(_:)();
    uint64_t v70 = v28;
    uint64_t v32 = v28 + 8;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v27);
    swift_task_dealloc();
    *(unsigned char *)(v0 + 184) = 0;
    id v33 = sub_1001D7640();
    id v14 = (id)swift_task_alloc();
    *((void *)v14 + 2) = v25;
    *((void *)v14 + 3) = v24;
    *((void *)v14 + 4) = v0 + 184;
    NSManagedObjectContext.performAndWait<A>(_:)();

    uint64_t v74 = v29;
    swift_task_dealloc();
    char v73 = *(unsigned char *)(v0 + 184);
    uint64_t v69 = v27;
    uint64_t v75 = v24;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v34 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v34) {
      break;
    }
    uint64_t v35 = 0;
    while (1)
    {
      uint64_t v36 = v32;
      id v37 = ((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (id)_swiftEmptyArrayStorage[v35 + 4];
      uint64_t v38 = v37;
      uint64_t v39 = v35 + 1;
      if (__OFADD__(v35, 1)) {
        break;
      }
      uint64_t v40 = *(void *)(v0 + 72);
      unsigned __int8 v41 = [*(id *)(v0 + 64) oneMoreMinute];
      id v42 = sub_1001D7640();
      id v14 = (id)swift_task_alloc();
      *((void *)v14 + 2) = v38;
      *((void *)v14 + 3) = v40;
      *((void *)v14 + 4) = v75;
      *((unsigned char *)v14 + 40) = v73;
      *((unsigned char *)v14 + 41) = v41;
      *((void *)v14 + 6) = v74;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_task_dealloc();
      ++v35;
      uint64_t v32 = v36;
      if (v39 == v34) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_39:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
LABEL_30:
  swift_bridgeObjectRelease();
  id v43 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v46 = *(void *)(v0 + 104);
  uint64_t v48 = *(void **)(v0 + 56);
  char v47 = *(void **)(v0 + 64);

  sub_10023C904(v46);
  id v49 = v48;
  id v50 = v47;
  id v51 = v49;
  id v52 = v50;
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  uint64_t v57 = *(void *)(v0 + 104);
  uint64_t v58 = *(void *)(v0 + 88);
  uint64_t v59 = *(void **)(v0 + 56);
  uint64_t v60 = *(void **)(v0 + 64);
  if (v55)
  {
    uint64_t v61 = swift_slowAlloc();
    uint64_t v68 = (void *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 136446466;
    uint64_t v72 = v57;
    id v62 = [v60 requestedResourceIdentifier];
    uint64_t v71 = v58;
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v65 = v64;

    *(void *)(v0 + 16) = sub_1000A2E70(v63, v65, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v61 + 12) = 2114;
    *(void *)(v0 + 24) = v59;
    id v66 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v68 = v59;

    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Successfully saved ask for time override declaration for %{public}s with time %{public}@", (uint8_t *)v61, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v56(v72, v71);
  }
  else
  {

    v56(v57, v58);
  }
  uint64_t v67 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v67, v74, v69);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
LABEL_31:
  return v44();
}

uint64_t sub_10024DDD4()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10024DE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[67] = v3;
  v4[66] = a3;
  v4[65] = a2;
  v4[64] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v4[68] = v5;
  v4[69] = *(void *)(v5 - 8);
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  return _swift_task_switch(sub_10024DF24, 0, 0);
}

uint64_t sub_10024DF24()
{
  id v83 = v0;
  uint64_t v1 = v0[66];
  v0[62] = &_swiftEmptySetSingleton;
  v0[63] = &_swiftEmptySetSingleton;
  v0[59] = &_swiftEmptySetSingleton;
  v0[60] = &_swiftEmptySetSingleton;
  switch(v1)
  {
    case 2:
      NSString v17 = String._bridgeToObjectiveC()();
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
      if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
      {
        id v48 = v17;
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v24 = v17;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_32;
        }
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;
        if (v25 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v27 != v28)
        {
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v30 & 1) == 0)
          {
            uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v33 = v32;
            if (v31 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v33 != v34)
            {
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v35 & 1) == 0) {
                goto LABEL_34;
              }
              goto LABEL_33;
            }
            goto LABEL_31;
          }
LABEL_32:

LABEL_33:
          Swift::Int v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_100257ACC(v82, v49, v50);
          swift_bridgeObjectRelease();
LABEL_34:
          Swift::Int v51 = v0[65];
          Swift::Int v52 = v0[64];
          swift_bridgeObjectRetain();
          sub_100257ACC(v82, v52, v51);

          swift_bridgeObjectRelease();
LABEL_35:
          sub_10023C904(v0[70]);
          swift_bridgeObjectRetain_n();
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.default.getter();
          BOOL v55 = os_log_type_enabled(v53, v54);
          uint64_t v56 = v0[70];
          uint64_t v57 = v0[69];
          uint64_t v58 = v0[68];
          unint64_t v59 = v0[65];
          if (v55)
          {
            os_log_t log = v53;
            uint64_t v60 = v0[64];
            uint64_t v79 = v0[69];
            uint64_t v61 = swift_slowAlloc();
            v82[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v61 = 136447234;
            swift_bridgeObjectRetain();
            v0[56] = sub_1000A2E70(v60, v59, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v61 + 12) = 2082;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            uint64_t v80 = v56;
            uint64_t v62 = Set.description.getter();
            unint64_t v64 = v63;
            swift_bridgeObjectRelease();
            v0[54] = sub_1000A2E70(v62, v64, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v61 + 22) = 2082;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            uint64_t v65 = Set.description.getter();
            unint64_t v67 = v66;
            swift_bridgeObjectRelease();
            v0[53] = sub_1000A2E70(v65, v67, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v61 + 32) = 2082;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            uint64_t v68 = Set.description.getter();
            unint64_t v70 = v69;
            swift_bridgeObjectRelease();
            v0[55] = sub_1000A2E70(v68, v70, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v61 + 42) = 2082;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            uint64_t v71 = Set.description.getter();
            unint64_t v73 = v72;
            swift_bridgeObjectRelease();
            v0[57] = sub_1000A2E70(v71, v73, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, log, v54, "categorizedResourceBundleIdentifiers - categorized %{public}s to %{public}s, %{public}s, %{public}s,  %{public}s", (uint8_t *)v61, 0x34u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v58);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
          }
          swift_beginAccess();
          uint64_t v74 = v0[63];
          swift_beginAccess();
          uint64_t v75 = v0[62];
          swift_beginAccess();
          uint64_t v76 = v0[60];
          swift_beginAccess();
          uint64_t v77 = v0[59];
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
          return v78(v74, v75, v76, v77);
        }
      }
LABEL_31:
      swift_bridgeObjectRelease_n();
      goto LABEL_32;
    case 1:
      Swift::Int v8 = v0[65];
      Swift::Int v9 = v0[64];
      swift_bridgeObjectRetain();
      sub_100257ACC(v82, v9, v8);
      swift_bridgeObjectRelease();
      uint64_t v10 = type metadata accessor for URLComponents();
      v0[75] = v10;
      uint64_t v11 = *(void *)(v10 - 8);
      v0[76] = v11;
      uint64_t v12 = swift_task_alloc();
      v0[77] = v12;
      URLComponents.init()();
      swift_bridgeObjectRetain();
      URLComponents.host.setter();
      uint64_t v13 = type metadata accessor for URL();
      v0[78] = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      v0[79] = v14;
      uint64_t v15 = swift_task_alloc();
      v0[80] = v15;
      sub_10009EE78(&qword_1003460E0);
      uint64_t v16 = swift_task_alloc();
      URLComponents.url.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13) != 1)
      {
        uint64_t v2 = v0 + 10;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v15, v16, v13);
        swift_task_dealloc();
        id v43 = [self sharedCategories];
        v0[81] = v43;
        URL._bridgeToObjectiveC()(v44);
        uint64_t v46 = v45;
        v0[82] = v45;
        v0[10] = v0;
        v0[15] = v0 + 58;
        v0[11] = sub_10024F268;
        uint64_t v47 = swift_continuation_init();
        v0[23] = _NSConcreteStackBlock;
        v0[24] = 0x40000000;
        v0[25] = sub_1002120EC;
        v0[26] = &unk_100309F08;
        v0[27] = v47;
        [v43 categoryForDomainURL:v46 completionHandler:v0 + 23];
        goto LABEL_27;
      }
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v10);
      sub_1000A4FD8(v16, &qword_1003460E0);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      goto LABEL_35;
    case 0:
      uint64_t v2 = v0 + 2;
      Swift::Int v3 = v0[65];
      Swift::Int v4 = v0[64];
      swift_bridgeObjectRetain();
      sub_100257ACC(v82, v4, v3);
      swift_bridgeObjectRelease();
      id v5 = [self sharedCategories];
      v0[72] = v5;
      NSString v6 = String._bridgeToObjectiveC()();
      v0[73] = v6;
      v0[2] = v0;
      v0[7] = v0 + 61;
      v0[3] = sub_10024EBAC;
      uint64_t v7 = swift_continuation_init();
      v0[18] = _NSConcreteStackBlock;
      v0[19] = 0x40000000;
      v0[20] = sub_1002120EC;
      v0[21] = &unk_100309F20;
      v0[22] = v7;
      [v5 categoryForBundleID:v6 completionHandler:v0 + 18];
LABEL_27:
      return _swift_continuation_await(v2);
  }
  sub_10023C904(v0[71]);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = v0[66];
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 134349056;
    v0[52] = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "categorizedResourceBundleIdentifiers - unexpected usage type %{public}ld", v39, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(void, void))(v0[69] + 8))(v0[71], v0[68]);
  sub_100253B48();
  swift_allocError();
  *uint64_t v40 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned __int8 v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

uint64_t sub_10024EBAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 592) = v1;
  if (v1) {
    uint64_t v2 = sub_10024FA00;
  }
  else {
    uint64_t v2 = sub_10024ECBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10024ECBC()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void **)(v0 + 584);
  uint64_t v2 = *(void **)(v0 + 488);

  if (v2)
  {
    id v3 = [v2 canonicalBundleIdentifier];
    if (v3)
    {
      uint64_t v4 = v3;
      Swift::Int v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v7 = v6;

      sub_100257ACC(v43, v5, v7);
      swift_bridgeObjectRelease();
    }
    id v8 = [v2 primaryWebDomain];
    if (v8)
    {
      Swift::Int v9 = v8;
      Swift::Int v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v12 = v11;

      sub_100257ACC(v43, v10, v12);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  sub_10023C904(*(void *)(v0 + 560));
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(void *)(v0 + 560);
  uint64_t v17 = *(void *)(v0 + 552);
  uint64_t v18 = *(void *)(v0 + 544);
  unint64_t v19 = *(void *)(v0 + 520);
  if (v15)
  {
    uint64_t v41 = *(void *)(v0 + 560);
    uint64_t v42 = *(void *)(v0 + 544);
    uint64_t v20 = *(void *)(v0 + 512);
    uint64_t v21 = swift_slowAlloc();
    v43[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136447234;
    os_log_type_t type = v14;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 448) = sub_1000A2E70(v20, v19, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v22 = Set.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 432) = sub_1000A2E70(v22, v24, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v25 = Set.description.getter();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 424) = sub_1000A2E70(v25, v27, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 32) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v28 = Set.description.getter();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 440) = sub_1000A2E70(v28, v30, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 42) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v31 = Set.description.getter();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 456) = sub_1000A2E70(v31, v33, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, type, "categorizedResourceBundleIdentifiers - categorized %{public}s to %{public}s, %{public}s, %{public}s,  %{public}s", (uint8_t *)v21, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v41, v42);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  swift_beginAccess();
  uint64_t v34 = *(void *)(v0 + 504);
  swift_beginAccess();
  uint64_t v35 = *(void *)(v0 + 496);
  swift_beginAccess();
  uint64_t v36 = *(void *)(v0 + 480);
  swift_beginAccess();
  uint64_t v37 = *(void *)(v0 + 472);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v38(v34, v35, v36, v37);
}

uint64_t sub_10024F268()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 664) = v1;
  if (v1) {
    uint64_t v2 = sub_10024FF14;
  }
  else {
    uint64_t v2 = sub_10024F378;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10024F378()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(void **)(v0 + 656);
  uint64_t v2 = *(void **)(v0 + 464);

  if (v2)
  {
    id v3 = [v2 primaryWebDomain];
    if (v3)
    {
      uint64_t v4 = v3;
      Swift::Int v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v7 = v6;

      sub_100257ACC(v53, v5, v7);
      swift_bridgeObjectRelease();
    }
    id v8 = [v2 canonicalBundleIdentifier];
    uint64_t v9 = *(void *)(v0 + 640);
    uint64_t v10 = *(void *)(v0 + 632);
    uint64_t v11 = *(void *)(v0 + 624);
    uint64_t v12 = *(void *)(v0 + 616);
    uint64_t v13 = *(void *)(v0 + 608);
    uint64_t v14 = *(void *)(v0 + 600);
    if (v8)
    {
      BOOL v15 = v8;
      uint64_t v51 = *(void *)(v0 + 600);
      Swift::Int v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v18 = v17;

      sub_100257ACC(v53, v16, v18);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v51);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 616);
    uint64_t v20 = *(void *)(v0 + 608);
    uint64_t v21 = *(void *)(v0 + 600);
    (*(void (**)(void, void))(*(void *)(v0 + 632) + 8))(*(void *)(v0 + 640), *(void *)(v0 + 624));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10023C904(*(void *)(v0 + 560));
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void *)(v0 + 560);
  uint64_t v26 = *(void *)(v0 + 552);
  uint64_t v27 = *(void *)(v0 + 544);
  unint64_t v28 = *(void *)(v0 + 520);
  if (v24)
  {
    os_log_type_t type = v23;
    uint64_t v52 = *(void *)(v0 + 560);
    uint64_t v29 = *(void *)(v0 + 512);
    uint64_t v30 = swift_slowAlloc();
    v53[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136447234;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 448) = sub_1000A2E70(v29, v28, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v49 = v27;
    uint64_t v31 = Set.description.getter();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 432) = sub_1000A2E70(v31, v33, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v34 = Set.description.getter();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 424) = sub_1000A2E70(v34, v36, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 32) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v37 = Set.description.getter();
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 440) = sub_1000A2E70(v37, v39, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 42) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v40 = Set.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 456) = sub_1000A2E70(v40, v42, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, type, "categorizedResourceBundleIdentifiers - categorized %{public}s to %{public}s, %{public}s, %{public}s,  %{public}s", (uint8_t *)v30, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v52, v49);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }
  swift_beginAccess();
  uint64_t v43 = *(void *)(v0 + 504);
  swift_beginAccess();
  uint64_t v44 = *(void *)(v0 + 496);
  swift_beginAccess();
  uint64_t v45 = *(void *)(v0 + 480);
  swift_beginAccess();
  uint64_t v46 = *(void *)(v0 + 472);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v47(v43, v44, v45, v46);
}

uint64_t sub_10024FA00()
{
  uint64_t v34 = v0;
  uint64_t v1 = (void *)v0[73];
  uint64_t v2 = (void *)v0[72];
  swift_willThrow();
  swift_errorRelease();

  sub_10023C904(v0[70]);
  swift_bridgeObjectRetain_n();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v30 = v0[69];
    uint64_t v31 = v0[68];
    uint64_t v32 = v0[70];
    unint64_t v5 = v0[65];
    os_log_type_t type = v4;
    uint64_t v6 = v0[64];
    uint64_t v7 = swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136447234;
    swift_bridgeObjectRetain();
    v0[56] = sub_1000A2E70(v6, v5, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v0[54] = sub_1000A2E70(v8, v10, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v11 = Set.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[53] = sub_1000A2E70(v11, v13, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 32) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v14 = Set.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    v0[55] = sub_1000A2E70(v14, v16, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 42) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v17 = Set.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v0[57] = sub_1000A2E70(v17, v19, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, type, "categorizedResourceBundleIdentifiers - categorized %{public}s to %{public}s, %{public}s, %{public}s,  %{public}s", (uint8_t *)v7, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
  }
  else
  {
    uint64_t v20 = v0[70];
    uint64_t v21 = v0[69];
    uint64_t v22 = v0[68];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  swift_beginAccess();
  uint64_t v23 = v0[63];
  swift_beginAccess();
  uint64_t v24 = v0[62];
  swift_beginAccess();
  uint64_t v25 = v0[60];
  swift_beginAccess();
  uint64_t v26 = v0[59];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
  return v27(v23, v24, v25, v26);
}

uint64_t sub_10024FF14()
{
  unint64_t v36 = v0;
  uint64_t v1 = (void *)v0[82];
  uint64_t v2 = (void *)v0[81];
  swift_willThrow();
  swift_errorRelease();

  uint64_t v3 = v0[77];
  uint64_t v4 = v0[76];
  uint64_t v5 = v0[75];
  (*(void (**)(void, void))(v0[79] + 8))(v0[80], v0[78]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10023C904(v0[70]);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v32 = v0[69];
    uint64_t v33 = v0[68];
    uint64_t v34 = v0[70];
    unint64_t v8 = v0[65];
    uint64_t v9 = v0[64];
    uint64_t v10 = swift_slowAlloc();
    v35[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136447234;
    swift_bridgeObjectRetain();
    v0[56] = sub_1000A2E70(v9, v8, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v11 = Set.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[54] = sub_1000A2E70(v11, v13, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v14 = Set.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    v0[53] = sub_1000A2E70(v14, v16, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 32) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v17 = Set.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v0[55] = sub_1000A2E70(v17, v19, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 42) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v20 = Set.description.getter();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    v0[57] = sub_1000A2E70(v20, v22, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "categorizedResourceBundleIdentifiers - categorized %{public}s to %{public}s, %{public}s, %{public}s,  %{public}s", (uint8_t *)v10, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    uint64_t v23 = v0[70];
    uint64_t v24 = v0[69];
    uint64_t v25 = v0[68];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  swift_beginAccess();
  uint64_t v26 = v0[63];
  swift_beginAccess();
  uint64_t v27 = v0[62];
  swift_beginAccess();
  uint64_t v28 = v0[60];
  swift_beginAccess();
  uint64_t v29 = v0[59];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
  return v30(v26, v27, v28, v29);
}

uint64_t sub_100250488(Class a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v71 - v9;
  if (!a1)
  {
    unint64_t v13 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  unint64_t v13 = a1;
  char v14 = static NSObject.== infix(_:_:)();

  if ((v14 & 1) == 0)
  {
LABEL_7:
    sub_10023C904((uint64_t)v10);
    uint64_t v62 = v13;
    unint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v92 = v5;
      uint64_t v93 = v4;
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      v95[0] = (Class)swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 136446210;
      if (a1)
      {
        id v66 = [(objc_class *)v62 stringValue];
        uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v69 = v68;
      }
      else
      {
        unint64_t v69 = 0xE400000000000000;
        uint64_t v67 = 1701736302;
      }
      uint64_t v94 = sub_1000A2E70(v67, v69, (uint64_t *)v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Request time granted %{public}s", v65, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v92 + 8))(v10, v93);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    unint64_t v70 = v62;
    return (uint64_t)a1;
  }
  v71[1] = v11;
  uint64_t v71[2] = v2;
  uint64_t v90 = v8;
  uint64_t v92 = v5;
  uint64_t v93 = v4;
  uint64_t v15 = sub_10009EE78(&qword_100342B30);
  v71[0] = v71;
  uint64_t v88 = *(void *)(*(void *)(v15 - 8) + 64);
  __chkstk_darwin(v15 - 8);
  unint64_t v89 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  os_log_type_t v91 = (char *)v71 - v89;
  id v17 = [self currentCalendar];
  uint64_t v18 = type metadata accessor for Calendar();
  uint64_t v87 = v71;
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v78 = v18;
  uint64_t v79 = v19;
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v83 = type metadata accessor for Date();
  uint64_t v86 = v71;
  uint64_t v85 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v80 = (char *)v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v23 = type metadata accessor for DateComponents();
  uint64_t v84 = v71;
  uint64_t v81 = *(void *)(v23 - 8);
  uint64_t v82 = v23;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10009EE78(&qword_100341960);
  __chkstk_darwin(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))((char *)v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v18);
  uint64_t v28 = sub_10009EE78((uint64_t *)&unk_100340F30);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  uint64_t v32 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v77 = v71;
  uint64_t v74 = v32;
  uint64_t v75 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)v71 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v35 + 104))(v34, enum case for Calendar.MatchingPolicy.nextTime(_:));
  uint64_t v36 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v76 = v71;
  uint64_t v72 = v36;
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v39 = (char *)v71 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v37 + 104))(v39, enum case for Calendar.RepeatedTimePolicy.first(_:));
  uint64_t v40 = type metadata accessor for Calendar.SearchDirection();
  unint64_t v73 = v71;
  uint64_t v41 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)v71 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v43, enum case for Calendar.SearchDirection.forward(_:), v40);
  uint64_t v44 = (uint64_t)v91;
  uint64_t v45 = v80;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  uint64_t v46 = v43;
  uint64_t v47 = v83;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v46, v40);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v72);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v34, v74);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v25, v82);
  uint64_t v48 = v85;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v85 + 8);
  v49(v45, v47);
  uint64_t v50 = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v21, v78);
  __chkstk_darwin(v50);
  uint64_t v51 = (char *)v71 - v89;
  sub_1000D9F9C(v44, (uint64_t)v71 - v89, &qword_100342B30);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v51, 1, v47);
  if (result != 1)
  {
    Date.timeIntervalSinceNow.getter();
    Swift::Double v54 = v53;
    v49(v51, v47);
    Class v55 = NSNumber.init(floatLiteral:)(v54).super.super.isa;
    uint64_t v56 = (uint64_t)v90;
    sub_10023C904((uint64_t)v90);
    a1 = v55;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      unint64_t v59 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v59 = 138543362;
      uint64_t v56 = (uint64_t)v90;
      v95[0] = a1;
      uint64_t v61 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v60 = a1;

      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Request is for all day, recalculating and granting %{public}@ seconds", v59, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      uint64_t v44 = (uint64_t)v91;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v56, v93);
    sub_1000A4FD8(v44, &qword_100342B30);
    return (uint64_t)a1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100251038(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100251114, 0, 0);
}

uint64_t sub_100251114()
{
  uint64_t v46 = v0;
  uint64_t v1 = (void *)v0[5];
  sub_10009EE78(&qword_100342B20);
  uint64_t v2 = swift_task_alloc();
  id v3 = [v1 requestIdentifier];
  uint64_t v4 = swift_task_alloc();
  if (v3)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  }
  else
  {
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_1000A2214(v4, v2);
  type metadata accessor for UUID();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5))
  {
    uint64_t v7 = v0[9];
    swift_task_dealloc();
    sub_1000A4FD8(v2, &qword_100342B20);
    swift_task_dealloc();
    sub_10023C904(v7);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request ID was nil. Bailing.", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[8];
    uint64_t v11 = v0[9];
    uint64_t v13 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    sub_100253B48();
    swift_allocError();
    *char v14 = 5;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    uint64_t v42 = (void *)v0[5];
    uint64_t v44 = v0[11];
    uint64_t v17 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v17, v2, v5);
    sub_1000A4FD8(v2, &qword_100342B20);
    uint64_t v18 = UUID.uuidString.getter();
    unint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v21 = v42;
    uint64_t v43 = v18;
    uint64_t v22 = (void *)sub_100258FC8(v21, v18, v20);
    v0[12] = v22;
    sub_10023C904(v44);
    id v23 = v22;
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = v0[11];
    uint64_t v28 = v0[7];
    uint64_t v29 = v0[8];
    if (v26)
    {
      os_log_t log = v24;
      id v30 = v23;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136446466;
      swift_bridgeObjectRetain();
      v0[3] = sub_1000A2E70(v43, v20, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v31 + 12) = 2112;
      v0[4] = v23;
      id v32 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v40 = v30;

      id v23 = v30;
      _os_log_impl((void *)&_mh_execute_header, log, v25, "Created question for request with ID %{public}s: %@", (uint8_t *)v31, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v33(v27, v28);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v33(v27, v28);
    }
    sub_10023C904(v0[10]);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Sending AskTo payload with legacy destination support", v36, 2u);
      swift_slowDealloc();
    }
    uint64_t v37 = v0[10];
    uint64_t v38 = v0[7];

    v33(v37, v38);
    v0[2] = 0;
    type metadata accessor for ATDispatchCenter();
    v0[13] = static ATDispatchCenter.shared.getter();
    unint64_t v39 = (void *)swift_task_alloc();
    v0[14] = v39;
    *unint64_t v39 = v0;
    v39[1] = sub_100251804;
    return ATDispatchCenter.send(_:to:destinationsNotSupportingLegacyAskViaMessages:)(v23, 0, v0 + 2);
  }
}

uint64_t sub_100251804()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v0) {
    id v3 = sub_1002519DC;
  }
  else {
    id v3 = sub_100251954;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100251954()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002519DC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100251A64(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (uint8_t *)type metadata accessor for Logger();
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v75 = (uint64_t)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v65 - v9;
  id v11 = [a1 usageType];
  uint64_t v70 = v2;
  if (v11 == (id)1)
  {
    id v15 = [a1 requestedResourceIdentifier];
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v74 = v16;

    uint64_t v68 = 0;
    unint64_t v73 = 0;
    int v14 = 1;
    goto LABEL_5;
  }
  if (!v11)
  {
    id v12 = [a1 requestedResourceIdentifier];
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v73 = v13;

    uint64_t v67 = 0;
    uint64_t v74 = 0;
    int v14 = 2;
LABEL_5:
    unsigned int v71 = v14;
    goto LABEL_7;
  }
  unsigned int v71 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v73 = 0;
  uint64_t v74 = 0;
LABEL_7:
  sub_10023C904((uint64_t)v10);
  uint64_t v17 = a1;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v76 = v17;
  uint64_t v69 = v3;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v72 = v10;
    uint64_t v22 = (uint8_t *)v21;
    id v23 = (void *)swift_slowAlloc();
    id v66 = v22;
    *(_DWORD *)uint64_t v22 = 138543362;
    uint64_t v77 = v76;
    uint64_t v24 = v76;
    uint64_t v17 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v23 = v17;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Creating event for %{public}@", v66, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v10 = v72;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v18 = v17;
  }

  uint64_t v27 = *(NSObject **)(v6 + 8);
  uint64_t v25 = v6 + 8;
  BOOL v26 = v27;
  ((void (*)(char *, uint8_t *))v27)(v10, v5);
  id v28 = [v17 requestIdentifier];
  uint64_t v29 = sub_10009EE78(&qword_100342B20);
  uint64_t v72 = (char *)v65;
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v28)
  {
    uint64_t v63 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v31, 1, 1, v63);
    goto LABEL_26;
  }
  v65[1] = v25;
  id v66 = v5;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  os_log_type_t v35 = (char *)v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v31, v35, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v31, 0, 1, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_27;
  }
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v32);
  uint64_t v36 = v76;
  id v37 = [v76 timeStamp];
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)v65 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSinceReferenceDate.getter();
  double v43 = v42;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  id v44 = [v36 requestingUserDSID];
  if (!v44)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  uint64_t v45 = v44;
  id v46 = [v44 stringValue];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v74)
  {
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v49 = 0;
  }
  uint64_t v50 = v71;
  if (v73)
  {
    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v51 = 0;
  }
  LOBYTE(v64) = 1;
  id v52 = [objc_allocWithZone((Class)BMScreenTimeRequestEvent) initWithRequestID:v47 kind:v50 status:1 eventTime:0 approvalTime:v48 requesterDSID:0 responderDSID:v43 websitePath:v49 bundleID:v51 isActionUserDevice:v64];

  if (v52)
  {
    id v53 = [self screenTimeRequestStream];
    Swift::Double v54 = [v53 source];

    [v54 sendEvent:v52];
    sub_10023C904(v75);
    Class v55 = v52;
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
      unint64_t v73 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v58 = 138543362;
      uint64_t v77 = v55;
      uint64_t v74 = v54;
      unint64_t v59 = v55;
      uint64_t v76 = v26;
      uint64_t v60 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v73 = v52;

      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Sent event for %{public}@", v58, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      Class v55 = v74;
      Swift::Double v54 = v56;
      uint64_t v56 = v60;
      BOOL v26 = v76;
    }
    else
    {
    }
    return ((uint64_t (*)(uint64_t, uint8_t *))v26)(v75, v66);
  }
  else
  {
    sub_100253B48();
    swift_allocError();
    *uint64_t v61 = 0;
    return swift_willThrow();
  }
}

uint64_t sub_100252354(uint64_t a1, void *a2, void *a3)
{
  unint64_t v130 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v128 = (uint64_t)&v119 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v132 = (char *)&v119 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  Swift::Int v124 = (char *)&v119 - v17;
  __chkstk_darwin(v16);
  os_log_type_t v19 = (char *)&v119 - v18;
  uint64_t v136 = v3;
  sub_10023C904((uint64_t)&v119 - v18);
  id v20 = a2;
  uint64_t v21 = Logger.logObject.getter();
  int v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, (os_log_type_t)v22);
  uint64_t v126 = v4;
  uint64_t v129 = v11;
  uint64_t v131 = a1;
  if (v23)
  {
    LODWORD(v135) = v22;
    uint64_t v133 = v7;
    uint64_t v134 = v8;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v127 = swift_slowAlloc();
    uint64_t v139 = a1;
    v140[0] = v127;
    *(_DWORD *)uint64_t v24 = 134349314;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2082;
    uint64_t v25 = sub_10009EE78(&qword_100342B20);
    uint64_t v125 = &v119;
    uint64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
    __chkstk_darwin(v25 - 8);
    unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v28 = (char *)&v119 - v27;
    uint64_t v29 = &selRef_numberWithUnsignedInteger_;
    id v137 = v20;
    id v30 = [v20 requestIdentifier];
    Swift::Int v123 = &v119;
    if (__chkstk_darwin(v30))
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = type metadata accessor for UUID();
      uint64_t v32 = *(void *)(v31 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))((char *)&v119 - v27, 0, 1, v31);
    }
    else
    {
      uint64_t v31 = type metadata accessor for UUID();
      uint64_t v32 = *(void *)(v31 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))((char *)&v119 - v27, 1, 1, v31);
    }
    sub_1000A2214((uint64_t)&v119 - v27, (uint64_t)&v119 - v27);
    type metadata accessor for UUID();
    uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))((char *)&v119 - v27, 1, v31);
    if (v33)
    {
      sub_1000A4FD8((uint64_t)&v119 - v27, &qword_100342B20);
      unint64_t v34 = 0xED00004449207473;
      uint64_t v35 = 0x6575716572206F4ELL;
    }
    else
    {
      uint64_t v122 = &v119;
      __chkstk_darwin(v33);
      id v37 = (char *)&v119 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v37, v28, v31);
      sub_1000A4FD8((uint64_t)v28, &qword_100342B20);
      uint64_t v35 = UUID.uuidString.getter();
      unint64_t v34 = v38;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v31);
    }
    uint64_t v139 = sub_1000A2E70(v35, v34, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v20 = v137;

    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v135, "Writing AskTo Biome event for response with answer %{public}ldfor %{public}s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = v133;
    uint64_t v8 = v134;
    uint64_t v135 = *(void (**)(char *, uint64_t))(v134 + 8);
    v135(v19, v133);
  }
  else
  {

    uint64_t v135 = *(void (**)(char *, uint64_t))(v8 + 8);
    v135(v19, v7);
    uint64_t v29 = &selRef_numberWithUnsignedInteger_;
  }
  uint64_t v39 = sub_10009EE78(&qword_100342B20);
  uint64_t v40 = *(void *)(*(void *)(v39 - 8) + 64);
  __chkstk_darwin(v39 - 8);
  uint64_t v41 = (char *)&v119 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v42 = [v20 v29[232]];
  if (__chkstk_darwin(v42))
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = type metadata accessor for UUID();
    uint64_t v44 = *(void *)(v43 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  else
  {
    uint64_t v43 = type metadata accessor for UUID();
    uint64_t v44 = *(void *)(v43 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v41, 1, 1, v43);
  }
  sub_1000A2214((uint64_t)v41, (uint64_t)v41);
  type metadata accessor for UUID();
  uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v41, 1, v43);
  if (v45)
  {
    sub_1000A4FD8((uint64_t)v41, &qword_100342B20);
    sub_100253B48();
    swift_allocError();
    *id v46 = 5;
    return swift_willThrow();
  }
  id v137 = v20;
  __chkstk_darwin(v45);
  NSString v49 = (char *)&v119 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v49, v41, v43);
  sub_1000A4FD8((uint64_t)v41, &qword_100342B20);
  uint64_t v125 = (uint64_t *)UUID.uuidString.getter();
  unint64_t v51 = v50;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v43);
  id v52 = v137;
  id v53 = [v137 usageType];
  uint64_t v127 = v51;
  if (v53 == (id)1)
  {
    id v58 = [v52 requestedResourceIdentifier];
    uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v122 = v59;

    uint64_t v120 = 0;
    Swift::Int v123 = 0;
    unsigned int v121 = 1;
    uint64_t v54 = v131;
    uint64_t v55 = (uint64_t)v132;
  }
  else
  {
    uint64_t v54 = v131;
    uint64_t v55 = (uint64_t)v132;
    if (v53)
    {
      unsigned int v121 = 0;
      uint64_t v119 = 0;
      uint64_t v122 = 0;
      uint64_t v120 = 0;
      Swift::Int v123 = 0;
    }
    else
    {
      id v56 = [v52 requestedResourceIdentifier];
      uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v123 = v57;

      unint64_t v51 = v127;
      uint64_t v119 = 0;
      uint64_t v122 = 0;
      unsigned int v121 = 2;
    }
  }
  unsigned int v141 = 0;
  int v60 = 0;
  int v61 = 2;
  switch(v54)
  {
    case 0:
      break;
    case 1:
      int v60 = 1;
      goto LABEL_28;
    case 2:
      int v60 = 2;
      goto LABEL_28;
    case 3:
      int v60 = 3;
LABEL_28:
      unsigned int v141 = v60;
      int v61 = 3;
      break;
    default:
      sub_10023C904((uint64_t)v124);
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v64 = 134349056;
        unint64_t v51 = v127;
        v140[0] = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unknown answer: %{public}ld. Treating as declined.", v64, 0xCu);
        swift_slowDealloc();
      }

      v135(v124, v7);
      int v61 = 2;
      int v60 = v141;
      break;
  }
  LODWORD(v131) = v61;
  sub_10023C904(v55);
  id v65 = v137;
  swift_bridgeObjectRetain_n();
  id v66 = v65;
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  uint64_t v133 = v7;
  uint64_t v134 = v8;
  if (v69)
  {
    uint64_t v70 = swift_slowAlloc();
    Swift::Int v124 = (char *)swift_slowAlloc();
    id v137 = (id)swift_slowAlloc();
    v140[0] = (uint64_t)v137;
    *(_DWORD *)uint64_t v70 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v139 = sub_1000A2E70((uint64_t)v125, v51, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v70 + 12) = 1026;
    LODWORD(v139) = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 18) = 2114;
    uint64_t v139 = (uint64_t)v66;
    id v71 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)Swift::Int v124 = v66;

    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Creating approval Biome event for %{public}s %{public}d %{public}@", (uint8_t *)v70, 0x1Cu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v72 = v132;
    uint64_t v73 = v133;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v72 = (char *)v55;
    uint64_t v73 = v7;
  }
  v135(v72, v73);
  id v74 = [v66 timeStamp];
  uint64_t v75 = type metadata accessor for Date();
  uint64_t v76 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v78 = (char *)&v119 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSinceReferenceDate.getter();
  double v80 = v79;
  (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
  swift_beginAccess();
  uint64_t v81 = v141;
  id v82 = [v66 requestingUserDSID];
  if (!v82)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1002536D4);
  }
  uint64_t v83 = v82;
  id v84 = [v82 stringValue];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v85 = [v130 stringValue];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  NSString v86 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v87 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v122)
  {
    NSString v89 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v89 = 0;
  }
  uint64_t v90 = v121;
  if (v123)
  {
    NSString v91 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v91 = 0;
  }
  id v92 = objc_allocWithZone((Class)BMScreenTimeRequestEvent);
  LOBYTE(v118) = 1;
  uint64_t v93 = (char *)[v92 initWithRequestID:v86 kind:v90 status:v131 eventTime:v81 approvalTime:v87 requesterDSID:v88 responderDSID:v80 websitePath:v89 bundleID:v91 isActionUserDevice:v118];

  uint64_t v94 = v93;
  if (!v93)
  {
    swift_bridgeObjectRelease();
    sub_100253B48();
    swift_allocError();
    *uint64_t v107 = 0;
    return swift_willThrow();
  }
  id v95 = [self screenTimeRequestStream];
  id v96 = [v95 source];

  uint64_t v97 = v128;
  sub_10023C904(v128);
  unint64_t v98 = v127;
  swift_bridgeObjectRetain_n();
  uint64_t v99 = v94;
  uint64_t v100 = Logger.logObject.getter();
  os_log_type_t v101 = static os_log_type_t.default.getter();
  BOOL v102 = os_log_type_enabled(v100, v101);
  id v137 = v96;
  unint64_t v132 = v94;
  if (v102)
  {
    uint64_t v103 = swift_slowAlloc();
    unint64_t v130 = (void *)swift_slowAlloc();
    uint64_t v131 = swift_slowAlloc();
    uint64_t v139 = v131;
    *(_DWORD *)uint64_t v103 = 136446466;
    Swift::Int v124 = (char *)v100;
    swift_bridgeObjectRetain();
    uint64_t v138 = sub_1000A2E70((uint64_t)v125, v98, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v103 + 12) = 2114;
    uint64_t v138 = (uint64_t)v99;
    uint64_t v104 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v130 = v94;

    os_log_t v105 = (os_log_t)v124;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v124, v101, "Sending event for %{public}s %{public}@", (uint8_t *)v103, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    id v96 = v137;
    swift_slowDealloc();

    uint64_t v106 = v128;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v106 = v97;
  }
  uint64_t v108 = v133;
  v135((char *)v106, v133);
  uint64_t v109 = (uint64_t)v129;
  [v96 sendEvent:v99];
  sub_10023C904(v109);
  uint64_t v110 = v99;
  swift_bridgeObjectRetain();
  uint64_t v111 = v110;
  uint64_t v112 = Logger.logObject.getter();
  os_log_type_t v113 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v112, v113))
  {
    uint64_t v114 = swift_slowAlloc();
    uint64_t v115 = (void *)swift_slowAlloc();
    uint64_t v136 = swift_slowAlloc();
    uint64_t v139 = v136;
    *(_DWORD *)uint64_t v114 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v138 = sub_1000A2E70((uint64_t)v125, v98, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v114 + 12) = 2114;
    uint64_t v138 = (uint64_t)v111;
    uint64_t v116 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v115 = v132;

    _os_log_impl((void *)&_mh_execute_header, v112, v113, "Sent event for %{public}s %{public}@", (uint8_t *)v114, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v117 = (uint64_t)v129;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v117 = v109;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v135)(v117, v108);
}

uint64_t sub_1002536E4()
{
  sub_1000A4FD8(v0 + OBJC_IVAR____TtC15ScreenTimeAgent10AskService____lazy_storage___logger, &qword_100341930);
  return swift_deallocClassInstance();
}

uint64_t sub_100253750()
{
  return type metadata accessor for AskService();
}

uint64_t type metadata accessor for AskService()
{
  uint64_t result = qword_100346628;
  if (!qword_100346628) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002537A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000A516C;
  return v6();
}

uint64_t sub_100253870(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000A516C;
  return v7();
}

uint64_t sub_10025393C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000A4FD8(a1, &qword_100340F10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100253AE8(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

unint64_t sub_100253B48()
{
  unint64_t result = qword_100346790;
  if (!qword_100346790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100346790);
  }
  return result;
}

void *sub_100253B9C(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_100253C40(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100253C6C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100253C94@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100253CC4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void *sub_100253CF4(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10009EE78(&qword_100342BE0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000F884C((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_100253DEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10009EE78(&qword_100342120);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100258CAC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000AA60C();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

id sub_100253ED4()
{
  uint64_t v1 = v0;
  sub_10009EE78(&qword_100345300);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100254080()
{
  uint64_t v1 = v0;
  sub_10009EE78(&qword_100340F70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100254234()
{
  return sub_100254294((uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_1003468A8);
}

void *sub_100254254()
{
  return sub_100254294((uint64_t (*)(void))&type metadata accessor for ActivityCategory, &qword_1003468A0);
}

void *sub_100254274()
{
  return sub_100254294((uint64_t (*)(void))&type metadata accessor for Application, &qword_100346898);
}

void *sub_100254294(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  sub_10009EE78(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  unint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100254544()
{
  uint64_t v1 = v0;
  sub_10009EE78(&qword_1003468D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v21 = *(unsigned char *)(v17 + 16);
    *(void *)uint64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = v21;
    id result = (void *)sub_1000B3828(v18, v19, v21);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100254704()
{
  return sub_100254710(&qword_100346890);
}

id sub_100254710(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10009EE78(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1002548B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10009EE78(&qword_100345300);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v9) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    int64_t v19 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    if (v19)
    {
      Hasher._combine(_:)(1uLL);
      id v20 = v19;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_38;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100254B64()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10009EE78(&qword_100340F70);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100254E14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WebDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10009EE78(&qword_1003468A8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  unint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10025A220(&qword_100343E48, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1002551C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10009EE78(&qword_1003468A0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  unint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10025A220(&qword_100343E38, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100255574()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Application();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10009EE78(&qword_100346898);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  unint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10025A220(&qword_100343E28, (void (*)(uint64_t))&type metadata accessor for Application);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100255924()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10009EE78(&qword_1003468D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_44:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v31 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v32 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v15 >= v32) {
      goto LABEL_42;
    }
    unint64_t v16 = *(void *)(v31 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v32) {
        goto LABEL_42;
      }
      unint64_t v16 = *(void *)(v31 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v32) {
          goto LABEL_42;
        }
        unint64_t v16 = *(void *)(v31 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    int v21 = *(unsigned __int8 *)(v18 + 16);
    Hasher.init(_seed:)();
    if (!v21)
    {
      Swift::UInt v22 = 1;
      goto LABEL_28;
    }
    if (v21 == 1)
    {
      Swift::UInt v22 = 2;
LABEL_28:
      Hasher._combine(_:)(v22);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      goto LABEL_33;
    }
    if (v19 | v20) {
      Swift::UInt v23 = 3;
    }
    else {
      Swift::UInt v23 = 0;
    }
    Hasher._combine(_:)(v23);
LABEL_33:
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v8 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(unsigned char *)(v12 + 16) = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_42:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_44;
  }
  unint64_t v16 = *(void *)(v31 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_42;
    }
    unint64_t v16 = *(void *)(v31 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_100255C38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10009EE78(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100255EB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10009EE78(&qword_100345300);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v29 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_36;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_36;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_36;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v9) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      unint64_t v19 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      if (v19)
      {
        Hasher._combine(_:)(1uLL);
        id v20 = v19;
        NSObject.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100256190()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10009EE78(&qword_100340F70);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100256470()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for WebDomain();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10009EE78(&qword_1003468A8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10025A220(&qword_100343E48, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10025686C()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for ActivityCategory();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10009EE78(&qword_1003468A0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10025A220(&qword_100343E38, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100256C68()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Application();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10009EE78(&qword_100346898);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10025A220(&qword_100343E28, (void (*)(uint64_t))&type metadata accessor for Application);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100257064()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10009EE78(&qword_1003468D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v33 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v32 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        if (v15 >= v32) {
          goto LABEL_42;
        }
        unint64_t v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_42;
          }
          unint64_t v16 = v33[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_42;
            }
            unint64_t v16 = v33[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_42:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v33 = -1 << v31;
                }
                *(void *)(v2 + 16) = 0;
                goto LABEL_46;
              }
              unint64_t v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_48;
                  }
                  if (v10 >= v32) {
                    goto LABEL_42;
                  }
                  unint64_t v16 = v33[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      int v21 = *(unsigned __int8 *)(v18 + 16);
      Hasher.init(_seed:)();
      if (!v21) {
        break;
      }
      if (v21 == 1)
      {
        Swift::UInt v22 = 2;
LABEL_28:
        Hasher._combine(_:)(v22);
        String.hash(into:)();
        goto LABEL_33;
      }
      if (v19 | v20) {
        Swift::UInt v23 = 3;
      }
      else {
        Swift::UInt v23 = 0;
      }
      Hasher._combine(_:)(v23);
LABEL_33:
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(void *)uint64_t v12 = v19;
      *(void *)(v12 + 8) = v20;
      *(unsigned char *)(v12 + 16) = v21;
      ++*(void *)(v4 + 16);
    }
    Swift::UInt v22 = 1;
    goto LABEL_28;
  }
LABEL_46:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1002573A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10009EE78(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

Swift::Int sub_100257644(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_10009EE78(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_1000A0760(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_1002573A8(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_100257848(uint64_t a1, uint64_t a2)
{
  return sub_100257644(a1, a2, &qword_100346890, (unint64_t *)&unk_100343A60);
}

unint64_t sub_100257864(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_1002578E8(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    id v7 = a2;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  uint64_t v21 = v3;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    id v20 = a2;
    sub_10025826C(a2, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v21 = v22;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v11 = ~v9;
  while (1)
  {
    unint64_t v12 = *(void **)(*(void *)(v6 + 48) + 8 * v10);
    if (v12) {
      break;
    }
    if (!a2) {
      goto LABEL_12;
    }
LABEL_7:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_13;
    }
  }
  if (!a2) {
    goto LABEL_7;
  }
  sub_1000A0760(0, (unint64_t *)&unk_100343B90);
  id v13 = a2;
  id v14 = v12;
  char v15 = static NSObject.== infix(_:_:)();

  if ((v15 & 1) == 0) {
    goto LABEL_7;
  }

LABEL_12:
  swift_bridgeObjectRelease();
  BOOL v16 = *(void **)(*(void *)(*v21 + 48) + 8 * v10);
  *a1 = v16;
  id v17 = v16;
  return 0;
}

uint64_t sub_100257ACC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100258434(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100257C7C(void *a1, void *a2)
{
  return sub_100257FA0(a1, a2, &qword_100342B68, (uint64_t)off_1002FA138, &qword_1003468C8);
}

uint64_t sub_100257C98(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  if (a4)
  {
    if (a4 != 1)
    {
      if (a2 | a3) {
        Swift::UInt v10 = 3;
      }
      else {
        Swift::UInt v10 = 0;
      }
      Hasher._combine(_:)(v10);
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    Swift::UInt v9 = 2;
  }
  else
  {
    Swift::UInt v9 = 1;
  }
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain();
  String.hash(into:)();
LABEL_10:
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = *v35;
    *uint64_t v35 = 0x8000000000000000;
    sub_1000B3828(a2, a3, a4);
    sub_1002585D0(a2, a3, a4, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v35 = v37;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 16) = a4;
    return result;
  }
  uint64_t v14 = ~v12;
  uint64_t v15 = *(void *)(v8 + 48);
  BOOL v16 = a4 == 2;
  if (a3 | a2) {
    BOOL v16 = 0;
  }
  BOOL v34 = v16;
  BOOL v18 = a2 != 1 || a3 != 0 || a4 != 2;
  while (1)
  {
    BOOL v19 = (uint64_t *)(v15 + 24 * v13);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    int v22 = *((unsigned __int8 *)v19 + 16);
    if (!v22) {
      break;
    }
    if (v22 == 1)
    {
      if (a4 == 1)
      {
        BOOL v23 = v20 == a2 && v21 == a3;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = a2;
          uint64_t v28 = a3;
          unsigned __int8 v29 = 1;
          goto LABEL_43;
        }
      }
    }
    else if (v20 | v21)
    {
      if (!v18)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
    }
    else if (v34)
    {
      goto LABEL_39;
    }
LABEL_20:
    unint64_t v13 = (v13 + 1) & v14;
    if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_40;
    }
  }
  if (a4) {
    goto LABEL_20;
  }
  BOOL v24 = v20 == a2 && v21 == a3;
  if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  unsigned __int8 v29 = 0;
LABEL_43:
  sub_1000B3840(v27, v28, v29);
LABEL_44:
  uint64_t v30 = *(void *)(*v35 + 48) + 24 * v13;
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  *(void *)a1 = *(void *)v30;
  *(void *)(a1 + 8) = v32;
  unsigned __int8 v33 = *(unsigned char *)(v30 + 16);
  *(unsigned char *)(a1 + 16) = v33;
  sub_1000B3828(v31, v32, v33);
  return 0;
}

uint64_t sub_100257F4C(void *a1, void *a2)
{
  return sub_100257FA0(a1, a2, (unint64_t *)&qword_100340F90, (uint64_t)STBlueprintConfiguration_ptr, &qword_100340F88);
}

uint64_t sub_100257F68(void *a1, void *a2)
{
  return sub_100257FA0(a1, a2, &qword_1003431E0, (uint64_t)STCoreUser_ptr, (uint64_t *)&unk_100340F60);
}

uint64_t sub_100257F84(void *a1, void *a2)
{
  return sub_100257FA0(a1, a2, (unint64_t *)&unk_100343A60, (uint64_t)STInstalledApp_ptr, &qword_100346890);
}

uint64_t sub_100257FA0(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      sub_1000A0760(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v27 = sub_100257644(v12, result + 1, a5, a3);
    uint64_t v38 = (void *)v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v33 = v28 + 1;
      id v34 = v13;
      sub_1002573A8(v33, a5);
      unsigned __int8 v29 = v38;
    }
    else
    {
      unsigned __int8 v29 = (void *)v27;
      id v30 = v13;
    }
    sub_100257864((uint64_t)v13, v29);
    *uint64_t v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v16 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v19 = v17 & ~v18;
    if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
    {
      sub_1000A0760(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        char v25 = *(void **)(*(void *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        id v26 = v25;
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    id v32 = a2;
    sub_10025880C((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    *uint64_t v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

void sub_10025826C(void *a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_19;
  }
  if (a3)
  {
    sub_100255EB0();
  }
  else
  {
    if (v8 > v7)
    {
      sub_100253ED4();
      goto LABEL_19;
    }
    sub_1002548B4();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1uLL);
    id v10 = a1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v13 = ~v12;
    do
    {
      uint64_t v14 = *(void **)(*(void *)(v9 + 48) + 8 * a2);
      if (v14)
      {
        if (a1)
        {
          sub_1000A0760(0, (unint64_t *)&unk_100343B90);
          id v15 = a1;
          id v16 = v14;
          char v17 = static NSObject.== infix(_:_:)();

          if (v17)
          {
LABEL_18:
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!a1)
      {
        goto LABEL_18;
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  uint64_t v18 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

Swift::Int sub_100258434(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100256190();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100254080();
      goto LABEL_22;
    }
    sub_100254B64();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    id v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_1002585D0(Swift::Int result, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t v6 = v5;
  Swift::Int v10 = result;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_42;
  }
  if (a5)
  {
    sub_100257064();
  }
  else
  {
    if (v12 > v11)
    {
      uint64_t result = (Swift::Int)sub_100254544();
      goto LABEL_42;
    }
    sub_100255924();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  if (a3)
  {
    if (a3 != 1)
    {
      if (v10 | a2) {
        Swift::UInt v15 = 3;
      }
      else {
        Swift::UInt v15 = 0;
      }
      Hasher._combine(_:)(v15);
      goto LABEL_17;
    }
    Swift::UInt v14 = 2;
  }
  else
  {
    Swift::UInt v14 = 1;
  }
  Hasher._combine(_:)(v14);
  String.hash(into:)();
LABEL_17:
  uint64_t result = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v13 + 32);
  a4 = result & ~v16;
  uint64_t v17 = v13 + 56;
  if (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
    goto LABEL_42;
  }
  uint64_t v18 = ~v16;
  uint64_t v19 = *(void *)(v13 + 48);
  BOOL v20 = a3 == 2;
  if (a2 | v10) {
    BOOL v20 = 0;
  }
  BOOL v32 = v20;
  BOOL v22 = v10 != 1 || a2 != 0 || a3 != 2;
  while (1)
  {
    uint64_t v23 = v19 + 24 * a4;
    uint64_t result = *(void *)v23;
    uint64_t v24 = *(void *)(v23 + 8);
    int v25 = *(unsigned __int8 *)(v23 + 16);
    if (!v25) {
      break;
    }
    if (v25 == 1)
    {
      if (a3 == 1) {
        goto LABEL_34;
      }
    }
    else if (result | v24)
    {
      if (!v22) {
        goto LABEL_41;
      }
    }
    else if (v32)
    {
      goto LABEL_41;
    }
LABEL_28:
    a4 = (a4 + 1) & v18;
    if (((*(void *)(v17 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
      goto LABEL_42;
    }
  }
  if (a3) {
    goto LABEL_28;
  }
LABEL_34:
  if (result != v10 || v24 != a2)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      goto LABEL_28;
    }
  }
LABEL_41:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_42:
  uint64_t v27 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v28 = *(void *)(v27 + 48) + 24 * a4;
  *(void *)uint64_t v28 = v10;
  *(void *)(v28 + 8) = a2;
  *(unsigned char *)(v28 + 16) = a3;
  uint64_t v29 = *(void *)(v27 + 16);
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30) {
    __break(1u);
  }
  else {
    *(void *)(v27 + 16) = v31;
  }
  return result;
}

void sub_10025880C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1002573A8(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100254710(a4);
      goto LABEL_14;
    }
    sub_100255C38(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_1000A0760(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

void *sub_1002589A0(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  unint64_t v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1000A0760(0, &qword_1003415E0);
    sub_10025A268();
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    int64_t v10 = v30;
    unint64_t v11 = v31;
    uint64_t v24 = v7;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
LABEL_46:
    *uint64_t v24 = v4;
    v24[1] = v8;
    long long v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return (void *)v12;
  }
  int64_t v10 = 0;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v8 = a4 + 56;
  uint64_t v9 = ~v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v11 = v22 & *(void *)(a4 + 56);
  uint64_t v24 = result;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      sub_1000A0760(0, &qword_1003415E0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v15 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17)
      {
        int64_t v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          unint64_t v11 = 0;
          int64_t v10 = v18;
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v10 + 6;
          while (v25 != v19)
          {
            unint64_t v17 = *(void *)(v8 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    id v15 = result;
    if (!result) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100258CAC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100258EAC(void *a1)
{
  if ([a1 answer]) {
    return 0;
  }
  id v3 = [a1 amountGranted];
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  v4.super.super.Class isa = NSNumber.init(integerLiteral:)(900).super.super.isa;
  Class isa = v4.super.super.isa;
  if (v3)
  {
    id v6 = v3;
    char v7 = static NSObject.== infix(_:_:)();

    if (v7) {
      return 1;
    }
  }
  else
  {
  }
  id v8 = [a1 amountGranted];
  v9.super.super.Class isa = NSNumber.init(integerLiteral:)(3600).super.super.isa;
  Class v10 = v9.super.super.isa;
  if (v8)
  {
    id v11 = v8;
    char v12 = static NSObject.== infix(_:_:)();

    if (v12) {
      return 2;
    }
  }
  else
  {
  }
  return 3;
}

uint64_t sub_100258FC8(void *a1, uint64_t a2, unint64_t a3)
{
  if (qword_100340E10 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10009DA74(v5, (uint64_t)qword_10034B3A0);
  swift_bridgeObjectRetain_n();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v80 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000A2E70(a2, a3, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Making AskTo question with request Identifier %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v79 = self;
  id v9 = [v79 bundle];
  v10._uint64_t countAndFlagsBits = 0xD000000000000020;
  v81._object = (void *)0xE000000000000000;
  v10._object = (void *)0x8000000100291620;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v81._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v81);

  id v12 = [a1 requestingUserDisplayName];
  uint64_t v76 = a1;
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    id v17 = [a1 resourceDisplayName];
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      id v22 = [v79 bundle];
      v23._uint64_t countAndFlagsBits = 0xD000000000000029;
      v82._object = (void *)0xE000000000000000;
      v23._object = (void *)0x8000000100291860;
      v24._uint64_t countAndFlagsBits = 0;
      v24._object = (void *)0xE000000000000000;
      v82._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v82);

      sub_10009EE78(&qword_1003414D8);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_100284C10;
      *(void *)(v25 + 56) = &type metadata for String;
      unint64_t v26 = sub_1000A5124();
      *(void *)(v25 + 32) = v14;
      *(void *)(v25 + 40) = v16;
      *(void *)(v25 + 96) = &type metadata for String;
      *(void *)(v25 + 104) = v26;
      *(void *)(v25 + 64) = v26;
      *(void *)(v25 + 72) = v19;
      *(void *)(v25 + 80) = v21;
      String.init(format:_:)();
LABEL_15:
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
  }
  id v27 = [a1 requestingUserDisplayName];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    id v32 = [v79 bundle];
    unint64_t v33 = 0xD00000000000001DLL;
    unint64_t v75 = 0xE000000000000000;
    id v34 = "AskForMoreTimeUserNameSummary";
LABEL_14:
    unint64_t v38 = (unint64_t)(v34 - 32) | 0x8000000000000000;
    v39._uint64_t countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    uint64_t v40 = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v33, (Swift::String_optional)0, (NSBundle)v32, v39, *(Swift::String *)(&v75 - 1));

    sub_10009EE78(&qword_1003414D8);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_100286230;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1000A5124();
    *(void *)(v41 + 32) = v29;
    *(void *)(v41 + 40) = v31;
    String.init(format:_:)();
    goto LABEL_15;
  }
  id v35 = [a1 resourceDisplayName];
  if (v35)
  {
    int64_t v36 = v35;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v37;

    id v32 = [v79 bundle];
    unint64_t v33 = 0xD000000000000021;
    unint64_t v75 = 0xE000000000000000;
    id v34 = "AskForMoreTimeResourceNameSummary";
    goto LABEL_14;
  }
  id v65 = [v79 bundle];
  v86._object = (void *)0xE000000000000000;
  v66._object = (void *)0x8000000100291650;
  v66._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v67._uint64_t countAndFlagsBits = 0;
  v67._object = (void *)0xE000000000000000;
  v86._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v66, (Swift::String_optional)0, (NSBundle)v65, v67, v86);

LABEL_16:
  type metadata accessor for ATQuestion();
  uint64_t v42 = qword_100340E30;
  swift_bridgeObjectRetain();
  if (v42 != -1) {
    swift_once();
  }
  id v43 = (id)qword_10034B3D0;
  uint64_t v78 = ATQuestion.__allocating_init(id:topic:title:summary:)();
  sub_10009EE78(&qword_100342BE0);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_100286240;
  unint64_t v80 = 1;
  dispatch thunk of CustomStringConvertible.description.getter();
  id v45 = [v79 bundle];
  v46._uint64_t countAndFlagsBits = 0xD000000000000033;
  v83._object = (void *)0xE000000000000000;
  v46._object = (void *)0x8000000100291670;
  v47._uint64_t countAndFlagsBits = 0;
  v47._object = (void *)0xE000000000000000;
  v83._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v46, (Swift::String_optional)0, (NSBundle)v45, v47, v83);

  uint64_t v48 = (objc_class *)type metadata accessor for ATAnswerChoice();
  id v49 = objc_allocWithZone(v48);
  *(void *)(v44 + 32) = ATAnswerChoice.init(id:title:)();
  unint64_t v80 = 2;
  dispatch thunk of CustomStringConvertible.description.getter();
  id v50 = [v79 bundle];
  v51._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v84._object = (void *)0xE000000000000000;
  v51._object = (void *)0x80000001002916F0;
  v52._uint64_t countAndFlagsBits = 0;
  v52._object = (void *)0xE000000000000000;
  v84._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v51, (Swift::String_optional)0, (NSBundle)v50, v52, v84);

  id v53 = objc_allocWithZone(v48);
  *(void *)(v44 + 40) = ATAnswerChoice.init(id:title:)();
  unint64_t v80 = 3;
  dispatch thunk of CustomStringConvertible.description.getter();
  id v54 = [v79 bundle];
  v55._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v85._object = (void *)0xE000000000000000;
  v55._object = (void *)0x8000000100291750;
  v56._uint64_t countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  v85._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v55, (Swift::String_optional)0, (NSBundle)v54, v56, v85);

  id v57 = objc_allocWithZone(v48);
  *(void *)(v44 + 48) = ATAnswerChoice.init(id:title:)();
  unint64_t v80 = v44;
  specialized Array._endMutation()();
  unint64_t v58 = v80;
  if (v80 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v59 = result;
    int v61 = v76;
    if (!result) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v59 = *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    int v61 = v76;
    if (!v59) {
      goto LABEL_28;
    }
  }
  if (v59 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v59; ++i)
  {
    if ((v58 & 0xC000000000000001) != 0) {
      id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v63 = *(id *)(v58 + 8 * i + 32);
    }
    uint64_t v64 = v63;
    ATAnswerChoice.kind.setter();
  }
LABEL_28:
  swift_bridgeObjectRelease();
  unint64_t v80 = 0;
  dispatch thunk of CustomStringConvertible.description.getter();
  id v68 = [v79 bundle];
  v69._uint64_t countAndFlagsBits = 0xD000000000000022;
  v87._object = (void *)0xE000000000000000;
  v69._object = (void *)0x80000001002917B0;
  v70._uint64_t countAndFlagsBits = 0;
  v70._object = (void *)0xE000000000000000;
  v87._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v69, (Swift::String_optional)0, (NSBundle)v68, v70, v87);

  id v71 = objc_allocWithZone(v48);
  uint64_t v72 = (void *)ATAnswerChoice.init(id:title:)();
  ATAnswerChoice.kind.setter();
  unint64_t v80 = v58;
  id v73 = v72;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  ATQuestion.answerChoices.setter();
  id v74 = [v61 requestedResourceIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  ATQuestion.associatedContentBundleIdentifier.setter();
  return v78;
}

void sub_1002599D0()
{
  sub_1001F92D8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40), *(unsigned char *)(v0 + 41));
}

uint64_t sub_1002599FC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  id v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *id v8 = v2;
  v8[1] = sub_1000A516C;
  return sub_10023DD38(a1, v4, v5, v7, v6);
}

unint64_t sub_100259ABC()
{
  unint64_t result = qword_100341D60;
  if (!qword_100341D60)
  {
    sub_1000C5390(&qword_100341D58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100341D60);
  }
  return result;
}

uint64_t sub_100259B18()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100259C00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100259C48(void *a1@<X8>)
{
  sub_1001F1FEC(*(void **)(v1 + 24), a1);
}

void sub_100259C64()
{
  sub_1001F323C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100259C84()
{
  return sub_1001F2840(*(uint8_t **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100259CA0(char *a1@<X8>)
{
  sub_1001F2550(*(void **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100259CC4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10009F840;
  unint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_1003467D0 + dword_1003467D0);
  return v6(v2, v3, v4);
}

uint64_t sub_100259D80()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100259DB8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A516C;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1003467F0 + dword_1003467F0);
  return v6(a1, v4);
}

uint64_t sub_100259E70()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100259EB8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_100346808 + dword_100346808);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100259F80()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100259FD0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (const void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000A516C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, const void *, uint64_t))((char *)&dword_100346830
                                                                               + dword_100346830);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_10025A0A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10009F840;
  return sub_10023DD38(a1, v4, v5, v7, v6);
}

uint64_t sub_10025A164()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_100346858 + dword_100346858);
  return v6(v2, v3, v4);
}

uint64_t sub_10025A220(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10025A268()
{
  unint64_t result = qword_1003415E8;
  if (!qword_1003415E8)
  {
    sub_1000A0760(255, &qword_1003415E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003415E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AskService.AskServiceError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AskService.AskServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025A420);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AskService.AskServiceError()
{
  return &type metadata for AskService.AskServiceError;
}

unint64_t sub_10025A45C()
{
  unint64_t result = qword_1003468D8;
  if (!qword_1003468D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003468D8);
  }
  return result;
}

void sub_10025A4B0()
{
}

void sub_10025A4C8(void *a1@<X8>)
{
}

void sub_10025A4E0(char *a1@<X8>)
{
}

void sub_10025A4F8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025A564(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025A5D0()
{
  sub_100006ED4(__stack_chk_guard);
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Family fetch error: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025A63C()
{
  sub_100006ED4(__stack_chk_guard);
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "CK account info error: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025A6A8()
{
  sub_10000730C();
  uint64_t v3 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Client %{public}@ does not have required %{public}@ entitlement", v2, 0x16u);
}

void sub_10025A724()
{
  sub_10000730C();
  CFStringRef v4 = @"com.apple.private.contacts";
  __int16 v5 = v0;
  CFStringRef v6 = @"com.apple.private.contactsui";
  __int16 v7 = v0;
  uint64_t v8 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Client %{public}@ does not have a required entitlement: any of %{public}@, %{public}@, %{public}@", v3, 0x2Au);
}

void sub_10025A7C0(uint64_t a1, void *a2, NSObject *a3)
{
  int v4 = 138543618;
  uint64_t v5 = a1;
  __int16 v6 = 1024;
  unsigned int v7 = [a2 processIdentifier];
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%{public}@ connection received from process %d", (uint8_t *)&v4, 0x12u);
}

void sub_10025A860(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Last persist local apps operation hasn't had a chance to run, ignoring new request", v1, 2u);
}

void sub_10025A8A4(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138543618;
  uint64_t v4 = a1;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Client %{public}@ does not have required %{public}@ entitlement", (uint8_t *)&v3, 0x16u);
}

void sub_10025A92C(void *a1, NSObject *a2)
{
  int v3 = 138543618;
  uint64_t v4 = STAskMachServiceName;
  __int16 v5 = 1024;
  unsigned int v6 = [a1 processIdentifier];
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%{public}@ connection received from process %d", (uint8_t *)&v3, 0x12u);
}

void sub_10025A9D0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch parents: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025AA38()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Could not send ask for time request for %{public}@: %{public}@");
}

void sub_10025AAA4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to persist remind me request/ PIN authenticated ask with override declarations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025AB0C()
{
  sub_100010450();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Begin fetch ask for more time request %{public}@", v1, 0xCu);
}

void sub_10025AB80()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not fetch my requests: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025ABE8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025AC58(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025ACC8(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(void *)(a2 + 4) = a1;
  sub_100010438((void *)&_mh_execute_header, a3, (uint64_t)a3, "Could not deserialize incoming ask for time request: %{public}@", (uint8_t *)a2);
}

void sub_10025AD18()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Error fetching requesting user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025AD80()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not fetch or create existing ask for time request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025ADE8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Error saving ask for time request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025AE50()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Fetching requesting user", v2, v3, v4, v5, v6);
}

void sub_10025AE84()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Error fetching FamilyCircle: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025AEEC(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 payloadDictionary];
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, a2, v4, "Could not deserialize incoming ask for time response: %@", v5);
}

void sub_10025AF78()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "No response. Bailing from -[STAskForTimeManager _handleAskForTimeResponse:respondingUserAppleID:].", v1, 2u);
}

void sub_10025AFB8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not fetch associated request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B020(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(void *)(a2 + 4) = a1;
  sub_100010438((void *)&_mh_execute_header, a3, (uint64_t)a3, "Unable to get requested resouce name for request: %{public}@", (uint8_t *)a2);
}

void sub_10025B070()
{
  sub_100010450();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Fetching associated request %{public}@", v1, 0xCu);
}

void sub_10025B0E4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Dropping invalid v2 ask response payload: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B14C(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 payloadDictionary];
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, a2, v4, "Could not deserialize incoming v2 ask response: %{public}@", v5);
}

void sub_10025B1DC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not fetch associated ask request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B244()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not find the existing request to answer. Ignoring. %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B2AC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not find this user. Ignoring. %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B314()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not figure out requesting resource. Ignoring. %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B37C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not apply ask for time declarations. Ignoring. %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B3E4()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Error saving answer for ask for time response for %{public}@: %{public}@");
}

void sub_10025B450()
{
  sub_100010450();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Failed to serialize configuration payload: %{public}@", v1, 0xCu);
}

void sub_10025B4C4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Error saving ask for more override declaration: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B52C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not find the current user. Refusing to send ask request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B594()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Error fetching this user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B5FC()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Populate request fields from fetched or new ask for time request", v2, v3, v4, v5, v6);
}

void sub_10025B630()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "User is not managed, refusing to send request", v1, 2u);
}

void sub_10025B670()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Fetching this user", v2, v3, v4, v5, v6);
}

void sub_10025B6A4(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to serialize value to data: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10025B71C(void *a1, uint64_t a2, NSObject *a3)
{
  [a1 valueClass];
  sub_10000730C();
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to unarchive value of class: %{public}@ : %{public}@", v5, 0x16u);
}

void sub_10025B7AC()
{
  sub_10000730C();
  uint64_t v2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to unarchive value for key: %{public}@ : %{public}@", v1, 0x16u);
}

void sub_10025B824()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to load cloud store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B88C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to unload cloud store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B8F4()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to remove cloud store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025B95C()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "...Local changes should be mirrored, so starting a sync", v2, v3, v4, v5, v6);
}

void sub_10025B990()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "...Local changes should not be mirrored", v2, v3, v4, v5, v6);
}

void sub_10025B9C4()
{
  sub_100010450();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "...The check to see if local changes should be mirrored failed: %@", v1, 0xCu);
}

void sub_10025BA38()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Checking to see if local changes should be mirrored...", v2, v3, v4, v5, v6);
}

void sub_10025BA6C()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Scheduling history analyzer timer...", v2, v3, v4, v5, v6);
}

void sub_10025BAA0()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Canceling old history analyzer timer and scheduling a new one", v2, v3, v4, v5, v6);
}

void sub_10025BAD4()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Last mirroring operation hasn't had a chance to run, ignoring new request", v2, v3, v4, v5, v6);
}

void sub_10025BB08()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Received NSCloudKitMirroringDelegateRequestAbortedError, attempting to recover by removing and re-adding cloud persistent store", v1, 2u);
}

void sub_10025BB48()
{
  sub_100010450();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Mirroring failed: %{public}@", v1, 0xCu);
}

void sub_10025BBBC()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Safety sync initiated", v2, v3, v4, v5, v6);
}

void sub_10025BBF0()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Safety sync terminated", v2, v3, v4, v5, v6);
}

void sub_10025BC24(NSObject *a1)
{
  uint64_t v2 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  sub_100010450();
  _os_log_debug_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_DEBUG, "Canceling old safety sync timer and scheduling a new one for %{public}@ seconds from now", v3, 0xCu);
}

void sub_10025BCC0()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Performing safety sync, last sync attempt was at: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025BD28()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "No safety sync needed, last sync attempt was at: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025BD90()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Received store change notification: %@", v2, v3, v4, v5, v6);
}

void sub_10025BDF8()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Received push token notification", v2, v3, v4, v5, v6);
}

void sub_10025BE2C()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Received push token, ignoring", v2, v3, v4, v5, v6);
}

void sub_10025BE60(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to get number of contacts: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10025BED8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025BF10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025BF48(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025BF80(void *a1)
{
  [a1 count];
  sub_100015264((void *)&_mh_execute_header, v1, v2, "Processing %lu modified objectIDs", v3, v4, v5, v6, 0);
}

void sub_10025BFFC(void *a1)
{
  [a1 count];
  sub_100015264((void *)&_mh_execute_header, v1, v2, "Processing %lu deletions", v3, v4, v5, v6, 0);
}

void sub_10025C078(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025C0F0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025C168(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025C1E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025C258(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[STConcreteIDSTransportPrimitives _sendData:toDestinations:options:]";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[v2] %{public}s: \nprimativeIdentifierResult.type == STResultTypeFailure", (uint8_t *)&v1, 0xCu);
}

void sub_10025C2DC()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to send data. error: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025C350()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to send oversized data: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025C3C4()
{
  LODWORD(v2) = 136446722;
  *(void *)((char *)&v2 + 4) = "-[STConcreteIDSTransportPrimitives _sendOversizedData:toDestinations:sendOptions:]";
  sub_10001A1C4();
  sub_10001A1DC((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed writing oversized data to url: %@, \nerror: %{public}@", (void)v2, DWORD2(v2));
}

void sub_10025C440()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to cleanup and delete oversized data resource: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025C4B4(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[STConcreteIDSTransportPrimitives addObserver:forReachabilityChangesOfPrimitiveDestinations:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nUnable to add reachability observer. Observer is not delegate", (uint8_t *)&v1, 0xCu);
}

void sub_10025C538()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nisCapabilityEnabled error: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025C5AC(uint64_t a1, NSObject *a2)
{
  int v2 = 136446467;
  uint64_t v3 = "-[STConcreteIDSTransportPrimitives service:account:incomingData:fromID:context:]";
  __int16 v4 = 2113;
  uint64_t v5 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "[v2] %{public}s: \nUnable to handle incoming message from: %{private}@", (uint8_t *)&v2, 0x16u);
}

void sub_10025C638(void *a1, NSObject *a2)
{
  int v3 = 136446466;
  __int16 v4 = "-[STConcreteIDSTransportPrimitives service:account:incomingResourceAtURL:fromID:context:]";
  __int16 v5 = 2050;
  id v6 = [a1 fileSize];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to handle incoming resouce. File too large; %{public}llu bytes",
    (uint8_t *)&v3,
    0x16u);
}

void sub_10025C6D8()
{
  LODWORD(v2) = 136446723;
  *(void *)((char *)&v2 + 4) = "-[STConcreteIDSTransportPrimitives service:account:incomingResourceAtURL:fromID:context:]";
  sub_10001A1C4();
  sub_10001A1DC((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to read data from resourceURL: %{private}@, error: %{public}@", (void)v2, DWORD2(v2));
}

void sub_10025C754()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to get updated destination status, error: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025C7C8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Invalid configuration type in handleConfigurationChange: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025C830(uint64_t a1, NSObject *a2)
{
  objc_opt_class();
  sub_100010450();
  id v4 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "handleConfigurationChange: Expected legacy configuration (NSDictionary) got: %{public}@", v5, 0xCu);
}

void sub_10025C8C4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Synchronous request manager persisting blueprints - timed out", v1, 2u);
}

void sub_10025C908()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to persist blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025C970()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to handle family settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025C9D8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138543618;
  uint64_t v4 = a1;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Did invalidate service: %{public}@ error: %{public}@", (uint8_t *)&v3, 0x16u);
}

void sub_10025CA60(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Rejecting connection: Unable to find matching service description.", v1, 2u);
}

void sub_10025CAA4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Rejecting connection: Unable to find matching provided service.", v1, 2u);
}

void sub_10025CAE8(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Rejecting connection: Missing entitlement: %{public}@.", (uint8_t *)&v2, 0xCu);
}

void sub_10025CB60()
{
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, v0, v1, "Failed to transform Core Data change into configuration change. (Secondary Type: %ld)", v2);
}

void sub_10025CBCC()
{
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, v0, v1, "Unexpected change type: %ld", v2);
}

void sub_10025CC38()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_1000252F8(v0);
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Expected legacy configuration (NSDictionary) got: %{public}@", v4, v5, v6, v7, v8);
}

void sub_10025CCB8()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_1000252F8(v0);
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Cannot transform object of class: %{public}@. Does not conform to 'STVersionVectorable' protocol", v4, v5, v6, v7, v8);
}

void sub_10025CD38()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_1000252F8(v0);
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Cannot transform object of class: %{public}@. Does not conform to 'STSerializableManagedObject' protocol", v4, v5, v6, v7, v8);
}

void sub_10025CDB8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  objc_opt_class();
  sub_100010450();
  __int16 v8 = 2048;
  uint64_t v9 = a2;
  id v6 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Cannot get target core user from changed object of class: %{public}@. Changed object class does not map to configuration type: %ld", v7, 0x16u);
}

void sub_10025CE5C()
{
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, v0, v1, "Failed to fetch author: %{public}@", v2);
}

void sub_10025CEC8()
{
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, v0, v1, "Failed to fetch or create family settings: %{public}@", v2);
}

void sub_10025CF34()
{
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, v0, v1, "Failed to fetch or create blueprint: %{public}@", v2);
}

void sub_10025CFA0(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 138543362;
  uint64_t v4 = 0;
  sub_100010438((void *)&_mh_execute_header, a1, a3, "Failed to fetch or create family settings: %{public}@", (uint8_t *)&v3);
}

void sub_10025D014()
{
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, v0, v1, "Failed to fetch number of contacts: %{public}@", v2);
}

void sub_10025D080(void *a1)
{
  uint64_t v1 = [a1 dsid];
  sub_100010450();
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Unknown setup configuration state for: %{public}@", v4, v5, v6, v7, v8);
}

void sub_10025D104(void *a1)
{
  uint64_t v1 = [a1 dsid];
  sub_100010450();
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Unable to delete managed user blueprint for: %{public}@", v4, v5, v6, v7, v8);
}

void sub_10025D188(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 8) + 40);
  int v3 = 138543362;
  uint64_t v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to fetch screen time settings: %{public}@", (uint8_t *)&v3, 0xCu);
}

void sub_10025D20C(void *a1)
{
  uint64_t v1 = [a1 dsid];
  sub_100010450();
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Unable to create managed user blueprint for: %{public}@", v4, v5, v6, v7, v8);
}

void sub_10025D290()
{
  sub_100010450();
  sub_100010438((void *)&_mh_execute_header, v0, v1, "Error applying default user policies: %{public}@", v2);
}

void sub_10025D2FC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "no addresses could be computed: targeted family member is not a member of the family", v1, 2u);
}

void sub_10025D340(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "no address could be computed: targeted family member is a parent", v1, 2u);
}

void sub_10025D384(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Skipping import, there are no persistent stores that support mirroring.", v1, 2u);
}

void sub_10025D3C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025D434(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025D4A0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Skipping export, there are no persistent stores that support mirroring.", v1, 2u);
}

void sub_10025D4E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025D550(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138543618;
  *(void *)&v3[4] = *(void *)(a1 + 32);
  *(_WORD *)&v3[12] = 2114;
  *(void *)&uint8_t v3[14] = a2;
  sub_10001049C((void *)&_mh_execute_header, a2, a3, "Unable to read settings configuration for user: %{public}@ - %{public}@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_10025D5CC(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to get communication configuration for child user: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10025D644(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Failed to get downtime configuration for user: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10025D6BC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138478083;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2114;
  *(void *)&uint8_t v3[14] = a2;
  sub_10001049C((void *)&_mh_execute_header, a2, a3, "Failed to transform change: %{private}@ with error: %{public}@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_10025D734(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138478083;
  uint64_t v4 = a1;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to transform changes: %{private}@ with error: %{public}@", (uint8_t *)&v3, 0x16u);
}

void sub_10025D7BC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not exclude persistent store from backup: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025D824()
{
  sub_100010450();
  __int16 v3 = 2114;
  uint64_t v4 = v0;
  _os_log_fault_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "Failed to load store %{public}@: %{public}@", v2, 0x16u);
}

void sub_10025D8A8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to delete store after error: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025D910()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to destroy cloud store for reload: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025D978()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to remove cloud store for reload: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025D9E0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to destroy cloud store: %@", v2, v3, v4, v5, v6);
}

void sub_10025DA48()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "failed to clean up persistent history: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DAB0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10025DB24(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 changeIdentifier];
  *(_DWORD *)a1 = 138543362;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Skipping core data change: %{public}@ - type is not Device State ", a1, 0xCu);
}

void sub_10025DB9C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch device: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DC04()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to save device state change: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DC6C(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  int v4 = 138543618;
  uint64_t v5 = v3;
  __int16 v6 = 2114;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to write device: %{public}@ - %{public}@", (uint8_t *)&v4, 0x16u);
}

void sub_10025DD00()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch associated core user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DD68()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch associated device: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DDD0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch associated user-device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DE38()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch associated user-device state for device: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DEA0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot transform core data change into app: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DF08()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot transform core data change into app. Installed app missing bundle identifier: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025DF70()
{
  id v0 = (id)objc_opt_class();
  sub_1000252D8((void *)&_mh_execute_header, v1, v2, "Cannot transform core data change into app. Invalid class: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10025DFF8(char a1, char a2, NSObject *a3)
{
  if (a1) {
    uint64_t v5 = @"YES";
  }
  else {
    uint64_t v5 = @"NO";
  }
  uint64_t v6 = v5;
  if (a2) {
    uint64_t v7 = @"YES";
  }
  else {
    uint64_t v7 = @"NO";
  }
  uint8_t v8 = v7;
  int v9 = 138543618;
  uint64_t v10 = v6;
  __int16 v11 = 2114;
  id v12 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Core Data tombstone did not contain app tombstone information. (Missing bundleIdentifier: %{public}@, Missing uniqueIdentifier: %{public}@)", (uint8_t *)&v9, 0x16u);
}

void sub_10025E0D8(void *a1)
{
  uint64_t v1 = [a1 changeIdentifier];
  id v2 = (id)objc_opt_class();
  sub_1000252D8((void *)&_mh_execute_header, v3, v4, "Cannot transform core data change into app tombstone. Invalid class: %{public}@", v5, v6, v7, v8, 2u);
}

void sub_10025E178()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to find associated core user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E1E0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to find associated user-device states: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E248()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "[v1] %{public}s: \nFailed to fetch local user: %{public}@", (uint8_t *)v1, 0x16u);
}

void sub_10025E2C8(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[STEnqueuePayloadOperation main]_block_invoke";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[v1] %{public}s: \nNo family organization, ending without saving", (uint8_t *)&v1, 0xCu);
}

void sub_10025E34C(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [a1 type];
  v7[0] = 136446722;
  sub_10001A194();
  __int16 v8 = v6;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nError archiving payloadType: %{public}@, error: %{public}@", (uint8_t *)v7, 0x20u);
}

void sub_10025E400()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nError saving payload: %{public}@", (uint8_t *)v1, 0x16u);
}

void sub_10025E480(uint64_t a1)
{
  int v1 = 138543362;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed STEventRequest.initWithCoder: %{public}@", (uint8_t *)&v1, 0xCu);
}

void sub_10025E500(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to fetch local user: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10025E578()
{
  sub_10001045C();
  sub_100032830((void *)&_mh_execute_header, v0, v1, "Synchronous family circle fetch timed out", v2, v3, v4, v5, v6);
}

void sub_10025E5AC(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to refresh member cache: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10025E624(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "failed to build a targetable family member from primitive member: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10025E69C()
{
  sub_10001045C();
  sub_100032830((void *)&_mh_execute_header, v0, v1, "Failed to fetch member for providing return address", v2, v3, v4, v5, v6);
}

void sub_10025E6D0()
{
  sub_10001045C();
  sub_100032830((void *)&_mh_execute_header, v0, v1, "Failed to fetch member for resolving user DSID", v2, v3, v4, v5, v6);
}

void sub_10025E704()
{
  sub_10001045C();
  sub_100032830((void *)&_mh_execute_header, v0, v1, "Failed to fetch member for resolving AppleID", v2, v3, v4, v5, v6);
}

void sub_10025E738()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to create the family organization: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E7A0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Could not fetch local user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E808()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unable to perform fetch request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E870()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unable to perform installed apps fetch request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E8D8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch family users: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E940()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch or create user-device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025E9A8()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to save checkin: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025EA10()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to find user for payload originator: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025EA78(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 uniqueIdentifier];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Local blueprint does not exist in checkin response: %@", a1, 0xCu);
}

void sub_10025EAF0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch or create blueprint: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025EB58(void *a1)
{
  uint64_t v1 = [a1 error];
  sub_100010450();
  sub_100039DCC((void *)&_mh_execute_header, v2, v3, "Failed to handle family settings: %{public}@", v4, v5, v6, v7, v8);
}

void sub_10025EBDC(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v4);

  uint64_t v5 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v5);

  uint64_t v6 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039E2C((uint64_t)v6);

  uint64_t v7 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039E2C((uint64_t)v7);

  uint8_t v8 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v8);

  uint64_t v9 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v9);

  uint64_t v10 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v10);

  __int16 v11 = [v2 objectForKeyedSubscript:@"configurations"];
  id v12 = v11;
  if (v11)
  {
    uint64_t v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v11 count]);
    [v3 setObject:v13 forKeyedSubscript:@"NumberOfConfigurations"];
  }
  else
  {
    [v3 setObject:&off_10030FC58 forKeyedSubscript:@"NumberOfConfigurations"];
  }

  sub_100039DEC((void *)&_mh_execute_header, v14, v15, "Unknown organization class name in V1 checkin response: %{public}@. Ignoring blueprint: %{public}@", v16, v17, v18, v19, 2u);
}

void sub_10025EE04(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new();
  uint64_t v3 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  uint64_t v4 = (void *)v3;
  if (v3) {
    CFStringRef v5 = (const __CFString *)v3;
  }
  else {
    CFStringRef v5 = @"None";
  }
  [v2 setObject:v5 forKeyedSubscript:@"identifier"];

  uint64_t v6 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v6);

  uint64_t v7 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039E0C((uint64_t)v7);

  uint8_t v8 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039E0C((uint64_t)v8);

  uint64_t v9 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v9);

  uint64_t v10 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v10);

  uint64_t v11 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v11);

  id v12 = [v1 objectForKeyedSubscript:@"configurations"];
  uint64_t v13 = v12;
  if (v12)
  {
    uint64_t v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v12 count]);
    [v2 setObject:v14 forKeyedSubscript:@"NumberOfConfigurations"];
  }
  else
  {
    [v2 setObject:&off_10030FC58 forKeyedSubscript:@"NumberOfConfigurations"];
  }

  sub_100039DCC((void *)&_mh_execute_header, v15, v16, "Unexpectedly received local organization blueprint in V1 checkin response. Ignoring blueprint: %{public}@", v17, v18, v19, v20, 2u);
}

void sub_10025F01C()
{
  sub_10001045C();
  sub_100039D6C((void *)&_mh_execute_header, v0, v1, "Can't fulfill usage request when the requesting Apple ID is empty", v2, v3, v4, v5, v6);
}

void sub_10025F050()
{
  sub_10001045C();
  sub_100039D6C((void *)&_mh_execute_header, v0, v1, "Can't fulfill usage request when the requesting alt uri is empty", v2, v3, v4, v5, v6);
}

void sub_10025F084()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Can't fulfill usage request, screen time appears to be disabled", v1, 2u);
}

void sub_10025F0C4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unknown start date (%{public}@), defaulting to nil", v2, v3, v4, v5, v6);
}

void sub_10025F12C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Could not find the local user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F194()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Can't fulfill usage request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F1FC()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Can't fulfill usage request, cannot find user with Apple ID: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025F268()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to save that all of %{public}@'s devices are new_usage: %{public}@");
}

void sub_10025F2D0()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Ignoring usage request from %{public}@, this user is not a parent", v2, v3, v4, v5, 2u);
}

void sub_10025F33C()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100010484();
  sub_100039D88((void *)&_mh_execute_header, v0, v1, "Found more than 1 user with the same apple id (%{public}@): %{public}@");
}

void sub_10025F3A4()
{
  sub_10001045C();
  sub_100039D6C((void *)&_mh_execute_header, v0, v1, "Can't fulfill usage request, the local user is not managed", v2, v3, v4, v5, v6);
}

void sub_10025F3D8()
{
  sub_10000730C();
  sub_100039D88((void *)&_mh_execute_header, v0, v1, "Can't respond to usage request from %{public}@. Unable to archive fetched usage results: %{public}@");
}

void sub_10025F444()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Fetch usage operation failed: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F4AC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch local user to check whether all devices are new_usage: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F514()
{
  sub_10001045C();
  sub_100039D6C((void *)&_mh_execute_header, v0, v1, "Can't accept usage response when the originator's Apple ID is empty", v2, v3, v4, v5, v6);
}

void sub_10025F548()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Can't accept usage response, unable to unarchive data: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F5B0()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Can't accept usage response, unexpected type for fetched usage results: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F618()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Can't accept usage response, unexpected type for device identifier: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F680()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Can't handle usage response, error: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F6E8()
{
  sub_10001045C();
  sub_100039D6C((void *)&_mh_execute_header, v0, v1, "Can't handle usage response, alt uri is empty", v2, v3, v4, v5, v6);
}

void sub_10025F71C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Can't persist usage: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F784()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Can't persist usage, cannot find user with Apple ID: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10025F7F0()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Can't accept usage response, the local user is not a parent", v1, 2u);
}

void sub_10025F830(void *a1)
{
  uint64_t v1 = [a1 updatedObjects];
  sub_10000730C();
  sub_100039DEC((void *)&_mh_execute_header, v2, v3, "Unable to acknowledge usage requests %{public}@: %{public}@", v4, v5, v6, v7, v8);
}

void sub_10025F8C4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch requesting user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F92C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unable to fetch the last event dates for usage: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025F994(uint64_t a1, NSObject *a2)
{
  int v2 = 136446466;
  uint64_t v3 = "-[STFamilySettingsManager prepareSettingsPayloadsWithCompletion:]_block_invoke";
  __int16 v4 = 2114;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%{public}s: \nFailed to fetch users: %{public}@", (uint8_t *)&v2, 0x16u);
}

void sub_10025FA20()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to save family settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FA88()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Can't process family settings, unknown payload type: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FAF0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to find user for payload originator: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FB58(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Family settings could not be applied: Out of date. Providing return destination.", v1, 2u);
}

void sub_10025FB9C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 error];
  sub_100010450();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to handle family settings payload: %{public}@", v4, 0xCu);
}

void sub_10025FC30()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot process family settings without local user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FC98()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to process family settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FD00()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to save application of family settings after processing: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FD68()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch or create family settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FDD0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to update family settings", v1, 2u);
}

void sub_10025FE14()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to update Screen Time settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FE7C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to find Screen Time Settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FEE4()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch local user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FF4C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Failed to get family settings for local user", v1, 2u);
}

void sub_10025FF90()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Can't fetch usage, genesis date was set into the future: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10025FFF8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Can't fetch usage, previously recorded usage start date was set into the future: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100260060()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Ignoring Core Duet event date, it takes place into the future: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002600C8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to sync usage data: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100260130(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [a1 directory];
  int v6 = 138543618;
  uint64_t v7 = v5;
  __int16 v8 = 2114;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to purge store at url: %{public}@ - with error: %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_1002601E0()
{
  sub_1000402A8();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to write data to filepath: %{public}@ - with error: %{public}@");
}

void sub_100260248()
{
  sub_1000402A8();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to remove file at filepath: %{public}@  - with error: %{public}@");
}

void sub_1002602B0()
{
  sub_1000402A8();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to get size of file at path: %{public}@  - with error: %{public}@");
}

void sub_100260318(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to remove oversized file at filepath: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100260390(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to read data from filepath: %{public}@  - file is too large. Removing file instead.", (uint8_t *)&v2, 0xCu);
}

void sub_100260408()
{
  sub_1000402A8();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to read data from filepath: %{public}@  - with error: %{public}@");
}

void sub_100260470(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138543618;
  *(void *)&v3[4] = *(void *)(a1 + 32);
  *(_WORD *)&v3[12] = 2114;
  *(void *)&uint8_t v3[14] = a2;
  sub_10001049C((void *)&_mh_execute_header, a2, a3, "Failed to find a regular file in directory: %{public}@ - with error: %{public}@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_1002604EC()
{
  sub_1000402A8();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to create directory at url: %{public}@  - with error: %{public}@");
}

void sub_100260554()
{
  sub_100043500();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nSender's primitives cannot send at this time: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_1002605D0()
{
  sub_100043500();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nMessage recipients are unknown: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10026064C()
{
  sub_100043500();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nAll message recipients are unreachable: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_1002606C8()
{
  sub_100043500();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to serialize message to data: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_100260744()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to resolve user alias: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_1002607B8()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to get return destination for raw address: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_10026082C()
{
  sub_100043500();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nSender is offline: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_1002608A8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 dsid];
  v4[0] = 136446467;
  sub_1000434EC();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to resolve user alias: %{private}@", (uint8_t *)v4, 0x16u);
}

void sub_100260948()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to get return destination for raw address: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_1002609BC()
{
  sub_100043500();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nDropping message: malformed - %{public}@", v2, v3, v4, v5, 2u);
}

void sub_100260A38()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nDropping message: invalid sender: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_100260AAC(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[STIDSMessageTransport _sendAcknowledgementMessageForResponseIdentifier:toDestination:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v2] %{public}s \nUnable to get return address", (uint8_t *)&v1, 0xCu);
}

void sub_100260B30()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to acknowledge message: %{private}@ - unable to resolve user alias", v2, v3, v4, v5, 3u);
}

void sub_100260BA4()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to acknowledge message: %{private}@ - unable to get return destination", v2, v3, v4, v5, 3u);
}

void sub_100260C18(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100260C9C()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nReceived 'didSend' callback for unknown message; \nprimitiveMessageIdentifier: %{private}@)",
    v2,
    v3,
    v4,
    v5,
    3u);
}

void sub_100260D10()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nReceived 'didDeliver' callback for unknown message; \nprimitiveIdentifier: %{private}@",
    v2,
    v3,
    v4,
    v5,
    3u);
}

void sub_100260D84()
{
  v3[0] = 136446723;
  sub_1000434EC();
  __int16 v4 = v0;
  uint64_t v5 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nReceived 'didDeliver' callback for message: \nprimitiveMessageIdentifier: %{private}@, \nprimitiveDestination: %{private}@", (uint8_t *)v3, 0x20u);
}

void sub_100260E10(os_log_t log)
{
  int v1 = 136446210;
  os_log_t v2 = "-[STIDSTransport sendPayload:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nNo reachable destinations", (uint8_t *)&v1, 0xCu);
}

void sub_100260E94()
{
  int v1 = 136446467;
  os_log_t v2 = "-[STIDSTransport sendPayload:]";
  sub_100043500();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nIDS account is not active when sending: %{private}@", (uint8_t *)&v1, 0x16u);
}

void sub_100260F1C(id *a1, id *a2, NSObject *a3)
{
  uint64_t v5 = [*a1 UUID];
  int v6 = [*a2 error];
  int v7 = 136446722;
  __int16 v8 = "-[STIDSTransport sendPayload:]_block_invoke";
  __int16 v9 = 2112;
  uint64_t v10 = v5;
  __int16 v11 = 2114;
  id v12 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nSend payload operation error \npayloadUUID: %@ \nerror: %{public}@", (uint8_t *)&v7, 0x20u);
}

void sub_100260FF8(os_log_t log)
{
  int v1 = 136446210;
  os_log_t v2 = "-[STIDSTransport _receivePayloadData:fromID:serverReceivedTime:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nRefusing receipt of IDS data, restrictions forbid Screen Time. Avoid being activated remotely", (uint8_t *)&v1, 0xCu);
}

void sub_10026107C()
{
  int v2 = 136446723;
  uint64_t v3 = "-[STIDSTransport service:account:identifier:didSendWithSuccess:error:context:]";
  sub_100043500();
  __int16 v4 = 2114;
  uint64_t v5 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \naccount: %{private}@, \nidentifier: %{public}@ \ndidSendWithSuccess == NO", (uint8_t *)&v2, 0x20u);
}

void sub_100261114()
{
  int v1 = 136446466;
  int v2 = "-[STIDSTransport service:account:identifier:didSendWithSuccess:error:context:]";
  sub_100043500();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nerror: %{public}@", (uint8_t *)&v1, 0x16u);
}

void sub_10026119C()
{
  int v3 = 136446722;
  __int16 v4 = "-[STIDSTransport service:account:incomingResourceAtURL:fromID:context:]";
  sub_100043500();
  __int16 v5 = v0;
  uint64_t v6 = v1;
  _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[v1] %{public}s: \nCould not read data from URL %{public}@: %{public}@", (uint8_t *)&v3, 0x20u);
}

void sub_100261230(void *a1, NSObject *a2)
{
  int v3 = [a1 payloadType];
  v4[0] = 136446466;
  sub_100046FC8();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[local] %{public}s: \nUnable to forward payload to local transport: service provided no destinations \npayloadType: %@,", (uint8_t *)v4, 0x16u);
}

void sub_1002612D0(void *a1, uint64_t a2, NSObject *a3)
{
  __int16 v5 = [a1 payloadType];
  v6[0] = 136446722;
  sub_100046FC8();
  __int16 v7 = 2114;
  uint64_t v8 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "[local] %{public}s: \npayloadType: %@ \nFailed to generate payload data: %{public}@", (uint8_t *)v6, 0x20u);
}

void sub_100261388(uint64_t a1, NSObject *a2)
{
  int v2 = 136446466;
  int v3 = "-[STLocalIDSTransport service:account:incomingData:fromID:context:]";
  __int16 v4 = 2114;
  uint64_t v5 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "[local] %{public}s: \nDid receive unrecognizable data, NSKeyedUnarchiver fail, error: %{public}@", (uint8_t *)&v2, 0x16u);
}

void sub_100261414()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to determine if restrictions passcode set %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026147C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to authenticate passcode: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002614E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10026151C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch primary iCloud CardDav account identifier %{public}@", v2, v3, v4, v5, v6);
}

void sub_100261584()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to determine if explicit content is restricted %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002615EC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to determine if web content is restricted %{public}@", v2, v3, v4, v5, v6);
}

void sub_100261654()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Will delete web usage for %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002616BC()
{
  sub_100049B74(__stack_chk_guard);
  sub_100049B68();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Did delete web usage for %{public}@", v2, v3, v4, v5, v6);
}

void sub_100261724(void *a1)
{
  [a1 count];
  sub_100010450();
  sub_100015264((void *)&_mh_execute_header, v1, v2, "Will delete web usage for multiple urls: %lu urls", v3, v4, v5, v6, v7);
}

void sub_10026179C(uint64_t a1)
{
  [*(id *)(a1 + 32) count];
  sub_100010450();
  sub_100015264((void *)&_mh_execute_header, v1, v2, "Did delete web usage for multiple urls: %lu urls", v3, v4, v5, v6, v7);
}

void sub_100261818(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100261850(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100261888()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Will delete web usage during %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002618F0()
{
  sub_100049B74(__stack_chk_guard);
  sub_100049B68();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Did delete web usage during %{public}@", v2, v3, v4, v5, v6);
}

void sub_100261958()
{
  sub_1000402A8();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "[v2]       <<< unknown transport message content class: %{public}@ of type: %{public}@ - nothing to be done");
}

void sub_1002619C0()
{
  sub_1000402A8();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "[v2]       <<< transport message content type: %{public}@ does not match class: %{public}@ - nothing to be done");
}

void sub_100261A28(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[STMessageTrackingTransportService sendMessage:toAddresses:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to send message: Could not generate return address.", (uint8_t *)&v1, 0xCu);
}

void sub_100261AAC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136446723;
  *(void *)&v3[4] = "-[STMessageTrackingTransportService sendMessage:toAddresses:]_block_invoke";
  *(_WORD *)&v3[12] = 2113;
  *(void *)&uint8_t v3[14] = *(void *)(a1 + 32);
  *(_WORD *)&v3[22] = 2114;
  sub_10001A1DC((void *)&_mh_execute_header, a2, a3, "[v2] %{public}s: \nFailed to send message: %{private}@ error: %{public}@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16], a2);
}

void sub_100261B3C()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to update ledger item to state: Sending - Missing ledger item for message identifier: %{public}@.", (uint8_t *)v1, 0x16u);
}

void sub_100261BBC()
{
  int v2 = 136446723;
  sub_10004D8E8();
  sub_10001A1DC((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: Will not send message identifier: %{public}@ - to: %{private}@", v2);
}

void sub_100261C40(uint64_t a1, uint64_t a2, NSObject *a3)
{
  CFStringRef v3 = @"Failed";
  *(void *)&v4[4] = "-[STMessageTrackingTransportService transport:didSendMessageWithIdentifier:result:]";
  *(_DWORD *)uint64_t v4 = 136446722;
  *(_WORD *)&v4[12] = 2114;
  if (a1 == 2) {
    CFStringRef v3 = @"Sent";
  }
  *(void *)&v4[14] = v3;
  *(_WORD *)&v4[22] = 2114;
  sub_10001A1DC((void *)&_mh_execute_header, a2, a3, "[v2] %{public}s: Failed to update ledger item to state: %{public}@ - Missing ledger item for message identifier: %{public}@.", *(void *)v4, *(void *)&v4[8], *(void *)&v4[16], a2);
}

void sub_100261CE0()
{
  int v2 = 136446722;
  sub_10004D8E8();
  sub_10001A1DC((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: Did fail to send message identifier: %{public}@ error: %{public}@", v2);
}

void sub_100261D60()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v2] %{public}s: Failed to update ledger item to state: Delivered - Missing ledger item for message identifier: %{public}@.", (uint8_t *)v1, 0x16u);
}

void sub_100261DE0(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Push notification received for topic: '%@'", buf, 0xCu);
}

void sub_100261E38(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "STPersistBlueprintsOperation is exiting; fetchLocalUserInContext received error %@",
    (uint8_t *)&v2,
    0xCu);
}

void sub_100261EB0(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to save blueprints: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100261F28(uint64_t a1, void *a2, NSObject *a3)
{
  id v5 = a2;
  uint8_t v6 = objc_opt_new();
  uint8_t v7 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v7);

  uint64_t v8 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v8);

  __int16 v9 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039E2C((uint64_t)v9);

  uint64_t v10 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039E2C((uint64_t)v10);

  __int16 v11 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v11);

  id v12 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v12);

  uint64_t v13 = objc_msgSend((id)sub_100039DC0(), "objectForKeyedSubscript:");
  sub_100039D4C((uint64_t)v13);

  uint64_t v14 = [v5 objectForKeyedSubscript:@"configurations"];
  uint64_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v14 count]);
    [v6 setObject:v16 forKeyedSubscript:@"NumberOfConfigurations"];
  }
  else
  {
    [v6 setObject:&off_10030FCE8 forKeyedSubscript:@"NumberOfConfigurations"];
  }

  int v17 = 138543618;
  uint64_t v18 = a1;
  __int16 v19 = 2114;
  uint64_t v20 = v6;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "Unknown organization class name in blueprint payload: %{public}@. Ignoring blueprint: %{public}@", (uint8_t *)&v17, 0x16u);
}

void sub_100262160(void *a1, NSObject *a2)
{
  id v3 = a1;
  uint64_t v4 = objc_opt_new();
  uint64_t v5 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  uint8_t v6 = (void *)v5;
  if (v5) {
    CFStringRef v7 = (const __CFString *)v5;
  }
  else {
    CFStringRef v7 = @"None";
  }
  [v4 setObject:v7 forKeyedSubscript:@"identifier"];

  uint64_t v8 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v8);

  __int16 v9 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039E0C((uint64_t)v9);

  uint64_t v10 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039E0C((uint64_t)v10);

  uint64_t v11 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v11);

  uint64_t v12 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v12);

  uint64_t v13 = objc_msgSend((id)sub_100039DB4(), "objectForKeyedSubscript:");
  sub_100039D28(v13);

  uint64_t v14 = [v3 objectForKeyedSubscript:@"configurations"];
  uint64_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v14 count]);
    [v4 setObject:v16 forKeyedSubscript:@"NumberOfConfigurations"];
  }
  else
  {
    [v4 setObject:&off_10030FCE8 forKeyedSubscript:@"NumberOfConfigurations"];
  }

  int v17 = 138543362;
  uint64_t v18 = v4;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unexpectedly received local organization blueprint in payload. Ignoring blueprint: %{public}@", (uint8_t *)&v17, 0xCu);
}

void sub_100262388(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to archive genesis state store: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100262400(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to unarchive genesis state store: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100262478(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Fetch history after token failed with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1002624F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Fetch history after date failed with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100262568()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to serialize message address map to data: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_1002625DC(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "+[STPersistentIDSMessageTransportMessageAddressMap _loadMessageAddressesByPrimitiveDestinationFromKeyValueStore:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to load message address map from key-value store.", (uint8_t *)&v1, 0xCu);
}

void sub_100262660()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to deserialize message address map from data: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_1002626D4()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to deserialize message address from data: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_100262748(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 userDSID];
  v4[0] = 136446467;
  sub_1000434EC();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to resolve raw address for user: %{private}@", (uint8_t *)v4, 0x16u);
}

void sub_1002627E8()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to resolve primitive destination for raw address: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_10026285C()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to resolve user-targeted primitive destination from primitive destination: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_1002628D0()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nFailed to resolve raw address from primitive destination: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_100262944()
{
  sub_1000434EC();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v2] %{public}s: \nUnable to resolve userDSID from raw address: %{private}@", v2, v3, v4, v5, 3u);
}

void sub_1002629B8()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to serialize message identifier map to plist: %{public}@", (uint8_t *)v1, 0x16u);
}

void sub_100262A38(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "+[STPersistentIDSMessageTransportMessageIdentifierMap _loadMessageIdentifiersByPrimitiveIdentifierFromKeyValueStore:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to load message identifier map from key-value store.", (uint8_t *)&v1, 0xCu);
}

void sub_100262ABC()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nFailed to deserialize message identifier map from data: %{public}@", (uint8_t *)v1, 0x16u);
}

void sub_100262B3C(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "+[STPersistentIDSMessageTransportMessageIdentifierMap _loadMessageIdentifiersByPrimitiveIdentifierFromKeyValueStore:]";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[v2] %{public}s: \nOversized message identifier map was purged after previously purging it.", (uint8_t *)&v1, 0xCu);
}

void sub_100262BC0(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "+[STPersistentIDSMessageTransportMessageIdentifierMap _loadMessageIdentifiersByPrimitiveIdentifierFromKeyValueStore:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v2] %{public}s: \nMessage identifier map is too large to be read. Purging existing map and creating new one.", (uint8_t *)&v1, 0xCu);
}

void sub_100262C44(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Enumerated item was not ledger item: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100262CBC()
{
  sub_100010450();
  __int16 v3 = 2114;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to get application record for %{public}@ %{public}@", v2, 0x16u);
}

void sub_100262D40()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Couldn't fetch local user device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100262DA8()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to save local apps: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100262E10(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Attempted to persist usage data with no moc", v1, 2u);
}

void sub_100262E54()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "_runWithManagedObjectContext Failed to persist usage: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100262EBC(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [a2 coreDuetIdentifier];
  int v6 = 138543618;
  uint64_t v7 = a1;
  __int16 v8 = 2114;
  __int16 v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to persist fetched usage: %{public}@ %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_100262F70()
{
  sub_100010450();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to persist usage - Screen Time is not enabled: %{public}@", v1, 0xCu);
}

void sub_100262FE4()
{
  sub_100010450();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to fetch user-device state: %{public}@", v1, 0xCu);
}

void sub_100263058()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "There was more than 1 user device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002630C0()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Cannot persist usage, unable to fetch: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263128()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "There was more than 1 usage for user and device found: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263190(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Operation to persist usage was canceled", v1, 2u);
}

void sub_1002631D4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 stream];
  int v4 = 138543362;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received event unknown event on stream %{public}@", (uint8_t *)&v4, 0xCu);
}

void sub_100263270(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 stream];
  sub_100059290();
  sub_1000592A8((void *)&_mh_execute_header, v3, v4, "Dropping unhandled event for %{public}s on stream %{public}@", v5, v6, v7, v8, v9);
}

void sub_100263308(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 stream];
  sub_100059290();
  sub_1000592A8((void *)&_mh_execute_header, v3, v4, "Received event for %{public}s on stream %{public}@", v5, v6, v7, v8, v9);
}

void sub_1002633A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10026340C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100263478(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Local user cannot participate in sharing family settings, skipping blueprint serialization", v1, 2u);
}

void sub_1002634BC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100263528()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100049B68();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch blueprints to deduplicate configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263590()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100049B68();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002635F8()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100049B68();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Failed to fetch blueprints to upgrade to version 2 categories: %{public}@", v1, 0xCu);
}

void sub_10026366C(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[STProcessPayloadQueueOperation main]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%{public}s: \nStarted", (uint8_t *)&v1, 0xCu);
}

void sub_1002636F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to fetch enqueued payloads: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100263768(os_log_t log)
{
  int v1 = 136446210;
  int v2 = "-[STProcessPayloadQueueOperation _processPayloadQueue]_block_invoke";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%{public}s: \nFinished", (uint8_t *)&v1, 0xCu);
}

void sub_1002637EC(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to save payloads: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100263864()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot resolve resolved promise: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002638CC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot resolve canceld promise: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263934()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot cancel resolved promise: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026399C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot cancel canceled promise: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263A04()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to purge message address map store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263A6C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to purge message identifier map store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263AD4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to purge message ledger store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263B3C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to purge genesis state store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263BA4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to update database with family information: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263C0C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to process directive for reconciling genesis state store: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263C74()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to send setup message - %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263CDC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to send check-in message - %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263D44()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to schedule expired item cleanup background activity - %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263DAC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to schedule 'fail stuck messages' background activity - %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263E14()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to schedule message retry background activity - %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263E7C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to schedule the next downtime biome donation activity - %{public}@", v2, v3, v4, v5, v6);
}

void sub_100263EE4()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to process message: %{public}@ - %{public}@");
}

void sub_100263F50(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = 138543618;
  uint64_t v5 = v2;
  __int16 v6 = 2114;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to process sent message: %{public}@ - %{public}@", (uint8_t *)&v4, 0x16u);
}

void sub_100263FD8()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to process change %{public}@ - %{public}@");
}

void sub_100264044()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to process directive. Ending background activity: %{public}@ - error: %{public}@");
}

void sub_1002640D0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to process directive: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264138()
{
  sub_100010450();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Failed to get current downtime configuration: %{public}@", v1, 0xCu);
}

void sub_1002641AC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to toggle on demand downtime configuration: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264214()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to get current communication configuration: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026427C()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to get current setup configuration for user: %{public}@ - %{public}@");
}

void sub_1002642E8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to apply setup configuration: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264350(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to find signed in member", v1, 2u);
}

void sub_100264394(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "targetable family members has contains no signed-in member", v1, 2u);
}

void sub_1002643D8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to read settings configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264440()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to read downtime configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002644A8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to read communication limits configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264510()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to read always-allowed configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264578()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to read restrictions configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002645E0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to read managed-user configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264648()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to process blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002646B0()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to persist blueprint: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264718()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unable to process underlying payload of type %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264780(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 inReplyTo];
  *(_DWORD *)a1 = 138543362;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Ignoring status message: %{public}@", a1, 0xCu);
}

void sub_1002647F8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 messages];
  [v3 count];
  sub_100010450();
  sub_1000714B4((void *)&_mh_execute_header, a2, v4, "Processing status messages: %lu", v5);
}

void sub_100264888()
{
  sub_100010450();
  sub_1000714B4((void *)&_mh_execute_header, v0, v1, "No task request for payload %{public}@", v2);
}

void sub_1002648F4()
{
  sub_1000402A8();
  sub_1000714CC((void *)&_mh_execute_header, v0, (uint64_t)v0, "Running task request %{public}@ for payload %{public}@", v1);
}

void sub_100264964()
{
  sub_10007149C();
  sub_1000714CC((void *)&_mh_execute_header, v0, v1, "Running task request %{public}@ for payload %{public}@", v2);
}

void sub_1002649D4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch local user: %{public}@. So, cannot update declarations; only applying original declarations.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100264A3C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch Image Creation value: %{public}@. So, cannot update declarations; only applying original declarations.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100264AA4(uint64_t a1, NSObject *a2)
{
  objc_opt_class();
  sub_100010450();
  id v4 = v3;
  sub_1000714B4((void *)&_mh_execute_header, a2, v5, "%{public}@ : Finished", v6);
}

void sub_100264B34()
{
  sub_1000402A8();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed DM operation with result “%@” : %{public}@", v1, 0x16u);
}

void sub_100264BAC()
{
  sub_100010450();
  sub_1000714B4((void *)&_mh_execute_header, v0, v1, "Received status: %{public}@", v2);
}

void sub_100264C18(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [a1 address];
  v7[0] = 136446723;
  sub_1000434EC();
  __int16 v8 = v6;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \naddress: %{private}@, \nuserDSID: %{private}@ \nInvalid STCoreUser", (uint8_t *)v7, 0x20u);
}

void sub_100264CCC(void *a1, NSObject *a2)
{
  id v3 = [a1 address];
  int v4 = 136446466;
  uint64_t v5 = "-[STResolveIDSDestinationsOperation _resolveDestinationsFromLocal]_block_invoke";
  __int16 v6 = 2114;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \naddress: %{public}@ \nInvalid IDS user destination", (uint8_t *)&v4, 0x16u);
}

void sub_100264D78()
{
  v1[0] = 136446467;
  sub_1000434EC();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \naddress: %{private}@ \nInvalid IDS device destination", (uint8_t *)v1, 0x16u);
}

void sub_100264DF8()
{
  v2[0] = 136446723;
  sub_1000434EC();
  __int16 v3 = 2114;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nFailed to fetch user with altID: %{private}@, error: %{public}@", (uint8_t *)v2, 0x20u);
}

void sub_100264E88()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch local user in migrator: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264EF0()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to fetch local user's organization in migrator", v1, 2u);
}

void sub_100264F30()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to fetch blueprints in migrator: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100264F98()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Migrator saved changes", v2, v3, v4, v5, v6);
}

void sub_100264FCC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Migrator failed to save changes: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265034()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to serialize downtime configuration: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026509C()
{
  sub_10007564C();
  sub_100075664((void *)&_mh_execute_header, v0, v1, "Migrator created limit configuration %@ %@");
}

void sub_100265104()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Migrator created limit blueprint %@", v2, v3, v4, v5, v6);
}

void sub_10026516C()
{
  sub_10007564C();
  sub_100075664((void *)&_mh_execute_header, v0, v1, "Migrator created downtime configuration %@ %@");
}

void sub_1002651D4()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Migrator created downtime blueprint %@", v2, v3, v4, v5, v6);
}

void sub_10026523C()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Migrator created restriction configurations %@", v2, v3, v4, v5, v6);
}

void sub_1002652A4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to serialize restrictions configuration: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026530C()
{
  sub_100010450();
  sub_100013164((void *)&_mh_execute_header, v0, v1, "Migrator created restriction blueprint %@", v2, v3, v4, v5, v6);
}

void sub_100265374()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Migrator not writing settings because its blueprints exist", v1, 2u);
}

void sub_1002653B4()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Migrator left screen time turned on", v2, v3, v4, v5, v6);
}

void sub_1002653E8()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Migrator turned on screen time", v2, v3, v4, v5, v6);
}

void sub_10026541C()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Migrator cleaned up old restrictions", v2, v3, v4, v5, v6);
}

void sub_100265450(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138543362;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to retrieve local user: %{public}@", (uint8_t *)&v3, 0xCu);
}

void sub_1002654CC(uint8_t *a1, void *a2, const __CFString **a3, NSObject *a4)
{
  unsigned int v7 = [a2 unsignedIntValue] - 1;
  if (v7 > 3) {
    CFStringRef v8 = @"STDefaultUserPolicyNone";
  }
  else {
    CFStringRef v8 = off_1002FE018[v7];
  }
  *(_DWORD *)a1 = 138543362;
  *a3 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "\tFailed to apply %{public}@", a1, 0xCu);
}

void sub_10026555C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "\tMissing blueprint", v1, 2u);
}

void sub_1002655A0(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "There was more than 1 user device state: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100265618(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "There was an error fetching usage blocks: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100265690()
{
  sub_100010450();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed DM create org with result “%@” : %{public}@");
}

void sub_100265704()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to apply default user policies: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026576C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to request internal authorization: %@{public}", v2, v3, v4, v5, v6);
}

void sub_1002657D4()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to revoke internal authorization: %@{public}", v2, v3, v4, v5, v6);
}

void sub_10026583C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save after disabling screen time: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002658A4()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch screen time settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026590C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to save Screen Time Settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265974(void *a1)
{
  [a1 screenTimeEnabled];
  sub_100049B68();
  sub_1000252D8((void *)&_mh_execute_header, v1, v2, "Not automatically enabling Screen Time syncing for user because: %{public}@", v3, v4, v5, v6, v7);
}

void sub_100265A04()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch screen time settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265A6C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Fetch request for non-local devices failed; not cleaning up devices for iCloud sign-out; error details: %@",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100265AD4()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Deleting devices for Cloud sign-out", v2, v3, v4, v5, v6);
}

void sub_100265B08()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch local: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265B70()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch or create cloud organization: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265BD8()
{
  sub_10001045C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Trying to enabled cloud sync on non-HSA 2 account", v1, 2u);
}

void sub_100265C18()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to update user cloud settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265C80()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "failed updating local user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265CE8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to request internal authorization after enabling management: %@{public}", v2, v3, v4, v5, v6);
}

void sub_100265D50()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch device: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265DB8()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed updating device name: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265E20(void *a1)
{
  uint64_t v1 = [a1 name];
  sub_100010450();
  sub_100015264((void *)&_mh_execute_header, v2, v3, "Device name is now: %{private}@", v4, v5, v6, v7, v8);
}

void sub_100265EA4()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch screentime settting: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265F0C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch blueprint configurations: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265F74()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch usage limits: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100265FDC()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch blueprint schedules: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266044()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch downtime overrides: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002660AC()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch screentime blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266114()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch screen time settings after detecting Managed Configuration effective settings change: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026617C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to turn off Screen Time due to MCFeatureEnablingRestrictionsAllowed change: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002661E4()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save after deleting local user blueprints due to MCFeatureEnablingRestrictionsAllowed: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026624C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch screen time settings: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002662B4()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch local user-device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026631C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to update user device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266384()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch restrictions blueprint: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002663EC()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save after deleting local organization, local organization settings, and blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266454()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch or create new empty local organization: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002664BC(void *a1)
{
  uint64_t v1 = [a1 error];
  sub_100010450();
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Failed to connect to DM, exiting when clean: %@", v4, v5, v6, v7, v8);
}

void sub_100266540()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Not migrating defaults", v2, v3, v4, v5, v6);
}

void sub_100266574()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch or create local user-device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002665DC()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch or create local organization: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266644()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to initialize database: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002666AC()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch screen time setting: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266714()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save cleaning orphans: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026677C(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Device that is missing usage object also has no assigned user. Unable to add usage object to device. Device will be removed.", buf, 2u);
}

void sub_1002667BC(id *a1)
{
  uint64_t v1 = [*a1 familyError];
  sub_100010450();
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "failed to fetch iCloud family: %{public}@", v4, v5, v6, v7, v8);
}

void sub_100266844()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save iCloud state change: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002668AC()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Content & Privacy migration not needed", v2, v3, v4, v5, v6);
}

void sub_1002668E0()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Content & Privacy migration triggered", v2, v3, v4, v5, v6);
}

void sub_100266914()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Content & Privacy migration completed", v2, v3, v4, v5, v6);
}

void sub_100266948()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Error migrating Content & Privacy: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002669B0()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Error applying default user policies: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266A18()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266A80()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "failed to save default always allowed list: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266AE8()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed set screen time enabled: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266B50()
{
  sub_100010450();
  sub_1000714B4((void *)&_mh_execute_header, v0, v1, "Enabling screen time for dsid: %@", v2);
}

void sub_100266BBC()
{
  sub_100010450();
  sub_1000714B4((void *)&_mh_execute_header, v0, v1, "Enabling remote management for dsid: %@", v2);
}

void sub_100266C28()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to enable remote management: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266C90(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Setting screen time syncing enabled %d", (uint8_t *)v2, 8u);
}

void sub_100266D0C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed set screen time syncing enabled: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266D74()
{
  sub_100010450();
  sub_1000714B4((void *)&_mh_execute_header, v0, v1, "Fetching content & privacy enabled for dsid: %@.", v2);
}

void sub_100266DE0()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100010484();
  sub_100039D88((void *)&_mh_execute_header, v0, v1, "Failed to fetch user with dsid: %@, %{public}@");
}

void sub_100266E48()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100049B68();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266EB0()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100049B68();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Fetching blueprints returned empty results: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100266F18(void *a1)
{
  uint64_t v1 = [a1 managingOrganization];
  objc_opt_class();
  sub_100010450();
  sub_100015264((void *)&_mh_execute_header, v2, v3, "Fetching restrictions blueprint from organization: %@", v4, v5, v6, v7, v8);
}

void sub_100266FA0()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch existing user management blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267008()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save clearing restrictions passcode: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267070()
{
  sub_100006ED4(__stack_chk_guard);
  sub_100049B68();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to update user device state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002670D8()
{
  sub_100006ED4(__stack_chk_guard);
  sub_100049B68();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267140()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Fetching communication policies", v2, v3, v4, v5, v6);
}

void sub_100267174()
{
  sub_100010450();
  sub_1000714B4((void *)&_mh_execute_header, v0, v1, "Fetching communication policies for dsid: %@", v2);
}

void sub_1002671E0()
{
  sub_10001045C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "No Apple Account exists for user", v1, 2u);
}

void sub_100267220(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218242;
  uint64_t v4 = a2;
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting contact management state: %lld for dsid: %@", (uint8_t *)&v3, 0x16u);
}

void sub_1002672A8()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save manage contact enabled state: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267310()
{
  sub_100049B68();
  sub_1000714B4((void *)&_mh_execute_header, v0, v1, "Fetching contact management state for dsid: %@", v2);
}

void sub_10026738C()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch blueprints: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002673F4()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to save permitted URL: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026745C()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Fetching explicit content restriction", v2, v3, v4, v5, v6);
}

void sub_100267490()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "System ratings configuration is the wrong class: %@", v2, v3, v4, v5, v6);
}

void sub_1002674F8()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Fetching web content restricted setting", v2, v3, v4, v5, v6);
}

void sub_10026752C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "System web content filter configuration is the wrong class: %@", v2, v3, v4, v5, v6);
}

void sub_100267594()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to enable web content filter for local user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002675FC()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to apply introduction model: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267664()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to disable restrictions blueprint from introduction model: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002676CC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to save restrictions blueprint from introduction model: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267734()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to save downtime from introduction model: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026779C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to save default always allowed list: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267804()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to save managed user blueprint: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026786C()
{
  sub_10001045C();
  sub_100010468((void *)&_mh_execute_header, v0, v1, "Fetching location sharing modification restriction", v2, v3, v4, v5, v6);
}

void sub_1002678A0()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "Failed to fetch system iCloud configuration for user with dsid: %@: %{public}@");
}

void sub_100267908()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "System iCloud configuration is the wrong class: %@", v2, v3, v4, v5, v6);
}

void sub_100267970()
{
  sub_100088514();
  sub_100039D88((void *)&_mh_execute_header, v0, v1, "Failed to fetch user with dsid: %@, %{public}@");
}

void sub_1002679DC()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100049B68();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Cannot fetch or update location sharing modification value. Fetched user not in a family organization: %@", v2, v3, v4, v5, v6);
}

void sub_100267A44(char a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a1 & 1;
  __int16 v4 = 2112;
  uint64_t v5 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting location sharing modification allowed to %d for dsid: %@", (uint8_t *)v3, 0x12u);
}

void sub_100267AD0()
{
  sub_100039DA8(__stack_chk_guard);
  sub_100010484();
  sub_100039D88((void *)&_mh_execute_header, v0, v1, "Failed to save locationSharingModificationAllowed value for user with dsid: %@: %{public}@");
}

void sub_100267B38()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Restrictions blueprint is disabled. Cannot set location sharing modification restriction: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267BA0()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "failed to fetch user for last modification date: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267C08()
{
  sub_100010450();
  sub_100013180((void *)&_mh_execute_header, v0, v1, "Failed to fetch blueprints for last modification date: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100267C70()
{
  sub_10001045C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Missing return destination, cannot send checkin response.", v1, 2u);
}

void sub_100267CB0(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) error];
  sub_100010450();
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unrecoverably failed to persist blueprints: %{public}@", v4, 0xCu);
}

void sub_100267D48(uint64_t a1)
{
  int v1 = 138543362;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed STRemoteManagementRequest.initWithCoder: %{public}@", (uint8_t *)&v1, 0xCu);
}

void sub_100267DC8(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) payloadType];
  int v6 = 136446722;
  uint64_t v7 = "-[STSendPayloadWithIDSTransportOperation _sendData:toDestinations:queueIdentifier:payloadUUID:expectResponse:withError:]";
  __int16 v8 = 2114;
  uint64_t v9 = v5;
  __int16 v10 = 1024;
  unsigned int v11 = [a2 length];
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nReturnUUID is nil \nFailed to send data payloadType: %{public}@, size: %d bytes", (uint8_t *)&v6, 0x1Cu);
}

void sub_100267EA0()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nFailed to delete temporary file after IDS \nsendResourceAtURL: %{public}@", (uint8_t *)v1, 0x16u);
}

void sub_100267F20()
{
  v1[0] = 136446466;
  sub_10001A194();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "[v1] %{public}s: \nFailed to write temporary file for IDS sendResourceAtURL \nerror: %{public}@", (uint8_t *)v1, 0x16u);
}

void sub_100267FA0(uint64_t a1, NSObject *a2)
{
  int v4 = 138543362;
  id v5 = (id)objc_opt_class();
  id v3 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot transform change identifier of type: %{public}@", (uint8_t *)&v4, 0xCu);
}

void sub_100268038(uint64_t a1)
{
  int v1 = 138543362;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed STStatusRequest.initWithCoder: %{public}@", (uint8_t *)&v1, 0xCu);
}

void sub_1002680B8(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to update user device state: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100268130()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v1] %{public}s: \nFailed to delete orphaned payloads: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_1002681A4()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v1] %{public}s: \nFailed to process payload queue: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_100268218()
{
  int v2 = 136446722;
  sub_100090F7C();
  sub_10001A1DC((void *)&_mh_execute_header, v0, v1, "[v1] %{public}s: \nFailed to resolve destinations %{public}@: %{public}@", v2);
}

void sub_10026828C()
{
  int v2 = 136446722;
  sub_100090F7C();
  sub_10001A1DC((void *)&_mh_execute_header, v0, v1, "[v1] %{public}s: \nFailed to resolve destinations %{public}@: %{public}@", v2);
}

void sub_100268300()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v1] %{public}s: \nFailed to unarchive data: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_100268374(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[STTransportPayloadManager transport:didReceiveData:altURI:appleID:serverReceivedTime:]_block_invoke";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[v1] %{public}s: \nFailed to unarchive transport payload", (uint8_t *)&v1, 0xCu);
}

void sub_1002683F8()
{
  sub_10001A194();
  sub_10001A1A8((void *)&_mh_execute_header, v0, v1, "[v1] %{public}s: \nReceived invalid payload state: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10026846C(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to initialize payload: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1002684E4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 underlyingPayload];
  int v5 = 138543362;
  id v6 = (id)objc_opt_class();
  id v4 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to create request for underlying payload: %{public}@", (uint8_t *)&v5, 0xCu);
}

void sub_100268594(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No underlying payload", v1, 2u);
}

void sub_1002685D8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138543618;
  uint64_t v4 = a1;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to update: %{public}@ for address: %{public}@", (uint8_t *)&v3, 0x16u);
}

void sub_100268660()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Error reloading timelines: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002686C8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Successfully removed web history", v1, 2u);
}

void sub_10026870C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "There was an error deleting web application history: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100268774()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unable to perform fetch request: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002687DC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "resume :: Failed to check whether legacy usage is disabled: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100268844()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Finished hourly background rollup activity with error: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002688AC()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed to schedule legacy usage shutdown task: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100268914()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "rollupUsageForDuration :: Failed to check whether legacy usage is disabled: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10026897C()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "_rollupUsageWithOperation :: Failed to check whether legacy usage is disabled: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1002689E4(void *a1)
{
  uint64_t v2 = [a1 name];
  uint64_t v3 = [a1 object];
  sub_100059290();
  sub_1000592A8((void *)&_mh_execute_header, v4, v5, "Did receive notification %{public}@ for %{public}@", v6, v7, v8, v9, v10);
}

void sub_100268A88(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) name];
  uint64_t v3 = [*(id *)(a1 + 32) object];
  sub_100059290();
  sub_1000592A8((void *)&_mh_execute_header, v4, v5, "Did reset usage in response to %{public}@ for %{public}@", v6, v7, v8, v9, v10);
}

void sub_100268B30()
{
  sub_100010450();
  __int16 v3 = 2114;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Next weekly report rollup not scheduled: %{public}@ is already set, so %{public}@ is ignored", v2, 0x16u);
}

void sub_100268BB4(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed obtaining weekly report!", v1, 2u);
}

void sub_100268BF8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Failed archiving weekly report! Error: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100268C60()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unable to load usage details view model: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100268CC8()
{
  sub_100010450();
  sub_100006EB8((void *)&_mh_execute_header, v0, v1, "Unable to acknowledge usage request for local user: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100268D30()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "failed to post notification for notification “%{public}@”: %{public}@");
}

void sub_100268D9C()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "failed to post notification “%{public}@”: %{public}@");
}

void sub_100268E08()
{
  sub_100010484();
  sub_10001049C((void *)&_mh_execute_header, v0, v1, "failed to remove notification for notification “%{public}@”: %{public}@");
}

void sub_100268E74(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received unknown ask for time action %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100268EEC(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Rejecting admin store connection from “%{public}@”. ScreenTime Configuration is not properly preflighted", (uint8_t *)&v2, 0xCu);
}

void sub_100268F64(uint64_t a1, NSObject *a2)
{
  int v2 = 138543618;
  uint64_t v3 = a1;
  __int16 v4 = 2114;
  CFStringRef v5 = @"com.apple.private.screen-time.persistence";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Rejecting admin store connection from “%{public}@” without entitlement: %{public}@", (uint8_t *)&v2, 0x16u);
}

void sub_100268FF0(void *a1)
{
  os_log_t v1 = [a1 identifier];
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Failed to create biome event for ask for time request: %{public}@", v4, v5, v6, v7, 2u);
}

void sub_100269078(void *a1)
{
  os_log_t v1 = [a1 identifier];
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Failed to create biome event for ask for time response: %{public}@", v4, v5, v6, v7, 2u);
}

void sub_100269100(void *a1)
{
  os_log_t v1 = [a1 identifier];
  sub_1000252D8((void *)&_mh_execute_header, v2, v3, "Failed to create biome child state for downtimeStateEvent: %{public}@", v4, v5, v6, v7, 2u);
}

void sub_100269188(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not fetch local user: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100269200(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to toggle eye relief state: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100269278(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to get current eye relief state: %{public}@", (uint8_t *)&v2, 0xCu);
}

uint64_t CocoaError._nsError.getter()
{
  return CocoaError._nsError.getter();
}

uint64_t static CocoaError.fileReadNoSuchFile.getter()
{
  return static CocoaError.fileReadNoSuchFile.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t static CocoaError.managedObjectReferentialIntegrity.getter()
{
  return static CocoaError.managedObjectReferentialIntegrity.getter();
}

uint64_t type metadata accessor for CocoaError()
{
  return type metadata accessor for CocoaError();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  return (NSDateInterval)DateInterval._bridgeToObjectiveC()();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t DateInterval.end.getter()
{
  return DateInterval.end.getter();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.init(start:duration:)()
{
  return DateInterval.init(start:duration:)();
}

uint64_t DateInterval.start.getter()
{
  return DateInterval.start.getter();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t DateComponents.nanosecond.setter()
{
  return DateComponents.nanosecond.setter();
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  return (NSDateComponents)DateComponents._bridgeToObjectiveC()();
}

uint64_t static DateComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t DateComponents.hour.getter()
{
  return DateComponents.hour.getter();
}

uint64_t DateComponents.minute.setter()
{
  return DateComponents.minute.setter();
}

uint64_t DateComponents.second.setter()
{
  return DateComponents.second.setter();
}

uint64_t DateComponents.weekday.getter()
{
  return DateComponents.weekday.getter();
}

uint64_t DateComponents.weekday.setter()
{
  return DateComponents.weekday.setter();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError._getEmbeddedNSError()()
{
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t _BridgedStoredNSError.init(_bridgedNSError:)()
{
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t _BridgedStoredNSError.errorUserInfo.getter()
{
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t static _BridgedStoredNSError.== infix(_:_:)()
{
  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _BridgedStoredNSError.hash(into:)()
{
  return _BridgedStoredNSError.hash(into:)();
}

uint64_t _BridgedStoredNSError.errorCode.getter()
{
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String_optional __swiftcall URL.host(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.host(percentEncoded:)(percentEncoded);
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.- infix(_:_:)()
{
  return static Date.- infix(_:_:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

uint64_t Calendar.maximumRange(of:)()
{
  return Calendar.maximumRange(of:)();
}

uint64_t type metadata accessor for Calendar.MatchingPolicy()
{
  return type metadata accessor for Calendar.MatchingPolicy();
}

uint64_t Calendar.dateComponents(in:from:)()
{
  return Calendar.dateComponents(in:from:)();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t Calendar.enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)()
{
  return Calendar.enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)();
}

uint64_t type metadata accessor for Calendar.SearchDirection()
{
  return type metadata accessor for Calendar.SearchDirection();
}

uint64_t type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return type metadata accessor for Calendar.RepeatedTimePolicy();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  return (NSCalendar)Calendar._bridgeToObjectiveC()();
}

uint64_t static Calendar._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Calendar._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)()
{
  return Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t TapToRadarService.createDraft(_:processName:displayReason:completion:)()
{
  return TapToRadarService.createDraft(_:processName:displayReason:completion:)();
}

uint64_t static TapToRadarService.shared.getter()
{
  return static TapToRadarService.shared.getter();
}

uint64_t type metadata accessor for TapToRadarService()
{
  return type metadata accessor for TapToRadarService();
}

uint64_t static DeviceActivityName.downtime_weekday_1.getter()
{
  return static DeviceActivityName.downtime_weekday_1.getter();
}

uint64_t static DeviceActivityName.downtime_weekday_2.getter()
{
  return static DeviceActivityName.downtime_weekday_2.getter();
}

uint64_t static DeviceActivityName.downtime_weekday_3.getter()
{
  return static DeviceActivityName.downtime_weekday_3.getter();
}

uint64_t static DeviceActivityName.downtime_weekday_4.getter()
{
  return static DeviceActivityName.downtime_weekday_4.getter();
}

uint64_t static DeviceActivityName.downtime_weekday_5.getter()
{
  return static DeviceActivityName.downtime_weekday_5.getter();
}

uint64_t static DeviceActivityName.downtime_weekday_6.getter()
{
  return static DeviceActivityName.downtime_weekday_6.getter();
}

uint64_t static DeviceActivityName.downtime_weekday_7.getter()
{
  return static DeviceActivityName.downtime_weekday_7.getter();
}

uint64_t static DeviceActivityName.usagelimit_weekday_1.getter()
{
  return static DeviceActivityName.usagelimit_weekday_1.getter();
}

uint64_t static DeviceActivityName.usagelimit_weekday_2.getter()
{
  return static DeviceActivityName.usagelimit_weekday_2.getter();
}

uint64_t static DeviceActivityName.usagelimit_weekday_3.getter()
{
  return static DeviceActivityName.usagelimit_weekday_3.getter();
}

uint64_t static DeviceActivityName.usagelimit_weekday_4.getter()
{
  return static DeviceActivityName.usagelimit_weekday_4.getter();
}

uint64_t static DeviceActivityName.usagelimit_weekday_5.getter()
{
  return static DeviceActivityName.usagelimit_weekday_5.getter();
}

uint64_t static DeviceActivityName.usagelimit_weekday_6.getter()
{
  return static DeviceActivityName.usagelimit_weekday_6.getter();
}

uint64_t static DeviceActivityName.usagelimit_weekday_7.getter()
{
  return static DeviceActivityName.usagelimit_weekday_7.getter();
}

uint64_t static DeviceActivityName.downtime_enable_override.getter()
{
  return static DeviceActivityName.downtime_enable_override.getter();
}

uint64_t static DeviceActivityName.downtime_disable_override.getter()
{
  return static DeviceActivityName.downtime_disable_override.getter();
}

uint64_t DeviceActivityName.rawValue.getter()
{
  return DeviceActivityName.rawValue.getter();
}

uint64_t type metadata accessor for DeviceActivityName()
{
  return type metadata accessor for DeviceActivityName();
}

uint64_t DeviceActivityName.init(_:)()
{
  return DeviceActivityName.init(_:)();
}

uint64_t DeviceActivityEvent.init(untokenizedApplications:untokenizedCategories:untokenizedWebDomains:threshold:includesPastActivity:)()
{
  return DeviceActivityEvent.init(untokenizedApplications:untokenizedCategories:untokenizedWebDomains:threshold:includesPastActivity:)();
}

uint64_t type metadata accessor for DeviceActivityEvent.Name()
{
  return type metadata accessor for DeviceActivityEvent.Name();
}

uint64_t DeviceActivityEvent.Name.init(_:)()
{
  return DeviceActivityEvent.Name.init(_:)();
}

uint64_t DeviceActivityEvent.threshold.getter()
{
  return DeviceActivityEvent.threshold.getter();
}

uint64_t type metadata accessor for DeviceActivityEvent()
{
  return type metadata accessor for DeviceActivityEvent();
}

Swift::Void __swiftcall DeviceActivityCenter.stopMonitoring(_:)(Swift::OpaquePointer a1)
{
}

uint64_t DeviceActivityCenter.startMonitoring(_:during:events:)()
{
  return DeviceActivityCenter.startMonitoring(_:during:events:)();
}

uint64_t DeviceActivityCenter.init(clientIdentifier:extensionIdentifier:)()
{
  return DeviceActivityCenter.init(clientIdentifier:extensionIdentifier:)();
}

uint64_t DeviceActivityCenter.allowShortIntervals.setter()
{
  return DeviceActivityCenter.allowShortIntervals.setter();
}

uint64_t type metadata accessor for DeviceActivityCenter()
{
  return type metadata accessor for DeviceActivityCenter();
}

uint64_t DeviceActivitySchedule.init(intervalStart:intervalEnd:repeats:warningTime:)()
{
  return DeviceActivitySchedule.init(intervalStart:intervalEnd:repeats:warningTime:)();
}

uint64_t type metadata accessor for DeviceActivitySchedule()
{
  return type metadata accessor for DeviceActivitySchedule();
}

uint64_t type metadata accessor for ScreenTimeFeatureFlags()
{
  return type metadata accessor for ScreenTimeFeatureFlags();
}

uint64_t static STConsistencyChecker.validate(managedObjectContext:)()
{
  return static STConsistencyChecker.validate(managedObjectContext:)();
}

uint64_t type metadata accessor for STConsistencyChecker()
{
  return type metadata accessor for STConsistencyChecker();
}

uint64_t Application.init(bundleIdentifier:)()
{
  return Application.init(bundleIdentifier:)();
}

uint64_t type metadata accessor for Application()
{
  return type metadata accessor for Application();
}

uint64_t ActivityCategory.init(identifier:)()
{
  return ActivityCategory.init(identifier:)();
}

uint64_t type metadata accessor for ActivityCategory()
{
  return type metadata accessor for ActivityCategory();
}

uint64_t WebDomain.init(domain:)()
{
  return WebDomain.init(domain:)();
}

uint64_t type metadata accessor for WebDomain()
{
  return type metadata accessor for WebDomain();
}

uint64_t dispatch thunk of LocalRestrictions.updateDefaultWebContentRestrictions(with:)()
{
  return dispatch thunk of LocalRestrictions.updateDefaultWebContentRestrictions(with:)();
}

uint64_t dispatch thunk of LocalRestrictions.denyiCloudLogoutAndRequireAutomaticDateAndTime(deny:)()
{
  return dispatch thunk of LocalRestrictions.denyiCloudLogoutAndRequireAutomaticDateAndTime(deny:)();
}

uint64_t dispatch thunk of LocalRestrictions.deleteStores(with:)()
{
  return dispatch thunk of LocalRestrictions.deleteStores(with:)();
}

uint64_t dispatch thunk of LocalRestrictions.updateAlwaysAllow(with:)()
{
  return dispatch thunk of LocalRestrictions.updateAlwaysAllow(with:)();
}

uint64_t dispatch thunk of LocalRestrictions.setUpOverrideStore(with:applications:webDomains:)()
{
  return dispatch thunk of LocalRestrictions.setUpOverrideStore(with:applications:webDomains:)();
}

uint64_t dispatch thunk of LocalRestrictions.setUpUsageLimitStore(with:applications:categories:webDomains:blockAtEndOfLimit:isManaged:)()
{
  return dispatch thunk of LocalRestrictions.setUpUsageLimitStore(with:applications:categories:webDomains:blockAtEndOfLimit:isManaged:)();
}

uint64_t dispatch thunk of LocalRestrictions.setDowntimeShieldPolicy(with:isManaged:)()
{
  return dispatch thunk of LocalRestrictions.setDowntimeShieldPolicy(with:isManaged:)();
}

uint64_t dispatch thunk of LocalRestrictions.communicationSafetyPolicy.setter()
{
  return dispatch thunk of LocalRestrictions.communicationSafetyPolicy.setter();
}

uint64_t dispatch thunk of LocalRestrictions.deleteAppAndWebsiteActivityStores()()
{
  return dispatch thunk of LocalRestrictions.deleteAppAndWebsiteActivityStores()();
}

uint64_t dispatch thunk of LocalRestrictions.update(with:clearAllExistingRestrictions:)()
{
  return dispatch thunk of LocalRestrictions.update(with:clearAllExistingRestrictions:)();
}

uint64_t LocalRestrictions.init()()
{
  return LocalRestrictions.init()();
}

uint64_t type metadata accessor for LocalRestrictions()
{
  return type metadata accessor for LocalRestrictions();
}

uint64_t type metadata accessor for STUserNotifications.NotificationType()
{
  return type metadata accessor for STUserNotifications.NotificationType();
}

uint64_t static STUserNotifications.removeNotification(context:)()
{
  return static STUserNotifications.removeNotification(context:)();
}

uint64_t static STUserNotifications.notificationCentersByBundle.getter()
{
  return static STUserNotifications.notificationCentersByBundle.getter();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t ATQuestion.answerChoices.setter()
{
  return ATQuestion.answerChoices.setter();
}

uint64_t ATQuestion.__allocating_init(id:topic:title:summary:)()
{
  return ATQuestion.__allocating_init(id:topic:title:summary:)();
}

uint64_t ATQuestion.associatedContentBundleIdentifier.setter()
{
  return ATQuestion.associatedContentBundleIdentifier.setter();
}

uint64_t ATQuestion.Topic.init(rawValue:)()
{
  return ATQuestion.Topic.init(rawValue:)();
}

uint64_t type metadata accessor for ATQuestion.Topic()
{
  return type metadata accessor for ATQuestion.Topic();
}

uint64_t type metadata accessor for ATQuestion()
{
  return type metadata accessor for ATQuestion();
}

uint64_t ATAnswerChoice.init(id:title:completedRequestTitle:)()
{
  return ATAnswerChoice.init(id:title:completedRequestTitle:)();
}

uint64_t ATAnswerChoice.init(id:title:)()
{
  return ATAnswerChoice.init(id:title:)();
}

uint64_t ATAnswerChoice.kind.setter()
{
  return ATAnswerChoice.kind.setter();
}

uint64_t type metadata accessor for ATAnswerChoice()
{
  return type metadata accessor for ATAnswerChoice();
}

uint64_t static ATDispatchCenter.shared.getter()
{
  return static ATDispatchCenter.shared.getter();
}

uint64_t type metadata accessor for ATDispatchCenter()
{
  return type metadata accessor for ATDispatchCenter();
}

uint64_t errno.getter()
{
  return errno.getter();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return static Subscribers.Demand.unlimited.getter();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t PassthroughSubject.send(_:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t Just.setFailureType<A>(to:)()
{
  return Just.setFailureType<A>(to:)();
}

uint64_t Just.init(_:)()
{
  return Just.init(_:)();
}

uint64_t Future.init(_:)()
{
  return Future.init(_:)();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t Publisher.map<A>(_:)()
{
  return Publisher.map<A>(_:)();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return Publisher.sink(receiveCompletion:receiveValue:)();
}

uint64_t Publisher.catch<A>(_:)()
{
  return Publisher.catch<A>(_:)();
}

uint64_t Publisher.merge<A, B>(with:_:)()
{
  return Publisher.merge<A, B>(with:_:)();
}

uint64_t Publisher.flatMap<A, B>(maxPublishers:_:)()
{
  return Publisher.flatMap<A, B>(maxPublishers:_:)();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)()
{
  return Publisher.debounce<A>(for:scheduler:options:)();
}

uint64_t Publisher.mapError<A>(_:)()
{
  return Publisher.mapError<A>(_:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Double.init(truncating:)()
{
  return Double.init(truncating:)();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._forceBridgeFromObjectiveC(_:result:)()
{
  return static Set._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t Collection<>.trimmingPrefix<A>(_:)()
{
  return Collection<>.trimmingPrefix<A>(_:)();
}

uint64_t NSPredicate.init(format:_:)()
{
  return NSPredicate.init(format:_:)();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t FAFamilyCircle.membersAreGuardians()()
{
  return FAFamilyCircle.membersAreGuardians()();
}

uint64_t FAFamilyCircle.guardians.getter()
{
  return FAFamilyCircle.guardians.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)()
{
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return type metadata accessor for NSNotificationCenter.Publisher();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return NSNotificationCenter.publisher(for:object:)();
}

uint64_t NSManagedObjectContext.performAndWait<A>(_:)()
{
  return NSManagedObjectContext.performAndWait<A>(_:)();
}

uint64_t NSManagedObjectContext.fetch<A>(_:)()
{
  return NSManagedObjectContext.fetch<A>(_:)();
}

uint64_t CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter();
}

uint64_t NSSet.makeIterator()()
{
  return NSSet.makeIterator()();
}

uint64_t CKRecord.subscript.getter()
{
  return CKRecord.subscript.getter();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)NSNumber.init(floatLiteral:)(floatLiteral);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t ACAccount.appleID.getter()
{
  return ACAccount.appleID.getter();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.caseInsensitiveCompare<A>(_:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error<>._code.getter()
{
  return Error<>._code.getter();
}

uint64_t Error<>._domain.getter()
{
  return Error<>._domain.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Result.publisher.getter()
{
  return Result.publisher.getter();
}

uint64_t type metadata accessor for Result()
{
  return type metadata accessor for Result();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

uint64_t CATSetCatalystQueue()
{
  return _CATSetCatalystQueue();
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return _CFBundleGetIdentifier(bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return _CFBundleGetMainBundle();
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

uint64_t IDSCopyAddressDestinationForDestination()
{
  return _IDSCopyAddressDestinationForDestination();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t IDSCopyIDForEmailAddress()
{
  return _IDSCopyIDForEmailAddress();
}

uint64_t IDSCopyIDForPhoneNumber()
{
  return _IDSCopyIDForPhoneNumber();
}

uint64_t IDSCopyRawAddressForDestination()
{
  return _IDSCopyRawAddressForDestination();
}

uint64_t IDSGetUUIDData()
{
  return _IDSGetUUIDData();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t MKBUserUnlockedSinceBoot()
{
  return _MKBUserUnlockedSinceBoot();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t SBSUIActivateRemoteAlertWithLifecycleNotifications()
{
  return _SBSUIActivateRemoteAlertWithLifecycleNotifications();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress(CFAllocatorRef allocator, const sockaddr *address)
{
  return _SCNetworkReachabilityCreateWithAddress(allocator, address);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return _SCNetworkReachabilitySetCallback(target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return _SCNetworkReachabilitySetDispatchQueue(target, queue);
}

uint64_t STAvailableCategoriesExcludingSystemCategories()
{
  return _STAvailableCategoriesExcludingSystemCategories();
}

uint64_t STAvailableVersion1CategoriesExcludingSystemCategories()
{
  return _STAvailableVersion1CategoriesExcludingSystemCategories();
}

uint64_t STCategoryNameWithIdentifier()
{
  return _STCategoryNameWithIdentifier();
}

uint64_t STCompareHourMinuteTimeComponents()
{
  return _STCompareHourMinuteTimeComponents();
}

uint64_t STDisableLocalRestrictions()
{
  return _STDisableLocalRestrictions();
}

uint64_t STGetDescriptionForAskForTimeRequestDictionary()
{
  return _STGetDescriptionForAskForTimeRequestDictionary();
}

uint64_t STGetDescriptionForAskForTimeResponseDictionary()
{
  return _STGetDescriptionForAskForTimeResponseDictionary();
}

uint64_t STGetDeviceName()
{
  return _STGetDeviceName();
}

uint64_t STGetDeviceUUID()
{
  return _STGetDeviceUUID();
}

uint64_t STLocalDateFromUTCErasedDate()
{
  return _STLocalDateFromUTCErasedDate();
}

uint64_t STXPCSafeErrorFromCoreDataError()
{
  return _STXPCSafeErrorFromCoreDataError();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return __CFXPCCreateXPCObjectFromCFObject();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

{
}

{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return _confstr(a1, a2, a3);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_main(void)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return _os_variant_has_internal_diagnostics();
}

uint64_t rootless_check_datavault_flag()
{
  return _rootless_check_datavault_flag();
}

uint64_t rootless_convert_to_datavault()
{
  return _rootless_convert_to_datavault();
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return _swift_dynamicCastObjCProtocolUnconditional();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return _swift_dynamicCastTypeToObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

uint64_t xpc_copy_event()
{
  return _xpc_copy_event();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_transaction_exit_clean()
{
  return _xpc_transaction_exit_clean();
}

id objc_msgSend_ChildState(void *a1, const char *a2, ...)
{
  return _[a1 ChildState];
}

id objc_msgSend_DSID(void *a1, const char *a2, ...)
{
  return _[a1 DSID];
}

id objc_msgSend_Family(void *a1, const char *a2, ...)
{
  return _[a1 Family];
}

id objc_msgSend_ScreenTime(void *a1, const char *a2, ...)
{
  return _[a1 ScreenTime];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__addConfigurationChanges_toMessageContentTypes_messageContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addConfigurationChanges:toMessageContentTypes:messageContents:");
}

id objc_msgSend__addDuetNotificationObservers(void *a1, const char *a2, ...)
{
  return _[a1 _addDuetNotificationObservers];
}

id objc_msgSend__allInstalledAppsForUserDeviceState_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allInstalledAppsForUserDeviceState:inContext:");
}

id objc_msgSend__appAndWebsiteActivityStateTransitionFromOldAppAndWebsiteActivityState_toNewAppAndWebsiteActivityState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appAndWebsiteActivityStateTransitionFromOldAppAndWebsiteActivityState:toNewAppAndWebsiteActivityState:");
}

id objc_msgSend__appFromCoreDataChange_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appFromCoreDataChange:inContext:error:");
}

id objc_msgSend__appTombstoneFromCoreDataChange_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appTombstoneFromCoreDataChange:inContext:error:");
}

id objc_msgSend__appearsToBeEmail(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBeEmail];
}

id objc_msgSend__appearsToBePhoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBePhoneNumber];
}

id objc_msgSend__applyAskForTimeDeclarationsForAnswer_usageType_requestedResourceIdentifier_timeGranted_oneMoreMinute_toUser_managedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyAskForTimeDeclarationsForAnswer:usageType:requestedResourceIdentifier:timeGranted:oneMoreMinute:toUser:managedObjectContext:error:");
}

id objc_msgSend__applyDefaultUserPolicy_user_organizationSettings_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyDefaultUserPolicy:user:organizationSettings:error:");
}

id objc_msgSend__applyImageGenerationRestrictionIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _applyImageGenerationRestrictionIfNeeded];
}

id objc_msgSend__approveAskForTimeRequest_managedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_approveAskForTimeRequest:managedObjectContext:error:");
}

id objc_msgSend__approvedTimeForResponseAnswer_amount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_approvedTimeForResponseAnswer:amount:");
}

id objc_msgSend__atomicallyFetchFamilyMembersForcingServerCacheRefresh_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_atomicallyFetchFamilyMembersForcingServerCacheRefresh:completionHandler:");
}

id objc_msgSend__backgroundActivityResultForResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundActivityResultForResult:");
}

id objc_msgSend__blueprintBackedConfigurationChangesOfBlueprintType_configurationType_userID_containter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_blueprintBackedConfigurationChangesOfBlueprintType:configurationType:userID:containter:");
}

id objc_msgSend__buildChangeDateForHourAge_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildChangeDateForHourAge:fromDate:");
}

id objc_msgSend__buildFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildFileURL:");
}

id objc_msgSend__buildPersistentHistoryCleanupBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 _buildPersistentHistoryCleanupBackgroundActivity];
}

id objc_msgSend__buildPrimitiveDestinationsByMessageAddressFromMessageAddressesByPrimitiveDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildPrimitiveDestinationsByMessageAddressFromMessageAddressesByPrimitiveDestination:");
}

id objc_msgSend__bundleIdentifiersContainCommunicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bundleIdentifiersContainCommunicationBundleIdentifier:");
}

id objc_msgSend__canTransitionFromState_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canTransitionFromState:toState:");
}

id objc_msgSend__changeIsInteresting_triggerPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeIsInteresting:triggerPredicate:");
}

id objc_msgSend__checkForNextSync(void *a1, const char *a2, ...)
{
  return _[a1 _checkForNextSync];
}

id objc_msgSend__childPresentedContactManagementNotificationForTransition_childIsManaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_childPresentedContactManagementNotificationForTransition:childIsManaged:");
}

id objc_msgSend__cleanupDeletedUserBlueprintsWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupDeletedUserBlueprintsWithContext:error:");
}

id objc_msgSend__cleanupDuplicateBlueprintConfigurationsWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupDuplicateBlueprintConfigurationsWithContext:error:");
}

id objc_msgSend__cleanupDuplicateRestrictionsBlueprintsWithContext_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupDuplicateRestrictionsBlueprintsWithContext:user:error:");
}

id objc_msgSend__cloudKitTopicName(void *a1, const char *a2, ...)
{
  return _[a1 _cloudKitTopicName];
}

id objc_msgSend__collectAppMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectAppMetadata:");
}

id objc_msgSend__collectInstalledApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectInstalledApps:");
}

id objc_msgSend__computeHourAgeFromDefaultHourAge_overrideHourAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeHourAgeFromDefaultHourAge:overrideHourAge:");
}

id objc_msgSend__computeStartDate(void *a1, const char *a2, ...)
{
  return _[a1 _computeStartDate];
}

id objc_msgSend__concreteBackgroundActivityResultForResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_concreteBackgroundActivityResultForResult:");
}

id objc_msgSend__configurationFromChangedObject_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurationFromChangedObject:context:error:");
}

id objc_msgSend__configuredSchedulerWithIdentifier_specifiedInterval_existingInterval_type_workBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configuredSchedulerWithIdentifier:specifiedInterval:existingInterval:type:workBlock:");
}

id objc_msgSend__connectToAPNS(void *a1, const char *a2, ...)
{
  return _[a1 _connectToAPNS];
}

id objc_msgSend__contactManagementStateTransitionFromOldManagementState_toNewContactManagementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contactManagementStateTransitionFromOldManagementState:toNewContactManagementState:");
}

id objc_msgSend__contentClassForContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentClassForContentType:");
}

id objc_msgSend__coreDataChangeFromBlueprintConfiguration_configurationType_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_coreDataChangeFromBlueprintConfiguration:configurationType:container:");
}

id objc_msgSend__coreDataChangeFromSettingsConfiguration_configurationType_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_coreDataChangeFromSettingsConfiguration:configurationType:container:");
}

id objc_msgSend__coreDataChangesFromInterestingDeleteChanges_withObservationFilters_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_coreDataChangesFromInterestingDeleteChanges:withObservationFilters:inContext:");
}

id objc_msgSend__coreDataChangesFromInterestingUpsertChanges_withObservationFilters_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_coreDataChangesFromInterestingUpsertChanges:withObservationFilters:inContext:");
}

id objc_msgSend__countedItemByBundleTrustIdentifiersForCountedItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countedItemByBundleTrustIdentifiersForCountedItems:");
}

id objc_msgSend__createCommunicationSafetyStateEventWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCommunicationSafetyStateEventWithContext:");
}

id objc_msgSend__createDataVaultDirectory(void *a1, const char *a2, ...)
{
  return _[a1 _createDataVaultDirectory];
}

id objc_msgSend__createDirectoryLoggingErrorsAtURL_withFilesystemPrimitives_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDirectoryLoggingErrorsAtURL:withFilesystemPrimitives:");
}

id objc_msgSend__createRecoveryEmailMismatchEventWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createRecoveryEmailMismatchEventWithContext:");
}

id objc_msgSend__createWebContentFilterEventWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createWebContentFilterEventWithContext:");
}

id objc_msgSend__dateComponentsForNextWeeklyNotification(void *a1, const char *a2, ...)
{
  return _[a1 _dateComponentsForNextWeeklyNotification];
}

id objc_msgSend__dayDurationPredicate(void *a1, const char *a2, ...)
{
  return _[a1 _dayDurationPredicate];
}

id objc_msgSend__delegateFetchedFamilyMembers(void *a1, const char *a2, ...)
{
  return _[a1 _delegateFetchedFamilyMembers];
}

id objc_msgSend__deletePersistentHistoryInContext_beforeDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deletePersistentHistoryInContext:beforeDate:error:");
}

id objc_msgSend__dequeuePayloadsFromPayloads_fromUser_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dequeuePayloadsFromPayloads:fromUser:inContext:");
}

id objc_msgSend__descriptionDictionariesForBlueprintDictionaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionDictionariesForBlueprintDictionaries:");
}

id objc_msgSend__descriptionDictionariesForSettingsDictionaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionDictionariesForSettingsDictionaries:");
}

id objc_msgSend__descriptionDictionaryForBlueprintPayloadDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionDictionaryForBlueprintPayloadDictionary:");
}

id objc_msgSend__descriptionDictionaryForCheckinRequestPayloadDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionDictionaryForCheckinRequestPayloadDictionary:");
}

id objc_msgSend__descriptionDictionaryForCheckinResponsePayloadDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionDictionaryForCheckinResponsePayloadDictionary:");
}

id objc_msgSend__descriptionDictionaryForPayloadDictionary_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionDictionaryForPayloadDictionary:type:");
}

id objc_msgSend__descriptionDictionaryForSettingsPayloadDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionDictionaryForSettingsPayloadDictionary:");
}

id objc_msgSend__descriptionForStatusesByAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForStatusesByAddress:");
}

id objc_msgSend__destroyAndReloadAfterFailureWithStoreDescription_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_destroyAndReloadAfterFailureWithStoreDescription:error:completionHandler:");
}

id objc_msgSend__destroyPersistentStoreWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_destroyPersistentStoreWithDescription:");
}

id objc_msgSend__devicePlatformFromOSPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_devicePlatformFromOSPlatform:");
}

id objc_msgSend__deviceWithID_associatedUser_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceWithID:associatedUser:inContext:");
}

id objc_msgSend__doesNotHaveOneMoreMinuteBlueprintPassingTest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doesNotHaveOneMoreMinuteBlueprintPassingTest:error:");
}

id objc_msgSend__enableStrictSecureDecodingMode(void *a1, const char *a2, ...)
{
  return _[a1 _enableStrictSecureDecodingMode];
}

id objc_msgSend__endWithoutSaving(void *a1, const char *a2, ...)
{
  return _[a1 _endWithoutSaving];
}

id objc_msgSend__endpoint(void *a1, const char *a2, ...)
{
  return _[a1 _endpoint];
}

id objc_msgSend__enqueueOperationToFetchUsageForRequestPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueOperationToFetchUsageForRequestPayload:");
}

id objc_msgSend__enqueueOperationToPersistUsageForResponsePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueOperationToPersistUsageForResponsePayload:");
}

id objc_msgSend__ensureUsageExistForUser_forCoreDuetIdentifiers_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureUsageExistForUser:forCoreDuetIdentifiers:inManagedObjectContext:error:");
}

id objc_msgSend__enumerateItemsWithState_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateItemsWithState:usingBlock:");
}

id objc_msgSend__eventForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForRequest:");
}

id objc_msgSend__eventKindForResourceType_fillingWebsitePath_fillingBundleID_withResourceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventKindForResourceType:fillingWebsitePath:fillingBundleID:withResourceIdentifier:");
}

id objc_msgSend__expiredNotificationTimesForPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expiredNotificationTimesForPredicates:");
}

id objc_msgSend__exportWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exportWithCompletionHandler:");
}

id objc_msgSend__familyCircleDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _familyCircleDidChange];
}

id objc_msgSend__familyManagedCoreUsersFromCoreUsers_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_familyManagedCoreUsersFromCoreUsers:inContext:");
}

id objc_msgSend__familySettingsBackedConfigurationChangesForUserID_configurationType_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_familySettingsBackedConfigurationChangesForUserID:configurationType:container:");
}

id objc_msgSend__fetchAuthorCoreUserInContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAuthorCoreUserInContext:error:");
}

id objc_msgSend__fetchFamilyMemberWithPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchFamilyMemberWithPredicate:");
}

id objc_msgSend__fetchFamilyMembersForcingServerCacheRefresh_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchFamilyMembersForcingServerCacheRefresh:completionHandler:");
}

id objc_msgSend__fetchFamilyMembersWithTimeout_forceServerCacheRefresh_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchFamilyMembersWithTimeout:forceServerCacheRefresh:error:");
}

id objc_msgSend__fetchNextReportAndEndWhenDone(void *a1, const char *a2, ...)
{
  return _[a1 _fetchNextReportAndEndWhenDone];
}

id objc_msgSend__fetchOrCreateUsageForUser_device_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchOrCreateUsageForUser:device:inManagedObjectContext:error:");
}

id objc_msgSend__filteredObjectIDsFromObjects_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filteredObjectIDsFromObjects:predicate:");
}

id objc_msgSend__filteredTombstonesFromChanges_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filteredTombstonesFromChanges:predicate:");
}

id objc_msgSend__finishInvalidating(void *a1, const char *a2, ...)
{
  return _[a1 _finishInvalidating];
}

id objc_msgSend__forwardPayloadToLocalTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardPayloadToLocalTransport:");
}

id objc_msgSend__handleAnswer_requestIdentifier_timeApproved_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnswer:requestIdentifier:timeApproved:completionHandler:");
}

id objc_msgSend__handleAskForTimeResponse_respondingUserAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAskForTimeResponse:respondingUserAppleID:");
}

id objc_msgSend__handleCheckinRequestPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCheckinRequestPayload:");
}

id objc_msgSend__handleCheckinResponsePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCheckinResponsePayload:");
}

id objc_msgSend__handleConfigurationAsBlueprint_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConfigurationAsBlueprint:timeout:");
}

id objc_msgSend__handleConfigurationAsSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConfigurationAsSettings:");
}

id objc_msgSend__handleEventStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEventStream:");
}

id objc_msgSend__iCloudAccountDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _iCloudAccountDidChange];
}

id objc_msgSend__identifierForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifierForType:");
}

id objc_msgSend__importWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_importWithCompletionHandler:");
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _[a1 _init];
}

id objc_msgSend__initWithMessage_statusesByAddress_creationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithMessage:statusesByAddress:creationDate:");
}

id objc_msgSend__initWithServiceName_serviceEntitlement_exportedInterface_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithServiceName:serviceEntitlement:exportedInterface:type:");
}

id objc_msgSend__initWithServiceName_viewControllerClassName_configurationContextUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithServiceName:viewControllerClassName:configurationContextUserInfo:");
}

id objc_msgSend__initWithState_numberOfAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithState:numberOfAttempts:");
}

id objc_msgSend__initWithSuccessValue_failureError_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithSuccessValue:failureError:type:");
}

id objc_msgSend__initWithType_returnDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithType:returnDestination:");
}

id objc_msgSend__initWithUserID_genesisState_creationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithUserID:genesisState:creationDate:");
}

id objc_msgSend__intervalForSchedulingNextBackgroundActivityForDowntimeBiomeDonation_configurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_intervalForSchedulingNextBackgroundActivityForDowntimeBiomeDonation:configurations:");
}

id objc_msgSend__interventionTypeDescription(void *a1, const char *a2, ...)
{
  return _[a1 _interventionTypeDescription];
}

id objc_msgSend__isCapabilityEnabledForUser_capability_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCapabilityEnabledForUser:capability:completionHandler:");
}

id objc_msgSend__isEmptyConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEmptyConfiguration:");
}

id objc_msgSend__isFatalMigrationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isFatalMigrationError:");
}

id objc_msgSend__isFatalSQLiteError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isFatalSQLiteError:");
}

id objc_msgSend__isOnlineWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isOnlineWithFlags:");
}

id objc_msgSend__lastUsageItemStartDate(void *a1, const char *a2, ...)
{
  return _[a1 _lastUsageItemStartDate];
}

id objc_msgSend__ledgerItemStateForSendMessageResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ledgerItemStateForSendMessageResult:");
}

id objc_msgSend__loadCloudPersistentStore(void *a1, const char *a2, ...)
{
  return _[a1 _loadCloudPersistentStore];
}

id objc_msgSend__loadFromKeyValueStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadFromKeyValueStore:");
}

id objc_msgSend__loadLocalPersistentStore(void *a1, const char *a2, ...)
{
  return _[a1 _loadLocalPersistentStore];
}

id objc_msgSend__loadMessageAddressesByPrimitiveDestinationFromKeyValueStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadMessageAddressesByPrimitiveDestinationFromKeyValueStore:");
}

id objc_msgSend__loadMessageIdentifiersByPrimitiveIdentifierFromKeyValueStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadMessageIdentifiersByPrimitiveIdentifierFromKeyValueStore:");
}

id objc_msgSend__localDeviceFromPrimitives_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localDeviceFromPrimitives:inContext:error:");
}

id objc_msgSend__mappedMessagesFromMessages_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mappedMessagesFromMessages:error:");
}

id objc_msgSend__messageAddressFromPrimitiveDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageAddressFromPrimitiveDestination:");
}

id objc_msgSend__messageTransport(void *a1, const char *a2, ...)
{
  return _[a1 _messageTransport];
}

id objc_msgSend__mightSendMessage_toDestinationsWithUnknownReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mightSendMessage:toDestinationsWithUnknownReachability:");
}

id objc_msgSend__migrateBlueprintsToVersion2CategoriesWithContext_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateBlueprintsToVersion2CategoriesWithContext:user:error:");
}

id objc_msgSend__migrateWithExportNeeded_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateWithExportNeeded:completionHandler:");
}

id objc_msgSend__needToApplyDefaultUserPolicy_user_organizationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_needToApplyDefaultUserPolicy:user:organizationSettings:");
}

id objc_msgSend__newConnection(void *a1, const char *a2, ...)
{
  return _[a1 _newConnection];
}

id objc_msgSend__newIntervalFromSpecifiedInterval_existingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newIntervalFromSpecifiedInterval:existingInterval:");
}

id objc_msgSend__nextSafetySyncInterval(void *a1, const char *a2, ...)
{
  return _[a1 _nextSafetySyncInterval];
}

id objc_msgSend__notificationDelayForDateComponentForDSID_maximumDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationDelayForDateComponentForDSID:maximumDelay:");
}

id objc_msgSend__notificationForClearingChildContactManagementUserNotification(void *a1, const char *a2, ...)
{
  return _[a1 _notificationForClearingChildContactManagementUserNotification];
}

id objc_msgSend__notificationForClearingParentContactManagementUserNotificiationAboutChildWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationForClearingParentContactManagementUserNotificiationAboutChildWithName:");
}

id objc_msgSend__observedManagerKeyPaths(void *a1, const char *a2, ...)
{
  return _[a1 _observedManagerKeyPaths];
}

id objc_msgSend__operation_cancelledDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_operation:cancelledDidChange:");
}

id objc_msgSend__operation_executingDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_operation:executingDidChange:");
}

id objc_msgSend__operation_finishedDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_operation:finishedDidChange:");
}

id objc_msgSend__optionsDictionaryWithFromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_optionsDictionaryWithFromID:");
}

id objc_msgSend__osPlatformFromDevicePlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_osPlatformFromDevicePlatform:");
}

id objc_msgSend__parentPresentedContactManagementNotificationForTransition_childName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parentPresentedContactManagementNotificationForTransition:childName:");
}

id objc_msgSend__partialMessageAddressesFromMessageAddresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_partialMessageAddressesFromMessageAddresses:");
}

id objc_msgSend__performDeviceManagementRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performDeviceManagementRequest:");
}

id objc_msgSend__performEffectsForProcessSettingsResult_localUserDSID_localUserIsParent_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performEffectsForProcessSettingsResult:localUserDSID:localUserIsParent:context:");
}

id objc_msgSend__persistFetchedUsageReportWithUser_device_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistFetchedUsageReportWithUser:device:inManagedObjectContext:error:");
}

id objc_msgSend__persistTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistTargetableFamilyMembers:");
}

id objc_msgSend__persistUsageReports_usage_aggregateUsage_reportStartDate_durationInMinutes_calendar_shareWebUsage_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistUsageReports:usage:aggregateUsage:reportStartDate:durationInMinutes:calendar:shareWebUsage:inManagedObjectContext:error:");
}

id objc_msgSend__policyDescription(void *a1, const char *a2, ...)
{
  return _[a1 _policyDescription];
}

id objc_msgSend__postAskForTimeResponseNotificationWithRespondingUserGivenName_respondingUserDSID_respondingUserAltDSID_respondingUserAppleID_associatedRequestIdentifier_answer_requestedResourceName_amountGranted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postAskForTimeResponseNotificationWithRespondingUserGivenName:respondingUserDSID:respondingUserAltDSID:respondingUserAppleID:associatedRequestIdentifier:answer:requestedResourceName:amountGranted:");
}

id objc_msgSend__postContactManagementNotification_notificationIsForParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postContactManagementNotification:notificationIsForParent:");
}

id objc_msgSend__postNotification_rollupError_calendar_startOfLastWeek_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postNotification:rollupError:calendar:startOfLastWeek:completionHandler:");
}

id objc_msgSend__postNotificationRequest_context_notificationCenter_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postNotificationRequest:context:notificationCenter:withCompletionHandler:");
}

id objc_msgSend__postScreenTimeManagementEnabledNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postScreenTimeManagementEnabledNotification:");
}

id objc_msgSend__postShareMyLocationNotificationForOldAllowFindMyFriendsModification_newAllowFindMyFriendsModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postShareMyLocationNotificationForOldAllowFindMyFriendsModification:newAllowFindMyFriendsModification:");
}

id objc_msgSend__predicateForFetchingFamilyMemberMe(void *a1, const char *a2, ...)
{
  return _[a1 _predicateForFetchingFamilyMemberMe];
}

id objc_msgSend__predicateForFetchingFamilyMemberWithAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForFetchingFamilyMemberWithAppleID:");
}

id objc_msgSend__predicateForFetchingFamilyMemberWithDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForFetchingFamilyMemberWithDSID:");
}

id objc_msgSend__prepareToSendToAddresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareToSendToAddresses:");
}

id objc_msgSend__primitiveDestinationFromMessageAddress_primitiveDestinationsByMessageAddress_primitives_userAliasResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_primitiveDestinationFromMessageAddress:primitiveDestinationsByMessageAddress:primitives:userAliasResolver:");
}

id objc_msgSend__processDeclarationsPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processDeclarationsPayload:");
}

id objc_msgSend__processEnqueuedPayloads(void *a1, const char *a2, ...)
{
  return _[a1 _processEnqueuedPayloads];
}

id objc_msgSend__processFamilySettings_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFamilySettings:inContext:error:");
}

id objc_msgSend__processPayloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 _processPayloadQueue];
}

id objc_msgSend__processStatusPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processStatusPayload:");
}

id objc_msgSend__purgeAllUsage_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeAllUsage:completionHandler:");
}

id objc_msgSend__purgeEmptyUsageInManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeEmptyUsageInManagedObjectContext:error:");
}

id objc_msgSend__purgeExpiredAggregateUsageForUser_managedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeExpiredAggregateUsageForUser:managedObjectContext:");
}

id objc_msgSend__purgeFamilyInformationInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeFamilyInformationInContext:");
}

id objc_msgSend__purgeUsageBlocksWithPredicate_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeUsageBlocksWithPredicate:inManagedObjectContext:error:");
}

id objc_msgSend__purgeUsageOperation_cancelledDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeUsageOperation:cancelledDidChange:");
}

id objc_msgSend__purgeUsageOperation_executingDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeUsageOperation:executingDidChange:");
}

id objc_msgSend__purgeUsageOperation_finishedDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeUsageOperation:finishedDidChange:");
}

id objc_msgSend__qualityOfServiceForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_qualityOfServiceForType:");
}

id objc_msgSend__queryIntervalsStartingAtDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryIntervalsStartingAtDate:");
}

id objc_msgSend__reachabilityMapFromDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reachabilityMapFromDestinations:");
}

id objc_msgSend__receivePayloadData_fromID_serverReceivedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivePayloadData:fromID:serverReceivedTime:");
}

id objc_msgSend__reconcileWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reconcileWithCompletionHandler:");
}

id objc_msgSend__recordLocalUsageReports_usageReportsByCoreDuetIdentifier_aggregateUsageReports_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordLocalUsageReports:usageReportsByCoreDuetIdentifier:aggregateUsageReports:");
}

id objc_msgSend__refreshFamilyMemberCacheWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshFamilyMemberCacheWithError:");
}

id objc_msgSend__refreshReachabilityForDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshReachabilityForDestinations:");
}

id objc_msgSend__removeCloudPersistentStore(void *a1, const char *a2, ...)
{
  return _[a1 _removeCloudPersistentStore];
}

id objc_msgSend__removeDuetNotificationObservers(void *a1, const char *a2, ...)
{
  return _[a1 _removeDuetNotificationObservers];
}

id objc_msgSend__requestAuthorizationForNotificationRequest_context_notificationCenter_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestAuthorizationForNotificationRequest:context:notificationCenter:withCompletionHandler:");
}

id objc_msgSend__requestFromBlueprints_forUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestFromBlueprints:forUser:error:");
}

id objc_msgSend__resetUsageAndRollupWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetUsageAndRollupWithCompletionHandler:");
}

id objc_msgSend__resolveDestinationsFromLocal(void *a1, const char *a2, ...)
{
  return _[a1 _resolveDestinationsFromLocal];
}

id objc_msgSend__resolveDestinationsToLocal(void *a1, const char *a2, ...)
{
  return _[a1 _resolveDestinationsToLocal];
}

id objc_msgSend__resourceTypeForUsageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resourceTypeForUsageType:");
}

id objc_msgSend__resourceURLForSendingOversizedData(void *a1, const char *a2, ...)
{
  return _[a1 _resourceURLForSendingOversizedData];
}

id objc_msgSend__responseAnswerForAnswer_timeApproved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_responseAnswerForAnswer:timeApproved:");
}

id objc_msgSend__retryIntervalForNumberOfAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryIntervalForNumberOfAttempts:");
}

id objc_msgSend__rollupIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _rollupIfNeeded];
}

id objc_msgSend__rollupOperation_cancelledDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rollupOperation:cancelledDidChange:");
}

id objc_msgSend__rollupOperation_executingDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rollupOperation:executingDidChange:");
}

id objc_msgSend__rollupOperation_finishedDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rollupOperation:finishedDidChange:");
}

id objc_msgSend__rollupUsageWithOperation_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rollupUsageWithOperation:completionHandler:");
}

id objc_msgSend__runWithManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWithManagedObjectContext:error:");
}

id objc_msgSend__runWithManagedObjectContext_purgePredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWithManagedObjectContext:purgePredicate:");
}

id objc_msgSend__safetySyncNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _safetySyncNeeded];
}

id objc_msgSend__safetySyncStaleSeconds(void *a1, const char *a2, ...)
{
  return _[a1 _safetySyncStaleSeconds];
}

id objc_msgSend__saveContextAndEndOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveContextAndEndOperation:");
}

id objc_msgSend__saveToKeyValueStore(void *a1, const char *a2, ...)
{
  return _[a1 _saveToKeyValueStore];
}

id objc_msgSend__scheduleAppDiscoveryBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleAppDiscoveryBackgroundActivity];
}

id objc_msgSend__scheduleDonateDowntimeBiomeEventBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleDonateDowntimeBiomeEventBackgroundActivity];
}

id objc_msgSend__scheduleFailStuckMessagesBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleFailStuckMessagesBackgroundActivity];
}

id objc_msgSend__scheduleHistoryAnalyzerTimer(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleHistoryAnalyzerTimer];
}

id objc_msgSend__scheduleMessageRetryBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleMessageRetryBackgroundActivity];
}

id objc_msgSend__scheduleNextWeeklyReportNotificationAfterRollup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleNextWeeklyReportNotificationAfterRollup:");
}

id objc_msgSend__scheduleStoreCleanupBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleStoreCleanupBackgroundActivity];
}

id objc_msgSend__screenTimeManagementNotificationForTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_screenTimeManagementNotificationForTransition:");
}

id objc_msgSend__screenTimeManagementStateTransitionFromOldManagementState_toNewManagementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_screenTimeManagementStateTransitionFromOldManagementState:toNewManagementState:");
}

id objc_msgSend__sendAcknowledgementMessageForResponseIdentifier_toDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAcknowledgementMessageForResponseIdentifier:toDestination:");
}

id objc_msgSend__sendCheckinRequestOnAccountOfReachabilityChange(void *a1, const char *a2, ...)
{
  return _[a1 _sendCheckinRequestOnAccountOfReachabilityChange];
}

id objc_msgSend__sendCheckinRequestPayloadToDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCheckinRequestPayloadToDestination:");
}

id objc_msgSend__sendCheckinResponseToDestination_afterVersions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCheckinResponseToDestination:afterVersions:");
}

id objc_msgSend__sendData_sendDataBlock_sendOversizedDataBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendData:sendDataBlock:sendOversizedDataBlock:");
}

id objc_msgSend__sendData_toDestinations_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendData:toDestinations:options:");
}

id objc_msgSend__sendData_toDestinations_queueIdentifier_payloadUUID_expectResponse_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendData:toDestinations:queueIdentifier:payloadUUID:expectResponse:withError:");
}

id objc_msgSend__sendMessage_toReachableDestinations_fromAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessage:toReachableDestinations:fromAddress:");
}

id objc_msgSend__sendOutUsageRequestsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _sendOutUsageRequestsIfNeeded];
}

id objc_msgSend__sendOversizedData_toDestinations_sendOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOversizedData:toDestinations:sendOptions:");
}

id objc_msgSend__sendPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendPayload:");
}

id objc_msgSend__sendRepairConfigurationChangeRelatedToChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendRepairConfigurationChangeRelatedToChange:");
}

id objc_msgSend__sendRequestToParents_managedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendRequestToParents:managedObjectContext:error:");
}

id objc_msgSend__setAdditionalXPCActivityProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdditionalXPCActivityProperties:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setSafetySyncTimer(void *a1, const char *a2, ...)
{
  return _[a1 _setSafetySyncTimer];
}

id objc_msgSend__setupConfigurationContactManagementStateForContactManagementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupConfigurationContactManagementStateForContactManagementState:");
}

id objc_msgSend__setupConfigurationFromSettingsConfiguration_familyProvider_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupConfigurationFromSettingsConfiguration:familyProvider:container:");
}

id objc_msgSend__setupConfigurationScreenTimeStateForManagementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupConfigurationScreenTimeStateForManagementState:");
}

id objc_msgSend__shouldDestroyStoreGivenError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDestroyStoreGivenError:");
}

id objc_msgSend__shouldInstallBlueprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldInstallBlueprint:");
}

id objc_msgSend__shouldPostNotificationRequest_notificationCenter_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldPostNotificationRequest:notificationCenter:withCompletionHandler:");
}

id objc_msgSend__shouldPurgeBlueprintsBasedOnScreenTimeManagementStateTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldPurgeBlueprintsBasedOnScreenTimeManagementStateTransition:");
}

id objc_msgSend__shouldSendLocalDeviceStateGivenTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSendLocalDeviceStateGivenTargetableFamilyMembers:");
}

id objc_msgSend__sortDestinationsToStatus_intoReachableDestinations_unreachableDestinations_unknownReachabilityDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortDestinationsToStatus:intoReachableDestinations:unreachableDestinations:unknownReachabilityDestinations:");
}

id objc_msgSend__startListeningForIDSAccountBecameActiveNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _startListeningForIDSAccountBecameActiveNotifications];
}

id objc_msgSend__startObservingManagedConfigurationEffectiveSettings(void *a1, const char *a2, ...)
{
  return _[a1 _startObservingManagedConfigurationEffectiveSettings];
}

id objc_msgSend__startOfflineDetection(void *a1, const char *a2, ...)
{
  return _[a1 _startOfflineDetection];
}

id objc_msgSend__startSafetySyncChecks(void *a1, const char *a2, ...)
{
  return _[a1 _startSafetySyncChecks];
}

id objc_msgSend__stopListeningForIDSAccountBecameActiveNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _stopListeningForIDSAccountBecameActiveNotifications];
}

id objc_msgSend__stopObservingFamilyChangeNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _stopObservingFamilyChangeNotifications];
}

id objc_msgSend__stopSafetySyncChecks(void *a1, const char *a2, ...)
{
  return _[a1 _stopSafetySyncChecks];
}

id objc_msgSend__streamsPredicate(void *a1, const char *a2, ...)
{
  return _[a1 _streamsPredicate];
}

id objc_msgSend__stripPotentialTokenURIWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stripPotentialTokenURIWithToken:");
}

id objc_msgSend__supportedMachServices(void *a1, const char *a2, ...)
{
  return _[a1 _supportedMachServices];
}

id objc_msgSend__synchronizeGenesisStateStoreWithTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_synchronizeGenesisStateStoreWithTargetableFamilyMembers:");
}

id objc_msgSend__targetCoreUserFromChangedObject_ofConfigurationType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_targetCoreUserFromChangedObject:ofConfigurationType:error:");
}

id objc_msgSend__targetDevicesForCoreUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_targetDevicesForCoreUser:");
}

id objc_msgSend__targetableMemberFromPrimitiveMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_targetableMemberFromPrimitiveMember:");
}

id objc_msgSend__transactionsFoundByRequest_forStore_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transactionsFoundByRequest:forStore:inManagedObjectContext:error:");
}

id objc_msgSend__truncateDate_usingCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_truncateDate:usingCalendar:");
}

id objc_msgSend__unregisterForNotificationsThatTriggerCloudKitSyncs(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForNotificationsThatTriggerCloudKitSyncs];
}

id objc_msgSend__unscheduleNextWeeklyReportNotification(void *a1, const char *a2, ...)
{
  return _[a1 _unscheduleNextWeeklyReportNotification];
}

id objc_msgSend__updateAPNSConnection(void *a1, const char *a2, ...)
{
  return _[a1 _updateAPNSConnection];
}

id objc_msgSend__updateBlueprintsFromDictionaries_forUser_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBlueprintsFromDictionaries:forUser:payload:");
}

id objc_msgSend__updateContactManagementToState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContactManagementToState:");
}

id objc_msgSend__updateLocalAppsWithBackgroundActivity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLocalAppsWithBackgroundActivity:completionHandler:");
}

id objc_msgSend__updateLocalUserWithFamilyMembers_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLocalUserWithFamilyMembers:inContext:");
}

id objc_msgSend__updatePayloadUUID_toState_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePayloadUUID:toState:context:");
}

id objc_msgSend__updateScreenTimeEnabledNotificationShownUserDefaultForTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScreenTimeEnabledNotificationShownUserDefaultForTransition:");
}

id objc_msgSend__updateScreenTimeSettingsForAppAndWebsiteActivityStateTransition_managementStateTransition_withFamilySettings_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScreenTimeSettingsForAppAndWebsiteActivityStateTransition:managementStateTransition:withFamilySettings:inContext:error:");
}

id objc_msgSend__updateScreenTimeSettingsForTransition_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScreenTimeSettingsForTransition:inContext:error:");
}

id objc_msgSend__updateScreenTimeSettingsFromManagedConfigurationEffectiveSettingsWithScreenTimeSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScreenTimeSettingsFromManagedConfigurationEffectiveSettingsWithScreenTimeSettings:");
}

id objc_msgSend__updateUsageBlock_usageCategory_countedItemsByBundleIdentifier_webUsageReports_applicationUsageReports_shareWebUsage_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUsageBlock:usageCategory:countedItemsByBundleIdentifier:webUsageReports:applicationUsageReports:shareWebUsage:inManagedObjectContext:");
}

id objc_msgSend__updateWithImageGenerationThenPerformRequest_requestPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithImageGenerationThenPerformRequest:requestPayload:");
}

id objc_msgSend__updatedOrInsertedChangePredicate(void *a1, const char *a2, ...)
{
  return _[a1 _updatedOrInsertedChangePredicate];
}

id objc_msgSend__usageBlockByTrimmedStartDate_reportStartDate_durationInMinutes_calendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_usageBlockByTrimmedStartDate:reportStartDate:durationInMinutes:calendar:");
}

id objc_msgSend__usageCategoryByIdentifierForCategories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_usageCategoryByIdentifierForCategories:");
}

id objc_msgSend__usagesForUser_devices_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_usagesForUser:devices:error:");
}

id objc_msgSend__userIDFromMessageContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userIDFromMessageContent:");
}

id objc_msgSend__validStateFromCurrentState_desiredState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validStateFromCurrentState:desiredState:");
}

id objc_msgSend__validatedConfigurationTypeFromSecondaryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validatedConfigurationTypeFromSecondaryType:");
}

id objc_msgSend__validatedDeviceStateChangeTypeFromSecondaryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validatedDeviceStateChangeTypeFromSecondaryType:");
}

id objc_msgSend__willSendMessage_usingDestinationReachabilityMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willSendMessage:usingDestinationReachabilityMap:");
}

id objc_msgSend__wouldDeletingTransactionsBeforeDate_causeExpiryOfToken_forStore_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wouldDeletingTransactionsBeforeDate:causeExpiryOfToken:forStore:inManagedObjectContext:");
}

id objc_msgSend__writeDevice_associatedUser_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeDevice:associatedUser:inContext:");
}

id objc_msgSend__xpcActivityPropertiesForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcActivityPropertiesForType:");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_altDSID");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_accessLock(void *a1, const char *a2, ...)
{
  return _[a1 accessLock];
}

id objc_msgSend_accountDidUpdateToState_initializing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountDidUpdateToState:initializing:");
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountNotifier(void *a1, const char *a2, ...)
{
  return _[a1 accountNotifier];
}

id objc_msgSend_accountState(void *a1, const char *a2, ...)
{
  return _[a1 accountState];
}

id objc_msgSend_accountStateMonitorDidUpdate_initializing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStateMonitorDidUpdate:initializing:");
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_acknowledgedDate(void *a1, const char *a2, ...)
{
  return _[a1 acknowledgedDate];
}

id objc_msgSend_actionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 actionIdentifier];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithContext:");
}

id objc_msgSend_activeInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 activeInterfaceOrientation];
}

id objc_msgSend_activeOverride(void *a1, const char *a2, ...)
{
  return _[a1 activeOverride];
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _[a1 activity];
}

id objc_msgSend_activityDidEndBlock(void *a1, const char *a2, ...)
{
  return _[a1 activityDidEndBlock];
}

id objc_msgSend_activityQueue(void *a1, const char *a2, ...)
{
  return _[a1 activityQueue];
}

id objc_msgSend_adamID(void *a1, const char *a2, ...)
{
  return _[a1 adamID];
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDelegate_withDelegateProperties_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:withDelegateProperties:queue:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addNotificationRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNotificationRequest:withCompletionHandler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObservationFiltersByTriggerPredicate_forDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObservationFiltersByTriggerPredicate:forDelegate:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_forReachabilityChangesOfPrimitiveDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forReachabilityChangesOfPrimitiveDestinations:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationWithBlock:");
}

id objc_msgSend_addOperations_waitUntilFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperations:waitUntilFinished:");
}

id objc_msgSend_addPersistentStoreWithDescription_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPersistentStoreWithDescription:completionHandler:");
}

id objc_msgSend_addTarget_selector_forOperationEvents_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:selector:forOperationEvents:userInfo:");
}

id objc_msgSend_addTarget_selector_forOperationEvents_userInfo_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:selector:forOperationEvents:userInfo:delegateQueue:");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return _[a1 address];
}

id objc_msgSend_addressDestinationFromPrimitiveDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addressDestinationFromPrimitiveDestination:");
}

id objc_msgSend_addressType(void *a1, const char *a2, ...)
{
  return _[a1 addressType];
}

id objc_msgSend_addressValidator(void *a1, const char *a2, ...)
{
  return _[a1 addressValidator];
}

id objc_msgSend_addresses(void *a1, const char *a2, ...)
{
  return _[a1 addresses];
}

id objc_msgSend_addressesFromItem_inState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addressesFromItem:inState:");
}

id objc_msgSend_agentServer(void *a1, const char *a2, ...)
{
  return _[a1 agentServer];
}

id objc_msgSend_aggregateUsageReports(void *a1, const char *a2, ...)
{
  return _[a1 aggregateUsageReports];
}

id objc_msgSend_alarmEventDispatcher(void *a1, const char *a2, ...)
{
  return _[a1 alarmEventDispatcher];
}

id objc_msgSend_allDestinations(void *a1, const char *a2, ...)
{
  return _[a1 allDestinations];
}

id objc_msgSend_allDevices(void *a1, const char *a2, ...)
{
  return _[a1 allDevices];
}

id objc_msgSend_allDevicesAreNewUsage(void *a1, const char *a2, ...)
{
  return _[a1 allDevicesAreNewUsage];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allLimitsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 allLimitsEnabled];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allSourceFeatures(void *a1, const char *a2, ...)
{
  return _[a1 allSourceFeatures];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowedKeys(void *a1, const char *a2, ...)
{
  return _[a1 allowedKeys];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _[a1 altDSID];
}

id objc_msgSend_amountGranted(void *a1, const char *a2, ...)
{
  return _[a1 amountGranted];
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_anonymousXpcListenersByServiceName(void *a1, const char *a2, ...)
{
  return _[a1 anonymousXpcListenersByServiceName];
}

id objc_msgSend_answer(void *a1, const char *a2, ...)
{
  return _[a1 answer];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_apns(void *a1, const char *a2, ...)
{
  return _[a1 apns];
}

id objc_msgSend_appAndWebsiteActivityStateTransitionsByDSID(void *a1, const char *a2, ...)
{
  return _[a1 appAndWebsiteActivityStateTransitionsByDSID];
}

id objc_msgSend_appClipMetadata(void *a1, const char *a2, ...)
{
  return _[a1 appClipMetadata];
}

id objc_msgSend_appMonitor(void *a1, const char *a2, ...)
{
  return _[a1 appMonitor];
}

id objc_msgSend_appMonitorStatus(void *a1, const char *a2, ...)
{
  return _[a1 appMonitorStatus];
}

id objc_msgSend_appTags(void *a1, const char *a2, ...)
{
  return _[a1 appTags];
}

id objc_msgSend_appUsageStream(void *a1, const char *a2, ...)
{
  return _[a1 appUsageStream];
}

id objc_msgSend_appWebUsageStream(void *a1, const char *a2, ...)
{
  return _[a1 appWebUsageStream];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return _[a1 appleID];
}

id objc_msgSend_appleIDForUserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDForUserDSID:");
}

id objc_msgSend_applicationIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 applicationIdentifiers];
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _[a1 applicationState];
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return _[a1 applicationType];
}

id objc_msgSend_applicationUsage(void *a1, const char *a2, ...)
{
  return _[a1 applicationUsage];
}

id objc_msgSend_applicationUsageTrusted(void *a1, const char *a2, ...)
{
  return _[a1 applicationUsageTrusted];
}

id objc_msgSend_applyAutomaticOnDemandDowntimeStateChange_forUserID_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyAutomaticOnDemandDowntimeStateChange:forUserID:context:error:");
}

id objc_msgSend_applyDefaultUserPoliciesToUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyDefaultUserPoliciesToUser:error:");
}

id objc_msgSend_applyDefaultUserPoliciesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyDefaultUserPoliciesWithCompletionHandler:");
}

id objc_msgSend_applyDefaultUserPoliciesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyDefaultUserPoliciesWithError:");
}

id objc_msgSend_applyIntroductionModel_forDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyIntroductionModel:forDSID:completionHandler:");
}

id objc_msgSend_applyUpdatedConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyUpdatedConfiguration:completionHandler:");
}

id objc_msgSend_approvedTime(void *a1, const char *a2, ...)
{
  return _[a1 approvedTime];
}

id objc_msgSend_apps(void *a1, const char *a2, ...)
{
  return _[a1 apps];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areLocalChangesInterestingWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areLocalChangesInterestingWithError:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_ask(void *a1, const char *a2, ...)
{
  return _[a1 ask];
}

id objc_msgSend_askForTimeConfigurationProvider(void *a1, const char *a2, ...)
{
  return _[a1 askForTimeConfigurationProvider];
}

id objc_msgSend_askForTimeEventRelay(void *a1, const char *a2, ...)
{
  return _[a1 askForTimeEventRelay];
}

id objc_msgSend_askForTimeManager(void *a1, const char *a2, ...)
{
  return _[a1 askForTimeManager];
}

id objc_msgSend_askForTimeResponseHandler(void *a1, const char *a2, ...)
{
  return _[a1 askForTimeResponseHandler];
}

id objc_msgSend_askServiceDescription(void *a1, const char *a2, ...)
{
  return _[a1 askServiceDescription];
}

id objc_msgSend_askToManager(void *a1, const char *a2, ...)
{
  return _[a1 askToManager];
}

id objc_msgSend_associatedRequestIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 associatedRequestIdentifier];
}

id objc_msgSend_associatedUser(void *a1, const char *a2, ...)
{
  return _[a1 associatedUser];
}

id objc_msgSend_attemptToAutomaticallyEnableScreenTimeSyncing(void *a1, const char *a2, ...)
{
  return _[a1 attemptToAutomaticallyEnableScreenTimeSyncing];
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authenticatePasscodeForUserWithEndpoint_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticatePasscodeForUserWithEndpoint:completionHandler:");
}

id objc_msgSend_authenticateRestrictionsPasscode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateRestrictionsPasscode:error:");
}

id objc_msgSend_authenticateRestrictionsPasscode_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateRestrictionsPasscode:replyHandler:");
}

id objc_msgSend_authenticateWithPIN_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithPIN:error:");
}

id objc_msgSend_author(void *a1, const char *a2, ...)
{
  return _[a1 author];
}

id objc_msgSend_autoupdatingCurrentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 autoupdatingCurrentCalendar];
}

id objc_msgSend_backgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 backgroundActivity];
}

id objc_msgSend_backgroundActivityScheduler(void *a1, const char *a2, ...)
{
  return _[a1 backgroundActivityScheduler];
}

id objc_msgSend_backingStore(void *a1, const char *a2, ...)
{
  return _[a1 backingStore];
}

id objc_msgSend_beginBackgroundActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginBackgroundActivity:");
}

id objc_msgSend_betaVersionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 betaVersionIdentifier];
}

id objc_msgSend_biomeEventWriter(void *a1, const char *a2, ...)
{
  return _[a1 biomeEventWriter];
}

id objc_msgSend_block(void *a1, const char *a2, ...)
{
  return _[a1 block];
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockOperationWithBlock:");
}

id objc_msgSend_blocks(void *a1, const char *a2, ...)
{
  return _[a1 blocks];
}

id objc_msgSend_blueprint(void *a1, const char *a2, ...)
{
  return _[a1 blueprint];
}

id objc_msgSend_blueprintDebouncer(void *a1, const char *a2, ...)
{
  return _[a1 blueprintDebouncer];
}

id objc_msgSend_blueprintPayloads(void *a1, const char *a2, ...)
{
  return _[a1 blueprintPayloads];
}

id objc_msgSend_blueprintSourceDelegate(void *a1, const char *a2, ...)
{
  return _[a1 blueprintSourceDelegate];
}

id objc_msgSend_blueprints(void *a1, const char *a2, ...)
{
  return _[a1 blueprints];
}

id objc_msgSend_blueprintsResultsController(void *a1, const char *a2, ...)
{
  return _[a1 blueprintsResultsController];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_bounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounce:");
}

id objc_msgSend_boundaryDateForDuration_referenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundaryDateForDuration:referenceDate:");
}

id objc_msgSend_buildAddressesFromTargetableFamilyMembers_signedInUserHasMultipleDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildAddressesFromTargetableFamilyMembers:signedInUserHasMultipleDevices:");
}

id objc_msgSend_buildCheckinResponseMessageEnvelopeForUser_targetableFamilyMembers_localDeviceStateChange_settingsChanges_downtimeChanges_communicationLimitsChanges_alwaysAllowedChanges_restrictionsChanges_managedUserChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildCheckinResponseMessageEnvelopeForUser:targetableFamilyMembers:localDeviceStateChange:settingsChanges:downtimeChanges:communicationLimitsChanges:alwaysAllowedChanges:restrictionsChanges:managedUserChanges:");
}

id objc_msgSend_buildRequiredOnlyWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildRequiredOnlyWithIdentifier:");
}

id objc_msgSend_buildRequiredOnlyWithIdentifier_withRestrictWeb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildRequiredOnlyWithIdentifier:withRestrictWeb:");
}

id objc_msgSend_buildUpdatedDeclarationsWithImageGenerationAllowed_originalDeclarations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildUpdatedDeclarationsWithImageGenerationAllowed:originalDeclarations:");
}

id objc_msgSend_buildWithAddress_withPageTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildWithAddress:withPageTitle:");
}

id objc_msgSend_buildWithIdentifier_withAllowTVProviderModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildWithIdentifier:withAllowTVProviderModification:");
}

id objc_msgSend_buildWithIdentifier_withMode_withApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildWithIdentifier:withMode:withApps:");
}

id objc_msgSend_buildWithIdentifier_withMode_withCategories_withCategoriesVersion2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildWithIdentifier:withMode:withCategories:withCategoriesVersion2:");
}

id objc_msgSend_buildWithIdentifier_withMode_withHostnames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildWithIdentifier:withMode:withHostnames:");
}

id objc_msgSend_buildWithIdentifier_withRatingRegion_withRatingApps_withRatingMovies_withRatingTVShows_withAllowExplicitContent_withAllowShowingUndownloadedTV_withAllowShowingUndownloadedMovies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildWithIdentifier:withRatingRegion:withRatingApps:withRatingMovies:withRatingTVShows:withAllowExplicitContent:withAllowShowingUndownloadedTV:withAllowShowingUndownloadedMovies:");
}

id objc_msgSend_buildWithIdentifier_withRestrictWeb_withUseContentFilter_withWhiteListEnabled_withSiteWhiteList_withFilterWhiteList_withFilterBlackList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildWithIdentifier:withRestrictWeb:withUseContentFilter:withWhiteListEnabled:withSiteWhiteList:withFilterWhiteList:withFilterBlackList:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_cachedAppBundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 cachedAppBundleIdentifiers];
}

id objc_msgSend_cachedFamilyMembers(void *a1, const char *a2, ...)
{
  return _[a1 cachedFamilyMembers];
}

id objc_msgSend_cachedIDSAccountIsActive(void *a1, const char *a2, ...)
{
  return _[a1 cachedIDSAccountIsActive];
}

id objc_msgSend_cachingCodableStore(void *a1, const char *a2, ...)
{
  return _[a1 cachingCodableStore];
}

id objc_msgSend_canCloudKitMirror(void *a1, const char *a2, ...)
{
  return _[a1 canCloudKitMirror];
}

id objc_msgSend_canSend(void *a1, const char *a2, ...)
{
  return _[a1 canSend];
}

id objc_msgSend_canSendFamilyScreenTimeRequestIMessageWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSendFamilyScreenTimeRequestIMessageWithCompletion:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_canceled(void *a1, const char *a2, ...)
{
  return _[a1 canceled];
}

id objc_msgSend_canonicalBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 canonicalBundleIdentifier];
}

id objc_msgSend_capabilities(void *a1, const char *a2, ...)
{
  return _[a1 capabilities];
}

id objc_msgSend_catch(void *a1, const char *a2, ...)
{
  return _[a1 catch];
}

id objc_msgSend_categories(void *a1, const char *a2, ...)
{
  return _[a1 categories];
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 categoryIdentifier];
}

id objc_msgSend_categoryIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 categoryIdentifiers];
}

id objc_msgSend_categoryIdentifiersVersion2(void *a1, const char *a2, ...)
{
  return _[a1 categoryIdentifiersVersion2];
}

id objc_msgSend_categoryUsage(void *a1, const char *a2, ...)
{
  return _[a1 categoryUsage];
}

id objc_msgSend_cemConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 cemConfiguration];
}

id objc_msgSend_cemConfigurationIdentifierWithType_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cemConfigurationIdentifierWithType:forUser:");
}

id objc_msgSend_chainOnQueue_chainedResolve_chainedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chainOnQueue:chainedResolve:chainedError:");
}

id objc_msgSend_changeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 changeIdentifier];
}

id objc_msgSend_changeNotificationDebouncer(void *a1, const char *a2, ...)
{
  return _[a1 changeNotificationDebouncer];
}

id objc_msgSend_changeObserver_didObserveConfigurationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeObserver:didObserveConfigurationChange:");
}

id objc_msgSend_changeObserver_didObserveDeviceStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeObserver:didObserveDeviceStateChange:");
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_changedObjectFromCoreDataChange_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changedObjectFromCoreDataChange:inContext:error:");
}

id objc_msgSend_changes(void *a1, const char *a2, ...)
{
  return _[a1 changes];
}

id objc_msgSend_checkpoint(void *a1, const char *a2, ...)
{
  return _[a1 checkpoint];
}

id objc_msgSend_childCardDAVAccountIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 childCardDAVAccountIdentifier];
}

id objc_msgSend_cleanOrphanedDatabaseEntities(void *a1, const char *a2, ...)
{
  return _[a1 cleanOrphanedDatabaseEntities];
}

id objc_msgSend_cleanUpAfterMigration(void *a1, const char *a2, ...)
{
  return _[a1 cleanUpAfterMigration];
}

id objc_msgSend_cleanUpInContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpInContext:error:");
}

id objc_msgSend_cleanUpPersistentHistoryForStores_inContext_hourAge_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpPersistentHistoryForStores:inContext:hourAge:error:");
}

id objc_msgSend_cleanupActivity(void *a1, const char *a2, ...)
{
  return _[a1 cleanupActivity];
}

id objc_msgSend_clearRestrictionsPasscodeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRestrictionsPasscodeWithCompletionHandler:");
}

id objc_msgSend_clearRestrictionsPasscodeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRestrictionsPasscodeWithError:");
}

id objc_msgSend_cloudSettings(void *a1, const char *a2, ...)
{
  return _[a1 cloudSettings];
}

id objc_msgSend_cloudStore(void *a1, const char *a2, ...)
{
  return _[a1 cloudStore];
}

id objc_msgSend_cloudSyncEnabled(void *a1, const char *a2, ...)
{
  return _[a1 cloudSyncEnabled];
}

id objc_msgSend_cloudkitError(void *a1, const char *a2, ...)
{
  return _[a1 cloudkitError];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collectMCFeatures(void *a1, const char *a2, ...)
{
  return _[a1 collectMCFeatures];
}

id objc_msgSend_collectedSettings(void *a1, const char *a2, ...)
{
  return _[a1 collectedSettings];
}

id objc_msgSend_communicationBundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 communicationBundleIdentifiers];
}

id objc_msgSend_communicationConfigurationForLocalUser(void *a1, const char *a2, ...)
{
  return _[a1 communicationConfigurationForLocalUser];
}

id objc_msgSend_communicationConfigurationForLocalUserFromPersistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationConfigurationForLocalUserFromPersistentContainer:");
}

id objc_msgSend_communicationConfigurationForUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationConfigurationForUserID:");
}

id objc_msgSend_communicationConfigurationForUserID_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationConfigurationForUserID:container:");
}

id objc_msgSend_communicationConfigurationOfChildrenByUserIDForTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationConfigurationOfChildrenByUserIDForTargetableFamilyMembers:");
}

id objc_msgSend_communicationPoliciesForDSID_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationPoliciesForDSID:withCompletionHandler:");
}

id objc_msgSend_communicationPoliciesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationPoliciesWithCompletionHandler:");
}

id objc_msgSend_communicationPolicy(void *a1, const char *a2, ...)
{
  return _[a1 communicationPolicy];
}

id objc_msgSend_communicationSafetyWithInterventionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "communicationSafetyWithInterventionType:");
}

id objc_msgSend_communicationServiceDescription(void *a1, const char *a2, ...)
{
  return _[a1 communicationServiceDescription];
}

id objc_msgSend_communicationWhileLimitedPolicy(void *a1, const char *a2, ...)
{
  return _[a1 communicationWhileLimitedPolicy];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compatibilityObject(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityObject];
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _[a1 completionHandler];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_computeMessageAddressesWithAuthor_targetUser_targetableFamilyMembers_signedInUserHasMultipleDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeMessageAddressesWithAuthor:targetUser:targetableFamilyMembers:signedInUserHasMultipleDevices:");
}

id objc_msgSend_computeNextOverrideEndDateForState_creationDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeNextOverrideEndDateForState:creationDate:inCalendar:");
}

id objc_msgSend_conduit(void *a1, const char *a2, ...)
{
  return _[a1 conduit];
}

id objc_msgSend_conduit_didDeliverTransportPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conduit:didDeliverTransportPayload:");
}

id objc_msgSend_conduit_didReceiveTransportPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conduit:didReceiveTransportPayload:");
}

id objc_msgSend_conduitDidInvalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conduitDidInvalidate:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationChange(void *a1, const char *a2, ...)
{
  return _[a1 configurationChange];
}

id objc_msgSend_configurationChangeForCoreDataChange_container_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationChangeForCoreDataChange:container:error:");
}

id objc_msgSend_configurationChangeForCoreDataChange_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationChangeForCoreDataChange:error:");
}

id objc_msgSend_configurationChangeForRelatedConfigurationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationChangeForRelatedConfigurationChange:");
}

id objc_msgSend_configurationChangeForRelatedConfigurationChange_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationChangeForRelatedConfigurationChange:container:");
}

id objc_msgSend_configurationChangeFromMessageContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationChangeFromMessageContent:");
}

id objc_msgSend_configurationChangesOfType_userID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationChangesOfType:userID:");
}

id objc_msgSend_configurationChangesOfType_userID_containter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationChangesOfType:userID:containter:");
}

id objc_msgSend_configurationContextUserInfo(void *a1, const char *a2, ...)
{
  return _[a1 configurationContextUserInfo];
}

id objc_msgSend_configurationIdentifierForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationIdentifierForType:");
}

id objc_msgSend_configurationName(void *a1, const char *a2, ...)
{
  return _[a1 configurationName];
}

id objc_msgSend_configurationObservationFiltersByTriggerPredicate(void *a1, const char *a2, ...)
{
  return _[a1 configurationObservationFiltersByTriggerPredicate];
}

id objc_msgSend_configurationStore(void *a1, const char *a2, ...)
{
  return _[a1 configurationStore];
}

id objc_msgSend_configurationType(void *a1, const char *a2, ...)
{
  return _[a1 configurationType];
}

id objc_msgSend_configurations(void *a1, const char *a2, ...)
{
  return _[a1 configurations];
}

id objc_msgSend_configurationsResultsController(void *a1, const char *a2, ...)
{
  return _[a1 configurationsResultsController];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_conformsToType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToType:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connection_didReceivePublicToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceivePublicToken:");
}

id objc_msgSend_contactCountForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactCountForFetchRequest:error:");
}

id objc_msgSend_contactManagementState(void *a1, const char *a2, ...)
{
  return _[a1 contactManagementState];
}

id objc_msgSend_contactManagementStateForDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactManagementStateForDSID:completionHandler:");
}

id objc_msgSend_contactManagementStateTransitionsByDSID(void *a1, const char *a2, ...)
{
  return _[a1 contactManagementStateTransitionsByDSID];
}

id objc_msgSend_contactStorePrimitives(void *a1, const char *a2, ...)
{
  return _[a1 contactStorePrimitives];
}

id objc_msgSend_containerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithIdentifier:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsStatusWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsStatusWithState:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _[a1 content];
}

id objc_msgSend_contentPrivacyConfigurationIdentifierForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentPrivacyConfigurationIdentifierForType:");
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _[a1 contentType];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_coreAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 coreAnalytics];
}

id objc_msgSend_coreDataConfigurationStore(void *a1, const char *a2, ...)
{
  return _[a1 coreDataConfigurationStore];
}

id objc_msgSend_coreDataObserver(void *a1, const char *a2, ...)
{
  return _[a1 coreDataObserver];
}

id objc_msgSend_coreDataTransformer(void *a1, const char *a2, ...)
{
  return _[a1 coreDataTransformer];
}

id objc_msgSend_coreDuetIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 coreDuetIdentifier];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countLimit(void *a1, const char *a2, ...)
{
  return _[a1 countLimit];
}

id objc_msgSend_countedItems(void *a1, const char *a2, ...)
{
  return _[a1 countedItems];
}

id objc_msgSend_createBlueprintWithType_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBlueprintWithType:user:");
}

id objc_msgSend_createDirectoryAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createManagedUserBlueprintForUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createManagedUserBlueprintForUser:error:");
}

id objc_msgSend_createMandatoryEntitiesIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 createMandatoryEntitiesIfNeeded];
}

id objc_msgSend_createPartialAddressFromMessageAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPartialAddressFromMessageAddress:");
}

id objc_msgSend_createQueue(void *a1, const char *a2, ...)
{
  return _[a1 createQueue];
}

id objc_msgSend_createSchedulerRegisteredForTypes_schedulerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSchedulerRegisteredForTypes:schedulerDelegate:");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentCommunicationConfigurationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCommunicationConfigurationWithCompletionHandler:");
}

id objc_msgSend_currentConfigurationForUser_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentConfigurationForUser:completionHandler:");
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentDate(void *a1, const char *a2, ...)
{
  return _[a1 currentDate];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentMessageTransportReachabilityMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentMessageTransportReachabilityMap:");
}

id objc_msgSend_currentPlatform(void *a1, const char *a2, ...)
{
  return _[a1 currentPlatform];
}

id objc_msgSend_currentRemoteDevicesForDestinations_service_listenerID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_currentUserDescription(void *a1, const char *a2, ...)
{
  return _[a1 currentUserDescription];
}

id objc_msgSend_currentUserWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentUserWithCompletion:");
}

id objc_msgSend_daemon(void *a1, const char *a2, ...)
{
  return _[a1 daemon];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dataRepresentation];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateInterval(void *a1, const char *a2, ...)
{
  return _[a1 dateInterval];
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 decimalDigitCharacterSet];
}

id objc_msgSend_declarationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 declarationIdentifier];
}

id objc_msgSend_declarationType(void *a1, const char *a2, ...)
{
  return _[a1 declarationType];
}

id objc_msgSend_declarations(void *a1, const char *a2, ...)
{
  return _[a1 declarations];
}

id objc_msgSend_declarationsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "declarationsWithError:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBoolValueForSetting:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultUserPolicies(void *a1, const char *a2, ...)
{
  return _[a1 defaultUserPolicies];
}

id objc_msgSend_defaultUserPolicyApplicator(void *a1, const char *a2, ...)
{
  return _[a1 defaultUserPolicyApplicator];
}

id objc_msgSend_defaultValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultValueForSetting:");
}

id objc_msgSend_defaultValuesForIntersectionSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultValuesForIntersectionSetting:");
}

id objc_msgSend_defaultValuesForUnionSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultValuesForUnionSetting:");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegates(void *a1, const char *a2, ...)
{
  return _[a1 delegates];
}

id objc_msgSend_deleteAllHistoryForApplication_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllHistoryForApplication:completionHandler:");
}

id objc_msgSend_deleteAllHistoryForApplication_profileIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllHistoryForApplication:profileIdentifier:completionHandler:");
}

id objc_msgSend_deleteAllLocalScreenTimeSettings(void *a1, const char *a2, ...)
{
  return _[a1 deleteAllLocalScreenTimeSettings];
}

id objc_msgSend_deleteAllWebApplicationHistory_clientBundleURLWrapper_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllWebApplicationHistory:clientBundleURLWrapper:replyHandler:");
}

id objc_msgSend_deleteAllWebApplicationHistory_profileIdentifier_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllWebApplicationHistory:profileIdentifier:replyHandler:");
}

id objc_msgSend_deleteAllWebApplicationHistory_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllWebApplicationHistory:replyHandler:");
}

id objc_msgSend_deleteHistoryBeforeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryBeforeDate:");
}

id objc_msgSend_deleteHistoryBeforeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryBeforeToken:");
}

id objc_msgSend_deleteHistoryDuringInterval_webApplication_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryDuringInterval:webApplication:completionHandler:");
}

id objc_msgSend_deleteHistoryDuringInterval_webApplication_profileIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryDuringInterval:webApplication:profileIdentifier:completionHandler:");
}

id objc_msgSend_deleteHistoryForDomain_webApplication_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryForDomain:webApplication:completionHandler:");
}

id objc_msgSend_deleteHistoryForDomain_webApplication_profileIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryForDomain:webApplication:profileIdentifier:completionHandler:");
}

id objc_msgSend_deleteHistoryForURL_webApplication_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryForURL:webApplication:completionHandler:");
}

id objc_msgSend_deleteHistoryForURL_webApplication_profileIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryForURL:webApplication:profileIdentifier:completionHandler:");
}

id objc_msgSend_deleteHistoryForURLs_webApplication_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryForURLs:webApplication:completionHandler:");
}

id objc_msgSend_deleteHistoryForURLs_webApplication_profileIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryForURLs:webApplication:profileIdentifier:completionHandler:");
}

id objc_msgSend_deleteLocalUserBlueprintsFromManagedConfigurationEffectiveSettings(void *a1, const char *a2, ...)
{
  return _[a1 deleteLocalUserBlueprintsFromManagedConfigurationEffectiveSettings];
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_deleteWebHistoryDuringInterval_webApplication_clientBundleURLWrapper_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryDuringInterval:webApplication:clientBundleURLWrapper:replyHandler:");
}

id objc_msgSend_deleteWebHistoryDuringInterval_webApplication_profileIdentifier_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryDuringInterval:webApplication:profileIdentifier:replyHandler:");
}

id objc_msgSend_deleteWebHistoryDuringInterval_webApplication_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryDuringInterval:webApplication:replyHandler:");
}

id objc_msgSend_deleteWebHistoryForDomain_webApplication_profileIdentifier_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryForDomain:webApplication:profileIdentifier:replyHandler:");
}

id objc_msgSend_deleteWebHistoryForDomain_webApplication_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryForDomain:webApplication:replyHandler:");
}

id objc_msgSend_deleteWebHistoryForURL_webApplication_clientBundleURLWrapper_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryForURL:webApplication:clientBundleURLWrapper:replyHandler:");
}

id objc_msgSend_deleteWebHistoryForURL_webApplication_profileIdentifier_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryForURL:webApplication:profileIdentifier:replyHandler:");
}

id objc_msgSend_deleteWebHistoryForURL_webApplication_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryForURL:webApplication:replyHandler:");
}

id objc_msgSend_deleteWebHistoryForURLs_webApplication_profileIdentifier_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryForURLs:webApplication:profileIdentifier:replyHandler:");
}

id objc_msgSend_deleteWebHistoryForURLs_webApplication_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWebHistoryForURLs:webApplication:replyHandler:");
}

id objc_msgSend_deliverQuietly(void *a1, const char *a2, ...)
{
  return _[a1 deliverQuietly];
}

id objc_msgSend_deregisterSystemTask(void *a1, const char *a2, ...)
{
  return _[a1 deregisterSystemTask];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_destinationReachabilityMap(void *a1, const char *a2, ...)
{
  return _[a1 destinationReachabilityMap];
}

id objc_msgSend_destinationURIs(void *a1, const char *a2, ...)
{
  return _[a1 destinationURIs];
}

id objc_msgSend_destinations(void *a1, const char *a2, ...)
{
  return _[a1 destinations];
}

id objc_msgSend_destroyPersistentStoreAtURL_withType_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destroyPersistentStoreAtURL:withType:options:error:");
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _[a1 device];
}

id objc_msgSend_deviceActivity(void *a1, const char *a2, ...)
{
  return _[a1 deviceActivity];
}

id objc_msgSend_deviceID(void *a1, const char *a2, ...)
{
  return _[a1 deviceID];
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdentifier];
}

id objc_msgSend_deviceInformationPrimitives(void *a1, const char *a2, ...)
{
  return _[a1 deviceInformationPrimitives];
}

id objc_msgSend_deviceManagementRequestForOrganizationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagementRequestForOrganizationID:");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _[a1 deviceName];
}

id objc_msgSend_deviceStateChange(void *a1, const char *a2, ...)
{
  return _[a1 deviceStateChange];
}

id objc_msgSend_deviceStateChangeForCoreDataChanges_deviceInformationPrimitives_container_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceStateChangeForCoreDataChanges:deviceInformationPrimitives:container:error:");
}

id objc_msgSend_deviceStateChangeForCoreDataChanges_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceStateChangeForCoreDataChanges:error:");
}

id objc_msgSend_deviceStateChangeForLocalDevice(void *a1, const char *a2, ...)
{
  return _[a1 deviceStateChangeForLocalDevice];
}

id objc_msgSend_deviceStateChangeForLocalDeviceUsingDeviceInformationPrimitives_persistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceStateChangeForLocalDeviceUsingDeviceInformationPrimitives:persistentContainer:");
}

id objc_msgSend_deviceStateChangeFromMessageContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceStateChangeFromMessageContent:");
}

id objc_msgSend_deviceStateDebouncer(void *a1, const char *a2, ...)
{
  return _[a1 deviceStateDebouncer];
}

id objc_msgSend_deviceStateObservationFiltersByTriggerPredicate(void *a1, const char *a2, ...)
{
  return _[a1 deviceStateObservationFiltersByTriggerPredicate];
}

id objc_msgSend_deviceStateStore(void *a1, const char *a2, ...)
{
  return _[a1 deviceStateStore];
}

id objc_msgSend_deviceUUID(void *a1, const char *a2, ...)
{
  return _[a1 deviceUUID];
}

id objc_msgSend_deviceWithAppliedChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithAppliedChange:");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didDisableCloudSync(void *a1, const char *a2, ...)
{
  return _[a1 didDisableCloudSync];
}

id objc_msgSend_didDisableScreenTime(void *a1, const char *a2, ...)
{
  return _[a1 didDisableScreenTime];
}

id objc_msgSend_didEnableCloudSync(void *a1, const char *a2, ...)
{
  return _[a1 didEnableCloudSync];
}

id objc_msgSend_didEnableManagement(void *a1, const char *a2, ...)
{
  return _[a1 didEnableManagement];
}

id objc_msgSend_didEnableScreenTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEnableScreenTime:");
}

id objc_msgSend_didJoinFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didJoinFamily:");
}

id objc_msgSend_didLeaveFamily(void *a1, const char *a2, ...)
{
  return _[a1 didLeaveFamily];
}

id objc_msgSend_didReadLocalPasscode(void *a1, const char *a2, ...)
{
  return _[a1 didReadLocalPasscode];
}

id objc_msgSend_didReceiveBlueprintPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveBlueprintPayload:");
}

id objc_msgSend_didSignInToCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSignInToCloud:");
}

id objc_msgSend_didSignOutOfCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSignOutOfCloud:");
}

id objc_msgSend_didUpdateFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateFamily:");
}

id objc_msgSend_directiveProcessor(void *a1, const char *a2, ...)
{
  return _[a1 directiveProcessor];
}

id objc_msgSend_directory(void *a1, const char *a2, ...)
{
  return _[a1 directory];
}

id objc_msgSend_disableManagedUserBlueprintForUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableManagedUserBlueprintForUser:error:");
}

id objc_msgSend_disableRestrictionsBlueprintForUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableRestrictionsBlueprintForUser:error:");
}

id objc_msgSend_dispatchGroup(void *a1, const char *a2, ...)
{
  return _[a1 dispatchGroup];
}

id objc_msgSend_dispatcher(void *a1, const char *a2, ...)
{
  return _[a1 dispatcher];
}

id objc_msgSend_displayIsBacklit(void *a1, const char *a2, ...)
{
  return _[a1 displayIsBacklit];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_distnotedEventDispatcher(void *a1, const char *a2, ...)
{
  return _[a1 distnotedEventDispatcher];
}

id objc_msgSend_distributorID(void *a1, const char *a2, ...)
{
  return _[a1 distributorID];
}

id objc_msgSend_distributorInfo(void *a1, const char *a2, ...)
{
  return _[a1 distributorInfo];
}

id objc_msgSend_distributorIsThirdParty(void *a1, const char *a2, ...)
{
  return _[a1 distributorIsThirdParty];
}

id objc_msgSend_doOn(void *a1, const char *a2, ...)
{
  return _[a1 doOn];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_domainIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 domainIdentifier];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downtimeConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 downtimeConfiguration];
}

id objc_msgSend_downtimeConfigurationForUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downtimeConfigurationForUserID:");
}

id objc_msgSend_downtimeConfigurationForUserID_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downtimeConfigurationForUserID:container:");
}

id objc_msgSend_downtimeConfigurationForUserID_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downtimeConfigurationForUserID:context:error:");
}

id objc_msgSend_downtimeConfigurationOfChildrenByUserIDForTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downtimeConfigurationOfChildrenByUserIDForTargetableFamilyMembers:");
}

id objc_msgSend_downtimeConfigurationState(void *a1, const char *a2, ...)
{
  return _[a1 downtimeConfigurationState];
}

id objc_msgSend_downtimeDate(void *a1, const char *a2, ...)
{
  return _[a1 downtimeDate];
}

id objc_msgSend_downtimeEndTime(void *a1, const char *a2, ...)
{
  return _[a1 downtimeEndTime];
}

id objc_msgSend_downtimeOverridesResultsController(void *a1, const char *a2, ...)
{
  return _[a1 downtimeOverridesResultsController];
}

id objc_msgSend_downtimeServiceDescription(void *a1, const char *a2, ...)
{
  return _[a1 downtimeServiceDescription];
}

id objc_msgSend_downtimeStartTime(void *a1, const char *a2, ...)
{
  return _[a1 downtimeStartTime];
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return _[a1 dsid];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_durationInMinutes(void *a1, const char *a2, ...)
{
  return _[a1 durationInMinutes];
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_earliestUsageEventStartDateCreatedSince_whereStartDateIsOnOrAfter_andEndDateOnOrBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earliestUsageEventStartDateCreatedSince:whereStartDateIsOnOrAfter:andEndDateOnOrBefore:");
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBoolValueForSetting:");
}

id objc_msgSend_effectivePasscode(void *a1, const char *a2, ...)
{
  return _[a1 effectivePasscode];
}

id objc_msgSend_effectiveRecoveryAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 effectiveRecoveryAltDSID];
}

id objc_msgSend_enableRemoteManagementForDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableRemoteManagementForDSID:completionHandler:");
}

id objc_msgSend_enableScreenTimeForDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableScreenTimeForDSID:completionHandler:");
}

id objc_msgSend_enableWebContentFilterWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableWebContentFilterWithCompletionHandler:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodingVersion(void *a1, const char *a2, ...)
{
  return _[a1 encodingVersion];
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endOperationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endOperationWithError:");
}

id objc_msgSend_endOperationWithResultObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endOperationWithResultObject:");
}

id objc_msgSend_endWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endWithResult:");
}

id objc_msgSend_enqueuePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueuePayload:");
}

id objc_msgSend_enqueueTransportPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueTransportPayload:");
}

id objc_msgSend_entitlements(void *a1, const char *a2, ...)
{
  return _[a1 entitlements];
}

id objc_msgSend_entity(void *a1, const char *a2, ...)
{
  return _[a1 entity];
}

id objc_msgSend_enumerateItemsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateItemsUsingBlock:");
}

id objc_msgSend_enumerateItemsWithState_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateItemsWithState:usingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateKeysAndValuesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndValuesUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateRegularFilesInDirectoryAtURL_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRegularFilesInDirectoryAtURL:withBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_enumeratorWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorWithOptions:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_evaluateCausality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateCausality:");
}

id objc_msgSend_evaluateWithSuccess_failure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateWithSuccess:failure:");
}

id objc_msgSend_eventQueryWithPredicate_eventStreams_offset_limit_sortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventQueryWithPredicate:eventStreams:offset:limit:sortDescriptors:");
}

id objc_msgSend_eventRelay(void *a1, const char *a2, ...)
{
  return _[a1 eventRelay];
}

id objc_msgSend_eventRelay_didRelayRequestEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventRelay:didRelayRequestEvent:");
}

id objc_msgSend_eventRelay_didRelayResponseEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventRelay:didRelayResponseEvent:");
}

id objc_msgSend_eventStreamName(void *a1, const char *a2, ...)
{
  return _[a1 eventStreamName];
}

id objc_msgSend_eventsDict(void *a1, const char *a2, ...)
{
  return _[a1 eventsDict];
}

id objc_msgSend_eventsPayloadWithMessages_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventsPayloadWithMessages:error:");
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:");
}

id objc_msgSend_executeQuery_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:error:");
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequest:error:");
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_expired(void *a1, const char *a2, ...)
{
  return _[a1 expired];
}

id objc_msgSend_exportedInterface(void *a1, const char *a2, ...)
{
  return _[a1 exportedInterface];
}

id objc_msgSend_expressionForFunction_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressionForFunction:arguments:");
}

id objc_msgSend_expressionForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressionForKeyPath:");
}

id objc_msgSend_eyeReliefStateWriter(void *a1, const char *a2, ...)
{
  return _[a1 eyeReliefStateWriter];
}

id objc_msgSend_failMessagesStuckInSentState(void *a1, const char *a2, ...)
{
  return _[a1 failMessagesStuckInSentState];
}

id objc_msgSend_failure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failure:");
}

id objc_msgSend_family(void *a1, const char *a2, ...)
{
  return _[a1 family];
}

id objc_msgSend_familyCirclePrimitives(void *a1, const char *a2, ...)
{
  return _[a1 familyCirclePrimitives];
}

id objc_msgSend_familyError(void *a1, const char *a2, ...)
{
  return _[a1 familyError];
}

id objc_msgSend_familyInformationProvider(void *a1, const char *a2, ...)
{
  return _[a1 familyInformationProvider];
}

id objc_msgSend_familyInformationTransformer(void *a1, const char *a2, ...)
{
  return _[a1 familyInformationTransformer];
}

id objc_msgSend_familyMemberGenesisStateStore(void *a1, const char *a2, ...)
{
  return _[a1 familyMemberGenesisStateStore];
}

id objc_msgSend_familyMemberType(void *a1, const char *a2, ...)
{
  return _[a1 familyMemberType];
}

id objc_msgSend_familyMemberTypeForTargetableFamilyMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyMemberTypeForTargetableFamilyMember:");
}

id objc_msgSend_familyMessaging(void *a1, const char *a2, ...)
{
  return _[a1 familyMessaging];
}

id objc_msgSend_familyOrganizationController(void *a1, const char *a2, ...)
{
  return _[a1 familyOrganizationController];
}

id objc_msgSend_familyProvider(void *a1, const char *a2, ...)
{
  return _[a1 familyProvider];
}

id objc_msgSend_familyProvider_didUpdateTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyProvider:didUpdateTargetableFamilyMembers:");
}

id objc_msgSend_familyProviderDidLeaveFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyProviderDidLeaveFamily:");
}

id objc_msgSend_familyScreenTimeManager(void *a1, const char *a2, ...)
{
  return _[a1 familyScreenTimeManager];
}

id objc_msgSend_familySettings(void *a1, const char *a2, ...)
{
  return _[a1 familySettings];
}

id objc_msgSend_familySettingsManager(void *a1, const char *a2, ...)
{
  return _[a1 familySettingsManager];
}

id objc_msgSend_fetchAppInfoForBundleIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAppInfoForBundleIdentifier:completionHandler:");
}

id objc_msgSend_fetchCurrentCloudKitSyncingStatus(void *a1, const char *a2, ...)
{
  return _[a1 fetchCurrentCloudKitSyncingStatus];
}

id objc_msgSend_fetchDeviceWithIdentifier_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceWithIdentifier:inContext:error:");
}

id objc_msgSend_fetchDisplayNameForUsageLimitWithCategoryIdentifiers_bundleIdentifiers_webDomains_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDisplayNameForUsageLimitWithCategoryIdentifiers:bundleIdentifiers:webDomains:completionHandler:");
}

id objc_msgSend_fetchFamilyMembersForcingCacheRefresh_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFamilyMembersForcingCacheRefresh:completionHandler:");
}

id objc_msgSend_fetchHistoryAfterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHistoryAfterDate:");
}

id objc_msgSend_fetchHistoryAfterToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHistoryAfterToken:");
}

id objc_msgSend_fetchItemWithMessageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchItemWithMessageIdentifier:");
}

id objc_msgSend_fetchLocalUserDeviceStateInContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocalUserDeviceStateInContext:error:");
}

id objc_msgSend_fetchLocalUserInContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocalUserInContext:error:");
}

id objc_msgSend_fetchMirroringMonitorStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMirroringMonitorStatusWithCompletionHandler:");
}

id objc_msgSend_fetchNumberOfContactsForUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNumberOfContactsForUserID:");
}

id objc_msgSend_fetchOrCreateFamilyOrganizationWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOrCreateFamilyOrganizationWithContext:error:");
}

id objc_msgSend_fetchOrCreateLocalOrganizationWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOrCreateLocalOrganizationWithContext:error:");
}

id objc_msgSend_fetchOrCreateLocalUserDeviceStateInContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOrCreateLocalUserDeviceStateInContext:error:");
}

id objc_msgSend_fetchOrCreateWithDictionaryRepresentation_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOrCreateWithDictionaryRepresentation:inContext:error:");
}

id objc_msgSend_fetchOrCreateiCloudOrganizationWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOrCreateiCloudOrganizationWithContext:error:");
}

id objc_msgSend_fetchReportsDuringInterval_partitionInterval_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchReportsDuringInterval:partitionInterval:completionHandler:");
}

id objc_msgSend_fetchRequest(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequest];
}

id objc_msgSend_fetchRequestForDevicesMissingUsage(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestForDevicesMissingUsage];
}

id objc_msgSend_fetchRequestForFamilyMembers(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestForFamilyMembers];
}

id objc_msgSend_fetchRequestForLocalUsageRequests(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestForLocalUsageRequests];
}

id objc_msgSend_fetchRequestForNonLocalDevices(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestForNonLocalDevices];
}

id objc_msgSend_fetchRequestForUsageRequestsThatAreForRemoteUsers(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestForUsageRequestsThatAreForRemoteUsers];
}

id objc_msgSend_fetchRequestMatchingBlueprintsForUserWithDSID_fromOrganization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestMatchingBlueprintsForUserWithDSID:fromOrganization:");
}

id objc_msgSend_fetchRequestMatchingBlueprintsForUserWithDSID_ofType_fromOrganization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestMatchingBlueprintsForUserWithDSID:ofType:fromOrganization:");
}

id objc_msgSend_fetchRequestMatchingExpiredBlueprints(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestMatchingExpiredBlueprints];
}

id objc_msgSend_fetchRequestMatchingLocalUser(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestMatchingLocalUser];
}

id objc_msgSend_fetchRequestMatchingLocalUserDeviceState(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestMatchingLocalUserDeviceState];
}

id objc_msgSend_fetchRequestMatchingOrphanedBlueprints(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestMatchingOrphanedBlueprints];
}

id objc_msgSend_fetchRequestMatchingUnexpiredOneMoreMinuteBlueprints(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequestMatchingUnexpiredOneMoreMinuteBlueprints];
}

id objc_msgSend_fetchScreenTimeSettingsInContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchScreenTimeSettingsInContext:error:");
}

id objc_msgSend_fetchTargetableFamilyMembersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTargetableFamilyMembersWithError:");
}

id objc_msgSend_fetchUsageOperation(void *a1, const char *a2, ...)
{
  return _[a1 fetchUsageOperation];
}

id objc_msgSend_fetchUsageOperationByAltURI(void *a1, const char *a2, ...)
{
  return _[a1 fetchUsageOperationByAltURI];
}

id objc_msgSend_fetchUsageOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 fetchUsageOperationQueue];
}

id objc_msgSend_fetchUserWithAppleID_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserWithAppleID:inContext:error:");
}

id objc_msgSend_fetchUserWithDSID_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserWithDSID:inContext:error:");
}

id objc_msgSend_fetchedObjects(void *a1, const char *a2, ...)
{
  return _[a1 fetchedObjects];
}

id objc_msgSend_fetchedUsageResults(void *a1, const char *a2, ...)
{
  return _[a1 fetchedUsageResults];
}

id objc_msgSend_fileBackedKeyValueStore(void *a1, const char *a2, ...)
{
  return _[a1 fileBackedKeyValueStore];
}

id objc_msgSend_fileExtension(void *a1, const char *a2, ...)
{
  return _[a1 fileExtension];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileSizeOfDataAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSizeOfDataAtURL:error:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_filesystemPrimitives(void *a1, const char *a2, ...)
{
  return _[a1 filesystemPrimitives];
}

id objc_msgSend_filterUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterUsingPredicate:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredSetUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredSetUsingPredicate:");
}

id objc_msgSend_finishDecoding(void *a1, const char *a2, ...)
{
  return _[a1 finishDecoding];
}

id objc_msgSend_firstName(void *a1, const char *a2, ...)
{
  return _[a1 firstName];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstPickup(void *a1, const char *a2, ...)
{
  return _[a1 firstPickup];
}

id objc_msgSend_firstWeekday(void *a1, const char *a2, ...)
{
  return _[a1 firstWeekday];
}

id objc_msgSend_flatMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flatMap:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_forUserDSID(void *a1, const char *a2, ...)
{
  return _[a1 forUserDSID];
}

id objc_msgSend_forceMirroringSync(void *a1, const char *a2, ...)
{
  return _[a1 forceMirroringSync];
}

id objc_msgSend_forceRemoteDeviceSync(void *a1, const char *a2, ...)
{
  return _[a1 forceRemoteDeviceSync];
}

id objc_msgSend_fromServerStorage(void *a1, const char *a2, ...)
{
  return _[a1 fromServerStorage];
}

id objc_msgSend_genesisDate(void *a1, const char *a2, ...)
{
  return _[a1 genesisDate];
}

id objc_msgSend_genesisState(void *a1, const char *a2, ...)
{
  return _[a1 genesisState];
}

id objc_msgSend_genesisStateItemsByUserDSID(void *a1, const char *a2, ...)
{
  return _[a1 genesisStateItemsByUserDSID];
}

id objc_msgSend_genesisStateStore(void *a1, const char *a2, ...)
{
  return _[a1 genesisStateStore];
}

id objc_msgSend_getDeliveredNotificationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeliveredNotificationsWithCompletionHandler:");
}

id objc_msgSend_getIsExplicitContentRestrictedAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIsExplicitContentRestrictedAndReturnError:");
}

id objc_msgSend_getIsRestrictionsPasscodeSetAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIsRestrictionsPasscodeSetAndReturnError:");
}

id objc_msgSend_getIsWebContentRestrictedAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIsWebContentRestrictedAndReturnError:");
}

id objc_msgSend_getNeedsToSetRestrictionsPasscodeAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNeedsToSetRestrictionsPasscodeAndReturnError:");
}

id objc_msgSend_getPrimaryiCloudCardDAVAccountIdentifierWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPrimaryiCloudCardDAVAccountIdentifierWithError:");
}

id objc_msgSend_getProgressUpdateForIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getProgressUpdateForIdentifier:error:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_givenChildNamesByDSID(void *a1, const char *a2, ...)
{
  return _[a1 givenChildNamesByDSID];
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return _[a1 givenName];
}

id objc_msgSend_handleAnswer_forRequestWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAnswer:forRequestWithIdentifier:");
}

id objc_msgSend_handleAskForTimeRequestPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAskForTimeRequestPayload:");
}

id objc_msgSend_handleAskForTimeResponsePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAskForTimeResponsePayload:");
}

id objc_msgSend_handleConfigurationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConfigurationChange:");
}

id objc_msgSend_handleDeviceStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDeviceStateChange:");
}

id objc_msgSend_handleDeviceStateChange_deviceInformationPrimitives_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDeviceStateChange:deviceInformationPrimitives:container:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFamilySettings_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFamilySettings:inContext:");
}

id objc_msgSend_handleFamilySettingsPayload_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFamilySettingsPayload:withCompletion:");
}

id objc_msgSend_handleManagedObjectContextDidMergeChangesNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleManagedObjectContextDidMergeChangesNotification:");
}

id objc_msgSend_handleOnDemandDowntimeToggleForUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOnDemandDowntimeToggleForUserID:");
}

id objc_msgSend_handleOnDemandDowntimeToggleForUserID_persistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOnDemandDowntimeToggleForUserID:persistentContainer:");
}

id objc_msgSend_handleSetupConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSetupConfiguration:");
}

id objc_msgSend_handleSetupConfiguration_persistentContainter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSetupConfiguration:persistentContainter:");
}

id objc_msgSend_handleV2AskForTimeResponsePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleV2AskForTimeResponsePayload:");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _[a1 handler];
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasChanges];
}

id objc_msgSend_hasMigratorRun(void *a1, const char *a2, ...)
{
  return _[a1 hasMigratorRun];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasStoreLoaded(void *a1, const char *a2, ...)
{
  return _[a1 hasStoreLoaded];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_historyAnalyzerTimer(void *a1, const char *a2, ...)
{
  return _[a1 historyAnalyzerTimer];
}

id objc_msgSend_historyTokenForStore(void *a1, const char *a2, ...)
{
  return _[a1 historyTokenForStore];
}

id objc_msgSend_hourAge(void *a1, const char *a2, ...)
{
  return _[a1 hourAge];
}

id objc_msgSend_hourlyUsageRollupActivity(void *a1, const char *a2, ...)
{
  return _[a1 hourlyUsageRollupActivity];
}

id objc_msgSend_iTunesMetadata(void *a1, const char *a2, ...)
{
  return _[a1 iTunesMetadata];
}

id objc_msgSend_iconData(void *a1, const char *a2, ...)
{
  return _[a1 iconData];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_idsMessageTransport(void *a1, const char *a2, ...)
{
  return _[a1 idsMessageTransport];
}

id objc_msgSend_idsTransport(void *a1, const char *a2, ...)
{
  return _[a1 idsTransport];
}

id objc_msgSend_idsTransportMessageAddressMap(void *a1, const char *a2, ...)
{
  return _[a1 idsTransportMessageAddressMap];
}

id objc_msgSend_idsTransportMessageIdentifierMap(void *a1, const char *a2, ...)
{
  return _[a1 idsTransportMessageIdentifierMap];
}

id objc_msgSend_idsTransportPrimitives(void *a1, const char *a2, ...)
{
  return _[a1 idsTransportPrimitives];
}

id objc_msgSend_imageGenerationRestriction(void *a1, const char *a2, ...)
{
  return _[a1 imageGenerationRestriction];
}

id objc_msgSend_inReplyTo(void *a1, const char *a2, ...)
{
  return _[a1 inReplyTo];
}

id objc_msgSend_includeAggregateUsage(void *a1, const char *a2, ...)
{
  return _[a1 includeAggregateUsage];
}

id objc_msgSend_includeRemoteUsage(void *a1, const char *a2, ...)
{
  return _[a1 includeRemoteUsage];
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 incomingResponseIdentifier];
}

id objc_msgSend_incrementNodeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementNodeWithIdentifier:");
}

id objc_msgSend_initForLocalDeviceWithPersistenceController_selectedUsageReportType_usageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForLocalDeviceWithPersistenceController:selectedUsageReportType:usageContext:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initForStoreWithURL_usingModelAtURL_options_policy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForStoreWithURL:usingModelAtURL:options:policy:");
}

id objc_msgSend_initPendingOnQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initPendingOnQueue:");
}

id objc_msgSend_initWithAddress_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:type:");
}

id objc_msgSend_initWithAskForTimeRequestIdentifier_childName_childDSID_requestedResourceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAskForTimeRequestIdentifier:childName:childDSID:requestedResourceName:");
}

id objc_msgSend_initWithAskForTimeRequestIdentifier_familyMember_requestedResourceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAskForTimeRequestIdentifier:familyMember:requestedResourceName:");
}

id objc_msgSend_initWithAskForTimeRequestIdentifier_parentName_requestedResourceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAskForTimeRequestIdentifier:parentName:requestedResourceName:");
}

id objc_msgSend_initWithAskForTimeRequestIdentifier_parentName_requestedResourceName_amountGranted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAskForTimeRequestIdentifier:parentName:requestedResourceName:amountGranted:");
}

id objc_msgSend_initWithAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAuditToken:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleIdentifier_displayName_iconData_distributorID_distributorIsThirdParty_adamID_versionIdentifier_betaVersionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:displayName:iconData:distributorID:distributorIsThirdParty:adamID:versionIdentifier:betaVersionIdentifier:");
}

id objc_msgSend_initWithBundleIdentifier_uniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:uniqueIdentifier:");
}

id objc_msgSend_initWithCapabilities_persistenceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapabilities:persistenceController:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChangeIdentifier_primaryType_secondaryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChangeIdentifier:primaryType:secondaryType:");
}

id objc_msgSend_initWithChildName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChildName:");
}

id objc_msgSend_initWithCommunicationSafetyEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommunicationSafetyEnabled:");
}

id objc_msgSend_initWithCommunicationSafetySendingRestricted_communicationSafetyReceivingRestricted_communicationSafetyNotificationEnabled_communicationSafetyAnalyticsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommunicationSafetySendingRestricted:communicationSafetyReceivingRestricted:communicationSafetyNotificationEnabled:communicationSafetyAnalyticsEnabled:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithConfigurationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfigurationChange:");
}

id objc_msgSend_initWithContainerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContext_resultsRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:resultsRequests:");
}

id objc_msgSend_initWithDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDSID:");
}

id objc_msgSend_initWithDSID_altDSID_appleID_firstName_lastName_memberType_isMe_isParent_isOrganizer_opaqueMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDSID:altDSID:appleID:firstName:lastName:memberType:isMe:isParent:isOrganizer:opaqueMember:");
}

id objc_msgSend_initWithDSID_altDSID_firstName_memberType_isSignedInMember_isParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDSID:altDSID:firstName:memberType:isSignedInMember:isParent:");
}

id objc_msgSend_initWithDataRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataRepresentation:");
}

id objc_msgSend_initWithDateInterval_partitionDurationInMinutes_localUsageReports_usageReportsByCoreDuetIdentifier_aggregateUsageReports_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateInterval:partitionDurationInMinutes:localUsageReports:usageReportsByCoreDuetIdentifier:aggregateUsageReports:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDescription:");
}

id objc_msgSend_initWithDestinations_toLocal_organizationIdentifier_persistenceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDestinations:toLocal:organizationIdentifier:persistenceController:");
}

id objc_msgSend_initWithDeviceID_deviceName_devicePlatform_installedApps_removedApps_associatedUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceID:deviceName:devicePlatform:installedApps:removedApps:associatedUser:");
}

id objc_msgSend_initWithDeviceStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceStateChange:");
}

id objc_msgSend_initWithDirectory_fileExtension_filesystemPrimitives_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:fileExtension:filesystemPrimitives:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEnforcesChildRestrictions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnforcesChildRestrictions:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithExtensionBundleIdentifier_kind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExtensionBundleIdentifier:kind:");
}

id objc_msgSend_initWithFamilyCircle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFamilyCircle:");
}

id objc_msgSend_initWithFamilyCirclePrimitives_deviceInformationPrimitives_contactStorePrimitives_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFamilyCirclePrimitives:deviceInformationPrimitives:contactStorePrimitives:");
}

id objc_msgSend_initWithFamilyCirclePrimitives_deviceInformationPrimitives_idsTransportPrimitives_filesystemPrimitives_contactStorePrimitives_xpcServiceProvider_primitiveOSTransactionProvider_primitiveBackgroundActivitySchedulerProvider_coreDataObserver_coreDataConfigurationTransformer_coreDataDeviceStateTransformer_coreDataFamilyInformationTransformer_askForTimeEventRelay_askForTimeResponseHandler_biomeEventWriter_eyeReliefStateWriter_userSafetyPolicyWriter_messageAddressMapDirectoryURL_messageIdentifierMapDirectoryURL_messageLedgerDirectoryURL_genesisStateStoreDirectoryURL_reactorQueue_transportQueue_shutdownWillBegin_shutdownDidComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFamilyCirclePrimitives:deviceInformationPrimitives:idsTransportPrimitives:filesystemPrimitives:contactStorePrimitives:xpcServiceProvider:primitiveOSTransactionProvider:primitiveBackgroundActivitySchedulerProvider:coreDataObserver:coreDataConfigurationTransformer:coreDataDeviceStateTransformer:coreDataFamilyInformationTransformer:askForTimeEventRelay:askForTimeResponseHandler:biomeEventWriter:eyeReliefStateWriter:userSafetyPolicyWriter:messageAddressMapDirectoryURL:messageIdentifierMapDirectoryURL:messageLedgerDirectoryURL:genesisStateStoreDirectoryURL:reactorQueue:transportQueue:shutdownWillBegin:shutdownDidComplete:");
}

id objc_msgSend_initWithFamilySettingsManager_requestManager_persistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFamilySettingsManager:requestManager:persistentContainer:");
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchRequest:");
}

id objc_msgSend_initWithFetchRequest_managedObjectContext_sectionNameKeyPath_cacheName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:");
}

id objc_msgSend_initWithGenesisDate_lastStartDate_referenceDate_includeAggregateUsage_includeRemoteUsage_forceRemoteDeviceSync_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGenesisDate:lastStartDate:referenceDate:includeAggregateUsage:includeRemoteUsage:forceRemoteDeviceSync:duration:");
}

id objc_msgSend_initWithID_name_platform_apps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:name:platform:apps:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_content_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:content:");
}

id objc_msgSend_initWithIdentifier_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:dispatcher:");
}

id objc_msgSend_initWithIdentifier_downtimeConfigurationState_downtimeDate_userID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:downtimeConfigurationState:downtimeDate:userID:");
}

id objc_msgSend_initWithIdentifier_resourceType_timestamp_requesterUserID_requestedResourceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:resourceType:timestamp:requesterUserID:requestedResourceIdentifier:");
}

id objc_msgSend_initWithIdentifier_resourceType_timestamp_requesterUserID_responderUserID_requestedResourceIdentifier_approvedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:resourceType:timestamp:requesterUserID:responderUserID:requestedResourceIdentifier:approvedTime:");
}

id objc_msgSend_initWithIdentifier_usageTrusted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:usageTrusted:");
}

id objc_msgSend_initWithInstanceExists_instanceRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInstanceExists:instanceRunning:");
}

id objc_msgSend_initWithInstanceExists_instanceRunning_cachedAppBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInstanceExists:instanceRunning:cachedAppBundleIdentifiers:");
}

id objc_msgSend_initWithKeyValueStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyValueStore:");
}

id objc_msgSend_initWithKeyValueStore_cacheSize_valueClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyValueStore:cacheSize:valueClass:");
}

id objc_msgSend_initWithKeysToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeysToFetch:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithManagedObjectContext_fetchUsageOperation_userDeviceState_referenceDate_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedObjectContext:fetchUsageOperation:userDeviceState:referenceDate:duration:");
}

id objc_msgSend_initWithMessage_addresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessage:addresses:");
}

id objc_msgSend_initWithMessage_returnAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessage:returnAddress:");
}

id objc_msgSend_initWithMessage_statusesByAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessage:statusesByAddress:");
}

id objc_msgSend_initWithMessageContentTypes_messageContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessageContentTypes:messageContents:");
}

id objc_msgSend_initWithMinCoalescenceInterval_maxCoalescenceInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMinCoalescenceInterval:maxCoalescenceInterval:");
}

id objc_msgSend_initWithName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:object:userInfo:");
}

id objc_msgSend_initWithName_sharedContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:sharedContainer:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObserver_transformer_reverseTransformer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObserver:transformer:reverseTransformer:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithOptions_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:completionBlock:");
}

id objc_msgSend_initWithOrganizationControllerConfigurationAdapter_deviceInformationPrimitives_persistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOrganizationControllerConfigurationAdapter:deviceInformationPrimitives:persistentContainer:");
}

id objc_msgSend_initWithOrganizationIdentifier_persistenceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOrganizationIdentifier:persistenceController:");
}

id objc_msgSend_initWithOrganizationIdentifier_transport_localTransport_persistenceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOrganizationIdentifier:transport:localTransport:persistenceController:");
}

id objc_msgSend_initWithOutput_processedDirective_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOutput:processedDirective:");
}

id objc_msgSend_initWithPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPasscode:");
}

id objc_msgSend_initWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:");
}

id objc_msgSend_initWithPayload_destinations_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:destinations:service:");
}

id objc_msgSend_initWithPayload_persistenceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:persistenceController:");
}

id objc_msgSend_initWithPayload_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:type:");
}

id objc_msgSend_initWithPayload_type_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:type:userInfo:");
}

id objc_msgSend_initWithPayload_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:userInfo:");
}

id objc_msgSend_initWithPersistenceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:");
}

id objc_msgSend_initWithPersistenceController_askForTimeManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:askForTimeManager:");
}

id objc_msgSend_initWithPersistenceController_fetchedUsageResults_userDSID_deviceIdentifier_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:fetchedUsageResults:userDSID:deviceIdentifier:duration:");
}

id objc_msgSend_initWithPersistenceController_genesisDate_duration_isBackgroundTask_isRecomputingUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:genesisDate:duration:isBackgroundTask:isRecomputingUsage:");
}

id objc_msgSend_initWithPersistenceController_installedApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:installedApps:");
}

id objc_msgSend_initWithPersistenceController_installedApps_backgroundActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:installedApps:backgroundActivity:");
}

id objc_msgSend_initWithPersistenceController_purgeAllUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:purgeAllUsage:");
}

id objc_msgSend_initWithPersistenceController_restrictionPayloadUtility_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:restrictionPayloadUtility:");
}

id objc_msgSend_initWithPersistenceController_usageReporter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceController:usageReporter:");
}

id objc_msgSend_initWithPersistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentContainer:");
}

id objc_msgSend_initWithPredicate_primaryType_secondaryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredicate:primaryType:secondaryType:");
}

id objc_msgSend_initWithPrimitives_messageAddressMap_messageIdentifierMap_addressValidator_userAliasResolver_returnAddressProvider_transportQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrimitives:messageAddressMap:messageIdentifierMap:addressValidator:userAliasResolver:returnAddressProvider:transportQueue:");
}

id objc_msgSend_initWithPrimitives_userAliasResolver_keyValueStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrimitives:userAliasResolver:keyValueStore:");
}

id objc_msgSend_initWithQueue_transportEnvoy_transportEnvoyQueue_configurationStore_deviceStateStore_biomeEventWriter_backgroundActivityScheduler_familyProvider_eyeReliefStateWriter_userSafetyPolicyWriter_transportPrimitives_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:transportEnvoy:transportEnvoyQueue:configurationStore:deviceStateStore:biomeEventWriter:backgroundActivityScheduler:familyProvider:eyeReliefStateWriter:userSafetyPolicyWriter:transportPrimitives:");
}

id objc_msgSend_initWithReachableDestinations_unreachableDestinations_unknownReachabilityDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReachableDestinations:unreachableDestinations:unknownReachabilityDestinations:");
}

id objc_msgSend_initWithRecoveryEmailMismatched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecoveryEmailMismatched:");
}

id objc_msgSend_initWithRelevantStores_hourAge_historyTokenForStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRelevantStores:hourAge:historyTokenForStore:");
}

id objc_msgSend_initWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:");
}

id objc_msgSend_initWithRequest_UUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:UUID:");
}

id objc_msgSend_initWithRequestID_kind_status_eventTime_approvalTime_requesterDSID_responderDSID_websitePath_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestID:kind:status:eventTime:approvalTime:requesterDSID:responderDSID:websitePath:bundleID:");
}

id objc_msgSend_initWithResolution_onQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResolution:onQueue:");
}

id objc_msgSend_initWithScreenTimeManagementStateTransitionsByDSID_appAndWebsiteActivityStateTransitionsByDSID_contactManagementStateTransitionsByDSID_givenChildNamesByDSID_updatedSettingsByUserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScreenTimeManagementStateTransitionsByDSID:appAndWebsiteActivityStateTransitionsByDSID:contactManagementStateTransitionsByDSID:givenChildNamesByDSID:updatedSettingsByUserDSID:");
}

id objc_msgSend_initWithScreenTimeStateManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScreenTimeStateManager:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithService_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:delegate:queue:");
}

id objc_msgSend_initWithServiceDescription_listenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceDescription:listenerEndpoint:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithServiceName_viewControllerClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:viewControllerClassName:");
}

id objc_msgSend_initWithSharedContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSharedContainer:");
}

id objc_msgSend_initWithStartDate_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:duration:");
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:");
}

id objc_msgSend_initWithStartDate_partitionTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:partitionTimeInterval:");
}

id objc_msgSend_initWithStarting_eventID_signalDate_userDSID_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStarting:eventID:signalDate:userDSID:state:");
}

id objc_msgSend_initWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatus:");
}

id objc_msgSend_initWithStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStream:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithSupportedInfrastructure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSupportedInfrastructure:");
}

id objc_msgSend_initWithTargetUser_targetDevices_configuration_configurationType_author_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetUser:targetDevices:configuration:configurationType:author:");
}

id objc_msgSend_initWithTransport_localTransport_persistenceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransport:localTransport:persistenceController:");
}

id objc_msgSend_initWithTransport_returnAddressProvider_messageLedger_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransport:returnAddressProvider:messageLedger:queue:");
}

id objc_msgSend_initWithTransportService_messageLedger_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransportService:messageLedger:queue:");
}

id objc_msgSend_initWithType_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:data:");
}

id objc_msgSend_initWithType_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:interval:");
}

id objc_msgSend_initWithType_interval_willBegin_didEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:interval:willBegin:didEnd:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUser:");
}

id objc_msgSend_initWithUser_screenTimeState_passcode_contactManagementState_userHasContacts_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUser:screenTimeState:passcode:contactManagementState:userHasContacts:error:");
}

id objc_msgSend_initWithUserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserDSID:");
}

id objc_msgSend_initWithUserDSID_deviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserDSID:deviceIdentifier:");
}

id objc_msgSend_initWithUserDSID_deviceIdentifier_addressType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserDSID:deviceIdentifier:addressType:");
}

id objc_msgSend_initWithUserID_deviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserID:deviceID:");
}

id objc_msgSend_initWithUserID_genesisState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserID:genesisState:");
}

id objc_msgSend_initWithWebContentFilterEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWebContentFilterEnabled:");
}

id objc_msgSend_insertMessageIdentifier_forPrimitiveMessageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertMessageIdentifier:forPrimitiveMessageIdentifier:");
}

id objc_msgSend_insertPrimitiveDestination_forMessageAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertPrimitiveDestination:forMessageAddress:");
}

id objc_msgSend_installEventHandlers(void *a1, const char *a2, ...)
{
  return _[a1 installEventHandlers];
}

id objc_msgSend_installFromRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installFromRequest:");
}

id objc_msgSend_installedApps(void *a1, const char *a2, ...)
{
  return _[a1 installedApps];
}

id objc_msgSend_installedAppsFetchedResultsController(void *a1, const char *a2, ...)
{
  return _[a1 installedAppsFetchedResultsController];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalClassForSerializableClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalClassForSerializableClassName:");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_intersectWithDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectWithDestinations:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _[a1 interval];
}

id objc_msgSend_intervalUntilNextRetryAttempt(void *a1, const char *a2, ...)
{
  return _[a1 intervalUntilNextRetryAttempt];
}

id objc_msgSend_interventionType(void *a1, const char *a2, ...)
{
  return _[a1 interventionType];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateBackgroundActivityOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateBackgroundActivityOfType:");
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _[a1 invertedSet];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAppAndWebsiteActivityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAppAndWebsiteActivityEnabled];
}

id objc_msgSend_isBackgroundTask(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundTask];
}

id objc_msgSend_isCanceled(void *a1, const char *a2, ...)
{
  return _[a1 isCanceled];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCapabilityEnabledForDestination_capability_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCapabilityEnabledForDestination:capability:completionHandler:");
}

id objc_msgSend_isCloudKitSyncingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCloudKitSyncingEnabled];
}

id objc_msgSend_isCommunicationSafetyAnalyticsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCommunicationSafetyAnalyticsEnabled];
}

id objc_msgSend_isCommunicationSafetyEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCommunicationSafetyEnabled];
}

id objc_msgSend_isCommunicationSafetyNotificationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCommunicationSafetyNotificationEnabled];
}

id objc_msgSend_isCommunicationSafetyReceivingRestricted(void *a1, const char *a2, ...)
{
  return _[a1 isCommunicationSafetyReceivingRestricted];
}

id objc_msgSend_isCommunicationSafetySendingRestricted(void *a1, const char *a2, ...)
{
  return _[a1 isCommunicationSafetySendingRestricted];
}

id objc_msgSend_isContentPrivacyEnabledForDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContentPrivacyEnabledForDSID:completionHandler:");
}

id objc_msgSend_isDate_inSameDayAsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDate:inSameDayAsDate:");
}

id objc_msgSend_isDirty(void *a1, const char *a2, ...)
{
  return _[a1 isDirty];
}

id objc_msgSend_isDistanceSamplingEnabledWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDistanceSamplingEnabledWithError:");
}

id objc_msgSend_isDowntimeEnabledForUserID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDowntimeEnabledForUserID:completionHandler:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToAppInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToAppInformation:");
}

id objc_msgSend_isEqualToAppTombstone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToAppTombstone:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToAskForTimeRequestEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToAskForTimeRequestEvent:");
}

id objc_msgSend_isEqualToCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToCapabilities:");
}

id objc_msgSend_isEqualToCheckinContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToCheckinContent:");
}

id objc_msgSend_isEqualToCompoundContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToCompoundContent:");
}

id objc_msgSend_isEqualToConfigurationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToConfigurationChange:");
}

id objc_msgSend_isEqualToCoreDataChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToCoreDataChange:");
}

id objc_msgSend_isEqualToCoreDataObservationFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToCoreDataObservationFilter:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDevice:");
}

id objc_msgSend_isEqualToDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDeviceID:");
}

id objc_msgSend_isEqualToDeviceStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDeviceStateChange:");
}

id objc_msgSend_isEqualToDeviceStateChangeContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDeviceStateChangeContent:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToDirectiveData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDirectiveData:");
}

id objc_msgSend_isEqualToDowntimeStateEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDowntimeStateEvent:");
}

id objc_msgSend_isEqualToFamilyMemberGenesisStateItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToFamilyMemberGenesisStateItem:");
}

id objc_msgSend_isEqualToMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToMap:");
}

id objc_msgSend_isEqualToMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToMember:");
}

id objc_msgSend_isEqualToMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToMessage:");
}

id objc_msgSend_isEqualToMessageAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToMessageAddress:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToOrganizationControllerConfigurationChangeContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToOrganizationControllerConfigurationChangeContent:");
}

id objc_msgSend_isEqualToReactorDirective_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToReactorDirective:");
}

id objc_msgSend_isEqualToReactorDirectiveProcessorResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToReactorDirectiveProcessorResult:");
}

id objc_msgSend_isEqualToResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToResult:");
}

id objc_msgSend_isEqualToServiceDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToServiceDescription:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToStatus:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEqualToTargetableFamilyMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToTargetableFamilyMember:");
}

id objc_msgSend_isEqualToTransportEnvoyMessageEnvelope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToTransportEnvoyMessageEnvelope:");
}

id objc_msgSend_isEqualToTransportMessageLedgerItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToTransportMessageLedgerItem:");
}

id objc_msgSend_isEqualToUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToUserID:");
}

id objc_msgSend_isExplicitContentRestrictedWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExplicitContentRestrictedWithCompletionHandler:");
}

id objc_msgSend_isEyeReliefEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEyeReliefEnabled];
}

id objc_msgSend_isImageGenerationAllowedForUserDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isImageGenerationAllowedForUserDSID:completionHandler:");
}

id objc_msgSend_isInvalid(void *a1, const char *a2, ...)
{
  return _[a1 isInvalid];
}

id objc_msgSend_isLaunchProhibited(void *a1, const char *a2, ...)
{
  return _[a1 isLaunchProhibited];
}

id objc_msgSend_isLegacyUsageDisabledWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLegacyUsageDisabledWithContext:error:");
}

id objc_msgSend_isLocallyPaired(void *a1, const char *a2, ...)
{
  return _[a1 isLocallyPaired];
}

id objc_msgSend_isLocationSharingModificationAllowedForDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocationSharingModificationAllowedForDSID:completionHandler:");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _[a1 isMainThread];
}

id objc_msgSend_isManaged(void *a1, const char *a2, ...)
{
  return _[a1 isManaged];
}

id objc_msgSend_isMe(void *a1, const char *a2, ...)
{
  return _[a1 isMe];
}

id objc_msgSend_isMigrationNeeded(void *a1, const char *a2, ...)
{
  return _[a1 isMigrationNeeded];
}

id objc_msgSend_isOnline(void *a1, const char *a2, ...)
{
  return _[a1 isOnline];
}

id objc_msgSend_isOrganizer(void *a1, const char *a2, ...)
{
  return _[a1 isOrganizer];
}

id objc_msgSend_isParent(void *a1, const char *a2, ...)
{
  return _[a1 isParent];
}

id objc_msgSend_isProfileValidated(void *a1, const char *a2, ...)
{
  return _[a1 isProfileValidated];
}

id objc_msgSend_isReady(void *a1, const char *a2, ...)
{
  return _[a1 isReady];
}

id objc_msgSend_isRecomputingUsage(void *a1, const char *a2, ...)
{
  return _[a1 isRecomputingUsage];
}

id objc_msgSend_isResolved(void *a1, const char *a2, ...)
{
  return _[a1 isResolved];
}

id objc_msgSend_isRestricted(void *a1, const char *a2, ...)
{
  return _[a1 isRestricted];
}

id objc_msgSend_isRestrictionsPasscodeSetWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestrictionsPasscodeSetWithCompletionHandler:");
}

id objc_msgSend_isResumed(void *a1, const char *a2, ...)
{
  return _[a1 isResumed];
}

id objc_msgSend_isScreenTimeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isScreenTimeEnabled];
}

id objc_msgSend_isScreenTimeSyncingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isScreenTimeSyncingEnabled];
}

id objc_msgSend_isSignedInMember(void *a1, const char *a2, ...)
{
  return _[a1 isSignedInMember];
}

id objc_msgSend_isTombstoned(void *a1, const char *a2, ...)
{
  return _[a1 isTombstoned];
}

id objc_msgSend_isWebContentRestrictedWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWebContentRestrictedWithCompletionHandler:");
}

id objc_msgSend_itemIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 itemIdentifiers];
}

id objc_msgSend_itemWithUpdatedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithUpdatedState:");
}

id objc_msgSend_itemWithUpdatedStatusForAddresses_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithUpdatedStatusForAddresses:usingBlock:");
}

id objc_msgSend_itemWithUpdatedStatusUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithUpdatedStatusUsingBlock:");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyValueCache(void *a1, const char *a2, ...)
{
  return _[a1 keyValueCache];
}

id objc_msgSend_keyValueStore(void *a1, const char *a2, ...)
{
  return _[a1 keyValueStore];
}

id objc_msgSend_keychainUnlockEventObserver(void *a1, const char *a2, ...)
{
  return _[a1 keychainUnlockEventObserver];
}

id objc_msgSend_lastCommunicationLimitsModifcationDateForDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastCommunicationLimitsModifcationDateForDSID:completionHandler:");
}

id objc_msgSend_lastEventDate(void *a1, const char *a2, ...)
{
  return _[a1 lastEventDate];
}

id objc_msgSend_lastModifcationDateForDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastModifcationDateForDSID:completionHandler:");
}

id objc_msgSend_lastName(void *a1, const char *a2, ...)
{
  return _[a1 lastName];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastStartDate(void *a1, const char *a2, ...)
{
  return _[a1 lastStartDate];
}

id objc_msgSend_lastToken(void *a1, const char *a2, ...)
{
  return _[a1 lastToken];
}

id objc_msgSend_lastUpdatedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdatedDate];
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_limitConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 limitConfiguration];
}

id objc_msgSend_limitEnabled(void *a1, const char *a2, ...)
{
  return _[a1 limitEnabled];
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _[a1 listener];
}

id objc_msgSend_listenerEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 listenerEndpoint];
}

id objc_msgSend_load_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "load:error:");
}

id objc_msgSend_loadArrayFromDictionary_withKey_classType_nested_isRequired_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArrayFromDictionary:withKey:classType:nested:isRequired:defaultValue:error:");
}

id objc_msgSend_loadArrayFromDictionary_withKey_validator_isRequired_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArrayFromDictionary:withKey:validator:isRequired:defaultValue:error:");
}

id objc_msgSend_loadDateFromDictionary_withKey_isRequired_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadDateFromDictionary:withKey:isRequired:defaultValue:error:");
}

id objc_msgSend_loadDictionaryFromDictionary_withKey_classType_isRequired_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadDictionaryFromDictionary:withKey:classType:isRequired:defaultValue:error:");
}

id objc_msgSend_loadEventFromDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadEventFromDictionary:error:");
}

id objc_msgSend_loadPersistentStoreDescription_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPersistentStoreDescription:completionHandler:");
}

id objc_msgSend_loadRequestFromDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadRequestFromDictionary:error:");
}

id objc_msgSend_loadStatusFromDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadStatusFromDictionary:error:");
}

id objc_msgSend_loadStringFromDictionary_withKey_isRequired_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadStringFromDictionary:withKey:isRequired:defaultValue:error:");
}

id objc_msgSend_loadViewModelWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadViewModelWithCompletionHandler:");
}

id objc_msgSend_localOrganizationIdentifierWithBase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localOrganizationIdentifierWithBase:");
}

id objc_msgSend_localSettings(void *a1, const char *a2, ...)
{
  return _[a1 localSettings];
}

id objc_msgSend_localStore(void *a1, const char *a2, ...)
{
  return _[a1 localStore];
}

id objc_msgSend_localTransport(void *a1, const char *a2, ...)
{
  return _[a1 localTransport];
}

id objc_msgSend_localTransport_didReceivePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localTransport:didReceivePayload:");
}

id objc_msgSend_localUsageReports(void *a1, const char *a2, ...)
{
  return _[a1 localUsageReports];
}

id objc_msgSend_localUser(void *a1, const char *a2, ...)
{
  return _[a1 localUser];
}

id objc_msgSend_localUserDeviceState(void *a1, const char *a2, ...)
{
  return _[a1 localUserDeviceState];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longestSession(void *a1, const char *a2, ...)
{
  return _[a1 longestSession];
}

id objc_msgSend_machDescriptionWithServiceName_serviceEntitlement_exportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "machDescriptionWithServiceName:serviceEntitlement:exportedInterface:");
}

id objc_msgSend_machXpcListenersByServiceName(void *a1, const char *a2, ...)
{
  return _[a1 machXpcListenersByServiceName];
}

id objc_msgSend_madeChanges(void *a1, const char *a2, ...)
{
  return _[a1 madeChanges];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_makeDaemon(void *a1, const char *a2, ...)
{
  return _[a1 makeDaemon];
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_managedObjectClassName(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectClassName];
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectContext];
}

id objc_msgSend_managedObjectModelURL(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectModelURL];
}

id objc_msgSend_managementEnabled(void *a1, const char *a2, ...)
{
  return _[a1 managementEnabled];
}

id objc_msgSend_managingOrganization(void *a1, const char *a2, ...)
{
  return _[a1 managingOrganization];
}

id objc_msgSend_managingOrganizationIsFamilyOrganizationForCoreUser_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managingOrganizationIsFamilyOrganizationForCoreUser:inContext:");
}

id objc_msgSend_map_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "map:");
}

id objc_msgSend_mapError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapError:");
}

id objc_msgSend_mapFromUnionOfMaps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapFromUnionOfMaps:");
}

id objc_msgSend_matchingAny_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchingAny:");
}

id objc_msgSend_me(void *a1, const char *a2, ...)
{
  return _[a1 me];
}

id objc_msgSend_memberType(void *a1, const char *a2, ...)
{
  return _[a1 memberType];
}

id objc_msgSend_members(void *a1, const char *a2, ...)
{
  return _[a1 members];
}

id objc_msgSend_merge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "merge:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageAddressMap(void *a1, const char *a2, ...)
{
  return _[a1 messageAddressMap];
}

id objc_msgSend_messageAddressesByPrimitiveDestination(void *a1, const char *a2, ...)
{
  return _[a1 messageAddressesByPrimitiveDestination];
}

id objc_msgSend_messageAddressesForPrimitiveDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageAddressesForPrimitiveDestinations:");
}

id objc_msgSend_messageContentTypes(void *a1, const char *a2, ...)
{
  return _[a1 messageContentTypes];
}

id objc_msgSend_messageContents(void *a1, const char *a2, ...)
{
  return _[a1 messageContents];
}

id objc_msgSend_messageIdentifierForPrimitiveMessageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageIdentifierForPrimitiveMessageIdentifier:");
}

id objc_msgSend_messageIdentifierMap(void *a1, const char *a2, ...)
{
  return _[a1 messageIdentifierMap];
}

id objc_msgSend_messageIdentifiersByPrimitiveIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 messageIdentifiersByPrimitiveIdentifier];
}

id objc_msgSend_messageLedger(void *a1, const char *a2, ...)
{
  return _[a1 messageLedger];
}

id objc_msgSend_messageTrackingTransportEnvoy(void *a1, const char *a2, ...)
{
  return _[a1 messageTrackingTransportEnvoy];
}

id objc_msgSend_messages(void *a1, const char *a2, ...)
{
  return _[a1 messages];
}

id objc_msgSend_migrateContentPrivacyConfigurationsInContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateContentPrivacyConfigurationsInContext:error:");
}

id objc_msgSend_migrateLegacyRestrictionsIfNeededWithMCXSettings_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateLegacyRestrictionsIfNeededWithMCXSettings:completionHandler:");
}

id objc_msgSend_migrateOldDefaultsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 migrateOldDefaultsIfNeeded];
}

id objc_msgSend_migrateSettingsToConfigurations(void *a1, const char *a2, ...)
{
  return _[a1 migrateSettingsToConfigurations];
}

id objc_msgSend_migrateToVersion2CategoriesIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 migrateToVersion2CategoriesIfNeeded];
}

id objc_msgSend_migrateUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 migrateUserDefaults];
}

id objc_msgSend_migrateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateWithError:");
}

id objc_msgSend_minimumRangeOfUnit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumRangeOfUnit:");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return _[a1 minute];
}

id objc_msgSend_mirroring(void *a1, const char *a2, ...)
{
  return _[a1 mirroring];
}

id objc_msgSend_mirroringMonitor(void *a1, const char *a2, ...)
{
  return _[a1 mirroringMonitor];
}

id objc_msgSend_moc(void *a1, const char *a2, ...)
{
  return _[a1 moc];
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return _[a1 modificationDate];
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_msInterventionPolicy(void *a1, const char *a2, ...)
{
  return _[a1 msInterventionPolicy];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_needsToSetPasscode(void *a1, const char *a2, ...)
{
  return _[a1 needsToSetPasscode];
}

id objc_msgSend_needsToSetRestrictionsPasscodeWithReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToSetRestrictionsPasscodeWithReplyHandler:");
}

id objc_msgSend_newBackgroundContext(void *a1, const char *a2, ...)
{
  return _[a1 newBackgroundContext];
}

id objc_msgSend_newContactsServiceInterface(void *a1, const char *a2, ...)
{
  return _[a1 newContactsServiceInterface];
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_newInterface(void *a1, const char *a2, ...)
{
  return _[a1 newInterface];
}

id objc_msgSend_nextDateAfterDate_matchingComponents_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextDateAfterDate:matchingComponents:options:");
}

id objc_msgSend_nextDateAfterDate_matchingHour_minute_second_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextDateAfterDate:matchingHour:minute:second:options:");
}

id objc_msgSend_nextDateAfterDate_matchingUnit_value_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextDateAfterDate:matchingUnit:value:options:");
}

id objc_msgSend_nextStateChangeDate(void *a1, const char *a2, ...)
{
  return _[a1 nextStateChangeDate];
}

id objc_msgSend_nonePolicy(void *a1, const char *a2, ...)
{
  return _[a1 nonePolicy];
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _[a1 notification];
}

id objc_msgSend_notificationBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 notificationBundleIdentifier];
}

id objc_msgSend_notificationCenterByBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 notificationCenterByBundleIdentifier];
}

id objc_msgSend_notificationContentWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationContentWithCompletionBlock:");
}

id objc_msgSend_notificationDelayTimer(void *a1, const char *a2, ...)
{
  return _[a1 notificationDelayTimer];
}

id objc_msgSend_notificationManager(void *a1, const char *a2, ...)
{
  return _[a1 notificationManager];
}

id objc_msgSend_notificationTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 notificationTimeInterval];
}

id objc_msgSend_notificationTimer(void *a1, const char *a2, ...)
{
  return _[a1 notificationTimer];
}

id objc_msgSend_notificationUsageStream(void *a1, const char *a2, ...)
{
  return _[a1 notificationUsageStream];
}

id objc_msgSend_notifyServerOfScreenTimeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyServerOfScreenTimeEnabled:");
}

id objc_msgSend_notifydEventDispatcher(void *a1, const char *a2, ...)
{
  return _[a1 notifydEventDispatcher];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberOfAttempts(void *a1, const char *a2, ...)
{
  return _[a1 numberOfAttempts];
}

id objc_msgSend_numberOfContactsForOpaqueFamilyMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfContactsForOpaqueFamilyMember:");
}

id objc_msgSend_numberOfPartitions(void *a1, const char *a2, ...)
{
  return _[a1 numberOfPartitions];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectID(void *a1, const char *a2, ...)
{
  return _[a1 objectID];
}

id objc_msgSend_objectWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithID:");
}

id objc_msgSend_observeOnQueue_resolve_cancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeOnQueue:resolve:cancel:");
}

id objc_msgSend_observer(void *a1, const char *a2, ...)
{
  return _[a1 observer];
}

id objc_msgSend_observer_didObserveCoreDataChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observer:didObserveCoreDataChanges:");
}

id objc_msgSend_oldToNewKeyNames(void *a1, const char *a2, ...)
{
  return _[a1 oldToNewKeyNames];
}

id objc_msgSend_onQueue_all_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onQueue:all:");
}

id objc_msgSend_onQueue_catch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onQueue:catch:");
}

id objc_msgSend_onQueue_do_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onQueue:do:");
}

id objc_msgSend_onQueue_given_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onQueue:given:");
}

id objc_msgSend_onQueue_then_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onQueue:then:");
}

id objc_msgSend_oneMoreMinute(void *a1, const char *a2, ...)
{
  return _[a1 oneMoreMinute];
}

id objc_msgSend_opaqueMember(void *a1, const char *a2, ...)
{
  return _[a1 opaqueMember];
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _[a1 operationQueue];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_orPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orPredicateWithSubpredicates:");
}

id objc_msgSend_orderedDescription(void *a1, const char *a2, ...)
{
  return _[a1 orderedDescription];
}

id objc_msgSend_organization(void *a1, const char *a2, ...)
{
  return _[a1 organization];
}

id objc_msgSend_organizationControllerConfigurationAdapter(void *a1, const char *a2, ...)
{
  return _[a1 organizationControllerConfigurationAdapter];
}

id objc_msgSend_organizationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 organizationIdentifier];
}

id objc_msgSend_organizationSettingsResultsController(void *a1, const char *a2, ...)
{
  return _[a1 organizationSettingsResultsController];
}

id objc_msgSend_outOfDateWithReturnDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outOfDateWithReturnDestination:");
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResponseIdentifier];
}

id objc_msgSend_output(void *a1, const char *a2, ...)
{
  return _[a1 output];
}

id objc_msgSend_partitionDurationInMinutes(void *a1, const char *a2, ...)
{
  return _[a1 partitionDurationInMinutes];
}

id objc_msgSend_partitionTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 partitionTimeInterval];
}

id objc_msgSend_passcode(void *a1, const char *a2, ...)
{
  return _[a1 passcode];
}

id objc_msgSend_passcodeEntryAttemptCount(void *a1, const char *a2, ...)
{
  return _[a1 passcodeEntryAttemptCount];
}

id objc_msgSend_passcodeEntryTimeoutEndDate(void *a1, const char *a2, ...)
{
  return _[a1 passcodeEntryTimeoutEndDate];
}

id objc_msgSend_passcodeOwner(void *a1, const char *a2, ...)
{
  return _[a1 passcodeOwner];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_payloadAllowExplicitContent(void *a1, const char *a2, ...)
{
  return _[a1 payloadAllowExplicitContent];
}

id objc_msgSend_payloadAllowFindMyFriendsModification(void *a1, const char *a2, ...)
{
  return _[a1 payloadAllowFindMyFriendsModification];
}

id objc_msgSend_payloadApps(void *a1, const char *a2, ...)
{
  return _[a1 payloadApps];
}

id objc_msgSend_payloadCategories(void *a1, const char *a2, ...)
{
  return _[a1 payloadCategories];
}

id objc_msgSend_payloadData(void *a1, const char *a2, ...)
{
  return _[a1 payloadData];
}

id objc_msgSend_payloadDictionary(void *a1, const char *a2, ...)
{
  return _[a1 payloadDictionary];
}

id objc_msgSend_payloadHandler(void *a1, const char *a2, ...)
{
  return _[a1 payloadHandler];
}

id objc_msgSend_payloadHostnames(void *a1, const char *a2, ...)
{
  return _[a1 payloadHostnames];
}

id objc_msgSend_payloadKeys(void *a1, const char *a2, ...)
{
  return _[a1 payloadKeys];
}

id objc_msgSend_payloadManager(void *a1, const char *a2, ...)
{
  return _[a1 payloadManager];
}

id objc_msgSend_payloadManager_didReceivePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadManager:didReceivePayload:");
}

id objc_msgSend_payloadManagerDidInvalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadManagerDidInvalidate:");
}

id objc_msgSend_payloadPlist(void *a1, const char *a2, ...)
{
  return _[a1 payloadPlist];
}

id objc_msgSend_payloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 payloadQueue];
}

id objc_msgSend_payloadRestrictWeb(void *a1, const char *a2, ...)
{
  return _[a1 payloadRestrictWeb];
}

id objc_msgSend_payloadType(void *a1, const char *a2, ...)
{
  return _[a1 payloadType];
}

id objc_msgSend_payloadUseContentFilter(void *a1, const char *a2, ...)
{
  return _[a1 payloadUseContentFilter];
}

id objc_msgSend_payloadWasReceived(void *a1, const char *a2, ...)
{
  return _[a1 payloadWasReceived];
}

id objc_msgSend_pendingAcknowledgementIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 pendingAcknowledgementIdentifiers];
}

id objc_msgSend_pendingPromise(void *a1, const char *a2, ...)
{
  return _[a1 pendingPromise];
}

id objc_msgSend_performBackgroundTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBackgroundTask:");
}

id objc_msgSend_performBackgroundTaskAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBackgroundTaskAndWait:");
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performCloudSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCloudSync:");
}

id objc_msgSend_performFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performFetch:");
}

id objc_msgSend_performMigrationFromMCXSettings_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationFromMCXSettings:completionHandler:");
}

id objc_msgSend_performMigrationWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationWithContext:error:");
}

id objc_msgSend_performRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRequest:completion:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorOnMainThread:withObject:waitUntilDone:");
}

id objc_msgSend_performWeeklyRollupWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWeeklyRollupWithCompletionHandler:");
}

id objc_msgSend_permitWebFilterURL_pageTitle_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "permitWebFilterURL:pageTitle:completionHandler:");
}

id objc_msgSend_permitWebFilterURL_pageTitle_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "permitWebFilterURL:pageTitle:error:");
}

id objc_msgSend_persistBlueprintsFromBlueprintPayload_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistBlueprintsFromBlueprintPayload:withCompletion:");
}

id objc_msgSend_persistBlueprintsPayload_persistenceController_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistBlueprintsPayload:persistenceController:completionHandler:");
}

id objc_msgSend_persistFamilyInformationFromFamilyMembers_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistFamilyInformationFromFamilyMembers:container:");
}

id objc_msgSend_persistUsageOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 persistUsageOperationQueue];
}

id objc_msgSend_persistValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistValue:forKey:");
}

id objc_msgSend_persistence(void *a1, const char *a2, ...)
{
  return _[a1 persistence];
}

id objc_msgSend_persistenceController(void *a1, const char *a2, ...)
{
  return _[a1 persistenceController];
}

id objc_msgSend_persistentContainer(void *a1, const char *a2, ...)
{
  return _[a1 persistentContainer];
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreCoordinator];
}

id objc_msgSend_persistentStoreDescriptionForConfigurationName_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreDescriptionForConfigurationName:type:");
}

id objc_msgSend_persistentStoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreDirectory];
}

id objc_msgSend_persistentStoreForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreForIdentifier:");
}

id objc_msgSend_persistentStoreForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreForURL:");
}

id objc_msgSend_persistentStoreURLForConfigurationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreURLForConfigurationName:");
}

id objc_msgSend_persistentStores(void *a1, const char *a2, ...)
{
  return _[a1 persistentStores];
}

id objc_msgSend_pickupsWithoutApplicationUsage(void *a1, const char *a2, ...)
{
  return _[a1 pickupsWithoutApplicationUsage];
}

id objc_msgSend_platform(void *a1, const char *a2, ...)
{
  return _[a1 platform];
}

id objc_msgSend_policy(void *a1, const char *a2, ...)
{
  return _[a1 policy];
}

id objc_msgSend_postNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotification:");
}

id objc_msgSend_postNotificationForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationForContext:");
}

id objc_msgSend_postNotificationForContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationForContext:completionHandler:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postOrRemoveAppAndWebsiteActivityEnabledNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postOrRemoveAppAndWebsiteActivityEnabledNotification:");
}

id objc_msgSend_predeterminedInstalledAppIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 predeterminedInstalledAppIdentifiers];
}

id objc_msgSend_predicate(void *a1, const char *a2, ...)
{
  return _[a1 predicate];
}

id objc_msgSend_predicateForEventsIntersectingDateRangeFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEventsIntersectingDateRangeFrom:to:");
}

id objc_msgSend_predicateForEventsWithLocalCreationInDateRangeFrom_toBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEventsWithLocalCreationInDateRangeFrom:toBefore:");
}

id objc_msgSend_predicateForEventsWithStreamName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEventsWithStreamName:");
}

id objc_msgSend_predicateForObjectsWithMetadataKey_andStringValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForObjectsWithMetadataKey:andStringValue:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_prepareSettingsPayloadsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareSettingsPayloadsWithCompletion:");
}

id objc_msgSend_presentRemotePINControllerWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentRemotePINControllerWithCompletionHandler:");
}

id objc_msgSend_primaryType(void *a1, const char *a2, ...)
{
  return _[a1 primaryType];
}

id objc_msgSend_primaryiCloudCardDAVAccountIdentifierWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryiCloudCardDAVAccountIdentifierWithCompletionHandler:");
}

id objc_msgSend_primitiveDestinationFromRawAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitiveDestinationFromRawAddress:");
}

id objc_msgSend_primitiveDestinationStatusQueryController(void *a1, const char *a2, ...)
{
  return _[a1 primitiveDestinationStatusQueryController];
}

id objc_msgSend_primitiveDestinationsByMessageAddress(void *a1, const char *a2, ...)
{
  return _[a1 primitiveDestinationsByMessageAddress];
}

id objc_msgSend_primitiveDestinationsForMessageAddresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitiveDestinationsForMessageAddresses:");
}

id objc_msgSend_primitiveIdentifiersByMessageIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 primitiveIdentifiersByMessageIdentifier];
}

id objc_msgSend_primitiveOSTransactionProvider(void *a1, const char *a2, ...)
{
  return _[a1 primitiveOSTransactionProvider];
}

id objc_msgSend_primitives(void *a1, const char *a2, ...)
{
  return _[a1 primitives];
}

id objc_msgSend_primitives_didDeliverMessageWithPrimitiveIdentifier_toPrimitiveDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitives:didDeliverMessageWithPrimitiveIdentifier:toPrimitiveDestination:");
}

id objc_msgSend_primitives_didFetchFamilyMembers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitives:didFetchFamilyMembers:error:");
}

id objc_msgSend_primitives_didObserveUpdatedPrimitiveDestinationReachabilityMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitives:didObserveUpdatedPrimitiveDestinationReachabilityMap:");
}

id objc_msgSend_primitives_didReceiveData_fromPrimitiveDestination_primitiveResponseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitives:didReceiveData:fromPrimitiveDestination:primitiveResponseIdentifier:");
}

id objc_msgSend_primitives_didSendMessageWithPrimitiveIdentifier_success_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitives:didSendMessageWithPrimitiveIdentifier:success:error:");
}

id objc_msgSend_privateAgentServiceDescription(void *a1, const char *a2, ...)
{
  return _[a1 privateAgentServiceDescription];
}

id objc_msgSend_processBlueprintChanges(void *a1, const char *a2, ...)
{
  return _[a1 processBlueprintChanges];
}

id objc_msgSend_processBlueprintChangesInstallOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processBlueprintChangesInstallOnly:");
}

id objc_msgSend_processBlueprintsChangesWithPersistenceController_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processBlueprintsChangesWithPersistenceController:completionHandler:");
}

id objc_msgSend_processDirective_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processDirective:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processedDirective(void *a1, const char *a2, ...)
{
  return _[a1 processedDirective];
}

id objc_msgSend_processingQueue(void *a1, const char *a2, ...)
{
  return _[a1 processingQueue];
}

id objc_msgSend_promise(void *a1, const char *a2, ...)
{
  return _[a1 promise];
}

id objc_msgSend_promptForPasscodeFromUserWithEndpoint_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptForPasscodeFromUserWithEndpoint:completionHandler:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_provideAskService(void *a1, const char *a2, ...)
{
  return _[a1 provideAskService];
}

id objc_msgSend_provideCommunicationService(void *a1, const char *a2, ...)
{
  return _[a1 provideCommunicationService];
}

id objc_msgSend_provideDowntimeService(void *a1, const char *a2, ...)
{
  return _[a1 provideDowntimeService];
}

id objc_msgSend_providePasscodeAuthenticationServiceWithClientListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providePasscodeAuthenticationServiceWithClientListenerEndpoint:");
}

id objc_msgSend_providePasscodePromptServiceWithClientListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providePasscodePromptServiceWithClientListenerEndpoint:");
}

id objc_msgSend_provideReactorToolService(void *a1, const char *a2, ...)
{
  return _[a1 provideReactorToolService];
}

id objc_msgSend_provideSetupService(void *a1, const char *a2, ...)
{
  return _[a1 provideSetupService];
}

id objc_msgSend_providedServicesByServiceName(void *a1, const char *a2, ...)
{
  return _[a1 providedServicesByServiceName];
}

id objc_msgSend_publicAgentServiceDescription(void *a1, const char *a2, ...)
{
  return _[a1 publicAgentServiceDescription];
}

id objc_msgSend_publicToken(void *a1, const char *a2, ...)
{
  return _[a1 publicToken];
}

id objc_msgSend_purge(void *a1, const char *a2, ...)
{
  return _[a1 purge];
}

id objc_msgSend_purgeAllUsage(void *a1, const char *a2, ...)
{
  return _[a1 purgeAllUsage];
}

id objc_msgSend_purgeExpiredMessages(void *a1, const char *a2, ...)
{
  return _[a1 purgeExpiredMessages];
}

id objc_msgSend_purgeKeyValueStores(void *a1, const char *a2, ...)
{
  return _[a1 purgeKeyValueStores];
}

id objc_msgSend_pushToken(void *a1, const char *a2, ...)
{
  return _[a1 pushToken];
}

id objc_msgSend_queryIntervals(void *a1, const char *a2, ...)
{
  return _[a1 queryIntervals];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queuedCompletionHandlers(void *a1, const char *a2, ...)
{
  return _[a1 queuedCompletionHandlers];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rawAddressFromPrimitiveDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawAddressFromPrimitiveDestination:");
}

id objc_msgSend_reachableDestinations(void *a1, const char *a2, ...)
{
  return _[a1 reachableDestinations];
}

id objc_msgSend_reactor(void *a1, const char *a2, ...)
{
  return _[a1 reactor];
}

id objc_msgSend_reactorCore(void *a1, const char *a2, ...)
{
  return _[a1 reactorCore];
}

id objc_msgSend_reactorDirectiveForAskForTimeRequestEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForAskForTimeRequestEvent:");
}

id objc_msgSend_reactorDirectiveForAskForTimeResponseEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForAskForTimeResponseEvent:");
}

id objc_msgSend_reactorDirectiveForBackgroundActivityOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForBackgroundActivityOfType:");
}

id objc_msgSend_reactorDirectiveForBackgroundActivityResult_activityType_downtimeConfigurationsByUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForBackgroundActivityResult:activityType:downtimeConfigurationsByUserID:");
}

id objc_msgSend_reactorDirectiveForConfigurationChange_targetableFamilyMembers_signedInUserHasMultipleDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForConfigurationChange:targetableFamilyMembers:signedInUserHasMultipleDevices:");
}

id objc_msgSend_reactorDirectiveForDeviceStateChange_targetableFamilyMembers_signedInUserHasMultipleDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForDeviceStateChange:targetableFamilyMembers:signedInUserHasMultipleDevices:");
}

id objc_msgSend_reactorDirectiveForInitialSetupWithTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForInitialSetupWithTargetableFamilyMembers:");
}

id objc_msgSend_reactorDirectiveForMessageContentType_messageContent_targetableFamilyMembers_communicationConfigurationByUserID_screenTimeCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForMessageContentType:messageContent:targetableFamilyMembers:communicationConfigurationByUserID:screenTimeCapabilities:");
}

id objc_msgSend_reactorDirectiveForMessageTransportMessage_targetableFamilyMembers_communicationConfigurationByUserID_screenTimeCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForMessageTransportMessage:targetableFamilyMembers:communicationConfigurationByUserID:screenTimeCapabilities:");
}

id objc_msgSend_reactorDirectiveForReconcilingWithTargetableFamilyMembers_familyMemberGenesisStateItems_localDeviceID_signedInUserHasMultipleDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForReconcilingWithTargetableFamilyMembers:familyMemberGenesisStateItems:localDeviceID:signedInUserHasMultipleDevices:");
}

id objc_msgSend_reactorDirectiveForSchedulingNextBackgroundActivityForDowntimeBiomeDonation_configurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForSchedulingNextBackgroundActivityForDowntimeBiomeDonation:configurations:");
}

id objc_msgSend_reactorDirectiveForSendingResponseForResult_downtimeConfigurationsByUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForSendingResponseForResult:downtimeConfigurationsByUserID:");
}

id objc_msgSend_reactorDirectiveForSentMessageResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForSentMessageResult:");
}

id objc_msgSend_reactorDirectiveForSuccessfulConfigurationWriteResult_configurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForSuccessfulConfigurationWriteResult:configurations:");
}

id objc_msgSend_reactorDirectiveForWritingEyeReliefStateChange_targetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForWritingEyeReliefStateChange:targetableFamilyMembers:");
}

id objc_msgSend_reactorDirectiveForWritingUserSafetyPolicyChange_targetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactorDirectiveForWritingUserSafetyPolicyChange:targetableFamilyMembers:");
}

id objc_msgSend_reactorDirectiveProcessor(void *a1, const char *a2, ...)
{
  return _[a1 reactorDirectiveProcessor];
}

id objc_msgSend_reactorQueue(void *a1, const char *a2, ...)
{
  return _[a1 reactorQueue];
}

id objc_msgSend_reactorTool(void *a1, const char *a2, ...)
{
  return _[a1 reactorTool];
}

id objc_msgSend_reactorToolServiceDescription(void *a1, const char *a2, ...)
{
  return _[a1 reactorToolServiceDescription];
}

id objc_msgSend_readCommunicationConfigurationForLocalUser(void *a1, const char *a2, ...)
{
  return _[a1 readCommunicationConfigurationForLocalUser];
}

id objc_msgSend_readCommunicationConfigurationForUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readCommunicationConfigurationForUserID:");
}

id objc_msgSend_readConfigurationChangesOfType_userID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readConfigurationChangesOfType:userID:");
}

id objc_msgSend_readConfigurationRelatedToConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readConfigurationRelatedToConfiguration:");
}

id objc_msgSend_readDataFromFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataFromFileURL:error:");
}

id objc_msgSend_readDeviceStateChangeForLocalDevice(void *a1, const char *a2, ...)
{
  return _[a1 readDeviceStateChangeForLocalDevice];
}

id objc_msgSend_readDowntimeConfigurationForUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDowntimeConfigurationForUserID:");
}

id objc_msgSend_readFamilyMemberGenesisStateItems(void *a1, const char *a2, ...)
{
  return _[a1 readFamilyMemberGenesisStateItems];
}

id objc_msgSend_readSetupConfigurationForUserID_familyProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readSetupConfigurationForUserID:familyProvider:");
}

id objc_msgSend_readValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readValueForKey:");
}

id objc_msgSend_receivedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedNotification:");
}

id objc_msgSend_receivedToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedToken:");
}

id objc_msgSend_reconcileGenesisStateStore(void *a1, const char *a2, ...)
{
  return _[a1 reconcileGenesisStateStore];
}

id objc_msgSend_referenceDate(void *a1, const char *a2, ...)
{
  return _[a1 referenceDate];
}

id objc_msgSend_refreshIDStatusForDestination_service_listenerID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshIDStatusForDestination:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_refreshIDStatusForDestinations_service_listenerID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshIDStatusForDestinations:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_refreshObject_mergeChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshObject:mergeChanges:");
}

id objc_msgSend_refreshedReachabilityOfPrimitiveDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshedReachabilityOfPrimitiveDestination:");
}

id objc_msgSend_registerFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerFamilyMembers:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_registerObserverWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObserverWithIdentifier:");
}

id objc_msgSend_registerWithTopic_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerWithTopic:delegate:");
}

id objc_msgSend_relayRequestEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relayRequestEvent:");
}

id objc_msgSend_relayResponseEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relayResponseEvent:");
}

id objc_msgSend_relevantStores(void *a1, const char *a2, ...)
{
  return _[a1 relevantStores];
}

id objc_msgSend_reloadAccountState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadAccountState:");
}

id objc_msgSend_reloadTimelineWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadTimelineWithReason:");
}

id objc_msgSend_remoteUIPINService(void *a1, const char *a2, ...)
{
  return _[a1 remoteUIPINService];
}

id objc_msgSend_remoteViewService(void *a1, const char *a2, ...)
{
  return _[a1 remoteViewService];
}

id objc_msgSend_remotemanagement_mirroringContainerIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remotemanagement_mirroringContainerIdentifier");
}

id objc_msgSend_remotemanagementdDefaults(void *a1, const char *a2, ...)
{
  return _[a1 remotemanagementdDefaults];
}

id objc_msgSend_removeCloudPersistentStoreWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCloudPersistentStoreWithError:");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeDeliveredNotificationsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeliveredNotificationsWithIdentifiers:");
}

id objc_msgSend_removeFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFileURL:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeItemWithMessageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemWithMessageIdentifier:");
}

id objc_msgSend_removeMessageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMessageIdentifier:");
}

id objc_msgSend_removeNotificationForContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeNotificationForContext:completionHandler:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removePersistentStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePersistentStore:error:");
}

id objc_msgSend_removeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeValueForKey:");
}

id objc_msgSend_removedApps(void *a1, const char *a2, ...)
{
  return _[a1 removedApps];
}

id objc_msgSend_replacePersistentStoreAtURL_destinationOptions_withPersistentStoreFromURL_sourceOptions_storeType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:");
}

id objc_msgSend_reportEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportEvent:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestAuthorizationWithOptions_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAuthorizationWithOptions:completionHandler:");
}

id objc_msgSend_requestConfigurationWithReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestConfigurationWithReplyHandler:");
}

id objc_msgSend_requestForPayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestForPayload:error:");
}

id objc_msgSend_requestIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 requestIdentifier];
}

id objc_msgSend_requestInternalAuthorizationForMember_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestInternalAuthorizationForMember:completionHandler:");
}

id objc_msgSend_requestManager(void *a1, const char *a2, ...)
{
  return _[a1 requestManager];
}

id objc_msgSend_requestManager_didPrepareBlueprintPayloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestManager:didPrepareBlueprintPayloads:");
}

id objc_msgSend_requestManager_didPrepareRequestPayloads_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestManager:didPrepareRequestPayloads:reason:");
}

id objc_msgSend_requestToInstall(void *a1, const char *a2, ...)
{
  return _[a1 requestToInstall];
}

id objc_msgSend_requestWithFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithFetchRequest:");
}

id objc_msgSend_requestWithIdentifier_content_trigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithIdentifier:content:trigger:");
}

id objc_msgSend_requestWithUDID_withUserShortName_withMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithUDID:withUserShortName:withMessages:");
}

id objc_msgSend_requestedApplicationBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 requestedApplicationBundleIdentifier];
}

id objc_msgSend_requestedCategoryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 requestedCategoryIdentifier];
}

id objc_msgSend_requestedDate(void *a1, const char *a2, ...)
{
  return _[a1 requestedDate];
}

id objc_msgSend_requestedResourceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 requestedResourceIdentifier];
}

id objc_msgSend_requestedWebDomain(void *a1, const char *a2, ...)
{
  return _[a1 requestedWebDomain];
}

id objc_msgSend_requesterUserID(void *a1, const char *a2, ...)
{
  return _[a1 requesterUserID];
}

id objc_msgSend_requestingUser(void *a1, const char *a2, ...)
{
  return _[a1 requestingUser];
}

id objc_msgSend_requestingUserDSID(void *a1, const char *a2, ...)
{
  return _[a1 requestingUserDSID];
}

id objc_msgSend_resetAllLocalScreenTimeSettings(void *a1, const char *a2, ...)
{
  return _[a1 resetAllLocalScreenTimeSettings];
}

id objc_msgSend_resetRestrictions(void *a1, const char *a2, ...)
{
  return _[a1 resetRestrictions];
}

id objc_msgSend_resetSystemTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 resetSystemTimeZone];
}

id objc_msgSend_resetTimelinesOnNextRollup(void *a1, const char *a2, ...)
{
  return _[a1 resetTimelinesOnNextRollup];
}

id objc_msgSend_resolve_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolve:");
}

id objc_msgSend_resolveTransportDestinations_toLocal_persistenceController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveTransportDestinations:toLocal:persistenceController:completion:");
}

id objc_msgSend_resolvedWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvedWith:");
}

id objc_msgSend_resourceDisplayName(void *a1, const char *a2, ...)
{
  return _[a1 resourceDisplayName];
}

id objc_msgSend_resourceType(void *a1, const char *a2, ...)
{
  return _[a1 resourceType];
}

id objc_msgSend_respondToAskForTimeRequestWithIdentifier_answer_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "respondToAskForTimeRequestWithIdentifier:answer:completionHandler:");
}

id objc_msgSend_responderUserID(void *a1, const char *a2, ...)
{
  return _[a1 responderUserID];
}

id objc_msgSend_respondingUserDSID(void *a1, const char *a2, ...)
{
  return _[a1 respondingUserDSID];
}

id objc_msgSend_responseTimeStamp(void *a1, const char *a2, ...)
{
  return _[a1 responseTimeStamp];
}

id objc_msgSend_restrictionConfigurations(void *a1, const char *a2, ...)
{
  return _[a1 restrictionConfigurations];
}

id objc_msgSend_restrictions(void *a1, const char *a2, ...)
{
  return _[a1 restrictions];
}

id objc_msgSend_restrictionsMigrator(void *a1, const char *a2, ...)
{
  return _[a1 restrictionsMigrator];
}

id objc_msgSend_restrictionsPasscodeEntryAttemptCountAndTimeoutDateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionsPasscodeEntryAttemptCountAndTimeoutDateWithCompletionHandler:");
}

id objc_msgSend_restrictionsPasscodeEntryAttemptCountAndTimeoutDateWithReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionsPasscodeEntryAttemptCountAndTimeoutDateWithReplyHandler:");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return _[a1 result];
}

id objc_msgSend_resultObject(void *a1, const char *a2, ...)
{
  return _[a1 resultObject];
}

id objc_msgSend_resultType(void *a1, const char *a2, ...)
{
  return _[a1 resultType];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retryFailedMessages(void *a1, const char *a2, ...)
{
  return _[a1 retryFailedMessages];
}

id objc_msgSend_returnAddress(void *a1, const char *a2, ...)
{
  return _[a1 returnAddress];
}

id objc_msgSend_returnAddressProvider(void *a1, const char *a2, ...)
{
  return _[a1 returnAddressProvider];
}

id objc_msgSend_returnDestination(void *a1, const char *a2, ...)
{
  return _[a1 returnDestination];
}

id objc_msgSend_reverseTransformer(void *a1, const char *a2, ...)
{
  return _[a1 reverseTransformer];
}

id objc_msgSend_revokeInternalAuthorizationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "revokeInternalAuthorizationWithCompletionHandler:");
}

id objc_msgSend_rollupOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 rollupOperationQueue];
}

id objc_msgSend_rollupQueue(void *a1, const char *a2, ...)
{
  return _[a1 rollupQueue];
}

id objc_msgSend_rollupUsageDataWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollupUsageDataWithCompletionHandler:");
}

id objc_msgSend_rollupUsageForDuration_isBackgroundTask_isRecomputingUsage_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollupUsageForDuration:isBackgroundTask:isRecomputingUsage:completionHandler:");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_running(void *a1, const char *a2, ...)
{
  return _[a1 running];
}

id objc_msgSend_safetySyncTimer(void *a1, const char *a2, ...)
{
  return _[a1 safetySyncTimer];
}

id objc_msgSend_save(void *a1, const char *a2, ...)
{
  return _[a1 save];
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save:");
}

id objc_msgSend_saveContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveContext:error:");
}

id objc_msgSend_saveDefaultAlwaysAllowListIfNecessaryForUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveDefaultAlwaysAllowListIfNecessaryForUser:error:");
}

id objc_msgSend_saveDowntimeForUser_startTime_endTime_scheduleByWeekdayIndex_enabled_behaviorType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveDowntimeForUser:startTime:endTime:scheduleByWeekdayIndex:enabled:behaviorType:error:");
}

id objc_msgSend_saveManagedUserBlueprintForUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveManagedUserBlueprintForUser:error:");
}

id objc_msgSend_saveRestrictionsBlueprintWithValuesForPresetRestrictions_forUser_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRestrictionsBlueprintWithValuesForPresetRestrictions:forUser:error:");
}

id objc_msgSend_scanningPolicy(void *a1, const char *a2, ...)
{
  return _[a1 scanningPolicy];
}

id objc_msgSend_schedule(void *a1, const char *a2, ...)
{
  return _[a1 schedule];
}

id objc_msgSend_scheduleAppMonitorAppDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 scheduleAppMonitorAppDiscovery];
}

id objc_msgSend_scheduleBackgroundActivityOfType_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleBackgroundActivityOfType:interval:");
}

id objc_msgSend_scheduleFailStuckMessagesActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleFailStuckMessagesActivity:");
}

id objc_msgSend_scheduleMessageRetryActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleMessageRetryActivity:");
}

id objc_msgSend_scheduleStoreCleanupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleStoreCleanupActivity:");
}

id objc_msgSend_scheduleSystemTaskAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleSystemTaskAndReturnError:");
}

id objc_msgSend_scheduleWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleWithBlock:");
}

id objc_msgSend_scheduledActivitiesByType(void *a1, const char *a2, ...)
{
  return _[a1 scheduledActivitiesByType];
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_scheduler(void *a1, const char *a2, ...)
{
  return _[a1 scheduler];
}

id objc_msgSend_schedulesResultsController(void *a1, const char *a2, ...)
{
  return _[a1 schedulesResultsController];
}

id objc_msgSend_screenTime(void *a1, const char *a2, ...)
{
  return _[a1 screenTime];
}

id objc_msgSend_screenTimeCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeCapabilities];
}

id objc_msgSend_screenTimeDefaults(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeDefaults];
}

id objc_msgSend_screenTimeDeltaFromHistoricalAverage(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeDeltaFromHistoricalAverage];
}

id objc_msgSend_screenTimeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeEnabled];
}

id objc_msgSend_screenTimeInSeconds(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeInSeconds];
}

id objc_msgSend_screenTimeManagementStateTransitionsByDSID(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeManagementStateTransitionsByDSID];
}

id objc_msgSend_screenTimeManager(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeManager];
}

id objc_msgSend_screenTimeOrganizationController(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeOrganizationController];
}

id objc_msgSend_screenTimeRequestStream(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeRequestStream];
}

id objc_msgSend_screenTimeState(void *a1, const char *a2, ...)
{
  return _[a1 screenTimeState];
}

id objc_msgSend_screenTimeStateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenTimeStateWithCompletionHandler:");
}

id objc_msgSend_screenTimeSyncStateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenTimeSyncStateWithCompletionHandler:");
}

id objc_msgSend_screentime(void *a1, const char *a2, ...)
{
  return _[a1 screentime];
}

id objc_msgSend_secondaryType(void *a1, const char *a2, ...)
{
  return _[a1 secondaryType];
}

id objc_msgSend_selectedWeekUsageReport(void *a1, const char *a2, ...)
{
  return _[a1 selectedWeekUsageReport];
}

id objc_msgSend_sendAcknowledgementMessageForResponseIdentifier_toDestination_fromDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAcknowledgementMessageForResponseIdentifier:toDestination:fromDestination:");
}

id objc_msgSend_sendAskRequestToParents_toParentsWithDSIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAskRequestToParents:toParentsWithDSIDs:");
}

id objc_msgSend_sendAskResponse_toChildWithDSID_toParentsWithDSIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAskResponse:toChildWithDSID:toParentsWithDSIDs:");
}

id objc_msgSend_sendAskToMessageForAskForTimeRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAskToMessageForAskForTimeRequest:completion:");
}

id objc_msgSend_sendCheckinRequest(void *a1, const char *a2, ...)
{
  return _[a1 sendCheckinRequest];
}

id objc_msgSend_sendCheckinResponseToDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCheckinResponseToDestination:");
}

id objc_msgSend_sendData_toDestinations_fromDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:toDestinations:fromDestination:");
}

id objc_msgSend_sendData_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendInitialSetup(void *a1, const char *a2, ...)
{
  return _[a1 sendInitialSetup];
}

id objc_msgSend_sendMessage_toAddresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toAddresses:");
}

id objc_msgSend_sendMessage_toAddresses_fromAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toAddresses:fromAddress:");
}

id objc_msgSend_sendMessageEnvelope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageEnvelope:");
}

id objc_msgSend_sendPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPayload:");
}

id objc_msgSend_sendPayloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPayloads:");
}

id objc_msgSend_sendResourceAtURL_metadata_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_serialize(void *a1, const char *a2, ...)
{
  return _[a1 serialize];
}

id objc_msgSend_serializeArrayIntoDictionary_withKey_withValue_itemSerializer_isRequired_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeArrayIntoDictionary:withKey:withValue:itemSerializer:isRequired:defaultValue:");
}

id objc_msgSend_serializeAsDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeAsDataWithError:");
}

id objc_msgSend_serializeDateIntoDictionary_withKey_withValue_isRequired_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeDateIntoDictionary:withKey:withValue:isRequired:defaultValue:");
}

id objc_msgSend_serializeDictionaryIntoDictionary_withKey_withValue_dictSerializer_isRequired_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeDictionaryIntoDictionary:withKey:withValue:dictSerializer:isRequired:defaultValue:");
}

id objc_msgSend_serializeStringIntoDictionary_withKey_withValue_isRequired_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeStringIntoDictionary:withKey:withValue:isRequired:defaultValue:");
}

id objc_msgSend_serverReceivedTime(void *a1, const char *a2, ...)
{
  return _[a1 serverReceivedTime];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_serviceDescription(void *a1, const char *a2, ...)
{
  return _[a1 serviceDescription];
}

id objc_msgSend_serviceDescriptionsByServiceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceDescriptionsByServiceName];
}

id objc_msgSend_serviceEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 serviceEntitlement];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_serviceQueryQueue(void *a1, const char *a2, ...)
{
  return _[a1 serviceQueryQueue];
}

id objc_msgSend_serviceQueue(void *a1, const char *a2, ...)
{
  return _[a1 serviceQueue];
}

id objc_msgSend_setAccountState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountState:");
}

id objc_msgSend_setAcknowledgedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcknowledgedDate:");
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivity:");
}

id objc_msgSend_setAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdamID:");
}

id objc_msgSend_setAffectedStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAffectedStores:");
}

id objc_msgSend_setAggregateUsageReports_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAggregateUsageReports:");
}

id objc_msgSend_setAllDevicesAreNewUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDevicesAreNewUsage:");
}

id objc_msgSend_setAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltDSID:");
}

id objc_msgSend_setAmountGranted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAmountGranted:");
}

id objc_msgSend_setAnswer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnswer:");
}

id objc_msgSend_setAppAndWebsiteActivityEnabled_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppAndWebsiteActivityEnabled:completionHandler:");
}

id objc_msgSend_setAppMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppMonitor:");
}

id objc_msgSend_setAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleID:");
}

id objc_msgSend_setAssetIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetIdentifier:");
}

id objc_msgSend_setAssetsUsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetsUsed:");
}

id objc_msgSend_setAssociatedRequestIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedRequestIdentifier:");
}

id objc_msgSend_setAutomaticallyMergesChangesFromParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticallyMergesChangesFromParent:");
}

id objc_msgSend_setBetaVersionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBetaVersionIdentifier:");
}

id objc_msgSend_setBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlock:");
}

id objc_msgSend_setBlueprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlueprint:");
}

id objc_msgSend_setBlueprintPayloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlueprintPayloads:");
}

id objc_msgSend_setBlueprintSourceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlueprintSourceDelegate:");
}

id objc_msgSend_setBlueprintsResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlueprintsResultsController:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBudgetLimitScheduleRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBudgetLimitScheduleRepresentation:");
}

id objc_msgSend_setBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifier:");
}

id objc_msgSend_setCachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachePolicy:");
}

id objc_msgSend_setCachedFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedFamilyMembers:");
}

id objc_msgSend_setCachedIDSAccountIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedIDSAccountIsActive:");
}

id objc_msgSend_setCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendarIdentifier:");
}

id objc_msgSend_setCanCloudKitMirror_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanCloudKitMirror:");
}

id objc_msgSend_setCanceled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanceled:");
}

id objc_msgSend_setCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:");
}

id objc_msgSend_setCategoryIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryIdentifiers:");
}

id objc_msgSend_setCategoryIdentifiersVersion2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryIdentifiersVersion2:");
}

id objc_msgSend_setCemConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCemConfiguration:");
}

id objc_msgSend_setClass_forClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClass:forClassName:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setCloudKitSyncingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitSyncingEnabled:");
}

id objc_msgSend_setCloudSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSettings:");
}

id objc_msgSend_setCloudSyncEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSyncEnabled:");
}

id objc_msgSend_setCloudkitError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudkitError:");
}

id objc_msgSend_setCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCode:");
}

id objc_msgSend_setCollectedSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectedSettings:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setConduit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConduit:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setConfigurationsResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationsResultsController:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setContactManagementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactManagementState:");
}

id objc_msgSend_setContactManagementState_forDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactManagementState:forDSID:completionHandler:");
}

id objc_msgSend_setContactsEditable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactsEditable:");
}

id objc_msgSend_setContainerOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerOptions:");
}

id objc_msgSend_setContentPrivacySiriImageGenerationRestriction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentPrivacySiriImageGenerationRestriction:");
}

id objc_msgSend_setCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountLimit:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCurrentUserDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentUserDescription:");
}

id objc_msgSend_setDateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateInterval:");
}

id objc_msgSend_setDeclarations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeclarations:");
}

id objc_msgSend_setDefaultUserPolicies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultUserPolicies:");
}

id objc_msgSend_setDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelay:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeliverQuietly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeliverQuietly:");
}

id objc_msgSend_setDeltaScreenTimeUsage_totalUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaScreenTimeUsage:totalUsage:");
}

id objc_msgSend_setDestinationReachabilityMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationReachabilityMap:");
}

id objc_msgSend_setDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinations:");
}

id objc_msgSend_setDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevice:");
}

id objc_msgSend_setDeviceIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceIDs:");
}

id objc_msgSend_setDeviceInfoPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceInfoPlist:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDistributorID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistributorID:");
}

id objc_msgSend_setDistributorIsThirdParty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistributorIsThirdParty:");
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomain:");
}

id objc_msgSend_setDowntimeOverridesResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDowntimeOverridesResultsController:");
}

id objc_msgSend_setDsid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDsid:");
}

id objc_msgSend_setDurationInMinutes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDurationInMinutes:");
}

id objc_msgSend_setEffectivePasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEffectivePasscode:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEndDateComponents_referenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDateComponents:referenceDate:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setErrorChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorChain:");
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventType:");
}

id objc_msgSend_setExpectedAltDSIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedAltDSIDs:");
}

id objc_msgSend_setExpiration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpiration:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExpression_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpression:");
}

id objc_msgSend_setExpressionResultType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpressionResultType:");
}

id objc_msgSend_setFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamily:");
}

id objc_msgSend_setFamilyError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyError:");
}

id objc_msgSend_setFamilyMemberByAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyMemberByAppleID:");
}

id objc_msgSend_setFamilyMemberType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyMemberType:");
}

id objc_msgSend_setFamilyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyName:");
}

id objc_msgSend_setFamilyOrganizationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyOrganizationController:");
}

id objc_msgSend_setFamilySettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilySettings:");
}

id objc_msgSend_setFetchBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchBatchSize:");
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchLimit:");
}

id objc_msgSend_setFirstPickupDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstPickupDate:");
}

id objc_msgSend_setFormatOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFormatOptions:");
}

id objc_msgSend_setFragment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFragment:");
}

id objc_msgSend_setGenesisDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenesisDate:");
}

id objc_msgSend_setGenesisStateItemsByUserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenesisStateItemsByUserDSID:");
}

id objc_msgSend_setGivenName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGivenName:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHasStoreLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasStoreLoaded:");
}

id objc_msgSend_setHistoryAnalyzerTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHistoryAnalyzerTimer:");
}

id objc_msgSend_setHistoryAnalyzerTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHistoryAnalyzerTransaction:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setIconData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconData:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setInReplyTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInReplyTo:");
}

id objc_msgSend_setInstalledAppsFetchedResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstalledAppsFetchedResultsController:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalid:");
}

id objc_msgSend_setIsAppAndWebsiteActivityEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAppAndWebsiteActivityEnabled:");
}

id objc_msgSend_setIsCommunicationSafetyNotificationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCommunicationSafetyNotificationEnabled:");
}

id objc_msgSend_setIsCommunicationSafetyReceivingRestricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCommunicationSafetyReceivingRestricted:");
}

id objc_msgSend_setIsCommunicationSafetySendingRestricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCommunicationSafetySendingRestricted:");
}

id objc_msgSend_setIsDirty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDirty:");
}

id objc_msgSend_setIsEyeReliefEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEyeReliefEnabled:");
}

id objc_msgSend_setIsFamilyOrganizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFamilyOrganizer:");
}

id objc_msgSend_setIsManaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsManaged:");
}

id objc_msgSend_setIsOnline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnline:");
}

id objc_msgSend_setIsParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsParent:");
}

id objc_msgSend_setItem_forMessageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItem:forMessageIdentifier:");
}

id objc_msgSend_setLastEventDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastEventDate:");
}

id objc_msgSend_setLastFamilyCheckinDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastFamilyCheckinDate:");
}

id objc_msgSend_setLastToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastToken:");
}

id objc_msgSend_setLastUpdatedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUpdatedDate:");
}

id objc_msgSend_setLimitDisplayName_timeLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLimitDisplayName:timeLeft:");
}

id objc_msgSend_setLocalSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalSettings:");
}

id objc_msgSend_setLocalUsageReports_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalUsageReports:");
}

id objc_msgSend_setLocationSharingModificationAllowed_forDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationSharingModificationAllowed:forDSID:completionHandler:");
}

id objc_msgSend_setLongestSessionEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongestSessionEndDate:");
}

id objc_msgSend_setLongestSessionStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongestSessionStartDate:");
}

id objc_msgSend_setManaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManaged:");
}

id objc_msgSend_setManagedObjectContextObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagedObjectContextObserver:");
}

id objc_msgSend_setManagementEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagementEnabled:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMcxSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMcxSettings:");
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergePolicy:");
}

id objc_msgSend_setMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessages:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonitor:");
}

id objc_msgSend_setMsInterventionPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMsInterventionPolicy:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNotificationDelayTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationDelayTimer:");
}

id objc_msgSend_setNotificationTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationTimeInterval:");
}

id objc_msgSend_setNotificationTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationTimer:");
}

id objc_msgSend_setNumberOfNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfNotifications:");
}

id objc_msgSend_setNumberOfPartitions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfPartitions:");
}

id objc_msgSend_setNumberOfPickups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfPickups:");
}

id objc_msgSend_setNumberOfPickupsWithoutApplicationUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfPickupsWithoutApplicationUsage:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObserver:");
}

id objc_msgSend_setOption_forMirroringKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOption:forMirroringKey:");
}

id objc_msgSend_setOrganization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrganization:");
}

id objc_msgSend_setOrganizationDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrganizationDisplayName:");
}

id objc_msgSend_setOrganizationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrganizationIdentifier:");
}

id objc_msgSend_setOrganizationSettingsResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrganizationSettingsResultsController:");
}

id objc_msgSend_setOrganizationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrganizationType:");
}

id objc_msgSend_setOriginalDestinationByIDSDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalDestinationByIDSDestination:");
}

id objc_msgSend_setParentContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentContext:");
}

id objc_msgSend_setPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscode:");
}

id objc_msgSend_setPasscodeOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeOwner:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPayloadAllowAccountModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAccountModification:");
}

id objc_msgSend_setPayloadAllowAddingGameCenterFriends_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAddingGameCenterFriends:");
}

id objc_msgSend_setPayloadAllowAirDrop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAirDrop:");
}

id objc_msgSend_setPayloadAllowAppCellularDataModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAppCellularDataModification:");
}

id objc_msgSend_setPayloadAllowAppClips_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAppClips:");
}

id objc_msgSend_setPayloadAllowAppInstallation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAppInstallation:");
}

id objc_msgSend_setPayloadAllowAppRemoval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAppRemoval:");
}

id objc_msgSend_setPayloadAllowAssistant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAssistant:");
}

id objc_msgSend_setPayloadAllowAssistantUserGeneratedContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAssistantUserGeneratedContent:");
}

id objc_msgSend_setPayloadAllowAutomaticAppUpdatesModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowAutomaticAppUpdatesModification:");
}

id objc_msgSend_setPayloadAllowBookstore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowBookstore:");
}

id objc_msgSend_setPayloadAllowBookstoreErotica_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowBookstoreErotica:");
}

id objc_msgSend_setPayloadAllowCamera_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowCamera:");
}

id objc_msgSend_setPayloadAllowCellularPlanModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowCellularPlanModification:");
}

id objc_msgSend_setPayloadAllowDictation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowDictation:");
}

id objc_msgSend_setPayloadAllowDriverDoNotDisturbModifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowDriverDoNotDisturbModifications:");
}

id objc_msgSend_setPayloadAllowFindMyFriendsModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowFindMyFriendsModification:");
}

id objc_msgSend_setPayloadAllowGameCenterFriendsSharingModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowGameCenterFriendsSharingModification:");
}

id objc_msgSend_setPayloadAllowGameCenterNearbyMultiplayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowGameCenterNearbyMultiplayer:");
}

id objc_msgSend_setPayloadAllowGameCenterPrivateMessaging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowGameCenterPrivateMessaging:");
}

id objc_msgSend_setPayloadAllowGameCenterProfileModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowGameCenterProfileModification:");
}

id objc_msgSend_setPayloadAllowGameCenterProfilePrivacyModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowGameCenterProfilePrivacyModification:");
}

id objc_msgSend_setPayloadAllowGroupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowGroupActivity:");
}

id objc_msgSend_setPayloadAllowInAppPurchases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowInAppPurchases:");
}

id objc_msgSend_setPayloadAllowMultiplayerGaming_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowMultiplayerGaming:");
}

id objc_msgSend_setPayloadAllowMusicArtistActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowMusicArtistActivity:");
}

id objc_msgSend_setPayloadAllowMusicVideos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowMusicVideos:");
}

id objc_msgSend_setPayloadAllowNews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowNews:");
}

id objc_msgSend_setPayloadAllowPodcasts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowPodcasts:");
}

id objc_msgSend_setPayloadAllowSafari_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowSafari:");
}

id objc_msgSend_setPayloadAllowScreenRecording_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowScreenRecording:");
}

id objc_msgSend_setPayloadAllowVehicleUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowVehicleUI:");
}

id objc_msgSend_setPayloadAllowVideoConferencing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowVideoConferencing:");
}

id objc_msgSend_setPayloadAllowedGameCenterOtherPlayerTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowedGameCenterOtherPlayerTypes:");
}

id objc_msgSend_setPayloadAllowiTunes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadAllowiTunes:");
}

id objc_msgSend_setPayloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadData:");
}

id objc_msgSend_setPayloadForceAssistantProfanityFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadForceAssistantProfanityFilter:");
}

id objc_msgSend_setPayloadForceITunesStorePasswordEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadForceITunesStorePasswordEntry:");
}

id objc_msgSend_setPayloadHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadHandler:");
}

id objc_msgSend_setPayloadManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadManager:");
}

id objc_msgSend_setPayloadPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadPlist:");
}

id objc_msgSend_setPayloadRestrictWeb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadRestrictWeb:");
}

id objc_msgSend_setPayloadUseContentFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadUseContentFilter:");
}

id objc_msgSend_setPayloadWhiteListEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadWhiteListEnabled:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlatform:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPreregistered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreregistered:");
}

id objc_msgSend_setPrimitiveDestinationStatusQueryController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimitiveDestinationStatusQueryController:");
}

id objc_msgSend_setPropertiesToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToFetch:");
}

id objc_msgSend_setPropertiesToGroupBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToGroupBy:");
}

id objc_msgSend_setPushToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushToken:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryIntervals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryIntervals:");
}

id objc_msgSend_setQueuedCompletionHandlers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuedCompletionHandlers:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferenceDate:");
}

id objc_msgSend_setRelationshipKeyPathsForPrefetching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelationshipKeyPathsForPrefetching:");
}

id objc_msgSend_setRemoteAlertHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteAlertHandle:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRepeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeats:");
}

id objc_msgSend_setRequestIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestIdentifier:");
}

id objc_msgSend_setRequestTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestTimeStamp:");
}

id objc_msgSend_setRequestToInstall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestToInstall:");
}

id objc_msgSend_setRequestType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestType:");
}

id objc_msgSend_setRequestUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestUUID:");
}

id objc_msgSend_setRequestingUserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestingUserDSID:");
}

id objc_msgSend_setRequestingUserDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestingUserDisplayName:");
}

id objc_msgSend_setResetAllLocalScreenTimeSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetAllLocalScreenTimeSettings:");
}

id objc_msgSend_setResetTimelinesOnNextRollup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetTimelinesOnNextRollup:");
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValue:forKey:error:");
}

id objc_msgSend_setRespondingUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRespondingUser:");
}

id objc_msgSend_setRespondingUserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRespondingUserDSID:");
}

id objc_msgSend_setResponseTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseTimeStamp:");
}

id objc_msgSend_setRestrictionConfigurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestrictionConfigurations:");
}

id objc_msgSend_setRestrictionsPasscode_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestrictionsPasscode:completionHandler:");
}

id objc_msgSend_setRestrictionsPasscode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestrictionsPasscode:error:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setResumed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResumed:");
}

id objc_msgSend_setSafetySyncTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSafetySyncTimer:");
}

id objc_msgSend_setScanningPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanningPolicy:");
}

id objc_msgSend_setSchedule_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSchedule:");
}

id objc_msgSend_setScheduleRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduleRepresentation:");
}

id objc_msgSend_setSchedulesResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSchedulesResultsController:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setScreenTimeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenTimeEnabled:");
}

id objc_msgSend_setScreenTimeEnabled_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenTimeEnabled:completionHandler:");
}

id objc_msgSend_setScreenTimeInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenTimeInSeconds:");
}

id objc_msgSend_setScreenTimeSyncingEnabled_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenTimeSyncingEnabled:completionHandler:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setServerHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerHash:");
}

id objc_msgSend_setServiceQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceQueue:");
}

id objc_msgSend_setSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettings:");
}

id objc_msgSend_setSettingsResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettingsResultsController:");
}

id objc_msgSend_setShareAcrossDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShareAcrossDevices:");
}

id objc_msgSend_setShouldAddStoreAsynchronously_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAddStoreAsynchronously:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setSourceOrganizationEnqueued_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceOrganizationEnqueued:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTime:");
}

id objc_msgSend_setStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStates:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStoreChangeNotificationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreChangeNotificationToken:");
}

id objc_msgSend_setStoreServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreServer:");
}

id objc_msgSend_setSupportsEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsEncryption:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setSyncToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncToken:");
}

id objc_msgSend_setSyncingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncingEnabled:");
}

id objc_msgSend_setTimeLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeLeft:");
}

id objc_msgSend_setTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStamp:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTolerance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTolerance:");
}

id objc_msgSend_setTotalTimeInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalTimeInSeconds:");
}

id objc_msgSend_setTransactionAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionAuthor:");
}

id objc_msgSend_setTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrigger:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUDID:");
}

id objc_msgSend_setUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUUID:");
}

id objc_msgSend_setUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsage:");
}

id objc_msgSend_setUsageGenesisDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageGenesisDate:");
}

id objc_msgSend_setUsageLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageLimit:");
}

id objc_msgSend_setUsageLimitsResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageLimitsResultsController:");
}

id objc_msgSend_setUsageManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageManager:");
}

id objc_msgSend_setUsageReporter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageReporter:");
}

id objc_msgSend_setUsageReportsByCoreDuetIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageReportsByCoreDuetIdentifier:");
}

id objc_msgSend_setUsageRequestsFetchedResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageRequestsFetchedResultsController:");
}

id objc_msgSend_setUsageTrusted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsageTrusted:");
}

id objc_msgSend_setUseDeviceToDeviceEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseDeviceToDeviceEncryption:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_setUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUser:");
}

id objc_msgSend_setUserBookmarks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserBookmarks:");
}

id objc_msgSend_setUserDeviceState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDeviceState:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserShortName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserShortName:");
}

id objc_msgSend_setUsers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsers:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVersionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersionIdentifier:");
}

id objc_msgSend_setVersionVector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersionVector:");
}

id objc_msgSend_setWantsCrossAccountMessaging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsCrossAccountMessaging:");
}

id objc_msgSend_setWeekday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekday:");
}

id objc_msgSend_setWeeklyReportData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeeklyReportData:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setXpcEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcEndpoint:");
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _[a1 settings];
}

id objc_msgSend_settingsResultsController(void *a1, const char *a2, ...)
{
  return _[a1 settingsResultsController];
}

id objc_msgSend_setupConfigurationFromSettingsConfigurationChange_familyProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupConfigurationFromSettingsConfigurationChange:familyProvider:");
}

id objc_msgSend_setupConfigurationFromSettingsConfigurationChange_familyProvider_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupConfigurationFromSettingsConfigurationChange:familyProvider:container:");
}

id objc_msgSend_setupServiceDescription(void *a1, const char *a2, ...)
{
  return _[a1 setupServiceDescription];
}

id objc_msgSend_shareWebUsage(void *a1, const char *a2, ...)
{
  return _[a1 shareWebUsage];
}

id objc_msgSend_sharedCache(void *a1, const char *a2, ...)
{
  return _[a1 sharedCache];
}

id objc_msgSend_sharedCenter(void *a1, const char *a2, ...)
{
  return _[a1 sharedCenter];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDescriptionWithServiceName_viewControllerClassName_configurationContextUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedDescriptionWithServiceName:viewControllerClassName:configurationContextUserInfo:");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedNotificationManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedNotificationManager];
}

id objc_msgSend_shouldAllowOneMoreMinuteForBundleIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowOneMoreMinuteForBundleIdentifier:error:");
}

id objc_msgSend_shouldAllowOneMoreMinuteForBundleIdentifier_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowOneMoreMinuteForBundleIdentifier:replyHandler:");
}

id objc_msgSend_shouldAllowOneMoreMinuteForCategoryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowOneMoreMinuteForCategoryIdentifier:error:");
}

id objc_msgSend_shouldAllowOneMoreMinuteForCategoryIdentifier_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowOneMoreMinuteForCategoryIdentifier:replyHandler:");
}

id objc_msgSend_shouldAllowOneMoreMinuteForWebDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowOneMoreMinuteForWebDomain:error:");
}

id objc_msgSend_shouldAllowOneMoreMinuteForWebDomain_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowOneMoreMinuteForWebDomain:replyHandler:");
}

id objc_msgSend_shouldDefer(void *a1, const char *a2, ...)
{
  return _[a1 shouldDefer];
}

id objc_msgSend_shouldDeliverNotificationQuietlyWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDeliverNotificationQuietlyWithCompletion:");
}

id objc_msgSend_shouldRequestMoreTime(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestMoreTime];
}

id objc_msgSend_shouldRequestMoreTimeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRequestMoreTimeWithCompletionHandler:");
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_shutdownDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 shutdownDidComplete];
}

id objc_msgSend_shutdownReactorWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shutdownReactorWithCompletion:");
}

id objc_msgSend_shutdownWillBegin(void *a1, const char *a2, ...)
{
  return _[a1 shutdownWillBegin];
}

id objc_msgSend_signedInUserHasMultipleDevices(void *a1, const char *a2, ...)
{
  return _[a1 signedInUserHasMultipleDevices];
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _[a1 source];
}

id objc_msgSend_sourceRatingRegionCode(void *a1, const char *a2, ...)
{
  return _[a1 sourceRatingRegionCode];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startCloudKitSyncing(void *a1, const char *a2, ...)
{
  return _[a1 startCloudKitSyncing];
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDateSortDescriptorAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDateSortDescriptorAscending:");
}

id objc_msgSend_startListening(void *a1, const char *a2, ...)
{
  return _[a1 startListening];
}

id objc_msgSend_startMonitoringAccountChanges(void *a1, const char *a2, ...)
{
  return _[a1 startMonitoringAccountChanges];
}

id objc_msgSend_startObservingBlueprints(void *a1, const char *a2, ...)
{
  return _[a1 startObservingBlueprints];
}

id objc_msgSend_startObservingOrganizationSettings(void *a1, const char *a2, ...)
{
  return _[a1 startObservingOrganizationSettings];
}

id objc_msgSend_startObservingScreenTimeSettings(void *a1, const char *a2, ...)
{
  return _[a1 startObservingScreenTimeSettings];
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startOnQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOnQueue:");
}

id objc_msgSend_startRequestWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRequestWithCompletionHandler:");
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return _[a1 startTime];
}

id objc_msgSend_startupCloud(void *a1, const char *a2, ...)
{
  return _[a1 startupCloud];
}

id objc_msgSend_startupCloudSync(void *a1, const char *a2, ...)
{
  return _[a1 startupCloudSync];
}

id objc_msgSend_startupFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startupFamily:");
}

id objc_msgSend_startupScreenTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startupScreenTime:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateServer(void *a1, const char *a2, ...)
{
  return _[a1 stateServer];
}

id objc_msgSend_states(void *a1, const char *a2, ...)
{
  return _[a1 states];
}

id objc_msgSend_statusDict(void *a1, const char *a2, ...)
{
  return _[a1 statusDict];
}

id objc_msgSend_statusPayloadWithMessages_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusPayloadWithMessages:error:");
}

id objc_msgSend_statusWithIncrementedAttempts(void *a1, const char *a2, ...)
{
  return _[a1 statusWithIncrementedAttempts];
}

id objc_msgSend_statusWithUpdatedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusWithUpdatedState:");
}

id objc_msgSend_statusesByAddress(void *a1, const char *a2, ...)
{
  return _[a1 statusesByAddress];
}

id objc_msgSend_stopCloudKitSyncing(void *a1, const char *a2, ...)
{
  return _[a1 stopCloudKitSyncing];
}

id objc_msgSend_stopTrackingMessageWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrackingMessageWithIdentifier:");
}

id objc_msgSend_storeChangeNotificationToken(void *a1, const char *a2, ...)
{
  return _[a1 storeChangeNotificationToken];
}

id objc_msgSend_storeForFamilyMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeForFamilyMember:");
}

id objc_msgSend_storeItemIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 storeItemIdentifier];
}

id objc_msgSend_storeServer(void *a1, const char *a2, ...)
{
  return _[a1 storeServer];
}

id objc_msgSend_stream(void *a1, const char *a2, ...)
{
  return _[a1 stream];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_success(void *a1, const char *a2, ...)
{
  return _[a1 success];
}

id objc_msgSend_success_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "success:");
}

id objc_msgSend_supportedInfrastructure(void *a1, const char *a2, ...)
{
  return _[a1 supportedInfrastructure];
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeviceToDeviceEncryption];
}

id objc_msgSend_supportsEncryption(void *a1, const char *a2, ...)
{
  return _[a1 supportsEncryption];
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return _[a1 suspend];
}

id objc_msgSend_syncOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 syncOperationQueue];
}

id objc_msgSend_synchronizeUsageWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeUsageWithCompletionHandler:");
}

id objc_msgSend_synchronizeUserDefaultsDomain_keys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeUserDefaultsDomain:keys:");
}

id objc_msgSend_synchronizeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeWithCompletionHandler:");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_syncingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 syncingEnabled];
}

id objc_msgSend_systemConnection(void *a1, const char *a2, ...)
{
  return _[a1 systemConnection];
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 systemTimeZone];
}

id objc_msgSend_targetDevices(void *a1, const char *a2, ...)
{
  return _[a1 targetDevices];
}

id objc_msgSend_targetUser(void *a1, const char *a2, ...)
{
  return _[a1 targetUser];
}

id objc_msgSend_targetableFamilyMemberForUser_inTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetableFamilyMemberForUser:inTargetableFamilyMembers:");
}

id objc_msgSend_targetableParentsInTargetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetableParentsInTargetableFamilyMembers:");
}

id objc_msgSend_temporaryDirectory(void *a1, const char *a2, ...)
{
  return _[a1 temporaryDirectory];
}

id objc_msgSend_then(void *a1, const char *a2, ...)
{
  return _[a1 then];
}

id objc_msgSend_then_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "then:");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeRequested(void *a1, const char *a2, ...)
{
  return _[a1 timeRequested];
}

id objc_msgSend_timeStamp(void *a1, const char *a2, ...)
{
  return _[a1 timeStamp];
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return _[a1 timeZone];
}

id objc_msgSend_timedItems(void *a1, const char *a2, ...)
{
  return _[a1 timedItems];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_toLocal(void *a1, const char *a2, ...)
{
  return _[a1 toLocal];
}

id objc_msgSend_toggleDistanceSampling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleDistanceSampling:");
}

id objc_msgSend_toggleOnDemandDowntimeConfigurationForUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleOnDemandDowntimeConfigurationForUserID:");
}

id objc_msgSend_toggleOnDemandDowntimeForUserID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleOnDemandDowntimeForUserID:completionHandler:");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_tombstoneStream(void *a1, const char *a2, ...)
{
  return _[a1 tombstoneStream];
}

id objc_msgSend_tool(void *a1, const char *a2, ...)
{
  return _[a1 tool];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_topics(void *a1, const char *a2, ...)
{
  return _[a1 topics];
}

id objc_msgSend_totalPickups(void *a1, const char *a2, ...)
{
  return _[a1 totalPickups];
}

id objc_msgSend_totalScreenTime(void *a1, const char *a2, ...)
{
  return _[a1 totalScreenTime];
}

id objc_msgSend_totalUsageTime(void *a1, const char *a2, ...)
{
  return _[a1 totalUsageTime];
}

id objc_msgSend_totalUserNotifications(void *a1, const char *a2, ...)
{
  return _[a1 totalUserNotifications];
}

id objc_msgSend_transactionWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionWithDescription:");
}

id objc_msgSend_transformer(void *a1, const char *a2, ...)
{
  return _[a1 transformer];
}

id objc_msgSend_transport(void *a1, const char *a2, ...)
{
  return _[a1 transport];
}

id objc_msgSend_transport_didDeliverMessageWithIdentifier_toMessageAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:didDeliverMessageWithIdentifier:toMessageAddress:");
}

id objc_msgSend_transport_didReceiveData_altURI_appleID_serverReceivedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:didReceiveData:altURI:appleID:serverReceivedTime:");
}

id objc_msgSend_transport_didReceiveMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:didReceiveMessage:");
}

id objc_msgSend_transport_didReceiveUpdatedState_forPayloadUUID_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:didReceiveUpdatedState:forPayloadUUID:context:error:");
}

id objc_msgSend_transport_didSendMessageWithIdentifier_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:didSendMessageWithIdentifier:result:");
}

id objc_msgSend_transport_willSendMessage_errorsByAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transport:willSendMessage:errorsByAddress:");
}

id objc_msgSend_transportEnvoy(void *a1, const char *a2, ...)
{
  return _[a1 transportEnvoy];
}

id objc_msgSend_transportEnvoy_didReceiveMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportEnvoy:didReceiveMessage:");
}

id objc_msgSend_transportEnvoy_didSendMessageWithIdentifier_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportEnvoy:didSendMessageWithIdentifier:result:");
}

id objc_msgSend_transportEnvoyQueue(void *a1, const char *a2, ...)
{
  return _[a1 transportEnvoyQueue];
}

id objc_msgSend_transportPrimitives(void *a1, const char *a2, ...)
{
  return _[a1 transportPrimitives];
}

id objc_msgSend_transportService(void *a1, const char *a2, ...)
{
  return _[a1 transportService];
}

id objc_msgSend_transportService_didReceiveMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportService:didReceiveMessage:");
}

id objc_msgSend_transportService_didSendMessageWithIdentifier_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportService:didSendMessageWithIdentifier:result:");
}

id objc_msgSend_transportServiceMessageLedger(void *a1, const char *a2, ...)
{
  return _[a1 transportServiceMessageLedger];
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return _[a1 trigger];
}

id objc_msgSend_triggerDowngradeMigrationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerDowngradeMigrationWithCompletionHandler:");
}

id objc_msgSend_triggerMigrationWithPersistenceController_andRequestManager_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerMigrationWithPersistenceController:andRequestManager:outError:");
}

id objc_msgSend_triggerWithDateMatchingComponents_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithDateMatchingComponents:repeats:");
}

id objc_msgSend_triggerableObservationFiltersByDelegate(void *a1, const char *a2, ...)
{
  return _[a1 triggerableObservationFiltersByDelegate];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeForConfigurationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeForConfigurationIdentifier:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_underlyingPayload(void *a1, const char *a2, ...)
{
  return _[a1 underlyingPayload];
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unknownReachabilityDestinations(void *a1, const char *a2, ...)
{
  return _[a1 unknownReachabilityDestinations];
}

id objc_msgSend_unloadCloudPersistentStoreWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unloadCloudPersistentStoreWithError:");
}

id objc_msgSend_unmodeledManagingOrganizationSettings(void *a1, const char *a2, ...)
{
  return _[a1 unmodeledManagingOrganizationSettings];
}

id objc_msgSend_unmodeledParticipatesInSharedLedger(void *a1, const char *a2, ...)
{
  return _[a1 unmodeledParticipatesInSharedLedger];
}

id objc_msgSend_unreachableDestinations(void *a1, const char *a2, ...)
{
  return _[a1 unreachableDestinations];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_updateDatabaseWithFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDatabaseWithFamilyMembers:");
}

id objc_msgSend_updateDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 updateDeviceName];
}

id objc_msgSend_updateEffectiveDeviceState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEffectiveDeviceState:");
}

id objc_msgSend_updateExpiredAwaitingResponseFamilyMemberGenesisStateItemsToPending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateExpiredAwaitingResponseFamilyMemberGenesisStateItemsToPending:");
}

id objc_msgSend_updateFamilyMemberGenesisStateItems_receivedMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFamilyMemberGenesisStateItems:receivedMessage:");
}

id objc_msgSend_updateFamilyMemberGenesisStateItems_targetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFamilyMemberGenesisStateItems:targetableFamilyMembers:");
}

id objc_msgSend_updateIconDataWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIconDataWithURL:");
}

id objc_msgSend_updatePendingFamilyMemberGenesisStateItemsToAwaitingResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePendingFamilyMemberGenesisStateItemsToAwaitingResponse:");
}

id objc_msgSend_updateServerHash(void *a1, const char *a2, ...)
{
  return _[a1 updateServerHash];
}

id objc_msgSend_updateWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithDescription:");
}

id objc_msgSend_updateWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithDictionaryRepresentation:");
}

id objc_msgSend_updateWithFamily_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithFamily:inContext:");
}

id objc_msgSend_updatedObjects(void *a1, const char *a2, ...)
{
  return _[a1 updatedObjects];
}

id objc_msgSend_updatedSettingsByUserDSID(void *a1, const char *a2, ...)
{
  return _[a1 updatedSettingsByUserDSID];
}

id objc_msgSend_upsertAskForTimeRequest_fromUser_inContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upsertAskForTimeRequest:fromUser:inContext:error:");
}

id objc_msgSend_usage(void *a1, const char *a2, ...)
{
  return _[a1 usage];
}

id objc_msgSend_usageGenesisDate(void *a1, const char *a2, ...)
{
  return _[a1 usageGenesisDate];
}

id objc_msgSend_usageItemType(void *a1, const char *a2, ...)
{
  return _[a1 usageItemType];
}

id objc_msgSend_usageLimit(void *a1, const char *a2, ...)
{
  return _[a1 usageLimit];
}

id objc_msgSend_usageLimitsResultsController(void *a1, const char *a2, ...)
{
  return _[a1 usageLimitsResultsController];
}

id objc_msgSend_usageManager(void *a1, const char *a2, ...)
{
  return _[a1 usageManager];
}

id objc_msgSend_usageOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 usageOperationQueue];
}

id objc_msgSend_usageQueue(void *a1, const char *a2, ...)
{
  return _[a1 usageQueue];
}

id objc_msgSend_usageReporter(void *a1, const char *a2, ...)
{
  return _[a1 usageReporter];
}

id objc_msgSend_usageReportsByCoreDuetIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 usageReportsByCoreDuetIdentifier];
}

id objc_msgSend_usageRequestsFetchedResultsController(void *a1, const char *a2, ...)
{
  return _[a1 usageRequestsFetchedResultsController];
}

id objc_msgSend_usageTrusted(void *a1, const char *a2, ...)
{
  return _[a1 usageTrusted];
}

id objc_msgSend_usageType(void *a1, const char *a2, ...)
{
  return _[a1 usageType];
}

id objc_msgSend_usages(void *a1, const char *a2, ...)
{
  return _[a1 usages];
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _[a1 user];
}

id objc_msgSend_userAliasResolver(void *a1, const char *a2, ...)
{
  return _[a1 userAliasResolver];
}

id objc_msgSend_userAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 userAltDSID];
}

id objc_msgSend_userBookmarks(void *a1, const char *a2, ...)
{
  return _[a1 userBookmarks];
}

id objc_msgSend_userBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userBoolValueForSetting:");
}

id objc_msgSend_userDSID(void *a1, const char *a2, ...)
{
  return _[a1 userDSID];
}

id objc_msgSend_userDSIDForAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDSIDForAppleID:");
}

id objc_msgSend_userDefaults(void *a1, const char *a2, ...)
{
  return _[a1 userDefaults];
}

id objc_msgSend_userDeviceStateID(void *a1, const char *a2, ...)
{
  return _[a1 userDeviceStateID];
}

id objc_msgSend_userDeviceStates(void *a1, const char *a2, ...)
{
  return _[a1 userDeviceStates];
}

id objc_msgSend_userID(void *a1, const char *a2, ...)
{
  return _[a1 userID];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userKnowledgeStore(void *a1, const char *a2, ...)
{
  return _[a1 userKnowledgeStore];
}

id objc_msgSend_userNotificationManager(void *a1, const char *a2, ...)
{
  return _[a1 userNotificationManager];
}

id objc_msgSend_userNotifications(void *a1, const char *a2, ...)
{
  return _[a1 userNotifications];
}

id objc_msgSend_userSafety(void *a1, const char *a2, ...)
{
  return _[a1 userSafety];
}

id objc_msgSend_userSafetyPolicyWriter(void *a1, const char *a2, ...)
{
  return _[a1 userSafetyPolicyWriter];
}

id objc_msgSend_userToRespondForGivenCheckingInUser_targetableFamilyMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userToRespondForGivenCheckingInUser:targetableFamilyMembers:");
}

id objc_msgSend_userValueForIntersectionSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userValueForIntersectionSetting:");
}

id objc_msgSend_userValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userValueForSetting:");
}

id objc_msgSend_userValueForUnionSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userValueForUnionSetting:");
}

id objc_msgSend_users(void *a1, const char *a2, ...)
{
  return _[a1 users];
}

id objc_msgSend_v2Disable(void *a1, const char *a2, ...)
{
  return _[a1 v2Disable];
}

id objc_msgSend_validateAddressIsAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAddressIsAllowed:");
}

id objc_msgSend_validateBlueprintDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateBlueprintDictionary:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueClass(void *a1, const char *a2, ...)
{
  return _[a1 valueClass];
}

id objc_msgSend_valueForCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForCapability:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_versionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 versionIdentifier];
}

id objc_msgSend_versionVector(void *a1, const char *a2, ...)
{
  return _[a1 versionVector];
}

id objc_msgSend_viewContext(void *a1, const char *a2, ...)
{
  return _[a1 viewContext];
}

id objc_msgSend_viewControllerClassName(void *a1, const char *a2, ...)
{
  return _[a1 viewControllerClassName];
}

id objc_msgSend_viewModel(void *a1, const char *a2, ...)
{
  return _[a1 viewModel];
}

id objc_msgSend_watchSyncManager(void *a1, const char *a2, ...)
{
  return _[a1 watchSyncManager];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_webUsage(void *a1, const char *a2, ...)
{
  return _[a1 webUsage];
}

id objc_msgSend_webUsageTrusted(void *a1, const char *a2, ...)
{
  return _[a1 webUsageTrusted];
}

id objc_msgSend_websiteIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 websiteIdentifiers];
}

id objc_msgSend_weeklyAlarmObserver(void *a1, const char *a2, ...)
{
  return _[a1 weeklyAlarmObserver];
}

id objc_msgSend_writeAskForTimeRequestEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeAskForTimeRequestEvent:");
}

id objc_msgSend_writeAskForTimeResponseEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeAskForTimeResponseEvent:");
}

id objc_msgSend_writeConfigurationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeConfigurationChange:");
}

id objc_msgSend_writeData_toFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeData:toFileURL:error:");
}

id objc_msgSend_writeDeviceStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDeviceStateChange:");
}

id objc_msgSend_writeDowntimeStateEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDowntimeStateEvent:");
}

id objc_msgSend_writeEyeReliefState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeEyeReliefState:");
}

id objc_msgSend_writeFamilyMemberGenesisStateItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeFamilyMemberGenesisStateItems:");
}

id objc_msgSend_writeSetupConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeSetupConfiguration:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_writeUserSafetyInterventionPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUserSafetyInterventionPolicy:");
}

id objc_msgSend_xpcServiceProvider(void *a1, const char *a2, ...)
{
  return _[a1 xpcServiceProvider];
}